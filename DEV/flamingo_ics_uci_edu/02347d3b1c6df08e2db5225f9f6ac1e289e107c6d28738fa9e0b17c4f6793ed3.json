{"url": "http://flamingo.ics.uci.edu/releases/4.1/src/lbaktree/src/rstartree/util.cc", "content": "/*\n $Id: util.cc 6148 2012-02-22 23:13:40Z salsubaiee $\n\n Copyright (C) 2010 by The Regents of the University of California\n\n Redistribution of this file is permitted under\n the terms of the BSD license.\n\n Date: 11/01/2009\n Author: Sattam Alsubaiee <salsubai (at) ics.uci.edu>\n         Shengyue Ji <shengyuj (at) ics.uci.edu>\n*/\n\n#include \"util.h\"\n#include <algorithm>\n\n\nbool Rectangle::intersects(const Rectangle &rect) const\n{\n    return min.x <= rect.max.x && rect.min.x <= max.x\n           && min.y <= rect.max.y && rect.min.y <= max.y;\n}\n\nbool Rectangle::intersect(const Rectangle &rect)\n{\n    if(rect.min.x > min.x)min.x = rect.min.x;\n    if(rect.max.x < max.x)max.x = rect.max.x;\n    if(rect.min.y > min.y)min.y = rect.min.y;\n    if(rect.max.y < max.y)max.y = rect.max.y;\n\n    if(min.x > max.x || min.y > max.y)\n        return false;\n    return true;\n}\n\ndouble Rectangle::minDist2(Point p) const\n{\n    double dx = 0.0;\n    double dy = 0.0;\n    if(p.x < min.x)dx = (double)min.x - p.x;\n    else if(p.x > max.x)dx = (double)p.x - max.x;\n    if(p.y < min.y)dy = (double)min.y - p.y;\n    else if(p.y > max.y)dy = (double)p.y - max.y;\n    return dx * dx + dy * dy;\n}\n\n\ndouble Rectangle::area() const\n{\n    return ((double)max.x - min.x) * ((double)max.y - min.y);\n}\n\ndouble Rectangle::enlargedArea(const Rectangle &rect) const\n{\n    Rectangle rect2 = *this;\n    rect2.enlarge(rect);\n    return rect2.area() - area();\n}\n\nvoid Rectangle::enlarge(const Rectangle &rect)\n{\n    if(rect.min.x < min.x)min.x = rect.min.x;\n    if(rect.max.x > max.x)max.x = rect.max.x;\n    if(rect.min.y < min.y)min.y = rect.min.y;\n    if(rect.max.y > max.y)max.y = rect.max.y;\n}\n\ndouble Rectangle::overlapedArea(const Rectangle &rect) const\n{\n    double x, y;\n    x = std::min((double)rect.max.x, (double)max.x) -\n        std::max((double)rect.min.x, (double)min.x);\n    if (x <= 0.0)\n        return 0;\n    y = std::min((double)rect.max.y, (double)max.y) -\n        std::max((double)rect.min.y, (double)min.y);\n    if (y <= 0.0)\n        return 0;\n    return x * y;\n}\n\ndouble Rectangle::margin() const\n{\n    return 2.0 * (((double)max.x - min.x) + ((double)max.y - min.y));\n}\n", "encoding": "ascii"}