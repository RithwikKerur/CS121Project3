{"url": "http://flamingo.ics.uci.edu/releases/3.0/docs/GettingStartedDoc.html", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:html=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>GettingStartedDoc  Group</title><style type=\"text/css\">\n           @import url(media/trac.css);\n          </style></head><body><p><a href=\"index.html\">Back to Index</a></p><hr></hr><div class=\"wikipage searchable\">\n<p>AppString\n&gt; AppStringDoc</p>\n<div class=\"wiki-toc\">\n<ol>\n<li><a href=\"#GettingStarted\">Getting Started</a>\n<ol>\n<li><a href=\"#Introduction\">Introduction</a></li>\n<li><a href=\"#DownloadingthePackage\">Downloading the\nPackage</a></li>\n<li><a href=\"#Requirements\">Requirements</a></li>\n<li><a href=\"#WrappersSimplestWayToUseTheLibrary\">Wrappers\n(Simplest Way To Use The Library)</a></li>\n<li><a href=\"#Step-By-StepGuide\">Step-By-Step Guide</a>\n<ol>\n<li><a href=\"#Step1:CompilingTheLibrary\">Step1: Compiling The\nLibrary</a></li>\n<li><a href=\"#Step2:UsingTheLibraryInAnApplication\">Step2: Using\nThe Library In An Application</a>\n<ol>\n<li><a href=\"#Option1:In-MemoryIndex\">Option1: In-Memory\nIndex</a></li>\n<li><a href=\"#Option2:In-MemoryCompressedIndex\">Option2: In-Memory,\nCompressed Index</a></li>\n<li><a href=\"#Option3:On-DiskIndex\">Option3: On-Disk Index</a></li>\n</ol>\n</li>\n<li><a href=\"#Step3:CompilingAndRunningTheApplication\">Step3:\nCompiling And Running The Application</a></li>\n</ol>\n</li>\n<li><a href=\"#BasicUsage\">Basic Usage</a></li>\n<li><a href=\"#ExampleFiles\">Example Files</a></li>\n</ol>\n</li>\n</ol>\n</div>\n<h1 id=\"GettingStarted\">Getting Started</h1>\n<h2 id=\"Introduction\">Introduction</h2>\n<p>This tutorial will guide through the basics steps needed to\nperform approximate string search on a collection of strings using\nthis library. This guide focuses on how to use the FilterTree\n(FilterTreeDoc) module.</p>\n<h2 id=\"DownloadingthePackage\">Downloading the Package</h2>\n<ul>\n<li>The entire package may be downloaded from <a class=\"ext-link\" href=\"http://flamingo.ics.uci.edu/releases/3.0/flamingo-3.0.tgz\"><span class=\"icon\">\nhttp://flamingo.ics.uci.edu/releases/3.0/flamingo-3.0.tgz</span></a></li>\n</ul>\n<h2 id=\"Requirements\">Requirements</h2>\n<p>Most modules in this release were developed and tested on Ubuntu\nLinux using the GNU GCC/G++ compiler.</p>\n<p>In order to compile and run most modules you will need the\nfollowing:</p>\n<ul>\n<li>Linux environment (preferably a Debian based Linux, e.g.\nUbuntu)</li>\n<li>C++ compiler (GCC/G++ version 4.0 or later)</li>\n<li>C++ Boost library, <a class=\"ext-link\" href=\"http://www.boost.org\"><span class=\"icon\">http://www.boost.org</span></a> (only required for PartEnumDoc)</li>\n</ul>\n<p>On systems with the aptitude package manager (e.g. Ubuntu,\nDebian) you can install all required packages by typing the\nfollowing as root user (or using sudo):</p>\n<pre class=\"wiki\">\n$ apt-get install gcc g++ libboost-dev\n</pre>\n<p>The module MatTreeDoc was developed in\nVisual C++. No makefile is provided for that module. We recommend\nusing Windows and Visual C++ for that module.</p>\n<h2 id=\"WrappersSimplestWayToUseTheLibrary\">Wrappers (Simplest Way\nTo Use The Library)</h2>\n<p>For your convenience, we have added wrappers that contain all\nnecessary objects as described in section \"Basic Usage\". All you\nneed to do to build an index and execute queries, is to create an\ninstance of a wrapper. These wrappers initialize components with\ndefault values and are the simplest and fastest way to use our\nlibrary - at the expense of being able to control tuning parameters\n(which filters are used, fanout, etc.).<br></br>\nWe recommend browsing through the code in\n<strong>filtertree/wrappers/example.cc</strong>.</p>\n<h2 id=\"Step-By-StepGuide\">Step-By-Step Guide</h2>\n<p>In this guide we will use a wrapper to show you how to perform\napproximate string search using the edit distance.</p>\n<h3 id=\"Step1:CompilingTheLibrary\">Step1: Compiling The\nLibrary</h3>\n<p>Let us say you have extracted the archive to the following\ndirectory: <strong>/home/joe/flamingo-3.0</strong><br></br>\nThen you need to edit\n<strong>/home/joe/flamingo-3.0/src/makefile.inc</strong> and set\nCODEBASEROOT to the root directory of the source files, i.e.\n<strong>/home/joe/flamingo-3.0/src</strong><br></br>\nAfter the modifications, your\n<strong>/home/joe/flamingo-3.0/src/makefile.inc</strong> should\nlook like this:</p>\n<pre class=\"wiki\">\nCODEBASEROOT = /home/abehm/group/codebase/appstring/tags/release-3.0\nAPPSTRINGROOT = $(CODEBASEROOT)\n\nVPATH = $(APPSTRINGROOT)\n\nCC = g++\n\n### Cygwin:\n# CC = g++-4\n# CXX = g++-4\n\nCPPFLAGS = -Wall -I$(APPSTRINGROOT) -O3 -DNDEBUG\n# CPPFLAGS = -Wall -I$(APPSTRINGROOT) -O3\n# CPPFLAGS = -Wall -I$(APPSTRINGROOT) -g -pg\n\nifndef CODEBASEROOT\n$(error -- - EDIT MAKEFILE.INC - -- Please edit makefile.inc and set the CODEBASEROOT variable to the absolute path of the source code directory. \ne.g., if you put the code in /home/joe/flamingo-3.0/src do: CODEBASEROOT = /home/joe/flamingo-3.0/src)\nendif\n</pre>\n<p>Now you can compile the wrapper library (and all other required\nlibraries) by entering\n<strong>/home/joe/flamingo-3.0/src/filtertree/wrappers</strong> and\nrunning <strong>make</strong>, i.e.:</p>\n<pre class=\"wiki\">\n$ cd /home/joe/flamingo-3.0/src/filtertree/wrappers\n$ make\n</pre>\n<p>There should now be a file\n<strong>libfiltertreewrappers.a</strong> in\n<strong>/home/joe/flamingo-3.0/src/filtertree/wrappers</strong>,\ni.e. for an <strong>ls -l</strong> you should get an output similar\nto the following:</p>\n<pre class=\"wiki\">\n$ ls -l\n-rwxr-xr-x 1 joe joe 534818 2010-03-25 15:49 example\n-rw-r--r-- 1 joe joe   8883 2010-03-24 16:06 example.cc\n-rw-r--r-- 1 joe joe 255092 2010-03-25 15:48 example.o\n-rw-r--r-- 1 joe joe   1476 2010-03-25 15:48 libfiltertreewrappers.a\n-rw-r--r-- 1 joe joe   2117 2010-03-24 15:56 makefile\n-rw-r--r-- 1 joe joe   1814 2010-03-24 16:06 wrapperabs.h\n-rw-r--r-- 1 joe joe   2181 2010-03-24 16:06 wrappercombinelists.h\n-rw-r--r-- 1 joe joe   4814 2010-03-24 16:06 wrapperdiscardlists.h\n-rw-r--r-- 1 joe joe   2076 2010-03-24 15:58 wrapperondisk.h\n-rw-r--r-- 1 joe joe    308 2010-03-24 16:06 wrappers.cc\n-rw-r--r-- 1 joe joe   5034 2010-03-24 16:06 wrappers.h\n-rw-r--r-- 1 joe joe    994 2010-03-24 16:06 wrappersimple.h\n-rw-r--r-- 1 joe joe   1344 2010-03-25 15:48 wrappers.o\n</pre>\n<p>(note that the exact file sizes may differ from yours)</p>\n<h3 id=\"Step2:UsingTheLibraryInAnApplication\">Step2: Using The\nLibrary In An Application</h3>\n<p>Now that we have compiled the library, we are ready to include\nit into an application.<br></br>\nLet us assume you wish to use the library in an application located\nin <strong>/home/joe/searchapp</strong> that consists of one source\nfile <strong>/home/joe/searchapp/main.cc</strong><br></br>\nWe will discuss three options: using an in-memory index with and\nwithout compression, and a disk-based index.</p>\n<h4 id=\"Option1:In-MemoryIndex\">Option1: In-Memory Index</h4>\n<p>You can copy and paste the following lines of source code into\n<strong>/home/joe/searchapp/main.cc</strong> for us to compile:</p>\n<pre class=\"wiki\">\n#include \"filtertree/wrappers/wrappers.h\"\n\nint main() {\n  StringContainerVector strContainer;\n  // read 4k lines from the file specified\n  strContainer.fillContainer(\"/home/joe/flamingo-3.0/src/filtertree/data/female_names.txt\", 4000); \n  \n  WrapperSimpleEd wrapper(&amp;strContainer, 2); // use a simple wrapper that uses the edit distance and 2-grams\n  wrapper.buildIndex();\n\n  float editDistance = 1.0f;\n  string queryString = \"kathrin\";\n\n  vector&lt;unsigned&gt; resultStringIDs; // where to store the result string ids\n  wrapper.search(queryString, editDistance, resultStringIDs);\n\n  // print out the result strings\n  cout &lt;&lt; \"SIMILAR STRINGS: \" &lt;&lt; endl;\n  for(unsigned i = 0; i &lt; resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs.at(i));\n    cout &lt;&lt; tmp &lt;&lt; endl;\n  }\n\n  return 0;\n}\n</pre>\n<p>In this example all data structures are stored in main\nmemory.<br></br>\nThis application will use the first 4000 lines of\n<strong>/home/joe/flamingo-3.0/src/filtertree/data/female_names.txt</strong>\nas the data strings.<br></br>\nIt will build an index to support approximate string search and\nanswer a query that asks for all data strings that are within an\nedit-distance of 1 to \"kathrin\".<br></br>\nFinally, the results will be displayed.</p>\n<h4 id=\"Option2:In-MemoryCompressedIndex\">Option2: In-Memory,\nCompressed Index</h4>\n<p>You can copy and paste the following lines of source code into\n<strong>/home/joe/searchapp/main.cc</strong> for us to compile:</p>\n<pre class=\"wiki\">\n#include \"filtertree/wrappers/wrappers.h\"\n\nint main() {\n  StringContainerVector strContainer;\n  // read 4k lines from the file specified\n  strContainer.fillContainer(\"/home/joe/flamingo-3.0/src/filtertree/data/female_names.txt\", 4000); \n  \n  // use wrapper for compressed index\n  // index is compressed by discarding lists, using longest-lists-first (LLF) method\n  // the reduction ratio is 0.5\n  WrapperDiscardListsLLFEd wrapper(&amp;strContainer, 2, true, 0.5);\n  wrapper.buildIndex();\n\n  float editDistance = 1.0f;\n  string queryString = \"kathrin\";\n\n  vector&lt;unsigned&gt; resultStringIDs; // where to store the result string ids\n  wrapper.search(queryString, editDistance, resultStringIDs);\n\n  // print out the result strings\n  cout &lt;&lt; \"SIMILAR STRINGS: \" &lt;&lt; endl;\n  for(unsigned i = 0; i &lt; resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs.at(i));\n    cout &lt;&lt; tmp &lt;&lt; endl;\n  }\n\n  return 0;\n}\n</pre>\n<p>In this example all data structures are stored in main\nmemory.<br></br>\nThis application will use the first 4000 lines of\n<strong>/home/joe/flamingo-3.0/src/filtertree/data/female_names.txt</strong>\nas the data strings.<br></br>\nIt will build an index to support approximate string search and\nanswer a query that asks for all data strings that are within an\nedit-distance of 1 to \"kathrin\".<br></br>\nFinally, the results will be displayed.</p>\n<h4 id=\"Option3:On-DiskIndex\">Option3: On-Disk Index</h4>\n<p>You can copy and paste the following lines of source code into\n<strong>/home/joe/searchapp/main.cc</strong> for us to compile:</p>\n<pre class=\"wiki\">\n#include \"filtertree/wrappers/wrappers.h\"\n\nint main() {\n  StringContainerRM strContainer;\n  strContainer.createAndOpen(\"collection.rm\");\n  // read 4k lines from the file specified\n  strContainer.fillContainer(\"/home/joe/flamingo-3.0/src/filtertree/data/female_names.txt\", 4000);\n  \n  // use a simple wrapper that uses the edit distance and 2-grams, \n  // inverted lists are saved to the file index.ix\n  WrapperOnDiskSimpleEd wrapper(&amp;strContainer, \"index.ix\", 2); \n  wrapper.buildIndex();\n\n  float editDistance = 1.0f;\n  string queryString = \"kathrin\";\n\n  vector&lt;unsigned&gt; resultStringIDs; // where to store the result string ids\n  wrapper.search(queryString, editDistance, resultStringIDs);\n\n  // print out the result strings\n  cout &lt;&lt; \"SIMILAR STRINGS: \" &lt;&lt; endl;\n  for(unsigned i = 0; i &lt; resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs.at(i));\n    cout &lt;&lt; tmp &lt;&lt; endl;\n  }\n\n  return 0;\n}\n</pre>\n<p>In this example, both the inverted index and the data strings\nare stored on disk (the FilterTree remains in memory).<br></br>\nThis application will use the first 4000 lines of\n<strong>/home/joe/flamingo-3.0/src/filtertree/data/female_names.txt</strong>\nas the data strings.<br></br>\nIt will build an index to support approximate string search and\nanswer a query that asks for all data strings that are within an\nedit-distance of 1 to \"kathrin\".<br></br>\nFinally, the results will be displayed.</p>\n<h3 id=\"Step3:CompilingAndRunningTheApplication\">Step3: Compiling\nAnd Running The Application</h3>\n<p>Since we decided to have every module produce it's own library\n(.a file) it is necessary to link several .a files with the main.o\n(produced by /home/joe/searchapp/main.cc).<br></br>\nThe simplest way to achieve this is to create a makefile for the\napplication, i.e. create a file\n<strong>/home/joe/searchapp/makefile</strong> with the following\ncontents:</p>\n<pre class=\"wiki\">\ninclude /home/joe/flamingo-3.0/src/makefile.inc\n\nLDFLAGS = -lrt\n\nall: main\n\nmain:   main.o \\\n                $(APPSTRINGROOT)/common/libcommon.a \\\n                $(APPSTRINGROOT)/listmerger/liblistmerger.a \\\n                $(APPSTRINGROOT)/filtertree/libfiltertree.a \\\n                $(APPSTRINGROOT)/filtertree/wrappers/libfiltertreewrappers.a \\\n                $(APPSTRINGROOT)/sepia/libsepia.a \\\n                $(APPSTRINGROOT)/util/libutil.a\n</pre>\n<p>Now you should be able to compile the application using\n<strong>make</strong>, i.e.</p>\n<pre class=\"wiki\">\n$ make\n</pre>\n<p>If make was successful, you have compiled and linked the\napplication! It is time to try and run it by typing</p>\n<pre class=\"wiki\">\n$ ./main\n</pre>\n<p>You should have the an output something similar to the\nfollowing:</p>\n<pre class=\"wiki\">\nINPUTFILE: \"/home/joe/flamingo-3.0/src/filtertree/data/female_names.txt\"\n100% FILLING CONTAINER: 4000/4000; 0'0\"/0'0\"   \nSIMILAR STRINGS: \nkathryn\nkathrine\nkatherin\nkathrin\n</pre>\n<p>Congratulations, you have successfully created your first\napplication using The Flamingo Package!</p>\n<h2 id=\"BasicUsage\">Basic Usage</h2>\n<p>Approximate string search can be performed in two basic steps:\n(1) building the index, and (2) answering queries using the index.\nWe will now discuss the basic components for each of the steps at a\nhigh-level.</p>\n<ol>\n<li>Building The Index, Needed Components\n<ul>\n<li>String Container (stores the data strings on which you want to\nperform queries)</li>\n<li>Gram Generator (decomposes strings into grams)</li>\n<li>Indexer (builds the filter tree and the inverted lists, needs a\nString Container and a Gram Generator)</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li>Answering Queries Using The Index, Needed Components:\n<ul>\n<li>List Merger (solves the T-occurrence problem given a set of\ninverted lists and a merging-threshold)</li>\n<li>Indexer (builds the filtertree and the inverted-lists, needs a\nString Container and a Gram Generator)</li>\n<li>Searcher (answers queries, needs a List Merger and an\nIndexer)</li>\n<li>Similarity Metric (represents the similarity metric to be\nused)</li>\n<li>Query (contains the query string, the similarity metric and the\nsimilarity threshold)</li>\n</ul>\n</li>\n</ol>\n<p>Refer to <strong>filtertree/example.cc</strong> for some\nadvanced examples.</p>\n<h2 id=\"ExampleFiles\">Example Files</h2>\n<p>Apart from reading this guide, we recommend you browse through\nthe code of some example files. We have provided these files to\nhelp you understand how to use the library as quickly as\npossible.</p>\n<ul>\n<li>filtertree/wrappers/example.cc</li>\n<li>filtertree/example.cc</li>\n<li>filtertree/perftest.cc</li>\n</ul>\n</div><div class=\"footer\"><hr></hr><p><a href=\"index.html\">Back to Index</a></p></div></body></html>\n", "encoding": "ascii"}