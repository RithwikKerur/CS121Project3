{"url": "http://flamingo.ics.uci.edu/releases/2.0/src/filtertree/filtertypes.cc", "content": "/*\n  $Id: filtertypes.cc 4025 2008-10-01 00:01:14Z abehm $\n\n  Copyright (C) 2008 by The Regents of the University of California\n\t\n  Redistribution of this file is permitted under\n  the terms of the BSD license\n    \n  Date: 04/04/2008\n  Author: Alexander Behm <abehm (at) ics.uci.edu>\n*/\n\n#include \"filtertypes.h\"\n#include \"util/misc.h\"\n\nAbstractFilter* \nAbstractFilter::\nloadFilterInstance(ifstream& fpIn) {\n  FilterType filterType;\n  fpIn.read((char*)&filterType, sizeof(FilterType));\n\n  switch(filterType) {\n  case FT_LENGTH: return new LengthFilter(fpIn); break;\n  case FT_CHECKSUM: return new ChecksumFilter(fpIn); break;\n  default: {\n    cout << \"WARNING: attempt to read filter from file failed. Unknown filter type.\" << endl;\n    return NULL;\n  } break;\n  }\n}\n\nLengthFilter::\nLengthFilter(ifstream& fpIn) {\n  ft = FT_LENGTH;\n  fpIn.read((char*)&maxStrLength, sizeof(unsigned));\n}\n\nunsigned \nLengthFilter::\ngetFilterLbound() const {\n  return 0;\n}\n\nunsigned \nLengthFilter::\ngetFilterUbound() const  {\n  return maxStrLength;  \n}\n\nunsigned\nLengthFilter::\ngetKey(const string& s) const  {\n  return s.length();\n}\n\nAbstractFilter* \nLengthFilter::\nclone() const {\n  return new LengthFilter(maxStrLength);\n}\n\nvoid\nLengthFilter::\nsaveFilterInstance(ofstream& fpOut) const {\n  fpOut.write((const char*)&ft, sizeof(FilterType));\n  fpOut.write((const char*)&maxStrLength, sizeof(unsigned));\n}\n\nChecksumFilter::\nChecksumFilter(ifstream& fpIn) {\n  ft = FT_CHECKSUM;\n  fpIn.read((char*)&maxStrLength, sizeof(unsigned));  \n  maxChecksum = maxStrLength * CHECKSUM_ASCII_MAX;\n}\n\nunsigned \nChecksumFilter::\ngetFilterLbound() const {\n  return 0;\n}\n\nunsigned \nChecksumFilter::\ngetFilterUbound() const {\n  return maxChecksum;\n}\n\nunsigned\nChecksumFilter::\ngetKey(const string& s) const { \n  return checksum(s);\n}\n\nAbstractFilter* \nChecksumFilter::\nclone() const {\n  return new ChecksumFilter(maxStrLength);\n}\n\nvoid\nChecksumFilter::\nsaveFilterInstance(ofstream& fpOut) const {\n  fpOut.write((const char*)&ft, sizeof(FilterType));\n  fpOut.write((const char*)&maxStrLength, sizeof(unsigned));\n}\n", "encoding": "ascii"}