{"url": "http://flamingo.ics.uci.edu/releases/2.0/src/filtertree/perftest.cc", "content": "/*\n  $Id: perftest.cc 4057 2008-10-10 22:05:50Z abehm $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\t\n  Redistribution of this file is permitted under\n  the terms of the BSD license\n    \n  Date: 09/19/2007\n  Author: Alexander Behm <abehm (at) ics.uci.edu>\n*/\n\n#include \"ftindexersimple.h\"\n#include \"ftsearchermem.h\"\n#include \"statsgen.h\"\n\nvoid generateStatsRun();\n\nint main() {\n  generateStatsRun();\n\n  return 0;\n}\n\nvoid generateStatsRun() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen); // using the edit distance\n  //SimMetricJacc simMetric(gramGen); // using jaccard similarity\n  //SimMetricCos simMetric(gramGen); // using cosine similarity\n  //SimMetricDice simMetric(gramGen); // using dice similarity\n  float ed = 1.0f; // this represents the similarity threshold, in this case edit distance 1\n  DivideSkipMerger<> merger;\n\n  typedef FtIndexerSimple<> indexer;\n  typedef FtSearcherMem<indexer> searcher;\n  StatsGenConfig config;\n  config.setGramGen(&gramGen);\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setDictSize(10, 180, 10); // the string dictionary size from 10 to 180 in a 10 step\n  config.setFanout(50, 50, 50); // fanout from 50 to 50 in step 50\n  config.setMaxStrLength(20);\n  config.clearFilters();\n  config.addFilter(new LengthFilter(20));\n  config.setNumberQueries(100); // set total number of queries for the workload to run\n  config.setDistinctQueries(100); // set distinct number of queries generated by randomly picking strings from the dictionary\n  config.setQueriesDistribution(QD_UNIFORM); // can be QD_UNIFORM or QD_ZIPF\n  //config.setZipfSkew(1); // zipf skew parameter if QD_ZIPF specified\n  config.setNumberRuns(5); // number times to repeat running workload to stabilize numbers\n  config.setRebuildIndexEveryRun(false); // rebuild the index for every run?\n  config.overrideWorkload = false; // if set to true, the workload will be read from a file specified\n  //config.workloadFile = \"custom_workload.txt\" // if overrideWorkload is set then read the workload from this file\n  \n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setDictDataFile(\"data/dummy.txt\"); // set the data file\n  config.setOutputFile(\"perftest_search_stats.txt\"); // set the outputfile for runtime statistics\n  statsgen.generate(); // run the experiment\n\n  cout << \"SUCCESS!\" << endl;\n  cout << \"Please refer to the documentation of the FilterTree module for more information\" << endl;\n}\n\n", "encoding": "ascii"}