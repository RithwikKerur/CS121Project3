{"url": "http://flamingo.ics.uci.edu/releases/4.1/src/listmerger/src/unittest.cc", "content": "/*  \n $Id: unittest.cc 5748 2010-09-30 08:08:37Z abehm $   \n\n Copyright (C) 2010 by The Regents of the University of California\n \t\n Redistribution of this file is permitted under the terms of \n the BSD license.\n\n Date: 05/14/2007\n Author: Jiaheng Lu, Alexander Behm\n*/\n\n#include <vector>\n#include <string.h>\n#include <set>\n\n#include \"listmerger.h\"\n#include \"divideskipmerger.h\"\n#include \"heapmerger.h\"\n#include \"mergeoptmerger.h\"\n#include \"mergeskipmerger.h\"\n#include \"scancountmerger.h\"\n#include \"util/src/array.h\"\n#include \"util/src/debug.h\"\n\nvoid getResults(vector<unsigned>* results, unsigned threshold);\n\ntemplate<class Merger>\nbool runTest(Merger& merger);\n\nvoid initInvLists();\nvoid destroyInvLists();\nvoid initExpectedResults();\nvoid destroyExpectedResults();\n\nunsigned numInvLists = 20;\nunsigned maxListLength = 1000000;\nunsigned maxStringId = 1000000;\nunsigned maxThreshold = numInvLists + 5;\n\nvector<vector<unsigned>* > invLists;\nvector<vector<unsigned>* > expectedResults;\n\nint main() {  \n  initInvLists();\n  initExpectedResults();\n\n  cout << endl;\n  \n  bool passed = false;\n\n  DivideSkipMerger<> dsMerger;\n  passed = runTest<DivideSkipMerger<> >(dsMerger);  \n  if(passed) cout << \"PASSED\" << endl;\n  else cout << \"FAILED\" << endl;\n  cout << endl;\n\n  HeapMerger<> heapMerger;\n  passed = runTest<HeapMerger<> >(heapMerger);  \n  if(passed) cout << \"PASSED\" << endl;\n  else cout << \"FAILED\" << endl;\n  cout << endl;\n\n  MergeOptMerger<> moMerger;\n  passed = runTest<MergeOptMerger<> >(moMerger);  \n  if(passed) cout << \"PASSED\" << endl;\n  else cout << \"FAILED\" << endl;\n  cout << endl;\n\n  MergeSkipMerger<> msMerger;\n  passed = runTest<MergeSkipMerger<> >(msMerger);  \n  if(passed) cout << \"PASSED\" << endl;\n  else cout << \"FAILED\" << endl;\n  cout << endl;\n\n  ScanCountMerger<> scMerger(maxStringId);\n  passed = runTest<ScanCountMerger<> >(scMerger);\n  if(passed) cout << \"PASSED\" << endl;\n  else cout << \"FAILED\" << endl;\n  cout << endl;  \n\n  destroyExpectedResults();\n  destroyInvLists();\n}\n\ntemplate<class Merger>\nbool runTest(Merger& merger) {\n  \n  string msg = \"RUNNING TEST FOR \" + merger.getName();\n  TIMER_START(msg, maxThreshold);\n  for(unsigned i = 0; i < maxThreshold; i++) {\n    vector<unsigned> results;\n    merger.merge(invLists, i+1, results);\n    \n    if(results.size() != expectedResults[i]->size()) return false;\n    \n    sort(results.begin(), results.end()); // in case merger does not deliver results sorted by id\n    \n    // compare results with expected results\n    for(unsigned j = 0; j < expectedResults[i]->size(); j++) {\n      if(results[j] != expectedResults[i]->at(j)) return false;\n    }\n    TIMER_STEP();\n  }\n  TIMER_STOP();\n  \n  return true;\n}\n\nvoid initExpectedResults() {\n  TIMER_START(\"COMPUTING EXPECTED RESULTS\", maxThreshold);\n  for(unsigned i = 0; i < maxThreshold; i++) {\n    vector<unsigned>* v = new vector<unsigned>();\n    getResults(v, i+1);\n    expectedResults.push_back(v);\n    TIMER_STEP();\n  }\n  TIMER_STOP();\n}\n\n\nvoid getResults(vector<unsigned>* results, unsigned threshold) {\n  // quick and dirty implementation of scancount \n  unsigned counts[maxStringId];\n  memset(counts, 0, sizeof(unsigned) * maxStringId);\n  \n  for(unsigned i = 0; i < invLists.size(); i++) {\n    for(unsigned j = 0; j < invLists[i]->size(); j++) {\n      counts[invLists[i]->at(j)]++;\n    }\n  }\n\t\t  \n  for(unsigned i = 0; i < maxStringId; i++) {\n    if(counts[i] >= threshold) results->push_back(i);\n  }\n}\n\nvoid initInvLists() {\n  srand(50);\n  \n  TIMER_START(\"GENERATING INVERTED LISTS\", numInvLists);\n  for(unsigned i = 0; i < numInvLists; i++) {\n    vector<unsigned>* v = new vector<unsigned>();\n    invLists.push_back(v);\n    \n    unsigned listLength = rand() % maxListLength;\n    if(listLength == 0) listLength = 1;\n\n    set<unsigned> elements;\n    for(unsigned j = 0; j < listLength; j++) {\n      elements.insert(rand() % maxStringId);\n    }\n    \n    for(set<unsigned>::iterator iter = elements.begin(); iter != elements.end(); iter++) {\n      v->push_back(*iter);\n    }\n    TIMER_STEP();\n  }\n  TIMER_STOP();\n}\n\nvoid destroyInvLists() {\n  for(unsigned i = 0; i < invLists.size(); i++)\n    delete invLists[i];\n}\n\nvoid destroyExpectedResults() {\n  for(unsigned i = 0; i < expectedResults.size(); i++)\n    delete expectedResults[i];\n}\n", "encoding": "ascii"}