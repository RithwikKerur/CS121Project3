{"url": "http://flamingo.ics.uci.edu/releases/3.0/src/sepia/simfunc/editvect.cc", "content": "/*\n  $Id: editvect.cc 4143 2008-12-08 23:23:55Z abehm $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license\n\n  Date: 01/14/2006\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"editvect.h\"\n\nEditVect::EditVect(const string &a, const string &b): ins(0), del(0), sub(0)\n{\n  // uses O(m) space instead of O(nm) as the classic algorithm\n  unsigned n = static_cast<unsigned>(a.length());\n  unsigned m = static_cast<unsigned>(b.length());\n  if (n == 0 || m == 0) {\n    if (n == 0)\n      this->ins = m;\n    else\n      this->del = n;\n    return;\n  }\n  unsigned i, j, d[n + 1][m + 1], mini;\n  for (i = 0; i <= n; i++) d[i][0] = i;\n  for (j = 0; j <= m; j++) d[0][j] = j;\n  for (i = 1; i <= n; i++)\n    for (j = 1; j <= m; j++)\n      d[i][j] = (min(min(d[i-1][j  ]+1,\n                         d[i  ][j-1]+1),\n                     d[i-1][j-1]+\n                     (a[i-1] == b[j-1]?0:1)));\n  i = n;\n  j = m;\n  while (!(i == 0 && j == 0))\n    if (i == 0 || j == 0) // on the edge - there is only one way from here\n      if (i == 0) {\n        this->ins++;\n        j--;\n      } else {\n        this->del++;\n        i--;\n      }\n    else {\n      mini = min(min(d[i  ][j - 1],\n                     d[i - 1][j  ]),\n                 d[i - 1][j - 1]);\n      if (mini == d[i][j - 1] &&\n          d[i][j] == d[i][j - 1] + 1) { // Insertion\n        ins++;\n        j--;\n      } else if (   mini == d[i - 1][j] &&\n                    d[i][j] == d[i - 1][j] + 1) {\t// Deletion\n        del++;\n        i--;\n      } else { // Substitution\n        sub += d[i][j] - d[i-1][j-1];\n        i--;\n        j--;\n      } \n    }\n}\n\nvoid EditVect::serialize(ofstream &out) const\n{\n  out.write(reinterpret_cast<const char*>(&ins), sizeof(unsigned));\n  out.write(reinterpret_cast<const char*>(&del), sizeof(unsigned));\n  out.write(reinterpret_cast<const char*>(&sub), sizeof(unsigned));\n}\n\nvoid EditVect::deserialize(ifstream &in)\n{\n  in.read(reinterpret_cast<char*>(&ins), sizeof(unsigned));\n  in.read(reinterpret_cast<char*>(&del), sizeof(unsigned));\n  in.read(reinterpret_cast<char*>(&sub), sizeof(unsigned));\n}\n\nostream& EditVect::info(ostream &out)\n{\n  out << \"Metric\" << endl << \"---\" << endl;\n  out << \"Edit Distance\" << endl;\n  out << \"Edit Vector\\t< I, D, S >\" << endl;\n  return out << endl;\n}\n\nostream& operator<<(ostream &out, const EditVect &ev)\n{\n  return out << ev.ins << ' ' << ev.del << ' ' << ev.sub;\n}\n\nistream& operator>>(istream &in, EditVect &ev)\n{\n  return in >> ev.ins >> ev.del >> ev.sub;\n}\n\nbool operator<(const EditVect &left, const EditVect &right)\n{\n  if (&left == &right)\n    return false;\n  if (left.ins != right.ins)\n    return left.ins < right.ins;\n  if (left.del != right.del)\n    return left.del < right.del;\n  return left.sub < right.sub;\n}\n\nbool operator!=(const EditVect &left, const EditVect &right)\n{\n  return left < right || right < left;\n}\n\nEditVectID::EditVectID(const string &a, const string &b)\n{\n  EditVect ev = EditVect(a, b);\n  insDel = ev.ins + ev.del;\n  sub = ev.sub;\n}\n\nostream& operator<<(ostream &out, const EditVectID &ev)\n{\n  return out << ev.insDel << ' ' << ev.sub;\n}\n\nistream& operator>>(istream &in, EditVectID &ev)\n{\n  return in >> ev.insDel >> ev.sub;\n}\n\nbool operator<(const EditVectID &left, const EditVectID &right)\n{\n  if (&left == &right)\n    return false;\n  if (left.insDel != right.insDel)\n    return left.insDel < right.insDel;\n  return left.sub < right.sub;\n}\n\nbool operator!=(const EditVectID &left, const EditVectID &right)\n{\n  return left < right || right < left;\n}\n\nostream& EditVectID::info(ostream &out)\n{\n  out << \"Metric\" << endl << \"---\" << endl;\n  out << \"Edit Distance\" << endl;\n  out << \"Edit Vector\\t< I + D, S >\" << endl;\n  return out << endl;\n}\n\nEditVectIS::EditVectIS(const string &a, const string &b)\n{\n  EditVect ev = EditVect(a, b);\n  insSub = ev.ins + ev.sub;\n  del = ev.del;\n}\n\nostream& operator<<(ostream &out, const EditVectIS &ev)\n{\n  return out << ev.insSub << ' ' << ev.del;\n}\n\nistream& operator>>(istream &in, EditVectIS &ev)\n{\n  return in >> ev.insSub >> ev.del;\n}\n\nbool operator<(const EditVectIS &left, const EditVectIS &right)\n{\n  if (&left == &right)\n    return false;\n  if (left.insSub != right.insSub)\n    return left.insSub < right.insSub;\n  return left.del < right.del;\n}\n\nbool operator!=(const EditVectIS &left, const EditVectIS &right)\n{\n  return left < right || right < left;\n}\n\nostream& EditVectIS::info(ostream &out)\n{\n  out << \"Metric\" << endl << \"---\" << endl;\n  out << \"Edit Distance\" << endl;\n  out << \"Edit Vector\\t< I + S, D >\" << endl;\n  return out << endl;\n}\n\nEditVectDS::EditVectDS(const string &a, const string &b) \n{\n  EditVect ev = EditVect(a, b);\n  delSub = ev.del + ev.sub;\n  ins = ev.ins;\n}\n\nostream& operator<<(ostream &out, const EditVectDS &ev)\n{\n  return out << ev.delSub << ' ' << ev.ins;\n}\n\nistream& operator>>(istream &in, EditVectDS &ev)\n{\n  return in >> ev.delSub >> ev.ins;\n}\n\nbool operator<(const EditVectDS &left, const EditVectDS &right)\n{\n  if (&left == &right)\n    return false;\n  if (left.delSub != right.delSub)\n    return left.delSub < right.delSub;\n  return left.ins < right.ins;\n}\n\nbool operator!=(const EditVectDS &left, const EditVectDS &right) \n{\n  return left < right || right < left;\n}\n\nostream& EditVectDS::info(ostream &out)\n{\n  out << \"Metric\" << endl << \"---\" << endl;\n  out << \"Edit Distance\" << endl;\n  out << \"Edit Vector\\t< D + S, I >\" << endl;\n  return out << endl;\n}\n\nostream& operator<<(ostream &out, const EditVectIDS &ev)\n{\n  return out << ev.insDelSub;\n}\n\nistream& operator>>(istream &in, EditVectIDS &ev)\n{\n  return in >> ev.insDelSub;\n}\n\nbool operator<(const EditVectIDS &left, const EditVectIDS &right) \n{\n  if (&left == &right)\n    return false;\n  return left.insDelSub < right.insDelSub;\n}\n\nbool operator!=(const EditVectIDS &left, const EditVectIDS &right) \n{\n  return left < right || right < left;\n}\n\nostream& EditVectIDS::info(ostream &out)\n{\n  out << \"Metric\" << endl << \"---\" << endl;\n  out << \"Edit Distnace\" << endl;\n  out << \"Edit Vector\\t< I + D + S >\" << endl;\n  return out << endl;\n}\n", "encoding": "ascii"}