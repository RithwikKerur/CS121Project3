{"url": "http://flamingo.ics.uci.edu/releases/4.0/src/filtertree/src/example.cc", "content": "/*\n  $Id: example.cc 5788 2010-10-22 10:09:57Z abehm $\n\n  Copyright (C) 2010 by The Regents of the University of California\n\t\n  Redistribution of this file is permitted under\n  the terms of the BSD license.\n    \n  Date: 02/04/2008\n  Author: Alexander Behm <abehm (at) ics.uci.edu>\n*/\n\n#include <vector>\n#include <algorithm>\n\n#include \"common/src/query.h\"\n#include \"common/src/simmetric.h\"\n\n#include \"ftindexermem.h\"\n#include \"ftsearchermem.h\"\n#include \"ftindexerdiscardlists.h\"\n#include \"ftindexercombinelists.h\"\n#include \"listmerger/src/mergeoptmerger.h\"\n#include \"listmerger/src/scancountmerger.h\"\n\n#include \"ftindexerondisk.h\"\n#include \"ftsearcherondisk.h\"\n#include \"listmerger/src/ondiskmergersimple.h\"\n#include \"listmerger/src/ondiskmergeradapt.h\"\n\n// create a dummy dictionary\nextern void readString(vector<string>& data, const string& filenameData, unsigned count, unsigned maxLineLen);\nstd::vector<string> dictionary;\nvoid initDictionary();\n\nvoid memBasicUsage1();\nvoid memBasicUsage2();\nvoid memBasicUsage3();\nvoid memDiscardLists();\nvoid memCombineLists();\nvoid memAdvancedUsage();\n\nvoid memTopkQueries();\nvoid memIndexMaintenance();\n\nvoid ondiskBasicUsage1();\nvoid ondiskBasicUsage2();\n\nint main() {\n  \n  initDictionary();\n\n  memBasicUsage1();\n  memBasicUsage2();\n  memBasicUsage3();\n  memDiscardLists();\n  memCombineLists();\n  memAdvancedUsage();\n  \n  memTopkQueries();\n  memIndexMaintenance();\n  \n  ondiskBasicUsage1();\n  ondiskBasicUsage2();\n  \n  return 0;\n}\n\nvoid initDictionary() {\n  // params: target vector, filename, number strings to read, max line length\n  readString(dictionary, \"../data/female_names.txt\", 4000, 20);\n}\n\n\n// builds in-memory index with length filter for partitioning\n// fills index from existing collection\nvoid memBasicUsage1() {  \n  cout << \"----- MEM BASIC USAGE 1 ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2); // fixed-length grams\n  SimMetricEd simMetric(gramGen); // edit distance\n  //SimMetricEdNorm simMetric(gramGen); // normalized edit distance\n  //SimMetricJacc simMetric(gramGen); // jaccard similarity\n  //SimMetricCos simMetric(gramGen); // cosine similarity\n  //SimMetricDice simMetric(gramGen); // dice similarity\n  \n  // create simple indexer with default template arguments\n  // default: in-memory index using vector<unsigned> as an inverted list container\n  // first create a string container and fill it with strings to index\n  StringContainerVector strContainer(true); // true indicates statistics gathering, e.g. for auto part filtering\n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(dictionary.begin(), dictionary.end()); // fill the container from a collection\n  FtIndexerMem<> indexer(&strContainer, &gramGen, 20, 10); // maxStrLen=20, fanout=10\n  indexer.addPartFilter(new LengthFilter(20)); // add length filtering with a maximum string length of 20\n  indexer.buildIndex();\n  \n  // create merger\n  MergeOptMerger<> merger;\n  // create searcher passing merger and indexer with default template arguments\n  // default: same as indexer, i.e. assumed simple indexer with vector<unsigned> as inverted lists and MergeOptMerger as merger type\n  FtSearcherMem<> searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 1.0f); // query string, similarity metric, similarity threshold\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"SAVING INDEX\" << endl;\n  indexer.saveIndex(\"exampleindex.ix\");\n\n  cout << \"LOADING INDEX\" << endl;\n  FtIndexerMem<> indexerLoaded(&strContainer);\n  indexerLoaded.loadIndex(\"exampleindex.ix\");\n  \n  resultStringIDs.clear();\n  searcher.setFtIndexer(&indexerLoaded);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n\n  cout << \"----------------------\" << endl << endl;\n}\n\n// builds in-memory index with charsum filter for partitioning\n// fills index from data file\nvoid memBasicUsage2() {  \n  cout << \"----- MEM BASIC USAGE 2 ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2); // fixed-length grams\n  SimMetricEdNorm simMetric(gramGen); // normalized edit distance\n  \n  // create simple indexer with default template arguments\n  // default: in-memory index using vector<unsigned> as an inverted list container\n  // first create a string container and fill it with strings to index\n  StringContainerVector strContainer(true);\n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(\"../data/female_names.txt\", 4000); // fill the container from a datafile and use the first 4000 lines\n  FtIndexerMem<> indexer(&strContainer, &gramGen, 20, 10); // maxStrLen=20, fanout=10\n  indexer.addPartFilter(new CharsumFilter(20)); // add charsum filtering with a maximum string length of 20\n  indexer.buildIndex();\n  \n  // create merger\n  MergeOptMerger<> merger;\n  // create searcher passing merger and indexer with default template arguments\n  // default: same as indexer, i.e. assumed simple indexer with vector<unsigned> as inverted lists and MergeOptMerger as merger type\n  FtSearcherMem<> searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 0.8f);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"SAVING INDEX\" << endl;\n  indexer.saveIndex(\"exampleindex.ix\");\n\n  cout << \"LOADING INDEX\" << endl;\n  FtIndexerMem<> indexerLoaded(&strContainer);\n  indexerLoaded.loadIndex(\"exampleindex.ix\");\n  \n  resultStringIDs.clear();\n  searcher.setFtIndexer(&indexerLoaded);\n  searcher.search(query, resultStringIDs);\n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n\n  cout << \"----------------------\" << endl << endl;\n}\n\n// builds in-memory index with length filter for partitioning\n// fills index from data file\n// uses non-default list-merging algorithm, ScanCount\nvoid memBasicUsage3() {  \n  cout << \"----- MEM BASIC USAGE 3 ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2, false); // fixed-length grams without pre-and postfixing\n  SimMetricJaccBag simMetric(gramGen); // jaccard distance (with bag semantics)\n  \n  // create simple indexer with default template arguments\n  // default: in-memory index using vector<unsigned> as an inverted list container\n  // first create a string container and fill it with strings to index\n  StringContainerVector strContainer(true);\n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(\"../data/female_names.txt\", 4000); // fill the container from a datafile and use the first 4000 lines\n  FtIndexerMem<> indexer(&strContainer, &gramGen, 20, 10); // maxStrLen=20, fanout=10\n  indexer.addPartFilter(new LengthFilter(20)); // add length filtering with a maximum string length of 50\n  indexer.buildIndex();\n  \n  // create merger\n  ScanCountMerger<> merger(4000);\n  // create searcher, specifying a non-default merger\n  FtSearcherMem<FtIndexerMem<>, ScanCountMerger<> > searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 0.7f);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"SAVING INDEX\" << endl;\n  indexer.saveIndex(\"exampleindex.ix\");\n\n  cout << \"LOADING INDEX\" << endl;\n  FtIndexerMem<> indexerLoaded(&strContainer);\n  indexerLoaded.loadIndex(\"exampleindex.ix\");\n  \n  resultStringIDs.clear();\n  searcher.setFtIndexer(&indexerLoaded);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n\n  cout << \"----------------------\" << endl << endl;\n}\n\n// builds in-memory index with length filter for partitioning\n// compresses index by discarding some inverted lists (based on impact tto given workload)\n// fills index from existing collection\n// other compressed indexers are:\n// FtIndexerDiscardListsLLF - discard long lists first\n// FtIndexerDiscardListsSLF - discard short lists first\n// FtIndexerDiscardListsRandom - randomly discard lists first\n// FtIndexerDiscardListsPanicCost - minimize number of panics\n// FtIndexerDiscardListsTimeCost - minimize total running time\n// FtIndexerCombineListsBasic - combine lists based on correlation\n// FtIndexerCombineListsCost - combine lists based on total running time\nvoid memDiscardLists() {\n  cout << \"----- MEM DISCARDLISTS ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2);\n  SimMetricEd simMetric(gramGen);\n  \n  // create index compressed with holes, using TimeCost as hole selection algorithm\n  // default template parameters: in-memory index using vector<unsigned> as an inverted list\n  StringContainerVector strContainer(true);\n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(dictionary.begin(), dictionary.end());\n  // params: string container, gram generator, compression ratio, training workload, training metric, training threshold, ratio cost, \n  //         data sampling fraction, queries sampling fraction, max sting length, fanout\n  FtIndexerDiscardListsTimeCost<> \n    indexer(&strContainer, &gramGen, 0.5f, &dictionary, &simMetric, 1.0f, false, 0.01f, 0.25f, 20, 10);\n  indexer.addPartFilter(new LengthFilter(20));\n  indexer.buildIndex();\n  \n  // create merger\n  MergeOptMerger<> merger;\n  // create searcher passing merger and indexer\n  // must specify indexer type as template argument\n  FtSearcherMem<FtIndexerDiscardListsTimeCost<> > searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 1.0f);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"SAVING INDEX\" << endl;\n  indexer.saveIndex(\"exampleindex.ix\");\n\n  cout << \"LOADING INDEX\" << endl;\n  FtIndexerDiscardListsTimeCost<> indexerLoaded(&strContainer);\n  indexerLoaded.loadIndex(\"exampleindex.ix\");\n  \n  resultStringIDs.clear();\n  searcher.setFtIndexer(&indexerLoaded);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"----------------------------\" << endl << endl;;\n}\n\n// builds in-memory index with length filter for partitioning\n// compresses index by combining some inverted lists (based on impact tto given workload)\n// fills index from existing collection\n// other compressed indexers are:\n// FtIndexerDiscardListsLLF - discard long lists first\n// FtIndexerDiscardListsSLF - discard short lists first\n// FtIndexerDiscardListsRandom - randomly discard lists first\n// FtIndexerDiscardListsPanicCost - minimize number of panics\n// FtIndexerDiscardListsTimeCost - minimize total running time\n// FtIndexerCombineListsBasic - combine lists based on correlation\n// FtIndexerCombineListsCost - combine lists based on total running time\nvoid memCombineLists() {\n  cout << \"----- MEM COMPRESSION UNION ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2);\n  SimMetricEd simMetric(gramGen);\n  \n  // create index compressed with holes, using TimeCost as hole selection algorithm\n  // default template parameters: in-memory index using vector<unsigned> as an inverted list\n  StringContainerVector strContainer(true);\n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(dictionary.begin(), dictionary.end());\n  // params: string container, gram generator, compression ratio, training workload, training metric, training threshold,  \n  //         data sampling fraction, queries sampling fraction, max sting length, fanout\n  FtIndexerCombineListsCost<> \n    indexer(&strContainer, &gramGen, 0.5f, &dictionary, &simMetric, 1.0f, 0.01f, 1.0f, 20, 10);\n  indexer.addPartFilter(new LengthFilter(20));\n  indexer.buildIndex();\n  \n  // create merger\n  MergeOptMerger<> merger;\n  // create searcher passing merger and indexer\n  // must specify indexer type as template argument\n  FtSearcherMem< FtIndexerCombineListsCost<> > searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 1.0f);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"SAVING INDEX\" << endl;\n  indexer.saveIndex(\"exampleindex.ix\");\n\n  cout << \"LOADING INDEX\" << endl;\n  FtIndexerCombineListsCost<> indexerLoaded(&strContainer);\n  indexerLoaded.loadIndex(\"exampleindex.ix\");\n  \n  resultStringIDs.clear();\n  searcher.setFtIndexer(&indexerLoaded);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"----------------------------\" << endl << endl;;\n}\n\n// builds in-memory index with length filter for partitioning\n// compresses index by discarding some inverted lists (based on impact tto given workload)\n// fills index from existing collection\n// uses non-default list-merging algorithm, ScanCount\n// explicitly specifies template parameters, and constructor arguments\nvoid memAdvancedUsage() {\n  cout << \"----- MEM ADVANCED USAGE ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2);\n  SimMetricEd simMetric(gramGen);\n  \n  // create index compressed with holes, using TimeCost as hole selection algorithm \n  // and specifiying the non-default string container and vector<unsigned> as inverted list\n  StringContainerRM strContainer(true);\n  strContainer.createContainer(\"tmpcollection.txt\");\n  strContainer.openContainer(\"tmpcollection.txt\");  \n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(dictionary.begin(), dictionary.end());\n  // params: string container, gram generator, compression ratio, training workload, training metric, training threshold, ratio cost, \n  //         data sampling fraction, queries sampling fraction, max sting length, fanout\n  FtIndexerDiscardListsTimeCost<StringContainerRM, vector<unsigned> > \n    indexer(&strContainer, &gramGen, 0.5f, &dictionary, &simMetric, 2.0f, false, 0.01f, 0.25f, 20, 10);\n  indexer.addPartFilter(new LengthFilter(20));\n  indexer.buildIndex();\n  \n  // create merger specifying inverted list type\n  ScanCountMerger<vector<unsigned> > merger(dictionary.size());\n  // create searcher passing merger and indexer\n  // specify all template arguments, need to specify merger if not default (MergeOptMerger)\n  FtSearcherMem<FtIndexerDiscardListsTimeCost<StringContainerRM, vector<unsigned> >, ScanCountMerger<vector<unsigned> > > searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 1.0f);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"SAVING INDEX\" << endl;\n  indexer.saveIndex(\"exampleindex.ix\");\n\n  cout << \"LOADING INDEX\" << endl;\n  FtIndexerDiscardListsTimeCost<StringContainerRM, vector<unsigned> > indexerLoaded(&strContainer);\n  indexerLoaded.loadIndex(\"exampleindex.ix\");\n  \n  resultStringIDs.clear();\n  searcher.setFtIndexer(&indexerLoaded);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"-------------------------\" << endl << endl;\n}\n\n// builds in-memory index with length filter for partitioning\n// fills index from data file\n// runs a Top-K query based on Edit Distance\n// ATTENTION: Top-K queries are only supported with edit distance\nvoid memTopkQueries() {  \n  cout << \"----- MEM TOPK QUERIES ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2); // fixed-length grams\n  SimMetricEd simMetric(gramGen); // edit distance\n  \n  // create simple indexer with default template arguments\n  // default: in-memory index using vector<unsigned> as an inverted list container\n  // first create a string container and fill it with strings to index\n  StringContainerVector strContainer(true); // true indicates statistics gathering, e.g. for auto part filtering\n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(dictionary.begin(), dictionary.end()); // fill the container from a collection\n  FtIndexerMem<> indexer(&strContainer, &gramGen, 20, 10); // maxStrLen=20, fanout=10\n  indexer.addPartFilter(new LengthFilter(20)); // add length filtering with a maximum string length of 20\n  indexer.buildIndex();\n  \n  // create merger\n  MergeOptMerger<> merger;\n  // create searcher passing merger and indexer with default template arguments\n  // default: same as indexer, i.e. assumed simple indexer with vector<unsigned> as inverted lists and MergeOptMerger as merger type\n  FtSearcherMem<> searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 5, QueryTopk); // asking for top-5 most similar strings\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"SAVING INDEX\" << endl;\n  indexer.saveIndex(\"exampleindex.ix\");\n\n  cout << \"LOADING INDEX\" << endl;\n  FtIndexerMem<> indexerLoaded(&strContainer);\n  indexerLoaded.loadIndex(\"exampleindex.ix\");\n  \n  resultStringIDs.clear();\n  searcher.setFtIndexer(&indexerLoaded);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n\n  cout << \"----------------------\" << endl << endl;\n}\n\n\n// builds in-memory index with length filter for partitioning\n// fills index from data file\n// shows how to perform inserts and deletes on the index\n// deletes are buffered and not immediately reflected in inverted lists\n// the buffered deletions cost memory and degrade query performance (need to intersect with answers)\n// the buffered deletions should periodically be integrated into the inverted (also shown below)\nvoid memIndexMaintenance() {  \n  cout << \"----- MEM INDEX MAINTENANCE ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2); // fixed-length grams\n  SimMetricEd simMetric(gramGen); // edit distance\n  \n  // create simple indexer with default template arguments\n  // default: in-memory index using vector<unsigned> as an inverted list container\n  // first create a string container and fill it with strings to index\n  StringContainerVector strContainer(true); // true indicates statistics gathering, e.g. for auto part filtering\n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(dictionary.begin(), dictionary.end()); // fill the container from a collection\n  FtIndexerMem<> indexer(&strContainer, &gramGen, 20, 10); // maxStrLen=20, fanout=10\n  indexer.addPartFilter(new LengthFilter(20)); // add length filtering with a maximum string length of 20\n  indexer.buildIndex();\n  \n  // create merger\n  MergeOptMerger<> merger;\n  // create searcher passing merger and indexer with default template arguments\n  // default: same as indexer, i.e. assumed simple indexer with vector<unsigned> as inverted lists and MergeOptMerger as merger type\n  FtSearcherMem<> searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 2.0f);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << resultStringIDs[i] << \" \" << tmp << endl;\n  }\n \n  // insert a couple of strings\n  indexer.insertString(\"kathryn\");\n  indexer.insertString(\"kathein\");\n  indexer.insertString(\"cathrin\");\n  indexer.insertString(\"cathryn\");\n  \n  resultStringIDs.clear();\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS AFTER INSERTIONS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << resultStringIDs[i] << \" \" << tmp << endl;\n  }\n  \n  // delete first 1000 strings from index and stringcontainer\n  for(unsigned i = 0; i < 1000; i++)\n    indexer.deleteString(i);\n\n  resultStringIDs.clear();\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS AFTER DELETIONS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << resultStringIDs[i] << \" \" << tmp << endl;\n  }\n  \n  // integrate the deletions into the inverted lists\n  // WARNING: this operation takes time and should be done periodically but infrequently\n  indexer.integrateUpdates();\n  \n  resultStringIDs.clear();\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS AFTER INTEGRATION: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << resultStringIDs[i] << \" \" << tmp << endl;\n  }\n\n  cout << \"----------------------\" << endl << endl;\n}\n\n// builds disk-based index on disk-based string collection\n// uses length filter for partitioning, and default list-merging algorithm\n// fills index from existing collection\nvoid ondiskBasicUsage1() {\n  cout << \"----- ONDISK BASIC USAGE 1 ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2);\n  SimMetricEd simMetric(gramGen);\n  \n  // using disk-based string container\n  StringContainerRM strContainer(PHO_LENGTH, true);\n  strContainer.createAndOpen(\"collection.rm\");\n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(dictionary.begin(), dictionary.end()); // fill the container from dictionary\n  // params: container, gramgen, disableStreamBuffer, index filename, bytes per run, max str len, fanout\n  FtIndexerOnDisk<> indexer(&strContainer, &gramGen, false, \"invlists.ix\", 50000, 20, 10);\n  indexer.addPartFilter(new LengthFilter(20)); // param: max str len\n  indexer.buildIndex();\n  \n  // create merger specifying inverted list type\n  OnDiskMergerSimple<> merger;\n  // create searcher passing merger and indexer\n  FtSearcherOnDisk<> searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 1.0f);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"SAVING INDEX\" << endl;\n  indexer.saveIndex(\"exampleindex.ix\");\n\n  cout << \"LOADING INDEX\" << endl;\n  FtIndexerOnDisk<> indexerLoaded(&strContainer);\n  indexerLoaded.loadIndex(\"exampleindex.ix\");\n  \n  resultStringIDs.clear();\n  searcher.setFtIndexer(&indexerLoaded);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"-------------------------\" << endl << endl;\n}\n\n\n// builds disk-based index on disk-based string collection\n// uses length filter for partitioning\n// uses adaptive list-merging algorithm\n// fills index from existing collection\nvoid ondiskBasicUsage2() {\n  cout << \"----- ONDISK BASIC USAGE 2 ----\" << endl;\n\n  // create gramgenerator and similarity metric\n  GramGenFixedLen gramGen(2);\n  SimMetricEd simMetric(gramGen);\n  \n  // using disk-based string container\n  StringContainerRM strContainer(PHO_LENGTH, true);\n  strContainer.createAndOpen(\"collection.rm\");\n  strContainer.initStatsCollector(&gramGen);\n  strContainer.fillContainer(\"../data/female_names.txt\", 4000); // fill the container from a datafile and use the first 4000 lines\n  // params: container, gramgen, disableStreamBuffer, index filename, bytes per run, max str len, fanout\n  FtIndexerOnDisk<> indexer(&strContainer, &gramGen, false, \"invlists.ix\", 50000, 20, 10);\n  indexer.autoAddPartFilter(); // automatically choose a partitioning filter based on container stats\n  indexer.buildIndex();\n  \n  // create merger specifying inverted list type\n  OnDiskMergerAdapt<> merger;\n  // create searcher passing merger and indexer\n  FtSearcherOnDisk<FtIndexerOnDisk<>, OnDiskMergerAdapt<> > searcher(&merger, &indexer);\n  \n  vector<unsigned> resultStringIDs;\n  Query query(\"kathrin\", simMetric, 1.0f);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"SAVING INDEX\" << endl;\n  indexer.saveIndex(\"exampleindex.ix\");\n\n  cout << \"LOADING INDEX\" << endl;\n  FtIndexerOnDisk<> indexerLoaded(&strContainer);\n  indexerLoaded.loadIndex(\"exampleindex.ix\");\n  \n  resultStringIDs.clear();\n  searcher.setFtIndexer(&indexerLoaded);\n  searcher.search(query, resultStringIDs);  \n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout << tmp << endl;\n  }\n  \n  cout << \"-------------------------\" << endl << endl;\n}\n", "encoding": "ascii"}