{"url": "http://flamingo.ics.uci.edu/releases/2.0/src/common/gramgen.cc", "content": "/*\n  $Id: gramgen.h Tue Apr 05 10:20:24 PDT 2008 abehm$\n\n  Copyright (C) 2007 by The Regents of the University of California\n\t\n  Redistribution of this file is permitted under\n  the terms of the BSD license\n    \n  Date: 04/05/2008\n  Author: Rares Vernica <rares (at) ics.uci.edu> \n          Alexander Behm <abehm (at) ics.uci.edu>\n*/\n\n#include \"gramgen.h\"\n\n#include <iostream>\n\nusing namespace std;\nusing namespace tr1;\n\nconst hash<string> GramGen::hashString = hash<string>();\n\nGramGen* GramGen::loadGramGenInstance(ifstream& fpIn)\n{\n  GramGenType ggt = GGT_FIXED;\n  fpIn.read((char*)&ggt, sizeof(GramGenType));\n\n  switch(ggt) {\n  case GGT_FIXED: return new GramGenFixedLen(fpIn); break;\n    // TODO: implement others!\n  default:\n    cout << \"ERROR: unknown gramgentype loaded from file!\" << endl;\n    return NULL; break;\n  }\n}\n\nGramGenFixedLen::GramGenFixedLen(ifstream& fpIn)\n{\n  fpIn.read((char*)&q, sizeof(uint));\n  fpIn.read((char*)&prePost, sizeof(bool));  \n}\n\nbool GramGenFixedLen::containsSpace(string& s) const \n{\n  string::size_type loc = s.find(' ', 0);\n  return !(loc == string::npos);\n}\n\nvoid GramGenFixedLen::decompose(\n  const string &s, \n  vector<string> &res, \n  uchar st, \n  uchar en) \n  const \n{\n  if(prePost) {\n    const string sPad = string(q - 1, st) + s + string(q - 1, en);  \n    for (uint i = 0; i < s.length() + q - 1; i++) {\n      string substring = sPad.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))\n\tres.push_back(sPad.substr(i, q));        \n    }\n  }\n  else {\n    for (uint i = 0; i < s.length() - q + 1; i++) {\n      string substring = s.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))\n        res.push_back(substring);\n    }\n  }\n}\n\nvoid GramGenFixedLen::decompose(\n  const string &s, \n  vector<uint> &res, \n  uchar st, \n  uchar en) \n  const\n{\n  if(prePost) {\n    string sPad = string(q - 1, st) + s + string(q - 1, en);  \n    for(uint i = 0; i < s.length() + q - 1; i++) {\n      string substring = sPad.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))\n\tres.push_back(hashString(substring));\n    }\n  }\n  else {\n    for (uint i = 0; i < s.length() - q + 1; i++) {\n      string substring = s.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))\n\tres.push_back(hashString(substring));\n    }      \n  }\n}\n\nvoid GramGenFixedLen::decompose(\n  const string &s,\n  multiset<string> &res,  \n  uchar st, \n  uchar en) \n  const \n{\n  if(prePost) {\n    const string sPad = string(q - 1, st) + s + string(q - 1, en);\n    for (uint i = 0; i < s.length() + q - 1; i++) {\n      string substring = sPad.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))      \n\tres.insert(substring);  \n    }\n  }\n  else {      \n    for (uint i = 0; i < s.length() - q + 1; i++) {\n      string substring = s.substr(i, q);      \n      if(!(noSpace && containsSpace(substring)))      \n\tres.insert(substring);  \n    }\n  }\n}\n\nvoid GramGenFixedLen::decompose(\n  const string &s, \n  multiset<uint> &res, \n  uchar st, \n  uchar en) \n  const \n{\n  if(prePost) {\n    const string sPad = string(q - 1, st) + s + string(q - 1, en);  \n    for (uint i = 0; i < s.length() + q - 1; i++) {\n      string substring = sPad.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))     \n\tres.insert(hashString(substring));      \n    }\n  }\n  else {\n    for (uint i = 0; i < s.length() - q + 1; i++) {\n      string substring = s.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))           \n\tres.insert(hashString(substring));  \n    }\n  }\n}\n\nvoid GramGenFixedLen::decompose(\n  const string &s, \n  set<string> &res, \n  uchar st, \n  uchar en) \n  const \n{\n  if(prePost) {\n    const string sPad = string(q - 1, st) + s + string(q - 1, en);\n    for (uint i = 0; i < s.length() + q - 1; i++) {\n      string substring = sPad.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))     \n\tres.insert(substring);  \n    }\n  }\n  else {      \n    for (uint i = 0; i < s.length() - q + 1; i++) {\n      string substring = s.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))           \n\tres.insert(substring);  \n    }\n  }\n}\n\nvoid GramGenFixedLen::decompose(\n  const string &s, \n  set<uint> &res, \n  uchar st, \n  uchar en) \n  const \n{\n if(prePost) {\n    const string sPad = string(q - 1, st) + s + string(q - 1, en);  \n    for (uint i = 0; i < s.length() + q - 1; i++) {\n      string substring = sPad.substr(i, q); \n      if(!(noSpace && containsSpace(substring)))        \n\tres.insert(hashString(substring));\n    }\n  }\n  else {\n    for (uint i = 0; i < s.length() - q + 1; i++) {\n      string substring = s.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))    \n\tres.insert(hashString(substring));  \n    }\n  }\n}\n\nvoid GramGenFixedLen::decompose(\n  const string &s, \n  map<uint, uint> &res, \n  uchar st, \n  uchar en) \n  const \n{\n  if(prePost) {\n    const string sPad = string(q - 1, st) + s + string(q - 1, en);\n    for (uint i = 0; i < s.length() + q - 1; i++) {\n      string substring = sPad.substr(i, q); \n      if(!(noSpace && containsSpace(substring)))    \n\tres[hashString(substring)]++;  \n    }\n  }\n  else {\n    for (uint i = 0; i < s.length() - q + 1; i++) {\n      string substring = s.substr(i, q);\n      if(!(noSpace && containsSpace(substring)))    \n\tres[hashString(substring)]++;  \n    }\n  }\n}\n\nuint GramGenFixedLen::getNumGrams(const string& s) const \n{\n  if(prePost) return s.length() + q - 1;\n  else return s.length() - q + 1;\n}\n\nvoid GramGenFixedLen::saveGramGenInstance(ofstream& fpOut) \n{\n  fpOut.write((const char*)&gramGenType, sizeof(gramGenType));\n  fpOut.write((const char*)&q, sizeof(uint));\n  fpOut.write((const char*)&prePost, sizeof(bool));\n}\n", "encoding": "ascii"}