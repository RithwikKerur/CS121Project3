{"url": "http://flamingo.ics.uci.edu/releases/4.0/docs/GettingStartedDoc.html", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:html=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>\n      GettingStartedDoc \u00e2\u20ac\u201c\n      Group\n    </title><style type=\"text/css\">\n           @import url(media/trac.css);\n          </style></head><body><p><a href=\"index.html\">Back to Index</a></p><hr></hr><div class=\"wikipage searchable\">\n        \n          <p>\nAppString &gt; AppStringDoc\n</p>\n<p>\n</p><div class=\"wiki-toc\"><ol><li><a href=\"#GettingStarted\" shape=\"rect\">Getting Started</a><ol><li><a href=\"#Introduction\" shape=\"rect\">Introduction</a></li><li>\n<a href=\"#DownloadingthePackage\" shape=\"rect\">Downloading the Package</a></li><li>\n<a href=\"#Requirements\" shape=\"rect\">Requirements</a></li><li>\n<a href=\"#WrappersSimplestWayToUseTheLibrary\" shape=\"rect\">Wrappers (Simplest Way To Use The Library)</a></li><li>\n<a href=\"#Step-By-StepGuide\" shape=\"rect\">Step-By-Step Guide</a><ol><li><a href=\"#Step1:CompilingTheLibrary\" shape=\"rect\">Step1: Compiling The Library</a></li><li>\n<a href=\"#Step2:UsingTheLibraryInAnApplication\" shape=\"rect\">Step2: Using The Library In An Application</a></li><li>\n<a href=\"#Step3:CompilingAndRunningTheApplication\" shape=\"rect\">Step3: Compiling And Running The Application</a></li></ol></li><li>\n<a href=\"#BasicUsage\" shape=\"rect\">Basic Usage</a></li><li>\n<a href=\"#ExampleFiles\" shape=\"rect\">Example Files</a></li></ol></li></ol></div><p>\n</p>\n<h1 id=\"GettingStarted\">Getting Started</h1>\n<h2 id=\"Introduction\">Introduction</h2>\n<p>\nThis tutorial will guide through the basics steps needed to perform approximate string search on a collection of strings using this library. This guide focuses on how to use the FilterTree (FilterTreeDoc) module.\n</p>\n<h2 id=\"DownloadingthePackage\">Downloading the Package</h2>\n<ul><li>The entire package may be downloaded from <a class=\"ext-link\" href=\"http://flamingo.ics.uci.edu/releases/4.0/flamingo-4.0.tgz\" shape=\"rect\"><span class=\"icon\">http://flamingo.ics.uci.edu/releases/4.0/flamingo-4.0.tgz</span></a>\n</li></ul><h2 id=\"Requirements\">Requirements</h2>\n<p>\nMost modules in this release were developed and tested on Ubuntu Linux using the GNU GCC/G++ compiler.\n</p>\n<p>\nIn order to compile and run most modules you will need the following:\n</p>\n<ul><li>Linux environment (preferably a Debian based Linux, e.g. Ubuntu)\n</li><li>C++ compiler (GCC/G++ version 4.0 or later)\n</li><li>CMake\n</li><li>C++ Boost library, <a class=\"ext-link\" href=\"http://www.boost.org\" shape=\"rect\"><span class=\"icon\">http://www.boost.org</span></a> (only required for PartEnumDoc)\n</li></ul><p>\nOn systems with the aptitude package manager (e.g. Ubuntu, Debian) you can install all required packages by typing the following as root user (or using sudo):\n</p>\n<pre class=\"wiki\" xml:space=\"preserve\">$ apt-get install gcc g++ cmake libboost-dev\n</pre><p>\nThe module MatTreeDoc was developed in Visual C++. No makefile is provided for that module. We recommend using Windows and Visual C++ for that module.\n</p>\n<h2 id=\"WrappersSimplestWayToUseTheLibrary\">Wrappers (Simplest Way To Use The Library)</h2>\n<p>\nFor your convenience, we have added wrappers that contain all necessary objects as described in section \"Basic Usage\". All you need to do to build an index and execute queries, is to create an instance of a wrapper. These wrappers initialize components with default values and are the simplest and fastest way to use our library - at the expense of being able to control tuning parameters (which filters are used, fanout, etc.). <br></br>\nWe recommend browsing through the code in <strong>filtertree/wrappers/src/example.cc</strong>.\n</p>\n<h2 id=\"Step-By-StepGuide\">Step-By-Step Guide</h2>\n<p>\nIn this guide we will use a wrapper to show you how to perform approximate string search using the edit distance.\n</p>\n<h3 id=\"Step1:CompilingTheLibrary\">Step1: Compiling The Library</h3>\n<p>\nLet us first test whether we can successfully compile the Flamingo libraries. <br></br>\nLet us say you have extracted the Flamingo archive to the following directory: <strong>/home/joe/flamingo-4.0</strong> <br></br>\n</p>\n<p>\nThe wrappers are part of the filtertree module which we compile as follows:\n</p>\n<pre class=\"wiki\" xml:space=\"preserve\">cd /home/joe/flamingo-4.0/src/filtertree/\ncmake .\nmake\n</pre><p>\nThis should compile filtertree and the modules that it depends on, namely, util, common and listmerger.\n</p>\n<p>\nThe libraries and executables are placed in the build folder of their corresponding modules, \ne.g., the filtertree binaries are in <strong>/home/joe/flamingo-4.0/src/filtertree/build/</strong>, the listmerger binaries are in <strong>/home/joe/flamingo-4.0/src/listmerger/build/</strong>, and so on.\n</p>\n<p>\nYour <strong>/home/joe/flamingo-4.0/src/filtertree/build/</strong> should look something like this after compilation:\n</p>\n<pre class=\"wiki\" xml:space=\"preserve\">joe@joe-machine:~/flamingo-4.0/src/filtertree/build$ ls -l\n-rwxr-xr-x 1 joe joe     18 2010-10-21 13:06 cleanup.sh\n-rwxr-xr-x 1 joe joe 482093 2010-10-22 12:11 example_ft\n-rwxr-xr-x 1 joe joe 307624 2010-10-22 12:11 example_wrappers\n-rwxr-xr-x 1 joe joe 106208 2010-10-22 12:11 libfiltertree-lib.so\n-rwxr-xr-x 1 joe joe   7043 2010-10-22 12:11 libwrappers-lib.so\n-rwxr-xr-x 1 joe joe 376594 2010-10-22 12:12 perftest_ft\n-rwxr-xr-x 1 joe joe 453066 2010-10-22 12:12 unittest_ft\n</pre><p>\n(note that the exact file sizes may differ from yours)\n</p>\n<h3 id=\"Step2:UsingTheLibraryInAnApplication\">Step2: Using The Library In An Application</h3>\n<p>\nNow that we have compiled the library, we are ready to include it into an application. <br></br>\nLet us assume you wish to use the library in an application located in <strong>/home/joe/searchapp</strong> that consists of one source file <strong>/home/joe/searchapp/src/main.cc</strong> <br></br>\nWe assume a directory structure similar to the ones used in Flamingo, i.e., we expect <strong>/home/joe/searchapp</strong> to have a folder <strong>src</strong> and a folder <strong>build</strong>. <br></br> \n<br></br>\nWe will discuss how to use a simple in-memory index. More examples can be found in <strong>/home/joe/flamingo-4.0/src/filtertree/wrappers/example.cc</strong>. <br></br>\n<br></br>\nYou can copy and paste the following lines of source code into <strong>/home/joe/searchapp/src/main.cc</strong> for us to compile:\n</p>\n<pre class=\"wiki\" xml:space=\"preserve\">#include \"filtertree/src/wrappers/wrappers.h\"\n\nint main() {\n  GramGenFixedLen gramGen(2); // using 2-grams\n  \n  StringContainerVector strContainer(true);\n  strContainer.initStatsCollector(&amp;gramGen);\n  strContainer.fillContainer(\"/home/joe/flamingo-4.0/src/filtertree/data/female_names.txt\", 4000);\n  \n  // create wrapper using edit distance (ed) and build index\n  // params: stringcontainer, gramgenerator, use partitioning filter?\n  WrapperSimpleEd wrapper(&amp;strContainer, &amp;gramGen, true);\n  wrapper.buildIndex();\n  \n  // perform search\n  float editDistance = 1.0f;\n  string queryString = \"kathrin\";\n  vector&lt;unsigned&gt; resultStringIDs;\n  wrapper.search(queryString, editDistance, resultStringIDs);\n  cout &lt;&lt; \"SIMILAR STRINGS: \" &lt;&lt; endl;\n  for(unsigned i = 0; i &lt; resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs[i]);\n    cout &lt;&lt; tmp &lt;&lt; endl;\n  }\n}\n</pre><p>\nIn this example all data structures are stored in main memory. <br></br>\nThis application will use the first 4000 lines of <strong>/home/joe/flamingo-4.0/src/filtertree/data/female_names.txt</strong> as the data strings. <br></br>\nIt will build an index to support approximate string search and answer a query that asks for all data strings that are within an edit-distance of 1 to \"kathrin\". <br></br>\nFinally, the results will be displayed. <br></br>\n</p>\n<p>\nPlease refer to <strong>/home/joe/flamingo-4.0/src/filtertree/wrappers/example.cc</strong> and <strong>/home/joe/flamingo-4.0/src/filtertree/example.cc</strong> for more examples.\n</p>\n<h3 id=\"Step3:CompilingAndRunningTheApplication\">Step3: Compiling And Running The Application</h3>\n<p>\nWe recommend you use CMake to generate a makefile to build your application. Hand-crafting a makefile is also possible but requires more effort and understanding. We will discuss how to use CMake to build your application. <br></br>\n</p>\n<p>\nWe assume the following (as in the previous sections):\n</p>\n<ul><li>Your application is in <strong>/home/joe/searchapp</strong> \n</li><li>Your application contains one source file <strong>/home/joe/searchapp/src/main.cc</strong>\n</li><li>Flamingo is in <strong>/home/joe/flamingo-4.0</strong>\n</li></ul><p>\nLet us create the CMakeLists.txt used by CMake to generate a makefile. Following the convention in Flamingo we will put it in <strong>/home/joe/searchapp/CMakeLists.txt</strong>. <br></br>\n</p>\n<p>\nYou can copy and paste the following lines into <strong>/home/joe/searchapp/CMakeLists.txt</strong>:\n</p>\n<pre class=\"wiki\" xml:space=\"preserve\">cmake_minimum_required(VERSION 2.6)\n\n# files to compile\nset(APPLICATION_EXEC_SRC \n  src/main.cc\n)\n\n# where to look for header files\ninclude_directories (\n  .\n  ../flamingo-4.0/src/\n  ../flamingo-4.0/src/filtertree/\n  ../flamingo-4.0/src/filtertree/src/\n  ${CMAKE_SOURCE_DIR}/../\n  include\n  lib  \n)\n\n# where to look for dependent libraries\nlink_directories(\n  ${CMAKE_SOURCE_DIR}/../flamingo-4.0/src/common/build/\n  ${CMAKE_SOURCE_DIR}/../flamingo-4.0/src/util/build/\n  ${CMAKE_SOURCE_DIR}/../flamingo-4.0/src/listmerger/build/\n  ${CMAKE_SOURCE_DIR}/../flamingo-4.0/src/filtertree/build/\n) \n\n# have cmake also build the filtertree module (if not built already)\n# the filtertree module will build util, common and listmerger\nadd_subdirectory(../flamingo-4.0/src/filtertree/ ../flamingo-4.0/src/filtertree/)\n\n# GCC command line args\nadd_definitions(-Wall -O3 -DDEBUG_TIMER_FANCY -DDEBUG_STAT -DED_MATRIX_DIM=2000)\n\n# create executable\nadd_executable(searchapp ${APPLICATION_EXEC_SRC})\nadd_dependencies(searchapp wrappers-lib filtertree-lib common-lib util-lib listmerger-lib)\ntarget_link_libraries(searchapp wrappers-lib filtertree-lib common-lib util-lib listmerger-lib rt)\n\nset(EXECUTABLE_OUTPUT_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/build/\")\n</pre><p>\nThe above is a very simple CMakeLists.txt. To compile your application, cd into <strong>/home/joe/searchapp/</strong> and type:\n</p>\n<pre class=\"wiki\" xml:space=\"preserve\">cmake .\nmake\n</pre><p>\nThis should compile your application and all necessary libraries and link them together properly. <br></br>\nLet us test the application. The compilation should have placed your <strong>searchapp</strong> executable in <strong>/home/joe/searchapp/build</strong>. To run the application:\n</p>\n<pre class=\"wiki\" xml:space=\"preserve\">cd '''/home/joe/searchapp/build'''\n./searchapp\n</pre><p>\nYou should see the following output (or similar):\n</p>\n<pre class=\"wiki\" xml:space=\"preserve\">INPUTFILE: \"/home/joe/flamingo-4.0/src/filtertree/data/female_names.txt\"\n100% FILLING CONTAINER: 4000/4000; 0'0\"/0'0\"   \n100% INSERTING INTO INDEX: 4000/4000; 0'0\"/0'0\"   \nSIMILAR STRINGS: \nkathryn\nkathrin\nkathrine\nkatherin\n</pre><p>\nCongratulations, you have successfully created your first application using The Flamingo Package!\n</p>\n<h2 id=\"BasicUsage\">Basic Usage</h2>\n<p>\nApproximate string search can be performed in two basic steps: (1) building the index, and (2) answering queries using the index.\nWe will now discuss the basic components for each of the steps at a high-level.\n</p>\n<ol><li>Building The Index, Needed Components\n<ul><li>String Container (stores the data strings on which you want to perform queries)\n</li><li>Gram Generator (decomposes strings into grams)\n</li><li>Indexer (builds the filter tree and the inverted lists, needs a String Container and a Gram Generator)\n</li></ul></li></ol><ol start=\"2\"><li>Answering Queries Using The Index, Needed Components:\n<ul><li>List Merger (solves the T-occurrence problem given a set of inverted lists and a merging-threshold)\n</li><li>Indexer (builds the filtertree and the inverted-lists, needs a String Container and a Gram Generator)\n</li><li>Searcher (answers queries, needs a List Merger and an Indexer) \n</li><li>Similarity Metric (represents the similarity metric to be used)\n</li><li>Query (contains the query string, the similarity metric and the similarity threshold)\n</li></ul></li></ol><p>\nRefer to <strong>filtertree/src/example.cc</strong> for some advanced examples.\n</p>\n<h2 id=\"ExampleFiles\">Example Files</h2>\n<p>\nApart from reading this guide, we recommend you browse through the code of some example files. We have provided these files to help you understand how to use the library as quickly as possible.\n</p>\n<ul><li>filtertree/src/wrappers/example.cc\n</li><li>filtertree/src/example.cc\n</li><li>filtertree/src/perftest.cc\n</li></ul>\n        \n        \n      </div><div class=\"footer\"><hr></hr><p><a href=\"index.html\">Back to Index</a></p></div></body></html>\n", "encoding": "Windows-1252"}