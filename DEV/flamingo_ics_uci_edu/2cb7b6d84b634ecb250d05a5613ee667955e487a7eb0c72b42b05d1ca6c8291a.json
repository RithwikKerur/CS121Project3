{"url": "http://flamingo.ics.uci.edu/releases/3.0/docs/MatTreeDoc.html", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:html=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>MatTreeDoc \u00e2\u20ac\u201c Group</title><style type=\"text/css\">\n           @import url(media/trac.css);\n          </style></head><body><p><a href=\"index.html\">Back to Index</a></p><hr></hr><div class=\"wikipage searchable\">\n<p>AppString\n&gt; AppStringDoc</p>\n<h1 id=\"MAT-Tree\">MAT-Tree</h1>\n<h2 id=\"Overview\">Overview</h2>\n<p>MAT-tree: A tree-based structure for indexing string and numeric\nattributes. Using MAT-tree, we can perform range queries on both\nstring and numeric attributes. [1]</p>\n<h2 id=\"Usage\">Usage</h2>\n<p>The program can be compiled using Visual C or gnu C++.</p>\n<p>Compile the project in Visual C, and run accordingly. You can\nalso write a makefile and compile it using a GNU C compiler.</p>\n<h2 id=\"Interface\">Interface</h2>\n<p>Main files:</p>\n<ul>\n<li>RETree.cpp - includes main() and the MAT-tree functions</li>\n<li>index.h, index.cpp - defines data structures, such as Node,\nRecord, Query, etc.</li>\n<li>node.cpp, Rect.cpp - defines basic functions for Node and\nRect</li>\n<li>Trie.h, Trie.cpp - defines the Trie class and all Trie\nfunctions</li>\n<li>distance.h, distance.cpp - defines Distance1 class to calculate\nthe edit distance between two strings</li>\n<li>NFA.h, NFA.cpp - defines the automaton class</li>\n<li>NFANode.h, NFANode.cpp - defines the Node of NFA</li>\n<li>NFATransition.h, NFATransition.cpp - defines the Edge of\nNFA</li>\n<li>NFAMatch.h, NFAMatch.cpp - Modifies Meyer's algorithm,\ncalculates the edit distance between a string and an automaton</li>\n<li>data.zip - data (text file zipped)</li>\n<li>query.zip - queries (text file zipped)</li>\n</ul>\n<p>Useful parameters:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\nconst int MAXLEN = 100; //maximum length of a string attribute\nconst int PGSIZE = 256; //page size\nconst int TRIELEN = 1000; //maximum size of a Trie (in string representation)\nconst int K = 400;  //# of centers in MAT-tree\nconst int STRDELTA = 3; //threshold for string attribute\nconst int NUMDELTA = 4; //threshold for numeric attribute\nconst int SIZES = 80000; //size of the dataset\nconst int ALPH_SIZE = 29; //size of the alphabet\n#define DATAFILE \"data.txt\" //input file for dataset\n#define QUERYFILE \"query.txt\" //query file\nconst int NUMQUERY = 10; //# of queries to run\n</pre>\n<p>Prepare DATAFILE and QUERYFILE. Each record is in one line, with\na string followed by by aq numeric value. In the case there are\nwhite spaces in the string, you need to replace them with special\ncharacters first.</p>\n<h2 id=\"Performance\">Performance</h2>\n<p>The performance results are available in [1].</p>\n<h2 id=\"Contributors\">Contributors</h2>\n<ul>\n<li>Chen Li</li>\n<li>Liang Jin</li>\n</ul>\n<hr></hr>\n<p>[1] Liang Jin, Nick Koudas, Chen Li, Anthony K. H. Tung:\nIndexing Mixed Types for Approximate Retrieval. VLDB 2005:\n793-804</p>\n</div><div class=\"footer\"><hr></hr><p><a href=\"index.html\">Back to Index</a></p></div></body></html>\n", "encoding": "utf-8"}