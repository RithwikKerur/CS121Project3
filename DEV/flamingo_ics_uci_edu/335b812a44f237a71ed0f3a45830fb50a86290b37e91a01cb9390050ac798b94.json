{"url": "http://flamingo.ics.uci.edu/releases/4.0/docs/TopkDoc.html", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:html=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>TopkDoc \u00e2\u20ac\u201c Group</title><style type=\"text/css\">\n           @import url(media/trac.css);\n          </style></head><body><p><a href=\"index.html\">Back to Index</a></p><hr></hr><div class=\"wikipage searchable\">\n<p>AppString\n&gt; AppStringDoc</p>\n<h1 id=\"Top-k\">Top-k</h1>\n<h2 id=\"Overview\">Overview</h2>\n<p>The module contains an implementation of the technique presented\nin [1].</p>\n<h2 id=\"Usage\">Usage</h2>\n<p>For compiling instructions, please see CompileDoc.</p>\n<p>The module uses C++ STL TR1 library provided by GNU GCC.</p>\n<p>An example of how to use the module is available in\n<tt>src/topk/example.cc</tt>.</p>\n<h2 id=\"Interface\">Interface</h2>\n<p>The module is divided in three components:</p>\n<ul>\n<li>Top-k Index</li>\n<li>Top-k Query Index</li>\n<li>Top-k Search Algorithms</li>\n</ul>\n<p>The Top-k Index (<tt>Topk::Index</tt>) class is defined in\n<tt>src/topk/topkindex.h</tt>. Its main methods are:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\n    Index();\n    Index(const std::string &amp;filename);\n\n    template&lt;class InputIterator&gt; \n    void build(InputIterator begin, InputIterator end, const GramGen &amp;gramGen);\n\n    void load(const std::string &amp;filename);\n\n    void save(const std::string &amp;filename)\n      const;\n</pre>\n<p>The Top-k Query Index (<tt>Topk::IndexQuery</tt>) class contains\na part of the index that is relevant for a particular query. This\nclass is used by the search algorithms. It is defined in\n<tt>src/topk/topkindex.h</tt> and its main method is:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\n    IndexQuery(const Index &amp;idx, const Query &amp;query);\n</pre>\n<p>The Top-k Search Algorithms are defined in multiple files. All\nthe algorithms define the <tt>getTopk</tt> method. Its prototype\nis:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\n    template&lt;\n      class RandomAccessIterator1, \n      class RandomAccessIterator2, \n      class OutputIterator&gt;  \n    void getTopk(\n      const RandomAccessIterator1 data, \n      const RandomAccessIterator2 weights, \n      const Index &amp;idx, \n      const Query &amp;que, \n      IndexQuery &amp;idxQue, \n      OutputIterator topk);\n</pre>\n<p>The most popular algorithm is the heap-based algorithm. It is\ndefined in the <tt>src/topk/topkheap.h</tt>.</p>\n<p>The main idea is that a <tt>Topk::Index</tt> object can be\ncreated to hold the index. The index can be build by specifying an\niterator over a sequence of strings and a gram generator.\nAdditionally, the index can be saved to disk and then loaded from\ndisk. When a query comes, a <tt>Topk::IndexQuery</tt> object is\ncreated using the <tt>Topk::Index</tt> instance and the query.\nFinally, the search algorithm of choice can applied.</p>\n<h2 id=\"Contributors\">Contributors</h2>\n<ul>\n<li>Rares Vernica</li>\n</ul>\n<hr></hr>\n<p>[1] Rares Vernica, Chen Li: Efficient top-k algorithms for fuzzy\nsearch in string collections. KEYS 2009: 9-14. (Workshop on Keyword\nSearch on Structured Data, collocated with SIGMOD 2009)</p>\n</div><div class=\"footer\"><hr></hr><p><a href=\"index.html\">Back to Index</a></p></div></body></html>\n", "encoding": "utf-8"}