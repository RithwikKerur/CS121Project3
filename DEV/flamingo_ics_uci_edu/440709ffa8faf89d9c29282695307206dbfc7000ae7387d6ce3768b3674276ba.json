{"url": "http://flamingo.ics.uci.edu/releases/2.0/src/filtertree/statsutil.cc", "content": "/*\n  $Id: statsutil.cc 4025 2008-10-01 00:01:14Z abehm $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\t\n  Redistribution of this file is permitted under\n  the terms of the BSD license\n    \n  Date: 09/17/2007\n  Author: Alexander Behm <abehm (at) ics.uci.edu>\n*/\n\n#include \"statsutil.h\"\n\nStatsUtil::\nStatsUtil(TimeFormat t) {\n  resetFilterTreeStats(&filterTreeStats);\n  resetSearchStats(&searchStats);\n  tformat = t;\n}\n\n      \nvoid \nStatsUtil::\nresetFilterTreeStats(FilterTreeStats* target) {\n  memset(target, 0, sizeof(FilterTreeStats));\n}\n\nvoid \nStatsUtil::\nresetSearchStats(SearchStats* target) {\n  memset(target, 0, sizeof(SearchStats));\n}\n\ndouble\nStatsUtil::\ngetTimeMeasurement(TimeFormat format) {\n  unsigned totalTime = (t2.tv_sec - t1.tv_sec) * 1000000 + (t2.tv_usec - t1.tv_usec);\n  double tval = 0;\n\n  switch(format) {\n  case TFSEC: tval = static_cast<double>(totalTime) / 1000000; break;\n  case TFMSEC: tval = static_cast<double>(totalTime) / 1000; break;\n  case TFUSEC: tval = static_cast<double>(totalTime); break;\n  }\n\n  return tval;\n}\n\ndouble\nStatsUtil::\ngetTimeMeasurement() {\n  unsigned totalTime = (t2.tv_sec - t1.tv_sec) * 1000000 + (t2.tv_usec - t1.tv_usec);\n  double tval = 0;\n\n  switch(tformat) {\n  case TFSEC: tval = static_cast<double>(totalTime) / 1000000; break;\n  case TFMSEC: tval = static_cast<double>(totalTime) / 1000; break;\n  case TFUSEC: tval = static_cast<double>(totalTime); break;\n  }\n\n  return tval;\n}\n\nvoid \nStatsUtil::\naddSearchStats(SearchStats* target) {\n  target->thresholdTime += searchStats.thresholdTime;\n  target->preprocessTime += searchStats.preprocessTime;\n  target->mergeTime += searchStats.mergeTime;\n  target->postprocessTime += searchStats.postprocessTime;\n  target->totalSearchTime += searchStats.totalSearchTime;\n  target->candidateStrings += searchStats.candidateStrings;\n  target->panicTime += searchStats.panicTime;\n  target->numberPanics += searchStats.numberPanics;\n  target->threshold += searchStats.threshold;  \n}\n\nvoid \nStatsUtil::\navgSearchStats(SearchStats* target, float n) {\n  target->thresholdTime /= n;\n  target->preprocessTime /= n;\n  target->mergeTime /= n;\n  target->postprocessTime /= n;\n  target->totalSearchTime /= n;\n  target->candidateStrings /= n;\n  target->panicTime /= n;\n  target->threshold /= n;  \n  //target->numberPanics = (unsigned) ceil( (float)target->numberPanics / n );\n}\n\nvoid \nStatsUtil::\nwriteSearchStats(ofstream& fp_out, FilterTreeStats* fts, SearchStats* ss) {\n  fp_out \n    << fts->dictionarySize << \";\" \n    << fts->maxChildren << \";\"\n    << ss->thresholdTime << \";\"\n    << ss->preprocessTime << \";\"\n    << ss->mergeTime << \";\"\n    << ss->postprocessTime << \";\"\n    << ss->panicTime << \";\"\n    << ss->totalSearchTime << \";\"\n    << ss->candidateStrings << \";\"\n    //<< ss->numberPanics << endl;\n    << ss->numberPanics << \";\"\n    << fts->buildFilterTreeTime << endl;  \n}\n", "encoding": "ascii"}