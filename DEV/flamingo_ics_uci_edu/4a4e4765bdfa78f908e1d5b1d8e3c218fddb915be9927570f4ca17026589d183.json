{"url": "http://flamingo.ics.uci.edu/releases/3.0/src/topk/display.cc", "content": "/*\n  $Id: display.cc 4285 2009-02-19 19:02:52Z rares $\n\n  Copyright (C) 2007 by The Regents of the University of California\n \n  Redistribution of this file is permitted under the terms of the BSD\n  license\n\n  Date: 08/19/2008\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"display.h\"\n\n#include <cassert>\n#include <iomanip>\n#include <iostream>\n#include <sstream>\n\nusing namespace std;\n\nvoid DisplayLists::init(\n  const list<range<uint *> > &initialLists, \n  const Query &query) \n{  \n  g = query.sim.gramGen.getGramLength();\n\n  query.sim.gramGen.decompose(query.str, gs, '#', '$');\n  gn = gs.size();\n\n  string q(query.str);\n  if (query.sim.gramGen.prePost)\n    q = string(g - 1, 156) + query.str + string(g - 1, 190);\n  set<uint> gramsset, gramsetFinal;\n  query.sim.gramGen.decompose(query.str, gramsetFinal);\n  longest = 0;\n  for (uint i = 0; i < gn; ++i) {\n    string gram(q.substr(i, g));\n    uint h = tr1::hash<string>()(gram);      \n    if (gramsset.find(h) == gramsset.end()) {\n      gramsset.insert(h);\n      list<range<uint*> >::const_iterator l = initialLists.begin();\n      for(set<uint>::const_iterator s = gramsetFinal.begin();\n          s != gramsetFinal.end(); ++s, ++l)\n        if (*s == h) {\n          lists.push_back(DisplayListsInfo(*l));\n          uint lg = l->_end - l->_begin;\n          if (lg > longest)\n            longest = lg;\n          break;\n        }\n    }\n  }\n}\n\nvoid DisplayLists::show(const list<range<uint *> > &crt)\n{\n  stringstream out;\n  // top separator\n  for (uint i = 0; i < gn; ++i) {\n    if (i)\n      out << ' ';\n    out << \" |\" << string(g, '-') << '|';\n  }\n  out << endl;\n  // header\n  for (uint i = 0; i < gn; ++i) {\n    if (i)\n      out << ' ';\n    out << \" |\\033[1m\" << gs[i] << \"\\033[0m|\";\n  }\n  out << endl;\n  // ids\n  for (list<DisplayListsInfo>::iterator l = lists.begin(); \n       l != lists.end(); ++l)\n    for (list<range<uint*> >::const_iterator c = crt.begin(); \n         c != crt.end(); ++c)\n      if (l->r._end == c->_end) {\n        l->i = l->r._begin;\n        if (l->c != c->_begin) {   // updated\n          l->p = l->c;\n          l->c = c->_begin;\n          l->u = true;\n        }\n        l->e = false;\n        break;\n      }               \n  for (list<DisplayListsInfo>::iterator l = lists.begin(); \n       l != lists.end(); ++l) {\n    if (l->e) {                 // no longer present\n      l->i = l->r._begin;\n      l->e = false;\n      if (l->c != l->r._end) {   // just deleted\n        l->p = l->c;\n        l->c = l->r._end;\n        l->u = true;\n      }\n    }  \n    if (l != lists.begin())\n      out << ' ';\n    out << (l->c == l->r._begin ? \"\\033[0;36m/\\033[0;37m\" : \" \") \n        << '|' << string(g, '-') << '|';\n  }\n  out << endl;\n  for (uint i = 0; i < longest + 1; ++i) {\n    for (list<DisplayListsInfo>::iterator l = lists.begin(); \n         l != lists.end(); ++l) {\n      if (l != lists.begin())\n        out << ' ';\n      if (!l->e) {\n        if (l->u)\n          out << \"\\033[1;31m\";\n        else\n          out << \"\\033[0;36m\";\n        out << (l->i >= l->p ? \n                (l->i <= l->c ?  \n                 (l->i == l->c ? '\\\\' :\n                  (l->i == l->p ? '/' : '|')) : ' ') : ' ');\n        out << \"\\033[0;37m\";\n        out << '|';\n        if (l->i != l->r._end) {\n          out << (l->i > l->p && l->i < l->c ? \"\\033[0;34m\" : \"\")\n              << setw(g) << *l->i\n              << (l->i > l->p && l->i < l->c ? \"\\033[0;37m\" : \"\");\n          ++l->i;\n        }\n        else {\n          out << string(g, '-');\n          l->e = true;\n          l->u = false;\n        }\n        out << '|';\n      } \n      else\n        out << string(g + 3, ' ');\n    }\n    out << endl;\n  }\n  out << \"Press ENTER to continue...\";\n  cout << out.str();\n  getchar();\n  cout << endl;\n}\n", "encoding": "ascii"}