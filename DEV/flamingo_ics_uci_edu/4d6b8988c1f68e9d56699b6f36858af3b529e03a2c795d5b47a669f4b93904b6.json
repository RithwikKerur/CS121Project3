{"url": "http://flamingo.ics.uci.edu/releases/2.0.1/src/filtertree/wrappers/example.cc", "content": "/*\n  $Id: example.cc 4056 2008-10-10 22:01:51Z abehm $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\t\n  Redistribution of this file is permitted under\n  the terms of the BSD license\n    \n  Date: 09/19/2007\n  Author: Alexander Behm <abehm (at) ics.uci.edu>\n*/\n\n#include \"wrappers.h\"\n\nStringContainerVector strContainer;\nvoid initStringContainer();\n\n// EXAMPLES\nvoid wrapperSimpleExample();\n\nint main() {\n  \n  initStringContainer();\n  \n  wrapperSimpleExample();\n  \n  return 0;\n}\n\nvoid initStringContainer() {\n  vector<string> prefixes;\n  prefixes.push_back(\"string\");\n  prefixes.push_back(\"example\");  \n  prefixes.push_back(\"test\");\n  prefixes.push_back(\"hello\");\n  prefixes.push_back(\"world\");\n  prefixes.push_back(\"foo\");\n  prefixes.push_back(\"bar\");\n\n  vector<string> suffixes;\n  suffixes.push_back(\"1\");\n  suffixes.push_back(\"10\");\n  suffixes.push_back(\"100\");\n  suffixes.push_back(\"2\");\n  suffixes.push_back(\"20\");\n  suffixes.push_back(\"200\");\n  suffixes.push_back(\"3\");\n  suffixes.push_back(\"30\");\n  suffixes.push_back(\"300\");\n\n  cout << \"---------------------------------------\" << endl;\n  cout << \"STRING DICTIONARY:\" << endl;\n  for(unsigned j = 0; j < prefixes.size(); j++)\n    for(unsigned i = 0; i < suffixes.size(); i++) {\n      string ins = prefixes.at(j) + suffixes.at(i);\n      strContainer.insertString(ins);\n      cout << ins << endl;\n    }\n  cout << \"---------------------------------------\" << endl << endl;\n}\n\n// USAGE OF WRAPPERS FOR SIMPLE INDEXES\n// List of Wrappers:\n// WrapperSimpleEd - uses edit distance\n// WrapperSimpleEdNorm - uses noralized edit distance\n// WrapperSimpleJacc - uses jaccard similarity\n// WrapperSimpleCos - uses cosine similarity\n// WrapperSimpleDice - uses dice similarity\n// see typedefs in wrappersimple.h\n// ALSO POSSIBLE TO SPECIFY SIMMETRIC AS TEMPLATE PARAMETER: WrapperSimple<SimilarityMetric>\nvoid wrapperSimpleExample() {\n  cout << \"----- EXAMPLE: WrapperSimpleEd -----\" << endl;\n\n  // create wrapper and build index\n  // gramLength is 3 and use pre and postfixing of the string\n  WrapperSimpleEd wrapper(&strContainer, 3, false);\n  wrapper.buildIndex();\n\n  // perform search\n  float editDistance = 2.0f;\n  string queryString = \"xample\";\n  vector<unsigned> resultStringIDs;\n  wrapper.search(queryString, editDistance, resultStringIDs);\n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs.at(i));\n    cout << tmp << endl;\n  }\n\n  // save index\n  wrapper.saveIndex(\"wrapperIndex.ix\");\n\n  // load index\n  wrapper.loadIndex(\"wrapperIndex.ix\");\n\n  // perform search on loaded index\n  resultStringIDs.clear();\n  wrapper.search(queryString, editDistance, resultStringIDs);\n  cout << \"SIMILAR STRINGS: \" << endl;\n  for(unsigned i = 0; i < resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs.at(i));\n    cout << tmp << endl;\n  }\n\n  cout << \"-----------------------------------------\" << endl << endl;  \n}\n", "encoding": "ascii"}