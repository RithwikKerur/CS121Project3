{"url": "http://flamingo.ics.uci.edu/releases/4.1/src/lbaktree/src/example.cc", "content": "/*\n $Id: example.cc 6148 2012-02-22 23:13:40Z salsubaiee $\n\n Copyright (C) 2010 by The Regents of the University of California\n\n Redistribution of this file is permitted under\n the terms of the BSD license.\n\n Date: 08/19/2010\n Author: Sattam Alsubaiee <salsubai (at) ics.uci.edu>\n*/\n\n#include <string>\n#include <fstream>\n#include <iostream>\n#include <stdint.h>\n#include \"lbaktree.h\"\n\nbool sortCondition(const string &a, const string &b)\n{\n    return a.size() > b.size();\n}\n\nbool parseLine(string &line, Rectangle &mbr, vector<string> &kwds)\n{\n    string coordinates = line.substr(0, line.find(\",\"));\n    string keywords = line.substr(line.find(\",\") + 1, line.length());\n    istringstream coordinatesStream(coordinates);\n    istringstream keywordsStream(keywords);\n    string keyword;\n    while(keywordsStream >> keyword)\n    {\n        transform(keyword.begin(), keyword.end(), keyword.begin(), ::tolower);\n        kwds.push_back(keyword);\n    }\n    float coord;\n    vector<float> coords;\n    while(coordinatesStream >> coord)\n    {\n        coords.push_back(coord);\n    }\n    if(coords.size() == 2)\n    {\n        mbr.min.x = coords[0];\n        mbr.min.y = coords[1];\n        mbr.max.x = mbr.min.x;\n        mbr.max.y = mbr.min.y;\n    }\n    else\n    {\n        mbr.min.x = coords[0];\n        mbr.min.y = coords[1];\n        mbr.max.x = coords[2];\n        mbr.max.y = coords[3];\n    }\n    if(kwds.empty())\n    {\n        return false;\n    }\n    return true;\n}\n\nvoid printResults(LBAKTree &lbaktree, vector<Object> &objects)\n{\n    for(unsigned i = 0; i < objects.size(); ++i)\n    {\n        cout << objects[i].id;\n        vector<string> objectKeywords;\n        lbaktree.getObjectKeywords(objects[i].id, objectKeywords);\n        for(unsigned j = 0; j < objectKeywords.size(); ++j)\n        {\n            cout << \", \" << objectKeywords[j];\n        }\n        cout << endl;\n    }\n}\n\nint main(int argc, char **argv)\n{\n    string datasetFile = \"../data/data.txt\";\n    string queryWorkloadFile = \"../data/queries.txt\";\n\n    // this is an enum, can be \"fl\", \"vl\", or \"vlf\"\n    AlgorithmType algoType = vlf;\n\n    // space budget in bytes for the approximate indexes, this parameter is only for \"vl\" and \"vlf\" algorithms\n    double spaceBudget = 500000000.0;\n\n    // can be between 0 and 1\n    float similarityThreshold = 0.8f;\n\n    // can be between 0 and 1\n    double keywordFrequencyThreshold = 1.0;\n\n    // the approximate indexes level on the tree, this parameter is only for the \"fl\" algorithm\n    //unsigned indexesLevel = 1;\n\n    Storage st;\n\n    // for the FL (fixed level) algorithm\n    //LBAKTree lbaktree(&st, algoType, indexesLevel, similarityThreshold);\n\n    // for the VL (variable level) algorithm\n    //LBAKTree lbaktree(&st, queryWorkloadFile, algoType, spaceBudget, similarityThreshold);\n\n    // for the VLF (variable level exploiting keyword-frequencies) algorithm\n    LBAKTree lbaktree(&st, queryWorkloadFile, algoType, spaceBudget, similarityThreshold, keywordFrequencyThreshold);\n\n    ifstream data(datasetFile.c_str());\n    if (!data)\n    {\n        cerr << \"cannot open dataset file\" << endl;\n        return -1;\n    }\n    ifstream queries(queryWorkloadFile.c_str());\n    if (!queries)\n    {\n        cerr << \"cannot open query workload file\" << endl;\n        return -1;\n    }\n\n    string line;\n    uintptr_t count = 0;\n    struct timeval t1, t2;\n    struct timezone tz;\n\n    // inserting the objects in the LBAK-tree\n    while (getline(data, line))\n    {\n        Rectangle mbr;\n        Object obj;\n        vector<string> kwds;\n        if(parseLine(line, mbr, kwds))\n        {\n            obj.mbr = mbr;\n            obj.id = count;\n            lbaktree.insert(obj, kwds);\n        }\n        if ((count % 1000) == 0)\n            cerr << count << endl;\n        ++count;\n    }\n    cout << \"building the index structures\" << endl;\n    lbaktree.buildIndex();\n    cout << \"starting the queries\" << endl;\n\n    unsigned numOfQueries = 0, answer = 0;\n    double totalTime = 0.0;\n\n    while (getline(queries, line))\n    {\n        vector<Object> objects;\n        Rectangle range;\n        vector<string> kwds;\n        parseLine(line, range, kwds);\n\n        sort(kwds.begin(), kwds.end(), sortCondition);\n        lbaktree.startTimeMeasurement(t1, tz);\n        lbaktree.rangeQuery(objects, range, kwds);\n        lbaktree.stopTimeMeasurement(t2, tz);\n        double timeMeasurement = lbaktree.getTimeMeasurement(t1, t2);\n        totalTime += timeMeasurement;\n\n        printResults(lbaktree, objects);\n        answer += objects.size();\n        ++numOfQueries;\n\n        if ((count % 1000) == 0)\n            cerr << count << endl;\n\n        ++count;\n    }\n    cout << \"AVG query time (ms): \" << totalTime / numOfQueries << endl;\n    cout << \"Total queries answer: \" << answer << endl;\n\n    return 0;\n}\n\n\n", "encoding": "ascii"}