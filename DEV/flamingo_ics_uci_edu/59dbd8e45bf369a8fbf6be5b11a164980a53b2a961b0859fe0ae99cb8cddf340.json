{"url": "http://flamingo.ics.uci.edu/releases/1.0/src/util/misc.cc", "content": "/*\n    $Id: misc.cc 1109 2007-04-17 00:04:26Z rvernica $\n\n    Copyright (C) 2007 by The Regents of the University of California\n\n    Redistribution of this file is permitted under the terms of the\n    GNU Public License (GPL).\n\n    Date: 01/30/2007\n    Author: Rares Vernica <rvernica@ics.uci.edu>\n*/\n\n#include \"misc.h\"\n\n#include <iostream>\n#include <sstream>\n\nunsigned pow(unsigned x, unsigned y) \n{\n  unsigned r = 1;\n  while (y > 0) {\n    r *= x;\n    y--;\n  }\n  return r;\n}\n\nvector<vector<unsigned> > subsets(unsigned n, unsigned k) \n{\n  if (k == 0) {\n    cerr << \"subsets: k cannot be 0\" << endl;\n    exit(EXIT_FAILURE);\n  }\n  vector<vector<unsigned> > subs;\n  vector<unsigned> sub(k);\n\n  unsigned i;\n  for (i = 0; i < k; i++)\n    sub[i] = i;\n  subs.push_back(sub);\n\n  while (sub[0] < n - k) {\n    for (i = 0; i < k; i++)\n      if (sub[k - i - 1] < n - i - 1)\n        break;\n    i = k - i - 1;\n    sub[i]++;\n    i++;\n    for (; i < k; i++)\n      sub[i] = sub[i - 1] + 1;\n    subs.push_back(sub);\n  }\n\n  return subs;\n}\n\nstring utos(unsigned i) \n{\n  stringstream s;\n  s << i;\n  return s.str();\n}\n\nstring utosh(unsigned i) \n{\n  string str;\n  if (i < 1000)\n    str = utos(i);\n  else\n    str = utos(i / 1000) + \"k\";\n  return str;\n}\n\nUnsignedSeq::UnsignedSeq(unsigned initialValue): value(initialValue)\n{\n}\n\nunsigned UnsignedSeq::operator() ()\n{\n  return value++;\n}\n\nstring removeExt(const string filename)\n{\n  const string exts[] = {\"txt\", \"bin\"};\n  for (unsigned i = 0; i < sizeof(exts) / sizeof(string); i++)\n    if (filename.substr(filename.size() - 4) == \".\" + exts[i])\n      return filename.substr(0, filename.size() - 4);\n  return filename;\n}\n\nvoid writeerror(const string filename) \n{\n  cerr << \"can't write to file \\\"\" << filename << \"\\\"\" << endl;\n  exit(EXIT_FAILURE);\n}\n\nvoid readerror(const string filename) \n{\n  cerr << \"can't read from file \\\"\" << filename << \"\\\"\" << endl;\n  exit(EXIT_FAILURE);\n}\n\n", "encoding": "ascii"}