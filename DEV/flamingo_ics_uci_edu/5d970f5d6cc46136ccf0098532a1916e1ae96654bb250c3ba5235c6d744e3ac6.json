{"url": "http://flamingo.ics.uci.edu/releases/2.0.1/src/listmerger/example.cc", "content": "/*  \n $Id: example.cc 4025 2008-10-01 00:01:14Z abehm $   \n\n Copyright (C) 2007 by The Regents of the University of California\n \t\n Redistribution of this file is permitted under the terms of the BSD license\n\n Date: 02/05/2008\n Author: Jiaheng Lu\n */\n\n \n#include <fstream>\n#include <iostream>\n#include <vector>\n\n#include \"listmerger.h\"\n#include \"divideskipmerger.h\"\n#include \"heapmerger.h\"\n#include \"mergeoptmerger.h\"\n#include \"mergeskipmerger.h\"\n#include \"mergeskipplusmerger.h\"\n#include \"scancountmerger.h\"\n#include \"mergeskiptest.h\"\n#include \"showutil.h\"\n#include \"util/array.h\"\n\nusing namespace std;\n\nvoid example1()\n{\n  cout << \"Example 1: merge lists without duplicate\" << endl;\n \n  Array<unsigned> list1;\n  list1.append(1);\n  list1.append(5);\n  list1.append(8);\n\n  Array<unsigned> list2;\n  list2.append(3);\n  list2.append(4);\n  list2.append(5);\n\n  Array<unsigned> list3;\n  list3.append(8);\n  list3.append(10);\n  list3.append(13);\n  list3.append(15);\n\n  Array<unsigned> list4;\n  list4.append(8);\n  list4.append(10);\n  list4.append(13);\n  list4.append(15);\n\n\n  vector<Array<unsigned>*> lists;\n  lists.push_back(&list1);\n  lists.push_back(&list3);\n  lists.push_back(&list2); \n  lists.push_back(&list4);\n\n  const unsigned threshold = 2;\n\n  cout<< \"Merging threshold is \" << threshold << endl;\n\n  vector<unsigned> result;\n\n  \n  //ListsMerger *mergeLists = new HeapMerger();\n  //ListsMerger *mergeLists = new MergeOptMerger();\n  //set max reord ID as the maxmal unsigned integer\n  //ListsMerger *mergeLists = new ScanCountMerger(9999999);\n  //ListsMerger *mergeLists = new MergeSkipMerger();  \n  DivideSkipMerger<> *mergeLists = new DivideSkipMerger<>();  \n  //ListsMerger *mergeLists = new MergeSkipPlusMerger();  \n\n  mergeLists->merge(lists, threshold, result);\n\n  cout<<\"Results size is \"<<result.size()<<endl;\n\n}//end example1\n\n\nvoid example2()\n{\n  cout << \"Example 2: merge lists with duplicate\" << endl;\n \n  Array<unsigned> list1;\n  list1.append(1);\n  list1.append(5);\n  list1.append(8);\n\n  Array<unsigned> list2;\n  list2.append(3);\n  list2.append(4);\n  list2.append(5);\n\n  Array<unsigned> list3;\n  list3.append(8);\n  list3.append(10);\n  list3.append(13);\n  list3.append(15);\n\n  Array<unsigned> list4;\n  list4.append(8);\n  list4.append(10);\n  list4.append(13);\n  list4.append(15);\n\n\n  vector<Array<unsigned>*> lists;\n  lists.push_back(&list1);\n  lists.push_back(&list1);\n  lists.push_back(&list2); \n  lists.push_back(&list3);\n  lists.push_back(&list3);\n  lists.push_back(&list3);\n  lists.push_back(&list4);\n  lists.push_back(&list4);\n\n\n  const unsigned threshold = 5;\n\n  cout<< \"Merging threshold is \" << threshold << endl;\n\n  vector<unsigned> result;\n\n  \n  //set max reord ID as the maxmal unsigned integer\n  //ListsMerger *mergeLists = new ScanCountMerger(9999999);\n  DivideSkipMerger<> *mergeLists = new DivideSkipMerger<>(true);  \n \n  mergeLists->merge(lists, threshold, result);\n\n  cout<<\"Results size is \"<<result.size()<<endl;\n\n}//end example2\n\nint main() \n{\n  \n  //Example 1: merge lists without any duplicate\n  \n  example1();\n  \n  //Example 2: merge lists with duplicate\n  \n  example2();\n\n\n}//end main\n", "encoding": "ascii"}