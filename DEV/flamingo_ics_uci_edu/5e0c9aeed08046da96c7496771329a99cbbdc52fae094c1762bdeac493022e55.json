{"url": "http://flamingo.ics.uci.edu/releases/4.0/src/filtertree/src/statsutil.cc", "content": "/*\n  $Id: statsutil.cc 5718 2010-09-09 05:39:08Z abehm $\n\n  Copyright (C) 2010 by The Regents of the University of California\n\t\n  Redistribution of this file is permitted under\n  the terms of the BSD License.\n    \n  Date: 04/04/2008\n  Author: Alexander Behm <abehm (at) ics.uci.edu>\n*/\n\n#include <cstring>\n#include \"statsutil.h\"\n#include <iostream> // ALEX remove\n\nusing namespace std; // ALEX remove\n\nvoid\nIndexStats::\nadd(const IndexStats* ixStats) {\n  dictSize += ixStats->dictSize;\n  gramLen += ixStats->gramLen;\n  maxStrLen += ixStats->maxStrLen;\n  ftFanout += ixStats->ftFanout;\n  partFilters += ixStats->partFilters;\n  buildTime += ixStats->buildTime;\n  adds++;\n}\n\nvoid\nIndexStats::\navg() {\n  dictSize /= adds;\n  gramLen /= adds;\n  maxStrLen /= adds;\n  ftFanout /= adds;\n  partFilters /= adds;\n  buildTime /= (double)adds;\n}\n\nvoid\nIndexStats::\nreset() {\n  dictSize = 0;\n  gramLen = 0;\n  maxStrLen = 0;\n  ftFanout = 0;\n  partFilters = 0;\n  buildTime = 0.0;\n  adds = 0;\n}\n\n\nvoid\nHolesGlobalIndexStats::\nadd(const IndexStats* ixStats) {\n  this->IndexStats::add(ixStats);\n  reductionRatio += dynamic_cast<const HolesGlobalIndexStats*>(ixStats)->reductionRatio;\n  numberHoles += dynamic_cast<const HolesGlobalIndexStats*>(ixStats)->numberHoles;\n}\n\nvoid\nHolesGlobalIndexStats::\navg() {\n  this->IndexStats::avg();\n  reductionRatio /= (float)adds;\n  numberHoles /= adds;\n\n}\n\nvoid\nHolesGlobalIndexStats::\nreset() {\n  this->IndexStats::reset();\n  reductionRatio = 0.0f;\n  numberHoles = 0;\n}\n\n\nvoid\nUnionGlobalIndexStats::\nadd(const IndexStats* ixStats) {\n  this->IndexStats::add(ixStats);\n  reductionRatio += dynamic_cast<const UnionGlobalIndexStats*>(ixStats)->reductionRatio;\n}\n\nvoid\nUnionGlobalIndexStats::\navg() {\n  this->IndexStats::avg();\n  reductionRatio /= (float)adds;\n}\n\nvoid\nUnionGlobalIndexStats::\nreset() {\n  this->IndexStats::reset();\n  reductionRatio = 0.0f;\n}\n\n\nvoid\nOnDiskIndexStats::\nadd(const IndexStats* ixStats) {\n  this->IndexStats::add(ixStats);\n  runBufferSize += dynamic_cast<const OnDiskIndexStats*>(ixStats)->runBufferSize;\n  createRunsTime += dynamic_cast<const OnDiskIndexStats*>(ixStats)->createRunsTime;\n  mergeRunsTime += dynamic_cast<const OnDiskIndexStats*>(ixStats)->mergeRunsTime;\n  reorgTime += dynamic_cast<const OnDiskIndexStats*>(ixStats)->reorgTime;\n  indexSize += dynamic_cast<const OnDiskIndexStats*>(ixStats)->indexSize;\n}\n\nvoid\nOnDiskIndexStats::\navg() {\n  this->IndexStats::avg();\n  runBufferSize /= adds;\n  createRunsTime /= (double)adds;\n  mergeRunsTime /= (double)adds;\n  reorgTime /= (double)adds;\n  indexSize /= adds;\n}\n\nvoid\nOnDiskIndexStats::\nreset() {\n  this->IndexStats::reset();\n  runBufferSize = 0;\n  createRunsTime = 0.0;\n  mergeRunsTime = 0.0;\n  reorgTime = 0.0;\n  indexSize = 0;\n}\n\nvoid\nIndexStats::\nprint(std::ostream& stream) {\n  stream << dictSize << \";\"\n\t << gramLen << \";\"\n\t << maxStrLen << \";\"\n\t << ftFanout << \";\"\n\t << partFilters << \";\"\n\t << buildTime;\n}\n\nvoid\nHolesGlobalIndexStats::\nprint(std::ostream& stream) {\n  stream << dictSize << \";\"\n\t << gramLen << \";\"\n\t << maxStrLen << \";\"\n\t << ftFanout << \";\"\n\t << partFilters << \";\"\n\t << buildTime << \";\"\n\t << reductionRatio << \";\"\n\t << numberHoles;\n}\n\nvoid\nUnionGlobalIndexStats::\nprint(std::ostream& stream) {\n  stream << dictSize << \";\"\n\t << gramLen << \";\"\n\t << maxStrLen << \";\"\n\t << ftFanout << \";\"\n\t << partFilters << \";\"\n\t << buildTime << \";\"\n\t << reductionRatio;\n}\n\nvoid\nOnDiskIndexStats::\nprint(std::ostream& stream) {\n  stream << dictSize << \";\"\n\t << gramLen << \";\"\n\t << maxStrLen << \";\"\n\t << ftFanout << \";\"\n\t << partFilters << \";\"\n\t << buildTime << \";\"\n\t << runBufferSize << \";\"\n\t << createRunsTime << \";\"\n\t << mergeRunsTime << \";\"\n\t << reorgTime << \";\"\n\t << indexSize;\n}\n\nvoid\nIndexStats::\nprintHeader(std::ostream& stream) {\n  stream << \"DictSize\" << \";\"\n\t << \"GramLen\" << \";\"\n\t << \"MaxStrLen\" << \";\"\n\t << \"FtFanout\" << \";\"\n\t << \"PartFilters\" << \";\"\n\t << \"IndexBuildTime\";\n}\n\nvoid\nHolesGlobalIndexStats::\nprintHeader(std::ostream& stream) {\n  stream << \"DictSize\" << \";\"\n\t << \"GramLen\" << \";\"\n\t << \"MaxStrLen\" << \";\"\n\t << \"FtFanout\" << \";\"\n\t << \"PartFilters\" << \";\"\n\t << \"IndexBuildTime\" << \";\"\n\t << \"ReductionRatio\" << \";\"\n\t << \"Holes\";\n}\n\nvoid\nUnionGlobalIndexStats::\nprintHeader(std::ostream& stream) {\n  stream << \"DictSize\" << \";\"\n\t << \"GramLen\" << \";\"\n\t << \"MaxStrLen\" << \";\"\n\t << \"FtFanout\" << \";\"\n\t << \"PartFilters\" << \";\"\n\t << \"IndexBuildTime\" << \";\"\n\t << \"ReductionRatio\";\n}\n\nvoid\nOnDiskIndexStats::\nprintHeader(std::ostream& stream) {\n  stream << \"DictSize\" << \";\"\n\t << \"GramLen\" << \";\"\n\t << \"MaxStrLen\" << \";\"\n\t << \"FtFanout\" << \";\"\n\t << \"PartFilters\" << \";\"\n\t << \"IndexBuildTime\" << \";\"\n\t << \"BufferSize\" << \";\"\n\t << \"CreateRunsTime\" << \";\"\n\t << \"CergeRunsTime\" << \";\"\n\t << \"ReorgTime\" << \";\"\n\t << \"IndexSize\";\n}\n\nvoid\nQueryStats::\nreset() {\n  qid = 0;\n  strLen = 0;\n  mergeThresh = 0;\n  simThresh = 0.0;\n  threshTime = 0.0;\n  preprocTime = 0.0;\n  mergeTime = 0.0;\n  postprocTime = 0.0;\n  panicTime = 0.0;\n  totalTime = 0.0;\n  candidates = 0.0;\n  panics = 0.0;\n  results = 0.0;\n}\n\nvoid\nOnDiskQueryStats::\nreset() {\n  qid = 0;\n  strLen = 0;\n  mergeThresh = 0;\n  simThresh = 0.0;\n  threshTime = 0.0;\n  preprocTime = 0.0;\n  mergeTime = 0.0;\n  postprocTime = 0.0;\n  panicTime = 0.0;\n  totalTime = 0.0;\n  candidates = 0.0;\n  panics = 0.0;\n  results = 0.0;\n  invListSeeks = 0.0;\n  invListData = 0.0;\n  postprocPages = 0.0;\n  initialCandidates = 0.0;\n}\n\nvoid\nQueryStats::\nprint(std::ostream& stream) {\n  stream << qid << \",\"\n\t << strLen << \",\"\n\t << mergeThresh << \",\"\n\t << simThresh << \",\"\n\t << threshTime << \",\"\n\t << preprocTime << \",\"\n\t << mergeTime << \",\"\n\t << postprocTime << \",\"\n\t << panicTime << \",\"\n\t << totalTime << \",\"\n\t << candidates << \",\"\n\t << panics << \",\"\n\t << results;\n}\n\nvoid\nOnDiskQueryStats::\nprint(std::ostream& stream) {\n  stream << qid << \",\"\n\t << strLen << \",\"\n\t << mergeThresh << \",\"\n\t << simThresh << \",\"\n\t << threshTime << \",\"\n\t << preprocTime << \",\"\n\t << mergeTime << \",\"\n\t << postprocTime << \",\"\n\t << panicTime << \",\"\n\t << totalTime << \",\"\n\t << candidates << \",\"\n\t << panics << \",\"\n\t << results << \",\"\n\t << invListSeeks << \",\"\n\t << invListData << \",\"\n\t << postprocPages;\n}\n\nvoid\nQueryStats::\nprintHeader(std::ostream& stream) {\n  stream << \"QID\" << \",\"\n\t << \"StrLen\" << \",\"\n\t << \"MergeThresh\" << \",\"\n\t << \"SimThresh\" << \",\"\n\t << \"ThreshTime\" << \",\"\n\t << \"PreprocTime\" << \",\"\n\t << \"MergeTime\" << \",\"\n\t << \"PostprocTime\" << \",\"\n\t << \"PanicTime\" << \",\"\n\t << \"TotalTime\" << \",\"\n\t << \"Candidates\" << \",\"\n\t << \"Panics\" << \",\"\n\t << \"Results\";\n}\n\nvoid\nOnDiskQueryStats::\nprintHeader(std::ostream& stream) {\n  stream << \"QID\" << \",\"\n\t << \"StrLen\" << \",\"\n\t << \"MergeThresh\" << \",\"\n\t << \"SimThresh\" << \",\"\n\t << \"ThreshTime\" << \",\"\n\t << \"PreprocTime\" << \",\"\n\t << \"MergeTime\" << \",\"\n\t << \"PostprocTime\" << \",\"\n\t << \"PanicTime\" << \",\"\n\t << \"TotalTime\" << \",\"\n\t << \"InitialCandidates\" << \",\"\n\t << \"Candidates\" << \",\"\n\t << \"Panics\" << \",\"\n\t << \"Results\" << \",\"\n\t << \"InvListSeeks\" << \",\"\n\t << \"InvListData\" << \",\"\n\t << \"PostprocPages\";\n}\n\nvoid\nWorkloadStats::\nprint(std::ostream& stream) {\n  stream << threshTime << \";\"\n\t << preprocTime << \";\"\n\t << mergeTime << \";\"\n\t << postprocTime << \";\"\n\t << panicTime << \";\"\n\t << totalTime << \";\"\n\t << candidates << \";\"\n\t << panics;\n}\n\nvoid\nOnDiskWorkloadStats::\nprint(std::ostream& stream) {\n  stream << threshTime << \";\"\n\t << preprocTime << \";\"\n\t << mergeTime << \";\"\n\t << postprocTime << \";\"\n\t << panicTime << \";\"\n\t << totalTime << \";\"\n\t << initialCandidates << \";\"\n\t << candidates << \";\"\n\t << panics << \";\" \n\t << invListSeeks << \";\"\n\t << invListData << \";\"\n\t << postprocPages;\n}\n\nvoid\nWorkloadStats::\nprintHeader(std::ostream& stream) {\n  stream << \"ThreshTime\" << \";\"\n\t << \"PreprocTime\" << \";\"\n\t << \"MergeTime\" << \";\"\n\t << \"PostprocTime\" << \";\"\n\t << \"PanicTime\" << \";\"\n\t << \"TotalTime\" << \";\"\n\t << \"Candidates\" << \";\"\n\t << \"Panics\";\n}\n\nvoid\nOnDiskWorkloadStats::\nprintHeader(std::ostream& stream) {\n  stream << \"ThreshTime\" << \";\"\n\t << \"PreprocTime\" << \";\"\n\t << \"MergeTime\" << \";\"\n\t << \"PostprocTime\" << \";\"\n\t << \"PanicTime\" << \";\"\n\t << \"TotalTime\" << \";\"\n\t << \"InitialCandidates\" << \";\"\n\t << \"Candidates\" << \";\"\n\t << \"Panics\" << \";\"\n\t << \"InvListSeeks\" << \";\"\n\t << \"InvListData\" << \";\"\n\t << \"PostprocPages\";\n}\n\nvoid\nWorkloadStats::\nreset() {\n  threshTime = 0.0;\n  preprocTime = 0.0;\n  mergeTime = 0.0;\n  postprocTime = 0.0;\n  panicTime = 0.0;\n  totalTime = 0.0;\n  candidates = 0.0;\n  panics = 0.0;\n}\n\nvoid\nOnDiskWorkloadStats::\nreset() {\n  threshTime = 0.0;\n  preprocTime = 0.0;\n  mergeTime = 0.0;\n  postprocTime = 0.0;\n  panicTime = 0.0;\n  totalTime = 0.0;\n  candidates = 0.0;\n  panics = 0.0;  \n  invListSeeks = 0.0;\n  invListData = 0.0;\n  postprocPages = 0.0;\n  initialCandidates = 0.0;\n}\n\nvoid\nWorkloadStats::\nadd(const QueryStats* queryStats, bool saveQueryStats) {\n  if(queryStats) {\n    if(saveQueryStats) allQueryStats.push_back(*queryStats);\n    threshTime += queryStats->threshTime;\n    preprocTime += queryStats->preprocTime;\n    mergeTime += queryStats->mergeTime;\n    postprocTime += queryStats->postprocTime;\n    panicTime += queryStats->panicTime;\n    totalTime += queryStats->totalTime;\n    candidates += queryStats->candidates;\n    panics += queryStats->panics;  \n  }\n}\n\nvoid\nOnDiskWorkloadStats::\nadd(const QueryStats* queryStats, bool saveQueryStats) {\n  if(queryStats) {\n    if(saveQueryStats) allQueryStats.push_back(*queryStats);\n    threshTime += queryStats->threshTime;\n    preprocTime += queryStats->preprocTime;\n    mergeTime += queryStats->mergeTime;\n    postprocTime += queryStats->postprocTime;\n    panicTime += queryStats->panicTime;\n    totalTime += queryStats->totalTime;\n    candidates += queryStats->candidates;\n    panics += queryStats->panics;  \n    invListSeeks += dynamic_cast<const OnDiskQueryStats*>(queryStats)->invListSeeks;\n    invListData += dynamic_cast<const OnDiskQueryStats*>(queryStats)->invListData;\n    postprocPages += dynamic_cast<const OnDiskQueryStats*>(queryStats)->postprocPages;\n    initialCandidates += dynamic_cast<const OnDiskQueryStats*>(queryStats)->initialCandidates;\n  }\n}\n\nvoid\nWorkloadStats::\navg(unsigned queries, unsigned runs) {\n  threshTime /= queries * runs;\n  preprocTime /= queries * runs;\n  mergeTime /= queries * runs;\n  postprocTime /= queries * runs;\n  panicTime /= queries * runs;\n  totalTime /= queries * runs;\n  candidates /= queries * runs;\n  panics /= runs;\n}\n\nvoid\nOnDiskWorkloadStats::\navg(unsigned queries, unsigned runs) {\n  threshTime /= queries * runs;\n  preprocTime /= queries * runs;\n  mergeTime /= queries * runs;\n  postprocTime /= queries * runs;\n  panicTime /= queries * runs;\n  totalTime /= queries * runs;\n  candidates /= queries * runs;\n  panics /= runs;\n  invListSeeks /= queries * runs;\n  invListData /= queries * runs;\n  postprocPages /= queries * runs;\n  initialCandidates /= queries * runs;\n}\n\ndouble\nStatsUtil::\ngetTimeMeasurement(TimeFormat format) {\n  unsigned totalTime = (t2.tv_sec - t1.tv_sec) * 1000000 + (t2.tv_usec - t1.tv_usec);\n  double tval = 0;\n\n  switch(format) {\n  case TFSEC: tval = static_cast<double>(totalTime) / 1000000; break;\n  case TFMSEC: tval = static_cast<double>(totalTime) / 1000; break;\n  case TFUSEC: tval = static_cast<double>(totalTime); break;\n  }\n\n  return tval;\n}\n", "encoding": "ascii"}