{"url": "http://flamingo.ics.uci.edu/releases/4.1/src/topk/src/oldlistmerger/unittest.cc", "content": "/*  \n $Id: unittest.cc 5716 2010-09-09 04:27:56Z abehm $   \n\n Copyright (C) 2010 by The Regents of the University of California\n \t\n Redistribution of this file is permitted under the terms of \n the BSD license.\n\n Date: 05/14/2007\n Author: Jiaheng Lu\n */\n\n \n#include <fstream>\n#include <iostream>\n#include <vector>\n\n#include \"listmerger.h\"\n#include \"divideskipmerger.h\"\n#include \"heapmerger.h\"\n#include \"mergeoptmerger.h\"\n#include \"mergeskipmerger.h\"\n#include \"mergeskipplusmerger.h\"\n#include \"scancountmerger.h\"\n#include \"mergeskiptest.h\"\n#include \"showutil.h\"\n#include \"util/src/array.h\"\n\nusing namespace std;\n\nvoid randomGenerateList(Array<unsigned> *oneList) {\n  \n  unsigned setSize = random() % 100;\n  if(setSize == 0) setSize = 1;\n  \n  set<unsigned> s;\n  \n  for(unsigned i=0;i<setSize;i++) {\n    unsigned data = random() % 150;    \n    s.insert(data);\n  }\n  \n  for(set<unsigned>::iterator ite = s.begin();ite!=s.end();ite++)\n    oneList->append(*ite);    \n}\n\nvoid randomListsGeneration(vector<Array<unsigned>*> &arrays, unsigned seed) {  \n  srand(seed);\n  \n  unsigned listsNumber = random() % 120;\n  \n  if(listsNumber == 0) listsNumber = 1;\n\n  for(unsigned i=0;i<listsNumber;i++) {\n    Array<unsigned> *oneList = new Array<unsigned>; \n    randomGenerateList(oneList);\n    \n    unsigned duplicateNumber = random() % 10;\n    \n    if(duplicateNumber == 0)\n      duplicateNumber = 1;\n    \n    for(unsigned j=0;j<duplicateNumber;j++)\n      arrays.push_back(oneList);      \n  }  \n}\n\nvoid freeIndex(vector<Array<unsigned>*> &arrays) {\n  set<Array<unsigned>*> toFree;\n  for(unsigned i = 0; i < arrays.size(); i++)\n    toFree.insert(arrays.at(i));\n\n  for(set<Array<unsigned>*>::iterator iter = toFree.begin(); iter != toFree.end(); iter++)\n    delete *iter;\n}\n\nvoid testRandomMergeAlgorithmsWithDuplicate(unsigned seed)\n{\n  //srand((unsigned)time(0));\n  srand(seed);\n\n  vector<Array<unsigned>*> arrays1;\n  randomListsGeneration(arrays1, seed);\n  vector<Array<unsigned>*> arrays2;\n  randomListsGeneration(arrays2, seed);\n  vector<Array<unsigned>*> arrays3;\n  randomListsGeneration(arrays3, seed);\n\n  unsigned threshold = random() % 100;\n  if (threshold == 0) threshold = 1;\n\n  cout<< \"Merging threshold is \" << threshold << endl;\n\n  vector<unsigned> result1;\n  vector<unsigned> result2;\n  vector<unsigned> result3;\n\n  ScanCountMerger<> *mergeLists1 = new ScanCountMerger<>(9999999, false);\n  DivideSkipMerger<> *mergeLists2 = new DivideSkipMerger<>(true);\n  DivideSkipMerger<> *mergeLists3 = new DivideSkipMerger<>(false);\n\n  mergeLists1->merge(arrays1, threshold, result1);\n  mergeLists2->merge(arrays2, threshold, result2);\n  mergeLists3->merge(arrays3, threshold, result3);  \n  \n  cout<<result1.size() << \" = \" << result2.size()\n      << \" = \" << result3.size() << endl;\n\n  if ((result1.size() != result2.size() ) || (result1.size() != result3.size()))\n    cout<<\"Wrong!!!\"<< \" \" << seed << endl;\n\n  freeIndex(arrays1);\n  freeIndex(arrays2);\n  freeIndex(arrays3);\n\n  delete mergeLists1;\n  delete mergeLists2;\n  delete mergeLists3;\n  \n}\n\nint main() {  \n  cout<<\"Random generating lists and perform testing.\" <<endl;\n\n  for(unsigned i=0;i<50;i++)\n    testRandomMergeAlgorithmsWithDuplicate(i);\n\n  cout<<\"OK pass the test.\"<<endl;\n}\n", "encoding": "ascii"}