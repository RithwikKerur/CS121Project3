{"url": "http://flamingo.ics.uci.edu/releases/2.0.1/src/sepia/sample.cc", "content": "/*\n  $Id: sample.cc 4096 2008-11-06 01:51:40Z rares $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license\n\n  Date: 05/04/2006\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"sample.h\"\n\n#include <cstdlib>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n\nSample::Sample(): count(0)\n{\n}\n\nSample::Sample(const unsigned max): count(0)\n{\n  initIndex(max);\n  initRand();\n}\n\nSample::Sample(const unsigned no, const unsigned max): count(0)\n{  \n  if (no < max) \n    {\n      initIndex(max);\n      initRand();\n\n      sample.reserve(no);\n      for (; count < no; count++) \n        {\n          unsigned idx = rand() % (max - count);\n          unsigned val = index[idx];\n          index[idx] = index[max - count - 1];\n          sample.push_back(val);\n        }\n    }\n  else\n    {\n      sample.reserve(no);\n      for (; count < no; count++) sample.push_back(count);\n    }\n}\n\nSample::Sample(const string &fileName): count(0)\n{\n  read(fileName);\n}\n\nvoid Sample::initIndex(const unsigned max)\n{\n  index.reserve(max);\n  for (unsigned i = 0; i < max; i++) index.push_back(i);\n}\n\nvoid Sample::initRand() const\n{\n  time_t ltime;\n  time(&ltime);\n  srand(static_cast<unsigned int>(ltime));\n}\n\nunsigned Sample::generate() \n{\n  if (index.size() == count)\n    {\n      cerr << \"no more samples in Sample::generate\" << endl;\n      exit(1);\n    } \n  unsigned idx = rand() % (index.size() - count);\n  unsigned val = index[idx];\n  index[idx] = index[index.size() - count - 1];\n  count++;\n  return val;\n}\n\nvoid Sample::push_back(const unsigned val)\n{\n  sample.push_back(val);\n}\n\nvoid Sample::read(const string &fileName)\n{\n  cerr << \"sample \" << fileName << endl; \n  ifstream fin(fileName.c_str());\n  if (!fin) {\n    cerr << \"can't open input file \\\"\" << fileName << \"\\\"\" << endl; \n    exit(EXIT_FAILURE); \n  } \n  fin >> *this;\n  cerr << \"sample read (\" << sample.size() << \")\" << endl;\n}\n\nvoid Sample::write(const string &fileName)\n{\n  cerr << \"sample \" << fileName << endl; \n  ofstream fout(fileName.c_str());\n  if (!fout) { \n    cerr << \"can't open output file \\\"\" << fileName << \"\\\"\" << endl;\n    exit(EXIT_FAILURE);\n  }\n  fout << *this;\n  cerr << \"sample (\" << sample.size() << \") wrote\" << endl;\n}\n      \nostream& operator<<(ostream& out, const Sample& s)\n{\n  out << s.sample.size() << endl << endl;\n  for (vector<unsigned>::const_iterator it = s.sample.begin(); \n       it != s.sample.end(); ++it)\n    out << *it << endl;\n  return out;\n}\n\nistream& operator>>(istream& in, Sample& s) \n{\n  unsigned no;\n  in >> no;\n  s.sample.reserve(no);\n  for (; s.count < no; s.count++) \n    {\n      unsigned val;\n      in >> val;\n      s.sample.push_back(val);\n    }\n  return in;\n}\n", "encoding": "ascii"}