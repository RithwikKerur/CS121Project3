{"url": "http://flamingo.ics.uci.edu/releases/4.1/src/sepia/src/ppdtable/allrand.cc", "content": "/*\n  $Id: allrand.cc 4143 2008-12-08 23:23:55Z abehm $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license\n\n  Date: 01/14/2006\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"allrand.h\"\n\nAllRand::AllRand(const vector<string> *d, Clusters *c, ContQueryPivot *q, \n                 const unsigned samplePer): \n  PPDSample(d, c, q, samplePer) \n{\n  // init - sample\n  sample = Sample(max(1u, \n                      static_cast<unsigned>(static_cast<float>(samplePer) / \n                                            100 * data->size())), \n                  data->size());\n\n  // init - loop\n  sampleIt = sample.begin();  \n  clusterIt = clusters->beginCluster();\n  stringIt = clusterIt->begin();\n}\n\nvoid AllRand::step() \n{\n  stringIt++;\n  if (stringIt == clusterIt->end()) {\n    ++clusterIt;\n    if (clusterIt == clusters->endCluster())\n      {\n        sampleIt++;\n        if (sampleIt == sample.end()) \n          return;\n        clusterIt = clusters->beginCluster();\n      }\n    stringIt = clusterIt->begin();\n  }\n}\n\nbool AllRand::hasNext() const \n{\n  if (sampleIt != sample.end()) \n    return true;\n  return false;\n}\n\nPPDTriple AllRand::next() \n{\n  const unsigned q = *sampleIt;\n  const unsigned p = clusterIt->getPivot();\n  const unsigned s = *stringIt;\n\n  PPDTriple triple = PPDTriple(q,\n                               p,\n                               s,\n                               SimVect((*data)[q], (*data)[p]),\n                               SimVect((*data)[p], (*data)[s]),\n                               SimDist((*data)[q], (*data)[s]));\n\n  // increment\n  step();\n\n  return triple;\n}\n", "encoding": "ascii"}