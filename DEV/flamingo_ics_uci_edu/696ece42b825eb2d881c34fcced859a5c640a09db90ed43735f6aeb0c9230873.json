{"url": "http://flamingo.ics.uci.edu/releases/2.0/docs/GettingStartedDoc.html", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:html=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>GettingStartedDoc - Chen Li -- Group - Trac</title>\n<style type=\"text/css\">\n           @import url(media/trac.css);\n          </style>\n</head>\n<body>\n<p>\n<a href=\"index.html\">Back to Index</a>\n</p>\n<hr/>\n<div class=\"wikipage\">\n<div id=\"searchable\">\n<p>AppString\n&gt; AppStringDoc</p>\n<div class=\"wiki-toc\">\n<ol>\n<li>\n<a href=\"#GettingStarted\" shape=\"rect\">Getting Started</a>\n<ol>\n<li>\n<a href=\"#Introduction\" shape=\"rect\">Introduction</a>\n</li>\n<li>\n<a href=\"#DownloadingthePackage\" shape=\"rect\">Downloading the\nPackage</a>\n</li>\n<li>\n<a href=\"#Requirements\" shape=\"rect\">Requirements</a>\n</li>\n<li>\n<a href=\"#WrappersSimplestWayToUseTheLibrary\" shape=\"rect\">Wrappers\n(Simplest Way To Use The Library)</a>\n</li>\n<li>\n<a href=\"#Step-By-StepGuide\" shape=\"rect\">Step-By-Step Guide</a>\n<ol>\n<li>\n<a href=\"#Step1:CompilingTheLibrary\" shape=\"rect\">Step1: Compiling The\nLibrary</a>\n</li>\n<li>\n<a href=\"#Step2:UsingTheLibraryInAnApplication\" shape=\"rect\">Step2: Using\nThe Library In An Application</a>\n</li>\n<li>\n<a href=\"#Step3:CompilingAndRunningTheApplication\" shape=\"rect\">Step3:\nCompiling And Running The Application</a>\n</li>\n</ol>\n</li>\n<li>\n<a href=\"#BasicUsage\" shape=\"rect\">Basic Usage</a>\n</li>\n<li>\n<a href=\"#ExampleFiles\" shape=\"rect\">Example Files</a>\n</li>\n</ol>\n</li>\n</ol>\n</div>\n<h1 id=\"GettingStarted\">Getting Started</h1>\n<h2 id=\"Introduction\">Introduction</h2>\n<p>This tutorial will guide through the basics steps needed to\nperform approximate string search on a collection of strings using\nthis library. This guide focuses on how to use the FilterTree\n(FilterTreeDoc) module.</p>\n<h2 id=\"DownloadingthePackage\">Downloading the Package</h2>\n<ul>\n<li>The entire package may be downloaded from <a class=\"ext-link\" href=\"http://flamingo.ics.uci.edu/releases/2.0/flamingo-2.0.tgz\" shape=\"rect\">\n<span class=\"icon\">\nhttp://flamingo.ics.uci.edu/releases/2.0/flamingo-2.0.tgz</span>\n</a>\n</li>\n</ul>\n<h2 id=\"Requirements\">Requirements</h2>\n<p>Most modules in this release were developed and tested on Ubuntu\nLinux using the GNU GCC/G++ compiler.</p>\n<p>In order to compile and run most modules you will need the\nfollowing:</p>\n<ul>\n<li>Linux environment (preferably a Debian based Linux, e.g.\nUbuntu)</li>\n<li>C++ compiler (GCC/G++ version 4.0 or later)</li>\n<li>C++ Boost library, <a class=\"ext-link\" href=\"http://www.boost.org\" shape=\"rect\">\n<span class=\"icon\">http://www.boost.org</span>\n</a> (only required for PartEnumDoc)</li>\n</ul>\n<p>On systems with the aptitude package manager (e.g. Ubuntu,\nDebian) you can install all required packages by typing the\nfollowing as root user (or using sudo):</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\n$ apt-get install gcc g++ libboost-dev\n</pre>\n<p>The module MatTreeDoc was developed in\nVisual C++. No makefile is provided for that module. We recommend\nusing Windows and Visual C++ for that module.</p>\n<h2 id=\"WrappersSimplestWayToUseTheLibrary\">Wrappers (Simplest Way\nTo Use The Library)</h2>\n<p>For your convenience, we have added wrappers that contain all\nnecessary objects as described in section \"Basic Usage\". All you\nneed to do to build an index and execute queries, is to create an\ninstance of a wrapper. These wrappers initialize components with\ndefault values and are the simplest and fastest way to use our\nlibrary - at the expense of being able to control tuning parameters\n(which filters are used, fanout, etc.).<br clear=\"none\"/>\nWe recommend browsing through the code in\n<strong>filtertree/wrappers/example.cc</strong>.</p>\n<h2 id=\"Step-By-StepGuide\">Step-By-Step Guide</h2>\n<p>In this guide we will use a wrapper to show you how to perform\napproximate string search using the edit distance.</p>\n<h3 id=\"Step1:CompilingTheLibrary\">Step1: Compiling The\nLibrary</h3>\n<p>Let us say you have extracted the archive to the following\ndirectory: <strong>/home/joe/flamingo-2.0</strong>\n<br clear=\"none\"/>\nThen you need to edit\n<strong>/home/joe/flamingo-2.0/src/makefile.inc</strong> and set\nCODEBASEROOT to the root directory of the source files, i.e.\n<strong>/home/joe/flamingo-2.0/src</strong>\n<br clear=\"none\"/>\nAfter the modifications, your\n<strong>/home/joe/flamingo-2.0/src/makefile.inc</strong> should\nlook like this:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\nCODEBASEROOT = /home/joe/flamingo-2.0/src\nAPPSTRINGROOT = $(CODEBASEROOT)\n\nVPATH = $(APPSTRINGROOT)\n\nCC = g++\n\nCPPFLAGS = -Wall -I$(APPSTRINGROOT) -O3\n# CPPFLAGS = -Wall -I$(APPSTRINGROOT) -g\n\nifndef CODEBASEROOT\n$(error Please edit makefile.ini and set the CODEBASEROOT variable to the absolute path of the source code directory. e.g., if you put the code in /home/user/flamingo-2.0/src do: CODEBASEROOT = /home/user/flamingo-2.0/src)\n endif\n</pre>\n<p>Now you can compile the wrapper library (and all other required\nlibraries) by entering\n<strong>/home/joe/flamingo-2.0/src/filtertree/wrappers</strong> and\nrunning <strong>make</strong>, i.e.:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\n$ cd /home/joe/flamingo-2.0/src/filtertree/wrappers\n$ make\n</pre>\n<p>There should now be a file\n<strong>libfiltertreewrappers.a</strong> in\n<strong>/home/joe/flamingo-2.0/src/filtertree/wrappers</strong>,\ni.e. for an <strong>ls -l</strong> you should get an output similar\nto the following:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\n$ ls -l\n-rwxr-xr-x 1 joe joe 139644 2008-09-17 16:36 example\n-rw-r--r-- 1 joe joe   2913 2008-09-17 10:55 example.cc\n-rw-r--r-- 1 joe joe  84668 2008-09-17 16:35 example.o\n-rw-r--r-- 1 joe joe   1772 2008-09-17 16:35 libfiltertreewrappers.a\n-rw-r--r-- 1 joe joe   1609 2008-09-17 10:55 makefile\n-rw-r--r-- 1 joe joe   1822 2008-09-17 10:55 wrapperabs.h\n-rw-r--r-- 1 joe joe    307 2008-09-17 10:55 wrappers.cc\n-rw-r--r-- 1 joe joe    679 2008-09-17 10:55 wrappers.h\n-rw-r--r-- 1 joe joe    985 2008-09-17 16:35 wrappersimple.h\n-rw-r--r-- 1 joe joe   1640 2008-09-17 16:35 wrappers.o\n</pre>\n<p>(note that the exact file sizes may differ from yours)</p>\n<h3 id=\"Step2:UsingTheLibraryInAnApplication\">Step2: Using The\nLibrary In An Application</h3>\n<p>Now that we have compiled the library, we are ready to include\nit into an application.<br clear=\"none\"/>\nLet us assume you wish to use the library in an application located\nin <strong>/home/joe/searchapp</strong> that consists of one source\nfile <strong>/home/joe/searchapp/main.cc</strong>\n<br clear=\"none\"/>\nYou can copy and paste the following lines of source code into\n<strong>/home/joe/searchapp/main.cc</strong> for us to compile:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\n#include \"wrappers/wrappers.h\"\n\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\n\nusing namespace std;\n\nint main() {\n  StringContainerVector strContainer;\n  strContainer.fillContainer(\"/home/joe/flamingo-2.0/src/filtertree/data/dummy.txt\", 80); // read 80 lines from the file specified\n  \n  WrapperSimpleEd wrapper(&amp;strContainer, 3); // use a simple wrapper that uses the edit distance and 3-grams\n  wrapper.buildIndex();\n\n  float editDistance = 2.0f;\n  string queryString = \"xample\";\n\n  vector&lt;unsigned&gt; resultStringIDs; // where to store the result string ids\n  wrapper.search(queryString, editDistance, resultStringIDs);\n\n  // print out the result strings\n  cout &lt;&lt; \"SIMILAR STRINGS: \" &lt;&lt; endl;\n  for(unsigned i = 0; i &lt; resultStringIDs.size(); i++) {\n    string tmp;\n    strContainer.retrieveString(tmp, resultStringIDs.at(i));\n    cout &lt;&lt; tmp &lt;&lt; endl;\n  }\n\n  return 0;\n}\n</pre>\n<p>This application will use the first 80 lines of\n<strong>/home/joe/flamingo-2.0/src/filtertree/data/dummy.txt</strong>\nas the data strings.<br clear=\"none\"/>\nIt will build an index to support approximate string search and\nanswer a query that asks for all data strings that are within an\nedit-distance of 2 to \"xample\".<br clear=\"none\"/>\nFinally, the results will be displayed.</p>\n<h3 id=\"Step3:CompilingAndRunningTheApplication\">Step3: Compiling\nAnd Running The Application</h3>\n<p>Since we decided to have every module produce it's own library\n(.a file) it is necessary to link several .a files with the main.o\n(produced by /home/joe/searchapp/main.cc).<br clear=\"none\"/>\nThe simplest way to achieve this is to create a makefile for the\napplication, i.e. create a file\n<strong>/home/joe/searchapp/makefile</strong> with the following\ncontents:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\ninclude /home/joe/flamingo-2.0/src/makefile.inc\n\nLDFLAGS = -lrt\n\nall: main\n\nmain:   main.o \\\n        /home/joe/flamingo-2.0/common/libcommon.a \\\n        /home/joe/flamingo-2.0/listmerger/liblistmerger.a \\\n        /home/joe/flamingo-2.0/filtertree/libfiltertree.a \\\n        /home/joe/flamingo-2.0/util/libutil.a \\\n        /home/joe/flamingo-2.0/filtertree/wrappers/libfiltertreewrappers.a\n</pre>\n<p>Now you should be able to compile the application using\n<strong>make</strong>, i.e.</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\n$ make\n</pre>\n<p>If make was successful, you have compiled and linked the\napplication! It is time to try and run it by typing</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\n$ ./main\n</pre>\n<p>You should have the an output something similar to the\nfollowing:</p>\n<pre class=\"wiki\" xml:space=\"preserve\">\nINPUTFILE: \"/home/joe/flamingo-2.0/src/filtertree/data/dummy.txt\"\n100% FILLING CONTAINER: 80/80; 0'0\"/0'0\"   \n100% INSERTING INTO INDEX: 80/80; 0'0\"/0'0\"   \nSIMILAR STRINGS: \nexample1\nexample2\nexample3\nexample4\nexample5\n</pre>\n<p>Congratulations, you have successfully created your first\napplication using this library!</p>\n<h2 id=\"BasicUsage\">Basic Usage</h2>\n<p>Approximate string search can be performed in two basic steps:\n(1) building the index, and (2) answering queries using the index.\nWe will now discuss the basic components for each of the steps (at\na high-level).</p>\n<ol>\n<li>Building The Index, Needed Components\n<ul>\n<li>String Container (stores the data strings on which you want to\nperform queries)</li>\n<li>Gram Generator (decomposes strings into grams)</li>\n<li>Indexer (builds the filter tree and the inverted lists, needs a\nString Container and a Gram Generator)</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li>Answering Queries Using The Index, Needed Components:\n<ul>\n<li>List Merger (solves the T-occurrence problem given a set of\ninverted lists and a merging-threshold)</li>\n<li>Indexer (builds the filtertree and the inverted-lists, needs a\nString Container and a Gram Generator)</li>\n<li>Searcher (answers queries, needs a List Merger and an\nIndexer)</li>\n<li>Similarity Metric (represents the similarity metric to be\nused)</li>\n<li>Query (contains the query string, the similarity metric and the\nsimilarity threshold)</li>\n</ul>\n</li>\n</ol>\n<p>Refer to <strong>filtertree/example.cc</strong> for some\nexamples.</p>\n<h2 id=\"ExampleFiles\">Example Files</h2>\n<p>Apart from reading this guide, we recommend you browse through\nthe code of some example files. We have provided these files to\nhelp you understand how to use the library as quickly as\npossible.</p>\n<ul>\n<li>filtertree/wrappers/example.cc</li>\n<li>filtertree/example.cc</li>\n<li>filtertree/perftest.cc</li>\n<li>filtertree/unittest.cc</li>\n</ul>\n</div>\n</div>\n<div class=\"footer\">\n<hr/>\n<p>\n<a href=\"index.html\">Back to Index</a>\n</p>\n</div>\n</body>\n</html>\n", "encoding": "ascii"}