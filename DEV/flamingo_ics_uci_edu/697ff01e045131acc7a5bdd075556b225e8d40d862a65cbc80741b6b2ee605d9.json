{"url": "http://flamingo.ics.uci.edu/releases/4.0/src/util/src/unittest.cc", "content": "/*\n  $Id: unittest.cc 5713 2010-09-09 03:11:22Z abehm $\n\n  Copyright (C) 2010 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the\n  BSD license.\n\n  Date: 01/30/2007\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n          Jiaheng Lu\n*/\n\n#undef NDEBUG\n\n#include <fstream>\n#include <iostream>\n#include <cassert>\n\n#include \"gram.h\"\n#include \"misc.h\"\n#include \"input.h\"\n#include \"output.h\"\n#include \"io.h\"\n#include \"array.h\"\n#include \"stringshuffler.h\"\n#include \"simfuncs.h\"\n\nusing namespace std;\n\nvoid simFuncsTest()\n{\n\n  unsigned t = 0;\n  \n  vector<string> s;\n  s.push_back(\"abc\");\n  s.push_back(\"ab\");\n  s.push_back(\"ac\");\n  s.push_back(\"bc\");\n  s.push_back(\"a\");\n  s.push_back(\"b\");\n  s.push_back(\"c\");\n  s.push_back(\"abcdef\");\n  s.push_back(\"xyz\");\n  s.push_back(\"bac\");\n  s.push_back(\"acb\");\n  s.push_back(\"ba\");\n  \n  const unsigned n = 12;\n  unsigned e[][n] = \n    { {0, 1, 1, 1, 2, 2, 2, 3l, 3, 2, 2, 2},\n      {1, 0, 1, 2, 1, 1, 2, 4, 3, 2, 1, 2},\n      {1, 1, 0, 1, 1, 2, 1, 4, 3, 1, 1, 2},\n      {1, 2, 1, 0, 2, 1, 1, 4, 3, 1, 2, 1},\n      {2, 1, 1, 2, 0, 1, 1, 5, 3, 2, 2, 1},\n      {2, 1, 2, 1, 1, 0, 1, 5, 3, 2, 2, 1},\n      {2, 2, 1, 1, 1, 1, 0, 5, 3, 2, 2, 2},\n      {3, 4, 4, 4, 5, 5, 5, 0, 6, 5, 4, 5},\n      {3, 3, 3, 3, 3, 3, 3, 6, 0, 3, 3, 3},\n      {2, 2, 1, 1, 2, 2, 2, 5, 3, 0, 2, 1},\n      {2, 1, 1, 2, 2, 2, 2, 4, 3, 2, 0, 3},\n      {2, 2, 2, 1, 1, 1, 2, 5, 3, 1, 3, 0}};\n\n  unsigned eSwap[][n] = \n    { {0, 1, 1, 1, 2, 2, 2, 3, 3, 1, 1, 2},\n      {1, 0, 1, 2, 1, 1, 2, 4, 3, 2, 1, 1},\n      {1, 1, 0, 1, 1, 2, 1, 4, 3, 1, 1, 2},\n      {1, 2, 1, 0, 2, 1, 1, 4, 3, 1, 2, 1},\n      {2, 1, 1, 2, 0, 1, 1, 5, 3, 2, 2, 1},\n      {2, 1, 2, 1, 1, 0, 1, 5, 3, 2, 2, 1},\n      {2, 2, 1, 1, 1, 1, 0, 5, 3, 2, 2, 2},\n      {3, 4, 4, 4, 5, 5, 5, 0, 6, 4, 4, 5},\n      {3, 3, 3, 3, 3, 3, 3, 6, 0, 3, 3, 3},\n      {1, 2, 1, 1, 2, 2, 2, 4, 3, 0, 2, 1},\n      {1, 1, 1, 2, 2, 2, 2, 4, 3, 2, 0, 3},\n      {2, 1, 2, 1, 1, 1, 2, 5, 3, 1, 3, 0}};\n\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n//       cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n//            << e[i][j] << endl;\n      assert(ed(s[i], s[j]) == e[i][j]); t++;\n    }  \n\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n      assert(ed(s[i], s[j], e[i][j])); t++;\n    }\n\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n      if (e[i][j]) {\n        assert(!ed(s[i], s[j], e[i][j] - 1)); t++;\n      }\n    }\n\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n//       cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n//            << eSwap[i][j] << \" \" << edSwap(s[i], s[j]) << endl;\n      assert(edSwap(s[i], s[j]) == eSwap[i][j]); t++;\n    }  \n\n \n  cout << \"ed (\" << t << \")\" << endl;\n\n  t = 0;\n\n  vector<string> s2;\n  s2.push_back(\"abc\");\n  s2.push_back(\"ab\");\n  s2.push_back(\"ac\");\n  s2.push_back(\"bc\");\n  s2.push_back(\"a\");\n  s2.push_back(\"b\");\n  s2.push_back(\"c\");\n  s2.push_back(\"abcdef\");\n  s2.push_back(\"xyz\");\n  s2.push_back(\"bac\");\n  s2.push_back(\"acb\");\n  s2.push_back(\"ba\");\n  \n  const unsigned n1 = 12;\n  unsigned q = 1;\n  float r1[][n1] = \n    { {     1, 2. / 3, 2. / 3, 2. / 3, 1. / 3,\n       1. / 3, 1. / 3,     .5,      0,      1,      1, 2. / 3},\n      {2. / 3, 1,      1. / 3, 1. / 3,     .5,\n           .5,      0, 1. / 3,      0, 2. / 3, 2. / 3,      1},\n      {2. / 3, 1. / 3,      1, 1. / 3,     .5,\n            0,     .5, 1. / 3,      0, 2. / 3, 2. / 3, 1. / 3},\n      {2. / 3, 1. / 3, 1. / 3,      1,      0,\n           .5,     .5, 1. / 3,      0, 2. / 3, 2. / 3, 1. / 3},\n      {1. / 3,     .5,     .5,      0,      1,\n            0,      0, 1. / 6,      0, 1. / 3, 1. / 3,     .5},\n      {1. / 3,     .5,      0,     .5,      0,\n            1,      0, 1. / 6,      0, 1. / 3, 1. / 3,     .5},\n      {1. / 3,      0,     .5,     .5,      0,\n            0,      1, 1. / 6,      0, 1. / 3, 1. / 3,      0},\n      {    .5, 1. / 3, 1. / 3, 1. / 3, 1. / 6,\n       1. / 6, 1. / 6,      1,      0,     .5,     .5, 1. / 3},\n      {     0,      0,      0,      0,      0,\n            0,      0,      0,      1,      0,      0,      0},\n      {     1, 2. / 3, 2. / 3, 2. / 3, 1. / 3, \n       1. / 3, 1. / 3,     .5,      0,      1,      1, 2. / 3},\n      {     1, 2. / 3, 2. / 3, 2. / 3, 1. / 3,\n       1. / 3, 1. / 3,     .5,      0,      1,      1, 2. / 3},\n      {2. / 3,      1, 1. / 3, 1. / 3,     .5,\n           .5,      0, 1. / 3,      0, 2. / 3, 2. / 3,      1}};\n\n  unsigned n11 = n1;\n  for (unsigned i = 0; i < n11; i++)\n    for (unsigned j = 0; j < n11; j++) {\n      //cout << i << \" \" << j << \" \" << s2[i] << \" \" << s2[j] << \" \" \n      //     << r1[i][j] << \" \" << jaccard(s[i], s[j], q) << endl;\n      assert(jaccardNoPrePost(s2[i], s2[j], q) == r1[i][j]); t++;\n    }  \n  \n  s2.clear();\n  s2.push_back(\"abc\");\n  s2.push_back(\"ab\");\n  s2.push_back(\"ac\");\n  s2.push_back(\"bc\");\n  s2.push_back(\"abcdef\");\n  s2.push_back(\"xyz\");\n  s2.push_back(\"bac\");\n  s2.push_back(\"acb\");\n  s2.push_back(\"ba\");\n  \n  q = 2;\n  const unsigned n2 = 9; \n  float r2[][n2] = \n    { {     1,     .5,      0,     .5,     .4,     0,      0,      0,      0},\n      {    .5,      1,      0,      0, 1. / 5,     0,      0,      0,      0},\n      {     0,      0,      1,      0,      0,     0,     .5,     .5,      0},\n      {    .5,      0,      0,      1, 1. / 5,     0,      0,      0,      0},\n      {    .4, 1. / 5,      0, 1. / 5,      1,     0,      0,      0,      0},\n      {     0,      0,      0,      0,      0,     1,      0,      0,      0},\n      {     0,      0,     .5,      0,      0,     0,      1, 1. / 3,     .5},\n      {     0,      0,     .5,      0,      0,     0, 1. / 3,      1,      0},\n      {     0,      0,      0,      0,      0,     0,     .5,      0,      1}};\n\n  unsigned n22 = n2;\n  for (unsigned i = 0; i < n22; i++)\n    for (unsigned j = 0; j < n22; j++) {\n      //cout << i << \" \" << j << \" \" << s2[i] << \" \" << s2[j] << \" \" \n      //     << r2[i][j] << \" \" << jaccard(s2[i], s2[j], q) << endl;\n      assert(jaccardNoPrePost(s2[i], s2[j], q) == r2[i][j]); t++;\n    }  \n\n  assert(substringed(\"abcdef\", \"def\", 0) == true); t++;\n  assert(substringed(\"abcdef\", \"abf\", 0) == false); t++;\n  assert(substringed(\"abcdef\", \"abf\", 1) == true); t++;\n\n  assert(substringed(\"university\", \"vers\", 0) == true); t++;\n  assert(substringed(\"university\", \"verz\", 0) == false); t++;\n  assert(substringed(\"university\", \"verz\", 1) == true); t++;\n\n  assert(substringed(\"university of california at irvine\", \"irvine\", 0) == true); \n  t++;\n  assert(substringed(\"university of california at irvine\", \"irivine\", 0) == false);\n  t++;\n  assert(substringed(\"university of california at irvine\", \"irivine\", 1) == true);\n  t++;\n  assert(substringed(\"university of california at irvine\", \"calxifoyrnia\", 1) == \n         false); t++;\n  assert(substringed(\"university of california at irvine\", \"calxifoyrnia\", 2) == \n         true); t++;\n\n  float d1 = normalizedED(\"test\", \"test\" );\n\n  float d2 = cosine( \"test\",  \"test\");\n\n  float d3 = jaccardNoPrePost( \"test\",  \"test\");\n\n  float d4 = dice( \"test\",  \"test\" );\n\n  assert(d1 == 1.0); t++;\n  assert(d2 == 1.0); t++;\n  assert(d3 == 1.0); t++;\n  assert(d4 == 1.0); t++;\n\n  float d5 = normalizedED(\"test\",\"test1\" );\n  float d6 = normalizedED(\"test\",\"test11\" );\n\n  //cout<<\"d1 is \" <<d1 <<\" ; d2 is \"<<d2 <<endl;\n\n  assert(d5 >0 && d5 <1 ); t++;\n  assert(d6 >0 && d6 <1 ); t++;\n  assert(d5>d6); t++;\n\n  d1 = cosine(\"test\",\"test1\");\n  d2 = cosine(\"test\",\"test11\");\n\n  //cout<<\"d1 is \" <<d1 <<\" ; d2 is \"<<d2 <<endl;\n\n  assert(d1 >0 && d1 <1 ); t++;\n  assert(d2 >0 && d2 <1 ); t++;\n  assert(d1>d2); t++;\n\n  d1 = jaccardNoPrePost(\"test\",\"test1\" );\n  d2 = jaccardNoPrePost(\"test\",\"test11\" );\n\n  //cout<<\"d1 is \" <<d1 <<\" ; d2 is \"<<d2 <<endl;\n\n  assert(d1 >0 && d1 <1 ); t++;\n  assert(d2 >0 && d2 <1 ); t++;\n  assert(d1>d2); t++;\n\n  d1 = dice(\"test\",\"test1\");\n  d2 = dice(\"test\",\"test11\" );\n\n  //cout<<\"d1 is \" <<d1 <<\" ; d2 is \"<<d2 <<endl;\n\n  assert(d1 >0 && d1 <1 ); t++;\n  assert(d2 >0 && d2 <1 ); t++;\n  assert(d1>d2); t++;\n\n  cout << \"jd (\" << t << \")\" << endl;\n}\n\nvoid stringShufflerTest()\n{\n  // generate an input file\n  const string inputFile = \"stringshufflerunittest.data\";\n  const string shuffledFile = \"stringshufflerunittest.shuffled\";\n  \n  ofstream testFile;\n  testFile.open(inputFile.c_str());\n  testFile << \"This is line 1\" << endl;\n  testFile << \"That is line 2\" << endl;\n  testFile << \"aaaa\" << endl;\n  testFile << \"bbbb\" << endl;\n  testFile.close();\n  \n  vector<string> strings;\n\n  // test 1\n  ShuffleStrings(inputFile,\n\t\t shuffledFile,\n\t\t 4,  // max number that didn't fail: 2M\n\t\t 20);\n  readString(strings, shuffledFile, 4, 20);\n  assert(strings.size() == 4);\n\n  // test 2\n  strings.clear();\n  ShuffleStrings(inputFile,\n\t\t shuffledFile,\n\t\t 4,  // max number that didn't fail: 2M\n\t\t 5);\n  readString(strings, shuffledFile, 4, 5);\n  assert(strings.size() == 2);\n\n  // delete the two files\n  assert(system((\"\\\\rm \" + inputFile).c_str()));\n  assert(system((\"\\\\rm \" + shuffledFile).c_str()));\n \n}\n\nvoid arrayTest()\n{\n  unsigned t = 0;\n\n  Array<unsigned> *array = new Array<unsigned>(5, 10);\n  array->append(10);\n  array->append(20);\n  array->append(30);\n  array->append(40);\n  array->append(50);\n  array->append(60);\n  array->append(70);\n  array->append(80);\n\n  assert(array->size() == 8); t++;\n\n  assert(array->at(0) == 10); t++;\n  assert(array->at(1) == 20); t++;\n  assert(array->at(2) == 30); t++;\n  assert(array->at(3) == 40); t++;\n  assert(array->at(4) == 50); t++;\n  assert(array->at(5) == 60); t++;\n  assert(array->at(6) == 70); t++;\n  assert(array->at(7) == 80); t++;\n\n  assert(array->binarySearch(10) == 0); t++;\n  assert(array->binarySearch(15) == 1); t++;\n  assert(array->binarySearch(20) == 1); t++;\n  assert(array->binarySearch(25) == 2); t++;\n  assert(array->binarySearch(30) == 2); t++;\n  assert(array->binarySearch(80) == 7); t++;\n  assert(array->binarySearch(85) == 8); t++;\n  assert(array->binarySearch(90) == 8); t++;\n\n  assert(array->jumpIncRevSearch(10, 6) == 0); t++;\n  assert(array->jumpIncRevSearch(15, 4) == 0); t++;\n  assert(array->jumpIncRevSearch(20, 7) == 1); t++;\n  assert(array->jumpIncRevSearch(25, 3) == 1); t++;\n  assert(array->jumpIncRevSearch(30, 3) == 2); t++;\n  assert(array->jumpIncRevSearch(80, 8) == 7); t++;\n  assert(array->jumpIncRevSearch(85, 8) == 7); t++;\n  assert(array->jumpIncRevSearch(90, 8) == 7); t++;\n\n  assert(array->has(10)); t++;\n  assert(array->has(20)); t++;\n  assert(array->has(30)); t++;\n  assert(array->has(40)); t++;\n  assert(array->has(50)); t++;\n\n  assert(!array->has(15)); t++;\n  assert(!array->has(25)); t++;\n  assert(!array->has(35)); t++;\n  assert(!array->has(45)); t++;\n  assert(!array->has(56)); t++;\n  assert(!array->has(67)); t++;\n  assert(!array->has(89)); t++;\n\n  delete array;\n\n  Array<double> *array2 = new Array<double>(5, 10);\n  array2->append(10.0);\n  array2->append(20.0);\n  array2->append(30.0);\n  array2->append(40.0);\n  array2->append(50.0);\n  array2->append(60.0);\n  array2->append(70.0);\n  array2->append(80.0);\n\n  assert(array2->size() == 8); t++;\n\n  assert(array2->at(0) == 10.0); t++;\n  assert(array2->at(1) == 20.0); t++;\n  assert(array2->at(2) == 30.0); t++;\n  assert(array2->at(3) == 40.0); t++;\n  assert(array2->at(4) == 50.0); t++;\n  assert(array2->at(5) == 60.0); t++;\n  assert(array2->at(6) == 70.0); t++;\n  assert(array2->at(7) == 80.0); t++;\n\n  array2->erase(3);\n  assert(array2->at(0) == 10.0); t++;\n  assert(array2->at(1) == 20.0); t++;\n  assert(array2->at(2) == 30.0); t++;\n  assert(array2->at(3) == 50.0); t++;\n  assert(array2->at(4) == 60.0); t++;\n  assert(array2->at(5) == 70.0); t++;\n  assert(array2->at(6) == 80.0); t++;\n\n  array2->insert(1, 35.5);\n  assert(array2->at(0) == 10.0); t++;\n  assert(array2->at(1) == 35.5); t++;\n  assert(array2->at(2) == 20.0); t++;\n  assert(array2->at(3) == 30.0); t++;\n  assert(array2->at(4) == 50.0); t++;\n  assert(array2->at(5) == 60.0); t++;\n  assert(array2->at(6) == 70.0); t++;\n  assert(array2->at(7) == 80.0); t++;\n\n  delete array2;\n\n  Array<double> *array3 = new Array<double>(5, 10);\n  array3->append(10.0);\n  array3->append(20.0);\n\n  assert(array3->size() == 2); t++;\n\n  array3->erase(1);\n  array3->erase(0);\n\n  assert(array3->size() == 0); t++;\n\n  delete array3;\n\n  Array<unsigned> array4;\n\n  array4.append(1);\n  array4.append(2);\n  \n  assert(array4[0] == 1); t++;\n  assert(array4[1] == 2); t++;\n  \n  Array<unsigned> array5;\n\n  array5.append(1);\n  array5.append(2);\n  \n  assert(array4 == array5); t++;\n\n  Array<unsigned> array6;\n  \n  array6.append(1);\n  array6.append(2);\n  array6.append(3);\n  \n  vector<unsigned> v_a, v_c;\n\n  copy(array6.begin(), array6.end(), back_inserter(v_a));\n\n  v_c.push_back(1);\n  v_c.push_back(2);\n  v_c.push_back(3);\n  assert(v_a == v_c); t++;\n\n  cout << \"array (\" << t << \")\" << endl;  \n}\n\nvoid gramTest()\n{\n  unsigned t = 0;\n\n  // str2grams, str2gramsHash, and grams2str\n  vector<string> gramsCor, gramsRes;\n  string strRes;\n  gramsCor.push_back(string(1, PREFIXCHAR) + string(1, PREFIXCHAR) + \"a\");\n  gramsCor.push_back(string(1, PREFIXCHAR) + \"ab\");\n  gramsCor.push_back(\"abc\");\n  gramsCor.push_back(\"bc\" + string(1, SUFFIXCHAR));\n  gramsCor.push_back(\"c\" + string(1, SUFFIXCHAR) + string(1, SUFFIXCHAR));\n  str2grams(\"abc\", gramsRes);\n  assert(gramsRes == gramsCor); t++;\n  grams2str(gramsCor, strRes);\n  assert(strRes == \"abc\"); t++;\n\n  vector<unsigned> gramsHash, gramsHashRes;\n  for (vector<string>::const_iterator gram = gramsCor.begin();\n       gram != gramsCor.end(); ++gram)\n    gramsHash.push_back(hashString(*gram));\n  \n  str2grams(\"abc\", gramsHashRes);\n  assert(gramsHashRes == gramsHash); t++;  \n\n  gramsCor.clear();\n  gramsCor.push_back(\"%%%a\");\n  gramsCor.push_back(\"%%ab\");\n  gramsCor.push_back(\"%abc\");\n  gramsCor.push_back(\"abcd\");\n  gramsCor.push_back(\"bcd@\");\n  gramsCor.push_back(\"cd@@\");\n  gramsCor.push_back(\"d@@@\");\n  gramsRes.clear();\n  str2grams(\"abcd\", gramsRes, 4, '%', '@');\n  assert(gramsRes == gramsCor); t++;\n  grams2str(gramsCor, strRes, 4);\n  assert(strRes == \"abcd\"); t++;\n\n  gramsHash.clear();\n  for (vector<string>::const_iterator gram = gramsCor.begin();\n       gram != gramsCor.end(); ++gram)\n    gramsHash.push_back(hashString(*gram));\n  gramsHashRes.clear();\n  str2grams(\"abcd\", gramsHashRes, 4, '%', '@');\n  assert(gramsHashRes == gramsHash); t++;\n\n  // gram2id &  id2gram\n  assert(gram2id(\"abc\") == 207804); t++;\n  id2gram(207804, strRes, 3);\n  assert(strRes == \"abc\"); t++;\n\n  // GramId\n  GramId gid(3, PREFIXCHAR, SUFFIXCHAR, \"abc\", false);\n\n  assert(gid.getId(string(1, PREFIXCHAR) + string(1, PREFIXCHAR)\n                   + string(1, PREFIXCHAR)) == 0); t++;\n  assert(gid.getId(string(1, PREFIXCHAR) + string(1, PREFIXCHAR) + \"a\") == 1); t++;\n  assert(gid.getId(\"aaa\") == 31); t++;\n  assert(gid.getId(\"abc\") == 38); t++;\n  assert(gid.getId(\"cba\") == 86); t++;\n\n  assert(gid.getGram(0) == string(1, PREFIXCHAR) + string(1, PREFIXCHAR)\n         + string(1, PREFIXCHAR)); t++;\n  assert(gid.getGram(1) == string(1, PREFIXCHAR) + string(1, PREFIXCHAR) + \"a\"); t++;\n  assert(gid.getGram(31) == \"aaa\"); t++;\n  assert(gid.getGram(38) == \"abc\"); t++;\n  assert(gid.getGram(86) == \"cba\"); t++;\n\n  vector<unsigned> idsCor, idsRes;\n  idsCor.clear();\n  idsCor.push_back(1);\n  idsCor.push_back(6);\n  idsCor.push_back(32);\n  idsCor.push_back(37);\n  idsCor.push_back(63);\n  idsCor.push_back(68);\n  idsCor.push_back(94);\n  idsCor.push_back(99);\n  idsRes.clear();\n  gid.getIds(\"aabbcc\", idsRes);\n  assert(idsRes == idsCor); t++;\n\n  gramsCor.clear();\n  gramsCor.push_back(string(1, PREFIXCHAR) + string(1, PREFIXCHAR) + \"a\");\n  gramsCor.push_back(string(1, PREFIXCHAR) + \"aa\");\n  gramsCor.push_back(\"aab\");\n  gramsCor.push_back(\"abb\");\n  gramsCor.push_back(\"bbc\");\n  gramsCor.push_back(\"bcc\");\n  gramsCor.push_back(\"cc\" + string(1, SUFFIXCHAR));\n  gramsCor.push_back(\"c\" + string(1, SUFFIXCHAR) + string(1, SUFFIXCHAR));\n  gramsRes.clear();\n  gid.getGrams(idsCor, gramsRes);\n  assert(gramsRes == gramsCor); t++;\n  grams2str(gramsCor, strRes);\n  assert(strRes == \"aabbcc\"); t++;\n\n  string filenamePrefix = \"dataset\";\n  GramId gidSave = GramId();\n  gidSave.saveData(filenamePrefix);\n  GramId gidLoad = GramId(filenamePrefix);\n  assert(gidSave == gidLoad); t++;\n\n  // str2words\n  vector<string> words, wordsRes;\n  words.push_back(\"abc\");\n  words.push_back(\"de\");\n  words.push_back(\"f\");\n  \n  str2words(\"abc de f\", wordsRes);\n  assert(wordsRes == words); t++;\n  wordsRes.clear();\n  str2words(\"abc\\tde\\tf\", wordsRes);\n  assert(wordsRes == words); t++;\n  wordsRes.clear();\n  str2words(\"abc \\tde\\t f\", wordsRes);\n  assert(wordsRes == words); t++;\n  wordsRes.clear();\n  str2words(\"abc \\t de\\t \\tf\", wordsRes);\n  assert(wordsRes == words); t++;\n  wordsRes.clear();\n  str2words(\"\\t \\tabc \\t de\\t \\tf \\t \", wordsRes);\n  assert(wordsRes == words); t++;\n\n  // WordIndex\n  WordHash wordHash;\n  vector<string> data;\n  data.push_back(\"abc cd\");\n  data.push_back(\"cd def\");\n  data.push_back(\"abc\");\n  WordIndex::build(data, wordHash);\n\n  Ids s;\n  s.insert(0);\n  s.insert(2);\n  assert(wordHash[\"abc\"] == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordHash[\"cd\"] == s); t++;\n  s.erase(0);\n  assert(wordHash[\"def\"] == s); t++;\n  \n  wordHash.clear();\n  WordIndex::build(\"dataset.txt\", wordHash);\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordHash[\"abc\"] == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordHash[\"cd\"] == s); t++;\n  s.erase(0);\n  assert(wordHash[\"def\"] == s); t++;\n\n  WordIndex::save(\"dataset.words.txt\", \n                  \"dataset.ids.bin\", wordHash);\n  wordHash.clear();\n  WordIndex::load(\"dataset.words.txt\", \n                  \"dataset.ids.bin\", wordHash);\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordHash[\"abc\"] == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordHash[\"cd\"] == s); t++;\n  s.erase(0);\n  assert(wordHash[\"def\"] == s); t++;\n\n  WordIds wordIds;\n  WordKey wordKey;\n  WordIndex::build(data, wordIds, wordKey);\n\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordIds[wordKey[\"abc\"]].second == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordIds[wordKey[\"cd\"]].second == s); t++;\n  s.erase(0);\n  assert(wordIds[wordKey[\"def\"]].second == s); t++;\n\n  wordIds.clear();\n  wordKey.clear();\n  WordIndex::build(\"dataset.txt\", wordIds, wordKey);\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordIds[wordKey[\"abc\"]].second == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordIds[wordKey[\"cd\"]].second == s); t++;\n  s.erase(0);\n  assert(wordIds[wordKey[\"def\"]].second == s); t++;\n\n  WordIndex::save(\"dataset.wids.bin\", \"dataset.wkey.txt\", \n                  wordIds, wordKey);\n  wordIds.clear();\n  wordKey.clear();\n  WordIndex::load(\"dataset.wids.bin\", \"dataset.wkey.txt\", \n                  wordIds, wordKey);\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordIds[wordKey[\"abc\"]].second == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordIds[wordKey[\"cd\"]].second == s); t++;\n  s.erase(0);\n  assert(wordIds[wordKey[\"def\"]].second == s); t++;\n\n  vector<string> wordVectRes, wordVectCor;\n  vector<Ids> idsVectRes, idsVectCor;\n  WordKey wordPosMapRes, wordPosMapCor;\n  wordVectCor.push_back(\"abc\");\n  wordVectCor.push_back(\"cd\");\n  wordVectCor.push_back(\"def\");\n  Ids ids;\n  ids.insert(0);\n  ids.insert(2);\n  idsVectCor.push_back(ids);\n  ids.clear();\n  ids.insert(0);\n  ids.insert(1);\n  idsVectCor.push_back(ids);\n  ids.clear();\n  ids.insert(1);\n  idsVectCor.push_back(ids);\n  ids.clear();\n  wordPosMapCor[\"abc\"] = 0;\n  wordPosMapCor[\"cd\"] = 1;\n  wordPosMapCor[\"def\"] = 2;\n  WordIndex::build(data, wordVectRes, idsVectRes, wordPosMapRes);\n  assert(wordVectRes == wordVectCor); t++;\n  assert(idsVectRes == idsVectCor); t++;\n  for (WordKey::const_iterator el = wordPosMapRes.begin();\n       el != wordPosMapRes.end(); ++el) {\n    assert(wordPosMapCor.find(el->first) != wordPosMapCor.end()); \n    assert(wordPosMapCor[el->first] == el->second); \n  } t++;\n  wordVectRes.clear();\n  idsVectRes.clear();\n  wordPosMapRes.clear();\n\n  WordIndex::save(\"dataset\", wordVectCor, idsVectCor, wordPosMapCor);  \n  WordIndex::load(\"dataset\", wordVectRes, idsVectRes, wordPosMapRes);\n  assert(wordVectRes == wordVectCor); t++;\n  assert(idsVectRes == idsVectCor); t++;\n  for (WordKey::const_iterator el = wordPosMapRes.begin();\n       el != wordPosMapRes.end(); ++el) {\n    assert(wordPosMapCor.find(el->first) != wordPosMapCor.end()); \n    assert(wordPosMapCor[el->first] == el->second); \n  } t++;\n  wordVectRes.clear();\n  idsVectRes.clear();\n  wordPosMapRes.clear();  \n\n  cout << \"gram (\" << t << \")\" << endl;\n}\n\nvoid miscTest()\n{\n  unsigned t = 0;\n\n  assert(pow(static_cast<unsigned>(2), static_cast<unsigned>(0)) == 1); t++;\n  assert(pow(static_cast<unsigned>(2), static_cast<unsigned>(1)) == 2); t++;\n  assert(pow(static_cast<unsigned>(2), static_cast<unsigned>(2)) == 4); t++;\n\n  vector<vector<unsigned> > subs;\n  vector<unsigned> sub;\n  sub.push_back(0);\n  sub.push_back(1);\n  subs.push_back(sub);\n  sub[1] = 2;\n  subs.push_back(sub);\n  sub[0] = 1;\n  sub[1] = 2;\n  subs.push_back(sub);\n  assert(subsets(3, 2) == subs); t++;\n  \n  subs.clear();\n  sub.clear();\n  sub.push_back(0);\n  subs.push_back(sub);\n  sub[0] = 1;\n  subs.push_back(sub);\n  sub[0] = 2;\n  subs.push_back(sub);\n  assert(subsets(3, 1) == subs); t++;\n\n  assert(min(1, 2, 3) == 1); t++;\n  assert(min(1, 3, 2) == 1); t++;\n  assert(min(2, 1, 3) == 1); t++;\n  assert(min(2, 3, 1) == 1); t++;\n  assert(min(3, 1, 2) == 1); t++;\n  assert(min(3, 2, 1) == 1); t++;\n  assert(min(1, 2, 2) == 1); t++;\n  assert(min(2, 1, 2) == 1); t++;\n  assert(min(2, 2, 1) == 1); t++;\n\n  assert(utos(10) == \"10\"); t++;\n  assert(utosh(10) == \"10\"); t++;\n  assert(utosh(1000) == \"1k\"); t++;\n\n  UnsignedSeq s;\n  assert(s() == 0); t++;\n  assert(s() == 1); t++;\n  s = UnsignedSeq(10);\n  assert(s() == 10); t++;\n  assert(s() == 11); t++;\n\n  assert(removeExt(\"a.txt\") == \"a\"); t++;\n  assert(removeExt(\"a.bin\") == \"a\"); t++;\n\n  unordered_map<unsigned, string> a, b;\n  a.insert(make_pair(1, \"a\"));\n  a.insert(make_pair(2, \"b\"));\n  a.insert(make_pair(3, \"c\"));\n  b.insert(make_pair(1, \"a\"));\n  b.insert(make_pair(2, \"b\"));\n  b.insert(make_pair(3, \"c\"));\n  \n  assert(equalElements(a, b)); t++;\n  \n  cout << \"misc (\" << t << \")\" << endl;\n}\n\nvoid createIdPosInvertedListsTest()\n{\n  vector<string> data;\n \n  data.push_back(\"abcabc\");\n  data.push_back(\"abd\");\n  data.push_back(\"bcd\");\n\n  GramListMap idLists;\n  GramListMap posLists;\n\t\t\t    \n  createIdPosInvertedLists(data,false,idLists,posLists);\n\n  cout<<\"Now test for create (id,pos) pair :\"<<endl;\n\n  assert(idLists.size() == posLists.size());\n  \n  for (  GramListMap::iterator iterId = idLists.begin();\n\t   iterId != idLists.end(); ++iterId )\n    {\n      unsigned gram = iterId->first;\n      \n      //cout<<\"Gram hash is \"<<gram<<endl;\n      \n      GramListMap::iterator iterPos = posLists.find(gram);\n\n      assert(iterPos != posLists.end());\n      \n      Array<unsigned> *posList = iterPos->second;\n      Array<unsigned> *idList = iterId->second;\n\n      assert(posList->size() == idList->size());\n\n    //  for(unsigned i=0;i<posList->size();i++)\n\t//{\n\t  //cout<<\" (\"<<idList->at(i)<<\",\"\n\t    //  <<posList->at(i)<<\"), \";\n      \n\t//}\n\n   //   cout<<endl;\n      \n    }//end for\n\n\n  //free space\n  for (GramListMap::iterator iterId = idLists.begin();\n       iterId != idLists.end(); ++iterId )\n    delete iterId->second;\n\n  for (GramListMap::iterator iterId = posLists.begin();\n       iterId != posLists.end(); ++iterId )\n    delete iterId->second;\n\n  cout<<\"...OK\"<<endl;\n\n}//end  createIdPosInvertedListsTest\n\nvoid subedTest()\n{\n \n}//end subtexts\n\nvoid ioTest() \n{\n  unsigned t = 0;\n\n  vector<double> data1;\n  data1.push_back(1);\n  data1.push_back(-2);\n  data1.push_back(5);\n  \n  writeBin(data1, \"iotest.bin\");\n  \n  vector<double> data2;\n  readBin(data2, \"iotest.bin\");\n  \n  assert(data1 == data2); t++;\n\n  // === text read/write === \n\n  vector<string> s_o;\n\n  s_o.push_back(\"a\");\n  s_o.push_back(\"b\");\n  s_o.push_back(\"c\");\n\n  writeTextFile<string>(\"test.txt\", s_o.begin(), s_o.end());\n\n  vector<string> s_i;\n\n  readTextFile<string>(\"test.txt\", back_inserter(s_i));\n\n\n  assert(s_o == s_i); t++;\n\n\n  vector<float> f_o;\n  f_o.push_back(.1);\n  f_o.push_back(.2);\n  f_o.push_back(.3);\n\n  writeTextFile<float>(\"test.txt\", f_o.begin(), f_o.end());\n  \n\n  vector<float> f_i;\n\n  readTextFile<float>(\"test.txt\", back_inserter(f_i));\n\n  \n  assert(f_o == f_i); t++;\n\n  \n  remove(\"test.txt\");\n\n\n  // === binary read/write === \n\n  writeBinaryFile<float>(\"test.bin\", f_o.begin(), f_o.end());\n  \n\n  f_i.clear();\n\n  readBinaryFile<float>(\"test.bin\", back_inserter(f_i));\n\n  \n  assert(f_o == f_i); t++;\n\n  \n  remove(\"test.bin\");\n\n\n  // === binary read -- iterator === \n\n  writeBinaryFile<float>(\"test.bin\", f_o.begin(), f_o.end());\n\n  ifstream *i = new ifstream(\"test.bin\", ios::in | ios::binary);\n  istream_iterator<binary_io<float> > j(*i);\n\n  float f;\n  f = *j;\n  j++;\n  assert(f == .1f); t++;\n  \n  float g;\n  g = *j;\n  assert(g == .2f); t++;\n  \n  f = *j;\n  assert(f == .2f); t++;\n\n  delete i;  \n\n\n  remove(\"test.bin\");\n\n\n  cout << \"io (\" << t << \")\" << endl;\n}\n\nint main() \n{\n  cout << \"test...\" << endl;\n\n  gramTest(); //gram.h\n  miscTest(); //misc.h\n  ioTest(); //io.h\n  arrayTest(); //array.h\n  simFuncsTest(); // simfuncs.h\n\n  //  stringShufflerTest(); //stringshuffler.h\n  //createIdPosInvertedListsTest(); // createIdPosInvertedLists.h\n  \n  cout << \"OK\" << endl;\n}\n", "encoding": "ascii"}