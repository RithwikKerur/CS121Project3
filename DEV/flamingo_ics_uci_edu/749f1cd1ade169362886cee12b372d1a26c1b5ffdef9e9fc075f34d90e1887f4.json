{"url": "http://flamingo.ics.uci.edu/releases/4.1/src/sepia/src/duplicate.cc", "content": "/*\n  $Id: duplicate.cc 5767 2010-10-19 05:52:31Z abehm $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license\n\n  Date: 01/14/2006\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"duplicate.h\"\n\n#include <cstdlib>\n#include <iostream>\n#include <fstream>\n\n#include \"util/src/simfuncs.h\"\n\nusing namespace std;\n\nstring trim(const string &s)\n{\n  if (s.length()==0)\n    return s;\n  size_t b=s.find_first_not_of(\" \\t\");\n  size_t e=s.find_last_not_of(\" \\t\");\n\n  if (b==string::npos) // No non-spaces\n    return \"\";\n  return string(s, b, e-b+1);\n}\n\nvoid EditDistModif(string &sDup, unsigned noChanges)\n{\n  for (unsigned j = 0; j < noChanges && trim(sDup).length() > 2; j++) {\n    // make one change to sDup\n    const unsigned change = rand() % 3;\n    /* change:\n       0 -> inseriton\n       1 -> deletion\n       2 -> substitution\n    */\n    string::size_type pos;\n    switch (change) {\n    case 0: // insertion\n      pos=rand()%sDup.length();\n      sDup.insert(pos, 1, 'a' + static_cast<char>(rand() % ('z'-'a'+1)));\n      break;\n    case 1: // deletion\n      pos=rand()%sDup.length();\n      sDup.erase(pos, 1);\n      break;\n    case 2: // substitutiion\n      pos=rand() % sDup.length();\n      string::size_type pos2 = rand() % sDup.length();\n      // the positons might be equal!\n      const char posChar = sDup[pos];\n      const char pos2Char = sDup[pos2];\n      sDup.replace(pos, 1, 1, pos2Char);\n      sDup.replace(pos2, 1, 1, posChar);\n      break;\n    }\n  }\n}\n\nvoid insertDuplicates()\n{\n  const unsigned dataSetSize = 100000;\n  const unsigned startSetSize =  5000;\n  int percentDup = 100;\n  // this is not const and not int in order not to \n  // generate a warining in if bellow\n  const unsigned maxDup = 40; // # of duplicates is from 1 to maxDup\n  const unsigned maxChanges = 4; // # nr of changes if form 1 to maxChanges\n\n  string\n    finName  = \"in.txt\",\n    foutName = \"out.txt\";\n\n  ifstream fin(finName.c_str()); \n  if (!fin) { \n    cerr << \"can't open input file \\\"\" << finName << \"\\\"\" << endl;\n    exit(EXIT_FAILURE);\n  }\n  \n  ofstream fout(foutName.c_str());\n  if (!fout) { \n    cerr << \"can't open output file \\\"\" << foutName << \"\\\"\" << endl;\n    exit(EXIT_FAILURE);\n  }\n\n  srand(static_cast<unsigned>(time(NULL)));\n\n  cout << \"reading records form file \\\"\" << finName << \"\\\"...\" << endl;\n  cout << \"writing records to   file \\\"\" << foutName << \"\\\"...\" << endl;\n  string s;\n  while (getline(fin, s)) {\n    if (rand() % 1000 < \n        static_cast<int>(static_cast<float>(startSetSize) / \n                         dataSetSize * 1000)) {\n      // the current string is selected\n      fout << s << endl;\n      // should it be duplicated\n      if (percentDup == 100 ||\n          rand() % 100 < percentDup) {\n        // now generate duplicates\n        const unsigned noDup = 1 + rand() % maxDup;\n        for (unsigned i = 0; i < noDup; i++) {\n          string sDup = s;\n          EditDistModif(sDup, 1 + rand() % maxChanges);\n          fout << trim(sDup) << endl;\n        }\n      }\n    }\n  }\n}\n\n", "encoding": "ascii"}