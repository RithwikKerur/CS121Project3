{"url": "http://flamingo.ics.uci.edu/releases/1.0/src/sepia/cluster/lexic.cc", "content": "/*\n    $Id: lexic.cc 1107 2007-04-16 23:59:13Z rvernica $\n\n    Copyright (C) 2007 by The Regents of the University of California\n\n    Redistribution of this file is permitted under the terms of the\n    GNU Public License (GPL).\n\n    Date: 01/14/2006\n    Author: Rares Vernica <rvernica@ics.uci.edu>\n*/\n\n#include \"lexic.h\"\n\nclass LexicCmp\n{\nprivate:\n  const vector<string> *data;\npublic:\n  LexicCmp(const vector<string> *d): data(d) {}\n  bool operator()(unsigned a, unsigned b) const { return (*data)[a] < (*data)[b]; }\n};  \n\nLexic::Lexic(const vector<string> *d, const unsigned clusterNo, \n           const SampleType sampleType, const unsigned samplePer,\n           const unsigned queueSize, const unsigned uniqueNo): \n  Clusters(d, clusterNo, sampleType, samplePer, queueSize, uniqueNo)\n{  \n  for (unsigned i = 0; i < clusterNo; i++)\n    clusters->push_back(Cluster());\n}\n\nvoid Lexic::buildClusters() \n{\n  vector<unsigned> dId(data->size());\n  for (unsigned i = 0; i < data->size(); i++) dId[i] = i;\n\n  sort(dId.begin(), dId.end(), LexicCmp(data));\n\n  const unsigned n = static_cast<unsigned>(data->size());\n  const unsigned nclust = n/clusterNo;\n  for (unsigned i = 0; i < clusterNo; i++) {\n    const unsigned start = i*nclust;\n    const unsigned end = (i == clusterNo? n:(i + 1) * nclust);\n    const unsigned p = start + (end - start)/2;\n    (*clusters)[i].setPivot(dId[p]);\n    SimType radius = (*clusters)[i].getRadius();\n    for (unsigned j = start; j < end; j++) {\n      (*clusters)[i].insert(dId[j]);\n      radius = max(radius, SimDist((*data)[dId[p]], (*data)[dId[j]]));\n    }\n    (*clusters)[i].setRadius(radius);\n  }\n}\n\nostream& Lexic::info(ostream& out)\n{\n  Clusters::info(out);\n  out << \"Cluster method\\tLexic\" << endl;\n  return out << endl;\n}\n", "encoding": "ascii"}