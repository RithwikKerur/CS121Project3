{"url": "http://flamingo.ics.uci.edu/releases/4.1/src/sepia/src/freqest/freqest.cc", "content": "/*\n  $Id: freqest.cc 4143 2008-12-08 23:23:55Z abehm $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license\n\n  Date: 01/14/2006\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"freqest.h\"\n\n#include <sys/time.h>\n\nfloat freqEstFunc(const vector<string> &d, const Clusters &cs, Predicate p)\n{\n  float est = 0;\n  float fract;\n\n  for (VectClusterIt i = cs.beginCluster(); i != cs.endCluster(); i++) {\n    float estCluster = 0;\n    SimVect v1 = SimVect(p.query, d[i->getPivot()]);\n    SimType v1d = v1.getDist();\n\n    if (v1d > i->getRadius() + p.dist)\n      continue;\n\n    for (ContFTable::const_iterator j = i->getFTable().begin(); \n         j != i->getFTable().end(); j++) {\n      SimVect v2 = j->first;\n      SimType v2d = v2.getDist();\n\n      if (v1d + v2d <= p.dist) {\n        estCluster += j->second;\n        continue;\n      }\n\n      if (v1d > p.dist + v2d || v2d > p.dist + v1d)\n        continue;\n\n      PPDEntry e=PPDEntry(v1, v2, p.dist, 0, 0);\n\n      ContPPDEntryIt itE = cs.findPPDtable(e);\n\n      if (itE == cs.endPPDtable()) {\n        itE = cs.lower_boundPPDtable(e);\n        --itE;\n        // !!! freqEst assumes that ContPPDEntry is an ordered container !!!\n        if (itE->vect1 != v1 || itE->vect2 != v2)\n          // !!! itE == cs.endPPDtable() || !!! || itE->distM>p.dist !!!\n          continue;\n      }\n      \n      fract = itE->fract;\n      estCluster += fract * j->second;\n    }\n    est += estCluster;\n  }\n\n  return est;\n}\n\nfloat freqEstPPDOnlineFunc(const vector<string> &d, const Clusters &cs,\n                           Predicate p)\n{\n  float est = 0;\n  float fract;\n\n  for (VectClusterIt i = cs.beginCluster(); i != cs.endCluster(); i++) {\n    float estCluster = 0;\n    SimVect v1 = SimVect(p.query, d[i->getPivot()]);\n    SimType v1d = v1.getDist();\n\n    if (v1d > i->getRadius() + p.dist)\n      continue;\n\n    for (ContFTable::const_iterator j = i->getFTable().begin(); \n         j != i->getFTable().end(); j++) {\n      SimVect v2 = j->first;\n      SimType v2d = v2.getDist();\n\n      if (v1d + v2d <= p.dist) {\n        estCluster += j->second;\n        continue;\n      }\n\n      if (v1d > p.dist + v2d || v2d > p.dist + v1d)\n        continue;\n\n      PPDEntry e=PPDEntry(v1, v2, p.dist, 0, 0);\n\n      ContPPDEntryIt itE = cs.findPPDtable(e);\n\n      if (itE == cs.endPPDtable()) {\n        itE = cs.lower_boundPPDtable(e);\n        --itE;\n        // !!! freqEst assumes that ContPPDEntry is an ordered container !!!\n        if (itE->vect1 != v1 || itE->vect2 != v2)\n          // !!! itE == cs.endPPDtable() || !!! || itE->distM>p.dist !!!\n          continue;\n      }\n\n      ContPPDEntryIt itENext = itE;\n      itENext++;\n      while (itE->vect1 == itENext->vect1 && itE->vect2 == itENext->vect2)\n        itENext++;\n      itENext--;\n      \n      fract = static_cast<float>(itE->countE) / itENext->countE;\n      \n      estCluster += fract * j->second;\n    }\n    est += estCluster;\n  }\n\n  return est;\n}\n\nunsigned freqRealFunc(const vector<string> &d, Predicate p, vector<string> &r)\n{\n  for (vector<string>::const_iterator i=d.begin(); i!=d.end(); i++)\n    if (SimDist(p.query, *i) <= p.dist)\n      r.push_back(*i);\n  return r.size();\n}\n\nunsigned freqRealFunc(const vector<string> &d, Predicate p)\n{\n  vector<string> r;\n  return freqRealFunc(d, p, r);\n}  \n\nfloat freqPPDFunc(const vector<string> &d, const Clusters &cs, Predicate p)\n{\n  float count = 0;\n\n  for (VectClusterIt i = cs.beginCluster(); i != cs.endCluster(); i++) {\n    SimVect v1 = SimVect(p.query, d[i->getPivot()]);\n\n    for (ContCluster::const_iterator j = i->begin(); j != i->end(); j++) {\n      SimVect v2 = SimVect(d[i->getPivot()], d[*j]);\n      PPDEntry e = PPDEntry(v1, v2, p.dist, 0, 0);\n\n      ContPPDEntryIt itE = cs.findPPDtable(e);\n      if (itE == cs.endPPDtable()) {\n        itE = cs.lower_boundPPDtable(e); \n        --itE;\n        // !!! freqEst assumes that ContPPDEntry is an ordered container !!!\n        if (itE->vect1 != v1 || itE->vect2 != v2) {\n          // !!! itE == cs.endPPDtable() || !!! || itE->distM>p.dist !!!\n          continue;\n        }\t\t\t\t\n      }\n      count += itE->fract;\n    }\n  }\n  return count;\n}\n", "encoding": "ascii"}