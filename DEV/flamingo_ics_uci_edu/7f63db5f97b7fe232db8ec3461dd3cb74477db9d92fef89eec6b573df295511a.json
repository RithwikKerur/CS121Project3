{"url": "http://flamingo.ics.uci.edu/releases/3.0/src/sepia/ppdtable/closerand.cc", "content": "/*\n  $Id: closerand.cc 4143 2008-12-08 23:23:55Z abehm $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license\n\n  Date: 01/14/2006\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"closerand.h\"\n\nCloseRand::CloseRand(const vector<string> *d, Clusters *c, ContQueryPivot *q, \n                     const unsigned samplePer, const unsigned queueSize): \n  PPDSample(d, c, q, samplePer), queueSize(queueSize)\n{\n  // init - sample \n  sample = Sample(max(1u, \n                      static_cast<unsigned>(static_cast<float>(samplePer) / \n                                            100 * data->size())), \n                  data->size());\n \n  // init - loop\n  sampleIt = sample.begin();\n  buildQueue();\n  unsigned j = samplePair.begin()->index;\n  samplePair.erase(samplePair.begin());\n  cluster = clusters->getCluster(j);\n  stringIt = cluster.begin();\n}\n\nvoid CloseRand::step() \n{\n  stringIt++;\n  if (stringIt == cluster.end()) {\n    queryPivot->\n      insert(std::make_pair(cluster.getPivot(), \n                            QueryVect(*sampleIt, \n                                      SimVect((*data)[*sampleIt], \n                                              (*data)[cluster.getPivot()]))));\n    if (samplePair.empty()) {\n      sampleIt++;\n      if (sampleIt == sample.end()) \n        return;\n      buildQueue();\n    }\n    unsigned i = samplePair.begin()->index;\n    samplePair.erase(samplePair.begin());\n    cluster = clusters->getCluster(i);\n    stringIt = cluster.begin();\n  }\n}\n\nbool CloseRand::hasNext() const \n{\n  if (sampleIt != sample.end())\n    return true;\n  return false;\n}\n\nPPDTriple CloseRand::next() \n{\n  const unsigned q=*sampleIt;\n  const unsigned p=cluster.getPivot();\n  const unsigned s=*stringIt;\n\n  PPDTriple triple=PPDTriple(q,\n                             p,\n                             s,\n                             SimVect((*data)[q], (*data)[p]),\n                             SimVect((*data)[p], (*data)[s]),\n                             SimDist((*data)[q], (*data)[s]));\n\n  // increment\n  step();\n\n  return triple;\n}\n\nvoid CloseRand::buildQueue() \n{\n  for (unsigned i = 0; i < clusters->sizeCluster(); i++) {\n    const unsigned p = clusters->getCluster(i).getPivot();\n    const unsigned q = *sampleIt;\n    SimType dist = SimDist((*data)[q], (*data)[p]);\n    if (samplePair.size() < queueSize || dist < samplePair.begin()->dist) {\n      samplePair.insert(IndexEntry(i, dist));\n      if (samplePair.size() > queueSize) \n        samplePair.erase(samplePair.begin());\n    }\n  }\n}\n", "encoding": "ascii"}