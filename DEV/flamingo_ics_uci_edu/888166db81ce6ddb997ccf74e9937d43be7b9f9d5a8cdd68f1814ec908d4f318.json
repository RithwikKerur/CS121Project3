{"url": "http://flamingo.ics.uci.edu/releases/4.1/src/sepia/src/cluster/cluster.cc", "content": "/*\n  $Id: cluster.cc 4143 2008-12-08 23:23:55Z abehm $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license\n\n  Date: 01/14/2006\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"cluster.h\"\n\nCluster::Cluster(const Cluster &c): pivot(c.pivot), radius(c.radius)\n{\n  index = new ContCluster;\n  *index = *c.index;\n  ftable = new FTable;\n  *ftable = *c.ftable;\n}\n\nCluster& Cluster::operator=(const Cluster &c)\n{\n  if (this == &c)\n    return *this;\n  *index = *c.index;\n  *ftable = *c.ftable;\n  pivot = c.pivot;\n  radius = c.radius;\n  return *this;\n}\n\nbool Cluster::operator==(const Cluster &c) const \n{\n  if (this == &c)\n    return true;\n  if (*index == *c.index && \n      pivot == c.pivot && \n      radius == c.radius && \n      *ftable == *c.ftable)\n    return true;\n  return false;\n}\n\nvoid Cluster::buildFTable(const vector<string> *data)\n{\n  for(ContCluster::const_iterator i = index->begin(); i != index->end(); i++)\n    ftable->insert(SimVect((*data)[pivot], (*data)[*i]));\n}\n\nbool Cluster::improve(const vector<string> &data) \n{\n  SimType minSum = 0;\n  unsigned newPivot = 0;\n  for (ContCluster::const_iterator i = index->begin(); i != index->end(); ++i) {\n    SimType crtSum = 0;\n    for (ContCluster::const_iterator j = index->begin(); j != index->end(); ++j)\n      crtSum += SimDist(data[*i], data[*j]);\n    if (i == index->begin() || crtSum < minSum) {\n      minSum = crtSum;\n      newPivot = *i;\n    }\n  }\n  if (newPivot != pivot) {\n    pivot = newPivot;\n    return true;\n  }\n  return false;\n}\n\nostream& operator<<(ostream &out, const Cluster &c)\n{\n  out << static_cast<unsigned>(c.index->size()) << endl;\n  copy(c.index->begin(), c.index->end(), ostream_iterator<unsigned> (out, \"\\n\"));\n  out << endl << c.pivot << endl << endl;\n  out << *c.ftable;\n  out << endl << fixed << c.radius << endl;\n  return out;\n}\n\nistream& operator>>(istream &in, Cluster &c)\n{\n  /* cluster input:\n     - n: number of elements\n     - \\n\n     - v: elements\n     - \\n\n     - p: pivot\n     - \\n\n     - ftable\n     - \\n\n     - r: radius\n     - \\n\n  */\n  unsigned n;\n  in>>n;\n  //return in;\n  for (unsigned i=0; i<n; i++) {\n    unsigned v;\n    in>>v;\n    c.index->insert(v);\n    //if (i==10) return in;\n  }\n  in>>c.pivot;\n  in >> *c.ftable;\n  in>>c.radius;\n  return in;\n}\n", "encoding": "ascii"}