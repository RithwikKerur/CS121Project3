{"url": "http://flamingo.ics.uci.edu/releases/1.0/src/sepia/cluster/ftable.cc", "content": "/*\n    $Id: ftable.cc 1107 2007-04-16 23:59:13Z rvernica $\n\n    Copyright (C) 2007 by The Regents of the University of California\n\n    Redistribution of this file is permitted under the terms of the\n    GNU Public License (GPL).\n\n    Date: 05/20/2006\n    Author: Rares Vernica <rvernica@ics.uci.edu>\n*/\n\n#include \"ftable.h\"\n\nFTable::FTable(const FTable &t) \n{\n  cont = new ContFTable();\n  *cont = *t.cont;\n}\n\nFTable& FTable::operator=(const FTable &t)\n{\n  if (this == &t)\n    return *this;\n  *cont = *t.cont;\n  return *this;\n}\n\nbool FTable::operator==(const FTable &t) const\n{\n  if (this == &t)\n    return true;\n  if (*cont == *t.cont)\n    return true;\n  return false;\n}\n\nvoid FTable::erase(SimVect vect)\n{\n  if (cont->find(vect) != cont->end()) \n    {\n      if ((*cont)[vect] != 0) \n\t{\n\t  (*cont)[vect]--;\n\t}\n      if ((*cont)[vect] == 0) \n\t{\n\t  cont->erase(vect);\n\t}\n    }\n}\n\nostream& operator<<(ostream &out, const FTable &t)\n{\n  out << t.cont->size() << endl;\n  for (ContFTable::const_iterator it = t.cont->begin(); it != t.cont->end(); ++it) \n    {\n      out << it->first << \"\\t\" << it->second << endl;\n    }\n  return out;\n}\n\nistream& operator>>(istream &in, FTable &t)\n{\n  unsigned sz;\n  in >> sz;\n  for (unsigned i = 0; i < sz; i++) \n    {\n      SimVect vect;\n      unsigned cnt;\n      in >> vect >> cnt;\n      (*t.cont)[vect] = cnt;\n    }\n  return in;\n}\n", "encoding": "ascii"}