{"url": "http://flamingo.ics.uci.edu/releases/2.0.1/src/sepia/simfunc/jaccvect.cc", "content": "/*\n  $Id: jaccvect.cc 4096 2008-11-06 01:51:40Z rares $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license\n\n  Date: 01/14/2006\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"jaccvect.h\"\n#include \"util/simfuncs.h\"\n#include \"util/gram.h\"\n\n#include <algorithm>\n\nusing namespace std;\n\nJaccVect::JaccVect(const string &s1, const string &s2): inte(0)\n{\n  unsigned\n    n = s1.length(), \n    m = s1.length();\n\n  if (n == 0 || m == 0) {\n    if (n==0) {\n      this->unio = m < Q_GRAM ? 1 : m - Q_GRAM + 1;\n      this->edit = m;\n    } else {\n      this->unio = n < Q_GRAM ? 1 : n - Q_GRAM + 1;\n      this->edit = n;\n    }\n    return;\n  }\n\n  set<string> s1Gram, s2Gram, sInt, sUni;\n  str2grams(s1, s1Gram, Q_GRAM);\n  str2grams(s2, s2Gram, Q_GRAM);\n\n  set_intersection(s1Gram.begin(), s1Gram.end(),\n                   s2Gram.begin(), s2Gram.end(), \n                   inserter(sInt, sInt.begin()));\n\n  set_union(s1Gram.begin(), s1Gram.end(),\n            s2Gram.begin(), s2Gram.end(), \n            inserter(sUni, sUni.begin()));\n\n\tthis->inte = sInt.size();\n\tthis->unio = sUni.size();\n\tthis->edit = ed(s1, s2);\n}\n\nostream& operator<<(ostream &out, const JaccVect &jv)\n{\n  return out << jv.inte << ' ' << jv.unio << ' ' << jv.edit;\n}\n\nistream& operator >> (istream &in, JaccVect &jv)\n{\n  return in >> jv.inte >> jv.unio >> jv.edit;\n}\n\nbool operator<(const JaccVect &left, const JaccVect &right)\n{\n  if (left.inte != right.inte)\n    return left.inte < right.inte;\n  if (left.unio != right.unio)\n    return left.unio < right.unio;\n  return left.edit < right.edit;\n}\n\nbool operator!=(const JaccVect &left, const JaccVect &right)\n{\n  return left < right || right < left;\n}\n\nostream& JaccVect::info(ostream &out)\n{\n  out << \"Metric\" << endl << \"---\" << endl;\n  out << \"Jacc Distance\" << endl;\n  out << \"Jacc Vector\" << endl;\n  out << \"QGram\\t\" << Q_GRAM << endl;\n  return out << endl;\n}\n", "encoding": "ascii"}