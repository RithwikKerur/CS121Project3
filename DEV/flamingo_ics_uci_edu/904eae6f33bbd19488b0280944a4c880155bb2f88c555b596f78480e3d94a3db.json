{"url": "http://flamingo.ics.uci.edu/releases/3.0/src/common/unittest.cc", "content": "/*\n  $Id: unittest.cc 5149 2010-03-24 23:37:18Z abehm $\n\n  Copyright (C) 2010 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the\n  BSD license.\n\n  Date: 04/15/2008\n  Author: Rares Vernica <rares (at) ics.uci.edu> \n*/\n\n#include <cassert>\n#include <iomanip>\n#include <iostream>\n#include <limits>\n\n#include \"simmetric.h\"\n\nusing namespace std;\n\nvoid testSimMetric() \n{\n  uint t = 0;\n  GramGen *g = new GramGenFixedLen(1);\n\n  SimMetric *sim = new SimMetricEd(*g);\n\n  vector<string> s;\n  s.push_back(\"abc\");\n  s.push_back(\"ab\");\n  s.push_back(\"ac\");\n  s.push_back(\"bc\");\n  s.push_back(\"a\");\n  s.push_back(\"b\");\n  s.push_back(\"c\");\n  s.push_back(\"abcdef\");\n  s.push_back(\"xyz\");\n  s.push_back(\"bac\");\n  s.push_back(\"acb\");\n  s.push_back(\"ba\");\n  \n  const uint n = 12;\n  uint ed[][n] = \n    { {0, 1, 1, 1, 2, 2, 2, 3, 3, 2, 2, 2},\n      {1, 0, 1, 2, 1, 1, 2, 4, 3, 2, 1, 2},\n      {1, 1, 0, 1, 1, 2, 1, 4, 3, 1, 1, 2},\n      {1, 2, 1, 0, 2, 1, 1, 4, 3, 1, 2, 1},\n      {2, 1, 1, 2, 0, 1, 1, 5, 3, 2, 2, 1},\n      {2, 1, 2, 1, 1, 0, 1, 5, 3, 2, 2, 1},\n      {2, 2, 1, 1, 1, 1, 0, 5, 3, 2, 2, 2},\n      {3, 4, 4, 4, 5, 5, 5, 0, 6, 5, 4, 5},\n      {3, 3, 3, 3, 3, 3, 3, 6, 0, 3, 3, 3},\n      {2, 2, 1, 1, 2, 2, 2, 5, 3, 0, 2, 1},\n      {2, 1, 1, 2, 2, 2, 2, 4, 3, 2, 0, 3},\n      {2, 2, 2, 1, 1, 1, 2, 5, 3, 1, 3, 0}};\n\n  for (uint i = 0; i < n; i++)\n    for (uint j = 0; j < n; j++) {\n      // cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n      //      << ed[i][j] << \" \" << sim->operator()(s[i], s[j]) << endl;\n      assert(sim->operator()(s[i], s[j]) == ed[i][j]); t++;\n      assert(sim->operator()(s[i], s[j], ed[i][j])); t++;\n      if (ed[i][j] > 0)\n        assert(!sim->operator()(s[i], s[j], ed[i][j] - 1)); t++;\n    } \n\n  delete sim;\n\n  sim = new SimMetricEdNorm(*g);\n\n  for (uint i = 0; i < n; i++)\n    for (uint j = 0; j < n; j++) {\n      // cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n      //      << (1 - \n      //          static_cast<float>(ed[i][j]) / \n      //          max(s[i].length(), s[j].length()))\n      //      << \" \" << sim->operator()(s[i], s[j]) << endl;\n      assert(sim->operator()(s[i], s[j]) - 1 - static_cast<float>(ed[i][j]) / \n             max(s[i].length(), s[j].length()) <= \n             numeric_limits<float>::epsilon()); t++;\n      assert(sim->operator()(s[i], s[j], \n                             1 - static_cast<float>(ed[i][j]) / \n                             max(s[i].length(), s[j].length()) - \n                             numeric_limits<float>::epsilon())); t++;\n      if (ed[i][j] > 0)\n        assert(!sim->operator()(s[i], s[j], \n                                1 - static_cast<float>(ed[i][j]) / \n                                max(s[i].length(), s[j].length()) + \n                                numeric_limits<float>::epsilon())); t++;\n    }\n\n  uint edSwap[][n] = \n    { {0, 1, 1, 1, 2, 2, 2, 3, 3, 1, 1, 2},\n      {1, 0, 1, 2, 1, 1, 2, 4, 3, 2, 1, 1},\n      {1, 1, 0, 1, 1, 2, 1, 4, 3, 1, 1, 2},\n      {1, 2, 1, 0, 2, 1, 1, 4, 3, 1, 2, 1},\n      {2, 1, 1, 2, 0, 1, 1, 5, 3, 2, 2, 1},\n      {2, 1, 2, 1, 1, 0, 1, 5, 3, 2, 2, 1},\n      {2, 2, 1, 1, 1, 1, 0, 5, 3, 2, 2, 2},\n      {3, 4, 4, 4, 5, 5, 5, 0, 6, 4, 4, 5},\n      {3, 3, 3, 3, 3, 3, 3, 6, 0, 3, 3, 3},\n      {1, 2, 1, 1, 2, 2, 2, 4, 3, 0, 2, 1},\n      {1, 1, 1, 2, 2, 2, 2, 4, 3, 2, 0, 3},\n      {2, 1, 2, 1, 1, 1, 2, 5, 3, 1, 3, 0}};\n\n  sim = new SimMetricEdSwap(*g);\n\n  for (uint i = 0; i < n; i++)\n    for (uint j = 0; j < n; j++) {\n      // cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n      //      << edSwap[i][j] << \" \" << sim->operator()(s[i], s[j]) << endl;\n      assert(sim->operator()(s[i], s[j]) == edSwap[i][j]); t++;\n      assert(sim->operator()(s[i], s[j], edSwap[i][j])); t++;\n      if (edSwap[i][j] > 0)\n        assert(!sim->operator()(s[i], s[j], edSwap[i][j] - 1)); t++;\n    } \n  \n  sim = new SimMetricJacc(*g);\n\n  float jc[][n] = \n    { {     1, 2. / 3, 2. / 3, 2. / 3, 1. / 3,\n       1. / 3, 1. / 3,     .5,      0,      1,      1, 2. / 3},\n      {2. / 3, 1,      1. / 3, 1. / 3,     .5,\n           .5,      0, 1. / 3,      0, 2. / 3, 2. / 3,      1},\n      {2. / 3, 1. / 3,      1, 1. / 3,     .5,\n            0,     .5, 1. / 3,      0, 2. / 3, 2. / 3, 1. / 3},\n      {2. / 3, 1. / 3, 1. / 3,      1,      0,\n           .5,     .5, 1. / 3,      0, 2. / 3, 2. / 3, 1. / 3},\n      {1. / 3,     .5,     .5,      0,      1,\n            0,      0, 1. / 6,      0, 1. / 3, 1. / 3,     .5},\n      {1. / 3,     .5,      0,     .5,      0,\n            1,      0, 1. / 6,      0, 1. / 3, 1. / 3,     .5},\n      {1. / 3,      0,     .5,     .5,      0,\n            0,      1, 1. / 6,      0, 1. / 3, 1. / 3,      0},\n      {    .5, 1. / 3, 1. / 3, 1. / 3, 1. / 6,\n       1. / 6, 1. / 6,      1,      0,     .5,     .5, 1. / 3},\n      {     0,      0,      0,      0,      0,\n            0,      0,      0,      1,      0,      0,      0},\n      {     1, 2. / 3, 2. / 3, 2. / 3, 1. / 3, \n       1. / 3, 1. / 3,     .5,      0,      1,      1, 2. / 3},\n      {     1, 2. / 3, 2. / 3, 2. / 3, 1. / 3,\n       1. / 3, 1. / 3,     .5,      0,      1,      1, 2. / 3},\n      {2. / 3,      1, 1. / 3, 1. / 3,     .5,\n           .5,      0, 1. / 3,      0, 2. / 3, 2. / 3,      1}};\n\n  for (uint i = 0; i < n; i++)\n    for (uint j = 0; j < n; j++) {\n      // cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n      //      << jc[i][j] << \" \" << sim->operator()(s[i], s[j]) << endl;\n      assert(sim->operator()(s[i], s[j]) == jc[i][j]); t++;\n      assert(sim->operator()(s[i], s[j], jc[i][j])); t++;\n      assert(!sim->operator()(s[i], s[j], jc[i][j] + numeric_limits<float>::epsilon())); t++;\n    }\n\n  cout << \"SimMetric (\" << t << \")\" << endl;\n}\n\nint main() \n{  \n  cout << \"test...\" << endl;\n\n  testSimMetric();\n  \n  cout << \"OK\" << endl;\n\n  return 0;\n}\n", "encoding": "ascii"}