{"url": "http://flamingo.ics.uci.edu/releases/4.0/src/util/src/looptimer.cc", "content": "/*  \n    $Id: looptimer.cc 5713 2010-09-09 03:11:22Z abehm $ \n\n    Copyright (C) 2010 by The Regents of the University of California\n \t\n    Redistribution of this file is permitted under the terms of the BSD license.\n\n    Author: Shengyue Ji <shengyuj (at) ics.uci.edu>\n    Date: 05/11/2007\n\n*/\n\n\n#include \"looptimer.h\"\n\nLoopTimer::LoopTimer()\n{\n    file = stderr;\n    running = false;\n}\n\nvoid LoopTimer::print()\n{\n    if(desc.empty() || count == 0) return;\n    \n    fprintf(file, \"\\r%u%% %s: %u/%u; \", \n        step * 100 / count, desc.c_str(), step, count);\n    \n    unsigned t = totalTime();\n    t /= 1000;\n    fprintf(file, \"%u'%u\\\"/\", t / 60, t % 60);\n    \n    if(step)\n    {\n        t = t * count / step;\n        \n        fprintf(file, \"%u'%u\\\"   \", t / 60, t % 60);\n    }\n    else fprintf(file, \"inf   \");\n\n}\n\nvoid LoopTimer::begin(const string &desc, unsigned count)\n{\n    this->desc = desc;\n    this->count = count;\n    this->step = 0;\n    sumTime.tv_sec = 0;\n    sumTime.tv_nsec = 0;\n\n    running = true;\n    clock_gettime(CLOCK_REALTIME, &startTime);\n    currTime = startTime;\n    prevTime = currTime;\n    print();\n}\n\nvoid LoopTimer::next(unsigned step, unsigned count)\n{\n    this->step += step;\n    if(count)this->count = count + this->step;\n    \n    if(!running)return;\n    clock_gettime(CLOCK_REALTIME, &currTime);\n    if((currTime.tv_sec - prevTime.tv_sec) * 1000\n        + (currTime.tv_nsec - prevTime.tv_nsec) / 1000000 >= 200)\n    {\n        prevTime = currTime;\n        print();\n    }\n}\n\nvoid LoopTimer::end()\n{\n    step = count;\n    pause();\n    print();\n    if(!desc.empty() && !count == 0)\n        fprintf(file, \"\\n\");\n}\n\nvoid LoopTimer::pause()\n{\n    if(!running)return;\n    running = false;\n    clock_gettime(CLOCK_REALTIME, &currTime);\n    \n    sumTime.tv_sec += currTime.tv_sec - startTime.tv_sec;\n    sumTime.tv_nsec += currTime.tv_nsec - startTime.tv_nsec;\n    if(sumTime.tv_nsec < 0)\n    {\n        sumTime.tv_nsec += 1000000000;\n        sumTime.tv_sec--;\n    }\n    else if(sumTime.tv_nsec >= 1000000000)\n    {\n        sumTime.tv_nsec -= 1000000000;\n        sumTime.tv_sec++;\n    }\n    startTime = currTime;\n}\n\nvoid LoopTimer::resume()\n{\n    if(running)return;\n    running = true;\n    clock_gettime(CLOCK_REALTIME, &startTime);\n    currTime = startTime;\n}\n\nunsigned LoopTimer::totalTime()\n{\n    return (currTime.tv_sec - startTime.tv_sec + sumTime.tv_sec) * 1000\n        + (currTime.tv_nsec - startTime.tv_nsec + sumTime.tv_nsec) / 1000000;\n}\n\nfloat LoopTimer::avgTime()\n{\n    return (float)totalTime() / step;\n}\n\n", "encoding": "ascii"}