{"url": "http://flamingo.ics.uci.edu/releases/1.0/docs/wiki/MatTreeDoc.html", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:html=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>MatTreeDoc - Group Page - Trac</title>\n<style type=\"text/css\">\n           @import url(trac.css);\n          </style>\n</head>\n<body>\n<div class=\"wikipage\">\n    <div id=\"searchable\">\n<p>\nAppString &gt; AppStringDoc\n</p>\n<h1 id=\"MAT-Tree\">MAT-Tree</h1>\n<h2 id=\"Overview\">Overview</h2>\n<p>\nMAT-tree: A tree-based structure for indexing string and numeric attributes.  Using MAT-tree, we can perform range queries on both string and numeric attributes. [1]\n</p>\n<h2 id=\"Usage\">Usage</h2>\n<p>\nThe program can be compiled using Visual C or gnu C++.\n</p>\n<p>\nCompile the project in Visual C, and run accordingly. You can also write a makefile and compile it using a GNU C compiler.\n</p>\n<h2 id=\"Interface\">Interface</h2>\n<p>\nMain files:\n</p>\n<ul>\n<li>RETree.cpp - includes main() and the MAT-tree functions\n</li>\n<li>index.h, index.cpp - defines data structures, such as Node, Record, Query, etc.\n</li>\n<li>node.cpp, Rect.cpp - defines basic functions for Node and Rect\n</li>\n<li>Trie.h, Trie.cpp - defines the Trie class and all Trie functions\n</li>\n<li>distance.h, distance.cpp - defines Distance1 class to calculate the edit distance between two strings\n</li>\n<li>NFA.h, NFA.cpp - defines the automaton class\n</li>\n<li>NFANode.h, NFANode.cpp - defines the Node of NFA\n</li>\n<li>NFATransition.h, NFATransition.cpp - defines the Edge of NFA\n</li>\n<li>NFAMatch.h, NFAMatch.cpp - Modifies Meyer's algorithm, calculates the edit distance between a string and an automaton\n</li>\n<li>data.zip  - data (text file zipped)\n</li>\n<li>query.zip  - queries (text file zipped)\n</li>\n</ul>\n<p>\nUseful parameters:\n</p>\n<pre class=\"wiki\" xml:space=\"preserve\">const int MAXLEN = 100; //maximum length of a string attribute\nconst int PGSIZE = 256; //page size\nconst int TRIELEN = 1000; //maximum size of a Trie (in string representation)\nconst int K = 400;  //# of centers in MAT-tree\nconst int STRDELTA = 3; //threshold for string attribute\nconst int NUMDELTA = 4; //threshold for numeric attribute\nconst int SIZES = 80000; //size of the dataset\nconst int ALPH_SIZE = 29; //size of the alphabet\n#define DATAFILE \"data.txt\" //input file for dataset\n#define QUERYFILE \"query.txt\" //query file\nconst int NUMQUERY = 10; //# of queries to run\n</pre>\n<p>\nPrepare DATAFILE and QUERYFILE.  Each record is in one line, with a\nstring followed by by aq numeric value.  In the case there are white\nspaces in the string, you need to replace them with special characters\nfirst.\n</p>\n<h2 id=\"Performance\">Performance</h2>\n<p>\nThe performance results are available in [1].\n</p>\n<hr/>\n<p>\n[1] Liang Jin, Nick Koudas, Chen Li, Anthony K. H. Tung: Indexing Mixed Types for Approximate Retrieval. VLDB 2005: 793-804\n</p>\n</div>\n   </div>\n<div class=\"footer\">\n<hr/>\n<p>\n<a href=\"wiki-index.html\">Back to Index</a>\n</p>\n</div>\n</body>\n</html>\n", "encoding": "ascii"}