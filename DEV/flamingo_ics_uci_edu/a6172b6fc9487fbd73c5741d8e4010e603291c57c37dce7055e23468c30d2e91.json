{"url": "http://flamingo.ics.uci.edu/releases/2.0/src/sepia/freqest/record.cc", "content": "/*\n  $Id: record.cc 4034 2008-10-03 01:17:40Z rares $\n\n  Copyright (C) 2007 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license\n\n  Date: 01/21/2006\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"record.h\"\n\n#include <iterator>\n\nusing namespace std;\n\nvoid Record::setRelErr() \n{\n  if (real!=0) {\n    relErr=static_cast<float>(est-real)/real;\n//     if (relErr<0) {\n//       relErr-=relErr;\n//     }\n  }\n  else {\n    relErr=-1;\n  }\n} \n\nostream& Record::toWeka(ostream &out) \n{\n  out << query.length() << \",\" << dist << \",\" << est;\n  out << \",\" << cntCluster << \",\" << cntPPDpair;\n  out << \",\" << relErr;\n  return out;\n}\n\nostream& operator<<(ostream &out, const Record &r) \n{\n  out << r.query << \"\\t\" << r.dist << \"\\t\" << r.real << \"\\t\" << r.est << \"\\t\" \n      << r.relErr << \"\\t\" << r.cntCluster << \"\\t\" << r.cntPPDpair;\n  return out;\n}\n\nistream& operator>>(istream &in, Record &r) \n{\n  in >> r.query >> r.dist >> r.real >> r.est >> r.relErr;\n  in >> r.cntCluster >> r.cntPPDpair;\n  return in;\n}\n\n\nistream& operator>>(istream &in, VectRecord &v) \n{\n  unsigned n;\n  in>>n;\n  for (unsigned i=0; i<n; i++) {\n    Record p;\n    in>>p;\n    v.push_back(p);\n  }\n  return in;\n}\n\nostream& operator<<(ostream &out, const VectRecord &v) \n{\n  out<<static_cast<unsigned>(v.size())<<endl<<endl;\n  copy(v.begin(), v.end(), ostream_iterator<Record>(out, \"\\n\"));\n  return out;\n}\n\nostream& VectRecordToWeka(ostream &out, VectRecord &v) \n{\n  string wekaHeader = \"\\\n@relation 'records'\\n\\\n@attribute predicate_string_length integer\\n\\\n@attribute predicate_threshold integer\\n\\\n@attribute selectivity_estimation real\\n\\\n@attribute count_clusters integer\\n\\\n@attribute count_ppdpairs integer\\n\\\n@attribute relative_error real\\n\\\n@data\\n\";\n  \n  out << wekaHeader;\n  for (VectRecordIt it = v.begin(); it != v.end(); it++) {\n    it->toWeka(out);\n    out << endl;\n  }\n  return out;\n}\n", "encoding": "ascii"}