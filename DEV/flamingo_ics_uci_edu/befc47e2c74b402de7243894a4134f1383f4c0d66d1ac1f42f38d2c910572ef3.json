{"url": "http://flamingo.ics.uci.edu/releases/4.0/src/util/src/speedtest.cc", "content": "/*\n  $Id: speedtest.cc 5713 2010-09-09 03:11:22Z abehm $\n\n  Copyright (C) 2010 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of the \n  BSD license.\n\n  Date: 03/16/2007\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include <sys/time.h>\n\n#include <iomanip>\n#include <iostream>\n#include <set>\n#include <string>\n#include <vector>\n\n#include \"appsearch.h\"\n#include \"input.h\"\n#include \"scan.h\"\n#include \"partenum/partenum.h\"\n// #include \"filtertree_old/filtertree.h\"\n\nusing namespace std;\n\nvoid run(AppSearch &appsearch, const vector<string> &data, \n         const string pathData, const string nameDataset, \n         const unsigned editdist) \n{\n  const unsigned queryCount = 200;\n  \n  cout << \"que:\\t\" << queryCount << endl;\n\n  if (!existQuery(pathData, nameDataset, queryCount))\n    genQuery(data, pathData, nameDataset, queryCount);\n\n  vector<unsigned> query;\n  readQuery(query, pathData, nameDataset, queryCount);\n\n  vector<set<unsigned> > answer;\n  readAnswer(answer, pathData, nameDataset, queryCount, editdist);\n\n  appsearch.build();\n\n  struct timeval tv1, tv2;\n  struct timezone tz;\n  unsigned time = 0;\n\n  cerr << \"run\"; cerr.flush();\n  for (unsigned que = 0; que < queryCount; que++) {\n    if (que % 10 == 0) {\n      cerr << '.'; cerr.flush();\n    }\n\n    // search\n    vector<unsigned> results;\n    gettimeofday(&tv1, &tz);\n    appsearch.search(data[query[que]], editdist, results);\n    gettimeofday(&tv2, &tz);\n    time += (tv2.tv_sec - tv1.tv_sec) * 1000000 + (tv2.tv_usec - tv1.tv_usec);\n\n    // integrity check\n    set<unsigned> resultsSet(results.begin(), results.end());\n    if (resultsSet != answer[que]) {\n      cout << \"integrity check failed for query \" << que << endl;\n      exit(1);\n    }  \n  }\n  cerr << \"OK\" << endl;\n\n  cout << \"time:\\t\"\n       << static_cast<double>(time) / queryCount / 1000 << \"ms\" << endl;\n}\n\nint main(int argc, char *argv[])\n{\n  const string usage = \"specify technique ID to use\\n\\\n\\t0: scan\\n\\\n\\t1: partenum\\n\\\n\\t2: filtertree\\n\";\n\n  if (argc < 2) {\n    cerr << usage;\n    exit(1);\n  }\n  \n  const unsigned\n    type = atoi(argv[1]), \n    editdist = 3, \n    q = 3;\n\n  cerr << \"speed...\" << endl;\n  cout << fixed << setprecision(4);\n  cout << \"ed:\\t\" << editdist << endl\n       << \"q:\\t\" << q << endl;\n\n  const string\n    pathData = \"\", \n    nameDataset =  \"in.txt\";\n\n  cerr << \"data \" << pathData + nameDataset << endl;\n  vector<string> data;\n  readString(data, pathData + nameDataset);\n\n  AppSearch *appsearch;\n  \n  if (type == 0) {\n    cout << \"Scan\" << endl;\n    appsearch = new Scan(editdist, &data);\n  }\n  else if (type == 1) {\n    cout << \"PartEnum\" << endl;\n    /* scan:    ed  q n1 n2\n       1  1  3  2\n       2  2  3  7\n       3  1  7  2\n       bucket:  ed  q n1 n2\n       1  2  2  8\n       2  2  3  8\n       3  1  2  7\n    */\n    const unsigned n1 = 7, n2 = 2;\n    cout << \"n1:\\t\" << n1 << endl\n         << \"n2:\\t\" << n2 << endl;\n    appsearch = new PartEnum(data, \n                             q, editdist, n1, n2);\n  }\n//   else if (type == 2) {\n//     cout << \"FilterTree\" << endl;\n//     appsearch = new FilterTree(q, &data);\n//   }\n  else {\n    cerr << usage\n         << \"unknown ID \" << argv[1] << endl;\n    exit(1);\n  }\n  \n  run(*appsearch, data, pathData, nameDataset, editdist);\n\n  delete appsearch;\n}\n", "encoding": "ascii"}