{"url": "http://flamingo.ics.uci.edu/releases/3.0/src/filtertree/perftest.cc", "content": "/*\n  $Id: perftest.cc 5229 2010-05-11 05:44:03Z abehm $\n\n  Copyright (C) 2010 by The Regents of the University of California\n\t\n  Redistribution of this file is permitted under\n  the terms of the BSD License.\n    \n  Date: 09/19/2007\n  Author: Alexander Behm <abehm (at) ics.uci.edu>\n*/\n\n#include \"statsgen.h\"\n\nvoid statsGenMemSimple();\nvoid statsGenMemDiscardLists();\nvoid statsGenMemCombineLists();\nvoid statsGenDiskSimple();\n\nvoid onDiskTest();\n\nint main() {\n  statsGenMemSimple();\n  statsGenMemDiscardLists();\n  statsGenMemCombineLists();\n  statsGenDiskSimple();  \n\n\n  //onDiskTest();\n\n  return 0;\n}\n\nvoid onDiskTest() {\n  StatsGenConfig config;\n  \n  typedef FtIndexerOnDisk<> indexer;\n  typedef FtSearcherOnDisk<indexer, OnDiskMergerAdapt<> > ignoreSearcher;\n  typedef FtSearcherOnDisk<indexer> simpleSearcher;  \n  \n  typedef FtIndexerOnDisk<StringContainerRM, Array<PosID> > posIndexer;\n  typedef FtSearcherOnDisk<posIndexer, OnDiskMergerAdapt<Array<PosID> > > posSearcher;\n  \n  StatsGen<indexer, ignoreSearcher> statsgen(&config);\n  StatsGen<indexer, simpleSearcher> simpleStatsgen(&config); \n  StatsGen<FtIndexerMem<>, FtSearcherMem<> > memStatsgen(&config); \n  StatsGen<posIndexer, posSearcher> posStatsgen(&config);\n  OnDiskMergerSimple<> simpleReg(false);\n  OnDiskMergerSimple<> simpleOpt(true);\n  OnDiskMergerAdapt<> ignoreReg(false);\n  OnDiskMergerAdapt<> ignoreOpt(true);\n  DivideSkipMerger<> dsMerger(false);\n  OnDiskMergerAdapt<Array<PosID> > posMergerReg(false);\n  OnDiskMergerAdapt<Array<PosID> > posMergerOptNothing(true);\n  OnDiskMergerAdapt<Array<PosID> > posMergerOptDP(true, POSFILTER_LENGTH | POSFILTER_DP);\n  OnDiskMergerAdapt<Array<PosID> > posMergerOptEndDP(true, POSFILTER_LENGTH | POSFILTER_ENDDP);\n  OnDiskMergerAdapt<Array<PosID> > posMergerOptSubstr(true, POSFILTER_LENGTH | POSFILTER_SUBSTR);\n  OnDiskMergerAdapt<Array<PosID> > posMergerOptSubstrEndDP(true, POSFILTER_LENGTH | POSFILTER_SUBSTR | POSFILTER_ENDDP);\n  \n  GramGenFixedLen gramGen(4);\n  float ed = 0.0f;\n  SimMetricEd simMetric(gramGen);\n\n  // indexing params\n  config.setReduction(0, 0, 0.1);\n  config.setGramGen(&gramGen);\n  config.setRunBuffer(419430400);\n  config.setScatteredOrg(false);\n  config.setDictSize(5000000, 5000000, 5000000);\n  \n  config.setAutoPartFilter(false);\n\n  // dataset params\n  //config.setDictDataFile(\"data/googlebig250.txt\");\n  //config.setMaxStrLen(200);\n  //config.setFanout(300);\n  //config.addPartFilter(new CharsumFilter(200));\n  //config.setAvgStrLen(22);\n  \n  config.setDictDataFile(\"data/pubmedtitles250.txt\");\n  config.setMaxStrLen(300);\n  config.setFanout(100);\n  config.addPartFilter(new LengthFilter(300));\n  config.setAvgStrLen(84);\n\n  // query params\n  config.setDropCachesBeforeBuildingIndex(false);\n  config.setDropCachesBeforeEachQuery(false);\n  config.setDisableStreamBuffer(false);\n  \n  // workload params\n  config.setNumberQueries(2000);\n  config.setDistinctQueries(2000);\n  config.setQueriesDistribution(QD_UNIFORM);\n  config.setNumberRuns(3);\n  config.useExistingWorkload(\"data/pubmedtitles_2kqueries.txt\");\n  //config.useExistingWorkload(\"data/googlebig_2kqueries.txt\");\n  \n  config.setCharsumFilterOptions(CSF_OPT);\n  config.setPhysOrd(PHO_LENGTH_CHARSUM);\n  config.setOutputFlags(OF_WORKLOADSTATS);\n  \n  statsgen.setMerger(&ignoreOpt);\n  \n  ed = 2.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_adaptptcsord_cache_ed2\");\n  statsgen.generate();\n  \n  ed = 4.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_adaptptcsord_cache_ed4\");\n  statsgen.generate();\n\n  ed = 6.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_adaptptcsord_cache_ed6\");\n  statsgen.generate();\n\n  ed = 8.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_adaptptcsord_cache_ed8\");\n  statsgen.generate();\n\n  ed = 10.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_adaptptcsord_cache_ed10\");\n  statsgen.generate();\n\n\n  \n  simpleStatsgen.setMerger(&simpleOpt);\n  //config.clearFilters();\n  config.setCharsumFilterOptions(CSF_OPT);\n  config.setPhysOrd(PHO_LENGTH_CHARSUM);\n  config.setOutputFlags(OF_WORKLOADSTATS);\n  \n  ed = 2.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simpleptcsord_cache_ed2\");\n  simpleStatsgen.generate();\n  \n  ed = 4.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simpleptcsord_cache_ed4\");\n  simpleStatsgen.generate();\n\n  ed = 6.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simpleptcsord_cache_ed6\");\n  simpleStatsgen.generate();\n\n  ed = 8.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simpleptcsord_cache_ed8\");\n  simpleStatsgen.generate();\n\n  ed = 10.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simpleptcsord_cache_ed10\");\n  simpleStatsgen.generate();\n\n\n  \n  simpleStatsgen.setMerger(&simpleOpt);\n  config.clearFilters();\n  config.setCharsumFilterOptions(CSF_NONE);\n  config.setPhysOrd(PHO_NONE);\n  config.setOutputFlags(OF_WORKLOADSTATS);\n  \n  ed = 2.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simple_cache_ed2\");\n  simpleStatsgen.generate();\n  \n  ed = 4.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simple_cache_ed4\");\n  simpleStatsgen.generate();\n\n  ed = 6.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simple_cache_ed6\");\n  simpleStatsgen.generate();\n\n  ed = 8.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simple_cache_ed8\");\n  simpleStatsgen.generate();\n\n  ed = 10.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/pubmed_simple_cache_ed10\");\n  simpleStatsgen.generate();\n\n\n  \n  /*\n  simpleStatsgen.setMerger(&simpleOpt);\n  simpleStatsgen.setMerger(&simpleOpt);\n  \n  ed = 1.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/improve/google_simpleopt_cache_ed1\");\n  //simpleStatsgen.generate();\n  \n  ed = 2.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/improve/google_simpleopt_cache_ed2\");\n  //simpleStatsgen.generate();  \n  \n  statsgen.setMerger(&ignoreOpt);\n  \n  ed = 1.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/improve/google_ignoreopt_cache_ed1\");\n  statsgen.generate();\n  \n  ed = 2.0f;\n  config.setSimMetric(&simMetric, ed);\n  config.setOutputFilePrefix(\"experiments/improve/google_ignoreopt_cache_ed2\");\n  statsgen.generate();\n  */\n}\n\n\nvoid statsGenMemSimple() {\n  GramGenFixedLen gramGen(2);\n  SimMetricEd simMetric(gramGen); // using the edit distance\n  //SimMetricJacc simMetric(gramGen); // using jaccard similarity\n  //SimMetricCos simMetric(gramGen); // using cosine similarity\n  //SimMetricDice simMetric(gramGen); // using dice similarity\n  float ed = 1.0f; // this represents the similarity threshold, in this case edit distance 1\n\n  DivideSkipMerger<> merger;\n  typedef FtIndexerMem<> indexer;\n  typedef FtSearcherMem<indexer> searcher;\n\n  StatsGenConfig config;\n  config.setGramGen(&gramGen);\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setDictSize(4000, 4000, 4000); // size of string dictionary, start, stop, step\n  config.setFanout(10); // fanout of filtertree\n  config.setMaxStrLen(20);\n  config.clearFilters();\n  config.addPartFilter(new LengthFilter(20)); // add partitioning filter\n  config.setNumberQueries(2000); // set total number of queries for the workload to run\n  config.setDistinctQueries(2000); // set distinct number of queries generated by randomly picking strings from the dictionary\n  config.setQueriesDistribution(QD_UNIFORM); // can be QD_UNIFORM or QD_ZIPF\n  //config.setZipfSkew(1); // zipf skew parameter if QD_ZIPF specified\n  config.setNumberRuns(3); // number times to repeat running workload to stabilize numbers\n      \n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setDictDataFile(\"data/female_names.txt\"); // set the data file\n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS); // output workload stats, query stats and query results\n  config.setOutputFilePrefix(\"memsimple_names_ed1\"); // prefix of output files\n  statsgen.generate(); // run the experiment\n\n  cout << \"SUCCESS!\" << endl;\n}\n\nvoid statsGenMemDiscardLists() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen); // using the edit distance\n  float ed = 2.0f; // this represents the similarity threshold, in this case edit distance 1\n  \n  DivideSkipMerger<> merger(true); // true == optimization for combining lists activated\n  //typedef FtIndexerDiscardListsLLF<> indexer; // discard long lists first\n  //typedef FtIndexerDiscardListsSLF<> indexer; // discard short lists first\n  //typedef FtIndexerDiscardListsRandom<> indexer; // randomly discard lists first\n  //typedef FtIndexerDiscardListsPanicCost<> indexer; // minimize number of panics\n  typedef FtIndexerDiscardListsTimeCost<> indexer; // minimize total running time\n  //typedef FtIndexerCombineListsBasic<> indexer; // combine lists based on correlation\n  //typedef FtIndexerCombineListsCost<> indexer; // combine lists based on total running time\n  typedef FtSearcherMem<indexer> searcher;\n  \n  StatsGenConfig config;\n  config.setGramGen(&gramGen);\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setDictSize(4000, 4000, 4000); // size of string dictionary, start, stop, step\n  config.setFanout(10); // fanout of filtertree\n  config.setMaxStrLen(20);\n  config.clearFilters();\n  config.addPartFilter(new LengthFilter(20)); // add partitioning filter\n  config.setNumberQueries(2000); // set total number of queries for the workload to run\n  config.setDistinctQueries(2000); // set distinct number of queries generated by randomly picking strings from the dictionary\n  config.setQueriesDistribution(QD_UNIFORM); // can be QD_UNIFORM or QD_ZIPF\n  //config.setZipfSkew(1); // zipf skew parameter if QD_ZIPF specified\n  config.setNumberRuns(3); // number times to repeat running workload to stabilize numbers\n  \n  // parameters for compression experiments\n  config.setReduction(0.0, 0.51, 0.1); // reduction ratio start, stop, step\n  config.setSampleRatioCost(false); // minimize cost or minimize benefit/cost? false means minimize cost (only for discarding lists)\n  config.setQueriesSamplingFrac(0.25f); // use this sample of queries for compression\n  config.setDictSamplingFrac(0.01f); // use this sample of data strings for compression\n\n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setDictDataFile(\"data/female_names.txt\"); // set the data file\n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS); // output workload stats, query stats and query results\n  config.setOutputFilePrefix(\"memdl_names_ed1\"); // prefix of output files\n  statsgen.generate(); // run the experiment\n\n  cout << \"SUCCESS!\" << endl;\n}\n\nvoid statsGenMemCombineLists() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen); // using the edit distance\n  float ed = 2.0f; // this represents the similarity threshold, in this case edit distance 1\n  \n  DivideSkipMerger<> merger(true); // true == optimization for combining lists activated\n  //typedef FtIndexerDiscardListsLLF<> indexer; // discard long lists first\n  //typedef FtIndexerDiscardListsSLF<> indexer; // discard short lists first\n  //typedef FtIndexerDiscardListsRandom<> indexer; // randomly discard lists first\n  //typedef FtIndexerDiscardListsPanicCost<> indexer; // minimize number of panics\n  //typedef FtIndexerDiscardListsTimeCost<> indexer; // minimize total running time\n  //typedef FtIndexerCombineListsBasic<> indexer; // combine lists based on correlation\n  typedef FtIndexerCombineListsCost<> indexer; // combine lists based on total running time\n  typedef FtSearcherMem<indexer> searcher;\n  \n  StatsGenConfig config;\n  config.setGramGen(&gramGen);\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setDictSize(4000, 4000, 4000); // size of string dictionary, start, stop, step\n  config.setFanout(10); // fanout of filtertree\n  config.setMaxStrLen(20);\n  config.clearFilters();\n  config.addPartFilter(new LengthFilter(20)); // add partitioning filter\n  config.setNumberQueries(2000); // set total number of queries for the workload to run\n  config.setDistinctQueries(2000); // set distinct number of queries generated by randomly picking strings from the dictionary\n  config.setQueriesDistribution(QD_UNIFORM); // can be QD_UNIFORM or QD_ZIPF\n  //config.setZipfSkew(1); // zipf skew parameter if QD_ZIPF specified\n  config.setNumberRuns(3); // number times to repeat running workload to stabilize numbers\n  \n  // parameters for compression experiments\n  config.setReduction(0.0, 0.51, 0.1); // reduction ratio start, stop, step\n  config.setSampleRatioCost(false); // minimize cost or minimize benefit/cost? false means minimize cost (only for discarding lists)\n  config.setQueriesSamplingFrac(1.0f); // use this sample of queries for compression\n  config.setDictSamplingFrac(0.01f); // use this sample of data strings for compression\n\n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setDictDataFile(\"data/female_names.txt\"); // set the data file\n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS); // output workload stats, query stats and query results\n  config.setOutputFilePrefix(\"memcl_names_ed1\"); // prefix of output files\n  statsgen.generate(); // run the experiment\n\n  cout << \"SUCCESS!\" << endl;\n}\n\nvoid statsGenDiskSimple() {\n  GramGenFixedLen gramGen(2);\n  SimMetricEd simMetric(gramGen); // using the edit distance\n  //SimMetricJacc simMetric(gramGen); // using jaccard similarity\n  //SimMetricCos simMetric(gramGen); // using cosine similarity\n  //SimMetricDice simMetric(gramGen); // using dice similarity\n  float ed = 1.0f; // this represents the similarity threshold, in this case edit distance 1\n\n  OnDiskMergerSimple<> merger;\n  typedef FtIndexerOnDisk<> indexer;\n  typedef FtSearcherOnDisk<indexer> searcher;\n  \n  StatsGenConfig config;\n  config.setGramGen(&gramGen);\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setDictSize(4000, 4000, 4000); // size of string dictionary, start, stop, step\n  config.setFanout(10); // fanout of filtertree\n  config.setMaxStrLen(20);\n  config.clearFilters();\n  config.addPartFilter(new LengthFilter(20)); // add partitioning filter\n  config.setNumberQueries(2000); // set total number of queries for the workload to run\n  config.setDistinctQueries(2000); // set distinct number of queries generated by randomly picking strings from the dictionary\n  config.setQueriesDistribution(QD_UNIFORM); // can be QD_UNIFORM or QD_ZIPF\n  //config.setZipfSkew(1); // zipf skew parameter if QD_ZIPF specified\n  config.setNumberRuns(3); // number times to repeat running workload to stabilize numbers\n  \n  config.setRunBuffer(50000); // size of buffer for index construction (in bytes)\n  config.setAvgStrLen(8); // for optimizing disk-based storage of strings\n  config.setPhysOrd(PHO_AUTO); // automatically choose physical ordering of strings in container  \n  config.setCharsumFilterOptions(CSF_OPT); // use optimized charsum filter  \n\n  // for experiments on raw disk IOs, clear file-system caches and disable c++ filestream buffering?\n  // if set to true, perftest MUST be run as root user, sudo is NOT good enough\n  // it is recommended to run perftest as root anyway, in order to clear caches after index construction, \n  // otherwise queries may seem too fast due to a hot cache\n  config.setDropCachesBeforeBuildingIndex(false);\n  config.setDropCachesBeforeEachQuery(false);\n  config.setDisableStreamBuffer(false);\n  \n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setDictDataFile(\"data/female_names.txt\"); // set the data file\n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS); // output workload stats, query stats and query results\n  config.setOutputFilePrefix(\"disk_names_ed1\"); // prefix of output files\n  statsgen.generate(); // run the experiment\n  \n  cout << \"SUCCESS!\" << endl;\n}\n\n", "encoding": "ascii"}