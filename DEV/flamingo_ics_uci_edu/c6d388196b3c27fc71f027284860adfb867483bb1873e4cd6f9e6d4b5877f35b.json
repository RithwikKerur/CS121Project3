{"url": "http://flamingo.ics.uci.edu/releases/1.0/src/util/unittest.cc", "content": "/*\n    $Id: unittest.cc 1109 2007-04-17 00:04:26Z rvernica $\n\n    Copyright (C) 2007 by The Regents of the University of California\n\n    Redistribution of this file is permitted under the terms of the\n    GNU Public License (GPL).\n\n    Date: 01/30/2007\n    Author: Rares Vernica <rvernica@ics.uci.edu>\n*/\n\n#include <fstream>\n#include <iostream>\n#include <cassert>\n\n#include \"ed.h\"\n#include \"jd.h\"\n#include \"gram.h\"\n#include \"output.h\"\n#include \"misc.h\"\n\nvoid edTest()\n{\n  unsigned t = 0;\n  \n  vector<string> s;\n  s.push_back(\"abc\");\n  s.push_back(\"ab\");\n  s.push_back(\"ac\");\n  s.push_back(\"bc\");\n  s.push_back(\"a\");\n  s.push_back(\"b\");\n  s.push_back(\"c\");\n  s.push_back(\"abcdef\");\n  s.push_back(\"xyz\");\n  s.push_back(\"bac\");\n  s.push_back(\"acb\");\n  s.push_back(\"ba\");\n  \n  const unsigned n = 12;\n  unsigned e[][n] = \n    { {0, 1, 1, 1, 2, 2, 2, 3l, 3, 2, 2, 2},\n      {1, 0, 1, 2, 1, 1, 2, 4, 3, 2, 1, 2},\n      {1, 1, 0, 1, 1, 2, 1, 4, 3, 1, 1, 2},\n      {1, 2, 1, 0, 2, 1, 1, 4, 3, 1, 2, 1},\n      {2, 1, 1, 2, 0, 1, 1, 5, 3, 2, 2, 1},\n      {2, 1, 2, 1, 1, 0, 1, 5, 3, 2, 2, 1},\n      {2, 2, 1, 1, 1, 1, 0, 5, 3, 2, 2, 2},\n      {3, 4, 4, 4, 5, 5, 5, 0, 6, 5, 4, 5},\n      {3, 3, 3, 3, 3, 3, 3, 6, 0, 3, 3, 3},\n      {2, 2, 1, 1, 2, 2, 2, 5, 3, 0, 2, 1},\n      {2, 1, 1, 2, 2, 2, 2, 4, 3, 2, 0, 3},\n      {2, 2, 2, 1, 1, 1, 2, 5, 3, 1, 3, 0}};\n\n  unsigned eSwap[][n] = \n    { {0, 1, 1, 1, 2, 2, 2, 3, 3, 1, 1, 2},\n      {1, 0, 1, 2, 1, 1, 2, 4, 3, 2, 1, 1},\n      {1, 1, 0, 1, 1, 2, 1, 4, 3, 1, 1, 2},\n      {1, 2, 1, 0, 2, 1, 1, 4, 3, 1, 2, 1},\n      {2, 1, 1, 2, 0, 1, 1, 5, 3, 2, 2, 1},\n      {2, 1, 2, 1, 1, 0, 1, 5, 3, 2, 2, 1},\n      {2, 2, 1, 1, 1, 1, 0, 5, 3, 2, 2, 2},\n      {3, 4, 4, 4, 5, 5, 5, 0, 6, 4, 4, 5},\n      {3, 3, 3, 3, 3, 3, 3, 6, 0, 3, 3, 3},\n      {1, 2, 1, 1, 2, 2, 2, 4, 3, 0, 2, 1},\n      {1, 1, 1, 2, 2, 2, 2, 4, 3, 2, 0, 3},\n      {2, 1, 2, 1, 1, 1, 2, 5, 3, 1, 3, 0}};\n\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n//       cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n//            << e[i][j] << endl;\n      assert(ed(s[i], s[j]) == e[i][j]); t++;\n    }  \n\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n      assert(ed(s[i], s[j], e[i][j])); t++;\n    }\n\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n      if (e[i][j]) {\n        assert(!ed(s[i], s[j], e[i][j] - 1)); t++;\n      }\n    }\n\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n//       cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n//            << eSwap[i][j] << \" \" << edSwap(s[i], s[j]) << endl;\n      assert(edSwap(s[i], s[j]) == eSwap[i][j]); t++;\n    }  \n\n \n  cout << \"ed (\" << t << \")\" << endl;\n}\n\nvoid jdTest()\n{\n  unsigned t = 0;\n\n  vector<string> s;\n  s.push_back(\"abc\");\n  s.push_back(\"ab\");\n  s.push_back(\"ac\");\n  s.push_back(\"bc\");\n  s.push_back(\"a\");\n  s.push_back(\"b\");\n  s.push_back(\"c\");\n  s.push_back(\"abcdef\");\n  s.push_back(\"xyz\");\n  s.push_back(\"bac\");\n  s.push_back(\"acb\");\n  s.push_back(\"ba\");\n  \n  const unsigned n1 = 12;\n  unsigned q = 1;\n  float r1[][n1] = \n    { {     0, 1. / 3, 1. / 3, 1. / 3, 2. / 3, 2. / 3, 2. / 3,     .5,     1,      0,      0, 1. / 3},\n      {1. / 3, 0,      2. / 3, 2. / 3,     .5,     .5,      1, 2. / 3,     1, 1. / 3, 1. / 3,      0},\n      {1. / 3, 2. / 3,      0, 2. / 3,     .5,      1,     .5, 2. / 3,     1, 1. / 3, 1. / 3, 2. / 3},\n      {1. / 3, 2. / 3, 2. / 3,      0,      1,     .5,     .5, 2. / 3,     1, 1. / 3, 1. / 3, 2. / 3},\n      {2. / 3,     .5,     .5,      1,      0,      1,      1, 5. / 6,     1, 2. / 3, 2. / 3,     .5},\n      {2. / 3,     .5,      1,     .5,      1,      0,      1, 5. / 6,     1, 2. / 3, 2. / 3,     .5},\n      {2. / 3,      1,     .5,     .5,      1,      1,      0, 5. / 6,     1, 2. / 3, 2. / 3,      1},\n      {    .5, 2. / 3, 2. / 3, 2. / 3, 5. / 6, 5. / 6, 5. / 6,      0,     1,     .5,     .5, 2. / 3},\n      {     1,      1,      1,      1,      1,      1,      1,      1,     0,      1,      1,      1},\n      {     0, 1. / 3, 1. / 3, 1. / 3, 2. / 3, 2. / 3, 2. / 3,     .5,     1,      0,      0, 1. / 3},\n      {     0, 1. / 3, 1. / 3, 1. / 3, 2. / 3, 2. / 3, 2. / 3,     .5,     1,      0,      0, 1. / 3},\n      {1. / 3,      0, 2. / 3, 2. / 3,     .5,     .5,      1, 2. / 3,     1, 1. / 3, 1. / 3,      0}};\n\n  unsigned n = n1;\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n//       cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n//            << r1[i][j] << \" \" << jd(s[i], s[j], q) << endl;\n      assert(jd(s[i], s[j], q) == r1[i][j]); t++;\n    }  \n  \n  s.clear();\n  s.push_back(\"abc\");\n  s.push_back(\"ab\");\n  s.push_back(\"ac\");\n  s.push_back(\"bc\");\n  s.push_back(\"abcdef\");\n  s.push_back(\"xyz\");\n  s.push_back(\"bac\");\n  s.push_back(\"acb\");\n  s.push_back(\"ba\");\n  \n  q = 2;\n  const unsigned n2 = 9; \n  float r2[][n2] = \n    { {     0,     .5,      1,     .5,     .6,     1,      1,      1,      1},\n      {    .5,      0,      1,      1, 4. / 5,     1,      1,      1,      1},\n      {     1,      1,      0,      1,      1,     1,     .5,     .5,      1},\n      {    .5,      1,      1,      0, 4. / 5,     1,      1,      1,      1},\n      {    .6, 4. / 5,      1, 4. / 5,      0,     1,      1,      1,      1},\n      {     1,      1,      1,      1,      1,     0,      1,      1,      1},\n      {     1,      1,     .5,      1,      1,     1,      0, 2. / 3,     .5},\n      {     1,      1,     .5,      1,      1,     1, 2. / 3,      0,      1},\n      {     1,      1,      1,      1,      1,     1,     .5,      1,      0}};\n\n  n = n2;\n  for (unsigned i = 0; i < n; i++)\n    for (unsigned j = 0; j < n; j++) {\n//       cout << i << \" \" << j << \" \" << s[i] << \" \" << s[j] << \" \" \n//            << r2[i][j] << \" \" << jd(s[i], s[j], q) << endl;\n      assert(jd(s[i], s[j], q) == r2[i][j]); t++;\n    }  \n\n  cout << \"jd (\" << t << \")\" << endl;\n}\n\nvoid gramTest()\n{\n  unsigned t = 0;\n\n  // str2grams, str2gramsHash, and grams2str\n  vector<string> gramsCor, gramsRes;\n  string strRes;\n  gramsCor.push_back(\"##a\");\n  gramsCor.push_back(\"#ab\");\n  gramsCor.push_back(\"abc\");\n  gramsCor.push_back(\"bc$\");\n  gramsCor.push_back(\"c$$\");\n  str2grams(\"abc\", gramsRes);\n  assert(gramsRes == gramsCor); t++;\n  grams2str(gramsCor, strRes);\n  assert(strRes == \"abc\"); t++;\n\n  vector<unsigned> gramsHash, gramsHashRes;\n  for (vector<string>::const_iterator gram = gramsCor.begin();\n       gram != gramsCor.end(); ++gram)\n    gramsHash.push_back(hashString(*gram));\n  \n  str2gramsHash(\"abc\", gramsHashRes);\n  assert(gramsHashRes == gramsHash); t++;  \n\n  gramsCor.clear();\n  gramsCor.push_back(\"%%%a\");\n  gramsCor.push_back(\"%%ab\");\n  gramsCor.push_back(\"%abc\");\n  gramsCor.push_back(\"abcd\");\n  gramsCor.push_back(\"bcd@\");\n  gramsCor.push_back(\"cd@@\");\n  gramsCor.push_back(\"d@@@\");\n  gramsRes.clear();\n  str2grams(\"abcd\", gramsRes, 4, '%', '@');\n  assert(gramsRes == gramsCor); t++;\n  grams2str(gramsCor, strRes, 4);\n  assert(strRes == \"abcd\"); t++;\n\n  gramsHash.clear();\n  for (vector<string>::const_iterator gram = gramsCor.begin();\n       gram != gramsCor.end(); ++gram)\n    gramsHash.push_back(hashString(*gram));\n  gramsHashRes.clear();\n  str2gramsHash(\"abcd\", gramsHashRes, 4, '%', '@');\n  assert(gramsHashRes == gramsHash); t++;\n\n  // gram2id &  id2gram\n  assert(gram2id(\"abc\") == 207804); t++;\n  id2gram(207804, strRes, 3);\n  assert(strRes == \"abc\"); t++;\n\n  // GramId\n  GramId gid(3, '#', '$', \"abc\", false);\n\n  assert(gid.getId(\"###\") == 0); t++;\n  assert(gid.getId(\"##a\") == 1); t++;\n  assert(gid.getId(\"aaa\") == 31); t++;\n  assert(gid.getId(\"abc\") == 38); t++;\n  assert(gid.getId(\"cba\") == 86); t++;\n\n  assert(gid.getGram(0) == \"###\"); t++;\n  assert(gid.getGram(1) == \"##a\"); t++;\n  assert(gid.getGram(31) == \"aaa\"); t++;\n  assert(gid.getGram(38) == \"abc\"); t++;\n  assert(gid.getGram(86) == \"cba\"); t++;\n\n  vector<unsigned> idsCor, idsRes;\n  idsCor.clear();\n  idsCor.push_back(1);\n  idsCor.push_back(6);\n  idsCor.push_back(32);\n  idsCor.push_back(37);\n  idsCor.push_back(63);\n  idsCor.push_back(68);\n  idsCor.push_back(94);\n  idsCor.push_back(99);\n  idsRes.clear();\n  gid.getIds(\"aabbcc\", idsRes);\n  assert(idsRes == idsCor); t++;\n\n  gramsCor.clear();\n  gramsCor.push_back(\"##a\");\n  gramsCor.push_back(\"#aa\");\n  gramsCor.push_back(\"aab\");\n  gramsCor.push_back(\"abb\");\n  gramsCor.push_back(\"bbc\");\n  gramsCor.push_back(\"bcc\");\n  gramsCor.push_back(\"cc$\");\n  gramsCor.push_back(\"c$$\");\n  gramsRes.clear();\n  gid.getGrams(idsCor, gramsRes);\n  assert(gramsRes == gramsCor); t++;\n  grams2str(gramsCor, strRes);\n  assert(strRes == \"aabbcc\"); t++;\n\n  string filenamePrefix = \"gram\";\n  GramId gidSave = GramId();\n  gidSave.saveData(filenamePrefix);\n  GramId gidLoad = GramId(filenamePrefix);\n  assert(gidSave == gidLoad); t++;\n\n  // str2words\n  vector<string> words, wordsRes;\n  words.push_back(\"abc\");\n  words.push_back(\"de\");\n  words.push_back(\"f\");\n  \n  str2words(\"abc de f\", wordsRes);\n  assert(wordsRes == words); t++;\n  wordsRes.clear();\n  str2words(\"abc\\tde\\tf\", wordsRes);\n  assert(wordsRes == words); t++;\n  wordsRes.clear();\n  str2words(\"abc \\tde\\t f\", wordsRes);\n  assert(wordsRes == words); t++;\n  wordsRes.clear();\n  str2words(\"abc \\t de\\t \\tf\", wordsRes);\n  assert(wordsRes == words); t++;\n  wordsRes.clear();\n  str2words(\"\\t \\tabc \\t de\\t \\tf \\t \", wordsRes);\n  assert(wordsRes == words); t++;\n\n  // WordIndex\n  WordHash wordHash;\n  vector<string> data;\n  data.push_back(\"abc cd\");\n  data.push_back(\"cd def\");\n  data.push_back(\"abc\");\n  WordIndex::build(data, wordHash);\n\n  Ids s;\n  s.insert(0);\n  s.insert(2);\n  assert(wordHash[\"abc\"] == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordHash[\"cd\"] == s); t++;\n  s.erase(0);\n  assert(wordHash[\"def\"] == s); t++;\n  \n  wordHash.clear();\n  WordIndex::build(\"dataset.txt\", wordHash);\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordHash[\"abc\"] == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordHash[\"cd\"] == s); t++;\n  s.erase(0);\n  assert(wordHash[\"def\"] == s); t++;\n\n  WordIndex::save(\"dataset.words.txt\", \n                  \"dataset.ids.bin\", wordHash);\n  wordHash.clear();\n  WordIndex::load(\"dataset.words.txt\", \n                  \"dataset.ids.bin\", wordHash);\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordHash[\"abc\"] == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordHash[\"cd\"] == s); t++;\n  s.erase(0);\n  assert(wordHash[\"def\"] == s); t++;\n\n  WordIds wordIds;\n  WordKey wordKey;\n  WordIndex::build(data, wordIds, wordKey);\n\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordIds[wordKey[\"abc\"]].second == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordIds[wordKey[\"cd\"]].second == s); t++;\n  s.erase(0);\n  assert(wordIds[wordKey[\"def\"]].second == s); t++;\n\n  wordIds.clear();\n  wordKey.clear();\n  WordIndex::build(\"dataset.txt\", wordIds, wordKey);\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordIds[wordKey[\"abc\"]].second == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordIds[wordKey[\"cd\"]].second == s); t++;\n  s.erase(0);\n  assert(wordIds[wordKey[\"def\"]].second == s); t++;\n\n  WordIndex::save(\"dataset.wids.bin\", \"dataset.wkey.txt\", \n    wordIds, wordKey);\n  wordIds.clear();\n  wordKey.clear();\n  WordIndex::load(\"dataset.wids.bin\", \"dataset.wkey.txt\", \n    wordIds, wordKey);\n  s.clear();\n  s.insert(0);\n  s.insert(2);\n  assert(wordIds[wordKey[\"abc\"]].second == s); t++;\n  s.erase(2);\n  s.insert(1);\n  assert(wordIds[wordKey[\"cd\"]].second == s); t++;\n  s.erase(0);\n  assert(wordIds[wordKey[\"def\"]].second == s); t++;\n\n  cout << \"gram (\" << t << \")\" << endl;\n}\n\nvoid miscTest()\n{\n  unsigned t = 0;\n\n  assert(pow(static_cast<unsigned>(2), static_cast<unsigned>(0)) == 1); t++;\n  assert(pow(static_cast<unsigned>(2), static_cast<unsigned>(1)) == 2); t++;\n  assert(pow(static_cast<unsigned>(2), static_cast<unsigned>(2)) == 4); t++;\n\n  vector<vector<unsigned> > subs;\n  vector<unsigned> sub;\n  sub.push_back(0);\n  sub.push_back(1);\n  subs.push_back(sub);\n  sub[1] = 2;\n  subs.push_back(sub);\n  sub[0] = 1;\n  sub[1] = 2;\n  subs.push_back(sub);\n  assert(subsets(3, 2) == subs); t++;\n  \n  subs.clear();\n  sub.clear();\n  sub.push_back(0);\n  subs.push_back(sub);\n  sub[0] = 1;\n  subs.push_back(sub);\n  sub[0] = 2;\n  subs.push_back(sub);\n  assert(subsets(3, 1) == subs); t++;\n\n  assert(min(static_cast<unsigned>(1), 2, 3) == 1); t++;\n  assert(min(static_cast<unsigned>(1), 3, 2) == 1); t++;\n  assert(min(static_cast<unsigned>(2), 1, 3) == 1); t++;\n  assert(min(static_cast<unsigned>(2), 3, 1) == 1); t++;\n  assert(min(static_cast<unsigned>(3), 1, 2) == 1); t++;\n  assert(min(static_cast<unsigned>(3), 2, 1) == 1); t++;\n  assert(min(static_cast<unsigned>(1), 2, 2) == 1); t++;\n  assert(min(static_cast<unsigned>(2), 1, 2) == 1); t++;\n  assert(min(static_cast<unsigned>(2), 2, 1) == 1); t++;  \n\n  assert(utos(10) == \"10\"); t++;\n  assert(utosh(10) == \"10\"); t++;\n  assert(utosh(1000) == \"1k\"); t++;\n\n  UnsignedSeq s;\n  assert(s() == 0); t++;\n  assert(s() == 1); t++;\n  s = UnsignedSeq(10);\n  assert(s() == 10); t++;\n  assert(s() == 11); t++;\n\n  assert(removeExt(\"a.txt\") == \"a\"); t++;\n  assert(removeExt(\"a.bin\") == \"a\"); t++;\n\n  cout << \"misc (\" << t << \")\" << endl;\n}\n\nint main() \n{\n  cout << \"test...\" << endl;\n\n  edTest();\n  jdTest();\n  gramTest();\n  miscTest();\n\n  cout << \"OK\" << endl;\n}\n", "encoding": "ascii"}