{"url": "http://flamingo.ics.uci.edu/releases/4.1/src/lbaktree/src/kwdsstorage.cc", "content": "/*\n $Id: kwdsstorage.cc 6148 2012-02-22 23:13:40Z salsubaiee $\n\n Copyright (C) 2010 by The Regents of the University of California\n\n Redistribution of this file is permitted under\n the terms of the BSD license.\n\n Date: 08/19/2010\n Author: Sattam Alsubaiee <salsubai (at) ics.uci.edu>\n*/\n\n#include \"kwdsstorage.h\"\n\nKeywordsFile::KeywordsFile(string fileName)\n{\n    keywordsFileName = fileName;\n    buffer = 0;\n}\n\nvoid KeywordsFile::readIndex(string indexFileName, bool newFile)\n{\n    fstream indexFile;\n\n    if(newFile)\n    {\n        indexFile.open(indexFileName.c_str(), ios_base::in | ios_base::out | ios_base::binary | ios_base::trunc);\n    }\n    else\n    {\n        indexFile.open(indexFileName.c_str(), ios_base::in | ios_base::out | ios_base::binary);\n        if(indexFile.is_open())\n        {\n            indexFile.seekg(0, ios_base::end);\n            if(indexFile.tellg() / sizeof(IndexNode) > 0)\n            {\n                indexFile.seekg(0, ios_base::beg);\n                IndexNode irec;\n                while(!indexFile.eof())\n                {\n                    indexFile.read((char *)&irec, sizeof(irec));\n                    indexMap[irec.id] = irec;\n                }\n            }\n            indexFile.close();\n        }\n    }\n}\n\nvoid KeywordsFile::writeIndex()\n{\n    fstream indexFile;\n    IndexNode irec;\n    indexFile.open((keywordsFileName + \".idx\").c_str(), ios_base::in | ios_base::out | ios_base::binary | ios_base::trunc);\n    if(indexFile.is_open())\n    {\n        unordered_map <uintptr_t, IndexNode>::iterator it;\n        for (it = indexMap.begin(); it != indexMap.end(); ++it)\n        {\n            irec = (*it).second;\n            indexFile.write((char *)&irec, sizeof(irec));\n        }\n        indexFile.close();\n    }\n}\n\nIndexNode KeywordsFile::getIndexNode(uintptr_t id)\n{\n    return indexMap[id];\n}\n\nbool KeywordsFile::open(bool newFile)\n{\n    if(newFile)\n    {\n        keywordsFile.open((keywordsFileName + \".dat\").c_str(), ios_base::in | ios_base::out | ios_base::binary | ios_base::trunc);\n    }\n    else\n    {\n        keywordsFile.open((keywordsFileName + \".dat\").c_str(), ios_base::in | ios_base::out | ios_base::binary);\n    }\n    readIndex(keywordsFileName + \".idx\", newFile);\n    return keywordsFile.is_open();\n}\n\n\nKeywordsFile::~KeywordsFile()\n{\n    if(keywordsFile.is_open())\n    {\n        close();\n    }\n}\n\nunordered_map <uintptr_t, IndexNode>::iterator KeywordsFile::begin()\n{\n    return indexMap.begin();\n}\n\nunordered_map <uintptr_t, IndexNode>::iterator KeywordsFile::end()\n{\n    return indexMap.end();\n}\n\nvoid KeywordsFile::close()\n{\n    writeIndex();\n    keywordsFile.close();\n    keywordsFile.clear();\n    indexMap.clear();\n}\n\nbool KeywordsFile::write(string text, uintptr_t id, unsigned numKeywords)\n{\n    bool result = true;\n    IndexNode irec;\n\n    try\n    {\n        unordered_map<uintptr_t, IndexNode>::iterator it;\n        it = indexMap.find(id);\n\n        if(it != indexMap.end())\n        {\n            indexMap.erase(it);\n            keywordsFile.seekp((it->second).position);\n            irec.position = keywordsFile.tellp();\n            irec.size = text.length();\n            irec.id = id;\n            irec.numKeywords = numKeywords;\n            indexMap[id] = irec;\n            keywordsFile.write(text.c_str(), (std::streamsize)text.length());\n            keywordsFile.seekp(0, ios_base::end);\n        }\n        else\n        {\n            irec.position = keywordsFile.tellp();\n            irec.size = text.length();\n            irec.id = id;\n            irec.numKeywords = numKeywords;\n            indexMap[id] = irec;\n            keywordsFile.write(text.c_str(), (std::streamsize)text.length());\n        }\n    }\n    catch(char *ex)\n    {\n        cout << \"Problem writing \" << ex << endl;\n        result = false;\n    }\n\n    return (result);\n}\n\nstring KeywordsFile::read(uintptr_t id)\n{\n    IndexNode irec = indexMap[id];\n    if(buffer)\n    {\n        delete [] buffer;\n    }\n    buffer = new char[irec.size + 1];\n    keywordsFile.seekg(irec.position, ios_base::beg);\n    keywordsFile.read(buffer, irec.size);\n    buffer[irec.size] = '\\0';\n    return (string)buffer;\n}\n\nunsigned KeywordsFile::getRecordCount()\n{\n    return (unsigned)indexMap.size();\n}\n", "encoding": "ascii"}