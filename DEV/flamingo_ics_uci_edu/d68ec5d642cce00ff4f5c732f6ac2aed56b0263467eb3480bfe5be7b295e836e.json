{"url": "http://flamingo.ics.uci.edu/releases/3.0/src/listmerger/heapmerger-pq.cc", "content": "\n/*\n  $Id: heapmerger-pq.cc 5149 2010-03-24 23:37:18Z abehm $\n\n  Copyright (C) 2010 by The Regents of the University of California\n\n  Redistribution of this file is permitted under the terms of \n  the BSD license.\n\n  This imeplementation merges multiple lists by building a priority queue\n  (heap) based on the top elements of the lists.  The lists are assumed to\n  be sorted in an ascending order.\n \n  Date: 05/14/2007\n  Author: Chen Li <chenli (at) ics.uci.edu>\n\n*/\n\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <assert.h>\n\n#include \"listmerger.h\"\n#include \"util/array.h\"\n\n// http://support.microsoft.com/kb/837697\ntypedef pair<Array<unsigned>*, unsigned> ArrayWithPosition;\n\n// Overload the < operator.\nbool operator< (const ArrayWithPosition &awp1, const ArrayWithPosition &awp2)\n{\n  return awp1.first->at(awp1.second) < awp2.first->at(awp2.second);\n}\n\n// Overload the > operator.\nbool operator> (const ArrayWithPosition& awp1, const ArrayWithPosition &awp2)\n{\n  return awp1.first->at(awp1.second) > awp2.first->at(awp2.second);\n}\n\nvoid HeapMerger::merge(const vector<Array<unsigned>*> &arrays,\n\t\t       const unsigned threshold,\n\t\t       const unsigned maxObjectID,\n\t\t       vector<unsigned> &results)\n{\n  // build a heap. Each element is a list with its current position (0)\n  priority_queue<ArrayWithPosition> pq;\n  for (unsigned i = 0; i < arrays.size(); i ++)\n    pq.push((make_pair(arrays.at(i),0)));\n\n  // remove any leftover in the results\n  results.clear();\n\n  // iterate over the queue\n  unsigned prevObjectId = 0;\n  unsigned objFreqency = 0;\n  while (!pq.empty()) {\n    // remove the head\n    ArrayWithPosition awp = pq.top();\n    pq.pop();\n\n    // check the object id of the current element\n    //assert(awp.first != NULL);\n    //assert(awp.first->size() > awp.second);\n\n    unsigned newObjectId = awp.first->at(awp.second);\n    if (newObjectId == prevObjectId) {\n      objFreqency ++;\n    }\n    else {\n      prevObjectId = newObjectId; // a new object id\n      objFreqency = 1;\n    }\n\n    if (objFreqency >= threshold) // found a new candidate\n      if (!results.empty() && results.back() != newObjectId) // ignore duplcates in the results\n\tresults.push_back(newObjectId); // insert this candidate\n\n    // increment the position of the list by one\n    awp.second ++;\n    if (awp.second < awp.first->size()) // the list has more elments\n      pq.push(awp);\n  }\n\n  // return the results\n}\n\n", "encoding": "ascii"}