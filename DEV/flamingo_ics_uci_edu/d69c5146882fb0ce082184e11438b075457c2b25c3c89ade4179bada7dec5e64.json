{"url": "http://flamingo.ics.uci.edu/releases/4.0/src/filtertree/src/perftest.cc", "content": "/*\n  $Id: perftest.cc 5765 2010-10-19 04:36:20Z abehm $\n\n  Copyright (C) 2010 by The Regents of the University of California\n\t\n  Redistribution of this file is permitted under\n  the terms of the BSD License.\n    \n  Date: 09/19/2007\n  Author: Alexander Behm <abehm (at) ics.uci.edu>\n*/\n\n#include \"statsgen.h\"\n#include \"listmerger/src/mergeoptmerger.h\"\n\nvoid statsGenMemSimple();\nvoid statsGenMemDiscardLists();\nvoid statsGenMemCombineLists();\nvoid statsGenDiskSimple();\n\nvoid mem_dblp_author_mergeopt();\nvoid mem_dblp_title_mergeopt();\nvoid mem_imdb_actor_mergeopt();\nvoid mem_google_mergeopt();\nvoid mem_pubmed_mergeopt();\n\nint main(int argc, char* argv[]) {\n  \n  //statsGenMemSimple();\n  //statsGenMemDiscardLists();\n  //statsGenMemCombineLists();\n  //statsGenDiskSimple();\n\n  // NOTE: the datasets used in these tests \n  // are not provided in the Flamingo Package due to their size\n  // please contact Alexander Behm to obtain them\n  //mem_dblp_author_mergeopt();\n  //mem_dblp_title_mergeopt();\n  //mem_imdb_actor_mergeopt();\n  //mem_google_mergeopt();\n  //mem_pubmed_mergeopt();\n  \n  return 0;\n}\n\nvoid statsGenMemSimple() {\n  GramGenFixedLen gramGen(2);\n  SimMetricEd simMetric(gramGen); // using the edit distance\n  //SimMetricJacc simMetric(gramGen); // using jaccard similarity\n  //SimMetricCos simMetric(gramGen); // using cosine similarity\n  //SimMetricDice simMetric(gramGen); // using dice similarity\n  float ed = 1.0f; // this represents the similarity threshold, in this case edit distance 1\n\n  MergeOptMerger<> merger;\n  typedef FtIndexerMem<> indexer;\n  typedef FtSearcherMem<indexer> searcher;\n\n  StatsGenConfig config;\n  config.setGramGen(&gramGen);\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setDictSize(4000, 4000, 4000); // size of string dictionary, start, stop, step\n  config.setFanout(10); // fanout of filtertree\n  config.setMaxStrLen(20);\n  config.clearFilters();\n  config.addPartFilter(new LengthFilter(20)); // add partitioning filter\n  config.setNumberQueries(2000); // set total number of queries for the workload to run\n  config.setDistinctQueries(2000); // set distinct number of queries generated by randomly picking strings from the dictionary\n  config.setQueriesDistribution(QD_UNIFORM); // can be QD_UNIFORM or QD_ZIPF\n  //config.setZipfSkew(1); // zipf skew parameter if QD_ZIPF specified\n  config.setNumberRuns(3); // number times to repeat running workload to stabilize numbers\n      \n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setDictDataFile(\"../data/female_names.txt\"); // set the data file\n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS); // output workload stats, query stats and query results\n  config.setOutputFilePrefix(\"memsimple_names_ed1\"); // prefix of output files\n  statsgen.generate(); // run the experiment\n\n  cout << \"SUCCESS!\" << endl;\n}\n\nvoid statsGenMemDiscardLists() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen); // using the edit distance\n  float ed = 2.0f; // this represents the similarity threshold, in this case edit distance 1\n  \n  MergeOptMerger<> merger(true); // true == optimization for combining lists activated\n  //typedef FtIndexerDiscardListsLLF<> indexer; // discard long lists first\n  //typedef FtIndexerDiscardListsSLF<> indexer; // discard short lists first\n  //typedef FtIndexerDiscardListsRandom<> indexer; // randomly discard lists first\n  //typedef FtIndexerDiscardListsPanicCost<> indexer; // minimize number of panics\n  typedef FtIndexerDiscardListsTimeCost<> indexer; // minimize total running time\n  //typedef FtIndexerCombineListsBasic<> indexer; // combine lists based on correlation\n  //typedef FtIndexerCombineListsCost<> indexer; // combine lists based on total running time\n  typedef FtSearcherMem<indexer> searcher;\n  \n  StatsGenConfig config;\n  config.setGramGen(&gramGen);\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setDictSize(4000, 4000, 4000); // size of string dictionary, start, stop, step\n  config.setFanout(10); // fanout of filtertree\n  config.setMaxStrLen(20);\n  config.clearFilters();\n  config.addPartFilter(new LengthFilter(20)); // add partitioning filter\n  config.setNumberQueries(2000); // set total number of queries for the workload to run\n  config.setDistinctQueries(2000); // set distinct number of queries generated by randomly picking strings from the dictionary\n  config.setQueriesDistribution(QD_UNIFORM); // can be QD_UNIFORM or QD_ZIPF\n  //config.setZipfSkew(1); // zipf skew parameter if QD_ZIPF specified\n  config.setNumberRuns(3); // number times to repeat running workload to stabilize numbers\n  \n  // parameters for compression experiments\n  config.setReduction(0.0, 0.51, 0.1); // reduction ratio start, stop, step\n  config.setSampleRatioCost(false); // minimize cost or minimize benefit/cost? false means minimize cost (only for discarding lists)\n  config.setQueriesSamplingFrac(0.25f); // use this sample of queries for compression\n  config.setDictSamplingFrac(0.01f); // use this sample of data strings for compression\n\n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setDictDataFile(\"../data/female_names.txt\"); // set the data file\n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS); // output workload stats, query stats and query results\n  config.setOutputFilePrefix(\"memdl_names_ed1\"); // prefix of output files\n  statsgen.generate(); // run the experiment\n\n  cout << \"SUCCESS!\" << endl;\n}\n\nvoid statsGenMemCombineLists() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen); // using the edit distance\n  float ed = 2.0f; // this represents the similarity threshold, in this case edit distance 1\n  \n  MergeOptMerger<> merger(true); // true == optimization for combining lists activated\n  //typedef FtIndexerDiscardListsLLF<> indexer; // discard long lists first\n  //typedef FtIndexerDiscardListsSLF<> indexer; // discard short lists first\n  //typedef FtIndexerDiscardListsRandom<> indexer; // randomly discard lists first\n  //typedef FtIndexerDiscardListsPanicCost<> indexer; // minimize number of panics\n  //typedef FtIndexerDiscardListsTimeCost<> indexer; // minimize total running time\n  //typedef FtIndexerCombineListsBasic<> indexer; // combine lists based on correlation\n  typedef FtIndexerCombineListsCost<> indexer; // combine lists based on total running time\n  typedef FtSearcherMem<indexer> searcher;\n  \n  StatsGenConfig config;\n  config.setGramGen(&gramGen);\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setDictSize(4000, 4000, 4000); // size of string dictionary, start, stop, step\n  config.setFanout(10); // fanout of filtertree\n  config.setMaxStrLen(20);\n  config.clearFilters();\n  config.addPartFilter(new LengthFilter(20)); // add partitioning filter\n  config.setNumberQueries(2000); // set total number of queries for the workload to run\n  config.setDistinctQueries(2000); // set distinct number of queries generated by randomly picking strings from the dictionary\n  config.setQueriesDistribution(QD_UNIFORM); // can be QD_UNIFORM or QD_ZIPF\n  //config.setZipfSkew(1); // zipf skew parameter if QD_ZIPF specified\n  config.setNumberRuns(3); // number times to repeat running workload to stabilize numbers\n  \n  // parameters for compression experiments\n  config.setReduction(0.0, 0.51, 0.1); // reduction ratio start, stop, step\n  config.setSampleRatioCost(false); // minimize cost or minimize benefit/cost? false means minimize cost (only for discarding lists)\n  config.setQueriesSamplingFrac(1.0f); // use this sample of queries for compression\n  config.setDictSamplingFrac(0.01f); // use this sample of data strings for compression\n\n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setDictDataFile(\"../data/female_names.txt\"); // set the data file\n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS); // output workload stats, query stats and query results\n  config.setOutputFilePrefix(\"memcl_names_ed1\"); // prefix of output files\n  statsgen.generate(); // run the experiment\n\n  cout << \"SUCCESS!\" << endl;\n}\n\nvoid statsGenDiskSimple() {\n  GramGenFixedLen gramGen(2);\n  SimMetricEd simMetric(gramGen); // using the edit distance\n  //SimMetricJacc simMetric(gramGen); // using jaccard similarity\n  //SimMetricCos simMetric(gramGen); // using cosine similarity\n  //SimMetricDice simMetric(gramGen); // using dice similarity\n  float ed = 1.0f; // this represents the similarity threshold, in this case edit distance 1\n\n  OnDiskMergerSimple<> merger;\n  typedef FtIndexerOnDisk<> indexer;\n  typedef FtSearcherOnDisk<indexer> searcher;\n  \n  StatsGenConfig config;\n  config.setGramGen(&gramGen);\n  config.setSimMetric(&simMetric, ed); // similarity metric, similarity threshold\n  config.setDictSize(4000, 4000, 4000); // size of string dictionary, start, stop, step\n  config.setFanout(10); // fanout of filtertree\n  config.setMaxStrLen(20);\n  config.clearFilters();\n  config.addPartFilter(new LengthFilter(20)); // add partitioning filter\n  config.setNumberQueries(2000); // set total number of queries for the workload to run\n  config.setDistinctQueries(2000); // set distinct number of queries generated by randomly picking strings from the dictionary\n  config.setQueriesDistribution(QD_UNIFORM); // can be QD_UNIFORM or QD_ZIPF\n  //config.setZipfSkew(1); // zipf skew parameter if QD_ZIPF specified\n  config.setNumberRuns(3); // number times to repeat running workload to stabilize numbers\n  \n  config.setRunBuffer(50000); // size of buffer for index construction (in bytes)\n  config.setAvgStrLen(8); // for optimizing disk-based storage of strings\n  config.setPhysOrd(PHO_AUTO); // automatically choose physical ordering of strings in container  \n  config.setPostMergeFilter(PMF_CSF_OPT); // use optimized charsum filter  \n\n  // for experiments on raw disk IOs, clear file-system caches and disable c++ filestream buffering?\n  // if set to true, perftest MUST be run as root user, sudo is NOT good enough\n  // it is recommended to run perftest as root anyway, in order to clear caches after index construction, \n  // otherwise queries may seem too fast due to a hot filesystem cache\n  config.setDropCachesBeforeBuildingIndex(false);\n  config.setDropCachesBeforeEachQuery(false);\n  config.setDisableStreamBuffer(false);\n  \n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setDictDataFile(\"../data/female_names.txt\"); // set the data file\n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS); // output workload stats, query stats and query results\n  config.setOutputFilePrefix(\"disk_names_ed1\"); // prefix of output files\n  statsgen.generate(); // run the experiment\n  \n  cout << \"SUCCESS!\" << endl;\n}\n\nvoid mem_dblp_author_mergeopt() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen);\n  \n  MergeOptMerger<> merger;\n  typedef FtIndexerMem<> indexer;\n  typedef FtSearcherMem<indexer, MergeOptMerger<> > searcher;\n\n  StatsGenConfig config;\n\n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setGramGen(&gramGen);\n  \n  config.setDictDataFile(\"../data/bedcmp/data-dblp-author_flamingo.txt\");\n  config.setDictSize(2948929, 2948929, 2948929);\n  \n  config.setFanout(50);\n  config.setMaxStrLen(50);\n  config.setAutoPartFilter(false);\n  config.addPartFilter(new LengthFilter(50));\n  config.setNumberQueries(10000);\n  config.setDistinctQueries(10000);\n  config.setQueriesDistribution(QD_UNIFORM);\n  config.setNumberRuns(3);      \n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS);\n  config.setQueryType(QueryRange); // could also be QueryTopk\n  \n  //config.setPhysOrd(PHO_LENGTH); // sort data strings by length\n  config.useExistingWorkload(\"../data/workload-dblp-author.txt\");\n\n  config.setSimMetric(&simMetric, 1.0f);\n  config.setOutputFilePrefix(\"experiments/dblpauthor_mem_ed1\");\n  statsgen.generate();\n\n  config.setSimMetric(&simMetric, 2.0f);\n  config.setOutputFilePrefix(\"experiments/dblpauthor_mem_ed2\");\n  statsgen.generate();\n  \n  config.setSimMetric(&simMetric, 3.0f);\n  config.setOutputFilePrefix(\"experiments/dblpauthor_mem_ed3\");\n  //statsgen.generate();\n  \n  config.setSimMetric(&simMetric, 4.0f);\n  config.setOutputFilePrefix(\"experiments/dblpauthor_mem_ed4\");\n  //statsgen.generate();\n}\n\nvoid mem_dblp_title_mergeopt() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen);\n    \n  MergeOptMerger<> merger;\n  typedef FtIndexerMem<> indexer;\n  typedef FtSearcherMem<indexer, MergeOptMerger<> > searcher;\n\n  StatsGenConfig config;\n\n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setGramGen(&gramGen);\n  \n  config.setDictDataFile(\"../data/bedcmp/data-dblp-title_flamingo.txt\");\n  config.setDictSize(1158648, 1158648, 1158648);    \n  \n  config.setFanout(50);\n  config.setMaxStrLen(800);\n  config.setAutoPartFilter(false);\n  config.addPartFilter(new LengthFilter(800));\n  config.setNumberQueries(10000);\n  config.setDistinctQueries(10000);\n  config.setQueriesDistribution(QD_UNIFORM);\n  config.setNumberRuns(3);    \n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS);\n  config.setQueryType(QueryRange); // could also be QueryTopk    \n\n  //config.setPhysOrd(PHO_LENGTH); // sort data strings by length\n  config.useExistingWorkload(\"../data/workload-dblp-title.txt\");\n\n  config.setSimMetric(&simMetric, 1.0f);\n  config.setOutputFilePrefix(\"experiments/dblptitle_mem_ed1\");\n  statsgen.generate();\n  \n  config.setSimMetric(&simMetric, 2.0f);\n  config.setOutputFilePrefix(\"experiments/dblptitle_mem_ed2\");\n  statsgen.generate();\n\n  config.setSimMetric(&simMetric, 3.0f);\n  config.setOutputFilePrefix(\"experiments/dblptitle_mem_ed3\");\n  //statsgen.generate();\n  \n  config.setSimMetric(&simMetric, 4.0f);\n  config.setOutputFilePrefix(\"experiments/dblptitle_mem_ed4\");\n  //statsgen.generate();\n}\n\nvoid mem_imdb_actor_mergeopt() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen);\n  \n  MergeOptMerger<> merger;\n  typedef FtIndexerMem<> indexer;\n  typedef FtSearcherMem<indexer, MergeOptMerger<> > searcher;\n\n  StatsGenConfig config;\n\n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setGramGen(&gramGen);\n  \n  config.setDictDataFile(\"../data/bedcmp/data-imdb-actor_flamingo.txt\");\n  config.setDictSize(1213391, 1213391, 1213391);\n  \n  config.setFanout(80);\n  config.setMaxStrLen(80);\n  config.clearFilters();\n  config.setAutoPartFilter(false);\n  config.addPartFilter(new LengthFilter(80));\n  config.setNumberQueries(10000);\n  config.setDistinctQueries(10000);\n  config.setQueriesDistribution(QD_UNIFORM);\n  config.setNumberRuns(3);     \n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS);\n  config.setQueryType(QueryRange); // could also be QueryTopk\n\n  //config.setPhysOrd(PHO_LENGTH); // sort data strings by length\n  config.useExistingWorkload(\"../data/workload-imdb-actor.txt\");\n\n  config.setSimMetric(&simMetric, 1.0f);\n  config.setOutputFilePrefix(\"experiments/imdbactor_mem_ed1\");\n  statsgen.generate();\n\n  config.setSimMetric(&simMetric, 2.0f);\n  config.setOutputFilePrefix(\"experiments/imdbactor_mem_ed2\");\n  statsgen.generate();\n\n  config.setSimMetric(&simMetric, 3.0f);\n  config.setOutputFilePrefix(\"experiments/imdbactor_mem_ed3\");\n  //statsgen.generate();\n\n  config.setSimMetric(&simMetric, 4.0f);\n  config.setOutputFilePrefix(\"experiments/imdbactor_mem_ed4\");\n  //statsgen.generate();\n}\n\n\nvoid mem_google_mergeopt() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen);\n  \n  MergeOptMerger<> merger;\n  typedef FtIndexerMem<> indexer;\n  typedef FtSearcherMem<indexer, MergeOptMerger<> > searcher;\n  \n  StatsGenConfig config;\n\n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setGramGen(&gramGen);\n  \n  config.setDictDataFile(\"../data/googlebig250.txt\");\n  config.setDictSize(2000000, 2000000, 2000000);    \n  \n  config.setFanout(100);\n  config.setMaxStrLen(200);\n  config.clearFilters();\n  config.setAutoPartFilter(false);\n  config.addPartFilter(new LengthFilter(200));\n  config.setNumberQueries(10000);\n  config.setDistinctQueries(10000);\n  config.setQueriesDistribution(QD_UNIFORM);\n  config.setNumberRuns(3);    \n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS);\n  config.setQueryType(QueryRange); // could also be QueryTopk  \n\n  //config.setPhysOrd(PHO_LENGTH); // sort data strings by length\n  config.useExistingWorkload(\"../data/workload-google.txt\");\n  \n  config.setSimMetric(&simMetric, 1.0f);\n  config.setOutputFilePrefix(\"experiments/google_mem_ed1\");\n  statsgen.generate();\n\n  config.setSimMetric(&simMetric, 2.0f);\n  config.setOutputFilePrefix(\"experiments/google_mem_ed2\");\n  statsgen.generate();\n\n  config.setSimMetric(&simMetric, 3.0f);\n  config.setOutputFilePrefix(\"experiments/google_mem_ed3\");\n  //statsgen.generate();\n\n  config.setSimMetric(&simMetric, 4.0f);\n  config.setOutputFilePrefix(\"experiments/google_mem_ed4\");\n  //statsgen.generate();\n}\n\nvoid mem_pubmed_mergeopt() {\n  GramGenFixedLen gramGen(3);\n  SimMetricEd simMetric(gramGen);\n  \n  MergeOptMerger<> merger;\n  typedef FtIndexerMem<> indexer;\n  typedef FtSearcherMem<indexer, MergeOptMerger<> > searcher;\n  \n  StatsGenConfig config;\n\n  StatsGen<indexer, searcher> statsgen(&config); // create an instance of the stats generator\n  statsgen.setMerger(&merger);\n  \n  config.setGramGen(&gramGen);\n  \n  config.setDictDataFile(\"../data/pubmedtitles250.txt\");\n  config.setDictSize(2000000, 2000000, 2000000);    \n  \n  config.setFanout(100);\n  config.setMaxStrLen(300);\n  config.clearFilters();\n  config.setAutoPartFilter(false);\n  config.addPartFilter(new LengthFilter(300));\n  config.setNumberQueries(10000);\n  config.setDistinctQueries(10000);\n  config.setQueriesDistribution(QD_UNIFORM);\n  config.setNumberRuns(3);\n  config.setOutputFlags(OF_WORKLOADSTATS | OF_QUERYRESULTS | OF_QUERYSTATS);\n  config.setQueryType(QueryRange); // could also be QueryTopk    \n  \n  //config.setPhysOrd(PHO_LENGTH); // sort data strings by length\n  config.useExistingWorkload(\"../data/workload-pubmed.txt\");\n\n  config.setSimMetric(&simMetric, 1.0f);\n  config.setOutputFilePrefix(\"experiments/pubmed_mem_ed1\");\n  statsgen.generate();\n\n  config.setSimMetric(&simMetric, 2.0f);\n  config.setOutputFilePrefix(\"experiments/pubmed_mem_ed2\");\n  statsgen.generate();\n  \n  config.setSimMetric(&simMetric, 3.0f);\n  config.setOutputFilePrefix(\"experiments/pubmed_mem_ed3\");\n  //statsgen.generate();\n\n  config.setSimMetric(&simMetric, 4.0f);\n  config.setOutputFilePrefix(\"experiments/pubmed_mem_ed4\");\n  //statsgen.generate();\n}\n", "encoding": "ascii"}