{"url": "http://flamingo.ics.uci.edu/releases/2.0/docs/FilterTreeDoc.html", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:html=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>FilterTreeDoc - Chen Li -- Group - Trac</title>\n<style type=\"text/css\">\n           @import url(media/trac.css);\n          </style>\n</head>\n<body>\n<p>\n<a href=\"index.html\">Back to Index</a>\n</p>\n<hr/>\n<div class=\"wikipage\">\n<div id=\"searchable\">\n<p>AppString\n&gt; AppStringDoc</p>\n<div class=\"wiki-toc\">\n<ol>\n<li>\n<a href=\"#Filtertree\" shape=\"rect\">Filtertree</a>\n<ol>\n<li>\n<a href=\"#Introduction\" shape=\"rect\">Introduction</a>\n</li>\n<li>\n<a href=\"#ApproximateStringSearch\" shape=\"rect\">Approximate String\nSearch</a>\n</li>\n<li>\n<a href=\"#Overview\" shape=\"rect\">Overview</a>\n</li>\n<li>\n<a href=\"#AnsweringApproximateStringQueries\" shape=\"rect\">Answering\nApproximate String Queries</a>\n</li>\n<li>\n<a href=\"#TheFiltertreeStructure\" shape=\"rect\">The Filtertree\nStructure</a>\n</li>\n<li>\n<a href=\"#High-LevelOverviewofImportantComponents\" shape=\"rect\">High-Level\nOverview of Important Components</a>\n</li>\n<li>\n<a href=\"#StatsGenOutput\" shape=\"rect\">StatsGen Output</a>\n</li>\n<li>\n<a href=\"#Contributors\" shape=\"rect\">Contributors</a>\n</li>\n</ol>\n</li>\n</ol>\n</div>\n<h1 id=\"Filtertree\">Filtertree</h1>\n<h2 id=\"Introduction\">Introduction</h2>\n<p>This module supports efficient approximate string search on a\ncollection of strings. An approximate query asks for all strings in\nthe collection that are \"similar\" to the query string for a given\nsimilarity function and similarity threshold.</p>\n<h2 id=\"ApproximateStringSearch\">Approximate String Search</h2>\n<p>Many applications need to answer approximate string queries. The\nfollowing are a few examples:</p>\n<ul>\n<li>The \"Did you mean\" feature by many search engines partially\nrelies on finding words similar to a given keyword.</li>\n<li>Spellchecking: suggest good words for a possibly mistyped\nword.</li>\n<li>Record linkage: identify records that could represent the same\nreal-world entity.</li>\n</ul>\n<h2 id=\"Overview\">Overview</h2>\n<ol>\n<li>Our implementation stores everything in main memory. That\nincludes:\n<ul>\n<li>The string collection</li>\n<li>The filtertree</li>\n<li>The inverted lists</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li>We support the following similarity functions / distance\nmeasures:\n<ul>\n<li>Levenshtein Distance (aka the Edit Distance) <a class=\"ext-link\" href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\" shape=\"rect\">\n<span class=\"icon\">http://en.wikipedia.org/wiki/Levenshtein_distance</span>\n</a>\n</li>\n<li>Jaccard Similarity <a class=\"ext-link\" href=\"http://en.wikipedia.org/wiki/Jaccard_Similarity_Coefficient\" shape=\"rect\">\n<span class=\"icon\">\nhttp://en.wikipedia.org/wiki/Jaccard_Similarity_Coefficient</span>\n</a>\n</li>\n<li>Cosine Similarity <a class=\"ext-link\" href=\"http://en.wikipedia.org/wiki/Cosine_similarity\" shape=\"rect\">\n<span class=\"icon\">http://en.wikipedia.org/wiki/Cosine_similarity</span>\n</a>\n</li>\n<li>Dice Similarity <a class=\"ext-link\" href=\"http://en.wikipedia.org/wiki/Dice%27s_coefficient\" shape=\"rect\">\n<span class=\"icon\">http://en.wikipedia.org/wiki/Dice%27s_coefficient</span>\n</a>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>We support the following single-signature filters:\n<ul>\n<li>Length Filter</li>\n<li>Checksum Filter</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li>The index structure (filtertree + inverted lists) can be\nsaved/loaded to/from a file.</li>\n</ol>\n<h2 id=\"AnsweringApproximateStringQueries\">Answering Approximate\nString Queries</h2>\n<p>To answer queries efficiently this module uses an inverted-list\nindex on the q-grams of the strings in the collection. That is,\neach string is decomposed into substrings (grams) of size q using a\nsliding window, and then for each gram we build a list of string\nids containing that gram (the inverted list of that gram). The\nprocess of answering queries is based on the observation that if\ntwo strings are similar, then they must share a certain number of\ncommon grams (depending on the similarity function and similarity\nthreshold). False-positives must be removed in a post-processing\nstep, i.e. the true similarities are computed.</p>\n<p>In addition to the above we can further increase the performance\nof queries by using filters. A single-signature filter partitions\nthe string collection into disjoint subsets based on some criteria.\nFor answering a query we only need to consider some of the subsets.\nFor example, if we were looking for all strings in the collection\nwithin an edit-distance of 1 to the string \"abcde\", then we know\nthat any answer string must have a length in [4,6]. So, if we\npartition the string collection using the length of the strings we\ncan avoid processing irrelevant string ids during query answering.\nThe checksum filter is very similar to the length filter. We\npartition the data strings based on their checksums. For query\nanswering we can determine a range of checksums that answers must\nlie in.</p>\n<h2 id=\"TheFiltertreeStructure\">The Filtertree Structure</h2>\n<p>The filtertree structure facilitates the use of multiple\nsingle-signature filters. Each level in the tree partitions the\nstring collection based on one filter. Each leaf node contains an\ninverted-list structure on the subset of strings belonging to that\nleaf. For answering a query we traverse the tree to identify leaf\nnodes that could contain answers to the query, and process them\nindependently. The following is an example of a filtertree with a\nfanout of 3 and both the length and checksum filter applied:</p>\n<p>\n<img width=\"70%\" alt=\"FilterTree Structure with two filters\" src=\"media/FiltertreeStructure.png\" title=\"FilterTree Structure with two filters\"/>\n</p>\n<h2 id=\"High-LevelOverviewofImportantComponents\">High-Level\nOverview of Important Components</h2>\n<ul>\n<li>Includes components from core and from filtertree</li>\n</ul>\n<p>\n<img src=\"media/FilterTree_CodeOverview.png\" alt=\"Code overview of filtertree\" title=\"Code overview of filtertree\"/>\n</p>\n<h2 id=\"StatsGenOutput\">StatsGen Output</h2>\n<p>The StatsGenerator allows collecting of performance data on the\napproximate string search library. For example, different filters,\nmerging algorithms, datasets, query workloads can be tested. A good\nstart is perftest.cc included in the filtertree folder. The\nperformance numbers are written to an output file (e.g. perftest.cc\nwrites to \"perftest_search_stats.txt\"). The StatsGenerator is\nintended for advanced users who are familiar with the algorithmic\ndetails of approximate string search. The numbers generated depict\ndifferent steps in the process of query answering and will only be\nunderstood by people familiar with the subject. For getting an idea\nof the query performance using certain parameters it is sufficient\nto focus on field8 which measures the average query performance of\nthe given workload.</p>\n<p>The output generated is semicolon-separated and has the\nfollowing format:</p>\n<ul>\n<li>field1: size of dataset</li>\n<li>field2: filtertree fanout</li>\n<li>field3: avg time for calculating merging-threshold (ms)</li>\n<li>field4: avg time for pre-processing, traversing the filtertree,\netc. (ms)</li>\n<li>field5: avg time for merging (ms)</li>\n<li>field6: avg time for post-processing (ms)</li>\n<li>field7: avg time for scans (ms)</li>\n<li>field8: avg total time (ms)</li>\n<li>field9: avg number of candidate strings to post-process</li>\n<li>field10: total number of scans</li>\n<li>field11: index build time (ms)</li>\n</ul>\n<h2 id=\"Contributors\">Contributors</h2>\n<ul>\n<li>Alexander Behm (design, main author)</li>\n<li>Chen Li (design, project leader)</li>\n<li>Rares Vernica (design)</li>\n<li>Shengyue Ji (design, implementation)</li>\n<li>Yiming Lu (design, implementation)</li>\n</ul>\n</div>\n</div>\n<div class=\"footer\">\n<hr/>\n<p>\n<a href=\"index.html\">Back to Index</a>\n</p>\n</div>\n</body>\n</html>\n", "encoding": "ascii"}