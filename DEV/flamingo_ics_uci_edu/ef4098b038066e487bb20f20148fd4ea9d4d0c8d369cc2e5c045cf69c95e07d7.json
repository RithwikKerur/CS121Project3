{"url": "http://flamingo.ics.uci.edu/releases/3.0/src/topk/unittest.cc", "content": "/*\n  $Id: unittest.cc 5026 2010-02-17 20:25:03Z rares $\n\n  Copyright (C) 2007 by The Regents of the University of California\n \n  Redistribution of this file is permitted under the terms of the BSD\n  license\n\n  Date: 10/22/2007\n  Author: Rares Vernica <rares (at) ics.uci.edu>\n*/\n\n#include \"topk.h\"\n#include \"topksearch.h\"\n#include \"util/output.h\"\n#include \"util/io.h\"\n\n#include <iomanip>\n\nusing namespace std;\n\nvoid testTopk()\n{\n  uint t = 0;\n\n  /*\n\n    +----+------+      +----+ +----+ +----+ +----+ \n    |  0 |      |      | #a | | ab | | bc | | c$ | \n    +----+------+      +----+ +----+ +----+ +----+ \n    |  1 | a    |      |  1 | |  3 | |  8 | |  8 | \n    +----+------+      +----+ +----+ +----+ +----+ \n    |  2 |      |      |  5 | |  4 | | 10 | | 10 | \n    +----+------+      +----+ +----+ +----+ +----+ \n    |  3 | xab  |      |  8 | |  5 | | 13 | | 13 | \n    +----+------+      +----+ +----+ +----+ +----+ \n    |  4 | xab  |                    | 15 | | 15 | \n    +----+------+                    +----+ +----+ \n    |  5 | ab   | \n    +----+------+ \n    |  6 |      | \n    +----+------+ \n    |  7 |      | \n    +----+------+ \n    |  8 | axbc | \n    +----+------+ \n    |  9 |      | \n    +----+------+ \n    | 10 | bc   | \n    +----+------+ \n    | 11 |      | \n    +----+------+ \n    | 12 |      | \n    +----+------+ \n    | 13 | bc   | \n    +----+------+ \n    | 14 |      | \n    +----+------+ \n    | 15 | bc   | \n    +----+------+ \n    | 16 |      | \n    +----+------+ \n    | 17 |      | \n    +----+------+ \n    | 18 |      | \n    +----+------+ \n    | 19 |      | \n    +----+------+ \n\n  */\n\n  GramGenFixedLen gramGen(2);\n  SimMetricJacc simMetric(gramGen);\n  Query query(\"abc\", simMetric, static_cast<uint>(1));\n  uint topk;\n\n  string data[] = {\n    \"\", \"a\", \"\", \"xab\", \"xab\", \n    \"ab\", \"\", \"\", \"axbc\", \"\",\n    \"bc\", \"\",  \"\", \"bc\", \"\", \n    \"bc\", \"\", \"\", \"\", \"\"};\n  uint noData = sizeof(data) / sizeof(string);\n\n  float *weights = new float[noData];\n  uint *nograms = new uint[noData];\n\n  for (uint i = 0; i < noData; i++) {\n    // weights[i] = log(i + 1) / log(noData);\n    weights[i] = 1 - log(static_cast<float>(i + 1)) / log(static_cast<float>(noData));\n    nograms[i] = gramGen.getNumGrams(data[i]);\n  }\n\n  cout << fixed << setprecision(2);\n  for (uint i = 0; i < noData; i++)\n    cout << left << setw(4) << data[i] << ' '\n         << right << simMetric(query.str, data[i]) << \" + \"\n         << weights[i] << \" = \"\n         << Topk::score(simMetric(query.str, data[i]), weights[i]) << endl;\n\n  Topk::Index topkIndex;\n  topkIndex.build(data, data + sizeof(data) / sizeof(string), gramGen);\n  Topk::IndexQuery *topkIndexQuery;\n\n  topkIndexQuery = new Topk::IndexQuery(topkIndex, query);\n  Topk::Heap::getTopk(\n    data, \n    weights, \n    topkIndex, \n    query, \n    *topkIndexQuery, \n    &topk);\n  delete topkIndexQuery;\n  \n  assert(topk == 1); t++; // 1, 8\n\n  topkIndexQuery = new Topk::IndexQuery(topkIndex, query);\n  Topk::RoundRobin::getTopk(\n    data, \n    weights, \n    nograms, \n    topkIndex, \n    query, \n    *topkIndexQuery, \n    &topk);\n  delete topkIndexQuery;\n  \n  assert(topk == 1); t++; // 1, 8\n\n  delete [] weights;\n  delete [] nograms;\n\n  cout << \"topk (\" << t << \")\" << endl;\n}\n\nvoid testSearch()\n{\n  uint t = 0;\n\n  vector<string> res;\n  ofstream log(\"out.log\", ios::out | ios::app);\n\n  Topk::Search s(cout);\n  cout << s;\n  \n  {\n    string kwds[] = {\"ABC\", \"xyz\"};\n    int counts[] = {1, 2};\n    \n    s.updateKwd(kwds, kwds + sizeof(kwds) / sizeof(string), counts);\n    cout << s;\n  }\n\n  {\n    string kwds[] = {\"bcd\", \"xyz\", \"abc\"};\n    int counts[] = {3, -1, -1};\n  \n    s.updateKwd(kwds, kwds + sizeof(kwds) / sizeof(string), counts);\n    cout << s;\n  }\n\n  {\n    string kwds[] = {\"bc\", \"xz\"};\n\n    s.searchKwd(\n      kwds, kwds + sizeof(kwds) / sizeof(string), back_inserter(res));\n\n    cout << res << endl;  \n    res.clear();\n  }\n  \n  string fname = \"idx.bin\";\n  s.save(fname);\n\n  Topk::Search s2(log);\n  s2.load(fname);\n  cout << s;\n  assert(s == s2); t++;\n\n  remove(fname.c_str());\n\n  {\n    string kwds[] = {\"bc\", \"xz\"};\n\n    s2.searchKwd(\n      kwds, kwds + sizeof(kwds) / sizeof(string), back_inserter(res));\n\n    cout << res << endl;  \n    res.clear();\n  }\n\n  {\n    string kwds[] = {\"abc\", \"xyz\", \"bcd\"};\n    int counts[] = {1, 1, -2};\n    \n    s2.updateKwd(kwds, kwds + sizeof(kwds) / sizeof(string), counts);\n    cout << s2;\n  }\n  \n  cout << \"search (\" << t << \")\" << endl;  \n}\n\nvoid searchWords() \n{\n  vector<string> lines, words;\n  vector<int> counts;\n  \n  string filename = \"words.txt\";\n  ifstream file(filename.c_str(), std::ios::in);\n\n  if (!file) {\n    cerr << \"can't open input file \\\"\" << filename << \"\\\"\" << std::endl;\n    exit(EXIT_FAILURE);\n  }\n\n  READING_FILE(filename);\n  while (!file.eof()) {\n    string word;\n    file >> word;\n    words.push_back(word);\n    \n    int count;\n    file >> count;\n    counts.push_back(count);\n  }\n  READING_DONE();\n\n  ofstream log(\"/dev/null\", ios::out | ios::app);\n  Topk::Search s(log);\n  s.updateKwd(words, counts);\n  \n  words.clear();\n  counts.clear();\n  \n  vector<string> result;\n  \n  words.push_back(\"thank\");\n  words.push_back(\"aaa\");\n  words.push_back(\"dsalfjalsjgfkldsh\");\n  \n  s.searchKwd(words, result);\n  \n  cout << \"query: \" << words << endl;\n  cout << \"result: \" << result << endl;;\n}\n\nint main()\n{\n  cout << \"test...\" << endl;\n\n  testTopk();\n  testSearch();\n  // searchWords();\n    \n  cout << \"OK\" << endl;\n}\n", "encoding": "ascii"}