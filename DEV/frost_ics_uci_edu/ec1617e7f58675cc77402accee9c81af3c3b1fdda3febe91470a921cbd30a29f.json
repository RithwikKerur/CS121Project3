{"url": "https://frost.ics.uci.edu/Ucigame/Ucigame-20101216/reference.html", "content": "<html>\r\n<head>\r\n\t<title>Ucigame - Reference - version 2010.12.16a</title>\r\n<link href=\"stylesheet.css\" rel=\"stylesheet\" type=\"text/css\">\r\n</head>\r\n<body>\r\n\r\n<center>\r\n<h2>Ucigame Reference\r\n<br>\r\n2010.12.16a version</h2>\r\n</center>\r\n\r\n<h4>\r\n<a href=\"index.html\">Home</a> |\r\n<a href=\"getting-started.html\">Getting Started</a> |\r\n<a href=\"reference.html\">Reference</a> |\r\n<a href=\"java.html\">Introduction to Java</a> |\r\n<a href=\"gallery.html\">Gallery</a>\r\n</h4>\r\n\r\n\r\n<h4>Running your Ucigame program</h4>\r\n\r\n<p>\r\n</p>\r\n<li>The code in the Ucigame package was compiled with Java\r\nversion 1.5.  You can use Java 1.5 or any later version to\r\ncompile and run your Ucigame game.\r\n</li>\r\n<li>When you compile or run a Ucigame game, ucigame.jar must be in\r\nthe classpath.\r\n</li>\r\n<li>When running a Ucigame game from the Command Prompt, the\r\ngame name must be repeated.  For example:\r\n<blockquote><tt>\r\n\tjava MyGame MyGame\r\n</tt></blockquote>\r\n</li>\r\n\r\n<li>In a Ucigame program E<sc>sc</sc>\r\n(the Escape key) has magic powers.\r\n\t<ul>\r\n\t<li> Pressing E<sc>sc</sc> stops the game (permanently).</li>\r\n\t<li> Pressing Shift-E<sc>sc</sc> (that is, hold down the Shift\r\n\t\tkey while pressing E<sc>sc</sc>) suspends the game.  The\r\n\t\tanimation pauses (but any playing sounds continue).\r\n\t\tPressing Shift-E<sc>sc</sc> again resumes play.\r\n\t<li> When the game is paused with Shift-E<sc>sc</sc>, pressing\r\n\t\tF1 causes draw() to be invoked once.  This is a handy way\r\n\t\tto \"single step\" through your game.\r\n\t</ul>\r\n</li>\r\n\r\n<h4>Different methods are called in different ways</h4>\r\n\r\n<p>\r\nSome Ucigame methods are associated with specific\r\nbuilt-in objects.  They are invoked like this:\r\n<i>objectname.methodname</i>(<var>parameters</var>).\r\nAn example is window.size(200, 300).\r\n</p>\r\n\r\n<p>Some Ucigame methods are associated with classes; to\r\nuse them you must first create an object of that class.\r\nIn this example, the position() method is called using\r\na Sprite object called sprite1:\r\n<blockquote>\r\n\tsprite1 = makeSprite(getImage(\"images/sprite1.png\", 0));<br>\r\n\tsprite1.position(10, 5);\r\n</blockquote>\r\n</p>\r\n\r\n<p>Finally, some Ucigame methods are associated with the\r\nUcigame class itself. Since your game class extends Ucigame,\r\nyou can use these methods without an <i>objectname.</i>\r\nprefix.  An example is the call to makeSprite() above.\r\n</p>\r\n\r\n<h4>Summary of objects and classes</h4>\r\n\r\n<p>\r\nThe <a href=\"#window\"><i>window</i></a> object represents the entire window in\r\nwhich the game is played, and specifically the borders and\r\nframe of the window.\r\nIt has the following methods:\r\nsize(), title(), showFPS(), hideFPS().\r\n</p>\r\n\r\n<p>\r\nThe <a href=\"#canvas\"><i>canvas</i></a> object represents the rectangular\r\ninterior of the window.\r\nIt has the following methods:\r\nwidth(), height(), background(),\r\n<!-- line(), oval(), -->\r\nfont(), and putText().\r\n</p>\r\n\r\n<p>\r\nThe <a href=\"#keyboard\"><i>keyboard</i></a> object represents the\r\ncomputer keyboard.\r\nIt has several methods for finding out the most recently pressed key:\r\nisDown(), lastCharacter(), isBackspace(), key(), shift(), ctrl(), and alt().\r\nThe typematic (auto-repeat) feature can be turned on and off\r\nwith typematicOn() and typematicOff().\r\n</p>\r\n\r\n<p>\r\nThe <a href=\"#mouse\"><i>mouse</i></a> object represents the\r\nmouse and the associated cursor symbol on the monitor.\r\nIt has the following methods:\r\nx(), y(), Xchange(), Ychange(), button(),\r\nisAltDown(), isControlDown(), isMetaDown(), isShiftDown(),\r\nwheelClicks(), sprite(), and setCursor().\r\n</p>\r\n\r\n<p>\r\nEach object in the <a href=\"#Sprite\"><i>Sprite</i></a> class\r\nis a sprite.\r\nTo create new Sprite objects, there are three versions of\r\nmakeSprite(), as well as makeTiledSprite(), and makeButton().\r\nA Sprite object has the following methods:\r\naddFrame(), pin(), framerate(),\r\ndraw(), font(), putText(),\r\nsetTiles(),\r\ndefineSequence(), currSequence(), play(),\r\nrestart(), setToFrame(),\r\nwidth(), height(), hide() show(), isShown(), position(),\r\nmotion(), move(), x(), y(), xPixel(), yPixel(),\r\nnextX(), nextY(), xspeed(), yspeed(),\r\nrotate(), flipHorizontal(), flipVertical(),\r\nbounceIfCollidesWith(), stopIfCollidesWith(),\r\ncheckIfCollidesWith(), pauseIfCollidesWith(), collided().\r\n</p>\r\n\r\n<p>\r\nEach object in the <a href=\"#Image\"><i>Image</i></a> class is\r\na rectangular image.\r\nA Image object has the following methods:\r\ndraw(), width(), height(), and transparent().\r\n</p>\r\n\r\n<p>\r\nEach object in the <a href=\"#Sound\"><i>Sound</i></a> class is\r\na sound or piece of music.\r\nA Sound object has the following methods:\r\nplay(), loop(), and stop().\r\n</p>\r\n\r\n<p>\r\nThe <a href=\"#Ucigame\"><i>Ucigame</i></a> class contains\r\nthe functionality of the other classes and objects.\r\nIt also has several useful methods of its own:\r\nframerate(), actualFPS(), randomSeed(), random(),\r\nrandomInt(), arrayOfAvailableFonts(), isAvailableFont(),\r\nsetIconImage(),\r\nstartScene(), startTimer, and stopTimer().\r\nThere are also Ucigame methods that create objects:\r\ngetImage(), getSound(),\r\nmakeSprite(), makeTiledSprite(), and makeButton().\r\n</p>\r\n\r\n<p>\r\n</p>\r\n\r\n<a name=\"window\"></a>\r\n<h4>The window object</h4>\r\n\r\n<p>\r\nEvery Ucigame has one window object named <tt>window</tt>.\r\nWhen the program is running as an applet in a browser window,\r\nthe window is part of the web page.\r\n</p>\r\n<li>window.size(<var>width</var>, <var>height</var>)\r\n<blockquote>\r\n\tSets the width and height of the window's canvas.\r\n\tThe entire window, including caption bar and borders, will\r\n\tbe slightly larger.\r\n\tValues must be between 50 and 1000, inclusive.\r\n\tIf values are invalid or window.size is not called, the\r\n\twindows width and height are 100.\r\n\tThis method should only be called once, in setup();\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>.\r\n\t<br>\r\n\tApplets: method is ignored.\r\n</blockquote>\r\n</li>\r\n\r\n<li>window.title(<var>titleTextString</var>)\r\n<blockquote>\r\n\tSets the window's title text.  If not called, the\r\n\ttitle text is \"No Title\".  May be called multiple times.\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>.\r\n\t<br>\r\n\tApplets: method is ignored.\r\n</blockquote>\r\n</li>\r\n\r\n<li>window.showFPS()\r\n<blockquote>\r\n\tCauses the current actual rate of frames per second to\r\n\tbe displayed in the title text.\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>.\r\n\t<br>\r\n\tApplets: frames per seconds will display in the browser's\r\n\t\tstatus bar (somewhat browser-dependent).\r\n</blockquote>\r\n</li>\r\n\r\n<li>window.hideFPS()\r\n<blockquote>\r\n\tRemoves the display of current frames per second from the title text.\r\n\t<br>\r\n\tApplets: removes the display from the status bar.\r\n</blockquote>\r\n</li>\r\n\r\n<a name=\"canvas\"></a>\r\n<h4>The canvas object</h4>\r\n\r\n<p>\r\nThe <tt>canvas</tt> object represents the area in the window\r\nwhere the game's images appear.\r\n</p>\r\n\r\n<li><var>w</var> = canvas.width() (returns int)\r\n</li>\r\n<li><var>h</var> = canvas.height() (returns int)\r\n<blockquote>\r\n\tThese methods return the value of the game canvas's width and height.\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>canvas.background(<var>shade</var>)\r\n<blockquote>\r\n\tThis method determines the color of the canvas's background.\r\n\tTo actually set the background to that color, call the\r\n\tcanvas.clear() method inside of draw().\r\n\tThe one parameter version of background() sets the background\r\n\tcolor to a shade of gray.\r\n\tThe varible <var>shade</var> can range from 0 (black)\r\n\tto 128 (gray) to 255 (white).\r\n\tIf <var>shade</var> is less than 0 or greater than 255,\r\n\tthe method call has no effect.\r\n\tThe default background color is white.\r\n\tSee the <a href=\"reference-colors.html\">about color page</a> for\r\n\tmore information about colors in Ucigame and computer graphics.\r\n\tDemo'd in: <a href=\"Gallery/SpinIt.html\">SpinIt</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>canvas.background(<var>red</var>, <var>green</var>, <var>blue</var>)\r\n<blockquote>\r\n\tThe three parameter version background() can set\r\n\tthe background to any color.\r\n\tSee <a href=\"reference-colors.html\">the about color page</a> for\r\n\tmore information about colors in Ucigame and computer graphics.\r\n\tDemo'd in: <a href=\"Gallery/PushMe.html\">PushMe</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>canvas.background(<var>image</var>)\r\n<blockquote>\r\n\tIf background's parameter is a Image, then the background is\r\n\tset to that image, which will be displayed when\r\n\tcanvas.clear() is called in draw().\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>canvas.clear()\r\n<blockquote>\r\n\tClears the canvas by setting all pixels to the specified\r\n\tcolor or to the colors of specified image.\r\n\tTypically canvas.clear() is called at the start of draw().\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>canvas.font(<var>fontNameString</var>, <var>style</var>, <var>size</var>)\r\n<blockquote>\r\n\r\n\tThis method specifies the font to use in subsequent calls\r\n\tto canvas.putText().\r\n\tSee <ax href=\"\">the about fonts page</a>\r\n\t(coming soon!) for more information\r\n\tabout fonts in Ucigame and computer graphics.\r\n\tThe <var>style</var> parameter must be one of the following:\r\n\tPLAIN, BOLD, ITALIC, BOLDITALIC.\r\n\tDemo'd in: <a href=\"Gallery/FontDemo.html\">FontDemo</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>canvas.font(<var>fontNameString</var>, <var>style</var>, <var>size</var>,\r\n\t\t\t\t\t<var>r</var>, <var>g</var>, <var>b</var>)\r\n<blockquote>\r\n\tSimilar to the three parameter version of <tt>font()</tt>, and\r\n\talso sets the font color to the RGB value specified by the\r\n\tlast three parameters.  (These values must all be between 0 and 255, inclusive.)\r\n\tDemo'd in: <a href=\"Gallery/MegaBounce.html\">MegaBounce</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>canvas.putText(<var>text</var>, <var>x</var>, <var>y</var>)\r\n<blockquote>\r\n\tDraws the specified text (which can be a string, such as\r\n\t\"Press Here\" or a number) on the canvas,\r\n\tusing the canvas's current font.\r\n\tThe upper left hand corner of <var>text</var> is\r\n\tlocated <var>x</var> pixels to the right and\r\n\t<var>y</var> pixels below the upper left hand corner of\r\n\tthe canvas.\r\n\tDemo'd in: <a href=\"Gallery/FontDemo.html\">FontDemo</a>.\r\n</blockquote>\r\n</li>\r\n\r\n\r\n<a name=\"keyboard\"></a>\r\n<h4>The keyboard object</h4>\r\n\r\n<p>\r\nEvery Ucigame has one object named <tt>keyboard</tt>; the\r\nobject's methods reveal the most recently pressed key.\r\n</p>\r\n<li><var>keydown</var> = keyboard.isDown(any number of keyboard keys) (returns boolean)\r\n<blockquote>\r\n\tThis method indicates whether any of the specified keyboard\r\n\tkeys is currently down.  The values passed to this method\r\n\tshould each be one of those\r\n\t<a href=\"reference-keyboard.html\">listed here</a>.\r\n\tThis method is usually used inside the game's onKeyPress() method.\r\n\tFor example:\r\n\t<blockquote>\r\n\t<tt>\r\n\tif (keyboard.isDown(keyboard.UP, keyboard.W))<br>\r\n\t&nbsp;&nbsp;paddle.nextY(paddle.y() - 2);\r\n\t</tt></blockquote>\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>keypressed</var> = keyboard.key()  (returns int)\r\n<blockquote>\r\n\tReturns the value of the most recently pressed keyboard key.\r\n\tThe value will be one of those\r\n\t<a href=\"reference-keyboard.html\">listed here</a>.\r\n\tNote that the escape key (Esc) is handled in a special way\r\n\tby Ucigame programs, and thus cannot be detected using keyboard.key().\r\n\tIf Esc is pressed without the Shift key down, the program immediately stops.\r\n\tIf Esc is pressed with Shift, then the program is suspended;\r\n\tif can be restarted with another Shift-Esc combination.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>shiftWasPressed</var> = keyboard.shift() (returns boolean)\r\n<blockquote>\r\n\tReturns <tt>true</tt> if the Shift key was held down when the\r\n\tlast key was pressed; <tt>false</tt> otherwise.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>ctrlWasPressed</var> = keyboard.ctrl() (returns boolean)\r\n<blockquote>\r\n\tReturns <tt>true</tt> if the Ctrl key was held down when the\r\n\tlast key was pressed; <tt>false</tt> otherwise.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>altWasPressed</var> = keyboard.alt() (returns boolean)\r\n<blockquote>\r\n\tReturns <tt>true</tt> if the Alt key was held down when the\r\n\tlast key was pressed; <tt>false</tt> otherwise.\r\n</blockquote>\r\n</li>\r\n\r\n<li>keyboard.typematicOn()\r\n</li>\r\n<li>keyboard.typematicOff()\r\n<blockquote>\r\n\tThese methods turn on and off the typematic (auto-repeat) feature.\r\n\tWhen typematic is on (the default), a key which is held down\r\n\twill cause <tt>onKeyPress()</tt> to be called multiple times.\r\n\tWhen typematic is off, holding a key down is only a single key press.\r\n\tThese methods apply to all keyboard keys.\r\n\tDemo'd in: <a href=\"Gallery/ClickAndClack.html\">ClickAndClack</a> and\r\n\t           <a href=\"Gallery/TypeAway.html\">TypeAway</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>keyboard.typematicOn(any number of keyboard keys)\r\n</li>\r\n<li>keyboard.typematicOff(any number of keyboard keys)\r\n<blockquote>\r\n\tThe values passed to these methods should each be one of those\r\n\t<a href=\"reference-keyboard.html\">listed here</a>.\r\n\tThese methods turn on and off the typematic (auto-repeat) feature\r\n\tfor specific keys, without changing the typemetic status of\r\n\tother keys.\r\n\tDemo'd in: <a href=\"Gallery/TypeAway.html\">TypeAway</a> and\r\n\t           <a href=\"Gallery/BounceHouse.html\">BounceHouse</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>characterPressed</var> = keyboard.lastCharacter()  (returns String)\r\n<blockquote>\r\n\tReturns a String containing the last \"regular\" keyboard character\r\n\tpressed, that is, letters, digits, and punctuation, but not\r\n\tthe function keys and arrow keys.\r\n\tThe returned value is affected by the Shift and Caps Lock keys.\r\n\tOnce this function is called, subsequent calls will return the\r\n\tempty string (\"\") until the user presses another key or the\r\n\toperating system's auto-repeat feature generates another key press.\r\n\tThis method is not affected by keyboard.typematicOn() or\r\n\tkeyboard.typematicOff();\r\n\tThus, in\r\n\t<blockquote><tt>\r\n\tprintln(keyboard.lastCharacter()); <br>\r\n\tprintln(keyboard.lastCharacter());\r\n\t</tt></blockquote>\r\n\tthe second line will print the empty string.\r\n\tDemo'd in: <a href=\"Gallery/TypeAway.html\">TypeAway</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>bkPressed</var> = keyboard.isBackspace(<var>string</var>)  (returns boolean)\r\n<blockquote>\r\n\tReturns <i>true</i> if <var>string</var> is a one character String\r\n\tcontaining a \"backspace\" character.\r\n\tDemo'd in: <a href=\"Gallery/TypeAway.html\">TypeAway</a>.\r\n</blockquote>\r\n</li>\r\n\r\n\r\n<a name=\"mouse\"></a>\r\n<h4>The mouse object</h4>\r\n\r\n<p>\r\nEvery Ucigame has one object named <tt>mouse</tt>; the\r\nobject's methods reveal the location of the mouse and\r\nthe topmost sprite under the mouse.\r\n</p>\r\n\r\n<li><var>xpos</var> = mouse.x()  (returns int)\r\n</li>\r\n<li><var>ypos</var> = mouse.y()  (returns int)\r\n<blockquote>\r\n\tReturns the current x and y position of the mouse,\r\n\trelative to the upper left hand corner of the game\r\n\twindow, which is at position (0, 0).\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>xdelta</var> = mouse.Xchange()  (returns int)\r\n</li>\r\n<li><var>ydelta</var> = mouse.Ychange()  (returns int)\r\n<blockquote>\r\n\tWhen the mouse is being dragged, these methods\r\n\treturn the difference between the current and previous\r\n\tx and y positions of the mouse.\r\n\tDemo'd in: <a href=\"Gallery/MouseTrap.html\">MouseTrap</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>whichButton</var> = mouse.button()  (returns int)\r\n<blockquote>\r\n\tReturns the value of the mouse button involved\r\n\twhen the mouse is pressed, released, moved, or dragged.\r\n\tThe return value will be one of:\r\n\tmouse.NONE, mouse.LEFT, mouse.MIDDLE, mouse.RIGHT.\r\n\tDemo'd in: <a href=\"Gallery/MouseTrap.html\">MouseTrap</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>altDown</var> = mouse.isAltDown()  (returns boolean)\r\n</li>\r\n<li><var>controlDown</var> = mouse.isControlDown()  (returns boolean)\r\n<li><var>metaDown</var> = mouse.isMetaDown()  (returns boolean)\r\n<li><var>shiftDown</var> = mouse.isShiftDown()  (returns boolean)\r\n<blockquote>\r\n\tThese methods return <tt>true</tt> or <tt>false</tt>\r\n\tdepending on the state of the corresponding keyboard key\r\n\twhen the mouse is pressed, released, moved, or dragged.\r\n\tDemo'd in: <a href=\"Gallery/MouseTrap.html\">MouseTrap</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>clicks</var> = mouse.wheelClicks()  (returns int)\r\n<blockquote>\r\n\tReturns the number of clicks as of the last time the\r\n\twheel (a special kind of middle mouse button) was rotated.\r\n\tA negative value means the mouse wheel was rotated up/away\r\n\tfrom the user, and a positive value means the mouse wheel\r\n\twas rotated down/towards the user.  The value is usually\r\n\t-1 or 1.\r\n\tDemo'd in: <a href=\"Gallery/MouseTrap.html\">MouseTrap</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite</var> = mouse.sprite()  (returns Sprite)\r\n<blockquote>\r\n\tReturns the topmost Sprite object under the current\r\n\tmouse position.  The return value will be <tt>null</tt>\r\n\tif the mouse position is not over a sprite.\r\n\tThe value returned from mouse.sprite() can be\r\n\tcompared with sprite objects using <tt>==</tt>.\r\n\tExample code:\r\n\t<blockquote<tt>\r\n\tSprite thing1, thing2, thing3;\t\t<br>\r\n\t...\t\t\t\t\t\t\t\t\t<br>\r\n\tvoid onMousePressed()\t\t\t\t<br>\r\n\t{\t\t\t\t\t\t\t\t\t<br>\r\n\t&nbsp;\tif (mouse.sprite() == thing1)\t<br>\r\n\t&nbsp;&nbsp;\t\t// do something\t\t\t\t<br>\r\n\t&nbsp;\tif (mouse.sprite() == null)\t\t<br>\r\n\t&nbsp;&nbsp;\t\t// do something\telse\t\t<br>\r\n\t}\t\t\t\t\t\t\t\t\t<br>\r\n\t</tt></blockquote>\r\n\tDemo'd in: <a href=\"Gallery/ClickAndClack.html\">ClickAndClack</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>mouse.setCursor(<var>cursorType</var>)\r\n<blockquote>\r\n\tChanges the cursor to one of the standard system cursors.\r\n\tLegal values for <var>cursorType</var> are:\r\n\tmouse.CROSSHAIR, mouse.DEFAULT, mouse.HAND, mouse.MOVE,\r\n\tmouse.TEXT, mouse.WAIT,\r\n\tmouse.N_RESIZE, mouse.NE_RESIZE, mouse.E_RESIZE,\r\n\tmouse.SE_RESIZE, mouse.S_RESIZE, mouse.SW_RESIZE,\r\n\tmouse.W_RESIZE, mouse.NW_RESIZE.\r\n\tDemo'd in: <a href=\"Gallery/FoiledAgain.html\">FoiledAgain</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>mouse.setCursor(<var>image</var>, <var>xPos</var>, <var>yPos</var>)\r\n<blockquote>\r\n\tChanges the cursor to the image supplied.\r\n\tThe size of the cursor is determined by the operating system,\r\n\tand the image will be scaled if necessary.\r\n\tIn practice 32 pixels by 32 pixels works well.\r\n\tThe <var>xPos</var> and <var>yPos</var> values indicate the position\r\n\tof the cursor's \"hot spot,\" relative to the upper left hand\r\n\tcorner of the image.\r\n\tDemo'd in: <a href=\"Gallery/FoiledAgain.html\">FoiledAgain</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<a name=\"Sprite\"></a>\r\n<h4>The Sprite class</h4>\r\n\r\n<p>\r\nA sprite is an image that can be moved around in the game window.\r\nUcigame uses many kinds of sprites: they can be stationary;\r\nthey can cycle between multiple images, and they can act like\r\nbuttons and be sensitive to mouse clicks.\r\nSprites can have text written on them, and multiple sprites can\r\nbe \"pinned\" together so that when one moves the others follow.\r\n</p>\r\n\r\n<p>\r\nThere are several ways to control the movement of a sprite, and\r\nthe flexibility can be confusing.  Each Sprite object holds some\r\nposition and movement related information:\r\n<ul>\r\n<li>Its current position: <i>currentX</i> and <i>currentY</i>\r\n<li>Its movement: <i>moveX</i> and <i>moveY</i>\r\n<li>Its next position: <i>nextX</i> and <i>nextY</i>\r\n</ul>\r\n</p>\r\n<p>\r\nNote that <i>currentX</i>, <i>currentY</i>, <i>nextX</i>, and <i>nextY</i>\r\nall refer to the sprite's upper left hand corner.\r\nThe main reason for keeping track of current and next positions\r\nis to facilitate the built-in collision detection.\r\nHere is how various Sprite methods use and update this information:\r\n<ul>\r\n<li>position(<var>x</var>, <var>y</var>):\r\n\t<i>currentX</i> &larr; <var>x</var> &nbsp;&nbsp;\r\n\t<i>currentY</i> &larr; <var>y</var>&nbsp;&nbsp;\r\n\t<i>nextX</i> &larr; <var>x</var>&nbsp;&nbsp;\r\n\t<i>nextY</i> &larr; <var>y</var>&nbsp;&nbsp; (warning: messes up collision detection)\r\n<li> motion(<var>xchange</var>, <var>ychange</var>):\r\n\t<i>moveX</i> &larr; <var>xchange</var> &nbsp;&nbsp;\r\n\t<i>moveY</i> &larr; <var>ychange</var>&nbsp;&nbsp;\r\n<li>move():\r\n\t<i>nextX</i> &larr; <i>currentX</i> + <i>moveX</i>&nbsp;&nbsp;\r\n\t<i>nextY</i> &larr; <i>currentY</i> + <i>moveY</i>&nbsp;&nbsp;\r\n<li>draw():\r\n\t<i>currentX</i> &larr; <i>nextX</i> &nbsp;&nbsp;\r\n\t<i>currentY</i> &larr; <i>nextY</i>&nbsp;&nbsp;\r\n\t(and then sprite is drawn at (<i>currentX, currentY</i>))\r\n<li> nextX(<var>xvalue</var>):\r\n\t<i>nextX</i> &larr; <var>xvalue</var>&nbsp;&nbsp;\r\n\t<i>moveX</i> &larr; 0 &nbsp;&nbsp;\r\n<li> nextY(<var>yvalue</var>):\r\n\t<i>nextY</i> &larr; <var>yvalue</var>&nbsp;&nbsp;\r\n\t<i>moveY</i> &larr; 0 &nbsp;&nbsp;\r\n<li>x() returns <i>currentX</i>\r\n<li>y() returns <i>currentY</i>\r\n<li>xPixel() returns <i>currentX</i> rounded to the closest integer\r\n<li>yPixel() returns <i>currentY</i> rounded to the closest integer\r\n<li>xspeed() returns <i>moveX</i>\r\n<li>yspeed() returns <i>moveY</i>\r\n<li>xxxIfCollidesWith(): detects a collision as sprites move from\r\n\t(<i>currentX, currentY</i>) to (<i>nextX, nextY</i>).\r\n</ul>\r\n</p>\r\n\r\n\r\n<p>\r\nIn Ucigame sprites are objects in the Sprite class.\r\nIn the following, we assume that a reference to a Sprite\r\ncalled <var>sprite1</var> has been defined:\r\n<blockquote>\r\n\tSprite <var>sprite1</var>;\r\n</blockquote>\r\n</p>\r\n\r\n<li><var>sprite1</var> = makeSprite(<var>image</var>)\r\n<blockquote>\r\n\tThis makeSprite method takes an already loaded Image object,\r\n\tand creates a Sprite with the same width and height as the\r\n\timage.  Usually used for creating sprites with a single image.\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var> = makeSprite(<var>image</var>,\r\n\t\t\t\t\t\t<var>width</var>, <var>height</var>)\r\n<blockquote>\r\n\tThis makeSprite method takes an already loaded Image object,\r\n\tand creates a Sprite with the specified width and height.\r\n\tIf <var>width</var> is larger than <var>image</var>'s width,\r\n\tand/or <var>height</var> is larger than <var>image</var>'s height,\r\n\tthen the <var>image</var> will be tiled to cover the complete sprite.\r\n\tDemo'd in: <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var> = makeSprite(<var>width</var>, <var>height</var>)\r\n<blockquote>\r\n\tThis makeSprite method creates a sprite with the specified width\r\n\tand height, but with no image(s).  Usually used when multiple\r\n\timages will be added later with addFrame() or addFrames().\r\n\tDemo'd in: <a href=\"Gallery/TimeTrial.html\">TimeTrial</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var> = makeTiledSprite(<var>numCols</var>,\r\n\t\t<var>numRows</var>, <var>tileWidth</var>, <var>tileHeight</var>)\r\n<blockquote>\r\n\tUse makeTiledSprite() to create a sprite which is a matrix\r\n\tof tiles.  Each tile has the specified width and height.\r\n\tThe matrix can have any positive number of columns and rows.\r\n\tThe matrix entries are filled in with <tt>setTiles()</tt>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>Constructors\r\n<blockquote>\r\n\tThe Sprite class has four constructors, which correspond to\r\n\tthe three <tt>makeSprite()</tt> methods and the\r\n\t<tt>makeTiledSprite()</tt> method described above:\r\n\t<ul>\r\n\t<li>Sprite(<var>image</var>)\r\n\t\t\tDemo'd in: <a href=\"Gallery/MegaBounce.html\">MegaBounce</a>\r\n\t\t\tvia a call to <tt>super()</tt> in a subclass.\r\n\t<li>Sprite(<var>image</var>, <var>width</var>, <var>height</var>)\r\n\t<li>Sprite(<var>width</var>, <var>height</var>)\r\n\t<li>Sprite(<var>numCols</var>,\r\n\t\t<var>numRows</var>, <var>tileWidth</var>, <var>tileHeight</var>)\r\n\t</ul>\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.addFrame(<var>image</var>,\r\n\t\t\t\t\t\t<var>x</var>, <var>y</var>)\r\n<blockquote>\r\n\tA sprite can have multiple frames, or images, assigned to\r\n\tit with addFrame().\r\n\tEach time the sprite is displayed on the canvas with draw(), it will\r\n\tautomatically cycle to the next frame.\r\n\t<var>image</var> is an already loaded Image object.\r\n\tThe <var>x</var> and <var>y</var> parameters specify the\r\n\tupper left hand corner of a rectangle in the image that\r\n\twill be <var>sprite1</var>'s next frame.  The width and height\r\n\tof that rectangle are same as <var>sprite1</var>'s width and height.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.addFrames(<var>image</var>,\r\n\t\t\t\t\tany number of <var>x</var>, <var>y</var> pairs)\r\n<blockquote>\r\n\tThis method is a variant of addFrame() which allows multiple\r\n\tframes from one Image object\r\n\tto be added to <var>sprite1</var> with one method call.\r\n\tFor instance, three frames might be added with\r\n\t<blockquote>\r\n\t\t<var>sprite1</var>.addFrames(<var>image</var>, 10, 20,\r\n\t\t\t\t\t\t85, 100, 8, 52, 55, 0);\r\n\t</blockquote>\r\n\tDemo'd in: <a href=\"Gallery/TimeTrial.html\">TimeTrial</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.setTiles(<var>image</var>,\r\n\t\t<var>x</var>, <var>y</var>,\r\n\t\tany number of <var>col</var>, <var>row</var> pairs)\r\n<blockquote>\r\n\tThis method can only be used if <var>sprite1</var> was\r\n\tcreated with <tt>makeTiledSprite</tt>.\r\n\tThe method takes a frame from <var>image</var>\r\n\t(with an upper left hand corner as specified by <var>x</var> and <var>y</var>\r\n\tand with width and height as specified in <tt>makeTiledSprite()</tt>),\r\n\tand puts that frame into one or more of <var>sprite1</var>'s tiles\r\n\tas specified by the <var>col</var> and <var>row</var> pairs.\r\n\tNote that counting columns and rows starts from zero, and that\r\n\tposition (0, 0) is in the matrix's upper left hand corner.\r\n\tHere is an example, which references a 50 pixel by 50 pixel\r\n\timage called <tt>colorblocks.png</tt>.\r\n\t<img width=\"50\" height=\"50\" src=\"reference-image1.png\">\r\n\t<blockquote><tt>\r\n\t\tImage cb = getImage(\"colorblocks.png\"); <br>\r\n\t\tSprite bkg = makeTiledSprite(4, 3, 25, 25); <br>\r\n\t\tbkg.setTiles(cb, 0, 0, /* red */<br>\r\n\t\t&nbsp;&nbsp;&nbsp;&nbsp;0,0, 1,0, 2,0, 3,0); <br>\r\n\t\tbkg.setTiles(cb, 25, 0, /* blue */<br>\r\n\t\t&nbsp;&nbsp;&nbsp;&nbsp;0,1, 1,1); <br>\r\n\t\tbkg.setTiles(cb, 25, 25, /* black */<br>\r\n\t\t&nbsp;&nbsp;&nbsp;&nbsp;0,2, 1,2, 2,2, 3,2); <br>\r\n\t\tbkg.setTiles(cb, 0, 25,, /* green */<br>\r\n\t\t&nbsp;&nbsp;&nbsp;&nbsp;3,1); <br>\r\n\t</tt></blockquote>\r\n\tThe resulting <var>bkg</var> will look like this:\r\n\t<img width=\"100\" height=\"75\" src=\"reference-image2.png\">\r\n\tNote that the tile at column 2, row 1 was not set to an image.\r\n\tOn this web page it appears white; in a game it would be transparent.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.pin(<var>sprite2</var>, <var>x</var>, <var>y</var>)\r\n<blockquote>\r\n\tPins <var>sprite2</var> on top of <var>sprite1</var>, which\r\n\tmeans that <var>sprite2</var> will be drawn whenever\r\n\t<var>sprite1</var>.draw() is performed.\r\n\tThe upper left hand corner of <var>sprite2</var> is\r\n\tlocated <var>x</var> pixels to the right and\r\n\t<var>y</var> pixels below the upper left hand corner of\r\n\t<var>sprite1</var>;\r\n\tthus <var>sprite2</var> moves when <var>sprite1</var> is moved.\r\n\tAny number of other sprites can be pinned to a sprite.\r\n\tA sprite cannot be pinned to itself.\r\n\tIf a sprite is hidden, all sprites pinned to it are hidden.\r\n\tA sprite can be pinned to multiple sprites; thus\r\n\t<tt>sprite1.pin(sprite9, 10, 10);\r\n\t    sprite2.pin(sprite9, 50, 60);\r\n\t    sprite3.pin(sprite9, 20, 70);</tt> is legal.\r\n\tIf <var>sprite2</var> is pinned to <var>sprite1</var> more than\r\n\tonce, the second call to pin() effectively \"re-pins\" <var>sprite2</var>\r\n\tto a new location.  Thus\r\n\t<tt>sprite1.pin(sprite2, 10, 10);\r\n\t    sprite1.pin(sprite2, 50, 60);\r\n\t</tt> is legal, but <var>sprite2</var> will only appear once, offset\r\n\t(50, 60) from <var>sprite1</var>.\r\n\tDemo'd in: <a href=\"Gallery/BounceHouse.html\">BounceHouse</a>,\r\n\t           <a href=\"Gallery/SpinIt.html\">SpinIt</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.framerate(<var>number</var>)\r\n<blockquote>\r\n\tSets a framerate for this sprite; Ucigame will try to\r\n\tchange the sprite's current frame <var>number</var> times per second, although\r\n\tthere is no guarantee that it will be successful.\r\n\tThis method has no effect if <var>number</var> is negative\r\n\tor greater than the framerate specified for the entire game.\r\n\tDemo'd in: <a href=\"Gallery/TimeTrial.html\">TimeTrial</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.draw()\r\n<blockquote>\r\n\tCauses the sprite, and any other sprites pinned to this sprite,\r\n\tto be drawn on the canvas, unless the sprite is hidden.\r\n\tCan only be called inside the game class's draw() method.\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.show()\r\n<blockquote>\r\n\tMakes <var>sprite1</var> not hidden; that is, normally visible.\r\n\tDemo'd in: <a href=\"Gallery/BounceHouse.html\">BounceHouse</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.hide()\r\n<blockquote>\r\n\tMakes <var>sprite1</var> hidden, which means that it (and\r\n\tany sprites pinned to it) will not display when\r\n\t<var>sprite1</var>.draw() is invoked.\r\n\tDemo'd in: <a href=\"Gallery/BounceHouse.html\">BounceHouse</a>,\r\n\t           <a href=\"Gallery/LunchTimer.html\">LunchTimer</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.position(<var>x</var>, <var>y</var>)\r\n<blockquote>\r\n\tMoves the sprite so that its upper left hand corner is\r\n\tat the specified position, relative to the upper left hand\r\n\tcorner of the canvas.\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.motion(<var>xchange</var>, <var>ychange</var>)\r\n<blockquote>\r\n\tSets the x and y motion amounts (<i>moveX</i> and <i>moveY</i>)\r\n\tfor this sprite. See move().\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.motion(<var>xchange</var>, <var>ychange</var>, SET)\r\n<blockquote>\r\n\tSets the x and y motion amount for this sprite.\r\n\tNote that positive values represent rightwards and downwards motion;\r\n\tnegative values represent leftwards and upwards motion.\r\n\t(Same as the two parameter version of motion()).\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.motion(<var>xchange</var>, <var>ychange</var>, MULTIPLY)\r\n<blockquote>\r\n\tMultiplies the sprite's x and y motion amounts by the specified\r\n\tamounts.  For instance,\r\n\tif a sprite's x motion and y motion amounts are both 10, after\r\n\tmotion(0.5, 3.2, MULTIPLY) is called the x motion amount will be\r\n\t5.0, and the y motion amount will be 32.0.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.motion(<var>xchange</var>, <var>ychange</var>, ADD)\r\n<blockquote>\r\n\tIncrements the sprite's x and y motion amounts by the specified\r\n\tamounts.  For instance,\r\n\tif a sprite's x motion and y motion amounts are both 10, after\r\n\tmotion(0.5, 3.2, ADD) is called the x motion amount will be\r\n\t10.5, and the y motion amount will be 13.2.\r\n\tDemo'd in: <a href=\"Gallery/BounceHouse.html\">BounceHouse</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.motion(<var>xchange</var>, <var>ychange</var>, ADDONCE)\r\n<blockquote>\r\n\tIncrements, for the next call of <var>sprite1</var>.move() only,\r\n\tthe sprite's x and y motion amounts by the specified\r\n\tamounts.  For instance,\r\n\tif a sprite's x motion and y motion amounts are both 10, after\r\n\tmotion(0.5, 3.2, ADDONCE) is called the x motion amount will be\r\n\t10.5, and the y motion amount will be 13.2 for the next\r\n\t<var>sprite1</var>.move(); afterwards the motion amounts will\r\n\trevert to 10 and 10.\r\n\tDemo'd in: <a href=\"Gallery/MouseTrap.html\">MouseTrap</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.move()\r\n<blockquote>\r\n\tMoves the sprite by its x and y motion amounts.\r\n\tTypically this method is called once for every moving sprite,\r\n\tbefore collision detection.\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>x</var> = <var>sprite1</var>.x()  (returns double)\r\n</li>\r\n<li><var>y</var> = <var>sprite1</var>.y()  (returns double)\r\n</li>\r\n<li><var>x</var> = <var>sprite1</var>.xPixel()  (returns int)\r\n</li>\r\n<li><var>y</var> = <var>sprite1</var>.yPixel()  (returns int)\r\n<blockquote>\r\n\tThese methods return the <i>x</i> and <i>y</i> values\r\n\tof the sprite's upper left hand corner (relative to the\r\n\tupper left hand corner of the canvas).\r\n\tPixel versions return a value rounded to the nearest integer;\r\n\tsometimes useful since pixel locations are always integers.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.nextX(<var>xvalue</var>)\r\n<li><var>sprite1</var>.nextY(<var>yvalue</var>)\r\n<blockquote>\r\n\tSets the sprite's next x and y positions (relative to the upper\r\n\tleft hand corner of the canvas).\r\n\tThese methods are usually used instead of motion() and move(),\r\n\tbut like move() they\r\n\tare called before collision detection and before draw().\r\n\tCalling these method sets the sprite's x and y motion amounts to 0.\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>,\r\n\t           <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.rotate(<var>angle</var>)\r\n<blockquote>\r\n\tRotates the sprite clockwise by the number of\r\n\tdegrees specified.\r\n\tThe center of rotation is the center of the sprite.\r\n\tAny sprites pinned to <var>sprite1</var> are also rotated\r\n\taround the same center of rotation.\r\n\tNote that rotation occurs immediately before\r\n\t<var>sprite1</var>.draw() is executed, no matter when\r\n\tthe call to rotate() is made (as long as rotate() is\r\n\tcalled before draw()).  This means that rotation does\r\n\tnot affect collision detection; collision detection\r\n\tis computed on the unrotated sprite.\r\n\t(Defined as a feature, but could well be considered a bug.)\r\n\tAfter draw() is called on a sprite any rotation is\r\n\tremoved; thus if a sprite should be rotated in every\r\n\tframe rotate() must be called before every draw().\r\n\tDemo'd in: <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>,\r\n\t           <a href=\"Gallery/SpinIt.html\">SpinIt</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.rotate(<var>angle</var>, <var>x</var>, <var>y</var>)\r\n<blockquote>\r\n\tSame as the one parameter version of rotate(), except that\r\n\tthe center of rotation is <var>x</var> pixels to the right\r\n\tand <var>y</var> pixels down from the upper left hand corner\r\n\tof the sprite.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.flipHorizontal()\r\n</li>\r\n<li><var>sprite1</var>.flipVertical()\r\n<blockquote>\r\n\tThese methods flip the sprite around its center.\r\n\tflipHorizontal() flips the sprite around a vertical line running\r\n\tthrough the center of the sprite.\r\n\tflipVertical() flips the sprite around a horizontal line running\r\n\tthrough the center of the sprite.\r\n\tAfter either method is called on a sprite any flipping is\r\n\tremoved; thus if a sprite should be flipped in every\r\n\tframe flipHorizontal() and/or flipVertical() must be called before every draw().\r\n\tDemo'd in: <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.defineSequence(<var>sequenceName</var>,\r\n                          one or more frame indices)\r\n<blockquote>\r\n\tFor an animated sprite, defines a sequence of one or more\r\n\tanimation frames, which can later be cycled through while\r\n\tthe sprite is displayed.\r\n\tThe <var>sequenceName</var> cannot be \"All\" as the name\r\n\t\"All\" is reserved to refer to the sequence of all frames\r\n\tin the order they were specified with addFrame() or addFrames().\r\n\tThe indices specify the frames in the sequence.\r\n\tA frame's index is based on the order it was added to the\r\n\tsprite with addFrame() or addFrames(); the first frame has index 0.\r\n\tA frame index may be repeated in the list of frame indices.\r\n\tDemo'd in: <a href=\"Gallery/Arrownaut.html\">Arrownaut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sequenceName</var> = <var>sprite1</var>.currSequence()   (returns String)\r\n<blockquote>\r\n\tReturns the name of the sprite's current sequence.\r\n\tIf no squence has been specified (with play()), the\r\n\tthe name of the default sequence \"All\" is returned.\r\n\tDemo'd in: <a href=\"Gallery/Arrownaut.html\">Arrownaut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.play(<var>sequenceName</var>) </li>\r\n<li><var>sprite1</var>.play(<var>sequenceName</var>, ONCE)\r\n<blockquote>\r\n\tSets the sprite's animation sequence to the series of frames\r\n\tindicated by <var>sequenceName</var>.\r\n\tIf <var>sequenceName</var> is different than the sprite's current\r\n\tsequence, then the newly specified sequence of frames is started.\r\n\tCalling play() with <var>sequenceName</var> equal to the current\r\n\tsequence does not restart the animation loop at the first frame;\r\n\tuse restart() to achieve that.\r\n\tIf the ONCE option is used, then the specified sequence is played\r\n\tthrough once, and when it is complete the sprite shows the last\r\n\tframe in the sequence.  If ONCE is not used, then the sprite cycles\r\n\tfrom the last frame in the sequence back to the first one.\r\n\tDemo'd in: <a href=\"Gallery/Arrownaut.html\">Arrownaut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.play(<var>sequenceNameOnce</var>, <var>sequenceNameLoop</var>) </li>\r\n<li><var>sprite1</var>.play(<var>sequenceNameOnce</var>, <var>sequenceNameLoop</var>, ONCE)\r\n<blockquote>\r\n\tThese convenience methods are the same as\r\n\t<blockquote><tt>\r\n\t\t<var>sprite1</var>.play(<var>sequenceNameOnce</var>, 1, <var>sequenceNameLoop</var>)\r\n\t</tt></blockquote>\r\n\tor\r\n\t<blockquote><tt>\r\n\t\t<var>sprite1</var>.play(<var>sequenceNameOnce</var>, 1, <var>sequenceNameLoop</var>, ONCE)\r\n\t</tt></blockquote>\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.play(<var>sequenceNameRepeat</var>, <var>times</var>, <var>sequenceNameLoop</var>) </li>\r\n<li><var>sprite1</var>.play(<var>sequenceNameRepeat</var>, <var>times</var>, <var>sequenceNameLoop</var>, ONCE)\r\n<blockquote>\r\n\tSets the sprite's animation sequence to the series of frames\r\n\tindicated by <var>sequenceNameRepeat</var>, and plays that\r\n\tsequence <var>times</var> times.\r\n\tThe sprite then switches to the <var>sequenceNameLoop</var>\r\n\tsequence.\r\n\tIf the ONCE option is used, <var>sequenceNameLoop</var> is played\r\n\tthrough once, and when it is complete the sprite shows the last\r\n\tframe in that sequence.  If ONCE is not used, then the sprite cycles\r\n\tfrom the last frame in that sequence back to the first one.\r\n\tDemo'd in: <a href=\"Gallery/Arrownaut.html\">Arrownaut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.setToFrame(<var>frameNumber</var>)\r\n<blockquote>\r\n\tFor an animated sprite, sets the next frame to display\r\n\t(when <var>sprite1</var>.draw() is next called)\r\n\tto the specified frame in the current sequence.\r\n\tNote that the first frame is numbered 0, and for\r\n\ta sequence with <i>n</i> frames the last frame is <i>n-1</i>.\r\n\tThis method has no effect when <var>sprite1</var> is a\r\n\tbutton, or when <var>frameNumber</var> is less than 0 or\r\n\tgreater than the highest frame number.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.restart()\r\n<blockquote>\r\n\tSame as <var>sprite1</var>.setToFrame(0).\r\n\tDemo'd in: <a href=\"Gallery/Arrownaut.html\">Arrownaut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>w</var> = <var>sprite1</var>.width()  (returns int)\r\n</li>\r\n<li><var>h</var> = <var>sprite1</var>.height()  (returns int)\r\n<blockquote>\r\n\tThese methods return the sprite's width and height.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>xspeed</var> = <var>sprite1</var>.xspeed() (returns double)\r\n</li>\r\n<li><var>yspeed</var> = <var>sprite1</var>.yspeed() (returns double)\r\n<blockquote>\r\n\tThese methods return the sprite's current x change and y change\r\n\tamounts.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.bounceIfCollidesWith(any number of <var>sprite</var>s)\r\n</li>\r\n<li><var>sprite1</var>.bounceIfCollidesWith(any number of <var>sprite</var>s, PIXELPERFECT)\r\n<blockquote>\r\n\tThis methods tests whether <var>sprite1</var> overlaps with\r\n\tone or more other <var>sprite</var> objects listed as parameters.\r\n\tThe built-in non-moving off-screen sprites TOPEDGE, BOTTOMEDGE,\r\n\tLEFTEDGE, and RIGHTEDGE can also be used as parameters.\r\n\tSpecifically, the sprites' next x and y positions are compared, not\r\n\tthe current ones.\r\n\tIf more than one sprite is specified in the parameter list, the\r\n\tmethod stops checking after the first overlap is detected.\r\n\tNote that if PIXELPERFECT is not specified as the final argument,\r\n\tall overlaps and collisions in these methods and the other\r\n\txxxIfCollidesWith() methods are based on the entire rectangular sprite,\r\n\tand not on the possibly smaller visible (non-transparent) figure within\r\n\tthe image.\r\n\tIf the PIXELPERFECT option is used, then a collision requires the\r\n\toverlap of the two sprites' visible (non-transparent) areas.\r\n\tIf there is an overlap,\r\n\tUcigame changes the position and speed of <var>sprite1</var> so\r\n\tthat it \"bounces.\"\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.stopIfCollidesWith(any number of <var>sprite</var>s)\r\n</li>\r\n<li><var>sprite1</var>.stopIfCollidesWith(any number of <var>sprite</var>s, PIXELPERFECT)\r\n<blockquote>\r\n\tSimilar to the bounceIfCollidesWith() method, except that\r\n\t<var>sprite1</var> stops instead of bouncing.\r\n\tStopping means that <var>sprite1</var> moves as far as possible\r\n\twithout overlapping another sprite, and then its x and y motion\r\n\tamounts are set to 0.\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.pauseIfCollidesWith(any number of <var>sprite</var>s)\r\n</li>\r\n<li><var>sprite1</var>.pauseIfCollidesWith(any number of <var>sprite</var>s, PIXELPERFECT)\r\n<blockquote>\r\n\tSimilar to the stopIfCollidesWith() method, except that\r\n\t<var>sprite1</var> pauses instead of stopping.\r\n\tPausing means that <var>sprite1</var> moves as far as possible\r\n\twithout overlapping <var>sprite2</var>, and its x and y motion\r\n\tamounts are unchanged.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.checkIfCollidesWith(any number of <var>sprite</var>s)\r\n</li>\r\n<li><var>sprite1</var>.checkIfCollidesWith(any number of <var>sprite</var>s, PIXELPERFECT)\r\n<blockquote>\r\n\tLike the other xxxIfCollidesWith() methods, this method tests whether\r\n\t<var>sprite1</var> and another sprite will overlap in the next x and y positions.\r\n\tHowever, this method doesn't change the position or motion of\r\n\teither sprite.  The programmer can then test whether an overlap\r\n\toccurred with collided() and code the desired behavior.\r\n\tDemo'd in: <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>collision</var> = <var>sprite1</var>.collided() <i>returns boolean</i>\r\n<blockquote>\r\n\tThis method returns a boolean value of <i>true</i> or <i>false</i>,\r\n\tdepending on whether a collision was detected in the immediately\r\n\tpreceeding xxxIfCollidesWith() call.  Use this no-argument version\r\n\tif the xxxIfCollidedWith call specified PIXELPERFECT.\r\n\tDemo'd in: <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>collision</var> = <var>sprite1</var>.collided(any combination of TOP, BOTTOM, LEFT, RIGHT) <i>returns boolean</i>\r\n<blockquote>\r\n\tThis method returns a boolean value of <i>true</i> or <i>false</i>,\r\n\tdepending on whether a collision was detected in the immediately\r\n\tpreceeding xxxIfCollidesWith() call on the specified side or sides\r\n\tof <var>sprite1</var>.  TOP, BOTTOM, LEFT, and RIGHT\r\n\trefer to the sides of <var>sprite1</var>. One or more of the four\r\n\tvariables can be used in the method call.  For example:\r\n\t<tt>\r\n\t\t<br>&nbsp;&nbsp; ball.bounceIfCollidesWith(paddle);\r\n\t\t<br>&nbsp;&nbsp; if (ball.collided(LEFT))\r\n\t\t<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \tprintln(\"Left\");\r\n\t\t<br>&nbsp;&nbsp; if (ball.collided(TOP, BOTTOM))\r\n\t\t<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \tprintln(\"Top or Bottom\");\r\n\t</tt>\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.font(<var>fontNameString</var>, <var>style</var>, <var>size</var>)\r\n<blockquote>\r\n\tThis method specifies the font to use in subsequent calls\r\n\tto <var>sprite1</var>.putText().\r\n\tSee <ax href=\"\">the about fonts page</a>\r\n\t(coming soon!) for more information\r\n\tabout fonts in Ucigame and computer graphics.\r\n\tThe <var>style</var> parameter must be one of the following:\r\n\tPLAIN, BOLD, ITALIC, BOLDITALIC.\r\n\tDemo'd in: <a href=\"Gallery/PushMe.html\">PushMe</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.font(<var>fontNameString</var>, <var>style</var>, <var>size</var>,\r\n\t\t\t\t\t<var>r</var>, <var>g</var>, <var>b</var>)\r\n<blockquote>\r\n\tSimilar to the three parameter version of <tt>font()</tt>, and\r\n\talso sets the font color to the RGB value specified by the\r\n\tlast three parameters.  (These values must all be between 0 and 255, inclusive.)\r\n\tDemo'd in: <a href=\"Gallery/MegaBounce.html\">MegaBounce</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sprite1</var>.putText(<var>text</var>, <var>x</var>, <var>y</var>)\r\n<blockquote>\r\n\tDraws the specified text (which can be a string, such as\r\n\t\"Press Here\" or an int) on <var>sprite1</var>,\r\n\tusing the sprite's current font (and font color, if specified).\r\n\tThe lower left hand corner of <var>text</var> is\r\n\tlocated <var>x</var> pixels to the right and\r\n\t<var>y</var> pixels below the upper left hand corner of\r\n\t<var>sprite1</var>.\r\n\tAny part of <var>text</var> that lies outside the sprite\r\n\tis clipped (not displayed).\r\n\tDemo'd in: <a href=\"Gallery/PushMe.html\">PushMe</a>.\r\n</blockquote>\r\n</li>\r\n\r\n\r\n<h4>Sprites which are buttons</h4>\r\n<p>\r\nButtons in Ucigame are made from Sprites created with the makeButton()\r\nmethod.  A button has the following properties:\r\n</p>\r\n<ol>\r\n<li>It changes slightly when the mouse moves over it.\r\n<li>It changes again when the mouse button is pressed on it.\r\n<li>When the mouse is pressed down and released over the button,\r\n\tUcigame calls a specified method.\r\n</ol>\r\n\r\n<li><var>sprite1</var> = makeButton(<var>nameString</var>, <var>image</var>,\r\n\t\t\t\t\t\t<var>width</var>, <var>height</var>)\r\n\r\n<blockquote>\r\n\tThe makeButton method takes an already loaded Image object,\r\n\tand creates a button Sprite with the specified name.\r\n\tA button can be composed of one or three images, all of\r\n\twhich are in the <var>image</var> object.\r\n\tIf three images are supplied, then the first is the \"at rest\"\r\n\tappearance of the button, the second is the \"mouse over\" image,\r\n\tand the third is the \"mouse down\" image.\r\n\tThe <var>image</var> can have one of three shapes:\r\n\t<ol>\r\n\t<li>width = <var>width</var> and height = <var>height</var>, in\r\n\t\twhich case <var>image</var> contains one image;\r\n\t<li>width = <var>width</var> * 3 and height = <var>height</var>,\r\n\t\tin which case <var>image</var> contains three images;\r\n\t<li>width = <var>width</var> and height = <var>height</var> * 3,\r\n\t\tin which case <var>image</var> contains three images;\r\n\t</ol>\r\n\r\n\tWhen the player clicks on the button, Ucigame calls a method\r\n\tcalled onClick<var>nameString</var>().  For instance, if\r\n\t<var>nameString</var>&nbsp;=&nbsp;\"Start\" then the method called is\r\n\tonClickStart().\r\n\tDemo'd in: <a href=\"Gallery/PushMe.html\">PushMe</a>.\r\n</blockquote>\r\n</li>\r\n\r\n\r\n<a name=\"Image\"></a>\r\n<h4>The Image class</h4>\r\n\r\n<p>\r\nAn image is a rectangular array of pixels that is read in\r\nfrom the disk.\r\nOne color from the disk image can be designated as transparent,\r\nwhich means that pixels of that color in the image will not\r\nappear on the canvas.\r\n</p>\r\n<p>\r\n\tIn Ucigame images are objects in the Image class.\r\n\tIn the following, we assume that a reference to a Image\r\n\tcalled <var>image1</var> has been defined:\r\n<blockquote>\r\n\tImage <var>image1</var>;\r\n</blockquote>\r\n</p>\r\n\r\n<li><var>image1</var> = getImage(<var>filenameString</var>)\r\n<blockquote>\r\n\tThis method reads in the specified image file from disk.\r\n\tThe file can be in GIF, JPEG, or PNG format.\r\n\tSince this version of getImage() does not specify a\r\n\ttransparent pixel color, no pixels will be transparent.\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>image1</var> = getImage(<var>filenameString</var>, <var>shade</var>)\r\n<blockquote>\r\n\tReads in an image file from disk, and makes transparent all\r\n\tpixels with shade of grey specified by <var>shade</var>.\r\n\tDemo'd in: <a href=\"Gallery/PushMe.html\">PushMe</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>image1</var> = getImage(<var>filenameString</var>,\r\n\t\t<var>red</var>, <var>green</var>, <var>blue</var>)\r\n<blockquote>\r\n\tReads in an image file from disk, and makes transparent all\r\n\tpixels with the color specified by the last three parameters.\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>w</var> = <var>image1</var>.width() (returns int)\r\n</li>\r\n<li><var>h</var> = <var>image1</var>.height() (returns int)\r\n<blockquote>\r\n\tThese methods return the width and height of the image.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>image1</var>.transparent(<var>shade</var>)\r\n</li>\r\n<li><var>image1</var>.transparent(<var>red</var>, <var>green</var>, <var>blue</var>)\r\n<blockquote>\r\n\tThese methods set the image's transparent color to the\r\n\tspecified shade or red green blue color.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>image1</var>.draw(<var>x</var>, <var>y</var>)\r\n<blockquote>\r\n<!-- Perhaps this method isn't meant to be public.</font> -->\r\n\tDraws the image so that its upper left hand corner is\r\n\tat the specified position, relative to the upper left hand\r\n\tcorner of the canvas.\r\n\tCan only be called inside the game class's draw() method.\r\n</blockquote>\r\n</li>\r\n\r\n\r\n<a name=\"Sound\"></a>\r\n<h4>The Sound class</h4>\r\n\r\n<p>\r\nAn Sound object can contain music, sound effects, or any kind\r\nof sound recording, of any length.\r\nMany file formats and recording formats exist.\r\nUcigame can\r\nplay sound files in certain uncompressed formats (the exact\r\npossibilities seem to vary from computer to computer)\r\nand in the MP3 format, thanks to the JavaZoon JLayer\r\nlibrary included in Ucigame.\r\nMultiple sound files can be played at the same time.\r\n</p>\r\n\r\n<p>\r\nIn the following, we assume that a reference to a Sound\r\ncalled <var>sound1</var> has been defined:\r\n<blockquote>\r\n\tSound <var>sound1</var>;\r\n</blockquote>\r\n</p>\r\n\r\n<li><var>sound1</var> = getSound(<var>filenameString</var>)\r\n<blockquote>\r\n    This method reads in the specified sound file from disk.\r\n    If the file is in a format that cannot be played, subsequent\r\n    calls to play() or loop() will have no effect.\r\n\tDemo'd in: <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sound1</var>.play()\r\n<blockquote>\r\n    Plays the sound once, from beginning to end.\r\n\tDemo'd in: <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sound1</var>.loop()\r\n<blockquote>\r\n    Plays the sound continuously; when the end is reached it starts over.\r\n\tDemo'd in: <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>sound1</var>.stop()\r\n<blockquote>\r\n    Stops the sound if it is currently playing (or looping).\r\n\tDemo'd in: <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n\r\n<a name=\"Ucigame\"></a>\r\n<h4>The Ucigame class</h4>\r\n\r\n<li>framerate(<var>number</var>)\r\n<blockquote>\r\n\tThis method sets the desired framerate; Ucigame will try to\r\n\trefresh the window <var>number</var> times per second, although\r\n\tthere is no guarantee that it will be successful.\r\n\tThis method has no effect if <var>number</var> is negative\r\n\tor greater than 1000.  In practice, most monitors can only be\r\n\trefreshed between 70 and 100 times per second.\r\n\tFor most games, a framerate of 20 to 30 frames per second is optimal.\r\n\tDemo'd in: <a href=\"Gallery/BallFollower.html\">BallFollower</a>,\r\n\t           <a href=\"Gallery/FlippedOut.html\">FlippedOut</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>fps</var> = actualFPS()  (returns int)\r\n<blockquote>\r\n\tThe method returns the number of times the window\r\n\thas been refreshed in the last second.\r\n</blockquote>\r\n</li>\r\n\r\n<li>void randomSeed(<var>seed</var>)\r\n<blockquote>\r\n\tUcigame can generate \"pseudorandom\" numbers.  Pseudorandom numbers\r\n\tappear to be random, but are actually created by a specific formula,\r\n\twhich uses a starting number called a seed.\r\n\tThe same pseudorandom numbers will be generated by calls to random()\r\n\tif the same seed is used in randomSeed().\r\n\tIf this method is not used, then calls to random() and\r\n\trandomInt() will return different values each time the\r\n\tgame is run.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>x</var> = random(<var>limit</var>)  (returns a double)\r\n<blockquote>\r\n\tReturns a random number (with a fractional part) greater than or equal to\r\n\t0.0 and less than <var>limit</var>.  If <var>limit</var> is not positive,\r\n\tthis method returns 0.0.\r\n\t Demo'd in <a href=\"Gallery/LunchTimer.html\">LunchTimer</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>x</var> = random(<var>lowerlimit</var>, <var>upperlimit</var>)  (returns a double)\r\n<blockquote>\r\n\tReturns a random number (with a fractional part) greater than or equal to\r\n\t<var>lowerlimit</var> and less than or equal to <var>upperlimit</var>.\r\n\tIf <var>upperlimit</var> is less than <var>lowerlimit</var>,\r\n\tthis method returns <var>lowerlimit</var>\r\n\tDemo'd in: <a href=\"Gallery/ClickAndClack.html\">ClickAndClack</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>x</var> = randomInt(<var>limit</var>) (returns an int)\r\n<blockquote>\r\n\tReturns a random whole number greater than or equal to\r\n\t0 and less than <var>limit</var>.  If <var>limit</var> is not positive,\r\n\tthis method returns 0.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>x</var> = randomInt(<var>lowerlimit</var>, <var>upperlimit</var>)  (returns an int)\r\n<blockquote>\r\n\tReturns a random whole number greater than or equal to\r\n\t<var>lowerlimit</var> and less than <var>upperlimit</var>.\r\n\tIf <var>upperlimit</var> is less than <var>lowerlimit</var>,\r\n\tthis method returns <var>lowerlimit</var>\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>stringArray</var> = arrayOfAvailableFonts() (returns an array of String)\r\n<blockquote>\r\n\tThis method is used to find all fonts available on the computer.\r\n\tDemo'd in: <a href=\"Gallery/FontDemo.html\">FontDemo</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li><var>fontIsAvailable</var> = isAvailableFont(<var>FontNameString</var>) (returns a boolean)\r\n<blockquote>\r\n\tReturns <tt>true</tt> if the specified font is installed and\r\n\tavailable on the computer, and <tt>false</tt> otherwise.\r\n\tThe font name is not case sensitive.\r\n\tDemo'd in: <a href=\"Gallery/BounceHouse.html\">BounceHouse</a>,\r\n\t           <a href=\"Gallery/PushMe.html\">PushMe</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>setIconImage(<var>iconImage</var>)\r\n<blockquote>\r\n\tSets the game window's icon to the specified iconImage.\r\n\tThis method has no effect when the game is running as an applet.\r\n\tThe default icon for Java programs is usually the steaming\r\n\tcoffee cup logo; the icon appears on the title bar and when\r\n\tthe game is minimized.\r\n\t<var>iconImage</var> should be created by getImage(); the\r\n\timage can have transparent pixels.\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>startScene(<var>sceneNameString</var>)\r\n<blockquote>\r\n\tDefines a new scene for the game.\r\n\tA scene is frequently part or all of a level.\r\n\tCalling startScene(<i>SceneName</i>) has the following effects:\r\n\t<ol>\r\n\t<li>The current method completes normally.\r\n\t<li>If the program has a public method called start<i>SceneName</i> with no parameters\r\n\t\tand returning void, then that method is performed.\r\n\t<li>Every time the window needs to be repainted, the public method\r\n\t\tdraw<i>SceneName</i> is called (instead of draw()).\r\n\t\tThis method must take no parameters and return void.\r\n\t<li>If the user presses a keyboard key and there is a public method called\r\n\t\tonKeyPress<i>SceneName</i> with no parameters and returning void, then\r\n\t\tthat method is invoked.\r\n\t<li>If the user releases a keyboard key and there is a public method called\r\n\t\tonKeyRelease<i>SceneName</i> with no parameters and returning void, then\r\n\t\tthat method is invoked.\r\n\t</ol>\r\n\tDemo'd in: <a href=\"Gallery/PongWithScenes.html\">PongWithScenes</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>startTimer(<var>timerNameString</var>, <var>milliseconds</var>)\r\n<blockquote>\r\n\tExecuting this method causes the method <var>timerNameString</var><tt>Timer()</tt>\r\n\tto be run <var>milliseconds</var> milliseconds later, and every\r\n\t<var>milliseconds</var> milliseconds afterwards.\r\n\tThe <var>timerNameString</var><tt>Timer()</tt> method must be defined\r\n\tas <tt>public</tt>, must return <tt>void</tt>, and must not take\r\n\tany parameters.\r\n\tDemo'd in: <a href=\"Gallery/BounceHouse.html\">BounceHouse</a>,\r\n\t           <a href=\"Gallery/LunchTimer.html\">LunchTimer</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>stopTimer(<var>timerNameString</var>)\r\n<blockquote>\r\n\tCancels subsequent executions of the <var>timerNameString</var><tt>Timer()</tt>\r\n\tmethod.\r\n\tDemo'd in: <a href=\"Gallery/BounceHouse.html\">BounceHouse</a>,\r\n\t           <a href=\"Gallery/LunchTimer.html\">LunchTimer</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li>print(<var>information</var>)\r\n</li>\r\n<li>println(<var>information</var>)\r\n<blockquote>\r\n\tPrints <var>information</var> on the console.  The <tt>println</tt>\r\n\tversion adds a new line at the end.\r\n\t<var>information</var> can be composed of multiple fields joined\r\n\twith <tt>+</tt>, for example:\r\n\t<blockquote><tt>\r\n\t\tprintln(\"The value of x is \" + x);\r\n\t</tt></blockquote>\r\n\tDemo'd in: <a href=\"Gallery/FontDemo.html\">FontDemo</a>,\r\n\t           <a href=\"Gallery/ClickAndClack.html\">ClickAndClack</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<p>\r\nThe following Ucigame methods create objects.\r\nThey are defined above.\r\n</p>\r\n<ul>\r\n\t<li>getImage()\r\n\t<li>getSound()\r\n\t<li>makeSprite()\r\n\t<li>makeTiledSprite()\r\n\t<li>makeButton()\r\n</ul>\r\n\r\n\r\n<a name=\"ExtendsUcigame\"></a>\r\n<h4>The Class You Write Extending Ucigame</h4>\r\n<p>\r\nA number of methods, if coded by the programmer in the class that\r\nextends Ucigame, have special roles.\r\n</p>\r\n\r\n<li> <tt>public void setup()</tt>\r\n<blockquote>\r\n\tThis method is performed once, at the start of the game.\r\n\tIt's a good place to set up the window, load images, and\r\n\tcreate sprites.\r\n</blockquote>\r\n</li>\r\n\r\n<li> <tt>public void draw()</tt> or <tt>public void draw<i>SceneName</i>()</tt>\r\n<blockquote>\r\n\tThe draw method is called every time the window needs\r\n\tto be repainted--either because of the requested framerate\r\n\tof because part or all of the window has been exposed.\r\n</blockquote>\r\n</li>\r\n\r\n<li> <tt>public void onKeyPress()</tt> <i>or</i> <tt>public void onKeyPress<i>SceneName</i>()</tt>\r\n<blockquote>\r\n\tThis method should be coded if the game needs to be alerted\r\n\twhen the user presses a key on the keyboard.\r\n\tIf one or more keys is down, onKeyPress is called once per frame,\r\n\tjust before draw().\r\n\tNote that if the typematic or auto-repeat feature is on, which\r\n\tit is by default, and a key is held down and not released, the method\r\n\twill be invoked multiple times.\r\n\tDemo'd in: <a href=\"Gallery/Pong.html\">Pong</a>,\r\n\t           <a href=\"Gallery/Tank.html\">Tank</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li> <tt>public void onKeyRelease()</tt> <i>or</i> <tt>public void onKeyRelease<i>SceneName</i>()</tt>\r\n<blockquote>\r\n\tThis method should be coded if the game needs to be alerted\r\n\twhen the user releases a key on the keyboard that was held down\r\n\tIf one or more keys is released, onKeyRelease is called once per frame,\r\n\tjust before draw().\r\n\tDemo'd in: <a href=\"Gallery/Tank.html\">Tank</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<li> <tt>public void onMousePressed()</tt>\r\n<li> <tt>public void onMouseMoved()</tt>\r\n<li> <tt>public void onMouseDragged()</tt>\r\n<li> <tt>public void onMouseReleased()</tt>\r\n<li> <tt>public void onMouseWheelMoved()</tt>\r\n<blockquote>\r\n\tThe methods are called in response to various mouse events.\r\n\t<tt>onMousePressed()</tt> is called when a mouse button is pressed down.\r\n\t<tt>onMouseReleased()</tt> is called when a mouse button is released;\r\n\tDemo'd in: <a href=\"Gallery/FontDemo.html\">FontDemo</a>.\r\n\t<tt>onMouseMoved()</tt> is called when the mouse is moved and no\r\n\t\tbutton is being held down.\r\n\t<tt>onMouseDragged()</tt> is called when the mouse is moved and a\r\n\t\tbutton is being held down.\r\n\t<tt>onMouseDragged()</tt> is called when the mouse is moved and a\r\n\t\tbutton is being held down.\r\n\tAll are demo'd in: <a href=\"Gallery/ClickAndClack.html\">ClickAndClack</a>.\r\n\t<tt>onMouseWheelMoved()</tt> is called when the mouse wheel is rotated;\r\n\tDemo'd in: <a href=\"Gallery/MegaBounce.html\">MegaBounce</a> and\r\n\t           <a href=\"Gallery/MouseTrap.html\">MouseTrap</a>.\r\n</blockquote>\r\n</li>\r\n\r\n<br>\r\n<br>\r\n\r\n</body>\r\n</html>", "encoding": "ascii"}