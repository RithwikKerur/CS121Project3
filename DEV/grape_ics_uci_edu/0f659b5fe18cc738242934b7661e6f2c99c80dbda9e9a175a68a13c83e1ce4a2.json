{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs222p-2017-fall-project2-description?version=1", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs222p-2017-fall-project2-description \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"alternate\" href=\"/wiki/public/wiki/cs222p-2017-fall-project2-description?version=1&amp;format=txt\" type=\"text/x-trac-wiki\" title=\"Plain Text\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs222p-2017-fall-project2-description\" title=\"View latest version\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs222p-2017-fall-project2-description?version=2\" title=\"Version 2\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/folding.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n    <script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\"#content\").find(\"h1,h2,h3,h4,h5,h6\").addAnchor(_(\"Link to this section\"));\n        $(\"#content\").find(\".wikianchor\").each(function() {\n          $(this).addAnchor(babel.format(_(\"Link to #%(id)s\"), {id: $(this).attr('id')}));\n        });\n        $(\".foldable\").enableFolding(true, true);\n      });\n    </script>\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"pagepath\" class=\"noprint\">\n  <a class=\"pathentry first\" title=\"View WikiStart\" href=\"/wiki/public/wiki\">wiki:</a><a class=\"pathentry\" href=\"/wiki/public/wiki/cs222p-2017-fall-project2-description\" title=\"View cs222p-2017-fall-project2-description\">cs222p-2017-fall-project2-description</a>\n</div>\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span class=\"missing\">&larr; Previous Version</span></li><li><a href=\"/wiki/public/wiki/cs222p-2017-fall-project2-description\" title=\"View latest version\">View Latest Version</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs222p-2017-fall-project2-description?version=2\" title=\"Version 2\">Next Version</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n        <br />\n        <table id=\"info\" summary=\"Revision info\">\n          <tr><th scope=\"row\">Version 1 (modified by zuozhi, <a class=\"timeline\" href=\"/wiki/public/timeline?from=2017-10-10T18%3A54%3A22-07%3A00&amp;precision=second\" title=\"See timeline at Oct 10, 2017 6:54:22 PM\">2 years ago</a>)\n             (<a href=\"/wiki/public/wiki/cs222p-2017-fall-project2-description?action=diff&amp;version=1\">diff</a>)</th></tr>\n          <tr><td class=\"message\">\n            <p>\n--\n</p>\n\n          </td></tr>\n        </table>\n      <div class=\"wikipage searchable\">\n        \n          <div id=\"wikipage\" class=\"trac-content\"><div style=\"background-color:#f2f3f4\" class=\"wikipage\"><div style=\"background-color:lightblue\" class=\"wikipage\"><h1 id=\"CS222PFall2017:PrinciplesofDataManagement-Project2Description\">CS222P Fall 2017: Principles of Data Management - Project 2 Description</h1>\n</div><h1 id=\"Introduction\">Introduction</h1>\n<p>\nIn this project, you will continue implementing the record-based file manager (RBFM). Once you have finished implementing that, you will build a relation manager (RM) on top of the basic paged file system. The RM manager should meet the following basic requirements. \n</p>\n<h1 id=\"BasicRequirements100points\">Basic Requirements (100 points)</h1>\n<h2 id=\"FinishRBFM\">Finish RBFM</h2>\n<p>\nYou need to finish the implementation of the record-based file manager (RBFM) that you have started in part 1. Specifically, you should finish implementing the following methods: <strong>RecordBasedFileManager::deleteRecord()</strong>, <strong>RecordBasedFileManager::updateRecord()</strong>, <strong>RecordBasedFileManager::readAttribute()</strong>, and <strong>RecordBasedFileManager::scan()</strong>. Please refer to <a class=\"forbidden wiki\" title=\"no permission to view this wiki page\">Project 1 Description</a> for their explanations and look at the file <strong>rbfm.h</strong> for the signature of those methods. Once you finish the implementation of those methods and test them well, you will use those methods to implement the relation manager (please have a look at the file <strong>rm.h</strong>).\n</p>\n<h2 id=\"ImplementtheRelationManager\">Implement the Relation Manager</h2>\n<p>\nThe RelationManager class is responsible for managing the database tables. It handles the creation and deletion of tables. It also handles the basic operations performed on top of a table (e.g., insert and delete tuples). \n</p>\n<h3 id=\"Catalog\">Catalog</h3>\n<p>\nCreate a catalog to hold all information about your database. This includes at least the following:\n</p>\n<ul><li>Table information (e.g., table-name, table-id, etc.).\n</li><li>For each table, the columns, and for each of these columns: the column name, type, length, and position.\n</li><li>The name of the record-based file in which the data corresponding to each table is stored.\n</li></ul><p>\nIt is mandatory to store the catalog information by using the RBF layer functions. You should create the catalog's tables and populate them the first time your database is initialized (when the method createCatalog() is called). Once the catalog's tables and columns tables have been created, they should be persisted to disk. Please use the following name and type for the catalog tables and columns. You can add more attributes you want/need to. However, please do not change the given name of these two tables or their attribute names. \n</p>\n<pre class=\"wiki\">Tables (table-id:int, table-name:varchar(50), file-name:varchar(50))\nColumns(table-id:int, column-name:varchar(50), column-type:int, column-length:int, column-position:int)\n</pre><p>\nAn example of the records that should be in these two tables after creating a table named \"Employee\" is:\n</p>\n<pre class=\"wiki\">Tables \n(1, \"Tables\", \"Tables\")\n(2, \"Columns\", \"Columns\")\n(3, \"Employee\", \"Employee\")\n\nColumns\n(1, \"table-id\", TypeInt, 4 , 1)\n(1, \"table-name\", TypeVarChar, 50, 2)\n(1, \"file-name\", TypeVarChar, 50, 3)\n(2, \"table-id\", TypeInt, 4, 1)\n(2, \"column-name\",  TypeVarChar, 50, 2)\n(2, \"column-type\", TypeInt, 4, 3)\n(2, \"column-length\", TypeInt, 4, 4)\n(2, \"column-position\", TypeInt, 4, 5)\n(3, \"empname\", TypeVarChar, 30, 1)\n(3, \"age\", TypeInt, 4, 2)\n(3, \"height\", TypeReal, 4, 3)\n(3, \"salary\", TypeInt, 4, 4)\n</pre><p>\nNote that TypeInt, TypevarChar, and TypeReal are the enum types used to represent an attribute type and defined in the rbfm.h file. Also for the file-name attribute, you can use your own naming conventions if you want (e.g,. \"Tables.tbl\" for Tables table). In this example, The last row of Tables table states that the table-id of the \"Employee\" table is 3, its name is \"Employee\", and the RBF file associated with this table is \"Employee\". The last line of the Columns table shows the information about the \"salary\" column of the \"Employee\" table. Specifically, the table-id is 3, the column-name is \"salary\", the type of this column is Int, its length is 4, and the position of this column is 4.\n</p>\n<p>\nThe catalog tables (Tables and Columns) should be created when the method createCatalog() is called. All other subsequent invocations of your database should use the already created catalog's tables. The catalog tables will be deleted when the deleteCatalog() is called. Between the createCatalog() and deleteCatalog() methods, the catalog should be persistent on disk. Please note that users should be able to query your catalog's tables as any other table, but they should not be allowed to modify its content through the RM API. Modifications of the catalog's tables should be only allowed from internal calls (for instance, when creating a user table or deleting a user table, etc.). To do this, you may need to have a \"system\" vs. \"user\" flag in your Tables catalog so you can distinguish \"system tables\" from \"user tables\" and make it illegal to do anything but reading \"system tables\" through the RM layer.  If you take this design, then you need to add one more column to the two schemas defined above.\n</p>\n<h3 id=\"RelationManagerclass\">RelationManager class</h3>\n<p>\nThe following is more information about the RelationManager class.  Your program should create exactly one instance of this class, and all requests for the RM component should be directed to that instance. The public methods of the class declaration are shown first, followed by descriptions of the methods. The last two methods in the class declaration are the constructor and destructor methods and are not explained further. <strong>Note:</strong> your tuple-oriented file system must create a relation manager (RM) that initializes the catalog information you may need to store. It also internally creates a record-based file manager using the implementation from Project 1.\n</p>\n<pre class=\"wiki\">class RelationManager\n{\npublic:\n  RC createCatalog();\n\n  RC deleteCatalog();\n\n  RC createTable(const string &amp;tableName, const vector&lt;Attribute&gt; &amp;attrs);\n\n  RC deleteTable(const string &amp;tableName);\n\n  RC getAttributes(const string &amp;tableName, vector&lt;Attribute&gt; &amp;attrs);\n\n  RC insertTuple(const string &amp;tableName, const void *data, RID &amp;rid);\n\n  RC deleteTuple(const string &amp;tableName, const RID &amp;rid);\n\n  RC updateTuple(const string &amp;tableName, const void *data, const RID &amp;rid);\n\n  RC readTuple(const string &amp;tableName, const RID &amp;rid, void *data);\n\n  // mainly for debugging\n  // Print a tuple that is passed to this utility method.\n  RC printTuple(const vector&lt;Attribute&gt; &amp;attrs, const void *data);\n\n  RC readAttribute(const string &amp;tableName, const RID &amp;rid, const string &amp;attributeName, void *data);\n\n  // scan returns an iterator to allow the caller to go through the results one by one. \n  RC scan(const string &amp;tableName,\n      const string &amp;conditionAttribute,\n      const CompOp compOp,                  // comparison type such as \"&lt;\" and \"=\"\n      const void *value,                    // used in the comparison\n      const vector&lt;string&gt; &amp;attributeNames, // a list of projected attributes\n      RM_ScanIterator &amp;rm_ScanIterator);\n\nprotected:\n  RelationManager();\n  ~RelationManager();\n};\n</pre><h3 id=\"RCcreateCatalog\">RC createCatalog()</h3>\n<p>\nThis method creates two system catalog tables - Tables and Columns. If they already exist, return an error. The actual files for these two tables should be created and tuples describing themselves should be inserted into these tables as shown earlier in the catalog section.\n</p>\n<h3 id=\"RCdeleteCatalog\">RC deleteCatalog()</h3>\n<p>\nThis method deletes the system catalog tables. The actual files for these two tables should be deleted. It will return an error if the system catalog does not exist.\n</p>\n<h3 id=\"RCcreateTableconststringtableNameconstvectorAttributeattrs\">RC createTable(const string &amp;tableName, const vector&lt;Attribute&gt; &amp;attrs)</h3>\n<p>\nThis method creates a table called tableName with a vector of attributes (attrs). The actual RBF file for this table should be created.\n</p>\n<h3 id=\"RCdeleteTableconststringtableName\">RC deleteTable(const string &amp;tableName);</h3>\n<p>\nThis method deletes a table by the given tableName. The actual RBF file for this table should be deleted.\n</p>\n<h3 id=\"RCgetAttributesconststringtableNamevectorAttributeattrs\">RC getAttributes(const string &amp;tableName, vector&lt;Attribute&gt; &amp;attrs);</h3>\n<p>\nThis method gets the attributes (attrs) of a table called tableName by looking in the catalog tables.  \n</p>\n<h3 id=\"RCinsertTupleconststringtableNameconstvoiddataRIDrid\">RC insertTuple(const string &amp;tableName, const void *data, RID &amp;rid);</h3>\n<p>\nThis method inserts a tuple into a table called tableName. You can assume that the input is always correct and free of error. That is, you do not need to check if the input tuple has the right number of attributes and/or if the attribute types match. Since there can be NULL values in one or more attributes, the first part in *data contains n bytes to pass the null information about each attributes. For details, check insertRecord() in <a class=\"forbidden wiki\" title=\"no permission to view this wiki page\">Project 1 Description</a>.\n</p>\n<h3 id=\"RCdeleteTupleconststringtableNameconstRIDrid\">RC deleteTuple(const string &amp;tableName, const RID &amp;rid);</h3>\n<p>\nThis method deletes a tuple with a given rid. Also, each time a tuple is deleted, you will need to compact the underlying page. That is, keep the free space together in the middle of the page -- the slot table will be at one end, the record data area will be at the other end, and the free space should be in the middle.\n</p>\n<h3 id=\"RCupdateTupleconststringtableNameconstvoiddataconstRIDrid\">RC updateTuple(const string &amp;tableName, const void *data, const RID &amp;rid);</h3>\n<p>\nThis method updates a tuple identified by a given rid. <strong>Note:</strong> if the tuple grows (i.e., the size of the tuple increases) and there is no space in the page to store the tuple (after the update), then the tuple is migrated to a new page with enough free space. Since you will implement an index structure (e.g., B-tree) in Project 3, tuples will be identified by their rids and when they migrate, you must leave a tombstone behind pointing to the new location of the tuple. Also, each time a tuple is updated to become smaller, you need to compact the underlying page. That is, keep the free space in the middle of the page -- the slot table will be at one end, the tuple data area will be at the other end, and the free space should be in the middle. Again, the structure for *data is the same as for insertRecord().\n</p>\n<h3 id=\"RCreadTupleconststringtableNameconstRIDridvoiddata\">RC readTuple(const string &amp;tableName, const RID &amp;rid, void *data);</h3>\n<p>\nThis method reads a tuple identified by a given rid. The structure for *data is the same as for insertRecord().\n</p>\n<h3 id=\"RCprintTupleconstvectorAttributeattrsconstvoiddata\">RC printTuple(const vector&lt;Attribute&gt; &amp;attrs, const void *data);</h3>\n<p>\nThis method mainly exists for debugging purposes. This method prints the tuple whose data is passed into this method. The structure for *data is the same as for insertRecord(). For details, refer to printRecord() in <a class=\"forbidden wiki\" title=\"no permission to view this wiki page\">Project 1 Description</a>.\n</p>\n<h3 id=\"RCreadAttributeconststringtableNameconstRIDridconststringattributeNamevoiddata\">RC readAttribute(const string &amp;tableName, const RID &amp;rid, const string &amp;attributeName, void *data);</h3>\n<p>\nThis method mainly exists for debugging purposes. This method reads a specific attribute of a tuple identified by a given rid. The structure for *data is the same as for insertRecord(). That is, a null-indicator will be placed in the beginning of *data. However, for this function, since it returns a value for just one attribute, exactly one byte of null-indicators should be returned, not a set of the null-indicators for all of the tuple's attributes. \n</p>\n<h3 id=\"RCscanconststringtableNameconststringconditionAttributeconstCompOpcompOpconstvoidvalueconstvectorstringattributeNamesRM_ScanIteratorrm_ScanIterator\">RC scan(const string &amp;tableName, const string &amp;conditionAttribute, const CompOp compOp, const void *value, const vector&lt;string&gt; &amp;attributeNames, RM_ScanIterator &amp;rm_ScanIterator);</h3>\n<p>\nThis method scans the table called tableName. That is, it sequentially reads all of the tuples in the table. This method returns an iterator called rm_ScanIterator to allow the caller to go through the records in the table one by one. A scan has a filter condition associated with it, e.g., it consists of a list of attributes to project out as well as a predicate on an attribute (\u201cSal &gt; 40000\u201d). <strong>Note:</strong> the RBFM_ScanIterator should not cache the scan result in memory. In fact, your code should be looking only at one (or a few) page(s) of data at a time when getNextTuple() is called. In this project, let the OS do all the memory management work for you.\n</p>\n<h2 id=\"RM_ScanIteratorClass\">RM_ScanIterator Class</h2>\n<p>\nThe RM_ScanIterator class is a class that represents an iterator which is used to go through the tuples in the table one by one. The way to use this iterator is as follows:\n</p>\n<pre class=\"wiki\">RM_ScanIterator rmsi;\n\n// At this moment, do not execute scan and cache the results in the memory. Just initialize the scan operator\nrc = rm-&gt;scan(tableName, conditionAttribute, compOp, value, attributes, rmsi);     \n\nwhile(rmsi.getNextTuple(rid, returnedData) != RM_EOF){\n   // fetch one tuple at at time and process the data;\n}\nrmsi.close();\n</pre><p>\nThe public methods of this class are shown next. The first two methods in the class declaration are the constructor and destructor methods and are not explained further. \n \n</p>\n<pre class=\"wiki\">class RM_ScanIterator {\npublic:\n  RM_ScanIterator();\n  ~RM_ScanIterator();\n\n  // \"data\" follows the same format as RelationManager::insertTuple()\n  RC getNextTuple(RID &amp;rid, void *data);\n  RC close();\n};\n</pre><h3 id=\"RCgetNextTupleRIDridvoiddata\">RC getNextTuple(RID &amp;rid, void *data);</h3>\n<p>\nThis method is used to get the next tuple from the scanned table. It returns RM_EOF when all tuples have been scanned. Note that the structure for *data is the same as for insertRecord(). That is, a null-indicator will be placed in the beginning of *data. However, for this function, since it returns a value for the attributes that are specified in the scan method, the corresponding byte(s) for these attributes of null-indicators should be placed, not the null-indicators for the entire set of table attributes. \n</p>\n<h3 id=\"RCclose\">RC close();</h3>\n<p>\nThis method is used to close the iterator.\n</p>\n<h2 id=\"DesignAssumptions\">Design Assumptions</h2>\n<p>\nYou can make the following simplifying assumptions when implementing PFM, RBFM, and RM (including ScanIterator):<br />\n</p>\n<ol><li>The size of one tuple cannot exceed the size of a page. That is, an empty page can always hold at least one tuple. If an incoming tuple is too big for an empty page, or a tuple grows too much to fit alone on a page, return an error. (However, if a page has two or more tuples, then one of the tuples can grow to not fit on that shared page.) \n</li></ol><ol start=\"2\"><li>A table maps to a single file, and a single file contains only one table.\n</li></ol><h1 id=\"AdvancedRequirements10points\">Advanced Requirements (10 points)</h1>\n<p>\nAdvanced features will be treated as extra credit work. Extra credit points will be tracked separately and used when considering effort as a factor when assigning final grades. The following are the advanced features for this part of the project: \n</p>\n<pre class=\"wiki\">class RelationManager\n{\npublic:\n\n  ......\n  RC addAttribute(const string &amp;tableName, const Attribute &amp;attr);\n\n  RC dropAttribute(const string &amp;tableName, const string &amp;attributeName);\n}\n</pre><h3 id=\"RCaddAttributeconststringtableNameconstAttributeattr\">RC addAttribute(const string &amp;tableName, const Attribute &amp;attr);</h3>\n<p>\nThis method adds a new attribute (attr) to a table called tableName. <strong>Note:</strong> This operation will update the catalogs but should not involve touching the data itself. That is, when you read a record right after adding an attribute A, the value for the attribute A should be returned as NULL.\n</p>\n<h3 id=\"RCdropAttributeconststringtableNameconststringattributeName\">RC dropAttribute(const string &amp;tableName, const string &amp;attributeName);</h3>\n<p>\nThis method drops an attribute called attributeName from a table called tableName. <strong>Note:</strong> This operation will update the catalogs but should not involve touching the data itself. That is, when you read a record right after dropping an attribute A, the value for the attribute A should not be included even though it still actually resides on disk.\n</p>\n<p>\n<strong>HINT:</strong> The above two methods will affect how operations access the fields of a record if it was created before such a schema change.\n</p>\n<h1 id=\"Explanation\">Explanation</h1>\n<p>\nThe commands listed above are by no means complete, but they do capture the essence of a tuple-oriented file system.\n</p>\n<p>\nYou have a lot of freedom in designing your specific algorithms and building your system. You should spend a significant amount of time in coming up with a design for your system before you start coding.\n</p>\n<p>\nFor endianess, that should matter only if binary files are copied to a different machine. We won't do that. We advise you to use memcpy to copy the int/real/char* values into the tuple byte array and vice-versa. As long as the same machine does the reading and writing, things should be fine. \n</p>\n<p>\nGrading will be based on the correctness of the implementation unless your code takes an exceedingly long time (e.g., more than 10 minutes) to execute a test case. Most test cases can be executed within a few seconds.\n</p>\n</div></div>\n          \n          \n        \n        \n      </div>\n      \n\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"last first\">\n          <a rel=\"nofollow\" href=\"/wiki/public/wiki/cs222p-2017-fall-project2-description?version=1&amp;format=txt\">Plain Text</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>", "encoding": "utf-8"}