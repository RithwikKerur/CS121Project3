{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs221-2019-spring-project2?action=diff&version=4", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs221-2019-spring-project2 (diff) \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=history\" title=\"Page history\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=diff&amp;version=5\" title=\"Version 5\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"prev\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=diff&amp;version=3\" title=\"Version 3\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/wiki/public/chrome/common/css/diff.css\" />\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span>&larr; <a class=\"prev\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=diff&amp;version=3\" title=\"Version 3\">Previous Change</a></span></li><li><a href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=history\" title=\"Page history\">Wiki History</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=diff&amp;version=5\" title=\"Version 5\">Next Change</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n      <h1>\n        Changes between\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=3\">Version 3</a> and\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=4\">Version 4</a> of\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project2\">cs221-2019-spring-project2</a>\n      </h1>\n      <form method=\"post\" id=\"prefs\" action=\"/wiki/public/wiki/cs221-2019-spring-project2?version=4\"><div><input type=\"hidden\" name=\"__FORM_TOKEN\" value=\"a596cc24b1ae4857a63dd58e\" /></div>\n        <div>\n          <input type=\"hidden\" name=\"action\" value=\"diff\" />\n          <input type=\"hidden\" name=\"version\" value=\"4\" />\n          <input type=\"hidden\" name=\"old_version\" value=\"3\" />\n          \n  <label for=\"style\">View differences</label>\n  <select id=\"style\" name=\"style\">\n    <option selected=\"selected\" value=\"inline\">inline</option>\n    <option value=\"sidebyside\">side by side</option>\n  </select>\n  <div class=\"field\">\n    <label><input type=\"radio\" name=\"contextall\" value=\"0\" checked=\"checked\" />\n             Show</label>\n      <label><input type=\"text\" name=\"contextlines\" id=\"contextlines\" size=\"2\" maxlength=\"3\" value=\"2\" />\n             lines around each change</label><br />\n    <label><input type=\"radio\" name=\"contextall\" value=\"1\" />\n           Show the changes in full context</label>\n  </div>\n  <fieldset id=\"ignore\">\n    <legend>Ignore:</legend>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignoreblanklines\" name=\"ignoreblanklines\" />\n      <label for=\"ignoreblanklines\">Blank lines</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorecase\" name=\"ignorecase\" />\n      <label for=\"ignorecase\">Case changes</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorewhitespace\" name=\"ignorewhitespace\" />\n      <label for=\"ignorewhitespace\">White space changes</label>\n    </div>\n  </fieldset>\n  <div class=\"buttons\">\n    <input type=\"submit\" name=\"update\" value=\"Update\" />\n  </div>\n\n        </div>\n      </form>\n      <dl id=\"overview\">\n        <dt class=\"property time\">Timestamp:</dt>\n        <dd class=\"time\">\n            Apr 18, 2019 12:35:15 PM (<a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-04-18T12%3A35%3A15-07%3A00&amp;precision=second\" title=\"See timeline at Apr 18, 2019 12:35:15 PM\">6 months</a> ago)\n        </dd>\n        <dt class=\"property author\">Author:</dt>\n        <dd class=\"author\">\n          zuozhi\n        </dd>\n        <dt class=\"property message\">Comment:</dt>\n        <dd class=\"message\">\n          \n          <p>\n--\n</p>\n\n        </dd>\n      </dl>\n      <div class=\"diff\">\n        <div class=\"legend\" id=\"diff-legend\">\n          <h3>Legend:</h3>\n          <dl>\n            <dt class=\"unmod\"></dt><dd>Unmodified</dd>\n            <dt class=\"add\"></dt><dd>Added</dd>\n            <dt class=\"rem\"></dt><dd>Removed</dd>\n            <dt class=\"mod\"></dt><dd>Modified</dd>\n          </dl>\n        </div>\n        <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2 id=\"file0\">\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=4\">cs221-2019-spring-project2</a>\n        </h2>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"Version 3\">\n                    <a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=3#L5\">\n                      v3</a>\n                  </th>\n                  <th title=\"Version 4\">\n                    <a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=4#L5\">\n                      v4</a>\n                  </th>\n                  <td>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>5</th><th>5</th><td class=\"l\"><span>'''Final Code Due:&nbsp; &nbsp; &nbsp;Week 5, Sun. (May. 5),&nbsp; Due on Github.'''[[BR]]</span></td>\n                  </tr><tr>\n                          <th>6</th><th>6</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"rem\">\n                  <tr class=\"last first\">\n                          <th>7</th><th>\u00a0</th><td class=\"l\"><del>= Overview =</del></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>8</th><th>7</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>9</th><th>8</th><td class=\"l\"><span>== Coding Tasks ==</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=3#L20\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=4#L19\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>20</th><th>19</th><td class=\"l\"><span>Total: 19 points&nbsp; (+ 4 extra credits)</span></td>\n                  </tr><tr>\n                          <th>21</th><th>20</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>== Overview ==</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>22</th><th>23</th><td class=\"l\"><span>In this project, you'll be implementing a disk-based inverted index and the search operations.</span></td>\n                  </tr><tr>\n                          <th>23</th><th>24</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>24</th><th>\u00a0</th><td class=\"l\"><span>On a high level, inverted index stores the mapping from keywords to the documents they appear in.</span></td>\n                      </tr><tr>\n                        <th>25</th><th>\u00a0</th><td class=\"l\"><span>A simple in-memory structure could be `Map&lt;String, List&lt;Integer&gt;&gt;`, where each key is a keyword token (also called term),</span></td>\n                      </tr><tr>\n                        <th>26</th><th>\u00a0</th><td class=\"l\"><span>and each value is a list of (often sorted) document IDs (also called postings).</span></td>\n                      </tr><tr>\n                        <th>27</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>28</th><th>\u00a0</th><td class=\"l\"><span>In this project, the disk-based index structure is similar to the idea of LSM (Log-Structured Merge tree).</span></td>\n                      </tr><tr>\n                        <th>29</th><th>\u00a0</th><td class=\"l\"><span>A general idea will be described. The details should follow what Professor says in the lecture.</span></td>\n                      </tr><tr>\n                        <th>30</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>31</th><th>\u00a0</th><td class=\"l\"><span>The inverted index consists of multiple index segments, where each segment is only created and then appended.</span></td>\n                      </tr><tr>\n                        <th>32</th><th>\u00a0</th><td class=\"l\"><span>Once each segment is written to disk, it becomes immutable and is never changed again.</span></td>\n                      </tr><tr>\n                        <th>33</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>34</th><th>\u00a0</th><td class=\"l\"><span>Each index segment is a fully searchable inverted index,</span></td>\n                      </tr><tr>\n                        <th>35</th><th>\u00a0</th><td class=\"l\"><span>it contains the inverted index structure as well the document store (map from documentID to actual document),</span></td>\n                      </tr><tr>\n                        <th>36</th><th>\u00a0</th><td class=\"l\"><span>the document ID of each segment is local to the segment itself and it is invisible to the user.</span></td>\n                      </tr><tr>\n                        <th>37</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>38</th><th>\u00a0</th><td class=\"l\"><span>When searching a keyword, all segments are searched, and the result documents from each segment are combined.</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>25</th><td class=\"r\"><span>At a high level, inverted index stores a mapping from keywords to the ids of documents they appear in.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>26</th><td class=\"r\"><span>A simple in-memory structure could be `Map&lt;String, List&lt;Integer&gt;&gt;`, where each key is a keyword token (also called a \"term\"),</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>27</th><td class=\"r\"><span>and each value is a list of (often sorted) document IDs (also called \"postings\").</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>28</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>29</th><td class=\"r\"><span>In this project, the disk-based index structure is based on the idea of LSM (Log-Structured Merge tree).</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>30</th><td class=\"r\"><span>Its main idea is the following:</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>31</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>32</th><td class=\"r\"><span>The inverted index consists of multiple index segments, where each segment is initially created in memory.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>33</th><td class=\"r\"><span>Once a segment is written to disk, it becomes immutable and is never changed.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>34</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>35</th><td class=\"r\"><span>Each index segment is a fully searchable inverted index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>36</th><td class=\"r\"><span>It contains a posting list structure as well as a document store, which is a mapping from a docID to the corresponding document.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>37</th><td class=\"r\"><span>The document IDs within each segment are local in the segment and are invisible to the user.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>38</th><td class=\"r\"><span>These in-disk segments are periodically merged to bigger segments.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>39</th><td class=\"r\"><span></span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>40</th><td class=\"r\"><span>When users search a keyword, all segments are searched, and the result documents from each segment are combined.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>39</th><th>41</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>40</th><th>42</th><td class=\"l\"><span>Example:</span></td>\n                  </tr><tr>\n                          <th>41</th><th>43</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>42</th><th>\u00a0</th><td class=\"l\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>43</th><th>\u00a0</th><td class=\"l\"><span>Add documents \"cat dog\" and \"cat elephant\", then flush to write Segment0.</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>44</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>45</th><td class=\"r\"><span>{{{</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>46</th><td class=\"r\"><span>Add documents Doc{\"cat dog\"} and Doc{\"cat elephant\"}, then flush to Segment0.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>44</th><th>47</th><td class=\"l\"><span>Segment0:</span></td>\n                  </tr><tr>\n                          <th>45</th><th>48</th><td class=\"l\"><span>----------</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>46</th><th>\u00a0</th><td class=\"l\"><span><del>InvertIndex</del>: {\"cat\": [0, 1], \"dog\": [0], \"elephant\": [1]}</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>49</th><td class=\"r\"><span><ins>PostingList</ins>: {\"cat\": [0, 1], \"dog\": [0], \"elephant\": [1]}</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>47</th><th>50</th><td class=\"l\"><span>DocStore: {0: \"cat dog\", 1: \"cat elephant\"}</span></td>\n                  </tr><tr>\n                          <th>48</th><th>51</th><td class=\"l\"><span>----------</span></td>\n                  </tr><tr>\n                          <th>49</th><th>52</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>50</th><th>\u00a0</th><td class=\"l\"><span>Then add documents <del>\"cat dog\" and \"wolf dog\", and flush to write a new Segment,</del> Segment1.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>53</th><td class=\"r\"><span>Then add documents <ins>Doc{\"cat dog\"} and Doc{\"wolf dog\"}, and flush to</ins> Segment1.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>51</th><th>54</th><td class=\"l\"><span>Segment1:</span></td>\n                  </tr><tr>\n                          <th>52</th><th>55</th><td class=\"l\"><span>----------</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>53</th><th>\u00a0</th><td class=\"l\"><span><del>InvertIndex</del>: {\"cat\": [0], \"dog\": [0, 1], \"wolf\": [1]}</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>56</th><td class=\"r\"><span><ins>PostingList</ins>: {\"cat\": [0], \"dog\": [0, 1], \"wolf\": [1]}</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>54</th><th>57</th><td class=\"l\"><span>DocStore: {0: \"cat dog\", 1: \"wolf dog\"}</span></td>\n                  </tr><tr>\n                          <th>55</th><th>58</th><td class=\"l\"><span>----------</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>56</th><th>\u00a0</th><td class=\"l\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>57</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>58</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>59</th><th>\u00a0</th><td class=\"l\"><span>When searching the word \"cat\", first search Segment0 and get [\"cat dog\", \"cat elephant\"],</span></td>\n                      </tr><tr>\n                        <th>60</th><th>\u00a0</th><td class=\"l\"><span>then search Segment1 and get [\"cat dog\"], then combine results to get [\"cat dog\", \"cat elephant\", \"cat dog\"]</span></td>\n                      </tr><tr>\n                        <th>61</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>62</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>63</th><th>\u00a0</th><td class=\"l\"><span>= Coding Tasks =</span></td>\n                      </tr><tr>\n                        <th>64</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>65</th><th>\u00a0</th><td class=\"l\"><span>== Task 1: Implement LSM-like disk-based inverted index that supports insertions. ==</span></td>\n                      </tr><tr>\n                        <th>66</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>67</th><th>\u00a0</th><td class=\"l\"><span>In this task, you'll implement the disk file structure of an inverted index segment.</span></td>\n                      </tr><tr>\n                        <th>68</th><th>\u00a0</th><td class=\"l\"><span>When a document is added via `addDocument()`, it should be first stored in the in-memory buffer.</span></td>\n                      </tr><tr>\n                        <th>69</th><th>\u00a0</th><td class=\"l\"><span>Whenever the number of documents reached default_flush_threshold, or function `flush()` is called,</span></td>\n                      </tr><tr>\n                        <th>70</th><th>\u00a0</th><td class=\"l\"><span>you should create a new inverted index segment with the documents in the buffer.</span></td>\n                      </tr><tr>\n                        <th>71</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>72</th><th>\u00a0</th><td class=\"l\"><span>The specific format of the inverted lists should in general follow what Professor says in lecture.</span></td>\n                      </tr><tr>\n                        <th>73</th><th>\u00a0</th><td class=\"l\"><span>You also have freedom to design the format to make it more efficient to store or search.</span></td>\n                      </tr><tr>\n                        <th>74</th><th>\u00a0</th><td class=\"l\"><span>In principle, the terms can be loaded into memory, but all the posting lists cannot be entirely loaded into memory.</span></td>\n                      </tr><tr>\n                        <th>75</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>76</th><th>\u00a0</th><td class=\"l\"><span>Your implementation should be in the `InvertedIndexManger` class.</span></td>\n                      </tr><tr>\n                        <th>77</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>78</th><th>\u00a0</th><td class=\"l\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>79</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; private InvertedIndexManager(String indexFolder, Analyzer analyzer) {</span></td>\n                      </tr><tr>\n                        <th>80</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; }</span></td>\n                      </tr><tr>\n                        <th>81</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>82</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>83</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Creates an inverted index manager with the folder and an analyzer</span></td>\n                      </tr><tr>\n                        <th>84</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>85</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public static InvertedIndexManager createOrOpen(String indexFolder, Analyzer analyzer) {</span></td>\n                      </tr><tr>\n                        <th>86</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; }</span></td>\n                      </tr><tr>\n                        <th>87</th><th>\u00a0</th><td class=\"l\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>88</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>89</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>90</th><th>\u00a0</th><td class=\"l\"><span>Functions to implement:</span></td>\n                      </tr><tr>\n                        <th>91</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>92</th><th>\u00a0</th><td class=\"l\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>93</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>94</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Adds a document to the inverted index.</span></td>\n                      </tr><tr>\n                        <th>95</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Document should live in a in-memory buffer until `flush()` is called to write them to disk.</span></td>\n                      </tr><tr>\n                        <th>96</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @param document</span></td>\n                      </tr><tr>\n                        <th>97</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>98</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public void addDocument(Document document);</span></td>\n                      </tr><tr>\n                        <th>99</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>100</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>101</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Flushes all the documents in the buffer to disk. If the buffer is empty, it should not do anything.</span></td>\n                      </tr><tr>\n                        <th>102</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* flush() creates a new index segment containing the inverted index and the corresponding document store.</span></td>\n                      </tr><tr>\n                        <th>103</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>104</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public void flush();</span></td>\n                      </tr><tr>\n                        <th>105</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>106</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>107</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Iterates through all the documents in all inverted index segments.</span></td>\n                      </tr><tr>\n                        <th>108</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>109</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public Iterator&lt;Document&gt; documentIterator();</span></td>\n                      </tr><tr>\n                        <th>110</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>111</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>112</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Gets the total number of segments in the inverted index.</span></td>\n                      </tr><tr>\n                        <th>113</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* This function is used for checking correctness in test cases.</span></td>\n                      </tr><tr>\n                        <th>114</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>115</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @return number of index segments.</span></td>\n                      </tr><tr>\n                        <th>116</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>117</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public int getNumSegments();</span></td>\n                      </tr><tr>\n                        <th>118</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>119</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>120</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Reads an inverted index segment into memory based on segmentNum.</span></td>\n                      </tr><tr>\n                        <th>121</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* This function is mainly used for checking correctness in test cases.</span></td>\n                      </tr><tr>\n                        <th>122</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>123</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @param segmentNum n-th segment in the inverted index (start from 0).</span></td>\n                      </tr><tr>\n                        <th>124</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @return in-memory data structure with all contents in the index segment.</span></td>\n                      </tr><tr>\n                        <th>125</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>126</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public InvertedIndexSegmentForTest getIndexSegment(int segmentNum);</span></td>\n                      </tr><tr>\n                        <th>127</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>128</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>129</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* An in-memory representation of an inverted index segment, used *only* for testing purposes.</span></td>\n                      </tr><tr>\n                        <th>130</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>131</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public class InvertedIndexSegmentForTest {</span></td>\n                      </tr><tr>\n                        <th>132</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp; &nbsp; Map&lt;String, List&lt;Integer&gt;&gt; invertedLists;</span></td>\n                      </tr><tr>\n                        <th>133</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp; &nbsp; Map&lt;Integer, Document&gt; documents;</span></td>\n                      </tr><tr>\n                        <th>134</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; }</span></td>\n                      </tr><tr>\n                        <th>135</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>136</th><th>\u00a0</th><td class=\"l\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>137</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>138</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>139</th><th>\u00a0</th><td class=\"l\"><span>== Task 2: Implement merge of inverted index segments. ==</span></td>\n                      </tr><tr>\n                        <th>140</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>141</th><th>\u00a0</th><td class=\"l\"><span>In this task, you'll implement merging index segments. We cannot let number of segments grow infinitely because it</span></td>\n                      </tr><tr>\n                        <th>142</th><th>\u00a0</th><td class=\"l\"><span>would mean searching a keyword needs to go through a lot of documents.</span></td>\n                      </tr><tr>\n                        <th>143</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>144</th><th>\u00a0</th><td class=\"l\"><span>Whenever the number of segments has reached the default_merge_threshold, or `mergeAllSegments()` is called,</span></td>\n                      </tr><tr>\n                        <th>145</th><th>\u00a0</th><td class=\"l\"><span>you need to merge *all* segments in the inverted index pair-wise.</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>59</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>60</th><td class=\"r\"><span>When searching the word \"cat\", we first search Segment0 and get [Doc{\"cat dog\"}, Doc{\"cat elephant\"}].</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>61</th><td class=\"r\"><span>Then we search Segment1 and get [Doc{\"cat dog\"}]. We combine these results and get [Doc{\"cat dog\"}, Doc{\"cat elephant\"}, Doc{\"cat dog\"}]</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>62</th><td class=\"r\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>63</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>64</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>65</th><td class=\"r\"><span>== Task 1: Implement LSM-like disk-based inverted index that supports insertions only. ==</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>66</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>67</th><td class=\"r\"><span>In this task, you'll implement the disk file structure of a single segment.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>68</th><td class=\"r\"><span>When a document is added via `addDocument()`, it should be first stored in a in-memory buffer.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>69</th><td class=\"r\"><span>You need to design the data structure for the in-memory segment.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>70</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>71</th><td class=\"r\"><span>Whenever the number of documents reaches a parameter default_flush_threshold, or function `flush()` is called,</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>72</th><td class=\"r\"><span>you should flush the segment to disk.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>73</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>74</th><td class=\"r\"><span>The specific format of the disk posting lists should follow what Professor says in lectures.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>75</th><td class=\"r\"><span>You also have freedom to improve the format to make it more efficient.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>76</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>77</th><td class=\"r\"><span>Specific functions to implement:</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>78</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>79</th><td class=\"r\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>80</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>81</th><td class=\"r\"><span>&nbsp;* Adds a document to the inverted index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>82</th><td class=\"r\"><span>&nbsp;* Document should live in a in-memory buffer until `flush()` is called to write the segment to disk.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>83</th><td class=\"r\"><span>&nbsp;* @param document</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>84</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>85</th><td class=\"r\"><span>public void addDocument(Document document)</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>86</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>87</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>88</th><td class=\"r\"><span>&nbsp;* Flushes all the documents in the in-memory segment buffer to disk. If the buffer is empty, it should not do anything.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>89</th><td class=\"r\"><span>&nbsp;* flush() writes the segment to disk containing the posting list and the corresponding document store.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>90</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>91</th><td class=\"r\"><span>public void flush()</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>92</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>93</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>94</th><td class=\"r\"><span>&nbsp;* Iterates through all the documents in all disk segments.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>95</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>96</th><td class=\"r\"><span>public Iterator&lt;Document&gt; documentIterator() {</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>97</th><td class=\"r\"><span>&nbsp; &nbsp; throw new UnsupportedOperationException();</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>98</th><td class=\"r\"><span>}</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>99</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>100</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>101</th><td class=\"r\"><span>&nbsp;* Gets the total number of segments in the inverted index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>102</th><td class=\"r\"><span>&nbsp;* This function is used for checking correctness in test cases.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>103</th><td class=\"r\"><span>&nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>104</th><td class=\"r\"><span>&nbsp;* @return number of index segments.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>105</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>106</th><td class=\"r\"><span>public int getNumSegments()</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>107</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>108</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>109</th><td class=\"r\"><span>&nbsp;* Reads a disk segment into memory based on segmentNum.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>110</th><td class=\"r\"><span>&nbsp;* This function is mainly used for checking correctness in test cases.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>111</th><td class=\"r\"><span>&nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>112</th><td class=\"r\"><span>&nbsp;* @param segmentNum n-th segment in the inverted index (start from 0).</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>113</th><td class=\"r\"><span>&nbsp;* @return in-memory data structure with all contents in the index segment, null if segmentNum don't exist.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>114</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>115</th><td class=\"r\"><span>public InvertedIndexSegmentForTest getIndexSegment(int segmentNum)</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>116</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>117</th><td class=\"r\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>118</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>119</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>120</th><td class=\"r\"><span>== Task 2: Implement merge of disk segments. ==</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>121</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>122</th><td class=\"r\"><span>In this task, you'll implement the merging of disk segments. We cannot let the number of segments grow indefinitely</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>123</th><td class=\"r\"><span>because otherwise searching a keyword needs to go through a lot of segments.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>124</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>125</th><td class=\"r\"><span>In general, there are many merging policies. In this task, we want to implement a particular policy.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>126</th><td class=\"r\"><span>Whenever the number of segments has reached a parameter default_merge_threshold, or `mergeAllSegments()` is called,</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>127</th><td class=\"r\"><span>you need to merge *all* the disk segments pair-wise.</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>128</th><td class=\"r\"><span>For example, suppose there are 10 disk segments. After the merge, we should have 5 disk segments.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>146</th><th>129</th><td class=\"l\"><span>You could assume merging only happens when you have an even number of segments.</span></td>\n                  </tr><tr>\n                          <th>147</th><th>130</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>148</th><th>\u00a0</th><td class=\"l\"><span>When merging two segments into one, since each segment has its own local document ID, you need to bump up all</span></td>\n                      </tr><tr>\n                        <th>149</th><th>\u00a0</th><td class=\"l\"><span>document IDs in one of the segments.</span></td>\n                      </tr><tr>\n                        <th>150</th><th>\u00a0</th><td class=\"l\"><span>As an example, Segment0 contains local docID 1-100, Segment1 contains local docID 1-100,</span></td>\n                      </tr><tr>\n                        <th>151</th><th>\u00a0</th><td class=\"l\"><span>first find the max docID in Segment0, which is 100, then bump up Segment1's docIDs to become 101-200, then do the merge.</span></td>\n                      </tr><tr>\n                        <th>152</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>153</th><th>\u00a0</th><td class=\"l\"><span>Functions to implement:</span></td>\n                      </tr><tr>\n                        <th>154</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>155</th><th>\u00a0</th><td class=\"l\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>156</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>157</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Merges all the index segments of the inverted index pair-wise.</span></td>\n                      </tr><tr>\n                        <th>158</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>159</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public void mergeAllSegments();</span></td>\n                      </tr><tr>\n                        <th>160</th><th>\u00a0</th><td class=\"l\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>161</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>162</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>163</th><th>\u00a0</th><td class=\"l\"><span>Task 3: Implement keyword search, boolean AND search, and boolean OR search.</span></td>\n                      </tr><tr>\n                        <th>164</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>165</th><th>\u00a0</th><td class=\"l\"><span>In this task, you'll implement searching on top of the inverted index.</span></td>\n                      </tr><tr>\n                        <th>166</th><th>\u00a0</th><td class=\"l\"><span>You could assume all documents are flushed to disk index segments when doing search.</span></td>\n                      </tr><tr>\n                        <th>167</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>168</th><th>\u00a0</th><td class=\"l\"><span>For a query keyword, you need to first analyze it using the analyzer.</span></td>\n                      </tr><tr>\n                        <th>169</th><th>\u00a0</th><td class=\"l\"><span>You could assume after tokenization and stemming, the result only has 1 token, or is empty (such as the query is a stop ord).</span></td>\n                      </tr><tr>\n                        <th>170</th><th>\u00a0</th><td class=\"l\"><span>If the query is empty, searching should not return any results.</span></td>\n                      </tr><tr>\n                        <th>171</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>172</th><th>\u00a0</th><td class=\"l\"><span>Functions to implement:</span></td>\n                      </tr><tr>\n                        <th>173</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>174</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>175</th><th>\u00a0</th><td class=\"l\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>176</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>177</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Performs a keyword search on the inverted index.</span></td>\n                      </tr><tr>\n                        <th>178</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>179</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @param query keyword query, cannot be null.</span></td>\n                      </tr><tr>\n                        <th>180</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @return a iterator of documents matching the query</span></td>\n                      </tr><tr>\n                        <th>181</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>182</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public Iterator&lt;Document&gt; searchQuery(String query);</span></td>\n                      </tr><tr>\n                        <th>183</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>184</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>185</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Performs an AND boolean search on the inverted index.</span></td>\n                      </tr><tr>\n                        <th>186</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>187</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @param queries</span></td>\n                      </tr><tr>\n                        <th>188</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @return</span></td>\n                      </tr><tr>\n                        <th>189</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>190</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public Iterator&lt;Document&gt; searchAndQuery(List&lt;String&gt; queries);</span></td>\n                      </tr><tr>\n                        <th>191</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>192</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>193</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Performs an OR boolean search on the inverted index.</span></td>\n                      </tr><tr>\n                        <th>194</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>195</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @param queries</span></td>\n                      </tr><tr>\n                        <th>196</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @return</span></td>\n                      </tr><tr>\n                        <th>197</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>198</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public Iterator&lt;Document&gt; searchOrQuery(List&lt;String&gt; queries);</span></td>\n                      </tr><tr>\n                        <th>199</th><th>\u00a0</th><td class=\"l\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>200</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>201</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>202</th><th>\u00a0</th><td class=\"l\"><span>Task 4 (Optional Extra Credit): Implement deletions.</span></td>\n                      </tr><tr>\n                        <th>203</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>204</th><th>\u00a0</th><td class=\"l\"><span>In our LSM-like index structure, deletion is implemented by maintaining a separate deletion marks per segment.</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>131</th><td class=\"r\"><span>When merging two segments into one, since each segment has its own local document IDs, you need to generate new document IDs for the merged segment.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>132</th><td class=\"r\"><span>In addition, you can assume we have enough memory to load the keywords of both segments.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>133</th><td class=\"r\"><span>BUT, you cannot assume we have enough memory to store the posting lists and documents of the segments.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>134</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>135</th><td class=\"r\"><span>Specific function to implement:</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>136</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>137</th><td class=\"r\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>138</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>139</th><td class=\"r\"><span>&nbsp;* Merges all the disk segments of the inverted index pair-wise.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>140</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>141</th><td class=\"r\"><span>public void mergeAllSegments()</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>142</th><td class=\"r\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>143</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>144</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>145</th><td class=\"r\"><span>== Task 3: Implement keyword search, boolean AND search, and boolean OR search. ==</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>146</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>147</th><td class=\"r\"><span>In this task, you'll implement searching using the inverted index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>148</th><td class=\"r\"><span>You could assume all documents are flushed to disk segments when doing a search.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>149</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>150</th><td class=\"r\"><span>Here we make the same assumption as in the merge case regarding what can be stored in memory.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>151</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>152</th><td class=\"r\"><span>For every query keyword, you need to first analyze it using the provided analyzer before using it to access the inverted index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>153</th><td class=\"r\"><span>You can assume the analyzer will not convert one keyword to multiple keywords.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>154</th><td class=\"r\"><span>If the keyword is empty, searching should not return any results.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>155</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>156</th><td class=\"r\"><span>Specific functions to implement:</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>157</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>158</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>159</th><td class=\"r\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>160</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>161</th><td class=\"r\"><span>&nbsp;* Performs a single keyword search on the inverted index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>162</th><td class=\"r\"><span>&nbsp;* You could assume the analyzer won't convert the keyword into multiple tokens.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>163</th><td class=\"r\"><span>&nbsp;* If the keyword is empty, it should not return anything.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>164</th><td class=\"r\"><span>&nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>165</th><td class=\"r\"><span>&nbsp;* @param keyword keyword, cannot be null.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>166</th><td class=\"r\"><span>&nbsp;* @return a iterator of documents matching the query</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>167</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>168</th><td class=\"r\"><span>public Iterator&lt;Document&gt; searchQuery(String keyword)</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>169</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>170</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>171</th><td class=\"r\"><span>&nbsp;* Performs an AND boolean search on the inverted index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>172</th><td class=\"r\"><span>&nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>173</th><td class=\"r\"><span>&nbsp;* @param keywords a list of keywords in the AND query</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>174</th><td class=\"r\"><span>&nbsp;* @return a iterator of documents matching the query</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>175</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>176</th><td class=\"r\"><span>public Iterator&lt;Document&gt; searchAndQuery(List&lt;String&gt; keywords)</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>177</th><td class=\"r\"><span>}</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>178</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>179</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>180</th><td class=\"r\"><span>&nbsp;* Performs an OR boolean search on the inverted index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>181</th><td class=\"r\"><span>&nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>182</th><td class=\"r\"><span>&nbsp;* @param keywords a list of keywords in the OR query</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>183</th><td class=\"r\"><span>&nbsp;* @return a iterator of documents matching the query</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>184</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>185</th><td class=\"r\"><span>public Iterator&lt;Document&gt; searchOrQuery(List&lt;String&gt; keywords) </span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>186</th><td class=\"r\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>187</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>188</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>189</th><td class=\"r\"><span>== Task 4 (Optional Extra Credit): Implement deletions. ==</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>190</th><td class=\"r\"><span></span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>191</th><td class=\"r\"><span>In our LSM-like index structure, deletion could be implemented by maintaining a list deleted document IDs per segment.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>205</th><th>192</th><td class=\"l\"><span>The document is not actually deleted in the inverted index nor document store.</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>206</th><th>\u00a0</th><td class=\"l\"><span>When reading or searching, the docID is checked with the deletion mark to see if the document is deleted.</span></td>\n                      </tr><tr>\n                        <th>207</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>208</th><th>\u00a0</th><td class=\"l\"><span>The document should be deleted when merging two index segments.</span></td>\n                      </tr><tr>\n                        <th>209</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>210</th><th>\u00a0</th><td class=\"l\"><span>Functions to implement:</span></td>\n                      </tr><tr>\n                        <th>211</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>212</th><th>\u00a0</th><td class=\"l\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>213</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>214</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* Deletes all documents in all segments of the inverted index that match the query.</span></td>\n                      </tr><tr>\n                        <th>215</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;* @param query</span></td>\n                      </tr><tr>\n                        <th>216</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>217</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public void deleteDocuments(String query)</span></td>\n                      </tr><tr>\n                        <th>218</th><th>\u00a0</th><td class=\"l\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>219</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>220</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>221</th><th>\u00a0</th><td class=\"l\"><span>Task 5 (Optional Extra Credit): Implement compression</span></td>\n                      </tr><tr>\n                        <th>222</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>193</th><td class=\"r\"><span>When reading or searching, each docID is checked to see if it has been deleted.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>194</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>195</th><td class=\"r\"><span>Those deleted documents within a segment should be physically deleted when we merge it with another segment.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>196</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>197</th><td class=\"r\"><span>Specific functions to implement:</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>198</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>199</th><td class=\"r\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>200</th><td class=\"r\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>201</th><td class=\"r\"><span>&nbsp;* Deletes all documents in all disk segments of the inverted index that match the keyword.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>202</th><td class=\"r\"><span>&nbsp;* @param keyword </span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>203</th><td class=\"r\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>204</th><td class=\"r\"><span>public void deleteDocuments(String keyword)</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>205</th><td class=\"r\"><span>}}}</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>206</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>207</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>208</th><td class=\"r\"><span>== Task 5 (Optional Extra Credit): Implement compression. ==</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>209</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>210</th><td class=\"r\"><span>Implement Compression of the inverted index of your disk index segment. The details would be covered by Professor in lectures.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>211</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>212</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>213</th><td class=\"r\"><span>== Test cases ==</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>214</th><td class=\"r\"><span>Please follow the same guideline and procedure as in project 1. The assignment of test cases would be released later.</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>215</th><td class=\"r\"><span></span></td>\n                      </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n      </div>\n  </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>\n", "encoding": "utf-8"}