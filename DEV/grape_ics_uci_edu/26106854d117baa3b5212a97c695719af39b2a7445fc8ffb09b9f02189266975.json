{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs221-2019-spring-project3?action=diff&version=4", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs221-2019-spring-project3 (diff) \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=history\" title=\"Page history\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=diff&amp;version=5\" title=\"Version 5\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"prev\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=diff&amp;version=3\" title=\"Version 3\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/wiki/public/chrome/common/css/diff.css\" />\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span>&larr; <a class=\"prev\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=diff&amp;version=3\" title=\"Version 3\">Previous Change</a></span></li><li><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=history\" title=\"Page history\">Wiki History</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=diff&amp;version=5\" title=\"Version 5\">Next Change</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n      <h1>\n        Changes between\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=3\">Version 3</a> and\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=4\">Version 4</a> of\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project3\">cs221-2019-spring-project3</a>\n      </h1>\n      <form method=\"post\" id=\"prefs\" action=\"/wiki/public/wiki/cs221-2019-spring-project3?version=4\"><div><input type=\"hidden\" name=\"__FORM_TOKEN\" value=\"0d1d0242981fb8dcce42c763\" /></div>\n        <div>\n          <input type=\"hidden\" name=\"action\" value=\"diff\" />\n          <input type=\"hidden\" name=\"version\" value=\"4\" />\n          <input type=\"hidden\" name=\"old_version\" value=\"3\" />\n          \n  <label for=\"style\">View differences</label>\n  <select id=\"style\" name=\"style\">\n    <option selected=\"selected\" value=\"inline\">inline</option>\n    <option value=\"sidebyside\">side by side</option>\n  </select>\n  <div class=\"field\">\n    <label><input type=\"radio\" name=\"contextall\" value=\"0\" checked=\"checked\" />\n             Show</label>\n      <label><input type=\"text\" name=\"contextlines\" id=\"contextlines\" size=\"2\" maxlength=\"3\" value=\"2\" />\n             lines around each change</label><br />\n    <label><input type=\"radio\" name=\"contextall\" value=\"1\" />\n           Show the changes in full context</label>\n  </div>\n  <fieldset id=\"ignore\">\n    <legend>Ignore:</legend>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignoreblanklines\" name=\"ignoreblanklines\" />\n      <label for=\"ignoreblanklines\">Blank lines</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorecase\" name=\"ignorecase\" />\n      <label for=\"ignorecase\">Case changes</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorewhitespace\" name=\"ignorewhitespace\" />\n      <label for=\"ignorewhitespace\">White space changes</label>\n    </div>\n  </fieldset>\n  <div class=\"buttons\">\n    <input type=\"submit\" name=\"update\" value=\"Update\" />\n  </div>\n\n        </div>\n      </form>\n      <dl id=\"overview\">\n        <dt class=\"property time\">Timestamp:</dt>\n        <dd class=\"time\">\n            May 6, 2019 1:08:12 PM (<a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-05-06T13%3A08%3A12-07%3A00&amp;precision=second\" title=\"See timeline at May 6, 2019 1:08:12 PM\">5 months</a> ago)\n        </dd>\n        <dt class=\"property author\">Author:</dt>\n        <dd class=\"author\">\n          zuozhi\n        </dd>\n        <dt class=\"property message\">Comment:</dt>\n        <dd class=\"message\">\n          \n          <p>\n--\n</p>\n\n        </dd>\n      </dl>\n      <div class=\"diff\">\n        <div class=\"legend\" id=\"diff-legend\">\n          <h3>Legend:</h3>\n          <dl>\n            <dt class=\"unmod\"></dt><dd>Unmodified</dd>\n            <dt class=\"add\"></dt><dd>Added</dd>\n            <dt class=\"rem\"></dt><dd>Removed</dd>\n            <dt class=\"mod\"></dt><dd>Modified</dd>\n          </dl>\n        </div>\n        <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2 id=\"file0\">\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=4\">cs221-2019-spring-project3</a>\n        </h2>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"Version 3\">\n                    <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=3#L7\">\n                      v3</a>\n                  </th>\n                  <th title=\"Version 4\">\n                    <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=4#L7\">\n                      v4</a>\n                  </th>\n                  <td>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>7</th><th>7</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>8</th><th>8</th><td class=\"l\"><span>== Coding Tasks ==</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>9</th><th>\u00a0</th><td class=\"l\"><span>1. Implement LSM-like Positional Index (insertion and merge).<del></del></span></td>\n                      </tr><tr>\n                        <th>10</th><th>\u00a0</th><td class=\"l\"><span>1. Implement Phrase Search.<del></del></span></td>\n                      </tr><tr>\n                        <th>11</th><th>\u00a0</th><td class=\"l\"><span>1. Implement Compression.<del></del></span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>9</th><td class=\"r\"><span>1. Implement LSM-like Positional Index (insertion and merge).<ins>&nbsp;(5 points)</ins></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>10</th><td class=\"r\"><span>1. Implement Phrase Search.<ins>&nbsp;(4 points)</ins></span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>11</th><td class=\"r\"><span>1. Implement Compression.<ins>&nbsp;(6 points)</ins></span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>12</th><th>12</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>13</th><th>13</th><td class=\"l\"><span>== Testing Tasks ==</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=3#L19\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=4#L19\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>19</th><th>19</th><td class=\"l\"><span>== Overview ==</span></td>\n                  </tr><tr>\n                          <th>20</th><th>20</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>21</th><th>\u00a0</th><td class=\"l\"><span>In this project, you'll be implementing a disk-based positional index and the phrase search operations. Compared to the inverted index in project 2, positional index stores the positions of all occurrences of the keywords in a document. In addition, we also store the <del>frequency of a </del></span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>21</th><td class=\"r\"><span>In this project, you'll be implementing a disk-based positional index and the phrase search operations. Compared to the inverted index in project 2, positional index stores the positions of all occurrences of the keywords in a document. In addition, we also store the <ins>term frequency - the number of times a word appears. Positional index is much bigger compared to inverted index, you'll implement delta-encoding and variable-length encoding to compress the inverted lists and positions.</ins></span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>22</th><th>22</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>23</th><th>23</th><td class=\"l\"><span>Positional index enables phrase search. Phrase search means searching a sequence of keywords in exact order. For example, the query \"new york\" will only match documents with \"new\" immediately followed by \"york\". A document like \"new ... other tokens ... york\" won't match.</span></td>\n                  </tr><tr>\n                          <th>24</th><th>24</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>25</th><th>\u00a0</th><td class=\"l\"><span>The \"position\" of a word in the positional index have <del>many different kind</del>s. It could be either character position or token position. Token position might include or exclude stop words. Different kinds of \"position\" also have different meanings on phrase search. For example, \"University of California, Irvine\", if we search the phrase \"University California\", choice on stop words affects the search result.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>25</th><td class=\"r\"><span>The \"position\" of a word in the positional index have <ins>different variation</ins>s. It could be either character position or token position. Token position might include or exclude stop words. Different kinds of \"position\" also have different meanings on phrase search. For example, \"University of California, Irvine\", if we search the phrase \"University California\", choice on stop words affects the search result.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>26</th><th>26</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>27</th><th>27</th><td class=\"l\"><span>In this project, we stores the '''token''' position. We use the tokens generated from the analyzer - if the analyzer removes the stop words, then the stop words are also excluded from the positional index. For example, the positions of \"cat and dog\" is \"{cat: 1}, {dog: 2}\".</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=3#L30\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=4#L30\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>30</th><th>30</th><td class=\"l\"><span>== Task 1: Implement LSM-like positional index. ==</span></td>\n                  </tr><tr>\n                          <th>31</th><th>31</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>32</th><th>\u00a0</th><td class=\"l\"><span>The on disk index structure of the positional index is similar to the LSM structure in project 2. The behavior for `addDocument`, `flush`, and `merge` operations should be the same as project 2. <del></del></span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>32</th><td class=\"r\"><span>The on disk index structure of the positional index is similar to the LSM structure in project 2. The behavior for `addDocument`, `flush`, and `merge` operations should be the same as project 2. <ins>You should continue using the `InvertedIndexManager` from project 2. </ins></span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>33</th><th>33</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>The index format of the positional index should be based on top of the inverted index format in project 2. Recall in project 2 we have 3 files per segment: docStore, dictionary, and invertedLists. The dictionary stores the pointer from a token to the inverted lists of the token. In this project, we need another \"position\" file to store the position list of a token in a document. The \"InvertedLists\" needs to store an additional pointer to the position list per documentID.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>You need to implement the following functions newly added to `InvertedIndexManager`</ins></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>34</th><th>37</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>35</th><th>38</th><td class=\"l\"><span>{{{</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>36</th><th>\u00a0</th><td class=\"l\"><span>--- dictionary ---</span></td>\n                      </tr><tr>\n                        <th>37</th><th>\u00a0</th><td class=\"l\"><span>&lt;term1&gt;: &lt;pointer_to_positional_posting&gt;, &lt;term2&gt;: &lt;pointer_to_positional_posting&gt;, ...</span></td>\n                      </tr><tr>\n                        <th>38</th><th>\u00a0</th><td class=\"l\"><span>--- positional posting lists ---</span></td>\n                      </tr><tr>\n                        <th>39</th><th>\u00a0</th><td class=\"l\"><span>&lt;docID1&gt;: &lt;num_of_occurrences&gt;, [pos1, pos2, pos3, ...], &lt;docID2&gt;: &lt;num_of_occurrences&gt;, [pos1, pos2, pos3, ...]</span></td>\n                      </tr><tr>\n                        <th>40</th><th>\u00a0</th><td class=\"l\"><span>}}}</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>39</th><td class=\"r\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>40</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* Creates a positional index with the given folder, analyzer, and the compressor.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>41</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* Compressor must be used to compress the inverted lists and the position lists.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>42</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>43</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>44</th><td class=\"r\"><span>&nbsp; &nbsp; public static InvertedIndexManager createOrOpenPositional(String indexFolder, Analyzer analyzer, Compressor compressor)</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>41</th><th>45</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>42</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>43</th><th>\u00a0</th><td class=\"l\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>44</th><th>\u00a0</th><td class=\"l\"><span>public void addDocument(Document document)</span></td>\n                      </tr><tr>\n                        <th>45</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>46</th><th>\u00a0</th><td class=\"l\"><span>public void flush()</span></td>\n                      </tr><tr>\n                        <th>47</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>48</th><th>\u00a0</th><td class=\"l\"><span>public Iterator&lt;Document&gt; documentIterator()</span></td>\n                      </tr><tr>\n                        <th>49</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>50</th><th>\u00a0</th><td class=\"l\"><span>public int getNumSegments()</span></td>\n                      </tr><tr>\n                        <th>51</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>52</th><th>\u00a0</th><td class=\"l\"><span>public PositionalIndexSegmentForTest getIndexSegment(int segmentNum)</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>46</th><td class=\"r\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>47</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* Reads a disk segment of a positional index into memory based on segmentNum.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>48</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* This function is mainly used for checking correctness in test cases.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>49</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>50</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* Throws UnsupportedOperationException if the inverted index is not a positional index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>51</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>52</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* @param segmentNum n-th segment in the inverted index (start from 0).</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>53</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* @return in-memory data structure with all contents in the index segment, null if segmentNum don't exist.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>54</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>55</th><td class=\"r\"><span>&nbsp; &nbsp; public PositionalIndexSegmentForTest getIndexSegmentPositional(int segmentNum)</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>53</th><th>56</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>54</th><th>57</th><td class=\"l\"><span>}}}</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=3#L60\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=4#L63\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>60</th><th>63</th><td class=\"l\"><span>The keywords in the list represents a consecutive sequence of keywords, a document only matches if it matches the sequence in exact order.</span></td>\n                  </tr><tr>\n                          <th>61</th><th>64</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>62</th><th>\u00a0</th><td class=\"l\"><span><del>The following are specific functions to implement</del>:</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>65</th><td class=\"r\"><span><ins>Implement the following function</ins>:</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>63</th><th>66</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>64</th><th>67</th><td class=\"l\"><span>{{{</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>65</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; public Iterator&lt;Document&gt; pharseSearch(List&lt;String&gt; keywords) </span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>68</th><td class=\"r\"><span>&nbsp; &nbsp; /**</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>69</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>70</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* Performs a phrase search on a positional index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>71</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* Phrase search means the document must contain the consecutive sequence of keywords in exact order.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>72</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>73</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* You could assume the analyzer won't convert each keyword into multiple tokens.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>74</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* Throws UnsupportedOperationException if the inverted index is not a positional index.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>75</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>76</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* @param phrase, a consecutive sequence of keywords</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>77</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;* @return a iterator of documents matching the query</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>78</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>79</th><td class=\"r\"><span>&nbsp; &nbsp; public Iterator&lt;Document&gt; searchPhraseQuery(List&lt;String&gt; phrase)</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>80</th><td class=\"r\"><span></span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>66</th><th>81</th><td class=\"l\"><span>}}}</span></td>\n                  </tr><tr>\n                          <th>67</th><th>82</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=3#L69\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=4#L84\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>69</th><th>84</th><td class=\"l\"><span>== Task 3: Implement compression. ==</span></td>\n                  </tr><tr>\n                          <th>70</th><th>85</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>86</th><td class=\"r\"><ins>In this task, you'll implement delta encoding and variable length encoding in to one compressor. Implement the `encode` and `decode` functions for `DeltaVarLenCompressor`.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>87</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>88</th><td class=\"r\"><ins>Delta Encoding means storing the difference (delta) between adjacent integers rather than the actual number. For example, given an list `[1, 5, 8, 13, 20]`, the delta encoding stores `[1, 4, 3, 5, 7]`. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>89</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>90</th><td class=\"r\"><ins>Variable length encoding of an integer works similarly to UTF-8. We use a variable number of bytes instead of a constant 4 bytes to represent an integer. Specifically, in each byte, the first bit indicates if there are more bytes to read - `1` means reading the next byte and `0` means termination, and the rest 7 bits are used to encode the integer value. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>91</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>92</th><td class=\"r\"><ins>For example, int value `1` is encoded as `0000 0001`. The first byte `0` means no more bytes to read, and the rest 7 bits `000 0001` represents 1. int value `128` is encoded as `1000 0001 0000 0000`. The first bit in the first byte indicates reading the next byte. int value `16,384` (`2^14`) is encoded as `1000 0001 1000 0000 0000 0000`.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>93</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>94</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>95</th><td class=\"r\"><ins>&nbsp; &nbsp; /**</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>96</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp;* Encodes a list of integers to a byte array.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>97</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp;*/</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>98</th><td class=\"r\"><ins>&nbsp; &nbsp; byte[] encode(List&lt;Integer&gt; integers);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>99</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>100</th><td class=\"r\"><ins>&nbsp; &nbsp; /**</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>101</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp;* Decodes part of a byte array to a list of integers.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>102</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp;*</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>103</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp;* @param bytes bytes to decode</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>104</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp;* @param startOffset starting position to decode</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>105</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp;* @param length number of bytes to decode from start position</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>106</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp;*/</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>107</th><td class=\"r\"><ins>&nbsp; &nbsp; List&lt;Integer&gt; decode(byte[] bytes, int startOffset, int length);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>108</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>71</th><th>109</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>72</th><th>110</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>73</th><th>111</th><td class=\"l\"><span>== Test cases ==</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>74</th><th>\u00a0</th><td class=\"l\"><span>Please follow the similar general guideline and procedure as in project 1 and project 2. <del></del>Test case assignments will be released soon.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>112</th><td class=\"r\"><span>Please follow the similar general guideline and procedure as in project 1 and project 2. <ins>Please put all test cases in the package `edu.uci.ics.cs221.index.positional`. </ins>Test case assignments will be released soon.</span></td>\n                      </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n      </div>\n  </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>\n", "encoding": "utf-8"}