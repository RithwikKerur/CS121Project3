{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&version=1", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs122b-2019-winter-project2 (diff) \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=history\" title=\"Page history\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=2\" title=\"Version 2\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/wiki/public/chrome/common/css/diff.css\" />\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span class=\"missing\">&larr; Previous Change</span></li><li><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=history\" title=\"Page history\">Wiki History</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=2\" title=\"Version 2\">Next Change</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n      <h1>\n        Changes between\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=0\">Initial Version</a> and\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=1\">Version 1</a> of\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2\">cs122b-2019-winter-project2</a>\n      </h1>\n      <form method=\"post\" id=\"prefs\" action=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=1\"><div><input type=\"hidden\" name=\"__FORM_TOKEN\" value=\"07ff988bdd90b040eb128b04\" /></div>\n        <div>\n          <input type=\"hidden\" name=\"action\" value=\"diff\" />\n          <input type=\"hidden\" name=\"version\" value=\"1\" />\n          <input type=\"hidden\" name=\"old_version\" value=\"0\" />\n          \n  <label for=\"style\">View differences</label>\n  <select id=\"style\" name=\"style\">\n    <option selected=\"selected\" value=\"inline\">inline</option>\n    <option value=\"sidebyside\">side by side</option>\n  </select>\n  <div class=\"field\">\n    <label><input type=\"radio\" name=\"contextall\" value=\"0\" checked=\"checked\" />\n             Show</label>\n      <label><input type=\"text\" name=\"contextlines\" id=\"contextlines\" size=\"2\" maxlength=\"3\" value=\"2\" />\n             lines around each change</label><br />\n    <label><input type=\"radio\" name=\"contextall\" value=\"1\" />\n           Show the changes in full context</label>\n  </div>\n  <fieldset id=\"ignore\">\n    <legend>Ignore:</legend>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignoreblanklines\" name=\"ignoreblanklines\" />\n      <label for=\"ignoreblanklines\">Blank lines</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorecase\" name=\"ignorecase\" />\n      <label for=\"ignorecase\">Case changes</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorewhitespace\" name=\"ignorewhitespace\" />\n      <label for=\"ignorewhitespace\">White space changes</label>\n    </div>\n  </fieldset>\n  <div class=\"buttons\">\n    <input type=\"submit\" name=\"update\" value=\"Update\" />\n  </div>\n\n        </div>\n      </form>\n      <dl id=\"overview\">\n        <dt class=\"property time\">Timestamp:</dt>\n        <dd class=\"time\">\n            Jan 8, 2019 8:52:49 PM (<a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-01-08T20%3A52%3A49-08%3A00&amp;precision=second\" title=\"See timeline at Jan 8, 2019 8:52:49 PM\">9 months</a> ago)\n        </dd>\n        <dt class=\"property author\">Author:</dt>\n        <dd class=\"author\">\n          dayueb\n        </dd>\n        <dt class=\"property message\">Comment:</dt>\n        <dd class=\"message\">\n          \n          <p>\n--\n</p>\n\n        </dd>\n      </dl>\n      <div class=\"diff\">\n        <div class=\"legend\" id=\"diff-legend\">\n          <h3>Legend:</h3>\n          <dl>\n            <dt class=\"unmod\"></dt><dd>Unmodified</dd>\n            <dt class=\"add\"></dt><dd>Added</dd>\n            <dt class=\"rem\"></dt><dd>Removed</dd>\n            <dt class=\"mod\"></dt><dd>Modified</dd>\n          </dl>\n        </div>\n        <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2 id=\"file0\">\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=1\">cs122b-2019-winter-project2</a>\n        </h2>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"Version currently edited\">\n                    <a href=\"#L1\">\n                      v1</a>\n                  </th>\n                  <th title=\"Version 1\">\n                    <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=1#L1\">\n                      v1</a>\n                  </th>\n                  <td>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins>= Project 2: Starting Fabflix Business (Under Construction)=</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>Due: ''Week 5 Friday, May. 4'' 11:45 pm. Due on Github.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>'''Project Description'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp;* [#Overview Project 2 Overview]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp;* [#StepByStep Step by Step]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp;* [#DeploymentOnAWS Deployment on AWS]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp;* [#Grading Demonstration and Grading Criteria]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>'''Resources'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp;* Examples we provided:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp;* [#FormExample Form example], [http://users.polytech.unice.fr/~buffa/cours/internet/POLYS/servlets/Servlet-Tutorial-Form-Data.html an online tutorial of Servlet and use form data]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp;* [#ServletSession Servlet Session examples]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp;* [#BackendAPI Frontend-Backend Separation] (Optional): project2-api-example and project2-login-example</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp;* [#JSP JSP example] (Optional) [https://www.guru99.com/jsp-tutorial.html online JSP tutorial] </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp;* A very good !JavaScript and jQuery tutorial: [http://jqfundamentals.com/ http://jqfundamentals.com/] </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp;* Bootstrap is a popular !JavaScript library to make your webpage looks modern and pretty. Here are some tutorials: https://www.toptal.com/front-end/what-is-bootstrap-a-short-tutorial-on-the-what-why-and-how https://www.codeofaninja.com/2014/05/bootstrap-tutorial-beginners-step-step.html</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>[[Span(id=Overview)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>== Project 2 Overview ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>In this project, you will start the Fabflix business! In&nbsp; particular, you will provide Web-based interfaces to allow customers&nbsp; to browse/search for movie information, add interesting movies to their shopping cart, and check out. The following figure shows the&nbsp; flow of the interfaces you need to implement.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>[[Image(wiki:cs122b-2018-winter-project2:design-diagram.jpg)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>The following are details about the interfaces.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp;* The \"Login\" page asks a customer to provide an email and a&nbsp; password in order to log into the system. '''Use HTTP POST instead of HTTP&nbsp; GET'''[[BR]] so that the username and password are not displayed on the address bar.&nbsp; Note that the email and password are attributes of the customer table.&nbsp; You should use the customer table for authentication, '''NOT''' the&nbsp; database login/password (such as \"testuser\" and \"testpass\").</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp;* On the \"Main\" page, the customer can choose either to \"Search\" for movies or \"Browse\" for movies.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp;* On the \"Searching\" page, the customer can search for movies by any of the following attributes or their combination (logical \"AND\"&nbsp; operation):</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp;* title;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp;* year;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp;* director;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp;* star's name. You need to return the stars whose name contains the name user types in. For example, the name \"Peter Anteater\" should appear when searching \"Peter\" or \"Anteater\".</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; Check http://www.imdb.com/search/title&nbsp; to see an example of the interface. Of course your interface can have a&nbsp; different style.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp;* The \"Movie list\" page shows the results of the search, and the results are formatted as a table with at least the following columns:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp;* id;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp;* title (hyperlinked);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp;* year;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp;* director;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp;* list of genres;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp;* list of stars (each hyperlinked);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp;* rating;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; The following requirements should be met.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp;* ''Substring matching'': The user does not have to provide an exact value for an attribute, and the system should support \"substring matching\". For example, a query asking for \"term\" for the \"title\" attribute should return movies such as \"Terminal\" and \"Terminator.\" You&nbsp; can use the \"LIKE\" and \"ILIKE\" SQL operators for pattern matching in any way you wish.&nbsp; For example:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SELECT \"column_name\"'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [[BR]]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM \"table_name\"'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [[BR]]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE \"column_name\" LIKE pattern'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pattern'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; often consists of wildcards.[[BR]]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Note: '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; You are required to write an explanation of how/where you use the LIKE predicate in your codebase. You should put this in a text file (plain text or markdown) in your Github repository, for example, \"like-predicate.txt\", or \"like-predicate.md\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp;* Here are some examples:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp;* 'A_Z':&nbsp; All string that starts with 'A', another character, and end with 'Z'.&nbsp; For example, 'ABZ' and 'A2Z' would both satisfy the condition, while&nbsp; 'AKKZ' would not (because there are two characters between A and Z&nbsp; instead of one).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp;* 'ABC%': All strings that start with 'ABC'. For example,&nbsp; 'ABCD' and 'ABCABC' would both satisfy the condition.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>&nbsp; &nbsp;* '%XYZ': All strings that end with 'XYZ'. For example, 'WXYZ'&nbsp; and 'ZZXYZ' would both satisfy the condition.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>&nbsp; &nbsp;* '%AN%':&nbsp; All strings that contain the pattern 'AN' anywhere. For example, 'LOS ANGELES' and 'SAN FRANCISCO' would both satisfy the condition.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp;* ''Sorting'': A user should be able to click on the header of title or rating, so that the results will be sorted (ascending or descending) by the corresponding attribute.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>&nbsp;* ''!Previous/Next'': Since there could be many movies on the list, each page can only display a certain number (''N'') of movies, and the interface has \"Prev\"/\"Next\" buttons to allow the user to go through all the movies.&nbsp; &nbsp;Your interface should allow the customer to change the number of listings ''N'' per page. You can implement a drop-down menu to choose \"N\" from a list of predefined values such as 10, 25, 50, 100, etc.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>&nbsp;* If the user clicks on a movie, the corresponding \"Single Movie\" page displays all the information about the movie, including its id, title, year, director, a list of genres (hyperlinked), a list of stars (hyperlinked), and rating.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>&nbsp;* If the user clicks on a star, the corresponding \"Single Star\" page displays all the information about this star, including the name, year of birth, and a list of (hyperlinked) movies in which the star acted. The user can jump between a page for a movie and a page for a star following hyperlinks.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>&nbsp;* Using the \"Browsing\" page, the user can browse movies by either their genres and or title. The \"Browsing by movie genre\" page has all the (hyperlinked) genres. The user can click on a genre to see all the movies of this genre. The \"Browsing by movie title\" page categorizes the movies based on their titles. The page organizes all the titles based on their first character in the title in an alphabetical order.&nbsp; (Notice that the first character could be a digit such as \"2\" in \"2012\".)&nbsp; When the user clicks on a letter, he can see the list of all the movies with this first letter in their title.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>&nbsp;* ''Shopping Cart'': For all the pages&nbsp; that display movie information, each movie should have an associated \"Add to Shopping Cart\" interface. The interface shows the currently number of copies for this item (during this login period), and allow the user to add more copies (or delete all copies) of this item by modifying the quantity. If the user clicks the button, the corresponding number of copies of movies should be set in his shopping cart (or delete the item if the quantity&nbsp; becomes 0).&nbsp; The interface should allow the user to see all the items (with their quantities) in his current shopping cart (during this login).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins>&nbsp; All pages after login should have a \"Checkout\" button. If the user clicks this button, there is a \"Shopping cart\" page that displays the movies in the shopping cart.&nbsp; If the user chooses to proceed to check out, the next page \"Ask for Customer Information\" should ask the user to provide a credit number, expiration date, and first name and last name of the credit card holder.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins>&nbsp;* ''' '''''Checkout''''':'''&nbsp; The transaction succeeds only if the user can provide the first name, a last name,a credit card with an expiration date, which match a record '''in the creditcards table (not those&nbsp; in the customers table)'''.&nbsp; If succeeded, the transaction should be recorded in the system (in the \"sales\" table) and a confirmation page should be displayed.&nbsp; &nbsp;[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins>&nbsp;* '''Performance requirements''': You can decide whether you want to do caching on the Web server for earlier query results.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins>We are not specifying all the details of the interfaces. You are&nbsp; encouraged to use your imagination to enhance the functionalities.&nbsp; We highly recommend you implement the above using '''JSP and/or Java servlets''' at the server side. You can use any type of client-side technologies&nbsp; to enhance the functionality of your website (e.g., Javascript, style sheets, etc). Regardless of the client-side technology, you will most likely make extensive use of HTML.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>84</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>85</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>86</th><td class=\"r\"><ins>[[Span(id=StepByStep)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>87</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>88</th><td class=\"r\"><ins>== Step by Step ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>89</th><td class=\"r\"><ins>Here are the recommended steps you can follow to accomplish for this project:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>90</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>91</th><td class=\"r\"><ins>&nbsp;1. Go through all the examples we provided.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>92</th><td class=\"r\"><ins>&nbsp;1. Implement the \"Login\" Page;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>93</th><td class=\"r\"><ins>&nbsp;1. Implement the \"Search\" Page;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>94</th><td class=\"r\"><ins>&nbsp;1. Implement the \"Movie list\" page, including the \"Sorting\" and \"!Prev/Next\" features;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>95</th><td class=\"r\"><ins>&nbsp;1. Implement the \"Single Movie\" page;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>96</th><td class=\"r\"><ins>&nbsp;1. Implement the \"Single Star\" page;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>97</th><td class=\"r\"><ins>&nbsp;1. Implement the \"Browsing by movie genre\" page;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>98</th><td class=\"r\"><ins>&nbsp;1. Implement the \"Browsing by movie title\" page;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>99</th><td class=\"r\"><ins>&nbsp;1. Add a \"Add to Shopping Cart\" button to each movie on all pages;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>100</th><td class=\"r\"><ins>&nbsp;1. Add a \"Checkout\" button to all pages;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>101</th><td class=\"r\"><ins>&nbsp;1. Implement the page to do checkout.[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>102</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>103</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>104</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>105</th><td class=\"r\"><ins>[[Span(id=BackendAPI)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>106</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>107</th><td class=\"r\"><ins>== Frontend-Backend Separation And !DataSource (Optional) ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>108</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>109</th><td class=\"r\"><ins>An \"old\" way to develop Web sites is to use Java Servlet or JSP to generate HTML pages.&nbsp; This approach is gradually becoming out of date and no longer considered a good practice. In project 2, we suggest you separate the frontend and backend. The frontend fetches the data by sending HTTP requests to the backend and then displays the returned data. The Java Servlet backend only provides API in a JSON format to the frontend. The frontend needs to be written in HTML, CSS, and JS files. This approach is not required. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>110</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>111</th><td class=\"r\"><ins>This approach involves lots of !JavaScript and jQuery programming, so we highly recommend you to go through this very nice online tutorial:&nbsp; [http://jqfundamentals.com/ http://jqfundamentals.com/] </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>112</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>113</th><td class=\"r\"><ins>===&nbsp; &nbsp; &nbsp; &nbsp;GET api example ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>114</th><td class=\"r\"><ins>Here's an example [https://github.com/UCI-Chenli-teaching/project2-api-example project2-api-example] that uses this approach to show a list of stars, similar to the project1-star-example we provided in project 1. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>115</th><td class=\"r\"><ins>Note starting with this example we use !DataSource managed by Tomcat, thus we don't have to set database information in each servlet. To config a !DataSource, following tutorial here&nbsp; [https://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html https://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html] </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>116</th><td class=\"r\"><ins>Follow the instruction on README.md to deploy and test the examples on tomcat. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>117</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>118</th><td class=\"r\"><ins>===&nbsp; &nbsp; &nbsp; &nbsp;POST api example ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>119</th><td class=\"r\"><ins>Here's an example [https://github.com/UCI-Chenli-teaching/project2-login-example project2-login-example] to show you how to implement the login feature using the new frontend-backend-separation design.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>120</th><td class=\"r\"><ins>Follow the instruction on README.md to deploy and test the examples on tomcat. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>121</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>122</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>123</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>124</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>125</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>126</th><td class=\"r\"><ins>[[Span(id=FormExample)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>127</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>128</th><td class=\"r\"><ins>== Form example ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>129</th><td class=\"r\"><ins>The HTML &lt;form&gt; element defines a form that is used to collect user input.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>130</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>131</th><td class=\"r\"><ins>Form elements are different types of input elements, like text fields, checkboxes, radio buttons, submit buttons, and more.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>132</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>133</th><td class=\"r\"><ins>Here's an example [https://github.com/UCI-Chenli-teaching/project2-form-example project2-form-example] to show you how to implement a HTML &lt;form&gt; to send user search query to the backend, and display the search result within a HTML &lt;table&gt;.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>134</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>135</th><td class=\"r\"><ins>Follow the instruction on README.md to deploy the example on tomcat. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>136</th><td class=\"r\"><ins>Click the link http://localhost:8080/project2-form-example&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;,&nbsp; then enter the search entry and click the \"Submit Order\" button.&nbsp; It will take the value in the \"Last Name\" box to query a backend credit card table to retrieve records with that last name.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>137</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>138</th><td class=\"r\"><ins>Note: In the project2-form-example, we used {{{ @WebServlet }}} annotation to declare the configuration of a Servlet {{{ FormServlet }}} right on top of class Form definition. This is a relatively new feature supported since Servlet 3.0. In order to scan web.xml properly with Servlet 3.0 or newer, you will need to modify the web.xml as followed:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>139</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>140</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>141</th><td class=\"r\"><ins>&lt;web-app </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>142</th><td class=\"r\"><ins>&nbsp; &nbsp; xmlns=\"http://java.sun.com/xml/ns/javaee\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>143</th><td class=\"r\"><ins>&nbsp; &nbsp; xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>144</th><td class=\"r\"><ins>&nbsp; &nbsp; xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>145</th><td class=\"r\"><ins>&nbsp; &nbsp; version=\"3.0\"&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>146</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>147</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>148</th><td class=\"r\"><ins>For more information: </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>149</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>150</th><td class=\"r\"><ins>* [https://stackoverflow.com/questions/6535676/webservlet-annotation-with-tomcat-7 @WebServlet annotation with Tomcat]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>151</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>152</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>153</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>154</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>155</th><td class=\"r\"><ins>[[Span(id=ServletSession)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>156</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>157</th><td class=\"r\"><ins>== Servlet session examples ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>158</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>159</th><td class=\"r\"><ins>Session provides a way to identify a user across more than one page request or visit to a Web site and to store information about that user.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>160</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>161</th><td class=\"r\"><ins>The servlet container uses this interface to create a session between an HTTP client and an HTTP server. The session persists for a specified time period, across more than one connection or page request from the user. A session usually corresponds to one user, who may visit a site many times. The server can maintain a session in many ways such as using cookies or rewriting URLs.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>162</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>163</th><td class=\"r\"><ins>Here's an example [https://github.com/UCI-Chenli-teaching/project2-session-example project2-session-example] to show you two session usages.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>164</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>165</th><td class=\"r\"><ins>Follow the instruction on README.md to deploy the example on tomcat. And then click the following two urls:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>166</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>167</th><td class=\"r\"><ins>&nbsp;* http://localhost:8080/project2-session-example/session?myname=Michael [[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>168</th><td class=\"r\"><ins>&nbsp;* http://localhost:8080/project2-session-example/items?newItem=DVD [[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>169</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>170</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>171</th><td class=\"r\"><ins>[[Span(id=JSP)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>172</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>173</th><td class=\"r\"><ins>== JSP example (Optional) ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>174</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>175</th><td class=\"r\"><ins>An alternative technology to use is JSP (Java Servlet Pages). JSP is an old technology, but it's still very handy to use. Normal Java Servlet lets you write HTML string in the print statements in Java, which is clumsy. JSP enables you to conveniently write Java code inside HTML. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>176</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>177</th><td class=\"r\"><ins>Here's an example [https://github.com/UCI-Chenli-teaching/project2-jsp-example project2-jsp-example] that generates the html page with JSP, similar to the project1-star-example.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>178</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>179</th><td class=\"r\"><ins>Follow the instruction on README.md to deploy the example on tomcat. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>180</th><td class=\"r\"><ins>Then click:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>181</th><td class=\"r\"><ins>&nbsp; http://localhost:8080/project2-jsp-example/index.jsp</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>182</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>183</th><td class=\"r\"><ins>which will activate the JSP page.&nbsp; It will talk to your local MySQL database.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>184</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>185</th><td class=\"r\"><ins>To learn more about JSP using examples, check:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>186</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>187</th><td class=\"r\"><ins>&nbsp;* http://www.easywayserver.com/jsp/JSP-example.htm</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>188</th><td class=\"r\"><ins>&nbsp;* https://www.guru99.com/jsp-tutorial.html</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>189</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>190</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>191</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>192</th><td class=\"r\"><ins>[[Span(id=DeploymentOnAWS)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>193</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>194</th><td class=\"r\"><ins>== Deployment On AWS and Submissions ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>195</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>196</th><td class=\"r\"><ins>Use Github for your project 2 code and deploy on AWS, similar to what you have done in project 1.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>197</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>198</th><td class=\"r\"><ins>a) Your submittion is based on commits that pushed to '''github master branch'''. Make sure the file on github master branch is what you want to submit. We are '''NOT''' looking at local git commits. We are '''NOT''' looking at commits on other branches</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>199</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>200</th><td class=\"r\"><ins>b) Make sure that if you git clone your project to a new environment, it will run correctly, especially on AWS, because you will clone a version to AWS instance and demo with it.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>201</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>202</th><td class=\"r\"><ins>c) The submission usually should be IDE free. So only commit your .html, .js, .css, .java, README.md, .gitignore, etc. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>203</th><td class=\"r\"><ins>Do not commit IDE setting files for example .eclipse folder, .idea folder. These should be included in the .gitignore file.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>204</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>205</th><td class=\"r\"><ins>d) We will run a script to get the '''LAST''' commit on '''github master branch''' within 24 hours after the due time (grace period). </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>206</th><td class=\"r\"><ins>If you want to use the grace period (with 10 points marked), you can keep pushing commits to github with in 24 hours. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>207</th><td class=\"r\"><ins>If you do not want to use grace period, '''DO NOT''' push any commits to github until the grace period is passed. You can keep editing and commit locally if you want though.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>208</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>209</th><td class=\"r\"><ins>e) Any commits pushed to github after grace period will be ignored.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>210</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>211</th><td class=\"r\"><ins>f) After the grace period, we will post a google sheet containning the last commit that we find on github. Please check and confirm it because you will need to demo with this commit.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>212</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>213</th><td class=\"r\"><ins>g) Signup for demo slots. Demo signup sheet will be posted separately after due. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>214</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>215</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>216</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>217</th><td class=\"r\"><ins>[[Span(id=Grading)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>218</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>219</th><td class=\"r\"><ins>== Demonstration and Grading Criteria ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>220</th><td class=\"r\"><ins>'''You are required to demonstrate&nbsp; this project'''. Create a running system from your ZIP file\u2013quickly. Show the correctness, completeness, functionality and performance of your database during your demonstration by using the employee interface developed here. Your task is to convince us '''(in 15 minutes)''' that your work is correctly and completely carried out and the course project is ready to move to phase 3. During the demo, we will grade your project based on the following criteria:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>221</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>222</th><td class=\"r\"><ins>&nbsp;* '''Functionality: ''' How the system is working, whether it fulfills all the project requirements.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>223</th><td class=\"r\"><ins>&nbsp;* '''Design and Performance: ''' You should be considerate in designing the server to make it efficient.&nbsp; For instance, you are welcome to implement the cache functionality to reduce the access to the database server (optional). Moreover, you should not send a query to the server to retrieve results not relevant to the current query or future queries. Your Web server is allowed to use a \"LIMIT OFFSET\" clause to talk to the database server to retrieve related records for each query.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>224</th><td class=\"r\"><ins>&nbsp;* '''Error handling: ''' When an exception occurs, the system shouldn't show it to the user. It should give \"appropriate\" error messages to the user in every unexpectable condition and provide information&nbsp; about what she needs to do next. The system should never terminate.&nbsp; When a system failure such as loss of connectivity occurs, it should&nbsp; recover&nbsp; itself. In that case, it should reconnect and the user shouldn't loose his/her information such as the items in his/her shopping cart.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>225</th><td class=\"r\"><ins>&nbsp;* '''User interface: ''' Whether it is user friendly enough and it provides a good interface which does not confuse the users. The UI counts for 10% of the total project grade.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>226</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>227</th><td class=\"r\"><ins>You could refer to this [https://docs.google.com/spreadsheets/d/1e3sr9DYy3OXAxaD5s0dYzAJ1HbjuuR7aJvyP2JT3Ix4/edit#gid=940689423 checklist] for detailed criteria.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>228</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>229</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>230</th><td class=\"r\"><ins>=== Follow these steps when showing the demo to the TA ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>231</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>232</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>233</th><td class=\"r\"><ins>a) Prior to the demo, make sure your AWS instance is up and running, everything is working fine, data is populated, etc... Don't deploy the project 2 app on AWS Tomcat yet.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>234</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>235</th><td class=\"r\"><ins>b) Generate the WAR file from your github repository and deploy it to your AWS Tomcat. You can do it locally on your machine or remotely on AWS. You can use the maven \"mvn package\" or generate the WAR file from Eclipse. Show us your git repository folder is in the commit ID we recorded: Do \" git checkout master \" first, then do \" git checkout your_commit_id \" using the commit ID we provided. Do \" git status \" to show us that your git repository is clean.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>236</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>237</th><td class=\"r\"><ins>c) Walk though your website and cover all the items in the&nbsp; [https://docs.google.com/spreadsheets/d/1e3sr9DYy3OXAxaD5s0dYzAJ1HbjuuR7aJvyP2JT3Ix4/edit#gid=940689423 checklist]. Prepare ahead the sequence of operations that you need to do. Show functionality and error handling of your website.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>238</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>239</th><td class=\"r\"><ins>d) The TA will ask you to briefly explain your codebase or explain how certain functionalities are implemented. You need to show that you understand what's going on with you project. Failing to answer the questions will lead to deductions on your grade.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>240</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>241</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>242</th><td class=\"r\"><ins>'''Important''': there are lots of functionalities to show during the demo and the time is very limited. Unable to finish the demo under 15 minutes may cause deductions on your grade. '''Be prepared''' when coming to the demo.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>243</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>244</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>245</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>246</th><td class=\"r\"><ins>== If you chose a different domain ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>247</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>248</th><td class=\"r\"><ins>You may design your own flow of interfaces that is suitable for your application. However, your application must cover the functionalities mentioned above, including login, conditional search, browsing, selection, sorting, navigation between pages, and error handling. If your domain doesn't require a shopping cart and checkout, come up with two features that are comparable.&nbsp; You are required to draw your application workflow (similar to the Fabflix diagram above) and present it during the demo session. It is your responsibility to make sure that your design and implementation meet all the requirements. If you are not sure about it, make sure to post it on Piazza or come to office hours to discuss.&nbsp; </ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n      </div>\n  </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>\n", "encoding": "utf-8"}