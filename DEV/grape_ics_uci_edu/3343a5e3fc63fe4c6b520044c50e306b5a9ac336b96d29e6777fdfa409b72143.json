{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs221-2019-spring-project3?action=diff&version=2", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs221-2019-spring-project3 (diff) \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=history\" title=\"Page history\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=diff&amp;version=3\" title=\"Version 3\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"prev\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=diff&amp;version=1\" title=\"Version 1\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/wiki/public/chrome/common/css/diff.css\" />\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span>&larr; <a class=\"prev\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=diff&amp;version=1\" title=\"Version 1\">Previous Change</a></span></li><li><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=history\" title=\"Page history\">Wiki History</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project3?action=diff&amp;version=3\" title=\"Version 3\">Next Change</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n      <h1>\n        Changes between\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=1\">Version 1</a> and\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=2\">Version 2</a> of\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project3\">cs221-2019-spring-project3</a>\n      </h1>\n      <form method=\"post\" id=\"prefs\" action=\"/wiki/public/wiki/cs221-2019-spring-project3?version=2\"><div><input type=\"hidden\" name=\"__FORM_TOKEN\" value=\"b7bc660fd3db7bb1d8b1b8c3\" /></div>\n        <div>\n          <input type=\"hidden\" name=\"action\" value=\"diff\" />\n          <input type=\"hidden\" name=\"version\" value=\"2\" />\n          <input type=\"hidden\" name=\"old_version\" value=\"1\" />\n          \n  <label for=\"style\">View differences</label>\n  <select id=\"style\" name=\"style\">\n    <option selected=\"selected\" value=\"inline\">inline</option>\n    <option value=\"sidebyside\">side by side</option>\n  </select>\n  <div class=\"field\">\n    <label><input type=\"radio\" name=\"contextall\" value=\"0\" checked=\"checked\" />\n             Show</label>\n      <label><input type=\"text\" name=\"contextlines\" id=\"contextlines\" size=\"2\" maxlength=\"3\" value=\"2\" />\n             lines around each change</label><br />\n    <label><input type=\"radio\" name=\"contextall\" value=\"1\" />\n           Show the changes in full context</label>\n  </div>\n  <fieldset id=\"ignore\">\n    <legend>Ignore:</legend>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignoreblanklines\" name=\"ignoreblanklines\" />\n      <label for=\"ignoreblanklines\">Blank lines</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorecase\" name=\"ignorecase\" />\n      <label for=\"ignorecase\">Case changes</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorewhitespace\" name=\"ignorewhitespace\" />\n      <label for=\"ignorewhitespace\">White space changes</label>\n    </div>\n  </fieldset>\n  <div class=\"buttons\">\n    <input type=\"submit\" name=\"update\" value=\"Update\" />\n  </div>\n\n        </div>\n      </form>\n      <dl id=\"overview\">\n        <dt class=\"property time\">Timestamp:</dt>\n        <dd class=\"time\">\n            May 2, 2019 1:28:52 PM (<a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-05-02T13%3A28%3A52-07%3A00&amp;precision=second\" title=\"See timeline at May 2, 2019 1:28:52 PM\">5 months</a> ago)\n        </dd>\n        <dt class=\"property author\">Author:</dt>\n        <dd class=\"author\">\n          zuozhi\n        </dd>\n        <dt class=\"property message\">Comment:</dt>\n        <dd class=\"message\">\n          \n          <p>\n--\n</p>\n\n        </dd>\n      </dl>\n      <div class=\"diff\">\n        <div class=\"legend\" id=\"diff-legend\">\n          <h3>Legend:</h3>\n          <dl>\n            <dt class=\"unmod\"></dt><dd>Unmodified</dd>\n            <dt class=\"add\"></dt><dd>Added</dd>\n            <dt class=\"rem\"></dt><dd>Removed</dd>\n            <dt class=\"mod\"></dt><dd>Modified</dd>\n          </dl>\n        </div>\n        <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2 id=\"file0\">\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=2\">cs221-2019-spring-project3</a>\n        </h2>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"Version 1\">\n                    <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=1#L19\">\n                      v1</a>\n                  </th>\n                  <th title=\"Version 2\">\n                    <a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=2#L19\">\n                      v2</a>\n                  </th>\n                  <td>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>19</th><th>19</th><td class=\"l\"><span>== Overview ==</span></td>\n                  </tr><tr>\n                          <th>20</th><th>20</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>21</th><th>\u00a0</th><td class=\"l\"><span>In this project, you'll be implementing a disk-based positional index and the phrase search operations. Compared to the inverted index in project 2, positional index stores the positions of all occurrences of the keywords in a document. Moreover, positional index also stores the frequency information of the keywords. </span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>21</th><td class=\"r\"><span>In this project, you'll be implementing a disk-based positional index and the phrase search operations. Compared to the inverted index in project 2, positional index stores the positions of all occurrences of the keywords in a document. In addition, we also store the frequency of a </span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>22</th><td class=\"r\"><span></span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>23</th><td class=\"r\"><span>Positional index enables phrase search. Phrase search means searching a sequence of keywords in exact order. For example, the query \"new york\" will only match documents with \"new\" immediately followed by \"york\". A document like \"new ... other tokens ... york\" won't match.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>22</th><th>24</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>23</th><th>25</th><td class=\"l\"><span>The \"position\" of a word in the positional index have many different kinds. It could be either character position or token position. Token position might include or exclude stop words. Different kinds of \"position\" also have different meanings on phrase search. For example, \"University of California, Irvine\", if we search the phrase \"University California\", choice on stop words affects the search result.</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=1#L28\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=2#L30\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>28</th><th>30</th><td class=\"l\"><span>== Task 1: Implement LSM-like positional index. ==</span></td>\n                  </tr><tr>\n                          <th>29</th><th>31</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>30</th><th>\u00a0</th><td class=\"l\"><span>The on disk index structure of the positional index is similar to the LSM structure in project 2. You need to implement the `addDocument`, `flush`, and `merge` operations similar to project 2.</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>32</th><td class=\"r\"><span>The on disk index structure of the positional index is similar to the LSM structure in project 2. The behavior for `addDocument`, `flush`, and `merge` operations should be the same as project 2. </span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>33</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>34</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>35</th><td class=\"r\"><span>{{{</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>36</th><td class=\"r\"><span>--- dictionary ---</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>37</th><td class=\"r\"><span>&lt;term1&gt;: &lt;pointer_to_positional_posting&gt;, &lt;term2&gt;: &lt;pointer_to_positional_posting&gt;, ...</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>38</th><td class=\"r\"><span>--- positional posting lists ---</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>39</th><td class=\"r\"><span>&lt;docID1&gt;: &lt;num_of_occurrences&gt;, [pos1, pos2, pos3, ...], &lt;docID2&gt;: &lt;num_of_occurrences&gt;, [pos1, pos2, pos3, ...]</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>40</th><td class=\"r\"><span>}}}</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>41</th><td class=\"r\"><span></span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>31</th><th>42</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>32</th><th>43</th><td class=\"l\"><span>{{{</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=1#L45\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs221-2019-spring-project3?version=2#L56\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>45</th><th>56</th><td class=\"l\"><span>== Task 2: Implement phrase search. ==</span></td>\n                  </tr><tr>\n                          <th>46</th><th>57</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>47</th><th>\u00a0</th><td class=\"l\"><span>In this task, you'll implement searching using the inverted index.</span></td>\n                      </tr><tr>\n                        <th>48</th><th>\u00a0</th><td class=\"l\"><span>You could assume all documents are flushed to disk segments when doing a search.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>58</th><td class=\"r\"><span>In this task, you'll implement phrase search using the positional index. You should make same assumptions about IO and tokenization as in project 2.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>49</th><th>59</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>50</th><th>\u00a0</th><td class=\"l\"><span>Here we make the same assumption as in the merge case regarding what can be stored in memory.</span></td>\n                      </tr><tr>\n                        <th>51</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>52</th><th>\u00a0</th><td class=\"l\"><span>For every query keyword, you need to first analyze it using the provided analyzer before using it to access the inverted index.</span></td>\n                      </tr><tr>\n                        <th>53</th><th>\u00a0</th><td class=\"l\"><span>You can assume the analyzer will not convert one keyword to multiple keywords.</span></td>\n                      </tr><tr>\n                        <th>54</th><th>\u00a0</th><td class=\"l\"><span>If the keyword is empty, searching should not return any results.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>60</th><td class=\"r\"><span>The keywords in the list represents a consecutive sequence of keywords, a document only matches if it matches the sequence in exact order.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>55</th><th>61</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>56</th><th>62</th><td class=\"l\"><span>The following are specific functions to implement:</span></td>\n                  </tr><tr>\n                          <th>57</th><th>63</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>58</th><th>64</th><td class=\"l\"><span>{{{</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>59</th><th>\u00a0</th><td class=\"l\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>60</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* Performs a single-keyword search on the inverted index.</span></td>\n                      </tr><tr>\n                        <th>61</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* You could assume the analyzer won't convert the keyword into multiple tokens.</span></td>\n                      </tr><tr>\n                        <th>62</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* If the keyword is empty, it should not return anything.</span></td>\n                      </tr><tr>\n                        <th>63</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;*</span></td>\n                      </tr><tr>\n                        <th>64</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* @param keyword keyword, cannot be null.</span></td>\n                      </tr><tr>\n                        <th>65</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* @return a iterator of documents matching the query</span></td>\n                      </tr><tr>\n                        <th>66</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>67</th><th>\u00a0</th><td class=\"l\"><span>public Iterator&lt;Document&gt; searchQuery(String keyword)</span></td>\n                      </tr><tr>\n                        <th>68</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>69</th><th>\u00a0</th><td class=\"l\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>70</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* Performs an AND boolean search on the inverted index.</span></td>\n                      </tr><tr>\n                        <th>71</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;*</span></td>\n                      </tr><tr>\n                        <th>72</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* @param keywords a list of keywords in the AND query</span></td>\n                      </tr><tr>\n                        <th>73</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* @return a iterator of documents matching the query</span></td>\n                      </tr><tr>\n                        <th>74</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>75</th><th>\u00a0</th><td class=\"l\"><span>public Iterator&lt;Document&gt; searchAndQuery(List&lt;String&gt; keywords)</span></td>\n                      </tr><tr>\n                        <th>76</th><th>\u00a0</th><td class=\"l\"><span>}</span></td>\n                      </tr><tr>\n                        <th>77</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>78</th><th>\u00a0</th><td class=\"l\"><span>/**</span></td>\n                      </tr><tr>\n                        <th>79</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* Performs an OR boolean search on the inverted index.</span></td>\n                      </tr><tr>\n                        <th>80</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;*</span></td>\n                      </tr><tr>\n                        <th>81</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* @param keywords a list of keywords in the OR query</span></td>\n                      </tr><tr>\n                        <th>82</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* @return a iterator of documents matching the query</span></td>\n                      </tr><tr>\n                        <th>83</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;*/</span></td>\n                      </tr><tr>\n                        <th>84</th><th>\u00a0</th><td class=\"l\"><span>public Iterator&lt;Document&gt; searchOrQuery(List&lt;String&gt; keywords) </span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>65</th><td class=\"r\"><span>&nbsp; &nbsp; public Iterator&lt;Document&gt; pharseSearch(List&lt;String&gt; keywords) </span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>85</th><th>66</th><td class=\"l\"><span>}}}</span></td>\n                  </tr><tr>\n                          <th>86</th><th>67</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>87</th><th>68</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>88</th><th>\u00a0</th><td class=\"l\"><span>== Task <del>4 (Optional Extra Credit): Implement deletions</del>. ==</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>69</th><td class=\"r\"><span>== Task <ins>3: Implement compression</ins>. ==</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>89</th><th>70</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"rem\">\n                  <tr class=\"first\">\n                          <th>90</th><th>\u00a0</th><td class=\"l\"><del>In the LSM-like index structure, deletion could be implemented by maintaining a list of deleted document IDs per segment.</del></td>\n                  </tr><tr>\n                          <th>91</th><th>\u00a0</th><td class=\"l\"><del>Each deleted document is not physically deleted in the inverted index nor document store.</del></td>\n                  </tr><tr>\n                          <th>92</th><th>\u00a0</th><td class=\"l\"><del>When reading or searching, each docID is checked to see if it has been logically deleted. </del></td>\n                  </tr><tr>\n                          <th>93</th><th>\u00a0</th><td class=\"l\"><del>If so, we will not return it to the user.</del></td>\n                  </tr><tr>\n                          <th>94</th><th>\u00a0</th><td class=\"l\"><del></del></td>\n                  </tr><tr>\n                          <th>95</th><th>\u00a0</th><td class=\"l\"><del>Those deleted documents within a segment should be physically deleted when we merge it with another segment.</del></td>\n                  </tr><tr>\n                          <th>96</th><th>\u00a0</th><td class=\"l\"><del></del></td>\n                  </tr><tr>\n                          <th>97</th><th>\u00a0</th><td class=\"l\"><del>The following is the specific function to implement:</del></td>\n                  </tr><tr>\n                          <th>98</th><th>\u00a0</th><td class=\"l\"><del></del></td>\n                  </tr><tr>\n                          <th>99</th><th>\u00a0</th><td class=\"l\"><del>{{{</del></td>\n                  </tr><tr>\n                          <th>100</th><th>\u00a0</th><td class=\"l\"><del>/**</del></td>\n                  </tr><tr>\n                          <th>101</th><th>\u00a0</th><td class=\"l\"><del>&nbsp;* Deletes all documents in all disk segments of the inverted index that match the keyword.</del></td>\n                  </tr><tr>\n                          <th>102</th><th>\u00a0</th><td class=\"l\"><del>&nbsp;* @param keyword </del></td>\n                  </tr><tr>\n                          <th>103</th><th>\u00a0</th><td class=\"l\"><del>&nbsp;*/</del></td>\n                  </tr><tr>\n                          <th>104</th><th>\u00a0</th><td class=\"l\"><del>public void deleteDocuments(String keyword)</del></td>\n                  </tr><tr class=\"last\">\n                          <th>105</th><th>\u00a0</th><td class=\"l\"><del>}}}</del></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>106</th><th>71</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>107</th><th>72</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>108</th><th>73</th><td class=\"l\"><span>== Test cases ==</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>109</th><th>\u00a0</th><td class=\"l\"><span>Please follow the similar general guideline and procedure as in project 1. Here is [https://docs.google.com/spreadsheets/d/1_iwJOT-bnYDk9tWNNy61GCyi1kRN7s3VHdn5h_2T1DA/edit#gid=996032174 test task assignment]. There are some guidelines and tips for project 2 test cases:</span></td>\n                      </tr><tr>\n                        <th>110</th><th>\u00a0</th><td class=\"l\"><span>1. Put the index and document files under your own folder. Specifically, you should use folder `index/YourTestName/`, for example `index/Team0StressTest`.</span></td>\n                      </tr><tr>\n                        <th>111</th><th>\u00a0</th><td class=\"l\"><span>2. Clean up and delete all files after each test. You should use Junit `@After` to delete all written files.</span></td>\n                      </tr><tr>\n                        <th>112</th><th>\u00a0</th><td class=\"l\"><span>3. For testing tasks 1 and 2, you could change `default_flush_threshold` or `default_merge_threshold`, or directly call `flush()` and `mergeAllSegments()` to control when to flush or when to merge. If you changed the variables `default_flush_threshold` or `default_merge_threshold`, be sure to change them back to their original value after your tests.</span></td>\n                      </tr><tr>\n                        <th>113</th><th>\u00a0</th><td class=\"l\"><span>4. For stress test, you should collect or generate a large amount of text data to test the performance and stability. If you rely on external data sets, please don't commit the large data directly in git. Instead, use a source URL to download the data.</span></td>\n                      </tr><tr>\n                        <th>114</th><th>\u00a0</th><td class=\"l\"><span>5. For all test tasks, you should also check the read/write counter values in the `PageFileChannel` class to make sure the IO number is within a reasonable range.</span></td>\n                      </tr><tr>\n                        <th>115</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>74</th><td class=\"r\"><span>Please follow the similar general guideline and procedure as in project 1 and project 2. Test case assignments will be released soon.</span></td>\n                      </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n      </div>\n  </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>\n", "encoding": "utf-8"}