{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs222p-2017-fall-project1-description?version=6", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs222p-2017-fall-project1-description \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"alternate\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=6&amp;format=txt\" type=\"text/x-trac-wiki\" title=\"Plain Text\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description\" title=\"View latest version\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=7\" title=\"Version 7\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"prev\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=5\" title=\"Version 5\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/folding.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n    <script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\"#content\").find(\"h1,h2,h3,h4,h5,h6\").addAnchor(_(\"Link to this section\"));\n        $(\"#content\").find(\".wikianchor\").each(function() {\n          $(this).addAnchor(babel.format(_(\"Link to #%(id)s\"), {id: $(this).attr('id')}));\n        });\n        $(\".foldable\").enableFolding(true, true);\n      });\n    </script>\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"pagepath\" class=\"noprint\">\n  <a class=\"pathentry first\" title=\"View WikiStart\" href=\"/wiki/public/wiki\">wiki:</a><a class=\"pathentry\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description\" title=\"View cs222p-2017-fall-project1-description\">cs222p-2017-fall-project1-description</a>\n</div>\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span>&larr; <a class=\"prev\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=5\" title=\"Version 5\">Previous Version</a></span></li><li><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description\" title=\"View latest version\">View Latest Version</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=7\" title=\"Version 7\">Next Version</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n        <br />\n        <table id=\"info\" summary=\"Revision info\">\n          <tr><th scope=\"row\">Version 6 (modified by cluo8, <a class=\"timeline\" href=\"/wiki/public/timeline?from=2017-10-03T10%3A45%3A00-07%3A00&amp;precision=second\" title=\"See timeline at Oct 3, 2017 10:45:00 AM\">2 years ago</a>)\n             (<a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?action=diff&amp;version=6\">diff</a>)</th></tr>\n          <tr><td class=\"message\">\n            <p>\n--\n</p>\n\n          </td></tr>\n        </table>\n      <div class=\"wikipage searchable\">\n        \n          <div id=\"wikipage\" class=\"trac-content\"><div style=\"background-color:#f2f3f4\" class=\"wikipage\"><div style=\"background-color:lightblue\" class=\"wikipage\"><h1 id=\"CS222PFall2017:PrinciplesofDataManagement-Project1Description\">CS222P Fall 2017: Principles of Data Management - Project 1 Description</h1>\n</div><h1 id=\"Introduction\">Introduction</h1>\n<p>\nIn this project, you will implement a paged file (PF) system and the first few operations of a record-based file (RBF) manager. The PF component provides facilities for higher-level client components to perform file I/O in terms of pages. In the PF component, methods are provided to create, destroy, open, and close paged files, to read and write a specific page of a given file, and to add pages to a given file. The record manager is going to be built on top of the basic paged file system. In this part of the project, you are also required to implement some (not all) of the methods provided in the record manager code skeleton.\n</p>\n<p>\nAll methods in the PF and RBF components, except constructors and destructors, return integer codes. A return code of 0 indicates normal completion. A nonzero return code indicates that either an exception condition or an error has occurred.\n</p>\n<h1 id=\"Interface\">Interface</h1>\n<p>\nThe interface of part 1 of the project consists of three classes: the\u00a0PagedFileManager, the\u00a0FileHandle, and the\u00a0RecordBasedFileManager\u00a0classes.\n</p>\n<h2 id=\"PagedFileManagerClass\">PagedFileManager\u00a0Class</h2>\n<p>\nThe\u00a0PagedFileManager\u00a0class handles the creation, deletion, opening, and closing of paged files. Your program should create exactly one instance of this class, and all requests for PF component file management should be directed to that instance. Below, the public methods of the class declaration are shown first, followed by descriptions of the methods. The first two methods in the class declaration are the constructor and destructor methods for the class; they are not explained further. Each method except the constructor and destructor methods returns a value of type RC (for \"return code\" -- actually an integer). A return code of 0 indicates normal completion. A nonzero return code indicates that an exception condition or error has occurred.\n</p>\n<div class=\"code\"><pre>class PagedFileManager {\n\npublic:\n    // Access to the _pf_manager instance\n    static PagedFileManager* instance();                                      \n\n    // Create a new file\n    RC createFile    (const string &amp;fileName);                            \n    \n    // Destroy a file\n    RC destroyFile   (const string &amp;fileName);                            \n\n    // Open a file\n    RC openFile      (const string &amp;fileName, FileHandle &amp;fileHandle);\n\n    // Close a file\n    RC closeFile     (FileHandle &amp;fileHandle);\n\nprotected:    \n    // Constructor\n    PagedFileManager();\n\n    // Destructor\n    ~PagedFileManager();\n\nprivate:\n    static PagedFileManager* _pf_manager;\n}\n</pre></div><h3 id=\"RCcreateFileconststringfileName\">RC createFile (const string &amp;fileName)</h3>\n<p>\nThis method creates an empty-paged file called fileName. The file should not already exist. This method should not create any pages in the file.\n</p>\n<h3 id=\"RCdestroyFileconststringfileName\">RC destroyFile (const string &amp;fileName)</h3>\n<p>\nThis method destroys the paged file whose name is fileName. The file should already exist.\n</p>\n<h3 id=\"RCopenFileconststringfileNameFileHandlefileHandle\">RC openFile (const string &amp;fileName,\u00a0FileHandle\u00a0&amp;fileHandle)</h3>\n<p>\nThis method opens the paged file whose name is fileName. The file must already exist (and been created using the createFile method). If the open method is successful, the fileHandle object whose address is passed in as a parameter now becomes a \"handle\" for the open file. This file handle is used to manipulate the pages of the file (see the\u00a0FileHandle\u00a0class description below). It is an error if fileHandle is already a handle for some open file when it is passed to the openFile method. It is not an error to open the same file more than once if desired, but this would be done by using a different fileHandle object each time. Each call to the openFile method creates a new \"instance\" of the open file. Warning: Opening a file more than once for data modification is not prevented by the PF component, but doing so is likely to corrupt the file structure and may crash the PF component. (You do not need to try and prevent this, as you can assume the layer above is \"friendly\" in that regard.) Opening a file more than once for reading is no problem.\n</p>\n<h3 id=\"RCcloseFileFileHandlefileHandle\">RC closeFile (FileHandle\u00a0&amp;fileHandle)</h3>\n<p>\nThis method closes the open file instance referred to by fileHandle. (The file should have been opened using the openFile method.) All of the file's pages are flushed to disk when the file is closed.\n</p>\n<h2 id=\"FileHandleClass\">FileHandle\u00a0Class</h2>\n<p>\nThe\u00a0FileHandle\u00a0class provides access to the pages of an open file. To access the pages of a file, a client first creates an instance of this class and passes it to the PagedFileManager::openFile method described above. As before, the public methods of the class declaration are shown first, followed by descriptions of the methods. The first two methods in the class declaration are the constructor and destructor methods and are not explained further. In order for you to gather performance data about file accesses, the\u00a0FileHandle\u00a0class should maintain counters for each of the I/O-related operations of theFileHandle\u00a0class. When initialized, all counters should be set to 0. Inside each method of\u00a0FileHandle, you will then need to increase the corresponding counter by 1 every time you successfully execute the associated method. For instance, when readPage() is executed, readPageCounter should be increased by 1.\n</p>\n<pre class=\"wiki\">class FileHandle {\n\npublic:\n    // variables to keep counter for each operation\n    unsigned readPageCounter;\n    unsigned writePageCounter;\n    unsigned appendPageCounter;\n\n    // Constructor\n    FileHandle();\n\n    // Destructor\n    ~FileHandle();\n\n    // Get a specific page\n    RC readPage(PageNum pageNum, void *data);\n\n    // Write a specific page\n    RC writePage(PageNum pageNum, const void *data);\n\n    // Append a specific page\n    RC appendPage(const void *data);\n\n    // Get the number of pages in the file\n    unsigned getNumberOfPages();\n\n    // Put the current counter values into variables\n    RC collectCounterValues(unsigned &amp;readPageCount, unsigned &amp;writePageCount, unsigned &amp;appendPageCount);\n}\n</pre><h3 id=\"RCreadPagePageNumpageNumvoiddata\">RC readPage(PageNum\u00a0pageNum, void *data)</h3>\n<p>\nThis method reads the page into the memory block pointed to by data. The page should exist. Note that page numbers start from 0.\n</p>\n<p>\nHere is a part of some example code for readPage that increases readPageCount whenever it is executed. For writePage() and appendPage(), the logic is similar.\n</p>\n<pre class=\"wiki\">    RC FileHandle::readPage(PageNum pageNum, void *data) {\n        ......\n    \treadPageCount = readPageCount + 1;\n    \treturn 0;\n    }\n    \n</pre><h3 id=\"RCwritePagePageNumpageNumconstvoiddata\">RC writePage(PageNum\u00a0pageNum, const void *data)</h3>\n<p>\nThis method writes the given data into a page specified by pageNum. The page should exist. Page numbers start from 0.\n</p>\n<h3 id=\"RCappendPageconstvoiddata\">RC appendPage(const void *data)</h3>\n<p>\nThis method appends a new page to the end of the file and writes the given data into the newly allocated page.\n</p>\n<h3 id=\"unsignedgetNumberOfPages\">unsigned getNumberOfPages()</h3>\n<p>\nThis method returns the total number of pages currently in the file.\n</p>\n<h3 id=\"RCcollectCounterValuesunsignedreadPageCountunsignedwritePageCountunsignedappendPageCount\">RC collectCounterValues(unsigned &amp;readPageCount, unsigned &amp;writePageCount, unsigned &amp;appendPageCount)</h3>\n<p>\nThis method should return the current counter values of this\u00a0FileHandle\u00a0in the three given variables. Here is some example code that gives you an idea how it will be applied.\n</p>\n<pre class=\"wiki\">\t......\n\tunsigned readPageCount = 0;\n\tunsigned writePageCount = 0;\n\tunsigned appendPageCount = 0;\n\t\n\t......\n\tFileHandle fileHandle1;\n        rc = pfm-&gt;openFile(fileName, fileHandle1);\n\tfileHandle1.collectCounterValues(readPageCount, writePageCount, appendPageCount);\n\tcout &lt;&lt; \"Before AppendPage - R:\" &lt;&lt; readPageCount &lt;&lt; \" W:\" &lt;&lt; writePageCount &lt;&lt; \" A:\" &lt;&lt; appendPageCount &lt;&lt; endl;\n\t\n\t......\n\trc = fileHandle1.appendPage(data);\n\tfileHandle1.collectCounterValues(readPageCount, writePageCount, appendPageCount);\n\tcout &lt;&lt; \"After AppendPage R:\" &lt;&lt; readPageCount &lt;&lt; \" W:\" &lt;&lt; writePageCount &lt;&lt; \" A:\" &lt;&lt; appendPageCount &lt;&lt; endl;\n    \n</pre><p>\nAnd a result might be:\n</p>\n<pre class=\"wiki\">\tBefore AppendPage - R:0 W:0 A:0\n\tAfter AppendPage - R:0 W:0 A:1\n</pre><p>\nIn this example,\u00a0FileHandle\u00a0appends one page (A + 1).\n</p>\n<h2 id=\"RecordBasedFileManagerClass\">RecordBasedFileManager\u00a0Class</h2>\n<p>\nThe\u00a0RecordBasedFileManager\u00a0class handles record-based operations such as inserting, updating, deleting, and reading records. Your program should create exactly one instance of this class, and all requests for this component should be directed to that instance. Below, the public methods of the class declaration are shown first, followed by descriptions of the methods. The first two methods in the class declaration are the constructor and destructor methods for the class; they are not explained further. Each method except the constructor and destructor methods returns a value of type RC. A return code of 0 indicates normal completion. A nonzero return code indicates that an exception condition or error has occurred. Please note that in this part of the project, you are only responsible for implementing the first group of methods in this class (besides the constructor and destructor). Note that for part 1 of the project, you are thus NOT required to implement the following methods: deleteRecord, updateRecord, readAttribute, and scan.\n</p>\n<div class=\"code\"><pre>class RecordBasedFileManager {\n\npublic:\n    // Access to the _rbf_manager instance\n    static RecordBasedFileManager* instance();                                      \n\n    // Create a new record-based file\n    RC createFile(const string &amp;fileName);\n  \n    // Destroy a record-based file\n    RC destroyFile(const string &amp;fileName);\n  \n    // Open a record-based file\n    RC openFile(const string &amp;fileName, FileHandle &amp;fileHandle);\n  \n    // Close a record-based file\n    RC closeFile(FileHandle &amp;fileHandle);\n  \n    // Insert a record into a file\n    RC insertRecord(FileHandle &amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data, RID &amp;rid);\n\n    // Read a record identified by the given rid.\n    RC readRecord(FileHandle &amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid, void *data);\n  \n    // Print the record that is passed to this utlity method.\n    RC printRecord(const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data);\n    \n    /******************************************************************************************\n    * All methods below this comment (other than the constructor and destructor) are NOT required to be implemented for part 1 of the project\n    *******************************************************************************************/\n   \n    // Delete a record identified by the given rid.\n    RC deleteRecord(FileHandle &amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid);\n\n    // Update a record identified by the given rid.\n    RC updateRecord(FileHandle &amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data, const RID &amp;rid);\n\n    // Read an attribute given its name and the rid.\n    RC readAttribute(FileHandle &amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid, const string attributeName, void *data);\n\n    // Scan returns an iterator to allow the caller to go through the results one by one. \n    RC scan(FileHandle &amp;fileHandle,\n      const vector&lt;Attribute&gt; &amp;recordDescriptor,\n      const string &amp;conditionAttribute,\n      const CompOp compOp,                  // comparision type such as \"&lt;\" and \"=\"\n      const void *value,                    // used in the comparison\n      const vector&lt;string&gt; &amp;attributeNames, // a list of projected attributes\n      RBFM_ScanIterator &amp;rbfm_ScanIterator);\n    \nprotected:    \n    // Constructor\n    RecordBasedFileManager();\n\n    // Destructor\n    ~RecordBasedFileManager();\n\nprivate:\n    static RecordBasedFileManager* _rbf_manager;\n}\n</pre></div><h3 id=\"RCcreateFileconststringfileName1\">RC createFile(const string &amp;fileName)</h3>\n<p>\nThis method creates a record-based file called fileName. The file should not already exist. Please note that this method should internally use the method PagedFileManager::createFile (const char *fileName).\n</p>\n<h3 id=\"RCdestroyFileconststringfileName1\">RC destroyFile(const string &amp;fileName)</h3>\n<p>\nThis method destroys the record-based file whose name is fileName. The file should exist. Please note that this method should internally use the method PagedFileManager::destroyFile (const char *fileName).\n</p>\n<h3 id=\"RCopenFileconststringfileNameFileHandlefileHandle1\">RC openFile(const string &amp;fileName,\u00a0FileHandle\u00a0&amp;fileHandle)</h3>\n<p>\nThis method opens the record-based file whose name is fileName. The file must already exist and it must have been created using the RecordBasedFileManager::createFile method. If the method is successful, the fileHandle object whose address is passed as a parameter becomes a \"handle\" for the open file. The file handle rules in the method PagedFileManager::openFile apply here too. Also note that this method should internally use the method PagedFileManager::openFile(const char *fileName,\u00a0FileHandle\u00a0&amp;fileHandle).\n</p>\n<h3 id=\"RCcloseFileFileHandlefileHandle1\">RC closeFile(FileHandle\u00a0&amp;fileHandle)</h3>\n<p>\nThis method closes the open file instance referred to by fileHandle. The file must have been opened using the RecordBasedFileManager::openFile method. Note that this method should internally use the method PagedFileManager::closeFile(FileHandle\u00a0&amp;fileHandle).\n</p>\n<h3 id=\"RCinsertRecordFileHandlefileHandleconstvectorAttributerecordDescriptorconstvoiddataRIDrid\">RC insertRecord(FileHandle\u00a0&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data, RID &amp;rid)</h3>\n<p>\nGiven a record descriptor, insert a new record into the file identified by the provided handle. You can assume that the input is always correct and free of error. That is, you do not need to check to see if the input record has the right number of attributes or if the attribute types match. However, in order to deal with NULL values in the attributes, the first part in *data contains n bytes for passing the null information about each fields. The value n can be calculated by using this formula: ceil(number of fields in a record / 8). For example, if there are 5 fields, ceil(5/8) = 1 byte. If there are 20 fields, the size will be ceil(20/8) = 3 bytes. The left-most bit in the first byte corresponds to the first field. The right-most bit in the first byte corresponds to the eighth field. If there are more than eight fields, the left-most bit in the second byte corresponds to the ninth field and so on. If the corresponding bit to each field is set to 1, then the actual data does not contain any value for this field. For example, if there are three fields in a record and the second field contains NULL, the bit representation in a byte is 0100000. In addition, in the actual data, the incoming record contains the first and the third values only. That is, the third field value is placed right after the first field value in this case.\n</p>\n<p>\nThis format (null-fields-indicator + actual data) is to be used for all record manipulation operations (unless stated differently). For example, when you read a record, the first part of what you return should contain a null-fields-indicator that provides the information about null fields, and the actual data should not contain null field values.\n</p>\n<p>\nPlease read the source code to get more details about the format of \"*data\", including how each attribute is represented as bytes.\n</p>\n<p>\nYour file structure is a heap file, and you may use a system-sequenced file organization. That is, if the last (current) page has enough space, insert a new record into this page. If not, find the first page with free space large enough to store the record, e.g., looking from the beginning of the file, and store the record at that location. An RID here is the record ID which is used to uniquely identify records in a file. An RID consists of: 1) the page number that the record resides in within the file, and 2) the slot number that the record resides in within the page. The insertRecord method accepts an RID object and fills it with the RID of the record that is the target for insertion; this lets the caller know what the system-determined RID was for each newly inserted record. For managing free space within pages, you should keep the free space coalesced in the center of the page at all times -- so if a record deletion or update creates a \"hole\", you should move records around to keep all of the free space together. Note that this will not change the RIDs of your records; when you move a record within a page, you will also keep track of the record's new offset in the slot table on the page, and the RID only contains the slot number, not the offset itself.\n</p>\n<p>\nNote that the API data format above is just intended for passing the data into the insertRecord(). This does not necessarily mean that the internal representation of your record should be the same as this format. (It probably shouldn't be. :-))\n</p>\n<h3 id=\"RCreadRecordFileHandlefileHandleconstvectorAttributerecordDescriptorconstRIDridvoiddata\">RC readRecord(FileHandle\u00a0&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid, void *data)</h3>\n<p>\nGiven a record descriptor, read the record identified by the given rid.\n</p>\n<h3 id=\"RCprintRecordconstvectorAttributerecordDescriptorconstvoiddata\">RC printRecord(const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data)</h3>\n<p>\nThis is a utility method that will be mainly used for debugging/testing. It should be able to interpret the bytes of each record using the passed-in record descriptor and then print its content to the screen. For instance, suppose a record consists of two fields: age (int) and height (float), which means the record will be of size 9 (1 byte for the null-fields-indicator, 4 bytes for int, and 4 bytes for float). The printRecord method should recognize the record format using the record descriptor. It should then check the null-fields-indicator to skip certain fields if there are any NULL fields. Then, it should be able to convert the four bytes after the first byte into an int object and the last four bytes to a float object and print their values. It should also print NULL for those fields that are skipped because they are null. Thus, an example for three records would be:\n</p>\n<pre class=\"wiki\"> age: 24      height: 6.1\n age: NULL    height: 7.5       \n age: 32      height: NULL\n</pre><h3 id=\"RCdeleteRecordFileHandlefileHandleconstvectorAttributerecordDescriptorconstRIDrid\">RC deleteRecord(FileHandle\u00a0&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid)</h3>\n<p>\nGiven a record descriptor, delete the record identified by the given rid. Also, each time when a record is deleted, you will need to compact that page. That is, keep the free space in the middle of the page -- the slot table will be at one end, the record data area will be at the other end, and the free space should be in the middle.\n</p>\n<h3 id=\"RCupdateRecordFileHandlefileHandleconstvectorAttributerecordDescriptorconstvoiddataconstRIDrid\">RC updateRecord(FileHandle\u00a0&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data, const RID &amp;rid)</h3>\n<p>\nGiven a record descriptor, update the record identified by the given rid with the passed data. If the record grows and there is no space in the page to store the record, the record must be migrated to a new page with enough free space. Since you will soon be implementing an index structure, assume that records are identified by their RID values and when they migrate, you should leave a tombstone behind (pointing to the new location of the record). Also, each time when a record is updated to become smaller, you need to compact that page. That is, keep the free space in the middle of the page -- the slot table will be at one end, the record data area will be at the other end, and the free space should be in the middle. Again, the structure for *data is the same as the one we use for the insertRecord().\n</p>\n<h3 id=\"RCreadAttributeFileHandlefileHandleconstvectorAttributerecordDescriptorconstRIDridconststringattributeNamevoiddata\">RC readAttribute(FileHandle\u00a0&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid, const string attributeName, void *data)</h3>\n<p>\nGiven a record descriptor, read a specific attribute of a record identified by a given rid.\n</p>\n<h3 id=\"RCscanFileHandlefileHandleconstvectorAttributerecordDescriptorconststringconditionAttributeconstCompOpcompOpconstvoidvalueconstvectorstringattributeNamesRBFM_ScanIteratorrbfm_ScanIterator\">RC scan(FileHandle\u00a0&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const string &amp;conditionAttribute, const\u00a0CompOp\u00a0compOp, const void *value, const vector&lt;string&gt; &amp;attributeNames, RBFM_ScanIterator &amp;rbfm_ScanIterator)</h3>\n<p>\nGiven a record descriptor, scan a file, i.e., sequentially read all the entries in the file. A scan has a filter condition associated with it, e.g., it consists of a list of attributes to project out as well as a predicate on an attribute (\"Sal &gt; 40000\"). Specifically, the parameter conditionAttribute here is the attribute's name that you are going to apply the filter on. The compOp parameter is the comparison type that is going to be used in the filtering process. The value parameter is the value of the conditionAttribute that is going to be used to filter out records. Note that the retrieved records should only have the fields that are listed in the vector attributeNames. Please take a look at the test cases for more information on how to use this method.\n</p>\n<h2 id=\"MemoryRequirements\">Memory Requirements</h2>\n<p>\nYou should be careful about how to use memory to implement those operations. It is\u00a0<strong>NOT ACCEPTABLE</strong>\u00a0to cache the entire database or even a large portion of the database in memory, since that is not practical for large amounts of data. Also, for each operation, you should make sure that the \"effect\" of the operation (if any) has indeed been stored in the Linux file. For example, for the \"insertRecord\" operation, after the function successfully returns, the inserted record should physically reside in the file in the Linux filesystem. The tests will help you to not make mistakes here -- that is why each test case is run separately from the others.\n</p>\n<h2 id=\"RecordRepresentation\">Record Representation</h2>\n<ul><li>You need to support basic attribute types, including integers, reals, and variable-length character strings. Other types are optional.\n</li><li>There can be NULL values in one or multiple fields in a record, as described throughout this document.\n</li><li>You can assume that the float value comparisons can be done by using logical operators (==, !=, &gt;=, &lt;=, &lt;, &gt;).\n</li><li>Endianness is not an issue here since you do not communicate with other systems. Use the default setting that your system provides.\n</li><li>Records within file pages should be represented using a record format that nicely handles mixes of binary data and variable-length character data. \"Nicely\" here refers to both space and efficiency, e.g., you should not waste 70 bytes of space to store \"abcdefghij\" in a VARCHAR(80) field.\n</li><li><strong>Your record representation must allow direct addressability of data fields - i.e., finding the nth field must be an O(1) operation, not an O(n) operation.</strong>\n</li><li>Your chosen on-page record format should be clearly documented in your project code and your accompanying report.\n</li></ul></div></div>\n          \n          \n        \n        \n      </div>\n      \n\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"last first\">\n          <a rel=\"nofollow\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=6&amp;format=txt\">Plain Text</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>", "encoding": "utf-8"}