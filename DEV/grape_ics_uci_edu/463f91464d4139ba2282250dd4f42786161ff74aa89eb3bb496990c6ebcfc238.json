{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs222p-2017-fall-project1-description?action=diff&version=12", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs222p-2017-fall-project1-description (diff) \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?action=history\" title=\"Page history\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?action=diff&amp;version=13\" title=\"Version 13\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"prev\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?action=diff&amp;version=11\" title=\"Version 11\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/wiki/public/chrome/common/css/diff.css\" />\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span>&larr; <a class=\"prev\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?action=diff&amp;version=11\" title=\"Version 11\">Previous Change</a></span></li><li><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?action=history\" title=\"Page history\">Wiki History</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?action=diff&amp;version=13\" title=\"Version 13\">Next Change</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n      <h1>\n        Changes between\n          <a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11\">Version 11</a> and\n          <a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12\">Version 12</a> of\n          <a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description\">cs222p-2017-fall-project1-description</a>\n      </h1>\n      <form method=\"post\" id=\"prefs\" action=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12\"><div><input type=\"hidden\" name=\"__FORM_TOKEN\" value=\"9f8efe40881da30a28cf50a8\" /></div>\n        <div>\n          <input type=\"hidden\" name=\"action\" value=\"diff\" />\n          <input type=\"hidden\" name=\"version\" value=\"12\" />\n          <input type=\"hidden\" name=\"old_version\" value=\"11\" />\n          \n  <label for=\"style\">View differences</label>\n  <select id=\"style\" name=\"style\">\n    <option selected=\"selected\" value=\"inline\">inline</option>\n    <option value=\"sidebyside\">side by side</option>\n  </select>\n  <div class=\"field\">\n    <label><input type=\"radio\" name=\"contextall\" value=\"0\" checked=\"checked\" />\n             Show</label>\n      <label><input type=\"text\" name=\"contextlines\" id=\"contextlines\" size=\"2\" maxlength=\"3\" value=\"2\" />\n             lines around each change</label><br />\n    <label><input type=\"radio\" name=\"contextall\" value=\"1\" />\n           Show the changes in full context</label>\n  </div>\n  <fieldset id=\"ignore\">\n    <legend>Ignore:</legend>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignoreblanklines\" name=\"ignoreblanklines\" />\n      <label for=\"ignoreblanklines\">Blank lines</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorecase\" name=\"ignorecase\" />\n      <label for=\"ignorecase\">Case changes</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorewhitespace\" name=\"ignorewhitespace\" />\n      <label for=\"ignorewhitespace\">White space changes</label>\n    </div>\n  </fieldset>\n  <div class=\"buttons\">\n    <input type=\"submit\" name=\"update\" value=\"Update\" />\n  </div>\n\n        </div>\n      </form>\n      <dl id=\"overview\">\n        <dt class=\"property time\">Timestamp:</dt>\n        <dd class=\"time\">\n            Oct 10, 2017 10:35:33 AM (<a class=\"timeline\" href=\"/wiki/public/timeline?from=2017-10-10T10%3A35%3A33-07%3A00&amp;precision=second\" title=\"See timeline at Oct 10, 2017 10:35:33 AM\">2 years</a> ago)\n        </dd>\n        <dt class=\"property author\">Author:</dt>\n        <dd class=\"author\">\n          jamshid\n        </dd>\n        <dt class=\"property message\">Comment:</dt>\n        <dd class=\"message\">\n          \n          <p>\n--\n</p>\n\n        </dd>\n      </dl>\n      <div class=\"diff\">\n        <div class=\"legend\" id=\"diff-legend\">\n          <h3>Legend:</h3>\n          <dl>\n            <dt class=\"unmod\"></dt><dd>Unmodified</dd>\n            <dt class=\"add\"></dt><dd>Added</dd>\n            <dt class=\"rem\"></dt><dd>Removed</dd>\n            <dt class=\"mod\"></dt><dd>Modified</dd>\n          </dl>\n        </div>\n        <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2 id=\"file0\">\n          <a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12\">cs222p-2017-fall-project1-description</a>\n        </h2>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"Version 11\">\n                    <a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L1\">\n                      v11</a>\n                  </th>\n                  <th title=\"Version 12\">\n                    <a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L1\">\n                      v12</a>\n                  </th>\n                  <td>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>1</th><th>1</th><td class=\"l\"><span>{{{#!div style=\"background-color:#f2f3f4\"</span></td>\n                  </tr>\n            </tbody><tbody class=\"add\">\n                  <tr class=\"last first\">\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>2</th><th>3</th><td class=\"l\"><span>{{{</span></td>\n                  </tr><tr>\n                          <th>3</th><th>4</th><td class=\"l\"><span>#!div style=\"background-color:lightblue\"</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L10\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L11\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>10</th><th>11</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>11</th><th>12</th><td class=\"l\"><span>= Interface =</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>12</th><th>\u00a0</th><td class=\"l\"><span>The interface of part 1 of the project consists of three classes: the<del>\u00a0!PagedFileManager, the\u00a0!FileHandle, and the\u00a0!RecordBasedFileManager\u00a0</del>classes.</span></td>\n                      </tr><tr>\n                        <th>13</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>14</th><th>\u00a0</th><td class=\"l\"><span>== !PagedFileManager<del>\u00a0</del>Class ==</span></td>\n                      </tr><tr>\n                        <th>15</th><th>\u00a0</th><td class=\"l\"><span>The<del>\u00a0!PagedFileManager\u00a0</del>class handles the creation, deletion, opening, and closing of paged files. Your program should create exactly one instance of this class, and all requests for PF component file management should be directed to that instance. Below, the public methods of the class declaration are shown first, followed by descriptions of the methods. The first two methods in the class declaration are the constructor and destructor methods for the class; they are not explained further. Each method except the constructor and destructor methods returns a value of type RC (for \"return code\" -- actually an integer). A return code of 0 indicates normal completion. A nonzero return code indicates that an exception condition or error has occurred.</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>13</th><td class=\"r\"><span>The interface of part 1 of the project consists of three classes: the<ins>&nbsp;!PagedFileManager, the !FileHandle, and the !RecordBasedFileManager </ins>classes.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>14</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>15</th><td class=\"r\"><span>== !PagedFileManager<ins>&nbsp;</ins>Class ==</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>16</th><td class=\"r\"><span>The<ins>&nbsp;!PagedFileManager </ins>class handles the creation, deletion, opening, and closing of paged files. Your program should create exactly one instance of this class, and all requests for PF component file management should be directed to that instance. Below, the public methods of the class declaration are shown first, followed by descriptions of the methods. The first two methods in the class declaration are the constructor and destructor methods for the class; they are not explained further. Each method except the constructor and destructor methods returns a value of type RC (for \"return code\" -- actually an integer). A return code of 0 indicates normal completion. A nonzero return code indicates that an exception condition or error has occurred.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>16</th><th>17</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>17</th><th>18</th><td class=\"l\"><span>{{{</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L52\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L53\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>52</th><th>53</th><td class=\"l\"><span>This method destroys the paged file whose name is fileName. The file should already exist.</span></td>\n                  </tr><tr>\n                          <th>53</th><th>54</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>54</th><th>\u00a0</th><td class=\"l\"><span>=== RC openFile (const string &amp;fileName,<del>\u00a0!FileHandle\u00a0</del>&amp;fileHandle) ===</span></td>\n                      </tr><tr>\n                        <th>55</th><th>\u00a0</th><td class=\"l\"><span>This method opens the paged file whose name is fileName. The file must already exist (and been created using the createFile method). If the open method is successful, the fileHandle object whose address is passed in as a parameter now becomes a \"handle\" for the open file. This file handle is used to manipulate the pages of the file (see the FileHandle class description below). It is an error if fileHandle is already a handle for some open file when it is passed to the openFile method. It is not an error to open the same file more than once if desired, but this would be done by using a different fileHandle object each time. Each call to the openFile method creates a new \"instance\" of <del></del>FileHandle. Warning: Opening a file more than once for data modification is not prevented by the PF component, but doing so is likely to corrupt the file structure and may crash the PF component. (You do not need to try and prevent this, as you can assume the layer above is \"friendly\" in that regard.) Opening a file more than once for reading is no problem.</span></td>\n                      </tr><tr>\n                        <th>56</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>57</th><th>\u00a0</th><td class=\"l\"><span>=== RC closeFile (!FileHandle<del>\u00a0</del>&amp;fileHandle) ===</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>55</th><td class=\"r\"><span>=== RC openFile (const string &amp;fileName,<ins>&nbsp;!FileHandle </ins>&amp;fileHandle) ===</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>56</th><td class=\"r\"><span>This method opens the paged file whose name is fileName. The file must already exist (and been created using the createFile method). If the open method is successful, the fileHandle object whose address is passed in as a parameter now becomes a \"handle\" for the open file. This file handle is used to manipulate the pages of the file (see the FileHandle class description below). It is an error if fileHandle is already a handle for some open file when it is passed to the openFile method. It is not an error to open the same file more than once if desired, but this would be done by using a different fileHandle object each time. Each call to the openFile method creates a new \"instance\" of <ins>!</ins>FileHandle. Warning: Opening a file more than once for data modification is not prevented by the PF component, but doing so is likely to corrupt the file structure and may crash the PF component. (You do not need to try and prevent this, as you can assume the layer above is \"friendly\" in that regard.) Opening a file more than once for reading is no problem.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>57</th><td class=\"r\"><span></span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>58</th><td class=\"r\"><span>=== RC closeFile (!FileHandle<ins>&nbsp;</ins>&amp;fileHandle) ===</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>58</th><th>59</th><td class=\"l\"><span>This method closes the open file instance referred to by fileHandle. (The file should have been opened using the openFile method.) All of the file's pages are flushed to disk when the file is closed.</span></td>\n                  </tr><tr>\n                          <th>59</th><th>60</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>60</th><th>\u00a0</th><td class=\"l\"><span>== !FileHandle<del>\u00a0</del>Class ==</span></td>\n                      </tr><tr>\n                        <th>61</th><th>\u00a0</th><td class=\"l\"><span>The<del>\u00a0!FileHandle\u00a0class provides access to the pages of an open file. To access the pages of a file, a client first creates an instance of this class and passes it to the PagedFileManager::openFile method described above. As before, the public methods of the class declaration are shown first, followed by descriptions of the methods. The first two methods in the class declaration are the constructor and destructor methods and are not explained further. </del></span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>61</th><td class=\"r\"><span>== !FileHandle<ins>&nbsp;</ins>Class ==</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>62</th><td class=\"r\"><span>The<ins>&nbsp;!FileHandle class provides access to the pages of an open file. To access the pages of a file, a client first creates an instance of this class and passes it to the PagedFileManager::openFile method described above. As before, the public methods of the class declaration are shown first, followed by descriptions of the methods. The first two methods in the class declaration are the constructor and destructor methods and are not explained further.</ins></span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>62</th><th>63</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>63</th><th>64</th><td class=\"l\"><span>'''In order for you to gather performance data about file accesses, the !FileHandle class should maintain counters for each of the I/O-related operations of the !FileHandle class. The counter values binds to a file, and they need to be persistent between multiple file open and close operations of the !PagedFileManager. You need to store the counter values physically in a file, and you can decide how to implement it. For example, you can reserve the file's first page as a hidden page to store the counter values as well as the number of pages.'''</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L96\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L97\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>96</th><th>97</th><td class=\"l\"><span>}</span></td>\n                  </tr><tr>\n                          <th>97</th><th>98</th><td class=\"l\"><span>}}}</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>98</th><th>\u00a0</th><td class=\"l\"><span>=== RC readPage(!PageNum<del>\u00a0</del>pageNum, void *data) ===</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>99</th><td class=\"r\"><span>=== RC readPage(!PageNum<ins>&nbsp;</ins>pageNum, void *data) ===</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>99</th><th>100</th><td class=\"l\"><span>This method reads the page into the memory block pointed to by data. The page should exist. Note that page numbers start from 0.</span></td>\n                  </tr><tr>\n                          <th>100</th><th>101</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L109\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L110\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>109</th><th>110</th><td class=\"l\"><span>&nbsp; &nbsp; </span></td>\n                  </tr><tr>\n                          <th>110</th><th>111</th><td class=\"l\"><span>}}}</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>111</th><th>\u00a0</th><td class=\"l\"><span>=== RC writePage(!PageNum<del>\u00a0</del>pageNum, const void *data) ===</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>112</th><td class=\"r\"><span>=== RC writePage(!PageNum<ins>&nbsp;</ins>pageNum, const void *data) ===</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>112</th><th>113</th><td class=\"l\"><span>This method writes the given data into a page specified by pageNum. The page should exist. Page numbers start from 0.</span></td>\n                  </tr><tr>\n                          <th>113</th><th>114</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L119\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L120\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>119</th><th>120</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>120</th><th>121</th><td class=\"l\"><span>=== RC collectCounterValues(unsigned &amp;readPageCount, unsigned &amp;writePageCount, unsigned &amp;appendPageCount) ===</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>121</th><th>\u00a0</th><td class=\"l\"><span>This method should return the current counter values of this<del>\u00a0!FileHandle\u00a0</del>in the three given variables. Here is some example code that gives you an idea how it will be applied.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>122</th><td class=\"r\"><span>This method should return the current counter values of this<ins>&nbsp;!FileHandle </ins>in the three given variables. Here is some example code that gives you an idea how it will be applied.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>122</th><th>123</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>123</th><th>124</th><td class=\"l\"><span>{{{</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L145\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L146\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>145</th><th>146</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp; &nbsp; After AppendPage - R:0 W:0 A:1</span></td>\n                  </tr><tr>\n                          <th>146</th><th>147</th><td class=\"l\"><span>}}}</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>147</th><th>\u00a0</th><td class=\"l\"><span>In this example,<del>\u00a0!FileHandle\u00a0</del>appends one page (A + 1).</span></td>\n                      </tr><tr>\n                        <th>148</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>149</th><th>\u00a0</th><td class=\"l\"><span>== !RecordBasedFileManager<del>\u00a0</del>Class ==</span></td>\n                      </tr><tr>\n                        <th>150</th><th>\u00a0</th><td class=\"l\"><span>The<del>\u00a0!RecordBasedFileManager\u00a0</del>class handles record-based operations such as inserting, updating, deleting, and reading records. Your program should create exactly one instance of this class, and all requests for this component should be directed to that instance. Below, the public methods of the class declaration are shown first, followed by descriptions of the methods. The first two methods in the class declaration are the constructor and destructor methods for the class; they are not explained further. Each method except the constructor and destructor methods returns a value of type RC. A return code of 0 indicates normal completion. A nonzero return code indicates that an exception condition or error has occurred. Please note that in this part of the project, you are only responsible for implementing the first group of methods in this class (besides the constructor and destructor). Note that for part 1 of the project, you are thus NOT required to implement the following methods: deleteRecord, updateRecord, readAttribute, and scan.</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>148</th><td class=\"r\"><span>In this example,<ins>&nbsp;!FileHandle </ins>appends one page (A + 1).</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>149</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>150</th><td class=\"r\"><span>== !RecordBasedFileManager<ins>&nbsp;</ins>Class ==</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>151</th><td class=\"r\"><span>The<ins>&nbsp;!RecordBasedFileManager </ins>class handles record-based operations such as inserting, updating, deleting, and reading records. Your program should create exactly one instance of this class, and all requests for this component should be directed to that instance. Below, the public methods of the class declaration are shown first, followed by descriptions of the methods. The first two methods in the class declaration are the constructor and destructor methods for the class; they are not explained further. Each method except the constructor and destructor methods returns a value of type RC. A return code of 0 indicates normal completion. A nonzero return code indicates that an exception condition or error has occurred. Please note that in this part of the project, you are only responsible for implementing the first group of methods in this class (besides the constructor and destructor). Note that for part 1 of the project, you are thus NOT required to implement the following methods: deleteRecord, updateRecord, readAttribute, and scan.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>151</th><th>152</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>152</th><th>153</th><td class=\"l\"><span>{{{</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L218\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L219\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>218</th><th>219</th><td class=\"l\"><span>This method destroys the record-based file whose name is fileName. The file should exist. Please note that this method should internally use the method PagedFileManager::destroyFile (const char *fileName).</span></td>\n                  </tr><tr>\n                          <th>219</th><th>220</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>220</th><th>\u00a0</th><td class=\"l\"><span>=== RC openFile(const string &amp;fileName,<del>\u00a0!FileHandle\u00a0</del>&amp;fileHandle) ===</span></td>\n                      </tr><tr>\n                        <th>221</th><th>\u00a0</th><td class=\"l\"><span>This method opens the record-based file whose name is fileName. The file must already exist and it must have been created using the RecordBasedFileManager::createFile method. If the method is successful, the fileHandle object whose address is passed as a parameter becomes a \"handle\" for the open file. The file handle rules in the method PagedFileManager::openFile apply here too. Also note that this method should internally use the method PagedFileManager::openFile(const char *fileName,<del>\u00a0!FileHandle\u00a0</del>&amp;fileHandle).</span></td>\n                      </tr><tr>\n                        <th>222</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>223</th><th>\u00a0</th><td class=\"l\"><span>=== RC closeFile(!FileHandle<del>\u00a0</del>&amp;fileHandle) ===</span></td>\n                      </tr><tr>\n                        <th>224</th><th>\u00a0</th><td class=\"l\"><span>This method closes the open file instance referred to by fileHandle. The file must have been opened using the RecordBasedFileManager::openFile method. Note that this method should internally use the method PagedFileManager::closeFile(!FileHandle<del>\u00a0</del>&amp;fileHandle).</span></td>\n                      </tr><tr>\n                        <th>225</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>226</th><th>\u00a0</th><td class=\"l\"><span>=== RC insertRecord(!FileHandle<del>\u00a0</del>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data, RID &amp;rid) ===</span></td>\n                      </tr><tr>\n                        <th>227</th><th>\u00a0</th><td class=\"l\"><span>Given a record descriptor, insert a new record into the file identified by the provided handle. You can assume that the input is always correct and free of error. That is, you do not need to check to see if the input record has the right number of attributes or if the attribute types match. However, in order to deal with NULL values in the attributes, the first part in *data contains n bytes for passing the null information about each fields. The value n can be calculated by using this formula: ceil(number of fields in a record / 8). For example, if there are 5 fields, ceil(5/8) = 1 byte. If there are 20 fields, the size will be ceil(20/8) = 3 bytes. The left-most bit in the first byte corresponds to the first field. The right-most bit in the first byte corresponds to the eighth field. If there are more than eight fields, the left-most bit in the second byte corresponds to the ninth field and so on. If the corresponding bit to each field is set to 1, then the actual data does not contain any value for this field. For example, if there are three fields in a record and the second field contains NULL, the bit representation in a byte is 0100000<del></del>. In addition, in the actual data, the incoming record contains the first and the third values only. That is, the third field value is placed right after the first field value in this case.</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>221</th><td class=\"r\"><span>=== RC openFile(const string &amp;fileName,<ins>&nbsp;!FileHandle </ins>&amp;fileHandle) ===</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>222</th><td class=\"r\"><span>This method opens the record-based file whose name is fileName. The file must already exist and it must have been created using the RecordBasedFileManager::createFile method. If the method is successful, the fileHandle object whose address is passed as a parameter becomes a \"handle\" for the open file. The file handle rules in the method PagedFileManager::openFile apply here too. Also note that this method should internally use the method PagedFileManager::openFile(const char *fileName,<ins>&nbsp;!FileHandle </ins>&amp;fileHandle).</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>223</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>224</th><td class=\"r\"><span>=== RC closeFile(!FileHandle<ins>&nbsp;</ins>&amp;fileHandle) ===</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>225</th><td class=\"r\"><span>This method closes the open file instance referred to by fileHandle. The file must have been opened using the RecordBasedFileManager::openFile method. Note that this method should internally use the method PagedFileManager::closeFile(!FileHandle<ins>&nbsp;</ins>&amp;fileHandle).</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>226</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>227</th><td class=\"r\"><span>=== RC insertRecord(!FileHandle<ins>&nbsp;</ins>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data, RID &amp;rid) ===</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>228</th><td class=\"r\"><span>Given a record descriptor, insert a new record into the file identified by the provided handle. You can assume that the input is always correct and free of error. That is, you do not need to check to see if the input record has the right number of attributes or if the attribute types match. However, in order to deal with NULL values in the attributes, the first part in *data contains n bytes for passing the null information about each fields. The value n can be calculated by using this formula: ceil(number of fields in a record / 8). For example, if there are 5 fields, ceil(5/8) = 1 byte. If there are 20 fields, the size will be ceil(20/8) = 3 bytes. The left-most bit in the first byte corresponds to the first field. The right-most bit in the first byte corresponds to the eighth field. If there are more than eight fields, the left-most bit in the second byte corresponds to the ninth field and so on. If the corresponding bit to each field is set to 1, then the actual data does not contain any value for this field. For example, if there are three fields in a record and the second field contains NULL, the bit representation in a byte is 0100000<ins>0</ins>. In addition, in the actual data, the incoming record contains the first and the third values only. That is, the third field value is placed right after the first field value in this case.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>228</th><th>229</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>229</th><th>230</th><td class=\"l\"><span>This format (null-fields-indicator + actual data) is to be used for all record manipulation operations (unless stated differently). For example, when you read a record, the first part of what you return should contain a null-fields-indicator that provides the information about null fields, and the actual data should not contain null field values.</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L235\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L236\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>235</th><th>236</th><td class=\"l\"><span>Note that the API data format above is just intended for passing the data into the insertRecord(). This does not necessarily mean that the internal representation of your record should be the same as this format. (It probably shouldn't be. :-))</span></td>\n                  </tr><tr>\n                          <th>236</th><th>237</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>237</th><th>\u00a0</th><td class=\"l\"><span>=== RC readRecord(!FileHandle<del>\u00a0</del>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid, void *data) ===</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>238</th><td class=\"r\"><span>=== RC readRecord(!FileHandle<ins>&nbsp;</ins>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid, void *data) ===</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>238</th><th>239</th><td class=\"l\"><span>Given a record descriptor, read the record identified by the given rid.</span></td>\n                  </tr><tr>\n                          <th>239</th><th>240</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=11#L246\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs222p-2017-fall-project1-description?version=12#L247\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>246</th><th>247</th><td class=\"l\"><span>&nbsp;age: 32&nbsp; &nbsp; &nbsp; height: NULL</span></td>\n                  </tr><tr>\n                          <th>247</th><th>248</th><td class=\"l\"><span>}}}</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>248</th><th>\u00a0</th><td class=\"l\"><span>=== RC deleteRecord(!FileHandle<del>\u00a0</del>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid) ===</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>249</th><td class=\"r\"><span>=== RC deleteRecord(!FileHandle<ins>&nbsp;</ins>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid) ===</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>249</th><th>250</th><td class=\"l\"><span>Given a record descriptor, delete the record identified by the given rid. Also, each time when a record is deleted, you will need to compact that page. That is, keep the free space in the middle of the page -- the slot table will be at one end, the record data area will be at the other end, and the free space should be in the middle.</span></td>\n                  </tr><tr>\n                          <th>250</th><th>251</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>251</th><th>\u00a0</th><td class=\"l\"><span>=== RC updateRecord(!FileHandle<del>\u00a0</del>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data, const RID &amp;rid) ===</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>252</th><td class=\"r\"><span>=== RC updateRecord(!FileHandle<ins>&nbsp;</ins>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const void *data, const RID &amp;rid) ===</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>252</th><th>253</th><td class=\"l\"><span>Given a record descriptor, update the record identified by the given rid with the passed data. If the record grows and there is no space in the page to store the record, the record must be migrated to a new page with enough free space. Since you will soon be implementing an index structure, assume that records are identified by their RID values and when they migrate, you should leave a tombstone behind (pointing to the new location of the record). Also, each time when a record is updated to become smaller, you need to compact that page. That is, keep the free space in the middle of the page -- the slot table will be at one end, the record data area will be at the other end, and the free space should be in the middle. Again, the structure for *data is the same as the one we use for the insertRecord().</span></td>\n                  </tr><tr>\n                          <th>253</th><th>254</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>254</th><th>\u00a0</th><td class=\"l\"><span>=== RC readAttribute(!FileHandle<del>\u00a0</del>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid, const string attributeName, void *data) ===</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>255</th><td class=\"r\"><span>=== RC readAttribute(!FileHandle<ins>&nbsp;</ins>&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const RID &amp;rid, const string attributeName, void *data) ===</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>255</th><th>256</th><td class=\"l\"><span>Given a record descriptor, read a specific attribute of a record identified by a given rid.</span></td>\n                  </tr><tr>\n                          <th>256</th><th>257</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>257</th><th>\u00a0</th><td class=\"l\"><span>=== RC scan(!FileHandle<del>\u00a0&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const string &amp;conditionAttribute, const\u00a0!CompOp\u00a0</del>compOp, const void *value, const vector&lt;string&gt; &amp;attributeNames, RBFM_ScanIterator &amp;rbfm_ScanIterator) ===</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>258</th><td class=\"r\"><span>=== RC scan(!FileHandle<ins>&nbsp;&amp;fileHandle, const vector&lt;Attribute&gt; &amp;recordDescriptor, const string &amp;conditionAttribute, const !CompOp </ins>compOp, const void *value, const vector&lt;string&gt; &amp;attributeNames, RBFM_ScanIterator &amp;rbfm_ScanIterator) ===</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>258</th><th>259</th><td class=\"l\"><span>Given a record descriptor, scan a file, i.e., sequentially read all the entries in the file. A scan has a filter condition associated with it, e.g., it consists of a list of attributes to project out as well as a predicate on an attribute (\"Sal &gt; 40000\"). Specifically, the parameter conditionAttribute here is the attribute's name that you are going to apply the filter on. The compOp parameter is the comparison type that is going to be used in the filtering process. The value parameter is the value of the conditionAttribute that is going to be used to filter out records. Note that the retrieved records should only have the fields that are listed in the vector attributeNames. Please take a look at the test cases for more information on how to use this method.</span></td>\n                  </tr><tr>\n                          <th>259</th><th>260</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>260</th><th>261</th><td class=\"l\"><span>== Memory Requirements ==</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>261</th><th>\u00a0</th><td class=\"l\"><span>You should be careful about how to use memory to implement those operations. It is<del>\u00a0'''NOT ACCEPTABLE'''\u00a0</del>to cache the entire database or even a large portion of the database in memory, since that is not practical for large amounts of data. Also, for each operation, you should make sure that the \"effect\" of the operation (if any) has indeed been stored in the Linux file. For example, for the \"insertRecord\" operation, after the function successfully returns, the inserted record should physically reside in the file in the Linux filesystem. The tests will help you to not make mistakes here -- that is why each test case is run separately from the others.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>262</th><td class=\"r\"><span>You should be careful about how to use memory to implement those operations. It is<ins>&nbsp;'''NOT ACCEPTABLE''' </ins>to cache the entire database or even a large portion of the database in memory, since that is not practical for large amounts of data. Also, for each operation, you should make sure that the \"effect\" of the operation (if any) has indeed been stored in the Linux file. For example, for the \"insertRecord\" operation, after the function successfully returns, the inserted record should physically reside in the file in the Linux filesystem. The tests will help you to not make mistakes here -- that is why each test case is run separately from the others.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>262</th><th>263</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>263</th><th>264</th><td class=\"l\"><span>== Record Representation ==</span></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n      </div>\n  </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>\n", "encoding": "utf-8"}