{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs221-2019-spring-project2?action=diff&version=1", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs221-2019-spring-project2 (diff) \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=history\" title=\"Page history\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=diff&amp;version=2\" title=\"Version 2\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/wiki/public/chrome/common/css/diff.css\" />\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span class=\"missing\">&larr; Previous Change</span></li><li><a href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=history\" title=\"Page history\">Wiki History</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=diff&amp;version=2\" title=\"Version 2\">Next Change</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n      <h1>\n        Changes between\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=0\">Initial Version</a> and\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=1\">Version 1</a> of\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project2\">cs221-2019-spring-project2</a>\n      </h1>\n      <form method=\"post\" id=\"prefs\" action=\"/wiki/public/wiki/cs221-2019-spring-project2?version=1\"><div><input type=\"hidden\" name=\"__FORM_TOKEN\" value=\"f27b61b6cf3d25564bfb7bb2\" /></div>\n        <div>\n          <input type=\"hidden\" name=\"action\" value=\"diff\" />\n          <input type=\"hidden\" name=\"version\" value=\"1\" />\n          <input type=\"hidden\" name=\"old_version\" value=\"0\" />\n          \n  <label for=\"style\">View differences</label>\n  <select id=\"style\" name=\"style\">\n    <option selected=\"selected\" value=\"inline\">inline</option>\n    <option value=\"sidebyside\">side by side</option>\n  </select>\n  <div class=\"field\">\n    <label><input type=\"radio\" name=\"contextall\" value=\"0\" checked=\"checked\" />\n             Show</label>\n      <label><input type=\"text\" name=\"contextlines\" id=\"contextlines\" size=\"2\" maxlength=\"3\" value=\"2\" />\n             lines around each change</label><br />\n    <label><input type=\"radio\" name=\"contextall\" value=\"1\" />\n           Show the changes in full context</label>\n  </div>\n  <fieldset id=\"ignore\">\n    <legend>Ignore:</legend>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignoreblanklines\" name=\"ignoreblanklines\" />\n      <label for=\"ignoreblanklines\">Blank lines</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorecase\" name=\"ignorecase\" />\n      <label for=\"ignorecase\">Case changes</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorewhitespace\" name=\"ignorewhitespace\" />\n      <label for=\"ignorewhitespace\">White space changes</label>\n    </div>\n  </fieldset>\n  <div class=\"buttons\">\n    <input type=\"submit\" name=\"update\" value=\"Update\" />\n  </div>\n\n        </div>\n      </form>\n      <dl id=\"overview\">\n        <dt class=\"property time\">Timestamp:</dt>\n        <dd class=\"time\">\n            Apr 17, 2019 4:39:24 PM (<a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-04-17T16%3A39%3A24-07%3A00&amp;precision=second\" title=\"See timeline at Apr 17, 2019 4:39:24 PM\">6 months</a> ago)\n        </dd>\n        <dt class=\"property author\">Author:</dt>\n        <dd class=\"author\">\n          zuozhi\n        </dd>\n        <dt class=\"property message\">Comment:</dt>\n        <dd class=\"message\">\n          \n          <p>\n--\n</p>\n\n        </dd>\n      </dl>\n      <div class=\"diff\">\n        <div class=\"legend\" id=\"diff-legend\">\n          <h3>Legend:</h3>\n          <dl>\n            <dt class=\"unmod\"></dt><dd>Unmodified</dd>\n            <dt class=\"add\"></dt><dd>Added</dd>\n            <dt class=\"rem\"></dt><dd>Removed</dd>\n            <dt class=\"mod\"></dt><dd>Modified</dd>\n          </dl>\n        </div>\n        <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2 id=\"file0\">\n          <a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=1\">cs221-2019-spring-project2</a>\n        </h2>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"Version currently edited\">\n                    <a href=\"#L1\">\n                      v1</a>\n                  </th>\n                  <th title=\"Version 1\">\n                    <a href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=1#L1\">\n                      v1</a>\n                  </th>\n                  <td>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins>= CS221: Project 2 - II: Inverted index, boolean search =</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>'''Test Cases Due:&nbsp; &nbsp; &nbsp;Week 4 Tu. (Apr 23), Due on Github as Pull Requests'''[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>'''Review Due:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Week 4, Fri. (Apr 26),&nbsp; Due on Github as Pull Requests Comments'''[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>'''Final Code Due:&nbsp; &nbsp; &nbsp;Week 5, Sun. (May. 5),&nbsp; Due on Github.'''[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>= Overview =</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>== Coding Tasks ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>1. Implement LSM-like disk-based inverted index that supports insertions. (7 points)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>1. Implement merge of inverted index segments. (4 points)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>1. Implement keyword search, boolean AND search, and boolean OR search. (6 points)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>1. (Optional) Extra Credit: Implement a dynamic-programming-based Chinese or Japanese tokenizer. (3 points)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>== Testing Tasks ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>1. Write at least 2 test cases for a task (3 points)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>1. Review the test cases of two teams (2 points)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>Total: 17 points&nbsp; (+ 3 extra credits)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>Project 2: Implement an disk-based inverted index.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>In this project, you'll be implementing a disk-based inverted index and the search operations.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>On a high level, inverted index stores the mapping from keywords to the documents they appear in.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>A simple in-memory structure could be `Map&lt;String, List&lt;Integer&gt;&gt;`, where each key is a keyword token (also called term),</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>and each value is a list of (often sorted) document IDs (also called postings).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>In this project, the disk-based index structure is similar to the idea of LSM (Log-Structured Merge tree).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>A general idea will be described. The details should follow what Professor says in the lecture.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>The inverted index consists of multiple index segments, where each segment is only created and then appended.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>Once each segment is written to disk, it becomes immutable and is never changed again.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>Each index segment is a fully searchable inverted index,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>it contains the inverted index structure as well the document store (map from documentID to actual document),</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>the document ID of each segment is local to the segment itself and it is invisible to the user.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>When searching a keyword, all segments are searched, and the result documents from each segment are combined.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>Example:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>Add documents \"cat dog\" and \"cat elephant\", then flush to write Segment0.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>Segment0:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>----------</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>InvertIndex: {\"cat\": [0, 1], \"dog\": [0], \"elephant\": [1]}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>DocStore: {0: \"cat dog\", 1: \"cat elephant\"}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>----------</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>Then add documents \"cat dog\" and \"wolf dog\", and flush to write a new Segment, Segment1.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>Segment1:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>----------</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>InvertIndex: {\"cat\": [0], \"dog\": [0, 1], \"wolf\": [1]}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>DocStore: {0: \"cat dog\", 1: \"wolf dog\"}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>----------</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>When searching the word \"cat\", first search Segment0 and get [\"cat dog\", \"cat elephant\"],</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>then search Segment1 and get [\"cat dog\"], then combine results to get [\"cat dog\", \"cat elephant\", \"cat dog\"]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>Task 1: Implement LSM-like disk-based inverted index that supports insertions.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>In this task, you'll implement the disk file structure of an inverted index segment.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>When a document is added via `addDocument()`, it should be first stored in the in-memory buffer.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>Whenever the number of documents reached default_flush_threshold, or function `flush()` is called,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>you should create a new inverted index segment with the documents in the buffer.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>The specific format of the inverted lists should in general follow what Professor says in lecture.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>You also have freedom to design the format to make it more efficient to store or search.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>In principle, the terms can be loaded into memory, but all the posting lists cannot be entirely loaded into memory.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>Functions to implement, see each function signature to check the details:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>{@link this#addDocument};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>{@link this#flush};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>{@link this#documentIterator};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>{@link this#getNumSegments};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins>{@link this#getIndexSegment};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins>Task 2: Implement merge of inverted index segments.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins>In this task, you'll implement merging index segments. We cannot let number of segments grow infinitely because it</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins>would mean searching a keyword needs to go through a lot of documents.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>84</th><td class=\"r\"><ins>Whenever the number of segments has reached the default_merge_threshold, or `mergeAllSegments()` is called,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>85</th><td class=\"r\"><ins>you need to merge *all* segments in the inverted index pair-wise.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>86</th><td class=\"r\"><ins>You could assume merging only happens when you have an even number of segments.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>87</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>88</th><td class=\"r\"><ins>When merging two segments into one, since each segment has its own local document ID, you need to bump up all</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>89</th><td class=\"r\"><ins>document IDs in one of the segments.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>90</th><td class=\"r\"><ins>As an example, Segment0 contains local docID 1-100, Segment1 contains local docID 1-100,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>91</th><td class=\"r\"><ins>first find the max docID in Segment0, which is 100, then bump up Segment1's docIDs to become 101-200, then do the merge.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>92</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>93</th><td class=\"r\"><ins>Functions to implement:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>94</th><td class=\"r\"><ins>{@link this#mergeAllSegments}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>95</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>96</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>97</th><td class=\"r\"><ins>Task 3: Implement keyword search, boolean AND search, and boolean OR search.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>98</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>99</th><td class=\"r\"><ins>In this task, you'll implement searching on top of the inverted index.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>100</th><td class=\"r\"><ins>You could assume all documents are flushed to disk index segments when doing search.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>101</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>102</th><td class=\"r\"><ins>For a query keyword, you need to first analyze it using the analyzer.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>103</th><td class=\"r\"><ins>You could assume after tokenization and stemming, the result only has 1 token, or is empty (such as the query is a stop ord).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>104</th><td class=\"r\"><ins>If the query is empty, searching should not return any results.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>105</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>106</th><td class=\"r\"><ins>Functions to implement:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>107</th><td class=\"r\"><ins>{@link this#searchQuery}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>108</th><td class=\"r\"><ins>{@link this#searchAndQuery}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>109</th><td class=\"r\"><ins>{@link this#searchOrQuery}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>110</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>111</th><td class=\"r\"><ins>Task 4 (Optional Extra Credit): Implement deletions.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>112</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>113</th><td class=\"r\"><ins>In our LSM-like index structure, deletion is implemented by maintaining a separate deletion marks per segment.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>114</th><td class=\"r\"><ins>The document is not actually deleted in the inverted index nor document store.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>115</th><td class=\"r\"><ins>When reading or searching, the docID is checked with the deletion mark to see if the document is deleted.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>116</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>117</th><td class=\"r\"><ins>The document should be deleted when merging two index segments.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>118</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>119</th><td class=\"r\"><ins>Functions to implement:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>120</th><td class=\"r\"><ins>{@link this#deleteDocuments}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>121</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>122</th><td class=\"r\"><ins>Task 5 (Optional Extra Credit): Implement compression</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n      </div>\n  </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>\n", "encoding": "utf-8"}