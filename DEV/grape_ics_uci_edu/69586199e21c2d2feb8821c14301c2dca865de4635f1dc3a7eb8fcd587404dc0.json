{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs221-2019-spring-project2?version=12", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs221-2019-spring-project2 \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"alternate\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=12&amp;format=txt\" type=\"text/x-trac-wiki\" title=\"Plain Text\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs221-2019-spring-project2\" title=\"View latest version\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=13\" title=\"Version 13\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"prev\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=11\" title=\"Version 11\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/folding.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n    <script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\"#content\").find(\"h1,h2,h3,h4,h5,h6\").addAnchor(_(\"Link to this section\"));\n        $(\"#content\").find(\".wikianchor\").each(function() {\n          $(this).addAnchor(babel.format(_(\"Link to #%(id)s\"), {id: $(this).attr('id')}));\n        });\n        $(\".foldable\").enableFolding(true, true);\n      });\n    </script>\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"pagepath\" class=\"noprint\">\n  <a class=\"pathentry first\" title=\"View WikiStart\" href=\"/wiki/public/wiki\">wiki:</a><a class=\"pathentry\" href=\"/wiki/public/wiki/cs221-2019-spring-project2\" title=\"View cs221-2019-spring-project2\">cs221-2019-spring-project2</a>\n</div>\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span>&larr; <a class=\"prev\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=11\" title=\"Version 11\">Previous Version</a></span></li><li><a href=\"/wiki/public/wiki/cs221-2019-spring-project2\" title=\"View latest version\">View Latest Version</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=13\" title=\"Version 13\">Next Version</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n        <br />\n        <table id=\"info\" summary=\"Revision info\">\n          <tr><th scope=\"row\">Version 12 (modified by chenli, <a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-04-22T09%3A17%3A16-07%3A00&amp;precision=second\" title=\"See timeline at Apr 22, 2019 9:17:16 AM\">6 months ago</a>)\n             (<a href=\"/wiki/public/wiki/cs221-2019-spring-project2?action=diff&amp;version=12\">diff</a>)</th></tr>\n          <tr><td class=\"message\">\n            <p>\n--\n</p>\n\n          </td></tr>\n        </table>\n      <div class=\"wikipage searchable\">\n        \n          <div id=\"wikipage\" class=\"trac-content\"><h1 id=\"CS221:Project2-II:Invertedindexbooleansearch\">CS221: Project 2 - II: Inverted index, boolean search</h1>\n<p>\n<strong>Test Cases Due:     Week 4 Tu. (Apr 23), Due on Github as Pull Requests</strong><br />\n<strong>Review Due:           Week 4, Fri. (Apr 26),  Due on Github as Pull Requests Comments</strong><br />\n<strong>Final Code Due:     Week 5, Sun. (May. 5),  Due on Github.</strong><br />\n</p>\n<h2 id=\"CodingTasks\">Coding Tasks</h2>\n<ol><li>Implement LSM-like disk-based inverted index that supports insertions. (6 points)\n</li><li>Implement merge of inverted index segments. (4 points)\n</li><li>Implement keyword search, boolean AND search, and boolean OR search. (5 points)\n</li><li>(Optional Extra Credit): Implement deletions. (2 points)\n</li></ol><h2 id=\"TestingTasks\">Testing Tasks</h2>\n<ol><li>Write at least 2 test cases for a task (2 points)\n</li><li>Review the test cases of two teams (2 points)\n</li></ol><p>\nTotal: 19 points  (+ 2 extra credits)\n</p>\n<h2 id=\"Overview\">Overview</h2>\n<p>\nIn this project, you'll be implementing a disk-based inverted index and the search operations.\n</p>\n<p>\nAt a high level, inverted index stores a mapping from keywords to the ids of documents they appear in.\nA simple in-memory structure could be <tt>Map&lt;String, List&lt;Integer&gt;&gt;</tt>, where each key is a keyword token (also called a \"term\"),\nand each value is a list of (often sorted) document IDs (also called \"postings\").\n</p>\n<p>\nIn this project, the disk-based index structure is based on the idea of LSM (Log-Structured Merge tree).\nIts main idea is the following:\n</p>\n<p>\nThe inverted index consists of multiple index segments, where each segment is initially created in memory.\nOnce a segment is written to disk, it becomes immutable and is never changed.\n</p>\n<p>\nEach index segment is a fully searchable inverted index.\nIt contains a posting list structure as well as a document store, which is a mapping from a docID to the corresponding document.\nThe document IDs within each segment are local in the segment and are invisible to the user.\nThese in-disk segments are periodically merged to bigger segments.\n</p>\n<p>\nWhen users search a keyword, all segments are searched, and the result documents from each segment are combined.\n</p>\n<p>\nExample:\n</p>\n<pre class=\"wiki\">Add documents Doc{\"cat dog\"} and Doc{\"cat elephant\"}, then flush to Segment0.\nSegment0:\n----------\nPostingList: {\"cat\": [0, 1], \"dog\": [0], \"elephant\": [1]}\nDocStore: {0: \"cat dog\", 1: \"cat elephant\"}\n----------\n\nThen add documents Doc{\"cat dog\"} and Doc{\"wolf dog\"}, and flush to Segment1.\nSegment1:\n----------\nPostingList: {\"cat\": [0], \"dog\": [0, 1], \"wolf\": [1]}\nDocStore: {0: \"cat dog\", 1: \"wolf dog\"}\n----------\n\nWhen searching the word \"cat\", we first search Segment0 and get [Doc{\"cat dog\"}, Doc{\"cat elephant\"}].\nThen we search Segment1 and get [Doc{\"cat dog\"}]. We combine these results and get [Doc{\"cat dog\"}, Doc{\"cat elephant\"}, Doc{\"cat dog\"}]\n</pre><h2 id=\"Task1:ImplementLSM-likedisk-basedinvertedindexthatsupportsinsertionsonly.\">Task 1: Implement LSM-like disk-based inverted index that supports insertions only.</h2>\n<p>\nIn this task, you'll implement the disk file structure of a single segment.\nWhen a document is added via <tt>addDocument()</tt>, it should be first stored in an in-memory buffer.\nYou need to design the data structure for the in-memory segment.\n</p>\n<p>\nWhenever the number of documents reaches a parameter default_flush_threshold, or function <tt>flush()</tt> is called,\nyou should flush the segment to disk.\n</p>\n<p>\nThe specific format of the disk posting lists should follow what we cover in lectures.\nYou also have freedom to improve the format to make it more efficient.\n</p>\n<p>\nThe following are specific functions to implement:\n</p>\n<pre class=\"wiki\">/**\n * Adds a document to the inverted index.\n * Document should live in a in-memory buffer until `flush()` is called to write the segment to disk.\n * @param document\n */\npublic void addDocument(Document document)\n\n/**\n * Flushes all the documents in the in-memory segment buffer to disk. If the buffer is empty, it should not do anything.\n * flush() writes the segment to disk containing the posting list and the corresponding document store.\n */\npublic void flush()\n\n/**\n * Iterates through all the documents in all disk segments.\n */\npublic Iterator&lt;Document&gt; documentIterator() {\n    throw new UnsupportedOperationException();\n}\n\n/**\n * Gets the total number of segments in the inverted index.\n * This function is used for checking correctness in test cases.\n *\n * @return number of index segments.\n */\npublic int getNumSegments()\n\n/**\n * Reads a disk segment into memory based on segmentNum.\n * This function is mainly used for checking correctness in test cases.\n *\n * @param segmentNum n-th segment in the inverted index (start from 0).\n * @return in-memory data structure with all contents in the index segment, null if segmentNum don't exist.\n */\npublic InvertedIndexSegmentForTest getIndexSegment(int segmentNum)\n\n</pre><h2 id=\"Task2:Implementmergeofdisksegments.\">Task 2: Implement merge of disk segments.</h2>\n<p>\nIn this task, you'll implement the merging of disk segments. We cannot let the number of segments grow indefinitely\nbecause otherwise searching a keyword needs to go through a lot of segments.\n</p>\n<p>\nIn general, there are many merging policies. In this task, we want to implement a particular policy.\nWhenever the number of segments has reached a parameter default_merge_threshold, or <tt>mergeAllSegments()</tt> is called,\nyou need to merge *all* the disk segments pair-wise.\nFor example, suppose there are 10 disk segments. After the merge, we should have 5 disk segments.\nYou could assume merging only happens when you have an even number of segments.\n</p>\n<p>\nWhen merging two segments into one, since each segment has its own local document IDs, you need to generate new document IDs for the merged segment.\nWhen merging two segments, you need to merge both your inverted index, as well as the two documents stores of each segment.\nIn addition, you can assume we have enough memory to load the keywords of both segments.\nBUT, you cannot assume we have enough memory to store the posting lists and documents of the segments.\n</p>\n<p>\nSpecific function to implement:\n</p>\n<pre class=\"wiki\">/**\n * Merges all the disk segments of the inverted index pair-wise.\n */\npublic void mergeAllSegments()\n</pre><h2 id=\"Task3:ImplementkeywordsearchbooleanANDsearchandbooleanORsearch.\">Task 3: Implement keyword search, boolean AND search, and boolean OR search.</h2>\n<p>\nIn this task, you'll implement searching using the inverted index.\nYou could assume all documents are flushed to disk segments when doing a search.\n</p>\n<p>\nHere we make the same assumption as in the merge case regarding what can be stored in memory.\n</p>\n<p>\nFor every query keyword, you need to first analyze it using the provided analyzer before using it to access the inverted index.\nYou can assume the analyzer will not convert one keyword to multiple keywords.\nIf the keyword is empty, searching should not return any results.\n</p>\n<p>\nSpecific functions to implement:\n</p>\n<pre class=\"wiki\">/**\n * Performs a single keyword search on the inverted index.\n * You could assume the analyzer won't convert the keyword into multiple tokens.\n * If the keyword is empty, it should not return anything.\n *\n * @param keyword keyword, cannot be null.\n * @return a iterator of documents matching the query\n */\npublic Iterator&lt;Document&gt; searchQuery(String keyword)\n\n/**\n * Performs an AND boolean search on the inverted index.\n *\n * @param keywords a list of keywords in the AND query\n * @return a iterator of documents matching the query\n */\npublic Iterator&lt;Document&gt; searchAndQuery(List&lt;String&gt; keywords)\n}\n\n/**\n * Performs an OR boolean search on the inverted index.\n *\n * @param keywords a list of keywords in the OR query\n * @return a iterator of documents matching the query\n */\npublic Iterator&lt;Document&gt; searchOrQuery(List&lt;String&gt; keywords) \n</pre><h2 id=\"Task4OptionalExtraCredit:Implementdeletions.\">Task 4 (Optional Extra Credit): Implement deletions.</h2>\n<p>\nIn our LSM-like index structure, deletion could be implemented by maintaining a list deleted document IDs per segment.\nThe document is not actually deleted in the inverted index nor document store.\nWhen reading or searching, each docID is checked to see if it has been deleted.\n</p>\n<p>\nThose deleted documents within a segment should be physically deleted when we merge it with another segment.\n</p>\n<p>\nSpecific functions to implement:\n</p>\n<pre class=\"wiki\">/**\n * Deletes all documents in all disk segments of the inverted index that match the keyword.\n * @param keyword \n */\npublic void deleteDocuments(String keyword)\n</pre><h2 id=\"Testcases\">Test cases</h2>\n<p>\nPlease follow the similar general guideline and procedure as in project 1. Here is <a class=\"ext-link\" href=\"https://docs.google.com/spreadsheets/d/1_iwJOT-bnYDk9tWNNy61GCyi1kRN7s3VHdn5h_2T1DA/edit#gid=996032174\"><span class=\"icon\">\u200b</span>test task assignment</a>\nThere are some guidelines and tips for project 2 test cases:\n</p>\n<ol><li>Put the index and document files under your own folder. Specifically, you should use folder <tt>index/YourTestName/</tt>, for example <tt>index/Team0StressTest</tt>.\n</li><li>Clean up and delete all files after each test. You should use Junit <tt>@After</tt> to delete all written files.\n</li><li>For testing task 1 and 2, you could change <tt>default_flush_threshold</tt> or <tt>default_merge_threshold</tt>, or directly call <tt>flush()</tt> and <tt>mergeAllSegments()</tt> to control when to flush or when to merge. If you changed the variables <tt>default_flush_threshold</tt> or <tt>default_merge_threshold</tt>, be sure to change them back to the original value after your tests.\n</li><li>For stress test, you should collect or generate a large amount of text data to test the performance and stability. If you rely on external data sets, please don't commit the large data directly in git, instead, use a link for where to download the data.\n</li><li>For all test tasks, you should also check the read/write counter values in <a class=\"forbidden wiki\" title=\"no permission to view this wiki page\">PageFileChannel</a> to make sure the IO number are within a reasonable range.\n</li></ol></div>\n          \n          \n        \n        \n      </div>\n      \n    <div id=\"attachments\">\n        <h3 class=\"foldable\">Attachments <span class=\"trac-count\">(2)</span></h3>\n        <div>\n          <ul>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs221-2019-spring-project2/Team2StressTest.txt\" title=\"View attachment\">Team2StressTest.txt</a><a href=\"/wiki/public/raw-attachment/wiki/cs221-2019-spring-project2/Team2StressTest.txt\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"725060 bytes\">708.1 KB</span>) -\n      added by <em>zuozhi</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-04-30T05%3A40%3A56-07%3A00&amp;precision=second\" title=\"See timeline at Apr 30, 2019 5:40:56 AM\">6 months ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs221-2019-spring-project2/Team3StressTest.txt\" title=\"View attachment\">Team3StressTest.txt</a><a href=\"/wiki/public/raw-attachment/wiki/cs221-2019-spring-project2/Team3StressTest.txt\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"8761 bytes\">8.6 KB</span>) -\n      added by <em>zuozhi</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-04-30T07%3A33%3A06-07%3A00&amp;precision=second\" title=\"See timeline at Apr 30, 2019 7:33:06 AM\">6 months ago</a>.\n              </li>\n          </ul>\n          <p>\n            Download all attachments as: <a rel=\"nofollow\" href=\"/wiki/public/zip-attachment/wiki/cs221-2019-spring-project2/\">.zip</a>\n          </p>\n        </div>\n    </div>\n\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"last first\">\n          <a rel=\"nofollow\" href=\"/wiki/public/wiki/cs221-2019-spring-project2?version=12&amp;format=txt\">Plain Text</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>", "encoding": "utf-8"}