{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&version=32", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs122b-2019-winter-project2 (diff) \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=history\" title=\"Page history\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=33\" title=\"Version 33\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"prev\" href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=31\" title=\"Version 31\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/wiki/public/chrome/common/css/diff.css\" />\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span>&larr; <a class=\"prev\" href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=31\" title=\"Version 31\">Previous Change</a></span></li><li><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=history\" title=\"Page history\">Wiki History</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=33\" title=\"Version 33\">Next Change</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n      <h1>\n        Changes between\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=31\">Version 31</a> and\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=32\">Version 32</a> of\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2\">cs122b-2019-winter-project2</a>\n      </h1>\n      <form method=\"post\" id=\"prefs\" action=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=32\"><div><input type=\"hidden\" name=\"__FORM_TOKEN\" value=\"2f5cba70363e3cbae805958d\" /></div>\n        <div>\n          <input type=\"hidden\" name=\"action\" value=\"diff\" />\n          <input type=\"hidden\" name=\"version\" value=\"32\" />\n          <input type=\"hidden\" name=\"old_version\" value=\"31\" />\n          \n  <label for=\"style\">View differences</label>\n  <select id=\"style\" name=\"style\">\n    <option selected=\"selected\" value=\"inline\">inline</option>\n    <option value=\"sidebyside\">side by side</option>\n  </select>\n  <div class=\"field\">\n    <label><input type=\"radio\" name=\"contextall\" value=\"0\" checked=\"checked\" />\n             Show</label>\n      <label><input type=\"text\" name=\"contextlines\" id=\"contextlines\" size=\"2\" maxlength=\"3\" value=\"2\" />\n             lines around each change</label><br />\n    <label><input type=\"radio\" name=\"contextall\" value=\"1\" />\n           Show the changes in full context</label>\n  </div>\n  <fieldset id=\"ignore\">\n    <legend>Ignore:</legend>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignoreblanklines\" name=\"ignoreblanklines\" />\n      <label for=\"ignoreblanklines\">Blank lines</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorecase\" name=\"ignorecase\" />\n      <label for=\"ignorecase\">Case changes</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorewhitespace\" name=\"ignorewhitespace\" />\n      <label for=\"ignorewhitespace\">White space changes</label>\n    </div>\n  </fieldset>\n  <div class=\"buttons\">\n    <input type=\"submit\" name=\"update\" value=\"Update\" />\n  </div>\n\n        </div>\n      </form>\n      <dl id=\"overview\">\n        <dt class=\"property time\">Timestamp:</dt>\n        <dd class=\"time\">\n            Jan 20, 2019 9:52:54 PM (<a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-01-20T21%3A52%3A54-08%3A00&amp;precision=second\" title=\"See timeline at Jan 20, 2019 9:52:54 PM\">9 months</a> ago)\n        </dd>\n        <dt class=\"property author\">Author:</dt>\n        <dd class=\"author\">\n          dayueb\n        </dd>\n        <dt class=\"property message\">Comment:</dt>\n        <dd class=\"message\">\n          \n          <p>\n--\n</p>\n\n        </dd>\n      </dl>\n      <div class=\"diff\">\n        <div class=\"legend\" id=\"diff-legend\">\n          <h3>Legend:</h3>\n          <dl>\n            <dt class=\"unmod\"></dt><dd>Unmodified</dd>\n            <dt class=\"add\"></dt><dd>Added</dd>\n            <dt class=\"rem\"></dt><dd>Removed</dd>\n            <dt class=\"mod\"></dt><dd>Modified</dd>\n          </dl>\n        </div>\n        <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2 id=\"file0\">\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=32\">cs122b-2019-winter-project2</a>\n        </h2>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"Version 31\">\n                    <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=31#L1\">\n                      v31</a>\n                  </th>\n                  <th title=\"Version 32\">\n                    <a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=32#L1\">\n                      v32</a>\n                  </th>\n                  <td>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>1</th><th>1</th><td class=\"l\"><span>= Project 2: Starting Fabflix Business =</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>2</th><th>\u00a0</th><td class=\"l\"><span>'''Due: Week 5 Monday, Feb. 4 11:45 pm. <del>Due</del> on Github.'''</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>2</th><td class=\"r\"><span>'''Due: Week 5 Monday, Feb. 4 11:45 pm. <ins>Submit project</ins> on Github.'''</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>3</th><th>3</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>4</th><th>4</th><td class=\"l\"><span>'''Project Description'''</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=31#L7\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=32#L7\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>7</th><th>7</th><td class=\"l\"><span>&nbsp;* [#Example Example]</span></td>\n                  </tr><tr>\n                          <th>8</th><th>8</th><td class=\"l\"><span>&nbsp;* [#StepByStep Step by Step]</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>9</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* [#Deployment&amp;Submission Deployment on AWS &amp; Submission<del>&nbsp;</del>]</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>9</th><td class=\"r\"><span>&nbsp;* [#Deployment&amp;Submission Deployment on AWS &amp; Submission<ins></ins>]</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>10</th><th>10</th><td class=\"l\"><span>&nbsp;* [#Demo&amp;Grading Demonstration &amp; Grading Criteria]</span></td>\n                  </tr><tr>\n                          <th>11</th><th>11</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=31#L14\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=32#L14\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>14</th><th>14</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>15</th><th>15</th><td class=\"l\"><span>== Project 2 Overview ==</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>16</th><th>\u00a0</th><td class=\"l\"><span>In this project, you will <del>start the Fabflix business! In particular, you will provide Web-based interfaces to allow customers to browse/search for movie information, add interesting movies to their shopping cart, and check out. The following figure shows the flow of the interfaces you need to implement</del>.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>16</th><td class=\"r\"><span>In this project, you will <ins>build functionalities such as browsing movies by category, searching movies by condition, adding movies to the shopping cart, etc. The image below shows the workflow you should follow to create your website</ins>.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>17</th><th>17</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>18</th><th>18</th><td class=\"l\"><span>[[Image(wiki:cs122b-2019-winter-project2:design-diagram.jpg)]]</span></td>\n                  </tr><tr>\n                          <th>19</th><th>19</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>20</th><th>\u00a0</th><td class=\"l\"><span>The following are details about the interfaces.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>20</th><td class=\"r\"><span>Basic project requirements:</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>21</th><th>21</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>22</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* The \"Login\" page asks a customer to provide an email and a&nbsp; password in order to log into the system. '''Use HTTP POST instead of HTTP&nbsp; GET'''[[BR]] so that the username and password are not displayed on the address bar.&nbsp; Note that the email and password are attributes of the customer table.&nbsp; You should use the customer table for authentication, '''NOT''' the database login/password (such as \"testuser\" and \"testpass\").</span></td>\n                      </tr><tr>\n                        <th>23</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* On the \"Main\" page, the customer can choose either to \"Search\" for movies or \"Browse\" for movies.</span></td>\n                      </tr><tr>\n                        <th>24</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* On the \"Searching\" page, the customer can search for movies by any of the following attributes or their combination (logical \"AND\"&nbsp; operation):</span></td>\n                      </tr><tr>\n                        <th>25</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* title;</span></td>\n                      </tr><tr>\n                        <th>26</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* year;</span></td>\n                      </tr><tr>\n                        <th>27</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* director;</span></td>\n                      </tr><tr>\n                        <th>28</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* star's name. You need to return the stars whose name contains the name user types in. For example, the name \"Peter Anteater\" should appear when searching \"Peter\" or \"Anteater\".</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>22</th><td class=\"r\"><span>&nbsp;* Login: To log into the system, customers need to enter correct email and password. You are required to use '''HTTP POST''' instead of HTTP GET so that the username and password will not be displayed on the address bar. When authenticating user input information, columns: {{{email}}} and {{{password}}} in {{{customers}}} table can be used for reference.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>29</th><th>23</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>30</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;<del>&nbsp;Check https://www.imdb.com/search/title to see an example of the interface. Of course, your interface can have a&nbsp; different styl</del>e.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>24</th><td class=\"r\"><span>&nbsp;<ins>* Home page: Customers can browse and search movies on the main pag</ins>e.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>31</th><th>25</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>32</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* The \"Movie list\" page shows the results of the search, and the results are formatted as a table with at least the following columns:</span></td>\n                      </tr><tr>\n                        <th>33</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* id;</span></td>\n                      </tr><tr>\n                        <th>34</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* title (hyperlinked to the corresponding single movie page implemented in [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#Tasks67:ImplementSingleMovieandSingleStarpages Project 1]);</span></td>\n                      </tr><tr>\n                        <th>35</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* year;</span></td>\n                      </tr><tr>\n                        <th>36</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* director;</span></td>\n                      </tr><tr>\n                        <th>37</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* list of genres;</span></td>\n                      </tr><tr>\n                        <th>38</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* list of stars (each hyperlinked to the corresponding single star page implemented in [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#Tasks67:ImplementSingleMovieandSingleStarpages Project 1]);</span></td>\n                      </tr><tr>\n                        <th>39</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* rating;</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>26</th><td class=\"r\"><span>&nbsp;* Searching: Customers can search for movies by single or multiple conditions:</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>27</th><td class=\"r\"><span>&nbsp; &nbsp;* title</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>28</th><td class=\"r\"><span>&nbsp; &nbsp;* year</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>29</th><td class=\"r\"><span>&nbsp; &nbsp;* director</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>30</th><td class=\"r\"><span>&nbsp; &nbsp;* star's name</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>40</th><th>31</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>41</th><th>\u00a0</th><td class=\"l\"><span>The following requirements should be met.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>32</th><td class=\"r\"><span>&nbsp; &nbsp;When customers search for movies by multiple conditions, you should use '''AND''' logic to combine conditions. </span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>42</th><th>33</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>43</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* ''Substring matching'': The user does not have to provide an exact value for an attribute, and the system should support \"substring matching\". For example, a query asking for \"term\" for the \"title\" attribute should return movies such as \"Terminal\" and \"Terminator.\" You can use the \"LIKE\" and \"ILIKE\" SQL operators for pattern matching in any way you wish.&nbsp; For example:</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>34</th><td class=\"r\"><span>&nbsp;* Movie list page: Customers can find search results on this page. Search results should be formatted as a table with at least the following columns:</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>35</th><td class=\"r\"><span>&nbsp; &nbsp;* id</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>36</th><td class=\"r\"><span>&nbsp; &nbsp;* title (hyperlinked to the corresponding single movie page implemented in [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#Tasks67:ImplementSingleMovieandSingleStarpages Project 1])</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>37</th><td class=\"r\"><span>&nbsp; &nbsp;* year</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>38</th><td class=\"r\"><span>&nbsp; &nbsp;* director</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>39</th><td class=\"r\"><span>&nbsp; &nbsp;* list of genres</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>40</th><td class=\"r\"><span>&nbsp; &nbsp;* list of stars (each hyperlinked to the corresponding single star page implemented in [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#Tasks67:ImplementSingleMovieandSingleStarpages Project 1])</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>41</th><td class=\"r\"><span>&nbsp; &nbsp;* rating</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>42</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>43</th><td class=\"r\"><span>The following details of functionalities should also be met.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>44</th><td class=\"r\"><span></span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>45</th><td class=\"r\"><span>&nbsp;* ''Substring matching'': The search functionality of the website should support \"substring matching\" so that customers do not have to provide an exact value for an attribute. For example, when customers search for movies by title keyword: \"term\", the website should return movies such as \"Terminal\" and \"Terminator.\" You can use the \"LIKE\" and \"ILIKE\" SQL operators for pattern matching in any way you wish.&nbsp; For example:</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>44</th><th>46</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>45</th><th>47</th><td class=\"l\"><span>&nbsp; '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SELECT \"column_name\"'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[[BR]]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FROM \"table_name\"'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[[BR]]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WHERE \"column_name\" LIKE pattern'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[[BR]]</span></td>\n                  </tr><tr>\n                          <th>46</th><th>48</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>47</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;often consists of wildcards.[[BR]]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Note: '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;You<del>&nbsp;are required to write an explanation of how/where you use the LIKE predicate in your codebase. You should put this in a text file (plain text or markdown) in your Github repository, for example, \"like-predicate.txt\", or \"like-predicate.md\"</del></span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>49</th><td class=\"r\"><span>&nbsp; '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;often consists of wildcards.[[BR]]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Note: '''&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;You<ins>r Github repository should include a text file that explains how and where you use the LIKE predicate in your codebase. The file name can be \"like-predicate.txt\" or \"like-predicate.md\".</ins></span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>48</th><th>50</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>49</th><th>51</th><td class=\"l\"><span>&nbsp;* Here are some examples:</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>50</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* 'A_Z':&nbsp; All string<del>&nbsp;that starts with 'A', another character, and ends with 'Z'.&nbsp; For example, 'ABZ' and 'A2Z' would both satisfy the condition, while&nbsp; 'AKKZ' would not (because there are two characters between A and Z&nbsp; instead of one)</del>.</span></td>\n                      </tr><tr>\n                        <th>51</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* 'ABC%': All strings that start with 'ABC'. <del>For example,&nbsp; 'ABCD' and 'ABCABC' would both satisfy the condition</del>.</span></td>\n                      </tr><tr>\n                        <th>52</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* '%XYZ': All strings that end with 'XYZ'. <del>For example, 'WXYZ'&nbsp; and 'ZZXYZ' would both satisfy the condition</del>.</span></td>\n                      </tr><tr>\n                        <th>53</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;* '%AN%':&nbsp; All strings that contain the pattern 'AN' anywhere. <del>For example, 'LOS ANGELES' and 'SAN FRANCISCO' would both satisfy the condition</del>.</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>52</th><td class=\"r\"><span>&nbsp; &nbsp;* 'A_Z':&nbsp; All string<ins>s that start with 'A', then follow by a single character, and end with 'Z'.&nbsp; E.g. 'ABZ' and 'A2Z'. However, 'AKKZ' does not satisfy the condition</ins>.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>53</th><td class=\"r\"><span>&nbsp; &nbsp;* 'ABC%': All strings that start with 'ABC'. <ins>E.g. 'ABCD' and 'ABCABC'</ins>.</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>54</th><td class=\"r\"><span>&nbsp; &nbsp;* '%XYZ': All strings that end with 'XYZ'. <ins>E.g. 'WXYZ'&nbsp; and 'ZZXYZ'</ins>.</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>55</th><td class=\"r\"><span>&nbsp; &nbsp;* '%AN%':&nbsp; All strings that contain the pattern 'AN' anywhere. <ins>E.g. 'LOS ANGELES' and 'SAN FRANCISCO'</ins>.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>54</th><th>56</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>55</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* ''Sorting'': <del>A user should be able to click on the header of title or rating so that the results will be sorted (ascending or descending) by the corresponding attribute</del>.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>57</th><td class=\"r\"><span>&nbsp;* ''Sorting'': <ins>Customers can sort search results by either \"title\" or \"rating\" in either ascending or descending order</ins>.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>56</th><th>58</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>57</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* ''!Previous/Next'': <del>Since there could be many movies on the list, each page can only display a certain number (''N'') of movies, and the interface has \"Prev\"/\"Next\" buttons to allow the user to go through all the movies.&nbsp; &nbsp;Your interface should allow the customer to change the number of listings ''N'' per page. You can implement</del> a drop-down menu to choose \"N\" from a list of predefined values such as 10, 25, 50, 100, etc.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>59</th><td class=\"r\"><span>&nbsp;* ''!Previous/Next'': <ins>As there could be many movies that need to be shown on the movie page, each page should only display a certain number (''N'') of movies. And the page should have \"Prev\"/\"Next\" buttons which allow customers to view all the movies. Your website should allow customers to change the number of movies (\"N\") shown per page. Customers can click on</ins> a drop-down menu to choose \"N\" from a list of predefined values such as 10, 25, 50, 100, etc.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>58</th><th>60</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>59</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* Using the \"Browsing\" page, <del>the user can browse movies by either their genres and or title. The \"Browsing by movie genre\" page has all the (hyperlinked) genres. The user can click on a genre to see all the movies of this genre. The \"Browsing by movie title\" page categorizes the movies based on their titles. The page organizes all the titles based on their first character in the title in alphabetical order.&nbsp; (Notice that the first character could be a digit such as \"2\" in \"2012\".)&nbsp; When the user clicks on a letter, the website should show the list of all the movies each with its first letter in the title</del>.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>61</th><td class=\"r\"><span>&nbsp;* Using the \"Browsing\" page, <ins>customers can browse movies by either genres or titles. The \"Browsing by movie genre\" page should include all the (hyperlinked) genres. Customers can click on a genre link to see all the movies of this genre. The \"Browsing by movie title\" page categorizes movies based on the first character in movie title in alphabetical order.&nbsp; (Note that the first character could be a digit such as '2\" in the movie: \"2012\".)&nbsp; When customers click on a character link, the website should all the movies each with the title starting with that character</ins>.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>60</th><th>62</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>61</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* ''Shopping Cart'': For all <del>the pages that display movie information, each movie should have an associated \"Add to Shopping Cart\" interface. The interface shows the current number of copies for this item (during this login session), and allows the user to add more copies (or delete all copies) of this item by modifying the quantity. If the user clicks the button, the corresponding number of copies of movies should be set in his/her shopping cart (or delete the item if the quantity is set to 0).&nbsp; The interface should allow the user to see all the items (with their quantities) in his/her current shopping cart (during this login session)</del>.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>63</th><td class=\"r\"><span>&nbsp;* ''Shopping Cart'': For all <ins>pages that display movie information, each movie should have an \"Add to Shopping Cart\" button. The shopping cart page should show the quantity of each movie in the cart (within the current login session) and allow customers to modify the quantity of each movie. A movie should be removed from the shopping cart when its quantity is set to 0</ins>.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>62</th><th>64</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>63</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; All pages <del>after login should have a \"Checkout\" button. If the user clicks this button, there is a \"Shopping cart\" page that displays the movies in the shopping cart. If the user chooses to proceed to check out, the next page \"Ask for Customer Information\" should ask the user to provide a credit number, expiration date, the first name, and the last name of the credit card holder</del>.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>65</th><td class=\"r\"><span>&nbsp; All pages <ins>except the login page should have a \"Checkout\" button. When customers click the button, the website should direct them to the shopping cart page. In the shopping cart page, if customers proceed to check out, the next page (payment) should ask customers to provide payment information including first name and last name of cardholder, card number, and expiration date</ins>.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>64</th><th>66</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>65</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* ''<del>' '''''Checkout''''':'''&nbsp; The transaction succeeds only if the user can provide the first name, the last name, and a credit card with an expiration date, which matches a record '''in the credit cards table (not those in the customers table)'''. If succeeded, the transaction</del> should be recorded in the system (in the \"sales\" table) and a confirmation page should be displayed.&nbsp; &nbsp;[[BR]]</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>67</th><td class=\"r\"><span>&nbsp;* ''<ins>Checkout'':&nbsp; The transaction succeeds only if customers can provide correct payment information which matches a record '''in the credit cards table (not those in the customers table)'''. If the transaction succeeds, it</ins> should be recorded in the system (in the \"sales\" table) and a confirmation page should be displayed.&nbsp; &nbsp;[[BR]]</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>66</th><th>68</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>67</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;* <del>'''Performance requirements'''</del>: You can decide whether you want to do caching on the Web server for earlier query results.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>69</th><td class=\"r\"><span>&nbsp;* <ins>Performance requirement</ins>: You can decide whether you want to do caching on the Web server for earlier query results.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>68</th><th>70</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>69</th><th>71</th><td class=\"l\"><span>'''You must NOT:'''</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=31#L106\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=32#L108\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>106</th><th>108</th><td class=\"l\"><span>== Deployment On AWS &amp; Submission ==</span></td>\n                  </tr><tr>\n                          <th>107</th><th>109</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>108</th><th>\u00a0</th><td class=\"l\"><span>Use Github to manage your project 2 code and deploy on AWS<del>, similar to what you have done in project 1. </del></span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>110</th><td class=\"r\"><span>Use Github to manage your project 2 code and deploy on AWS<ins>&nbsp;(similar to what you have done in project 1).</ins></span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>109</th><th>111</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>110</th><th>112</th><td class=\"l\"><span>Check [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#ProjectSubmission Project1 Submission] before you submit Project 2 on Github.</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=31#L120\">\u2026</a></th>\n                  <th><a href=\"/wiki/public/wiki/cs122b-2019-winter-project2?version=32#L122\">\u2026</a></th>\n                  <td>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>120</th><th>122</th><td class=\"l\"><span>== If you chose a different domain ==</span></td>\n                  </tr><tr>\n                          <th>121</th><th>123</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>122</th><th>\u00a0</th><td class=\"l\"><span>You may design your own <del>flow of interfaces that is suitable for your application. However, your application must cover the functionalities mentioned above, including login, conditional search, browsing, selection, sorting, navigation between pages, and error handling. If your domain doesn't require a shopping cart and checkout, come up with two features that are comparable. You are required to draw your application workflow (similar to the Fabflix diagram above) and present it during the demo session. It is your responsibility to make sure that your design and implementation meet all the requirements. If you are not sure about it, make sure to post it on Piazza or come</del> to office hours to discuss.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>124</th><td class=\"r\"><span>You may design your own <ins>workflow that is suitable for your application. However, your application must cover the functionalities mentioned above, including login, conditional searching, browsing, sorting, navigation between pages, and error handling. If your domain doesn't require a shopping cart and checkout, come up with two features that are comparable. You are required to draw your application's workflow (similar to the Fabflix diagram above) and present it during the demo. It is your responsibility to make sure that your design and implementation meet all the requirements. If you are not sure about it, make sure to post it on Piazza or go</ins> to office hours to discuss.</span></td>\n                      </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n      </div>\n  </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>\n", "encoding": "utf-8"}