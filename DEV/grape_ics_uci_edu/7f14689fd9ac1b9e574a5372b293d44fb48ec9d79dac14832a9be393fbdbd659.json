{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs221-2019-spring-project1?version=5&format=txt", "content": "\r\n= CS122B: Project 1 =\r\n'''Test Cases Due:     Week 1 Sunday (Apr 7), Due on Github as Pull Requests'''[[BR]]\r\n'''Review Due:           Week 2, Wed. (Apr 10),  Due on Github as Pull Requests Comments'''[[BR]]\r\n'''Final Code Due:     Week 3, Wed. (Apr. 17),  Due on Github.'''[[BR]]\r\n\r\n= Setups =\r\n1. Setup Development Environment\r\n1. Clone the CS221 repository\r\n1. Join Github Organization and create a repo for your team\r\n\r\n= Tasks =\r\n1. Implement a simple punctuations and white spaces based tokenizer.\r\n1. Implement a Dynamic-Programming based Word Break Tokenizer.\r\n1. Incorporate a porter stemmer.\r\n1. Optional Extra Credit: Implement a dynamic-programming based Chinese/Japanese tokenizer.\r\n\r\n\r\n= Setup Environments: =\r\n||= Task =||=Guide =||\r\n|| Install Java8 || We require [https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html Java 8] ||\r\n|| Install Maven || [#setup-maven Setup Maven] || \r\n|| Setup IntelliJ || [https://www.jetbrains.com/idea/ Intellij] (IntelliJ is strongly recommended) || \r\n \r\n= Clone CS 221 repository: =\r\n\r\nGo to [https://github.com/UCI-Chenli-teaching/spring19-cs221-project spring19-cs221-project] and follow the README instructions to import the CS221 project into your IntelliJ. IntelliJ is needed because a library we use is written in Kotlin, which has built-in support in IntelliJ.\r\n\r\n= Task 3: Join Github Organization and create a repo for your team. =\r\nThis course uses Github for version control, submitting final code, submitting test cases and reviews. The students are expected to use Github as explained below.\r\n\r\n * Create an account on Github if you don't have one. Then provide us your username in the  [https://docs.google.com/spreadsheets/d/1_iwJOT-bnYDk9tWNNy61GCyi1kRN7s3VHdn5h_2T1DA/edit?usp=sharing Google Spreadsheet].\r\n * Wait for the invitation from our staff to join the [https://github.com/UCI-Chenli-teaching UCI-Chenli-teaching organization]. The invitation might take a few days to be sent out based on our schedule.\r\n * One member from each team needs to create a '''private''' repository. The repository name should be of the form 'cs221-spring19-team-x' where 'x' is your assigned team number, e.g., \"cs221-spring19-team-1\". Other members can then be added to the repository as collaborators (by following steps given [https://help.github.com/articles/inviting-collaborators-to-a-personal-repository/ here]).\r\n * You must wait for the invitation from us and '''create a private repository within the organization UCI-Chenli-teaching'''. Don't create a private repository on your own. 1) Go to [https://github.com/UCI-Chenli-teaching UCI-Chenli-teaching organization]. 2) click the '''New''' button to create a repository. 3) Type in the name and choose '''private'''.\r\n\r\n * You can then begin with your project using Github. Put the code of your project in your team's Github repository.\r\n\r\nWe have a [https://grape.ics.uci.edu/wiki/public/wiki/cs221-2019-spring-project1-git wiki] to get you started with Github for this course. Go through one of these online tutorials to get familiar with Git and Github if you are not familiar with them.\r\n\r\n * https://try.github.io\r\n * https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners\r\n\r\n\r\n= Task 1: Implement a simple punctuations and white spaces based tokenizer (3 points) =\r\n\r\nImplement this tokenizer in `analysis/PunctuationTokenizer.java`\r\n\r\nFor example: the text \"I am Happy Today!\" should be tokenized to [\"happy\", \"today\"].\r\n\r\nRequirements:\r\n - White spaces (space, tab, newline, etc..) and punctuations provided below should be used to tokenize the text.\r\n - White spaces and punctuations should be removed from the token and results.\r\n - All tokens should be converted to lower case.\r\n - Stop words should be filtered out. Use the stop word list provided in `StopWords.java`\r\n\r\n\r\n= Task 2: Implement a Dynamic-Programming based Word Break Tokenizer (8 points) =\r\n\r\nWord break is a problem where given a dictionary and a string (text with all white spaces removed), determine how to break the string into sequence of words.\r\nImplement this tokenizer in `analysis/PunctuationTokenizer.java`\r\n\r\n\r\nFor example:\r\ninput string \"catanddog\" is broken to tokens [\"cat\", \"and\", \"dog\"]\r\n\r\nWe provide an English dictionary corpus with frequency information in \"resources/cs221_frequency_dictionary_en.txt\".\r\nUse frequency statistics to choose the optimal way when there are many alternatives to break a string.\r\n\r\nFor example,\r\ninput string is \"ai\",\r\ndictionary and probability is: \"a\": 0.1, \"i\": 0.1, and \"ai\": \"0.05\".\r\n\r\nAlternative 1: [\"a\", \"i\"], with probability p(\"a\") * p(\"i\") = 0.01\r\nAlternative 2: [\"ai\"], with probability p(\"ai\") = 0.05\r\nFinally, [\"ai\"] is chosen as result because it has higher probability.\r\n\r\nRequirements:\r\n - Use Dynamic Programming for efficiency. Running time cannot be too slow.\r\n - Use the the given dictionary corpus and frequency statistics to determine optimal alternative.\r\n     The probability is calculated as the product of each token's probability, assuming the tokens are independent.\r\n - A match in dictionary is case insensitive. Output tokens should all be in lower case.\r\n - Stop words should be removed after breaking.\r\n - If there's no possible way to break the string, throw an exception.\r\n\r\n\r\n= Task 3: Incorporate a porter stemmer (2 points) =\r\n\r\nStemming is the process of reducing a word into its \"stem\" (\"root\") form.\r\n\r\nPorter stemming is a classic and popular algorithm that uses a set of rules and steps to process a token.\r\nImplementing porter stemmer is not technically interesting - it just consists a bunch of if-else statements,\r\ntherefore we ask you to simply incorporate an existing porter stemmer implementation into this project.\r\n\r\nhttps://github.com/apache/lucene-solr/blob/master/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer.java\r\n\r\n\r\n= Task 4:  Implement a dynamic-programming based Chinese/Japanese tokenizer (Optional Extra Credit, 3 points) =\r\n\r\nTokenizing Chinese or Japanese text is challenging because there's no spaces between words. It is very similar to the word break problem in task 2.\r\n\r\nUse the same dictionary-frequency and dynamic programming based algorithm in task 2 to implement a Chinese or Japanese Tokenizer. For fairness, you must choose a language that is NOT your mother language.\r\n\r\nYou need to find a Chinese/Japanese dictionary corpus with frequency information on your own, and write at least 3 test cases to test the correctness of your tokenizer.\r\n\r\n\r\n= Task: Submitting Test Cases (3 points) =\r\n\r\nFor this project, we require each team to submit at least 2 test cases. We expect you to write high-quality test cases, and grade will be based on the correctness, quality, and documentation of them. \r\nFor this project, each team will be assigned to writing test cases for 1 specific task:\r\n- team 1-12: Task 1: Punctuation-based Tokenizer\r\n- team 13-24: Task 2: Dynamic-programming based Word Break Tokenizer\r\n- team 25-last: Task3: Porter Stemmer\r\n\r\nThe test cases should follow these general guidelines:\r\n1. Create a new class under the corresponding package in `test/java/edu.uci.ics.cs221/...`, the class name should follow the naming convention `Team#TaskNameTest`. \r\n2. Write tests using the JUnit testing framework. Use `Assert` functions from the Junit framework.\r\n3. Each test case should be independent of each other. JUnit runs test cases out of order.\r\n4. Each test case should a JavaDoc comments describing what the test case does.\r\n\r\nThe test cases should be submitted via Github Pull Requests, to submit a test case:\r\n1. '''fork''' the [https://github.com/UCI-Chenli-teaching/spring19-cs221-project spring19-cs221-project] into your own Github account. Clone your fork into your local machine.\r\n1. In your own fork repo, go to \"settings -> Collaborators\", add the TA \"zuozhiw@gmail.com\" as a collaborator.\r\n1. Add the test cases, commit, and push to your own fork's master branch.\r\n1. In your own fork repo, click \"Pull request\" and open a pull request to merge into the original repo `UCI-Chenli-teaching/spring19-cs221-project`\r\n1. Follow the title and content of the [https://github.com/UCI-Chenli-teaching/spring19-cs221-project/pull/1 template pull request]\r\n\r\n\r\n= Task: Peer Review Test Cases (2 points) = \r\n\r\n\r\n\r\n\r\n", "encoding": "ascii"}