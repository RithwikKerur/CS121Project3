{"url": "https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs222-2019-fall-project2/Project2.patch", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      Project2.patch on cs222-2019-fall-project2 \u2013 Attachment\n     \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"alternate\" href=\"/wiki/public/raw-attachment/wiki/cs222-2019-fall-project2/Project2.patch\" type=\"text/x-diff; charset=iso-8859-15\" title=\"Original Format\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs222-2019-fall-project2\" title=\"cs222-2019-fall-project2\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/code.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n      <script type=\"text/javascript\" src=\"/wiki/public/chrome/common/js/folding.js\"></script>\n      <script type=\"text/javascript\">\n        jQuery(document).ready(function($) {\n          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));\n        });\n      </script>\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"last first\"><a href=\"/wiki/public/wiki/cs222-2019-fall-project2\">Back to cs222-2019-fall-project2</a></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"attachment\">\n        <h1><a href=\"/wiki/public/wiki/cs222-2019-fall-project2\">cs222-2019-fall-project2</a>: Project2.patch</h1>\n        <table id=\"info\" summary=\"Description\">\n          <tr>\n            <th scope=\"col\">File Project2.patch, <span title=\"94083 bytes\">91.9 KB</span> (added by yicongh1, <a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-10-09T15%3A21%3A39-07%3A00&amp;precision=second\" title=\"See timeline at Oct 9, 2019 3:21:39 PM\">3 days ago</a>)</th>\n          </tr>\n          <tr>\n            <td class=\"message searchable\">\n              \n            </td>\n          </tr>\n        </table>\n        <div id=\"preview\" class=\"searchable\">\n          \n  <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2>\n          <a>.gitignore</a>\n        </h2>\n        <pre>From 16fb86162da83ae02ba5ba9cff025f5370235f1d Mon Sep 17 00:00:00 2001\nFrom: Yicong-Huang &lt;hyc541978023@gmail.com&gt;\nDate: Mon, 7 Oct 2019 09:16:34 -0700\nSubject: [PATCH] Project 2\n\n---\n .gitignore                 |   8 +-\n CMakeLists.txt             |  12 +-\n README.md                  |  38 +++-\n project2_report.txt        |  40 ++++\n rbf/makefile               |   8 +-\n rbf/rbftest_delete.cc      | 159 ++++++++++++++\n rbf/rbftest_update.cc      | 159 ++++++++++++++\n rm/makefile                |  66 ++++++\n rm/rm.cc                   |  83 +++++++\n rm/rm.h                    |  77 +++++++\n rm/rm_test_util.h          | 431 +++++++++++++++++++++++++++++++++++++\n rm/rmtest_00.cc            |  26 +++\n rm/rmtest_01.cc            |  62 ++++++\n rm/rmtest_02.cc            |  61 ++++++\n rm/rmtest_03.cc            |  75 +++++++\n rm/rmtest_04.cc            |  55 +++++\n rm/rmtest_05.cc            |  69 ++++++\n rm/rmtest_06.cc            |  69 ++++++\n rm/rmtest_07.cc            |  53 +++++\n rm/rmtest_08.cc            |  53 +++++\n rm/rmtest_09.cc            |  58 +++++\n rm/rmtest_10.cc            |  72 +++++++\n rm/rmtest_11.cc            |  44 ++++\n rm/rmtest_12.cc            |  70 ++++++\n rm/rmtest_13.cc            |  78 +++++++\n rm/rmtest_13b.cc           | 122 +++++++++++\n rm/rmtest_14.cc            |  69 ++++++\n rm/rmtest_15.cc            |  72 +++++++\n rm/rmtest_create_tables.cc |  41 ++++\n rm/rmtest_delete_tables.cc |  35 +++\n rm/rmtest_extra_1.cc       |  84 ++++++++\n rm/rmtest_extra_2.cc       |  76 +++++++\n 32 files changed, 2410 insertions(+), 15 deletions(-)\n create mode 100755 project2_report.txt\n create mode 100644 rbf/rbftest_delete.cc\n create mode 100644 rbf/rbftest_update.cc\n create mode 100644 rm/makefile\n create mode 100755 rm/rm.cc\n create mode 100755 rm/rm.h\n create mode 100644 rm/rm_test_util.h\n create mode 100644 rm/rmtest_00.cc\n create mode 100644 rm/rmtest_01.cc\n create mode 100644 rm/rmtest_02.cc\n create mode 100644 rm/rmtest_03.cc\n create mode 100644 rm/rmtest_04.cc\n create mode 100644 rm/rmtest_05.cc\n create mode 100644 rm/rmtest_06.cc\n create mode 100644 rm/rmtest_07.cc\n create mode 100644 rm/rmtest_08.cc\n create mode 100644 rm/rmtest_09.cc\n create mode 100644 rm/rmtest_10.cc\n create mode 100644 rm/rmtest_11.cc\n create mode 100644 rm/rmtest_12.cc\n create mode 100644 rm/rmtest_13.cc\n create mode 100644 rm/rmtest_13b.cc\n create mode 100644 rm/rmtest_14.cc\n create mode 100644 rm/rmtest_15.cc\n create mode 100644 rm/rmtest_create_tables.cc\n create mode 100644 rm/rmtest_delete_tables.cc\n create mode 100644 rm/rmtest_extra_1.cc\n create mode 100644 rm/rmtest_extra_2.cc\n\ndiff --git a/.gitignore b/.gitignore\nindex d99efa9..c3df579 100644</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File a/.gitignore\">\n                      a\n                  </th>\n                  <th title=\"File b/.gitignore\">\n                      b\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>29</th><th>29</th><td class=\"l\"><span># Executables</span></td>\n                  </tr><tr>\n                          <th>30</th><th>30</th><td class=\"l\"><span>*.exe</span></td>\n                  </tr><tr>\n                          <th>31</th><th>31</th><td class=\"l\"><span>*.out</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>32</th><th>\u00a0</th><td class=\"l\"><span>*.app</span></td>\n                      </tr><tr>\n                        <th>33</th><th>\u00a0</th><td class=\"l\"><span><em>&nbsp;No newline at end of file</em></span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>32</th><td class=\"r\"><span>*.app</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>33</th><td class=\"r\"><span></span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>34</th><td class=\"r\"><span># Project files</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>35</th><td class=\"r\"><span>tbl_*</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>36</th><td class=\"r\"><span>Tables</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>37</th><td class=\"r\"><span>Columns</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>38</th><td class=\"r\"><span>*_file</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>39</th><td class=\"r\"><span><em>&nbsp;No newline at end of file</em></span></td>\n                      </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>CMakeLists.txt</a>\n        </h2>\n        <pre>diff --git a/CMakeLists.txt b/CMakeLists.txt\nindex 61383a2..4063fba 100644</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File a/CMakeLists.txt\">\n                      a\n                  </th>\n                  <th title=\"File b/CMakeLists.txt\">\n                      b\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>1</th><th>\u00a0</th><td class=\"l\"><span>cmake_minimum_required(VERSION <del>3.14</del>)</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>1</th><td class=\"r\"><span>cmake_minimum_required(VERSION <ins>2.8</ins>)</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>2</th><th>2</th><td class=\"l\"><span>project(cs222_fall19)</span></td>\n                  </tr><tr>\n                          <th>3</th><th>3</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>4</th><th>4</th><td class=\"l\"><span>set(CMAKE_CXX_STANDARD 11)</span></td>\n                  </tr><tr>\n                          <th>5</th><th>5</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>6</th><th>6</th><td class=\"l\"><span>add_custom_target(clean-all</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>7</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp; &nbsp; COMMAND rm Index* Indices* left* right* large* group* *out Tables Columns tbl_*<del></del>)</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>7</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp; &nbsp; COMMAND rm Index* Indices* left* right* large* group* *out Tables Columns tbl_*<ins>&nbsp;*_file</ins>)</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>8</th><th>8</th><td class=\"l\"><span>set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address -O1 -g&nbsp; -fno-omit-frame-pointer\")</span></td>\n                  </tr><tr>\n                          <th>9</th><th>9</th><td class=\"l\"><span>if (CMAKE_BUILD_TYPE MATCHES Debug)</span></td>\n                  </tr><tr>\n                          <th>10</th><th>10</th><td class=\"l\"><span>&nbsp; &nbsp; add_definitions(-DDEBUG=1)</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"#L13\">\u2026</a></th>\n                  <th><a href=\"#L13\">\u2026</a></th>\n                  <td><em> endif()</em>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>13</th><th>13</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>14</th><th>14</th><td class=\"l\"><span>add_library(PFM ./rbf/pfm.cc)</span></td>\n                  </tr><tr>\n                          <th>15</th><th>15</th><td class=\"l\"><span>add_library(RBFM ./rbf/rbfm.cc)</span></td>\n                  </tr>\n            </tbody><tbody class=\"add\">\n                  <tr class=\"last first\">\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>add_library(RM ./rm/rm.cc ${RBFM})</ins></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>16</th><th>17</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>17</th><th>18</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>18</th><th>19</th><td class=\"l\"><span>file(GLOB files rbf/rbftest*.cc)</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"#L20\">\u2026</a></th>\n                  <th><a href=\"#L21\">\u2026</a></th>\n                  <td><em> foreach(file ${files})</em>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>20</th><th>21</th><td class=\"l\"><span>&nbsp; &nbsp; get_filename_component(name ${file} NAME_WE)</span></td>\n                  </tr><tr>\n                          <th>21</th><th>22</th><td class=\"l\"><span>&nbsp; &nbsp; add_executable(${name} ${file})</span></td>\n                  </tr><tr>\n                          <th>22</th><th>23</th><td class=\"l\"><span>&nbsp; &nbsp; target_link_libraries(${name} RBFM PFM)</span></td>\n                  </tr>\n            </tbody><tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>endforeach()</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>file(GLOB files rm/rmtest_*.cc)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>foreach(file ${files})</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; get_filename_component(name ${file} NAME_WE)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; add_executable(${name} ${file})</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; target_link_libraries(${name} RM RBFM PFM)</ins></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>23</th><th>31</th><td class=\"l\"><span>endforeach()</span></td>\n                  </tr>\n            </tbody><tbody class=\"add\">\n                  <tr class=\"last first\">\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins><em>&nbsp;No newline at end of file</em></ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>README.md</a>\n        </h2>\n        <pre>diff --git a/README.md b/README.md\nindex 05dbdbc..cf28bb7 100644</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File a/README.md\">\n                      a\n                  </th>\n                  <th title=\"File b/README.md\">\n                      b\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>1</th><th>\u00a0</th><td class=\"l\"><span>By default you should not change those functions of the PagedFileManager,</span></td>\n                      </tr><tr>\n                        <th>2</th><th>\u00a0</th><td class=\"l\"><span>FileHandle, and RecordBasedFileManager classes defined in rbf/pfm.h and rbf/rbfm.h.</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>1</th><td class=\"r\"><span>By default you should not change those functions of pre-defined in the given .h files.</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>3</th><th>2</th><td class=\"l\"><span>If you think some changes are really necessary, please contact us first.</span></td>\n                  </tr><tr>\n                          <th>4</th><th>3</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>5</th><th>4</th><td class=\"l\"><span>If you are not using CLion and want to use command line make tool:</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"#L7\">\u2026</a></th>\n                  <th><a href=\"#L6\">\u2026</a></th>\n                  <td><em> If you are not using CLion and want to use command line make tool:</em>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>7</th><th>6</th><td class=\"l\"><span>&nbsp;- Modify the \"CODEROOT\" variable in makefile.inc to point to the root</span></td>\n                  </tr><tr>\n                          <th>8</th><th>7</th><td class=\"l\"><span>&nbsp; of your code base if you can't compile the code.</span></td>\n                  </tr><tr>\n                          <th>9</th><th>8</th><td class=\"l\"><span>&nbsp;</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>10</th><th>\u00a0</th><td class=\"l\"><span>&nbsp;- <del>Implement the Record-based Files (RBF) Component</del>:</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>9</th><td class=\"r\"><span>&nbsp;- <ins>Finish the Record-based Files (RBF) Component, and then implement the Relation Manager (RM)</ins>:</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>11</th><th>10</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>12</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;Go to folder \"r<del>bf\" and type in</del>:</span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>11</th><td class=\"r\"><span>&nbsp; &nbsp;Go to folder \"r<ins>m\" and test in the following order</ins>:</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>13</th><th>12</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>14</th><th>13</th><td class=\"l\"><span>&nbsp; &nbsp;```</span></td>\n                  </tr><tr>\n                          <th>15</th><th>14</th><td class=\"l\"><span>&nbsp; &nbsp;make clean</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>16</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;make</span></td>\n                      </tr><tr>\n                        <th>17</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;./rbftest_01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>15</th><td class=\"r\"><span>&nbsp; &nbsp;make&nbsp; &nbsp; &nbsp; </span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>16</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_create_tables</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>17</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_00&nbsp; &nbsp;</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>18</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_01&nbsp; </span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>19</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_02</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>20</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_03</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>21</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_04</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>22</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_05</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>23</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_06</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>24</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_07</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>25</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_08</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>26</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_09</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>27</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_10</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>28</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_11</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>29</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_12</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>30</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_13</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>31</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_13b</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>32</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_14</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>33</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_15</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>34</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_extra_1</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>35</th><td class=\"r\"><span>&nbsp; &nbsp;./rmtest_extra_2</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>36</th><td class=\"r\"><span>&nbsp; &nbsp;</span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>18</th><th>37</th><td class=\"l\"><span>&nbsp; &nbsp;```</span></td>\n                  </tr><tr>\n                          <th>19</th><th>38</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>20</th><th>\u00a0</th><td class=\"l\"><span></span></td>\n                      </tr><tr>\n                        <th>21</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;The program should run. But it will generates an error. You are supposed to</span></td>\n                      </tr><tr>\n                        <th>22</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;implement the API of the paged file manager defined in pfm.h and some</span></td>\n                      </tr><tr>\n                        <th>23</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp;of the methods in rbfm.h as explained in the project description.</span></td>\n                      </tr><tr>\n                        <th>24</th><th>\u00a0</th><td class=\"l\"><span><em>&nbsp;No newline at end of file</em></span></td>\n                      </tr>\n                      <tr>\n                        <th>\u00a0</th><th>39</th><td class=\"r\"><span>&nbsp; &nbsp;The program should run. But initially it will generates an error. You are supposed to</span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>40</th><td class=\"r\"><span>&nbsp; &nbsp;implement the API of the rest of the methods in rbfm.h and methods in rm.h as explained </span></td>\n                      </tr><tr>\n                        <th>\u00a0</th><th>41</th><td class=\"r\"><span>&nbsp; &nbsp;in the project description.</span></td>\n                      </tr><tr class=\"last\">\n                        <th>\u00a0</th><th>42</th><td class=\"r\"><span><em>&nbsp;No newline at end of file</em></span></td>\n                      </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file project2_report.txt</a>\n        </h2>\n        <pre>diff --git a/project2_report.txt b/project2_report.txt\nnew file mode 100755\nindex 0000000..3e1c7af</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/project2_report.txt\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>1. Basic information</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins>Team number (e.g., 01):</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>#1 Student ID:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>#1 Student Name:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>#2 Student ID:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>#2 Student Name:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>OS (bit):</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>gcc version:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>2. Meta-data</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>- Show your meta-data design (Tables and Columns table) and information about each column.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>3. Internal Record Format</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that your team hasn't implemented this feature.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>- Describe how you store a VarChar field.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>- Describe how you deal with an update and delete.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>4. Page Format</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>- Show your page format design.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>- Describe how you deal with an update and delete.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>- Show your page format design</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>5. File Format</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>- Show your file format design</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>6. Implementation Detail</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>- Other implementation details goes here.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>7. Other (optional)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>- Freely use this section to tell us about things that are related to the project 2, but not related to the other sections (optional)</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins><em>&nbsp;No newline at end of file</em></ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>rbf/makefile</a>\n        </h2>\n        <pre>diff --git a/rbf/makefile b/rbf/makefile\nindex a1380e1..33a00c1 100644</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File a/rbf/makefile\">\n                      a\n                  </th>\n                  <th title=\"File b/rbf/makefile\">\n                      b\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>1</th><th>1</th><td class=\"l\"><span>include ../makefile.inc</span></td>\n                  </tr><tr>\n                          <th>2</th><th>2</th><td class=\"l\"><span></span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>3</th><th>\u00a0</th><td class=\"l\"><span>all: librbf.a rbftest_01 rbftest_02 rbftest_03 rbftest_04 rbftest_05 rbftest_06 rbftest_07 rbftest_08 rbftest_08b rbftest_09 rbftest_10 rbftest_11 rbftest_12<del></del></span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>3</th><td class=\"r\"><span>all: librbf.a rbftest_01 rbftest_02 rbftest_03 rbftest_04 rbftest_05 rbftest_06 rbftest_07 rbftest_08 rbftest_08b rbftest_09 rbftest_10 rbftest_11 rbftest_12<ins>&nbsp;rbftest_update rbftest_delete</ins></span></td>\n                      </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>4</th><th>4</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>5</th><th>5</th><td class=\"l\"><span># c file dependencies</span></td>\n                  </tr><tr>\n                          <th>6</th><th>6</th><td class=\"l\"><span>pfm.o: pfm.h</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"#L23\">\u2026</a></th>\n                  <th><a href=\"#L23\">\u2026</a></th>\n                  <td><em> rbftest_09.o: pfm.h rbfm.h</em>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>23</th><th>23</th><td class=\"l\"><span>rbftest_10.o: pfm.h rbfm.h</span></td>\n                  </tr><tr>\n                          <th>24</th><th>24</th><td class=\"l\"><span>rbftest_11.o: pfm.h rbfm.h</span></td>\n                  </tr><tr>\n                          <th>25</th><th>25</th><td class=\"l\"><span>rbftest_12.o: pfm.h rbfm.h</span></td>\n                  </tr>\n            </tbody><tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>rbftest_update.o: pfm.h rbfm.h</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>rbftest_delete.o: pfm.h rbfm.h</ins></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>26</th><th>28</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>27</th><th>29</th><td class=\"l\"><span># binary dependencies</span></td>\n                  </tr><tr>\n                          <th>28</th><th>30</th><td class=\"l\"><span>rbftest_01: rbftest_01.o librbf.a $(CODEROOT)/rbf/librbf.a</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"#L38\">\u2026</a></th>\n                  <th><a href=\"#L40\">\u2026</a></th>\n                  <td><em> rbftest_09: rbftest_09.o librbf.a $(CODEROOT)/rbf/librbf.a</em>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>38</th><th>40</th><td class=\"l\"><span>rbftest_10: rbftest_10.o librbf.a $(CODEROOT)/rbf/librbf.a</span></td>\n                  </tr><tr>\n                          <th>39</th><th>41</th><td class=\"l\"><span>rbftest_11: rbftest_11.o librbf.a $(CODEROOT)/rbf/librbf.a</span></td>\n                  </tr><tr>\n                          <th>40</th><th>42</th><td class=\"l\"><span>rbftest_12: rbftest_12.o librbf.a $(CODEROOT)/rbf/librbf.a</span></td>\n                  </tr>\n            </tbody><tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>rbftest_update: rbftest_update.o librbf.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>rbftest_delete: rbftest_delete.o librbf.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr>\n            </tbody><tbody class=\"unmod\">\n                  <tr>\n                          <th>41</th><th>45</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>42</th><th>46</th><td class=\"l\"><span># dependencies to compile used libraries</span></td>\n                  </tr><tr>\n                          <th>43</th><th>47</th><td class=\"l\"><span>.PHONY: $(CODEROOT)/rbf/librbf.a</span></td>\n                  </tr>\n            </tbody>\n              <tbody class=\"skipped\">\n                <tr>\n                  <th><a href=\"#L46\">\u2026</a></th>\n                  <th><a href=\"#L50\">\u2026</a></th>\n                  <td><em> $(CODEROOT)/rbf/librbf.a:</em>\u00a0</td>\n                </tr>\n              </tbody>\n            <tbody class=\"unmod\">\n                  <tr>\n                          <th>46</th><th>50</th><td class=\"l\"><span></span></td>\n                  </tr><tr>\n                          <th>47</th><th>51</th><td class=\"l\"><span>.PHONY: clean</span></td>\n                  </tr><tr>\n                          <th>48</th><th>52</th><td class=\"l\"><span>clean:</span></td>\n                  </tr>\n            </tbody><tbody class=\"mod\">\n                      <tr class=\"first\">\n                        <th>49</th><th>\u00a0</th><td class=\"l\"><span>&nbsp; &nbsp; &nbsp; &nbsp; -rm rbftest_01 rbftest_02 rbftest_03 rbftest_04 rbftest_05 rbftest_06 rbftest_07 rbftest_08 rbftest_08b rbftest_09 rbftest_10 rbftest_11 rbftest_12 <del>*.a *.o *~ </del></span></td>\n                      </tr>\n                      <tr class=\"last\">\n                        <th>\u00a0</th><th>53</th><td class=\"r\"><span>&nbsp; &nbsp; &nbsp; &nbsp; -rm rbftest_01 rbftest_02 rbftest_03 rbftest_04 rbftest_05 rbftest_06 rbftest_07 rbftest_08 rbftest_08b rbftest_09 rbftest_10 rbftest_11 rbftest_12 <ins>rbftest_update rbftest_delete *.a *.o *~</ins></span></td>\n                      </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rbf/rbftest_delete.cc</a>\n        </h2>\n        <pre>diff --git a/rbf/rbftest_delete.cc b/rbf/rbftest_delete.cc\nnew file mode 100644\nindex 0000000..df0f197</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rbf/rbftest_delete.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include &lt;iostream&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins>#include &lt;cassert&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>#include &lt;cstdlib&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>#include &lt;cstring&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>#include &lt;stdexcept&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>#include &lt;cstdio&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>#include \"pfm.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>#include \"rbfm.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>#include \"test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>int RBFTest_Delete(RecordBasedFileManager &amp;rbfm) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Create Record-Based File</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Open Record-Based File</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; // 3. Insert Record (3)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; // 4. Delete Record (1)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; // 5. Read Record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; // 6. Close Record-Based File</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; // 7. Destroy Record-Based File</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RBF Test Case Delete *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string fileName = \"test_delete\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.createFile(fileName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Creating the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = createFileShouldSucceed(fileName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Creating the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; // Open the file</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; FileHandle fileHandle;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.openFile(fileName, fileHandle);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Opening the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; int recordSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; void *record = malloc(100);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(100);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; recordDescriptor;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; createRecordDescriptor(recordDescriptor);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; // Initialize a NULL field indicator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullFieldsIndicatorActualSize = getActualByteForNullsIndicator(recordDescriptor.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullFieldsIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullFieldsIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert a record into a file and print the record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareRecord(recordDescriptor.size(), nullsIndicator, 8, \"Testcase\", 25, 177.8, 6200, record,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;recordSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"Inserting Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; rbfm.printRecord(recordDescriptor, record);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Inserting a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; // save the returned RID</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid0 = rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullFieldsIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert a record into a file and print the record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>&nbsp; &nbsp; nullsIndicator[0] = 128;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareRecord(recordDescriptor.size(), nullsIndicator, 0, \"\", 25, 177.8, 6200, record,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;recordSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"Inserting Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>&nbsp; &nbsp; rbfm.printRecord(recordDescriptor, record);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Inserting a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>&nbsp; &nbsp; // save the returned RID</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid1 = rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"Inserting Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins>&nbsp; &nbsp; rbfm.printRecord(recordDescriptor, record);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Inserting a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"Inserting Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>84</th><td class=\"r\"><ins>&nbsp; &nbsp; rbfm.printRecord(recordDescriptor, record);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>85</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>86</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>87</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>88</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Inserting a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>89</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>90</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.deleteRecord(fileHandle, recordDescriptor, rid0);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>91</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Deleting a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>92</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>93</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.readRecord(fileHandle, recordDescriptor, rid0, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>94</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc != success &amp;&amp; \"Reading a deleted record should fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>95</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>96</th><td class=\"r\"><ins>&nbsp; &nbsp; // Given the rid, read the record from file</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>97</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.readRecord(fileHandle, recordDescriptor, rid1, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>98</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Reading a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>99</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>100</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"Returned Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>101</th><td class=\"r\"><ins>&nbsp; &nbsp; rbfm.printRecord(recordDescriptor, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>102</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>103</th><td class=\"r\"><ins>&nbsp; &nbsp; // Compare whether the two memory blocks are the same</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>104</th><td class=\"r\"><ins>&nbsp; &nbsp; if (memcmp(record, returnedData, recordSize) != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>105</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"[FAIL] Test Case Delete Failed!\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>106</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(record);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>107</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>108</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>109</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>110</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>111</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>112</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>113</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Inserting a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>114</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rid.slotNum == rid0.slotNum &amp;&amp; \"Inserted record should use previous deleted slot.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>115</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>116</th><td class=\"r\"><ins>&nbsp; &nbsp; // Given the rid, read the record from file</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>117</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.readRecord(fileHandle, recordDescriptor, rid, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>118</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Reading a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>119</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>120</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"Returned Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>121</th><td class=\"r\"><ins>&nbsp; &nbsp; rbfm.printRecord(recordDescriptor, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>122</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>123</th><td class=\"r\"><ins>&nbsp; &nbsp; // Compare whether the two memory blocks are the same</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>124</th><td class=\"r\"><ins>&nbsp; &nbsp; if (memcmp(record, returnedData, recordSize) != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>125</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"[FAIL] Test Case Delete Failed!\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>126</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(record);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>127</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>128</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>129</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>130</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>131</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>132</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>133</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>134</th><td class=\"r\"><ins>&nbsp; &nbsp; // Close the file</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>135</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.closeFile(fileHandle);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>136</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Closing the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>137</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>138</th><td class=\"r\"><ins>&nbsp; &nbsp; // Destroy the file</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>139</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.destroyFile(fileName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>140</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Destroying the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>141</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>142</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = destroyFileShouldSucceed(fileName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>143</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Destroying the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>144</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>145</th><td class=\"r\"><ins>&nbsp; &nbsp; free(record);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>146</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>147</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>148</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>149</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"RBF Test Case Delete Finished! The result will be examined.\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>150</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>151</th><td class=\"r\"><ins>&nbsp; &nbsp; return 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>152</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>153</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>154</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>155</th><td class=\"r\"><ins>&nbsp; &nbsp; // To test the functionality of the record-based file manager</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>156</th><td class=\"r\"><ins>&nbsp; &nbsp; remove(\"test_delete\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>157</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>158</th><td class=\"r\"><ins>&nbsp; &nbsp; return RBFTest_Delete(RecordBasedFileManager::instance());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>159</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>160</th><td class=\"r\"><ins><em>&nbsp;No newline at end of file</em></ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rbf/rbftest_update.cc</a>\n        </h2>\n        <pre>diff --git a/rbf/rbftest_update.cc b/rbf/rbftest_update.cc\nnew file mode 100644\nindex 0000000..1f8f3ac</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rbf/rbftest_update.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include &lt;iostream&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins>#include &lt;cassert&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>#include &lt;cstdlib&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>#include &lt;cstring&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>#include &lt;stdexcept&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>#include &lt;cstdio&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>#include \"pfm.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>#include \"rbfm.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>#include \"test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>void *record = malloc(2000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>void *returnedData = malloc(2000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>std::vector&lt;Attribute&gt; recordDescriptor;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>unsigned char *nullsIndicator = NULL;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>FileHandle fileHandle;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>void readRecord(RecordBasedFileManager &amp;rbfm, const RID &amp;rid, const std::string &amp;str) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; int recordSize;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareRecord(recordDescriptor.size(), nullsIndicator, str.length(), str, 25, 177.8, 6200,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; record, &amp;recordSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rbfm.readRecord(fileHandle, recordDescriptor, rid, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Reading a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; // Compare whether the two memory blocks are the same</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(memcmp(record, returnedData, recordSize) == 0 &amp;&amp; \"Returned Data should be the same\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>void insertRecord(RecordBasedFileManager &amp;rbfm, RID &amp;rid, const std::string &amp;str) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; int recordSize;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareRecord(recordDescriptor.size(), nullsIndicator, str.length(), str, 25, 177.8, 6200,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; record, &amp;recordSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Inserting a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>void updateRecord(RecordBasedFileManager &amp;rbfm, RID &amp;rid, const std::string&amp; str) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; int recordSize;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareRecord(recordDescriptor.size(), nullsIndicator, str.length(), str, 25, 177.8, 6200,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; record, &amp;recordSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rbfm.updateRecord(fileHandle, recordDescriptor, record, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Updating a record should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>int RBFTest_Update(RecordBasedFileManager &amp;rbfm) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Create Record-Based File</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Open Record-Based File</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; // 3. Insert Record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; // 4. Read Record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; // 5. Close Record-Based File</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; // 6. Destroy Record-Based File</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RBF Test Case Update *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string fileName = \"test_update\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; // Create a file</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.createFile(fileName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Creating the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = createFileShouldSucceed(fileName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Creating the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>&nbsp; &nbsp; // Open the file</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.openFile(fileName, fileHandle);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Opening the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>&nbsp; &nbsp; createRecordDescriptor(recordDescriptor);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins>&nbsp; &nbsp; recordDescriptor[0].length = (AttrLength) 1000;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string longStr;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; 1000; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; longStr.push_back('a');</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string shortStr;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>84</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; 10; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>85</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; shortStr.push_back('s');</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>86</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>87</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>88</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string midString;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>89</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; 100; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>90</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; midString.push_back('m');</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>91</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>92</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>93</th><td class=\"r\"><ins>&nbsp; &nbsp; // Initialize a NULL field indicator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>94</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullFieldsIndicatorActualSize = getActualByteForNullsIndicator(recordDescriptor.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>95</th><td class=\"r\"><ins>&nbsp; &nbsp; nullsIndicator = (unsigned char *) malloc(nullFieldsIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>96</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullFieldsIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>97</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>98</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert short record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>99</th><td class=\"r\"><ins>&nbsp; &nbsp; insertRecord(rbfm, rid, shortStr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>100</th><td class=\"r\"><ins>&nbsp; &nbsp; RID shortRID = rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>101</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>102</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert mid record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>103</th><td class=\"r\"><ins>&nbsp; &nbsp; insertRecord(rbfm, rid, midString);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>104</th><td class=\"r\"><ins>&nbsp; &nbsp; RID midRID = rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>105</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>106</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert long record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>107</th><td class=\"r\"><ins>&nbsp; &nbsp; insertRecord(rbfm, rid, longStr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>108</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>109</th><td class=\"r\"><ins>&nbsp; &nbsp; // update short record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>110</th><td class=\"r\"><ins>&nbsp; &nbsp; updateRecord(rbfm, shortRID, midString);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>111</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>112</th><td class=\"r\"><ins>&nbsp; &nbsp; //read updated short record and verify its content</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>113</th><td class=\"r\"><ins>&nbsp; &nbsp; readRecord(rbfm, shortRID, midString);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>114</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>115</th><td class=\"r\"><ins>&nbsp; &nbsp; // insert two more records</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>116</th><td class=\"r\"><ins>&nbsp; &nbsp; insertRecord(rbfm, rid, longStr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>117</th><td class=\"r\"><ins>&nbsp; &nbsp; insertRecord(rbfm, rid, longStr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>118</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>119</th><td class=\"r\"><ins>&nbsp; &nbsp; // read mid record and verify its content</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>120</th><td class=\"r\"><ins>&nbsp; &nbsp; readRecord(rbfm, midRID, midString);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>121</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>122</th><td class=\"r\"><ins>&nbsp; &nbsp; // update short record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>123</th><td class=\"r\"><ins>&nbsp; &nbsp; updateRecord(rbfm, shortRID, longStr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>124</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>125</th><td class=\"r\"><ins>&nbsp; &nbsp; // read the short record and verify its content</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>126</th><td class=\"r\"><ins>&nbsp; &nbsp; readRecord(rbfm, shortRID, longStr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>127</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>128</th><td class=\"r\"><ins>&nbsp; &nbsp; // delete the short record</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>129</th><td class=\"r\"><ins>&nbsp; &nbsp; rbfm.deleteRecord(fileHandle, recordDescriptor, shortRID);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>130</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>131</th><td class=\"r\"><ins>&nbsp; &nbsp; // verify the short record has been deleted</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>132</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.readRecord(fileHandle, recordDescriptor, shortRID, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>133</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>134</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc != success &amp;&amp; \"Read a deleted record should not success.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>135</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>136</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.closeFile(fileHandle);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>137</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Closing the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>138</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>139</th><td class=\"r\"><ins>&nbsp; &nbsp; // Destroy the file</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>140</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rbfm.destroyFile(fileName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>141</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Destroying the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>142</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>143</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = destroyFileShouldSucceed(fileName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>144</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"Destroying the file should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>145</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>146</th><td class=\"r\"><ins>&nbsp; &nbsp; free(record);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>147</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>148</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>149</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>150</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"RBF Test Case Update Finished! The result will be examined.\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>151</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>152</th><td class=\"r\"><ins>&nbsp; &nbsp; return 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>153</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>154</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>155</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>156</th><td class=\"r\"><ins>&nbsp; &nbsp; // To test the functionality of the record-based file manager</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>157</th><td class=\"r\"><ins>&nbsp; &nbsp; remove(\"test_update\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>158</th><td class=\"r\"><ins>&nbsp; &nbsp; return RBFTest_Update(RecordBasedFileManager::instance());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>159</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>160</th><td class=\"r\"><ins><em>&nbsp;No newline at end of file</em></ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/makefile</a>\n        </h2>\n        <pre>diff --git a/rm/makefile b/rm/makefile\nnew file mode 100644\nindex 0000000..badcd2b</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/makefile\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>include ../makefile.inc</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>all: librm.a rmtest_create_tables rmtest_delete_tables rmtest_00 rmtest_01 rmtest_02 rmtest_03 rmtest_04 rmtest_05 rmtest_06 rmtest_07 rmtest_08 rmtest_09 rmtest_10 rmtest_11 rmtest_12 rmtest_13 rmtest_13b rmtest_14 rmtest_15 rmtest_extra_1 rmtest_extra_2</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins># lib file dependencies</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>librm.a: librm.a(rm.o)&nbsp; # and possibly other .o files</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins># c file dependencies</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>rm.o: rm.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>rmtest_00.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>rmtest_01.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>rmtest_02.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>rmtest_03.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>rmtest_04.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>rmtest_05.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>rmtest_06.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>rmtest_07.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>rmtest_08.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>rmtest_09.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>rmtest_10.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>rmtest_11.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>rmtest_12.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>rmtest_13.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>rmtest_13b.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>rmtest_14.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>rmtest_15.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>rmtest_extra_1.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>rmtest_extra_2.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>rmtest_create_tables.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>rmtest_delete_tables.o: rm.h rm_test_util.h</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins># binary dependencies</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>rmtest_create_tables: rmtest_create_tables.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>rmtest_delete_tables: rmtest_delete_tables.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>rmtest_00: rmtest_00.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>rmtest_01: rmtest_01.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>rmtest_02: rmtest_02.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>rmtest_03: rmtest_03.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>rmtest_04: rmtest_04.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>rmtest_05: rmtest_05.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>rmtest_06: rmtest_06.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>rmtest_07: rmtest_07.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>rmtest_08: rmtest_08.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>rmtest_09: rmtest_09.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>rmtest_10: rmtest_10.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>rmtest_11: rmtest_11.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>rmtest_12: rmtest_12.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>rmtest_13: rmtest_13.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>rmtest_13b: rmtest_13b.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>rmtest_14: rmtest_14.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>rmtest_15: rmtest_15.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>rmtest_extra_1: rmtest_extra_1.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>rmtest_extra_2: rmtest_extra_2.o librm.a $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins># dependencies to compile used libraries</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>.PHONY: $(CODEROOT)/rbf/librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>$(CODEROOT)/rbf/librbf.a:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; $(MAKE) -C $(CODEROOT)/rbf librbf.a</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>.PHONY: clean</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>clean:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; -rm rmtest_create_tables rmtest_delete_tables rmtest_00 rmtest_01 rmtest_02 rmtest_03 rmtest_04 rmtest_05 rmtest_06 rmtest_07 rmtest_08 rmtest_09 rmtest_10 rmtest_11 rmtest_12 rmtest_13 rmtest_13b rmtest_14 rmtest_15 rmtest_extra_1 rmtest_extra_2 *.a *.o *~ tbl_* Tables Columns rids_file sizes_file</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; $(MAKE) -C $(CODEROOT)/rbf clean</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins><em>&nbsp;No newline at end of file</em></ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rm.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rm.cc b/rm/rm.cc\nnew file mode 100755\nindex 0000000..cc7aa80</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rm.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RelationManager *RelationManager::_relation_manager = nullptr;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>RelationManager &amp;RelationManager::instance() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; static RelationManager _relation_manager = RelationManager();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; return _relation_manager;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>RelationManager::RelationManager() = default;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>RelationManager::~RelationManager() { delete _relation_manager; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>RelationManager::RelationManager(const RelationManager &amp;) = default;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>RelationManager &amp;RelationManager::operator=(const RelationManager &amp;) = default;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>RC RelationManager::createCatalog() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>RC RelationManager::deleteCatalog() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>RC RelationManager::createTable(const std::string &amp;tableName, const std::vector&lt;Attribute&gt; &amp;attrs) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>RC RelationManager::deleteTable(const std::string &amp;tableName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>RC RelationManager::getAttributes(const std::string &amp;tableName, std::vector&lt;Attribute&gt; &amp;attrs) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>RC RelationManager::insertTuple(const std::string &amp;tableName, const void *data, RID &amp;rid) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>RC RelationManager::deleteTuple(const std::string &amp;tableName, const RID &amp;rid) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>RC RelationManager::updateTuple(const std::string &amp;tableName, const void *data, const RID &amp;rid) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>RC RelationManager::readTuple(const std::string &amp;tableName, const RID &amp;rid, void *data) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>RC RelationManager::printTuple(const std::vector&lt;Attribute&gt; &amp;attrs, const void *data) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>RC RelationManager::readAttribute(const std::string &amp;tableName, const RID &amp;rid, const std::string &amp;attributeName,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; void *data) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>RC RelationManager::scan(const std::string &amp;tableName,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const std::string &amp;conditionAttribute,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const CompOp compOp,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const void *value,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const std::vector&lt;std::string&gt; &amp;attributeNames,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RM_ScanIterator &amp;rm_ScanIterator) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>// Extra credit work</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>RC RelationManager::dropAttribute(const std::string &amp;tableName, const std::string &amp;attributeName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins>// Extra credit work</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins>RC RelationManager::addAttribute(const std::string &amp;tableName, const Attribute &amp;attr) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins>&nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins></ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rm.h</a>\n        </h2>\n        <pre>diff --git a/rm/rm.h b/rm/rm.h\nnew file mode 100755\nindex 0000000..a2d00db</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rm.h\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#ifndef _rm_h_</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins>#define _rm_h_</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>#include &lt;string&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>#include &lt;vector&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>#include \"../rbf/rbfm.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins># define RM_EOF (-1)&nbsp; // end of a scan operator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>// RM_ScanIterator is an iterator to go through tuples</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>class RM_ScanIterator {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; RM_ScanIterator() = default;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; ~RM_ScanIterator() = default;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; // \"data\" follows the same format as RelationManager::insertTuple()</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; RC getNextTuple(RID &amp;rid, void *data) { return RM_EOF; };</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; RC close() { return -1; };</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>// Relation Manager</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>class RelationManager {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; static RelationManager &amp;instance();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; RC createCatalog();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; RC deleteCatalog();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; RC createTable(const std::string &amp;tableName, const std::vector&lt;Attribute&gt; &amp;attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; RC deleteTable(const std::string &amp;tableName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; RC getAttributes(const std::string &amp;tableName, std::vector&lt;Attribute&gt; &amp;attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; RC insertTuple(const std::string &amp;tableName, const void *data, RID &amp;rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; RC deleteTuple(const std::string &amp;tableName, const RID &amp;rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; RC updateTuple(const std::string &amp;tableName, const void *data, const RID &amp;rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; RC readTuple(const std::string &amp;tableName, const RID &amp;rid, void *data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; // Print a tuple that is passed to this utility method.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; // The format is the same as printRecord().</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; RC printTuple(const std::vector&lt;Attribute&gt; &amp;attrs, const void *data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; RC readAttribute(const std::string &amp;tableName, const RID &amp;rid, const std::string &amp;attributeName, void *data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; // Scan returns an iterator to allow the caller to go through the results one by one.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; // Do not store entire results in the scan iterator.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; RC scan(const std::string &amp;tableName,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const std::string &amp;conditionAttribute,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const CompOp compOp,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // comparison type such as \"&lt;\" and \"=\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const void *value,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // used in the comparison</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const std::vector&lt;std::string&gt; &amp;attributeNames, // a list of projected attributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RM_ScanIterator &amp;rm_ScanIterator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>// Extra credit work (10 points)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; RC addAttribute(const std::string &amp;tableName, const Attribute &amp;attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>&nbsp; &nbsp; RC dropAttribute(const std::string &amp;tableName, const std::string &amp;attributeName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>protected:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; RelationManager();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Prevent construction</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>&nbsp; &nbsp; ~RelationManager();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Prevent unwanted destruction</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>&nbsp; &nbsp; RelationManager(const RelationManager &amp;);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Prevent construction by copying</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>&nbsp; &nbsp; RelationManager &amp;operator=(const RelationManager &amp;);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Prevent assignment</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>private:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>&nbsp; &nbsp; static RelationManager *_relation_manager;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins>#endif</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins><em>&nbsp;No newline at end of file</em></ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rm_test_util.h</a>\n        </h2>\n        <pre>diff --git a/rm/rm_test_util.h b/rm/rm_test_util.h\nnew file mode 100644\nindex 0000000..b59abd4</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rm_test_util.h\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#ifndef _test_util_h_</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins>#define _test_util_h_</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>#include &lt;cstdio&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>#include &lt;cstdlib&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>#include &lt;fstream&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>#include &lt;sstream&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>#include &lt;iostream&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>#include &lt;iomanip&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>#include &lt;cassert&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>#include &lt;ctime&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>#include &lt;sys/resource.h&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>#include &lt;set&gt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>#include \"rm.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>#include \"../rbf/test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>RecordBasedFileManager &amp;rbfm = RecordBasedFileManager::instance();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>RelationManager &amp;rm = RelationManager::instance();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>// This code is required for testing to measure the memory usage of your code.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>// If you can't compile the codebase because of this function, you can safely comment this function or remove it.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>void memProfile() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; int who = RUSAGE_SELF;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; struct rusage usage{};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; getrusage(who, &amp;usage);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; usage.ru_maxrss &lt;&lt; \"KB\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>// Function to prepare the data in the correct form to be inserted/read/updated</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>void prepareTuple(int attributeCount, unsigned char *nullAttributesIndicator, const int nameLength,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const std::string &amp;name, const int age, const float height, const int salary, void *buffer,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned *tupleSize) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned offset = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; // Null-indicators</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; bool nullBit;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attributeCount);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; // Null-indicator for the fields</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy((char *) buffer + offset, nullAttributesIndicator, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += nullAttributesIndicatorActualSize;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; // Beginning of the actual data</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; // Note that the left-most bit represents the first field. Thus, the offset is 7 from right, not 0.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; // e.g., if a tuple consists of four attributes and they are all nulls, then the bit representation will be: [11110000]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; // Is the name field not-NULL?</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; nullBit = nullAttributesIndicator[0] &amp; ((unsigned) 1 &lt;&lt; (unsigned) 7);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;nameLength, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, name.c_str(), nameLength);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += nameLength;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; // Is the age field not-NULL?</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; nullBit = nullAttributesIndicator[0] &amp; ((unsigned) 1 &lt;&lt; (unsigned) 6);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;age, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; // Is the height field not-NULL?</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; nullBit = nullAttributesIndicator[0] &amp; ((unsigned) 1 &lt;&lt; (unsigned) 5);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>&nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;height, sizeof(float));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(float);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins>&nbsp; &nbsp; // Is the height field not-NULL?</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins>&nbsp; &nbsp; nullBit = nullAttributesIndicator[0] &amp; ((unsigned) 1 &lt;&lt; (unsigned) 4);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins>&nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;salary, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>84</th><td class=\"r\"><ins>&nbsp; &nbsp; *tupleSize = offset;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>85</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>86</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>87</th><td class=\"r\"><ins>// Function to get the data in the correct form to be inserted/read after adding the attribute ssn</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>88</th><td class=\"r\"><ins>void prepareTupleAfterAdd(int attributeCount, unsigned char *nullAttributesIndicator, const int nameLength,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>89</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const std::string &amp;name, const int age, const float height, const int salary, const int ssn,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>90</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; void *buffer, unsigned *tupleSize) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>91</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned offset = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>92</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>93</th><td class=\"r\"><ins>&nbsp; &nbsp; // Null-indicators</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>94</th><td class=\"r\"><ins>&nbsp; &nbsp; bool nullBit;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>95</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attributeCount);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>96</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>97</th><td class=\"r\"><ins>&nbsp; &nbsp; // Null-indicator for the fields</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>98</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy((char *) buffer + offset, nullAttributesIndicator, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>99</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += nullAttributesIndicatorActualSize;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>100</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>101</th><td class=\"r\"><ins>&nbsp; &nbsp; // Beginning of the actual data</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>102</th><td class=\"r\"><ins>&nbsp; &nbsp; // Note that the left-most bit represents the first field. Thus, the offset is 7 from right, not 0.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>103</th><td class=\"r\"><ins>&nbsp; &nbsp; // e.g., if a tuple consists of four attributes and they are all nulls, then the bit representation will be: [11110000]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>104</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>105</th><td class=\"r\"><ins>&nbsp; &nbsp; // Is the name field not-NULL?</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>106</th><td class=\"r\"><ins>&nbsp; &nbsp; nullBit = nullAttributesIndicator[0] &amp; ((unsigned) 1 &lt;&lt; (unsigned) 7);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>107</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>108</th><td class=\"r\"><ins>&nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>109</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;nameLength, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>110</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>111</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, name.c_str(), nameLength);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>112</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += nameLength;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>113</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>114</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>115</th><td class=\"r\"><ins>&nbsp; &nbsp; // Is the age field not-NULL?</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>116</th><td class=\"r\"><ins>&nbsp; &nbsp; nullBit = nullAttributesIndicator[0] &amp; ((unsigned) 1 &lt;&lt; (unsigned) 6);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>117</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>118</th><td class=\"r\"><ins>&nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>119</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;age, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>120</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>121</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>122</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>123</th><td class=\"r\"><ins>&nbsp; &nbsp; // Is the height field not-NULL?</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>124</th><td class=\"r\"><ins>&nbsp; &nbsp; nullBit = nullAttributesIndicator[0] &amp; ((unsigned) 1 &lt;&lt; (unsigned) 5);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>125</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>126</th><td class=\"r\"><ins>&nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>127</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;height, sizeof(float));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>128</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(float);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>129</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>130</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>131</th><td class=\"r\"><ins>&nbsp; &nbsp; // Is the salary field not-NULL?</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>132</th><td class=\"r\"><ins>&nbsp; &nbsp; nullBit = nullAttributesIndicator[0] &amp; ((unsigned) 1 &lt;&lt; (unsigned) 4);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>133</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>134</th><td class=\"r\"><ins>&nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>135</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;salary, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>136</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>137</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>138</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>139</th><td class=\"r\"><ins>&nbsp; &nbsp; // Is the ssn field not-NULL?</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>140</th><td class=\"r\"><ins>&nbsp; &nbsp; nullBit = nullAttributesIndicator[0] &amp; ((unsigned) 1 &lt;&lt; (unsigned) 3);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>141</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>142</th><td class=\"r\"><ins>&nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>143</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;ssn, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>144</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>145</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>146</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>147</th><td class=\"r\"><ins>&nbsp; &nbsp; *tupleSize = offset;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>148</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>149</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>150</th><td class=\"r\"><ins>// Function to get the data in the correct form to be inserted/read after adding</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>151</th><td class=\"r\"><ins>// the attribute ssn</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>152</th><td class=\"r\"><ins>void prepareTupleAfterAdd(const int nameLength, const std::string &amp;name, const int age, const float height,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>153</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const int salary, const int ssn, void *buffer, int *tupleSize) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>154</th><td class=\"r\"><ins>&nbsp; &nbsp; int offset = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>155</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>156</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;(nameLength), sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>157</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>158</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy((char *) buffer + offset, name.c_str(), nameLength);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>159</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += nameLength;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>160</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>161</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;age, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>162</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>163</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>164</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;height, sizeof(float));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>165</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(float);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>166</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>167</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;salary, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>168</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>169</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>170</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;ssn, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>171</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>172</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>173</th><td class=\"r\"><ins>&nbsp; &nbsp; *tupleSize = offset;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>174</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>175</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>176</th><td class=\"r\"><ins>void printTupleAfterDrop(const void *buffer, const unsigned tupleSize) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>177</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned offset = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>178</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"****Printing Buffer: Start****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>179</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>180</th><td class=\"r\"><ins>&nbsp; &nbsp; int nameLength = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>181</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(&amp;nameLength, (char *) buffer + offset, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>182</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>183</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"nameLength: \" &lt;&lt; nameLength &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>184</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>185</th><td class=\"r\"><ins>&nbsp; &nbsp; char *name = (char *) malloc(100);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>186</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(name, (char *) buffer + offset, nameLength);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>187</th><td class=\"r\"><ins>&nbsp; &nbsp; name[nameLength] = '\\0';</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>188</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += nameLength;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>189</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"name: \" &lt;&lt; name &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>190</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>191</th><td class=\"r\"><ins>&nbsp; &nbsp; int age = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>192</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(&amp;age, (char *) buffer + offset, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>193</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>194</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"age: \" &lt;&lt; age &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>195</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>196</th><td class=\"r\"><ins>&nbsp; &nbsp; float height = 0.0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>197</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(&amp;height, (char *) buffer + offset, sizeof(float));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>198</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"height: \" &lt;&lt; height &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>199</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>200</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"****Printing Buffer: End****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>201</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>202</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>203</th><td class=\"r\"><ins>void printTupleAfterAdd(const void *buffer, const int tupleSize) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>204</th><td class=\"r\"><ins>&nbsp; &nbsp; int offset = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>205</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"****Printing Buffer: Start****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>206</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>207</th><td class=\"r\"><ins>&nbsp; &nbsp; int nameLength = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>208</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(&amp;nameLength, (char *) buffer + offset, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>209</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>210</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"nameLength: \" &lt;&lt; nameLength &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>211</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>212</th><td class=\"r\"><ins>&nbsp; &nbsp; char *name = (char *) malloc(100);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>213</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(name, (char *) buffer + offset, nameLength);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>214</th><td class=\"r\"><ins>&nbsp; &nbsp; name[nameLength] = '\\0';</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>215</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += nameLength;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>216</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"name: \" &lt;&lt; name &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>217</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>218</th><td class=\"r\"><ins>&nbsp; &nbsp; int age = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>219</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(&amp;age, (char *) buffer + offset, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>220</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>221</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"age: \" &lt;&lt; age &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>222</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>223</th><td class=\"r\"><ins>&nbsp; &nbsp; float height = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>224</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(&amp;height, (char *) buffer + offset, sizeof(float));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>225</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(float);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>226</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"height: \" &lt;&lt; height &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>227</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>228</th><td class=\"r\"><ins>&nbsp; &nbsp; int salary = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>229</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(&amp;salary, (char *) buffer + offset, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>230</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>231</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"salary: \" &lt;&lt; salary &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>232</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>233</th><td class=\"r\"><ins>&nbsp; &nbsp; int ssn = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>234</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy(&amp;ssn, (char *) buffer + offset, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>235</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"SSN: \" &lt;&lt; ssn &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>236</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>237</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"****Printing Buffer: End****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>238</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>239</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>240</th><td class=\"r\"><ins>// Create an employee table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>241</th><td class=\"r\"><ins>RC createTable(const std::string &amp;tableName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>242</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"****Create Table \" &lt;&lt; tableName &lt;&lt; \" ****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>243</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>244</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Create Table ** -- made separate now.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>245</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>246</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>247</th><td class=\"r\"><ins>&nbsp; &nbsp; Attribute attr;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>248</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.name = \"EmpName\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>249</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.type = TypeVarChar;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>250</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.length = (AttrLength) 30;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>251</th><td class=\"r\"><ins>&nbsp; &nbsp; attrs.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>252</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>253</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.name = \"Age\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>254</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.type = TypeInt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>255</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.length = (AttrLength) 4;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>256</th><td class=\"r\"><ins>&nbsp; &nbsp; attrs.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>257</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>258</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.name = \"Height\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>259</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.type = TypeReal;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>260</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.length = (AttrLength) 4;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>261</th><td class=\"r\"><ins>&nbsp; &nbsp; attrs.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>262</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>263</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.name = \"Salary\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>264</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.type = TypeInt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>265</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.length = (AttrLength) 4;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>266</th><td class=\"r\"><ins>&nbsp; &nbsp; attrs.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>267</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>268</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.createTable(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>269</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>270</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"****Table Created: \" &lt;&lt; tableName &lt;&lt; \" ****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>271</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>272</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>273</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>274</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>275</th><td class=\"r\"><ins>void prepareLargeTuple(int attributeCount, unsigned char *nullAttributesIndicator, const int index, void *buffer,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>276</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int *size) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>277</th><td class=\"r\"><ins>&nbsp; &nbsp; int offset = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>278</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>279</th><td class=\"r\"><ins>&nbsp; &nbsp; // Null-indicators</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>280</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attributeCount);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>281</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>282</th><td class=\"r\"><ins>&nbsp; &nbsp; // Null-indicator for the fields</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>283</th><td class=\"r\"><ins>&nbsp; &nbsp; memcpy((char *) buffer + offset, nullAttributesIndicator, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>284</th><td class=\"r\"><ins>&nbsp; &nbsp; offset += nullAttributesIndicatorActualSize;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>285</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>286</th><td class=\"r\"><ins>&nbsp; &nbsp; // compute the count</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>287</th><td class=\"r\"><ins>&nbsp; &nbsp; int count = index % 50 + 1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>288</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>289</th><td class=\"r\"><ins>&nbsp; &nbsp; // compute the letter</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>290</th><td class=\"r\"><ins>&nbsp; &nbsp; char text = (char) (index % 26 + 97);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>291</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>292</th><td class=\"r\"><ins>&nbsp; &nbsp; for (unsigned i = 0; i &lt; 10; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>293</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // length</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>294</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;count, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>295</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>296</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>297</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // varchar</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>298</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; for (int j = 0; j &lt; count; j++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>299</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;text, 1);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>300</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; offset += 1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>301</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>302</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>303</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // integer</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>304</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;index, sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>305</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(int);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>306</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>307</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // real</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>308</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; auto real = (float) (index + 1);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>309</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memcpy((char *) buffer + offset, &amp;real, sizeof(float));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>310</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; offset += sizeof(float);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>311</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>312</th><td class=\"r\"><ins>&nbsp; &nbsp; *size = offset;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>313</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>314</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>315</th><td class=\"r\"><ins>// Create a large table for pressure test</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>316</th><td class=\"r\"><ins>RC createLargeTable(const std::string &amp;tableName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>317</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"***** Creating a Large Table: \" &lt;&lt; tableName &lt;&lt; \" *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>318</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>319</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Create Table ** -- made separate now.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>320</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>321</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>322</th><td class=\"r\"><ins>&nbsp; &nbsp; int index = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>323</th><td class=\"r\"><ins>&nbsp; &nbsp; char *suffix = (char *) malloc(10);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>324</th><td class=\"r\"><ins>&nbsp; &nbsp; for (unsigned i = 0; i &lt; 10; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>325</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Attribute attr;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>326</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sprintf(suffix, \"%d\", index);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>327</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.name = \"attr\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>328</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.name += suffix;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>329</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.type = TypeVarChar;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>330</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.length = (AttrLength) 50;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>331</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attrs.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>332</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; index++;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>333</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>334</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sprintf(suffix, \"%d\", index);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>335</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.name = \"attr\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>336</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.name += suffix;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>337</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.type = TypeInt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>338</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.length = (AttrLength) 4;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>339</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attrs.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>340</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; index++;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>341</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>342</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sprintf(suffix, \"%d\", index);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>343</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.name = \"attr\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>344</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.name += suffix;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>345</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.type = TypeReal;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>346</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attr.length = (AttrLength) 4;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>347</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; attrs.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>348</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; index++;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>349</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>350</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>351</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.createTable(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>352</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>353</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cerr &lt;&lt; \"***** A Large Table: \" &lt;&lt; tableName &lt;&lt; \" has created. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>354</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>355</th><td class=\"r\"><ins>&nbsp; &nbsp; free(suffix);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>356</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>357</th><td class=\"r\"><ins>&nbsp; &nbsp; return 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>358</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>359</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>360</th><td class=\"r\"><ins>// Write RIDs to a disk - do not use this code.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>361</th><td class=\"r\"><ins>// This is not a page-based operation. For test purpose only.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>362</th><td class=\"r\"><ins>void writeRIDsToDisk(std::vector&lt;RID&gt; &amp;rids) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>363</th><td class=\"r\"><ins>&nbsp; &nbsp; remove(\"rids_file\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>364</th><td class=\"r\"><ins>&nbsp; &nbsp; std::ofstream ridsFile(\"rids_file\", std::ios::out | std::ios::trunc | std::ios::binary);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>365</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>366</th><td class=\"r\"><ins>&nbsp; &nbsp; if (ridsFile.is_open()) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>367</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ridsFile.seekp(0, std::ios::beg);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>368</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; for (auto &amp;rid : rids) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>369</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ridsFile.write(reinterpret_cast&lt;const char *&gt;(&amp;rid.pageNum),</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>370</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sizeof(unsigned));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>371</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ridsFile.write(reinterpret_cast&lt;const char *&gt;(&amp;rid.slotNum),</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>372</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sizeof(unsigned));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>373</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>374</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ridsFile.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>375</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>376</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>377</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>378</th><td class=\"r\"><ins>// Write sizes to a disk - do not use this code.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>379</th><td class=\"r\"><ins>// This is not a page-based operation. For test purpose only.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>380</th><td class=\"r\"><ins>void writeSizesToDisk(std::vector&lt;int&gt; &amp;sizes) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>381</th><td class=\"r\"><ins>&nbsp; &nbsp; remove(\"sizes_file\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>382</th><td class=\"r\"><ins>&nbsp; &nbsp; std::ofstream sizesFile(\"sizes_file\", std::ios::out | std::ios::trunc | std::ios::binary);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>383</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>384</th><td class=\"r\"><ins>&nbsp; &nbsp; if (sizesFile.is_open()) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>385</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sizesFile.seekp(0, std::ios::beg);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>386</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; for (int &amp;size : sizes) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>387</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sizesFile.write(reinterpret_cast&lt;const char *&gt;(&amp;size),</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>388</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>389</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>390</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sizesFile.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>391</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>392</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>393</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>394</th><td class=\"r\"><ins>// Read rids from the disk - do not use this code.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>395</th><td class=\"r\"><ins>// This is not a page-based operation. For test purpose only.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>396</th><td class=\"r\"><ins>void readRIDsFromDisk(std::vector&lt;RID&gt; &amp;rids, int numRecords) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>397</th><td class=\"r\"><ins>&nbsp; &nbsp; RID tempRID;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>398</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned pageNum;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>399</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned slotNum;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>400</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>401</th><td class=\"r\"><ins>&nbsp; &nbsp; std::ifstream ridsFile(\"rids_file\", std::ios::in | std::ios::binary);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>402</th><td class=\"r\"><ins>&nbsp; &nbsp; if (ridsFile.is_open()) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>403</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ridsFile.seekg(0, std::ios::beg);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>404</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; numRecords; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>405</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ridsFile.read(reinterpret_cast&lt;char *&gt;(&amp;pageNum), sizeof(unsigned));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>406</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ridsFile.read(reinterpret_cast&lt;char *&gt;(&amp;slotNum), sizeof(unsigned));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>407</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tempRID.pageNum = pageNum;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>408</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tempRID.slotNum = slotNum;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>409</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rids.push_back(tempRID);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>410</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>411</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ridsFile.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>412</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>413</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>414</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>415</th><td class=\"r\"><ins>// Read sizes from the disk - do not use this code.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>416</th><td class=\"r\"><ins>// This is not a page-based operation. For test purpose only.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>417</th><td class=\"r\"><ins>void readSizesFromDisk(std::vector&lt;int&gt; &amp;sizes, int numRecords) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>418</th><td class=\"r\"><ins>&nbsp; &nbsp; int size;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>419</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>420</th><td class=\"r\"><ins>&nbsp; &nbsp; std::ifstream sizesFile(\"sizes_file\", std::ios::in | std::ios::binary);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>421</th><td class=\"r\"><ins>&nbsp; &nbsp; if (sizesFile.is_open()) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>422</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>423</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sizesFile.seekg(0, std::ios::beg);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>424</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; numRecords; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>425</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sizesFile.read(reinterpret_cast&lt;char *&gt;(&amp;size), sizeof(int));</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>426</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sizes.push_back(size);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>427</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>428</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sizesFile.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>429</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>430</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>431</th><td class=\"r\"><ins>#endif</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_00.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_00.cc b/rm/rmtest_00.cc\nnew file mode 100644\nindex 0000000..bebc5d1</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_00.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_0(const std::string &amp;tableName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. getAttributes **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 0 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; // GetAttributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; for (unsigned i = 0; i &lt; (unsigned) attrs.size(); i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; (i + 1) &lt;&lt; \". Attr Name: \" &lt;&lt; attrs[i].name &lt;&lt; \" Type: \" &lt;&lt; (AttrType) attrs[i].type &lt;&lt; \" Len: \"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;&lt; attrs[i].length &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** RM Test Case 0 finished. The result will be examined. *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; // Get Attributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_0(\"tbl_employee\");</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_01.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_01.cc b/rm/rmtest_01.cc\nnew file mode 100644\nindex 0000000..bde741e</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_01.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_1(const std::string &amp;tableName, const int nameLength, const std::string &amp;name, const int age,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const float height, const int salary) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Insert Tuple **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Read Tuple **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; // NOTE: \"**\" signifies the new functions being tested in this test case. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 1 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; // Initialize a NULL field indicator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert a tuple into a table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"The tuple to be inserted:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; rm.printTuple(attrs, tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; // Given the rid, read the tuple from table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.readTuple(tableName, rid, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"The returned tuple:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; rm.printTuple(attrs, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; // Compare whether the two memory blocks are the same</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; if (memcmp(tuple, returnedData, tupleSize) == 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"**** RM Test Case 1 finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"**** [FAIL] RM Test Case 1 failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert/Read Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_1(\"tbl_employee\", 14, \"Peter Anteater\", 27, 6.2, 10000);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_02.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_02.cc b/rm/rmtest_02.cc\nnew file mode 100644\nindex 0000000..d781e0c</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_02.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_2(const std::string &amp;tableName, const int nameLength, const std::string &amp;name, const int age,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const float height, const int salary) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Insert tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Delete Tuple **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; // 3. Read Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 2 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Insert the Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"The tuple to be inserted:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; rm.printTuple(attrs, tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete the tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTuple(tableName, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::deleteTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; // Read Tuple after deleting it - should fail</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(returnedData, 0, 200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.readTuple(tableName, rid, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc != success &amp;&amp; \"Reading a deleted tuple should fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; // Compare the two memory blocks to see whether they are different</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; if (memcmp(tuple, returnedData, tupleSize) != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** RM Test Case 2 finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] RM Test case 2 failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_2(\"tbl_employee\", 5, \"Peter\", 23, 5.11, 12000);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_03.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_03.cc b/rm/rmtest_03.cc\nnew file mode 100644\nindex 0000000..2daf93c</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_03.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_3(const std::string &amp;tableName, const int nameLength, const std::string &amp;name, const int age,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const float height, const int salary) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Insert Tuple&nbsp; &nbsp; </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Update Tuple **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; // 3. Read Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 3****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned updatedTupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; void *updatedTuple = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Insert the Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"Original RID:&nbsp; \" &lt;&lt; rid.pageNum &lt;&lt; \" \" &lt;&lt; rid.slotNum &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Update Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, 7, \"Barbara\", age, height, 12000, updatedTuple, &amp;updatedTupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.updateTuple(tableName, updatedTuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::updateTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Read Tuple </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.readTuple(tableName, rid, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; // Print the tuples </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"Inserted Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; rm.printTuple(attrs, tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"Updated data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; rm.printTuple(attrs, updatedTuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"Returned Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; rm.printTuple(attrs, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; if (memcmp(updatedTuple, returnedData, updatedTupleSize) == 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** RM Test Case 3 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(updatedTuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] RM Test case 3 Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(updatedTuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>&nbsp; &nbsp; // Update Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_3(\"tbl_employee\", 4, \"Paul\", 28, 6.5, 6000);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_04.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_04.cc b/rm/rmtest_04.cc\nnew file mode 100644\nindex 0000000..ca40560</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_04.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_4(const std::string &amp;tableName, const int nameLength, const std::string &amp;name, const int age,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const float height, const int salary) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Insert tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Read Attributes **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 4 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Insert the Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Read Attribute</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.readAttribute(tableName, rid, \"Salary\", returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readAttribute() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; int salaryBack = *(int *) ((char *) returnedData + nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"Salary: \" &lt;&lt; salary &lt;&lt; \" Returned Salary: \" &lt;&lt; salaryBack &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; if (memcmp((char *) returnedData + nullAttributesIndicatorActualSize,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(char *) tuple + 19 + nullAttributesIndicatorActualSize, 4) == 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** RM Test case 4 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] RM Test Case 4 Failed. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; // Read Attributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_4(\"tbl_employee\", 7, \"Hoffman\", 31, 5.8, 9999);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_05.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_05.cc b/rm/rmtest_05.cc\nnew file mode 100644\nindex 0000000..aca8f7b</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_05.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_5(const string &amp;tableName, const int nameLength, const string &amp;name, const int age, const float height,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const int salary) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 0. Insert tuple;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Read Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Delete Table **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; // 3. Read Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; // 4. Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 5 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData1 = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Read Tuple </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.readTuple(tableName, rid, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Delete Table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTable(tableName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::deleteTable() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; // Reading a tuple on a deleted table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; memset((char *) returnedData1, 0, 200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.readTuple(tableName, rid, returnedData1);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc != success &amp;&amp; \"RelationManager::readTuple() on a deleted table should fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; // Inserting a tuple on a deleted table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc != success &amp;&amp; \"RelationManager::insertTuple() on a deleted table should fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; if (memcmp(returnedData, returnedData1, tupleSize) != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** Test Case 5 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData1);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 5 Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData1);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete Table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_5(\"tbl_employee\", 6, \"Martin\", 29, 193.6, 20000);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_06.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_06.cc b/rm/rmtest_06.cc\nnew file mode 100644\nindex 0000000..3073e2e</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_06.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_6(const std::string &amp;tableName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Simple scan **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 6 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; int numTuples = 100;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rids[numTuples];</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; std::set&lt;int&gt; ages;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; numTuples; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; tuple = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; float height = (float) i;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; int age = 20 + i;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, 6, \"Tester\", age, height, age * 10, tuple, &amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ages.insert(age);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rids[i] = rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; // Set up the iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; RM_ScanIterator rmsi;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string attr = \"Age\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;std::string&gt; attributes;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; attributes.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.scan(tableName, \"\", NO_OP, NULL, attributes, rmsi);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::scan() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attributes.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if (ages.find(*(int *) ((char *) returnedData + nullAttributesIndicatorActualSize)) == ages.end()) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 6 Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** Test Case 6 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; return 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; // Simple Scan</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_6(\"tbl_employee3\");</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_07.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_07.cc b/rm/rmtest_07.cc\nnew file mode 100644\nindex 0000000..9606a40</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_07.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_7(const string &amp;tableName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Simple scan **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Delete the given table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 7 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; int numTuples = 100;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; std::set&lt;int&gt; ages;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; numTuples; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; int age = 20 + i;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ages.insert(age);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; // Set up the iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; RM_ScanIterator rmsi;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string attr = \"Age\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;std::string&gt; attributes;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; attributes.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.scan(tableName, \"\", NO_OP, NULL, attributes, rmsi);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::scan() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; int ageReturned = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; //std::cout &lt;&lt; \"Returned Age: \" &lt;&lt; *(int *)((char *)returnedData+1) &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ageReturned = *(int *) ((char *) returnedData + 1);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if (ages.find(ageReturned) == ages.end()) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 7 Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete a Table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTable(tableName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::deleteTable() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** Test Case 7 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; // Simple Scan</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_7(\"tbl_employee3\");</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_08.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_08.cc b/rm/rmtest_08.cc\nnew file mode 100644\nindex 0000000..99499d2</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_08.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_8(const std::string &amp;tableName, std::vector&lt;RID&gt; &amp;rids, std::vector&lt;int&gt; &amp;sizes) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested for large tables:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. getAttributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. insert tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 8 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; int numTuples = 2000;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; // GetAttributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert 2000 tuples into table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; numTuples; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Test insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; int size = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memset(tuple, 0, 2000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; prepareLargeTuple(attrs.size(), nullsIndicator, i, tuple, &amp;size);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rids.push_back(rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sizes.push_back(size);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; writeRIDsToDisk(rids);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; writeSizesToDisk(sizes);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** Test Case 8 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;RID&gt; rids;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;int&gt; sizes;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_8(\"tbl_employee4\", rids, sizes);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_09.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_09.cc b/rm/rmtest_09.cc\nnew file mode 100644\nindex 0000000..a1ee1c4</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_09.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_09(const std::string &amp;tableName, std::vector&lt;RID&gt; &amp;rids, std::vector&lt;int&gt; &amp;sizes) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested for large tables:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. read tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** In RM Test case 9 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; int size = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; int numTuples = 2000;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; // read the saved rids and the sizes of records</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; readRIDsFromDisk(rids, numTuples);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; readSizesFromDisk(sizes, numTuples);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; // GetAttributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; numTuples; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memset(tuple, 0, 4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memset(returnedData, 0, 4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.readTuple(tableName, rids[i], returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; size = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; prepareLargeTuple(attrs.size(), nullsIndicator, i, tuple, &amp;size);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if (memcmp(returnedData, tuple, sizes[i]) != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 9 Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** Test Case 9 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;RID&gt; rids;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;int&gt; sizes;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; // Read Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_09(\"tbl_employee4\", rids, sizes);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_10.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_10.cc b/rm/rmtest_10.cc\nnew file mode 100644\nindex 0000000..0d35a01</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_10.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_10(const std::string &amp;tableName, std::vector&lt;RID&gt; &amp;rids, std::vector&lt;int&gt; &amp;sizes) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested for large tables:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. update tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. read tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test case 10 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; int numTuples = 2000;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; readRIDsFromDisk(rids, numTuples);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; readSizesFromDisk(sizes, numTuples);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; // GetAttributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; auto nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; // Update the first 1000 tuples</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; int size = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; 1000; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memset(tuple, 0, 4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; RID rid = rids[i];</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; prepareLargeTuple(attrs.size(), nullsIndicator, i + 10, tuple, &amp;size);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.updateTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::updateTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sizes[i] = size;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rids[i] = rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; // Read the updated records and check the integrity</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; 1000; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memset(tuple, 0, 4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memset(returnedData, 0, 4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; prepareLargeTuple(attrs.size(), nullsIndicator, i + 10, tuple, &amp;size);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.readTuple(tableName, rids[i], returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if (memcmp(returnedData, tuple, sizes[i]) != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 10 Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** Test Case 10 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;RID&gt; rids;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;int&gt; sizes;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>&nbsp; &nbsp; // Update Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_10(\"tbl_employee4\", rids, sizes);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_11.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_11.cc b/rm/rmtest_11.cc\nnew file mode 100644\nindex 0000000..798b38c</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_11.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_11(const std::string &amp;tableName, std::vector&lt;RID&gt; &amp;rids) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested for large tables:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. delete tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. read tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 11 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; int numTuples = 2000;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; readRIDsFromDisk(rids, numTuples);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete the first 1000 tuples</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; 1000; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.deleteTuple(tableName, rids[i]);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::deleteTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; // Try to read the first 1000 deleted tuples</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; 1000; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.readTuple(tableName, rids[i], returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc != success &amp;&amp; \"RelationManager::readTuple() on a deleted tuple should fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 1000; i &lt; 2000; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.readTuple(tableName, rids[i], returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** Test Case 11 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;RID&gt; rids;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;int&gt; sizes;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_11(\"tbl_employee4\", rids);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_12.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_12.cc b/rm/rmtest_12.cc\nnew file mode 100644\nindex 0000000..879c3b9</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_12.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_12(const std::string &amp;tableName)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested for large tables</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. scan</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp;std::cout &lt;&lt;std::endl &lt;&lt; \"***** In RM Test case 12 *****\" &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; RM_ScanIterator rmsi;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;std::string&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; attrs.emplace_back(\"attr5\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; attrs.emplace_back(\"attr12\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; attrs.emplace_back(\"attr28\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.scan(tableName, \"\", NO_OP, NULL, attrs, rmsi);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::scan() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; int j = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; while(rmsi.getNextTuple(rid, returnedData) != RM_EOF)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if(j % 200 == 0)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int offset = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::cout &lt;&lt; \"Real Value: \" &lt;&lt; *(float *)((char *)returnedData+nullAttributesIndicatorActualSize) &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; offset += 4;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int size = *(int *)((char *)returnedData + offset + nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::cout &lt;&lt; \"Varchar size: \" &lt;&lt; size &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; offset += 4;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char *buffer = (char *)malloc(size + 1);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memcpy(buffer, (char *)returnedData + offset + nullAttributesIndicatorActualSize, size);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; buffer[size] = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; offset += size;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::cout &lt;&lt; \"VarChar Value: \" &lt;&lt; buffer &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::cout &lt;&lt; \"Integer Value: \" &lt;&lt; *(int *)((char *)returnedData + offset + nullAttributesIndicatorActualSize) &lt;&lt;std::endl &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; offset += 4;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(buffer);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; j++;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; memset(returnedData, 0, 4000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp;std::cout &lt;&lt; \"Total number of tuples: \" &lt;&lt; j &lt;&lt;std::endl &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; if (j &gt; 1000) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp;std::cout &lt;&lt; \"***** [FAIL] Test Case 12 Failed *****\" &lt;&lt;std::endl &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp;std::cout &lt;&lt; \"***** Test Case 12 Finished. The result will be examined. *****\" &lt;&lt;std::endl &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>int main()</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Scan</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_12(\"tbl_employee4\");</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_13.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_13.cc b/rm/rmtest_13.cc\nnew file mode 100644\nindex 0000000..89bf668</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_13.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_13(const std::string &amp;tableName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Conditional scan</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 13 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; int numTuples = 500;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; int ageVal = 25;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; int age = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rids[numTuples];</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;char *&gt; tuples;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; // GetAttributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; numTuples; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; tuple = malloc(100);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; auto height = (float) i;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; age = (rand() % 10) + 23;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, 6, \"Tester\", age, height, 123, tuple, &amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rids[i] = rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; // Set up the iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; RM_ScanIterator rmsi;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string attr = \"Age\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;std::string&gt; attributes;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; attributes.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.scan(tableName, attr, GT_OP, &amp;ageVal, attributes, rmsi);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::scan() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; age = *(int *) ((char *) returnedData + 1);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if (age &lt;= ageVal) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Returned value from a scan is not correct.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 13 Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTable(\"tbl_b_employee4\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** Test Case 13 Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>&nbsp; &nbsp; // Scan with conditions</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins>&nbsp; &nbsp; createTable(\"tbl_b_employee4\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_13(\"tbl_b_employee4\");</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_13b.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_13b.cc b/rm/rmtest_13b.cc\nnew file mode 100644\nindex 0000000..3a558cf</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_13b.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_13b(const std::string &amp;tableName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Conditional scan - including NULL values</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 13B *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; int numTuples = 500;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; int ageVal = 25;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; int age = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rids[numTuples];</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;char *&gt; tuples;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string tupleName;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; char *suffix = (char *) malloc(10);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; bool nullBit = false;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; // GetAttributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicatorWithNull = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicatorWithNull, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; // age field : NULL</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; nullsIndicatorWithNull[0] = 64; // 01000000</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; for (int i = 0; i &lt; numTuples; i++) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; tuple = malloc(100);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; auto height = (float) i;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; age = (rand() % 20) + 15;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; sprintf(suffix, \"%d\", i);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if (i % 10 == 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tupleName = \"TesterNull\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tupleName += suffix;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicatorWithNull, tupleName.length(), tupleName, 0, height, 456, tuple,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tupleName = \"Tester\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tupleName += suffix;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, tupleName.length(), tupleName, age, height, 123, tuple,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rids[i] = rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>&nbsp; &nbsp; // Set up the iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; RM_ScanIterator rmsi;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string attr = \"Age\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;std::string&gt; attributes;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>&nbsp; &nbsp; attributes.push_back(attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.scan(tableName, attr, GT_OP, &amp;ageVal, attributes, rmsi);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::scan() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>&nbsp; &nbsp; while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Check the first bit of the returned data since we only return one attribute in this test case</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // However, the age with NULL should not be returned since the condition NULL &gt; 25 can't hold.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // All comparison operations with NULL should return FALSE</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // (e.g., NULL &gt; 25, NULL &gt;= 25, NULL &lt;= 25, NULL &lt; 25, NULL == 25, NULL != 25: ALL FALSE)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; nullBit = *(unsigned char *) ((char *) returnedData) &amp; ((unsigned) 1 &lt;&lt; (unsigned) 7);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if (!nullBit) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; age = *(int *) ((char *) returnedData + 1);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (age &lt;= ageVal) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Comparison didn't work in this case</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>84</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Returned value from a scan is not correct: returned Age &lt;= 25.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>85</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 13B Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>86</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>87</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>88</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(suffix);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>89</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>90</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicatorWithNull);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>91</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>92</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>93</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>94</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Age with NULL value should not be returned.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>95</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Returned value from a scan is not correct. NULL returned.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>96</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 13B Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>97</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>98</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>99</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(suffix);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>100</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>101</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicatorWithNull);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>102</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>103</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>104</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>105</th><td class=\"r\"><ins>&nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>106</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>107</th><td class=\"r\"><ins>&nbsp; &nbsp; free(suffix);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>108</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>109</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicatorWithNull);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>110</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>111</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTable(\"tbl_b_employee5\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>112</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>113</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"Test Case 13B Finished. The result will be examined. *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>114</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>115</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>116</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>117</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>118</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>119</th><td class=\"r\"><ins>&nbsp; &nbsp; // Scan with conditions</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>120</th><td class=\"r\"><ins>&nbsp; &nbsp; createTable(\"tbl_b_employee5\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>121</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_13b(\"tbl_b_employee5\");</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>122</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_14.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_14.cc b/rm/rmtest_14.cc\nnew file mode 100644\nindex 0000000..b60b5f6</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_14.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_14(const std::string &amp;tableName) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. System Catalog Implementation - Tables table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Test Case 14 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; // Get Catalog Attributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; // There should be at least three attributes: table-id, table-name, file-name</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; if (attrs.size() &lt; 3) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Your system catalog schema is not correct.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 14 failed *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; } else if (attrs[0].name != \"table-id\" || attrs[1].name != \"table-name\" || attrs[2].name != \"file-name\") {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Your system catalog schema is not correct.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 14 failed *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(1000);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; // Set up the iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; RM_ScanIterator rmsi;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;std::string&gt; projected_attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; projected_attrs.reserve(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; for (Attribute &amp;attr : attrs) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; projected_attrs.push_back(attr.name);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.scan(tableName, \"\", NO_OP, NULL, projected_attrs, rmsi);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::scan() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; int count = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // We will manually check the returned tuples to see whether your implementation is correct or not.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rm.printTuple(attrs, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; count++;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; // There should be at least two rows - one for Tables and one for Columns</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; if (count &lt; 2) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Your system catalog schema is not correct.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Test Case 14 failed\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; // Deleting the catalog should fail.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTable(tableName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc != success &amp;&amp; \"RelationManager::deleteTable() on the system catalog table should fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** Test Case 14 Finished. The result will be examined. *****\" &lt;&lt; endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; return 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; // NOTE: your Tables table must be called \"Tables\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string catalog_table_name = \"Tables\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Catalog Information</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_14(catalog_table_name);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_15.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_15.cc b/rm/rmtest_15.cc\nnew file mode 100644\nindex 0000000..d435147</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_15.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC TEST_RM_15(const std::string &amp;tableName)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. System Catalog Implementation - Columns table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt;std::endl &lt;&lt; \"***** In RM Test Case 15 *****\" &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; // Get Catalog Attributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; // There should be at least five attributes: table-id, column-name, column-type, column-length, column-position</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; if (attrs.size() &lt; 5) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Your system catalog schema is not correct.\" &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp;std::cout &lt;&lt; \"***** [FAIL] Test Case 15 failed *****\" &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; } else if (attrs[0].name != \"table-id\" || attrs[1].name != \"column-name\" ||</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;attrs[2].name != \"column-type\" || attrs[3].name != \"column-length\" || attrs[4].name != \"column-position\") {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Your system catalog schema is not correct.\" &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp;std::cout &lt;&lt; \"***** [FAIL] Test Case 15 failed *****\" &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; // Set up the iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; RM_ScanIterator rmsi;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;std::string&gt; projected_attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; for (Attribute &amp; attr : attrs){</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; projected_attrs.push_back(attr.name);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.scan(tableName, \"\", NO_OP, NULL, projected_attrs, rmsi);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::scan() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; int count = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; while(rmsi.getNextTuple(rid, returnedData) != RM_EOF)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // We will manually check the returned tuples to see whether your implementation is correct or not.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rm.printTuple(attrs, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; count++;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; rmsi.close();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; // There should be at least eight rows - three for Tables and five for Columns</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; if (count &lt; 8) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Your system catalog schema is not correct.\" &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp;std::cout &lt;&lt; \"***** [FAIL] Test Case 15 failed\" &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; // Deleting the catalog should fail.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTable(tableName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc != success &amp;&amp; \"RelationManager::deleteTable() on the system catalog table should fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp;std::cout &lt;&lt; \"***** Test Case 15 Finished. The result will be examined. *****\" &lt;&lt;std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; return 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>int main()</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; // NOTE: your Columns table must be called \"Columns\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string catalog_table_name = \"Columns\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Catalog Information</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>&nbsp; &nbsp; return TEST_RM_15(catalog_table_name);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_create_tables.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_create_tables.cc b/rm/rmtest_create_tables.cc\nnew file mode 100644\nindex 0000000..1eecdcd</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_create_tables.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; // By executing this script, the following tables including the system tables will be removed and constructed again.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // Before executing rmtest_xx, you need to make sure that this script work properly.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** RM TEST - Creating the Catalog and user tables *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; // Try to delete the System Catalog.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; // If this is the first time, it will generate an error. It's OK and we will ignore that.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.deleteCatalog();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.createCatalog();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; assert (rc == success &amp;&amp; \"Creating the Catalog should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete the actual file and create Table tbl_employee</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; remove(\"tbl_employee\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = createTable(\"tbl_employee\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; assert (rc == success &amp;&amp; \"Creating a table should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete the actual file and create Table tbl_employee</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; remove(\"tbl_employee2\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = createTable(\"tbl_employee2\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; assert (rc == success &amp;&amp; \"Creating a table should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete the actual file and create Table tbl_employee</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; remove(\"tbl_employee3\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = createTable(\"tbl_employee3\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; assert (rc == success &amp;&amp; \"Creating a table should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; // Delete the actual file and create Table tbl_employee</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; remove(\"tbl_employee4\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = createLargeTable(\"tbl_employee4\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; assert (rc == success &amp;&amp; \"Creating a table should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_delete_tables.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_delete_tables.cc b/rm/rmtest_delete_tables.cc\nnew file mode 100644\nindex 0000000..a2fb2b5</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_delete_tables.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // By executing this script, the following tables including the system tables will be removed.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** RM TEST - Deleting the Catalog and User tables *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.deleteTable(\"tbl_employee\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; if (rc != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Deleting tbl_employee failed.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTable(\"tbl_employee2\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; if (rc != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Deleting tbl_employee2 failed.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTable(\"tbl_employee3\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; if (rc != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Deleting tbl_employee3 failed.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteTable(\"tbl_employee4\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; if (rc != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Deleting tbl_employee4 failed.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.deleteCatalog();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; if (rc != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"Deleting the catalog failed.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return rc;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_extra_1.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_extra_1.cc b/rm/rmtest_extra_1.cc\nnew file mode 100644\nindex 0000000..2c88345</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_extra_1.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC RM_TEST_EXTRA_1(const std::string &amp;tableName, const int nameLength, const std::string &amp;name, const int age,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const int height, const int salary) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // Extra Test Case - Functions Tested:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Insert tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Read Attributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; // 3. Drop Attributes **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Extra Credit Test Case 1 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; // Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; // Read Attribute</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.readAttribute(tableName, rid, \"Height\", returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readAttribute() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; if (memcmp((char *) returnedData + nullAttributesIndicatorActualSize,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(char *) tuple + 22 + nullAttributesIndicatorActualSize, 4) != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"RelationManager::readAttribute() failed.\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Extra Credit Test Case 1 Failed. *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Drop the attribute</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.dropAttribute(tableName, \"Height\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::dropAttribute() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Read Tuple and print the tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.readTuple(tableName, rid, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Get the attribute from the table again</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs2;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rc = rm.getAttributes(tableName, attrs2);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // The size of the original attribute vector size should be greater than the current one.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if (attrs.size() &lt;= attrs2.size()) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Extra Credit Test Case 1 Failed. *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rc = rm.printTuple(attrs2, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::printTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>&nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"***** Extra Credit Test Case 1 finished. The result will be examined. *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>&nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string name1 = \"Peter Anteater\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins>&nbsp; &nbsp; // Drop table for the case where we execute this test multiple times.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins>&nbsp; &nbsp; // We ignore the error code for this operation.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins>&nbsp; &nbsp; rm.deleteTable(\"tbl_employee100\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins>&nbsp; &nbsp; // Create a table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins>&nbsp; &nbsp; createTable(\"tbl_employee100\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins>&nbsp; &nbsp; return RM_TEST_EXTRA_1(\"tbl_employee100\", 14, name1, 24, 185, 10000);</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>84</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n      <li class=\"entry\">\n        <h2>\n          <a>new file rm/rmtest_extra_2.cc</a>\n        </h2>\n        <pre>diff --git a/rm/rmtest_extra_2.cc b/rm/rmtest_extra_2.cc\nnew file mode 100644\nindex 0000000..b05316a</pre>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"File /dev/null\">\n                      -\n                  </th>\n                  <th title=\"File b/rm/rmtest_extra_2.cc\">\n                      +\n                  </th>\n                  <td><em></em>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>#include \"rm_test_util.h\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>RC RM_TEST_EXTRA_2(const std::string &amp;tableName, const int nameLength, const std::string &amp;name, const int age,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const int height, const int salary, const int ssn) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp; // Functions Tested</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp; // 1. Add Attribute **</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp; // 2. Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"***** In RM Extra Credit Test Case 2 *****\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp; &nbsp; RID rid;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned tupleSize = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>&nbsp; &nbsp; void *tuple = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>&nbsp; &nbsp; void *returnedData = malloc(200);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Add Attribute</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>&nbsp; &nbsp; Attribute attr;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.name = \"SSN\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.type = TypeInt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>&nbsp; &nbsp; attr.length = 4;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins>&nbsp; &nbsp; RC rc = rm.addAttribute(tableName, attr);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::addAttribute() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>&nbsp; &nbsp; // GetAttributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>&nbsp; &nbsp; std::vector&lt;Attribute&gt; attrs;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.getAttributes(tableName, attrs);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::getAttributes() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; &nbsp; unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>&nbsp; &nbsp; auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; &nbsp; memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Insert Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; prepareTupleAfterAdd(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, ssn, tuple, &amp;tupleSize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.insertTuple(tableName, tuple, rid);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::insertTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; // Test Read Tuple</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.readTuple(tableName, rid, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; &nbsp; assert(rc == success &amp;&amp; \"RelationManager::readTuple() should not fail.\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; \"Inserted Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.printTuple(attrs, tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>&nbsp; &nbsp; std::cout &lt;&lt; std::endl &lt;&lt; \"Returned Data:\" &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins>&nbsp; &nbsp; rc = rm.printTuple(attrs, returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>&nbsp; &nbsp; if (memcmp(returnedData, tuple, tupleSize) != 0) {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** [FAIL] Extra Credit Test Case 2 Failed *****\" &lt;&lt; std::endl &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return -1;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>&nbsp; &nbsp; } else {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; \"***** Extra Credit Test Case 2 Finished. The result will be examined. *****\" &lt;&lt; std::endl</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;&lt; std::endl;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(tuple);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(returnedData);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; free(nullsIndicator);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return success;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; &nbsp; }</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>int main() {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>&nbsp; &nbsp; std::string name2 = \"Victors\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; // Drop table for the case where we execute this test multiple times.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>&nbsp; &nbsp; // We ignore the error code for this operation.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>&nbsp; &nbsp; rm.deleteTable(\"tbl_employee200\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins>&nbsp; &nbsp; createTable(\"tbl_employee200\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>&nbsp; &nbsp; // Add Attributes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>&nbsp; &nbsp; return RM_TEST_EXTRA_2(\"tbl_employee200\", 7, name2, 22, 180, 6000, 123479765);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins>}</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n\n        </div>\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"last first\">\n          <a rel=\"nofollow\" href=\"/wiki/public/raw-attachment/wiki/cs222-2019-fall-project2/Project2.patch\">Original Format</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>", "encoding": "utf-8"}