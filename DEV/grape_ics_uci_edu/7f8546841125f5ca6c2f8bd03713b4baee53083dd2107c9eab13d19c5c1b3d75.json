{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project4?action=diff&version=1", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs122b-2019-winter-project4 (diff) \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs122b-2019-winter-project4?action=history\" title=\"Page history\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs122b-2019-winter-project4?action=diff&amp;version=2\" title=\"Version 2\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/wiki/public/chrome/common/css/diff.css\" />\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span class=\"missing\">&larr; Previous Change</span></li><li><a href=\"/wiki/public/wiki/cs122b-2019-winter-project4?action=history\" title=\"Page history\">Wiki History</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs122b-2019-winter-project4?action=diff&amp;version=2\" title=\"Version 2\">Next Change</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n      <h1>\n        Changes between\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project4?version=0\">Initial Version</a> and\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project4?version=1\">Version 1</a> of\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project4\">cs122b-2019-winter-project4</a>\n      </h1>\n      <form method=\"post\" id=\"prefs\" action=\"/wiki/public/wiki/cs122b-2019-winter-project4?version=1\"><div><input type=\"hidden\" name=\"__FORM_TOKEN\" value=\"508237f267fd4fdaad8f5f4e\" /></div>\n        <div>\n          <input type=\"hidden\" name=\"action\" value=\"diff\" />\n          <input type=\"hidden\" name=\"version\" value=\"1\" />\n          <input type=\"hidden\" name=\"old_version\" value=\"0\" />\n          \n  <label for=\"style\">View differences</label>\n  <select id=\"style\" name=\"style\">\n    <option selected=\"selected\" value=\"inline\">inline</option>\n    <option value=\"sidebyside\">side by side</option>\n  </select>\n  <div class=\"field\">\n    <label><input type=\"radio\" name=\"contextall\" value=\"0\" checked=\"checked\" />\n             Show</label>\n      <label><input type=\"text\" name=\"contextlines\" id=\"contextlines\" size=\"2\" maxlength=\"3\" value=\"2\" />\n             lines around each change</label><br />\n    <label><input type=\"radio\" name=\"contextall\" value=\"1\" />\n           Show the changes in full context</label>\n  </div>\n  <fieldset id=\"ignore\">\n    <legend>Ignore:</legend>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignoreblanklines\" name=\"ignoreblanklines\" />\n      <label for=\"ignoreblanklines\">Blank lines</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorecase\" name=\"ignorecase\" />\n      <label for=\"ignorecase\">Case changes</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorewhitespace\" name=\"ignorewhitespace\" />\n      <label for=\"ignorewhitespace\">White space changes</label>\n    </div>\n  </fieldset>\n  <div class=\"buttons\">\n    <input type=\"submit\" name=\"update\" value=\"Update\" />\n  </div>\n\n        </div>\n      </form>\n      <dl id=\"overview\">\n        <dt class=\"property time\">Timestamp:</dt>\n        <dd class=\"time\">\n            Feb 12, 2019 6:51:19 PM (<a class=\"timeline\" href=\"/wiki/public/timeline?from=2019-02-12T18%3A51%3A19-08%3A00&amp;precision=second\" title=\"See timeline at Feb 12, 2019 6:51:19 PM\">8 months</a> ago)\n        </dd>\n        <dt class=\"property author\">Author:</dt>\n        <dd class=\"author\">\n          zuozhi\n        </dd>\n        <dt class=\"property message\">Comment:</dt>\n        <dd class=\"message\">\n          \n          <p>\n--\n</p>\n\n        </dd>\n      </dl>\n      <div class=\"diff\">\n        <div class=\"legend\" id=\"diff-legend\">\n          <h3>Legend:</h3>\n          <dl>\n            <dt class=\"unmod\"></dt><dd>Unmodified</dd>\n            <dt class=\"add\"></dt><dd>Added</dd>\n            <dt class=\"rem\"></dt><dd>Removed</dd>\n            <dt class=\"mod\"></dt><dd>Modified</dd>\n          </dl>\n        </div>\n        <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2 id=\"file0\">\n          <a href=\"/wiki/public/wiki/cs122b-2019-winter-project4?version=1\">cs122b-2019-winter-project4</a>\n        </h2>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"Version currently edited\">\n                    <a href=\"#L1\">\n                      v1</a>\n                  </th>\n                  <th title=\"Version 1\">\n                    <a href=\"/wiki/public/wiki/cs122b-2019-winter-project4?version=1#L1\">\n                      v1</a>\n                  </th>\n                  <td>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>[[PageOutline]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>= CS122B Project 4 =</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>'''Deadline: Week 9 Monday, 03/04/2019, 11:45pm. Due on Github '''[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>= Tasks =</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins>&nbsp;1. [#AJAX Improving the Website by Full Text Search and Autocomplete]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>&nbsp;2. [#Android&nbsp; Developing an Android Application for Fabflix]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>&nbsp;3. [#UDF Fuzzy Searching Using User Defined Functions, optional extra credit]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>[[Span(id=AJAX)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins>== Task 1: Improving the Website by Full Text Search and Autocomplete ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>The \"Advanced Search\" feature you implemented on project 2 is not very user friendly . Most search interfaces nowadays simply have one input box that can perform search intelligently. Autocomplete feature on a search bar is now considered a must-have functionality.&nbsp; In this task, you need to implement a powerful search box that can search on multiple attributes and support autocomplete.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>'''Full Text Search on movie title'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>Full Text Search section specifies the requirements when the users click the search button and what should show up in the movie list result.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>* Have a search box on the main page of the Fabflix website (the page after login).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>* Do full text search using the query. If the query string has multiple keywords, then each keyword should be treated as a prefix. For example, the query \"good u\" is first tokenized into two words: \"good\" and \"u\". The search results will be all the movie titles that contain a word starting with \"good\" and a word starting with \"u\", such as \"The Good, The Bad and The Ugly\", and \"Goodbye Uncle Tom\".&nbsp; Check the following Netflix screenshot as an example of full text search.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins>* This search box should search on movie title. A movie is considered a match if the title matches the query. For example, the query \"logan\" should return a list of movies whose title contains \"logan\" as a prefix.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins>* If the user clicks the \"Search\" button, the site should jump to the movie list page to display the search results.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>[[Image(netflix.png)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>'''Autocomplete suggestion:'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>As the user types in the query in the search box character by character, your frontend Javascript code should send the query to the backend server to get a list of matching results, and then display them in the dropdown list. Check the [http://www.imdb.com/ IMDB] search interface as an example.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>[[Image(imdb.png)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>We recommend you use a Javascript autocomplete library instead of implementing the autocomplete on your own. There are many autocomplete libraries, such as https://github.com/devbridge/jQuery-Autocomplete. The autocomplete library can help you easily achieve some of the requirements.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins>* Your autocomplete is required to do full text search on movie title field.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>* The autocomplete suggestion list should not have more than 10 items.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>* Autocomplete should support keyboard navigation using \u2191 \u2193 arrow keys on the keyboard. When a suggestion item is selected, the item should be highlighted, the text in the input box should be changed to the item's name.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins>* Clicking on any of the suggestion items, or pressing \"Enter\" if an item is selected during keyboard navigation, should jump to the corresponding single movie page.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>* If the user doesn't select any suggestion and just hits \"Enter\" key or clicks the search button, you should do the same full text search as stated above in the \"Full Text Search\" requirement.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>* When the user types only one or two characters, you should not do any search because the results may not be helpful. You should only perform the autocomplete search when the user types in at least 3 (&gt;= 3) characters.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>* When the user types in the query, you should not do the autocomplete search on every keystroke because the user is still typing. Moreover you don't want to send too many requests to the backend. You should set a small delay time (300ms) so that that the frontend only performs the autocomplete search after the user stops typing for at least 300ms.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>* If the autocomplete query has been issued before, you don't want to send the request to the server again (for example, when the user deletes some of the characters). Store the suggestion list of each query in the Javascript frontend. Every time before your code needs to do autocomplete search, first check if you can use the stored suggestions. If not, then send the query to the server.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins>* Your autocomplete search needs to be very fast. Note that the total running time the user feels is \"delay time + query time\". Some points will be deducted if your autocomplete search takes long.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>* '''Print to the Javascript console:'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>&nbsp; * In order to verify that your code satisfies the constraints, you need to print messages to the Javascript console using \"console.log()\". To see the printed messages, in Chrome, open your webpage -&gt; right click \"Inspect\", then choose \"Console\" tab. All popular browsers have something similar.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins>&nbsp; * We need to see a printed message printed message '''only''' at these cases:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>&nbsp; &nbsp; * the autocomplete search is initiated (after the delay);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>&nbsp; &nbsp; * whether the search is using cached results or sending an ajax request to the server;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins>&nbsp; &nbsp; * the suggested list (either from cache or server response).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins>Here's an [https://github.com/UCI-Chenli-teaching/project4-autocomplete-example Autocomplete Example] that implemented most basic features of the autocomplete search. You are highly recommended to take a look at this example and learn from it.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>[[Span(id=Android)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins>== Task 2:&nbsp; Developing an Android App for Fabflix Using Android Studio IDE ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins>In this task you will implement an Android app as a new frontend for Fabflix.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins>'''Steps:'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins>The following guidelines are based on this [http://developer.android.com/training/basics/firstapp/index.html Android programming tutorial].</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>84</th><td class=\"r\"><ins>'''Step 1''': [http://developer.android.com/sdk/index.html Download] Android Studio IDE.&nbsp; Depending on the network speed, this step may take a while (e.g., 10-20 minutes).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>85</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>86</th><td class=\"r\"><ins>'''Step 2''': Clone the Android Example from [http://github.com/UCI-Chenli-teaching/project4-android-example Github]. Also clone the new project4 login example from [http://github.com/UCI-Chenli-teaching/project4-login-example Github] and deploy on your local Tomcat server (with HTTPS enabled).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>87</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>88</th><td class=\"r\"><ins>'''Step 3''': Install the downloaded Android Studio IDE.&nbsp; Once you see a page of \"Welcome to Android Studio,\" use the option \"Open an existing Android Studio project\" and specify the \"project4-android-example\" app on your disk.&nbsp; Ignore the \"Android SDK Sync\" warning message.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>89</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>90</th><td class=\"r\"><ins>'''Step 4''': When opening the app, if you see an \"Install missing platform(s) and sync project,\" click the link to do the installation.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>91</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>92</th><td class=\"r\"><ins>'''Step 5''': Follow the instructions on the page [http://developer.android.com/training/basics/firstapp/running-app.html running an app] to install an emulator.&nbsp; In particular, in the IDE, click \"Tools &gt; Android &gt; AVD Manager\", select a model (e.g., \"Nexus 5\"), then install the corresponding emulator.&nbsp; Again, this step could be slow depending on your network speed.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>93</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>94</th><td class=\"r\"><ins>'''Step 6''': Run the !FabflixMobile app on the installed emulator. Select the project folder, and click \"Run\" in the menu. Choose the previous installed emulator as the target platform. If you see \"Unsupported method: !AndroidProject.getPluginGeneration(), you can check [http://stackoverflow.com/questions/39591531/unsupported-method-androidproject-getplugingeneration-while-running-project Unsupported method: AndroidProject.getPluginGeneration() while running project]\". The app has three activities called Red, Blue, and Green, as well as buttons for navigating between the activities, and text boxes for sending messages to other pages. The red page contains a button that sends an HTTP request, receives the response, and shows the response on the screen.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>95</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>96</th><td class=\"r\"><ins>[[Image(wiki:cs122b-2017-winter-project4:fablixmobile.jpeg)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>97</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>98</th><td class=\"r\"><ins>'''Step 7 (optional)''': If you have an Android phone, you can run the app directly on your phone, which is faster. You can check [http://developer.android.com/training/basics/firstapp/running-app.html running an app] on how to run applications on real phones.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>99</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>100</th><td class=\"r\"><ins>'''Step 8''': To make yourself more familiar with Android development, you can check the following tutorials.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>101</th><td class=\"r\"><ins>&nbsp;* [http://developer.android.com/training/basics/firstapp/building-ui.html Android UI]: the basics of building a user interface.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>102</th><td class=\"r\"><ins>&nbsp;* [http://developer.android.com/training/basics/firstapp/starting-activity.html activities]: how to navigate between two pages (i.e., activities).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>103</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>104</th><td class=\"r\"><ins>'''Step 9 (main task)''': Develop a Fabflix Android app, which supports a subset of the features of the main Fabflix website. You are not allowed to use the Android !WebView. The following capabilities are required:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>105</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>106</th><td class=\"r\"><ins>&nbsp;* Login page, which should behave like the website login page. (without `reCAPTCHA`).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>107</th><td class=\"r\"><ins>&nbsp;* Use HTTPS Connections to communicate with backend server</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>108</th><td class=\"r\"><ins>&nbsp; &nbsp;* Self signed HTTPS certificates check is disabled by the `NukeSSLCerts` class, which is invoked inside `NetworkManager`.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>109</th><td class=\"r\"><ins>&nbsp;* Maintain session with backend server</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>110</th><td class=\"r\"><ins>&nbsp; &nbsp;* Sessions are maintained by the `CookieHandler` and `CookieManager` set in the `NetworkManager` class.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>111</th><td class=\"r\"><ins>&nbsp;* Single movie page</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>112</th><td class=\"r\"><ins>&nbsp; &nbsp;* Contains the movie title, year, director, list of genres (hyperlink is optional), list of stars (hyperlink is optional).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>113</th><td class=\"r\"><ins>&nbsp;* A search box that has the same behavior as the the full text search requirement in task 1 (searching in movie title).&nbsp; Autocomplete is not required.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>114</th><td class=\"r\"><ins>&nbsp;* Search result list</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>115</th><td class=\"r\"><ins>&nbsp; &nbsp;* Displays a `ListView` of the movies searched. When a user clicks on an item, it should show the corresponding single movie page in a new activity.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>116</th><td class=\"r\"><ins>&nbsp; &nbsp;* Each item on the result list should contain the information of a movie (title, year, director, list of genres (hyperlink is optional), list of stars (hyperlink is optional)).</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>117</th><td class=\"r\"><ins>&nbsp;* Pagination on the search result list. `Previous` and `Next` buttons are required, and the page size can be constant.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>118</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>119</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>120</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>121</th><td class=\"r\"><ins>'''Other Resources:'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>122</th><td class=\"r\"><ins>This is a good note about how different events trigger specific Android lifecycle callback functions:&nbsp; https://gist.github.com/grantland/1096474/65d8dd9dd774463c2afc14764242c220fe92e051</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>123</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>124</th><td class=\"r\"><ins>'''Example project on using `ListView` on Android'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>125</th><td class=\"r\"><ins>http://github.com/UCI-Chenli-teaching/project4-android-listview-example</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>126</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>127</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>128</th><td class=\"r\"><ins>[[Span(id=UDF)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>129</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>130</th><td class=\"r\"><ins>== Task 3 (Optional Extra Credit): Fuzzy Searching Using User Defined Functions ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>131</th><td class=\"r\"><ins>Currently, when a !FabFlix customer does a search, the user must spell keywords correctly; otherwise, the desired movie will not be retrieved. For example, some star names, such as \"Schwarzenegger,\" are&nbsp; sufficiently difficult to spell that customers are likely to spell them&nbsp; incorrectly--and so perhaps believe we do not stock the Terminator&nbsp; movies when, in fact, we do!</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>132</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>133</th><td class=\"r\"><ins>To make it more likely that customers&nbsp; find the movies they desire--and thus increase our likelihood of making&nbsp; sales--the exact string matching in !FabFlix for key searches is to be replaced with a fuzzy matching, one that returns a movie whose value is close to the key's value.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>134</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>135</th><td class=\"r\"><ins>The designers have decided that using the SQL LIKE command combined with an&nbsp; Levenshtein (Edit Distance) Algorithm (LEDA) is the approach to take.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>136</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>137</th><td class=\"r\"><ins>The LEDA algorithm, to be implemented as a dynamic function in C or C++, is&nbsp; to be accessed using the interface SIMILARTO. SIMILARTO takes three&nbsp; parameters: the first is the key as a string, the second the string&nbsp; against which the key is being compared, the third the maximum distance&nbsp; he two strings can differ and still be considered similar to each other.&nbsp; Take the union of the results from LIKE and SIMILARTO.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>138</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>139</th><td class=\"r\"><ins>name LIKE '%Schwarseneger%' OR SIMILARTO(name, 'Arnold Schwrzneggar', 2)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>140</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>141</th><td class=\"r\"><ins>We will give 5 point extra credits if: </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>142</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>143</th><td class=\"r\"><ins>You successfully implement this feature on your AWS instance AND integrate fuzzy search into the searching functionality in task 1 (web normal search and autocomplete) and 2 (Android search). </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>144</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>145</th><td class=\"r\"><ins>Your search results should combine the full text search and fuzzy search. Feel free to use the User Defined Functions (described above) from this [http://flamingo.ics.uci.edu/toolkit/ example].</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>146</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>147</th><td class=\"r\"><ins>You should carefully tune fuzzy search edit distance threshold to make the fuzzy search result meaningful. Setting the edit distance too high might give you results irrelevant to your search query. For example, you could normalize the threshold based on the length of query.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>148</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>149</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>150</th><td class=\"r\"><ins>[[Span(id=DeploymentOnAWS)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>151</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>152</th><td class=\"r\"><ins>== Deployment On AWS and Submissions ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>153</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>154</th><td class=\"r\"><ins>The same as before, use Github for your project 4 code (both web and Android app code) and deploy (web code) on AWS.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>155</th><td class=\"r\"><ins>&nbsp;* For Android part, you also need to submit the `APK` package to the Github as well as the source code .</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>156</th><td class=\"r\"><ins>&nbsp; &nbsp;* Use Android Studio to build an `APK` package, named `\"fabflix.apk\"`,&nbsp; of your Fabflix Android app.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>157</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>158</th><td class=\"r\"><ins>----</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>159</th><td class=\"r\"><ins>[[Span(id=Grading)]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>160</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>161</th><td class=\"r\"><ins>== Demonstration and Grading Criteria ==</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>162</th><td class=\"r\"><ins>The same as before, '''You are required to demonstrate&nbsp; this project''', and time is '''20 minutes''' per team. Please refer to this [https://docs.google.com/spreadsheets/d/1e3sr9DYy3OXAxaD5s0dYzAJ1HbjuuR7aJvyP2JT3Ix4/#gid=1924075524 \"Grading Rubric\"] for detailed criteria.</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n      </div>\n  </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>\n", "encoding": "utf-8"}