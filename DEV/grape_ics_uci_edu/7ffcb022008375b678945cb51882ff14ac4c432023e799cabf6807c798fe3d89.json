{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project2?format=txt", "content": "= Project 2: Starting Fabflix Business =\r\n'''Due: Week 5 Monday, Feb. 4 11:45 pm. Submit project on Github.'''\r\n\r\n'''Project Description'''\r\n\r\n * [#Overview Project 2 Overview]\r\n * [#Example Example]\r\n * [#StepByStep Step by Step]\r\n * [#Deployment&Submission Deployment on AWS & Submission]\r\n * [#Demo&Grading Demonstration & Grading Criteria]\r\n\r\n----\r\n[[Span(id=Overview)]]\r\n\r\n== Project 2 Overview ==\r\nIn this project, you will build functionalities such as browsing movies by category, searching movies by condition, adding movies to the shopping cart, etc. The image below shows the workflow you should follow to create your website.\r\n\r\n[[Image(wiki:cs122b-2019-winter-project2:design-diagram.jpg)]]\r\n\r\nBasic project requirements:\r\n\r\n * Login: To log into the system, customers need to enter correct email and password. You are required to use '''HTTP POST''' instead of HTTP GET so that the username and password will not be displayed on the address bar. When authenticating user input information, columns: {{{email}}} and {{{password}}} in {{{customers}}} table can be used for reference.\r\n\r\n * Main page: Customers can browse and search movies on the main page.\r\n\r\n * Searching: Customers can search for movies by single or multiple conditions:\r\n   * title\r\n   * year\r\n   * director\r\n   * star's name\r\n\r\n   When customers search for movies by multiple conditions, you should use '''AND''' logic to combine conditions. \r\n\r\n * Movie list page: Customers can find search results on this page. Search results should be formatted as a table with at least the following columns:\r\n   * id\r\n   * title (hyperlinked to the corresponding single movie page implemented in [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#Tasks67:ImplementSingleMovieandSingleStarpages Project 1])\r\n   * year\r\n   * director\r\n   * list of genres (each hyperlinked to a page that shows all the movies of this genre) \r\n   * list of stars (each hyperlinked to the corresponding single star page implemented in [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#Tasks67:ImplementSingleMovieandSingleStarpages Project 1])\r\n   * rating\r\n\r\nThe following details of functionalities should also be met.\r\n\r\n * ''Substring matching'': The search functionality of the website should support \"substring matching\" so that customers do not have to provide an exact value for an attribute. For example, when customers search for movies by title keyword: \"term\", the website should return movies such as \"Terminal\" and \"Terminator.\" You can use the \"LIKE\" and \"ILIKE\" SQL operators for pattern matching in any way you wish.  For example:\r\n\r\n  '''                     SELECT \"column_name\"'''                     [[BR]]                     '''                     FROM \"table_name\"'''                     [[BR]]                     '''                     WHERE \"column_name\" LIKE pattern'''                     [[BR]]\r\n\r\n  '''                    pattern'''                     often consists of wildcards.[[BR]]               '''               Note: '''               Your Github repository should include a text file that explains how and where you use the LIKE predicate in your codebase. The file name can be \"like-predicate.txt\" or \"like-predicate.md\".\r\n\r\n * Here are some examples:\r\n   * 'A_Z':  All strings that start with 'A', then follow by a single character, and end with 'Z'.  E.g. 'ABZ' and 'A2Z'. However, 'AKKZ' does not satisfy the condition.\r\n   * 'ABC%': All strings that start with 'ABC'. E.g. 'ABCD' and 'ABCABC'.\r\n   * '%XYZ': All strings that end with 'XYZ'. E.g. 'WXYZ'  and 'ZZXYZ'.\r\n   * '%AN%':  All strings that contain the pattern 'AN' anywhere. E.g. 'LOS ANGELES' and 'SAN FRANCISCO'.\r\n\r\n * ''Sorting'': Customers can sort search results by either \"title\" or \"rating\" in either ascending or descending order.\r\n\r\n * ''!Previous/Next'': As there could be many movies that need to be shown on the movie page, each page should only display a certain number (''N'') of movies. And the page should have \"Prev\"/\"Next\" buttons which allow customers to view all the movies. Your website should allow customers to change the number of movies (\"N\") shown per page. Customers can click on a drop-down menu to choose \"N\" from a list of predefined values such as 10, 25, 50, 100, etc.\r\n\r\n * Jump Functionality: Customers can jump among movie list page, single movie page, and single star page using buttons or links instead of browser history. In specific, movie list <-> single movie, movie list <-> single star, and single movie <-> single star.\r\n\r\n * Using the \"Browsing\" page, customers can browse movies by either genres or titles. The \"Browsing by movie genre\" page should include all the (hyperlinked) genres. Customers can click on a genre link to see all the movies of this genre. The \"Browsing by movie title\" page categorizes movies based on the first character in movie title in alphabetical order.  (Note that the first character could be a digit such as '2\" in the movie: \"2012\".)  When customers click on a character link, the website should show all the movies each with the title starting with that character.\r\n\r\n * ''Shopping Cart'': For all pages that display movie information, each movie should have an \"Add to Shopping Cart\" button. The shopping cart page should show the quantity of each movie in the cart (within the current login session) and allow customers to modify the quantity of each movie. A movie should be removed from the shopping cart when its quantity is set to 0.\r\n\r\n  All pages except the login page should have a \"Checkout\" button. When customers click the button, the website should direct them to the shopping cart page. In the shopping cart page, if customers proceed to check out, the next page (payment) should ask customers to provide payment information including first name and last name of cardholder, card number, and expiration date.\r\n\r\n * ''Checkout'':  The transaction succeeds only if customers can provide correct payment information which matches a record '''in the credit cards table (not those in the customers table)'''. If the transaction succeeds, it should be recorded in the system (in the \"sales\" table) and a confirmation page should be displayed.   [[BR]]\r\n\r\n * Performance requirement: You can decide whether you want to do caching on the Web server for earlier query results.\r\n\r\n'''You must NOT:'''\r\n * '''Use JSP to generate HTML pages in Project 2. We only allow the architecture in which Java Servlet generates everything and the micro-services architecture (\"backend-frontend separation\").'''\r\n\r\n * Implement any functionality (sorting, pagination, etc.) by using framework or scaffolding tools like !DataTables.\r\n\r\n * Implement any functionality in the web app by hard coding. e.g. Hard code all genres names in HTML instead of retrieving from databases\r\n\r\n * Store data directly in the frontend instead of the database.\r\n\r\nWe are not specifying all the details of the interfaces. You are encouraged to use your imagination to enhance the functionalities. You can use any appropriate client-side technologies to enhance the user interface and the user experience of your website (e.g., Javascript, CSS, HTML, etc.).\r\n\r\n----\r\n[[Span(id=Example)]]\r\n\r\n== Example ==\r\n\r\n[https://github.com/UCI-Chenli-teaching/2019w-project2-login-cart-example project2-login-cart-example] This example shows how to implement a login form and use a session to implement a simple shopping cart.  \r\n\r\n----\r\n[[Span(id=StepByStep)]]\r\n\r\n== Step by Step ==\r\nHere are the recommended steps you can follow to accomplish for this project:\r\n\r\n 1. Go through the project2-login-cart-example provided above.\r\n 1. Implement the \"Login\" Page;\r\n 1. Implement the \"Search\" Page;\r\n 1. Implement the \"Movie list\" page, including the \"Sorting\" and \"!Prev/Next\" features;\r\n 1. Implement the \"Browsing by movie genre\" page;\r\n 1. Implement the \"Browsing by movie title\" page;\r\n 1. Add a \"Add to Shopping Cart\" button to each movie on all pages;\r\n 1. Add a \"Checkout\" button to all pages;\r\n 1. Implement the page to do checkout.[[BR]]\r\n\r\n----\r\n[[Span(id=Deployment&Submission)]]\r\n\r\n== Deployment On AWS & Submission ==\r\n\r\nUse Github to manage your project 2 code and deploy on AWS (similar to what you have done in project 1).\r\n\r\nCheck [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#ProjectSubmission Project1 Submission] before you submit Project 2 on Github.\r\n\r\n----\r\n[[Span(id=Demo&Grading)]]\r\n\r\n== Demonstration & Grading Criteria ==\r\n\r\nRefer to [https://docs.google.com/spreadsheets/d/1Nmx75Oh0yf8S4BbqQJsGPdWuIJCqAooMkh1YHc1qzpU/edit#gid=1455993853 Project2 Grading Rubric] for detailed grading criteria.\r\n\r\n----\r\n== If you chose a different domain ==\r\n\r\nYou may design your own workflow that is suitable for your application. However, your application must cover the functionalities mentioned above, including login, conditional searching, browsing, sorting, navigation between pages, and error handling. If your domain doesn't require a shopping cart and checkout, come up with two features that are comparable. You are required to draw your application's workflow (similar to the Fabflix diagram above) and present it during the demo. It is your responsibility to make sure that your design and implementation meet all the requirements. If you are not sure about it, make sure to post it on Piazza or go to office hours to discuss.", "encoding": "ascii"}