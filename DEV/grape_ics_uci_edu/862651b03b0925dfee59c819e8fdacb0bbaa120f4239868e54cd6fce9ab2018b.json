{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs222p-2018-fall-setup-gdb-on-macos?version=2&format=txt", "content": "{{{#!div style=\"background-color:#f2f3f4\"\r\n\r\n== Setup GDB on MacOS ==\r\nThis guide details the set up of the GDB debugger on MacOS High Sierra 10.13.6. It works as of Sep 26th, 2018. Please be alerted it is not straightforward to do this. If you spend too much time but still cannot make GDB work properly on your MacOS, an intermediate solution is to install a LinuxVM to do the development.\r\n\r\n1. Install homebrew (a package manager for mac). `/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\r\n2. Install GDB 8.0.1. Be alerted that the latest GDB version(8.11) cannot work properly with MacOS because of some bugs. Instead, we have to explicitly install an older version of GDB.\r\n    * `brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/9ec9fb27a33698fc7636afce5c1c16787e9ce3f3/Formula/gdb.rb`[[br]]\r\n    * `brew pin gdb`\r\n3. Type `gdb --version`, make sure you find the version is 8.0.1.\r\n4. Type `echo \"set startup-with-shell off\" >> ~/.gdbinit`\r\n5. Certify the installed gdb\r\n   * Open Keychain Access (an app under Utilities folder)\r\n   * In menu, open Keychain Access > Certificate Assistant > Create a certificate\r\n   * Give it a name (e.g. gdb-cert). Identity type: Self Signed Root. Certificate type: Code Signing. Check: let me override defaults.\r\n   * Continue until \"specify a location for...\"\r\n   * Set Keychain location to System\r\n   * Create certificate and close Certificate Assistant.\r\n   * Find certificate (e.g., gdb-cert) in System keychain.\r\n   * Double click the certificate\r\n   * Expand Trust, set Code signing to always trust\r\n   * Restart taskgated in terminal: killall taskgated\r\n   * Codesign gdb using your certificate: `codesign -fs gdb-cert /usr/local/bin/gdb`\r\n6. Now let's check whether GDB works. Open eclipse, right click your project `cs222`, and click Debug As -> Debug Configurations. Add your main program (one of the test cases), and configure the path of the GDB properly (typically its under /usr/local/bin/gdb, and command file is /Users/username/.gdbinit). Finally click Debug to see if works.\r\n[[Image(gdb.png, 800px)]]\r\n\r\n7. If you see your program stops at the first line of the main function, and you can use Step Into (F5), Step Over (F6) etc. properly, then your GDB is now working properly! Congratulations!\r\n8. Otherwise, let's try this step to disable the SIP (system integrity projection) of MacOS. Note: disabling SIP could result in security leaks of your system, and you should decide whether to continue based on your own risk!\r\n  * Shut down your mac and restart in recovery mode (hold down command+R until apple logo appears)\r\n  * Open terminal window\r\n  * Modify System Integrity Protection to allow debugging: `csrutil enable --without debug`\r\n  * Reboot your Mac\r\n9. Go back to step 6 to try again. It should work now, but it still doesn't work, you can checkout some other materials. [https://stackoverflow.com/questions/49001329/gdb-doesnt-work-on-macos-high-sierra-10-13-3/49104154#49104154 Stackoverflow] [https://gist.github.com/danisfermi/17d6c0078a2fd4c6ee818c954d2de13c Setup GDB on MacOS]. If it still doesn't work, maybe it's better to switch to a linux virtual machine.\r\n\r\n}}}", "encoding": "ascii"}