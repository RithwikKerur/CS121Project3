{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2018-winter-project5?version=8&format=txt", "content": "[[PageOutline]]\r\n\r\n= CS122B Project 5: Scaling Fabflix and Performance Tuning =\r\n'''Deadline: Sunday, 3/18/2018, 11:45pm. Due on Github '''[[BR]]\r\n\r\n  This project has the following tasks:\r\n\r\n 1. JDBC connection pooling and Prepared statements\r\n 1. Scaling Fabflix with a cluster of MySQL/Tomcat and a frontend load balancer;\r\n 1. Measuring the performance of Fabflix search feature\r\n\r\n----\r\n[[Span(id=Pooling)]]\r\n\r\n== Task 1: Connection Pooling and Prepared Statements ==\r\nIn this task, we will enable Fabflix with Connection Pooling and Prepared Statements.\r\n\r\n''''Step 1:''' Enable JDBC connection pooling for Fabflix. We will use our running application of \"!TomcatTest\" to show how to change it to use connection pooling.\r\n\r\n 1. '''Copy the JDBC Driver's jar into $CATALINA_HOME/lib''' (the lib folder just inside tomcat directory. If the lib folder is not there, create it). Download and deploy the following [attachment:wiki:cs122b-2018-winter-project5:TomcatPooling.war TomcatPooling.war] file. The file '''!TomcatPooling\\META-INF\\context.xml''' includes important information about the database, user name, password, and pooling configuration. If you want to change this file, you need to undeploy the war file, make those changes, make a new war file, and deploy the new war file. Otherwise, the Tomcat server may still use the previous context.xml. Check [http://tomcat.apache.org/tomcat-8.5-doc/jndi-datasource-examples-howto.html] for more information about how to configure connection pooling.\r\n 1. Go to the link http://localhost:8080/TomcatPooling/servlet/TomcatTest to test your application.  You must see a list of rows displayed on the webpage.\r\n 1. Look into the following files for the main changes in this war file   compared to the previous war file without connection pooling:\r\n   * '''\\META-INF\\context.xml'''.\r\n   * '''\\WEB-INF\\sources\\!TomcatTest.java'''\r\n   * '''\\WEB-INF\\web.xml''' (see the '''resource-ref''' tag).\r\n\r\nYou may also find some useful links for connection pooling from [http://archive.oreilly.com/pub/a/onjava/2006/04/19/database-connection-pooling-with-tomcat.html?page=1 this tutorial].\r\n\r\n'''Step 2:''' Make sure to use Prepared Statements in all JDBC statements involved in search. You can use this [http://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html tutorial] on prepared statements.\r\n\r\n * Prepared statements are usually associated with one connection, which becomes tricky if you are using a connection pool. There is a setting 'cachePrepStmts' which can be set to true to cache the prepared statements.\r\n * You can make this setting true by adding the flag to the jdbc connection URL in the \\META-INF\\context.xml like this  -\r\n{{{\r\nurl=\"jdbc:mysql://<IP>:<PORT>/moviedb?autoReconnect=true&amp;useSSL=false&amp;cachePrepStmts=true\r\n}}}\r\n\r\n__'''When you are done,'''__ write a brief explanation of how/where (file path and line numbers as seen on Github) you use the JDBC connection pooling in your code. You should submit this report to Github.\r\n\r\n----\r\n== Task 2: Scaling Fabflix ==\r\n[[Span(id=Replication)]]\r\n\r\n'''Step 1''': Setup two AWS instances as two backend servers by following this  [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2018-winter-project5-mysql-master-slave MySQL replication tutorial]. We call them the \"master instance\" and the \"slave instance\" (in the context of MySQL replication).\r\n\r\n'''Step 2 (master/slave)''': Create a dummy user for two example Tomcat applications:\r\n\r\n{{{\r\nshell> mysql -u root -p\r\nmysql> CREATE USER 'mytestuser'@'localhost' IDENTIFIED BY 'mypassword';\r\nmysql> GRANT ALL ON *.* TO 'mytestuser'@'localhost';\r\n}}}\r\n'''Step 3 (master/slave)''': Setup Tomcat on each master/slave instance. (You should have done it many times.)\r\n\r\n'''Step 4 (master/slave)''': On each master/slave instance, deploy [https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-2018-winter-project5/TomcatTest.war TomcatTest.war]. Make the URL http://PUBLIC_IP:8080/TomcatTest/servlet/TomcatTest work. You may need to modify the username/password and IP address (use the internal AWS instance address). Also make sure to modify the AWS security group setting for these two instances to allow remote access to their 8080 port.\r\n\r\n'''Step 5 (master/slave)''': On each master/slave instance, deploy [https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-2018-winter-project5/Session.war Session.war]. Make the URL http://PUBLIC_IP:8080/Session/servlet/ShowSession?myname=Michael work.\r\n\r\n'''Step 6 (instance 1)''': On the instance that runs the original Fablix instance (called \"instance 1\"), setup Apache and its proxy by doing the following:\r\n\r\n 1. Install Apache2 and related modules:\r\n{{{\r\ninstance1-shell> sudo apt-get install apache2\r\ninstance1-shell> sudo a2enmod proxy proxy_balancer proxy_http rewrite headers lbmethod_byrequests\r\ninstance1-shell> sudo service apache2 restart\r\n}}}\r\n 1. Configure the Apache2 web server to use its `proxy_balancer` module for sharing (i.e., redirecting) requests to the backend instances. To do it, edit the following configuration file:\r\n{{{\r\ninstance1-shell> sudo vim /etc/apache2/sites-enabled/000-default.conf\r\n}}}\r\n\r\nCreate a load balancer proxy, whose members are the backend instances.  In particular, define a proxy on top of the file, before the `<VirtualHost *:80>` tag.[[BR]]\r\n\r\n{{{\r\n<Proxy \"balancer://TomcatTest_balancer\">\r\n    BalancerMember \"http://172.2.2.2:8080/TomcatTest/\"\r\n    BalancerMember \"http://172.3.3.3:8080/TomcatTest/\"\r\n</Proxy>\r\n}}}\r\nHere we assume '172.2.2.2' and '172.3.3.3' are the private IP address of the master and slave instances, respectively.\r\n\r\n 1. Add two new rules in the body of the !VirtualHost tag.[[BR]]\r\n{{{\r\nProxyPass /TomcatTest balancer://TomcatTest_balancer\r\nProxyPassReverse /TomcatTest balancer://TomcatTest_balancer\r\n}}}\r\n 1. Restart Apache:\r\n{{{\r\ninstance1-shell> sudo service apache2 restart\r\n}}}\r\n 1. Modify the security group of the two backend instances to allow instance 1 to access their 8080 port.\r\n\r\nThese settings will redirect HTTP requests to \"instance1_IP/TomcatTest\" to one of the two backend instances. To test it, use a browser to point to http://instance1_IP/TomcatTest/servlet/TomcatTest. Be sure to open port 80 of instance 1 to your IP address. Check the Tomcat log of the two backend instances.\r\n\r\n{{{\r\ninstance2-shell> tail -f /var/log/tomcat8/*.log /var/log/tomcat8/*.txt /var/log/tomcat8/*.out\r\n}}}\r\nOne of them should receive that request.  Keep refreshing the page to send multiple requests, and check if the two backends are receiving the requests evenly.\r\n\r\n'''Step 7 (instance 1)''': Configure the proxy on instance 1 to handle sessions properly. Since the current setting will send requests randomly to the backend, it will not pass cookies properly, causing sessions to fail.  We want to make the session persist over several requests of the same client, i.e., to have a  ''sticky session.'' To do it, read the [http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html instructions], especially those under \"Examples of a balancer configuration.\" Here's a sample setting for the ` /etc/apache2/sites-enabled/000-default.conf` file for the \"Session.war\" application:\r\n\r\n{{{\r\nHeader add Set-Cookie \"ROUTEID=.%{BALANCER_WORKER_ROUTE}e; path=/\" env=BALANCER_ROUTE_CHANGED\r\n\r\n<Proxy \"balancer://Session_balancer\">\r\n    BalancerMember \"http://172.2.2.2:8080/Session\" route=1\r\n    BalancerMember \"http://172.3.3.3:8080/Session\" route=2\r\nProxySet stickysession=ROUTEID\r\n</Proxy> \r\n}}}\r\nAlso do the following:\r\n\r\n 1. Add two new rules in the body of the !VirtualHost tag.[[BR]]\r\n{{{\r\nProxyPass /Session balancer://Session_balancer\r\nProxyPassReverse /Session balancer://Session_balancer\r\n}}}\r\n 1. Restart Apache:\r\n{{{\r\ninstance1-shell> sudo service apache2 restart\r\n}}}\r\n\r\nTest if it works by pointing to the URL http://instance1_IP/Session/servlet/ShowSession?myname=Michael of instance 1. It should access one of the backend instances only.\r\n\r\nHere's a sample Apache configuration file [attachment:000-default.conf].\r\n\r\n'''Step 8 (main task)''': Deploy your Fabflix system to the two backend instances. Do MySQL master/slave replication. Configure the original instance properly to enable load balancing, connection pooling, sticky sessions. Also make sure the write request must be sent to the master mysql instance, while read request should be sent to either master or slave mysql instance. Enabling the scaled version with HTTPS is '''optional'''. '''Note that you are required to add a section to the connection pooling report and explain how to use connection pooling in the case of having two backend servers.'''\r\n\r\nThe following is the architecture diagram:\r\n\r\n  [[Image(wiki:cs122b-2018-winter-project5:CS122B-Project5-Cluster-Architecture.png, 500px)]]\r\n\r\nNotice that in this architecture, each Tomcat can talk to both mysql instances. Sometimes we may want to setup a cluster of MySQL, and let each Tomcat talk to the cluster through another load balancer.  If interested, you can read this [http://mysqlhighavailability.com/setting-up-mysql-router/ page] on how to set it up.\r\n\r\n'''Step 9 (Google Cloud):''' After finishing the main task, you then need to install and configure the load balancer on one Google Cloud instance. As before, this load balancer needs to redirect requests to one of the Tomcat servers. However, the load balancer needs to use the public IPs of the AWS instances, and make sure you have port 8080 open to the Google Cloud instance.\r\n\r\nYou can get $300 free credits for Google Cloud from [https://cloud.google.com/free/ free-trial]. After that, start a computing engine (using Ubuntu 16.04) by following this [https://console.cloud.google.com/getting-started?project=applied-plexus-163600 tutorial], and repeat the exact same steps as you did for installing the load balancer on AWS.\r\n\r\n----\r\n== Task 3: Measuring the performance of Fabflix search feature ==\r\nIn this part, we will measure the performance of the keyword search feature that you have implemented in the past projects. The measurement results described in subtasks 3.1 and 3.2 must be reported for both the single-instance (i.e., the instance that you prepared in earlier projects and Task1) and the scaled version of Fabflix.''' Note: '''The URL to the single-instance version should be http:///INSTANCE1_PUBLIC_IP:8080/fabflix, while it should be http://INSTANCE1_PUBLIC_IP:80/fabflix for the scaled version that you prepared in Task 2.\r\n\r\n=== Task 3.1: Preparing the codebase for time measurement ===\r\nHere, we are going to prepare for measuring the following two statistical variables: (1) the average time it takes for the __search servlet__ to run completely for a query (called TS), and (2) the average time spent on the parts that use JDBC, per query (called TJ).\r\n\r\nStep 1. Use the following sample to insert the necessary time statements for measuring TS and TJ. You are required to measure and __log__ the value of \"search servlet total execution time\" and \"JDBC execution time\" for every request served by the server (i.e., assuming these values are printed in one line per query, if a query workload of 1000 queries is fired to the system, we must have 1000 lines in the log file, each line containing one sample value for calculating TS and TJ).\r\n\r\nParticularly for TS samples, it is highly recommended to place these log statements in a filter that wraps the search servlet.\r\n\r\n{{{\r\n// Time an event in a program to nanosecond precision\r\nlong startTime = System.nanoTime();\r\n/////////////////////////////////\r\n/// ** part to be measured ** ///\r\n/////////////////////////////////\r\nlong endTime = System.nanoTime();\r\nlong elapsedTime = endTime - startTime; // elapsed time in nano seconds. Note: print the values in nano seconds \r\n}}}\r\nStep 2. Write a script (in any language that you prefer) to process the resulting log file of a query workload and calculate TS and TJ (i.e., by parsing the log statements and taking the average of all the samples).\r\n\r\n'''Submission-related note:''' The usage of this script, which is expected to be found at the root of your .war file, must be explained in your README file.\r\n\r\n[[Span(id=Jmeter)]]\r\n\r\n=== Task 3.2: Preparing the test plan in Apache JMeter ===\r\nIn this part, you will use [http://jmeter.apache.org/ Apache JMeter] to measure the performance of the search feature of the Fabflix website. In particular, you must measure the '''average query time''' of the search feature using a set of queries based on the movie tiles in this [attachment:wiki:cs122b-2018-winter-project5:query_load.txt file]. Assume the page size is 50, and we only want the first page of results.\r\n\r\nThe following figure illustrates the round-trip time of a query from a client to the server then back to client. The ''query time''  of a query (i.e., \"Tq\") is  the total time starting from when the search request is sent from the client (Ts) until the time when the response has completely received by the client (Te). It includes two major parts: (1) ''response time'' (Tr) is the time it takes until the client hears the first bit of the response, and (2) \"payload time\" (Tp) is the time it takes for the response data to be downloaded by the client completely.\r\n\r\n[[Image(wiki:cs122b-2018-winter-project5:query_time.png)]]\r\n\r\nStep 1: Read this [http://jmeter.apache.org/usermanual/get-started.html reference] to get an overview of Jmeter. Read this [http://jmeter.apache.org/usermanual/build-test-plan.html page] to get familiar with JMeter basics.\r\n\r\nStep 2: Download and install JMeter from this [http://jmeter.apache.org/download_jmeter.cgi link].\r\n\r\nStep 3: Use [http://jmeter.apache.org/usermanual/build-web-test-plan.html this link] to make a test plan for the search feature of your website. You will run the Jmeter test from your local development against the remote AWS instance.  The plan must iteratively generate a proper HTTP or HTTPS search request for every movie title in the provided [attachment:wiki:cs122b-2018-winter-project5:query_load.txt query file]. Here is a useful [http://ivetetecedor.com/how-to-use-a-csv-file-with-jmeter/ page] about how to use a CSV file for Jmeter.\r\n\r\n=== Task 3.3: Collecting the performance results ===\r\nRun the tests for all the following settings to collect performance results. For each case, remember to make the necessary changes to the JMeter test plan and/or the codebase.  Use the results to fill out this [attachment:wiki:cs122b-2018-winter-project5:jmeter_report.html HTML file] as your measurement report. For each case, report the requested values in the corresponding columns, and write a short analysis for that case in the last column. This [attachment:wiki:cs122b-2018-winter-project5:graph_results_case1.png image] is an example of what you should report in the second column called \"Graph Results Screenshot\".\r\n\r\n'''Notes''':\r\n\r\n 1. In all cases, if not mentioned otherwise, your Fabflix codebase is assumed to use both the Prepared Statements and Connection Pooling optimization techniques.\r\n 1. If more than one JMeter thread is to be used, each thread should start a new session in Tomcat (i.e., threads should not share a session-id).\r\n\r\nSingle-instance cases (i.e., that is accessible via [http://YOUR_PUBLIC_IP:8080/project4 http://INSTANCE1_PUBLIC_IP:8080/fabflix]):\r\n\r\n 1. Use HTTP, without using prepared statements, 10 threads in JMeter.\r\n 1. Use HTTP, without using connection pooling, 10 threads in JMeter.\r\n 1. Use HTTP, 1 thread in JMeter.\r\n 1. Use HTTP, 10 threads in JMeter.\r\n 1. Use HTTPS, 10 threads in JMeter.\r\n\r\nScaled-version cases (i.e., that is accessible via [http://YOUR_PUBLIC_IP:8080/project4 http://INSTANCE1_PUBLIC_IP:80/fabflix]):\r\n\r\n 1. Use HTTP, without using prepared statements, 10 threads in JMeter.\r\n 1. Use HTTP, without using connection pooling, 10 threads in JMeter.\r\n 1. Use HTTP, 1 thread in JMeter.\r\n 1. Use HTTP, 10 threads in JMeter.\r\n\r\n----\r\n[[Span(id=DeploymentOnAWS)]]\r\n\r\n== Deployment On AWS ==\r\nUse Github for your project 5 code and reports and deploy (web code) on AWS.\r\n\r\n----\r\n[[Span(id=Grading)]]\r\n\r\n== Submissions, Demonstration and Grading Criteria ==\r\n(To be finalized)", "encoding": "ascii"}