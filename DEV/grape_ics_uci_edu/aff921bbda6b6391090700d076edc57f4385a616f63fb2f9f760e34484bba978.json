{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2018-winter-project4?version=7&format=txt", "content": "\r\n[[PageOutline]]\r\n\r\n= CS122B Project 4 =\r\n'''Due: May 29th, 2017, Monday, 11:45 pm Submit on EEE.'''[[BR]] Notice that we use 1 day after the official deadline as the submission cut-off time on EEE to allow you to use the 24-hour grace period if you chose so. After that, EEE will no longer accept submissions.\r\n\r\n= Tasks =\r\n\r\n 1. [#AJAX Improving the GUI by using AJAX]\r\n 2. [#Android  Developing an Android Application for Fabflix]\r\n 3. [#UDF Fuzzy Searching Using User Defined Functions]\r\n\r\n----\r\n[[Span(id=AJAX)]]\r\n\r\n== Task 1: Improving the GUI by using AJAX ==\r\n\r\nThe \"Advanced Search\" feature you implemented on project 2, although provides precise search capabilities, is not very user friendly. Most search interfaces in real world websites simply have one input box and can perform search intelligently. Autocomplete feature on the search bar ( auto-suggest, search-as-you-type) is now considered a must-have functionality. A good autocomplete search interface can dramatically improve user experience. In this task, you need to implement a search input box that can search on more things and have the autocomplete feature.\r\n\r\n\r\n'''Search features'''\r\n\r\n* Have a search input box into the main page of the website (the page you show to the user after logging in).\r\n\r\n* This search box should search for more than the title field. You should compare the user's query against title, director, and star. \r\n\r\n* You need to do full text prefix search. For example, the query \"good u\" is first tokenized into two words: \"good\" and \"u\". The search results will be all the movie titles that contains the word that starts with \"good\" and starts with \"u\". For example, \"The Good, The Bad and The Ugly\", and \"Goodbye Uncle Tom\".  Check the Netflix screenshot as an example of full text search.\r\n\r\n* You should jump to the movie list page to display the search results.\r\n\r\n* For example, the query \"logan\" should return a list of movies that where either: 1) title contains \"logan\" or 2) the director is \"logan\" or 3) one of the actors is called \"logan\".\r\n\r\n[[Image(https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-2018-winter-project4/netflix.png)]]\r\n\r\n\r\n'''Autocomplete suggestion:'''\r\n\r\nAs the user types in the query in the search box, your Javascript code should send the query to the backend server to get a list of suggested results, and then display the suggestions in the dropdown list. Check the IMDB and Rotten Tomatoes search interface for examples.\r\n\r\n[[Image(https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-2018-winter-project4/imdb.png)]]\r\n\r\n[[Image(https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-2018-winter-project4/rotten-tomatoes.png)]]\r\n\r\nWe recommend you to use a Javascript autocomplete library instead of implementing the autocomplete on your own. We provide a sample autocomplete code using a library (TODO: write sample code). \r\n\r\nThe autocomplete libraries can just satisfy the requirements or provide you a very easy way to meet the requirements:\r\n\r\n\r\n* The user should be able to navigate the suggestions in dropdown list using up and down arrow keys on the keyboard. During this process, when a suggested item is selected, the item should be highlighted, the text in the input box should be changed to the item's name.\r\n\r\n* Your autocomplete suggestion list need to be grouped in to 3 categories: movies, stars, and directors. See how Rotten Tomatoes search divided the suggestions into different groups (movies, celebrities, etc..): https://www.rottentomatoes.com/. You can also not group them explicitly, but indicate clearly on each item instead. See how IMDB search suggestion list shows each item as a movie or as an actor. http://www.imdb.com/\r\n\r\n* The autocomplete suggestion list should not have more than 10 items (the total number of items from all 3 categories). \r\n\r\n* Clicking on any of the suggestion items, or pressing \"Enter\" when a item is selected during keyboard navigation, should jump to:\r\n  * if the item is a movie: single movie page\r\n  * if the item is a star: single star page\r\n  * if the item is a director: movie list page containing all the movies of this director\r\n\r\n* If the user doesn't choose any of the suggestions using keyboard, and just hits \"Enter\" on keyboard or clicks the search button, you should do the search normally as stated above and go to the movie list page.\r\n\r\n* When the user types only one or two characters, you should not do any search because the results may not be helpful. You should only perform the autocomplete search when the user types in >= 3 characters.\r\n\r\n* When the user types in the query, you should not do the autocomplete search on every keystroke because the user is still typing. Moreover you don't want to send too many requests to the backend. You should set a small delay time that only perform the autocomplete search after the user stops typing for a short period of time (for example, 300 ms).\r\n\r\n* If the autocomplete query has been issued before, you don't want to send the request to the server again. (for example, when the user deletes some of the characters). Store the suggestion list of each query in Javascript. Everytime before your code need to do autocomplete search, first check if you can the stored suggestions, if not, then send the query to the server.\r\n\r\n* Your autocomplete search needs to be fast. The time that user sees your autocomplete result is the delay time + the query time. Some points will be deducted if your autocomplete search takes too long.\r\n\r\n\r\n* '''Print to the Javascript console:'''\r\n  * In order to verify that your code satisfies the constraints, you need to print messages to the Javascript console. In Javascript, \"console.log()\" is equivalent to \"System.out.println()\". To see the printed messages, in Chrome, open your webpage -> right click \"Inspect\", then choose \"Console\" tab. All popular browsers have something similar, look for \"Developer Tools\".\r\n\r\n  * We need to see the printed message when:\r\n    * the autocomplete search is initiated (after the delay)\r\n    * whether the search is using cached results or sending an ajax request to the server\r\n    * the suggested list (either from cache or server response)\r\n\r\n\r\n\r\n\r\n[[Span(id=AjaxExample)]]\r\n\r\nAs a simple Ajax example, we have provided a Java-Servlet-based server program in this [attachment:AjaxTest.war  Ajax Example]. Deploy the war file to your Tomcat server. Point your browser to the link http://localhost:8080/AjaxTest/order.html. The example uses the \"onChange\" javascript event to trigger an Ajax communication. Type in anything in the \"Item Name\" input box, and move the cursor to \"Time\" input box, which should show the current time. Here is a [http://www.w3schools.com/TAGS/ref_eventattributes.asp complete list of Javascript events] supported by most browsers. Take a look at [http://www.w3schools.com/js/js_htmldom_events.asp this page] to learn more about how to use such events. (This example is based on the following [http://www.tizag.com/ajaxTutorial/index.php link].)\r\n\r\n----\r\n[[Span(id=Android)]]\r\n\r\n\r\n== Task 2:  Developing an Android App for Fabflix Using Android Studio IDE ==\r\nIn this task you will implement an Android app as a new frontend for Fabflix.\r\n\r\n'''Steps:'''\r\n\r\nThe following guidelines are based on this [http://developer.android.com/training/basics/firstapp/index.html Android programming tutorial].\r\n\r\n'''Step 1''': [http://developer.android.com/sdk/index.html Download] Android Studio IDE.  Depending on the network speed, this step may take a while (e.g., 10-20 minutes).\r\n\r\n'''Step 2''': Download the provided [attachment:wiki:cs122b-2017-winter-project4:FabflixMobile.zip sample Android app] and unzip it to get the folder of \"!FabflixMobile\".\r\n\r\n'''Step 3''': Install the downloaded Android Studio IDE.  Once you see a page of \"Welcome to Android Studio,\" use the option \"Open an existing Android Studio project\" and specify the unzipped \"!FabflixMobile\" app.  Ignore the \"Android SDK Sync\" warning message.\r\n\r\n'''Step 4''': When opening the app, if you see an \"Install missing platform(s) and sync project,\" click the link to do the installation.\r\n\r\n'''Step 5''': Follow the instructions on the page [http://developer.android.com/training/basics/firstapp/running-app.html running an app] to install an emulator.  In particular, in the IDE, click \"Tools > Android > AVD Manager\", select a model (e.g., \"Nexus 5\"), then install the corresponding emulator.  Again, this step could be slow depending on your network speed.\r\n\r\n'''Step 6''': Run the !FabflixMobile app on the installed emulator. Select the project folder, and click \"Run\" in the menu. Choose the previous installed emulator as the target platform. If you see \"Unsupported method: !AndroidProject.getPluginGeneration(), you can check [http://stackoverflow.com/questions/39591531/unsupported-method-androidproject-getplugingeneration-while-running-project Unsupported method: AndroidProject.getPluginGeneration() while running project]\". The app has three activities called Red, Blue, and Green, as well as buttons for navigating between the activities, and text boxes for sending messages to other pages. The red page contains a button that sends an HTTP request, receives the response, and shows the response on the screen. \r\n\r\n[[Image(wiki:cs122b-2017-winter-project4:fablixmobile.jpeg)]]\r\n\r\n'''Step 7 (optional)''': If you have an Android phone, you can run the app directly on your phone, which is faster. You can check [http://developer.android.com/training/basics/firstapp/running-app.html running an app] on how to run applications on real phones.\r\n\r\n'''Step 8''': To make yourself more familiar with Android development, you can check the following tutorials.\r\n * [http://developer.android.com/training/basics/firstapp/building-ui.html Android UI]: the basics of building a user interface.\r\n * [http://developer.android.com/training/basics/firstapp/starting-activity.html activities]: how to navigate between two pages (i.e., activities).\r\n\r\n'''Step 9 (main task)''': Develop a Fabflix Android app, which supports a subset of the features of the main Fabflix website. You are not allowed to use the Android !WebView. The following capabilities are required:\r\n\r\n * Login page, which should behave like the website login page, ''without'' the reCAPTCHA feature.\r\n * A search box that has the same behavior as the the searching requirement in task 1 (searching in title, directors, and stars).  \r\n * Your app should continue to work correctly (e.g., by keeping the content in those input boxes) after the following events:\r\n   * Pressing the home and the back buttons, and\r\n   * Turning the screen on and off.\r\n* Pagination on the search result list. \"Previous\" and \"Next\" buttons are required, and the page size can be constant.\r\n\r\n----\r\n[[Span(id=UDF)]]\r\n\r\n== Task 3 (Optional Extra Credit): Fuzzy Searching Using User Defined Functions ==\r\nCurrently, when a !FabFlix  customer is searching for a movie by its title, director or (one of)  its stars (that is, searching via a \"key\" value), the user must spell that key correctly; otherwise, the desired movie will not be retrieved. For example, some stars' names, such as \"Schwarzenegger,\" are  sufficiently difficult to spell that customers are likely to spell them  incorrectly--and so perhaps believe we do not stock the Terminator  movies when, in fact, we do!\r\n\r\nTo make it more likely that customers  find the movies they desire--and thus increase our likelihood of making  sales--the exact string matching in !FabFlix for key searches is to be replaced with a fuzzy matching, one that returns a movie whose value is close to the key's value.\r\n\r\nThe designers have decided that using the SQL LIKE command combined with an  Levenshtein (Edit Distance) Algorithm (LEDA) is the approach to take.\r\n\r\nThe LEDA algorithm, to be implemented as a dynamic function in C or C++, is  to be accessed using the interface SIMILARTO. SIMILARTO takes three  parameters: the first is the key as a string, the second the string  against which the key is being compared, the third the maximum distance  he two strings can differ and still be considered similar to each other.  Take the union of the results from LIKE and SIMILARTO.\r\n\r\nlastName LIKE '%Schwarseneger%' OR SIMILARTO(lastName, 'Schwarseneger', 2)\r\n\r\nWe will give 10 point extra credits if you: successfully implement this feature on your AWS instance AND integrate fuzzy search into the searching functionality in task 1 and 2. Your search results should combine the full text search and fuzzy search. Feel free to use the User Defined Functions (described above) from this [http://flamingo.ics.uci.edu/toolkit/ example].\r\n\r\n\r\n----\r\n=  =\r\n= Preparing the Package for Submission =\r\n 1. You are required to demonstrate this project.\r\n 1. You should take the following steps to prepare your package for submission. When prepared, submit the package to EEE (i.e., one submission per team).\r\n   1. Create a directory, called `\"project4_[GROUP ID]\"` on your local machine. You are required to include three files in this directory: `\"fabflix.apk\"`, `\"fabflix_app_project.zip\"`, and `\"fabflix_webapp.war\"`. Follow the next three steps to create these files.\r\n   1. Use Android Studio to build an `APK` package, named `\"fabflix.apk\"`,  of your Fabflix Android app. Make sure to include both the source files  and the binary files. For grading, your .apk file will be loaded into  an emulator, and the app features will be tested. Compress the Android Studio project directory into a file called `\"fabflix_app_project.zip\"`.\r\n   1. Create a .war file of the `fabflix`  Tomcat webapp . This .war file must be called `\"fabflix_webapp.war\"`.\r\n   1. Compress the `\"project4_[GROUP ID]\"` directory to a file called `\"project4_[GROUP ID].zip\"` and upload it to EEE.\r\n\r\nIf your project does not compile/run, it will get a very low score.\r\n", "encoding": "ascii"}