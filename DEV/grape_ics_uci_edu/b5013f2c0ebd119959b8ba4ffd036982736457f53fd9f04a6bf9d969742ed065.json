{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2018-spring-project2?version=29", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs122b-2018-spring-project2 \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"alternate\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2?version=29&amp;format=txt\" type=\"text/x-trac-wiki\" title=\"Plain Text\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2\" title=\"View latest version\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2?version=30\" title=\"Version 30\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"prev\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2?version=28\" title=\"Version 28\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/folding.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n    <script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\"#content\").find(\"h1,h2,h3,h4,h5,h6\").addAnchor(_(\"Link to this section\"));\n        $(\"#content\").find(\".wikianchor\").each(function() {\n          $(this).addAnchor(babel.format(_(\"Link to #%(id)s\"), {id: $(this).attr('id')}));\n        });\n        $(\".foldable\").enableFolding(true, true);\n      });\n    </script>\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"pagepath\" class=\"noprint\">\n  <a class=\"pathentry first\" title=\"View WikiStart\" href=\"/wiki/public/wiki\">wiki:</a><a class=\"pathentry\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2\" title=\"View cs122b-2018-spring-project2\">cs122b-2018-spring-project2</a>\n</div>\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span>&larr; <a class=\"prev\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2?version=28\" title=\"Version 28\">Previous Version</a></span></li><li><a href=\"/wiki/public/wiki/cs122b-2018-spring-project2\" title=\"View latest version\">View Latest Version</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2?version=30\" title=\"Version 30\">Next Version</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n        <br />\n        <table id=\"info\" summary=\"Revision info\">\n          <tr><th scope=\"row\">Version 29 (modified by zuozhi, <a class=\"timeline\" href=\"/wiki/public/timeline?from=2018-04-24T13%3A21%3A11-07%3A00&amp;precision=second\" title=\"See timeline at Apr 24, 2018 1:21:11 PM\">18 months ago</a>)\n             (<a href=\"/wiki/public/wiki/cs122b-2018-spring-project2?action=diff&amp;version=29\">diff</a>)</th></tr>\n          <tr><td class=\"message\">\n            <p>\n--\n</p>\n\n          </td></tr>\n        </table>\n      <div class=\"wikipage searchable\">\n        \n          <div id=\"wikipage\" class=\"trac-content\"><h1 id=\"Project2:StartingFabflixBusiness\">Project 2: Starting Fabflix Business</h1>\n<p>\nDue: <em>Week 5 Friday, May. 4</em> 11:45 pm. Due on Github.\n</p>\n<p>\n<strong>Project Description</strong>\n</p>\n<ul><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2#Overview\">Project 2 Overview</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2#StepByStep\">Step by Step</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2#DeploymentOnAWS\">Deployment on AWS</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2#Grading\">Demonstration and Grading Criteria</a>\n</li></ul><p>\n<strong>Resources</strong>\n</p>\n<ul><li>Examples we provided:\n<ul><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2#FormExample\">Form example</a>, <a class=\"ext-link\" href=\"http://users.polytech.unice.fr/~buffa/cours/internet/POLYS/servlets/Servlet-Tutorial-Form-Data.html\"><span class=\"icon\">\u200b</span>an online tutorial of Servlet and use form data</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2#ServletSession\">Servlet Session examples</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2#BackendAPI\">Frontend-Backend Separation</a> (Optional): project2-api-example and project2-login-example\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2#JSP\">JSP example</a> (Optional) <a class=\"ext-link\" href=\"https://www.guru99.com/jsp-tutorial.html\"><span class=\"icon\">\u200b</span>online JSP tutorial</a> \n</li></ul></li></ul><ul><li>A very good JavaScript and jQuery tutorial: <a class=\"ext-link\" href=\"http://jqfundamentals.com/\"><span class=\"icon\">\u200b</span>http://jqfundamentals.com/</a> \n</li></ul><ul><li>Bootstrap is a popular JavaScript library to make your webpage looks modern and pretty. Here are some tutorials: <a class=\"ext-link\" href=\"https://www.toptal.com/front-end/what-is-bootstrap-a-short-tutorial-on-the-what-why-and-how\"><span class=\"icon\">\u200b</span>https://www.toptal.com/front-end/what-is-bootstrap-a-short-tutorial-on-the-what-why-and-how</a> <a class=\"ext-link\" href=\"https://www.codeofaninja.com/2014/05/bootstrap-tutorial-beginners-step-step.html\"><span class=\"icon\">\u200b</span>https://www.codeofaninja.com/2014/05/bootstrap-tutorial-beginners-step-step.html</a>\n</li></ul><hr />\n<p>\n<span id=\"Overview\"></span>\n</p>\n<h2 id=\"Project2Overview\">Project 2 Overview</h2>\n<p>\nIn this project, you will start the Fabflix business! In  particular, you will provide Web-based interfaces to allow customers  to browse/search for movie information, add interesting movies to their shopping cart, and check out. The following figure shows the  flow of the interfaces you need to implement.\n</p>\n<p>\n<a style=\"padding:0; border:none\" href=\"/wiki/public/attachment/wiki/cs122b-2018-winter-project2/design-diagram.jpg\"><img src=\"/wiki/public/raw-attachment/wiki/cs122b-2018-winter-project2/design-diagram.jpg\" /></a>\n</p>\n<p>\nThe following are details about the interfaces.\n</p>\n<ul><li>The \"Login\" page asks a customer to provide an email and a  password in order to log into the system. <strong>Use HTTP POST instead of HTTP  GET</strong><br /> so that the username and password are not displayed on the address bar.  Note that the email and password are attributes of the customer table.  You should use the customer table for authentication, <strong>NOT</strong> the  database login/password (such as \"testuser\" and \"testpass\").\n</li><li>On the \"Main\" page, the customer can choose either to \"Search\" for movies or \"Browse\" for movies.\n</li><li>On the \"Searching\" page, the customer can search for movies by any of the following attributes or their combination (logical \"AND\"  operation):\n<ul><li>title;\n</li><li>year;\n</li><li>director;\n</li><li>star's name. You need to return the stars whose name contains the name user types in. For example, the name \"Peter Anteater\" should appear when searching \"Peter\" or \"Anteater\".\n</li></ul></li></ul><blockquote>\n<blockquote>\n<p>\nCheck <a class=\"ext-link\" href=\"http://www.imdb.com/search/title\"><span class=\"icon\">\u200b</span>http://www.imdb.com/search/title</a>  to see an example of the interface. Of course your interface can have a  different style.\n</p>\n</blockquote>\n</blockquote>\n<ul><li>The \"Movie list\" page shows the results of the search, and the results are formatted as a table with at least the following columns:\n<ul><li>id;\n</li><li>title (hyperlinked);\n</li><li>year;\n</li><li>director;\n</li><li>list of genres;\n</li><li>list of stars (each hyperlinked);\n</li><li>rating;\n</li></ul></li></ul><blockquote>\n<blockquote>\n<p>\nThe following requirements should be met.\n</p>\n</blockquote>\n</blockquote>\n<ul><li><em>Substring matching</em>: The user does not have to provide an exact value for an attribute, and the system should support \"substring matching\". For example, a query asking for \"term\" for the \"title\" attribute should return movies such as \"Terminal\" and \"Terminator.\" You  can use the \"LIKE\" and \"ILIKE\" SQL operators for pattern matching in any way you wish.  For example:\n</li></ul><blockquote>\n<blockquote>\n<p>\n<strong>                    SELECT \"column_name\"</strong>                    <br />                    <strong>                    FROM \"table_name\"</strong>                    <br />                    <strong>                    WHERE \"column_name\" LIKE pattern</strong>                    <br />\n</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>\n<strong>                   pattern</strong>                    often consists of wildcards.<br />              <strong>              Note: </strong>              You are required to write an explanation of how/where you use the LIKE predicate in your codebase. You should put this in a text file (plain text or markdown) in your Github repository, for example, \"like-predicate.txt\", or \"like-predicate.md\"\n</p>\n</blockquote>\n</blockquote>\n<ul><li>Here are some examples:\n<ul><li>'A_Z':  All string that starts with 'A', another character, and end with 'Z'.  For example, 'ABZ' and 'A2Z' would both satisfy the condition, while  'AKKZ' would not (because there are two characters between A and Z  instead of one).\n</li><li>'ABC%': All strings that start with 'ABC'. For example,  'ABCD' and 'ABCABC' would both satisfy the condition.\n</li><li>'%XYZ': All strings that end with 'XYZ'. For example, 'WXYZ'  and 'ZZXYZ' would both satisfy the condition.\n</li><li>'%AN%':  All strings that contain the pattern 'AN' anywhere. For example, 'LOS ANGELES' and 'SAN FRANCISCO' would both satisfy the condition.\n</li></ul></li></ul><ul><li><em>Sorting</em>: A user should be able to click on the header of title or rating, so that the results will be sorted (ascending or descending) by the corresponding attribute.\n</li></ul><ul><li><em>Previous/Next</em>: Since there could be many movies on the list, each page can only display a certain number (<em>N</em>) of movies, and the interface has \"Prev\"/\"Next\" buttons to allow the user to go through all the movies.   Your interface should allow the customer to change the number of listings <em>N</em> per page. You can implement a drop-down menu to choose \"N\" from a list of predefined values such as 10, 25, 50, 100, etc.\n</li></ul><ul><li>If the user clicks on a movie, the corresponding \"Single Movie\" page displays all the information about the movie, including its id, title, year, director, a list of genres (hyperlinked), a list of stars (hyperlinked), and rating.\n</li><li>If the user clicks on a star, the corresponding \"Single Star\" page displays all the information about this star, including the name, year of birth, and a list of (hyperlinked) movies in which the star acted. The user can jump between a page for a movie and a page for a star following hyperlinks.\n</li><li>Using the \"Browsing\" page, the user can browse movies by either their genres and or title. The \"Browsing by movie genre\" page has all the (hyperlinked) genres. The user can click on a genre to see all the movies of this genre. The \"Browsing by movie title\" page categorizes the movies based on their titles. The page organizes all the titles based on their first character in the title in an alphabetical order.  (Notice that the first character could be a digit such as \"2\" in \"2012\".)  When the user clicks on a letter, he can see the list of all the movies with this first letter in their title.\n</li><li><em>Shopping Cart</em>: For all the pages  that display movie information, each movie should have an associated \"Add to Shopping Cart\" interface. The interface shows the currently number of copies for this item (during this login period), and allow the user to add more copies (or delete all copies) of this item by modifying the quantity. If the user clicks the button, the corresponding number of copies of movies should be set in his shopping cart (or delete the item if the quantity  becomes 0).  The interface should allow the user to see all the items (with their quantities) in his current shopping cart (during this login).\n</li></ul><blockquote>\n<blockquote>\n<p>\nAll pages after login should have a \"Checkout\" button. If the user clicks this button, there is a \"Shopping cart\" page that displays the movies in the shopping cart.  If the user chooses to proceed to check out, the next page \"Ask for Customer Information\" should ask the user to provide a credit number, expiration date, and first name and last name of the credit card holder.\n</p>\n</blockquote>\n</blockquote>\n<ul><li><strong> </strong><em>Checkout</em><strong>:</strong>  The transaction succeeds only if the user can provide the first name, a last name,a credit card with an expiration date, which match a record <strong>in the creditcards table (not those  in the customers table)</strong>.  If succeeded, the transaction should be recorded in the system (in the \"sales\" table) and a confirmation page should be displayed.   <br />\n</li></ul><ul><li><strong>Performance requirements</strong>: You can decide whether you want to do caching on the Web server for earlier query results.\n</li></ul><p>\nWe are not specifying all the details of the interfaces. You are  encouraged to use your imagination to enhance the functionalities.  We highly recommend you implement the above using <strong>JSP and/or Java servlets</strong> at the server side. You can use any type of client-side technologies  to enhance the functionality of your website (e.g., Javascript, style sheets, etc). Regardless of the client-side technology, you will most likely make extensive use of HTML.\n</p>\n<hr />\n<p>\n<span id=\"StepByStep\"></span>\n</p>\n<h2 id=\"StepbyStep\">Step by Step</h2>\n<p>\nHere are the recommended steps you can follow to accomplish for this project:\n</p>\n<ol><li>Go through all the examples we provided.\n</li><li>Implement the \"Login\" Page;\n</li><li>Implement the \"Search\" Page;\n</li><li>Implement the \"Movie list\" page, including the \"Sorting\" and \"Prev/Next\" features;\n</li><li>Implement the \"Single Movie\" page;\n</li><li>Implement the \"Single Star\" page;\n</li><li>Implement the \"Browsing by movie genre\" page;\n</li><li>Implement the \"Browsing by movie title\" page;\n</li><li>Add a \"Add to Shopping Cart\" button to each movie on all pages;\n</li><li>Add a \"Checkout\" button to all pages;\n</li><li>Implement the page to do checkout.<br />\n</li></ol><hr />\n<p>\n<span id=\"BackendAPI\"></span>\n</p>\n<h2 id=\"Frontend-BackendSeparationAndDataSourceOptional\">Frontend-Backend Separation And DataSource (Optional)</h2>\n<p>\nAn \"old\" way to develop Web sites is to use Java Servlet or JSP to generate HTML pages.  This approach is gradually becoming out of date and no longer considered a good practice. In project 2, we suggest you separate the frontend and backend. The frontend fetches the data by sending HTTP requests to the backend and then displays the returned data. The Java Servlet backend only provides API in a JSON format to the frontend. The frontend needs to be written in HTML, CSS, and JS files. This approach is not required. \n</p>\n<p>\nThis approach involves lots of JavaScript and jQuery programming, so we highly recommend you to go through this very nice online tutorial:  <a class=\"ext-link\" href=\"http://jqfundamentals.com/\"><span class=\"icon\">\u200b</span>http://jqfundamentals.com/</a> \n</p>\n<h3 id=\"GETapiexample\">GET api example</h3>\n<p>\nHere's an example <a class=\"ext-link\" href=\"https://github.com/UCI-Chenli-teaching/project2-api-example\"><span class=\"icon\">\u200b</span>project2-api-example</a> that uses this approach to show a list of stars, similar to the project1-star-example we provided in project 1. \nNote starting with this example we use DataSource managed by Tomcat, thus we don't have to set database information in each servlet. To config a DataSource, following tutorial here  <a class=\"ext-link\" href=\"https://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html\"><span class=\"icon\">\u200b</span>https://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html</a> \nFollow the instruction on README.md to deploy and test the examples on tomcat. \n</p>\n<h3 id=\"POSTapiexample\">POST api example</h3>\n<p>\nHere's an example <a class=\"ext-link\" href=\"https://github.com/UCI-Chenli-teaching/project2-login-example\"><span class=\"icon\">\u200b</span>project2-login-example</a> to show you how to implement the login feature using the new frontend-backend-separation design.\nFollow the instruction on README.md to deploy and test the examples on tomcat. \n</p>\n<hr />\n<p>\n<span id=\"FormExample\"></span>\n</p>\n<h2 id=\"Formexample\">Form example</h2>\n<p>\nThe HTML &lt;form&gt; element defines a form that is used to collect user input.\n</p>\n<p>\nForm elements are different types of input elements, like text fields, checkboxes, radio buttons, submit buttons, and more.\n</p>\n<p>\nHere's an example <a class=\"ext-link\" href=\"https://github.com/UCI-Chenli-teaching/project2-form-example\"><span class=\"icon\">\u200b</span>project2-form-example</a> to show you how to implement a HTML &lt;form&gt; to send user search query to the backend, and display the search result within a HTML &lt;table&gt;.\n</p>\n<p>\nFollow the instruction on README.md to deploy the example on tomcat. \nClick the link <a class=\"ext-link\" href=\"http://localhost:8080/project2-form-example\"><span class=\"icon\">\u200b</span>http://localhost:8080/project2-form-example</a>                 ,  then enter the search entry and click the \"Submit Order\" button.  It will take the value in the \"Last Name\" box to query a backend credit card table to retrieve records with that last name.\n</p>\n<p>\nNote: In the project2-form-example, we used <tt> @WebServlet </tt> annotation to declare the configuration of a Servlet <tt> FormServlet </tt> right on top of class Form definition. This is a relatively new feature supported since Servlet 3.0. In order to scan web.xml properly with Servlet 3.0 or newer, you will need to modify the web.xml as followed:\n</p>\n<pre class=\"wiki\">&lt;web-app \n    xmlns=\"http://java.sun.com/xml/ns/javaee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n    version=\"3.0\"&gt;\n</pre><p>\nFor more information: \n</p>\n<ul><li><a class=\"ext-link\" href=\"https://stackoverflow.com/questions/6535676/webservlet-annotation-with-tomcat-7\"><span class=\"icon\">\u200b</span>@WebServlet annotation with Tomcat</a>\n</li></ul><hr />\n<p>\n<span id=\"ServletSession\"></span>\n</p>\n<h2 id=\"Servletsessionexamples\">Servlet session examples</h2>\n<p>\nSession provides a way to identify a user across more than one page request or visit to a Web site and to store information about that user.\n</p>\n<p>\nThe servlet container uses this interface to create a session between an HTTP client and an HTTP server. The session persists for a specified time period, across more than one connection or page request from the user. A session usually corresponds to one user, who may visit a site many times. The server can maintain a session in many ways such as using cookies or rewriting URLs.\n</p>\n<p>\nHere's an example <a class=\"ext-link\" href=\"https://github.com/UCI-Chenli-teaching/project2-session-example\"><span class=\"icon\">\u200b</span>project2-session-example</a> to show you two session usages.\n</p>\n<p>\nFollow the instruction on README.md to deploy the example on tomcat. And then click the following two urls:\n</p>\n<ul><li><a class=\"ext-link\" href=\"http://localhost:8080/project2-session-example/session?myname=Michael\"><span class=\"icon\">\u200b</span>http://localhost:8080/project2-session-example/session?myname=Michael</a> <br />\n</li><li><a class=\"ext-link\" href=\"http://localhost:8080/project2-session-example/items?newItem=DVD\"><span class=\"icon\">\u200b</span>http://localhost:8080/project2-session-example/items?newItem=DVD</a> <br />\n</li></ul><hr />\n<p>\n<span id=\"JSP\"></span>\n</p>\n<h2 id=\"JSPexampleOptional\">JSP example (Optional)</h2>\n<p>\nAn alternative technology to use is JSP (Java Servlet Pages). JSP is an old technology, but it's still very handy to use. Normal Java Servlet lets you write HTML string in the print statements in Java, which is clumsy. JSP enables you to conveniently write Java code inside HTML. \n</p>\n<p>\nHere's an example <a class=\"ext-link\" href=\"https://github.com/UCI-Chenli-teaching/project2-jsp-example\"><span class=\"icon\">\u200b</span>project2-jsp-example</a> that generates the html page with JSP, similar to the project1-star-example.\n</p>\n<p>\nFollow the instruction on README.md to deploy the example on tomcat. \nThen click:\n</p>\n<blockquote>\n<p>\n<a class=\"ext-link\" href=\"http://localhost:8080/project2-jsp-example/index.jsp\"><span class=\"icon\">\u200b</span>http://localhost:8080/project2-jsp-example/index.jsp</a>\n</p>\n</blockquote>\n<p>\nwhich will activate the JSP page.  It will talk to your local MySQL database.\n</p>\n<p>\nTo learn more about JSP using examples, check:\n</p>\n<ul><li><a class=\"ext-link\" href=\"http://www.easywayserver.com/jsp/JSP-example.htm\"><span class=\"icon\">\u200b</span>http://www.easywayserver.com/jsp/JSP-example.htm</a>\n</li><li><a class=\"ext-link\" href=\"https://www.guru99.com/jsp-tutorial.html\"><span class=\"icon\">\u200b</span>https://www.guru99.com/jsp-tutorial.html</a>\n</li></ul><hr />\n<p>\n<span id=\"DeploymentOnAWS\"></span>\n</p>\n<h2 id=\"DeploymentOnAWSandSubmissions\">Deployment On AWS and Submissions</h2>\n<p>\nUse Github for your project 2 code and deploy on AWS, similar to what you have done in project 1.\n</p>\n<p>\na) Your submittion is based on commits that pushed to <strong>github master branch</strong>. Make sure the file on github master branch is what you want to submit. We are <strong>NOT</strong> looking at local git commits. We are <strong>NOT</strong> looking at commits on other branches\n</p>\n<p>\nb) Make sure that if you git clone your project to a new environment, it will run correctly, especially on AWS, because you will clone a version to AWS instance and demo with it.\n</p>\n<p>\nc) The submission usually should be IDE free. So only commit your .html, .js, .css, .java, README.md, .gitignore, etc. \nDo not commit IDE setting files for example .eclipse folder, .idea folder. These should be included in the .gitignore file.\n</p>\n<p>\nd) We will run a script to get the <strong>LAST</strong> commit on <strong>github master branch</strong> within 24 hours after the due time (grace period). \nIf you want to use the grace period (with 10 points marked), you can keep pushing commits to github with in 24 hours. \nIf you do not want to use grace period, <strong>DO NOT</strong> push any commits to github until the grace period is passed. You can keep editing and commit locally if you want though.\n</p>\n<p>\ne) Any commits pushed to github after grace period will be ignored.\n</p>\n<p>\nf) After the grace period, we will post a google sheet containning the last commit that we find on github. Please check and confirm it because you will need to demo with this commit.\n</p>\n<p>\ng) Signup for demo slots. Demo signup sheet will be posted separately after due. \n</p>\n<hr />\n<p>\n<span id=\"Grading\"></span>\n</p>\n<h2 id=\"DemonstrationandGradingCriteria\">Demonstration and Grading Criteria</h2>\n<p>\n<strong>You are required to demonstrate  this project</strong>. Create a running system from your ZIP file\u2013quickly. Show the correctness, completeness, functionality and performance of your database during your demonstration by using the employee interface developed here. Your task is to convince us <strong>(in 15 minutes)</strong> that your work is correctly and completely carried out and the course project is ready to move to phase 3. During the demo, we will grade your project based on the following criteria:\n</p>\n<ul><li><strong>Functionality: </strong> How the system is working, whether it fulfills all the project requirements.\n</li><li><strong>Design and Performance: </strong> You should be considerate in designing the server to make it efficient.  For instance, you are welcome to implement the cache functionality to reduce the access to the database server (optional). Moreover, you should not send a query to the server to retrieve results not relevant to the current query or future queries. Your Web server is allowed to use a \"LIMIT OFFSET\" clause to talk to the database server to retrieve related records for each query.\n</li><li><strong>Error handling: </strong> When an exception occurs, the system shouldn't show it to the user. It should give \"appropriate\" error messages to the user in every unexpectable condition and provide information  about what she needs to do next. The system should never terminate.  When a system failure such as loss of connectivity occurs, it should  recover  itself. In that case, it should reconnect and the user shouldn't loose his/her information such as the items in his/her shopping cart.\n</li><li><strong>User interface: </strong> Whether it is user friendly enough and it provides a good interface which does not confuse the users. The UI counts for 10% of the total project grade.\n</li></ul><p>\nYou could refer to this <a class=\"ext-link\" href=\"https://docs.google.com/spreadsheets/d/1hNw0Dgi0kC2CjItavOJibn2rXrHiPFctN-7RH8-P2sA/edit#gid=79272810\"><span class=\"icon\">\u200b</span>checklist</a> for detailed criteria.\n</p>\n<h3 id=\"FollowthesestepswhenshowingthedemototheTA\">Follow these steps when showing the demo to the TA</h3>\n<p>\na) Prior to the demo, make sure your AWS instance is up and running, everything is working fine, data is populated, etc... Don't deploy the project 2 app on AWS Tomcat yet.\n</p>\n<p>\nb) Generate the WAR file from your github repository and deploy it to your AWS Tomcat. You can do it locally on your machine or remotely on AWS. You can use the maven \"mvn package\" or generate the WAR file from Eclipse. Show us your git repository folder is in the commit ID we recorded: Do \" git checkout master \" first, then do \" git checkout your_commit_id \" using the commit ID we provided. Do \" git status \" to show us that your git repository is clean.\n</p>\n<p>\nc) Walk though your website and cover all the items in the  <a class=\"ext-link\" href=\"https://docs.google.com/spreadsheets/d/1hNw0Dgi0kC2CjItavOJibn2rXrHiPFctN-7RH8-P2sA/edit#gid=79272810\"><span class=\"icon\">\u200b</span>checklist</a>. Prepare ahead the sequence of operations that you need to do. Show functionality and error handling of your website.\n</p>\n<p>\nd) The TA will ask you to briefly explain your codebase or explain how certain functionalities are implemented. You need to show that you understand what's going on with you project. Failing to answer the questions will lead to deductions on your grade.\n</p>\n<p>\n<strong>Important</strong>: there are lots of functionalities to show during the demo and the time is very limited. Unable to finish the demo under 15 minutes may cause deductions on your grade. <strong>Be prepared</strong> when coming to the demo.\n</p>\n<hr />\n<h2 id=\"Ifyouchoseadifferentdomain\">If you chose a different domain</h2>\n<p>\nYou may design your own flow of interfaces that is suitable for your application. However, your application must cover the functionalities mentioned above, including login, conditional search, browsing, selection, sorting, navigation between pages, and error handling. If your domain doesn't require a shopping cart and checkout, come up with two features that are comparable.  You are required to draw your application workflow (similar to the Fabflix diagram above) and present it during the demo session. It is your responsibility to make sure that your design and implementation meet all the requirements. If you are not sure about it, make sure to post it on Piazza or come to office hours to discuss.  \n</p>\n</div>\n          \n          \n        \n        \n      </div>\n      \n    <div id=\"attachments\">\n        <h3 class=\"foldable\">Attachments <span class=\"trac-count\">(3)</span></h3>\n        <div>\n          <ul>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2018-spring-project2/design-diagram.jpg\" title=\"View attachment\">design-diagram.jpg</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project2/design-diagram.jpg\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"51484 bytes\">50.3 KB</span>) -\n      added by <em>yicongh1</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2018-04-12T09%3A20%3A30-07%3A00&amp;precision=second\" title=\"See timeline at Apr 12, 2018 9:20:30 AM\">18 months ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2018-spring-project2/Items.java\" title=\"View attachment\">Items.java</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project2/Items.java\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"2528 bytes\">2.5 KB</span>) -\n      added by <em>yicongh1</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2018-04-12T10%3A24%3A59-07%3A00&amp;precision=second\" title=\"See timeline at Apr 12, 2018 10:24:59 AM\">18 months ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2018-spring-project2/Form.java\" title=\"View attachment\">Form.java</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project2/Form.java\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"3011 bytes\">2.9 KB</span>) -\n      added by <em>yicongh1</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2018-04-12T10%3A25%3A19-07%3A00&amp;precision=second\" title=\"See timeline at Apr 12, 2018 10:25:19 AM\">18 months ago</a>.\n              </li>\n          </ul>\n          <p>\n            Download all attachments as: <a rel=\"nofollow\" href=\"/wiki/public/zip-attachment/wiki/cs122b-2018-spring-project2/\">.zip</a>\n          </p>\n        </div>\n    </div>\n\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"last first\">\n          <a rel=\"nofollow\" href=\"/wiki/public/wiki/cs122b-2018-spring-project2?version=29&amp;format=txt\">Plain Text</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>", "encoding": "utf-8"}