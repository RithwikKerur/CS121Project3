{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2016-spring-project2?version=10", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs122b-2016-spring-project2 \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"alternate\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2?version=10&amp;format=txt\" type=\"text/x-trac-wiki\" title=\"Plain Text\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2\" title=\"View latest version\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"prev\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2?version=9\" title=\"Version 9\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/folding.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n    <script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\"#content\").find(\"h1,h2,h3,h4,h5,h6\").addAnchor(_(\"Link to this section\"));\n        $(\"#content\").find(\".wikianchor\").each(function() {\n          $(this).addAnchor(babel.format(_(\"Link to #%(id)s\"), {id: $(this).attr('id')}));\n        });\n        $(\".foldable\").enableFolding(true, true);\n      });\n    </script>\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"pagepath\" class=\"noprint\">\n  <a class=\"pathentry first\" title=\"View WikiStart\" href=\"/wiki/public/wiki\">wiki:</a><a class=\"pathentry\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2\" title=\"View cs122b-2016-spring-project2\">cs122b-2016-spring-project2</a>\n</div>\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span>&larr; <a class=\"prev\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2?version=9\" title=\"Version 9\">Previous Version</a></span></li><li><a href=\"/wiki/public/wiki/cs122b-2016-spring-project2\" title=\"View latest version\">View Latest Version</a></li><li class=\"last\"><span class=\"missing\">Next Version &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n        <br />\n        <table id=\"info\" summary=\"Revision info\">\n          <tr><th scope=\"row\">Version 10 (modified by jamshid, <a class=\"timeline\" href=\"/wiki/public/timeline?from=2016-04-17T16%3A47%3A04-07%3A00&amp;precision=second\" title=\"See timeline at Apr 17, 2016 4:47:04 PM\">3 years ago</a>)\n             (<a href=\"/wiki/public/wiki/cs122b-2016-spring-project2?action=diff&amp;version=10\">diff</a>)</th></tr>\n          <tr><td class=\"message\">\n            <p>\n--\n</p>\n\n          </td></tr>\n        </table>\n      <div class=\"wikipage searchable\">\n        \n          <div id=\"wikipage\" class=\"trac-content\"><h1 id=\"Project2:StartingFabflixBusiness\">Project 2: Starting Fabflix Business</h1>\n<p>\nDue: <strong>April 21, 2016, Thursday</strong> 11:45 pm. Submit on EEE under drop box / Proj 2.\n</p>\n<p>\n<strong>Project Description</strong>\n</p>\n<ul><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#Overview\">Overview</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#StepByStep\">Step by Step</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#DeploymentOnAWS\">Deployment on AWS</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#Deliverables\">Deliverables</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#Grading\">Grading Criteria</a>\n</li></ul><p>\n<strong>Resources</strong>\n</p>\n<ul><li><a class=\"ext-link\" href=\"http://www.w3schools.com/html\"><span class=\"icon\">\u200b</span>An HTML tutorial</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#TomcatTestExample\">TomcatTest example</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#FormExample\">Form example</a>, <a class=\"ext-link\" href=\"http://users.polytech.unice.fr/~buffa/cours/internet/POLYS/servlets/Servlet-Tutorial-Form-Data.html\"><span class=\"icon\">\u200b</span>Information on managing HTML form data</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#ServletSession\">Servlet session examples</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#WAR\">Creating WAR Archives</a>\n</li><li><a class=\"wiki\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2#JSP\">JSP example</a> (Optional)\n</li></ul><hr />\n<p>\n<span id=\"Overview\"></span>\n</p>\n<h2 id=\"Project2Overview\">Project 2 Overview</h2>\n<p>\nIn this project, you will start the Fabflix business! In  particular, you will provide Web-based interfaces to allow customers  to browse/search for movie information, add interesting movies to their shopping cart, and check out. The following figure shows the  flow of the interfaces you need to implement.\n</p>\n<p>\n<a style=\"padding:0; border:none\" href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/design-diagram.jpg\"><img src=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/design-diagram.jpg\" /></a>\n</p>\n<p>\nThe following are details about the interfaces.\n</p>\n<ul><li>The \"Login\" page asks a customer to provide an email and a  password in order to log into the system. <strong>Use HTTP POST instead of HTTP  GET</strong><br /> so that the username and password are not displayed on the address bar.  Note that the email and password are attributes of the customer table.  You should use the customer table for authentication, <strong>NOT</strong> the  database login/password (such as \"testuser\" and \"testpass\").\n</li><li>On the \"Main\" page, the customer can choose either to \"Search\" for movies or \"Browse\" for movies.\n</li><li>On the \"Searching\" page, the customer can search for movies by  any of the following attributes or their combination (logical \"AND\"  operation):\n<ul><li>title;\n</li><li>year;\n</li><li>director;\n</li><li>star's first name and/or last name. This means you need to do both: a) first name or last name if only one of the two names  is provided; b) first name and last name, if both names are provided.\n</li></ul></li></ul><blockquote>\n<blockquote>\n<p>\nCheck <a class=\"ext-link\" href=\"http://www.imdb.com/search/title\"><span class=\"icon\">\u200b</span>http://www.imdb.com/search/title</a>                    to see an example of the interface. Of course your interface can have a  different style.\n</p>\n</blockquote>\n</blockquote>\n<ul><li>The \"Movie list\" page shows the results of the search, and the results are formatted as a table with at least the following columns:\n<ul><li>id;\n</li><li>title (hyperlinked);\n</li><li>year;\n</li><li>director;\n</li><li>list of genres;\n</li><li>list of stars (each hyperlinked);\n</li></ul></li></ul><blockquote>\n<blockquote>\n<p>\nThe following requirements should be met.\n</p>\n</blockquote>\n</blockquote>\n<ul><li><em>Substring matching</em>: The user does not have to provide an exact value for an attribute, and the system should support \"partial matching\". For example, a query asking for \"term\" for the \"title\" attribute should return movies such as \"Terminal\" and \"Terminator.\" You  can use the \"LIKE\" and \"ILIKE\" SQL operators for pattern matching in any way you wish.  For example:\n</li></ul><blockquote>\n<blockquote>\n<p>\n<strong>                    SELECT \"column_name\"</strong>                    <br />                    <strong>                    FROM \"table_name\"</strong>                    <br />                    <strong>                    WHERE \"column_name\" LIKE pattern</strong>                    <br />\n</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>\n<strong>                   pattern</strong>                    often consists of wildcards.<br />              <strong>              Note: </strong>              You are required to write an explanation of how/where you use the LIKE predicate in your codebase. This should be accessible via a link in the format of <a class=\"ext-link\" href=\"http://YOUT_PUBLIC_ID:8080/fabflix/reports/wildcards\"><span class=\"icon\">\u200b</span>http://YOUT_PUBLIC_ID:8080/fabflix/reports/like-predicate</a>              .\n</p>\n</blockquote>\n</blockquote>\n<ul><li>Here are some examples:\n<ul><li>'A_Z':  All string that starts with 'A', another character, and end with 'Z'.  For example, 'ABZ' and 'A2Z' would both satisfy the condition, while  'AKKZ' would not (because there are two characters between A and Z  instead of one).\n</li><li>'ABC%': All strings that start with 'ABC'. For example,  'ABCD' and 'ABCABC' would both satisfy the condition.\n</li><li>'%XYZ': All strings that end with 'XYZ'. For example, 'WXYZ'  and 'ZZXYZ' would both satisfy the condition.\n</li><li>'%AN%':  All strings that contain the pattern 'AN' anywhere. For example, 'LOS ANGELES' and 'SAN FRANCISCO' would both satisfy the condition.\n</li></ul></li></ul><ul><li><em>Sorting</em>: A user should be able to click on the header of title or year, so that the results will be sorted (ascending or descending) by the corresponding attribute.\n</li></ul><ul><li><em>Previous/Next</em>: Since there could be many movies on the list, each page can only display a certain number (<em>N</em>) of movies, and the interface has \"Prev\"/\"Next\" buttons to allow the user to go through all the movies.   Your interface should allow the customer to change the number of listings <em>N</em> per page. You can implement a drop-down menu to choose \"N\" from a list of predefined values such as 10, 25, 50, 100, etc.\n</li></ul><ul><li>If the user clicks on a movie, the corresponding \"Single Movie\" page displays all the information about the movie, including its id, title, year, director, a list of genres (hyperlinked), poster, a list of stars (hyperlinked), and a link to its preview trailer.\n</li><li>If the user clicks on a star, the corresponding \"Single Star\" page displays all the information about this star, including the id, name, date of birth, picture of the star, and a list of (hyperlinked) movies in which the star acted. The user can jump between a page for a movie and a page for a star following hyperlinks.\n</li><li>Using the \"Browsing\" page, the user can browse movies by either their genres and or title. The \"Browsing by movie genre\" page has all the (hyperlinked) genres. The user can click on a genre to see all the movies of this genre. The \"Browsing by movie title\" page categorizes the movies based on their titles. The page organizes all the titles based on their first character in the title in an alphabetical order.  (Notice that the first character could be a digit such as \"2\" in \"2012\".)  When the user clicks on a letter, he can see the list of all the movies with this first letter in their title.\n</li><li><em>Shopping Cart</em>: For all the pages  that display movie information, each movie should have an associated \"Add to Shopping Cart\" interface. The interface shows the currently number of copies for this item (during this login period), and allow the user to add more copies (or delete all copies) of this item by modifying the quantity. If the user clicks the button, the corresponding number of copies of movies should be set in his shopping cart (or delete the item if the quantity  becomes 0).  The interface should allow the user to see all the items (with their quantities) in his current shopping cart (during this login).\n</li></ul><blockquote>\n<blockquote>\n<p>\nAll pages after login should have a \"Checkout\" button. If the user clicks this button, there is a \"Shopping cart\" page that displays the movies in the shopping cart.  If the user chooses to proceed to check out, the next page \"Ask for Customer Information\" should ask the user to provide a credit number, expiration date, and first name and last name of the credit card holder.\n</p>\n</blockquote>\n</blockquote>\n<ul><li><strong> </strong><em>Checkout</em><strong>:</strong>  The transaction succeeds only if the user can provide the first name, a last name,a credit card with an expiration date, which match a record <strong>in the creditcards table (not those  in the customers table)</strong>.  If succeeded, the transaction should be recorded in the system (in the \"sales\" table) and a confirmation page should be displayed.   <br />\n</li></ul><p>\nWe are not specifying all the details of the interfaces. You are  encouraged to use your imagination to enhance the functionalities.  We highly recommend you implement the above using <strong>JSP and/or Java servlets</strong> at the server side. You can use any type of client-side technologies  to enhance the functionality of your website (e.g., Javascript, style sheets, etc). Regardless of the client-side technology, you will most likely make extensive use of HTML.\n</p>\n<hr />\n<p>\n<span id=\"TomcatTestExample\"></span>\n</p>\n<h2 id=\"TomcatTestexample\">TomcatTest example</h2>\n<p>\nTo test that Tomcat is working  and communicating with MySQL properly, we've prepared a servlet that performs basically the same tasks as the JDBC program. It queries the test database and returns some structural and content information. To run this program:\n</p>\n<ol><li>Make sure the MySQL database server is running.\n</li><li>Download <a class=\"attachment\" href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/TomcatTest.war\" title=\"Attachment 'TomcatTest.war' in cs122b-2016-spring-project2\">TomcatTest.war</a><a class=\"trac-rawlink\" href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/TomcatTest.war\" title=\"Download\">\u200b</a>\n</li></ol><blockquote>\n<blockquote>\n<p>\nA WAR file is a \"Web Application Archive.\" It contains a compressed directory of the files needed for a ready-to-run java servlet that Tomcat will launch when you go to the Web page designated in the WAR. A WAR file must a have certain directory structure and contain appropriate files (with the appropriate contents) for Tomcat to launch the applet. If your TOMCAT installation was correct, there should be a \"webapps\" folder under \"Tomcat 5.5\" directory of your Tomcat root  installation. It is usually <strong>                   C:\\Program Files\\Apache Software Foundation\\Tomcat7\\webapps</strong>                    on Windows and <strong>                   /var/lib/tomcat7/webapps/</strong>                    on Ubuntu). You should place this .WAR here inside the webapps folder.  Check <a class=\"forbidden wiki\" title=\"no permission to view this wiki page\">FAQs</a>                    for questions regarding WAR. The default configuration of Tomcat should automatically \"deflate\" this .WAR file after a few seconds, so that you see a directory named TomcatTest                    under webapps. If not, you'll deflate it by following instructions under <a class=\"forbidden wiki\" title=\"no permission to view this wiki page\">FAQs</a>                          .\n</p>\n</blockquote>\n</blockquote>\n<ol start=\"3\"><li>We'll now \"deploy\" this application.  Go to <a class=\"ext-link\" href=\"http://localhost:8080\"><span class=\"icon\">\u200b</span>http://localhost:8080</a>; this is your local web page. After installing Tomcat, it was set to the Tomcat welcome page; that page should appear.\n</li><li>Click on Tomcat Manager; enter your admin user login and password (given when you installed Tomcat); click OK. If your login and password are correct, the Tomcat Web Application Manger page will appear.\n</li><li>Under \"Deploy directory or WAR file located on server\" you should see a deploy button. You need not specify a path. If you simply click the deploy button, Tomcat will automatically refresh its list of applications. TomcatTest should now appear in the \"Applications\" list.  Go to <a class=\"ext-link\" href=\"http://localhost:8080/TomcatTest\"><span class=\"icon\">\u200b</span>http://localhost:8080/TomcatTest</a> to check if you can access a simple HTML page.\n</li><li>Go to <a class=\"ext-link\" href=\"http://localhost:8080/TomcatTest/servlet/TomcatTest\"><span class=\"icon\">\u200b</span>http://localhost:8080/TomcatTest/servlet/TomcatTest</a>.  Tomcat will run the servlet TomcatTest and print its output onto the web page. If the output is database information, all is well. If instead you see a message that an SQLException occurred, check that the MySQL server is running, that the test database with the correct user name, user password, and table structure has been created.\n</li><li>Go to the tomcat installation folder and open the \"webapps\" folder. This folder contains all the applications you plugged in so far into Tomcat.  Open \"TomcatTest\" folder. Every file under this folder except for WEB-INF is a file directly accessible from a url such as <strong>http://localhost:8080/TomcatTest/MY_FILE_NAME</strong>.  This folder usually contains all the static HTML content you might need for your web application. In our case we have \"index.html\". Now open the WEB-INF folder. This folder is not directly exposed on the internet. It actually  contains your Java executable classes that provide dynamic content of  your web application.\n</li></ol><blockquote>\n<blockquote>\n<p>\nThe subfolder \"classes\" contains your Java classes, while the \"lib\"  folder is used to store the libraries you might use in your Java  classes. In the \"lib\" folder, you will find the MySQL JDBC driver.  Another very  important file in this folder is \"web.xml\". This file contains description of all your Java servlets that you would use in your application. We have only one servlet in this application. If you open  \"web.xml\" you will see description of servlet \"TomcatTest                    \". Without  \"web.xml\" Tomcat would not know how to configure a the classes you have  in the \"classes\" folder. In our case, we declare that we have a servlet \"TomcatTestServlet                   \" whose Java class is TomcatTest                   . We  also specify that we map this servlet to path \"servlet/TomcatTest                   \",  thus can be accessed athttp://localhost:8080/TomcatTest/servlet/TomcatTest                   .\n</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>\nNow let's look at the \"sources\" folder. If you make any changes to \"TomcatTest                   .java\", and recompile the program, we'd like those changes to be reflected the next time you reload your web application. To recompile the program, your -classpath flag must contain paths to both the MySQL driver and the servlet API jar file. Assuming you are inside the  \"sources\" folder, the following command will recompile the servlet\n</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>\n<strong>                    (Windows)  javac -classpath \"../lib/servlet-api.jar;../lib/mysql-connector-java-5.0.8-bin.jar\" TomcatTest                   .java</strong>\n</p>\n</blockquote>\n</blockquote>\n<p>\nBe sure to place a copy of the TomcatTest.class file inside the WEB-INF\\classes folder (i.e., you want to overwrite the old .class file with the one that you just created).  You can go to the \"Tomcat Manager\" page and click on \"reload\" next to \"TomcatTest\". When you run the servlet now, you should see the desired changes in the functionality.  More information on the servlet API is available at hhttp://docs.oracle.com/javaee/6/tutorial/doc/bnafd.html.\n</p>\n<hr />\n<p>\n<span id=\"FormExample\"></span>\n</p>\n<h2 id=\"Formexample\">Form example</h2>\n<blockquote>\n<p>\nDownload and deploy this <a class=\"attachment\" href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/TomcatForm.war\" title=\"Attachment 'TomcatForm.war' in cs122b-2016-spring-project2\">TomcatForm.war</a><a class=\"trac-rawlink\" href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/TomcatForm.war\" title=\"Download\">\u200b</a>                    file to get familiar with HTML forms.  Click the link <a class=\"ext-link\" href=\"http://localhost:8080/TomcatForm\"><span class=\"icon\">\u200b</span>http://localhost:8080/TomcatForm</a>                    and click the \"Submit Order\" button.  It will take the value in the \"Last Name\" box to query a backend credit card table to retrieve records with that last name.\n</p>\n</blockquote>\n<hr />\n<p>\n<span id=\"ServletSession\"></span>\n</p>\n<h2 id=\"Servletsessionexamples\">Servlet session examples</h2>\n<p>\nInstall the <a class=\"attachment\" href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/Session.war\" title=\"Attachment 'Session.war' in cs122b-2016-spring-project2\">Session.war</a><a class=\"trac-rawlink\" href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/Session.war\" title=\"Download\">\u200b</a> and test the following requests:\n</p>\n<ul><li><a class=\"ext-link\" href=\"http://localhost:8080/Session/servlet/ShowSession?myname=Michael\"><span class=\"icon\">\u200b</span>http://localhost:8080/Session/servlet/ShowSession?myname=Michael</a> <br />\n</li><li><a class=\"ext-link\" href=\"http://localhost:8080/Session/servlet/ShowItems?newItem=DVD\"><span class=\"icon\">\u200b</span>http://localhost:8080/Session/servlet/ShowItems?newItem=DVD</a> <br />\n</li></ul><p>\nHere are the two java programs: <a class=\"attachment\" href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/ShowSession.java\" title=\"Attachment 'ShowSession.java' in cs122b-2016-spring-project2\">ShowSession.java</a><a class=\"trac-rawlink\" href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/ShowSession.java\" title=\"Download\">\u200b</a> and <a class=\"attachment\" href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/ShowItems.java\" title=\"Attachment 'ShowItems.java' in cs122b-2016-spring-project2\">ShowItems.java</a><a class=\"trac-rawlink\" href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/ShowItems.java\" title=\"Download\">\u200b</a>.\n</p>\n<hr />\n<p>\n<span id=\"StepByStep\"></span>\n</p>\n<h2 id=\"StepbyStep\">Step by Step</h2>\n<p>\nHere are the recommended steps you can follow to accomplish for this project:\n</p>\n<ol><li>Setup the Tomcat Programming Environment;\n</li><li>Using the Java Servlet examples above, make a sample Java servlet program work in your environment. The  program should be able to talk to your database server using JDBC;\n</li><li>Implement the \"Login\" Page;\n</li><li>Implement the \"Search\" Page;\n</li><li>Implement the \"Movie list\" page, including the \"Sorting\" and \"Prev/Next\" features;\n</li><li>Implement the \"Single Movie\" page;\n</li><li>Implement the \"Single Star\" page;\n</li><li>Implement the \"Browsing by movie genre\" page;\n</li><li>Implement the \"Browsing by movie title\" page;\n</li><li>Add a \"Add to Shopping Cart\" button to each movie on all pages;\n</li><li>Add a \"Checkout\" button to all pages;\n</li><li>Implement the page to do checkout.<br />\n</li></ol><hr />\n<p>\n<span id=\"DeploymentOnAWS\"></span> Deployment On AWS\n</p>\n<p>\nAfter you make the application work on your development machine, deploy it on the AWS instance you have launched in project 1.\n</p>\n<hr />\n<p>\n<span id=\"WAR\"></span>\n</p>\n<h2 id=\"CreatingWARArchives\">Creating WAR Archives</h2>\n<p>\nThe following instructions demonstrate how to create a WAR file. Let's say that you have a directory structure as follows:\n</p>\n<p>\nC:\\MyProject\n</p>\n<table class=\"wiki\">\n<tr>index.jsp\n</tr></table>\n<table class=\"wiki\">\n<tr>WEB-INF\n</tr></table>\n<table class=\"wiki\">\n<tr>web.xml\n</tr></table>\n<table class=\"wiki\">\n<tr>classes\\org\\mypackage\n</tr></table>\n<table class=\"wiki\">\n<tr>MyClass                   .class\n</tr></table>\n<p>\nUse the following commands to create the WAR archive (under a DOS prompt). <br /><br />\n</p>\n<p>\n1) <strong>DOS:&gt;</strong> cd MyProject <br />   2) <strong>DOS:&gt;</strong>  jar cvf ..\\mywebapp.war *.*  <br /><br />\n</p>\n<p>\nThis will generate the WAR file (mywebapp.war) of MyProject in the top level of the WAR file.  Note that the WAR file is created outside the MyProject directory.\n</p>\n<hr />\n<p>\n<span id=\"JSP\"></span>\n</p>\n<h2 id=\"JSPexampleOptional\">JSP example (Optional)</h2>\n<p>\nDownload and install the <a class=\"attachment\" href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/jspTest.war\" title=\"Attachment 'jspTest.war' in cs122b-2016-spring-project2\">jspTest.war</a><a class=\"trac-rawlink\" href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/jspTest.war\" title=\"Download\">\u200b</a> file in a similar fashion to how you installed TomcatTest.war.  Checkout its directory structure. Read the index.jsp file and note where the mysql-connector-java-5.0.8-bin.jar file is stored.\n</p>\n<p>\nThen use your browser to open the link:\n</p>\n<blockquote>\n<p>\n<a class=\"ext-link\" href=\"http://localhost:8080/jspTest/index.jsp\"><span class=\"icon\">\u200b</span>http://localhost:8080/jspTest/index.jsp</a>\n</p>\n</blockquote>\n<p>\nwhich will activate the JSP page.  It will talk to your local MySQL database.\n</p>\n<p>\nTo learn more about JSP using examples, check:\n</p>\n<ul><li><a class=\"ext-link\" href=\"http://java.sun.com/products/jsp/html/jspbasics.fm.html\"><span class=\"icon\">\u200b</span>http://java.sun.com/products/jsp/html/jspbasics.fm.html</a>\n</li><li><a class=\"ext-link\" href=\"http://www.easywayserver.com/jsp/JSP-example.htm\"><span class=\"icon\">\u200b</span>http://www.easywayserver.com/jsp/JSP-example.htm</a>\n</li></ul><hr />\n<h2 id=\"Preparingthepackageforsubmission\">Preparing the package for submission</h2>\n<ol><li>Login to <a class=\"ext-link\" href=\"http://128.195.52.91:8080/cs122b\"><span class=\"icon\">\u200b</span>The Project Grading Website</a>  using your UCInetID and the 10-character password given to you in EEE.  Enter your group ID and check the page of project 2. Pay attention to  all the notes as they are highly important in grading. Even though the group page on that website is the same for all the members of a team, <strong>each member</strong> is required to login at least once and <strong>enter his/her group id</strong>.\n</li><li>Open SSH/port 22 and HTTP/port 8080 to this IP domain: 128.195.0.0/16 (i.e., this will allow all nodes whose IP start with 128.195 to send requests to your instance using <span class=\"underline\">SSH/port 22</span> or <span class=\"underline\">HTTP/port 8080</span>)\n</li><li>Add all related files to your application's root directory (i.e., normally, it should be <tt>/var/lib/tomcat7/webapps/fabflix/</tt>)\n</li><li>Make sure that there is no more changes to make <strong>anywhere</strong> under your application root directory. After this step, you should not make any more changes (in the time of grading, we will compare the content of your war file with what you have on your AWS instance: they should be identical).\n</li><li>See next section to create and upload a .war file of your application's root directory (i.e., mine is <tt>/var/lib/tomcat7/webapps/fabflix/</tt>).<br /><strong>Note 1:</strong> Use another clone of your codebase for working on the next project. <span class=\"underline\">Do not change the content of the fabflix Tomcat application</span>, until we announce this directory open again.<br /><strong>Note 2: </strong>While what you should upload to EEE should be called project2_[groupID].war, the project deployed on your AWS instance should be called fabflix, so the links be as we expect. Make sure you use relative paths in your codebase, so changing the name of your project doesn't break your links.\n</li></ol><hr />\n<h2 id=\"Deliverables\">Deliverables</h2>\n<p>\nPlease submit all the required files (*.class, *.jar, *.jsp, *.html etc) to run your program as WAR. In addition, include any  source files (*.java) under WEB-INF/sources.  Read the following   <a class=\"ext-link\" href=\"http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.wst.webtools.doc.user%2Ftopics%2Ftwcrewar.html\"><span class=\"icon\">\u200b</span>page</a>  to get information about how to create a WAR file.\n</p>\n<ul><li>Your submission \"war\" file should be named  \"project2_[groupID].war\". For example, the name of this war file should be <span class=\"underline\"><strong>project2_09.war</strong></span> for group 9.\n</li><li>The database name, db username, and the password (i.e., used in the JDBC parts of your code) should be whatever works in your AWS instance environment. \n</li><li>Prepare a README file detailing how to  compile your java sources (if any) and how to install the generated  class files. Following your instructions, we should be able to compile your Java Servlets (and other Java resources, if any) and use the generated class files in reloading your fabflix webapp. These instructions should be accessible using the link <a class=\"ext-link\" href=\"http://PUBLIC_IP:8080/fabflix/reports/readme\"><span class=\"icon\">\u200b</span>http://PUBLIC_IP:8080/fabflix/reports/readme</a>. If your project does not compile/run, it will get a very low score.\n</li></ul><hr />\n<p>\n<span id=\"Grading\"></span>\n</p>\n<h2 id=\"GradingCriteria\">Grading Criteria</h2>\n<ul><li><strong>Functionality: </strong> How the system is working, whether it fulfills all the project requirements.\n</li><li><strong>Design and Performance: </strong> You should be considerate in designing the server to make it efficient.  For instance, if cached results in the Web server are enough to answer a query, the Web server should not query the database server. Similarly, you should not send a query to the server to retrieve results not relevant to the current query or future queries. Your Web server is allowed to use a \"LIMIT OFFSET\" clause to talk to the database server to retrieve related records for each query.\n</li><li><strong>Error handling: </strong> When an exception occurs, the system shouldn't show it to the user. It should give \"appropriate\" error messages to the user in every unexpectable condition and provide information  about what she needs to do next. The system should never terminate.  When a system failure such as loss of connectivity occurs, it should  recover  itself. In that case, it should reconnect and the user shouldn't loose his/her information such as the items in his/her shopping cart.\n</li><li><strong>User interface: </strong> Whether it is user friendly enough and it provides a good interface which does not confuse the users. The UI counts for 10% of the total project grade.\n</li></ul></div>\n          \n          \n        \n        \n      </div>\n      \n    <div id=\"attachments\">\n        <h3 class=\"foldable\">Attachments <span class=\"trac-count\">(8)</span></h3>\n        <div>\n          <ul>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/jspTest.war\" title=\"View attachment\">jspTest.war</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/jspTest.war\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"523879 bytes\">511.6 KB</span>) -\n      added by <em>mahdi</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2016-04-04T20%3A25%3A19-07%3A00&amp;precision=second\" title=\"See timeline at Apr 4, 2016 8:25:19 PM\">4 years ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/TomcatForm.war\" title=\"View attachment\">TomcatForm.war</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/TomcatForm.war\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"617774 bytes\">603.3 KB</span>) -\n      added by <em>mahdi</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2016-04-04T20%3A25%3A59-07%3A00&amp;precision=second\" title=\"See timeline at Apr 4, 2016 8:25:59 PM\">4 years ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/Session.war\" title=\"View attachment\">Session.war</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/Session.war\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"97434 bytes\">95.2 KB</span>) -\n      added by <em>mahdi</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2016-04-04T20%3A26%3A12-07%3A00&amp;precision=second\" title=\"See timeline at Apr 4, 2016 8:26:12 PM\">4 years ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/ShowSession.java\" title=\"View attachment\">ShowSession.java</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/ShowSession.java\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"2462 bytes\">2.4 KB</span>) -\n      added by <em>mahdi</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2016-04-04T20%3A26%3A29-07%3A00&amp;precision=second\" title=\"See timeline at Apr 4, 2016 8:26:29 PM\">4 years ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/ShowItems.java\" title=\"View attachment\">ShowItems.java</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/ShowItems.java\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"1847 bytes\">1.8 KB</span>) -\n      added by <em>mahdi</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2016-04-04T20%3A26%3A46-07%3A00&amp;precision=second\" title=\"See timeline at Apr 4, 2016 8:26:46 PM\">4 years ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/SignatureReader.class\" title=\"View attachment\">SignatureReader.class</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/SignatureReader.class\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"1532 bytes\">1.5 KB</span>) -\n      added by <em>mahdi</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2016-04-04T20%3A29%3A12-07%3A00&amp;precision=second\" title=\"See timeline at Apr 4, 2016 8:29:12 PM\">4 years ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/TomcatTest.war\" title=\"View attachment\">TomcatTest.war</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/TomcatTest.war\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"618856 bytes\">604.4 KB</span>) -\n      added by <em>mahdi</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2016-04-04T20%3A30%3A42-07%3A00&amp;precision=second\" title=\"See timeline at Apr 4, 2016 8:30:42 PM\">4 years ago</a>.\n              </li>\n              <li>\n    <a href=\"/wiki/public/attachment/wiki/cs122b-2016-spring-project2/design-diagram.jpg\" title=\"View attachment\">design-diagram.jpg</a><a href=\"/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project2/design-diagram.jpg\" class=\"trac-rawlink\" title=\"Download\">\u200b</a>\n       (<span title=\"51484 bytes\">50.3 KB</span>) -\n      added by <em>jamshid</em> <a class=\"timeline\" href=\"/wiki/public/timeline?from=2016-04-05T10%3A25%3A02-07%3A00&amp;precision=second\" title=\"See timeline at Apr 5, 2016 10:25:02 AM\">4 years ago</a>.\n              </li>\n          </ul>\n          <p>\n            Download all attachments as: <a rel=\"nofollow\" href=\"/wiki/public/zip-attachment/wiki/cs122b-2016-spring-project2/\">.zip</a>\n          </p>\n        </div>\n    </div>\n\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"last first\">\n          <a rel=\"nofollow\" href=\"/wiki/public/wiki/cs122b-2016-spring-project2?version=10&amp;format=txt\">Plain Text</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>", "encoding": "utf-8"}