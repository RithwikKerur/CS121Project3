{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2018-winter-project1?version=11&format=txt", "content": "[[PageOutline]]\r\n\r\n= CS122B: Project 1 =\r\n'''Due: Week 2 Thursday, 1/18/2018, 11:45pm. Due on Github.'''[[BR]]\r\n\r\n= Tasks =\r\n 1. Create a MySQL database with provided movie info (on your development machine);\r\n 1. Setup Apache Tomcat (on your development machine);\r\n 1. Setup an Amazon AWS instance and repeat tasks 1-3 on the instance.\r\n 1. Join Github Organization and create a repo for your team.\r\n 1. Implement the Movie List, Single Movie, and Single star page of the Fablix Application\r\n\r\n----\r\n= Task 1: Create a MySQL Database =\r\n\r\n* Download a MySQL database for your development machine from [http://dev.mysql.com/downloads/mysql/ http://dev.mysql.com/downloads/mysql/];\r\n* Create a database called \"moviedb\" with the following tables:[[BR]]\r\n\r\n|| Table Name[[BR]] || Attributes[[BR]] || Notes ||\r\n|| movies[[BR]] || !id:integer (primary key)[[BR]] !title:varchar(100) [[BR]] !year:integer [[BR]] !director:varchar(100) [[BR]] !banner_url:varchar(200) [[BR]] !trailer_url:varchar(200) [[BR]] || required, AUTO_INCREMENT[[BR]] required [[BR]] required [[BR]] required [[BR]] URL of movie's \"poster\"; not required [[BR]] URL of trailer; not required ||\r\n|| stars[[BR]] || !id:integer (primary key)[[BR]] !first_name:varchar(50) [[BR]] !last_name:varchar(50) [[BR]] !dob:date [[BR]] !photo_url:varchar(200) [[BR]] || required, AUTO_INCREMENT[[BR]] required [[BR]] required [[BR]] not required[[BR]] not required ||\r\n|| stars_in_movies[[BR]] || !star_id:integer, referencing stars.id[[BR]] !movie_id:integer, referencing movies.id[[BR]] || all attributes required ||\r\n|| genres[[BR]] || !id:integer (primary key)[[BR]] !name:varchar(32) [[BR]] || all attributes required; \"id\" should be [[BR]]\"AUTO_INCREMENT\" ||\r\n|| genres_in_movies[[BR]] || !genre_id:integer, referencing genres.id[[BR]] !movie_id:integer, referencing movies.id[[BR]] || all attributes required ||\r\n|| customers[[BR]] || !id:integer (primary key)[[BR]] !first_name:varchar(50) [[BR]] !last_name:varchar(50) [[BR]] !cc_id:varchar(20), referencing creditcards.id[[BR]] !address:varchar(200) [[BR]] !email:varchar(50) [[BR]] !password:varchar(20) [[BR]] || all attributes required; \"id\" should be [[BR]]\"AUTO_INCREMENT\" ||\r\n|| sales[[BR]] || !id:integer (primary key)[[BR]]       !customer_id:integer, referencing customers.id[[BR]] !movie_id:integer, referencing movies.id[[BR]] !sale_date:date [[BR]] || all attributes required; \"id\" should be [[BR]]\"AUTO_INCREMENT\" ||\r\n|| creditcards[[BR]] || !id:varchar(20), (primary key)[[BR]] !first_name:varchar(50) [[BR]] !last_name:varchar(50) [[BR]] !expiration:date [[BR]] || all attributes required ||\r\n\r\nThe table-creation SQL statements should be written in a '''createtable.sql''' file.  All varchar() fields for which there is no data (i.e., the fields contents are missing or unknown) are the empty string (!''); other non-required fields which have no data are null. Required fields have the constraint that they are not null. [[BR]] [[BR]]\r\n\r\n* Use the provided [attachment:data.sql] file to populate the tables. \r\n\r\n= Task 2: Setup Apache Tomcat =\r\nDownload and install the latest Apache Tomcat 8.5.13 from https://tomcat.apache.org/download-80.cgi for your development machine.  Make sure to successfully setup the \"Tomcat Web Application Manager\" interface shown as below:\r\n\r\n[[Image(wiki:cs122b-2017-winter-project1:Apache-Tomcat-Application-Manager.jpg)]]\r\n\r\n= Task 2.5: Apache Tomcat Eclipse Integration (Optional but Recommended) =\r\nApache Tomcat makes hosting your applications easy. The Eclipse IDE makes development easy. Important: You may use Eclipse version 3.1 or higher or may opt to use Eclipse EE (EE stands for Enterprise Edition and has built-in support for application and web servers including Tomcat)\r\n\r\nEclipse Downloads:\r\n\r\n * [http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/neon2 Eclipse Standard Edition]\r\n * [http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/neon2 Eclipse EE Edition]\r\n\r\nThe following tutorial is a quick start guide and will help you set up your development environment in eclipse. ''Use Tomcat version 8.5.9 instead of the shown version in the tutorial''.     ''Note'': If you opt for Eclipse EE edition, you can skip the installation of Eclipse Web Tools Platform when following the quick start guide.\r\n\r\n * [http://www.mulesoft.com/tomcat-eclipse Apache Tomcat Eclipse Integration Quickstart Guide]\r\n\r\n= Task 3: Setup an AWS Instance to Repeat Tasks 1-2 =\r\n[[Span(id=setup-aws)]]You need to launch an Amazon [https://aws.amazon.com/console/ AWS instance] to repeat the tasks above. Make sure to use the '''free-tier 64-bit Ubuntu instances''' so that we can make our future instructions consistent. You are welcome to participate in the \u200b[https://aws.amazon.com/education/awseducate/ AWS Educate] program, which can provide $100 AWS credits per student. (I believe UCI is a member institution.)\r\n\r\nGenerally, similar to many other tasks in this quarter, we expect you to figure out how to do many tasks by reading online materials.  [https://aws.amazon.com/free/ This] link is a good place to start from.\r\n\r\n== Launch a free AWS instance ==\r\n 1. Go to [https://aws.amazon.com/console/ AWS Console] to sign up. You will need to enter a valid credit card. Don't worry; as long as you choose a free-tier instance and remove it after the end of the quarter, you will not be charged.\r\n 1. When you are done, login to the AWS console.\r\n 1. Launch a new '''Ubuntu 14.04''' free-tier '''t2.micro''' instance. Notice that you need to generate and download a key to ssh to the machine, and it may take a few minutes for the instance to be initialized.\r\n 1. After the instance is running, you will see a public IP address assigned to it. Keep this IP: you are required to give us this IP to demo project 1.\r\n 1. When viewing the list of instances, you can click on the \"connect\" button, on the top to get instructions on how to use SSH to connect to the instance. By default, only the SSH port, 22, is open. In order to get other services (e.g., HTTP, HTTPS, and Tomcat) to be available to other machines, you will need to open the corresponding ports. '''To do so, when the instance is checked, select the security group, go to the \"inbound\" tab, and add more rules'''.\r\n\r\n== Setup MySQL and !Apache/Tomcat on the AWS instance ==\r\nThis part assumes you have SSH access to the Ubuntu 14.04 AWS instance.\r\n\r\n 1. [https://www.linode.com/docs/databases/mysql/how-to-install-mysql-on-ubuntu-14-04 Install MySQL].\r\n 1. [https://help.ubuntu.com/lts/serverguide/httpd.html Install Apache Web server]. '''Open port 80'''.\r\n 1. [http://tecadmin.net/install-oracle-java-8-jdk-8-ubuntu-via-ppa/ Install Java] [[BR]]\r\n 1. [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2017-winter-project1-install-tomcat-on-aws Install Tomcat on AWS]. Setup its application app manager page and test it using the URL http://YOUR_PUBLIC_IP:8080/manager/html. '''Open port 8080'''. This part is a little tricky, so read the instructions carefully.\r\n\r\nOnce you finish these steps, repeat tasks 1 - 2 on this instance.\r\n\r\nHere are two cheat sheets of !Linux/Ubuntu commands:\r\n\r\n * http://cli.learncodethehardway.org/bash_cheat_sheet.pdf\r\n * http://www.cheat-sheets.org/saved-copy/ubunturef.pdf\r\n\r\n= Task 4: Join Github Organization and create a repo for your team. =\r\n'''TODO'''\r\n\r\n= Task 5: Implement the Movie List, Single Movie, and Single star page of the Fablix Application =\r\n\r\n[[Image(wiki:cs122b-2018-spring-project1:122b-project1-diagram.jpg)]]\r\n\r\n\r\n'''TODO'''\r\n\r\n= Grading Checklist =\r\nPlease refer to the [https://docs.google.com/spreadsheets/d/1oQLvvxpBaohmViu7h06F4KeEgL0vA3XnqnbHRwB_w1s/edit?usp=sharing grading checklist] before submitting your project. This checklist includes the items we are looking for to grade your projects. Notice that we reserve the right to make reasonable changes of this checklist. Thus, you should implement all the required features, and only use this checklist to make sure you don't miss anything.\r\n\r\n= Project Submission =\r\nPack all the required files in a single zip file to include the following:[[BR]]\r\n\r\n * All source code (*.java, *.sql, and so on, excluding binary files such as .class files and .exe files), this includes the SQL commands you issued to create the database and populate it.\r\n\r\n  '''   Each group will be assigned a unique group ID, which should be used to name your files and submission. In particular, your submission zip file should be named \"project1_[2-digt-groupid].zip\" For example, the file for group 9 should be \"project1_09.zip\". The submission should include at least one .sql file: createtable_[2-digt-groupid].sql (such as \"createtable_09.sql\" for group 09)  to include all the \"CREATE TABLE\" SQL statements.'''\r\n\r\n  '''   Each group MUST follow this naming requirement.'''\r\n\r\n  Those script files should be directly executable by being fed as input to the mysql command.[[BR]]\r\n\r\n  '''               mysql -u root -p -D moviedb <  createtable.sql'''               [[BR]]\r\n\r\n * '''The ssh private key file (.pem) of your AWS instance.''' [[BR]]\r\n * Makefiles and ant build files if you use make or ant to build you project. [[BR]]\r\n * A readme file specifying how to compile and run your program\r\n * '''Note:''' Checking constraints is '''not''' a requirement of the project.\r\n\r\nIf your project does not compile or if your SQL scripts generate errors such a project will get a very low score if any. [[BR]]\r\n\r\nLogin onto EEE using your UCInetID. Under our course COMPSCI 122B, click Dropbox. Under Folder View, click CS122B Proj 1/Assignment Submission. Upload your zip file there. Please notice that after the deadline you will not be able to upload your files to the system any more.\r\n\r\n= Demonstration =\r\n'''You are required to demonstrate  this project'''. Create a running system from your ZIP file\u2013quickly. Show the correctness, completeness, functionality and performance of your database during your demonstration by using the employee interface developed here. Your task is to convince us '''(in 15 minutes)''' that your work is correctly and completely carried out and the course project is ready to move to phase 2. Your demo will include the following:\r\n\r\na) Setup your application '''using the files you submitted on EEE'''. The TA/grader will upload these files on your PC. You must have already installed MySQL.\r\n\r\nb) Demonstrate that your '''''creatable.sql''''' file creates a valid database. Since execution of the '''''data.sql''''' can take too long, you should have already setup a database and populate it. This database will be the one accessed by your demonstrated JDBC program. Thus, '''''creatable.sql''''' will be executed for a  database under a different name and get populated by executing '''''data.sql''''', while you are demonstrating other parts of the project.\r\n\r\nc) Demonstrate the correctness, completeness, and performance of all the required features.\r\n\r\nd) Last but not least, entering YOUR_PUBLIC_[IP:8080 IP:8080] on your AWS instance should show us the Tomcat application manager, which confirms that you are running Tomcat on the AWS instance. Additionally, the TA/Reader may want to use his username (with the password that you provide) to access the instance through SSH.\r\n\r\nPlease note that '''you will have no more than 15 min to demonstrate'''.  It is completely up to you to plan your demo so that all the required features are displayed and the grader  can be convinced of the quality of your work in the given time frame.''' If a group's demonstration appears to be unstructured, the demo could be aborted and rescheduled for another time''' with a substantial '''grade penalty'''.\r\n\r\nDemonstration schedule will be posted later.", "encoding": "utf-8"}