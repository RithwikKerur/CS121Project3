{"url": "https://grape.ics.uci.edu/wiki/public/raw-attachment/wiki/cs222-2019-fall-project2/Project2.2.patch", "content": "From 112cfbdb598b2f593369695891967535182fca76 Mon Sep 17 00:00:00 2001\nFrom: Yicong-Huang <hyc541978023@gmail.com>\nDate: Mon, 7 Oct 2019 09:16:34 -0700\nSubject: [PATCH] Project 2\n\n---\n .gitignore                 |   8 +-\n CMakeLists.txt             |  12 +-\n README.md                  |  48 ++++-\n project2_report.txt        |  40 ++++\n rbf/makefile               |   8 +-\n rbf/rbftest_delete.cc      | 159 ++++++++++++++\n rbf/rbftest_update.cc      | 159 ++++++++++++++\n rm/makefile                |  66 ++++++\n rm/rm.cc                   |  83 +++++++\n rm/rm.h                    |  77 +++++++\n rm/rm_test_util.h          | 431 +++++++++++++++++++++++++++++++++++++\n rm/rmtest_00.cc            |  26 +++\n rm/rmtest_01.cc            |  62 ++++++\n rm/rmtest_02.cc            |  61 ++++++\n rm/rmtest_03.cc            |  75 +++++++\n rm/rmtest_04.cc            |  55 +++++\n rm/rmtest_05.cc            |  69 ++++++\n rm/rmtest_06.cc            |  69 ++++++\n rm/rmtest_07.cc            |  53 +++++\n rm/rmtest_08.cc            |  53 +++++\n rm/rmtest_09.cc            |  58 +++++\n rm/rmtest_10.cc            |  72 +++++++\n rm/rmtest_11.cc            |  44 ++++\n rm/rmtest_12.cc            |  70 ++++++\n rm/rmtest_13.cc            |  78 +++++++\n rm/rmtest_13b.cc           | 122 +++++++++++\n rm/rmtest_14.cc            |  69 ++++++\n rm/rmtest_15.cc            |  72 +++++++\n rm/rmtest_create_tables.cc |  41 ++++\n rm/rmtest_delete_tables.cc |  35 +++\n rm/rmtest_extra_1.cc       |  84 ++++++++\n rm/rmtest_extra_2.cc       |  76 +++++++\n 32 files changed, 2420 insertions(+), 15 deletions(-)\n create mode 100755 project2_report.txt\n create mode 100644 rbf/rbftest_delete.cc\n create mode 100644 rbf/rbftest_update.cc\n create mode 100644 rm/makefile\n create mode 100755 rm/rm.cc\n create mode 100755 rm/rm.h\n create mode 100644 rm/rm_test_util.h\n create mode 100644 rm/rmtest_00.cc\n create mode 100644 rm/rmtest_01.cc\n create mode 100644 rm/rmtest_02.cc\n create mode 100644 rm/rmtest_03.cc\n create mode 100644 rm/rmtest_04.cc\n create mode 100644 rm/rmtest_05.cc\n create mode 100644 rm/rmtest_06.cc\n create mode 100644 rm/rmtest_07.cc\n create mode 100644 rm/rmtest_08.cc\n create mode 100644 rm/rmtest_09.cc\n create mode 100644 rm/rmtest_10.cc\n create mode 100644 rm/rmtest_11.cc\n create mode 100644 rm/rmtest_12.cc\n create mode 100644 rm/rmtest_13.cc\n create mode 100644 rm/rmtest_13b.cc\n create mode 100644 rm/rmtest_14.cc\n create mode 100644 rm/rmtest_15.cc\n create mode 100644 rm/rmtest_create_tables.cc\n create mode 100644 rm/rmtest_delete_tables.cc\n create mode 100644 rm/rmtest_extra_1.cc\n create mode 100644 rm/rmtest_extra_2.cc\n\ndiff --git a/.gitignore b/.gitignore\nindex d99efa9..c3df579 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -29,4 +29,10 @@\n # Executables\n *.exe\n *.out\n-*.app\n\\ No newline at end of file\n+*.app\n+\n+# Project files\n+tbl_*\n+Tables\n+Columns\n+*_file\n\\ No newline at end of file\ndiff --git a/CMakeLists.txt b/CMakeLists.txt\nindex 61383a2..4063fba 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -1,10 +1,10 @@\n-cmake_minimum_required(VERSION 3.14)\n+cmake_minimum_required(VERSION 2.8)\n project(cs222_fall19)\n \n set(CMAKE_CXX_STANDARD 11)\n \n add_custom_target(clean-all\n-        COMMAND rm Index* Indices* left* right* large* group* *out Tables Columns tbl_*)\n+        COMMAND rm Index* Indices* left* right* large* group* *out Tables Columns tbl_* *_file)\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address -O1 -g  -fno-omit-frame-pointer\")\n if (CMAKE_BUILD_TYPE MATCHES Debug)\n     add_definitions(-DDEBUG=1)\n@@ -13,6 +13,7 @@ endif()\n \n add_library(PFM ./rbf/pfm.cc)\n add_library(RBFM ./rbf/rbfm.cc)\n+add_library(RM ./rm/rm.cc ${RBFM})\n \n \n file(GLOB files rbf/rbftest*.cc)\n@@ -20,4 +21,11 @@ foreach(file ${files})\n     get_filename_component(name ${file} NAME_WE)\n     add_executable(${name} ${file})\n     target_link_libraries(${name} RBFM PFM)\n+endforeach()\n+\n+file(GLOB files rm/rmtest_*.cc)\n+foreach(file ${files})\n+    get_filename_component(name ${file} NAME_WE)\n+    add_executable(${name} ${file})\n+    target_link_libraries(${name} RM RBFM PFM)\n endforeach()\n\\ No newline at end of file\ndiff --git a/README.md b/README.md\nindex 05dbdbc..4b35ce0 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,5 +1,4 @@\n-By default you should not change those functions of the PagedFileManager,\n-FileHandle, and RecordBasedFileManager classes defined in rbf/pfm.h and rbf/rbfm.h.\n+By default you should not change those functions of pre-defined in the given .h files.\n If you think some changes are really necessary, please contact us first.\n \n If you are not using CLion and want to use command line make tool:\n@@ -7,17 +6,46 @@ If you are not using CLion and want to use command line make tool:\n  - Modify the \"CODEROOT\" variable in makefile.inc to point to the root\n   of your code base if you can't compile the code.\n  \n- - Implement the Record-based Files (RBF) Component:\n-\n-   Go to folder \"rbf\" and type in:\n-\n+ - Finish the Record-based Files (RBF) Component:\n+   \n+   Go to folder \"rbf\" and test in the following order:\n    ```\n    make clean\n    make\n-   ./rbftest_01         \n+   ./rbftest_update\n+   ./rbftest_delete\n    ```\n+  \n+ - and then implement the Relation Manager (RM):\n+\n+   Go to folder \"rm\" and test in the following order:\n \n+   ```\n+   make clean\n+   make      \n+   ./rmtest_create_tables\n+   ./rmtest_00   \n+   ./rmtest_01  \n+   ./rmtest_02\n+   ./rmtest_03\n+   ./rmtest_04\n+   ./rmtest_05\n+   ./rmtest_06\n+   ./rmtest_07\n+   ./rmtest_08\n+   ./rmtest_09\n+   ./rmtest_10\n+   ./rmtest_11\n+   ./rmtest_12\n+   ./rmtest_13\n+   ./rmtest_13b\n+   ./rmtest_14\n+   ./rmtest_15\n+   ./rmtest_extra_1\n+   ./rmtest_extra_2\n+   \n+   ```\n \n-   The program should run. But it will generates an error. You are supposed to\n-   implement the API of the paged file manager defined in pfm.h and some\n-   of the methods in rbfm.h as explained in the project description.\n\\ No newline at end of file\n+   The program should run. But initially it will generates an error. You are supposed to\n+   implement the API of the rest of the methods in rbfm.h and methods in rm.h as explained \n+   in the project description.\n\\ No newline at end of file\ndiff --git a/project2_report.txt b/project2_report.txt\nnew file mode 100755\nindex 0000000..3e1c7af\n--- /dev/null\n+++ b/project2_report.txt\n@@ -0,0 +1,40 @@\n+1. Basic information\n+Team number (e.g., 01):\n+#1 Student ID:\n+#1 Student Name:\n+#2 Student ID:\n+#2 Student Name:\n+OS (bit):\n+gcc version:\n+\n+\n+2. Meta-data\n+- Show your meta-data design (Tables and Columns table) and information about each column.\n+\n+\n+3. Internal Record Format\n+- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that your team hasn't implemented this feature.\n+\n+- Describe how you store a VarChar field.\n+\n+- Describe how you deal with an update and delete.\n+\n+\n+4. Page Format\n+- Show your page format design.\n+\n+- Describe how you deal with an update and delete.\n+\n+- Show your page format design\n+\n+\n+5. File Format\n+- Show your file format design\n+\n+\n+6. Implementation Detail\n+- Other implementation details goes here.\n+\n+\n+7. Other (optional)\n+- Freely use this section to tell us about things that are related to the project 2, but not related to the other sections (optional)\n\\ No newline at end of file\ndiff --git a/rbf/makefile b/rbf/makefile\nindex a1380e1..33a00c1 100644\n--- a/rbf/makefile\n+++ b/rbf/makefile\n@@ -1,6 +1,6 @@\n include ../makefile.inc\n \n-all: librbf.a rbftest_01 rbftest_02 rbftest_03 rbftest_04 rbftest_05 rbftest_06 rbftest_07 rbftest_08 rbftest_08b rbftest_09 rbftest_10 rbftest_11 rbftest_12\n+all: librbf.a rbftest_01 rbftest_02 rbftest_03 rbftest_04 rbftest_05 rbftest_06 rbftest_07 rbftest_08 rbftest_08b rbftest_09 rbftest_10 rbftest_11 rbftest_12 rbftest_update rbftest_delete\n \n # c file dependencies\n pfm.o: pfm.h\n@@ -23,6 +23,8 @@ rbftest_09.o: pfm.h rbfm.h\n rbftest_10.o: pfm.h rbfm.h\n rbftest_11.o: pfm.h rbfm.h\n rbftest_12.o: pfm.h rbfm.h\n+rbftest_update.o: pfm.h rbfm.h\n+rbftest_delete.o: pfm.h rbfm.h\n \n # binary dependencies\n rbftest_01: rbftest_01.o librbf.a $(CODEROOT)/rbf/librbf.a\n@@ -38,6 +40,8 @@ rbftest_09: rbftest_09.o librbf.a $(CODEROOT)/rbf/librbf.a\n rbftest_10: rbftest_10.o librbf.a $(CODEROOT)/rbf/librbf.a\n rbftest_11: rbftest_11.o librbf.a $(CODEROOT)/rbf/librbf.a\n rbftest_12: rbftest_12.o librbf.a $(CODEROOT)/rbf/librbf.a\n+rbftest_update: rbftest_update.o librbf.a $(CODEROOT)/rbf/librbf.a\n+rbftest_delete: rbftest_delete.o librbf.a $(CODEROOT)/rbf/librbf.a\n \n # dependencies to compile used libraries\n .PHONY: $(CODEROOT)/rbf/librbf.a\n@@ -46,4 +50,4 @@ $(CODEROOT)/rbf/librbf.a:\n \n .PHONY: clean\n clean:\n-\t-rm rbftest_01 rbftest_02 rbftest_03 rbftest_04 rbftest_05 rbftest_06 rbftest_07 rbftest_08 rbftest_08b rbftest_09 rbftest_10 rbftest_11 rbftest_12 *.a *.o *~ \n+\t-rm rbftest_01 rbftest_02 rbftest_03 rbftest_04 rbftest_05 rbftest_06 rbftest_07 rbftest_08 rbftest_08b rbftest_09 rbftest_10 rbftest_11 rbftest_12 rbftest_update rbftest_delete *.a *.o *~\ndiff --git a/rbf/rbftest_delete.cc b/rbf/rbftest_delete.cc\nnew file mode 100644\nindex 0000000..df0f197\n--- /dev/null\n+++ b/rbf/rbftest_delete.cc\n@@ -0,0 +1,159 @@\n+#include <iostream>\n+#include <cassert>\n+#include <cstdlib>\n+#include <cstring>\n+#include <stdexcept>\n+#include <cstdio>\n+\n+#include \"pfm.h\"\n+#include \"rbfm.h\"\n+#include \"test_util.h\"\n+\n+int RBFTest_Delete(RecordBasedFileManager &rbfm) {\n+    // Functions tested\n+    // 1. Create Record-Based File\n+    // 2. Open Record-Based File\n+    // 3. Insert Record (3)\n+    // 4. Delete Record (1)\n+    // 5. Read Record\n+    // 6. Close Record-Based File\n+    // 7. Destroy Record-Based File\n+    std::cout << std::endl << \"***** In RBF Test Case Delete *****\" << std::endl;\n+\n+    RC rc;\n+    std::string fileName = \"test_delete\";\n+\n+    rc = rbfm.createFile(fileName);\n+    assert(rc == success && \"Creating the file should not fail.\");\n+\n+    rc = createFileShouldSucceed(fileName);\n+    assert(rc == success && \"Creating the file should not fail.\");\n+\n+    // Open the file\n+    FileHandle fileHandle;\n+    rc = rbfm.openFile(fileName, fileHandle);\n+    assert(rc == success && \"Opening the file should not fail.\");\n+\n+    RID rid;\n+    int recordSize = 0;\n+    void *record = malloc(100);\n+    void *returnedData = malloc(100);\n+\n+    std::vector<Attribute> recordDescriptor;\n+    createRecordDescriptor(recordDescriptor);\n+\n+    // Initialize a NULL field indicator\n+    int nullFieldsIndicatorActualSize = getActualByteForNullsIndicator(recordDescriptor.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullFieldsIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullFieldsIndicatorActualSize);\n+\n+    // Insert a record into a file and print the record\n+    prepareRecord(recordDescriptor.size(), nullsIndicator, 8, \"Testcase\", 25, 177.8, 6200, record,\n+                  &recordSize);\n+    std::cout << std::endl << \"Inserting Data:\" << std::endl;\n+    rbfm.printRecord(recordDescriptor, record);\n+\n+    rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);\n+    assert(rc == success && \"Inserting a record should not fail.\");\n+    // save the returned RID\n+    RID rid0 = rid;\n+    std::cout << std::endl;\n+\n+    memset(nullsIndicator, 0, nullFieldsIndicatorActualSize);\n+\n+    // Insert a record into a file and print the record\n+\n+    nullsIndicator[0] = 128;\n+    prepareRecord(recordDescriptor.size(), nullsIndicator, 0, \"\", 25, 177.8, 6200, record,\n+                  &recordSize);\n+    std::cout << std::endl << \"Inserting Data:\" << std::endl;\n+    rbfm.printRecord(recordDescriptor, record);\n+\n+    rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);\n+    assert(rc == success && \"Inserting a record should not fail.\");\n+    // save the returned RID\n+    RID rid1 = rid;\n+\n+    std::cout << std::endl << \"Inserting Data:\" << std::endl;\n+    rbfm.printRecord(recordDescriptor, record);\n+\n+    rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);\n+    assert(rc == success && \"Inserting a record should not fail.\");\n+\n+    std::cout << std::endl << \"Inserting Data:\" << std::endl;\n+    rbfm.printRecord(recordDescriptor, record);\n+\n+    rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);\n+\n+    assert(rc == success && \"Inserting a record should not fail.\");\n+\n+    rc = rbfm.deleteRecord(fileHandle, recordDescriptor, rid0);\n+    assert(rc == success && \"Deleting a record should not fail.\");\n+\n+    rc = rbfm.readRecord(fileHandle, recordDescriptor, rid0, returnedData);\n+    assert(rc != success && \"Reading a deleted record should fail.\");\n+\n+    // Given the rid, read the record from file\n+    rc = rbfm.readRecord(fileHandle, recordDescriptor, rid1, returnedData);\n+    assert(rc == success && \"Reading a record should not fail.\");\n+\n+    std::cout << std::endl << \"Returned Data:\" << std::endl;\n+    rbfm.printRecord(recordDescriptor, returnedData);\n+\n+    // Compare whether the two memory blocks are the same\n+    if (memcmp(record, returnedData, recordSize) != 0) {\n+        std::cout << \"[FAIL] Test Case Delete Failed!\" << std::endl << std::endl;\n+        free(record);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return -1;\n+    }\n+\n+    rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);\n+    assert(rc == success && \"Inserting a record should not fail.\");\n+    assert(rid.slotNum == rid0.slotNum && \"Inserted record should use previous deleted slot.\");\n+\n+    // Given the rid, read the record from file\n+    rc = rbfm.readRecord(fileHandle, recordDescriptor, rid, returnedData);\n+    assert(rc == success && \"Reading a record should not fail.\");\n+\n+    std::cout << std::endl << \"Returned Data:\" << std::endl;\n+    rbfm.printRecord(recordDescriptor, returnedData);\n+\n+    // Compare whether the two memory blocks are the same\n+    if (memcmp(record, returnedData, recordSize) != 0) {\n+        std::cout << \"[FAIL] Test Case Delete Failed!\" << std::endl << std::endl;\n+        free(record);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return -1;\n+    }\n+\n+    std::cout << std::endl;\n+\n+    // Close the file\n+    rc = rbfm.closeFile(fileHandle);\n+    assert(rc == success && \"Closing the file should not fail.\");\n+\n+    // Destroy the file\n+    rc = rbfm.destroyFile(fileName);\n+    assert(rc == success && \"Destroying the file should not fail.\");\n+\n+    rc = destroyFileShouldSucceed(fileName);\n+    assert(rc == success && \"Destroying the file should not fail.\");\n+\n+    free(record);\n+    free(returnedData);\n+    free(nullsIndicator);\n+\n+    std::cout << \"RBF Test Case Delete Finished! The result will be examined.\" << std::endl << std::endl;\n+\n+    return 0;\n+}\n+\n+int main() {\n+    // To test the functionality of the record-based file manager\n+    remove(\"test_delete\");\n+\n+    return RBFTest_Delete(RecordBasedFileManager::instance());\n+}\n\\ No newline at end of file\ndiff --git a/rbf/rbftest_update.cc b/rbf/rbftest_update.cc\nnew file mode 100644\nindex 0000000..1f8f3ac\n--- /dev/null\n+++ b/rbf/rbftest_update.cc\n@@ -0,0 +1,159 @@\n+#include <iostream>\n+#include <cassert>\n+#include <cstdlib>\n+#include <cstring>\n+#include <stdexcept>\n+#include <cstdio>\n+\n+#include \"pfm.h\"\n+#include \"rbfm.h\"\n+#include \"test_util.h\"\n+\n+void *record = malloc(2000);\n+void *returnedData = malloc(2000);\n+std::vector<Attribute> recordDescriptor;\n+unsigned char *nullsIndicator = NULL;\n+FileHandle fileHandle;\n+\n+void readRecord(RecordBasedFileManager &rbfm, const RID &rid, const std::string &str) {\n+    int recordSize;\n+    prepareRecord(recordDescriptor.size(), nullsIndicator, str.length(), str, 25, 177.8, 6200,\n+                  record, &recordSize);\n+\n+    RC rc = rbfm.readRecord(fileHandle, recordDescriptor, rid, returnedData);\n+    assert(rc == success && \"Reading a record should not fail.\");\n+\n+    // Compare whether the two memory blocks are the same\n+    assert(memcmp(record, returnedData, recordSize) == 0 && \"Returned Data should be the same\");\n+}\n+\n+void insertRecord(RecordBasedFileManager &rbfm, RID &rid, const std::string &str) {\n+    int recordSize;\n+    prepareRecord(recordDescriptor.size(), nullsIndicator, str.length(), str, 25, 177.8, 6200,\n+                  record, &recordSize);\n+\n+    RC rc = rbfm.insertRecord(fileHandle, recordDescriptor, record, rid);\n+    assert(rc == success && \"Inserting a record should not fail.\");\n+\n+}\n+\n+void updateRecord(RecordBasedFileManager &rbfm, RID &rid, const std::string& str) {\n+    int recordSize;\n+    prepareRecord(recordDescriptor.size(), nullsIndicator, str.length(), str, 25, 177.8, 6200,\n+                  record, &recordSize);\n+\n+    RC rc = rbfm.updateRecord(fileHandle, recordDescriptor, record, rid);\n+    assert(rc == success && \"Updating a record should not fail.\");\n+\n+}\n+\n+int RBFTest_Update(RecordBasedFileManager &rbfm) {\n+    // Functions tested\n+    // 1. Create Record-Based File\n+    // 2. Open Record-Based File\n+    // 3. Insert Record\n+    // 4. Read Record\n+    // 5. Close Record-Based File\n+    // 6. Destroy Record-Based File\n+    std::cout << std::endl << \"***** In RBF Test Case Update *****\" << std::endl;\n+\n+    RC rc;\n+    std::string fileName = \"test_update\";\n+\n+    // Create a file\n+    rc = rbfm.createFile(fileName);\n+    assert(rc == success && \"Creating the file should not fail.\");\n+\n+    rc = createFileShouldSucceed(fileName);\n+    assert(rc == success && \"Creating the file should not fail.\");\n+\n+    // Open the file\n+    rc = rbfm.openFile(fileName, fileHandle);\n+    assert(rc == success && \"Opening the file should not fail.\");\n+\n+    RID rid;\n+    createRecordDescriptor(recordDescriptor);\n+    recordDescriptor[0].length = (AttrLength) 1000;\n+\n+    std::string longStr;\n+    for (int i = 0; i < 1000; i++) {\n+        longStr.push_back('a');\n+    }\n+\n+    std::string shortStr;\n+    for (int i = 0; i < 10; i++) {\n+        shortStr.push_back('s');\n+    }\n+\n+    std::string midString;\n+    for (int i = 0; i < 100; i++) {\n+        midString.push_back('m');\n+    }\n+\n+    // Initialize a NULL field indicator\n+    int nullFieldsIndicatorActualSize = getActualByteForNullsIndicator(recordDescriptor.size());\n+    nullsIndicator = (unsigned char *) malloc(nullFieldsIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullFieldsIndicatorActualSize);\n+\n+    // Insert short record\n+    insertRecord(rbfm, rid, shortStr);\n+    RID shortRID = rid;\n+\n+    // Insert mid record\n+    insertRecord(rbfm, rid, midString);\n+    RID midRID = rid;\n+\n+    // Insert long record\n+    insertRecord(rbfm, rid, longStr);\n+\n+    // update short record\n+    updateRecord(rbfm, shortRID, midString);\n+\n+    //read updated short record and verify its content\n+    readRecord(rbfm, shortRID, midString);\n+\n+    // insert two more records\n+    insertRecord(rbfm, rid, longStr);\n+    insertRecord(rbfm, rid, longStr);\n+\n+    // read mid record and verify its content\n+    readRecord(rbfm, midRID, midString);\n+\n+    // update short record\n+    updateRecord(rbfm, shortRID, longStr);\n+\n+    // read the short record and verify its content\n+    readRecord(rbfm, shortRID, longStr);\n+\n+    // delete the short record\n+    rbfm.deleteRecord(fileHandle, recordDescriptor, shortRID);\n+\n+    // verify the short record has been deleted\n+    rc = rbfm.readRecord(fileHandle, recordDescriptor, shortRID, returnedData);\n+\n+    assert(rc != success && \"Read a deleted record should not success.\");\n+\n+    rc = rbfm.closeFile(fileHandle);\n+    assert(rc == success && \"Closing the file should not fail.\");\n+\n+    // Destroy the file\n+    rc = rbfm.destroyFile(fileName);\n+    assert(rc == success && \"Destroying the file should not fail.\");\n+\n+    rc = destroyFileShouldSucceed(fileName);\n+    assert(rc == success && \"Destroying the file should not fail.\");\n+\n+    free(record);\n+    free(returnedData);\n+    free(nullsIndicator);\n+\n+    std::cout << \"RBF Test Case Update Finished! The result will be examined.\" << std::endl << std::endl;\n+\n+    return 0;\n+}\n+\n+int main() {\n+    // To test the functionality of the record-based file manager\n+    remove(\"test_update\");\n+    return RBFTest_Update(RecordBasedFileManager::instance());\n+}\n\\ No newline at end of file\ndiff --git a/rm/makefile b/rm/makefile\nnew file mode 100644\nindex 0000000..badcd2b\n--- /dev/null\n+++ b/rm/makefile\n@@ -0,0 +1,66 @@\n+include ../makefile.inc\n+\n+all: librm.a rmtest_create_tables rmtest_delete_tables rmtest_00 rmtest_01 rmtest_02 rmtest_03 rmtest_04 rmtest_05 rmtest_06 rmtest_07 rmtest_08 rmtest_09 rmtest_10 rmtest_11 rmtest_12 rmtest_13 rmtest_13b rmtest_14 rmtest_15 rmtest_extra_1 rmtest_extra_2\n+\n+# lib file dependencies\n+librm.a: librm.a(rm.o)  # and possibly other .o files\n+\n+# c file dependencies\n+rm.o: rm.h\n+\n+rmtest_00.o: rm.h rm_test_util.h\n+rmtest_01.o: rm.h rm_test_util.h\n+rmtest_02.o: rm.h rm_test_util.h\n+rmtest_03.o: rm.h rm_test_util.h\n+rmtest_04.o: rm.h rm_test_util.h\n+rmtest_05.o: rm.h rm_test_util.h\n+rmtest_06.o: rm.h rm_test_util.h\n+rmtest_07.o: rm.h rm_test_util.h\n+rmtest_08.o: rm.h rm_test_util.h\n+rmtest_09.o: rm.h rm_test_util.h\n+rmtest_10.o: rm.h rm_test_util.h\n+rmtest_11.o: rm.h rm_test_util.h\n+rmtest_12.o: rm.h rm_test_util.h\n+rmtest_13.o: rm.h rm_test_util.h\n+rmtest_13b.o: rm.h rm_test_util.h\n+rmtest_14.o: rm.h rm_test_util.h\n+rmtest_15.o: rm.h rm_test_util.h\n+rmtest_extra_1.o: rm.h rm_test_util.h\n+rmtest_extra_2.o: rm.h rm_test_util.h\n+rmtest_create_tables.o: rm.h rm_test_util.h\n+rmtest_delete_tables.o: rm.h rm_test_util.h\n+\n+# binary dependencies\n+rmtest_create_tables: rmtest_create_tables.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_delete_tables: rmtest_delete_tables.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_00: rmtest_00.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_01: rmtest_01.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_02: rmtest_02.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_03: rmtest_03.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_04: rmtest_04.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_05: rmtest_05.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_06: rmtest_06.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_07: rmtest_07.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_08: rmtest_08.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_09: rmtest_09.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_10: rmtest_10.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_11: rmtest_11.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_12: rmtest_12.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_13: rmtest_13.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_13b: rmtest_13b.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_14: rmtest_14.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_15: rmtest_15.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_extra_1: rmtest_extra_1.o librm.a $(CODEROOT)/rbf/librbf.a\n+rmtest_extra_2: rmtest_extra_2.o librm.a $(CODEROOT)/rbf/librbf.a\n+\n+# dependencies to compile used libraries\n+.PHONY: $(CODEROOT)/rbf/librbf.a\n+$(CODEROOT)/rbf/librbf.a:\n+\t$(MAKE) -C $(CODEROOT)/rbf librbf.a\n+\n+\n+.PHONY: clean\n+clean:\n+\t-rm rmtest_create_tables rmtest_delete_tables rmtest_00 rmtest_01 rmtest_02 rmtest_03 rmtest_04 rmtest_05 rmtest_06 rmtest_07 rmtest_08 rmtest_09 rmtest_10 rmtest_11 rmtest_12 rmtest_13 rmtest_13b rmtest_14 rmtest_15 rmtest_extra_1 rmtest_extra_2 *.a *.o *~ tbl_* Tables Columns rids_file sizes_file\n+\n+\t$(MAKE) -C $(CODEROOT)/rbf clean\n\\ No newline at end of file\ndiff --git a/rm/rm.cc b/rm/rm.cc\nnew file mode 100755\nindex 0000000..cc7aa80\n--- /dev/null\n+++ b/rm/rm.cc\n@@ -0,0 +1,83 @@\n+#include \"rm.h\"\n+\n+RelationManager *RelationManager::_relation_manager = nullptr;\n+\n+RelationManager &RelationManager::instance() {\n+    static RelationManager _relation_manager = RelationManager();\n+    return _relation_manager;\n+}\n+\n+RelationManager::RelationManager() = default;\n+\n+RelationManager::~RelationManager() { delete _relation_manager; }\n+\n+RelationManager::RelationManager(const RelationManager &) = default;\n+\n+RelationManager &RelationManager::operator=(const RelationManager &) = default;\n+\n+RC RelationManager::createCatalog() {\n+    return -1;\n+}\n+\n+RC RelationManager::deleteCatalog() {\n+    return -1;\n+}\n+\n+RC RelationManager::createTable(const std::string &tableName, const std::vector<Attribute> &attrs) {\n+    return -1;\n+}\n+\n+RC RelationManager::deleteTable(const std::string &tableName) {\n+    return -1;\n+}\n+\n+RC RelationManager::getAttributes(const std::string &tableName, std::vector<Attribute> &attrs) {\n+    return -1;\n+}\n+\n+RC RelationManager::insertTuple(const std::string &tableName, const void *data, RID &rid) {\n+    return -1;\n+}\n+\n+RC RelationManager::deleteTuple(const std::string &tableName, const RID &rid) {\n+    return -1;\n+}\n+\n+RC RelationManager::updateTuple(const std::string &tableName, const void *data, const RID &rid) {\n+    return -1;\n+}\n+\n+RC RelationManager::readTuple(const std::string &tableName, const RID &rid, void *data) {\n+    return -1;\n+}\n+\n+RC RelationManager::printTuple(const std::vector<Attribute> &attrs, const void *data) {\n+    return -1;\n+}\n+\n+RC RelationManager::readAttribute(const std::string &tableName, const RID &rid, const std::string &attributeName,\n+                                  void *data) {\n+    return -1;\n+}\n+\n+RC RelationManager::scan(const std::string &tableName,\n+                         const std::string &conditionAttribute,\n+                         const CompOp compOp,\n+                         const void *value,\n+                         const std::vector<std::string> &attributeNames,\n+                         RM_ScanIterator &rm_ScanIterator) {\n+    return -1;\n+}\n+\n+// Extra credit work\n+RC RelationManager::dropAttribute(const std::string &tableName, const std::string &attributeName) {\n+    return -1;\n+}\n+\n+// Extra credit work\n+RC RelationManager::addAttribute(const std::string &tableName, const Attribute &attr) {\n+    return -1;\n+}\n+\n+\n+\ndiff --git a/rm/rm.h b/rm/rm.h\nnew file mode 100755\nindex 0000000..a2d00db\n--- /dev/null\n+++ b/rm/rm.h\n@@ -0,0 +1,77 @@\n+#ifndef _rm_h_\n+#define _rm_h_\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"../rbf/rbfm.h\"\n+\n+# define RM_EOF (-1)  // end of a scan operator\n+\n+// RM_ScanIterator is an iterator to go through tuples\n+class RM_ScanIterator {\n+public:\n+    RM_ScanIterator() = default;\n+\n+    ~RM_ScanIterator() = default;\n+\n+    // \"data\" follows the same format as RelationManager::insertTuple()\n+    RC getNextTuple(RID &rid, void *data) { return RM_EOF; };\n+\n+    RC close() { return -1; };\n+};\n+\n+// Relation Manager\n+class RelationManager {\n+public:\n+    static RelationManager &instance();\n+\n+    RC createCatalog();\n+\n+    RC deleteCatalog();\n+\n+    RC createTable(const std::string &tableName, const std::vector<Attribute> &attrs);\n+\n+    RC deleteTable(const std::string &tableName);\n+\n+    RC getAttributes(const std::string &tableName, std::vector<Attribute> &attrs);\n+\n+    RC insertTuple(const std::string &tableName, const void *data, RID &rid);\n+\n+    RC deleteTuple(const std::string &tableName, const RID &rid);\n+\n+    RC updateTuple(const std::string &tableName, const void *data, const RID &rid);\n+\n+    RC readTuple(const std::string &tableName, const RID &rid, void *data);\n+\n+    // Print a tuple that is passed to this utility method.\n+    // The format is the same as printRecord().\n+    RC printTuple(const std::vector<Attribute> &attrs, const void *data);\n+\n+    RC readAttribute(const std::string &tableName, const RID &rid, const std::string &attributeName, void *data);\n+\n+    // Scan returns an iterator to allow the caller to go through the results one by one.\n+    // Do not store entire results in the scan iterator.\n+    RC scan(const std::string &tableName,\n+            const std::string &conditionAttribute,\n+            const CompOp compOp,                  // comparison type such as \"<\" and \"=\"\n+            const void *value,                    // used in the comparison\n+            const std::vector<std::string> &attributeNames, // a list of projected attributes\n+            RM_ScanIterator &rm_ScanIterator);\n+\n+// Extra credit work (10 points)\n+    RC addAttribute(const std::string &tableName, const Attribute &attr);\n+\n+    RC dropAttribute(const std::string &tableName, const std::string &attributeName);\n+\n+protected:\n+    RelationManager();                                                  // Prevent construction\n+    ~RelationManager();                                                 // Prevent unwanted destruction\n+    RelationManager(const RelationManager &);                           // Prevent construction by copying\n+    RelationManager &operator=(const RelationManager &);                // Prevent assignment\n+\n+private:\n+    static RelationManager *_relation_manager;\n+};\n+\n+#endif\n\\ No newline at end of file\ndiff --git a/rm/rm_test_util.h b/rm/rm_test_util.h\nnew file mode 100644\nindex 0000000..b59abd4\n--- /dev/null\n+++ b/rm/rm_test_util.h\n@@ -0,0 +1,431 @@\n+#ifndef _test_util_h_\n+#define _test_util_h_\n+\n+#include <cstdio>\n+#include <cstdlib>\n+#include <fstream>\n+#include <sstream>\n+#include <iostream>\n+#include <iomanip>\n+#include <cassert>\n+#include <ctime>\n+#include <sys/resource.h>\n+#include <set>\n+#include \"rm.h\"\n+#include \"../rbf/test_util.h\"\n+\n+RecordBasedFileManager &rbfm = RecordBasedFileManager::instance();\n+\n+RelationManager &rm = RelationManager::instance();\n+\n+// This code is required for testing to measure the memory usage of your code.\n+// If you can't compile the codebase because of this function, you can safely comment this function or remove it.\n+void memProfile() {\n+    int who = RUSAGE_SELF;\n+    struct rusage usage{};\n+    getrusage(who, &usage);\n+    std::cerr << usage.ru_maxrss << \"KB\" << std::endl;\n+}\n+\n+// Function to prepare the data in the correct form to be inserted/read/updated\n+void prepareTuple(int attributeCount, unsigned char *nullAttributesIndicator, const int nameLength,\n+                  const std::string &name, const int age, const float height, const int salary, void *buffer,\n+                  unsigned *tupleSize) {\n+    unsigned offset = 0;\n+\n+    // Null-indicators\n+    bool nullBit;\n+    unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attributeCount);\n+\n+    // Null-indicator for the fields\n+    memcpy((char *) buffer + offset, nullAttributesIndicator, nullAttributesIndicatorActualSize);\n+    offset += nullAttributesIndicatorActualSize;\n+\n+    // Beginning of the actual data\n+    // Note that the left-most bit represents the first field. Thus, the offset is 7 from right, not 0.\n+    // e.g., if a tuple consists of four attributes and they are all nulls, then the bit representation will be: [11110000]\n+\n+    // Is the name field not-NULL?\n+    nullBit = nullAttributesIndicator[0] & ((unsigned) 1 << (unsigned) 7);\n+\n+    if (!nullBit) {\n+        memcpy((char *) buffer + offset, &nameLength, sizeof(int));\n+        offset += sizeof(int);\n+        memcpy((char *) buffer + offset, name.c_str(), nameLength);\n+        offset += nameLength;\n+    }\n+\n+    // Is the age field not-NULL?\n+    nullBit = nullAttributesIndicator[0] & ((unsigned) 1 << (unsigned) 6);\n+\n+    if (!nullBit) {\n+        memcpy((char *) buffer + offset, &age, sizeof(int));\n+        offset += sizeof(int);\n+    }\n+\n+\n+    // Is the height field not-NULL?\n+    nullBit = nullAttributesIndicator[0] & ((unsigned) 1 << (unsigned) 5);\n+\n+    if (!nullBit) {\n+        memcpy((char *) buffer + offset, &height, sizeof(float));\n+        offset += sizeof(float);\n+    }\n+\n+\n+    // Is the height field not-NULL?\n+    nullBit = nullAttributesIndicator[0] & ((unsigned) 1 << (unsigned) 4);\n+\n+    if (!nullBit) {\n+        memcpy((char *) buffer + offset, &salary, sizeof(int));\n+        offset += sizeof(int);\n+    }\n+\n+    *tupleSize = offset;\n+}\n+\n+// Function to get the data in the correct form to be inserted/read after adding the attribute ssn\n+void prepareTupleAfterAdd(int attributeCount, unsigned char *nullAttributesIndicator, const int nameLength,\n+                          const std::string &name, const int age, const float height, const int salary, const int ssn,\n+                          void *buffer, unsigned *tupleSize) {\n+    unsigned offset = 0;\n+\n+    // Null-indicators\n+    bool nullBit;\n+    unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attributeCount);\n+\n+    // Null-indicator for the fields\n+    memcpy((char *) buffer + offset, nullAttributesIndicator, nullAttributesIndicatorActualSize);\n+    offset += nullAttributesIndicatorActualSize;\n+\n+    // Beginning of the actual data\n+    // Note that the left-most bit represents the first field. Thus, the offset is 7 from right, not 0.\n+    // e.g., if a tuple consists of four attributes and they are all nulls, then the bit representation will be: [11110000]\n+\n+    // Is the name field not-NULL?\n+    nullBit = nullAttributesIndicator[0] & ((unsigned) 1 << (unsigned) 7);\n+\n+    if (!nullBit) {\n+        memcpy((char *) buffer + offset, &nameLength, sizeof(int));\n+        offset += sizeof(int);\n+        memcpy((char *) buffer + offset, name.c_str(), nameLength);\n+        offset += nameLength;\n+    }\n+\n+    // Is the age field not-NULL?\n+    nullBit = nullAttributesIndicator[0] & ((unsigned) 1 << (unsigned) 6);\n+\n+    if (!nullBit) {\n+        memcpy((char *) buffer + offset, &age, sizeof(int));\n+        offset += sizeof(int);\n+    }\n+\n+    // Is the height field not-NULL?\n+    nullBit = nullAttributesIndicator[0] & ((unsigned) 1 << (unsigned) 5);\n+\n+    if (!nullBit) {\n+        memcpy((char *) buffer + offset, &height, sizeof(float));\n+        offset += sizeof(float);\n+    }\n+\n+    // Is the salary field not-NULL?\n+    nullBit = nullAttributesIndicator[0] & ((unsigned) 1 << (unsigned) 4);\n+\n+    if (!nullBit) {\n+        memcpy((char *) buffer + offset, &salary, sizeof(int));\n+        offset += sizeof(int);\n+    }\n+\n+    // Is the ssn field not-NULL?\n+    nullBit = nullAttributesIndicator[0] & ((unsigned) 1 << (unsigned) 3);\n+\n+    if (!nullBit) {\n+        memcpy((char *) buffer + offset, &ssn, sizeof(int));\n+        offset += sizeof(int);\n+    }\n+\n+    *tupleSize = offset;\n+}\n+\n+// Function to get the data in the correct form to be inserted/read after adding\n+// the attribute ssn\n+void prepareTupleAfterAdd(const int nameLength, const std::string &name, const int age, const float height,\n+                          const int salary, const int ssn, void *buffer, int *tupleSize) {\n+    int offset = 0;\n+\n+    memcpy((char *) buffer + offset, &(nameLength), sizeof(int));\n+    offset += sizeof(int);\n+    memcpy((char *) buffer + offset, name.c_str(), nameLength);\n+    offset += nameLength;\n+\n+    memcpy((char *) buffer + offset, &age, sizeof(int));\n+    offset += sizeof(int);\n+\n+    memcpy((char *) buffer + offset, &height, sizeof(float));\n+    offset += sizeof(float);\n+\n+    memcpy((char *) buffer + offset, &salary, sizeof(int));\n+    offset += sizeof(int);\n+\n+    memcpy((char *) buffer + offset, &ssn, sizeof(int));\n+    offset += sizeof(int);\n+\n+    *tupleSize = offset;\n+}\n+\n+void printTupleAfterDrop(const void *buffer, const unsigned tupleSize) {\n+    unsigned offset = 0;\n+    std::cerr << \"****Printing Buffer: Start****\" << std::endl;\n+\n+    int nameLength = 0;\n+    memcpy(&nameLength, (char *) buffer + offset, sizeof(int));\n+    offset += sizeof(int);\n+    std::cerr << \"nameLength: \" << nameLength << std::endl;\n+\n+    char *name = (char *) malloc(100);\n+    memcpy(name, (char *) buffer + offset, nameLength);\n+    name[nameLength] = '\\0';\n+    offset += nameLength;\n+    std::cerr << \"name: \" << name << std::endl;\n+\n+    int age = 0;\n+    memcpy(&age, (char *) buffer + offset, sizeof(int));\n+    offset += sizeof(int);\n+    std::cerr << \"age: \" << age << std::endl;\n+\n+    float height = 0.0;\n+    memcpy(&height, (char *) buffer + offset, sizeof(float));\n+    std::cerr << \"height: \" << height << std::endl;\n+\n+    std::cerr << \"****Printing Buffer: End****\" << std::endl << std::endl;\n+}\n+\n+void printTupleAfterAdd(const void *buffer, const int tupleSize) {\n+    int offset = 0;\n+    std::cerr << \"****Printing Buffer: Start****\" << std::endl;\n+\n+    int nameLength = 0;\n+    memcpy(&nameLength, (char *) buffer + offset, sizeof(int));\n+    offset += sizeof(int);\n+    std::cerr << \"nameLength: \" << nameLength << std::endl;\n+\n+    char *name = (char *) malloc(100);\n+    memcpy(name, (char *) buffer + offset, nameLength);\n+    name[nameLength] = '\\0';\n+    offset += nameLength;\n+    std::cerr << \"name: \" << name << std::endl;\n+\n+    int age = 0;\n+    memcpy(&age, (char *) buffer + offset, sizeof(int));\n+    offset += sizeof(int);\n+    std::cerr << \"age: \" << age << std::endl;\n+\n+    float height = 0;\n+    memcpy(&height, (char *) buffer + offset, sizeof(float));\n+    offset += sizeof(float);\n+    std::cerr << \"height: \" << height << std::endl;\n+\n+    int salary = 0;\n+    memcpy(&salary, (char *) buffer + offset, sizeof(int));\n+    offset += sizeof(int);\n+    std::cerr << \"salary: \" << salary << std::endl;\n+\n+    int ssn = 0;\n+    memcpy(&ssn, (char *) buffer + offset, sizeof(int));\n+    std::cerr << \"SSN: \" << ssn << std::endl;\n+\n+    std::cerr << \"****Printing Buffer: End****\" << std::endl << std::endl;\n+}\n+\n+// Create an employee table\n+RC createTable(const std::string &tableName) {\n+    std::cerr << \"****Create Table \" << tableName << \" ****\" << std::endl;\n+\n+    // 1. Create Table ** -- made separate now.\n+    std::vector<Attribute> attrs;\n+\n+    Attribute attr;\n+    attr.name = \"EmpName\";\n+    attr.type = TypeVarChar;\n+    attr.length = (AttrLength) 30;\n+    attrs.push_back(attr);\n+\n+    attr.name = \"Age\";\n+    attr.type = TypeInt;\n+    attr.length = (AttrLength) 4;\n+    attrs.push_back(attr);\n+\n+    attr.name = \"Height\";\n+    attr.type = TypeReal;\n+    attr.length = (AttrLength) 4;\n+    attrs.push_back(attr);\n+\n+    attr.name = \"Salary\";\n+    attr.type = TypeInt;\n+    attr.length = (AttrLength) 4;\n+    attrs.push_back(attr);\n+\n+    RC rc = rm.createTable(tableName, attrs);\n+    assert(rc == success);\n+    std::cerr << \"****Table Created: \" << tableName << \" ****\" << std::endl << std::endl;\n+\n+    return success;\n+}\n+\n+void prepareLargeTuple(int attributeCount, unsigned char *nullAttributesIndicator, const int index, void *buffer,\n+                       int *size) {\n+    int offset = 0;\n+\n+    // Null-indicators\n+    int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attributeCount);\n+\n+    // Null-indicator for the fields\n+    memcpy((char *) buffer + offset, nullAttributesIndicator, nullAttributesIndicatorActualSize);\n+    offset += nullAttributesIndicatorActualSize;\n+\n+    // compute the count\n+    int count = index % 50 + 1;\n+\n+    // compute the letter\n+    char text = (char) (index % 26 + 97);\n+\n+    for (unsigned i = 0; i < 10; i++) {\n+        // length\n+        memcpy((char *) buffer + offset, &count, sizeof(int));\n+        offset += sizeof(int);\n+\n+        // varchar\n+        for (int j = 0; j < count; j++) {\n+            memcpy((char *) buffer + offset, &text, 1);\n+            offset += 1;\n+        }\n+\n+        // integer\n+        memcpy((char *) buffer + offset, &index, sizeof(int));\n+        offset += sizeof(int);\n+\n+        // real\n+        auto real = (float) (index + 1);\n+        memcpy((char *) buffer + offset, &real, sizeof(float));\n+        offset += sizeof(float);\n+    }\n+    *size = offset;\n+}\n+\n+// Create a large table for pressure test\n+RC createLargeTable(const std::string &tableName) {\n+    std::cerr << \"***** Creating a Large Table: \" << tableName << \" *****\" << std::endl;\n+\n+    // 1. Create Table ** -- made separate now.\n+    std::vector<Attribute> attrs;\n+\n+    int index = 0;\n+    char *suffix = (char *) malloc(10);\n+    for (unsigned i = 0; i < 10; i++) {\n+        Attribute attr;\n+        sprintf(suffix, \"%d\", index);\n+        attr.name = \"attr\";\n+        attr.name += suffix;\n+        attr.type = TypeVarChar;\n+        attr.length = (AttrLength) 50;\n+        attrs.push_back(attr);\n+        index++;\n+\n+        sprintf(suffix, \"%d\", index);\n+        attr.name = \"attr\";\n+        attr.name += suffix;\n+        attr.type = TypeInt;\n+        attr.length = (AttrLength) 4;\n+        attrs.push_back(attr);\n+        index++;\n+\n+        sprintf(suffix, \"%d\", index);\n+        attr.name = \"attr\";\n+        attr.name += suffix;\n+        attr.type = TypeReal;\n+        attr.length = (AttrLength) 4;\n+        attrs.push_back(attr);\n+        index++;\n+    }\n+\n+    RC rc = rm.createTable(tableName, attrs);\n+    assert(rc == success);\n+    std::cerr << \"***** A Large Table: \" << tableName << \" has created. *****\" << std::endl << std::endl;\n+\n+    free(suffix);\n+\n+    return 0;\n+}\n+\n+// Write RIDs to a disk - do not use this code.\n+// This is not a page-based operation. For test purpose only.\n+void writeRIDsToDisk(std::vector<RID> &rids) {\n+    remove(\"rids_file\");\n+    std::ofstream ridsFile(\"rids_file\", std::ios::out | std::ios::trunc | std::ios::binary);\n+\n+    if (ridsFile.is_open()) {\n+        ridsFile.seekp(0, std::ios::beg);\n+        for (auto &rid : rids) {\n+            ridsFile.write(reinterpret_cast<const char *>(&rid.pageNum),\n+                           sizeof(unsigned));\n+            ridsFile.write(reinterpret_cast<const char *>(&rid.slotNum),\n+                           sizeof(unsigned));\n+        }\n+        ridsFile.close();\n+    }\n+}\n+\n+// Write sizes to a disk - do not use this code.\n+// This is not a page-based operation. For test purpose only.\n+void writeSizesToDisk(std::vector<int> &sizes) {\n+    remove(\"sizes_file\");\n+    std::ofstream sizesFile(\"sizes_file\", std::ios::out | std::ios::trunc | std::ios::binary);\n+\n+    if (sizesFile.is_open()) {\n+        sizesFile.seekp(0, std::ios::beg);\n+        for (int &size : sizes) {\n+            sizesFile.write(reinterpret_cast<const char *>(&size),\n+                            sizeof(int));\n+        }\n+        sizesFile.close();\n+    }\n+}\n+\n+// Read rids from the disk - do not use this code.\n+// This is not a page-based operation. For test purpose only.\n+void readRIDsFromDisk(std::vector<RID> &rids, int numRecords) {\n+    RID tempRID;\n+    unsigned pageNum;\n+    unsigned slotNum;\n+\n+    std::ifstream ridsFile(\"rids_file\", std::ios::in | std::ios::binary);\n+    if (ridsFile.is_open()) {\n+        ridsFile.seekg(0, std::ios::beg);\n+        for (int i = 0; i < numRecords; i++) {\n+            ridsFile.read(reinterpret_cast<char *>(&pageNum), sizeof(unsigned));\n+            ridsFile.read(reinterpret_cast<char *>(&slotNum), sizeof(unsigned));\n+            tempRID.pageNum = pageNum;\n+            tempRID.slotNum = slotNum;\n+            rids.push_back(tempRID);\n+        }\n+        ridsFile.close();\n+    }\n+}\n+\n+// Read sizes from the disk - do not use this code.\n+// This is not a page-based operation. For test purpose only.\n+void readSizesFromDisk(std::vector<int> &sizes, int numRecords) {\n+    int size;\n+\n+    std::ifstream sizesFile(\"sizes_file\", std::ios::in | std::ios::binary);\n+    if (sizesFile.is_open()) {\n+\n+        sizesFile.seekg(0, std::ios::beg);\n+        for (int i = 0; i < numRecords; i++) {\n+            sizesFile.read(reinterpret_cast<char *>(&size), sizeof(int));\n+            sizes.push_back(size);\n+        }\n+        sizesFile.close();\n+    }\n+}\n+#endif\ndiff --git a/rm/rmtest_00.cc b/rm/rmtest_00.cc\nnew file mode 100644\nindex 0000000..bebc5d1\n--- /dev/null\n+++ b/rm/rmtest_00.cc\n@@ -0,0 +1,26 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_0(const std::string &tableName) {\n+    // Functions Tested\n+    // 1. getAttributes **\n+    std::cout << std::endl << \"***** In RM Test Case 0 *****\" << std::endl;\n+\n+    // GetAttributes\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    for (unsigned i = 0; i < (unsigned) attrs.size(); i++) {\n+        std::cout << (i + 1) << \". Attr Name: \" << attrs[i].name << \" Type: \" << (AttrType) attrs[i].type << \" Len: \"\n+                  << attrs[i].length << std::endl;\n+    }\n+\n+    std::cout << std::endl << \"***** RM Test Case 0 finished. The result will be examined. *****\" << std::endl;\n+\n+    return success;\n+}\n+\n+int main() {\n+    // Get Attributes\n+    return TEST_RM_0(\"tbl_employee\");\n+}\ndiff --git a/rm/rmtest_01.cc b/rm/rmtest_01.cc\nnew file mode 100644\nindex 0000000..bde741e\n--- /dev/null\n+++ b/rm/rmtest_01.cc\n@@ -0,0 +1,62 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_1(const std::string &tableName, const int nameLength, const std::string &name, const int age,\n+             const float height, const int salary) {\n+    // Functions tested\n+    // 1. Insert Tuple **\n+    // 2. Read Tuple **\n+    // NOTE: \"**\" signifies the new functions being tested in this test case. \n+    std::cout << std::endl << \"***** In RM Test Case 1 *****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    void *tuple = malloc(200);\n+    void *returnedData = malloc(200);\n+\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    // Initialize a NULL field indicator\n+    unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    // Insert a tuple into a table\n+    prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &tupleSize);\n+    std::cout << \"The tuple to be inserted:\" << std::endl;\n+    rm.printTuple(attrs, tuple);\n+    std::cout << std::endl;\n+\n+    rc = rm.insertTuple(tableName, tuple, rid);\n+    assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+    // Given the rid, read the tuple from table\n+    rc = rm.readTuple(tableName, rid, returnedData);\n+    assert(rc == success && \"RelationManager::readTuple() should not fail.\");\n+\n+    std::cout << \"The returned tuple:\" << std::endl;\n+    rm.printTuple(attrs, returnedData);\n+    std::cout << std::endl;\n+\n+    // Compare whether the two memory blocks are the same\n+    if (memcmp(tuple, returnedData, tupleSize) == 0) {\n+        std::cout << \"**** RM Test Case 1 finished. The result will be examined. *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return success;\n+    } else {\n+        std::cout << \"**** [FAIL] RM Test Case 1 failed *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return -1;\n+    }\n+\n+}\n+\n+int main() {\n+    // Insert/Read Tuple\n+    return TEST_RM_1(\"tbl_employee\", 14, \"Peter Anteater\", 27, 6.2, 10000);\n+}\ndiff --git a/rm/rmtest_02.cc b/rm/rmtest_02.cc\nnew file mode 100644\nindex 0000000..d781e0c\n--- /dev/null\n+++ b/rm/rmtest_02.cc\n@@ -0,0 +1,61 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_2(const std::string &tableName, const int nameLength, const std::string &name, const int age,\n+             const float height, const int salary) {\n+    // Functions Tested\n+    // 1. Insert tuple\n+    // 2. Delete Tuple **\n+    // 3. Read Tuple\n+    std::cout << std::endl << \"***** In RM Test Case 2 *****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    void *tuple = malloc(200);\n+    void *returnedData = malloc(200);\n+\n+    // Test Insert the Tuple\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &tupleSize);\n+    std::cout << \"The tuple to be inserted:\" << std::endl;\n+    rm.printTuple(attrs, tuple);\n+    std::cout << std::endl;\n+    rc = rm.insertTuple(tableName, tuple, rid);\n+    assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+    // Delete the tuple\n+    rc = rm.deleteTuple(tableName, rid);\n+    assert(rc == success && \"RelationManager::deleteTuple() should not fail.\");\n+\n+    // Read Tuple after deleting it - should fail\n+    memset(returnedData, 0, 200);\n+    rc = rm.readTuple(tableName, rid, returnedData);\n+    assert(rc != success && \"Reading a deleted tuple should fail.\");\n+\n+    // Compare the two memory blocks to see whether they are different\n+    if (memcmp(tuple, returnedData, tupleSize) != 0) {\n+        std::cout << \"***** RM Test Case 2 finished. The result will be examined. *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return success;\n+    } else {\n+        std::cout << \"***** [FAIL] RM Test case 2 failed *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return -1;\n+    }\n+\n+}\n+\n+int main() {\n+    // Delete Tuple\n+    return TEST_RM_2(\"tbl_employee\", 5, \"Peter\", 23, 5.11, 12000);\n+}\ndiff --git a/rm/rmtest_03.cc b/rm/rmtest_03.cc\nnew file mode 100644\nindex 0000000..2daf93c\n--- /dev/null\n+++ b/rm/rmtest_03.cc\n@@ -0,0 +1,75 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_3(const std::string &tableName, const int nameLength, const std::string &name, const int age,\n+             const float height, const int salary) {\n+    // Functions Tested\n+    // 1. Insert Tuple    \n+    // 2. Update Tuple **\n+    // 3. Read Tuple\n+    std::cout << std::endl << \"***** In RM Test Case 3****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    unsigned updatedTupleSize = 0;\n+    void *tuple = malloc(200);\n+    void *updatedTuple = malloc(200);\n+    void *returnedData = malloc(200);\n+\n+    // Test Insert the Tuple\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &tupleSize);\n+    rc = rm.insertTuple(tableName, tuple, rid);\n+    assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+    std::cout << \"Original RID:  \" << rid.pageNum << \" \" << rid.slotNum << std::endl;\n+\n+    // Test Update Tuple\n+    prepareTuple(attrs.size(), nullsIndicator, 7, \"Barbara\", age, height, 12000, updatedTuple, &updatedTupleSize);\n+    rc = rm.updateTuple(tableName, updatedTuple, rid);\n+    assert(rc == success && \"RelationManager::updateTuple() should not fail.\");\n+\n+    // Test Read Tuple \n+    rc = rm.readTuple(tableName, rid, returnedData);\n+    assert(rc == success && \"RelationManager::readTuple() should not fail.\");\n+\n+    // Print the tuples \n+    std::cout << \"Inserted Data:\" << std::endl;\n+    rm.printTuple(attrs, tuple);\n+    std::cout << std::endl;\n+\n+    std::cout << \"Updated data:\" << std::endl;\n+    rm.printTuple(attrs, updatedTuple);\n+    std::cout << std::endl;\n+\n+    std::cout << \"Returned Data:\" << std::endl;\n+    rm.printTuple(attrs, returnedData);\n+    std::cout << std::endl;\n+\n+    if (memcmp(updatedTuple, returnedData, updatedTupleSize) == 0) {\n+        std::cout << \"***** RM Test Case 3 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(updatedTuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return 0;\n+    } else {\n+        std::cout << \"***** [FAIL] RM Test case 3 Failed *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(updatedTuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return -1;\n+    }\n+\n+}\n+\n+int main() {\n+    // Update Tuple\n+    return TEST_RM_3(\"tbl_employee\", 4, \"Paul\", 28, 6.5, 6000);\n+}\ndiff --git a/rm/rmtest_04.cc b/rm/rmtest_04.cc\nnew file mode 100644\nindex 0000000..ca40560\n--- /dev/null\n+++ b/rm/rmtest_04.cc\n@@ -0,0 +1,55 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_4(const std::string &tableName, const int nameLength, const std::string &name, const int age,\n+             const float height, const int salary) {\n+    // Functions Tested\n+    // 1. Insert tuple\n+    // 2. Read Attributes **\n+    std::cout << std::endl << \"***** In RM Test Case 4 *****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    void *tuple = malloc(200);\n+    void *returnedData = malloc(200);\n+\n+    // Test Insert the Tuple\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &tupleSize);\n+    rc = rm.insertTuple(tableName, tuple, rid);\n+    assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+    // Test Read Attribute\n+    rc = rm.readAttribute(tableName, rid, \"Salary\", returnedData);\n+    assert(rc == success && \"RelationManager::readAttribute() should not fail.\");\n+\n+    int salaryBack = *(int *) ((char *) returnedData + nullAttributesIndicatorActualSize);\n+\n+    std::cout << \"Salary: \" << salary << \" Returned Salary: \" << salaryBack << std::endl;\n+    if (memcmp((char *) returnedData + nullAttributesIndicatorActualSize,\n+               (char *) tuple + 19 + nullAttributesIndicatorActualSize, 4) == 0) {\n+        std::cout << \"***** RM Test case 4 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return success;\n+    } else {\n+        std::cout << \"***** [FAIL] RM Test Case 4 Failed. *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return -1;\n+    }\n+\n+}\n+\n+int main() {\n+    // Read Attributes\n+    return TEST_RM_4(\"tbl_employee\", 7, \"Hoffman\", 31, 5.8, 9999);\n+}\ndiff --git a/rm/rmtest_05.cc b/rm/rmtest_05.cc\nnew file mode 100644\nindex 0000000..aca8f7b\n--- /dev/null\n+++ b/rm/rmtest_05.cc\n@@ -0,0 +1,69 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_5(const string &tableName, const int nameLength, const string &name, const int age, const float height,\n+             const int salary) {\n+    // Functions Tested\n+    // 0. Insert tuple;\n+    // 1. Read Tuple\n+    // 2. Delete Table **\n+    // 3. Read Tuple\n+    // 4. Insert Tuple\n+    std::cout << std::endl << \"***** In RM Test Case 5 *****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    void *tuple = malloc(200);\n+    void *returnedData = malloc(200);\n+    void *returnedData1 = malloc(200);\n+\n+    // Test Insert Tuple\n+    vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &tupleSize);\n+    rc = rm.insertTuple(tableName, tuple, rid);\n+    assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+    // Test Read Tuple \n+    rc = rm.readTuple(tableName, rid, returnedData);\n+    assert(rc == success && \"RelationManager::readTuple() should not fail.\");\n+\n+    // Test Delete Table\n+    rc = rm.deleteTable(tableName);\n+    assert(rc == success && \"RelationManager::deleteTable() should not fail.\");\n+\n+    // Reading a tuple on a deleted table\n+    memset((char *) returnedData1, 0, 200);\n+    rc = rm.readTuple(tableName, rid, returnedData1);\n+    assert(rc != success && \"RelationManager::readTuple() on a deleted table should fail.\");\n+\n+    // Inserting a tuple on a deleted table\n+    rc = rm.insertTuple(tableName, tuple, rid);\n+    assert(rc != success && \"RelationManager::insertTuple() on a deleted table should fail.\");\n+\n+    if (memcmp(returnedData, returnedData1, tupleSize) != 0) {\n+        std::cout << \"***** Test Case 5 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(returnedData1);\n+        free(nullsIndicator);\n+        return success;\n+    } else {\n+        std::cout << \"***** [FAIL] Test Case 5 Failed *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(returnedData1);\n+        free(nullsIndicator);\n+        return -1;\n+    }\n+}\n+\n+int main() {\n+    // Delete Table\n+    return TEST_RM_5(\"tbl_employee\", 6, \"Martin\", 29, 193.6, 20000);\n+}\ndiff --git a/rm/rmtest_06.cc b/rm/rmtest_06.cc\nnew file mode 100644\nindex 0000000..3073e2e\n--- /dev/null\n+++ b/rm/rmtest_06.cc\n@@ -0,0 +1,69 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_6(const std::string &tableName) {\n+    // Functions Tested\n+    // 1. Simple scan **\n+    std::cout << std::endl << \"***** In RM Test Case 6 *****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    int numTuples = 100;\n+    void *tuple;\n+    void *returnedData = malloc(200);\n+\n+    // Test Insert Tuple\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    RID rids[numTuples];\n+    std::set<int> ages;\n+    for (int i = 0; i < numTuples; i++) {\n+        tuple = malloc(200);\n+\n+        // Insert Tuple\n+        float height = (float) i;\n+        int age = 20 + i;\n+        prepareTuple(attrs.size(), nullsIndicator, 6, \"Tester\", age, height, age * 10, tuple, &tupleSize);\n+        ages.insert(age);\n+        rc = rm.insertTuple(tableName, tuple, rid);\n+        assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+        rids[i] = rid;\n+        free(tuple);\n+    }\n+\n+    // Set up the iterator\n+    RM_ScanIterator rmsi;\n+    std::string attr = \"Age\";\n+    std::vector<std::string> attributes;\n+    attributes.push_back(attr);\n+    rc = rm.scan(tableName, \"\", NO_OP, NULL, attributes, rmsi);\n+    assert(rc == success && \"RelationManager::scan() should not fail.\");\n+\n+    nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attributes.size());\n+    while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {\n+        if (ages.find(*(int *) ((char *) returnedData + nullAttributesIndicatorActualSize)) == ages.end()) {\n+            std::cout << \"***** [FAIL] Test Case 6 Failed *****\" << std::endl << std::endl;\n+            rmsi.close();\n+            free(returnedData);\n+            free(nullsIndicator);\n+            return -1;\n+        }\n+    }\n+    rmsi.close();\n+\n+    free(returnedData);\n+    free(nullsIndicator);\n+    std::cout << \"***** Test Case 6 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+    return 0;\n+}\n+\n+int main() {\n+    // Simple Scan\n+    return TEST_RM_6(\"tbl_employee3\");\n+}\ndiff --git a/rm/rmtest_07.cc b/rm/rmtest_07.cc\nnew file mode 100644\nindex 0000000..9606a40\n--- /dev/null\n+++ b/rm/rmtest_07.cc\n@@ -0,0 +1,53 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_7(const string &tableName) {\n+    // Functions Tested\n+    // 1. Simple scan **\n+    // 2. Delete the given table\n+    std::cout << std::endl << \"***** In RM Test Case 7 *****\" << std::endl;\n+\n+    RID rid;\n+    int numTuples = 100;\n+    void *returnedData = malloc(200);\n+\n+    std::set<int> ages;\n+    RC rc = 0;\n+    for (int i = 0; i < numTuples; i++) {\n+        int age = 20 + i;\n+        ages.insert(age);\n+    }\n+\n+    // Set up the iterator\n+    RM_ScanIterator rmsi;\n+    std::string attr = \"Age\";\n+    std::vector<std::string> attributes;\n+    attributes.push_back(attr);\n+    rc = rm.scan(tableName, \"\", NO_OP, NULL, attributes, rmsi);\n+    assert(rc == success && \"RelationManager::scan() should not fail.\");\n+    int ageReturned = 0;\n+\n+    while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {\n+        //std::cout << \"Returned Age: \" << *(int *)((char *)returnedData+1) <<std::endl;\n+        ageReturned = *(int *) ((char *) returnedData + 1);\n+        if (ages.find(ageReturned) == ages.end()) {\n+            std::cout << \"***** [FAIL] Test Case 7 Failed *****\" << std::endl << std::endl;\n+            rmsi.close();\n+            free(returnedData);\n+            return -1;\n+        }\n+    }\n+    rmsi.close();\n+\n+    // Delete a Table\n+    rc = rm.deleteTable(tableName);\n+    assert(rc == success && \"RelationManager::deleteTable() should not fail.\");\n+\n+    free(returnedData);\n+    std::cout << \"***** Test Case 7 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+    return success;\n+}\n+\n+int main() {\n+    // Simple Scan\n+    return TEST_RM_7(\"tbl_employee3\");\n+}\ndiff --git a/rm/rmtest_08.cc b/rm/rmtest_08.cc\nnew file mode 100644\nindex 0000000..99499d2\n--- /dev/null\n+++ b/rm/rmtest_08.cc\n@@ -0,0 +1,53 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_8(const std::string &tableName, std::vector<RID> &rids, std::vector<int> &sizes) {\n+    // Functions Tested for large tables:\n+    // 1. getAttributes\n+    // 2. insert tuple\n+    std::cout << std::endl << \"***** In RM Test Case 8 *****\" << std::endl;\n+\n+    RID rid;\n+    void *tuple = malloc(4000);\n+    int numTuples = 2000;\n+\n+    // GetAttributes\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    // Insert 2000 tuples into table\n+    for (int i = 0; i < numTuples; i++) {\n+        // Test insert Tuple\n+        int size = 0;\n+        memset(tuple, 0, 2000);\n+        prepareLargeTuple(attrs.size(), nullsIndicator, i, tuple, &size);\n+\n+        rc = rm.insertTuple(tableName, tuple, rid);\n+        assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+        rids.push_back(rid);\n+        sizes.push_back(size);\n+    }\n+\n+    free(tuple);\n+    free(nullsIndicator);\n+\n+    writeRIDsToDisk(rids);\n+    writeSizesToDisk(sizes);\n+\n+    std::cout << \"***** Test Case 8 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+\n+    return success;\n+}\n+\n+int main() {\n+    std::vector<RID> rids;\n+    std::vector<int> sizes;\n+\n+    // Insert Tuple\n+    return TEST_RM_8(\"tbl_employee4\", rids, sizes);\n+}\ndiff --git a/rm/rmtest_09.cc b/rm/rmtest_09.cc\nnew file mode 100644\nindex 0000000..a1ee1c4\n--- /dev/null\n+++ b/rm/rmtest_09.cc\n@@ -0,0 +1,58 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_09(const std::string &tableName, std::vector<RID> &rids, std::vector<int> &sizes) {\n+    // Functions Tested for large tables:\n+    // 1. read tuple\n+    std::cout << \"***** In RM Test case 9 *****\" << std::endl;\n+\n+    int size = 0;\n+    int numTuples = 2000;\n+    void *tuple = malloc(4000);\n+    void *returnedData = malloc(4000);\n+\n+    // read the saved rids and the sizes of records\n+    readRIDsFromDisk(rids, numTuples);\n+    readSizesFromDisk(sizes, numTuples);\n+\n+    // GetAttributes\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    for (int i = 0; i < numTuples; i++) {\n+        memset(tuple, 0, 4000);\n+        memset(returnedData, 0, 4000);\n+        rc = rm.readTuple(tableName, rids[i], returnedData);\n+        assert(rc == success && \"RelationManager::readTuple() should not fail.\");\n+\n+        size = 0;\n+        prepareLargeTuple(attrs.size(), nullsIndicator, i, tuple, &size);\n+        if (memcmp(returnedData, tuple, sizes[i]) != 0) {\n+            std::cout << \"***** [FAIL] Test Case 9 Failed *****\" << std::endl << std::endl;\n+            free(tuple);\n+            free(returnedData);\n+            free(nullsIndicator);\n+            return -1;\n+        }\n+    }\n+\n+    free(tuple);\n+    free(returnedData);\n+    free(nullsIndicator);\n+\n+    std::cout << \"***** Test Case 9 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+\n+    return success;\n+}\n+\n+int main() {\n+    std::vector<RID> rids;\n+    std::vector<int> sizes;\n+\n+    // Read Tuple\n+    return TEST_RM_09(\"tbl_employee4\", rids, sizes);\n+}\ndiff --git a/rm/rmtest_10.cc b/rm/rmtest_10.cc\nnew file mode 100644\nindex 0000000..0d35a01\n--- /dev/null\n+++ b/rm/rmtest_10.cc\n@@ -0,0 +1,72 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_10(const std::string &tableName, std::vector<RID> &rids, std::vector<int> &sizes) {\n+    // Functions Tested for large tables:\n+    // 1. update tuple\n+    // 2. read tuple\n+    std::cout << std::endl << \"***** In RM Test case 10 *****\" << std::endl;\n+\n+    int numTuples = 2000;\n+    void *tuple = malloc(4000);\n+    void *returnedData = malloc(4000);\n+\n+    readRIDsFromDisk(rids, numTuples);\n+    readSizesFromDisk(sizes, numTuples);\n+\n+    // GetAttributes\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    // Update the first 1000 tuples\n+    int size = 0;\n+    for (int i = 0; i < 1000; i++) {\n+        memset(tuple, 0, 4000);\n+        RID rid = rids[i];\n+\n+        prepareLargeTuple(attrs.size(), nullsIndicator, i + 10, tuple, &size);\n+        rc = rm.updateTuple(tableName, tuple, rid);\n+        assert(rc == success && \"RelationManager::updateTuple() should not fail.\");\n+\n+        sizes[i] = size;\n+        rids[i] = rid;\n+    }\n+\n+    // Read the updated records and check the integrity\n+    for (int i = 0; i < 1000; i++) {\n+        memset(tuple, 0, 4000);\n+        memset(returnedData, 0, 4000);\n+        prepareLargeTuple(attrs.size(), nullsIndicator, i + 10, tuple, &size);\n+        rc = rm.readTuple(tableName, rids[i], returnedData);\n+        assert(rc == success && \"RelationManager::readTuple() should not fail.\");\n+\n+        if (memcmp(returnedData, tuple, sizes[i]) != 0) {\n+            std::cout << \"***** [FAIL] Test Case 10 Failed *****\" << std::endl << std::endl;\n+            free(tuple);\n+            free(returnedData);\n+            free(nullsIndicator);\n+            return -1;\n+        }\n+    }\n+\n+    free(tuple);\n+    free(returnedData);\n+    free(nullsIndicator);\n+\n+    std::cout << \"***** Test Case 10 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+\n+    return success;\n+\n+}\n+\n+int main() {\n+    std::vector<RID> rids;\n+    std::vector<int> sizes;\n+\n+    // Update Tuple\n+    return TEST_RM_10(\"tbl_employee4\", rids, sizes);\n+}\ndiff --git a/rm/rmtest_11.cc b/rm/rmtest_11.cc\nnew file mode 100644\nindex 0000000..798b38c\n--- /dev/null\n+++ b/rm/rmtest_11.cc\n@@ -0,0 +1,44 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_11(const std::string &tableName, std::vector<RID> &rids) {\n+    // Functions Tested for large tables:\n+    // 1. delete tuple\n+    // 2. read tuple\n+    std::cout << std::endl << \"***** In RM Test Case 11 *****\" << std::endl;\n+\n+    int numTuples = 2000;\n+    RC rc = 0;\n+    void *returnedData = malloc(4000);\n+\n+    readRIDsFromDisk(rids, numTuples);\n+\n+    // Delete the first 1000 tuples\n+    for (int i = 0; i < 1000; i++) {\n+        rc = rm.deleteTuple(tableName, rids[i]);\n+        assert(rc == success && \"RelationManager::deleteTuple() should not fail.\");\n+    }\n+\n+    // Try to read the first 1000 deleted tuples\n+    for (int i = 0; i < 1000; i++) {\n+        rc = rm.readTuple(tableName, rids[i], returnedData);\n+        assert(rc != success && \"RelationManager::readTuple() on a deleted tuple should fail.\");\n+    }\n+\n+    for (int i = 1000; i < 2000; i++) {\n+        rc = rm.readTuple(tableName, rids[i], returnedData);\n+        assert(rc == success && \"RelationManager::readTuple() should not fail.\");\n+    }\n+    std::cout << \"***** Test Case 11 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+\n+    free(returnedData);\n+\n+    return success;\n+}\n+\n+int main() {\n+    std::vector<RID> rids;\n+    std::vector<int> sizes;\n+\n+    // Delete Tuple\n+    return TEST_RM_11(\"tbl_employee4\", rids);\n+}\ndiff --git a/rm/rmtest_12.cc b/rm/rmtest_12.cc\nnew file mode 100644\nindex 0000000..879c3b9\n--- /dev/null\n+++ b/rm/rmtest_12.cc\n@@ -0,0 +1,70 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_12(const std::string &tableName)\n+{\n+    // Functions Tested for large tables\n+    // 1. scan\n+   std::cout <<std::endl << \"***** In RM Test case 12 *****\" <<std::endl;\n+\n+    RM_ScanIterator rmsi;\n+    std::vector<std::string> attrs;\n+    attrs.emplace_back(\"attr5\");\n+    attrs.emplace_back(\"attr12\");\n+    attrs.emplace_back(\"attr28\");\n+   \n+    RC rc = rm.scan(tableName, \"\", NO_OP, NULL, attrs, rmsi);\n+    assert(rc == success && \"RelationManager::scan() should not fail.\");\n+\n+    RID rid;\n+    int j = 0;\n+    void *returnedData = malloc(4000);\n+\n+    int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+\n+    while(rmsi.getNextTuple(rid, returnedData) != RM_EOF)\n+    {\n+        if(j % 200 == 0)\n+        {\n+            int offset = 0;\n+\n+           std::cout << \"Real Value: \" << *(float *)((char *)returnedData+nullAttributesIndicatorActualSize) <<std::endl;\n+            offset += 4;\n+        \n+            int size = *(int *)((char *)returnedData + offset + nullAttributesIndicatorActualSize);\n+           std::cout << \"Varchar size: \" << size <<std::endl;\n+            offset += 4;\n+\n+            char *buffer = (char *)malloc(size + 1);\n+            memcpy(buffer, (char *)returnedData + offset + nullAttributesIndicatorActualSize, size);\n+            buffer[size] = 0;\n+            offset += size;\n+    \n+           std::cout << \"VarChar Value: \" << buffer <<std::endl;\n+\n+           std::cout << \"Integer Value: \" << *(int *)((char *)returnedData + offset + nullAttributesIndicatorActualSize) <<std::endl <<std::endl;\n+            offset += 4;\n+\n+            free(buffer);\n+        }\n+        j++;\n+        memset(returnedData, 0, 4000);\n+    }\n+    rmsi.close();\n+   std::cout << \"Total number of tuples: \" << j <<std::endl <<std::endl;\n+    if (j > 1000) {\n+       std::cout << \"***** [FAIL] Test Case 12 Failed *****\" <<std::endl <<std::endl;\n+        free(returnedData);\n+        return -1;\n+    }\n+\n+   std::cout << \"***** Test Case 12 Finished. The result will be examined. *****\" <<std::endl <<std::endl;\n+    free(returnedData);\n+\n+    return success;\n+}\n+\n+int main()\n+{\n+\t// Scan\n+    return TEST_RM_12(\"tbl_employee4\");\n+}\ndiff --git a/rm/rmtest_13.cc b/rm/rmtest_13.cc\nnew file mode 100644\nindex 0000000..89bf668\n--- /dev/null\n+++ b/rm/rmtest_13.cc\n@@ -0,0 +1,78 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_13(const std::string &tableName) {\n+    // Functions Tested:\n+    // 1. Conditional scan\n+    std::cout << std::endl << \"***** In RM Test Case 13 *****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    int numTuples = 500;\n+    void *tuple;\n+    void *returnedData = malloc(200);\n+    int ageVal = 25;\n+    int age = 0;\n+\n+    RID rids[numTuples];\n+    std::vector<char *> tuples;\n+\n+    // GetAttributes\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    for (int i = 0; i < numTuples; i++) {\n+        tuple = malloc(100);\n+\n+        // Insert Tuple\n+        auto height = (float) i;\n+\n+        age = (rand() % 10) + 23;\n+\n+        prepareTuple(attrs.size(), nullsIndicator, 6, \"Tester\", age, height, 123, tuple, &tupleSize);\n+        rc = rm.insertTuple(tableName, tuple, rid);\n+        assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+        rids[i] = rid;\n+        free(tuple);\n+    }\n+\n+    // Set up the iterator\n+    RM_ScanIterator rmsi;\n+    std::string attr = \"Age\";\n+    std::vector<std::string> attributes;\n+    attributes.push_back(attr);\n+    rc = rm.scan(tableName, attr, GT_OP, &ageVal, attributes, rmsi);\n+    assert(rc == success && \"RelationManager::scan() should not fail.\");\n+\n+    while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {\n+        age = *(int *) ((char *) returnedData + 1);\n+        if (age <= ageVal) {\n+            std::cout << \"Returned value from a scan is not correct.\" << std::endl;\n+            std::cout << \"***** [FAIL] Test Case 13 Failed *****\" << std::endl << std::endl;\n+            rmsi.close();\n+            free(returnedData);\n+            free(nullsIndicator);\n+            return -1;\n+        }\n+    }\n+    rmsi.close();\n+    free(returnedData);\n+    free(nullsIndicator);\n+\n+    rc = rm.deleteTable(\"tbl_b_employee4\");\n+\n+    std::cout << \"***** Test Case 13 Finished. The result will be examined. *****\" << std::endl << std::endl;\n+\n+    return success;\n+}\n+\n+int main() {\n+    // Scan with conditions\n+    createTable(\"tbl_b_employee4\");\n+    return TEST_RM_13(\"tbl_b_employee4\");\n+}\ndiff --git a/rm/rmtest_13b.cc b/rm/rmtest_13b.cc\nnew file mode 100644\nindex 0000000..3a558cf\n--- /dev/null\n+++ b/rm/rmtest_13b.cc\n@@ -0,0 +1,122 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_13b(const std::string &tableName) {\n+    // Functions Tested:\n+    // 1. Conditional scan - including NULL values\n+    std::cout << std::endl << \"***** In RM Test Case 13B *****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    int numTuples = 500;\n+    void *tuple;\n+    void *returnedData = malloc(200);\n+    int ageVal = 25;\n+    int age = 0;\n+\n+    RID rids[numTuples];\n+    std::vector<char *> tuples;\n+    std::string tupleName;\n+    char *suffix = (char *) malloc(10);\n+\n+    bool nullBit = false;\n+\n+    // GetAttributes\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    auto *nullsIndicatorWithNull = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicatorWithNull, 0, nullAttributesIndicatorActualSize);\n+\n+    // age field : NULL\n+    nullsIndicatorWithNull[0] = 64; // 01000000\n+\n+    for (int i = 0; i < numTuples; i++) {\n+        tuple = malloc(100);\n+\n+        // Insert Tuple\n+        auto height = (float) i;\n+\n+        age = (rand() % 20) + 15;\n+\n+        sprintf(suffix, \"%d\", i);\n+\n+        if (i % 10 == 0) {\n+            tupleName = \"TesterNull\";\n+            tupleName += suffix;\n+            prepareTuple(attrs.size(), nullsIndicatorWithNull, tupleName.length(), tupleName, 0, height, 456, tuple,\n+                         &tupleSize);\n+        } else {\n+            tupleName = \"Tester\";\n+            tupleName += suffix;\n+            prepareTuple(attrs.size(), nullsIndicator, tupleName.length(), tupleName, age, height, 123, tuple,\n+                         &tupleSize);\n+        }\n+        rc = rm.insertTuple(tableName, tuple, rid);\n+        assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+        rids[i] = rid;\n+        free(tuple);\n+    }\n+\n+    // Set up the iterator\n+    RM_ScanIterator rmsi;\n+    std::string attr = \"Age\";\n+    std::vector<std::string> attributes;\n+    attributes.push_back(attr);\n+    rc = rm.scan(tableName, attr, GT_OP, &ageVal, attributes, rmsi);\n+    assert(rc == success && \"RelationManager::scan() should not fail.\");\n+\n+    while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {\n+        // Check the first bit of the returned data since we only return one attribute in this test case\n+        // However, the age with NULL should not be returned since the condition NULL > 25 can't hold.\n+        // All comparison operations with NULL should return FALSE\n+        // (e.g., NULL > 25, NULL >= 25, NULL <= 25, NULL < 25, NULL == 25, NULL != 25: ALL FALSE)\n+        nullBit = *(unsigned char *) ((char *) returnedData) & ((unsigned) 1 << (unsigned) 7);\n+        if (!nullBit) {\n+            age = *(int *) ((char *) returnedData + 1);\n+            if (age <= ageVal) {\n+                // Comparison didn't work in this case\n+                std::cout << \"Returned value from a scan is not correct: returned Age <= 25.\" << std::endl;\n+                std::cout << \"***** [FAIL] Test Case 13B Failed *****\" << std::endl << std::endl;\n+                rmsi.close();\n+                free(returnedData);\n+                free(suffix);\n+                free(nullsIndicator);\n+                free(nullsIndicatorWithNull);\n+                return -1;\n+            }\n+        } else {\n+            // Age with NULL value should not be returned.\n+            std::cout << \"Returned value from a scan is not correct. NULL returned.\" << std::endl;\n+            std::cout << \"***** [FAIL] Test Case 13B Failed *****\" << std::endl << std::endl;\n+            rmsi.close();\n+            free(returnedData);\n+            free(suffix);\n+            free(nullsIndicator);\n+            free(nullsIndicatorWithNull);\n+            return -1;\n+        }\n+    }\n+    rmsi.close();\n+    free(returnedData);\n+    free(suffix);\n+    free(nullsIndicator);\n+    free(nullsIndicatorWithNull);\n+\n+    rc = rm.deleteTable(\"tbl_b_employee5\");\n+\n+    std::cout << \"Test Case 13B Finished. The result will be examined. *****\" << std::endl << std::endl;\n+\n+    return success;\n+}\n+\n+int main() {\n+    // Scan with conditions\n+    createTable(\"tbl_b_employee5\");\n+    return TEST_RM_13b(\"tbl_b_employee5\");\n+}\ndiff --git a/rm/rmtest_14.cc b/rm/rmtest_14.cc\nnew file mode 100644\nindex 0000000..b60b5f6\n--- /dev/null\n+++ b/rm/rmtest_14.cc\n@@ -0,0 +1,69 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_14(const std::string &tableName) {\n+    // Functions Tested:\n+    // 1. System Catalog Implementation - Tables table\n+    std::cout << std::endl << \"***** In RM Test Case 14 *****\" << std::endl;\n+\n+    // Get Catalog Attributes\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    // There should be at least three attributes: table-id, table-name, file-name\n+    if (attrs.size() < 3) {\n+        std::cout << \"Your system catalog schema is not correct.\" << std::endl;\n+        std::cout << \"***** [FAIL] Test Case 14 failed *****\" << std::endl;\n+        return -1;\n+    } else if (attrs[0].name != \"table-id\" || attrs[1].name != \"table-name\" || attrs[2].name != \"file-name\") {\n+        std::cout << \"Your system catalog schema is not correct.\" << std::endl;\n+        std::cout << \"***** [FAIL] Test Case 14 failed *****\" << std::endl;\n+        return -1;\n+    }\n+\n+    RID rid;\n+    void *returnedData = malloc(1000);\n+\n+    // Set up the iterator\n+    RM_ScanIterator rmsi;\n+    std::vector<std::string> projected_attrs;\n+    projected_attrs.reserve(attrs.size());\n+    for (Attribute &attr : attrs) {\n+        projected_attrs.push_back(attr.name);\n+    }\n+\n+    rc = rm.scan(tableName, \"\", NO_OP, NULL, projected_attrs, rmsi);\n+    assert(rc == success && \"RelationManager::scan() should not fail.\");\n+\n+    int count = 0;\n+    while (rmsi.getNextTuple(rid, returnedData) != RM_EOF) {\n+        // We will manually check the returned tuples to see whether your implementation is correct or not.\n+        rm.printTuple(attrs, returnedData);\n+        count++;\n+    }\n+    rmsi.close();\n+\n+    // There should be at least two rows - one for Tables and one for Columns\n+    if (count < 2) {\n+        std::cout << \"Your system catalog schema is not correct.\" << std::endl;\n+        std::cout << \"***** [FAIL] Test Case 14 failed\" << std::endl;\n+        free(returnedData);\n+        return -1;\n+    }\n+\n+    // Deleting the catalog should fail.\n+    rc = rm.deleteTable(tableName);\n+    assert(rc != success && \"RelationManager::deleteTable() on the system catalog table should fail.\");\n+\n+    free(returnedData);\n+    std::cout << \"***** Test Case 14 Finished. The result will be examined. *****\" << endl;\n+    return 0;\n+}\n+\n+int main() {\n+    // NOTE: your Tables table must be called \"Tables\"\n+    std::string catalog_table_name = \"Tables\";\n+\n+    // Test Catalog Information\n+    return TEST_RM_14(catalog_table_name);\n+}\ndiff --git a/rm/rmtest_15.cc b/rm/rmtest_15.cc\nnew file mode 100644\nindex 0000000..d435147\n--- /dev/null\n+++ b/rm/rmtest_15.cc\n@@ -0,0 +1,72 @@\n+#include \"rm_test_util.h\"\n+\n+RC TEST_RM_15(const std::string &tableName)\n+{\n+    // Functions Tested:\n+    // 1. System Catalog Implementation - Columns table\n+    std::cout <<std::endl << \"***** In RM Test Case 15 *****\" <<std::endl;\n+\n+    // Get Catalog Attributes\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    // There should be at least five attributes: table-id, column-name, column-type, column-length, column-position\n+    if (attrs.size() < 5) {\n+        std::cout << \"Your system catalog schema is not correct.\" <<std::endl;\n+       std::cout << \"***** [FAIL] Test Case 15 failed *****\" <<std::endl;\n+        return -1;\n+    } else if (attrs[0].name != \"table-id\" || attrs[1].name != \"column-name\" ||\n+    \t\t   attrs[2].name != \"column-type\" || attrs[3].name != \"column-length\" || attrs[4].name != \"column-position\") {\n+        std::cout << \"Your system catalog schema is not correct.\" <<std::endl;\n+       std::cout << \"***** [FAIL] Test Case 15 failed *****\" <<std::endl;\n+        return -1;\n+    }\n+\n+    RID rid;\n+    void *returnedData = malloc(200);\n+\n+    // Set up the iterator\n+    RM_ScanIterator rmsi;\n+    std::vector<std::string> projected_attrs;\n+    for (Attribute & attr : attrs){\n+      projected_attrs.push_back(attr.name);\n+    }\n+\n+    rc = rm.scan(tableName, \"\", NO_OP, NULL, projected_attrs, rmsi);\n+    assert(rc == success && \"RelationManager::scan() should not fail.\");\n+\n+    int count = 0;\n+    while(rmsi.getNextTuple(rid, returnedData) != RM_EOF)\n+    {\n+    \t// We will manually check the returned tuples to see whether your implementation is correct or not.\n+        rm.printTuple(attrs, returnedData);\n+        count++;\n+    }\n+    rmsi.close();\n+\n+    // There should be at least eight rows - three for Tables and five for Columns\n+    if (count < 8) {\n+        std::cout << \"Your system catalog schema is not correct.\" <<std::endl;\n+       std::cout << \"***** [FAIL] Test Case 15 failed\" <<std::endl;\n+        free(returnedData);\n+        return -1;\n+    }\n+\n+    // Deleting the catalog should fail.\n+    rc = rm.deleteTable(tableName);\n+    assert(rc != success && \"RelationManager::deleteTable() on the system catalog table should fail.\");\n+\n+    free(returnedData);\n+   std::cout << \"***** Test Case 15 Finished. The result will be examined. *****\" <<std::endl;\n+    return 0;\n+}\n+\n+int main()\n+{\n+    // NOTE: your Columns table must be called \"Columns\"\n+    std::string catalog_table_name = \"Columns\";\n+\n+    // Test Catalog Information\n+    return TEST_RM_15(catalog_table_name);\n+}\ndiff --git a/rm/rmtest_create_tables.cc b/rm/rmtest_create_tables.cc\nnew file mode 100644\nindex 0000000..1eecdcd\n--- /dev/null\n+++ b/rm/rmtest_create_tables.cc\n@@ -0,0 +1,41 @@\n+#include \"rm_test_util.h\"\n+\n+int main() {\n+    // By executing this script, the following tables including the system tables will be removed and constructed again.\n+\n+    // Before executing rmtest_xx, you need to make sure that this script work properly.\n+    std::cout << std::endl << \"***** RM TEST - Creating the Catalog and user tables *****\" << std::endl;\n+\n+    // Try to delete the System Catalog.\n+    // If this is the first time, it will generate an error. It's OK and we will ignore that.\n+    RC rc = rm.deleteCatalog();\n+\n+    rc = rm.createCatalog();\n+    assert (rc == success && \"Creating the Catalog should not fail.\");\n+\n+    // Delete the actual file and create Table tbl_employee\n+    remove(\"tbl_employee\");\n+\n+    rc = createTable(\"tbl_employee\");\n+    assert (rc == success && \"Creating a table should not fail.\");\n+\n+    // Delete the actual file and create Table tbl_employee\n+    remove(\"tbl_employee2\");\n+\n+    rc = createTable(\"tbl_employee2\");\n+    assert (rc == success && \"Creating a table should not fail.\");\n+\n+    // Delete the actual file and create Table tbl_employee\n+    remove(\"tbl_employee3\");\n+\n+    rc = createTable(\"tbl_employee3\");\n+    assert (rc == success && \"Creating a table should not fail.\");\n+\n+    // Delete the actual file and create Table tbl_employee\n+    remove(\"tbl_employee4\");\n+\n+    rc = createLargeTable(\"tbl_employee4\");\n+    assert (rc == success && \"Creating a table should not fail.\");\n+\n+    return success;\n+}\ndiff --git a/rm/rmtest_delete_tables.cc b/rm/rmtest_delete_tables.cc\nnew file mode 100644\nindex 0000000..a2fb2b5\n--- /dev/null\n+++ b/rm/rmtest_delete_tables.cc\n@@ -0,0 +1,35 @@\n+#include \"rm_test_util.h\"\n+\n+int main() {\n+\n+    // By executing this script, the following tables including the system tables will be removed.\n+    std::cout << std::endl << \"***** RM TEST - Deleting the Catalog and User tables *****\" << std::endl;\n+\n+    RC rc = rm.deleteTable(\"tbl_employee\");\n+    if (rc != 0) {\n+        std::cout << \"Deleting tbl_employee failed.\" << std::endl;\n+    }\n+\n+    rc = rm.deleteTable(\"tbl_employee2\");\n+    if (rc != 0) {\n+        std::cout << \"Deleting tbl_employee2 failed.\" << std::endl;\n+    }\n+\n+    rc = rm.deleteTable(\"tbl_employee3\");\n+    if (rc != 0) {\n+        std::cout << \"Deleting tbl_employee3 failed.\" << std::endl;\n+    }\n+\n+    rc = rm.deleteTable(\"tbl_employee4\");\n+    if (rc != 0) {\n+        std::cout << \"Deleting tbl_employee4 failed.\" << std::endl;\n+    }\n+\n+    rc = rm.deleteCatalog();\n+    if (rc != 0) {\n+        std::cout << \"Deleting the catalog failed.\" << std::endl;\n+        return rc;\n+    }\n+\n+    return success;\n+}\ndiff --git a/rm/rmtest_extra_1.cc b/rm/rmtest_extra_1.cc\nnew file mode 100644\nindex 0000000..2c88345\n--- /dev/null\n+++ b/rm/rmtest_extra_1.cc\n@@ -0,0 +1,84 @@\n+#include \"rm_test_util.h\"\n+\n+RC RM_TEST_EXTRA_1(const std::string &tableName, const int nameLength, const std::string &name, const int age,\n+                   const int height, const int salary) {\n+    // Extra Test Case - Functions Tested:\n+    // 1. Insert tuple\n+    // 2. Read Attributes\n+    // 3. Drop Attributes **\n+    std::cout << std::endl << \"***** In RM Extra Credit Test Case 1 *****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    void *tuple = malloc(200);\n+    void *returnedData = malloc(200);\n+\n+    // Insert Tuple\n+    std::vector<Attribute> attrs;\n+    RC rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    int nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    prepareTuple(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, tuple, &tupleSize);\n+    rc = rm.insertTuple(tableName, tuple, rid);\n+    assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+    // Read Attribute\n+    rc = rm.readAttribute(tableName, rid, \"Height\", returnedData);\n+    assert(rc == success && \"RelationManager::readAttribute() should not fail.\");\n+\n+    if (memcmp((char *) returnedData + nullAttributesIndicatorActualSize,\n+               (char *) tuple + 22 + nullAttributesIndicatorActualSize, 4) != 0) {\n+        std::cout << \"RelationManager::readAttribute() failed.\" << std::endl;\n+        std::cout << \"***** [FAIL] Extra Credit Test Case 1 Failed. *****\" << std::endl;\n+        free(returnedData);\n+        free(tuple);\n+        free(nullsIndicator);\n+        return -1;\n+    } else {\n+        // Drop the attribute\n+        rc = rm.dropAttribute(tableName, \"Height\");\n+        assert(rc == success && \"RelationManager::dropAttribute() should not fail.\");\n+\n+        // Read Tuple and print the tuple\n+        rc = rm.readTuple(tableName, rid, returnedData);\n+        assert(rc == success && \"RelationManager::readTuple() should not fail.\");\n+\n+        // Get the attribute from the table again\n+        std::vector<Attribute> attrs2;\n+        rc = rm.getAttributes(tableName, attrs2);\n+\n+        // The size of the original attribute vector size should be greater than the current one.\n+        if (attrs.size() <= attrs2.size()) {\n+            std::cout << \"***** [FAIL] Extra Credit Test Case 1 Failed. *****\" << std::endl;\n+            free(tuple);\n+            free(returnedData);\n+            free(nullsIndicator);\n+        } else {\n+            rc = rm.printTuple(attrs2, returnedData);\n+            assert(rc == success && \"RelationManager::printTuple() should not fail.\");\n+        }\n+    }\n+\n+    free(tuple);\n+    free(returnedData);\n+    free(nullsIndicator);\n+\n+    std::cout << \"***** Extra Credit Test Case 1 finished. The result will be examined. *****\" << std::endl;\n+    return success;\n+}\n+\n+int main() {\n+    std::string name1 = \"Peter Anteater\";\n+\n+    // Drop table for the case where we execute this test multiple times.\n+    // We ignore the error code for this operation.\n+    rm.deleteTable(\"tbl_employee100\");\n+\n+    // Create a table\n+    createTable(\"tbl_employee100\");\n+    return RM_TEST_EXTRA_1(\"tbl_employee100\", 14, name1, 24, 185, 10000);\n+}\ndiff --git a/rm/rmtest_extra_2.cc b/rm/rmtest_extra_2.cc\nnew file mode 100644\nindex 0000000..b05316a\n--- /dev/null\n+++ b/rm/rmtest_extra_2.cc\n@@ -0,0 +1,76 @@\n+#include \"rm_test_util.h\"\n+\n+RC RM_TEST_EXTRA_2(const std::string &tableName, const int nameLength, const std::string &name, const int age,\n+                   const int height, const int salary, const int ssn) {\n+    // Functions Tested\n+    // 1. Add Attribute **\n+    // 2. Insert Tuple\n+    std::cout << std::endl << \"***** In RM Extra Credit Test Case 2 *****\" << std::endl;\n+\n+    RID rid;\n+    unsigned tupleSize = 0;\n+    void *tuple = malloc(200);\n+    void *returnedData = malloc(200);\n+\n+    // Test Add Attribute\n+    Attribute attr;\n+    attr.name = \"SSN\";\n+    attr.type = TypeInt;\n+    attr.length = 4;\n+    RC rc = rm.addAttribute(tableName, attr);\n+    assert(rc == success && \"RelationManager::addAttribute() should not fail.\");\n+\n+    // GetAttributes\n+    std::vector<Attribute> attrs;\n+    rc = rm.getAttributes(tableName, attrs);\n+    assert(rc == success && \"RelationManager::getAttributes() should not fail.\");\n+\n+    unsigned nullAttributesIndicatorActualSize = getActualByteForNullsIndicator(attrs.size());\n+    auto *nullsIndicator = (unsigned char *) malloc(nullAttributesIndicatorActualSize);\n+    memset(nullsIndicator, 0, nullAttributesIndicatorActualSize);\n+\n+    // Test Insert Tuple\n+    prepareTupleAfterAdd(attrs.size(), nullsIndicator, nameLength, name, age, height, salary, ssn, tuple, &tupleSize);\n+    rc = rm.insertTuple(tableName, tuple, rid);\n+    assert(rc == success && \"RelationManager::insertTuple() should not fail.\");\n+\n+    // Test Read Tuple\n+    rc = rm.readTuple(tableName, rid, returnedData);\n+    assert(rc == success && \"RelationManager::readTuple() should not fail.\");\n+\n+    std::cout << \"Inserted Data:\" << std::endl;\n+    rc = rm.printTuple(attrs, tuple);\n+\n+    std::cout << std::endl << \"Returned Data:\" << std::endl;\n+    rc = rm.printTuple(attrs, returnedData);\n+\n+    if (memcmp(returnedData, tuple, tupleSize) != 0) {\n+        std::cout << \"***** [FAIL] Extra Credit Test Case 2 Failed *****\" << std::endl << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return -1;\n+    } else {\n+        std::cout << \"***** Extra Credit Test Case 2 Finished. The result will be examined. *****\" << std::endl\n+                  << std::endl;\n+        free(tuple);\n+        free(returnedData);\n+        free(nullsIndicator);\n+        return success;\n+    }\n+\n+}\n+\n+int main() {\n+    std::string name2 = \"Victors\";\n+\n+    // Drop table for the case where we execute this test multiple times.\n+    // We ignore the error code for this operation.\n+    rm.deleteTable(\"tbl_employee200\");\n+\n+    createTable(\"tbl_employee200\");\n+\n+    // Add Attributes\n+    return RM_TEST_EXTRA_2(\"tbl_employee200\", 7, name2, 22, 180, 6000, 123479765);\n+\n+}\n-- \n2.21.0 (Apple Git-120)\n\n", "encoding": "ascii"}