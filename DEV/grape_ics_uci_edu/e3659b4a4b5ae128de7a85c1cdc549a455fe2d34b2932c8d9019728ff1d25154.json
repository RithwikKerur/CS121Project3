{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs222-2017-fall-mac-setup-guide?version=5&format=txt", "content": "{{{#!div style=\"background-color:rgb(237,222,222)\"\r\n\r\n== '''Mac Setup Guide''' ==\r\nThis page will guide you how to setup C++ development environment on Mac using Eclipse and how to set gdb for debugging purposes.\r\n\r\n'''Setup development environment using Eclipse'''\r\n\r\n1: Install [https://itunes.apple.com/us/app/xcode/id497799835?mt=12 Xcode] from Mac App Store. After the installation is finished, open it and it will start installing additional necessary things.\r\n\r\n2: Open terminal, type  ` xcode-select --install `  Follow the prompts to let it install necessary components (Xcode Command Line Tools)\r\n\r\n3: Download and install [http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/oxygen/1.RC4/eclipse-cpp-oxygen-1-rc4-macosx-cocoa-x86_64.dmg Eclipse for C/C++] for Mac OS X. We recommend using the latest version, but you don't have to. Note: for mac users who have updated to Mac OS X High Sierra, please follow the exact link to download Oxygen 1.RC4, since it fixes a bug that won't let you run C/C++ programs in Eclipse in High Sierra.\r\n\r\n4: Go to the [https://grape.ics.uci.edu/wiki/public/wiki/cs222p-2017-fall-project1-create-project deployment guide] to set up the codebase for project 1. Be sure to select '''MacOSX GCC''' instead of Cross GCC.\r\n\r\nYou can check [http://www.ics.uci.edu/~pattis/common/handouts/macmingweclipse/eclipse.html this page] if you need more detailed instructions.\r\n\r\n'''Set up GDB for debugging purposes'''\r\n\r\nThis process is pretty complicated, but GDB can help a lot when debugging.\r\n\r\nFollow this [https://www.thomasvitale.com/how-to-setup-gdb-and-eclipse-to-debug-c-files-on-macos-sierra/ set up gdb on mac guide] to set up gdb. This guide is tested and works fine as of 9/27/2017. But you'll be likely to meet the following problems:\r\n\r\n * When signing the certificate, the command is  ` codesign -s gdb-cert gdbPath `  ` gdb-cert ` is the name you choose when you create the certificate for GDB.  ` gdbPath ` on my mac is ` /usr/local/Cellar/gdb/8.0.1/bin/gdb `, If you can't find it, you can also try ` /usr/local/bin/gdb `.\r\n * If you don't see the GDB option in the Preference window: Try to first start a debugging session for any project that you can already run without problems. You can do it by either clicking the Debug button on the toolbar, or selecting Run -> Debug from the main menu. This attempt will, of course, fail with an error message about the gdb command, but it will force the said C/C++DebugGDB settings to appear in the preferences.\r\n * If Debug still shows an error message ` Error with command: gdb --version ` on your C ++ project: The global preference will only change the GDB executable for new projects; For all existing ones (that you are going to use debugging for), you will need to manually update their debug configurations. To do that, select Run -> Debug Configurations from the menu. In the window that appears, one after another, select every project under the C++ Application section in the sidebar. For each of them, open the Debugger tab, set the GDB debugger field to the same GDB path, and click the Apply button. After repeating this change for all listed projects, click Close.\r\n\r\nThis [https://www.ics.uci.edu/~pattis/common/handouts/macmingweclipse/allexperimental/mac-gdb-install.html outdated guide] won't work anymore, but it still provides useful information. If this outdated guide says different things, please follow the first guide.\r\n\r\n'''Set up Valgrind for debugging purposes'''\r\n\r\nValgrind is a very powerful tool to detect memory leaks in your program. As of 10/6/2017, the latest release of Valgrind (3.13.0) doesn't support MacOS 10.13 High Sierra yet, so we have to build from source on our own. Even if you use a older version of Mac, I recommend you to follow the same process.\r\n\r\nPrerequisite:\r\n\r\n 1. Xcode command line tools, you should already have it if you follow step 1 and 2 of Eclipse setup guide.\r\n 1. Install [https://brew.sh/ Homebrew] if you haven't done so. Homebrew is a powerful package management tool for Mac and everyone is highly recommended install it.\r\n\r\nInstallation:\r\n\r\n 1. Install git using homebrew:  '''` brew install git `'''\r\n 1. Install automake using homebrew: '''` brew install automake `'''\r\n 1. Clone Valgrind's git repository: '''` git clone git://sourceware.org/git/valgrind.git `'''\r\n 1. cd into the valgrind folder: '''` cd valgrind `'''\r\n 1. run '''` ./autogen.sh `'''\r\n 1. run '''` ./configure `'''\r\n 1. run '''` make `'''\r\n 1. run '''` make install `'''\r\n\r\n}}}", "encoding": "ascii"}