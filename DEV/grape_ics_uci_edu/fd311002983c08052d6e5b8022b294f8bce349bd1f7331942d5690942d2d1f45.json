{"url": "https://grape.ics.uci.edu/wiki/public/wiki/cs222-2017-fall-project4?action=diff&version=1", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n\n  <head>\n    <title>\n      cs222-2017-fall-project4 (diff) \u2013 Public\n    </title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!--[if IE]><script type=\"text/javascript\">\n      if (/^#__msie303:/.test(window.location.hash))\n        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));\n    </script><![endif]-->\n        <link rel=\"search\" href=\"/wiki/public/search\" />\n        <link rel=\"help\" href=\"/wiki/public/wiki/TracGuide\" />\n        <link rel=\"up\" href=\"/wiki/public/wiki/cs222-2017-fall-project4?action=history\" title=\"Page history\" />\n        <link rel=\"next\" href=\"/wiki/public/wiki/cs222-2017-fall-project4?action=diff&amp;version=2\" title=\"Version 2\" />\n        <link rel=\"start\" href=\"/wiki/public/wiki\" />\n        <link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/wiki.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/common/css/diff.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.css\" type=\"text/css\" />\n        <link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/common/css/trac.css\" /><link rel=\"tracwysiwyg.stylesheet\" href=\"/wiki/public/chrome/tracwysiwyg/editor.css\" />\n        <link rel=\"tracwysiwyg.base\" href=\"/wiki/public\" />\n        <link rel=\"shortcut icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n        <link rel=\"icon\" href=\"/wiki/public/chrome/site/favicon.ico\" type=\"image/x-icon\" />\n    <style id=\"trac-noscript\" type=\"text/css\">.trac-noscript { display: none !important }</style>\n    <script type=\"text/javascript\">\n      var _tracwysiwyg={};\n    </script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/jquery.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/babel.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/trac.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/search.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/common/js/diff.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\" src=\"/wiki/public/chrome/tracwysiwyg/wysiwyg.js\"></script>\n    <script type=\"text/javascript\">\n      jQuery(\"#trac-noscript\").remove();\n      jQuery(document).ready(function($) {\n        $(\".trac-autofocus\").focus();\n        $(\".trac-target-new\").attr(\"target\", \"_blank\");\n        setTimeout(function() { $(\".trac-scroll\").scrollToTop() }, 1);\n        $(\".trac-disable-on-submit\").disableOnSubmit();\n      });\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/wiki/public/chrome/common/css/diff.css\" />\n    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\" />\n  </head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://www.ics.uci.edu/\"><img src=\"/wiki/public/chrome/site/ics.jpg\" alt=\"ICS Logo\" height=\"67\" width=\"128\" /></a>\n      </div>\n      <form id=\"search\" action=\"/wiki/public/search\" method=\"get\">\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/wiki/public/login\">Login</a></li><li><a href=\"/wiki/public/prefs\">Preferences</a></li><li class=\"last\"><a href=\"/wiki/public/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><span class=\"missing\">&larr; Previous Change</span></li><li><a href=\"/wiki/public/wiki/cs222-2017-fall-project4?action=history\" title=\"Page history\">Wiki History</a></li><li class=\"last\"><span><a class=\"next\" href=\"/wiki/public/wiki/cs222-2017-fall-project4?action=diff&amp;version=2\" title=\"Version 2\">Next Change</a> &rarr;</span></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"wiki\">\n      <h1>\n        Changes between\n          <a href=\"/wiki/public/wiki/cs222-2017-fall-project4?version=0\">Initial Version</a> and\n          <a href=\"/wiki/public/wiki/cs222-2017-fall-project4?version=1\">Version 1</a> of\n          <a href=\"/wiki/public/wiki/cs222-2017-fall-project4\">cs222-2017-fall-project4</a>\n      </h1>\n      <form method=\"post\" id=\"prefs\" action=\"/wiki/public/wiki/cs222-2017-fall-project4?version=1\"><div><input type=\"hidden\" name=\"__FORM_TOKEN\" value=\"9723ec417119f542c366a0c9\" /></div>\n        <div>\n          <input type=\"hidden\" name=\"action\" value=\"diff\" />\n          <input type=\"hidden\" name=\"version\" value=\"1\" />\n          <input type=\"hidden\" name=\"old_version\" value=\"0\" />\n          \n  <label for=\"style\">View differences</label>\n  <select id=\"style\" name=\"style\">\n    <option selected=\"selected\" value=\"inline\">inline</option>\n    <option value=\"sidebyside\">side by side</option>\n  </select>\n  <div class=\"field\">\n    <label><input type=\"radio\" name=\"contextall\" value=\"0\" checked=\"checked\" />\n             Show</label>\n      <label><input type=\"text\" name=\"contextlines\" id=\"contextlines\" size=\"2\" maxlength=\"3\" value=\"2\" />\n             lines around each change</label><br />\n    <label><input type=\"radio\" name=\"contextall\" value=\"1\" />\n           Show the changes in full context</label>\n  </div>\n  <fieldset id=\"ignore\">\n    <legend>Ignore:</legend>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignoreblanklines\" name=\"ignoreblanklines\" />\n      <label for=\"ignoreblanklines\">Blank lines</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorecase\" name=\"ignorecase\" />\n      <label for=\"ignorecase\">Case changes</label>\n    </div>\n    <div class=\"field\">\n      <input type=\"checkbox\" id=\"ignorewhitespace\" name=\"ignorewhitespace\" />\n      <label for=\"ignorewhitespace\">White space changes</label>\n    </div>\n  </fieldset>\n  <div class=\"buttons\">\n    <input type=\"submit\" name=\"update\" value=\"Update\" />\n  </div>\n\n        </div>\n      </form>\n      <dl id=\"overview\">\n        <dt class=\"property time\">Timestamp:</dt>\n        <dd class=\"time\">\n            Nov 20, 2017 9:31:20 PM (<a class=\"timeline\" href=\"/wiki/public/timeline?from=2017-11-20T21%3A31%3A20-08%3A00&amp;precision=second\" title=\"See timeline at Nov 20, 2017 9:31:20 PM\">23 months</a> ago)\n        </dd>\n        <dt class=\"property author\">Author:</dt>\n        <dd class=\"author\">\n          zuozhi\n        </dd>\n        <dt class=\"property message\">Comment:</dt>\n        <dd class=\"message\">\n          \n          <p>\n--\n</p>\n\n        </dd>\n      </dl>\n      <div class=\"diff\">\n        <div class=\"legend\" id=\"diff-legend\">\n          <h3>Legend:</h3>\n          <dl>\n            <dt class=\"unmod\"></dt><dd>Unmodified</dd>\n            <dt class=\"add\"></dt><dd>Added</dd>\n            <dt class=\"rem\"></dt><dd>Removed</dd>\n            <dt class=\"mod\"></dt><dd>Modified</dd>\n          </dl>\n        </div>\n        <div class=\"diff\">\n  <ul class=\"entries\">\n      <li class=\"entry\">\n        <h2 id=\"file0\">\n          <a href=\"/wiki/public/wiki/cs222-2017-fall-project4?version=1\">cs222-2017-fall-project4</a>\n        </h2>\n        <table class=\"trac-diff inline\" summary=\"Differences\" cellspacing=\"0\">\n              <colgroup><col class=\"lineno\" /><col class=\"lineno\" /><col class=\"content\" /></colgroup>\n              <thead>\n                <tr>\n                  <th title=\"Version currently edited\">\n                    <a href=\"#L1\">\n                      v1</a>\n                  </th>\n                  <th title=\"Version 1\">\n                    <a href=\"/wiki/public/wiki/cs222-2017-fall-project4?version=1#L1\">\n                      v1</a>\n                  </th>\n                  <td>\u00a0</td>\n                </tr>\n              </thead>\n            <tbody class=\"add\">\n                  <tr class=\"first\">\n                          <th>\u00a0</th><th>1</th><td class=\"r\"><ins>[[PageOutline]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>2</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>3</th><td class=\"r\"><ins>= Project 4: Implementing a Query Engine with the Extension of the Relation Manager =</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>4</th><td class=\"r\"><ins>&nbsp; &nbsp;* ''' Deadline: Friday, Dec 8, 2017 at 11:45 pm, on EEE.'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>5</th><td class=\"r\"><ins>&nbsp; &nbsp;* ''' Full Credit: 100 points '''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>6</th><td class=\"r\"><ins>&nbsp; &nbsp;* ''' Maximum Extra Credit: 15 points. '''[[br]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>7</th><td class=\"r\"><ins>&nbsp; &nbsp;* ''' As in Projects 2 and 3, you should work with your original team member for this Project. '''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>8</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>9</th><td class=\"r\"><ins>== Introduction ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>10</th><td class=\"r\"><ins>In this project, you will first extend the !RelationManager (RM) component that you implemented for project 2 so that the RM layer can orchestrate both the !RecordBasedFileManager (RBF) and !IndexManager (IX) layers when tuple-level operations happen, and the RM layer will also be managing the catalog information related to indices at this level. After the RM layer extension, you will implement a !QueryEngine (QE) component. The QE component provides classes and methods for answering SQL queries. For simplicity, you only need to implement several basic relational operators. All operators are iterator-based. To give you a jumpstart, we've implemented two wrapper operators on top of the RM layer that provide file and index scanning. See the [wiki:cs222-2017-fall-project4#Appendix Appendix] for more details.[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>11</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>12</th><td class=\"r\"><ins>You can download the [attachment:codebase.zip codebase]. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>13</th><td class=\"r\"><ins>See also the test cases included in the codebase for in-depth examples of how the operators are used.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>14</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>15</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>16</th><td class=\"r\"><ins>[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>17</th><td class=\"r\"><ins>= Part 4.1: !RelationManager Extensions =</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>18</th><td class=\"r\"><ins>== !RelationManager ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>19</th><td class=\"r\"><ins>All of the methods that you implemented for Project 2 should now be extended to coordinate data files plus any associated indices of the data files. For example, if you insert a tuple into a table using RelationManager::insertTuple(), the tuple should be inserted into the table (via the RBF layer) and each corresponding entry should be inserted into each associated index of the table (via the IX layer). Also, if you delete a table using RelationManager::deleteTable(), all associated indices should be deleted, too. This applies both to catalog entries that record what's what and to the file artifacts themselves.&nbsp; The !RelationManager class, in addition to enforcing the coordination semantics between data files and the indices in your existing methods, will also include the following newly-added index-related methods. These methods can all be implemented by simply delegating their work to the underlying IX layer that you built in Project 3. (This part of the project is largely a big wrapper. :-))</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>20</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>21</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>22</th><td class=\"r\"><ins>class RelationManager</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>23</th><td class=\"r\"><ins>{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>24</th><td class=\"r\"><ins>public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>25</th><td class=\"r\"><ins>&nbsp; ...</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>26</th><td class=\"r\"><ins>&nbsp; RC createIndex(const string &amp;tableName, const string &amp;attributeName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>27</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>28</th><td class=\"r\"><ins>&nbsp; RC destroyIndex(const string &amp;tableName, const string &amp;attributeName);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>29</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>30</th><td class=\"r\"><ins>&nbsp; // indexScan returns an iterator to allow the caller to go through qualified entries in index</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>31</th><td class=\"r\"><ins>&nbsp; RC indexScan(const string &amp;tableName,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>32</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const string &amp;attributeName,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>33</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const void *lowKey,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>34</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const void *highKey,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>35</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool lowKeyInclusive,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>36</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool highKeyInclusive,</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>37</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RM_IndexScanIterator &amp;rm_IndexScanIterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>38</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp;);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>39</th><td class=\"r\"><ins>&nbsp; ...</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>40</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>41</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>42</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>43</th><td class=\"r\"><ins>=== RC createIndex(const string &amp;tableName, const string &amp;attributeName) ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>44</th><td class=\"r\"><ins>This method creates an index on a given attribute of a given table.&nbsp; (It should also reflect its existence in the catalogs.)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>45</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>46</th><td class=\"r\"><ins>=== RC destroyIndex(const string &amp;tableName, const string &amp;attributeName) ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>47</th><td class=\"r\"><ins>This method destroys an index on a given attribute of a given table.&nbsp; (It should also reflect its non-existence in the catalogs.)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>48</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>49</th><td class=\"r\"><ins>===&nbsp; &nbsp;RC indexScan(const string &amp;tableName, const string &amp;attributeName, const void *lowKey, const void *highKey, bool lowKeyInclusive, bool highKeyInclusive, RM_IndexScanIterator &amp;rm_IndexScanIterator) ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>50</th><td class=\"r\"><ins>This method should initialize a condition-based scan over the entries in the open index on the given attribute of the given table. If the scan initiation method is successful, a RM_IndexScanIterator object called rm_IndexScanIterator is returned. (Please see the RM_IndexScanIterator class below.) Once underway, by calling RM_IndexScanIterator::getNextEntry(), the iterator should produce the entries of all records whose indexed attribute key falls into the range specified by the lowKey, highKey, and inclusive flags. If lowKey is NULL, it can be interpreted as -infinity. If highKey is NULL, it can be interpreted as +infinity. The format of the parameter lowKey and highKey is the same as the format of the key in IndexManager::insertEntry(). </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>51</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>52</th><td class=\"r\"><ins>== RM_IndexScanIterator ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>53</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>54</th><td class=\"r\"><ins>class RM_IndexScanIterator {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>55</th><td class=\"r\"><ins>&nbsp;public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>56</th><td class=\"r\"><ins>&nbsp; RM_IndexScanIterator();&nbsp; &nbsp; &nbsp; &nbsp;// Constructor</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>57</th><td class=\"r\"><ins>&nbsp; ~RM_IndexScanIterator();&nbsp; &nbsp; &nbsp; // Destructor</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>58</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>59</th><td class=\"r\"><ins>&nbsp; // \"key\" follows the same format as in IndexManager::insertEntry()</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>60</th><td class=\"r\"><ins>&nbsp; RC getNextEntry(RID &amp;rid, void *key);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Get next matching entry</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>61</th><td class=\"r\"><ins>&nbsp; RC close();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Terminate index scan</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>62</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>63</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>64</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>65</th><td class=\"r\"><ins>=== RC getNextEntry(RID &amp;rid, void *key) ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>66</th><td class=\"r\"><ins>This method should set its output parameters rid and key to be the RID and key, respectively, of the next record in the index scan. This method should return RM_EOF if there are no index entries left satisfying the scan condition. You may assume that RM component clients will not close the corresponding open index while a scan is underway.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>67</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>68</th><td class=\"r\"><ins>=== RC close() ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>69</th><td class=\"r\"><ins>This method should terminate the index scan.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>70</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>71</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>72</th><td class=\"r\"><ins>[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>73</th><td class=\"r\"><ins>[[BR]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>74</th><td class=\"r\"><ins>= Part 4.2: Query Engine =</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>75</th><td class=\"r\"><ins>== Iterator Interface ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>76</th><td class=\"r\"><ins>All of the operators that you will implement in this part inherit from the following '''Iterator''' interface.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>77</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>78</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>79</th><td class=\"r\"><ins>class Iterator {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>80</th><td class=\"r\"><ins>&nbsp; &nbsp; // All the relational operators and access methods are iterators</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>81</th><td class=\"r\"><ins>&nbsp; &nbsp; // This class is the super class of all the following operator classes</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>82</th><td class=\"r\"><ins>&nbsp; &nbsp; public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>83</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; virtual RC getNextTuple(void *data) = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>84</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // For each attribute in vector&lt;Attribute&gt;, name it rel.attr</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>85</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; virtual void getAttributes(vector&lt;Attribute&gt; &amp;attrs) const = 0;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>86</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; virtual ~Iterator() {};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>87</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>88</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>89</th><td class=\"r\"><ins>=== virtual RC getNextTuple(void *data) ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>90</th><td class=\"r\"><ins>This method should set the output parameter '''data''' of the next record. The format of the '''data''' parameter, which refers to the next tuple of the operator's output, is the same as that used in previous projects. Also, null-indicators for the given attributes are always placed at the beginning of '''data'''. That is, the tuple value is a sequence of binary attribute values in which null-indicators are placed first and then each value is represented as follows: (1) For INT and REAL: use 4 bytes; (2) For VARCHAR: use 4 bytes for the length followed by the characters.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>91</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>92</th><td class=\"r\"><ins>=== virtual void getAttributes(vector&lt;Attribute&gt; &amp;attrs) ===</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>93</th><td class=\"r\"><ins>This method returns a vector of attributes in the intermediate relation resulted from this iterator.&nbsp; That is, while the previous method returns the tuples from the operator, this method makes the associated schema information for the returned tuple stream available in the query plan. The names of the attributes in vector&lt;Attribute&gt; should be of the form relation.attribute to clearly specify the relation from which each attribute comes.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>94</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>95</th><td class=\"r\"><ins>== Filter Interface ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>96</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>97</th><td class=\"r\"><ins>class Filter : public Iterator {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>98</th><td class=\"r\"><ins>&nbsp; &nbsp; // Filter operator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>99</th><td class=\"r\"><ins>&nbsp; &nbsp; public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>100</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Filter(Iterator *input,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Iterator of input R</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>101</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const Condition &amp;condition&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Selection condition</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>102</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; );</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>103</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ~Filter();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>104</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>105</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; RC getNextTuple(void *data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>106</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // For attribute in vector&lt;Attribute&gt;, name it as rel.attr</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>107</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; void getAttributes(vector&lt;Attribute&gt; &amp;attrs) const;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>108</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>109</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>110</th><td class=\"r\"><ins>Using this iterator, you can do a selection query such as \"SELECT * FROM EMP WHERE sal &gt; 100000\". </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>111</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>112</th><td class=\"r\"><ins>This filter class is initialized by an input iterator and a selection condition. It filters the tuples from the input iterator by applying the filter predicate '''condition''' on them. For simplicity, we assume this filter only has a single selection condition. The schema of the returned tuples should be the same as the input tuples from the iterator.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>113</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>114</th><td class=\"r\"><ins>== Project Interface ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>115</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>116</th><td class=\"r\"><ins>class Project : public Iterator {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>117</th><td class=\"r\"><ins>&nbsp; &nbsp; // Projection operator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>118</th><td class=\"r\"><ins>&nbsp; &nbsp; public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>119</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Project(Iterator *input,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Iterator of input R</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>120</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const vector&lt;string&gt; &amp;attrNames);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// vector containing attribute names</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>121</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ~Project();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>122</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>123</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; RC getNextTuple(void *data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>124</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // For attribute in vector&lt;Attribute&gt;, name it as rel.attr</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>125</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; void getAttributes(vector&lt;Attribute&gt; &amp;attrs) const;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>126</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>127</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>128</th><td class=\"r\"><ins>This project class takes an iterator and a vector of attribute names as input. It projects out the values of the attributes in the '''attrNames'''. The schema of the returned tuples should be the attributes in attrNames, in the order of attributes in the vector.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>129</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>130</th><td class=\"r\"><ins>== Block Nested-Loop Join Interface ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>131</th><td class=\"r\"><ins>&nbsp; &nbsp;* ''' This is mandatory.&nbsp; '''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>132</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>133</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>134</th><td class=\"r\"><ins>class BNLJoin : public Iterator {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>135</th><td class=\"r\"><ins>&nbsp; &nbsp; // Block nested-loop join operator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>136</th><td class=\"r\"><ins>&nbsp; &nbsp; public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>137</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; BNLJoin(Iterator *leftIn,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Iterator of input R</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>138</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TableScan *rightIn,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// TableScan Iterator of input S</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>139</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const Condition &amp;condition,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Join condition</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>140</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const unsigned numPages&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Number of pages can be loaded into memory, i.e., memory block size (decided by the optimizer)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>141</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; );</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>142</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ~BNLJoin();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>143</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>144</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; RC getNextTuple(void *data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>145</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // For attribute in vector&lt;Attribute&gt;, name it as rel.attr</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>146</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; void getAttributes(vector&lt;Attribute&gt; &amp;attrs) const;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>147</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>148</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>149</th><td class=\"r\"><ins>The BNLJoin takes two iterators as input. The '''leftIn''' iterator works as the outer relation and the '''rightIn''' iterator is the inner relation. The '''rightIn''' is an object of the !TableScan Iterator. We have already implemented the !TableScan class for you, which is a wrapper on&nbsp; RM_ScanIterator. The returned schema should be the attributes of tuples from leftIn concatenated with the attributes of tuples from rightIn. You don't need to remove any duplicate attributes. Note that '''numPages''' is the number of outer (left) pages that the algorithm can load into memory at once. In other words, '''numPages''' is equal to the memory block size (measured in pages) that your algorithm should utilize to make the number of loops through the inner (right) table smaller than a simple tuple-oriented join's would be (by a factor of '''numPages'''). That is, numPages is the number of buffers that can be used to as a read buffer and hash buckets. However, to make it simple, you can use these buffer pages to read records from R. You can construct an another separate in-memory hash table (e.g., std::map) to keep the records in the numPages buffer. This means std::map will take care of two things: loading tuples and hashing them. '''Make sure that the total number of bytes of the loaded tuples in one round does not exceed \"numPages * pageSize\".'''&nbsp; You can also assume that you have one page buffer to read a page from the inner relation '''rightIn''' and one page output buffer to keep the results.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>150</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>151</th><td class=\"r\"><ins>== Index Nested-Loop Join Interface ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>152</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>153</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>154</th><td class=\"r\"><ins>class INLJoin : public Iterator {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>155</th><td class=\"r\"><ins>&nbsp; &nbsp; // Index Nested-Loop join operator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>156</th><td class=\"r\"><ins>&nbsp; &nbsp; public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>157</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; INLJoin(Iterator *leftIn,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Iterator of input R</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>158</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IndexScan *rightIn,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// IndexScan Iterator of input S</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>159</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const Condition &amp;condition&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Join condition</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>160</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; );</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>161</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>162</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ~INLJoin();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>163</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>164</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; RC getNextTuple(void *data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>165</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // For attribute in vector&lt;Attribute&gt;, name it as rel.attr</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>166</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; void getAttributes(vector&lt;Attribute&gt; &amp;attrs) const;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>167</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>168</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>169</th><td class=\"r\"><ins>The INLJoin iterator takes two iterators as input. The '''leftIn''' iterator works as the outer relation, and the '''rightIn''' iterator is the inner relation. The '''rightIn''' is an object of !IndexScan Iterator. Again, we have already implemented the !IndexScan class for you, which is a wrapper on RM_IndexScanIterator. The returned schema should be the attributes of tuples from leftIn concatenated with the attributes of tuples from rightIn. You don't need to remove any duplicate attributes.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>170</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>171</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>172</th><td class=\"r\"><ins>== Grace Hash Join Interface ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>173</th><td class=\"r\"><ins>&nbsp; &nbsp;* ''' Optional: 10 extra-credit points for ''everyone''. '''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>174</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>175</th><td class=\"r\"><ins>class GHJoin : public Iterator {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>176</th><td class=\"r\"><ins>&nbsp; &nbsp; // Grace hash join operator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>177</th><td class=\"r\"><ins>&nbsp; &nbsp; public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>178</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; GHJoin(Iterator *leftIn,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Iterator of input R</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>179</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Iterator *rightIn,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Iterator of input S</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>180</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const Condition &amp;condition,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Join condition (CompOp is always EQ)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>181</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const unsigned numPartitions&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Number of partitions for each relation (decided by the optimizer)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>182</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; );</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>183</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ~GHJoin();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>184</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>185</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; RC getNextTuple(void *data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>186</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // For attribute in vector&lt;Attribute&gt;, name it as rel.attr</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>187</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; void getAttributes(vector&lt;Attribute&gt; &amp;attrs) const;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>188</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>189</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>190</th><td class=\"r\"><ins>Using this iterator you can do a join query such as \"SELECT * FROM EMP, DEPT WHERE EMP.DID = DEPT.DID\".</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>191</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>192</th><td class=\"r\"><ins>The GHJoin takes two iterators as input. It uses '''leftIn''' to iterate over the outer relation and the '''rightIn''' to iterate over the inner relation. Following is a sketch of how to implement this operator:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>193</th><td class=\"r\"><ins>&nbsp; &nbsp;1- In the partitioning phase, create '''numPartitions''' partitions for each relation where each partition is an rbfm file. The name of the outer relation partitions must start with the word \"left\" while the name of the inner relation partitions must start with the word \"right\". In order to avoid conflicts in the file names (in the case of multiple GHJoins in the query tree) you will have to add a suffix that uniquely identify your partitions. For example, you can have something like left_join1_XX and right_join1_XX for the first join and left_join2_XX and right_join2_XX for the second join. '''Note''': It is NOT acceptable to load the entire relation into memory while building the partitions -- you should assume that a query optimizer has chosen the number of partitions based on the amount of memory it has decided to allow this operator to use.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>194</th><td class=\"r\"><ins>&nbsp; &nbsp;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>195</th><td class=\"r\"><ins>&nbsp; &nbsp;2- In the probing phase, load a partition of either R or S (in fact you might want to load the smaller partition^*^) into memory, then build an in-memory hash table for such partition. Next, probe the corresponding partition from the other relation for matching tuples.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>196</th><td class=\"r\"><ins>&nbsp; &nbsp;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>197</th><td class=\"r\"><ins>&nbsp; &nbsp;3- The output will be the join-tuples that must be passed to the next operator. The schema of these join-tuples should be the attributes of tuples from leftIn concatenated with the attributes of tuples from rightIn. You don't need to remove any duplicate attributes.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>198</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>199</th><td class=\"r\"><ins>^*^ Note that if you load the smaller partition (to compare the sizes of the partitions you can use '''fileHandle.getNumberOfPages()''') you may need to rearrange the output attributes if S becomes the left relation. This is NOT a requirement but a closer implementation to what happens in practice&nbsp; :-).&nbsp; </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>200</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>201</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>202</th><td class=\"r\"><ins>== Aggregate Interface ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>203</th><td class=\"r\"><ins>&nbsp; &nbsp;* '''Basic aggregation is Mandatory. '''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>204</th><td class=\"r\"><ins>&nbsp; &nbsp;* '''Group-based hash aggregation is Optional for everyone. You will get 5 extra-credit points for doing so.'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>205</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>206</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>207</th><td class=\"r\"><ins>class Aggregate : public Iterator {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>208</th><td class=\"r\"><ins>&nbsp; &nbsp; // Aggregation operator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>209</th><td class=\"r\"><ins>&nbsp; &nbsp; public:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>210</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Mandatory for everyone</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>211</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Basic aggregation</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>212</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Aggregate(Iterator *input,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Iterator of input R</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>213</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Attribute aggAttr,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // The attribute over which we are computing an aggregate</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>214</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AggregateOp op&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Aggregate operation</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>215</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; );</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>216</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>217</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Optional for everyone. 5 extra-credit points</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>218</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Group-based hash aggregation</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>219</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Aggregate(Iterator *input,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Iterator of input R</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>220</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Attribute aggAttr,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // The attribute over which we are computing an aggregate</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>221</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Attribute groupAttr,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // The attribute over which we are grouping the tuples</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>222</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AggregateOp op&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Aggregate operation</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>223</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; );</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>224</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>225</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ~Aggregate();</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>226</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>227</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; RC getNextTuple(void *data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>228</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // Please name the output attribute as aggregateOp(aggAttr)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>229</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // E.g. Relation=rel, attribute=attr, aggregateOp=MAX</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>230</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; // output attrname = \"MAX(rel.attr)\"</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>231</th><td class=\"r\"><ins>&nbsp; &nbsp; &nbsp; &nbsp; void getAttributes(vector&lt;Attribute&gt; &amp;attrs) const;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>232</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>233</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>234</th><td class=\"r\"><ins>'''Basic aggregation:''' Using the basic aggregation operator, you can execute a query such as: \"SELECT MAX(sal) FROM EMP\". [[br]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>235</th><td class=\"r\"><ins>The basic aggregate method takes an input iterator, an aggregated attribute, and an aggregate function (MIN, MAX, SUM, AVG, COUNT) as the arguments. You can assume we do the aggregation on a numeric attribute (INT or REAL). The returned value is just a single real value (4 bytes), even for the COUNT function. The schema of the (single) returned tuple should be \"!AggregateOp(relation.attribute)\", such as \"MAX(emp.sal)\". Also,&nbsp; null-indicators always needs to be placed at the beginning of a tuple.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>236</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>237</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>238</th><td class=\"r\"><ins>'''Group-based hash aggregation:''' Using the group-based hash aggregation operator, you can execute a query such as: \"SELECT city, MAX(sal) FROM EMP GROUP BY city\". [[br]]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>239</th><td class=\"r\"><ins>To implement the ''group-by'' feature, you need to implement the group-based hash aggregation where we add one more argument to the argument list: '''groupAttr''', which is the group-by attribute. Unlike Grace Hash Join, you are not required to implement hash-partitioned aggregation using partitions on disk. You can assume that all of the groups' aggregation values will fit in a hash table in memory while the operation is executing. (E.g., think group by age or group by state -- where the number of groups is reasonable.) Each returned tuple should include the group-by attribute value followed by the aggregation value. The group-by attribute can be INT, REAL, or VARCHAR. The aggregated attribute can be INT or REAL. The schema of the returned tuples should be the group-by attribute and the aggregation attribute, such as \"emp.city MAX(emp.sal)\". Null-indicators always needs to be placed at the beginning of each tuple. '''5 extra-credit points'''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>240</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>241</th><td class=\"r\"><ins>== Important Note ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>242</th><td class=\"r\"><ins>You must make sure that all operators which create temporary rbfm files to clean up after themselves. That is, such files must be deleted when the operator is closed. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>243</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>244</th><td class=\"r\"><ins>== An Example ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>245</th><td class=\"r\"><ins>Here is an example showing how to assemble the operators to form query plans.&nbsp; Example: \"SELECT Employee.name, Employee.age, Employee.DeptID, Department.Name FROM&nbsp; Employee JOIN Department ON Employee.DeptID = Department.ID WHERE Employee.salary &gt; 50000\". We are assuming for this example that the optimizer has picked the Grace Hash Join algorithm to execute the join. </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>246</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>247</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>248</th><td class=\"r\"><ins>/****** ****** ****** ****** ******</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>249</th><td class=\"r\"><ins>&nbsp;*&nbsp; &nbsp; TABLE SCANS</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>250</th><td class=\"r\"><ins>&nbsp;****** ****** ****** ****** ******/</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>251</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>252</th><td class=\"r\"><ins>TableScan *emp_ts = new TableScan(rm, \"Employee\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>253</th><td class=\"r\"><ins>TableScan *dept_ts = new TableScan(rm, \"Department\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>254</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>255</th><td class=\"r\"><ins>/****** ****** ****** ****** ******</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>256</th><td class=\"r\"><ins>&nbsp;*&nbsp; &nbsp; FILTER Employee Table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>257</th><td class=\"r\"><ins>&nbsp;****** ****** ****** ****** ******/</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>258</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>259</th><td class=\"r\"><ins>Condition cond_f;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>260</th><td class=\"r\"><ins>cond_f.lhsAttr = \"Employee.Salary\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>261</th><td class=\"r\"><ins>cond_f.op = GT_OP;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>262</th><td class=\"r\"><ins>cond_f.bRhsIsAttr = false;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>263</th><td class=\"r\"><ins>Value value;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>264</th><td class=\"r\"><ins>value.type = TypeInt;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>265</th><td class=\"r\"><ins>value.data = malloc(bufsize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>266</th><td class=\"r\"><ins>*(int *)value.data = 50000;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>267</th><td class=\"r\"><ins>cond_f.rhsValue = value;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>268</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>269</th><td class=\"r\"><ins>Filter *filter = new Filter(emp_ts, cond_f);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>270</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>271</th><td class=\"r\"><ins>/****** ****** ****** ****** ******</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>272</th><td class=\"r\"><ins>&nbsp;*&nbsp; &nbsp; PROJECT Employee Table</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>273</th><td class=\"r\"><ins>&nbsp;****** ****** ****** ****** ******/</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>274</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>275</th><td class=\"r\"><ins>vector&lt;string&gt; attrNames;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>276</th><td class=\"r\"><ins>attrNames.push_back(\"Employee.name\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>277</th><td class=\"r\"><ins>attrNames.push_back(\"Employee.age\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>278</th><td class=\"r\"><ins>attrNames.push_back(\"Employee.DeptID\");</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>279</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>280</th><td class=\"r\"><ins>Project project(filter, attrNames);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>281</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>282</th><td class=\"r\"><ins>/****** ****** ****** ****** ******</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>283</th><td class=\"r\"><ins>&nbsp;*&nbsp; &nbsp;GRACE HASH JOIN Employee with Dept</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>284</th><td class=\"r\"><ins>&nbsp;****** ****** ****** ****** ******/</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>285</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>286</th><td class=\"r\"><ins>Condition cond_j;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>287</th><td class=\"r\"><ins>cond_j.lhsAttr = \"Employee.DeptID\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>288</th><td class=\"r\"><ins>cond_j.op = EQ_OP;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>289</th><td class=\"r\"><ins>cond_j.bRhsIsAttr = true;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>290</th><td class=\"r\"><ins>cond_j.rhsAttr = \"Department.ID\";</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>291</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>292</th><td class=\"r\"><ins>GHJoin *ghJoin = new GHJoin(project, dept_ts, cond_j, 100);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>293</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>294</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>295</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>296</th><td class=\"r\"><ins>void *data = malloc(bufsize);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>297</th><td class=\"r\"><ins>while(ghJoin.getNextTuple(data) != QE_EOF)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>298</th><td class=\"r\"><ins>{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>299</th><td class=\"r\"><ins>&nbsp; printAttributes(data);</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>300</th><td class=\"r\"><ins>}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>301</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>302</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>303</th><td class=\"r\"><ins>== Command Line Interface Interpreter ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>304</th><td class=\"r\"><ins>Instead of having to manually assemble the operators to form query plans, as shown in the above example, we are also providing you with a Command Line Interface (CLI) that takes a SQL-like command and executes that command. This will hopefully provide a better, more flexible test environment than the manual approach presented above (e.g., assembling query plans manually, running them, and even debugging them). The CLI runs in interactive mode so that you can type commands and see their results interactively. To get more information about the CLI, please visit&nbsp; [wiki:cs222-2017-fall-command-line-interface this page]. Note that the CLI is provided for your convenience. We will not be using the CLI to test your code.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>305</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>306</th><td class=\"r\"><ins>'''Important Notes:''' </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>307</th><td class=\"r\"><ins>1. In order to run the CLI on Ubuntu you might need to install this library '''libreadline-dev'''. You can run the following command to install it:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>308</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>309</th><td class=\"r\"><ins>sudo apt-get install libreadline-dev </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>310</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>311</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>312</th><td class=\"r\"><ins>2. CLI uses C++11 features. You might need to use g++-4.8 to compile CLI. Please refer to [http://ubuntuhandbook.org/index.php/2013/08/install-gcc-4-8-via-ppa-in-ubuntu-12-04-13-04/ this page] to install GCC 4.8 on Ubuntu.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>313</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>314</th><td class=\"r\"><ins>== Appendix ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>315</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>316</th><td class=\"r\"><ins>Below we list the APIs for the three classes used in the operators. For more detailed implementation information, please refer to the '''qe.h''' header file in the code base. Note that in the !TableScan and !IndexScan classes, the argument '''alias''' is used to rename the input relation. In the case of self-joins, at least one of the uses of the relations must be renamed to differentiate the two from each other in terms of attribute naming.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>317</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>318</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>319</th><td class=\"r\"><ins>struct Condition {</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>320</th><td class=\"r\"><ins>&nbsp; &nbsp; string lhsAttr;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// left-hand side attribute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>321</th><td class=\"r\"><ins>&nbsp; &nbsp; CompOp&nbsp; op;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// comparison operator&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>322</th><td class=\"r\"><ins>&nbsp; &nbsp; bool&nbsp; &nbsp; bRhsIsAttr;&nbsp; &nbsp; &nbsp;// TRUE if right-hand side is an attribute and not a value; FALSE, otherwise</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>323</th><td class=\"r\"><ins>&nbsp; &nbsp; string&nbsp; rhsAttr;&nbsp; &nbsp; &nbsp; &nbsp; // right-hand side attribute if bRhsIsAttr = TRUE</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>324</th><td class=\"r\"><ins>&nbsp; &nbsp; Value&nbsp; &nbsp;rhsValue;&nbsp; &nbsp; &nbsp; &nbsp;// right-hand side value if bRhsIsAttr = FALSE</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>325</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>326</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>327</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>328</th><td class=\"r\"><ins>class TableScan : public Iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>329</th><td class=\"r\"><ins>{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>330</th><td class=\"r\"><ins>TableScan(RelationManager &amp;rm, const string &amp;tableName, const char *alias = NULL);&nbsp; // constructor</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>331</th><td class=\"r\"><ins>void setIterator();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Start a new iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>332</th><td class=\"r\"><ins>RC getNextTuple(void *data);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Return the next tuple from the iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>333</th><td class=\"r\"><ins>void getAttributes(vector&lt;Attribute&gt; &amp;attrs) const;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Return the attributes from this iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>334</th><td class=\"r\"><ins>~TableScan();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// destructor</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>335</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>336</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>337</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>338</th><td class=\"r\"><ins>class IndexScan : public Iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>339</th><td class=\"r\"><ins>{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>340</th><td class=\"r\"><ins>IndexScan(RelationManager &amp;rm, const string &amp;tableName, const string &amp;attrName, const char *alias = NULL); // constructor</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>341</th><td class=\"r\"><ins>void setIterator(void* lowKey, void* highKey, bool lowKeyInclusive, bool highKeyInclusive); // Start a new iterator given the new compOp and value</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>342</th><td class=\"r\"><ins>RC getNextTuple(void *data);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Return the next tuple from the iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>343</th><td class=\"r\"><ins>void getAttributes(vector&lt;Attribute&gt; &amp;attrs) const;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Return the attributes from this iterator</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>344</th><td class=\"r\"><ins>~IndexScan();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// destructor</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>345</th><td class=\"r\"><ins>};</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>346</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>347</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>348</th><td class=\"r\"><ins>== Testing ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>349</th><td class=\"r\"><ins>&nbsp;* Please use the code provided here [attachment:codebase.zip codebase] to test your code. Note that this file will be used to grade your project partially since we also have our own private test cases. This is by no means an exhaustive test suite. Please feel free to add more cases to this, and test your code thoroughly. Similar to previous projects, we will test your code on a private test cases suite.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>350</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>351</th><td class=\"r\"><ins>== Submission Instructions ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>352</th><td class=\"r\"><ins>The following are requirements on your submission. Points may be deducted if they are not followed.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>353</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>354</th><td class=\"r\"><ins>&nbsp;* Write a report to briefly describe the design and implementation of your query engine module.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>355</th><td class=\"r\"><ins>&nbsp;* You need to submit the source code under the \"rbf\" ,\"rm\" ,\"ix\", \"qe\", and data folder. Make sure you do a \"make clean\" first, and do NOT include any useless files (such as binary files and data files). Your makefile should make sure the files ''qetest_XX.cc''' compile and run properly. We will use our own ''qetest_XX.cc''' files to test your module.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>356</th><td class=\"r\"><ins>&nbsp;</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>357</th><td class=\"r\"><ins>&nbsp;* Please organize your project in the following directory hierarchy: project4-''groupID'' / codebase / {rbf, rm, ix, qe, data, makefile.inc, readme.txt, project4-report} where rbf, rm, ix, and qe folders include your source code and the makefile.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>358</th><td class=\"r\"><ins>&nbsp;* Compress project4-''groupID'' into a SINGLE zip file. Each group only submits one file, with the name \"project4-''groupID''.zip\". (e.g., project4-01.zip)</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>359</th><td class=\"r\"><ins>&nbsp;* Put [attachment:test.sh this script] and the zip file under the same directory. Run it to check whether your project can be properly unzipped and tested (use your own makefile.inc and the clitest.cc when you are testing the script). If the script doesn't work correctly, it's most likely that your folder organization doesn't meet the requirement. Our grading will be automatically done by running script. The usage of the script is:</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>360</th><td class=\"r\"><ins>{{{</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>361</th><td class=\"r\"><ins>&nbsp; &nbsp; ./test.sh ''project4-groupID''</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>362</th><td class=\"r\"><ins>}}}</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>363</th><td class=\"r\"><ins>&nbsp;* Upload the zip file \"project4-''groupID''.zip\" to EEE.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>364</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>365</th><td class=\"r\"><ins>== Grading Rubrics ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>366</th><td class=\"r\"><ins>The grading rubrics is at [wiki:cs222-2017-fall-project4-grading this page]</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>367</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>368</th><td class=\"r\"><ins>== Q &amp; A ==</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>369</th><td class=\"r\"><ins>&nbsp;* '''Q1''': For the grace hash-join and block nested loop join, can I use a std::map() as an in-memory table? [[BR]] </ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>370</th><td class=\"r\"><ins>&nbsp;'''A1''': Yes. You can.</ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>371</th><td class=\"r\"><ins></ins></td>\n                  </tr><tr>\n                          <th>\u00a0</th><th>372</th><td class=\"r\"><ins>&nbsp;'''Q2''': For the block-nested loop join, we are supposed to use numPages buffer to read tuples from the leftIn relation. How to use the memory based on this parameter? [[BR]]</ins></td>\n                  </tr><tr class=\"last\">\n                          <th>\u00a0</th><th>373</th><td class=\"r\"><ins>&nbsp;'''A2''': Suppose we do a BNLP for two inputs R and S, where R is the left child.&nbsp; &nbsp;To simplify the implementation, it is acceptable to read \"numPages\" pages from R, then build an in-memory hash table (with additional memory) for these records.&nbsp; In addition, it is also acceptable to use the getNext() API of R to read enough records to fill in *one* page, then immediately add them to the in-memory hash table.&nbsp; Then we continue the process until we have read enough records for numPages pages (one page at a time).&nbsp; Since the records from S are pipelined, you can join a record from S.getNext() immediately using the hash table of R.&nbsp; You are required to have an output buffer.&nbsp; You pause the join process whenever the output buffer is full.</ins></td>\n                  </tr>\n            </tbody>\n        </table>\n      </li>\n  </ul>\n</div>\n      </div>\n  </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/wiki/public/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/wiki/public/about\"><strong>Trac 1.0.13</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">Visit the Trac open source project at<br /><a href=\"http://trac.edgewall.org/\">http://trac.edgewall.org/</a></p>\n    </div>\n  </body>\n</html>\n", "encoding": "utf-8"}