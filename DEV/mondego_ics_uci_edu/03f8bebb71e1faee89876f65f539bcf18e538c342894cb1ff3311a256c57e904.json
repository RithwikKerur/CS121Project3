{"url": "http://mondego.ics.uci.edu/projects/SourcererCC/precision/FP-3.txt", "content": "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/114239.java 369 379\n/home/jeff/BigCloneBench/sample/default/114239.java 955 967\n----------------------------------------\n    public void test18() throws Exception {\n        String data = \"1\\r\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test52() throws Exception {\n        String data = \"\\\\xfa\\\\u0afa\\\\xFA\\\\u0AFA\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setUseTextQualifier(false);\n        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"\u00fa\u0afa\u00fa\u0afa\", reader.get(0));\n        Assert.assertEquals(\"\\\\xfa\\\\u0afa\\\\xFA\\\\u0AFA\", reader.getRawRecord());\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/103146.java 394 404\n/home/jeff/BigCloneBench/sample/default/15343.java 493 507\n----------------------------------------\n    private void build(DirWriter w, String[] args, int off) throws IOException {\n        DirBuilderPref pref = getDirBuilderPref();\n        long t1 = System.currentTimeMillis();\n        int[] counter = new int[2];\n        DirBuilder builder = fact.newDirBuilder(w, pref);\n        for (int i = off; i < args.length; ++i) {\n            append(builder, new File(args[i]), counter);\n        }\n        long t2 = System.currentTimeMillis();\n        System.out.println(MessageFormat.format(messages.getString(\"insertDone\"), new Object[] { String.valueOf(counter[1]), String.valueOf(counter[0]), String.valueOf((t2 - t1) / 1000f) }));\n    }\n\n----------------------------------------\n    public void remove(String[] args, int off, boolean delFiles) throws IOException {\n        long t1 = System.currentTimeMillis();\n        int[] counter = new int[2];\n        DirWriter w = fact.newDirWriter(dirFile, encodeParam());\n        try {\n            for (int i = off; i < args.length; ++i) {\n                addFileIDs(w, new File(args[i]));\n            }\n            doRemove(w, counter, delFiles);\n        } finally {\n            w.close();\n        }\n        long t2 = System.currentTimeMillis();\n        System.out.println(MessageFormat.format(messages.getString(\"removeDone\"), new Object[] { String.valueOf(counter[1]), String.valueOf(counter[0]), String.valueOf((t2 - t1) / 1000f) }));\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2453163.java 65 72\n/home/jeff/BigCloneBench/sample/selected/1151366.java 69 76\n----------------------------------------\n    public void onThreadWaitTimeout(SceKernelThreadInfo thread) {\n        if (removeWaitingThread(thread)) {\n            thread.cpuContext.gpr[2] = ERROR_KERNEL_WAIT_TIMEOUT;\n        } else {\n            log.warn(\"Mutex deleted while we were waiting for it! (timeout expired)\");\n            thread.cpuContext.gpr[2] = ERROR_KERNEL_WAIT_DELETE;\n        }\n    }\n\n----------------------------------------\n    public void onThreadWaitReleased(SceKernelThreadInfo thread) {\n        if (removeWaitingThread(thread)) {\n            thread.cpuContext.gpr[_v0] = ERROR_KERNEL_WAIT_STATUS_RELEASED;\n        } else {\n            log.warn(\"EventFlag deleted while we were waiting for it!\");\n            thread.cpuContext.gpr[_v0] = ERROR_KERNEL_WAIT_DELETE;\n        }\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/124923.java 220 231\n/home/jeff/BigCloneBench/sample/default/28532.java 264 274\n----------------------------------------\n    public void test8() throws Exception {\n        String data = \"1\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        Assert.assertEquals(\"\", reader.getRawRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test11() throws Exception {\n        String data = \"\\\"July 4th, 2005\\\"\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"July 4th, 2005\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"\\\"July 4th, 2005\\\"\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2081974.java 139 145\n/home/jeff/BigCloneBench/sample/selected/2493013.java 61 66\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_op_get_qos(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CORBA.portable.OutputStream out = null;\n        org.omg.CosNotification.Property[] _ob_r = get_qos();\n        out = handler.createReply();\n        org.omg.CosNotification.QoSPropertiesHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_admin_if(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        Admin _ob_r = admin_if();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        AdminHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2290446.java 325 332\n/home/jeff/BigCloneBench/sample/selected/2493013.java 110 115\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_op_set_def_match_card(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CORBA.portable.OutputStream out = null;\n        int _ob_a0 = in.read_ulong();\n        int _ob_r = set_def_match_card(_ob_a0);\n        out = handler.createReply();\n        out.write_ulong(_ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_supports_proxy_offers(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        boolean _ob_r = supports_proxy_offers();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        out.write_boolean(_ob_r);\n        return out;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2290446.java 196 201\n/home/jeff/BigCloneBench/sample/selected/382940.java 72 77\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_max_list(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        int _ob_r = max_list();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        out.write_ulong(_ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_naming_service(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CosNaming.NamingContext _ob_r = naming_service();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        org.omg.DsObservationAccess.NamingContextHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n", "encoding": "utf-8"}