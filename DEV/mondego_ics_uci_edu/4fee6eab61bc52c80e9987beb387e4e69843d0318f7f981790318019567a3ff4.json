{"url": "http://mondego.ics.uci.edu/projects/SourcererCC/precision/FP-2.txt", "content": "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/28532.java 454 470\n/home/jeff/BigCloneBench/sample/default/28532.java 1684 1702\n----------------------------------------\n    public void test24() throws Exception {\n        String data = \"1\\r\\n\\r\\n1\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setUseTextQualifier(false);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(1L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test138() throws Exception {\n        CsvReader reader = CsvReader.parse(\"1;; ;1\");\n        reader.setRecordDelimiter(';');\n        Assert.assertTrue(reader.getSkipEmptyRecords());\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"\", reader.get(0));\n        Assert.assertEquals(1L, reader.getCurrentRecord());\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(2L, reader.getCurrentRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2669827.java 154 162\n/home/jeff/BigCloneBench/sample/selected/150134.java 54 63\n----------------------------------------\n        public String toString() {\n            StringBuffer sb = new StringBuffer(\"URL: \");\n            sb.append(m_strURL);\n            sb.append(\", Start: \");\n            sb.append(m_nIdxStart);\n            sb.append(\", End: \");\n            sb.append(m_nIdxEnd);\n            return sb.toString();\n        }\n\n----------------------------------------\n    public String toString() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"{\");\n        sb.append(\"read: \");\n        sb.append(readCount);\n        sb.append(\", write: \");\n        sb.append(writeCount);\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/122249.java 334 353\n/home/jeff/BigCloneBench/sample/default/11754.java 149 165\n----------------------------------------\n    public void test16() throws Exception {\n        String data = \"\\r\\r\\n1\\r\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setDelimiter('\\r');\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"\", reader.get(0));\n        Assert.assertEquals(\"\", reader.get(1));\n        Assert.assertEquals(\"\", reader.get(2));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(3, reader.getColumnCount());\n        Assert.assertEquals(\"\\r\\r\", reader.getRawRecord());\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(\"\", reader.get(1));\n        Assert.assertEquals(1L, reader.getCurrentRecord());\n        Assert.assertEquals(2, reader.getColumnCount());\n        Assert.assertEquals(\"1\\r\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test4() throws Exception {\n        String data = \"1\\r2\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"2\", reader.get(0));\n        Assert.assertEquals(1L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"2\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        Assert.assertEquals(\"\", reader.getRawRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2236931.java 180 209\n/home/jeff/BigCloneBench/sample/selected/1585812.java 70 89\n----------------------------------------\n    public static String getData(String url) {\n        try {\n            u = new URL(url);\n            uc = (HttpURLConnection) u.openConnection();\n            uc.setDoOutput(true);\n            uc.setRequestProperty(\"Host\", \"www.mediafire.com\");\n            uc.setRequestProperty(\"Connection\", \"keep-alive\");\n            uc.setRequestProperty(\"Referer\", \"http://mediafire.com/\");\n            uc.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1\");\n            uc.setRequestProperty(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\");\n            uc.setRequestProperty(\"Accept-Encoding\", \"html\");\n            uc.setRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\n            uc.setRequestProperty(\"Accept-Charset\", \"ISO-8859-1,utf-8;q=0.7,*;q=0.3\");\n            uc.setRequestProperty(\"Cookie\", ukeycookie + \";\" + skeycookie + \";\" + usercookie);\n            uc.setRequestMethod(\"GET\");\n            uc.setInstanceFollowRedirects(false);\n            br = new BufferedReader(new InputStreamReader(uc.getInputStream()));\n            String temp = \"\", k = \"\";\n            while ((temp = br.readLine()) != null) {\n                k += temp;\n            }\n            br.close();\n            u = null;\n            uc = null;\n            return k;\n        } catch (Exception e) {\n            System.out.println(\"exception : \" + e.toString());\n            return \"\";\n        }\n    }\n\n----------------------------------------\n    public static void setHttpHeader(String cookie) {\n        try {\n            uc = (HttpURLConnection) u.openConnection();\n            uc.setDoOutput(true);\n            uc.setRequestProperty(\"Host\", \"filefactory.com\");\n            uc.setRequestProperty(\"Connection\", \"keep-alive\");\n            uc.setRequestProperty(\"Referer\", \"http://filefactory.com/\");\n            uc.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1\");\n            uc.setRequestProperty(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\");\n            uc.setRequestProperty(\"Accept-Encoding\", \"html\");\n            uc.setRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\n            uc.setRequestProperty(\"Accept-Charset\", \"ISO-8859-1,utf-8;q=0.7,*;q=0.3\");\n            uc.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            uc.setRequestProperty(\"Cookie\", cookie);\n            uc.setRequestMethod(\"POST\");\n            uc.setInstanceFollowRedirects(false);\n        } catch (Exception e) {\n            System.out.println(\"ex\" + e.toString());\n        }\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/419020.java 1037 1048\n/home/jeff/BigCloneBench/sample/selected/588446.java 1129 1142\n----------------------------------------\n        public InputStream(java.io.InputStream in, int options) {\n            super(in);\n            this.breakLines = (options & DONT_BREAK_LINES) != DONT_BREAK_LINES;\n            this.encode = (options & ENCODE) == ENCODE;\n            this.bufferLength = encode ? 4 : 3;\n            this.buffer = new byte[bufferLength];\n            this.position = -1;\n            this.lineLength = 0;\n            this.options = options;\n            this.alphabet = getAlphabet(options);\n            this.decodabet = getDecodabet(options);\n        }\n\n----------------------------------------\n        public OutputStream(java.io.OutputStream out, int options) {\n            super(out);\n            this.breakLines = (options & DONT_BREAK_LINES) != DONT_BREAK_LINES;\n            this.encode = (options & ENCODE) == ENCODE;\n            this.bufferLength = encode ? 3 : 4;\n            this.buffer = new byte[bufferLength];\n            this.position = 0;\n            this.lineLength = 0;\n            this.suspendEncoding = false;\n            this.b4 = new byte[4];\n            this.options = options;\n            this.alphabet = getAlphabet(options);\n            this.decodabet = getDecodabet(options);\n        }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/211182.java 202 210\n/home/jeff/BigCloneBench/sample/selected/2308223.java 181 189\n----------------------------------------\n    public double[] getColumnPackedCopy() {\n        double[] vals = new double[m * n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                vals[i + j * m] = A[i][j];\n            }\n        }\n        return vals;\n    }\n\n----------------------------------------\n    public double[][] getArrayCopy() {\n        double[][] C = new double[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                C[i][j] = A[i][j];\n            }\n        }\n        return C;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/793117.java 170 176\n/home/jeff/BigCloneBench/sample/selected/939512.java 106 111\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_op_get_qos(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CORBA.portable.OutputStream out = null;\n        org.omg.CosNotification.Property[] _ob_r = get_qos();\n        out = handler.createReply();\n        org.omg.CosNotification.QoSPropertiesHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_lifetime_filter(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CosNotifyFilter.MappingFilter _ob_r = lifetime_filter();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        org.omg.CosNotifyFilter.MappingFilterHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/80832.java 656 667\n/home/jeff/BigCloneBench/sample/default/73729.java 234 245\n----------------------------------------\n    public void test36() throws Exception {\n        String data = \"\\\"some \\\\stuff\\\"\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"some stuff\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"\\\"some \\\\stuff\\\"\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test9() throws Exception {\n        String data = \"1\\r\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        Assert.assertEquals(\"\", reader.getRawRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2081974.java 85 92\n/home/jeff/BigCloneBench/sample/selected/751919.java 185 196\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_op_add_filter(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CORBA.portable.OutputStream out = null;\n        org.omg.CosNotifyFilter.Filter _ob_a0 = org.omg.CosNotifyFilter.FilterHelper.read(in);\n        int _ob_r = add_filter(_ob_a0);\n        out = handler.createReply();\n        org.omg.CosNotifyFilter.FilterIDHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_op_remove_filter(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CORBA.portable.OutputStream out = null;\n        try {\n            int _ob_a0 = org.omg.CosNotifyFilter.FilterIDHelper.read(in);\n            remove_filter(_ob_a0);\n            out = handler.createReply();\n        } catch (org.omg.CosNotifyFilter.FilterNotFound _ob_ex) {\n            out = handler.createExceptionReply();\n            org.omg.CosNotifyFilter.FilterNotFoundHelper.write(out, _ob_ex);\n        }\n        return out;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/211182.java 551 559\n/home/jeff/BigCloneBench/sample/selected/2308223.java 642 649\n----------------------------------------\n    public Matrix minusEquals(Matrix B) {\n        checkMatrixDimensions(B);\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                A[i][j] = A[i][j] - B.A[i][j];\n            }\n        }\n        return this;\n    }\n\n----------------------------------------\n    public Matrix timesEquals(double s) {\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                A[i][j] = s * A[i][j];\n            }\n        }\n        return this;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/62853.java 234 245\n/home/jeff/BigCloneBench/sample/default/11754.java 590 601\n----------------------------------------\n    public void test9() throws Exception {\n        String data = \"1\\r\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        Assert.assertEquals(\"\", reader.getRawRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test32() throws Exception {\n        String data = \"\\\"Mac \\\"The Knife\\\" Peter\\\",\\\"Boswell, Jr.\\\"\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"Mac \", reader.get(0));\n        Assert.assertEquals(\"Boswell, Jr.\", reader.get(1));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(2, reader.getColumnCount());\n        Assert.assertEquals(\"\\\"Mac \\\"The Knife\\\" Peter\\\",\\\"Boswell, Jr.\\\"\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/119807.java 264 274\n/home/jeff/BigCloneBench/sample/default/73729.java 382 392\n----------------------------------------\n    public void test11() throws Exception {\n        String data = \"\\\"July 4th, 2005\\\"\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"July 4th, 2005\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"\\\"July 4th, 2005\\\"\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test19() throws Exception {\n        String data = \"1\\r\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/62853.java 382 392\n/home/jeff/BigCloneBench/sample/default/22303.java 762 773\n----------------------------------------\n    public void test19() throws Exception {\n        String data = \"1\\r\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test41() throws Exception {\n        String data = \"double\\\\\\\\\\\\\\\\double backslash\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setUseTextQualifier(false);\n        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"double\\\\\\\\double backslash\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/1008771.java 896 902\n/home/jeff/BigCloneBench/sample/selected/1008771.java 933 939\n----------------------------------------\n    public int isAJavaSeisPath() {\n        if (_status == NORMAL) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n----------------------------------------\n    public int getNumDimensions() {\n        if (_status != NORMAL) {\n            return 0;\n        } else {\n            return _js.getNumDimensions();\n        }\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/62853.java 395 405\n/home/jeff/BigCloneBench/sample/default/80832.java 321 331\n----------------------------------------\n    public void test20() throws Exception {\n        String data = \"1\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test15() throws Exception {\n        String data = \"\\\"data \\r\\n here\\\"\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"data \\r\\n here\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"\\\"data \\r\\n here\\\"\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2290446.java 175 180\n/home/jeff/BigCloneBench/sample/selected/2508249.java 52 58\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_max_follow_policy(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        FollowOption _ob_r = max_follow_policy();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        FollowOptionHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_op_get_typed_supplier(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CORBA.portable.OutputStream out = null;\n        org.omg.CORBA.Object _ob_r = get_typed_supplier();\n        out = handler.createReply();\n        out.write_Object(_ob_r);\n        return out;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/106112.java 206 217\n/home/jeff/BigCloneBench/sample/default/106112.java 546 557\n----------------------------------------\n    public void test7() throws Exception {\n        String data = \"1\\r\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        Assert.assertEquals(\"\", reader.getRawRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test29() throws Exception {\n        String data = \"\\\"double\\\\\\\"\\\\\\\"double quotes\\\"\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"double\\\"\\\"double quotes\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"\\\"double\\\\\\\"\\\\\\\"double quotes\\\"\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/22303.java 382 392\n/home/jeff/BigCloneBench/sample/default/106112.java 656 667\n----------------------------------------\n    public void test19() throws Exception {\n        String data = \"1\\r\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test36() throws Exception {\n        String data = \"\\\"some \\\\stuff\\\"\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"some stuff\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"\\\"some \\\\stuff\\\"\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/122249.java 334 353\n/home/jeff/BigCloneBench/sample/default/28532.java 507 526\n----------------------------------------\n    public void test16() throws Exception {\n        String data = \"\\r\\r\\n1\\r\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setDelimiter('\\r');\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"\", reader.get(0));\n        Assert.assertEquals(\"\", reader.get(1));\n        Assert.assertEquals(\"\", reader.get(2));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(3, reader.getColumnCount());\n        Assert.assertEquals(\"\\r\\r\", reader.getRawRecord());\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(\"\", reader.get(1));\n        Assert.assertEquals(1L, reader.getCurrentRecord());\n        Assert.assertEquals(2, reader.getColumnCount());\n        Assert.assertEquals(\"1\\r\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test27() throws Exception {\n        String data = \"\\\"1\\\",Bruce\\r\\n\\\"2\\n\\\",Toni\\r\\n\\\"3\\\",Brian\\r\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(\"Bruce\", reader.get(1));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(2, reader.getColumnCount());\n        Assert.assertEquals(\"\\\"1\\\",Bruce\", reader.getRawRecord());\n        Assert.assertTrue(reader.skipRecord());\n        Assert.assertEquals(\"\\\"2\\n\\\",Toni\", reader.getRawRecord());\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"3\", reader.get(0));\n        Assert.assertEquals(\"Brian\", reader.get(1));\n        Assert.assertEquals(1L, reader.getCurrentRecord());\n        Assert.assertEquals(2, reader.getColumnCount());\n        Assert.assertEquals(\"\\\"3\\\",Brian\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n", "encoding": "ascii"}