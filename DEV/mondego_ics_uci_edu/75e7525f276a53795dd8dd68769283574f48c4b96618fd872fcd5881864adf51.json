{"url": "http://mondego.ics.uci.edu/projects/SourcererCC/precision/FP-1.txt", "content": "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2483148.java 79 84\n/home/jeff/BigCloneBench/sample/selected/382940.java 116 122\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_MyAdmin(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        ConsumerAdmin _ob_r = MyAdmin();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        ConsumerAdminHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_op_get_current_time(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CORBA.portable.OutputStream out = null;\n        String _ob_r = get_current_time();\n        out = handler.createReply();\n        org.omg.DsObservationAccess.TimeStampHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/49267.java 284 295\n/home/jeff/BigCloneBench/sample/default/94364.java 509 525\n----------------------------------------\n    public boolean pstep(int thread, int printMode, boolean skip_prolog) {\n        int addr = reg.hardwareIP();\n        boolean stillrunning;\n        boolean over_branch = false;\n        breakpoint bpSaved = bpset.lookup(addr);\n        threadstep.setStepBreakpoint(thread, over_branch, skip_prolog);\n        if (bpSaved != null) bpset.clearBreakpoint(bpSaved);\n        stillrunning = continueCheckingForSignal(thread, printMode, false);\n        threadstep.clearStepBreakpoint(thread);\n        if (stillrunning && bpSaved != null) bpset.setBreakpoint(bpSaved);\n        return stillrunning;\n    }\n\n----------------------------------------\n    public boolean pcontinue(int thread, int printMode, boolean allThreads) {\n        int addr = reg.hardwareIP();\n        boolean over_branch = false;\n        boolean stillrunning;\n        boolean skip_prolog = false;\n        breakpoint bpSaved = bpset.lookup(addr);\n        if (bpSaved != null) {\n            System.out.println(\"pcontinue: saving current breakpoint \" + VM.intAsHexString(addr));\n            threadstep.setStepBreakpoint(thread, over_branch, skip_prolog);\n            bpset.clearBreakpoint(bpSaved);\n            stillrunning = continueCheckingForSignal(thread, PRINTNONE, false);\n            threadstep.clearStepBreakpoint(thread);\n            bpset.setBreakpoint(bpSaved);\n        }\n        stillrunning = continueCheckingForSignal(thread, printMode, allThreads);\n        return stillrunning;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/67669.java 940 952\n/home/jeff/BigCloneBench/sample/default/11754.java 382 392\n----------------------------------------\n    public void test51() throws Exception {\n        String data = \"\\\"\\\\xfa\\\\u0afa\\\\xFA\\\\u0AFA\\\"\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setUseTextQualifier(true);\n        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"\u00c3\u00ba\u00e0\u00ab\u00ba\u00c3\u00ba\u00e0\u00ab\u00ba\", reader.get(0));\n        Assert.assertEquals(\"\\\"\\\\xfa\\\\u0afa\\\\xFA\\\\u0AFA\\\"\", reader.getRawRecord());\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test19() throws Exception {\n        String data = \"1\\r\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/default/22303.java 382 392\n/home/jeff/BigCloneBench/sample/default/59932.java 925 937\n----------------------------------------\n    public void test19() throws Exception {\n        String data = \"1\\r\\n\";\n        CsvReader reader = CsvReader.parse(data);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"1\", reader.get(0));\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertEquals(\"1\", reader.getRawRecord());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n    public void test50() throws Exception {\n        String data = \"\\\\n\\\\r\\\\t\\\\b\\\\f\\\\e\\\\v\\\\a\\\\z\\\\d065\\\\o101\\\\101\\\\x41\\\\u0041\";\n        CsvReader reader = CsvReader.parse(data);\n        reader.setUseTextQualifier(false);\n        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);\n        Assert.assertTrue(reader.readRecord());\n        Assert.assertEquals(\"\\n\\r\\t\\b\\f\u001b\u000b\u0007zAAAAA\", reader.get(0));\n        Assert.assertEquals(\"\\\\n\\\\r\\\\t\\\\b\\\\f\\\\e\\\\v\\\\a\\\\z\\\\d065\\\\o101\\\\101\\\\x41\\\\u0041\", reader.getRawRecord());\n        Assert.assertEquals(0L, reader.getCurrentRecord());\n        Assert.assertEquals(1, reader.getColumnCount());\n        Assert.assertFalse(reader.readRecord());\n        reader.close();\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2636968.java 81 90\n/home/jeff/BigCloneBench/sample/selected/100172.java 127 134\n----------------------------------------\n    public Matrix(int m, int n, double s) {\n        this.m = m;\n        this.n = n;\n        A = new double[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                A[i][j] = s;\n            }\n        }\n    }\n\n----------------------------------------\n    public static Matrix zero(int m, int n) {\n        Matrix A = new Matrix(m, n);\n        double[][] X = A.getArray();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) X[i][j] = 0.0;\n        }\n        return A;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/708312.java 86 91\n/home/jeff/BigCloneBench/sample/selected/1656760.java 170 176\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_MyType(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        ProxyType _ob_r = MyType();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        ProxyTypeHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_op_get_all_filters(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CORBA.portable.OutputStream out = null;\n        int[] _ob_r = get_all_filters();\n        out = handler.createReply();\n        org.omg.CosNotifyFilter.FilterIDSeqHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/127068.java 845 855\n/home/jeff/BigCloneBench/sample/selected/127068.java 1669 1681\n----------------------------------------\n    public Matrix ebeDivide(Matrix B) {\n        checkMatrixDimensions(B);\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                C[i][j] = A[i][j] / B.A[i][j];\n            }\n        }\n        return X;\n    }\n\n----------------------------------------\n    public Matrix sumRows() {\n        Matrix X = new Matrix(1, n);\n        double[][] C = X.getArray();\n        double s = 0;\n        for (int j = 0; j < n; j++) {\n            s = 0;\n            for (int i = 0; i < m; i++) {\n                s = s + A[i][j];\n            }\n            C[0][j] = s;\n        }\n        return X;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/1544487.java 79 84\n/home/jeff/BigCloneBench/sample/selected/2356990.java 108 113\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_MyAdmin(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        ConsumerAdmin _ob_r = MyAdmin();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        ConsumerAdminHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_max_list(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        int _ob_r = max_list();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        out.write_ulong(_ob_r);\n        return out;\n    }\n\n----------------------------------------\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n/home/jeff/BigCloneBench/sample/selected/2356990.java 115 120\n/home/jeff/BigCloneBench/sample/selected/382940.java 72 77\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_max_match_card(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        int _ob_r = max_match_card();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        out.write_ulong(_ob_r);\n        return out;\n    }\n\n----------------------------------------\n    private org.omg.CORBA.portable.OutputStream _OB_att_get_naming_service(org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler handler) {\n        org.omg.CosNaming.NamingContext _ob_r = naming_service();\n        org.omg.CORBA.portable.OutputStream out = handler.createReply();\n        org.omg.DsObservationAccess.NamingContextHelper.write(out, _ob_r);\n        return out;\n    }\n\n----------------------------------------\n", "encoding": "ISO-8859-1"}