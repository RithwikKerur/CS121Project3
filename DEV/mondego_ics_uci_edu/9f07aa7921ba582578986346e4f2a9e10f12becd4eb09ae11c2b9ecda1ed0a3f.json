{"url": "http://mondego.ics.uci.edu/projects/SourcererCC/", "content": "\n<!-- saved from url=(0051)http://mondego.ics.uci.edu/projects/clonedetection/ -->\n<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta charset=\"utf-8\">\n<title>Code Clone Detection</title> \n<meta name=\"description\" content=\"Yelp dataset challenge\">\n<meta name=\"keywords\" content=\"Yelp, challenge, data mining\">\n<style>\ncode {background-color:#A9A9A9;}\nA { COLOR: #62021; TEXT-DECORATION: none ;  }\na:visited{ color: blue }\nA:hover { TEXT-DECORATION: underline }\n.lowspace { min-height: 5}\n.midspace { min-height: 10}\n.highspace { min-height: 15}\n.media {width:459;height:358;}\n.left{float:left;}\n.right{float:right;}\n.photo{height: 309;\n\twidth: 430;\n\tpadding-left: 57;\n\tpadding-bottom: 25;}\n\ttable {\n\t\tpadding-left: 20;\n\t\tpadding-right: 20;\n\t}\n\ttd {\n\t\ttext-align: justify;\n\t\tfont-size: 110%;\n\t\tline-height: 150%;\n\t\tmargin-bottom: 48px;\n\t\tmargin-top: -22px;\n\t\tfont-family: Georgia;\n\t}\n\tdivimg {\n\t\ttext-align: center;\n\t\tfont-size: 110%;\n\t\tline-height: 150%;\n\t\tmargin-bottom: 48px;\n\t\tmargin-top: -22px;\n\t\tfont-family: Georgia;\n\t}\n\t.mondego{width:300px;\n\t\theight:110px;\n\t\tbackground: transparent url('http://mondego.ics.uci.edu/img/mondego-banner.png') -0px -0px no-repeat;}\n\t\t</style>\n\n\t\t<style type=\"text/css\"></style><style type=\"text/css\"></style><style type=\"text/css\"></style></head>\n\t\t<body link=\"blue\" alink=\"blue\" vlink=\"violet\">\n\t\t\t<script async=\"\" src=\"./Code Clone Detection_files/analytics.js\"></script><script>\n\t\t\t  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t\t\t  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\t\t\t  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n\t\t\t  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n\t\t\t  ga('create', 'UA-41064162-1', 'uci.edu');\n\t\t\t  ga('send', 'pageview');\n\n\t\t\t</script>\n\t\t\t\t\t\t\n\n\t\t\t<table>\n\t\t\t\t<tbody><tr>\n                                 <td class=\"mondego\"></td>\n                                  <td width=\"20\">\n\t\t\t</td><td><h2>SourcererCC: Scaling Type-3 Clone Detection to Large Software Repositories</h2>\n\t\t\t\tTeam @UC Irvine: <a href=\"http://www.ics.uci.edu/~hsajnani/\">Hitesh Sajnani</a>, <a href=\"http://www.linkedin.com/in/sainivaibhav\">Vaibhav Saini</a>,  <a href=\"http://www.ics.uci.edu/~lopes/\">Cristina Lopes</a>  <br>\n\t\t\t\tTeam @University of Saskatchewan: <a href=\"http://jeffsvajlenko.weebly.com/\">Jeff Svejlanko</a>, <a href=\"http://www.cs.usask.ca/~croy/index.html\">Chanchal Roy</a>\n\t\t\t\n\t\t</td>\n\t\t</tr></tbody></table>\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t<tr><td><div id=\"abstract\"><br><h3>Project Description</h3>\n\t\t\t\t\nGiven the availability of large-scale source-code repositories,\nthere have been a large number of applications for clone detection. \nUnfortunately, despite a decade of active\nresearch, there is a marked lack in clone detectors that scale\nto large software repositories. In particular for detecting near-miss clones\nwhere significant editing activities may take place in the\ncloned code.<br>\nWe present SourcererCC, a token-based clone detector\nthat targets the first three clone types, and exploits an index\nto achieve scalability to large inter-project repositories\nusing a standard workstation. SourcererCC uses an optimized\ninverted-index to quickly query the potential clones\nof a given code block. Filtering heuristics based on token ordering\nare used to significantly reduce the size of the index,\nthe number of code-block comparisons needed to detect the\nclones, as well as the number of required token-comparisons\nneeded to judge a potential clone. <br>\nWe evaluate the scalability, execution time, recall and precision\nof SourcererCC, and compare it to four publicly available\nand state-of-the-art tools. To measure recall, we use\ntwo recent benchmarks, (1) an exhaustive benchmark of real\nclones, BigCloneBench, and (2) a Mutation/Injection-based\nframework of thousands of fine-grained artificial clones. We\nfind SourcererCC has both high recall and precision, and is\nable to scale to a large inter-project repository (250MLOC)\nusing a standard workstation.\n\n\n\n</div>\t\t\t\t\n</td></tr>\n<tr>\n\t<td><br>\n<div id=\"tool\">\t\t\n<h3>Tool Download and Usage</h3>\nIn order to run the tool please follow the steps below:\n<br><br>\n<strong>A.</strong> Generating the input file of the project for which you want to detect clones\n<ol>\n<li>Click <a href=\"http://mondego.ics.uci.edu/projects/clonedetection/files/tools/inputgen/ast.zip\">here</a> to download input generator for the code clone detector (ast.zip).</li>\n<li>Unzip ast.zip and import the project ast in your eclipse workspace.</li>\n<li>Run it as an \"Eclipse Application\". This should open another eclipse instance where you will import the projects for which you want to generate the input file.</li> \n<li>After importing the project in the workspace of the new eclipse instance, click on the \"Sample Menu\" in the top menu bar and then click on the \"Sample command\" to run. This should generate the output (desired input file) in the path specified by variable \"outputdirPath\".</li>\n<li>Please note that you will have to change the location of output directory on line 61 of SampleHandler.java.<code>this.outputdirPath = \"/Users/vaibhavsaini/Documents/codetime/repo/ast/output/\";</code> to your desired output directory.</li>\n<li>The generated input file name will be of the format: &lt;ProjectName&gt;-clone-INPUT.txt. For example, if your project name is jython, then the generated input file name should be jython-clone-INPUT.txt</li>\n</ol>\n<br>\n<strong>B</strong>. Running the clone detection tool on the generated input file\n<ol>\n<li>Click<a href=\"http://mondego.ics.uci.edu/projects/clonedetection/files/dist/tool.zip\"> here</a> to download the CloneDetector (tool.zip).</li>\n<li>Unzip tool.zip and navigate to tool/ using terminal</li>\n<li>Copy the input file generated above (&lt;ProjectName&gt;-clone-INPUT.txt) into input/dataset directory.</li>\n<li>Open cd.sh, and assign &lt;ProjectName&gt; as value to the variable <code> arrayname</code> (line #5). For example, If your generated input file is jython-clone-INPUT.txt, line #5 should be <code>arrayname=(jython)</code></li>\n<li>Execute the command <code>./cd.sh</code></li>\n</ol>\n<br>\n<strong>C.</strong> Generated output\n<ol>\n<li>The generated output will be in the ./output folder. </li>\n<li>Files with extension <i>.txt</i> will have the computed clones and the files with <i>.csv</i> extension will have the time taken to detect clones</li>\n</ol>\n<strong>D.</strong> Source Code <br>\nThe source code of SourcererCC can be found <a href=\"https://github.com/Mondego/SourcererCC\">here</a> on github.  <br> <br>\n\n<strong>E.</strong> SourcererCC-I <br>\nSourcererCC-I is an interactive version of the tool integrated with Eclipse IDE to help developers instantly find clones during software development\nand maintenance.  <br> \n\nA short video of Sourcerer-I in action can be found  <a href=\"http://mondego.ics.uci.edu/projects/clonedetection/tool/demo/\">here</a> and  link to install the Eclipse plug-in is available  <a href=\"http://mondego.ics.uci.edu/projects/clonedetection/tool/latest\">here</a>.\n\n\n  \n\n</div>\n\n\n\n\n<h3>Precision data as reported in the paper</h3>\n\nWe randomly selected 390 of  clone pairs detected by SourcererCC for\nmanual inspection. This is a statistically significant sample\nwith a 95% confidence level and a +/- 5% confidence interval.\nWe split the validation efforts across three clone experts.\nThis prevents any one judge's personal subjectivity from influencing the entire measurement. \nThe judges found 355 to be true positives, and 35 to be false positives, for a precision\nof 91%.\n\n<table border=\"1\" bordercolor=\"#000000\" style=\"background-color:#FAFAF8;padding-left:0;padding-right:0\" width=\"51%\" cellpadding=\"3\" cellspacing=\"1\">\n\t<tr>\n\t\t<th>Reviewer\n\t\t<th>True Positives\n\t\t<th>False Positives\n\t\t</tr>\n\t<tr>\n\t\t<td>Judge 1</td>\n\t\t<td><a href=precision/TP-1.txt>TP-1</a></td>\n\t\t<td><a href=precision/FP-1.txt>FP-1</a></td>\n\n\t<tr>\n\t\t<td>Judge 2</td>\n\t\t<td><a href=precision/TP-2.txt>TP-2</a></td>\n\t\t<td><a href=precision/FP-2.txt>FP-2</a></td>\n\t</tr>\n\t<tr>\n\t\t<td>Judge 3</td>\n\t\t<td><a href=precision/TP-3.txt>TP-3</a></td>\n\t\t<td><a href=precision/FP-3.txt>FP-3</a></td>\n\t\t\n\t</table>\t\n\n\n\n\n<h3>Effectiveness of Filtering Heuristics (Figure 1 in paper)</h3>\nThe effectiveness of the filtering heuristics to eliminate candidate comparisons\nis demonstrated on 35 open source Apache Java projects. \nThese projects are of varied size and span across various\ndomains including search and database systems, server systems,\ndistributed systems, machine learning and natural language processing\nlibraries, network systems, etc. Most of these subject systems are\nhighly popular in their respective domain. Such subject systems\nexhibiting variety in size and domain help counter a potential bias\nof our study towards any specific kind of software system\n\nThe details of the projects including project name, size and the\nnumber of methods is reported in Table II below. Column 3 ( # Methods)\nshows total number of methods (total), number of methods after\nremoving methods with size < 25 tokens (>25 tokens), and methods\nthat are not exact duplicates (unique). Column 5 (Time Taken),\nColumn 6 (# Candidates) and Column 7 (Terms Compared) show\ntime taken to detect clones, number of candidates compared and total number of tokens compared\nfor:  <br>\n(i) Naive - No filtering heuristics; <br>\n(ii) Prefix - Sub-block filtering heuristic; and  <br>\n(iii) Pos - Both Sub-block and Token Position filtering heuristics together <br> <br>\n\nThe tabulated data is also charted below.\nThe horizontal axis shows the 35 subject systems sorted by the number of methods they contain \n(smallest on the left) . The vertical axis shows the performance metric value. The black circles,\nthe red triangles, and the green plus marks show the performance metric values of when no filtering\n is applied, only sub-block filtering is applied, and sub-block and token position filtering applied respectively. <br>\n\n\n<img src=\"table.PNG\">\n\n<img src=\"charts.PNG\">\n\t\t\n\n</td>\n</tr>\n\n</tbody>\n</table>\n\n</body></html>", "encoding": "ascii"}