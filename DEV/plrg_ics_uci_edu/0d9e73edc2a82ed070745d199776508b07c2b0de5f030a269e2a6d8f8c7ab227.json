{"url": "http://plrg.ics.uci.edu/automo/#branding", "content": "\n<!DOCTYPE html>\n<html lang=\"en-US\">\n<head>\n\n\t\t<meta charset=\"UTF-8\" />\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\t<link rel=\"profile\" href=\"http://gmpg.org/xfn/11\" />\n\t<link rel=\"pingback\" href=\"http://plrg.ics.uci.edu/wordpress/xmlrpc.php\" />\t\n<title>AutoMO &#8211; Programming Languages Research Group</title>\n<link rel='dns-prefetch' href='//fonts.googleapis.com' />\n<link rel='dns-prefetch' href='//s.w.org' />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Programming Languages Research Group &raquo; Feed\" href=\"http://plrg.ics.uci.edu/feed/\" />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Programming Languages Research Group &raquo; Comments Feed\" href=\"http://plrg.ics.uci.edu/comments/feed/\" />\n\t\t<script type=\"text/javascript\">\n\t\t\twindow._wpemojiSettings = {\"baseUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/12.0.0-1\\/72x72\\/\",\"ext\":\".png\",\"svgUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/12.0.0-1\\/svg\\/\",\"svgExt\":\".svg\",\"source\":{\"concatemoji\":\"http:\\/\\/plrg.ics.uci.edu\\/wordpress\\/wp-includes\\/js\\/wp-emoji-release.min.js?ver=5.2.3\"}};\n\t\t\t!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline=\"top\",l.font=\"600 32px Arial\",a){case\"flag\":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case\"emoji\":return b=d([55357,56424,55356,57342,8205,55358,56605,8205,55357,56424,55356,57340],[55357,56424,55356,57342,8203,55358,56605,8203,55357,56424,55356,57340]),!b}return!1}function f(a){var c=b.createElement(\"script\");c.src=a,c.defer=c.type=\"text/javascript\",b.getElementsByTagName(\"head\")[0].appendChild(c)}var g,h,i,j,k=b.createElement(\"canvas\"),l=k.getContext&&k.getContext(\"2d\");for(j=Array(\"flag\",\"emoji\"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],\"flag\"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener(\"DOMContentLoaded\",h,!1),a.addEventListener(\"load\",h,!1)):(a.attachEvent(\"onload\",h),b.attachEvent(\"onreadystatechange\",function(){\"complete\"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type=\"text/css\">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n\t<link rel='stylesheet' id='wp-block-library-css'  href='http://plrg.ics.uci.edu/wordpress/wp-includes/css/dist/block-library/style.min.css?ver=5.2.3' type='text/css' media='all' />\n<link rel='stylesheet' id='attitude_style-css'  href='http://plrg.ics.uci.edu/wordpress/wp-content/themes/attitude_mod/style.css?ver=5.2.3' type='text/css' media='all' />\n<link rel='stylesheet' id='google_fonts-css'  href='//fonts.googleapis.com/css?family=PT+Sans%7CPhilosopher&#038;ver=5.2.3' type='text/css' media='all' />\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-includes/js/jquery/jquery.js?ver=1.12.4-wp'></script>\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1'></script>\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-content/themes/attitude_mod/library/js/tinynav.js?ver=5.2.3'></script>\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-content/themes/attitude_mod/library/js/backtotop.js?ver=5.2.3'></script>\n<link rel='https://api.w.org/' href='http://plrg.ics.uci.edu/wp-json/' />\n<link rel=\"EditURI\" type=\"application/rsd+xml\" title=\"RSD\" href=\"http://plrg.ics.uci.edu/wordpress/xmlrpc.php?rsd\" />\n<link rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\" href=\"http://plrg.ics.uci.edu/wordpress/wp-includes/wlwmanifest.xml\" /> \n<link rel=\"canonical\" href=\"http://plrg.ics.uci.edu/automo/\" />\n<link rel='shortlink' href='http://plrg.ics.uci.edu/?p=129' />\n<link rel=\"alternate\" type=\"application/json+oembed\" href=\"http://plrg.ics.uci.edu/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fplrg.ics.uci.edu%2Fautomo%2F\" />\n<link rel=\"alternate\" type=\"text/xml+oembed\" href=\"http://plrg.ics.uci.edu/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fplrg.ics.uci.edu%2Fautomo%2F&#038;format=xml\" />\n\n</head>\n\n<body class=\"page-template-default page page-id-129 \">\n\t\n\t<div class=\"wrapper\">\n\t\t\t\t<header id=\"branding\" >\n\t\t\t\t\n\t<div class=\"container clearfix\">\n\t\t<div class=\"hgroup-wrap clearfix\">\n\t\t\t\t\t\t\t\t<section class=\"hgroup-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<form action=\"http://plrg.ics.uci.edu/\" class=\"searchform clearfix\" method=\"get\">\n\t\t<label class=\"assistive-text\" for=\"s\">Search</label>\n\t\t<input type=\"text\" placeholder=\"Search\" class=\"s field\" name=\"s\">\n\t</form><!-- .searchform -->\n\t\t\t\t\t</section><!-- .hgroup-right -->\t\n\t\t\t\t\t\t\t<hgroup id=\"site-logo\" class=\"clearfix\">\n\t\t\t\t\t\t\t\t\t\t\t\t<h1 id=\"site-title\"> \n\t\t\t\t\t\t\t\t<a href=\"http://plrg.ics.uci.edu/\" title=\"Programming Languages Research Group\" rel=\"home\">\n\t\t\t\t\t\t\t\t\tProgramming Languages Research Group\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t</hgroup><!-- #site-logo -->\n\t\t\t\n\t\t</div><!-- .hgroup-wrap -->\n\t</div><!-- .container -->\t\n\t\t\t\t\t<img src=\"http://plrg.eecs.uci.edu/wordpress/wp-content/uploads/2015/04/cropped-IMG_0976_small.jpg\" class=\"header-image\" width=\"2000\" height=\"485\" alt=\"Programming Languages Research Group\">\n\t\t\t\t\n\t<nav id=\"access\" class=\"clearfix\">\n\t\t\t\t\t<div class=\"container clearfix\"><ul class=\"root\"><li id=\"menu-item-34\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-34\"><a href=\"http://plrg.ics.uci.edu/\">Brian Demsky</a></li>\n<li id=\"menu-item-22\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-22\"><a href=\"http://plrg.ics.uci.edu/students/\">Students</a></li>\n<li id=\"menu-item-19\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-19\"><a href=\"http://plrg.ics.uci.edu/publications_page/\">Publications</a></li>\n<li id=\"menu-item-29\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-29\"><a href=\"http://plrg.ics.uci.edu/software_page/\">Software</a>\n<ul class=\"sub-menu\">\n\t<li id=\"menu-item-455\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-455\"><a href=\"http://plrg.ics.uci.edu/c11tester/\">C11Tester \u2013 A Tool for Testing C/C++ Atomics in Real World Code</a></li>\n\t<li id=\"menu-item-396\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-396\"><a href=\"http://plrg.ics.uci.edu/software-relaxed-mm/\">Software for Relaxed Memory Models</a></li>\n\t<li id=\"menu-item-83\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-83\"><a href=\"http://plrg.ics.uci.edu/software_page/irvine-research-java-compiler/\">Irvine Research Java Compiler</a></li>\n\t<li id=\"menu-item-77\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-77\"><a href=\"http://plrg.ics.uci.edu/software_page/views/\">Views</a></li>\n\t<li id=\"menu-item-358\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-358\"><a href=\"http://plrg.ics.uci.edu/vigilia/\">Vigilia</a></li>\n</ul>\n</li>\n<li class=\"default-menu\"><a href=\"http://plrg.ics.uci.edu\" title=\"Navigation\">Navigation</a></li></ul></div><!-- .container -->\n\t\t\t\t\t</nav><!-- #access --> \t\t\n\t\t\t\t</header>\n\t\t\n\t\t\t\t<div id=\"main\" class=\"container clearfix\">\n\n<div id=\"container\">\n\t\n\n<div id=\"content\">\t<section id=\"post-129\" class=\"post-129 page type-page status-publish hentry\">\n\t\t<article>\n\n\t\t\t\n\t\t\t<header class=\"entry-header\">\n    \t\t\t<h1 class=\"entry-title\">\n<!--    \t\t\t\tAutoMO -->\n    \t\t\t</h1><!-- .entry-title -->\n  \t\t\t</header>\n\n  \t\t\t\n  \t\t\t\n  \t\t\t<div class=\"entry-content clearfix\">\n    \t\t\t<h2>AutoMO: Automatic Inference of Memory Order Parameters for C/C++11</h2>\n<p>AuotMO\u00a0is a tool that is able to infer memory order parameters for C/C++11 concurrent programs such that the programs only exhibit SC behaviors for the test cases provided by developers.\u00a0Many concurrent data structures are initially designed for the SC memory model, and developers often implement these data structures to more relaxed memory models by adding sufficient fences to ensure that the implementation only allow SC behaviors. However, it is non-trivial to port data structures designed for the SC memory model to the C/C++11 memory model in the sense that it can become difficult and error-prone to choose the proper memory order parameters for memory operations that still allow reasonable optimization.</p>\n<p>The key insight of AutoMO is that it utilizes a model-checker that exhaustively enumerates the executions allowed by the C/C++11 memory model, and for each execution, it checks whether that execution\u00a0is equivalent to some SC execution; if not, AutoMO applies the\u00a0rules based on heuristics to strengthen the memory order parameters such that it will disallow the non-SC behaviors. Also, AutoMO has a trace reordering scheme that reorders output traces to help both understand the trace and infer parameters.</p>\n<p>The SC analysis algorithm, trace reordering analysis, and the parameter inference algorithm\u00a0are\u00a0described in more detail in this <a href=\"http://plrg.eecs.uci.edu/publications/oopsla15inference.pdf\">paper</a> (published in OOPSLA &#8217;15):</p>\n<h2>Getting Started</h2>\n<ul>\n<li>Get the source of AutoMO. We implemented AutoMO as a backend analysis of the CDSChecker model checker. If you haven\u2019t done so already, you may download AutoMO\u00a0using\u00a0<a href=\"http://git-scm.com/\">git</a>:</li>\n</ul>\n<pre><code>     git clone git://plrg.eecs.uci.edu/model-checker.git\r\n</code></pre>\n<ul>\n<li>Get the benchmarks (not required; distributed separately), placing them as a subdirectory under the\u00a0<code>model-checker</code>\u00a0directory:</li>\n</ul>\n<pre><code>     cd model-checker\r\n     git clone git://plrg.eecs.uci.edu/model-checker-benchmarks.git benchmarks</code></pre>\n<ul>\n<li>Compile CDSChecker with AutoMO\u00a0backend\u00a0analysis :</li>\n</ul>\n<pre><code>     make\r\n</code></pre>\n<ul>\n<li>Compile the benchmarks:</li>\n</ul>\n<p><code>\u00a0 \u00a0\u00a0make benchmarks </code></p>\n<ul>\n<li><code>Run a test case: </code></li>\n</ul>\n<pre><code>     ./run.sh TESTCASE_NAME [CDSChecker Options] -t AUTOMO -o [AutoMO OPTION]</code></pre>\n<h2>Useful Options</h2>\n<p>If you are not familiar with the options of CDSChecker, PLEASE refer to the <a href=\"http://plrg.eecs.uci.edu/?p=42\">CDSChecker</a>\u00a0page first.</p>\n<p>-o file-InputFile</p>\n<blockquote><p>Take the parameter assignments in the [InputFile] as the input of the parameter inference algorithm. The argument should be right after the symbol &#8216;-&#8216; with full directory.</p></blockquote>\n<p>-o\u00a0anno</p>\n<blockquote><p>Turn on the annotation mode for the controlled non-SC behaviors (by default OFF)</p></blockquote>\n<p>-o no-weaken</p>\n<blockquote><p>Turn off the weakening process, which lets AutoMO to finish a specific search session when it infers a strong enough parameter assignment.</p></blockquote>\n<p>-o\u00a0implicit-mo</p>\n<blockquote><p>Imply implicit modification order. You might only want to use this option when\u00a0some execution ends in an infinite loop because specific stores have not established modification order. (by default OFF)</p></blockquote>\n<h2>Running Your Own Code</h2>\n<p>If you want to use AutoMO, PLEASE follow these steps.</p>\n<p>First of all, since AutoMO is a backend\u00a0analysis of the CDSChecker, you need to follow the instructions of <a href=\"http://plrg.eecs.uci.edu/?p=42\">CDSChecker</a>\u00a0about how to write runnable test cases.</p>\n<p>Second, you should replace the memory order parameters that you want AutoMO to infer.</p>\n<p>To accomplish that, you will need to include our header file &#8220;wildcard.h&#8221;. This header file provides wrappers for wildcard parameters which represents the parameters to be inferred. For example, for a memory operation &#8220;x.store(***)&#8221; (the stars represent the parameter to be inferred), you will need to rewrite it as\u00a0&#8220;x.store(wildcard(1))&#8221;. For the later\u00a0memory order parameters to be inferred, you will need to use &#8220;wildcard(2)&#8221;, &#8220;wildcard(3)&#8221; and so on.</p>\n<p>Since the C/C++11 memory model requires data race freedom, which means normal memory operations should have established the hb\u00a0relation. In order to expose normal memory operations to AutoMO, you will need to use a special wrapper for them. For example, if you have a normal memory operation &#8220;x = 1&#8221;, you will need to rewrite it to be &#8220;x.store(1, memory_order_normal). The special memory order &#8220;memory_order_normal&#8221; is also defined in the &#8220;wildcard.h&#8221; file.</p>\n<p>Third, compile your test cases as required in\u00a0<a href=\"http://plrg.eecs.uci.edu/?p=42\">CDSChecker</a>.</p>\n<p>Fourth, run your test cases with AutoMO as an backend\u00a0analysis. To invoke AutoMO\u00a0in the CDSChecker model checker, \u00a0you should use the &#8220;-t AUTOMO&#8221; option. Followed with the &#8220;-t AUTOMO&#8221;, you can use one or more\u00a0AutoMO options to run the test case under AutoMO.</p>\n<p>In most of the cases, you are fine with the above steps. However, if you want to use the annotation framework in AutoMO that allows controlled non-SC behaviors, you should follow one extra step. Include our header file &#8220;sc_annotation.h&#8221; first. For a specific operation that you want to allow non-SC behavior (usually loads), you will need to add one &#8220;SC_BEGIN();&#8221; statement before it, and one &#8220;SC_END();&#8221; statement after it. Then run it with the &#8220;-o anno&#8221; option.</p>\n<h2>An Example</h2>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li>Consider we have a simple program as follow &#8212; IRIW (independent read &amp; independent write).</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p style=\"text-align: left;\">x = y = 0;\u00a0// Initially</p>\n<p style=\"text-align: left;\">\u00a0// T1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// T2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // T3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0 \u00a0 // T4</p>\n<p style=\"text-align: left;\">x = 1; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 y = 1; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r1 = x; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r3 = \u00a0y;</p>\n<p style=\"text-align: left;\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r2 = y; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r4 = x;</p>\n</blockquote>\n<p>Under the SC memory model, it is obvious that the threads T3 and T4 will observe the store of x and y in a consistent order, which means the execution in which &#8220;r1 == 1 &amp;&amp; r2 == 0 &amp;&amp; r3 == 1 &amp;&amp; r4 == 0&#8221; is not allowed. However, under the C/C++11 memory model, if all memory operations have the memory order of memory_order_relaxed, such a non-SC execution is totally legitimate.</p>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li>If you want to port this code snippet to C/C++11, you can rewrite memory operations to C/C++11 formats and prepare the\u00a0test case with AutoMO parameter wrapper as follow (don&#8217;t forget the &#8220;wildcard.h&#8221; header file for the parameter wrappers):</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p style=\"text-align: left;\">// Initially</p>\n<p style=\"text-align: left;\">x.store(0, memory_order_seq_cst);</p>\n<p style=\"text-align: left;\">y.store(0, memory_order_seq_cst);</p>\n<p style=\"text-align: left;\">\u00a0// T1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// T2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // T3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// T4</p>\n<p style=\"text-align: left;\">x.store(1, wildcard(1)); \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 y.store(1, wildcard(2)); \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0r1 =x.load(wildcard(3)); \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0r3 = y.load(wildcard(5));</p>\n<p style=\"text-align: left;\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r2 = y.load(wildcard(4)); \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0r4 = x.load(wildcard(6));</p>\n</blockquote>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li>Compile the test case and run it under CDSChecker with AutoMO plugin on with the following command (suppose you compile this test case .</li>\n</ol>\n</li>\n</ol>\n<blockquote><p>./run.sh test/iriw_wildcard.o -m2 -y -t AUTOMO -o no-weaken</p></blockquote>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li>The output is as follow:</li>\n</ol>\n</li>\n</ol>\n<blockquote><p>The results are as the following:<br />\nResult 0:</p>\n<p>wildcard 1 -&gt; memory_order_seq_cst<br />\nwildcard 2 -&gt; memory_order_seq_cst<br />\nwildcard 3 -&gt; memory_order_acquire<br />\nwildcard 4 -&gt; memory_order_seq_cst<br />\nwildcard 5 -&gt; memory_order_acquire<br />\nwildcard 6 -&gt; memory_order_seq_cst</p></blockquote>\n<p>This means that AutoMO infers one result that shows the mapping between each wildcard parameter to its inferred paraemter.</p>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li>Suppose you already know that wildcard parameter &#8220;wildcard(1)&#8221; and &#8220;wildcard(2)&#8221; need to be memory_order_seq_cst, and you want to infer the rest of the parameters. You can have an input file as follow (let&#8217;s call the input file as input.txt):</li>\n</ol>\n</li>\n</ol>\n<blockquote><p>Result 0:</p>\n<p>wildcard 1 -&gt; memory_order_seq_cst<br />\nwildcard 2 -&gt; memory_order_seq_cst</p></blockquote>\n<ol>\n<li>Now you can use the &#8220;-o file-[FILE]&#8221; option to\u00a0inform AutoMO with your input by running the following comman:</li>\n</ol>\n<blockquote><p>./run.sh test/iriw_wildcard.o -m2 -y -t AUTOMO -o file-./input.txt -o no-weaken</p></blockquote>\n<h2>See Also</h2>\n<p>The AutoMO\u00a0source and the accompanying benchmarks source on Gitweb:</p>\n<blockquote><p><a href=\"http://plrg.eecs.uci.edu/git/?p=model-checker.git\">http://plrg.eecs.uci.edu/git/?p=model-checker.git</a></p></blockquote>\n<p>The <a href=\"http://plrg.eecs.uci.edu/?p=42\">CDSChecker</a> model checker page for more option information.</p>\n<h2>Disclaimer</h2>\n<p>We make no warranties\u00a0that the output of AutoMO is free of errors. \u00a0You are responsible for assuring the correctness of your software. \u00a0 See the GPL2 license for further disclaimers.</p>\n<p>Please read the paper so that you understand what the tool is supposed to do.</p>\n<h2>Contact</h2>\n<p>Please feel free to contact us for more information. Bug reports are welcome, and we are happy to hear from our users.</p>\n<p>Contact Peizhao Ou at\u00a0<a href=\"mailto:peizhaoo@uci.edu\">peizhaoo@uci.edu</a>\u00a0or Brian Demsky at <a href=\"mailto:bdemsky@uci.edu\">bdemsky@uci.edu</a>\u00a0for questions about AutoMO.</p>\n<h2>Copyright</h2>\n<p>Copyright \u00a9 2013 Regents of the University of California. All rights reserved.</p>\n<p>CDSChecker is distributed under the GPL v2. See the LICENSE file for details.</p>\n<h2>Acknowledgments</h2>\n<p>This material is based upon work supported by the National Science\u00a0Foundation under Grant Nos CCF-0846195, CCF-1217854, CNS-1228995, and\u00a0CCF-1319786.</p>\n<p>Any opinions, findings, and conclusions or recommendations expressed\u00a0in this material are those of the author(s) and do not necessarily\u00a0reflect the views of the National Science Foundation.</p>\n    \t\t\t  \t\t\t</div>\n\n  \t\t\t\n<div id=\"comments\" class=\"comments-area\">\n\n\t\n\t\n\t\n</div><!-- #comments .comments-area -->\n\t\t</article>\n\t</section>\n</div><!-- #content --></div><!-- #container -->\n\n\n\t   </div><!-- #main -->\n\n\t   \n\t   \t\n\t   \n\t   <footer id=\"colophon\" class=\"clearfix\">\n\t\t\t\n\n\n<div id=\"site-generator\">\n\t\t\t\t<div class=\"container\"><div style=\"clear:both;\"></div>\n\t\t\t</div><!-- .container -->\n\t\t\t</div><!-- #site-generator --><div class=\"back-to-top\"><a href=\"#branding\">Back to Top</a></div>\t\t</footer>\n\t   \n\t\t\t\n\n\t</div><!-- .wrapper -->\n\n\t \n\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-includes/js/wp-embed.min.js?ver=5.2.3'></script>\n\n</body>\n</html>", "encoding": "utf-8"}