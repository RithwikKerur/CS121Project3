{"url": "http://plrg.ics.uci.edu/c11tester/", "content": "\n<!DOCTYPE html>\n<html lang=\"en-US\">\n<head>\n\n\t\t<meta charset=\"UTF-8\" />\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\t<link rel=\"profile\" href=\"http://gmpg.org/xfn/11\" />\n\t<link rel=\"pingback\" href=\"http://plrg.ics.uci.edu/wordpress/xmlrpc.php\" />\t\n<title>C11Tester &#8211; A Tool for Testing C/C++ Atomics in Real World Code &#8211; Programming Languages Research Group</title>\n<link rel='dns-prefetch' href='//fonts.googleapis.com' />\n<link rel='dns-prefetch' href='//s.w.org' />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Programming Languages Research Group &raquo; Feed\" href=\"http://plrg.ics.uci.edu/feed/\" />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Programming Languages Research Group &raquo; Comments Feed\" href=\"http://plrg.ics.uci.edu/comments/feed/\" />\n\t\t<script type=\"text/javascript\">\n\t\t\twindow._wpemojiSettings = {\"baseUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/12.0.0-1\\/72x72\\/\",\"ext\":\".png\",\"svgUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/12.0.0-1\\/svg\\/\",\"svgExt\":\".svg\",\"source\":{\"concatemoji\":\"http:\\/\\/plrg.ics.uci.edu\\/wordpress\\/wp-includes\\/js\\/wp-emoji-release.min.js?ver=5.2.3\"}};\n\t\t\t!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline=\"top\",l.font=\"600 32px Arial\",a){case\"flag\":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case\"emoji\":return b=d([55357,56424,55356,57342,8205,55358,56605,8205,55357,56424,55356,57340],[55357,56424,55356,57342,8203,55358,56605,8203,55357,56424,55356,57340]),!b}return!1}function f(a){var c=b.createElement(\"script\");c.src=a,c.defer=c.type=\"text/javascript\",b.getElementsByTagName(\"head\")[0].appendChild(c)}var g,h,i,j,k=b.createElement(\"canvas\"),l=k.getContext&&k.getContext(\"2d\");for(j=Array(\"flag\",\"emoji\"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],\"flag\"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener(\"DOMContentLoaded\",h,!1),a.addEventListener(\"load\",h,!1)):(a.attachEvent(\"onload\",h),b.attachEvent(\"onreadystatechange\",function(){\"complete\"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type=\"text/css\">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n\t<link rel='stylesheet' id='wp-block-library-css'  href='http://plrg.ics.uci.edu/wordpress/wp-includes/css/dist/block-library/style.min.css?ver=5.2.3' type='text/css' media='all' />\n<link rel='stylesheet' id='attitude_style-css'  href='http://plrg.ics.uci.edu/wordpress/wp-content/themes/attitude_mod/style.css?ver=5.2.3' type='text/css' media='all' />\n<link rel='stylesheet' id='google_fonts-css'  href='//fonts.googleapis.com/css?family=PT+Sans%7CPhilosopher&#038;ver=5.2.3' type='text/css' media='all' />\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-includes/js/jquery/jquery.js?ver=1.12.4-wp'></script>\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1'></script>\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-content/themes/attitude_mod/library/js/tinynav.js?ver=5.2.3'></script>\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-content/themes/attitude_mod/library/js/backtotop.js?ver=5.2.3'></script>\n<link rel='https://api.w.org/' href='http://plrg.ics.uci.edu/wp-json/' />\n<link rel=\"EditURI\" type=\"application/rsd+xml\" title=\"RSD\" href=\"http://plrg.ics.uci.edu/wordpress/xmlrpc.php?rsd\" />\n<link rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\" href=\"http://plrg.ics.uci.edu/wordpress/wp-includes/wlwmanifest.xml\" /> \n<link rel=\"canonical\" href=\"http://plrg.ics.uci.edu/c11tester/\" />\n<link rel='shortlink' href='http://plrg.ics.uci.edu/?p=448' />\n<link rel=\"alternate\" type=\"application/json+oembed\" href=\"http://plrg.ics.uci.edu/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fplrg.ics.uci.edu%2Fc11tester%2F\" />\n<link rel=\"alternate\" type=\"text/xml+oembed\" href=\"http://plrg.ics.uci.edu/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fplrg.ics.uci.edu%2Fc11tester%2F&#038;format=xml\" />\n\n</head>\n\n<body class=\"page-template-default page page-id-448 \">\n\t\n\t<div class=\"wrapper\">\n\t\t\t\t<header id=\"branding\" >\n\t\t\t\t\n\t<div class=\"container clearfix\">\n\t\t<div class=\"hgroup-wrap clearfix\">\n\t\t\t\t\t\t\t\t<section class=\"hgroup-right\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<form action=\"http://plrg.ics.uci.edu/\" class=\"searchform clearfix\" method=\"get\">\n\t\t<label class=\"assistive-text\" for=\"s\">Search</label>\n\t\t<input type=\"text\" placeholder=\"Search\" class=\"s field\" name=\"s\">\n\t</form><!-- .searchform -->\n\t\t\t\t\t</section><!-- .hgroup-right -->\t\n\t\t\t\t\t\t\t<hgroup id=\"site-logo\" class=\"clearfix\">\n\t\t\t\t\t\t\t\t\t\t\t\t<h1 id=\"site-title\"> \n\t\t\t\t\t\t\t\t<a href=\"http://plrg.ics.uci.edu/\" title=\"Programming Languages Research Group\" rel=\"home\">\n\t\t\t\t\t\t\t\t\tProgramming Languages Research Group\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t</hgroup><!-- #site-logo -->\n\t\t\t\n\t\t</div><!-- .hgroup-wrap -->\n\t</div><!-- .container -->\t\n\t\t\t\t\t<img src=\"http://plrg.eecs.uci.edu/wordpress/wp-content/uploads/2015/04/cropped-IMG_0976_small.jpg\" class=\"header-image\" width=\"2000\" height=\"485\" alt=\"Programming Languages Research Group\">\n\t\t\t\t\n\t<nav id=\"access\" class=\"clearfix\">\n\t\t\t\t\t<div class=\"container clearfix\"><ul class=\"root\"><li id=\"menu-item-34\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-34\"><a href=\"http://plrg.ics.uci.edu/\">Brian Demsky</a></li>\n<li id=\"menu-item-22\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-22\"><a href=\"http://plrg.ics.uci.edu/students/\">Students</a></li>\n<li id=\"menu-item-19\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-19\"><a href=\"http://plrg.ics.uci.edu/publications_page/\">Publications</a></li>\n<li id=\"menu-item-29\" class=\"menu-item menu-item-type-post_type menu-item-object-page current-menu-ancestor current-menu-parent current_page_parent current_page_ancestor menu-item-has-children menu-item-29\"><a href=\"http://plrg.ics.uci.edu/software_page/\">Software</a>\n<ul class=\"sub-menu\">\n\t<li id=\"menu-item-455\" class=\"menu-item menu-item-type-post_type menu-item-object-page current-menu-item page_item page-item-448 current_page_item menu-item-455\"><a href=\"http://plrg.ics.uci.edu/c11tester/\" aria-current=\"page\">C11Tester \u2013 A Tool for Testing C/C++ Atomics in Real World Code</a></li>\n\t<li id=\"menu-item-396\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-396\"><a href=\"http://plrg.ics.uci.edu/software-relaxed-mm/\">Software for Relaxed Memory Models</a></li>\n\t<li id=\"menu-item-83\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-83\"><a href=\"http://plrg.ics.uci.edu/software_page/irvine-research-java-compiler/\">Irvine Research Java Compiler</a></li>\n\t<li id=\"menu-item-77\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-77\"><a href=\"http://plrg.ics.uci.edu/software_page/views/\">Views</a></li>\n\t<li id=\"menu-item-358\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-358\"><a href=\"http://plrg.ics.uci.edu/vigilia/\">Vigilia</a></li>\n</ul>\n</li>\n<li class=\"default-menu\"><a href=\"http://plrg.ics.uci.edu\" title=\"Navigation\">Navigation</a></li></ul></div><!-- .container -->\n\t\t\t\t\t</nav><!-- #access --> \t\t\n\t\t\t\t</header>\n\t\t\n\t\t\t\t<div id=\"main\" class=\"container clearfix\">\n\n<div id=\"container\">\n\t\n\n<div id=\"content\">\t<section id=\"post-448\" class=\"post-448 page type-page status-publish hentry\">\n\t\t<article>\n\n\t\t\t\n\t\t\t<header class=\"entry-header\">\n    \t\t\t<h1 class=\"entry-title\">\n<!--    \t\t\t\tC11Tester &#8211; A Tool for Testing C/C++ Atomics in Real World Code -->\n    \t\t\t</h1><!-- .entry-title -->\n  \t\t\t</header>\n\n  \t\t\t\n  \t\t\t\n  \t\t\t<div class=\"entry-content clearfix\">\n    \t\t\t\n<h1>C11Tester: A Testing tool for C11 and C++11 Atomics</h1>\n\n\n\n<p>C11Tester is a testing tool for C11/C++11 which randomly explores the behaviors of code under the C/C++ memory model.</p>\n\n\n\n<p>C11Tester is constructed as a dynamically-linked shared library which implements the C and C++ atomic types and portions of the other thread-support libraries of C/C++ (e.g., std::atomic, std::mutex, etc.).</p>\n\n\n\n<p>C11Tester compiles on Linux. Instrumenting programs requires using our LLVM pass. It likely can be ported to other *NIX flavors.</p>\n\n\n\n<h2>Mailing List</h2>\n\n\n\n<p>If you have questions, you can contact us at&nbsp;<a href=\"mailto:c11tester@googlegroups.com\">c11tester@googlegroups.com</a>.</p>\n\n\n\n<p>You can sign up for the C11Tester mailing list at:&nbsp;<a href=\"https://groups.google.com/forum/#!forum/c11tester\">https://groups.google.com/forum/#!forum/c11tester</a></p>\n\n\n\n<h2>Getting Started</h2>\n\n\n\n<p>If you haven&#8217;t done so already, you may download C11Tester using git:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  git clone git://plrg.eecs.uci.edu/c11tester.git\n</code></pre>\n\n\n\n<p>Get the benchmarks (not required; distributed separately):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  git clone git://plrg.eecs.uci.edu/c11concurrency-benchmarks.git\n</code></pre>\n\n\n\n<p>Get the LLVM frontend using git and follow its directions to build:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  git clone git://plrg.eecs.uci.edu/c11llvm.git\n</code></pre>\n\n\n\n<p>Compile the fuzzer:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  make\n</code></pre>\n\n\n\n<p>To see the help message on how to run C11Tester, execute:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  ./run.sh -h\n</code></pre>\n\n\n\n<h2>Useful Options</h2>\n\n\n\n<p><code>-v</code></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Verbose: show all executions and not just buggy ones.</p></blockquote>\n\n\n\n<p><code>-x num</code></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Specify the number number of executions to run.</p></blockquote>\n\n\n\n<p><code>-u num</code></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Value to provide to atomics loads from uninitialized memory locations. The default is 0, but this may cause some programs to throw exceptions (segfault) before the model checker prints a trace.</p></blockquote>\n\n\n\n<h2>Benchmarks</h2>\n\n\n\n<p>Many simple tests are located in the&nbsp;<code>test/</code>&nbsp;directory. These are manually instrumented and can just be run.</p>\n\n\n\n<p>You may also want to try the larger benchmarks (distributed separately). These require LLVM to instrument.</p>\n\n\n\n<h2>Running your own code</h2>\n\n\n\n<p>You likely want to test your own code, not just our tests. You will likely need to use our LLVM pass to instrument your program. You will have to modify your build environment to do this.</p>\n\n\n\n<p>Test programs should be compiled against our shared library (libmodel.so). Then the shared library must be made available to the dynamic linker, using the&nbsp;<code>LD_LIBRARY_PATH</code>&nbsp;environment variable, for instance.</p>\n\n\n\n<h2>Reading an execution trace</h2>\n\n\n\n<p>When C11Tester detects a bug in your program (or when run with the&nbsp;<code>--verbose</code>&nbsp;flag), it prints the output of the program run (STDOUT) along with some summary trace information for the execution in question. The trace is given as a sequence of lines, where each line represents an operation in the execution trace. These lines are ordered by the order in which they were run by C11Tester (i.e., the &#8220;execution order&#8221;), which does not necessarily align with the &#8220;order&#8221; of the values observed (i.e., the modification order or the reads-from relation).</p>\n\n\n\n<p>The following list describes each of the columns in the execution trace output:</p>\n\n\n\n<ul><li>#: The sequence number within the execution. That is, sequence number &#8220;9&#8221; means the operation was the 9th operation executed by C11Tester. Note that this represents the execution order, not necessarily any other order (e.g., modification order or reads-from).</li><li>t: The thread number</li><li>Action type: The type of operation performed</li><li>MO: The memory-order for this operation (i.e.,&nbsp;<code>memory_order_XXX</code>, where&nbsp;<code>XXX</code>&nbsp;is&nbsp;<code>relaxed</code>,&nbsp;<code>release</code>,&nbsp;<code>acquire</code>,&nbsp;<code>rel_acq</code>, or&nbsp;<code>seq_cst</code>)</li><li>Location: The memory location on which this operation is operating. This is well-defined for atomic write/read/RMW, but other operations are subject to C11Tester implementation details.</li><li>Value: For reads/writes/RMW, the value returned by the operation. Note that for RMW, this is the value that is&nbsp;<em>read</em>, not the value that was&nbsp;<em>written</em>. For other operations, &#8216;value&#8217; may have some C11Tester-internal meaning, or it may simply be a don&#8217;t-care (such as&nbsp;<code>0xdeadbeef</code>).</li><li>Rf: For reads, the sequence number of the operation from which it reads. [Note: If the execution is a partial, infeasible trace (labeled INFEASIBLE), as printed during&nbsp;<code>--verbose</code>&nbsp;execution, reads may not be resolved and so may have Rf=? or Rf=Px, where x is a promised future value.]</li><li>CV: The clock vector, encapsulating the happens-before relation (see our paper, or the C/C++ memory model itself). We use a Lamport-style clock vector similar to [1]. The &#8220;clock&#8221; is just the sequence number (#). The clock vector can be read as follows:Each entry is indexed as CV[i], where<code>    i = 0, 1, 2, ..., &lt;number of threads&gt;\n</code>So for any thread i, we say CV[i] is the sequence number of the most recent operation in thread i such that operation i happens-before this operation. Notably, thread 0 is reserved as a dummy thread for certain C11Tester operations.</li></ul>\n\n\n\n<p>See the following example trace:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>------------------------------------------------------------------------------------\n#    t    Action type     MO       Location         Value               Rf  CV\n------------------------------------------------------------------------------------\n1    1    thread start    seq_cst  0x7f68ff11e7c0   0xdeadbeef              ( 0,  1)\n2    1    init atomic     relaxed        0x601068   0                       ( 0,  2)\n3    1    init atomic     relaxed        0x60106c   0                       ( 0,  3)\n4    1    thread create   seq_cst  0x7f68fe51c710   0x7f68fe51c6e0          ( 0,  4)\n5    2    thread start    seq_cst  0x7f68ff11ebc0   0xdeadbeef              ( 0,  4,  5)\n6    2    atomic read     relaxed        0x60106c   0                   3   ( 0,  4,  6)\n7    1    thread create   seq_cst  0x7f68fe51c720   0x7f68fe51c6e0          ( 0,  7)\n8    3    thread start    seq_cst  0x7f68ff11efc0   0xdeadbeef              ( 0,  7,  0,  8)\n9    2    atomic write    relaxed        0x601068   0                       ( 0,  4,  9)\n10   3    atomic read     relaxed        0x601068   0                   2   ( 0,  7,  0, 10)\n11   2    thread finish   seq_cst  0x7f68ff11ebc0   0xdeadbeef              ( 0,  4, 11)\n12   3    atomic write    relaxed        0x60106c   0x2a                    ( 0,  7,  0, 12)\n13   1    thread join     seq_cst  0x7f68ff11ebc0   0x2                     ( 0, 13, 11)\n14   3    thread finish   seq_cst  0x7f68ff11efc0   0xdeadbeef              ( 0,  7,  0, 14)\n15   1    thread join     seq_cst  0x7f68ff11efc0   0x3                     ( 0, 15, 11, 14)\n16   1    thread finish   seq_cst  0x7f68ff11e7c0   0xdeadbeef              ( 0, 16, 11, 14)\nHASH 4073708854\n------------------------------------------------------------------------------------\n</code></pre>\n\n\n\n<p>Now consider, for example, operation 10:</p>\n\n\n\n<p>This is the 10th operation in the execution order. It is an atomic read-relaxed operation performed by thread 3 at memory address&nbsp;<code>0x601068</code>. It reads the value &#8220;0&#8221;, which was written by the 2nd operation in the execution order. Its clock vector consists of the following values:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    CV[0] = 0, CV[1] = 7, CV[2] = 0, CV[3] = 10\n</code></pre>\n\n\n\n<h2>End of Execution Summary</h2>\n\n\n\n<p>C11Tester prints summary statistics at the end of each execution. These summaries are based off of a few different properties of an execution, which we will break down here:</p>\n\n\n\n<ul><li>A&nbsp;<em>buggy</em>&nbsp;execution is an execution in which C11Tester has found a real bug: a data race, a deadlock, failure of a user-provided assertion, or an uninitialized load, for instance. C11Tester will only report bugs in feasible executions.</li></ul>\n\n\n\n<h2>Other Notes and Pitfalls</h2>\n\n\n\n<ul><li>Data races may be reported as multiple bugs, one for each byte-address of the data race in question. See, for example, this run:<code>$ ./run.sh test/releaseseq.o\n...\nBug report: 4 bugs detected\n  [BUG] Data race detected @ address 0x601078:\n    Access 1: write in thread  2 @ clock   4\n    Access 2:  read in thread  3 @ clock   9\n  [BUG] Data race detected @ address 0x601079:\n    Access 1: write in thread  2 @ clock   4\n    Access 2:  read in thread  3 @ clock   9\n  [BUG] Data race detected @ address 0x60107a:\n    Access 1: write in thread  2 @ clock   4\n    Access 2:  read in thread  3 @ clock   9\n  [BUG] Data race detected @ address 0x60107b:\n    Access 1: write in thread  2 @ clock   4\n    Access 2:  read in thread  3 @ clock   9\n</code></li></ul>\n\n\n\n<h2>See Also</h2>\n\n\n\n<p>The C11Tester project page:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><a href=\"http://plrg.eecs.uci.edu/c11tester/\">http://plrg.eecs.uci.edu/c11tester/</a></p></blockquote>\n\n\n\n<p>The C11Tester source and accompanying benchmarks on Gitweb:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><a href=\"http://plrg.eecs.uci.edu/git/?p=c11tester.git\">http://plrg.eecs.uci.edu/git/?p=c11tester.git</a></p><p><a href=\"http://plrg.eecs.uci.edu/git/?p=c11llvm.git\">http://plrg.eecs.uci.edu/git/?p=c11llvm.git</a></p><p><a href=\"http://plrg.eecs.uci.edu/git/?p=c11concurrency-benchmarks.git\">http://plrg.eecs.uci.edu/git/?p=c11concurrency-benchmarks.git</a></p></blockquote>\n\n\n\n<h2>Contact</h2>\n\n\n\n<p>Please feel free to contact us for more information. Bug reports are welcome, and we are happy to hear from our users. We are also very interested to know if C11Tester catches bugs in your programs.</p>\n\n\n\n<p>Contact Weiyu Luo at&nbsp;<a href=\"mailto:weiyul7@uci.edu\">weiyul7@uci.edu</a>&nbsp;or Brian Demsky at&nbsp;<a href=\"mailto:bdemsky@uci.edu\">bdemsky@uci.edu</a>.</p>\n\n\n\n<h2>Copyright</h2>\n\n\n\n<p>Copyright \u00a9 2013 and 2019 Regents of the University of California. All rights reserved.</p>\n\n\n\n<p>C11Tester is distributed under the GPL v2. See the LICENSE file for details.</p>\n\n\n\n<h2>Acknowledgments</h2>\n\n\n\n<p>This material is based upon work supported by the National Science Foundation under Grant Numbers 1740210 and 1319786 and Google Research awards.</p>\n\n\n\n<p>Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.<a href=\"https://github.com/c11tester/c11tester#references\"></a></p>\n\n\n\n<h2>References</h2>\n\n\n\n<p>[1] L. Lamport. Time, clocks, and the ordering of events in a distributed system. CACM, 21(7):558-565, July 1978.</p>\n    \t\t\t  \t\t\t</div>\n\n  \t\t\t\n<div id=\"comments\" class=\"comments-area\">\n\n\t\n\t\n\t\n</div><!-- #comments .comments-area -->\n\t\t</article>\n\t</section>\n</div><!-- #content --></div><!-- #container -->\n\n\n\t   </div><!-- #main -->\n\n\t   \n\t   \t\n\t   \n\t   <footer id=\"colophon\" class=\"clearfix\">\n\t\t\t\n\n\n<div id=\"site-generator\">\n\t\t\t\t<div class=\"container\"><div style=\"clear:both;\"></div>\n\t\t\t</div><!-- .container -->\n\t\t\t</div><!-- #site-generator --><div class=\"back-to-top\"><a href=\"#branding\">Back to Top</a></div>\t\t</footer>\n\t   \n\t\t\t\n\n\t</div><!-- .wrapper -->\n\n\t \n\n<script type='text/javascript' src='http://plrg.ics.uci.edu/wordpress/wp-includes/js/wp-embed.min.js?ver=5.2.3'></script>\n\n</body>\n</html>", "encoding": "utf-8"}