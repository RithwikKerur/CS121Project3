{"url": "http://seal.ics.uci.edu/projects/letterbomb/", "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>SEAL - LetterBomb</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<meta http-equiv=\"Reply-to\" content=\"malek at uci dot edu\">\n<meta http-equiv=\"Owner\" content=\"Sam Malek\">\n<meta name=\"Author\" content=\"Sam Malek\">\n<meta name=\"Generator\" content=\"Emacs\">\n<link rev=\"MADE\" href=\"mailto:malek at uci dot edu\">\n<link href=\"../../seal.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n\n<body>\n<div class=\"wrapper\">\n    \n<!-- *************** Beginning of content ****************** -->\n\n<h2>LetterBomb: Automatic Generation of Inter-Component Communication Exploits for Android Applications</h2>\n\n<p>\nAlthough a wide variety of approaches identify vulnerabilities in\nAndroid apps, none attempt to determine exploitability of those\nvulnerabilities. Exploitability can aid in reducing false positives of\nvulnerability analysis, and can help engineers triage\nbugs. Specifically, one of the main attack vectors of Android apps is\ntheir inter-component communication (ICC) interface, where apps may\nreceive messages called Intents. In this paper, we provide the first\napproach for automatically generating exploits for Android apps,\ncalled LetterBomb, relying on a combined path-sensitive symbolic\nexecution-based static analysis, and the use of software\ninstrumentation and test oracles. We run LetterBomb on 10,000 Android\napps from Google Play, where we identify 181 exploits from 835\nvulnerable apps. Compared to a state-of-the-art detection approach for\nthree ICC-based vulnerabilities, LetterBomb obtains 33%-60% more\nvulnerabilities at a 6.66 to 7 times faster speed.\n</p>\n\n<h3>Approach Overview</h3>\n<img ALT=\"[LetterBomb Approach Overview]\" height=\"250\" src=./approach_overview_cropped.png>\n\n<p>\nTo automatically generate exploits for Android apps, LetterBomb (1)\nmodels the Android framework, especially the ICC interface of Android\napps; (2) provides test input generation, whose goal is to construct\nan ICC input that actually exploits a vulnerability; and (3) includes\nsoftware test oracles that determine if a test input successfully\nexploits a particular vulnerability type. Specifically, we focus on\nthree types of vulnerabilities---inter-process denial of service,\ncross application scripting, and Fragment injection---where each\nvulnerability corresponds to a single oracle type. Each oracle is\nrealized as a combination of instrumentation at either the app or\nframework level, and the check of a property to determine if\nexploitation was successful. As a result, even though each\nvulnerability requires an oracle designed specifically for it,\nconstruction of each oracle only needs to be performed once, either as\nan algorithm that automatically instruments an app, or a one-time\nmodification to the Android framework. Thereafter, the oracle may be\ncontinually reused.\n</p>\n\n<p>\nGiven that test input generation is critical for AEG at the ICC\ninterface of Android apps and their constituent components, LetterBomb\nrelies upon a path-sensitive analysis of Android apps along the\nmessage-based Android ICC interface, i.e., Intents. Determining\nexploitability of a vulnerability at a particular statement is\ndependent on assessing the different program paths that may reach a\nstatement. Certain paths may reach a statement without exploiting the\nvulnerability residing at that statement---or there may be more than\none path in a program that may exploit a vulnerable program\nstatement. As a result, it is important for our analysis to be\npath-sensitive to minimize the possibility of missing exploitable\nvulnerabilities. At the same time, path-sensitive analyses face the\nproblem of path explosion, as the program grows, due to the\npotentially exponential number of program paths to be analyzed. To\naddress this problem, our approach analyzes program paths beginning\nfrom the points in the program that may be vulnerable, and utilizes\ninformation about the Android framework to reduce the\ninformation that needs to be considered for the analysis.\n</p>\n\n<h3>Implementation</h3>\n\nLetterBomb generates exploits for vulnerabilities in Android apps and\nthus can be readily used for malicious purposes. To ensure that\nLetterBomb does not fall into the hands of a malicious agent, access\nto an implementation of LetterBomb can be obtained by\ncontacting <a href=\"http://jgarcia.ics.uci.edu\">Joshua Garcia</a>\nand <a href=\"http://sites.uci.edu/hammadm/about-me/\">Mahmoud Hammad</a>. In your email\nmessage, please use an email address of your organization (e.g., a\nuniversity or company email address). If you are a student, please CC\nthe principal investigator (i.e., professor or researcher) you are\nworking with, and include in the message any links to websites that\ncan help confirm your affiliation (e.g., your research website).\n\n<h3>Publications</h3>\n\n<ul class=\"paperlist\">\n    <li><b>Automatic Generation of Inter-Component Communication Exploits for Android Applications</b><br> \n    Joshua Garcia, Mahmoud Hammad, Negar Ghorbani, and Sam Malek<br>\n    <i>11th joint meeting of the European Software Engineering Conference and ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE 2017), Paderborn, Germany, September 2017.</i>\n    <br>[<a href=\"./letterbomb.pdf\">PDF</a>]\n    </li> \n</ul>\n\n\n<!-- ***************** End of content ****************** -->\n<br><br>\n<div style=\"float:left\">\n            <a href=\"http://www.ics.uci.edu/~seal/\"><img ALT=\"[seal's logo]\" height=\"200\" src=../../seal.png></a>\n</div>\n<div style=\"float:right\">\n            <a href=\"http://www.ics.uci.edu\"><img ALT=\"[uci's logo]\" style=\"padding-top: 40px\" height=\"100\" src=../../uci.jpg></a>\n</div>\n</div>\n</body>\n", "encoding": "ascii"}