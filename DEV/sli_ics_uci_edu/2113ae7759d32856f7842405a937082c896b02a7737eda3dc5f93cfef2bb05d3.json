{"url": "http://sli.ics.uci.edu/PmWiki/Functions", "content": "<!DOCTYPE html \n    PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n<head>\n  <title>SLI | PmWiki / Functions </title>\n  <meta http-equiv='Content-Style-Type' content='text/css' />\n  <link rel='stylesheet' href='http://sli.ics.uci.edu/pmwiki/pub/skins/custom/pmwiki.css' type='text/css' />\n  <!--HTMLHeader--><style type='text/css'><!--\n  ul, ol, pre, dl, p { margin-top:0px; margin-bottom:0px; }\n  code.escaped { white-space: nowrap; }\n  .vspace { margin-top:1.33em; }\n  .indent { margin-left:40px; }\n  .outdent { margin-left:40px; text-indent:-40px; }\n  a.createlinktext { text-decoration:none; border-bottom:1px dotted gray; }\n  a.createlink { text-decoration:none; position:relative; top:-0.5em;\n    font-weight:bold; font-size:smaller; border-bottom:none; }\n  img { border:0px; }\n  .editconflict { color:green; \n  font-style:italic; margin-top:1.33em; margin-bottom:1.33em; }\n\n  table.markup { border:2px dotted #ccf; width:90%; }\n  td.markup1, td.markup2 { padding-left:10px; padding-right:10px; }\n  table.vert td.markup1 { border-bottom:1px solid #ccf; }\n  table.horiz td.markup1 { width:23em; border-right:1px solid #ccf; }\n  table.markup caption { text-align:left; }\n  div.faq p, div.faq pre { margin-left:2em; }\n  div.faq p.question { margin:1em 0 0.75em 0; font-weight:bold; }\n  div.faqtoc div.faq * { display:none; }\n  div.faqtoc div.faq p.question \n    { display:block; font-weight:normal; margin:0.5em 0 0.5em 20px; line-height:normal; }\n  div.faqtoc div.faq p.question * { display:inline; }\n   \n    .frame \n      { border:1px solid #cccccc; padding:4px; background-color:#f9f9f9; }\n    .lfloat { float:left; margin-right:0.5em; }\n    .rfloat { float:right; margin-left:0.5em; }\na.varlink { text-decoration:none;}\n\n--></style>  <meta name='robots' content='noindex,nofollow' />\n\n</head>\n<body>\n<!--PageHeaderFmt-->\n  <div id='wikilogo'><a href='http://sli.ics.uci.edu'><img src='/pmwiki/pub/skins/custom/SLI_white.png'\n    alt='SLI' border='0' /></a></div>\n  <div id='wikihead'>\n  <form action='http://sli.ics.uci.edu'>\n    <!-- <span class='headnav'><a href='http://sli.ics.uci.edu/PmWiki/RecentChanges'\n      accesskey='c'>Recent Changes</a> -</span> --> \n    <input type='hidden' name='n' value='PmWiki.Functions' />\n    <input type='hidden' name='action' value='search' />\n    <!-- <a href='http://sli.ics.uci.edu/Site/Search'>Search</a>: -->\n    <input type='text' name='q' value='' class='inputbox searchbox' />\n    <input type='submit' class='inputbutton searchbutton'\n      value='Search' />\n    <a href='http://sli.ics.uci.edu/Site/Search'>(?)</a>\n  </form></div>\n<!--/PageHeaderFmt-->\n  <table id='wikimid' width='100%' cellspacing='0' cellpadding='0'><tr>\n<!--PageLeftFmt-->\n      <td id='wikileft' valign='top'>\n        <ul><li><a class='wikilink' href='http://sli.ics.uci.edu/Classes/Classes'>Classes</a>\n</li><li><a class='wikilink' href='http://sli.ics.uci.edu/Group/Group'>Group</a>\n</li><li><a class='wikilink' href='http://sli.ics.uci.edu/Projects/Projects'>Research</a>\n</li><li><a class='urllink' href='http://www.ics.uci.edu/~ihler/pubs.html' rel='nofollow'>Publications</a>\n</li><li><a class='wikilink' href='http://sli.ics.uci.edu/Code/Code'>Code</a>\n</li></ul><div class='vspace'></div><hr />\n<div class='vspace'></div>\n</td>\n<!--/PageLeftFmt-->\n      <td id='wikibody' valign='top'>\n<!--PageActionFmt-->\n        <div id='wikicmds'><ul><li class='browse'><a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/Functions?action=login'>login</a>\n</li></ul>\n</div>\n<!--PageTitleFmt-->\n        <div id='wikititle'>\n          <div class='pagegroup'><a href='http://sli.ics.uci.edu/PmWiki'>PmWiki</a> /</div>\n          <h1 class='pagetitle'>Functions</h1></div>\n<!--PageText-->\n<div id='wikitext'>\n<p>\n<a name='trailstart' id='trailstart'></a> \n</p><div style='clear:right; float:right; font-size:smaller; background-color:#eee;' >\n<p><span class='wikitrail'>&lt; <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/Variables'>Variables</a> | <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/DocumentationIndex#trailstart'>Documentation Index</a> | <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/PageFileFormat'>Page file format</a> &gt;</span> \n</p></div>\n<div style='clear:right;' ><span class='frame rfloat' style='font-size: smaller; background-color: #ffffcc; clear: right;'>admins (advanced) </span>\n</div>\n<p class='vspace'>This page describes some of the internal workings of PmWiki by explaining how some of the functions in pmwiki.php work. For a more brief list/overview on functions useful to for instance cookbook writers, see <a class='urllink' href='http://www.pmwiki.org/wiki/Cookbook/Functions' rel='nofollow'>Cookbook:Functions</a>. \n</p>\n<p class='vspace'>To use this functions you have to make sure that all relevant internal variables have been initialized correctly. See <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/CustomMarkup'>Custom Markup</a> and <a class='urllink' href='http://www.pmwiki.org/wiki/PmWiki/Custom%20Actions' rel='nofollow'>Custom Actions</a> for more information on how these functions are typically called via <code class='escaped'>Markup()</code> or <code class='escaped'>$HandleActions[]</code>.\n</p>\n<div class='vspace'></div><h2><a name='pmcrypt' id='pmcrypt'></a> <code class='escaped'>pmcrypt($password, $salt = null)</code></h2>\n<p>The pmcrypt() function is intended to be a safe replacement for the <a class='urllink' href='http://php.net/crypt' rel='nofollow'>PHP 5.6+ crypt() function</a> without providing a $salt, which would raise a notice. If a salt is provided, crypt() is called to check an existing password. If a salt is not provided,  <a class='urllink' href='http://php.net/password_hash' rel='nofollow'>password_hash()</a> will be called to create a cryptographically strong password hash.\n</p>\n<div class='vspace'></div><h2><a name='PCCF' id='PCCF'></a> <code class='escaped'>PCCF($php_code, $callback_template='default', $callback_arguments = '$m')</code></h2>\n<p>The PCCF() function (<em>PmWiki Create Callback Function</em>) can be used to create callback functions used with <a class='urllink' href='http://php.net/preg_replace_callback' rel='nofollow'>preg_replace_callback</a>. It is required for PHP 5.5, but will also work with earlier PHP versions.\n</p>\n<p class='vspace'>The first argument is the PHP code to be evaluated. \n</p>\n<p class='vspace'>The second argument (optional) is the callback template, a key from the global &#36;CallbackFnTemplates array. There are two templates that can be used by recipe authors: \n</p><ul><li>'default' will pass $php_code as a function code\n</li><li>'return' will wrap $php_code like \"return $php_code;\" (since PmWiki 2.2.62)\n</li></ul><p class='vspace'>The third argument (optional) is the argument of the callback function. Note that PmWiki uses the '$m' argument to pass the matches of a regular expression search, but your function can use other argument(s).\n</p>\n<p class='vspace'>PCCF() will create an anonymous (lambda) callback function containing the supplied code, and will cache it. On subsequent calls with the same $php_code, PCCF() will return the cached function name.\n</p>\n<p class='vspace'>See <a class='urllink' href='http://php.net/create_function' rel='nofollow'>http://php.net/create_function</a>.\n</p>\n<div class='vspace'></div><h2><a name='PPRA' id='PPRA'></a> <code class='escaped'>PPRA($array_search_replace, $string)</code></h2>\n<p>The PPRA() function (<em>PmWiki preg_replace array</em>) can be used to perform a regular expression replacement with or without evaluation, for PHP 5.5 compatibility. \n</p>\n<p class='vspace'>Since PmWiki 2.2.56, PmWiki uses this function to process the following arrays: <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/LinkVariables#MakePageNamePatterns'><code class='varlink'>&#36;MakePageNamePatterns</code></a>, <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/OtherVariables#FmtP'><code class='varlink'>&#36;FmtP</code></a>, &#36;QualifyPatterns, <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/EditVariables#ROEPatterns'><code class='varlink'>&#36;ROEPatterns</code></a>, <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/EditVariables#ROSPatterns'><code class='varlink'>&#36;ROSPatterns</code></a>, &#36;SaveAttrPatterns, <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/UploadVariables#MakeUploadNamePatterns'><code class='varlink'>&#36;MakeUploadNamePatterns</code></a>. Any custom settings should continue to work for PHP 5.4 and earlier, but wikis running on PHP 5.5 may need to make a few changes.\n</p>\n<p class='vspace'>The first argument contains the 'search'=&gt;'replace' pairs, the second is the  \"haystack\" string to be manipulated.\n</p>\n<p class='vspace'>The 'replace' parts of the array can be strings or function names. If the 'replace' part is a callable function name, it will be called with the array of matches as a first argument via preg_replace_callback(). If not a callable function, a simple preg_replace() will be performed.\n</p>\n<p class='vspace'>Previously, PmWiki used such constructs:\n</p><pre>  $fmt = preg_replace(array_keys(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/OtherVariables#FmtP'><code class='varlink'>&#36;FmtP</code></a>), array_values(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/OtherVariables#FmtP'><code class='varlink'>&#36;FmtP</code></a>), $fmt);\n</pre><p class='vspace'>It is now possible to use simply this:\n</p><pre>  $fmt = PPRA(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/OtherVariables#FmtP'><code class='varlink'>&#36;FmtP</code></a>, $fmt);\n</pre><p class='vspace'>Note that since PHP 5.5, the search patterns cannot have an /e evaluation flag. When creating the $array_search_replace array, before PHP 5.5 we could use something like (eg. for <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/LinkVariables#MakePageNamePatterns'><code class='varlink'>&#36;MakePageNamePatterns</code></a>):\n</p><pre>  '/(?&lt;=^| )([a-z])/e' =&gt; \"strtoupper('$1')\",\n</pre><p class='vspace'>Since PHP 5.5, we should use this (will also work in PHP 5.4 and earlier):\n</p><pre>  '/(?&lt;=^| )([a-z])/' =&gt; PCCF(\"return strtoupper(\\$m[1]);\"),\n</pre><p class='vspace'>Note that the /e flag should be now omitted, instead of '$0', '$1', '$2', we should use $m[0], $m[1], $m[2], etc. in the replacement code, and there is no need to call PSS() in the replacement code, as backslashes are not automatically added.\n</p>\n<div class='vspace'></div><h2><a name='PPRE' id='PPRE'></a> <code class='escaped'>PPRE($search_pattern, $replacement_code, $string)</code></h2>\n<p>The PPRE() function (<em>PmWiki preg_replace evaluate</em>) can be used to perform a regular expression replacement with evaluation.\n</p>\n<p class='vspace'>Since PHP 5.5, the preg_replace() function has deprecated the /e evaluation flag, and displays warnings when the flag is used. The PPRE() function automatically creates a callback function with the replacement code and calls it.\n</p>\n<p class='vspace'>Before PHP 5.5, it was possible to use such calls:\n</p><pre>  $fmt = preg_replace('/\\\\$([A-Z]\\\\w*Fmt)\\\\b/e','$GLOBALS[\"$1\"]',$fmt);\n</pre><p class='vspace'>Since PHP 5.5, it is possible to replace the previous snippet with the following (also works before PHP 5.5):\n</p><pre>  $fmt = PPRE('/\\\\$([A-Z]\\\\w*Fmt)\\\\b/','$GLOBALS[$m[1]]',$fmt);\n</pre><p class='vspace'>Note that the /e flag should be now omitted, instead of '$0', '$1', '$2', we should use $m[0], $m[1], $m[2], etc. in the replacement code, and there is no need to call PSS() in the replacement code, as backslashes are not automatically added.\n</p>\n<div class='vspace'></div><h2><a name='PHSC' id='PHSC'></a> <code class='escaped'>PHSC($string_or_array, $flags=ENT_COMPAT, $encoding=null, $double_encode=true)</code></h2>\n<p>The PHSC() function (<em>PmWiki HTML special characters</em>) is a replacement for the PHP function <a class='urllink' href='http://php.net/htmlspecialchars' rel='nofollow'>htmlspecialchars</a>. \n</p>\n<p class='vspace'>The htmlspecialchars() function was modified since PHP 5.4 in two ways: it now requires a valid string for the supplied encoding, and it changes the default encoding to UTF-8. This can cause sections of the page to become blank/empty on many sites using the ISO-8859-1 encoding without having set the third argument ($encoding) when calling htmlspecialchars().\n</p>\n<p class='vspace'>The PHSC() function calls htmlspecialchars() with an 8-bit encoding as third argument, whatever the encoding of the wiki (unless you supply an encoding). This way the string never contains invalid characters.\n</p>\n<p class='vspace'>It should be safe for recipe developers to replace all calls to htmlspecialchars() with calls to PHSC(). Only the first argument is required when calling PHSC().\n</p>\n<p class='vspace'>Unlike htmlspecialchars(), the PHSC() function can process arrays recursively (only the values are converted, not the keys of the array).\n</p>\n<div class='vspace'></div><h2><a name='PSS' id='PSS'></a> <code class='escaped'>PSS($string)</code></h2>\n<p>The PSS() function (<em>PmWiki Strip Slashes</em>) removes the backslashes that are\nautomatically inserted in front of quotation marks by\nthe /e option of PHP's preg_replace function.  PSS() is\nmost commonly used in replacement arguments to Markup(),\nwhen the pattern specifies /e and one or more of the \nparenthesized subpatterns could contain a quote or backslash.  \n(\"PSS\" stands for \"PmWiki Strip Slashes\".)\n</p><dl><dd><div class='indent'>From PM: PmWiki expects PSS() to always occur inside of double-quoted strings and to contain single quoted strings internally.  The reason for this is that we don't want the $1 or $2 to accidentally contain characters that would then be interpreted inside of the double-quoted string when the PSS is evaluated.\n<div class='indent'><code>Markup('foo', 'inline', '/(something)/e', 'Foo(PSS(\"$1\"))');  # wrong</code>\n</div><div class='indent'><code>Markup('foo', 'inline', '/(something)/e', \"Foo(PSS('$1'))\");  # right</code>\n</div></div></dd></dl><p class='vspace'><span  style='font-style: italic; color: green;'> Note, the new-style markup definitions with <code>Markup_e()</code> do NOT need to use PSS() in the replacement strings. </span>\n</p>\n<div class='vspace'></div><h3>Example</h3>\n<p>This is a fictitious example where PSS() should be used.\nLet us assume that you wish to define a directive <code class='escaped'>(:example:)</code>\nsuch that <code class='escaped'>(:example \"A horse\":)</code> results in the HTML\n</p><div class='indent'><code class='escaped'>&lt;div&gt;\"A horse\"&lt;/div&gt;</code>.\n</div><p>Here is how the markup rule can be created:\n</p><div class='indent'><pre class='escaped'>\nMarkup('example', 'directives',\n       '/\\\\(:example\\\\s(.*?):\\\\)/e',\n       \"Keep('&lt;div&gt;'.PSS('$1').'&lt;/div&gt;')\");\n</pre>\n</div><p>We need to use PSS() around the '$1' because the matched text\ncould contain quotation marks, and the /e will add backslashes\nin front of them.\n</p>\n<div class='vspace'></div><h2><a name='stripmagic' id='stripmagic'></a> <code class='escaped'>stripmagic($string)</code></h2>\n<p>This function should be used when processing the contents of <code class='escaped'>$_POST</code> or <code class='escaped'>_GET</code> variables when they could contain quotes or backslashes. It verifies <code class='escaped'>get_magic_quotes()</code>, if true,\nstrips the automatically inserted escapes from the string.\n</p>\n<div class='vspace'></div><h2><a name='FmtPageName' id='FmtPageName'></a> <code class='escaped'>FmtPageName</code>($fmt, <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>)</h2>\n<p><a name='FmtPageName-desc' id='FmtPageName-desc'></a>Returns <code class='escaped'>$fmt</code>, with $variable and $[internationalisation] substitutions performed, under the assumption that the current page is <code class='escaped'>pagename</code>. See <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/Variables'>PmWiki.Variables</a> for an (incomplete) list of available variables, <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/Internationalizations'>PmWiki.Internationalizations</a> for internationalisation.  Security: not to be run on user-supplied data.\n</p>\n<p class='vspace'>This is one of the major functions in PmWiki, see <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/FmtPageName'>PmWiki.FmtPageName</a> for\nlots of details.\n</p>\n<div class='vspace'></div><h2><a name='Markup' id='Markup'></a> <code class='escaped'>Markup</code>($name, $when, $pattern, $replace)</h2>\n<p><a name='Markup-desc' id='Markup-desc'></a>Adds a new markup to the conversion table.  Described in greater detail at <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/CustomMarkup'>PmWiki.CustomMarkup</a>.\n</p>\n<p class='vspace'>This function is used to insert translation rules into the PmWiki's\ntranslation engine. The arguments to <code class='escaped'>Markup()</code> are all strings, where:\n</p>\n<div class='vspace'></div><dl><dt><code class='escaped'>$name</code></dt><dd> The string names the rule that is inserted.  If a rule of the same name already exists, then this rule is ignored.\n</dd><dt><code class='escaped'>$when</code></dt><dd> This string is used to control <em>when</em> a rule is to be applied relative to other rules.  A specification of \"<code class='escaped'>&lt;xyz</code>\" says to apply this rule prior to the rule named \"xyz\", while \"<code class='escaped'>&gt;xyz</code>\" says to apply this rule after the rule \"xyz\".  See <a class='urllink' href='http://www.pmwiki.org/wiki/PmWiki/CustomMarkup' rel='nofollow'>CustomMarkup</a> for more details on the order of rules.\n</dd><dt><code class='escaped'>$pattern</code></dt><dd> This string is a <a class='urllink' href='http://www.php.net/preg_replace' rel='nofollow'>regular expression</a> that is used by the translation engine to look for occurences of this rule in the markup source.\n</dd><dt><code class='escaped'>$replace</code></dt><dd> This string will replace the matched text when a match occurs.\n</dd></dl><p class='vspace'>Also see: <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/CustomMarkup'>PmWiki.CustomMarkup</a> and <a class='urllink' href='http://www.pmwiki.org/wiki/Cookbook/Functions#Markup' rel='nofollow'>Cookbook:Functions#Markup</a>\n</p>\n<div class='vspace'></div><h2><a name='MarkupToHTML' id='MarkupToHTML'></a> <code class='escaped'>MarkupToHTML</code>(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>, $str)</h2>\n<p><a name='MarkupToHTML-desc' id='MarkupToHTML-desc'></a> Converts the string <code class='escaped'>$str</code> containing PmWiki markup into the corresponding HTML code, assuming the current page is <code class='escaped'>$pagename</code>.\n</p>\n<p class='vspace'>Also see: <a class='urllink' href='http://www.pmwiki.org/wiki/Cookbook/Functions#MarkupToHTML' rel='nofollow'>Cookbook:Functions#MarkupToHTML</a>\n</p>\n<div class='vspace'></div><h2><a name='mkdirp' id='mkdirp'></a> <code class='escaped'>mkdirp</code>($dir)</h2>\n<p>The function <code class='escaped'>mkdirp</code>($dir) creates a directory, <code class='escaped'>$dir</code>, if it doesn't\nalready exist, including any parent directories that might be needed.  For\neach directory created, it checks that the permissions on the directory are\nsufficient to allow PmWiki scripts to read and write files in that\ndirectory.  This includes checking for restrictions imposed by PHP's\nsafe_mode setting.  If <code class='escaped'>mkdirp</code>() is unable to successfully create a\nread/write directory, <code class='escaped'>mkdirp</code>() aborts with an error message telling the\nadministrator the steps to take to either create $dir manually or give\nPmWiki sufficient permissions to be able to do it.\n</p>\n<div class='vspace'></div><h2><a name='MakeLink' id='MakeLink'></a> <code class='escaped'>MakeLink</code>(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>, $target, $txt, $suffix, $fmt)</h2>\n<p>The function <code class='escaped'>MakeLink</code>(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>, $target, $txt, $suffix, $fmt) returns an html-formatted anchor link. Its arguments are as follows:\n</p><pre> <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a> is the source page\n $target is where the link should go\n $txt is the value to use for '&#36;LinkText' in the output \n $suffix is any suffix string to be added to $txt\n $fmt is a format string to use\n</pre><p class='vspace'>If $txt is NULL or not specified, then it is automatically computed from $target.\n</p>\n<p class='vspace'>If $fmt is NULL or not specified, then MakeLink uses the default\nformat as specified by the type of link.  For page links this\nmeans the <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/LinkVariables#LinkPageExistsFmt'><code class='varlink'>&#36;LinkPageExistsFmt</code></a> and <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/LinkVariables#LinkPageCreateFmt'><code class='varlink'>&#36;LinkPageCreateFmt</code></a> variables,\nfor intermap-style links it comes from either the <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/LinkVariables#IMapLinkFmt'><code class='varlink'>&#36;IMapLinkFmt</code></a>\narray or from <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/LinkVariables#UrlLinkFmt'><code class='varlink'>&#36;UrlLinkFmt</code></a>.  Inside of the formatting strings,\n&#36;LinkUrl is replaced by the resolved url for the link, &#36;LinkText\nis replaced with the appropriate text, and &#36;LinkAlt is replaced\nby any \"title\" (alternate text) information associated with the\nlink.\n</p>\n<p class='vspace'>Also see: <a class='urllink' href='http://www.pmwiki.org/wiki/PmWiki/MakeLink' rel='nofollow'>PmWiki:MakeLink</a> and <a class='urllink' href='http://www.pmwiki.org/wiki/Cookbook/Functions#MakeLink' rel='nofollow'>Cookbook:Functions#MakeLink</a>\n</p>\n<div class='vspace'></div><h2><a name='MakeUploadName' id='MakeUploadName'></a> <code class='escaped'>MakeUploadName</code>(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>, $x)</h2>\n<p><code>MakeUploadName()</code> simply takes a string <code>$x</code> (representing an attachment's\nname) and converts it to a valid name by removing any unwanted characters.\nIt also requires the name to begin and end with an alphanumeric character,\nand as of 2.0.beta28 it forces any file extensions to lowercase.\nThis function is defined in <code>scripts/upload.php</code> and only used when uploads\nare enabled.\n</p>\n<div class='vspace'></div><h2><a name='SessionAuth' id='SessionAuth'></a> <code class='escaped'>SessionAuth</code>(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>, $auth=NULL)</h2>\n<p><code>SessionAuth()</code> manages keeping authentication via cookie-sessions. Session contains\never password or vaidated id and associated groups from previous calls.It adds\nelements passed by <code>$auth</code> to session. It also writes every element\nsaved in session to <code><a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#AuthPw'><code class='varlink'>&#36;AuthPw</code></a></code>(passwords) and <code>&#36;AuthList</code>(ids and groups).\n</p>\n<div class='vspace'></div><h2><a name='IsAuthorized' id='IsAuthorized'></a> <code class='escaped'>IsAuthorized</code>($chal, $source, &amp;$from)</h2>\n<p><code>IsAuthorized</code> takes a pageattributesstring (e. g. \"id:user1 $1&#36;Ff3w34HASH...\") in <code>$chal</code>.\n<code>$source</code> is simply returned and used for building the authcascade (pageattributes - groupattributes - \n<code>&#36;DefaultPassword</code>). <code>$from</code> will be returned if <code>$chal</code> is empty, because it is not checked \nbefore calling <code>IsAuthorized()</code>, this is needed for the authcascade. <code>IsAuthorized()</code> returns an array\nwith three values: <code>$auth</code> <code>1</code> - authenticated, <code>0</code> - not authenticated, <code>-1</code> - refused; <code>$passwd</code>; \n<code>$source</code> from the parameter list.\n</p>\n<div class='vspace'></div><h2><a name='CondAuth' id='CondAuth'></a> <code class='escaped'>CondAuth</code> (<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>, 'auth level')</h2>\n<p><code class='escaped'>CondAuth</code> implements the <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/ConditionalMarkup'>ConditionalMarkup</a> for <code class='escaped'>(:if auth level:)</code>. For instance <code class='escaped'> CondAuth($pagename,'edit')</code> is true if authorization level is 'edit'. Use inside local configuration files to build conditionals with a check of authorization level, similar to using <code class='escaped'>(:if auth level:)</code> on a wiki page.\n</p>\n<p class='vspace'>Note that CondAuth() should be called after all authorization levels and passwords have been defined. For example, if you use it with <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/Drafts'>Drafts</a>, you should include the draft.php script before calling CondAuth():\n</p><pre class='escaped'>\n   $EnableDrafts = 1;\n   $DefaultPasswords['publish'] = pmcrypt('secret');\n   include_once(\"$FarmD/scripts/draft.php\");\n   if (! CondAuth($pagename, 'edit')) { /* whatever */ }\n</pre>\n<p>Best is to use CondAuth() near the bottom of your config.php script.\n</p>\n<div class='vspace'></div><h2><a name='RetrieveAuthPage' id='RetrieveAuthPage'></a> <code>RetrieveAuthPage(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>, $level, $authprompt=true, $since=0)</code></h2>\n<p><span  style='display: none;'> Pm words as said in <a class='urllink' href='http://article.gmane.org/gmane.comp.web.wiki.pmwiki.user/12493/match=retrieveauthpage%%' rel='nofollow'>http://article.gmane.org/gmane.comp.web.wiki.pmwiki.user/12493/match=retrieveauthpage%%</a></span>\nwhere:\n</p>\n<div class='vspace'></div><pre>   <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>   - name of page to be read\n   $level      - authorization level required (read/edit/auth/upload)\n   $authprompt - true if user should be prompted for a password if needed\n   $since      - how much of the page history to read\n                 0 == read entire page including all of history\n                 READPAGE_CURRENT == read page without loading history\n                 timestamp == read history only back through timestamp\n</pre><p class='vspace'>The $since parameter allows PmWiki to stop reading from a page file\nas soon as it has whatever information is needed -- i.e., if an operation\nsuch as browsing isn't going to need the page's history, then specifying\nREADPAGE_CURRENT can result in a much faster loading time.  (This can be \nespecially important for things such as searching and page listings.)\nHowever, if combined with UpdatePage, the updated page will have no history.\n</p>\n<p class='vspace'>Use e.g. <code class='escaped'>$page = @RetrieveAuthPage('Main.MyPage', 'read')</code> to obtain a page object that contains all the information of the correspondent file in separate keys, e.g. <code class='escaped'>$page['text']</code> will contain a string with the current wiki markup of Main.MyPage. Use this generally in preference to the alternative function <code class='escaped'>ReadPage($pagename, $since=0)</code> since it respects the authorisation of the user, i.e. it checks the authorisation level before loading the page, or it can be set to do so. <code class='escaped'>ReadPage()</code> reads a page regardless of permission.\n</p>\n<p class='vspace'>Passing 'ALWAYS' as the authorization level (instead of 'read', 'edit', etc.) will cause RetrieveAuthPage to always read and return the page, even if it happens to be protected by a read password.\n</p>\n<div class='vspace'></div><h2><a name='RetrieveAuthSection' id='RetrieveAuthSection'></a> <code>RetrieveAuthSection(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>, $pagesection, $list=NULL, $auth='read')</code></h2>\n<p>RetrieveAuthSection extracts a section of text from a page. If $pagesection starts with anything other than '#', it identifies the page to extract text from.  Otherwise RetrieveAuthSection looks in the pages given by $list, or in <a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a> if $list is not specified. \n</p><ul><li>The selected page is placed in the global &#36;RASPageName variable. \n</li><li>The caller is responsible for calling Qualify() as needed.\n</li></ul><p class='vspace'>Provides a way to limit the array that is returned by ReadPage, so that it only pulls the content up to a specific section marker. For example, pulling from start of page to '##blogend':\n</p><div class='indent'><pre class='escaped'>\nfunction FeedText($pagename, &amp;$page, $tag) {\n  $text = RetrieveAuthSection($pagename, '##blogend');\n  $content = MarkupToHTML($pagename, $text);\n  return \"&lt;$tag&gt;&lt;![CDATA[$content]]&gt;&lt;/$tag&gt;\";\n}\n</pre>\n</div><p class='vspace'>The '##blogend' argument says to read from the beginning of the page to just before the line containing the <a name='blogend' id='blogend'></a> marker.  See\n<a class='urllink' href='http://www.pmwiki.org/wiki/PmWiki/IncludeOtherPages' rel='nofollow'>IncludeOtherPages</a> for more information about the section specifications.\n</p>\n<p class='vspace'>This version won't read text from pages that are read-protected; if you want to get text even from read-protected pages, then \n</p><div class='indent'><pre class='escaped'>\n  $text = RetrieveAuthSection($pagename, '##blogend', NULL, 'ALWAYS');\n</pre>\n</div><div class='vspace'></div><h2><a name='UpdatePage' id='UpdatePage'></a> <code>UpdatePage(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>, $old (page object), $new (page object));</code></h2>\n<p><em><a class='urllink' href='http://www.pmwiki.org/wiki/PmWiki/UpdatePage' rel='nofollow'>More Technical Notes</a></em>\n</p>\n<p class='vspace'><code class='escaped'>UpdatePage()</code> allows cookbook recipes to mimic the behavior of editing wiki pages via the browser. Internally, PmWiki does several house keeping tasks which are accessible via this function (preserving history/diff information, updating page revision numbers, updating RecentChanges pages, sending email notifications, etc._\n</p><ul><li>\"Page object\" refers to an array pulled from <code class='escaped'>RetrieveAuthPage($pagename, $level, $authprompt=true, $since=0);</code> (preferred), or <code class='escaped'>ReadPage($pagename); </code> (disregards page security). Note that $new['text'] should contain all page data for the new version of the page. \n</li><li>If a page doesn't exist, UpdatePage() will attempt to create it.\n</li><li>Ignoring $old (e.g. <code class='escaped'>UpdatePage($pagename, '', $new);</code>) will erase all historical page data---a <em>tabula rasa</em>.\n<ul><li>If you retrieved $old using RetrieveAuthPage(<a class='varlink' href='http://sli.ics.uci.edu/PmWiki/BasicVariables#pagename'><code class='varlink'>&#36;pagename</code></a>,$auth,$prompt,READPAGE_CURRENT) and set $new=$old, then UpdatePage will also erase all historical data\n</li></ul></li></ul><p><code>UpdatePage()</code> cannot be called directly from config.php because there are necessary initializations which occur later in pmwiki.php.  It is not enough to just load stdconfig.php.  If you want to use <code>UpdatePage()</code> you will need to do it within a <a class='urllink' href='http://www.pmwiki.org/wiki/PmWiki/CustomMarkup' rel='nofollow'>custom markup</a>, a <a class='urllink' href='http://www.pmwiki.org/wiki/Cookbook/MarkupExpressionSamples' rel='nofollow'>custom markup expression</a>, or a <a class='urllink' href='http://www.pmwiki.org/wiki/PmWiki/CustomActions' rel='nofollow'>custom action</a>.\n</p>\n<p class='vspace'>Categories: <a class='categorylink' href='http://sli.ics.uci.edu/Category/PmWikiDeveloper'>PmWiki Developer</a>\n \n</p><div style='clear:right; float:right; font-size:smaller; background-color:#eee;' >\n<p><span class='wikitrail'>&lt; <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/Variables'>Variables</a> | <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/DocumentationIndex#trailstart'>Documentation Index</a> | <a class='wikilink' href='http://sli.ics.uci.edu/PmWiki/PageFileFormat'>Page file format</a> &gt;</span> \n</p></div>\n<p><a name='trailend' id='trailend'></a>\n<br clear='all' />\n</p><div  style='background-color: #ffe; border-top: 1px solid black; font-size: .8em;' > \n<p>This page may have <span class='commentout-pmwikiorg'> a more recent version on <a class='urllink' href='http://www.pmwiki.org' rel='nofollow'>pmwiki.org</a>: <a class='urllink' href='http://www.pmwiki.org/wiki/PmWiki/Functions' rel='nofollow'>PmWiki:Functions</a>, and </span> a talk page: <a class='urllink' href='http://www.pmwiki.org/wiki/PmWiki/Functions-Talk' rel='nofollow'>PmWiki:Functions-Talk</a>.\n</p></div>\n</div>\n\n      </td>\n    </tr></table>\n<!--PageFooterFmt-->\n  <div id='wikifoot'>\n    <div class='footnav' style='float:left'> Last modified July 08, 2016, at 06:36 PM</div>\n    <div class='footnav' style='float:right; text-align:right'>\n    <a href=\"http://www.ics.uci.edu\">Bren School of Information and Computer Science</a><br>\n    <a href=\"http://www.uci.edu\">University of California, Irvine</a>\n    </div>\n  </div>\n<!--HTMLFooter--><script type=\"text/javascript\">\n  var _gaq = _gaq || [];\n  _gaq.push([\"_setAccount\", \"UA-24148957-2\"]);\n\t_gaq.push([\"_trackPageview\"]);\n\t(function() {\n\t  var ga = document.createElement(\"script\"); ga.type = \"text/javascript\"; ga.async = true;\n\t  ga.src = (\"https:\" == document.location.protocol ? \"https://ssl\" : \"http://www\") + \".google-analytics.com/ga.js\";\n\t  var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(ga, s);\n\t  })();\n</script>\n</body>\n</html>\n", "encoding": "ascii"}