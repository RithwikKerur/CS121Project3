{"url": "http://sli.ics.uci.edu/Classes-CS178-Notes/Matlab", "content": "<!DOCTYPE html \n    PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n<head>\n  <title>SLI | Classes-CS178-Notes / Matlab </title>\n  <meta http-equiv='Content-Style-Type' content='text/css' />\n  <link rel='stylesheet' href='http://sli.ics.uci.edu/pmwiki/pub/skins/custom/pmwiki.css' type='text/css' />\n  <!--HTMLHeader--><style type='text/css'><!--\n  ul, ol, pre, dl, p { margin-top:0px; margin-bottom:0px; }\n  code.escaped { white-space: nowrap; }\n  .vspace { margin-top:1.33em; }\n  .indent { margin-left:40px; }\n  .outdent { margin-left:40px; text-indent:-40px; }\n  a.createlinktext { text-decoration:none; border-bottom:1px dotted gray; }\n  a.createlink { text-decoration:none; position:relative; top:-0.5em;\n    font-weight:bold; font-size:smaller; border-bottom:none; }\n  img { border:0px; }\n  .editconflict { color:green; \n  font-style:italic; margin-top:1.33em; margin-bottom:1.33em; }\n\n  table.markup { border:2px dotted #ccf; width:90%; }\n  td.markup1, td.markup2 { padding-left:10px; padding-right:10px; }\n  table.vert td.markup1 { border-bottom:1px solid #ccf; }\n  table.horiz td.markup1 { width:23em; border-right:1px solid #ccf; }\n  table.markup caption { text-align:left; }\n  div.faq p, div.faq pre { margin-left:2em; }\n  div.faq p.question { margin:1em 0 0.75em 0; font-weight:bold; }\n  div.faqtoc div.faq * { display:none; }\n  div.faqtoc div.faq p.question \n    { display:block; font-weight:normal; margin:0.5em 0 0.5em 20px; line-height:normal; }\n  div.faqtoc div.faq p.question * { display:inline; }\n   \n    .frame \n      { border:1px solid #cccccc; padding:4px; background-color:#f9f9f9; }\n    .lfloat { float:left; margin-right:0.5em; }\n    .rfloat { float:right; margin-left:0.5em; }\na.varlink { text-decoration:none;}\n\n--></style>  <meta name='robots' content='index,follow' />\n\n</head>\n<body>\n<!--PageHeaderFmt-->\n  <div id='wikilogo'><a href='http://sli.ics.uci.edu'><img src='/pmwiki/pub/skins/custom/SLI_white.png'\n    alt='SLI' border='0' /></a></div>\n  <div id='wikihead'>\n  <form action='http://sli.ics.uci.edu'>\n    <!-- <span class='headnav'><a href='http://sli.ics.uci.edu/Classes-CS178-Notes/RecentChanges'\n      accesskey='c'>Recent Changes</a> -</span> --> \n    <input type='hidden' name='n' value='Classes-CS178-Notes.Matlab' />\n    <input type='hidden' name='action' value='search' />\n    <!-- <a href='http://sli.ics.uci.edu/Site/Search'>Search</a>: -->\n    <input type='text' name='q' value='' class='inputbox searchbox' />\n    <input type='submit' class='inputbutton searchbutton'\n      value='Search' />\n    <a href='http://sli.ics.uci.edu/Site/Search'>(?)</a>\n  </form></div>\n<!--/PageHeaderFmt-->\n  <table id='wikimid' width='100%' cellspacing='0' cellpadding='0'><tr>\n<!--PageLeftFmt-->\n      <td id='wikileft' valign='top'>\n        <ul><li><a class='wikilink' href='http://sli.ics.uci.edu/Classes/Classes'>Classes</a>\n</li><li><a class='wikilink' href='http://sli.ics.uci.edu/Group/Group'>Group</a>\n</li><li><a class='wikilink' href='http://sli.ics.uci.edu/Projects/Projects'>Research</a>\n</li><li><a class='urllink' href='http://www.ics.uci.edu/~ihler/pubs.html' rel='nofollow'>Publications</a>\n</li><li><a class='wikilink' href='http://sli.ics.uci.edu/Code/Code'>Code</a>\n</li></ul><div class='vspace'></div><hr />\n<div class='vspace'></div>\n</td>\n<!--/PageLeftFmt-->\n      <td id='wikibody' valign='top'>\n<!--PageActionFmt-->\n        <div id='wikicmds'><ul><li class='browse'><a class='wikilink' href='http://sli.ics.uci.edu/Classes-CS178-Notes/Matlab?action=login'>login</a>\n</li></ul>\n</div>\n<!--PageTitleFmt-->\n        <div id='wikititle'>\n          <div class='pagegroup'><a href='http://sli.ics.uci.edu/Classes-CS178-Notes'>Classes-CS178-Notes</a> /</div>\n          <h1 class='pagetitle'>Matlab</h1></div>\n<!--PageText-->\n<div id='wikitext'>\n<h1>A brief introduction to Matlab programming</h1>\n<p>See <a class='urllink' href='http://overapi.com/static/cs/matlab_quickref.pdf' rel='nofollow'>this cheat-sheet</a>, or <a class='urllink' href='http://web.mit.edu/18.06/www/Spring09/matlab-cheatsheet.pdf' rel='nofollow'>this one</a>, for a list of many useful Matlab commands.\nMatlab also has a number of toolboxes that can have many useful commands; see <a class='urllink' href='http://overapi.com/static/cs/matlab_toolbox_quickref.pdf' rel='nofollow'>here</a>.\n</p>\n<div class='vspace'></div><h2>Basics of Matlab</h2>\n<h3>Defining scalars, vectors, and matrices</h3>\n<div class='Matlab' style='padding:5px; border:1px solid black; background-color:#dddddd' >\n<pre> <span  style='color: green;'> % Vectors and matrices<br /> </span><span  style='color: green;'> % Row-vectors are defined as:<br /> </span><span  style='color: black;'> a=[1 2 3 4 5 6 7],<br /> </span><span  style='color: green;'> % For sequences of values, you can use a colon form:<br /> </span><span  style='color: black;'> a=1:7,<br /> </span><span  style='color: black;'> b=1:2:7,<br /> </span><span  style='color: black;'> c=7:-1:1,<br /> </span><span  style='color: green;'> % Column-vectors are:<br /> </span><span  style='color: black;'> ac=[1;2;3;4;5;6;7],<br /> </span><span  style='color: green;'> % Transpose and complex-conjugate transpose are .' and ', respectively:<br /> </span><span  style='color: black;'> ac=[1;2;3;4;5;6;7].',<br /> </span><span  style='color: green;'> % Matrices are defined similarly:<br /> </span><span  style='color: black;'> A = [1 2 3 4;5 6 7 8;9 10 11 12];<br /> <br /> </span><span  style='color: green;'> % Several useful constructors for matrices:<br /> </span><span  style='color: black;'> A0 = zeros(3,4);          </span><span  style='color: green;'> % create a 3x4 matrix of all zeros</span>\n <span  style='color: black;'> A1 = ones(3,4);           </span><span  style='color: green;'> % create a 3x4 matrix of all ones</span>\n <span  style='color: black;'> Ru = rand(2,2);           </span><span  style='color: green;'> % create a 2x2 matrix of uniform random numbers, in [0,1)</span>\n <span  style='color: black;'> Rn = randn(3,2);          </span><span  style='color: green;'> % create a 3x2 matrix of Gaussian random numbers, mean 0 variance 1</span>\n <span  style='color: black;'> B = repmat(b,[3,2]);      </span><span  style='color: green;'> % create a matrix by \"tiling\" copies of b (3 copies down and 2 across)</span>\n</pre></div>\n<div class='vspace'></div><h2>Arithmetic operations </h2>\n<div class='Matlab' style='padding:5px; border:1px solid black; background-color:#dddddd' >\n<pre> <span  style='color: green;'> % Arithmetic operations are defined for vectors and matrices, i.e.,<br /> </span><span  style='color: black;'> a=a+2,<br /> </span><span  style='color: green;'> % adds the scalar value 2 to every entry of a; similarly for *,-,/, etc.<br /> <br /> </span><span  style='color: green;'> % You can add two vectors if they are the same size:<br /> </span><span  style='color: black;'> a+2*c,<br /> </span><span  style='color: green;'> % but you cannot add two vectors that are not the same size (unless one is a scalar):<br /> </span><span  style='color: black;'> a+b,<br /> <br /> </span><span  style='color: green;'> % To access an entry in a vector, use parentheses:<br /> </span><span  style='color: black;'> c(2),<br /> </span><span  style='color: black;'> c(2)=20,<br /> </span><span  style='color: green;'> % For matrices, use two arguments<br /> </span><span  style='color: black;'> A(3,1),<br /> </span><span  style='color: black;'> A(3,1)=20,<br /> </span><span  style='color: green;'> % These basic operations also generalize to n-dimensional arrays<br /> <br /> </span><span  style='color: green;'> % Arithemetic operations are defined for vectors and matrices, so that<br /> </span><span  style='color: black;'> a*c.'   </span><span  style='color: green;'> % The dot product between vectors a and c<br /> </span><span  style='color: black;'> A*b.'   </span><span  style='color: green;'> % The matrix-vector product of A and  c<br /> <br /> </span><span  style='color: green;'> % Element-wise versions of times and divide are specified by .* and ./ :<br /> </span><span  style='color: black;'> a.*c,   </span><span  style='color: green;'> % The vector given by the elementwise product</span>\n <br /> <span  style='color: green;'> % Matrix powers are ^ while elementwise powers are .^</span>\n <span  style='color: black;'> R=A^2,   </span><span  style='color: green;'> % The matrix product R=A*A:    R(i,j)=\\sum_k A(i,k)*A(k,j)</span>\n <span  style='color: black;'> R=A.^2,  </span><span  style='color: green;'> % The elementwise square of A: R(i,j)=A(i,j)^2</span>\n</pre></div>\n<div class='vspace'></div><h3>Arithmetic for scalars, vectors, and matrices</h3>\n<h3>Logical relations</h3>\n<div class='Matlab' style='padding:5px; border:1px solid black; background-color:#dddddd' >\n<pre> <span  style='color: black;'> a = [0 1 2]; b = [0 0 2]; <br /> </span><span  style='color: black;'> a==b,    </span><span  style='color: green;'> % test a(i)=b(i): returns logical vector [ 1 0 1 ] <br /> </span><span  style='color: black;'> a~=b,    </span><span  style='color: green;'> % test a(i)!=b(i): logical vector [ 0 1 0 ] <br /> </span><span  style='color: black;'> a&lt;2,     </span><span  style='color: green;'> % test a(i)&lt;2: logical vector [ 1 1 0 ] <br /><br /> </span><span  style='color: black;'> any( a~=b ),  </span><span  style='color: green;'> % true if any a(i)!=b(i) for some i <br /> </span><span  style='color: black;'> all( a==b ),  </span><span  style='color: green;'> % true if all a(i)=b(i) for every i <br /><br /> </span><span  style='color: black;'> M=[0 1 ; 0 0]; <br /> </span><span  style='color: black;'> any( M ),     </span><span  style='color: green;'> % acts on individual columns of M; returns a logical row vector </span>\n</pre></div>\n<div class='vspace'></div><h3>Flow control</h3>\n<div class='Matlab' style='padding:5px; border:1px solid black; background-color:#dddddd' >\n<pre> <span  style='color: black;'> if (any(a)),  </span><span  style='color: green;'> %Best to be sure that test condition is a scalar! <br /> </span><span  style='color: black;'>   fprintf('Some elements of a are true\\n'); <br /> </span><span  style='color: black;'> end; <br /><br /> </span><span  style='color: green;'> %While-loops behave normally; again best if test condition is a scalar <br /> </span><span  style='color: black;'> while (i&lt;15), <br /> </span><span  style='color: black;'>   fprintf('While iter %d \\n',i); i=i+1; <br /> </span><span  style='color: black;'> end; <br /><br /> </span><span  style='color: green;'> %For-loops: step through the code with each value in a series<br /> </span><span  style='color: black;'> for i=1:10,         <br /> </span><span  style='color: black;'>   fprintf('Iteration %d \\n',i); <br /> </span><span  style='color: black;'>   i=i+2;                       </span><span  style='color: green;'> %Note: changing i will not affect the next iteration! <br /> </span><span  style='color: black;'> end; <br /> </span><span  style='color: black;'> for i=[7 2 9 13], fprintf('%d\\n',i); end; </span><span  style='color: green;'> % can step through any arbitrary series</span>\n</pre></div>\n<div class='vspace'></div><h3>Plotting</h3>\n<div class='Matlab' style='padding:5px; border:1px solid black; background-color:#dddddd' >\n<pre> <span  style='color: green;'> %For line plots, use vectors of the x-values and y-values:<br /> </span><span  style='color: black;'> x=[1 1.5 2 3 3.5 4]; y=[0 2 0 4 4 3];         <br /> </span><span  style='color: black;'> plot(x,y,'b-o');     </span><span  style='color: green;'> % b=blue, -=solid line, o=circles at points <br /> </span><span  style='color: black;'> hold on;             </span><span  style='color: green;'> % plot over the current plot <br /> </span><span  style='color: black;'> plot(x,log(x),'r--');</span><span  style='color: green;'> % r=red, --=dashed line </span>\n</pre><p><br /> <span  style='color: green;'> %Data are plotted and connected in the order they are given:</span>\n</p><pre> <span  style='color: black;'> x=[1 3 1.5 2 3.5 4]; y=[0 4 2 0 4 3];         <br /> </span><span  style='color: black;'> plot(x,y,'g-.');     </span><span  style='color: green;'> % plot the same points but in a different order <br /><br /> </span><span  style='color: green;'> %Matlab has some useful pre-defined plotting &amp; drawing functions, such as</span>\n <span  style='color: green;'> %  hist : compute and plot histograms</span>\n <span  style='color: green;'> %  bar  : bar graphs  (bar3 = 3D bar graph)</span>\n <span  style='color: green;'> %  surf, mesh: surface and mesh-frame surfaces</span>\n <span  style='color: green;'> %  contour: contour plot (contour3 = 3D contour)</span>\n <span  style='color: green;'> %  quiver : \"quiver\" or vector flow plot</span>\n <span  style='color: green;'> %  image: display an image (imagesc: with scaling)</span>\n <span  style='color: green;'> %Finally, \"colormap\" sets the value-to-color interpretation in plots</span>\n</pre></div>\n<div class='vspace'></div><h2>Intermediate Subjects</h2>\n<h3>Find</h3>\n<div class='Matlab' style='padding:5px; border:1px solid black; background-color:#dddddd' >\n<pre> <span  style='color: green;'> You can access the internals of vectors with indices, or with logical vectors of the same size <br /> </span><span  style='color: black;'> a = [0 -1 2 -1]; <br /> </span><span  style='color: black;'> idx=find( a &lt; 0 ),   </span><span  style='color: green;'> % returns a list of indices where condition is true: idx=[2 4] <br /> </span><span  style='color: black;'> b = a( find(a&gt;=0) ), </span><span  style='color: green;'> % extracts subseries where condition is true: b=[0 2] <br /> </span><span  style='color: black;'> a( find(a&lt;0) )=0,    </span><span  style='color: green;'> % replace negative entries with zero <br /><br /> </span><span  style='color: black;'> a = [0 -1 2 -1];     </span><span  style='color: green;'> % Here's an equivalent way to do the same thing using logical indexing: <br /> </span><span  style='color: black;'> b=a; b(b&lt;0)=[];      </span><span  style='color: green;'> % remove (replace with empty) positions where b &lt; 0 <br /> </span><span  style='color: black;'> a( a &lt; 0 ) = 0,      </span><span  style='color: green;'> % replace negative entries with zero </span>\n</pre></div>\n<div class='vspace'></div><h3>Random numbers</h3>\n<div class='Matlab' style='padding:5px; border:1px solid black; background-color:#dddddd' >\n<pre> <span  style='color: green;'> %Basics <br /> </span><span  style='color: black;'> u = rand(1,10);            </span><span  style='color: green;'> % 10 uniformly distributed random numbers in [0,1) <br /> </span><span  style='color: black;'> x = randn(2,10);          </span><span  style='color: green;'> % 2x10 \"standard Gaussian\" (independent, variance 1) draws <br /> </span><span  style='color: black;'> pi = randperm(10);       </span><span  style='color: green;'> % random permutation (reordering) of 1:10 <br /> </span><span  style='color: black;'> s = ceil(10*rand(1,10)); </span><span  style='color: green;'> % random re-sampling (bootstrap) from 1:10 <br /> </span><span  style='color: green;'> % Seeds: often it is useful to have reproducible random numbers <br /> </span><span  style='color: black;'> rand('state',seed);  </span><span  style='color: green;'> % use \"state\" random # generator, with initial seed \"seed\" <br /> </span><span  style='color: black;'> randn('state',seed); </span><span  style='color: green;'> % same idea, for the Gaussian random # generator</span>\n</pre></div>\n<div class='vspace'></div><h3>Toolboxes</h3>\n<p>stats, optimization,\n</p>\n<div class='vspace'></div><h3>Structures and cell arrays</h3>\n<div class='Matlab' style='padding:5px; border:1px solid black; background-color:#dddddd' >\n<pre> <span  style='color: green;'> % Cell arrays store collections of mismatched objects (different in type or in size) <br /> </span><span  style='color: black;'> c{1} = rand(1,5); c{2} = rand(1,10); c{3} = uint32(1:5); <br /> </span><span  style='color: black;'> <br /> </span><span  style='color: green;'> % Structs can also hold collections, but use names rather than vector/matrix indexing <br /> </span><span  style='color: black;'> s.myRandom = rand(1,5); s.myZeros = zeros(3,3); </span>\n</pre></div>\n<div class='vspace'></div><h3>Miscellaneous</h3>\n<div class='Matlab' style='padding:5px; border:1px solid black; background-color:#dddddd' >\n<pre> <span  style='color: green;'> % Command history <br /> </span><span  style='color: black;'> diary on;            </span><span  style='color: green;'> % record input &amp; output to file <em>diary</em><br /> </span><span  style='color: black;'> diary myFile.txt;    </span><span  style='color: green;'> % record input &amp; output to file <em>myFile.txt</em><br /> </span><span  style='color: black;'> diary off;           </span><span  style='color: green;'> % stop recording <br /> </span><span  style='color: green;'> % Saving and Loading <br /> </span><span  style='color: black;'> save file.mat;     </span><span  style='color: green;'> % save all variables to <em>file.mat</em> <br /> </span><span  style='color: black;'> load file.mat;     </span><span  style='color: green;'> % restore variables from <em>file.mat</em> <br /> </span><span  style='color: black;'> save file.txt var -ASCII;  </span><span  style='color: green;'> % save variable \"var\" to \"file.txt\" in ascii format <br /> </span><span  style='color: black;'> var = load('file.txt');   </span><span  style='color: green;'> % load a single variable from a text file </span>\n</pre></div>\n<div class='vspace'></div><h2>Advanced Material</h2>\n<h3>Classes</h3>\n<p>See Matlab <a class='wikilink' href='http://sli.ics.uci.edu/Classes-CS178-Notes/Matlab-Classes'>Classes</a> page.\n</p>\n<div class='vspace'></div><h3>Mex-files</h3>\n<p>Matlab is interpreted, and this can make it very slow at some things, including many for-loops or other repeated computations.  Sometimes compiled code can be faster.  Mex functions are compiled code, usually C or C++, that are called from Matlab.  By definition, this makes them platform specific and must be recompiled on each architecture, but the performance boost can be worth it.\n</p>\n<div class='vspace'></div>\n</div>\n\n      </td>\n    </tr></table>\n<!--PageFooterFmt-->\n  <div id='wikifoot'>\n    <div class='footnav' style='float:left'> Last modified January 05, 2015, at 12:07 PM</div>\n    <div class='footnav' style='float:right; text-align:right'>\n    <a href=\"http://www.ics.uci.edu\">Bren School of Information and Computer Science</a><br>\n    <a href=\"http://www.uci.edu\">University of California, Irvine</a>\n    </div>\n  </div>\n<!--HTMLFooter--><script type=\"text/javascript\">\n  var _gaq = _gaq || [];\n  _gaq.push([\"_setAccount\", \"UA-24148957-2\"]);\n\t_gaq.push([\"_trackPageview\"]);\n\t(function() {\n\t  var ga = document.createElement(\"script\"); ga.type = \"text/javascript\"; ga.async = true;\n\t  ga.src = (\"https:\" == document.location.protocol ? \"https://ssl\" : \"http://www\") + \".google-analytics.com/ga.js\";\n\t  var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(ga, s);\n\t  })();\n</script>\n</body>\n</html>\n", "encoding": "ascii"}