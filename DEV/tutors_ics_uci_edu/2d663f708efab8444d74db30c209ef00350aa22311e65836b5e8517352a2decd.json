{"url": "http://tutors.ics.uci.edu/index.php/79-python-resources/102-burrito-class", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-gb\" lang=\"en-gb\" dir=\"ltr\" >\r\n<head>\r\n  <base href=\"http://tutors.ics.uci.edu/index.php/79-python-resources/102-burrito-class\" />\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"author\" content=\"Super User\" />\n  <meta name=\"generator\" content=\"Joomla! - Open Source Content Management\" />\n  <title>Burrito Class</title>\n  <link href=\"/templates/beez_20/favicon.ico\" rel=\"shortcut icon\" type=\"image/vnd.microsoft.icon\" />\n  <link rel=\"stylesheet\" href=\"/templates/system/css/system.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/position.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/layout.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/print.css\" type=\"text/css\" media=\"print\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/general.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/personal.css\" type=\"text/css\" />\n  <script src=\"/media/system/js/mootools-core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/caption.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/mootools-more.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/md_stylechanger.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/hide.js\" type=\"text/javascript\"></script>\n  <script type=\"text/javascript\">\nwindow.addEvent('load', function() {\n\t\t\t\tnew JCaption('img.caption');\n\t\t\t});\n  </script>\n\r\n\r\n<!--[if lte IE 6]>\r\n<link href=\"/templates/beez_20/css/ieonly.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<style type=\"text/css\">\r\n#line {\r\n  width:98% ;\r\n}\r\n.logoheader {\r\n  height:200px;\r\n}\r\n#header ul.menu {\r\n  display:block !important;\r\n  width:98.2% ;\r\n}\r\n</style>\r\n<![endif]-->\r\n\r\n<!--[if IE 7]>\r\n<link href=\"/templates/beez_20/css/ie7only.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<![endif]-->\r\n<!--<script type=\"text/javascript\">\r\n  var big ='72%';\r\n  var small='53%';\r\n  var altopen='is open';\r\n  var altclose='is closed';\r\n  var bildauf='/templates/beez_20/images/plus.png';\r\n  var bildzu='/templates/beez_20/images/minus.png';\r\n  var rightopen='Open info';\r\n  var rightclose='Close info';\r\n  var fontSizeTitle='Font size';\r\n  var bigger='Bigger';\r\n  var reset='Reset';\r\n  var smaller='Smaller';\r\n  var biggerTitle='Increase size';\r\n  var resetTitle='Revert styles to default';\r\n  var smallerTitle='Decrease size';\r\n</script>-->\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div id=\"all\">\r\n        <div id=\"back\">\r\n                <div id=\"header\">\r\n                                <div class=\"logoheader\">\r\n                                        <h1 id=\"logo\">\r\n\r\n                                                                                                                                                                                                        <span class=\"header1\">\r\n                                                                                </span></h1>\r\n                                </div><!-- end logoheader -->\r\n                                        <ul class=\"skiplinks\">\r\n                                                <li><a href=\"#main\" class=\"u2\">Skip to content</a></li>\r\n                                                <li><a href=\"#nav\" class=\"u2\">Jump to main navigation and login</a></li>\r\n                                                                                    </ul>\r\n                                        <!--<h2 class=\"unseen\">Nav view search</h2>-->\r\n                                        <h3 class=\"unseen\">Navigation</h3>\r\n                                        \n<ul class=\"menu\">\n<li class=\"item-464 active\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n\r\n                                        <div id=\"line\">\r\n                                        <!-- <div id=\"fontsize\"></div> -->\r\n                                        <!--<h3 class=\"unseen\">Search</h3> -->\r\n                                        \r\n                                        </div> <!-- end line -->\r\n\r\n\r\n                        </div><!-- end header -->\r\n                        <div id=\"contentarea\">\r\n                                        <div id=\"breadcrumbs\">\r\n\r\n                                                        \r\n\r\n                                        </div>\r\n\r\n                                        \r\n\r\n                                                        <div class=\"left1 leftbigger\" id=\"nav\">\r\n                                                   <div class=\"moduletable_menu\">\n <h3><span\n\tclass=\"backh\"><span class=\"backh2\"><span class=\"backh3\">This Site</span></span></span></h3>\n \n<ul class=\"menu\">\n<li class=\"item-464 active\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n</div>\n\r\n                                                                \r\n                                                                \r\n\r\n\r\n                                                        </div><!-- end navi -->\r\n               \r\n                                        <div id=\"wrapper2\" >\r\n\r\n                                                <div id=\"main\">\r\n\r\n                                                \r\n                                                        \n<div id=\"system-message-container\">\n</div>\r\n                                                        <div class=\"item-page\">\n\n\t<h2>\n\t\t\t<a href=\"/index.php/79-python-resources/102-burrito-class\">\n\t\tBurrito Class</a>\n\t\t</h2>\n\n\n\n\n\n\n\n\n<p><strong>By Samuel Lin (edits by Daniel Holmes and Binh Nguyen)</strong></p>\r\n<p style=\"text-align: justify;\">#All edits prefaced with \"EDIT\" for convenience</p>\r\n<p style=\"text-align: justify;\"># The Burrito Class - Tutorial for ICS 33</p>\r\n<p style=\"text-align: justify;\">#EDIT: many instances of the word Burrito in this document are not capitalized when they probably should<br />#* be. Not all of them need to be changed, but whenever the document refers to a Burrito object, instead<br />#* of a literal, physical burrito, it should probably be changed to send a consistent message about when<br />#* this example is talking about an object in Python or an actual thing. Another general thing that <br />#* could be addressed is operator overloading. This document talks about overloading frequently, but<br />#* doesn't actually say what overloading is. If someone is just learning about classes, it's very likely<br />#* that they have yet to encounter the term or concept, and while this document provides good examples<br />#* of overloading, it would be probably be helpful to have a brief definition towards the beginning.</p>\r\n<p style=\"text-align: justify;\"># People studying computer science will eventually come across the concept of classes and operator overloading.<br /># This concept is seen in programming languages, especially object-oriented programming languages like Python.<br /># This will be a quick and simple tutorial and overview of classes, and some of the many different operators <br /># in Python can be overloaded.<br />#<br /># We will declare and define a basic Burrito class, which will create Burrito objects. Burrito objects have some attributes<br /># associated with them, such as a length(visible length of a burrito in inches), type of tortilla (which can be either flour or corn), and <br /># ingredients (which is a list that holds strings of the ingredients inside). To keep things simple, the only possible ingredients are rice,<br /># beans, cheese, chicken, and vegetables.</p>\r\n<p style=\"text-align: justify;\"># In this tutorial let us go through some basic rules that will simplify the concept of operator overloading in classes. Two burritos will <br /># be considered equal as long as their tortilla type is the same. So, a flour burrito with just beans and cheese will be considered <br /># equivalent to a flour burrito that just has chicken. Any type of ingredients (as long as they are represented by strings) can be <br /># added into the burrito.</p>\r\n<p style=\"text-align: justify;\">#EDIT: The previous two paragraphs give contradictory information. One states that there are five possible ingredients, while the other<br />#* says that any string ingredient may be added to the Burrito. This could be confusing and draw attention away from what the example<br />#* is actually attempting to do. It doesn't matter whether they are all allowed or not; consistency is what is important.</p>\r\n<p style=\"text-align: justify;\">class Burrito:<br />&nbsp;&nbsp; &nbsp;<br />#EDIT: Remove \"goal of this\" from this explanation. These instances of the word \"burrito\" should probably be capitalized&nbsp; &nbsp;</p>\r\n<p style=\"text-align: justify;\"># The goal of this __init__ function INITIALIZES an object of the type burrito. It will create 3 attributes referring to a burrito's<br /># length, type of tortilla it is made of, and the ingredients it is composed of.<br />&nbsp;&nbsp;&nbsp; def __init__(self, size: int, tortilla:str, ingred:list):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.tortillaLength = size<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.tortillaType = tortilla<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.ingredients = ingred<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __len__(self):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.tortillaLength</p>\r\n<p style=\"text-align: justify;\">#EDIT: Change \"for a Burrito class\" to \"for the Burrito class\" or \"for Burrito objects\". The current state potentially implies things<br />#* like the existence of multiple, distinct Burrito classes that have different behaviors.</p>\r\n<p style=\"text-align: justify;\"># NOTE: Even though the __eq__ overloads the == operator in Python, and we are defining the == operator for a Burrito class, it is totally<br /># fine, because the == in this __eq__ function (self.tortillaType == self.tortillaType). is in a sense comparing the identity of two <br /># strings, since we defined the tortillaType attribute to be a string when we initialized the class. This is legal because the == <br /># operator is already defined for strings and works fine for strings in Python. The same principle applies when defining the &lt; (__lt__)<br /># and &gt; (__gt__) operators.&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __eq__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.tortillaType == self.tortillaType<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __lt__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if type(right) == Burrito:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return len(self) &lt; len(right)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __gt__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if type(self) == Burrito:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return len(self) &gt; len(right)</p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />#EDIT: It is worth making a note here to mention that overloading the + operator in this manner causes it to behave significantly<br />#* differently from how it does on other, more familiar types. For instance, consider the following:<br />#*&nbsp;&nbsp; &nbsp;anInt = 1 + 1<br />#*&nbsp;&nbsp; &nbsp;aString = \"Hello \" + \"World!\"<br />#*&nbsp;&nbsp; &nbsp;aBurrito = Burrito(6, \"Flour\", [\"Beans\", \"Cheese\"]) + \"Salsa Verde\"<br />#* aBurrito will be equal to None in this case, but that might not be what a person new to these concepts would expect. At least<br />#* a note should be made, but it might be better to just rewrite the __add__ and __radd__ methods to avoid confusing the concept.&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br /># We will overload one arithmetic operator for this class, the + operator. This is done via the __add__ and __radd__ functions.</p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp;&nbsp; def __add__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if type(right) != str:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raise TypeError(\"Added ingredient is not a string.\")<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.ingredients.append(right)</p>\r\n<p style=\"text-align: justify;\">#EDIT: Here would be an excellent place to mention how Python calls left.__add__ and fails, and then calls right.__radd__&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br /># NOTE: The __radd__ function is used for the cases where the + operator is called when the string is on the left side of the + <br /># operator, such as: \"Sour cream\" + someBurrito. Just having a __add__ function defined will not be sufficient enough to calculate this<br /># expression, because the __add__ function would only work when the burrito class is on the left side and a string is on the right side<br /># (Like someBurrito + \"Sour cream\").<br />&nbsp;&nbsp;&nbsp; def __radd__(self, left):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if type(left) != str:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raise TypeError(\"Added ingredient is not a string.\")<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.ingredients.append(left)<br />&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp; <br />#EDIT: Change \"boolen\" to boolean.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br /># Something additional is the __contains__ method that overloads the 'in' operator in Python. This operator returns a boolen (True or False),<br /># depending on whether or not an ingredient is in the burrito or not.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __contains__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return right in self.ingredients<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;<br />#EDIT: Capitalize \"burrito\" when referring to the class. Also this line should be broken up sooner than it is. A line is<br />#* definitely too long if it causes horizontal scrolling on a very common resolution. It may even be worth noting how it<br />#* is possible to break up lines with a backslash.&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;<br /># In addition to overloading operators, we can also define methods associated with the burrito class. Let's define a simple function<br /># called characteristics, which will be a method that can be called by a Burrito class and returns the 'characteristics of the burrito' <br /># and its attributes in an easily readable, well-organized string.<br />&nbsp;&nbsp;&nbsp; def characteristics(self):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 'This burrito has the following characteristics: \\n&nbsp; -{theLength} inches in size\\n&nbsp; -Wrapped in {Tortilla} tortilla\\n&nbsp; -Ingredients(Fillings): {Ingred}'.format(theLength = self.tortillaLength, Tortilla = self.tortillaType,\\<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ingred = ', '.join(self.ingredients))</p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />if __name__ == '__main__':<br />&nbsp;&nbsp;&nbsp; print(\"Let's create 1 6-inch burrito for my friend.\")<br />#EDIT: Capitalize all future instances of the word \"burrito\"<br /># NOTE: When any object gets initialized with attributes, each attributes is placed in the object's __dict__, which is a dictionary where <br /># the keys are the attribute names and the values are the actual values that is associated with that respective attribute.<br /># In this short tutorial we won't be utilizing the __dict__ of the burrito objects, but they can be utilized for many different things.<br />&nbsp;&nbsp;&nbsp; Burrito1 = Burrito(6, \"Flour\", [\"Beans\", \"Cheese\"])<br />&nbsp;&nbsp;&nbsp; print(Burrito1.characteristics())<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print(\"Now, let us create a second burrito to see the effect of operator overloading.\")<br />&nbsp;&nbsp;&nbsp; Burrito2 = Burrito(12, \"Flour\", [\"Beans\", \"Cheese\", \"Chicken\", \"Vegetables\"])<br />&nbsp;&nbsp;&nbsp; print(Burrito2.characteristics())<br />&nbsp;&nbsp;&nbsp; print(\"Finally, let us create a third burrito that is wrapped with a corn tortilla instead of a flour one.\")<br />&nbsp;&nbsp;&nbsp; Burrito3 = Burrito(12, \"Corn\", [\"Chicken\", \"Vegetables\"])<br />&nbsp;&nbsp;&nbsp; print(Burrito3.characteristics())<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print(\"===Testing the == operator===\")<br />&nbsp;&nbsp;&nbsp; print(\"Is the first burrito(Burrito1) wrapped with the same tortilla as the second burrito?(Burrito2)?\", Burrito1 == Burrito2)<br />&nbsp;&nbsp;&nbsp; print(\"Is the first burrito(Burrito1) wrapped with the same tortilla as the third burrito?(Burrito3)?\", Burrito2 == Burrito3)<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print(\"===Testing the &lt; operator===\")<br />&nbsp;&nbsp;&nbsp; print(\"Is the size of the first burrito (Burrito1) smaller than the second burrito (Burrito2)?\", Burrito1 &lt; Burrito2)<br />&nbsp;&nbsp;&nbsp; print(\"Is the size of the second burrito (Burrito2) greater than the third burrito (Burrito3)?\", Burrito1 &gt; Burrito2)<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print(\"===Testing the 'in' operator===\")<br />&nbsp;&nbsp;&nbsp; print(\"Are beans in the first burrito (Burrito1)?\", \"Beans\" in Burrito1)<br />&nbsp;&nbsp;&nbsp; print(\"Are beans in the second burrito (Burrito2)?\", \"Beans\" in Burrito2)<br />&nbsp;&nbsp;&nbsp; print(\"Are vegetables in the first burrito (Burrito1)?\", \"Vegetables\" in Burrito1)<br />&nbsp;&nbsp;&nbsp; print(\"Are vegetables in the second burrito (Burrito2)?\", \"Vegetables\" in Burrito2)<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print(\"===Testing the + operator===\")<br />&nbsp;&nbsp;&nbsp; print(\"To recap, these are the characteristics for the first burrito (Burrito1) before adding any ingredients.\")<br />&nbsp;&nbsp;&nbsp; print(Burrito1.characteristics())<br />&nbsp;&nbsp;&nbsp; print(\"Now, let us add some more ingredients!\")<br />&nbsp;&nbsp;&nbsp; Burrito1 + \"Pico de Gallo\"<br />&nbsp;&nbsp;&nbsp; \"Steak\" + Burrito1<br />&nbsp;&nbsp;&nbsp; print(\"......\")<br />&nbsp;&nbsp;&nbsp; print(\"Now, here are the final characteristics for the first burrito (Burrito1)!\")<br />&nbsp;&nbsp;&nbsp; print(Burrito1.characteristics())<br />&nbsp;&nbsp;&nbsp; print(\"Notice, there are more ingredients in this burrito now!\")<br />&nbsp;&nbsp;&nbsp; print(\"\\n\")<br />&nbsp;&nbsp;&nbsp; print(\"This is the end of this simple tutorial on classes and operator overloading. Thanks for reading!\")</p> \n\t\n</div>\n\r\n\r\n                                                </div><!-- end main -->\r\n\r\n                                        </div><!-- end wrapper -->\r\n\r\n                                \r\n                        \r\n                                <div class=\"wrap\"></div>\r\n\r\n                                </div> <!-- end contentarea -->\r\n\r\n                        </div><!-- back -->\r\n\r\n                </div><!-- all -->\r\n\r\n                <div id=\"footer-outer\">\r\n                        \r\n                        <div id=\"footer-sub\">\r\n\r\n\r\n                                <div id=\"footer\">\r\n\r\n                                        \r\n                                        \r\n\r\n                                </div><!-- end footer -->\r\n\r\n                        </div>\r\n\r\n                </div>\r\n        \r\n        </body>\r\n</html>\r\n", "encoding": "ascii"}