{"url": "http://tutors.ics.uci.edu/index.php/tutor-resources/81-cpp-resources/122-cpp-ref-pointer-operators", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-gb\" lang=\"en-gb\" dir=\"ltr\" >\r\n<head>\r\n  <base href=\"http://tutors.ics.uci.edu/index.php/tutor-resources/81-cpp-resources/122-cpp-ref-pointer-operators\" />\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"author\" content=\"Super User\" />\n  <meta name=\"generator\" content=\"Joomla! - Open Source Content Management\" />\n  <title>C++ &amp; and * Operators</title>\n  <link href=\"/templates/beez_20/favicon.ico\" rel=\"shortcut icon\" type=\"image/vnd.microsoft.icon\" />\n  <link rel=\"stylesheet\" href=\"/templates/system/css/system.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/position.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/layout.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/print.css\" type=\"text/css\" media=\"print\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/general.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/personal.css\" type=\"text/css\" />\n  <script src=\"/media/system/js/mootools-core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/caption.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/mootools-more.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/md_stylechanger.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/hide.js\" type=\"text/javascript\"></script>\n  <script type=\"text/javascript\">\nwindow.addEvent('load', function() {\n\t\t\t\tnew JCaption('img.caption');\n\t\t\t});\n  </script>\n\r\n\r\n<!--[if lte IE 6]>\r\n<link href=\"/templates/beez_20/css/ieonly.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<style type=\"text/css\">\r\n#line {\r\n  width:98% ;\r\n}\r\n.logoheader {\r\n  height:200px;\r\n}\r\n#header ul.menu {\r\n  display:block !important;\r\n  width:98.2% ;\r\n}\r\n</style>\r\n<![endif]-->\r\n\r\n<!--[if IE 7]>\r\n<link href=\"/templates/beez_20/css/ie7only.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<![endif]-->\r\n<!--<script type=\"text/javascript\">\r\n  var big ='72%';\r\n  var small='53%';\r\n  var altopen='is open';\r\n  var altclose='is closed';\r\n  var bildauf='/templates/beez_20/images/plus.png';\r\n  var bildzu='/templates/beez_20/images/minus.png';\r\n  var rightopen='Open info';\r\n  var rightclose='Close info';\r\n  var fontSizeTitle='Font size';\r\n  var bigger='Bigger';\r\n  var reset='Reset';\r\n  var smaller='Smaller';\r\n  var biggerTitle='Increase size';\r\n  var resetTitle='Revert styles to default';\r\n  var smallerTitle='Decrease size';\r\n</script>-->\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div id=\"all\">\r\n        <div id=\"back\">\r\n                <div id=\"header\">\r\n                                <div class=\"logoheader\">\r\n                                        <h1 id=\"logo\">\r\n\r\n                                                                                                                                                                                                        <span class=\"header1\">\r\n                                                                                </span></h1>\r\n                                </div><!-- end logoheader -->\r\n                                        <ul class=\"skiplinks\">\r\n                                                <li><a href=\"#main\" class=\"u2\">Skip to content</a></li>\r\n                                                <li><a href=\"#nav\" class=\"u2\">Jump to main navigation and login</a></li>\r\n                                                                                    </ul>\r\n                                        <!--<h2 class=\"unseen\">Nav view search</h2>-->\r\n                                        <h3 class=\"unseen\">Navigation</h3>\r\n                                        \n<ul class=\"menu\">\n<li class=\"item-464\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470 current active\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n\r\n                                        <div id=\"line\">\r\n                                        <!-- <div id=\"fontsize\"></div> -->\r\n                                        <!--<h3 class=\"unseen\">Search</h3> -->\r\n                                        \r\n                                        </div> <!-- end line -->\r\n\r\n\r\n                        </div><!-- end header -->\r\n                        <div id=\"contentarea\">\r\n                                        <div id=\"breadcrumbs\">\r\n\r\n                                                        \r\n\r\n                                        </div>\r\n\r\n                                        \r\n\r\n                                                        <div class=\"left1 leftbigger\" id=\"nav\">\r\n                                                   <div class=\"moduletable_menu\">\n <h3><span\n\tclass=\"backh\"><span class=\"backh2\"><span class=\"backh3\">This Site</span></span></span></h3>\n \n<ul class=\"menu\">\n<li class=\"item-464\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470 current active\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n</div>\n\r\n                                                                \r\n                                                                \r\n\r\n\r\n                                                        </div><!-- end navi -->\r\n               \r\n                                        <div id=\"wrapper2\" >\r\n\r\n                                                <div id=\"main\">\r\n\r\n                                                \r\n                                                        \n<div id=\"system-message-container\">\n</div>\r\n                                                        <div class=\"item-page\">\n\n\t<h2>\n\t\t\t<a href=\"/index.php/tutor-resources/81-cpp-resources/122-cpp-ref-pointer-operators\">\n\t\tC++ &amp; and * Operators</a>\n\t\t</h2>\n\n\n\n\n\n\n\n\n<p><strong>By Matt Butrovich (edits by Tej Vuligonda and Jason Kreinberg)</strong></p>\r\n<p style=\"text-align: justify;\"><span style=\"font-family: 'Courier New';\">// ref_pointer_operators<br /> // Clarifying &amp; and * operators<br /><br /> <br /> // C++ loves to reuse keywords and operators, so it's no surprise that students<br /> // can become confused by * and &amp; showing up everywhere in code with different<br /> // results. Let's see if we can clear that up a bit...<br /> <br /> #include &lt;iostream&gt;<br /> <br /> int main()<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>int a {4};<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// a is an integer.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>a = 7;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// a can be assigned values that are integral<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ----- The &amp; Operator -----<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>int&amp; ra = a;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// When &amp; is placed in front of a name during a variable declaration, that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// means that a \"reference to\" is being declared. ra's declarations reads<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// that ra is a reference to an integer. As such, it can only be assigned an<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// l-value, in this case a. For example...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// int&amp; rb = 9;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...doesn't work. 9 is an r-value and can't have a reference to it, at<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// least not with this syntax. It's also worth noting that references must<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// be initialized at declaration. For example...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// int&amp; rc;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...doesn't work. &amp;rc needs to be initialized.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// The most frequent use of reference declarations is in the parameter list<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// of a function. Declaring a parameter as a reference allows a function to<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// modify the original argument, rather than being passed a local copy that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// is restricted to the scope of the function.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// One final comment about reference initialization: Once a reference is<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// initialized, it is a reference that is constant. Note that this does not<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// mean that the data it refers to is constant, only that where it refers<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// cannot be changed. For example, you might think that this code...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>int b {5};<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...which creates a new integer variable with a value<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>ra = b;<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// of 5, and then assigns b to ra, would result in ra<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>b = 6;<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// referencing b instead of a.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// Instead, what happened is that a got assigned the value of b, because ra<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// is forever a reference to a. b is then changed to 6, and we can try<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// printing a, b, and ra...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>std::cout &lt;&lt; a &lt;&lt; b &lt;&lt; ra &lt;&lt; std::endl;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ... which results in 565, or numbers that correspond to the variable aba<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// respectively.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>&amp;a;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// putting &amp; in front of a variable name denotes \"address of\" in C++. The<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// result of this expression is an r-value address of a. That doesn't seem<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// terribly interesting until we get to the next operator...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ----- The * Operator -----<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>int* pa;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// When * is placed in front of a name during a variable declaration, that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// means that a \"pointer to\" is being declared. pa's declaration reads that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// pa is a pointer to an integer. As such, it can only be assigned a memory<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// address to point to. For example...<br /> <br /> /* Visually this can be represented as pa -&gt; (an integer)<br /> * This integer value needs to be initialized<br /> */<br /> <br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>pa = &amp;a;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// If we use the &amp; operator to get the address of a, we can assign that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// value into pa to make it a pointer to a;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span><br /> /* Visually this can be represented as pa -&gt; (address of a)*/<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>*pa;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// Putting * in front of a variable name denotes \"dereference\" in C++. The<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// result of this expression is an l-value corresponding to the data pointed<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// to by pa. Currently that value is 5, so if we want to print a by using<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// the pointer pa, the syntax is...<br /> <br /> /* Visually this can be represented as pa -&gt; (a = 5)<br /> * Deferencing pa gives us the value of a or a = 5. <br /> */ <br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>std::cout &lt;&lt; *pa &lt;&lt; std::endl;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// If we didn't put the dereference operator, we would instead be printing<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// the raw memory value that pa represents.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span><br /> /*This raw memory value is usually not very useful for high-level programming*/<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>pa = new int {9};<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// Perhaps the most common use of a raw/dumb pointer is when using dynamic<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// memory allocation to put objects on the heap. Using pointers to stack<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// allocated items can be risky because you don't really have ownership of<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// that memory, and as such don't have as much control over object lifetime.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// You can easily end up with dangling pointers (pointer to memory that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// isn't what you think it is anymore) that can crash your program, or at<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// best produce unexpected results. In this case though, we've allocated a<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// new int on the heap with the value of 9, and pa now points to it. Any<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// time the new keyword is used, a memory address is returned, so a pointer<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// is the correct type to use to store that information. You might have<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// noticed that we reused pa without issue. Unlike references, pointers are<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// not constant unless explicitly declared as such. They can be reassigned<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// to other memory addresses at any time.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>*pa = 2;<br /> <br /> /*Visually, this can be represented as:<br /> * pa -&gt; (a=5) x <br /> * pa -&gt; (2) <br /> */<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// If we want to change the value that pa points to, we first dereference<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// it, and then assign into it.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>delete pa;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// We don't want to leak memory, so we delete the object pointed to by pa.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>return 0;<br /> }<br /> <br /> // Summary:<br /> <br /> //<span>&nbsp;&nbsp;&nbsp; </span>&amp; when used with a variable declaration: \"reference to\"<br /> //<span>&nbsp;&nbsp;&nbsp; </span>Example: int &amp;ra = a;<br /> //<span>&nbsp;&nbsp;&nbsp; </span>\"ra is a reference to a\"<br /> <br /> //<span>&nbsp;&nbsp;&nbsp; </span>* when used with a variable declaration: \"pointer to\"<br /> //<span>&nbsp;&nbsp;&nbsp; </span>Example: int *pa;<br /> //<span>&nbsp;&nbsp;&nbsp; </span>\"pa is a pointer to an integer\"<br /> <br /> //<span>&nbsp;&nbsp;&nbsp; </span>&amp; when used with an already declared variable: \"address of\"<br /> //<span>&nbsp;&nbsp;&nbsp; </span>Example: &amp;a;<br /> //<span>&nbsp;&nbsp;&nbsp; </span>\"address of a\"<br /> <br /> //<span>&nbsp;&nbsp;&nbsp; </span>* when used with an already declared pointer: \"dereference\"<br /> //<span>&nbsp;&nbsp;&nbsp; </span>Example: std::cout &lt;&lt; *pa &lt;&lt; std::endl;<br /> //<span>&nbsp;&nbsp;&nbsp; </span>\"print the underlying value of a\"<br /> &nbsp;</span></p> \n\t\n</div>\n\r\n\r\n                                                </div><!-- end main -->\r\n\r\n                                        </div><!-- end wrapper -->\r\n\r\n                                \r\n                        \r\n                                <div class=\"wrap\"></div>\r\n\r\n                                </div> <!-- end contentarea -->\r\n\r\n                        </div><!-- back -->\r\n\r\n                </div><!-- all -->\r\n\r\n                <div id=\"footer-outer\">\r\n                        \r\n                        <div id=\"footer-sub\">\r\n\r\n\r\n                                <div id=\"footer\">\r\n\r\n                                        \r\n                                        \r\n\r\n                                </div><!-- end footer -->\r\n\r\n                        </div>\r\n\r\n                </div>\r\n        \r\n        </body>\r\n</html>\r\n", "encoding": "ascii"}