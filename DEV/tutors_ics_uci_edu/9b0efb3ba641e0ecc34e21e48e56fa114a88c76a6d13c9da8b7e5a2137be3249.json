{"url": "http://tutors.ics.uci.edu/index.php/0-python-resources/87-comprehensions", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-gb\" lang=\"en-gb\" dir=\"ltr\" >\r\n<head>\r\n  <base href=\"http://tutors.ics.uci.edu/index.php/0-python-resources/87-comprehensions\" />\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"author\" content=\"Super User\" />\n  <meta name=\"generator\" content=\"Joomla! - Open Source Content Management\" />\n  <title>Comprehensions</title>\n  <link href=\"/templates/beez_20/favicon.ico\" rel=\"shortcut icon\" type=\"image/vnd.microsoft.icon\" />\n  <link rel=\"stylesheet\" href=\"/templates/system/css/system.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/position.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/layout.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/print.css\" type=\"text/css\" media=\"print\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/general.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/personal.css\" type=\"text/css\" />\n  <script src=\"/media/system/js/mootools-core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/caption.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/mootools-more.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/md_stylechanger.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/hide.js\" type=\"text/javascript\"></script>\n  <script type=\"text/javascript\">\nwindow.addEvent('load', function() {\n\t\t\t\tnew JCaption('img.caption');\n\t\t\t});\n  </script>\n\r\n\r\n<!--[if lte IE 6]>\r\n<link href=\"/templates/beez_20/css/ieonly.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<style type=\"text/css\">\r\n#line {\r\n  width:98% ;\r\n}\r\n.logoheader {\r\n  height:200px;\r\n}\r\n#header ul.menu {\r\n  display:block !important;\r\n  width:98.2% ;\r\n}\r\n</style>\r\n<![endif]-->\r\n\r\n<!--[if IE 7]>\r\n<link href=\"/templates/beez_20/css/ie7only.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<![endif]-->\r\n<!--<script type=\"text/javascript\">\r\n  var big ='72%';\r\n  var small='53%';\r\n  var altopen='is open';\r\n  var altclose='is closed';\r\n  var bildauf='/templates/beez_20/images/plus.png';\r\n  var bildzu='/templates/beez_20/images/minus.png';\r\n  var rightopen='Open info';\r\n  var rightclose='Close info';\r\n  var fontSizeTitle='Font size';\r\n  var bigger='Bigger';\r\n  var reset='Reset';\r\n  var smaller='Smaller';\r\n  var biggerTitle='Increase size';\r\n  var resetTitle='Revert styles to default';\r\n  var smallerTitle='Decrease size';\r\n</script>-->\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div id=\"all\">\r\n        <div id=\"back\">\r\n                <div id=\"header\">\r\n                                <div class=\"logoheader\">\r\n                                        <h1 id=\"logo\">\r\n\r\n                                                                                                                                                                                                        <span class=\"header1\">\r\n                                                                                </span></h1>\r\n                                </div><!-- end logoheader -->\r\n                                        <ul class=\"skiplinks\">\r\n                                                <li><a href=\"#main\" class=\"u2\">Skip to content</a></li>\r\n                                                <li><a href=\"#nav\" class=\"u2\">Jump to main navigation and login</a></li>\r\n                                                                                    </ul>\r\n                                        <!--<h2 class=\"unseen\">Nav view search</h2>-->\r\n                                        <h3 class=\"unseen\">Navigation</h3>\r\n                                        \n<ul class=\"menu\">\n<li class=\"item-464 active\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n\r\n                                        <div id=\"line\">\r\n                                        <!-- <div id=\"fontsize\"></div> -->\r\n                                        <!--<h3 class=\"unseen\">Search</h3> -->\r\n                                        \r\n                                        </div> <!-- end line -->\r\n\r\n\r\n                        </div><!-- end header -->\r\n                        <div id=\"contentarea\">\r\n                                        <div id=\"breadcrumbs\">\r\n\r\n                                                        \r\n\r\n                                        </div>\r\n\r\n                                        \r\n\r\n                                                        <div class=\"left1 leftbigger\" id=\"nav\">\r\n                                                   <div class=\"moduletable_menu\">\n <h3><span\n\tclass=\"backh\"><span class=\"backh2\"><span class=\"backh3\">This Site</span></span></span></h3>\n \n<ul class=\"menu\">\n<li class=\"item-464 active\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n</div>\n\r\n                                                                \r\n                                                                \r\n\r\n\r\n                                                        </div><!-- end navi -->\r\n               \r\n                                        <div id=\"wrapper2\" >\r\n\r\n                                                <div id=\"main\">\r\n\r\n                                                \r\n                                                        \n<div id=\"system-message-container\">\n</div>\r\n                                                        <div class=\"item-page\">\n\n\t<h2>\n\t\t\t<a href=\"/index.php/79-python-resources/87-comprehensions\">\n\t\tComprehensions</a>\n\t\t</h2>\n\n\n\n\n\n\n\n\n<p><strong>By: Bryce Tham (Edits by Raelene Gonzales and Minjae Wee)</strong></p>\r\n<p>Comprehensions may seem difficult at first, but I'm here to simplify them! <br />Traditional creation of lists, tuples, sets, and dicts are perfectly fine for the programs that you are writing now.</p>\r\n<p>But as your projects increase in complexity, comprehensions can save a lot of time and brain power.</p>\r\n<p>Why use comprehensions?</p>\r\n<p>* Trivial multiple-line code ---&gt; ONE LINE. <br />* Less clutter means better code.</p>\r\n<p>------------------------------------------------------------------------------</p>\r\n<p><strong>List Comprehensions</strong></p>\r\n<p>Let us first begin by discussing the simplest form of comprehensions: list comprehensions.</p>\r\n<p>COMMON USES: <br />1. Create new lists from existing ones (our focus).<br />2. Create new lists from iterables such as generators, strings, ranges, etc.</p>\r\n<p>TYPICAL FORMAT:<br />new_list = [f(i) for i in old_list]</p>\r\n<p>This essentially accomplishes the same thing as the code below:</p>\r\n<p>new_list = []<br />for i in old_list:<br />&nbsp; &nbsp; new_list.append(f(i))</p>\r\n<p>PYTHON'S PROCESS:<br />1. Goes through each item (i) in old_list.<br />2. Runs operation (f) on each item (i).<br />3. Appends f(i) to new_list</p>\r\n<p>Keep in mind... f can be any function as long as it returns a value of any type. <br />EX #1:</p>\r\n<p>old_list = [1, 2, 3, 4, 5]<br />new_list = [i+1 for i in old_list]</p>\r\n<p>The resulting new_list would be [2, 3, 4, 5, 6], because for each item i in list, Python runs the operation i+1 and appends i+1 to newlist.</p>\r\n<p>So, we've got list comprehensions down already! Can you guess what comprehensions below print out? <br />(hint: the same logic from EX #1 applies to comprehensions with iterables. Copy and paste into the console for the solution)</p>\r\n<p>print([i for i in range(10)]) <br />print(['b'+c for c in 'aeiou'])</p>\r\n<p>------------------------------------------------------------------------------</p>\r\n<p><strong>Adding Conditional Statements to Comprehensions</strong></p>\r\n<p>Optionally, we can add a conditional statement (i.e. a Bool) to the end of a comprehension if we want the comprehension to only include certain values.</p>\r\n<p>If old_list = [1, 2, 3, 4, 5], how would we create a new_list that consists of only even numbers?</p>\r\n<p>EX #2 (compare for-loop and comprehension):</p>\r\n<p>NORMAL FOR LOOP:<br />new_list = []<br />for i in old_list:<br />&nbsp; &nbsp; if i%2 == 0: # checks if i is even<br />&nbsp; &nbsp; &nbsp; &nbsp; new_list.append[i]</p>\r\n<p>ALTERNATIVELY:<br />new_list = [i for i in old_list if i%2 == 0]</p>\r\n<p>Notice the \"if statement\" at the end of this comprehension. <br />Here, Python goes through every item in the old_list, and if i%d == 1 is true, i is appended to new_list. <br />We use this to write even more complex comprehensions like the ones below:</p>\r\n<p>print([i**2 for i in new_list if i%2 == 1])<br />print([i for i in 'abcde' if i in 'aeiou'])</p>\r\n<p>Can you guess what the comprehensions above produce?</p>\r\n<p>------------------------------------------------------------------------------</p>\r\n<p><strong>Nested Comprehensions (Advanced)</strong></p>\r\n<p>Once you have mastered all the concepts mentioned above, it is time to take comprehensions one step further.</p>\r\n<p>A two-dimensional (2D) list is a list of lists. We can use comprehensions to simplify the following block of code from this...</p>\r\n<p>EX #3:</p>\r\n<p>NORMAL FOR LOOP:<br />old_list = [[1, 2, 3], [6, 5, 4], [7, 8, 9, 0]]<br />new_list = []<br />for sub_list in old_list:<br />&nbsp; &nbsp; for i in sub_list:<br />&nbsp; &nbsp; &nbsp; &nbsp; new_list.append(i)</p>\r\n<p>ALTERNATIVELY:<br />old_list = [[1, 2, 3], [6, 5, 4], [7, 8, 9, 0]]<br />new_list = [i for sub_list in old_list for i in sub_list]</p>\r\n<p>PYTHON'S PROCESS:<br />1. Iterate through each sub_list in old_list. <br />2. Iterate through each item (i) in each sub_list.<br />3. Appends each item (i) to new_list.</p>\r\n<p><br />EX #4 (Boolean Condition):</p>\r\n<p>list_of_names = [['Bob', 'Jeffrey', 'Ruth'], ['Brian', 'Mike', 'Jessica'], ['Andrew', 'Mary']]<br />starts_with_a = [i for group in list_of_names for i in group if i.startswith('B')]</p>\r\n<p>At this point, comprehensions may begin to look quite messy, so you may opt to break it into smaller pieces for better readability. The last line of the code above can be rewritten like this:</p>\r\n<p>starts_with_a = []<br />for group in list_of_names:<br />&nbsp; &nbsp; starts_with_a.extend([i for i in group if i.startswith('A')])</p>\r\n<p>It is up to you to determine whether you want to utilize more complex forms of comprehension or break them into pieces. <br />Obviously, it is always nice to save a few lines of code, but keep in mind that readability of your code is just as important.</p>\r\n<p>Here is a challenge: create a comprehension for three-dimensional list, resulting in a single list with every item (i) of the 3 sub-lists.</p>\r\n<p>------------------------------------------------------------------------------</p>\r\n<p><strong>Set Comprehensions</strong></p>\r\n<p>Set comprehensions follow the same format as ordered [list] comprehensions except that {sets} are unordered.<br />All of the rules above, including adding conditionals and nesting comprehension, apply to sets as well. <br />Another challenge: reproduce some of the exercises above with set comprehensions.</p>\r\n<p>------------------------------------------------------------------------------</p>\r\n<p><strong>Dict Comprehensions</strong></p>\r\n<p>Dictionary comprehensions may look scary, but they are simple once you understand the notation. <br />They are similar to list and set comprehension, but with one difference:<br /> *You must keep track of both the dict's keys and values. <br />EX #5:<br />old_dict = {1: 100, 2: 200, 3: 300}<br />new_dict = {key*2: value for key, value in dict.items()}</p>\r\n<p>PYTHON'S PROCESS:<br />1. Iterate through each (key: value) pair of the old_dict, multiplying (key) by (2).<br />2. Appends each (key: value) pair to new_dict.</p>\r\n<p>Thus, the resulting newdict1 would be {2: 100, 4: 200, 6: 300}.</p>\r\n<p>Likewise, we can also iterate over and change dictionary's values, iterate over and change both its keys and values, and add conditional statements just as we did with lists and sets:</p>\r\n<p>Can you guess what print(newdict1), print(newdict2), and print(newdict3) produce?</p>\r\n<p>newdict2 = {k: v*2 for k, v in old_dict.items()}<br />newdict3 = {k*2: v*2 for k, v in old_dict.items()}<br />newdict4 = {k: v for k, v in old_dict.items() if k*v &lt; 500}</p>\r\n<p>------------------------------------------------------------------------------</p>\r\n<p><strong>Tuple Comprehensions (Advanced)</strong></p>\r\n<p>Tuple comprehensions are unusual in that they do not produce tuples, but rather generators (a type of iterator).</p>\r\n<p>EX #6:<br />old_tuple = (1, 2, 3)<br />new_generator = (i for i in t)</p>\r\n<p>Try calling the below statements in the Python console:<br />print(new_generator)<br />for i in new_generator:<br />&nbsp; &nbsp; print(i)</p>\r\n<p>Notice: -Printing \"new_generator\" prints something like \"&lt;generator object at 0x8158db8&gt;\".<br /> -Looping through the new_generator prints each item once.</p>\r\n<p>To actually create a tuple out of tuple comprehension, call a tuple explicitly on the comprehension:</p>\r\n<p>SPECIAL FORMAT:<br />newtuple = tuple(i for i in t)</p>\r\n<p>------------------------------------------------------------------------------</p>\r\n<p><strong>Putting It All Together</strong></p>\r\n<p>By now, you have learned how to read and use list, set, and dict comprehensions in basic forms. <br />Let's consider different and interesting ways! <br />We will be using the variables below throughout this section:</p>\r\n<p>old_list = [1, 2, 3, 4]<br />old_set = {'a', 'e', 'i', 'o', 'u'}<br />old_dict = {'X': 10, 'Y': 20, 'Z': 25}</p>\r\n<p>We can, for example, print a list of the items in old_set:<br />print([i for i in old_set])</p>\r\n<p>We can also print a list of keys in old_dict:<br />print([k for k in old_dict.keys()])</p>\r\n<p>We can also combine the values in old_dict and with the values in old_list. <br />Can you guess what the comprehension below produce?</p>\r\n<p>print([i*v for i in old_list for v in old_dict.values()])</p>\r\n<p>What about these comprehensions?</p>\r\n<p>print({n for n in old_list})<br />print([k+i for k in old_dict.keys() for i in old_set])<br />print([i*n for i in old_set for n in old_list])<br />print([i*n for n in old_list for i in old_set])<br />print([i for i in old_list if i%2 == 0 else 'X'])</p>\r\n<p>Understanding comprehensions takes a lot of practice and experimentation, so don't worry if the examples above seem tough!<br />The bottom line: comprehensions can be very handy if used properly, helping you save both time and space in your program. As a result, you will have shorter, cleaner, and more precise code.</p> \n\t\n</div>\n\r\n\r\n                                                </div><!-- end main -->\r\n\r\n                                        </div><!-- end wrapper -->\r\n\r\n                                \r\n                        \r\n                                <div class=\"wrap\"></div>\r\n\r\n                                </div> <!-- end contentarea -->\r\n\r\n                        </div><!-- back -->\r\n\r\n                </div><!-- all -->\r\n\r\n                <div id=\"footer-outer\">\r\n                        \r\n                        <div id=\"footer-sub\">\r\n\r\n\r\n                                <div id=\"footer\">\r\n\r\n                                        \r\n                                        \r\n\r\n                                </div><!-- end footer -->\r\n\r\n                        </div>\r\n\r\n                </div>\r\n        \r\n        </body>\r\n</html>\r\n", "encoding": "ascii"}