{"url": "http://tutors.ics.uci.edu/index.php/tutor-resources/82-assembly-resources/111-assembly-syntax-register", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-gb\" lang=\"en-gb\" dir=\"ltr\" >\r\n<head>\r\n  <base href=\"http://tutors.ics.uci.edu/index.php/tutor-resources/82-assembly-resources/111-assembly-syntax-register\" />\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"author\" content=\"Super User\" />\n  <meta name=\"generator\" content=\"Joomla! - Open Source Content Management\" />\n  <title>Assembly Syntax and Register Use</title>\n  <link href=\"/templates/beez_20/favicon.ico\" rel=\"shortcut icon\" type=\"image/vnd.microsoft.icon\" />\n  <link rel=\"stylesheet\" href=\"/templates/system/css/system.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/position.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/layout.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/print.css\" type=\"text/css\" media=\"print\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/general.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/personal.css\" type=\"text/css\" />\n  <script src=\"/media/system/js/mootools-core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/caption.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/mootools-more.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/md_stylechanger.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/hide.js\" type=\"text/javascript\"></script>\n  <script type=\"text/javascript\">\nwindow.addEvent('load', function() {\n\t\t\t\tnew JCaption('img.caption');\n\t\t\t});\n  </script>\n\r\n\r\n<!--[if lte IE 6]>\r\n<link href=\"/templates/beez_20/css/ieonly.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<style type=\"text/css\">\r\n#line {\r\n  width:98% ;\r\n}\r\n.logoheader {\r\n  height:200px;\r\n}\r\n#header ul.menu {\r\n  display:block !important;\r\n  width:98.2% ;\r\n}\r\n</style>\r\n<![endif]-->\r\n\r\n<!--[if IE 7]>\r\n<link href=\"/templates/beez_20/css/ie7only.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<![endif]-->\r\n<!--<script type=\"text/javascript\">\r\n  var big ='72%';\r\n  var small='53%';\r\n  var altopen='is open';\r\n  var altclose='is closed';\r\n  var bildauf='/templates/beez_20/images/plus.png';\r\n  var bildzu='/templates/beez_20/images/minus.png';\r\n  var rightopen='Open info';\r\n  var rightclose='Close info';\r\n  var fontSizeTitle='Font size';\r\n  var bigger='Bigger';\r\n  var reset='Reset';\r\n  var smaller='Smaller';\r\n  var biggerTitle='Increase size';\r\n  var resetTitle='Revert styles to default';\r\n  var smallerTitle='Decrease size';\r\n</script>-->\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div id=\"all\">\r\n        <div id=\"back\">\r\n                <div id=\"header\">\r\n                                <div class=\"logoheader\">\r\n                                        <h1 id=\"logo\">\r\n\r\n                                                                                                                                                                                                        <span class=\"header1\">\r\n                                                                                </span></h1>\r\n                                </div><!-- end logoheader -->\r\n                                        <ul class=\"skiplinks\">\r\n                                                <li><a href=\"#main\" class=\"u2\">Skip to content</a></li>\r\n                                                <li><a href=\"#nav\" class=\"u2\">Jump to main navigation and login</a></li>\r\n                                                                                    </ul>\r\n                                        <!--<h2 class=\"unseen\">Nav view search</h2>-->\r\n                                        <h3 class=\"unseen\">Navigation</h3>\r\n                                        \n<ul class=\"menu\">\n<li class=\"item-464\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470 current active\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n\r\n                                        <div id=\"line\">\r\n                                        <!-- <div id=\"fontsize\"></div> -->\r\n                                        <!--<h3 class=\"unseen\">Search</h3> -->\r\n                                        \r\n                                        </div> <!-- end line -->\r\n\r\n\r\n                        </div><!-- end header -->\r\n                        <div id=\"contentarea\">\r\n                                        <div id=\"breadcrumbs\">\r\n\r\n                                                        \r\n\r\n                                        </div>\r\n\r\n                                        \r\n\r\n                                                        <div class=\"left1 leftbigger\" id=\"nav\">\r\n                                                   <div class=\"moduletable_menu\">\n <h3><span\n\tclass=\"backh\"><span class=\"backh2\"><span class=\"backh3\">This Site</span></span></span></h3>\n \n<ul class=\"menu\">\n<li class=\"item-464\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470 current active\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n</div>\n\r\n                                                                \r\n                                                                \r\n\r\n\r\n                                                        </div><!-- end navi -->\r\n               \r\n                                        <div id=\"wrapper2\" >\r\n\r\n                                                <div id=\"main\">\r\n\r\n                                                \r\n                                                        \n<div id=\"system-message-container\">\n</div>\r\n                                                        <div class=\"item-page\">\n\n\t<h2>\n\t\t\t<a href=\"/index.php/tutor-resources/82-assembly-resources/111-assembly-syntax-register\">\n\t\tAssembly Syntax and Register Use</a>\n\t\t</h2>\n\n\n\n\n\n\n\n\n<p><strong>By Stephen Castro (edits by Matt Dees and Justin Mogannam)</strong></p>\r\n<p style=\"text-align: justify;\">ICS 51, Klefstad<br />These notes are intended for when the students first start doing inline assembly programming.<br />I specify Klefstad, because other instructors may teach different ways of writing assembly.<br />*********************************************************************************************</p>\r\n<p style=\"text-align: justify;\">Edits begin at Basic Assembly Arithmetic (x86)</p>\r\n<p style=\"text-align: justify;\">*********************************************************************************************</p>\r\n<p style=\"text-align: justify;\">GCC inline assembly syntax and register use.</p>\r\n<p style=\"text-align: justify;\">When writing inline GCC assembly, there is a specific syntax that it must be written in.</p>\r\n<p style=\"text-align: justify;\">Example 1 from Klefstad's lab 5 notes, the sytntax for extended assembly is as follows:</p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp; __asm__ __volatile__ ( assembler template &nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : output operands&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* optional */ <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : input operands&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* optional */ <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : list of clobbered registers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* optional */ <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ); <br />It is called \"extended\" assembly because we use the input and output operands and clobbered<br />register list. While it says that they are optional, for all of Klefstad's assembly assignments they are required.</p>\r\n<p style=\"text-align: justify;\">The section labeled \"assembler template\" is where all your assembly code goes. There is no <br />assembly code written after the colons. The colons indicate where the operands and clobbered registers list go as seen above.</p>\r\n<p style=\"text-align: justify;\">Example 2 from Klefstad's lab 5 notes:</p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp; int no = 100, val; <br />&nbsp;&nbsp; // val = no; <br />&nbsp;&nbsp; __asm__ __volatile__ (\u201cmov ebx, %1;\u201d <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \u201cmov %0, ebx;\u201d <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : \u201c=r\u201d ( val )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* output */ <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : \u201cr\u201d ( no )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* input */ <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : \u201cebx\u201d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* clobbered register */ <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</p>\r\n<p style=\"text-align: justify;\">Here, the only assembly code are the two lines with \"mov\". Every instruction must end in a <br />semicolon and must be enclosed in double quotes. After the first colon is where we specify <br />output operands. The register is enclosed in quotes, then the C variable we are using is<br />enclosed in parentheses. \"Output\" means we are reading from a variable and using it in our <br />assembly. Registers used for output operands must be preceded by a \"=\" or a \"+\".&nbsp; The <br />\"=\" means the variable we are using is write only and will disregard any value that might have <br />been in it previously. We can also put a \"+\" before a register as seen in the following example<br />from Klefstad's lab 5 notes:</p>\r\n<p style=\"text-align: justify;\">Example 3:</p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp; int counter; <br />&nbsp;&nbsp; // counter++; <br />&nbsp;&nbsp; __asm__ __volatile__ (\u201cadd %0, 1;\u201d <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :\u201c+r\u201d (counter) <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</p>\r\n<p style=\"text-align: justify;\">Here, only one colon is for output operands is specified because there is no need to specify<br />input operands or clobbered registers. The \"+\" means we are using a variable for reading and <br />writing. It also means that it will preserve whatever value the C variable contained. In this <br />example, it is crucial \"counter\" still keeps its value when used in assembly because it is<br />probably used in a loop. After the second colon is where we specify our input operands. <br />\"Input\" means we are reading from a variable in the C code and using whatever value that was stored in it. If a variable is specified as input, it cannot be used for writing.</p>\r\n<p style=\"text-align: justify;\">After the third colon is where we specify our clobbered registers. The general rule for this is <br />to clobber registers that are used in the assembly code but were not assigned a specific C <br />variable. In the second example above, \"ebx\" is clobbered because we use it in the assembly code<br />but it is not assigned a specific C variable. In later labs, when using the \"cmp\" command we <br />must clobber the comparison register \"cc\". Also in later labs when modifying memory in an array<br />using statements like \"dword ptr\" we must also clobber \"memory\".</p>\r\n<p style=\"text-align: justify;\">When specifying registers, the above examples have used \"r\" as a register. \"r\" just means to use<br />any general purpose register. In the assembly code we see \"%0\" and \"%1\". \"%0\" refers to the <br />first general register, which in Example 2's case is \"val\". \"%1\" refers to the second general<br />register which in Example 2 is \"no\". %0 will always refer to the first register that is a general <br />register no matter where(input or output) it was stated first. %1 will refer to the second if there<br />is a second general register assigned to a C variable and %2 will refer to the third and so on.</p>\r\n<p style=\"text-align: justify;\">\"r\" is not the only register we can use, we can also use specific general purpose registers<br />such as eax. Consider the example below.</p>\r\n<p style=\"text-align: justify;\">Example 4:<br />&nbsp; int n = 1;</p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp; __asm__ __volatile__ (\u201cadd eax, 1;\u201d &nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : \u201c+a\u201d ( n )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* output */ <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* no input */ <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* no clobbered registers */ <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</p>\r\n<p style=\"text-align: justify;\">Here we use \"+a\" to refer to eax, and the \"+\" means were reading from the C variable and writing to it.<br />We add 1 to n by assigning it to the eax register, which is denoted by \"a\" in the output operands<br />section. If we wanted to use ebx, we would say \"b\", and for ecx, \"c\". Below is a list of general<br />purpose registers that are available for use. On the left is how you would reference it in the <br />assembly code, and on the right is how you would reference it in the output/input operands list.</p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp; &nbsp;eax | a<br />&nbsp;&nbsp; &nbsp;ebx | b<br />&nbsp;&nbsp; &nbsp;ecx | c<br />&nbsp;&nbsp; &nbsp;edx | d<br />&nbsp;&nbsp; &nbsp;esi | S<br />&nbsp;&nbsp; &nbsp;edi | D</p>\r\n<p style=\"text-align: justify;\">/--------------------------------\\<br />| Basic Assembly Arithmetic (x86)|<br />\\--------------------------------/</p>\r\n<p style=\"text-align: justify;\"><br />Now we are going to focus on fundamental arithmetic instructions in (x86) assembly and exactly what they do. We will start with addition and make our way to division.</p>\r\n<p style=\"text-align: justify;\"><br />/----------\\<br />| Addition |<br />\\----------/</p>\r\n<p style=\"text-align: justify;\"><br />// Adding by 1</p>\r\n<p style=\"text-align: justify;\">INC &lt;destination&gt;</p>\r\n<p style=\"text-align: justify;\">* Adds one to &lt;destination&gt; where &lt;destination&gt; is a register or a place in memory.</p>\r\n<p style=\"text-align: justify;\">Example:<br />___Registers Before___<br />|| eax = 0x00000001 ||</p>\r\n<p style=\"text-align: justify;\">\"inc eax;\"</p>\r\n<p style=\"text-align: justify;\">___Registers After____<br />|| eax = 0x00000002 ||</p>\r\n<p style=\"text-align: justify;\">// Adding by more than 1</p>\r\n<p style=\"text-align: justify;\">ADD &lt;destination&gt;, &lt;source&gt;</p>\r\n<p style=\"text-align: justify;\">* &lt;destination&gt; = &lt;destination&gt; + &lt;source&gt;</p>\r\n<p style=\"text-align: justify;\">Example:<br />___Registers Before___<br />|| eax = 0x00000001 ||<br />|| ebx = 0x00000005 ||<br />&nbsp;<br />\"add eax, ebx;\"</p>\r\n<p style=\"text-align: justify;\">___Registers After____<br />|| eax = 0x00000006 ||<br />|| ebx = 0x00000005 ||</p>\r\n<p style=\"text-align: justify;\"><br />/-------------\\<br />| Subtraction |<br />\\-------------/</p>\r\n<p style=\"text-align: justify;\">//Subtracting by 1</p>\r\n<p style=\"text-align: justify;\">DEC &lt;destination&gt;</p>\r\n<p style=\"text-align: justify;\">* Subtracts one from &lt;destination&gt; where &lt;destination&gt; is a register or place in memory.</p>\r\n<p style=\"text-align: justify;\">Example:</p>\r\n<p style=\"text-align: justify;\">___Registers Before___<br />|| eax = 0x00000002 ||</p>\r\n<p style=\"text-align: justify;\">\"dec eax;\"</p>\r\n<p style=\"text-align: justify;\">___Registers After____<br />|| eax = 0x00000001 ||</p>\r\n<p style=\"text-align: justify;\"><br />//Subtracting by more than 1</p>\r\n<p style=\"text-align: justify;\">SUB &lt;destination&gt;, &lt;source&gt;</p>\r\n<p style=\"text-align: justify;\">* Destination = destination - source</p>\r\n<p style=\"text-align: justify;\">Example:</p>\r\n<p style=\"text-align: justify;\">Example:<br />___Registers Before___<br />|| eax = 0x00000005 ||<br />|| ebx = 0x00000001 ||<br />&nbsp;<br />\"sub eax, ebx;\"</p>\r\n<p style=\"text-align: justify;\">___Registers After____<br />|| eax = 0x00000004 ||<br />|| ebx = 0x00000001 ||</p>\r\n<p style=\"text-align: justify;\"><br />/----------------\\<br />| Multiplication |<br />\\----------------/</p>\r\n<p style=\"text-align: justify;\"><br />NOTE: We have been using a 32-bit architecture so far, so we will only be covering multiplcation on a 32-bit architecture in this section.</p>\r\n<p style=\"text-align: justify;\">MUL &lt;operand&gt;</p>\r\n<p style=\"text-align: justify;\">* Where &lt;operand&gt; is a register or place in memory.</p>\r\n<p style=\"text-align: justify;\">This chart is useful to help visualize what is going on. One would expect the MUL instruction to take two operands like so: \"mul a, b\" where a * b is stored in a. However, this is NOT the case.<br />Instead, the MUL instructor multiplies whatever &lt;operand&gt; is provided by whatever is inside the register EAX, and stores the product in EDX:EAX. This may seem a little confusing at first so let's look at a few examples.</p>\r\n<p style=\"text-align: justify;\">&nbsp;-------------- ------------ ---------<br />| Multiplicand | Multiplier | Product |<br />|------------- | ------------- | ---------- |<br />| EAX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; | reg/mem32 | EDX:EAX |<br />|--------------|-------------- | ---------- |</p>\r\n<p style=\"text-align: justify;\">___Registers Before___<br />|| eax = 0x00000004 ||<br />|| ebx = 0x00000006 ||<br />|| edx = 0x12345678 ||</p>\r\n<p style=\"text-align: justify;\">\"mul ebx;\"</p>\r\n<p style=\"text-align: justify;\">___Registers After___<br />|| eax = 0x00000018 || * NOTE: 0x18 == 24 in decimal<br />|| ebx = 0x00000006 ||<br />|| edx = 0x00000000 || * NOTE: EDX got set to all 0's because the product was extended into EDX</p>\r\n<p style=\"text-align: justify;\">Because multiplying two 32-bit numbers can result in a 64-bit number, we need to use two registers to represent the product. Let's take a look at an example with bigger numbers.</p>\r\n<p style=\"text-align: justify;\"><br />___Registers Before___<br />|| eax = 0x0fffffff || In decimal: 268435455 <br />|| ebx = 0x02000000 || In decimal: 33554432<br />|| edx = 0x12345678 ||</p>\r\n<p style=\"text-align: justify;\">\"mul ebx;\"</p>\r\n<p style=\"text-align: justify;\">___Registers After___<br />|| eax = 0xfe000000 || * NOTE: 0x18 == 24 in decimal<br />|| ebx = 0x02000000 ||<br />|| edx = 0x001fffff || * NOTE: EDX got set to all 0's because the product was extended into EDX</p>\r\n<p style=\"text-align: justify;\"><br />In the example above our MUL instruction should do EDX:EAX = EBX * EAX. In decimal, the multiplcation would be <br />268435455 * 33554432 = 9007199221186560. However, 9007199221186560 is much too big for a 32-bit register to hold, so our EDX register is going to come in handy. The product of EBX and EAX is equal to 0x001ffffffe000000 (64 bits total) in hexadecimal. So we will need to divide this number in some way to fit it into our registers. The standard is to fit the higher 8 bits into EDX, and the lower order 8 bits into EAX.</p>\r\n<p style=\"text-align: justify;\"><br />&nbsp;-------------- ------------ ---------------------<br />| EDX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | EAX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; | EDX:EAX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; |<br />|------------- | -------------- | --------------------- |<br />| 0x001fffff&nbsp;&nbsp; | 0xfe000000 | 0x001ffffffe000000 |<br />|--------------|-------------- | --------------------- |</p>\r\n<p style=\"text-align: justify;\"><br />/----------------\\<br />|&nbsp;&nbsp;&nbsp; Division&nbsp;&nbsp;&nbsp; |<br />\\----------------/</p>\r\n<p style=\"text-align: justify;\">DIV &lt;operand&gt;</p>\r\n<p style=\"text-align: justify;\">* Where &lt;operand&gt; is a register or memory</p>\r\n<p style=\"text-align: justify;\">&nbsp;-------------- ------------ ---------&nbsp; ---------- <br />| Dividend&nbsp;&nbsp;&nbsp;&nbsp; | Divisor&nbsp;&nbsp; &nbsp; &nbsp; | Quotient | Remainder |<br />|------------- | -------------- | -------- | --------- |<br />| EDX:EAX&nbsp;&nbsp;&nbsp; | reg/mem32&nbsp; | EAX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | EDX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />|--------------|--------------- | -------- |---------- |</p>\r\n<p style=\"text-align: justify;\">The table above is helpful when understanding divison in assembly. Something important to remember is that EDX:EAX is getting divided by your &lt;operand&gt; NOT just eax. If you don't clear EDX (or set it to the value necessary to represent your divdend in 64-bits) your result may be different than expected. Let's look at an example.</p>\r\n<p style=\"text-align: justify;\">___Registers Before___<br />|| eax = 0x00000040 || In decimal: 64<br />|| ebx = 0x00000003 || <br />|| edx = 0x00000000 || // Make sure EDX is clear before division! If your dividend is not 64-bits you can simply use \"mov edx, 0;\"</p>\r\n<p style=\"text-align: justify;\">\"div ebx;\"</p>\r\n<p style=\"text-align: justify;\">* What we should see is 64 / 3 = 21 remainder 1</p>\r\n<p style=\"text-align: justify;\">___Registers After___<br />|| eax = 0x00000015 || In decimal: 21<br />|| ebx = 0x00000003 ||<br />|| edx = 0x00000001 || * NOTE: EDX = 1 here because 64 % 3 = 1.</p>\r\n<p style=\"text-align: justify;\">&nbsp;-------------------------- ---------------- ---------------- --------------- <br />| Dividend&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; | Divisor&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Quotient &nbsp; &nbsp; &nbsp; | Remainder&nbsp; |<br />|-------------------------- | -------------- | -------------&nbsp; | ------------- |<br />| 0x0000000000000040 | 0x00000003 | 0x00000015 | 0x00000001 |<br />|---------------------------|--------------- | -------------- |-------------&nbsp; |</p> \n\t\n</div>\n\r\n\r\n                                                </div><!-- end main -->\r\n\r\n                                        </div><!-- end wrapper -->\r\n\r\n                                \r\n                        \r\n                                <div class=\"wrap\"></div>\r\n\r\n                                </div> <!-- end contentarea -->\r\n\r\n                        </div><!-- back -->\r\n\r\n                </div><!-- all -->\r\n\r\n                <div id=\"footer-outer\">\r\n                        \r\n                        <div id=\"footer-sub\">\r\n\r\n\r\n                                <div id=\"footer\">\r\n\r\n                                        \r\n                                        \r\n\r\n                                </div><!-- end footer -->\r\n\r\n                        </div>\r\n\r\n                </div>\r\n        \r\n        </body>\r\n</html>\r\n", "encoding": "utf-8"}