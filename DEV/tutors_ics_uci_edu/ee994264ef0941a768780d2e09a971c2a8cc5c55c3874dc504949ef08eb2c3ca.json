{"url": "http://tutors.ics.uci.edu/index.php/tutor-resources/81-cpp-resources/119-cpp-big-three", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-gb\" lang=\"en-gb\" dir=\"ltr\" >\r\n<head>\r\n  <base href=\"http://tutors.ics.uci.edu/index.php/tutor-resources/81-cpp-resources/119-cpp-big-three\" />\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"author\" content=\"Super User\" />\n  <meta name=\"generator\" content=\"Joomla! - Open Source Content Management\" />\n  <title>C++ Big Three</title>\n  <link href=\"/templates/beez_20/favicon.ico\" rel=\"shortcut icon\" type=\"image/vnd.microsoft.icon\" />\n  <link rel=\"stylesheet\" href=\"/templates/system/css/system.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/position.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/layout.css\" type=\"text/css\" media=\"screen,projection\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/print.css\" type=\"text/css\" media=\"print\"  />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/general.css\" type=\"text/css\" />\n  <link rel=\"stylesheet\" href=\"/templates/beez_20/css/personal.css\" type=\"text/css\" />\n  <script src=\"/media/system/js/mootools-core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/core.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/caption.js\" type=\"text/javascript\"></script>\n  <script src=\"/media/system/js/mootools-more.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/md_stylechanger.js\" type=\"text/javascript\"></script>\n  <script src=\"/templates/beez_20/javascript/hide.js\" type=\"text/javascript\"></script>\n  <script type=\"text/javascript\">\nwindow.addEvent('load', function() {\n\t\t\t\tnew JCaption('img.caption');\n\t\t\t});\n  </script>\n\r\n\r\n<!--[if lte IE 6]>\r\n<link href=\"/templates/beez_20/css/ieonly.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<style type=\"text/css\">\r\n#line {\r\n  width:98% ;\r\n}\r\n.logoheader {\r\n  height:200px;\r\n}\r\n#header ul.menu {\r\n  display:block !important;\r\n  width:98.2% ;\r\n}\r\n</style>\r\n<![endif]-->\r\n\r\n<!--[if IE 7]>\r\n<link href=\"/templates/beez_20/css/ie7only.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<![endif]-->\r\n<!--<script type=\"text/javascript\">\r\n  var big ='72%';\r\n  var small='53%';\r\n  var altopen='is open';\r\n  var altclose='is closed';\r\n  var bildauf='/templates/beez_20/images/plus.png';\r\n  var bildzu='/templates/beez_20/images/minus.png';\r\n  var rightopen='Open info';\r\n  var rightclose='Close info';\r\n  var fontSizeTitle='Font size';\r\n  var bigger='Bigger';\r\n  var reset='Reset';\r\n  var smaller='Smaller';\r\n  var biggerTitle='Increase size';\r\n  var resetTitle='Revert styles to default';\r\n  var smallerTitle='Decrease size';\r\n</script>-->\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div id=\"all\">\r\n        <div id=\"back\">\r\n                <div id=\"header\">\r\n                                <div class=\"logoheader\">\r\n                                        <h1 id=\"logo\">\r\n\r\n                                                                                                                                                                                                        <span class=\"header1\">\r\n                                                                                </span></h1>\r\n                                </div><!-- end logoheader -->\r\n                                        <ul class=\"skiplinks\">\r\n                                                <li><a href=\"#main\" class=\"u2\">Skip to content</a></li>\r\n                                                <li><a href=\"#nav\" class=\"u2\">Jump to main navigation and login</a></li>\r\n                                                                                    </ul>\r\n                                        <!--<h2 class=\"unseen\">Nav view search</h2>-->\r\n                                        <h3 class=\"unseen\">Navigation</h3>\r\n                                        \n<ul class=\"menu\">\n<li class=\"item-464\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470 current active\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n\r\n                                        <div id=\"line\">\r\n                                        <!-- <div id=\"fontsize\"></div> -->\r\n                                        <!--<h3 class=\"unseen\">Search</h3> -->\r\n                                        \r\n                                        </div> <!-- end line -->\r\n\r\n\r\n                        </div><!-- end header -->\r\n                        <div id=\"contentarea\">\r\n                                        <div id=\"breadcrumbs\">\r\n\r\n                                                        \r\n\r\n                                        </div>\r\n\r\n                                        \r\n\r\n                                                        <div class=\"left1 leftbigger\" id=\"nav\">\r\n                                                   <div class=\"moduletable_menu\">\n <h3><span\n\tclass=\"backh\"><span class=\"backh2\"><span class=\"backh3\">This Site</span></span></span></h3>\n \n<ul class=\"menu\">\n<li class=\"item-464\"><a href=\"/\" >Home</a></li><li class=\"item-469\"><a href=\"/index.php/becoming-a-tutor\" >Becoming a Tutor</a></li><li class=\"item-470 current active\"><a href=\"/index.php/tutor-resources\" >Learning Resources</a></li><li class=\"item-477\"><a href=\"/index.php/tutor-coordinators\" >Tutor Coordinators</a></li><li class=\"item-476\"><a href=\"/index.php/contact\" >Contact Us</a></li></ul>\n</div>\n\r\n                                                                \r\n                                                                \r\n\r\n\r\n                                                        </div><!-- end navi -->\r\n               \r\n                                        <div id=\"wrapper2\" >\r\n\r\n                                                <div id=\"main\">\r\n\r\n                                                \r\n                                                        \n<div id=\"system-message-container\">\n</div>\r\n                                                        <div class=\"item-page\">\n\n\t<h2>\n\t\t\t<a href=\"/index.php/tutor-resources/81-cpp-resources/119-cpp-big-three\">\n\t\tC++ Big Three</a>\n\t\t</h2>\n\n\n\n\n\n\n\n\n<p><strong>By Matt Butrovich (edits by Jason Kreinberg and Tej Vuligonda)</strong></p>\r\n<p style=\"text-align: justify;\"><span style=\"font-family: 'Courier New';\"><br /> // The Big Three in action<br /> <br /> // The Big Three is an important concept in C++ that ties into proper use of<br /> // dynamic memory allocation. However, this example does not focus on using the<br /> // heap, and instead merely demonstrates when different elements of The Big<br /> // Three are invoked.<br /> <br /> #include &lt;iostream&gt;<br /> #include &lt;cstdio&gt;<br /> <br /> // To help us see what's going on, we have The Big Three written below that put<br /> // output to the console when they're invoked. This should give us a bit of<br /> // insight into what's going on with an object's lifetime.<br /> <br /> class A<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>public:<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>A();<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// default constructor<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>A(const A&amp; a);<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// copy constructor<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>~A();<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// destructor<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>A&amp; operator=(const A&amp; a);<span>&nbsp;&nbsp; </span>// assignment operator<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>private:<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>std::string member;<br /> };<br /> <br /> A::A()<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>std::cout &lt;&lt; \"default constructor.\";<br /> }<br /> <br /> A::A(const A&amp; a)<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>std::cout &lt;&lt; \"copy constructor.\";<br /> }<br /> <br /> A::~A()<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>std::cout &lt;&lt; \"Destructor just took out an A!\" &lt;&lt; std::endl;<br /> }<br /> <br /> A&amp; A::operator=(const A&amp; a)<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>std::cout &lt;&lt; \"assignment operator.\";<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>if (this != &amp;a)<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>{<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>member = a.member;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>}<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>return *this;<br /> }<br /> <br /> void foo1(A b1)<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>return;<br /> }<br /> <br /> void foo2(A&amp; b2)<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>return;<br /> }<br /> <br /> A foo3()<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A b3;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>return b3;<br /> }<br /> <br /> void print_chars(int n, char c)<br /> {<br /> &nbsp;&nbsp; for (int i = 0; i &lt; n; i++)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; putchar(c);<br /> }<br /> <br /> int main()<br /> {<br /> &nbsp;&nbsp; printf(\"%-20s\", \"Code\");<br /> &nbsp;&nbsp; putchar('|');<br /> &nbsp;&nbsp; printf(\"%-20s\", \"Result\");<br /> &nbsp;&nbsp; putchar('\\n');<br /> &nbsp;&nbsp; print_chars(20, '-');<br /> &nbsp;&nbsp; putchar('+');<br /> &nbsp;&nbsp; print_chars(20, '-');<br /> &nbsp;&nbsp; putchar('\\n');<br /> <br /> &nbsp;&nbsp; printf(\"%-20s\", \"A a1;\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A a1;<br /> &nbsp;&nbsp; putchar('\\n');<br /> &nbsp;&nbsp; printf(\"%-20s\", \"A a2(a1);\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A a2(a1);<br /> &nbsp;&nbsp; putchar('\\n');<br /> &nbsp;&nbsp; printf(\"%-20s\", \"A a3{a1};\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A a3 {a1};<br /> &nbsp;&nbsp; putchar('\\n');<br /> &nbsp;&nbsp; printf(\"%-20s\", \"A a4 = a1;\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A a4 = a1;<br /> &nbsp;&nbsp; putchar('\\n');<br /> &nbsp;&nbsp; printf(\"%-20s\", \"a3 = a2;\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>a3 = a2;<br /> &nbsp;&nbsp; putchar('\\n');<br /> &nbsp;&nbsp; printf(\"%-20s\", \"A* ap1 = new A();\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A* ap1 = new A();<br /> &nbsp;&nbsp; putchar('\\n');<br /> &nbsp;&nbsp; printf(\"%-20s\", \"A* ap2 = new A(a1);\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A* ap2 = new A(a1);<br /> &nbsp;&nbsp; putchar('\\n');<br /> &nbsp;&nbsp; printf(\"%-20s\", \"A* ap3 = new A{a1};\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A* ap3 = new A {a1};<br /> &nbsp;&nbsp; putchar('\\n');<br /> &nbsp;&nbsp; printf(\"%-20s\", \"A* ap4 = ap1;\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A* ap4 = ap1;<br /> &nbsp;&nbsp; printf(\"nothing\\n\");<br /> &nbsp;&nbsp; printf(\"%-20s\", \"A&amp; ar1 = a1\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>A&amp; ar1 = a1;<br /> &nbsp;&nbsp; printf(\"nothing\\n\");<br /> &nbsp;&nbsp; printf(\"%-20s\", \"foo1(a1);\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>foo1(a1);<br /> &nbsp;&nbsp; printf(\"%-20s\", \"foo1(ar1);\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>foo1(ar1);<br /> &nbsp;&nbsp; printf(\"%-20s\", \"foo2(a1);\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>foo2(a1);<br /> &nbsp;&nbsp; printf(\"nothing\\n\");<br /> &nbsp;&nbsp; printf(\"%-20s\", \"foo3();\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>foo3();<br /> &nbsp;&nbsp; printf(\"%-20s\", \"delete ap1;\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>delete ap1;<br /> &nbsp;&nbsp; printf(\"%-20s\", \"delete ap2;\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>delete ap2;<br /> &nbsp;&nbsp; printf(\"%-20s\", \"delete ap3;\");<br /> &nbsp;&nbsp; putchar('|');<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>delete ap3;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>ap4 = nullptr;<br /> &nbsp;&nbsp; printf(\"%-20s\", \"end of main()\");<br /> &nbsp;&nbsp; putchar('|');<br /> &nbsp;&nbsp; printf(\"4 A objects fall out of scope.\\n\");<br /> &nbsp;&nbsp; fflush(stdout);<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>return 0;<br /> }<br /> <br /> // Let's take some time to investigate the output line by line:<br /> <br /> // \"A a1; results in: default constructor.\"<br /> <br /> // Not really any surprises here. We're statically allocating a new object with<br /> // no arguments so the default constructor is invoked.<br /> <br /> // \"A a2(a1); results in: copy constructor.\"<br /> <br /> // We're explicitly calling the copy constructor by passing an existing A object<br /> // to the constructor.<br /> <br /> // \"A a3{a1}; results in: copy constructor.\"<br /> <br /> // This is the same call as the previous constructor, albeit with C++11's new<br /> // initializer format.<br /> <br /> // \"A a4 = a1; results in: copy constructor.\"<br /> <br /> // This one might look a little odd at first glance. The syntax looks like we're<br /> // creating a new A object with the default constructor, and then assigning an<br /> // existing object into that name. However, the compiler sees this as an<br /> // opportunity for optimization and instead uses the copy constructor.<br /> <br /> // \"a3 = a2; results in: assignment operator.\"<br /> <br /> // No surprises here: just a basic assignment that invokes the overloaded<br /> // assignment operator.<br /> <br /> // \"A* ap1 = new A(); results in: default constructor.\"<br /> <br /> // We're constructing an A object with no parameters, so the default constructor<br /> // is used here. The only difference from our first default constructor call is<br /> // that this object is ending up on the heap instead of the stack.<br /> <br /> // \"A* ap2 = new A(a1); results in: copy constructor.\"<br /> <br /> // Once again explicitly invoking the copy constructor, but this time using a<br /> // dynamically allocated object.<br /> <br /> // \"A* ap3 = new A{a1}; results in: copy constructor.\"<br /> <br /> // C++11's initializer syntax for the copy constructor.<br /> <br /> // \"A* ap4 = ap1; results in: \"<br /> <br /> // This one might cause you to scratch your head for a moment, but think about<br /> // what's really going on here. We have an assignment operator, but what type is<br /> // it? It's not an A object, it's a pointer to an A object. Thus A's assignment<br /> // operator is not involved with this operation.<br /> <br /> // \"A&amp; ar1 = a1; results in: \"<br /> <br /> // There's a similar scenario going on here as in the previous call. This time,<br /> // we're just creating a new reference to a1, rather than an entirely new A<br /> // object. Thus neither an A constructor nor an A assignment operator is<br /> // involved.<br /> <br /> // \"foo1(a1); results in: copy constructor.\"<br /> <br /> // This is probably the most common scenario for copy constructors being<br /> // invoked. Any time a parameter is passed by value, a new copy is made of the<br /> // argument to use in the function.<br /> <br /> // \"Destructor just took out an A!\"<br /> <br /> // Once the foo1 function is done running, its local copy of the A object falls<br /> // out of scope and is destructed.<br /> <br /> // \"foo1(ar1); results in: copy constructor.\"<br /> <br /> // ar1 was a reference to a1, so using it as an argument to a function whose<br /> // parameter is passed by value means that we end up with the copy constructor<br /> // again.<br /> <br /> // \"Destructor just took out an A!\"<br /> <br /> // Once the foo1 function is done running, its local copy of the A object falls<br /> // out of scope and is destructed.<br /> <br /> // \"foo2(a1); results in: \"<br /> <br /> // The foo2 function takes an A object by reference, so nothing is created or<br /> // deleted by calling this function.<br /> <br /> // \"foo3(); results in: default constructor.\"<br /> <br /> // foo3 returns an r-value A object that is quickly created and then...<br /> <br /> // \"Destructor just took out an A!\"<br /> <br /> // ... immediately dies. Returning copies of objects can be a costly process,<br /> // which is one of the reasons why C++11 implemented something called move<br /> // semantics. This concept broadens the idea of The Big Three, but that's beyond<br /> // the scope of this code sample.<br /> <br /> // \"delete ap1; results in: Destructor just took out an A!\"<br /> <br /> // Here we do a bit of cleanup on the heap and explicitly delete a dynamically<br /> // allocated A object.<br /> <br /> // \"delete ap2; results in: Destructor just took out an A!\"<br /> <br /> // More heap cleanup.<br /> <br /> // \"delete ap3; results in: Destructor just took out an A!\"<br /> <br /> // More heap cleanup. This completes the last of our manual cleanup and ensures<br /> // that we won't have any memory leaks.<br /> <br /> // \"end of main()\"<br /> <br /> // When we get to the end of the program, any objects remaining on the runtime<br /> // stack start to fall out of scope and die. Let's see how that goes...<br /> <br /> // \"Destructor just took out an A!\"<br /> <br /> // a4 falls out of scope and dies.<br /> <br /> // \"Destructor just took out an A!\"<br /> <br /> // a3 falls out of scope and dies.<br /> <br /> // \"Destructor just took out an A!\"<br /> <br /> // a2 falls out of scope and dies.<br /> <br /> // \"Destructor just took out an A!\"<br /> <br /> // a1 falls out of scope and dies.<br /> <br /> // This completes our execution of the program. As we expect, the number of<br /> // constructor calls matches the number of destructor events. We would only see<br /> // a mismatched number of contrsuctors and destructors if we had forgotten to<br /> // explicitly delete one of our dynamically allocated A objects \u00e2\u20ac\u201d basically, if<br /> // we had leaked memory on purpose.<br /> &nbsp;</span></p> \n\t\n</div>\n\r\n\r\n                                                </div><!-- end main -->\r\n\r\n                                        </div><!-- end wrapper -->\r\n\r\n                                \r\n                        \r\n                                <div class=\"wrap\"></div>\r\n\r\n                                </div> <!-- end contentarea -->\r\n\r\n                        </div><!-- back -->\r\n\r\n                </div><!-- all -->\r\n\r\n                <div id=\"footer-outer\">\r\n                        \r\n                        <div id=\"footer-sub\">\r\n\r\n\r\n                                <div id=\"footer\">\r\n\r\n                                        \r\n                                        \r\n\r\n                                </div><!-- end footer -->\r\n\r\n                        </div>\r\n\r\n                </div>\r\n        \r\n        </body>\r\n</html>\r\n", "encoding": "utf-8"}