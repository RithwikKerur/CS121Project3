{"url": "https://www.ics.uci.edu/~theory/269/050610.html", "content": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>Theory Seminar, 10 June  2005</title>\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"/~theory/logo/shortTheory.gif\" width=\" \n521\" height=\"82\" border=\"0\" alt=\"ICS Theory Group\"></a> \n\n<h1>ICS 269, Spring 2005: Theory Seminar</h1>\n\n<h2>10 June 2005:<br>\n<br>\nLocation: CS 432\n<br>\n<br>\nSpeaker: Jeremy Meng\n<br>\n</h2>\n<p>\nThis talk will be a presentation of \na paper titled \n\"No sorting? Better Searching!\", by Gianni Franceschini and Roberto Grossi, FOCS 2004.\n</p>\n<p>\nSorting is commonly meant as the task of arranging keys in increasing or\ndecreasing order (or small variations of this order). Given n keys\nunderlying a total order, the best organization in an array is maintaining\nthem in sorted order. Searching requires \\Theta(log n) comparisons\nin the worst case, which is optimal. We demonstrate that this basic fact\nin data structures does not hold for the general case of multidimensional\nkeys, whose comparison cost is proportional to their length. In two papers\nby Andersson et al. (1994) and Andersson et al. (1995) and the full\nversion in 2001, Andersson et al. study the complexity of searching a\nsorted array of n keys, each of length k, arranged in lexicographic (or\nalphabetic) order for an arbitrary, possibly unbounded, ordered alphabet.\nThey give sophisticated arguments for proving a tight bound in the worst\ncase for this basic data organization, up to a constant factor, obtaining\n\\Theta(((k log log n)/(log log (4 + ((k log log n)/log n)))) + k log\nn) character comparisons (or probes). Note that the bound is \\Theta(log n)\nwhen k = 1, which is the case that is well known in algorithmics.\nWe describe a permutation of the n keys that is different from the sorted\norder, and sorting is just the starting point for describing our\npreprocessing. When keys are stored according to this \"unsorted\" order in\nthe array, the complexity of searching drops to \\Theta(k + log n)\ncharacter comparisons (or probes) in the worst case, which is optimal\namong all possible permutations of the n keys in the array, up to a\nconstant factor. Again, the bound is \\Theta(log n) when k = 1.\nJointly with the aforementioned result of Anders son et al., our finding\nprovably shows that keeping k-dimensional keys sorted in an array is not\nthe best data organization for searching. This fact was not observable\nbefore by just considering k = O(1) as sorting is an optimal organization\nin this case. More implications of our result are commented in the\nintroduction.\n\n</p>\n</body>\n</html>\n", "encoding": "ascii"}