{"url": "https://www.ics.uci.edu/~alspaugh/cls/shr/regularExpression.html", "content": "<?xml version='1.1'?>\n<!DOCTYPE html\n     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'\n     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>\n<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>\n<head>\n  <title>Regular Expressions</title>\n  <meta name='Author' content='Thomas A. Alspaugh'/>\n  <meta name='Description' content=\"Regular Expressions\"/>\n  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>\n  <meta http-equiv='Content-Style-Type' content='text/css'/>\n  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>\n  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->\n  <style type='text/css'>\n\n    .egList {\n      list-style-type: lower-alpha;\n    }\n    .match {  text-decoration: underline;  }\n    td.no  {  background-color: grey;  }\n    table.center td {  text-align: center;  }\n    table.center th {  text-align: right;  }\n    .pat   {  font-weight: bold;  font-family: sans-serif;  }\n\n    div.toc    {  margin-top: .6ex;  margin-bottom: 1.2ex;  }\n    div.toc>h1 {  font-size: 100%;  margin: 0;  }\n    div.toc>h2 {  font-size: 100%;  margin: 0 0 0 1em;  }\n    div.toc>h3 {  font-size: 100%;  margin: 0 0 0 2em;  }\n    div.toc>h4 {  font-size: 100%;  margin: 0 0 0 3em;  }\n\n    @media screen {\n      body     {  background: url(\"img/bg-regularExpression.png\") repeat-y;  }\n      #TMain   {  margin-left: 10.00em;  }\n    }\n  </style>\n</head>\n<body>\n\n<div id='TBg'>\n\n<div id='THeader'>\nRegular Expressions\n<span class='newUrl'><a href='https://thomasalspaugh.org/pub/fnd/regularExpression.html'\n  >thomasalspaugh.org/pub/fnd/regularExpression.html</a></span>\n</div>\n\n<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->\n<p>  <a class='sc' href='../../index.html'>Home</a>\n</p>\n<div class='hr'> </div>\n<p>  <a href='index.html'>Foundations home</a>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='set.html'>Sets</a><br/>\n<a href='relation.html'>Relations</a><br/>\n<a href='correspondence.html'>Correspondences</a><br/>\n<a href='orderedSet.html'>Ordered Sets</a><br/>\n<a href='lattice.html'>Lattices</a><br/>\n<a href='graph.html'>Graphs</a><br/>\n<a href='powerset.html'>Powersets</a><br/>\n<a href='binaryString.html'>Binary Strings</a><br/>\n<a href='logicConcepts.html'>Logic</a><br/>\n<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->\n<a href='greek.html'>Greek</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='glossaryExternal.html'>Glossary</a><br/>\n<a href='goodAbstract.html'>Abstracts</a><br/>\n<a href='argument.html'>Argument</a><br/>\n<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>\n<a href='hohfeld.html'>Legal Relations</a><br/>\n<a href='goodPresentation.html'>Presentations</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='quickStart.html'>Elicitation</a><br/>\n<a href='ontology.html'>Glossaries</a><br/>\n<a href='goal.html'>Goals</a><br/>\n<a href='istar.html'>i*</a><br/>\n<a href='SCR.html'>SCR</a><br/>\n<a href='tracing.html'>Tracing</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='alloy.html'>Alloy</a><br/>\n<a href='msc.html'>MSCs</a><br/>\n<a href='regularExpression.html'>Regular Exprs.</a><br/>\n</p><!-- -spell MSCs Exprs -->\n<div class='hr2'> </div>\n<p>\n<a href='java-designPattern.html'>Design Patterns</a><br/>\n<a href='javadoc.html'>Javadoc</a><br/>\n<a href='java-package.html'>Java Packages</a><br/>\n<a href='java-type.html'>Java Types</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='html.html'>(X)HTML</a><br/>\n<a href='xmlSchema.html'>XML Schemas</a><br/>\n<a href='xslt.html'>XSLT</a><br/>\n</p><!-- -spell XSLT -->\n</div>\n\n\n<!-- No right column -->\n<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->\n<!--xhtml -y -->\n\n\n<!--spell Catenated Metacharacters O'Reilly Subpatterns ThIs Thiss -->\n<!--spell aA aB aa aaa abab abb abc abcabc abd aca acd aeiou ai alnum az-->\n<!--spell azazaz ba bb bcb bcd cd cdd ceee cntrl ddc dddd ddeee eee egrep-->\n<!--spell globbing io iss perl punct sed-->\n<!--spell subpattern traIl traill travelled unescaped xdigit zA -->\n\n\n<h1>Table of contents</h1>\n\n<div id='ToC'>\n  <h1 title='intro'><a href='regularExpression.html#intro'>Introduction</a></h1>\n  <h1 title='basics'><a href='regularExpression.html#basics'>The basics</a></h1>\n  <h2 title='literal'><a href='regularExpression.html#literal'>An ordinary character matches itself</a></h2>\n  <h3 title='literal-metacharacter'><a href='regularExpression.html#literal-metacharacter'>Literal metacharacters</a></h3>\n  <h3 title='invisible'><a href='regularExpression.html#invisible'>Characters ordinarily invisible</a></h3>\n  <h2 title='class'><a href='regularExpression.html#class'>A character class matches any character in the class</a></h2>\n  <h3 title='negated-class'><a href='regularExpression.html#negated-class'>Negating a character class</a></h3>\n  <h3 title='class-metacharacters'><a href='regularExpression.html#class-metacharacters'>Metacharacters in a class</a></h3>\n  <h3 title='dot'><a href='regularExpression.html#dot'>Universal character class (<span class='pat'>.</span>)</a></h3>\n  <h3 title='named-class'><a href='regularExpression.html#named-class'>Named character classes</a></h3>\n  <h2 title='catenation'><a href='regularExpression.html#catenation'>Catenated patterns match the first one, then the second</a></h2>\n  <h2 title='alternation'><a href='regularExpression.html#alternation'>Patterns separated by <span class='pat'>|</span> match one or the other</a></h2>\n  <h3 title='hook'><a href='regularExpression.html#hook'><span class='pat'>?</span> or optional match</a></h3>\n  <h3 title='plus'><a href='regularExpression.html#plus'><span class='pat'>+</span> or positive closure</a></h3>\n  <h3 title='star'><a href='regularExpression.html#star'><span class='pat'>*</span> or Kleene closure</a></h3>\n  <h3 title='repetitionrepetition-count'><a href='regularExpression.html#repetition-count'>Numeric repetition counts <span class='pat'>{<i>m</i>}</span>, <span class='pat'>{<i>m,</i>}</span>, and  <span class='pat'>{<i>m,n</i>}</span></a></h3>\n  <h3 title='minimal'><a href='regularExpression.html#minimal'>Minimal closures <span class='pat'>+?</span>, <span class='pat'>*?</span>, <span class='pat'>{<i>m,n</i>&thinsp;}?</span>, and <span class='pat'>{<i>m,</i>&thinsp;}?</span></a></h3>\n  <h2 title='grouping'><a href='regularExpression.html#grouping'>Parenthesized strings match themselves, without the parentheses</a></h2>\n  <h2 title='precedence'><a href='regularExpression.html#precedence'>Precedence of evaluation</a></h2>\n  <h1 title='context'><a href='regularExpression.html#context'>Context</a></h1>\n  <h2 title='line'><a href='regularExpression.html#line'><span class='pat'>^</span> and <span class='pat'>$</span> as line context</a></h2>\n  <h2 title='word'><a href='regularExpression.html#word'>Word context</a></h2>\n  <h2 title='trailing'><a href='regularExpression.html#trailing'>Trailing context with <span class='pat'>/</span></a></h2>\n  <h1 title='extensions'><a href='regularExpression.html#extensions'>Not regular, but sometimes found in pattern languages</a></h1>\n  <h2 title='matched'><a href='regularExpression.html#matched'><span class='pat'>$<i>k</i></span> or <span class='pat'>\\<i>k</i></span></a></h2>\n  <h1 title='uses'><a href='regularExpression.html#uses'>Some uses of regular expressions</a></h1>\n  <h2 title='set'><a href='regularExpression.html#set'>Defining a set of strings</a></h2>\n  <h2 title='matching'><a href='regularExpression.html#matching'>Matching a substring within a string</a></h2>\n  <h2 title='replacing'><a href='regularExpression.html#replacing'>Replacing a substring</a></h2>\n  <h1 title='rxlangs'><a href='regularExpression.html#rxlangs'>Comparison of some regular expression notations</a></h1>\n</div>\n\n\n<h1 id='intro' title='intro'>Introduction</h1>\n\n<p>\nA regular expression is a <i>pattern</i> that can match\nrepeating characters or strings,\nand alternative characters or strings.&nbsp;\nThe repetition and alternation are expressed using\n<i>metacharacters</i> such as <span class='pat'>*</span>,\n<span class='pat'>+</span>, and <span class='pat'>|</span>\nin patterns.&nbsp;\nSince the metacharacters are themselves characters,\nwe use <i>escaping</i> with a backslash <span class='pat'>\\</span>\nto distinguish when a metacharacter\nis being used as a regular character that matches itself,\nrather than as a metacharacter with special meaning.&nbsp;\nThus,\n<span class='pat'>*</span> is a metacharacter,\nbut <span class='pat'>\\*</span> represents an asterisk character;&nbsp;\nand <span class='pat'>\\</span> is the escape metacharacter,\nbut <span class='pat'>\\\\</span> represents a single backslash character.&nbsp;\nEscaping is also used to give some regular characters\na special meaning,\nsuch as <span class='pat'>\\n</span> to represent a newline\n(in pattern languages that allow a newline to be matched explicitly).&nbsp;\n</p>\n\n<p>\nThe strings that a regular expression can match\nare sequences of symbols drawn from an\n<dfn id='alphabet' title='alphabet'>alphabet</dfn>.&nbsp;\nUsually this alphabet is the set of all characters\n(which is why regular expression notations use backslash to\nescape a metacharacter\nand use it to represent the corresponding alphabet character),\nbut the alphabet of a regular expression can be restricted\n(for example, just letters)\nor can be different\n(for example, Greek letters).&nbsp;\n</p>\n\n<p>\n<b>\nThis document presents the <code>perl</code>\nregular expression notation\n</b>\n(see\n<a href='http://www.perl.org/'>perl.org</a>,\n<a href='http://www.perl.com/'>O'Reilly</a>).&nbsp;\nThere are a number of similar but not identical regular expression notations;&nbsp;\nthe <code>perl</code> regular expression notation\nis an approximate superset of the other common notations,\nso we will present the concepts in terms of <code>perl</code>\nand then contrast the other notations.&nbsp;\n</p>\n\n<p>\nIn this document,\n<span class='pat'>patterns</span> are in boldface sans-serif.&nbsp;\n</p>\n\n\n<h1 id='basics' title='basics'>The basics</h1>\n\n<h2 id='literal' title='literal'>An ordinary character matches itself</h2>\n\n<p>\nEach ordinary character is a pattern that matches itself.&nbsp;\nOrdinary characters include letters, digits,\nwhitespace such as spaces, tabs, and newlines, and\nother characters that are not metacharacters.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>a</td> <td>a</td></tr>\n</tbody>\n</table>\n\n\n<h3 id='literal-metacharacter' title='literal-metacharacter'>Literal metacharacters</h3>\n\n<p>\nTo match a character that is used as a metacharacter\n(such as\n<span class='pat'><a href='#class'>[</a></span>\n<span class='pat'><a href='#dot'>.</a></span>\n<span class='pat'><a href='#grouping'>(</a></span>\n<span class='pat'><a href='#grouping'>)</a></span>\n<span class='pat'><a href='#alternation'>|</a></span>\n<span class='pat'><a href='#star'>*</a></span>\n<span class='pat'><a href='#plus'>+</a></span>\n<span class='pat'><a href='#hook'>?</a></span>\n<span class='pat'><a href='#repetition'>{</a></span>&nbsp;)\nprecede it with a backslash (<span class='pat'>\\</span>).&nbsp;\nSince backslash is thus itself a metacharacter,\nto match a backslash, use a doubled backslash.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>\\\\</td> <td>\\</td></tr>\n  <tr><td class='pat'>\\[</td> <td>[</td></tr>\n  <tr><td class='pat'>\\.</td> <td>.</td></tr>\n  <tr><td class='pat'>\\*</td> <td>*</td></tr>\n</tbody>\n</table>\n\n\n<h3 id='invisible' title='invisible'>Characters ordinarily invisible</h3>\n\n<p>\nEscapes such as\n<span class='pat'>\\t</span> (tab) and\n<span class='pat'>\\n</span> (newline)\nmay appear in <code>perl</code> regular expressions,\nas can the other escape sequences\n<span class='pat'>\\a</span>,\n<span class='pat'>\\b</span>,\n<span class='pat'>\\e</span>,\n<span class='pat'>\\f</span>,\n<span class='pat'>\\r</span>,\n<span class='pat'>\\ooo</span> where <span class='pat'>o</span> represents\nan octal digit [0-7],\nand\n<span class='pat'>\\xXX</span> where <span class='pat'>X</span> represents\na hex digit [0-9A-Fa-f].&nbsp;\nThe octal and hex escapes may be constructed\nto match any character, not just invisible ones.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>\\t</td> <td><span class='it'>tab</span></td></tr>\n  <tr><td class='pat'>\\x09</td> <td><span class='it'>tab</span></td></tr>\n  <tr><td class='pat'>\\011</td> <td><span class='it'>tab</span></td></tr>\n  <tr><td class='pat'>\\x61</td> <td>a</td></tr>\n</tbody>\n</table>\n\n\n<h2 id='class' title='class'>A character class matches any character in the class</h2>\n\n<p>\nA character class is pattern that matches any one of a set of characters.&nbsp;\nA character class is usually written by\nlisting the characters in the set, enclosed in\n<span class='pat'>[&nbsp;]</span>.&nbsp;\n</p>\n\n<p>\nConsecutive character ranges in a class\ncan be written conveniently as the lowest character, a hyphen -,\nand the highest character, like <span class='pat'>[a-z]</span> or\n<span class='pat'>[_a-zA-Z0-9]</span>.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>[ab]</td> <td>a <i>or</i> b <i> but nothing else</i></td></tr>\n  <tr><td class='pat'>[a-z]</td> <td>a <i>or</i> b <i>or</i> c\n        <i>and so on up to</i> z</td></tr>\n</tbody>\n</table>\n\n\n<h3 id='negated-class' title='negated-class'>Negating a character class</h3>\n\n<p>\nA character class is negated by starting it with <span class='pat'>[^</span>\nrather than <span class='pat'>[</span>.&nbsp;\n</p>\n\n<table class='breakAfter'>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>[^ab]</td> <td><i>any character\n        <span class='sc'>except</span></i> a <i>or</i> b</td></tr>\n  <tr><td class='pat'>[^^]</td> <td><i>any character\n        <span class='sc'>except</span></i> ^</td></tr>\n</tbody>\n</table>\n\n\n<h3 id='class-metacharacters' title='class-metacharacters'>Metacharacters in a class</h3>\n\n<p>\nThe ordinary metacharacters\n<span class='pat'><a href='#class'>[</a></span>\n<span class='pat'><a href='#dot'>.</a></span>\n<span class='pat'><a href='#grouping'>(</a></span>\n<span class='pat'><a href='#grouping'>)</a></span>\n<span class='pat'><a href='#alternation'>|</a></span>\n<span class='pat'><a href='#star'>*</a></span>\n<span class='pat'><a href='#plus'>+</a></span>\n<span class='pat'><a href='#hook'>?</a></span>\n<span class='pat'><a href='#repetition'>{</a></span>\nare treated as regular characters within a character class.&nbsp;\nHowever, the class metacharacters <span class='pat'>] - ^</span>\nstill require special treatment.&nbsp;\n</p>\n\n<p>\n<span class='pat'>]</span> ordinarily marks the end of a class.&nbsp;\nHowever,\na <span class='pat'>]</span> appearing immediately after the opening\n<span class='pat'>[</span> or\n<span class='pat'>[^</span> of a class\nis considered a regular character appearing as part of the class.&nbsp;\n</p>\n\n<p>\nNothing special has to be done to include <span class='pat'>[</span>\nas a character in a character class,\nbut of course it must be escaped outside a class.&nbsp;\n</p>\n\n<p>\n<span class='pat'>-</span> ordinarily indicates a range in a class.&nbsp;\nIf a character class is to include <span class='pat'>-</span>,\nthe <span class='pat'>-</span> must be listed\neither first or last in the class.&nbsp;\n(If the class also includes <span class='pat'>]</span>,\nwhich must be listed first, then\n<span class='pat'>-</span> must be last.)&nbsp;\n</p>\n\n<p>\n<span class='pat'>^</span> is also a metacharacter in a class,\nbut only if it immediately follows the opening <span class='pat'>[</span>.&nbsp;\nIf a character class is to include <span class='pat'>^</span>,\nthe <span class='pat'>^</span> may appear anywhere\nexcept as the first character.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>[a]</td> <td>a <i> but nothing else</i></td></tr>\n  <tr><td class='pat'>[&thinsp;]a]</td> <td>] <i>or</i> a\n        <i> but nothing else</i></td></tr>\n  <tr><td class='pat'>[[a]</td> <td>[ <i>or</i> a <i> but nothing else</i></td></tr>\n  <tr><td class='pat'>[&thinsp;][&thinsp;]</td> <td>] <i>or</i>\n        [ <i> but nothing else (why?)</i></td></tr>\n  <tr><td class='pat'>\\[</td> <td>[ <i>(not a character class)</i></td></tr>\n  <tr><td class='pat'>[-az]</td> <td>- <i>or</i> a <i>or</i> z\n        <i>but nothing else</i></td></tr>\n  <tr><td class='pat'>[az-]</td> <td>- <i>or</i> a <i>or</i> z\n        <i>but nothing else</i></td></tr>\n  <tr><td class='pat'>[&thinsp;]-az]</td> <td><i>any character from</i> ] <i>to</i> a,\n         <i>or</i> z</td></tr>\n  <tr><td class='pat'>[&thinsp;]az-]</td> <td>] <i>or</i> a <i>or</i> z\n        <i>or</i> - <i>but nothing else</i></td></tr>\n  <tr><td class='pat'>[ab^]</td> <td>a <i>or</i> b <i>or</i> ^\n        <i>but nothing else</i></td></tr>\n  <tr><td class='pat'>[&thinsp;]az^-]</td> <td>] <i>or</i> a <i>or</i> z\n        <i>or</i> ^ <i>or</i> - <i>but nothing else</i></td></tr>\n</tbody>\n</table>\n\n<p>\nIn <code>perl</code>,\na backslash followed by a non-alphabetic character\nrepresents that literal character\n(although as we've seen, there are other ways of getting\nall class metacharacters into a class).&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>[\\-a]</td> <td>- <i>or</i> a <i>but nothing else</i></td></tr>\n  <tr><td class='pat'>[\\\\a]</td> <td>\\ <i>or</i> a <i>but nothing else</i></td></tr>\n</tbody>\n</table>\n\n<h3 id='dot' title='dot'>Universal character class (<span class='pat'>.</span>)</h3>\n\n<p>\nA dot <span class='pat'>.</span> matches any character except newline.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>.</td> <td>a <i>or</i> * <i>or</i> . <i>or</i> &nbsp;\n         (a space) <i>or ...</i></td></tr>\n  <tr><td class='pat'>\\.</td> <td>. <i>but nothing else</i></td></tr>\n</tbody>\n</table>\n\n\n<h3 id='named-class' title='named-class'>Named character classes</h3>\n\n<p>\nPerl defines a number of named character classes:&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><td>\\w</td> <td>[a-zA-Z0-9] </td> <td>\\W</td> <td>[^a-zA-Z0-9]</td></tr>\n  <tr><td>\\s</td> <td>[ \\t\\n]     </td> <td>\\S</td> <td>[^ \\t\\n]    </td></tr>\n  <tr><td>\\d</td> <td>[0-9]       </td> <td>\\D</td> <td>[^0-9]      </td></tr>\n</tbody>\n</table>\n\n<p>\nThese can appear as metacharacters\nor as elements of character classes in [&thinsp;].&nbsp;\n</p>\n\n<p class='breakAfter'><code>grep</code> and some other regular expression languages\ndefines a number of self-explanatory named character classes:&nbsp;\n<span class='pat'>[:alnum:]</span>,\n<span class='pat'>[:alpha:]</span>,\n<span class='pat'>[:cntrl:]</span>,\n<span class='pat'>[:digit:]</span>,\n<span class='pat'>[:graph:]</span>,\n<span class='pat'>[:lower:]</span>,\n<span class='pat'>[:print:]</span>,\n<span class='pat'>[:punct:]</span>,\n<span class='pat'>[:space:]</span>,\n<span class='pat'>[:upper:]</span>,\nand\n<span class='pat'>[:xdigit:]</span>.&nbsp;\n</p>\n\n\n<h2 id='catenation' title='catenation'>Catenated patterns match the first one, then the second</h2>\n\n\n<p>\nCatenation of regular expressions\nis done by writing them one after another:&nbsp;\nfor example <span class='pat'>ab</span> or <span class='pat'>.[a-z]</span>.&nbsp;\nThe catenation of two patterns matches\nany string that starts with something the first pattern matches,\nthen continues with something the second pattern matches.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>abc</td> <td>abc</td></tr>\n  <tr><td class='pat'>[a-z][A-Z]</td> <td>aA <i>or</i> aB <i>or</i> Ba\n        <i>or ...</i></td></tr>\n</tbody>\n</table>\n\n\n<h2 id='alternation' title='alternation'>Patterns separated by <span class='pat'>|</span> match one or the other</h2>\n\n\n<p>\nIf <span class='pat'>&alpha;</span> and <span class='pat'>&beta;</span> are patterns,\nthen\n<span class='pat'>&alpha;|&beta;</span> matches\nanything <span class='pat'>&alpha;</span> matches or\nanything <span class='pat'>&beta;</span> matches.&nbsp;\n<span class='pat'>|</span> is associative\nand can be used for any number of sub-patterns, not just two:&nbsp;\n<span class='pat'>&alpha;|&beta;|<i>&gamma;</i></span> matches\nanything that <span class='pat'>&alpha;</span>, <span class='pat'>&beta;</span>,\nor <span class='pat'><i>&gamma;</i></span> match.&nbsp;\n</p>\n\n<p>\n<span class='pat'>|</span> operates in a way similar to a character class in\n<span class='pat'>[&nbsp;]</span>,\nexcept that a character class may only contain single characters,\nwhile <span class='pat'>|</span> may join any two patterns.&nbsp;\nThey are distinguished for implementation reasons:&nbsp;\na character class can be recognized without lookahead,\nbut recognizing alternation with <span class='pat'>|</span>\nrequires an unbounded stack.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>(abc)|(bcd)</td> <td>abc <i>or</i> bcd\n        <i>but nothing else</i></td></tr>\n  <tr><td class='pat'>a|b</td> <td><i>precisely what <span class='pat'>[ab]</span>\n        matches</i></td></tr>\n</tbody>\n</table>\n\n\n<h2 id='repetition' title='repetition'>A pattern followed by a repetition\nmatches some number of times</h2>\n\n<p>\nRepetition of a regular expression is done by\nfollowing the expression with a repetition metacharacter or meta-sequence.&nbsp;\nThe complete pattern matches some number of repetitions of\nwhatever the original pattern matches.&nbsp;\n</p>\n\n\n<h3 id='hook' title='hook'><span class='pat'>?</span> or optional match</h3>\n\n<p>\nA pattern followed by <span class='pat'>?</span>\nmatches either the empty string, or\nanything that the pattern matches.&nbsp;\n</p>\n\n<p>\nWe will use &epsilon; to represent an empty string,\nthat is, a string of 0 characters.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>a?</td> <td>&epsilon; <i>or</i> a\n        <i>but nothing else</i></td></tr>\n  <tr><td class='pat'>[ab]?</td> <td>&epsilon; <i>or</i> a <i>or</i> b\n         <i>but nothing else</i></td></tr>\n  <tr><td class='pat'>(abc)?</td> <td>&epsilon; <i>or</i> abc\n        <i>but nothing else</i></td></tr>\n  <tr><td class='pat'>.?</td> <td><i>Any single character within a line,\n        or &epsilon;</i></td></tr>\n</tbody>\n</table>\n\n\n<h3 id='plus' title='plus'><span class='pat'>+</span> or positive closure</h3>\n\n<p>\nA pattern followed by <span class='pat'>+</span> matches\nanything that one or more occurrences of the pattern match.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>a+</td> <td>a <i>or</i> aa <i>or</i> aaa\n        <i>or ...</i></td></tr>\n  <tr><td class='pat'>[ab]+</td> <td>a <i>or</i> b <i>or</i> aa\n         <i>or</i> ba  <i>or</i> ab <i>or ...</i></td></tr>\n  <tr><td class='pat'>(abc)+</td> <td>abc <i>or</i> abcabc <i>or ...</i></td></tr>\n  <tr><td class='pat'>.+</td> <td>Any non-empty string within a single line</td></tr>\n</tbody>\n</table>\n\n\n<h3 id='star' title='star'><span class='pat'>*</span> or Kleene closure</h3>\n\n<p>\nA pattern followed by <span class='pat'>*</span> matches anything that\n0 or more occurrences of the pattern match.&nbsp;\nIf <span class='pat'>&alpha;</span> is a pattern, then\n<span class='pat'>&alpha;*</span> matches\neverything <span class='pat'>&alpha;+</span> matches,\nand in addition matches the empty string.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>a*</td> <td>&epsilon; <i>or</i> a <i>or</i> aa\n         <i>or</i> aaa <i>or ...</i></td></tr>\n  <tr><td class='pat'>[ab]*</td> <td>&epsilon; <i>or</i> a <i>or</i> b\n         <i>or</i> aa  <i>or</i> ba  <i>or</i> ab <i>or ...</i></td></tr>\n  <tr><td class='pat'>(abc)*</td> <td>&epsilon; <i>or</i> abc\n         <i>or</i> abcabc <i>or ...</i></td></tr>\n  <tr><td class='pat'>.*</td> <td><i>Any string (even an empty one)\n         within a single line</i></td></tr>\n</tbody>\n</table>\n\n\n<h3 id='repetition-count' title='repetitionrepetition-count'>Numeric repetition counts <span class='pat'>{<i>m</i>}</span>, <span class='pat'>{<i>m,</i>}</span>, and  <span class='pat'>{<i>m,n</i>}</span></h3>\n\n<p>\n<code>perl</code> and some other languages denote specific numbers of repetitions\nusing numbers in braces <span class='pat'>{&nbsp;}</span>.&nbsp;\nA pattern <span class='pat'>&alpha;</span> followed by\n<span class='pat'>{<i>m</i>&thinsp;}</span> matches anything\nthat <i>m</i> repetitions of <span class='pat'>&alpha;</span> matches;&nbsp;\na pattern <span class='pat'>&alpha;</span> followed by\n<span class='pat'>{<i>m,n</i>&thinsp;}</span> matches anything\nthat <i>m</i> to <i>n</i> repetitions of <span class='pat'>&alpha;</span>\nmatch;&nbsp; and\na pattern <span class='pat'>&alpha;</span> followed by\n<span class='pat'>{<i>m,</i>}</span> matches anything\nthat <i>m</i> or more repetitions of <span class='pat'>&alpha;</span> match.&nbsp;\n</p>\n\n<p>\nOne can see that\n<span class='pat'>&alpha;*</span> is equivalent to\n<span class='pat'>&alpha;{0,}</span>,\n<span class='pat'>&alpha;+</span> is equivalent to\n<span class='pat'>&alpha;{1,}</span>, and\n<span class='pat'>&alpha;?</span> is equivalent to\n<span class='pat'>&alpha;{0,1}</span>.&nbsp;\n</p>\n\n\n<h3 id='minimal' title='minimal'>Minimal closures <span class='pat'>+?</span>, <span class='pat'>*?</span>, <span class='pat'>{<i>m,n</i>&thinsp;}?</span>, and <span class='pat'>{<i>m,</i>&thinsp;}?</span></h3>\n\n<p>\n<span class='pat'>+</span>, <span class='pat'>*</span>,\n<span class='pat'>{<i>m,n</i>&thinsp;}</span>\nand\n<span class='pat'>{<i>m,</i>&thinsp;}</span>\nare <i>greedy</i>:&nbsp;\na pattern followed by one of them will match\nall the occurrences possible.&nbsp;\nThe corresponding minimal closures\n<span class='pat'>+?</span>, <span class='pat'>*?</span>,\n<span class='pat'>{<i>m,n</i>}?</span>,\nand\n<span class='pat'>{<i>m,</i>}?</span>\nmatch the smallest number of occurrences\nthat allows the next expression to match.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>.*z </td> <td><i>All of</i> azazaz</td></tr>\n  <tr><td class='pat'>.*?z</td> <td><i>The first</i> az <i>only,\n         in</i> azazaz.</td></tr>\n</tbody>\n</table>\n\n<p>\nMinimal closures do not add any power to regular expressions,\nbut can be much more convenient than\nwriting the corresponding pattern without them.&nbsp;\n</p>\n\n\n<h2 id='grouping' title='grouping'>Parenthesized strings match themselves, without the parentheses</h2>\n\n\n<p>\nParentheses are used in <code>perl</code>\nand most other regular expression languages\nto mark off a pattern that is matched as a unit.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>(abc)</td> <td>abc</td></tr>\n</tbody>\n</table>\n\n\n<h2 id='precedence' title='precedence'>Precedence of evaluation</h2>\n\n\n<p>\nThe prefix escape operator <span class='pat'>\\</span>\nalways applies to the next character\n(if that is a character that can be escaped).&nbsp;\nIt binds most tightly of all the operators.&nbsp;\n</p>\n\n<p>\nThe postfix operators <span class='pat'>*</span>, <span class='pat'>+</span>,\n<span class='pat'>?</span>, and <span class='pat'>{}</span>\napply to the pattern that immediately precedes them.&nbsp;\nThey bind next most tightly.&nbsp;\n</p>\n\n<p>\nCatenation (listing one pattern after another) binds next most tightly.&nbsp;\n</p>\n\n<p>\nThe alternation operator <span class='pat'>|</span> binds least tightly.&nbsp;\n</p>\n\n<p>\nParentheses force matching of everything inside\nbefore the parenthesized pattern can be combined with anything outside.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th> <th>Does <i>not</i> match</th>\n      <th>Why</th></tr>\n  <tr><td class='pat'>\\.+</td>\n      <td>. <i>or</i> .. <i>or</i> ... <i>or so on</i></td>\n      <td>a <i>or</i> aa <i>or so on</i></td>\n      <td><span class='pat'>\\</span> <i>binds more tightly than</i>\n          <span class='pat'>+</span></td>\n  </tr>\n  <tr><td class='pat'>ab*</td>\n      <td>a <i>or</i> ab <i>or</i> abb <i>or so on</i></td>\n      <td>&epsilon; <i>or</i> abab <i>or so on</i></td>\n      <td><span class='pat'>*</span> <i>binds more tightly than catenation</i></td>\n  </tr>\n  <tr><td class='pat'>(ab)*</td>\n      <td>&epsilon; <i>or</i> abab <i>or so on</i></td>\n      <td></td>\n      <td><i>The parentheses force</i> <span class='pat'>ab</span>\n          <i>to match as a unit</i></td>\n  </tr>\n  <tr><td class='pat'>ab|cd</td>\n      <td>ab <i>or</i> cd</td>\n      <td>abd <i>or</i> acd</td>\n      <td><i>catenation</i> <span class='pat'>|</span>\n          <i>binds more tightly than alternation</i>\n      </td>\n  </tr>\n  <tr><td class='pat'>(ab)|(cd)</td>\n      <td>ab <i>or</i> cd</td>\n      <td></td>\n      <td><i>The parentheses force</i>\n          <span class='pat'>ab</span> and <span class='pat'>cd</span>\n          <i>to match as units</i>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='context' title='context'>Context</h1>\n\n<p>\nSome regular expression languages\ncontain operators that indicate context,\nbut do not match any characters.&nbsp;\n</p>\n\n\n<h2 id='line' title='line'><span class='pat'>^</span> and <span class='pat'>$</span> as line context</h2>\n\n<p>\n<span class='pat'>^</span> at the beginning of a pattern\nmatches the beginning of a line,\nand <span class='pat'>$</span> at the end of a pattern\nmatches the end of a line.&nbsp;\n<span class='pat'>^</span> and <span class='pat'>$</span> do not match\nany specific line-starting or line-ending character (such as newline),\nthey merely indicate the context of the pattern that contains them.&nbsp;\n</p>\n\n<table class='breakBefore'>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>^a</td> <td>a <i>but only if it begins a line</i></td></tr>\n  <tr><td class='pat'>b$</td> <td>b <i>but only if it ends a line</i></td></tr>\n  <tr><td class='pat'>^c$</td> <td>c <i>but only if it is an entire line</i></td></tr>\n  <tr><td class='pat'>^\\^</td> <td>^ <i>but only if it begins a line</i></td></tr>\n  <tr><td class='pat'>^\\^\\$$</td> <td>^$\n        <i>but only if they are an entire line</i></td></tr>\n</tbody>\n</table>\n\n<p>\nPerl (but not the other languages)\nalso have <span class='pat'>\\A</span> that matches the beginning of the entire input,\nand <span class='pat'>\\Z</span> that matches the end.&nbsp;\n</p>\n\n\n<h2 id='word' title='word'>Word context</h2>\n\n<p>\n<code>perl</code> provides\n<span class='pat'>\\b</span> which matches the empty string\neither at the beginning or the end of a word.&nbsp;\nThe corresponding <span class='pat'>\\B</span>\nmatches empty strings that are not at word boundaries.&nbsp;\n</p>\n\n<p>\nOther notations provide separate patterns for the beginning and end;&nbsp;\n<code>perl</code> apparently does not support these.&nbsp;\nIn such notations,\n<span class='pat'>\\&lt;</span> at the beginning of a pattern matches\nthe empty string at the beginning of a word,\nand <span class='pat'>\\&gt;</span> at the end of a pattern matches\nthe empty string at the end of a word.&nbsp;\n<span class='pat'>\\&lt;</span> and <span class='pat'>\\&gt;</span> do not match\nany specific word-starting or word-ending character (such as space or tab),\nthey merely indicate the context of the pattern that contains them.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>\\ba</td>\n  <td>a\n      <i>but only if it begins a word, as in</i>\n      is a <i>or</i> two apples\n  </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h2 id='trailing' title='trailing'>Trailing context with <span class='pat'>/</span></h2>\n\n\n<p>\n<code>perl</code> does not provide this.&nbsp;\nIn some other notations,\n<span class='pat'>&alpha;/&beta;</span>\nmatches anything <span class='pat'>&alpha;</span> matches,\nbut only if followed by something <span class='pat'>&beta;</span> would match.&nbsp;\nThe string that would be matched by <span class='pat'>&beta;</span>\nis used only for context,\nand is not matched by this pattern.&nbsp;\n</p>\n\n\n<h1 id='extensions' title='extensions'>Not regular, but sometimes found in pattern languages</h1>\n\n<h2 id='matched' title='matched'><span class='pat'>$<i>k</i></span> or <span class='pat'>\\<i>k</i></span></h2>\n\n<p>\nIn some regular-expression-like languages (including perl),\n<span class='pat'>\\<i>k</i></span>\nmay appear in a pattern,\nrepresenting whatever string matched the <i>k</i>th parenthesized subpattern.&nbsp;\n<i>k</i> is usually limited to 1 through 9.&nbsp;\nStrictly speaking,\na pattern including such a reference\nmay not be a regular expression in the formal languages sense;&nbsp;\nsuch a pattern may instead be\n<i>context-free</i> or <i>context-sensitive</i>\n(depending on how <span class='pat'>\\<i>k</i></span> appears in the pattern),\nand of a more powerful class of languages.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Matches</th></tr>\n  <tr><td class='pat'>([ab])c</td>\n      <td>aca <i>or</i> bcb\n        &nbsp;<span class='it sc bf'>Not a regular expression</span></td>\n  </tr>\n</tbody>\n</table>\n\n<p>\nRegular expressions are often used to match and replace text.&nbsp;\nIn the replacement text,\n<span class='pat'>$<i>k</i></span> (or in other languages\n<span class='pat'>\\<i>k</i></span>)\nrepresents whatever the <i>k</i>th parenthesized subpattern\nin the pattern matched.&nbsp;\nThe <i>k</i>th is determined by counting opening parentheses.&nbsp;\n</p>\n\n\n<h1 id='uses' title='uses'>Some uses of regular expressions</h1>\n\n<h2 id='set' title='set'>Defining a set of strings</h2>\n\n<p>\nA regular expression defines a set of strings,\nnamely the set of strings that the expression matches completely.&nbsp;\nWe say that the expression defines a <i>language</i>,\nnamely the set of strings.&nbsp;\nSuch a set is a <i>regular</i> language\n(because it is defined by a regular expression);&nbsp;\nthe regular languages are the simplest kind of formal language,\nand each one can be recognized by a <i>finite state machine</i>.&nbsp;\nThe sets are often but not necessarily infinite.&nbsp;\n</p>\n\n<table class='breakBefore'>\n<tbody>\n  <tr><th>Expression</th> <th>Its language</th></tr>\n  <tr><td class='pat'>a</td>\n      <td>{ 'a' }</td>\n  </tr>\n  <tr><td class='pat'>[ab]</td>\n      <td>{ 'a', 'b' }</td>\n  </tr>\n  <tr><td class='pat'>[ab]</td>\n      <td>{ 'a', 'b' }</td>\n  </tr>\n  <tr><td class='pat'>[^ab]</td>\n      <td>{ 'c', 'd', ... , 'z', 'A', 'B', ... , 'Z', ' ', '-', ... }\n        <i>(not including 'a' or 'b')</i></td>\n  </tr>\n  <tr><td class='pat'>[^ab]</td>\n      <td>{ 'c', 'd', ... , 'z', 'A', 'B', ... , 'Z', ' ', '-', ... }\n        <i>(not including 'a' or 'b')</i></td>\n  </tr>\n  <tr><td class='pat'>[ab]*</td>\n      <td>{ '', 'a', 'b', 'aa', 'ab', 'ba', 'bb', 'aaa', ... }\n        <i>(infinite)</i></td>\n  </tr>\n  <tr><td class='pat'>(c|(dd)|(eee))+</td>\n      <td>{ 'c', 'dd', 'eee', 'cc', 'cdd', 'ceee', 'ddc', 'dddd', 'ddeee', ... }\n        <i>(infinite)</i></td>\n  </tr>\n</tbody>\n</table>\n\n\n<h2 id='matching' title='matching'>Matching a substring within a string</h2>\n\n<p>\nRegular expressions are frequently used for matching a part of a longer string.&nbsp;\nWe will use <span class='match'>underscoring</span> to indicate\nwhich parts of a string might be matched.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Pattern</th> <th>Possible matches</th></tr>\n  <tr><td class='pat'>i</td>\n      <td>Elevat<span class='match'>i</span>on ga<span class='match'>i</span>n\n          400 ft.&nbsp;\n          Th<span class='match'>i</span>s <span class='match'>i</span>s the\n          most travelled tra<span class='match'>i</span>l\n          <span class='match'>i</span>n the park.</td>\n  </tr>\n  <tr><td class='pat'>[aeiou]+</td>\n      <td>El<span class='match'>e</span>v<span class='match'>a</span>t<span\n          class='match'>io</span>n\n          g<span class='match'>ai</span>n 400 ft.&nbsp;\n          Th<span class='match'>i</span>s <span class='match'>i</span>s\n          th<span class='match'>e</span> m<span class='match'>o</span>st\n          tr<span class='match'>a</span>v<span class='match'>e</span>ll<span\n            class='match'>e</span>d\n          tr<span class='match'>ai</span>l <span class='match'>i</span>n\n          th<span class='match'>e</span> p<span class='match'>a</span>rk.</td>\n  </tr>\n  <tr><td class='pat'>[^aeiou]+</td>\n      <td><span class='match'>El</span>e<span class='match'>v</span>a<span\n          class='match'>t</span>io<span class='match'>n\n          g</span>ai<span class='match'>n 400 ft.&nbsp;\n          Th</span>i<span class='match'>s </span>i<span class='match'>s\n          th</span>e<span class='match'> m</span>o<span class='match'>st\n          tr</span>a<span class='match'>v</span>e<span class='match'>ll</span>e<span\n            class='match'>d\n          tr</span>ai<span class='match'>l </span>i<span class='match'>n\n          th</span>e<span class='match'> p</span>a<span class='match'>rk.</span></td>\n  </tr>\n  <tr><td class='pat'>(ai)|(is)</td>\n      <td>Elevation g<span class='match'>ai</span>n 400 ft.&nbsp;\n          Th<span class='match'>is</span> <span class='match'>is</span> the most\n          travelled tr<span class='match'>ai</span>l in the park.</td>\n  </tr>\n  <tr><td class='pat'>io?n</td>\n      <td>Elevat<span class='match'>ion</span> ga<span class='match'>in</span>\n          400 ft.&nbsp;\n          This is the most travelled trail <span class='match'>in</span>\n          the park.</td>\n  </tr>\n  <!--\n  <tr><td class='pat'>\\&lt;i</tr>\n      <td>Elevation gain 400 ft.&nbsp;</td>\n          This is the most travelled trail\n          in the park.\n  -->\n</tbody>\n</table>\n\n\n<h2 id='replacing' title='replacing'>Replacing a substring</h2>\n\n<p>\nRegular expressions are also frequently used\nin specifying the replacement of substrings with other strings.&nbsp;\nSuch a replacement may be written as a command\nthat includes regular expressions.&nbsp;\nThe usual command syntax is:\n</p>\n\n<p class='display'>\n  <code>s/</code><i>from</i><code>/</code><i>to</i><code>/</code>\n</p>\n\n<p>\nIn sophisticated replacement command languages,\nany character can be used in place of the three <span class='pat'>/</span>'s,\nas long as it does not appear unescaped in the <i>from</i>\nor <i>to</i> patterns.&nbsp;\nOtherwise,\nany <span class='pat'>/</span> needed in the pattern or replacement\nmust be escaped with a backslash.&nbsp;\nA <code>g</code> at the end of the command indicates\nglobal replacement of anything that matches the <i>from</i> pattern;&nbsp;\notherwise, only the first match is replaced.&nbsp;\n</p>\n\n<p>\nParentheses (or in some notations escaped parentheses)\nmay appear in the <i>from</i> expression\nto identify sub-expressions\nwhose match can be used in the <span class='pat'>to</span> expression.&nbsp;\nThese subexpressions are numbered beginning from 1\nin the order of the left parentheses.&nbsp;\nThe string that matches the first subexpression\ncan then be indicated in the <i>to</i> expression\nby <span class='pat'></span>\n(<span class='pat'>\\1</span> in some notations);&nbsp;\nthat matching the second by <span class='pat'></span>;&nbsp;\nand so on.&nbsp;\n</p>\n\n<p>\nWe will use <span class='match'>underscoring</span> to indicate\nwhich parts of a string have been replaced.&nbsp;\n</p>\n\n<table>\n<tbody>\n  <tr><th>Command</th> <th>Applied to</th> <th>Result</th></tr>\n  <tr><td class='pat'>s/i/I/</td>\n      <td>This is the most travelled trail\n          in the park.</td>\n      <td>Th<span class='match'>I</span>s is the most travelled trail\n          in the park.</td>\n  </tr>\n  <tr><td class='pat'>s/i/I/g</td>\n      <td>This is the most travelled trail\n          in the park.</td>\n      <td>Th<span class='match'>I</span>s <span class='match'>I</span>s the\n          most travelled tra<span class='match'>I</span>l\n          <span class='match'>I</span>n the park.</td>\n  </tr>\n  <tr><td class='pat'>s:i(.):i:g</td>\n      <td>This is the most travelled trail\n          in the park.</td>\n      <td>Th<span class='match'>iss</span> <span class='match'>iss</span> the\n          most travelled tra<span class='match'>ill</span>\n          <span class='match'>inn</span> the park.</td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='rxlangs' title='rxlangs'>Comparison of some regular expression notations</h1>\n\n<p>\nWith the several competing versions of traditional Unix commands,\nit's difficult to choose a definitive regular expression notation,\nespecially since the Gnu versions have all been made\nroughly as powerful as <code>perl</code>.&nbsp;\nThe table below approximates the traditional limitations and notations\nof several kinds of regular expressions.&nbsp;\n</p>\n\n<ul>\n  <li> <i>perl</i> &mdash; A recent and powerful string processing language\n  </li>\n  <li> <i>sed</i> &mdash; The Unix stream editor, dating back to the late 1960's\n        (I believe)\n  </li>\n  <li> <i>lex</i> &mdash; The Unix lexical analyzer generator, from the mid 1970's\n  </li>\n  <li> <i>egrep</i> &mdash; The extended version of <i>grep</i>\n  </li>\n  <li> <i>grep</i> &mdash; The Unix regular expression pattern matcher\n  </li>\n  <li> <i>sh glob</i> &mdash; The filename globbing language for Unix <code>sh</code>\n  </li>\n</ul>\n\n<table class='center breakBefore'>\n<tbody>\n  <tr><th></th>\n      <th class='ce'>perl</th>\n      <th class='ce'>lex</th>\n      <th class='ce'>sed</th>\n      <th class='ce'>egrep</th>\n      <th class='ce'>grep</th>\n      <th class='ce'>sh glob</th>\n  </tr>\n  <tr><th>Escape</th>\n      <td>\\</td>\n      <td>\\</td>\n      <td>\\</td>\n      <td>\\</td>\n      <td>\\</td>\n      <td>\\</td>\n  </tr>\n  <tr><th>Character class</th>\n      <td>[ ]</td>\n      <td>[ ]</td>\n      <td>[ ]</td>\n      <td>[ ]</td>\n      <td>[ ]</td>\n      <td>[ ]</td>\n  </tr>\n  <tr><th>Negated character class</th>\n      <td>[^ ]</td>\n      <td>[^ ]</td>\n      <td>[^ ]</td>\n      <td>[^ ]</td>\n      <td>[^ ]</td>\n      <td>[^ ]</td>\n  </tr>\n  <tr><th>Universal class</th>\n      <td>.</td>\n      <td>.</td>\n      <td>.</td>\n      <td>.</td>\n      <td>.</td>\n      <td>?</td>\n  </tr>\n  <tr><th>Kleene closure</th>\n      <td>*</td>\n      <td>*</td>\n      <td>*</td>\n      <td>*</td>\n      <td>*</td>\n      <td class='no'/>\n  </tr>\n  <tr><th>Positive closure</th>\n      <td>+</td>\n      <td>+</td>\n      <td class='no'/>\n      <td>+</td>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Optional match</th>\n      <td>?</td>\n      <td>?</td>\n      <td class='no'/>\n      <td>?</td>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Repetition counts</th>\n      <td>{ }</td>\n      <td>{ }</td>\n      <td class='no'/>\n      <td>{ }</td>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Minimal closures</th>\n      <td>*?</td>\n      <td class='no'/>\n      <td class='no'/>\n      <td class='no'/>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Subpatterns</th>\n      <td>( )</td>\n      <td>( )</td>\n      <td>\\( \\)</td>\n      <td>( )</td>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Alternation</th>\n      <td>|</td>\n      <td>|</td>\n      <td>|</td>\n      <td>|</td>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Embedded newline</th>\n      <td>\\n</td>\n      <td>\\n</td>\n      <td>\\n</td>\n      <td class='no'/>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Line context</th>\n      <td>^ $</td>\n      <td>^ $</td>\n      <td>^ $</td>\n      <td>^ $</td>\n      <td>^ $</td>\n      <td class='no'/>\n  </tr>\n  <tr><th>Word context</th>\n      <td>\\b</td>\n      <td>\\&lt; \\&gt;</td>\n      <td>\\&lt; \\&gt;</td>\n      <td>\\&lt; \\&gt;</td>\n      <td>\\&lt; \\&gt;</td>\n      <td class='no'/>\n  </tr>\n  <tr><th>Trailing context</th>\n      <td class='no'/>\n      <td>/</td>\n      <td class='no'/>\n      <td class='no'/>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Reusing <i>k</i>th match</th>\n      <td>\\<i>k</i></td>\n      <td class='no'/>\n      <td>\\<i>k</i></td>\n      <td>\\<i>k</i></td>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Replacement with <i>k</i>th match</th>\n      <td>$<i>k</i></td>\n      <td class='no'/>\n      <td>\\<i>k</i></td>\n      <td class='no'/>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n  <tr><th>Replacement with entire match</th>\n      <td>\\0</td>\n      <td class='no'/>\n      <td>&amp;</td>\n      <td class='no'/>\n      <td class='no'/>\n      <td class='no'/>\n  </tr>\n</tbody>\n</table>\n\n<p>\n<code>perl</code> regular expressions are usually enclosed in slashes\n(<code>/.../</code>),\nin which case any slash in the regular expression\nmust be escaped with a backslash.&nbsp;\n</p>\n\n<p>\nIn <code>lex</code> patterns,\nquotes <span class='pat'>'&nbsp;'</span> escape any special characters between them,\nexcept for backslash (which may be used to include a quote in a quoted pattern).&nbsp;\n</p>\n\n<p>\nIn <code>sed</code> patterns,\n<span class='pat'>.</span> can match a newline internal to a string\n(although not its terminal newline).&nbsp;\nOnly a limited set of single character escapes\nsuch as <span class='pat'>\\t</span> is provided.&nbsp;\n</p>\n\n<p>\nIn <code>sh</code> filename globbing,\nthe universal class (<span class='pat'>?</span>)\ndoes not include the dot character or / or newline.&nbsp;\nThere is also a universal pattern (<span class='pat'>*</span>)\nthat matches zero or more occurrences of anything\n<span class='pat'>?</span> matches.&nbsp;\nBackslash is used to escape the special meaning of <span class='pat'>^</span>\nand <span class='pat'>-</span>\nin a character class.&nbsp;\n</p>\n\n\n<!--xhtml -n -->\n</div>\n\n</div><!-- #TBg -->\n\n<div id='TFooter'>\n<div class='W3C'>\n  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'\n    src='../../img/valid-xhtml10-blue.png'\n    alt='Valid XHTML 1.0 Strict'/></a>\n  <br/>\n  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'\n    src='../../img/vcss-blue.png'\n    alt='Valid CSS!'/></a>\n</div>\n<div class='timestamp'>2010Mar10We23:00</div>\n<div style='padding-top:1px;'>\n<a class='plain' href='./index.html' style='font-variant:small-caps;'\n>Thomas A. Alspaugh</a>\n<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;\n    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>\n    <!-- -spell alspaugh uci edu --> </span>\n</div>\n</div>\n\n<!-- Google Analytics code -->\n<script type=\"text/javascript\">\nvar gaJsHost = ((\"https:\" == document.location.protocol)\n  ? \"https://ssl.\" : \"http://www.\");\ndocument.write(unescape(\"%3Cscript src='\" + gaJsHost +\n  \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n<script type=\"text/javascript\">\ntry {\nvar pageTracker = _gat._getTracker(\"UA-15281497-1\");\npageTracker._trackPageview();\n} catch(err) {}\n</script>\n\n</body>\n</html>\n\n", "encoding": "ascii"}