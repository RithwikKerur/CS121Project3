{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/doc/xcode.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n <head>\n  <!-- IE Standards Mode -->\n  <meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"></meta>\n\n  <!-- Favicon -->\n  <link href=\"images/vl_blue.ico\" type=\"image/x-icon\" rel=\"icon\"></link>\n  <link href=\"images/vl_blue.ico\" type=\"image/x-icon\" rel=\"shortcut icon\"></link>\n\n  <!-- Page title -->\n  <title>VLFeat - Download > Using from C > Xcode</title>\n\n  <!-- Stylesheets -->\n  <link href=\"vlfeat.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <link href=\"pygmentize.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <style xml:space=\"preserve\">\n    /* fixes a conflict between Pygmentize and MathJax */\n    .MathJax .mo, .MathJax .mi {color: inherit ! important}\n  </style>\n  \n\n  <!-- Scripts-->\n  \n\n  <!-- MathJax -->\n  <script xml:space=\"preserve\" type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true,\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n        by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers: { autoNumber: 'AMS' }\n      }\n    });\n  </script>\n  <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" xml:space=\"preserve\" type=\"text/javascript\"></script>\n\n  <!-- Google Custom Search -->\n  <script xml:space=\"preserve\">\n    (function() {\n    var cx = '003215582122030917471:oq23albfeam';\n    var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n    gcse.src = (document.location.protocol == 'https' ? 'https:' : 'http:') +\n    '//www.google.com/cse/cse.js?cx=' + cx;\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n    })();\n  </script>\n\n  <!-- Google Analytics -->\n  <script xml:space=\"preserve\" type=\"text/javascript\">\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-4936091-2']);\n    _gaq.push(['_trackPageview']);\n    (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    })();\n  </script>\n </head>\n\n <!-- Body Start -->\n <body>\n  <div id=\"header-section\">\n    <div id=\"header\">\n      <!-- Google CSE Search Box -->\n      <div class=\"searchbox\">\n        <gcse:searchbox-only autoCompleteMaxCompletions=\"5\" autoCompleteMatchType=\"any\" resultsUrl=\"http://www.vlfeat.org/search.html\"></gcse:searchbox-only>\n      </div>\n      <h1 id=\"id-16\"><a shape=\"rect\" href=\"index.html\" class=\"plain\"><span id=\"vlfeat\">VLFeat</span><span id=\"dotorg\">.org</span></a></h1>\n    </div>\n    <div id=\"sidebar\"> <!-- Navigation Start -->\n      <ul>\n<li><a href=\"index.html\">Home</a>\n<ul>\n<li><a href=\"about.html\">About</a>\n</li>\n<li><a href=\"license.html\">License</a>\n</li>\n</ul></li>\n<li class='active'><a href=\"download.html\">Download</a>\n<ul>\n<li><a href=\"install-matlab.html\">Using from MATLAB</a>\n</li>\n<li><a href=\"install-octave.html\">Using from Octave</a>\n</li>\n<li><a href=\"install-shell.html\">Using from the command line</a>\n</li>\n<li class='active'><a href=\"install-c.html\">Using from C</a>\n<ul>\n<li class='active' class='activeLeaf'><a href=\"xcode.html\">Xcode</a>\n</li>\n<li><a href=\"vsexpress.html\">Visual C++</a>\n</li>\n<li><a href=\"gcc.html\">g++</a>\n</li>\n</ul></li>\n<li><a href=\"compiling.html\">Compiling</a>\n<ul>\n<li><a href=\"compiling-unix.html\">Compiling on UNIX-like platforms</a>\n</li>\n<li><a href=\"compiling-windows.html\">Compiling on Windows</a>\n</li>\n</ul></li>\n</ul></li>\n<li><a href=\"overview/tut.html\">Tutorials</a>\n<ul>\n<li><a href=\"overview/frame.html\">Local feature frames</a>\n</li>\n<li><a href=\"overview/covdet.html\">Covariant feature detectors</a>\n</li>\n<li><a href=\"overview/hog.html\">HOG features</a>\n</li>\n<li><a href=\"overview/sift.html\">SIFT detector and descriptor</a>\n</li>\n<li><a href=\"overview/dsift.html\">Dense SIFT</a>\n</li>\n<li><a href=\"overview/liop.html\">LIOP local descriptor</a>\n</li>\n<li><a href=\"overview/mser.html\">MSER feature detector</a>\n</li>\n<li><a href=\"overview/imdisttf.html\">Distance transform</a>\n</li>\n<li><a href=\"overview/encodings.html\">Fisher Vector and VLAD</a>\n</li>\n<li><a href=\"overview/gmm.html\">Gaussian Mixture Models</a>\n</li>\n<li><a href=\"overview/kmeans.html\">K-means clustering</a>\n</li>\n<li><a href=\"overview/aib.html\">Agglomerative Infromation Bottleneck</a>\n</li>\n<li><a href=\"overview/quickshift.html\">Quick shift superpixels</a>\n</li>\n<li><a href=\"overview/slic.html\">SLIC superpixels</a>\n</li>\n<li><a href=\"overview/svm.html#tut.svm\">Support Vector Machines (SVMs)</a>\n</li>\n<li><a href=\"overview/kdtree.html\">KD-trees and forests</a>\n</li>\n<li><a href=\"overview/plots-rank.html\">Plotting AP and ROC curves</a>\n</li>\n<li><a href=\"overview/utils.html\">Miscellaneous utilities</a>\n</li>\n<li><a href=\"overview/ikm.html\">Integer K-means</a>\n</li>\n<li><a href=\"overview/hikm.html\">Hierarchical integer k-means</a>\n</li>\n</ul></li>\n<li><a href=\"applications/apps.html\">Applications</a>\n</li>\n<li><a href=\"doc.html\">Documentation</a>\n<ul>\n<li><a href=\"matlab/matlab.html\">MATLAB API</a>\n</li>\n<li><a href=\"api/index.html\">C API</a>\n</li>\n<li><a href=\"man/man.html\">Man pages</a>\n<ul>\n<li><a href=\"man/mser.html\">mser</a>\n</li>\n<li><a href=\"man/sift.html\">sift</a>\n</li>\n<li><a href=\"man/vlfeat.html\">vlfeat</a>\n</li>\n</ul></li>\n</ul></li>\n</ul>\n\n    </div> <!-- sidebar -->\n  </div>\n  <div id=\"headbanner-section\">\n    <div id=\"headbanner\">\n      <span class='page'><a href=\"download.html\">Download</a></span><span class='separator'>></span><span class='page'><a href=\"install-c.html\">Using from C</a></span><span class='separator'>></span><span class='page'><a href=\"xcode.html\">Xcode</a></span>\n    </div>\n  </div>\n  <div id=\"content-section\">\n    <div id=\"content-wrapper\">\n      <div id=\"content\">\n        \n\n <p>These instructions show how to setup a basic <b>VLFeat</b> project\n  with Apple Xcode.  For the sake of simplicty, we create a command\n  line tool written in C. However, these steps apply with minor\n  modifications to other project types and to the C++ lanuage.</p>\n\n <p>First, let us create a new project\n  called <code/>vlfeat-client</code>. Open Xcode and select <b>File\n  &gt; New Project &gt; Command Line Utility &gt; Standard Tool</b>\n  and click <b>Choose</b>. Give a name to your project (in our\n  case <code/>vlfeat-client</code>), and click <b>Save</b>.</p>\n\n <div class=\"figure\">\n <img src=\"images/using-xcode-new.png\" alt=\"Xcode new project\"></img>\n </div>\n\n <p>Now we need to add <b>VLFeat</b> to the C compiler include search\n  path. To do this, select the <code/>vlfeat-client</code> target and\n  open the information panel (the blue button,\n  or <b>Command-i</b>). Then select the <b>Build</b> panel, search for\n  the field <b>Header Search Paths</b>, and add\n  <b>VLFeat</b> root path (in our case this is\n  just <code/>~/src/vlfeat</code>).</p>\n\n <img src=\"images/using-xcode-info.png\" alt=\"Xcode info\"></img>\n\n <p>Next, we add the <code/>libvl.dylib</code> library file to the\n  project resources so that Xcode links against it. To do this, drag\n  and drop the <code/>libvl.dylib</code> file (in our example\n  <code/>~/src/vlfeat/bin/maci/libvl.dylib</code>) to the left panel and click\n  <b>Add</b>.</p>\n\n <img src=\"images/using-xcode-dylib.png\" alt=\"Xcode dylib\"></img>\n\n <p>Next, edit the <code/>main.c</code> source file and type the following code:</p>\n\n<div class=\"highlight\"><pre><span class=\"cp\">#include &lt;vl/generic.h&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n  <span class=\"n\">VL_PRINT</span> <span class=\"p\">(</span><span class=\"s\">&quot;Hello world!&quot;</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n <img src=\"images/using-xcode-edit.png\" alt=\"Xcode edit\"></img>\n\n <p>If you try to build the project, it should compile without errors\n  (if you are using C++, do not forget to wrap the <code/>include</code>\n  statements in a <code/>extern &quot;C&quot; {}</code> block). However, if you try\n  to run the program, it will fail, complaining that it cannot find the\n  library image.</p>\n\n <img src=\"images/using-xcode-err.png\" alt=\"Xcode error\"></img>\n\n <p>The reason is that <code/>libvl.dylib</code> is compiled with the\n  library <code/>install_name</code> equal\n  to <code/>@loader_path/libvl.dylib</code>. This causes the run-time\n  loader to look for the library in the same directory of the\n  executable. There are two ways around this problem: The first is to\n  install the library in a standard location\n  (e.g. <code/>/usr/local/lib</code>) and use the <code/>otool</code>\n  command to change the\n  library <code/>install_name</code>. The other is to simply copy\n  the <code/>libvl.dylib</code> file in the executable directory. Here we\n  demonstrate the second technique.</p>\n\n <p>To copy <code/>libvl.dylib</code> in the executable directory, we\n  add a <b>Copy Files</b> build phase to the project. Right-click\n  the <code/>vlfeat-client</code> target in the project panel and select\n  <b>Add &gt; New Build Phase &gt; New Copy Files Build\n   Phase</b>. Select <b>Destination: Executables</b>. Then drag-and-drop\n  the <code/>libvl.dylib</code> item from the panel to the <b>Copy\n   Files</b> build phase.</p>\n\n <img src=\"images/using-xcode-copy.png\" alt=\"Xcode copy\"></img>\n <img src=\"images/using-xcode-copy-2.png\" alt=\"Xcode copy\"></img>\n\n <p>Now rebuild the project, and run it. It should run correctly,\n  and if you open the debugger console you should see this:</p>\n\n <img src=\"images/using-xcode-ok.png\" alt=\"Xcode ok\"></img>\n\n\n      </div>\n      <div class=\"clear\">&nbsp;</div>\n    </div>\n  </div> <!-- content-section -->\n  <div id=\"footer-section\">\n    <div id=\"footer\">\n      &copy; 2007-13 The authors of VLFeat\n    </div> <!-- footer -->\n  </div> <!-- footer section -->\n </body>\n <!-- Body ends -->\n</html>\n ", "encoding": "ascii"}