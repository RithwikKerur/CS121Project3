{"url": "https://www.ics.uci.edu/~ics1c/doc/html_crash.html", "content": "<html> <head>\n<base href=\"http://www.pcweek.ziff.com/~eamonn/crash_course.html\">\n<title>Crash course on writing documents for the Web</title>\n</head>\n\n<body>\n<h1>Crash course on writing documents for the Web</h1>\n\n<hr>\n\n<i>I wrote this to help people in PC Week Labs to write\ndocuments for our web server. It's designed for someone who wants to\nput a page on the web but could care less about most of the technical\ndetails. I hope it's helpful. <p>\n<b>One warning:</b> This document is in continual revision mode. You\nare looking at a draft version that gets changed frequently whenever I\nhave a spare moment or two. If you see any technical inaccuracies,\nmisspellings, or typos, please be forgiving. Thanks.</i><p>\n\n<hr>\n\n<h2>Table of Contents</h2>\n<ol>\n  <li> <a href=\"#essentials\"><b>The Absolute Essentials</b></a>\n  <li> <a href=\"#what_html\"><b>What is HTML?</b></a>\n  <li> <a href=\"#philosophy\"><b>A quick word about the HTML\nphilosophy</b></a>\n  <li> <a href=\"#the_heading\"><b>The Heading</b></a>\n  <li> <a href=\"#the_body\"><b>The Body</b></a>\n\t<ol>\n\t  <li> <a href=\"#heading_levels\"><b>Heading\n\t\t     levels</b></a>\n\t  <li> <a href=\"#paragraphs\"><b>Paragraphs</b></a>\n\t  <li> <a href=\"#lists\"><b>Lists</b></a>\n\t  <li> <a href=\"#deflists\"><b>Definition Lists</b></a>\n\t</ol>\n   <li> <a href=\"#links\"><b>Links</b></a>\n\t<ol>\n\t  <li> <a href=\"#urls\"><b>URLs</b></a>\n\t  <li> <a href=\"#putting_links\"><b>Putting Links in\n\t\t     HTML documents</b></a> \n\t</ol>\n   <li> <a href=\"#images\"><b>Images</b></a>\n\t<ol>\n\t  <li> <a href=\"#image_options\"><b>Image\n\t\t     Options</b></a>\n\t</ol>\n   <li> <a href=\"#from_here\"><b>Where to go from here</b></a>\n</ol>\n\n<hr>\n\n<a name=\"essentials\"><b>The Absolute Essentials</b></a>\n\nIf all that you want to do is convert an existing column or story into\na Web document, there's only a few things that you need to do.<p>\n<ol>\n  <li> Convert the document to plain text.\n  <li> At the top of the file, type \"&lt;title&gt;\" and then type the\n       title of the document. End the title with \"&lt;/title&gt;\".\n  <li> At the beginning of the headline, type \"&lt;h1&gt;\" and at the\n       end type \"&lt;/h1&gt;\".\n  <li> If there is any deck (the secondary headline just below the\n       main head), surround it with \"&lt;h2&gt;\" and\n       \"&lt;/h2&gt;\"\n  <li> If there are any subheads in the story itself, surround the\n       text of the subhead with \"&lt;h3&gt;\" and \"&lt;/h3&gt;\"\n  <li> In front of each paragraph (not including the headings that you\n       have marked already), type \"&lt;p&gt;\"\n  <li> If there is a byline, type \"&lt;p&gt;&lt;i&gt;\" in front of it\n       and type \"&lt;/i&gt;\" after it.\n</ol>\n\nThat's it, you're finished. This quick-and-dirty list glosses over\nnumerous complications and technicalities, but at least your document\nwill be read and displayed correctly by most browsers. <p>\n\nHowever, if you want to do anything at all fancy, such as links to\nother documents, graphics, bullet or number lists, or whatever, then\nread on. This document isn't long and you'll be able to do a lot more\nwhen you're finished working through it. Let me know if there are any\nconfusing sections so I can improve it.<p>\n\n<hr>\n\n<a name=\"what_html\"><h3>What is HTML?</h3></a>\n\nThe Hypertext Markup Language (or HTML) is the language used to create\nthe documents for the World Wide Web. Although most browsers will\ndisplay any document that is written in plain text, there are\nadvantages that you get by writing documents using HTML. When HTML\ndocuments are read by applications specifically designed for the Web\n(usually called browsers or Web browsers) they can include \nformatting, graphics, and even links to other documents. <p>\n\nAs a markup language, HTML is not so much concerned about the\nappearance of the documents, but about the structure of a\ndocument. Rich Text Format (RTF), on the other hand, is an example of\na formatting language. The difference between them is that, in HTML,\nyou would use commands to mark the headings, normal paragraphs, lists\n(and whether they are numbered or not), and even things like\naddresses. In RTF, you would use commands (usually the word processing\nprogram does this for you) to indicate the typeface, font size, and\nstyle of the text in a document. <p>\n\nAlthough HTML is a variant of Standard Generalized Markup Language\n(SGML), it differs from some other SGML variants in its\nsimplicity. HTML is simple enough to just type in directly without\nusing some sort of HTML editor. HTML editors are useful, especially if\nyou have massive quantities of documents to write, but they are not\nnecessary to get started.<p>\n\nOne thing to remember about HTML, though, is that it is a new\nstandard that's constantly changing. It's difficult to define HTML\nexactly, which is why you often see use of the word \"usually\" in this\ndocument. Also, browsers differ in their support of various HTML\nextensions and differ (usually a lot) in the way they handle many\nstandard HTML constructs. However, by sticking to the fairly simple subset of\nthe commands outlined in this document, you can be reasonably assured\nthat your documents will look good in just about any Web\nbrowser. <p>\n\nIn general, HTML commands begin with a &lt; and end with a &gt;. The\ncommands are almost never case sensitive and are usually \"containers\"\n(although there are numerous exceptions to both of those\ngeneralizations). By a container, I mean that there is usually a\nbeginning command and an ending command. The commands would thus be\napplied to the text in-between the beginning and ending commands. An\nexample of a container command is the title command, which surrounds\nthe text that is designated as the document's title with &lt;title&gt;\nand &lt;/title&gt;. <p>\n\nWhite space, meaning anything that is not a printable character, is\ngenerally ignored in HTML. Leaving a blank line in your document will\ngenerally not create a blank line when the document is displayed in a\nbrowser. <p>\n\nFinally, not every element common to typical documents is included in\nHTML. You will occasionally have problems converting\nsome documents. For example, the version of HTML in common use today\ndoesn't support tables or equations. There are a few tricks you can\nuse (which we will go into later) to get around these\nlimitations. Both tables and equations are part of the next proposed\nversion of HTML, but it will likely be some time before the new\nversion of HTML is supported by most browsers. <p>\n\n<a name=\"philosophy\"><h3>A quick word about the HTML\nphilosophy</h3></a>\n\nUsing a markup language is a lot like using styles in Word. In Word,\nfor example, you would often have styles for the various heading\nlevels, bullet lists, and other common elements of a document. The\nadvantage of this is that you can change the underlying formatting\neasily without having to reapply the formatting throughout the\ndocument. <p>\n\nHowever, as an author of a Web-based document, you don't control the\nactual formatting of your document. So what's the advantage? The\nadvantage is that, with everybody using the same \"styles\" so-to-speak,\nthe World Wide Web has a certain consistency to it that is absent from\nmany other forms of information access on the Internet. This\nconsistency is all the more impressive when you consider that there is\nno one, central design authority controlling the content of the\nWeb. <p>\n\nSometimes you see documents on the Web in which authors have gone to\nextraordinary effort to make it look exactly the way they wanted it\nto. They use lots of in-line graphics (for things like bullets,\nhorizontal rules, and even individual characters). Usually, however,\nthe result is that those pages look terrific in one particular browser\nbut look dreadful in others. <p>\n\nI suggest that you try to use the Web's built-in \"style-sheet\" rather\nthan trying to devise your own. On good, configurable browsers, the\nusers can then see documents the way they want to, not the way the\nauthor wants them to.<p>\n\n<hr>\n\n<a name=\"the_heading\"><h3>The Heading</h3></a>\n\nEvery HTML document should start by declaring itself as such. You do\nthat with the &lt;html&gt; command at the very top of the document.\nThe very last text in a document should be the ending command,\n&lt;/html&gt;.<p>\n\nThe top part of the document should also have a section for heading\ninformation which is surrounded by the &lt;head&gt; and &lt;/head&gt;\ncommands. There are several items of information that you can put in\nthe header, but almost all of it is totally ignored by most browsers\nout there. One piece of information you should <i>always</i> have in\nthe heading is the title. The title (as we mentioned earlier) is\nsurrounded by the &lt;title&gt; and &lt;/title&gt; commands. <p>\n\nThe title of a document is not normally displayed as part of the page,\nbut is often displayed in some sort of special section in most\nbrowsers (Mosaic puts the title in a Document Title box just under\nit's menu, for example). However, the title is also used by most\nbrowsers when saving the user's \"hotlist,\" so it should be both\ndescriptive and short enough to fit comfortably on one line.<p>\n\nFinally, the \"body\" of the document should also be marked off with the\n&lt;body&gt; and &lt;/body&gt; commands. This is the part of the\ndocument that is normally displayed as the page in most browsers.<p>\n\nThis is what a typical document would look like so far:<p>\n\n<pre>\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;This is my title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n</pre>\n\n(Remember that white space doesn't matter, so this stuff could all be\non one line if you wanted. It makes no difference.)<p>\n<hr>\n\n<a name=\"the_body\"><h3>The Body</h3></a>\n\n<a name=\"heading_levels\"><h4>Heading levels</h4></a>\n\nHTML is easiest to use with documents with a fairly rigid structure --\nones with a definite outline of headings, subheadings,\nsub-sub-headings, and lists. It is not required, but it is good\npractice to write your document so that the heading \"levels\" used\nreflect the organization of your document. For example, the first\nheading should be a \"level 1\" heading (I'll show you how to do this\nsoon), subheadings should be \"level 2,\" and so on.<p>\n\nMost browsers recognize at least four heading levels. There is support\nin HTML for more than that, but what I mean by \"recognize\" is that the\nbrowser gives up to four levels of headings a distinct style. After\nthe fourth level, it gets difficult to tell the heading levels\napart. If you get much beyond that, you should consider breaking up\nyour document into multiple pages. <p>\n\nThe heading commands look like &lt;hX&gt; and &lt;/hX&gt;, where X is\nthe heading level. In most documents on the Web, the first heading is\na duplicate of the document's title. Our typical document would look\nlike this after we added the first heading:<p>\n\n<pre>\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;This is my title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;This is my title&lt;/h1&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n</pre>\n\n<a name=\"paragraphs\"><h4>Paragraphs</h4></a>\n\nNormal paragraphs are separated with the &lt;p&gt; command. This is\none of those exceptional commands that is not a container, although it\ncan be. The next proposed version of HTML makes this a container, so\nthat paragraphs begin with a &lt;p&gt; and end with a &lt;/p&gt;.\nHowever, very few documents actually use the &lt;p&gt; command this\nway, so it's up to you if you want to use it.<p>\n\nOur sample document would look like this after we added a paragraph or\ntwo and a subheading:<p>\n\n<pre>\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;This is my title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;This is my title&lt;/h1&gt;\n\nThis is a sample paragraph. The majority of most documents contain\nthis type of construct. &lt;p&gt;\n\n&lt;h2&gt;This is a subheading&lt;/h&gt;\n\nThe quick brown fox jumped over the slow lazy dogs.\nThe quick brown fox jumped over the slow lazy dogs.&lt;p&gt;\n\nThe quick brown fox jumped over the slow lazy dogs.\nThe quick brown fox jumped over the slow lazy dogs.&lt;p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n</pre>\n\nI put the paragraph marks after each paragraph in this example, but\nthey can just as easily go in front of each paragraph. The &lt;p&gt;\nis just a separator. <p>\n\n<a name=\"lists\"><h4>Lists</h4></a>\n\nThere are three kinds of lists in HTML: ordered, unordered, and a\nspecial kind called a definition list. The ordered lists are numbered.\nUnordered ones typically just use bullets to mark each item.<p>\n\nIn ordered lists the browsers take care of inserting the actual\nnumbers. This behavior is convenient for authors because if you\ninsert or delete items in a sorted list, you don't have to worry about\nrenumbering everything. An ordered list begins with\n&lt;ol&gt; and ends with &lt;/ol&gt;.<p>\n\nUnordered lists typically use bullets to mark off each item in the\nlist, but this is up to the browser (a DOS browser may use asterixes\nor dashes, for example). An unordered list begins with &lt;ul&gt; and\nends with &lt;/ul&gt;.<p>\n\nIn both kinds of lists, the individual items are designated with a\n&lt;li&gt; command. This is another one of those commands that isn't\ntypically used as a container (i.e. it doesn't have a corresponding\n&lt;/li&gt; command), but it can have one if you want. The new\nproposed version of HTML uses it as a container, but since virtually\nall web documents don't use it that way, you're pretty much assured\nthat it will always be recognized as a separator (the same goes with\n&lt;p&gt;, by the way). <p>\n\nAlthough it is not strictly legal HTML, you can nest lists to get an\noutline effect. All current browsers that I'm aware off recognize\nnested lists and it is likely to be added to the standard.<p>\n\nHere's our sample document with a few lists thrown  in:<p>\n\n<pre>\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;This is my title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;This is my title&lt;/h1&gt;\n\nThis is a sample paragraph. The majority of most documents contain\nthis type of construct. &lt;p&gt;\n\n&lt;h2&gt;This is a subheading&lt;/h&gt;\n\nThe quick brown fox jumped over the slow lazy dogs.\nThe quick brown fox jumped over the slow lazy dogs.&lt;p&gt;\n\nHere's an ordered list:&lt;p&gt;\n&lt;ol&gt;\n  &lt;li&gt; first item.\n  &lt;li&gt; second item.\n  &lt;li&gt; notice that &lt;p&gt; commands are not necessary to\n             separate list items.\n&lt;/ol&gt;\n\nHere's an unordered list:&lt;p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt; an item.\n  &lt;li&gt; another item.\n  &lt;li&gt; here's a nested list\n    &lt;ul&gt;\n      &lt;li&gt; a nested item\n      &lt;li&gt; another nested item\n    &lt;/ul&gt;\n  &lt;li&gt; the last item\n&lt;/ul&gt;\n\nThe quick brown fox jumped over the slow lazy dogs.\nThe quick brown fox jumped over the slow lazy dogs.&lt;p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n</pre>\n\nThis is what the list above would look like when rendered with your\nbrowser:<p>\n\nHere's an ordered list:<p>\n<ol>\n  <li> first item.\n  <li> second item.\n  <li> notice that &lt;p&gt; commands are not necessary to separate\n       list items.\n</ol>\n\nHere's an unordered list:<p>\n<ul>\n  <li> first item.\n  <li> another item.\n  <li> Here's a nested list\n       <ul>\n\t <li> a nested item\n\t <li> another nested item\n       </ul>\n  <li> the last item\n</ul>\n\n<a name=\"deflists\"><h4>Definition Lists</h4></a>\n\nA definition list is a very flexible type of list that is more useful\nthan its name implies. We used definition lists extensively on our own\npages (including the <a\nhref=\"http://www.ziff.com/~pcweek/\">Welcome</a> page). It's useful for\nlists where a bit of explanatory text should accompany each item. Each\nitem in the list has two parts, a term (indicated with the &lt;dt&gt;\ncommand) and a definition (which uses the &lt;dd&gt; command). The\nlist itself is started with a &lt;dl&gt; command and closed with a\n&lt;/dl&gt; command. <p>\n\nHere's a sample definition list:<p>\n\n<pre>\n&lt;dl&gt;\n  &lt;dt&gt; First Term\n  &lt;dd&gt; First term's definition.\n  &lt;dt&gt; Second term (or title, or whatever)\n  &lt;dd&gt; Text that explains or expands on the second term.\n&lt;/dl&gt;\n</pre>\n\nAnd This is what it would look like in your browser:<p>\n\n<dl>\n  <dt> First Term\n  <dd> First term's definition.\n  <dt> Second term (or title, or whatever)\n  <dd> Text that explains or expands on the second term.\n</dl>\n\n<hr>\n\n<a name=\"links\"><h3>Links</h3></a>\n\nLinks are what make Web documents unique. Unfortunately, some of what\nis required to create a link is slightly complicated. The most complex\npart of it is the URL that points to the resource you're linking to.<p>\n\n<a name=\"urls\"><h4>URLs</h4></a>\n\nA URL (or Universal Resource Link or Label or something like that) is\nthe address of a document or resource. It usually takes this form:<p>\n\n<i>protocol</i>://<i>machine.name</i>[:port]/<i>directory</i>/<i>document.name</i><p>\n\nThe <i>protocol</i> is the Internet protocol used to reach the\ndocument or resource. On the Web, it is typically \"http\", but it can\nbe any of numerous other things (such as ftp, gopher, telnet, etc).\nThe <i>machine.name</i> is just what you think it is: the name of the\nhost where the document resides (such as\n<i>www.pcweek.ziff.com/~pcweek</i>). The \":port\" portion of the address is\noptional and is only necessary when a resource is accessible through a\nnon-standard TCP port number. The standard port number for HTTP is 80,\nfor example, which is why we have to put in the port number for our\nweb server (8001) since we don't use the standard port. This goes for\nother protocols, as well. If you want to reach a gopher at something\nthan port 70 or telnet at something other than port 23, you have to\nput in a port number.<p>\n\nThe <i>directory</i> and <i>document.name</i> components of the URL\nare self explanatory. <p>\n\nThe easiest way to get the URL of a document is to find it using\nMosaic or Cello and then copy the URL into your HTML document. In\nMosaic, you would copy the text in the Document URL field near the top\nof Mosaic's window. In Cello, you would click on the link with your\nright mouse button and choose the \"copy\" command. <p>\n\n<a name=\"putting_links\"><h4>Putting Links in HTML documents</h4></a>\n\nThe HTML command for putting a link into a document takes this form:<p>\n\n&lt;a href=\"URL\">text of link&lt;/a&gt;<p>\n\nYou put the URL in the quotes following the \"href=\" and put the text\nof the link (the part that users will click or select to activate the\nlink) after the &gt; and before the &lt;/a&gt;.<p>\n\nSo, here's out document with a few links:<p>\n\n<pre>\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;This is my title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;This is my title&lt;/h1&gt;\n\nThis is a sample paragraph. The majority of most documents contain\nthis type of construct. Here's a link embedded in the document right\n&lt;a href=\"http://www.pcweek.ziff.com/~pcweek/whats_new.html\"&gt;here\n&lt;/a&gt;.&lt;p&gt;\n\n&lt;h2&gt;This is a subheading&lt;/h&gt;\n\nThe quick brown fox &lt;a\nhref=\"http://www.pcweek.ziff.com/~pcweek/jumped.html&gt;jumped&lt;/a&gt;\nover the slow lazy dogs.\nThe quick brown fox jumped over the slow lazy dogs.&lt;p&gt;\n\n...and so on...\n</pre>\n\n<hr>\n\n<a name=\"images\"><h3>Images</h3></a>\n\nOne of the great things about the web is the ability to create and\nshare some snazzy looking documents across platforms. However, you\nshould restrain yourself somewhat. I've noticed in our log files for\nour server than many people turn off in-line images to increase\nperformance. Even with fast network access to the Internet, some users\nfind documents loaded down with images to be annoying.<p>\n\nHowever, a dash of colorful images can be nice. Images are also often\nnecessary to make a point that can't be made using text only.<p>\n\nTo add an image to your document, you need to convert it first into\nGIF format. There are a number of tools for doing that, so I won't get\ninto that here, but if you can't find something or need help, see me. <p>\n\nTo make things easier on yourself, put the images that you want to\nshow in your document into the same directory as your document. It is\npossible to display a GIF images that is stored almost anywhere (even\nsomewhere on the Internet), but I won't get into those kinds of\ncomplexities right now. <p>\n\nThe HTML command for inserting an image at the current position takes\nthe following form:<p>\n\n&lt;IMG SRC=\"/name_of_image.gif\"&gt;<p>\n\nThat's all there is to it to insert a GIF file into your document.\nNotice that the location is given <i>relative</i> to the current\ndocument. The location does not have to be a full URL (but it can be\nif you want). This same trick can be used for normal links (not just\nfor images). Some say it's faster to use relative URLs, but I've never\nreally noticed a great difference in speed, but I've somehow or\nanother got used to using relative URLs for images and full URLs for\neverything else. Feel free to disagree with\nme here. <p>\n\n<a name=\"image_options\"><h4>Image Options</h4></a>\n\nThere is also one optional argument to the IMG command that you may\nwant to use occasionally. <p>\n\nYou can \"suggest\" to the browser that the\nimage be aligned in a particular way with the surrounding text using\nthe \"align=\" directive. The choices are \"top\", \"middle\", or \"bottom\",\nwhich indicate where the base of the image should be in relation to\nthe base line of the surrounding text.<p>\n\nHere's a couple of examples:<p>\n<pre>\n&lt;img align=\"top\" src=\"./image.gif\"&gt; Some Text.\n&lt;img align=\"middle\" src\"./image.gif\"&gt; Some Text.\n&lt;img align=\"bottom\" src\"./image.gif\"&gt; Some Text.\n</pre>\n\nHere's how it would look in your browser:<p>\n<img align=\"top\" src=\"/~eamonn/icons/arw01rt.gif\"> Some Text.<p>\n<img align=\"middle\" src=\"/~eamonn/icons/arw01rt.gif\"> Some Text.<p>\n<img align=\"bottom\" src=\"/~eamonn/icons/arw01rt.gif\"> Some Text.<p>\n\nAnother useful option is to suggest a text-only alternative for\nbrowsers that don't support in-line images. The \"alt\" directive is\nused like this:<p>\n\n<pre>\n&lt;img alt=\"o\" src=\"./image.gif\"&gt; Some Text.\n&lt;img alt=\"o\" src\"./image.gif\"&gt; Some Text.\n&lt;img alt=\"o\" src\"./image.gif\"&gt; Some Text.\n</pre>\n\nFor users on a text-only browser like W3-mode of Emacs or Lynx, these\nitems would appear as just \"o\" instead of something like [IMAGE]. Some\nweb servers make very good use of this directive to display icons for\nthe image-oriented and simple word links (like \"[Home] [Next]\") for\ntext-only browsers.<p>\n\n<hr>\n\n<a name=\"from_here\"><h2>Where to go from here</h2></a>\n\nThis document should get you started. To learn more remember to\n<b>steal, steal, steal</b>. That is, use the built-in \"view source\"\noption built-in to most browsers to view the HTML commands that make\nup some of your favorite pages on the web. I'm not advocating that you\nout-right steal documents, but study the formatting commands that are\nused and try to use the same tricks in your own documents.<p>\n\nAlso, check out our <a\nhref=\"http://www.pcweek.ziff.com/~pcweek/WebTools.html\">Web Tools</a> page\nfor more advanced docs.<p>\n\n<hr>\n<address><a href=\"http://www.pcweek.ziff.com/~eamonn/about_me.html\">EDS</a></address>\n<!-- hhmts start -->\nLast modified: Fri Jun 17 12:54:44 1994\n<!-- hhmts end -->\n</body> </html>\n\n\n\n\n\n", "encoding": "ascii"}