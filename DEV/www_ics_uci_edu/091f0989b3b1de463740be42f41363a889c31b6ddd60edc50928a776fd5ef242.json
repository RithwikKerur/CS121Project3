{"url": "https://www.ics.uci.edu/~kay/courses/i42/hw/hw1.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Tuesday, January 10, 2006 11:57 AM\">\n<TITLE>First Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D25B13F5\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 2, CS2, assignment, Java\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for Informatics 42,a second-quarter introductory course in computer science in Information and Computer Science, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/i42/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P>\n  <FONT FACE=\"Goudy Old Style\">Informatics 42 &bull; Winter 2012 &bull; David G. Kay\n&bull; UC Irvine</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\" SIZE=6><B>First Homework</B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Get your work checked and signed off by a classmate, then show it to your TA in lab by Wednesday, January\n18 (because Monday is a holiday).</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">W</FONT><FONT FACE=\"Goudy Old Style\">e suggest that you use some of your lab time on Wednesday and Friday, plus the weekend, to work on these exercises independently; then you&#39;ll be able to ask any\nquestions in lab next week.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">First, we&#39;d like to give everyone a little\nadvice about how to deal with new, unfamiliar, complex systems.  Python fits\nthat category for most of you, particularly because the complexity comes\nnot only from the language itself but also from the new environment.  But\nPython won&#39;t be the only new, complex system you&#39;ll learn in your\ncareers.  Learning new systems is a regular activity for computer scientists.\n So it might pay to think for a minute about how to approach the task.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">When something doesn&#39;t behave as you expect,\nit&#39;s sometimes hard to know where the problem lies&mdash;is your understanding\nincomplete, is the text unclear or misleading, is there a bug in your code\nor in the environment?  The only way to approach this is slowly and systematically,\nstarting from a point that you know is correct.  This approach is second\nnature to some people, but others may benefit from our pointing it out explicitly.\n Start with code that you know will work&mdash;usually code from the text fits\nthis category, and so does code that we distribute.  If you can&#39;t get\nthat to work, you probably have what we call a procedural error, a problem\nin getting things set up, and that&#39;s something you need to ask somebody\nabout.  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Once you have working code, make one small\nchange at a time, testing it each time to make sure each change still produces\na working program.  We should continue to follow our practice of designing\ntest cases in advance and keeping them active in our code as we develop\nit further.  That way, when something <I>doesn&#39;t</I> work, you know\nit&#39;s due to the most recent change you made.  When you reach major milestones,\ncontinue your development on a fresh copy of your code, so if you run into\nserious trouble, you can &quot;roll back&quot; to a stable previous version.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">The second point is that when you find an error,\ndon&#39;t just tinker with the code in the hope it will fall into place\ncorrectly.  Try to determine what&#39;s really wrong, and make corrections\nthat have a reasonable chance of success.  When you&#39;re learning a new\nsystem, you may need to ask for advice at this stage.  This is slower, more\npainstaking, and more demanding of serious reading and thinking than just\nthrowing code at the compiler over and over, but it&#39;s the way you build\nup your real understanding.  As always, we recommend working with your classmates\nto help each other; even if you can&#39;t solve each other&#39;s problems,\nfrustrations are less burdensome when they&#39;re shared and both of you can ask a question about it. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(a)</B>  Run the class-based restaurants\nprogram (<code>RPList.py</code>) that we passed out in class on Tuesday; it&#39;s available at </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/python/RPList.py\">http://www.ics.uci.edu/~kay/python/RPList.py</A></FONT><FONT FACE=\"Goudy Old Style\">. Run it in the IDLE environment, which comes with the downloaded Python software.</FONT></P>\n<P><font face=\"Goudy Old Style\">When you're learning a new tool, some stumbling blocks are inevitable; just ask your classmates or the TA to help you. But start right away so you can get past the setup hassles quickly.</font></P>\n<P><FONT FACE=\"Goudy Old Style\">There&#39;s nothing to show the TA for this part.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(b)</B>  Read through the introductory chapter(s) of whichever book you're using.</FONT></P>\n<P>\n  <FONT FACE=\"Goudy Old Style\"><B>(c)</B>  Make a copy of the </FONT><FONT FACE=\"Courier New\" SIZE=2>RPList.py</FONT><FONT FACE=\"Goudy Old Style\">\n  file; call it </FONT><FONT FACE=\"Courier New\" SIZE=2>RP2.py</FONT><FONT FACE=\"Goudy Old Style\">.\n        Then modify the\nprogram as follows:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Create a new method (function) in the Restaurant class, called </FONT><FONT FACE=\"Courier New\" SIZE=2>toSentence</FONT><FONT FACE=\"Goudy Old Style\">.\n It should return a string from the fields of a Restaurant that looks like this:</FONT>\n<BR><BR>\n<FONT FACE=\"Courier New\" SIZE=2>McDonald&#39;s (394-4345) serves burgers;\norder a Big Mac for $3.95.</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">In the main (controller) part of RP2, add a menu item &quot;</FONT><FONT FACE=\"Courier New\" SIZE=2>S:\n Print restaurant info in sentence form</FONT><FONT FACE=\"Goudy Old Style\">&quot;\n that will print all the restaurants in the new format. (Since the input is case-sensitive, this will be distinguished from the\nexisting lower-case &quot;</FONT><FONT FACE=\"Courier New\" SIZE=2>s</FONT><FONT FACE=\"Goudy Old Style\">&quot;\nmenu item for searching.  This is not good user interface design, though,\nforcing users to distinguish upper and lower case.  We could have changed\nthe existing item to &quot;</FONT><FONT FACE=\"Courier New\" SIZE=2>f</FONT><FONT FACE=\"Goudy Old Style\">&quot;\nfor &quot;find,&quot; but we&#39;re assuming that would be easy for everyone\nso we&#39;re not asking you to do it.)</FONT>\n<BR>\n<BR>\n<FONT FACE=\"Goudy Old Style\">Then add a line to handle the sentence-printing\ncommand.  This in turn will require a new </FONT><FONT FACE=\"Courier New\" SIZE=2>printSentence</FONT><FONT FACE=\"Goudy Old Style\">\nmethod in the Collection class. </FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Modify the program to give the user an additional\nmenu choice: &quot;</FONT><FONT FACE=\"Courier New\" SIZE=2>e:  Erase all\nthe restaurants from the collection</FONT><FONT FACE=\"Goudy Old Style\">&quot;.\n When the user types &quot;</FONT><FONT FACE=\"Courier New\" SIZE=2>e</FONT><FONT FACE=\"Goudy Old Style\">&quot;,\nthe program should remove all the restaurants from the collection (so that,\nfor example, if the next command were &quot;</FONT><FONT FACE=\"Courier New\" SIZE=2>p</FONT><FONT FACE=\"Goudy Old Style\">&quot;,\nnothing would be printed).  You can implement this the same simple way you\ndid it in Scheme.</FONT></LI>\n</UL>\n<P>\n<FONT FACE=\"Goudy Old Style\">We understand, and you should understand, that\nyou do not already know precisely how to make these modifications.  This\nis not an entirely mechanical task; it will require that you look things\nup, figure things out, and possibly ask for advice.  This is all part of\nthe learning process, something you&#39;ll do over and over in your career\nas new technologies emerge.  But of course in this class, you&#39;re not\nalone; if you&#39;ve spent five or ten minutes trying to look up or figure\nout how to do something without success, you should ask a classmate or us\n(in person, on Piazza, or via </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"mailto:i42@uci.edu\">i42@uci.edu</A></FONT><FONT FACE=\"Goudy Old Style\">).\n  But don't just ask how to do it; try to figure out <em>how to find out</em> the answers to similar questions in the future. [It would also be helpful if, when you finish this part of the assignment,\nyou could send us a message describing any concepts that you found especially\nhard to figure out for yourself.  That&#39;s entirely optional, of course.]</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">As we said earlier, test as you go.  When you&#39;re\ndone, demonstrate your program for a classmate, to sign off, and then show it to the TA and let him look at your code.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(d) </B>Go to <a href=\"http://codingbat.com/python\"><font size=\"2\" face=\"Courier New\">codingbat.com/python</font></a> and do at least two of the warmup problems there.  You don't have to show your work to the TA, but keep this site in mind for help and practice learning to program in Python.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><b>(e)</b>  If you plan to do some of your\n  work at home, set up your environment.  </FONT><FONT FACE=\"Goudy Old Style\">Realize, though, that everyone&#39;s individual machine is configured a\n    little differently, so leave time to deal with the nearly inevitable difficulties.\n</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><BR>\n  </FONT><FONT FACE=\"Helvetica\" SIZE=1>Written by David G. Kay with some inspiration\n    from Informatics 41 and ICS H21 assignments, Winter 2005 and Winter 2006. Modified by Alex Thornton, Winter 2007, and David G. Kay, Winte r 2008. Modified for Python by David G. Kay, Winter 2012.</FONT></P>\n<BR CLEAR=ALL>\n</BODY>\n</HTML>\n", "encoding": "ascii"}