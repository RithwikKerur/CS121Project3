{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/lab8.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Monday, November 14, 2005 6:09 AM\" />\n<TITLE>Lab Assignment 8</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D22FB4A3\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/h21/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style1 {font-family: \"Courier New\", Courier, monospace}\n.style2 {font-weight: bold}\n-->\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY &bull; FALL 2009</font></P>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Lab Assignment 8</B></FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>This assignment is due at the end of lab on\n  Wednesday, November 25, which is the day before Thanksgiving. </FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Choose a partner for this twelve-day assignment, someone\nyou haven&#39;t worked with already.  Choose someone whose Thanksgiving schedule is compatible with yours; if you won't be here for lab on the day before Thanksgiving (when the lab is due), pick someone who's able to work with you for a few extra out-of-lab hours before then.</FONT></P>\n<P><font face=\"Garamond\" size=4><B>(a)</B> We have <a href=\"http://www.ics.uci.edu/~kay/scheme/infx-tunes.scm\">posted some code</a> to implement parts of a music-playing application like iTunes.  You should download, install, and run this code now. And then you should read it. Reading code is an important skill,  one that beginning programmers ignore all too often. Sure, code isn't as easy to read as a novel; you need to go over it carefully and ask yourself what it does and how it works. Don't let this intimidate you; just take it one function at a time.</font>\n</p><P><font face=\"Garamond\" SIZE=4>We used  the following data definitions to define a music collection in the form of \"albums of songs\":</font></P>\n<BLOCKQUOTE>\n  <P><font face=\"Garamond\" size=4> A <I>music collection</I> is a list of albums.<BR />\n    An <I>album</I> is a unique ID (number), an artist (string), a title (string),\n    a year (number), and a list of songs.<BR />\n    A <I>song</I> is a track number (number), a title (string), a length in seconds (number), and a play count (number).  The play count indicates how many times the song has been played.</font></P>\n  <p><FONT FACE=\"Garamond\" size=4>These data definitions led us to write these structure definitions:</FONT></p>\n  <p class=\"style1\">(define-struct album (id artist title year songs))<br />\n    <span class=\"style1\">(define-struct song (track-num title length play-count))</span></P>\n</BLOCKQUOTE>\n<P><FONT FACE=\"Garamond\" size=4><B>(a.1)</B> We wrote a function called <TT class=\"style1\">top-10-songs</TT>, which finds the songs in a music collection that have the ten highest play counts.  Generalize this function as <TT class=\"style1\">top-n-songs</TT>, which takes a number <I>n</I> and a list of albums and returns a list of the <i>n</i> songs with the highest play count.  This is simple given the existing code.</FONT></P>\n<P><FONT FACE=\"Garamond\" size=4><B>(a.2)</B> Write a function <TT class=\"style1\">unplayed-songs</TT>, which takes a list of albums and returns a list of the songs that have never been played.</FONT></P>\n<P><FONT FACE=\"Garamond\" size=4><B>(a.3)</B> Write a function <TT class=\"style1\">favorite-album</TT>, which takes a list of albums and returns the album that is the \"favorite.\"  We'll define the \"favorite\" album to be the one that the user has spent the most time listening to.  (Hint: The total time the user has spent listening to an album is a function of the play counts and song lengths.)</FONT></P>\n<P><FONT FACE=\"Garamond\" size=4><B>(a.4)</B> Time spent listening to an album isn't the only metric for defining a \"favorite\" album.  Generalize your <TT class=\"style1\">favorite-album</TT> function so that it takes another argument, a \"favorite measurement function\"; that way, <TT class=\"style1\">favorite-album</TT> can be called with any metric for determining the favorite.  (Before you get too far, consider what the appropriate contract for the favorite function might be, if the goal is to find the one and only favorite, rather than a list of many albums that the user likes.)  Add a comment after your generalized function that suggests, in English, at least two other ways to define a favorite album; show, for each of your suggestions, how you would call your generalized function to find the favorite album according to your suggestion.</FONT></P>\n<P><FONT FACE=\"Garamond\" size=4><B>(a.5)</B> One useful option that iTunes provides is a \"Search\" box, into which you can type a keyword, and iTunes will automatically search your collection for songs containing that keyword in their title, their artist, or their album's title.  Implement a function <TT class=\"style1\">music-search</TT> that does the same, returning a list of matching songs given a string containing the search keyword.  (You'll likely find the <a href=\"http://www.ics.uci.edu/~kay/scheme/strings.scm\">string processing code</a> from Lab 6 helpful.)</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>Submit your definitions via Checkmate.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(b)</B> Three of the five functions you wrote in part <strong>(a)</strong> return a list of songs.  Unfortunately, our \"album of songs\" model for a music collection has a drawback: An individual song by itself doesn't contain enough information to display it usefully (in a GUI or on a web page) because the album information is not included.  In the code, we solved this problem by introducing a new structure definition that combines information about a song and the album that contains it.  That definition looks like this:</FONT></P>\n<PRE class=\"style1\">\n    (define-struct song-display (artist a-title year track-num s-title length play-count))\n</PRE>\n<P><span class=\"style2\"><FONT FACE=\"Garamond\" size=4></FONT></span><FONT FACE=\"Garamond\" size=4>Rewrite <TT class=\"style1\">top-n-songs</TT>, <TT class=\"style1\">unplayed-songs</TT>, and <TT class=\"style1\">music-search</TT> so that they each return a list of song-displays, rather than a list of songs.  (Note that if you solved <TT class=\"style1\">top-n-songs</TT> and <TT class=\"style1\">unplayed-songs</TT> using a similar technique to the one we used for <TT class=\"style1\">top-10-songs</TT>, you'll find that you don't have to change very much of your existing code to make this work.  On the other hand, it's likely that <TT class=\"style1\">music-search</TT> can be significantly simplified.)</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>Submit your definitions via Checkmate.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c)</B> We have talked often in class about how the model (the data structure) that you choose to represent your data can  have a profound impact on how hard it is to operate on that data&mdash;how difficult it will be to write the code and also how much time it will take for the computer to execute it.  Sometimes, the data model you choose may even make some tasks impossible or too inefficient (e.g., you can't search an unordered list in logarithmic time).</FONT></P>\n<P><FONT FACE=\"Garamond\" size=4>Let's consider three ways that we might model a music collection.  (This is hardly an exhaustive list, but it includes three alternatives that are available to us based on what we've learned so far this quarter.)</FONT><FONT FACE=\"Garamond\" size=4>\n</FONT></P>\n<OL><FONT FACE=\"Garamond\" size=4><LI>The \"album of songs\" model we used in parts <strong>(a)</strong> and <strong>(b)</strong>, where a music collection is a list of albums, each of which contains a list of songs.</LI>\n  <LI>The \"list of songs\" model, where a music collection is represented as a list of song-displays, using the definition of song-display from part <strong>(b)</strong>.</LI>\n  <LI>The \"BST of albums of songs\" model, where a music collection is a binary search tree of albums, each of which contains a list of songs, implemented using the following structure definitions: \n      <PRE class=\"style1\">\n   <span> (define-struct node (value left right)</span>)\n    (define-struct album-info (id artist title year songs))\n    (define-struct song-info (track-num title length play-count))\n</PRE>\n      Each node in the binary search tree contains one album as its value.  The albums are sorted in order by the albums' names.  An empty binary search tree is represented by <span class=\"style1\">empty</span>.</LI>\n</FONT>\n</OL>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.1)</B> Using the \"albums of songs\" model, write the function <TT class=\"style1\">album-names</TT>, which takes a music collection and returns a list of the names of all albums in the collection.</FONT>\n</p><P> <FONT FACE=\"Garamond\" size=4><B>(c.2)</B> Write the <TT class=\"style1\">album-names </TT>function again, this time so it takes a music collection in the \"list of songs\" model.  A particular album name should only appear once in the output list.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.3)</B> Write the <TT class=\"style1\">album-names</TT> function one more time, this time so it takes a \"BST of albums of songs.\"</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.4)</B> All three of these functions has the same basic contract&mdash;take a music collection as input and return a list of the names of all the albums in the collection&mdash;but differ in terms of how they expect the collection to be organized.  Will all three functions give the same output if given the same input collection?  If not, what will be different about the output of one as opposed to the others?  What does your answer to these questions suggest about which of the models are appropriate to use in an actual music application like iTunes?</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.5)</B> Which of the models would you expect to enable the best implementation of a <TT class=\"style1\">find-album</TT> function, if we measure \"best\" based on which one will run the fastest if given a music collection with tens of thousands of albums in it?  Why?</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>Collect your definitions and your answers to <strong>(c.4)</strong> and <strong>(c.5)</strong>, expressed as comments, and submit them to Checkmate.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(d)</B> (optional; extra credit) A favorite feature of iTunes is the \"smart playlist\" feature.  Rather than selecting songs manually to include into a playlist, a \"smart playlist\" allows you to specify a set of qualities that a song can have&mdash;year of release, play count, artist, and so on&mdash;and then allow iTunes to select them for you, and even keep the list updated as your collection changes over time.  We can implement this easily in Scheme like this:</FONT></P>\n<PRE class=\"style1\">\n    (define smart-playlist\n      (lambda (quality-func collection)\n        (filter quality-func (all-song-displays collection))))\n</PRE>\n<P><FONT FACE=\"Garamond\" size=4>Recall that <TT class=\"style1\">all-song-displays</TT> is a function that takes a music collection and turns it into a list of <TT class=\"style1\">song-display</TT> structures.  (While our version takes an \"albums of songs\" collection and returned a list of song-displays, you could replace <TT class=\"style1\">all-song-displays</TT> with a function that takes a collection implemented using some other model and transforms it into a list of song displays.) The <TT class=\"style1\">quality-func</TT> parameter is a Scheme function that selects songs that have whatever quality defines our smart playlist.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>The challenge in implementing a \"smart playlist\" feature in Scheme is handling the quality function.  While you could easily implement a single quality function, the trick is that you'd like users to be able to specify multiple qualities&mdash;say, short songs about love written before 1970. We need a way to combine into one function a series of predicates (here, the length less than, say, 3 minutes; the title containing &quot;love&quot;; and the year less than 1970). One way would be to code up a Scheme function using </FONT><span class=\"style1\">and</span><FONT FACE=\"Garamond\" size=4>. We could do that by hand, but we'd like to design a more automated way.</FONT></P>\n<P><FONT FACE=\"Garamond\" size=4>Suppose we already have a user interface that prompts the user for smart playlist qualities.  You've seen this kind of thing: There's a pull-down menu for which field, a pull-down for the comparison operator, and a text field for the value to compare it with, for example. How might that user interface (part of the &quot;controller&quot; portion of the program) represent each quality for the &quot;model&quot; part of our program to process? (The &quot;model&quot; part would then have to turn a list of these qualities into Scheme predicates and filter the songs by each item on the list in turn.) One way to represent the qualities (following an idiom we'll see often in Java) is as &quot;quality-func-options&quot;: Each quality-func-option describs one kind of predicate, one kind of question we can ask about a song. Let's say that each quality-func-option will be one of these structures:</FONT></P>\n<P class=\"style1\">;; Songs played by a particular artist.<br />\n  (define-struct quality-func-artist-option (val))</P>\n<P class=\"style1\">;; Songs with a particular title.<br />\n  (define-struct quality-func-title-option (val))</P>\n<P class=\"style1\">;; Songs released between \"from-val\" and \"to-val\". <br />\n  (define-struct quality-func-year-option (from-val to-val))</P>\n<P class=\"style1\">;; Songs played at least a specified number of times. <br />\n  (define-struct quality-func-min-play-count-option (val))</P>\n<P> <span class=\"style2\"><FONT FACE=\"Garamond\" size=4></FONT></span><FONT FACE=\"Garamond\" size=4>Write a function called <TT class=\"style1\">make-quality-func</TT> that takes a list of quality-func-options and returns a function that takes a song-display and returns true if it is a \"quality\" song (according to the options given) or false if it's not.  When the list of qualities is empty, the quality function should always return true.  (Hint: The quality function ends up being a chain of functions, each one checking one quality and then calling the next function in the chain; there's one link in the chain for each quality option in the list.)</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>Submit your definitions to Checkmate.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(e)</B> Remember that each partner must\n  complete a partner evaluation form via the Survey tool on eee.uci.edu.</FONT><BR />\n</P>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments by David\nG. Kay from Fall 2001; modified by David G. Kay, Fall 2004, Fall 2005, Fall 2008. Infx-tunes example originally by Alex Thornton, Fall 2006.</FONT></P>\n<HR />\n<FONT FACE=\"Garamond\" size=4><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Garamond\">\n<!-- #BeginDate format:fcAm1a -->Friday, November 14, 2008 2:20 PM<!-- #EndDate -->\n</font></span></BODY>\n</HTML>", "encoding": "ascii"}