{"url": "https://www.ics.uci.edu/~pattis/ICS-33/programs.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Sample Modules</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Sample Modules</h1>\r\n<p>\r\n<h2>ICS-33: Intermediate Programming</h2><p>\r\n</center>\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<p>\r\nThe following is a list of zipped Eclipse project files (more might be added\r\n  during the quarter).\r\nPlease feel free to download, unzip, run, and study these scripts (both their\r\n  code and their run-time behavior).\r\nProgrammers gain tremendous insight into all facets of programming by studying\r\n  the code of other programmers (especially those with more experience; and I\r\n  am happy to improve my code based on your observations -nothing is perfect).\r\nA good programmer typically makes elegant use of the required language\r\n  features, resulting in smaller, more elegant code.\r\n<p>\r\nAll downloadable projects are listed alphabetically; you can also search this\r\n  page for keywords.\r\nAll are zip files, so unzip them first.\r\nMost project files require the\r\n  Download: <a href=\"../common/online33.html\">standard course library</a>\r\n  which contains a variety of useful modules.\r\nIf you followed the Eclipse installation instructions, you should have already\r\n  created the <b>courselib</b> folder in your workspace and populated it with\r\n  these modules.\r\n<p>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n<p>\r\n\r\n\r\nDownload: <a href=\"programs/backtracking.zip\">Backtracking Search</a><br>\r\nThis project contains a general solver for all backtracking search problems:\r\n  problems are solved by binding aspects to values, generating every possible\r\n  possibilities and determining which are solutions; one function finds a/one\r\n  solution, another finds all solutions.\r\nIt also contains three files that define the Problem/Aspect classes needed by\r\n  the solver and scripts to solve actual problems via backtracking search.\r\n<ol>\r\n<li>Solving the N Queens problem: Can N queens be placed on an NxN\r\n      chessboard so no queen can attack (horizontally, vertically or on a\r\n      diagonal) any other queen.\r\n    Here is a sample solution of the 4 Queens problem.\r\n<b><pre>   +---+---+---+---+\r\n   |   | Q |   |   |\r\n   +---+---+---+---+\r\n   |   |   |   | Q |   \r\n   +---+---+---+---+\r\n   | Q |   |   |   |\r\n   +---+---+---+---+\r\n   |   |   | Q |   |\r\n   +---+---+---+---+</pre></b>\r\n<p>\r\n<li>Solving Sudoku puzzles: Can a 9x9 square (read from a file) have its empty\r\n       entries filled so that every row and column contains the numbers all the\r\n       numbers 1-9, and 3x3 squares comprising the 9x9 cube likewise each\r\n       contain all the numbers 1-9.\r\n    Here is a sample problem (on the left) and solution (on the right).\r\n<b><pre>   9 6   | 1   4 |   5                      9 6 3 | 1 7 4 | 2 5 8\r\n       8 | 3     | 6                        1 7 8 | 3 2 5 | 6 4 9\r\n   2     |       |     1                    2 5 4 | 6 8 9 | 7 3 1\r\n  -------+-------+------                   -------+-------+------\r\n   8     | 4   7 |     6                    8 2 1 | 4 3 7 | 5 9 6\r\n       6 |       | 3                        4 9 6 | 8 5 2 | 3 1 7  \r\n   7     | 9   1 |     4                    7 3 5 | 9 6 1 | 8 2 4\r\n  -------+-------+------                   -------+-------+------\r\n   5     |       |     2                    5 8 9 | 7 1 3 | 4 6 2\r\n       7 | 2   6 | 9                        3 1 7 | 2 4 6 | 9 8 5\r\n     4   | 5   8 |   7                      6 4 2 | 5 9 8 | 1 7 3</pre></b>\r\n<p>\r\n<li>Solving Anagrams: For any input of words, find all sequences of words (of a\r\n      certain or arbitrary length, each rom some dictionary of legal words)\r\n      that contain  exactly those characters (including repetitions).\r\n    For example, the word <b>California</b> has an anagram <b>racial info</b>.\r\n</ol>\r\n<p>\r\n\r\nDownload: <a href=\"programs/collatz.zip\">Collatz Conjecture</a><br>\r\nThe Collatz conjecture states: starting with any positive number, repeat the\r\n  process \"If it is even, halve it; if it is odd, multiply it by three and\r\n  add one\" and eventually the remaining value reduces to one.\r\nNo one has been able to prove this conjecture, but a short script allows us\r\n  to investigate it (and others have examined billions of different values\r\n  and found no counterexamples).\r\nIt is interesting to observe the number of cycles required to reduce the\r\n  starting number to 1, looking for a pattern.\r\nThis script is highlighted in the\r\n  <a href=\"../common/debugger/debugger.pdf\">debugger handout</a>.\r\n<p>\r\n\r\nDownload: <a href=\"programs/craps.zip\">\r\n  Craps Statistics</a><br>\r\nThis script prompts the user for the number of craps games to play (craps\r\n  is a dice game whose rules are explained in the block comment at the top\r\n  of this script).\r\nIt then simulates that many games of craps, printing the number (and percentage)\r\n  of wins, losses, dice throws (and average dice throws per game), elapsed\r\n  time, and game playing speed.\r\nThis script is used inthe problem set for the\r\n  <a href=\"../common/debugger/debugger.pdf\">debugger handout</a>.\r\n<p>\r\n\r\nDownload: <a href=\"programs/retester.zip\">\r\n  Regular Expression Tester</a><br>\r\nThis script is a complicated driver for testing methods in the <b>re</b>\r\n  (Regular Expression) module.\r\nThere are boths simple and complex features dealing with entering patterns\r\n  and testing for matches, searches, finds, substitutes (with replacements),\r\n  and splits.\r\nRegular Expressions are tersely illustrated in a\r\n  <a href=\"lectures/re.txt\">lecture</a>.\r\n<p>\r\n\r\nDownload: <a href=\"programs/statespace.zip\">State-Space Search</a><br>\r\nThis project contains a general solver for all state-space search problems:\r\n  problems are solved by generating sequences of operators to transform the\r\n  start state of a problem into its stop state; one function finds the optimal\r\n  (minimum operators) solution by breadth-first searching, another tries to\r\n  minizmize the number of states explored but cannot be guaranteed to find the\r\n  optimal solution (unless its heuristic satisifes the A* property).\r\nIt also contains a files that define the Problem/Operators/State classes\r\n  and a script needed by the solver to the water-jugs problem.\r\n<p>\r\n\r\n<!---Download: <a href=\"programs/sid_uid.zip\">\r\n  Translate Student ID -> Unique/Spreadsheet ID</a><br>\r\nThis script translates a UCI student's ID (must be an integer) into\r\n  the ID appearing on the grading spreadsheet for that student.\r\n<p>\r\n--->\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}