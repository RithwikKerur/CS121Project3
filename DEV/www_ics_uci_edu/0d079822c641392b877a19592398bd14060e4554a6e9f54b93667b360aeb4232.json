{"url": "https://www.ics.uci.edu/~eppstein/projects/pairs/Source/testbed/Sierpinski.cp", "content": "// Test of closest pair algorithms\n// David Eppstein, UC Irvine, 19 Apr 1997\n//\n// Generate points in generalized Sierpinski tetrahedron\n\n#include \"Sierpinski.h\"\n#include \"Random.h\"\n#include \"Error.h\"\n\n#define DBL_MAXUL (256.0 * 256.0 * 256.0 * 256.0 - 1.0)\n\nstatic inline double DoubleAbs(double a)\n{\n\tif (a < 0) return -a;\n\telse return a;\n}\n\nSierpinskiTetrahedron::SierpinskiTetrahedron(unsigned long npoints, int dd)\n\t: PointSet(npoints), points(new double[dd*npoints]), d(dd)\n{\n\tunsigned long * p = new unsigned long[d+1];\n\tif (points == 0) error(\"SierpinskiTetrahedron: unable to create points\");\n\tfor (long i = 0; i < npoints; i++) {\n\t\tunsigned long xx;\n\t\tint t;\n\t\tp[0] = 0;\n\t\tfor (int j = 1; j <= d; j++) {\n\t\t\tif ((j & (j-1)) == 0) {\n\t\t\t\txx = RandomLong();\t// 2^k? reset xx\n\t\t\t\tt = j;\t\t\t\t// and remember power of two\n\t\t\t}\n\t\t\tp[j] = p[j-t] ^ xx;\n\t\t\tpoints[d*i+(j-1)] = (double) p[j] / DBL_MAXUL;\n\t\t}\n\t}\n\tdelete p;\n}\n\ndouble SierpinskiTetrahedron::operator() (point i, point j)\n{\n\tgDistances++;\n\tdouble total = 0;\n\tfor (int k = 0; k < d; k++) {\n\t\tdouble diff = points[d*i+k] - points[d*j+k];\n\t\ttotal += diff*diff;\n\t}\n\treturn total;\n}\n\nvoid SierpinskiTetrahedron::interact(point i, point j)\n{\n\tfor (int k = 0; k < d; k++)\n\t\tpoints[i*d+k] = points[j*d+k] = (points[i*d+k] + points[j*d+k])/2;\n}\n", "encoding": "ascii"}