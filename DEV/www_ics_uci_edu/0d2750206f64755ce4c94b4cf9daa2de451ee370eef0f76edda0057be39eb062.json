{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node227.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Creating Compound Terms</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Creating Compound Terms\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html4980 HREF=\"node228.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html4978 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html4972 HREF=\"node226.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html4982 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html4981 HREF=\"node228.html\"> Creating and Decomposing </A>\r\n<B>Up:</B> <A NAME=tex2html4979 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html4973 HREF=\"node226.html\"> Unification and Binding</A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION001945000000000000000> Creating Compound Terms</A></H2>\r\n<P>\r\n<A NAME=globalstack>&#160;</A>\r\n<A NAME=tex2html782 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  offers the user the possibility to create compound terms on the\r\nglobal stack\r\n<A NAME=3512>&#160;</A>\r\nand unify them with Prolog terms.\r\nThe <i> global stack</i> is the place where the system stores all compound terms\r\n<A NAME=3514>&#160;</A>\r\nand strings to which Prolog variables are bound\r\n(recorded terms, arrays and asserted clauses are stored elsewhere).\r\nCare must be taken when manipulating the global stack,\r\nsince the system has no means of checking the correctness\r\nof user's data or data changes.\r\nThe use of the global stack should therefore be an exception,\r\nas most of the compound terms can be much easier manipulated\r\nby regular Prolog procedures.\r\nThe global stack is accessed using the pointer <blockquote> <PRE>pword        *TG;\r\n</PRE></blockquote>\r\n<A NAME=3517>&#160;</A>\r\nwhich points to the global stack top (to the first unused item).\r\nThe global stack grows towards higher addresses.\r\n<P>\r\n<b> CAUTION</b>: Two points must be taken care of when using the global stack,\r\notherwise the integrity of the whole system is no longer guaranteed.\r\n<UL><LI> Due to the possible interrupts, the area behind the\r\nglobal stack top must not be accessed, since any information\r\nstored there is likely to be overwritten by the interrupt handler.\r\nBefore storing any information on the global stack top,\r\nthe pointer <tt> TG</tt> must be incremented to reserve\r\nthe required amount of space.\r\n<LI> All space that is allocated on the global stack (by incrementing\r\nthe stack pointer TG) must be initialised with valid Prolog data,\r\notherwise the garbage collector can not work.\r\n</UL>\r\nTo push items on the global stack, e.g. a structure <i> p(1.25, [])</i>\r\nuse the following sequence:\r\n<blockquote> <PRE>pword *pw = TG;                 /* pointer to the structure    */\r\nPush_Struct_Frame(Did(&quot;p&quot;, 2)); /* allocate 3 pwords and       */\r\n                                /* initialize the functor      */\r\nMake_Float(&amp;pw[1], 3.0);        /* fill in the first argument  */\r\nMake_Nil(&amp;pw[2]);               /* fill in the second argument */\r\n</PRE>\r\n</blockquote>\r\nFor illustration, here follows the code for the external procedure\r\n<b> transform/2</b> whose input is a structure and whose output\r\nargument is unified with a structure which is identical to the input\r\none except that is has one more argument at the end which is a free\r\nvariable:\r\n<A NAME=3527>&#160;</A>\r\n<blockquote> <PRE>int\r\np_transform(val1, tag1, val2, tag2)\r\nvalue             val1, val2;\r\ntype              tag1, tag2;\r\n{\r\n    pword     *p = TG;\r\n    word32    did1;       /* the DID of the structure */\r\n    int       arity;      /* its arity */\r\n    int       i;\r\n\r\n    /* the first argument must be a structure */\r\n    Check_Structure(tag1);\r\n    /* the second argument must be a structure or a variable */\r\n    Check_Output_Structure(tag2);\r\n    /* val1 points to the functor */\r\n    did1 = val1.ptr-&gt;val.did;\r\n    arity = DidArity(did1);\r\n    /* reserve space for the functor and (arity + 1) args */\r\n    Push_Struct_Frame(Did(DidName(did1), arity + 1));\r\n    /* copy the arguments */\r\n    for (i = 1; i &lt;= arity; i++)\r\n    {\r\n        p[i] = val1.ptr[i];\r\n    }\r\n    /* now create the free variable in the last argument */\r\n    Make_Var(&amp;p[arity + 1]);\r\n    /* and unify with the second argument */\r\n    Return_Unify_Structure(val2, tag2, p);\r\n}\r\n</PRE>\r\n</blockquote><BR> <HR><A NAME=tex2html4980 HREF=\"node228.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html4978 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html4972 HREF=\"node226.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html4982 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html4981 HREF=\"node228.html\"> Creating and Decomposing </A>\r\n<B>Up:</B> <A NAME=tex2html4979 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html4973 HREF=\"node226.html\"> Unification and Binding</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}