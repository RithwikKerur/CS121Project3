{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node142.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Term I/O</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Term I/O\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html3954 HREF=\"node143.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html3952 HREF=\"node139.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html3948 HREF=\"node141.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html3956 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html3955 HREF=\"node143.html\"> String Streams</A>\r\n<B>Up:</B> <A NAME=tex2html3953 HREF=\"node139.html\"> Communication with Streams</A>\r\n<B> Previous:</B> <A NAME=tex2html3949 HREF=\"node141.html\"> Token I/O</A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION001143000000000000000> Term I/O</A></H2>\r\n<P>\r\nThe <b> read/1, 2</b> and <b> write/1, 2</b> predicates  correspond to\r\n<A NAME=2161>&#160;</A>\r\n<A NAME=2162>&#160;</A>\r\n<A NAME=2163>&#160;</A>\r\n<A NAME=2164>&#160;</A>\r\nthe third way of looking at streams.\r\nThe goal <blockquote> <PRE>read(Term)\r\n</PRE></blockquote> reads the next term from the current input\r\nstream and unifies it with <i> Term</i>. The input term must be followed by a\r\nfull stop, that is, a '.' character followed by a layout\r\ncharacter (tab, space or newline) or by the end of file.\r\nIf end of file has been reached then\r\nan exception is raised, the default handler causes the atom\r\n<i> end_of_file</i> to be returned.\r\nA term may be read from a stream other than the current input stream by\r\nthe call <blockquote> <PRE>read(Stream, Term)\r\n</PRE></blockquote> which reads the term from the\r\nnamed stream.\r\nThe goal <blockquote> <PRE>write(Term)\r\n</PRE></blockquote> writes <i> Term</i> to the current output stream.\r\n<A NAME=2174>&#160;</A>\r\n<A NAME=2175>&#160;</A>\r\nThis is done by taking the current operator declarations into account. Output\r\nproduced by the <b> write/1, 2</b> predicate is not (necessarily) in\r\na form suitable for subsequent input to a Prolog program using the <b> read/1</b>\r\npredicate, for this purpose <b> writeq/1, 2</b> is to be used.\r\n<A NAME=2179>&#160;</A>\r\n<A NAME=2180>&#160;</A>\r\nThe goal <blockquote> <PRE>write(Stream, Term)\r\n</PRE></blockquote> writes <i> Term</i> to the\r\nnamed output stream.\r\nThe predicate <blockquote> <PRE>display(Term)\r\n</PRE></blockquote>\r\n<A NAME=2186>&#160;</A>\r\noutputs the <i> Term</i> on the current output stream in the functor syntax,\r\nignoring possible operator declarations.\r\nThe predicate <blockquote> <PRE>readvar(Stream, Term, VarList)\r\n</PRE></blockquote>\r\n<A NAME=2190>&#160;</A>\r\ncan be used to read a term from the specified stream\r\nand obtain the list of variable names contained in the <i> Term</i>.\r\n<i> VarList</i> is a list of pairs <tt> [VarName<tt></tt>Var]</tt> where\r\n<i> VarName</i> is the atom corresponding to the variable name\r\nand <i> Var</i> is the corresponding variable.\r\n<P>\r\nWhen the flag <tt> variable_names</tt> is switched off,\r\n<A NAME=2197>&#160;</A>\r\nthe output predicates are not able to write free variables\r\nin their source form, i.e. with the correct variable names.\r\nThen the variables are output in the form\r\n<blockquote> <PRE>_aN\r\n</PRE></blockquote>\r\nwhere <tt> a</tt> is a character which depends on the memory area\r\nwhere the variable is located or on its properties:\r\n<tt> l</tt> for a local variable, <tt> g</tt> for a global variable or a metaterm.\r\n<A NAME=2203>&#160;</A>\r\n<tt> N</tt>\r\nis a number.\r\n<A NAME=2205>&#160;</A>\r\n<P>\r\nIt is possible to pass any input stream to the <A NAME=tex2html489 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  compiler\r\nusing the predicate \r\n<A NAME=2206>&#160;</A>\r\n<blockquote> <PRE>compile_stream(Stream)\r\n</PRE></blockquote>\r\nand it is of course possible to mix the compilation with\r\nother input predicates.\r\nIf, for example, the file <b> a.pl</b> contains the following data\r\n<blockquote> <PRE>p(1).\r\np(2).\r\nend_of_file.\r\np(3).\r\n</PRE></blockquote>\r\nit is possible to execute\r\n<blockquote> <PRE>[eclipse 1]: open('a.pl', read, a).\r\n\r\nyes.\r\n[eclipse 2]: read(a, X).\r\n\r\nX = p(1)\r\nyes.\r\n[eclipse 3]: compile_stream(a).\r\na.pl    compiled 40 bytes in 0.00 seconds\r\n\r\nyes.\r\n[eclipse 4]: read(a, X).\r\n\r\nX = p(3)\r\nyes.\r\n[eclipse 5]: p(X).\r\n\r\nX = 2\r\nyes.\r\n</PRE></blockquote>\r\nTo specify a position in the file\r\nto write to or read from, the predicate <b> seek/2</b> is provided. The\r\n<A NAME=2215>&#160;</A>\r\ncall <blockquote> <PRE>seek(Stream, Pointer)\r\n</PRE></blockquote> moves the current position in the\r\nfile (the 'file pointer') to the offset <i> Pointer</i> (a number specifying\r\nthe length in bytes) from\r\nthe start of the file.\r\nIf <i> Pointer</i> is the atom <i> end_of_file</i> the\r\ncurrent position is moved to the end of the file.\r\nHence a file could be open in <tt> append</tt> mode using\r\n<blockquote> <PRE>open(File, update, Stream), seek(Stream, end_of_file)\r\n</PRE></blockquote>\r\nThe current position in a file may be found by the predicate <b> at/2</b>.\r\n<A NAME=2225>&#160;</A>\r\nThe call <blockquote> <PRE>at(Stream, Pointer)\r\n</PRE></blockquote> unifies <i> Pointer</i> with the current\r\nposition in the file.\r\nThe predicate\r\n<blockquote> <PRE>at_eof(Stream)\r\n</PRE></blockquote>\r\nsucceeds if the current position in the given stream\r\nis at the file end.\r\n<P>\r\n<BR> <HR><A NAME=tex2html3954 HREF=\"node143.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html3952 HREF=\"node139.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html3948 HREF=\"node141.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html3956 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html3955 HREF=\"node143.html\"> String Streams</A>\r\n<B>Up:</B> <A NAME=tex2html3953 HREF=\"node139.html\"> Communication with Streams</A>\r\n<B> Previous:</B> <A NAME=tex2html3949 HREF=\"node141.html\"> Token I/O</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}