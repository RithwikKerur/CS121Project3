{"url": "https://www.ics.uci.edu/~eppstein/261/f03-outline/18.summary", "content": "Problems and solutions\n    Sequence of items\n\tLinked list\n\tResizable vector\n\n    Dictionary\n\tHash table\n\tVarious binary search trees\n\tTrie and compressed trie (strings)\n\tFlat tree and fusion tree (integers)\n\n    Priority queue\n\tBinary heap, k-ary heap\n\tLeftist heap\n\tFibonacci heap\n\tFlat tree and fusion tree (integers)\n\n    Successor queries\n\tVarious binary search trees\n\t    Average case analysis of random insertion order\n\t    Treap (randomize insertion order for nonrandom input sequence)\n\t    Red-black tree\n\t    BB[alpha] tree\n\t    Splay tree\n\tSkip list\n\tFlat tree and fusion tree (integers)\n\n    Range queries on point data\n\tAugmented binary search trees\n\tRange trees\n\t(very briefly) kD-trees and quadtrees\n\tRecursive data structures with BB[alpha]-trees\n\tRange minimization structure\n\n    Range queries on interval data\n\tInterval trees\n\tSegment trees\n\tRecursive structures with segment trees\n\n    String searching\n\tSuffix trees\n\n    Structure in trees\n\tNavigation in trees (parent pointers, child pointers, both)\n\tCutting and linking trees\n\tLeast common ancestors\n\n    Disjoint sets and incremental connectivity\n\tUnion-find\n\tOffline union-find\n\nGeneral techniques\n    Find a way to transform the problem into a tree\n\t(e.g. Cartesian tree for range min)\n    Fractional cascading (speed up repeated binary searches)\n    Persistence\n    Micro-macro structure\n\t(precompute solutions for small data subsets, organize overall data\n\twith less space-efficient structure with one data item per subset\n\tas in range minimization data structure)\n", "encoding": "ascii"}