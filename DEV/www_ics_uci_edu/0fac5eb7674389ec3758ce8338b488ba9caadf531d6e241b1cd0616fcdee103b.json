{"url": "https://www.ics.uci.edu/~thornton/ics184/LabManual/Assignment6/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course2.css\" type=\"text/css\" />\n\n<title>ICS 184 / EECS 116 Summer 2006, Assignment #6</title>\n</head>\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 184 / EECS 116 Summer 2006 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../LabManual\">Lab Manual</a> |\n<a href=\"../../LabManual/UsingNewsgroup.html\">ics.184 newsgroup</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 184 / EECS 116 Spring 2006<br />\n   Assignment #6 (extra credit)</p>\n\n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Sunday, September 3, 11:59pm</i></p>\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>Up to this point in the quarter, we've focused our energies on learning about database management systems as singular software systems.  Our interaction with databases has been direct: issuing SQL statements directly to the database server and receiving results, using the <b>mysql</b> command-line client.  To us, the database has stood alone thus far.</p>\n\n<P>Directly issuing SQL statements is one important use of a database, but most practical uses of databases are in larger applications, with the database playing the role of storing and finding data, while other aspects of the application, such as the user interface and business rules, are handled elsewhere.  For example, a <i>client-server</i> application is one in which a program written in a \"conventional\" programming language such as Java provides a user interface that allows users to view and manipulate data in the database in a natural way, rather than being required to write SQL statements.  Another example is a web-based application, in which a specialized web server generates web pages dynamically using information stored in a database, then serves them up to browsers in response to web requests.</p>\n\n<p>The tricky part of connecting to a database from an application is that information needs to be sent between the application and the database.  Since the database runs outside of the application, this isn't just a matter of calling some predefined method or function; binary data needs to be sent between the application and the database.  This requires an agreement about the format of that data &mdash; how does the application send an SQL statement and how does it interpret the result?  These details can be cumbersome, so it's wise for them to be hidden beneath a simpler interface whenever possible.</p>\n\n<p>Java hides these details beneath an API called <i>JDBC</i>, which allows Java programs to talk to various database servers in a relatively portable way, by providing a set of interfaces to objects like database connections, SQL statements, and results.  The interfaces are implemented by <i>JDBC drivers</i>, which handle the specific details about how to connect to a particular database server, taking this burden off of Java programmers' shoulders.  A Java program can then connect to a database without any intimate knowledge of how the connection is to be managed; in many cases, the Java program need not even be aware of what kind of database server it's connecting to!</p>\n\n<p>In this assignment, I'd like you to engage in a brief exploration of client-server database applications, by writing a Java program that uses JDBC to connect to a MySQL database and performs a variety of operations on it.  In lecture, we went through a demonstration of how to use the JDBC API; completed and commented versions of the code examples from the in-lecture demonstration are available at <a href=\"../../JDBCCodeExamples.zip\">this link</a>.  Be sure you've read and understand the code examples before proceeding with this assignment.  You'll also likely need to refer to the <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/index.html\">Java 5 API documentation</a> as you work, as you will inevitably discover that you need to find details that weren't covered in lecture.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Downloading and installing the JDBC driver for MySQL</p>\n\n<p class=\"subtitle\">Downloading and extracting Connector/J</p>\n\n<p>The JDBC driver for MySQL is called Connector/J, the latest version of which (3.1.13) is provided at <a href=\"http://dev.mysql.com/downloads/connector/j/3.1.html\">this link</a>.  There are two different downloads available at this link; they are the same files archived in two different formats (.zip and .tar.gz).  If you've never heard of tar.gz before, it's probably best to download the zip version.  Contained within the archive is the JAR that comprises the driver, along with documentation, and the driver's complete source code.</p>\n\n<p>Extract the archive to a folder of your choosing.  I'll assume in the rest of this section that you're running Windows and that you extracted it to the folder C:\\MySQLConnectorJ.</p>\n\n<p class=\"subtitle\">What's a JAR?</p>\n\n<p>There are two ways to distribute compiled Java code: as a set of .class files, or in a JAR (Java ARchive).  A JAR is actually nothing special; it's a bunch of .class files (and whatever else you want to include) stored in Zip format, but with the file extension .jar.  The Java Virtual Machine knows how to open up JARs and find classes within them for you automatically, provided that you tell it which JARs to open, which makes JARs a nice way to distribute a set of classes that implements some functionality.  (There are even ways to make JARs \"executable,\" so that you can double-click them to run programs stored inside.  That functionality isn't important in this assignment, though.)</p>\n\n<p class=\"subtitle\">Adjusting your CLASSPATH to include Connector/J</p>\n\n<p>Connector/J is provided as a JAR, but the Java Virtual Machine won't know to look inside the JAR for its classes unless you tell it to.  Just as you have to tell Java which folders it should look in when it tries to load a Java class, you also have to specifically tell it which JARs to open, as well.  Before you'll be able to use the driver in one of your Java programs, you'll need to add Connector/J to your CLASSPATH environment variable.  Add this entry to your CLASSPATH:</p>\n\n<pre>\n    C:\\MySQLConnectorJ\\mysql-connector-java-3.1.13-bin.jar\n</pre>\n\n<p>(If you installed the driver somewhere other than where I suggested, be sure to specify your installation folder instead of mine.)</p>\n\n<p>If you're not sure what it means to add an entry to your CLASSPATH environment variable, or if you haven't installed Java on your computer at all, read through my <a href=\"../SettingUpJava.html\">document that explains how to install and configure Java on your computer</a>.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Creating the database</p>\n\n<p>Your program will need to connect to the database that manages information about the hypothetical car dealership corporation described in <a href=\"../Assignment1\">Assignment #1</a> and <a href=\"../Assignment2\">Assignment #2</a>.  (All of the tables are included, though you may find that you don't need to use all of them in this assignment.)  Before the program can connect to it, of course, the database will need to exist.  As is customary in programs like this one, the program is not in charge of creating the database from scratch; it is instead assumed to exist when the program is run for the first time.  That means it's necessary to start by creating the database.  It's also important to set up a user account for your program to use when connecting to it.  Below is a description of the steps you should take to set up your database.</p>\n\n<p class=\"subtitle\">Step 1: Creating a user account for your program</p>\n\n<p>It's often a good idea for an application to have its own special user account for connecting to a database; this allows the database administrator to carefully control the set of privileges that the application will have available to it, which might be different than the privileges that should be given to other applications or human users.</p>\n\n<p>From our perspective in this course, it's also good for us to agree on a username and password for your program to use, so that we'll be able to grade your programs by connecting them to our test database.  For this reason, I'm requiring you to use the following login information when connecting to the database from your program:</p>\n\n<blockquote>\n    Username: ics184jdbc<br />\n    Password: password\n</blockquote>\n\n<p>To create this user account, start up the <b>mysql</b> command-line client, logging in with your root account, then issue the following command:</p>\n\n<pre>\n    CREATE USER ics184jdbc IDENTIFIED BY 'password';\n</pre>\n\n<p>Now, quit the <b>mysql</b> command-line client and you've got your user account.</p>\n\n<p class=\"subtitle\">Step 2: Creating the database</p>\n\n<p>I'm providing an <a href=\"automobile.sql\">SQL script</a> that creates the version of the <b>automobile</b> database that you'll need for this assignment.  It also grants full privileges to the <b>ics184jdbc</b> user account that we created in Step 1.  This is critical, since your program will be logging into the database as <b>ics184jdbc</b> and will need sufficient privileges to do so.</p>\n\n<p>Since the <b>ics184jdbc</b> account won't have sufficient privileges to create a new database, you'll need to execute this script using your root user account, as you did in previous assignments.</p>\n\n<p>I haven't included any test data in my SQL script, though you'll probably want to include some, so that you can test your program.  A good solution to this problem is to reuse the test data you developed for <a href=\"../Assignment2\">Assignment #2</a>.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The program</p>\n\n<p>For this assignment, you're required to write a Java program that uses JDBC to connect to the database created in the previous section.  It should provide a console-mode user interface that allows the user to perform the following operations:</p>\n\n<ul>\n  <li><b>List the cars in a dealership's inventory</b>.  The user specifies the ID of the dealership, and the program lists the cars in that dealership's inventory.  For each car, the VIN, make, model, year, and mileage are listed.</li>\n  <li><b>Add a new salesperson to the database</b>.  The user specifies the name of the new salesperson, then the program adds the salesperson, figuring out a new ID for the salesperson.</li>\n  <li><b>Add a car to the inventory of a dealership</b>.  The user specifies the relevant information about the car (VIN, make, model, year, mileage, asking price, and invoice price) and the ID of the dealership, then adds the car to the dealership's inventory.</li>\n  <li><b>Generate a sales report for a month</b>.  The user specifies the number of the month (1 = January, 2 = February, etc.) and the year, and the program generates a sales report for that month, which lists the following information for each dealership in a readable format:\n    <ul>\n      <li>Dealership ID</li>\n      <li>Dealership name</li>\n      <li>Dealership city and state</li>\n      <li>Number of cars sold</li>\n      <li>Total gross sales (which is the sum of the sale prices of all cars sold by that dealership)</li>\n      <li>Total profit (which is the difference between the total of the sale prices and the total of the invoice prices for all cars sold by that dealership)</li>\n    </ul>\n  </li>\n</ul>\n\n<p>Do not use stored procedures or functions to implement this functionality; the program should issue SQL statements on its own.  You may assume that the program has complete control over the database; don't worry about the possibility of concurrent transactions causing problems.</p>\n\n<p>In the event of an unexpected SQLException (such as one caused by an inability to connect to the database), it's okay for your program to print a stack trace and terminate, but you should perform error-checking to prevent crashes whenever possible.  For example, when adding a car to a dealership's inventory, if the specified dealership ID refers to a non-existent dealership, the program should print an error message, rather than crashing.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>You must submit all of the <b>.java</b> files that comprise your program.  Please do not turn in the <b>.class</b> files, or other files generated by your development environment.  Also, it's not necessary (or even desirable) to submit your SQL script, since we'll be using our own script to create a database for use in testing your program.</p>\n\n<p>Follow <a href=\"../SubmittingAssignments.html\">this link</a> for a discussion of how to submit your assignment.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the assignment that you want graded.  We won't regrade your assignment simply because you submitted the wrong version by accident.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Originally written by Alex Thornton, Spring 2006.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}