{"url": "https://www.ics.uci.edu/~jacobson/ics21/LabManual/10-Assignment5.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n    \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<meta name=\"Generator\" content=\"Microsoft Word 97/98\">\n<title>A Donation to the Music Archive</title>\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\">\n</head>\n\n<body>\n\n<div class=\"title\">\n<center>\n<h2>Revising the Music Archive Program</h2>\n<h4>Lab Assignment 5<br>\nto prepare for Lab Exam 5</h4>\n</center>\n</div>\n\n<p>This assignment gives further practice in code reuse, and has you apply simple abstract classes, abstract methods, inheritance and polymorphism to organize data.</p>\n\n<div class=\"section\">\n<hr>\n<h3>Program requirements</h3>\n</div>\n\n<p>Figures! Just as you get the music archive ordered-by-title report up and running, you&#146;re informed that more information about each item in the archive is going to be collected&#15, that it is going to vary depending upon the type of music item, and that it is to appear, labeled and nicely formatted, as part of the report. (By the way, this changing of specifications while a project is in development happens <i>a lot</i> in the world of programming.)</p>\n\n<p>In particular,\n<ul>\n<li><p>First off, nothing about the current information, its format, or its order is changing; what is changing is that each music file item will have additional information after the media code, on the same line. The additional field or fields will be separated from the media code (and each other) by the same &#147;; &#148; (semicolon followed by a space) delimiter used on the rest of the line. For example, a compact media music item would be \n<p><i>accession number</i>; <i>title</i>; C; <i>number of tracks</i>; <i>year released</i></p></li>\n<li><p>If the item is compact media, two fields follow the media code: (1) the number of tracks on the media, a positive integer, and (2) the year the item was released, a positive four-digit integer starting with 19 or 20. </p></li>\n<li><p>If the item is a record, two fields follow the media code: (1) the label (which company distributed the record), a string of at least 1 character, and (2) the speed at which the record is to be played, a positive two-digit integer that is usually (but not always) 33, 45, or 78.</p></li>\n<li><p>If the item is a cylinder, one field follows the media code: the maker (manufacturer) of the cylinder, a string of at least 1 character. </p></li>\n<li><p>If the item is on paper, one field follows the media code: the number of pages the item has, a positive integer. </p></li>\n</ul>\n</p>\nAs before, this revised program is to print out a report, in order by title, of all the music items, with all of one item&#146s information per line, but with labels as part of the printed text so that the reader can easily tell what information is what; as before, the line  should also be easy to read and nicely formatted. For example,  a line reading \n<br><br><div align=\"center\">R12129  Roger Miller Classics  C  18  2002</div>\n<br><br>is not very easy to understand (and what would not meet the requirements of this assignment). Writing out the line as, say,\n<br><br><div align=\"center\">Accession#: R12129 |  Title: Roger Miller Classics | Media:  C | # of Tracks:  18 | Yr. Released: 2002</div>\n<br><br>does make it easy to tell what information is what (and does meet the requirements of this lab). \n\n<p>The program is also to print the same counts to the console window, following the same format requirements, as was done in Assignment 4.</p>\n<div class=\"section\">\n<hr>\n<h3>Technical details</h3>\n</div>\n<p>The input file given to you will still be a text file, called <font class = \"codeFaceSmall\">music.txt</font>, with each item&#146;s information on one line in the format described above. \nEach line will end, as before, with the standard PC end-of-line mark, a carriage return character followed by a line feed character.</p>\n\n<p>  Again, the music file will have been run though a testing program to ensure its format is correct and that its fields follow the specifications given for them. You can be confident that the music file will be in the correct format to be fed into your program. The MusicFile class has been revised so it properly processes the revised music file; it has the same routines as before. Again, the routines are documented, this time in the file <font class = \"codeFaceSmall\">MusicArchiveDoc.txt</font>, which is provided to you in the Eclipse project for this assignment. The only difference is that MusicFile&#146s <font class = \"codefacesmall\">readItem()</font> returns an ArrayList with as many cells as necessary to hold the item&#146;s information, rather than always returning an ArrayList with three cells.\n</p>\n\n<p>Music items, of course, still exist, and all music items still  have an accession number, title, and media code. But now, items have additonal information that differs by the kind of media. To encapsulate this situation in a nice way, we still have the MusicItem class, which stores all information and methods that apply to all music types. Then, from MusicItem, we extended specialty classes, one for each media type, that contain (in addition to what is inherited from MusicItem) the fields and methods needed to store and manipulate the supplemental information particular to that kind of media. Read the comments in the MusicItem file for details on these extended classes.</p>\n\n<p>Some of the supplemental information is  conceptually numeric, for example, the number of tracks on a CD, but this information is encoded as a string in order for it to be placed in the music information String ArrayList. To obtain the numeric equivaluent of this encoded string, use the <font class = \"codefacesmall\">parseInt</font> method, a static method in Integer that takes a string and returns its integer equivalent (or throws an exception if the string cannot be converted to an integer). For instance, to obtain the number of tracks on a CD from the music item's information array, you would say something like <font class = \"codefacesmall\">numberOfTracks =   Integer.parseInt(item.get(NUMBER_OF_TRACKS_POSITION))</font>. </p>\n\n<p>The index is to be placed into a text file still called <font class = \"codeFaceSmall\">index.txt</font>. It will have the information about each musical item on one line, nicely formatted, and be in alphabetical order by title. The IndexFile method <font class = \"codefacesmall\">writeItem() </font> has been modified so it calls  the method <font class = \"codefacesmall\">displaySupplementalInfo()</font> , which returns a String of the supplemental data formatted for printing on the report;  <font class = \"codefacesmall\">writeItem()</font> plaes that information in the appropriate place on the report. The format of the supplemental information is up to you; make it easy to read.</p>\n\n<p>As before, the details of writing to and formatting the lines of the index file have been encapsulated in the class IndexFile, which is being made available to you as a class file. Its public methods are also documented in <font class = \"codeFaceSmall\">MusicArchiveDoc.txt</font></p>\n\n<p>The media category code constants are now in the MusicItem class.</p>\n\n<p>All other aspects of the program are the same as before; all that changes is the input data and its appearance on the by-title report. So, the Bucket and MusicList classes can be used as is from the previous assignment, since they already meet this assignment&#146;s requirements.. These two classes are provided to you as class files, and documented in <font class = \"codeFaceSmall\">MusicArchiveDoc.txt</font>. Some methods in MusicItem and MusicManager also can be left unchanged from the previous assignment, since they are not affected by the presence of additional music information; feel free to reuse that code from Lab Assignment 4.</p>\n\n<p>Archive personnel are still compiling the revised list of music, so you will have to test your program using test files. We&#146;ve provided one for you, again called <font class = \"codeFaceSmall\">music.txt</font>; it, too, is in the project file for this assignment. You should also test your program on other test lists you put together, in the manner described in the previous assignment.</p>\n\n<p>The files discussed above, along with, as usual, a number of Java skeleton programs, are in the zipped Eclipse project file\n<a href=\"//www.ics.uci.edu/~jacobson/ics21/LabManual/LabFiles/21Lab5.zip\"><font class = \"codefacesmall\">21Lab5.zip</font></a>. Using the same procedure that you followed previously, unzip the file and import this project into your Eclipse workspace. Do look over the provided code carefully to get a good feel for what the various classes accomplish, and particularly for how the various subclasses of MusicItem work together to deal with multiple media types. </p>\n</ul>\n\n\n<div class=\"section\">\n<hr>\n<h3>About Lab Exam 5</h3>\n</div>\n\n<p>Lab Exam 4 will be very similar, but perhaps not identical, to the program you have been asked to write for this assignment. The lab exam will ask you to complete one or more of the following methods:</p>\n\n<ul>\n<li>The CompactMedia constructor</li>\n<li>CompactMedia.displaySupplementalInfo</li>\n<li>The VinylRecord constructor</li>\n<li>VinylRecord.displaySupplementalInfo</li>\n<li>The Paper constructor</li>\n<li>Paper.displaySupplementalInfo</li>\n<li>The WaxCylinder constructor</li>\n<li>WaxCylinder.displaySupplementalInfo</li>\n<li>MusicManager.makeMusicIndex</li>\n</ul>\n\n<hr>\n<div class=\"history\">\n<br>Written by Norman Jacobson for ICS 21 Fall 2006, November 2006.\n<br>Minor edits for clarity, by Norman Jacobson, December 2006 and September 2008.\n<br>Edited for clarity and to reflect use of Eclipse, by Norman Jacobson, September 2009.\n<br>Minor typos fixed, by Norman Jacobson, September 2010.\n<br>Revised to require labeling of values in supplemental information string, and to change name\n<br>&nbsp;&nbsp;of method doing so to reflect this requirement, by Norman Jacobson, December 2010.\n<br>Added text to explain need for, and use of, parseInt(), by Norman Jacobson, January, 2012.\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}