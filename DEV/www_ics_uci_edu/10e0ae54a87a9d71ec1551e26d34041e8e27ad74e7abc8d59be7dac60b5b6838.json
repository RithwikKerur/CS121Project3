{"url": "https://www.ics.uci.edu/~eppstein/ca/b35s236/logic.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html>\n<head>\n<title>B35/S236 Glider Logic</title>\n</head>\n<body bgcolor=\"#FFFFFF\" text=\"#000000\">\n<h1><a href=\"/~eppstein/ca/b35s236/\">B35/S236</a></h1>\n\n<h2>Glider Logic</h2>\n\nWe can build logic circuits out of several elements: <a href= \n\"guns.html\">guns</a> to create constant-one signals; <a href= \n\"react.html\">vanishing reactions</a> used as \"a and not b\" gates\n(which are sufficient to build up all other boolean formulas);\neaters to delete stray gliders; <a href=\"guns.html\">turns</a> to\nconnect and resynchronize signal paths; and two-to-one or\ntwo-to-two <a href=\"react.html\">glider reactions</a> to copy\nsignals. \n\n<p>The only remaining ingredient for\n<a href=\"http://citeseer.nj.nec.com/durand98game.html\">universality</a>\nis some kind of\nmemory. Dean suggests a sliding block memory, based on reactions in\nwhich glider salvos push or pull a block two squares:</p>\n\n<div align=\"CENTER\">\n<table cellpadding=\"15\">\n<tr align=\"CENTER\" valign=\"MIDDLE\">\n<td><a href=\"block-push.lif\"><img src=\"block-push.gif\" width=\"95\"\nheight=\"43\" alt=\"3 gliders push a block 2 units\"></a></td>\n<td><a href=\"block-pull.lif\"><img src=\"block-pull.gif\" width=\"163\"\nheight=\"47\" alt=\"4 gliders pull a block 2 units\"></a></td>\n</tr>\n</table>\n</div>\n\n<p>To detect a block in the zero position, we shoot a glider at\nit:</p>\n\n<div align=\"CENTER\"><a href=\"block-detect.lif\"><img src= \n\"block-detect.gif\" width=\"27\" height=\"35\" alt=\n\"glider removes a block\"></a></div>\n\n<p>If the glider disappears we know the block was at zero; we then\nrebuild the block using a head-on collision:</p>\n\n<div align=\"CENTER\"><a href=\"block-synth.lif\"><img src= \n\"block-synth.gif\" width=\"31\" height=\"39\" alt=\n\"2 gliders form a block\"></a></div>\n\n<p>I prefer a delay line memory to a sliding block, for reasons of\ncomputational efficiency. The best version of this I've been able\nto set up involves reflecting salvos of gliders off the back of a\npair of <a href=\"glider.html\">c/3 spaceships</a>:</p>\n\n<div align=\"CENTER\"><a href=\"delay-line.lif\"><img src= \n\"delay-line.gif\" alt=\"glider packets reflect from a c/3 spaceship\"\nwidth=\"395\" height=\"131\"></a></div>\n\n<p>One could instead base a delay line on a reaction with the c/5\nspaceship that turns a glider into a block, but that would require\nmore careful synchronization.</p>\n\n<p>These all haven't been put together into an explicit universal\ncomputer, but I think it should be clear that such a computer\nexists.</p>\n\n<hr>\n<p><a href=\"/~eppstein/ca/b35s236/\">B35/S236</a> -- <a href= \n\"/~eppstein/ca/\">Cellular Automata</a> -- <a href=\"/~eppstein/\">D.\nEppstein</a> -- <a href=\"/\">UCI Inf. &amp; Comp. Sci.</a></p>\n</body>\n</html>\n\n", "encoding": "ascii"}