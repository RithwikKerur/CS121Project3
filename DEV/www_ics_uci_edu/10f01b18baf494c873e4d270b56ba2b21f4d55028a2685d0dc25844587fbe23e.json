{"url": "https://www.ics.uci.edu/~jacobson/ics10A/LabManual/08-Assignment5.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n    \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n   <meta name=\"GENERATOR\" content=\"Mozilla/4.79 (Macintosh; U; PPC) [Netscape]\">\n   <title>Dialysis Database</title>\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\">\n</head>\n\n<body>\n\n<div class=\"title\">\n<center>\n<h2>Dialysis Database</h2>\n<h4>Assignment 5</h4>\n</center>\n</div>\n\n<p>In this exercise, you (begin to) develop a database of kidney dialysis patient data. You prepare a data entry screen to accept information about patients, calculate some results based on the entered data, and place selected results in a summary report. In doing these tasks, you become familiar with data processing chores common to scientific inquiry, learn to use a database as a reporting and investigative tool, and apply a number of the information representation and presentation concepts we&#146;ve discussed.</p>\n\n<div class=\"section\">\n<hr>\n<h3>What to Turn In</h3>\n</div>\n\n<p>&bull; An electronic copy of the database you created</p>\n\n\n<div class=\"section\">\n<hr>\n<h3>Grading</h3>\n</div>\n\nYou will be graded on the correctness, completeness, and presentation of your layouts, on how well you have structured your database (its representation), whether your database contains the required fields with correct attributes, and how well it checks for input errors.  Be prepared to show your database and layout in action, should the TA so request.\n\n\n<div class=\"section\">\n<hr>\n<h3>Background</h3>\n</div>\n\n<p>A person&#146;s kidneys can stop working, usually because of trauma (injury) or disease. Sometimes they will recover their function, but if they fail for good, the body can&#146;t remove the (poisonous) by-products that come from its own metabolic processes and, in a few days, the person dies. Rather grim. However, these days there are three major treatments that can compensate for the lethal effects of &#147;end stage renal disease&#148; (ESRD, for short).</p>\n\n<p>The first is &#147;hemodialysis.&#148; Two or more times a week, a person is &#147;hooked up&#148; to a dialysis machine. The patient&#146;s blood is routed through a complex system of filters and chemicals that remove the toxins. The treatment can take a few hours; it&#146;s mind-bogglingly expensive (hundreds of dollars per <i>treatment</i>); there&#146;s some danger of infection and side effects. It&#146;s also typically not quite as effective as the kidneys, so, over time, a patient often has to increase the number or duration of treatments. It&#146;s so psychologically taxing (imagine having your life literally and completely dependent upon a machine) that some patients need ongoing psychological counseling.</p>\n\n<p>The second is a kidney transplant. A healthy kidney, from a &#147;matched&#148; living or dead donor, is surgically placed into the ailing patient. This is major surgery, with its attendant dangers and costs, both to the dialysis patient and the live donor. The transplant patient is often on (expensive) drugs indefinitely to prevent the body from rejecting the kidney. The patient usually doesn&#146;t need dialysis for some time, but, eventually, often does (but not as often, typically, as before the transplant). Sometimes the new kidney stops functioning, and the patient must get another transplant or go back on full-blown dialysis.</p>\n\n<p>The third is a class of dialysis treatments where the patient wears a filtration system that&#146;s partially in the abdominal wall and partially external; the external &#147;bag&#148; is replaced every so often. It&#146;s fairly effective, but often not as effective as hemodialysis. Surgery, with its risks, is required to install the &#147;interior portion&#148; of the system.  Because of the external/internal connection and bag changing, major infection is a common problem, often resulting in hospitalization, and sometimes (at least temporary) discontinuance of this approach and a turning to hemodialysis or transplantation. The most common form of this dialysis technique is called CAPD. (That abbreviation often stands for the entire class of these techniques; so it will in this exercise). </p>\n\n<p>Because all these alternatives are so expensive, the federal government picks up the tab. The government mandates that dialysis treatment facilities and transplant hospitals keep detailed records on patients with ESRD: It is quite interested in tracking how its money is being spent, in detecting and stopping fraud, and in learning which treatments are the most cost-effective. The collected data is forwarded to the ESRD Networking Coordinating Council&#151;&#147;the Network,&#148; for short&#150;a national group of offices that insures the accuracy of and prepares reports about the data (among many other duties). </p>\n\n<p>Each Network office also typically prepares several monthly reports. Some provide profiles of the patient population or the facilities at which they were treated; others point up missing or inconsistent data, so the office can call the appropriate facility and clear up the problem. Each office sends some of these data to CMS to add to its national dialysis information bank.</p>\n\n<p>The Network and CMS databases are also available to qualified researchers. There&#146;s much about treating ESRD that is still unknown, especially about which treatments are most effective in which patient populations, an issue you can tackle, if you like, as optional work.</p>\n\n<p>For more information about the ESRD Networks and the data they collect, see <font face=\"Geneva\" size=2><a href= \"http://www.esrdnetworks.org\">www.esrdnetworks.org</a></font>; for more about CMS, see <font face=\"Geneva\" size=2><a href= \"http://www.cms.hhs.gov\"</font>www.cms.hhs.gov</a>.</p>\n\n<h4>About databases, briefly</h4>\n\n<p> A modern database contains the data itself, command sets (often called <i>macros</i>) that manipulate the data, <i>forms</i> that describe how data should appear on the screen, and <i>report layouts</i> that describe how data should appear on printed reports. The data is stored in one or more <i>tables. </i>Each row of a table is one <i>record</i> or <i>instance</i> of the data (in our case, a patient); each column is a <i>field</i> that contains an attribute that applies to all records (our fields include birth date and date of first dialysis, among others). Along with each field is information about its characteristics; for example, for birth date we might store that the field&#146;s name is DOB, that it is a date and that the date is stored in a particular format. Databases are designed so that it is straight-forward to do computations (say, grouping of records according to some criterion or counting the number of records that have a gender of female), retrieve subsets of information, sort records, and prepare reports.</p>\n\n<h4>The codebook</h4>\n\n<p>To maintain and analyze data properly, one must know its attributes. These include its data type, its size, and, if the data is a code for something, what each value of the code means. This information is commonly placed in a <i>codebook</i>. The table below shows the codebook for the dialysis information that will be stored in the database for this exercise. <i>dx</i> is an abbreviation for dialysis, <i>tx</i> for transplant. By the way, designing codebooks is a craft all its own, one with its own set of representational and presentational issues.</p>\n\n<table cellspacing=0 border=1 cellpadding=4 width=700>\n<tr><td width=\"11%\" valign=\"TOP\" >\n<u><p>Attribute Name</u></td>\n<td width=\"14%\" valign=\"TOP\">\n<u><p>Type</u></td>\n<td width=\"8%\" valign=\"TOP\">\n<u><p>Size</u></td>\n<td width=\"67%\" valign=\"TOP\">\n<u><p>Description</u></td>\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\">\nNetID</td>\n<td width=\"14%\" valign=\"TOP\">\nNumeric</td>\n<td width=\"8%\" valign=\"TOP\">\n5</td>\n<td width=\"67%\" valign=\"TOP\">\nidentification number; unique to each patient; assigned by the database as a new patient&#146;s data is entered</td>\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\">\nMissDeth</td>\n<td width=\"14%\" valign=\"TOP\">\nCharacter</td>\n<td width=\"8%\" valign=\"TOP\">\n1</td>\n<td width=\"67%\" valign=\"TOP\">\nX&nbsp;&nbsp;if a patient has died but the official death notice form \n<br>&nbsp;&nbsp;&nbsp;has not been received, \n<br>blank otherwise</td>\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\">\nDOB</td>\n<td width=\"14%\" valign=\"TOP\">\nText</td>\n<td width=\"8%\" valign=\"TOP\">\n8</td>\n<td width=\"67%\" valign=\"TOP\">\nDate of birth in MMDDCCYY format\n<br>MM = 99 when month is unknown\n<br>DD = 99 when day is unknown\n<br>CC = century; can only be 18, 19, 99 or 20;\n<br>&#9;99 = year of birth unknown\n<br>YY = remainder of year (blank if CC = 99)</td>\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\">\nGender</td>\n<td width=\"14%\" valign=\"TOP\">\nCharacter</td>\n<td width=\"8%\" valign=\"TOP\">\n1</td>\n<td width=\"67%\" valign=\"TOP\">\nX - unknown</p>\n<br>F - female</p>\n<br>M- male</td>\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\" >\nICDA5</td>\n<td width=\"14%\" valign=\"TOP\">\nNumeric</td>\n<td width=\"8%\" valign=\"TOP\">\n5</td>\n<td width=\"67%\" valign=\"TOP\">\nStandard, national disease codes; used to indicate disease that lead to dx</td>\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\" >\nDeathDate</td>\n<td width=\"14%\" valign=\"TOP\">\nText</td>\n<td width=\"8%\" valign=\"TOP\">\n8</td>\n<td width=\"67%\" valign=\"TOP\">\nDate of death in MMDDCCYY format\n<br>MM = 99 when month is unknown\n<br>DD = 99 when day is unknown\n<br>CC = century; can only be 19, 99 or 20;\n<br>99 = year of birth unknown\n<br>YY = rest of year (is blank if CC = 99)\n<br>entire date is blank if patient is alive\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\">\nDeathPri</td>\n<td width=\"14%\" valign=\"TOP\">\nNumeric</td>\n<td width=\"8%\" valign=\"TOP\">\n<p>2</FONT></td>\n<td width=\"67%\" valign=\"TOP\">\nPrimary cause of death\n<br>0 - patient alive</td>\n</tr>\n<tr><td width=\"100%\" valign=\"TOP\" colspan=4>\nThe information about each event is stored as a triplet: the event itself (as a code), the date it occurred, and the facility at which it occurred. Three triplets are stored. The first set is Event1, EvDate1 and EvFac1; the second is Event2, EvDate2 and EvFac2; the third is Event3, EvDate3, and EvFac3.</td>\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\">\nEvent<i>x</i></td>\n<td width=\"14%\" valign=\"TOP\">\nNumeric</td>\n<td width=\"8%\" valign=\"TOP\">\n2</FONT></td>\n<td width=\"67%\" valign=\"TOP\">\nEvent \n<br>0: no event\n<br>1: hemodialysis at a facility\n<br>4: hemodialysis at home\n<br>11 - 13: CAPD\n<br>16: recovered function\n<br>17: discontinued dx, patient&#146;s choice\n<br>31-39: tx\n<br>97: changed facility (only; no dx change)\n<br>99: death</td>\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\" >\nEvDate<i>x</i></td>\n<td width=\"14%\" valign=\"TOP\">\nText</td>\n<td width=\"8%\" valign=\"TOP\">\n8</td>\n<td width=\"67%\" valign=\"TOP\">\nDate event occurred, MMDDYY\n<br>MM = 99 when month is unknown\n<br>DD = 99 when day is unknown\n<br>CC = century; can only be 19, 20 or 99;\n<br> &nbsp;&nbsp:99 = year unknown\n<br>YY = 99 when year is unknown\n<br>if year is unknown, entire date is considered missing, \n<br>&nbsp;&nbsp;code 99999999.\n<br>entire date is blank if event not yet occurred</td>\n</tr>\n<tr><td width=\"11%\" valign=\"TOP\" >\nEvFac<i>x</i></td>\n<td width=\"14%\" valign=\"TOP\">\nText</td>\n<td width=\"8%\" valign=\"TOP\">\n6</td>\n<td width=\"67%\" valign=\"TOP\">\nCode for facility at which event occurred\n<br>999999 = unknown\n</tr>\n</table>\n<p>Note that dates are stored as text, rather than as a date type, because date types cannot handle a date with a missing month, day or year, or one that is blank. In real-world data, missing values pretty much always occur, and are important to consider in data analysis.</p>\n\n<div class=\"section\">\n<hr>\n<h3>Getting Help from Access</h3>\n</div>\n\n<p>We will be using Microsoft Access 2003 as our database tool.</p>\n\n<p>Before diving into Access, it is worthwhile to take a moment\nto introduce you to its extensive help features. This lab will guide you through\nthe process of developing your database, but there will likely be times where\nyou want more information. And learning to use help features is an important\ngeneral computing skill.</p>\n\n<p clas>Most features in Access print out help messages as you use\nthem. For example, when you enter the properties for database fields (see\nbelow), Access will print out a helpful message whenever you go to set a\nparticular property. In many\nplaces in Access, hitting the F1 key will bring up more help.</p>\n\n<p>Perhaps the easiest way to get general help is to use the &#147;Office\nAssistant,&#148; a context-sensitive help feature that is very easy to use,\nand really quite good at providing information. To activate it, just select Show\nthe Office Assistant from the Help menu. Click on the paperclick animation, then\ntype in your question and click on <font class = \"codeFaceSmall\">Search</font>.\n</p>\n\n<p>You can also use the other features under the <font class = \"codeFaceSmall\">Help</font> menu; in particular, the first option, <font class = \"codeFaceSmall\">Microsoft Office Access Help, </font>activates the\nfull-blown Access help feature. There are other help features available; do\nexperiment!</p>\n\n<div class=\"section\">\n<hr>\n<h3>Part I: Data Entry and Validation</h3>\n</div>\n<h4>Preparing for the data</h4>\n\n<p>The first task when creating\na database to hold new information is to create an empty database with the\nappropriate fields and associated attributes.</p>\n\n<p>&bull;  Launch Access. To do so, choose Programs from the<font class = \"codeFaceSmall\">Start</font> menu, then <font class = \"codeFaceSmall\">Microsoft Office</font>, then <font class = \"codeFaceSmall\">Microsoft Office Access 2003</font>. </p>\n\n<p>&bull; In the right-hand <font class = \"codeFaceSmall\">Getting Started</font> box that\nappears, select <font class = \"codeFaceSmall\">New...</font>; it&#146;s under\n<font class = \"codeFaceSmall\">Open</font>.</p>\n\n<p>The right column will change to show a number of options\nunder <font class = \"codeFaceSmall\">New</font>. </p>\n\n<p>&bull; Choose <font class = \"codeFaceSmall\">Blank database...</font></p>\n\n<p>The <font class = \"codeFaceSmall\">File New Database</font>\ndialog box appears, which allows you to give a name to your database and store\nit. To match the instructions here</p>\n\n<p>&bull; Name the database file <font class = \"codeFaceSmall\">kinfo.mdb</font> (type <font class = \"codeFaceSmall\">kinfo.mdb</font>\ninto the <font class = \"codeFaceSmall\">File name:</font> box) and store it in the <font class = \"codeFaceSmall\">\\Temp </font>folder (using the <font class = \"codeFaceSmall\">Save in:</font>\nmenu at the top of the dialog box to position the file there). Click on <font class = \"codeFaceSmall\">Create</font> to save the database file.</p>\n\n<p>The Database dialog box will appear; it has a choice down\nits left-hand size for each kind of information that (can be) stored in a\ndatabase (which we&#146;ll use later) and a main menu that shows three ways to\ncreate the database.</p>\n\n<p>&bull; Click on <font class = \"codeFaceSmall\">Create table in Design view</font>; click on\n<font class = \"codeFaceSmall\">Open</font>.</p>\n\n<p>You&#146;ll now see a grid with a place to enter in each\nfield (<font class = \"codeFaceSmall\">Field Name</font>), the kind of data it\nholds (<font class = \"codeFaceSmall\">Field Type</font>) and a <font class = \"codeFaceSmall\">Description</font> (helpful comments about the\nfield). As you enter the field name, a menu will appear in the <font class = \"codeFaceSmall\">Data Type</font> next to it; you will choose the most\nappropriate type for the field. When you choose a type, a properties list will\nappear in the <font class = \"codeFaceSmall\">General</font> tab at the lower\nleft of the table box; these properties can be changed as needed. The lower\nright of the table box always shows informational help as you do your work.\nHitting the F1 function key will call up additional help&#151; do use it as\nneeded.</p>\n\n<p>&bull; Using the codebook as your guide, enter a <font class = \"codeFaceSmall\">Field Name</font>,\na <font class = \"codeFaceSmall\">Data Type</font> and a <font class = \"codeFaceSmall\">Description.</font> (You can also adjust <font class = \"codeFaceSmall\">Field Properties</font> for each field at this time,\nor wait until you&#146;ve entered all the fields. We discuss more about\nfield properties below.) </p>\n\n<p>Make the field names meaningful, and ones that can easily be\nmatched to the correct field information in the codebook. The data type is just\nthat, an indicator of the kind of data to be stored in that field. Having type\ninformation helps Access know what symbols are legal in a field&#146;s\nvalue (e.g., numbers can&#146;t include punctuation) and what operations\ninvolving that field make sense (e.g., text fields cannot meaningfully be\nmultiplied together). </p>\n\n<p><font class = \"codeFaceSmall\">Text</font>, <font class = \"codeFaceSmall\">Number</font> and <font class = \"codeFaceSmall\">Yes/No</font>\nfield types are just that. A <font class = \"codeFaceSmall\">Memo</font> field\nis essentially a huge text block; it allows for entering a large amount of text\ndata. <font class = \"codeFaceSmall\">Date/Time</font> lets you store date and\ntime information. <font class = \"codeFaceSmall\">Currency</font> lets you\nstore (monetary amounts, such as U.S. dollars. <font class = \"codeFaceSmall\">AutoNumber</font>\nhas Access automatically put a number into this field as the record is created.\nHyperlink stores a link to a Web page; <font class = \"codeFaceSmall\">OLE\nObject</font> stores a link to data the database needs access to that is not\nstored in the database itself. The <font class = \"codeFaceSmall\">Lookup\nWizard</font> helps you set up a table that lists the legal values for the\nfield; during the entry of a patient's data, the user chooses a value from that\nlist. You can learn more about these types by hitting the F1 key.</p>\n\n<p>Note that you can&#146;t use a Yes/No field if the\npossible answers are &#147;Yes,&#148; &#147;No,&#148; and such\nthings as &#147;refused to answer&#148; or &#147;question not\nasked&#148;: Yes/No fields can only store two values, Yes and No. Note too\nthat <font class = \"codeFaceSmall\">Date/Time</font> does not allow for any missing parts (e.g.,\nif you had a date with a missing day, there would be no way to store it as a\ndate without &#147;making up&#148; a day)&#151;so that means,\nunfortunately, you can&#146;t use the Date/Time type for any field that may\ncontain values representing missing data. </p>\n\n<p>If you enter a field in error, you can delete it by\nhighlighting <i>all</i> of its information (by\nclicking on the gray box at the far left of the field line), and hitting the\ndelete key.</p>\n\n<p><i>Make sure you get the data types right before proceeding\non to other tasks!</i> Changing them later is\ndoable, but often very messy and time-consuming! </p>\n\n<h4>Some examples</h4>\n\n<p>To help you get a feel for all this, here&#146;s some fields and their data\ntypes; each field uses a different kind of data type. You should not need to\nuse data types other than those shown here (hint, hint!).</font></p>\n\n<p>NetID: The appropriate field type is <font class = \"codeFaceSmall\">AutoNumber</font>, \nas the codebook says the database should\nautomatically provide this ID.</p>\n\n<p>DOB: We cannot use a Date/Time type, as that will not allow for the invalid dates we use to\ndenote missing data. The best type for it is <font class = \"codeFaceSmall\">Numeric</font>,\nsince it has to be all numbers. </p>\n\n<p>Gender: This is limited to three text values, F, M, and X.\nSo we use a lookup table with these three values. We choose Lookup Wizard... then\n<font class = \"codeFaceSmall\">I will type in the values that I want</font>\nfrom the wizard&#146;s dialog box, then click <font class = \"codeFaceSmall\">Next</font>.\nOn the next box, I tell the wizard I only want 1 column and enter into that\ncolumn the three values for the list, that is F, M and X,, then click <font class = \"codeFaceSmall\">Next</font>. On the following screen I use the name <font class = \"codeFaceSmall\">Gender</font> for the list and then <font class = \"codeFaceSmall\">Finish</font>. If you now click on the Lookup tab at the lower left of the table screen, you&#146;ll see the information from the\nwizard, confirming that your list has been created.</p>\n\n<p>You may have noted that the data types chosen don&#146;t\nnecessarily match those given in the codebook. That&#146;s ok because the\ncodebook describes how the data is to appear when it is transferred from one\nparty to another; as long as we abide by its formats when we share data, we can\nstore the data any way we want in the database (and convert it to the types in\nthe codebook when we prepare it for sharing with others).</p>\n\n<h4>Ensuring data accuracy</h4>\n\n<p>A paramount rule of database design is to have the database catch every\npossible error at the time of data entry. Incorrect data in the database leads\nto incorrect reports, analyses, and conclusions, and they can lead to bad\npolicy and terrible consequences. An example&#151;this is a true story...</font></p>\n\n<p>A water district that supplies\nthe Los Angeles area had to change some of the chemicals it used to purify the\nwater (the reasons are interesting, but too long to go into here). Trouble was,\nanyone on hemodialysis treated with this changed water would die: Compounds\nformed in the water would react with chemicals in the dialysis machine, and the\nresulting poisonous substance would enter the patient&#146;s blood during\ntreatment. So, the L.A. ESRD network went to its database, and pulled up\ncontact information for dialysis facilities and for people being treated at\nhome. It notified every one of them about the situation and what to do about it\n(which was to install a special filter between the water supply and the\ndialysis machine). The Network was the only location that was required to have\non file all dialysis patients in the area. Although the media was broadcasting\nthe change, and other organizations were doing their best to notify the\n&#147;interested parties,&#148; it fell to the Network to make sure all\nwere indeed notified. Imagine the consequences of error: for instance, a whole\nfacility of poisoned patients because the facility&#146;s code in the\ndatabase was incorrect, or a home dialysis patient dying because a data error\nindicated the patient was dead&#151;so of course she did not need to be\ncontacted!</p>\n\n<p>Properties in fields interact,\nsometimes in unexpected ways, with properties in input screens or reports. For\ninstance, if a restriction on the range of numbers that can appear in a numeric\nfield is given in the table, and a different restriction is placed on the field\nwhen its value is entered from a screen, difficult-to-fix contradictions can\noccur. So, a general rule: if a property is going to apply to a field on all\nscreens that use it, set the property in the table. If not, set the properties\nin the screen(s) as appropriate. It is critical in a real-world system that the\nproperties be set, wherever they are set, so that any incorrect data values\nentered on a screen that can be caught are caught. (Some errors cannot be\ncaught: if you meant to enter a birth date of 05062004 and instead entered\n05072004, there is no way the database can catch that, as both birth dates are\nperfectly legal and reasonable values. We catch <i>all</i> of what we <i>can</i> catch.)</p>\n\n<h4>Some examples, revisted</h4>\n\n<p>To illustrate setting\nfield properties, here we set\nthem for the fields we discussed above. In general, to change a property, click\non its box.</p>\n\n<p>NetID: The existing field size of long integer will allow\nfor very large numbers, which in turn allows for lots of patients&#151; just\nwhat we want. <font class = \"codeFaceSmall\">New Values</font> set to <font class = \"codeFaceSmall\">Increment</font> does the automatic numbering we\ndesire. The user is not going to enter this field, so we do not need a <font class = \"codeFaceSmall\">Format</font> or <font class = \"codeFaceSmall\">Caption</font>.\n(Remember, these properties apply to the table; we can have captions and\nformatting on a screen or report if we want by defining them there.) <font class = \"codeFaceSmall\">Indexed</font> is currently allowing duplicate\nvalues, not what the codebook calls for. So click on the <font class = \"codeFaceSmall\">Indexed</font> property box to get a list of\navailable choices and pick <font class = \"codeFaceSmall\">Yes(No Duplicates)</font>,\nwhich is what we want; each network ID is to be unique. </p>\n\n<p>DOB:. The largest value this field can be is 99999999.\nThat's pretty big for a number, so we leave the <font class = \"codeFaceSmall\">Field\nSize</font> set at <font class = \"codeFaceSmall\">Long Integer</font>.\nFormatting is best left to screens and forms, so we leave it blank here.\nDecimal places will always be 0, so we change the property to 0. Input masks\nare best left to input screens. Captions, too are best left to screens. We\nleave the <font class = \"codeFaceSmall\">Default Value</font> at 0; during\ndata entry, it will be changed to a real birthday (or the value for a missing\none) so the 0 should not remain in a real patient&#151;and if we see a 0\nsomewhere in the database, we know we have an error that needs to be fixed, not\nsomething we would notice if we used a default value that corresponded to a\nlegal birth date. We leave the validation rules and messages to the data entry\nscreens. We do, however, change this field&#146;'s <font class = \"codeFaceSmall\">Required</font> property to <font class = \"codeFaceSmall\">Yes</font>;\nevery patient will have a birthday, even if it is the phony missing value one.</p>\n\n<p>Gender: This is limited to three text values, F, M, and X,\nso the <font class = \"codeFaceSmall\">Field Size</font> of 50 is\ninappropriate; we change it to 1. We change <font class = \"codeFaceSmall\">Required</font>\nto <font class = \"codeFaceSmall\">Yes</font> and <font class = \"codeFaceSmall\">Allow Zero Length</font> to <font class = \"codeFaceSmall\">No</font>,\nas we always want a code from the table present. We leave the other properties\nas they are.</p>\n\n<p>&bull; Adjust the field properties of each field as necessary, keeping the above rules in\nmind. Read the help messages and use the F1 key as needed to get help on\nspecific properties.</p>\n\n<p>&bull; To protect your work against loss, every now and again save it via the <font class = \"codeFaceSmall\">Save</font> command (under the <font class = \"codeFaceSmall\">File</font> menu). The first time you save the table,\nyou will be asked to provide a name; call it KINFO to have its name match the\none we use here. Of course, also save your table when you are done creating it.</p>\n\n<p>When you save the table, you may be warned that there is no\nprimary key defined. It turns out we do not need one; we would if we had\nmultiple tables in the database, but we will be only using one. So, if this\nmessage comes up, click on <font class = \"codeFaceSmall\">No</font>. </p>\n\n<p>If you are working on the table in more than one session,\nyou can get to it easily by double-clicking on the kinfo.mdb database (which,\nof course, launches Access and open the kinfo database). You may get a security\nwarning; click <font class = \"codeFaceSmall\">Open</font> if you do. When the\ndatabase window appears, click on <font class = \"codeFaceSmall\">KINFO</font>,\nthen <font class = \"codeFaceSmall\">Design</font>, to continue your work.</p>\n\n<p>We strongly encourage you to have the TA review your table\nbefore you continue with this lab. As we said above, it&#146;s much easier\nto fix any mistakes in the table now (while nothing else depends on it) than\nlater, when changing the table will often necessitate major changes in other\nparts of your work.</p>\n\n<h4>The data entry screen</h4>\n\n<p>Adding new data to a database, deleting incorrect information, and keeping its data\nup-to-date and correct is a common, ongoing chore. To make the addition,\ndeletion, and changing of data (often called &#147;data\nmaintenance&#148;) easier and less error-prone, we want our screen layouts\nto group together related data, have meaningful labels for the fields, use good\ntypography and judicious use of color to make them easy to read, and to have\nthe database prevent the user, as much as it can, from entering invalid data\nvalues. So your next task is to prepare a &#147;data entry screen&#148;\nfor this database.</font></p>\n\n<p>&bull;  Go to the Database window. Click on <font class = \"codeFaceSmall\">Forms</font>; Click on <font class = \"codeFaceSmall\">Create\nform by using wizard</font>; be sure the KINO table appears in the <font class = \"codeFaceSmall\">Table/Queries</font> box, and follow the\ninstructions! </p>\n\n<p>There are several ways to create a form, but start with the\nform wizard; it does a lot of work for you but still gives you a nice set of\noptions to customize your form. Do feel free&#151;even\nencouraged&#151;to create screens using the other available options.</p>\n\n<p>The last screen of the form wizard asks if you wish to\nmodify the form, or view it. For now, tell Access you want to view your form,\nso you can review it. You can (and probably will) want to modify your form at\nsome point to make it easier to find related fields, add screen or subgroup\nheadings, change colors, and so on. To do so, just click on <font class = \"codeFaceSmall\">Forms</font>, click on the name of your form and\nselect <font class = \"codeFaceSmall\">Design</font>. You&#146;ll be placed\ninto the design tool. It looks complex, but is actually quite straightforward\nto use. Again, use the various help features and <i>experiment</i>; you&#146;ll be surprised how much you can do,\nand do easily, to improve your screen. (Try, for instance, typing\n&#147;validation&#148; into the Help Assistant&#146;s query box and select </font><font class = \"codeFaceSmall\">Validate or restrict data in a form</font>.\nyou&#146;ll get lots of information on how to set up input masks and\nvalidation rules for your input form).</p>\n\n<h4>Checking your work</h4>\n\n<p>&bull; Enter some data to test your screen organization and field definitions. There\nare several ways to enter data into the database. Perhaps the easiest is to select\n<font class = \"codeFaceSmall\">Forms</font> and double-click on the data entry\nform. The screen will appear; start entering data. Experiment with the record\npositioning buttons (the bottom of the form) until you are comfortable with\nusing them. You enter values for fields by typing; you can move from one field\nto the next by clicking next to the field name (or wherever you placed the\n&#147;box&#148; in which that field&#146;s contents should go, if\nyou changed its position in your layout). </p>\n\n<p>You can change the values of existing fields by simply\nclicking on their data entry boxes and changing the contents in them or, if the\nvalues come from a lookup table, by clicking on the arrow next to the field.\nAccess will not leave a field (once entered) that fails to meet its data\nvalidation checks; instead, it will present an error message. When you dismiss\nthe message, you will still be in the field. (Note that when you first create\nyour form, virtually no validation checks are in place&#151;about all that\nit will check is that there is no text in numeric fields.)</p>\n\n<p>You can use the record positioning buttons on the bottom of\nthe form to move from one record to another. Access will not let you leave a\nrecord if <i>any</i> data field in it is still\nin error. Be observant: if you try to leave an in-error record, say from field\nX, an error message will appear that may have nothing to do with field X, but\nis related to another field that has an error.</font></p>\n\n<p>Don&#146;t just pick obviously correct data values; pick\nones known to be wrong and see if your database catches the mistakes. If it\ndoesn&#146;t, modify the data entry form, if possible, so they are caught.\nYou won&#146;t be able to catch every possible mistake, since someone might\nenter a legal, but wrong, data value in a field, and because Access&#146;\ndata validation tools can&#146;t check everything you might want. But do\ncatch as many errors as you can. If the check is complex, start with doing part\nof the checking, make sure it works, then add more to it, check that, and so\non, until you have the complete check in place&#151;it&#146;s a lot easier to\nfind and correct mistakes this way then trying to figure out what&#146;s wrong in a\ncomplex check.</p>\n\n<p>&bull; Test your data entry checking rigorously. When you are done, make sure your database has at least 10 &#147;clean&#148; records of data in it.\n(You&#146;ll need them for the remainder of this exercise.) </p>\n\n<h4>Improving the screen layout</h4>\n\n\n<p>Now that you&#146;ve had some practice using your screen, you may have thought\nof some ways to improve its appearance, perhaps even change it so it is more\nlikely a data entry person will make fewer mistakes.</p>\n\n<p>&bull; Modify your screen as appropriate; you goal is to have the easiest to read and use\nscreen that you can. <b></b></p>\n\n<div class=\"section\">\n<hr>\n<h3>Part II: Computing New Fields</h3>\n</div>\n<h4>Calculated fields</h4>\n\n<p>It is often very hard to discern patterns in raw data, so we use formulae to\ncompute  from the data new values that are more meaningful to us. Deciding what\ndata to collect is, in fact,  often predicated upon the kinds of\n&#147;higher level&#148; information desired.</p>\n\n<p>For example, the &#147;event timeline&#148; in this\ndatabase reflects reality well. A patient begins dialysis (or gets a\ntransplant) on a given date at a certain facility. That patient is considered\nto be in that &#147;mode&#148; until some other\n&#147;event&#148; occurs to change it; moving to CAPD, for example. The\nnew mode, the date it occurred, and the facility now responsible for the\npatient (which might be the same one as before, or might not) is recorded. The\nold mode ends on the date the new one begins. Mode changes are tracked until\nthe patient dies or leaves the local network, both of which are modes\nthemselves. A special mode code is used to indicate that the patient changed\nfacility, but that the mode itself did not change. (A patient who left the\nnetwork and comes back is also considered to have had a facility change event).</p>\n\n<p>But the timeline (and other fields) don&#146;t directly\nprovide information of daily interest to a Network. For instance, a\npatient&#146;s current dialysis facility&#151;the\nplace where dialysis was last done&#151;is often needed. Searching the\nevent timeline for it would work, but it&#146;s slow and error-prone\ncompared to just looking on the screen for the current facility. So we want to\ncompute this field, have it updated every time data used to compute it changes,\nand have it stand out on the screen.</p>\n\n<p>We&#146;ll step you through\nthis variable&#146;s computation; it will serve as an example of how\ncomputations are done in Access (and many other modern databases). </p>\n\n<p>We need a place to store the results this new field\ncontains. Since our purpose in creating it was to allow the person viewing the\ndialysis data a quick way of seeing the current dialysis facility, we store\nthis new field on the data entry form. (There are other places one could store\nthe field, such as in a report separate from the data entry form; doing so\nwould make the results available to a different &#147;user class,&#148;\none that cared only about summary results. We&#146;ll get a feel for that\nclass&#146; needs in Part III of this assignment.)</p>\n\n<p>&bull;  Go to the form you created for data entry and open it in\ndesign view. Expand the form&#146;s window so you have access to more of the\nform layout. Place the mouse just above the <font class = \"codeFaceSmall\">Form\nFooter</font> bar so that mouse turns into a cross and drag the moust down so\nthat the detail area of the form is enlarged. Then, from the <font class = \"codeFaceSmall\">Toolbox</font>, click the <font class = \"codeFaceSmall\">Text Box</font> icon (second row, second column). Then click on the\nwizard icon directly above it. (Activating the wizard will do related tasks for\nyou, such as creating a label field to go with this text field). The mouse\nshould turn into an arrow with <font class = \"codeFaceSmall\">ab</font> in a\nbox next to it.) Place the mouse in the detail area where you want the\nupper-left corner of the text box to be on the screen, and drag the mouse to\nmake the text box; let go of the mouse button when the box is the size you\nwant. (Note that a companion label is created.)</p>\n\n<p>This box can now contain text of any kind, including a<i>\nformula</i>.</p>\n\n<h4>About formulas</h4>\n\n<p>A formula is an algebraic-like expression that produces a result; it computes new\nvalues from existing ones. It can be quite simple or very complex.</font><b></b></p>\n\n<p>When entering complex formulas, don&#146;t enter them\nall at once. Start with a simple component of it; check it. When it works\nright, add another component, and check that part, and so on, building up the\nformula piece by piece until you have it all. </p>\n\n<p>For example, we use the IIf statement in several formulas we\nask you to write for this assignment. IIf looks like this:</p>\n\n<p><font class = \"codeFaceSmall\">IIf(<i>condition</i>, <i>what-to-do-if-true</i>, <i>what-to-do-if-false</i>)</font></p>\n\n<p>and it can be <i>nested</i>,\na powerful mechanism for computing results, but one that results in a complex\nexpression.</p>\n\n<p>Suppose you want to enter the following formula. (Don&#146;t worry right now about\nwhat it does; we&#146;ll get to that presently.)</p>\n\n<font class = \"codeFaceSmall\">\n<p>=IIf([Event3] &lt;&gt; 0 And [Event3] &lt; 16, [EvFac3], IIf([Event2] &lt;&gt; 0 \n<br><font class = \"codeFaceSmall\">And [Event2] &lt; 16, [EvFac2], IIf([Event1] &lt;&gt; 0 And \n<br>[Event1] &lt; 16, [Event1], 0)))</p>\n</font>\n\n<p>It&#146;s best to start with </p>\n\n<p><font class = \"codeFaceSmall\">IIf([Event1] &lt;&gt; 0 And [Event1] &lt; 16, [Event1], 0)</font></p>\n\n<p>and check that it works right for event 1. Then expand the formula to</p>\n\n<p><font class = \"codeFaceSmall\">IIf([Event2] &lt;&gt; 0 And [Event2] &lt; 16, [EvFac2], \n<br>IIf([Event1]&lt;&gt; 0 And [Event1] &lt; 16, [EvFac1], 0))</font></p>\n\n<p>You know the formula works for <font class = \"codeFaceSmall\">Event1</font>, so you only have to check it for <font class = \"codeFaceSmall\">Event2</font>.</p>\n\n<p>Continue by adding <font class = \"codeFaceSmall\">Event3</font>.\nIt may not seem like it, but incremental construction, with tests done after\neach step, is much faster and more effective at finding and fixing mistakes\nthan trying to check the entire formula at once. </p>\n\n<p>&bull; Place the cursor in the text box; right click and choose <font class = \"codeFaceSmall\">Properties</font>. Click on the <font class = \"codeFaceSmall\">Data</font>\ntab and, in the <font class = \"codeFaceSmall\">Control Source</font> box,\nright click and select <font class = \"codeFaceSmall\">Zoom...</font>. (This\naction gives a large typing space). Now enter the above formula, doing it\npiecemeal, as illustrated above. <i>Don't hit the </i><font class = \"codeFaceSmall\"><i>Enter</i></font><i> key</i> when the\nformulas get long enough to &#147;overfill&#148; a line: the formula\nwill wrap to a new line automatically. Enter <font class = \"codeFaceSmall\">OK</font> to store formulas. If Access detects something wrong with the\na formula,it will give you an error message when you try to leave this field;\nif that happens, return to the formula and fix it. </p>\n\n<h4>Interpreting formulas</h4>\n\n<p>The formula will indeed appear much like shown above&#151;Access\ndoesn&#146;t employ good rules of presentation here, does it? (This\nugliness illustrates why we should do our best to make our work readable; text\nis much tougher to understand when it isn&#146;t presented well.) Here's\nthe same formula, formatted a bit, to make it easier for you to reference while we\ndiscuss it:</font></p>\n\n<font class = \"codeFaceSmall\">\n<p>=IIf([Event3] &lt;&gt; 0 And [Event3] &lt; 16, [EvFac3], \n<br>&nbsp;&nbsp;IIf([Event2] &lt;&gt; 0 And [Event2] &lt; 16, [EvFac2], \n<br>&nbsp;&nbsp;IIf([Event1] &lt;&gt; 0 And [Event1] &lt; 16, [EvFac1], 0))) \n</p></font>\n\n<p>Fields in formulas are referred to by name and enclosed in\nsquare brackets. Numeric constants (0 above) are just written down; text (none\nis used above) is enclosed in double quotes (&quot;). An operator is written\nbetween its operands (or in front of it when there is only one operand, as in\n-2). <font class = \"codeFaceSmall\">&lt;&gt;</font> is &#147;not equal\nto,&#148; <font class = \"codeFaceSmall\">&lt;</font> is &#147;less\nthan,&#148; <font class = \"codeFaceSmall\">And</font> is a <i>logical\noperator</i> that takes on the value <i>true</i> when both of its operands are </font><i>true</i>, and takes on the value <i>false</i> otherwise.</p>\n\n<p>Functions calculate results. You provide the function with\ndata to work with, called <i>arguments</i> or </font><i>parameters</i>; it computes a result and returns it to you. We use the\nIIf function in\nthe formula above. The IIf\nfunction has three arguments. IIf\nfirst evaluates the first argument. If it is true, it returns the value of the second argument; \nif false, it returns the value\nof the third argument. We can nest functions to have the result of one function\nused as an argument of another. Seems strange, perhaps, but it does the job. If\nyou interpret the IIf statement above, it would go something like this:</p>\n\n<p>If event 3 is a hemodialysis\n(&#147;hemo&#148;) event, return its facility, otherwise\n<br>&nbsp;&nbsp;If event 2 is a hemo event, return its facility, otherwise\n<br>&nbsp;&nbsp;&nbsp;&nbsp;If event 1 is a hemo event, return its facility, otherwise \n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0 (to mean\n&#147;there is no current dialysis facility&#148;)</p>\n\n<p>Since events are (supposed to be) given in chronological\norder, this formula returns the facility at which the patient had the most\nrecent dialysis event&#151;just what we want.</p>\n\n<p>Another way to enter formulas is by clicking on <font class = \"codeFaceSmall\">Build...</font> when you are in the text box. This\naction lets you call up one of three different tools that can let you build expressions. <font class = \"codeFaceSmall\">Expression Builder</font>. It&#146;s quite\nstraightforward to use (with a little&#151;and we do mean a\nlittle&#151;practice), and you may find it an easier approach to entering\nformulas then typing them. (The Expression Builder will help you avoid spelling mistakes,\nmisplaced commas, and unbalanced parentheses, all of which plague anyone trying\nto enter formulas correctly.) Use the other builders only if you have had at\nleast the equivalent of a course in introductory programming; they are powerful\nbut complex tools. </p>\n\n<p>Cutting parts of the formula and pasting them to a different\nplace in the same or a different formula also helps reduce error, but be sure\nto make any needed changes in the pasted section. </p>\n\n<p>There are many more operations and functions, of course; you\ncan learn about them via good questions to the Assistant, or by using features\navailable under the Help menu. </p>\n\n<p>&bull;  Change the text in the label box (for the formula-holding\nfield) to something meaningful (just click on the box and drag the mouse to\nhighlight the existing text and start typing). Resize the box as needed to hold\nthe text nicely (click on the box, move the cursor until it turns into a double\narrow, and then drag the edge of the box).</p>\n\n<p>&bull; Save the form. Check that the new field is working properly by opening the data form\nand comparing the computed result against the dialysis events and facilities\ndata you have (for each patient). Enter new data values as needed to insure\nthat the Current Dialysis Facility variable is being computed properly.</p>\n\n<p>&bull;  Now, add the following calculated fields to your form.\nName them appropriately; display them nicely. (For instance, on the Yes/No\nfields, you could display the words &#147;Yes&#148; or\n&#147;No,&#148; as appropriate, or a check box that&#146;s marked\nwhen the answer is &#147;Yes&#148;&#151;but don&#146;t put a 1\nfor Yes and a 2 for No; that&#146;s much too hard to decipher! Remember:\nPresentation matters.)</p>\n\n<p>Patient Alive? (As of today&#146;s date) &#147;Yes&#148; if so, &#147;No&#148; if not\n<br>Current Mode: the event code of the most recent event (0 = no events)\n<br> Ever aTransplant? &#147;Yes&#148; if the patient ever received a transplant,\n&#147;No&#148; otherwise</p>\n\n<p><i>Check your work carefully</i>: Remember the potential\nconsequences of wrong data!</p>\n\n<div class=\"section\">\n<hr>\n<h3>Part III: Summary Results and Report</h3>\n</div>\n<h4>Preparing a summary report</h4>\n\n<p>Sifting through several\n(actually, at the Networks, it&#146;s thousands) of data records to discern patterns\nis tough, if not impossible. So we prepare <i>summary reports</i> where\nthe data for all or a group of records is combined in well-thought-out ways to\nmake evident the data&#146;s patterns and properties. A report has titles,\ncolumn headings, labeling, summary lines, and so forth as necessary to present\nthe data in the clearest, neatest way possible for a reader who might never\nsee, or care about, the data entry process. In Access, a report obtains its\ndata from tables or queries (more on the latter in a minute), and formats it by\ncommands that appear in the report itself. </p>\n\n<p>A query is where computed information, based on fields\nstored in the database&#146;s tables, is kept; the query often includes\ntotals and averages for a subgroup of records fulfilling specified criteria.\nWe&#146;ll lead you through a query that computes and stores a couple of\n&#147;summary variables,&#148; and then use those variables in a\nreport.</p>\n\n<p>&bull;  In the Database dialog box, click on <font class = \"codeFaceSmall\">Queries</font>\nand click on <font class = \"codeFaceSmall\">Create a query in design view </font>and\nthen<font class = \"codeFaceSmall\"> Open </font>to create a blank query. Now\nselect your table name from the <font class = \"codeFaceSmall\">Show Table</font>\nwindow, and click on <font class = \"codeFaceSmall\">Add</font>; this action\nmakes your table&#146;s fields available to the query. Now click on <font class = \"codeFaceSmall\">Close</font>. </p>\n\n<p>You now have a blank query. To provide you an example of how\nsummary variables can be computed (as usual in Access, there is more than one\nway to do this), we&#146;ll step you through creating a couple of\nvariables: 1) the number of females in the database, and 2) the number of male\npatients who are currently on dialysis.</p>\n\n<p>You&#146;ll note a table at the bottom of the query\nscreen; each column of the table stores information about one computed\nvariable. We will be using predefined Access functions, called\n&#147;totals,&#148; for this work, so</p>\n\n<p>&bull; Click <font class = \"codeFaceSmall\">Totals</font> under the <font class = \"codeFaceSmall\">View</font> menu so that a <font class = \"codeFaceSmall\">Total:</font> row is added to the query table.</p>\n\n<p>We&#146;ll be working in the first column for the number of women.</p>\n\n<p>&bull; In the <font class = \"codeFaceSmall\">Field:</font> box, enter the expression <font class = \"codeFaceSmall\">FemaleCount:Count(*)</font>. This tells the query\nthat you want to compute a new variable <font class = \"codeFaceSmall\">FemaleCount</font>\nthat is a count of records. </p>\n\n<p>The <font class = \"codeFaceSmall\">Table</font>: box tells\nthe query the table in which the selected field resides (it&#146;s possible\nthat two tables each have a field with the same name). For this calculated\nvariable, leave <font class = \"codeFaceSmall\">Table:</font>\nblank&#151;the variable is not part of any table.</p>\n\n<p>&bull; Change the value in the <font class = \"codeFaceSmall\">Total:</font> box to <font class = \"codeFaceSmall\">Expression</font>. This indicates that <font class = \"codeFaceSmall\">FemaleCount</font>&#146;s will be based on a\nsubgroup (rather than all) of the records in the table. </p>\n\n<p><font class = \"codeFaceSmall\">Show</font> being checked\nmeans that, when the query is opened (executed), the result of this computation\nwill display (which is what we want).</p>\n\n<p>Now we need to modify <font class = \"codeFaceSmall\">FemaleCount</font>\nso it contains a count of women only; right now, it&#146;s a count of\neveryone in the database. </p>\n\n<p>&bull; In the next column (to the right), enter <font class = \"codeFaceSmall\">Gender</font>\nin the <font class = \"codeFaceSmall\">Field:</font> box.</p>\n\n<p>Access will fill in the table name (since it knows\nthat&#146;s the only place <font class = \"codeFaceSmall\">Gender</font>\ncan come from), check the<font class = \"codeFaceSmall\"> Show:</font> box, and\nplace <font class = \"codeFaceSmall\">Group By</font> in the <font class = \"codeFaceSmall\">Total</font> box</p>\n\n<p>&bull; Change <font class = \"codeFaceSmall\">Group By</font> to <font class = \"codeFaceSmall\">Where</font>. Access will now select records &#147;where&#148;\ncertain criteria are met</p>\n\n<p>Note that <font class = \"codeFaceSmall\">Show</font> has\nbeen unchecked; selection fields, since they only help us set up the results\nfor other fields, are typically not displayed. </p>\n\n<p>&bull; In the <font class = \"codeFaceSmall\">Criteria:</font> box, enter <font class = \"codefacesmall\">=F</font>. </p>\n\n<p>This selects out the gender group that has a value equal to\nF&#151;females&#151;and ignores all other groups. So, in this query,\nany time a variable (like <font class = \"codeFaceSmall\">FemaleCount</font>)\nis computed, the computation will include only those records where Gender is F.\nSince <font class = \"codeFaceSmall\">FemaleCount</font> is a count, that count\nwill now only be of females.</p>\n\n<p>&bull; Save the query; give it a meaningful name (we called it <font class = \"codeFaceSmall\">Number of Women</font>).</p>\n\n<p>&bull; Now double-click <font class = \"codeFaceSmall\">Number of Women</font> in the </font><font class = \"codeFaceSmall\">Database</font>\nwindow; if all has gone well, the (correct) count will appear in a\nspreadsheet-like form in a window. </p>\n\n<p>&bull;  As always, test your work: enter a number of different\nrecords into the database (you can delete them later, if need be) so you can be\nsure that <font class = \"codeFaceSmall\">FemaleCount</font> is correctly\ncounting female patients. Be particularly sure to check unusual situations (for\ninstance, try the case where the database has no records where <font class = \"codeFaceSmall\">Gender</font> equals F, and make sure <font class = \"codeFaceSmall\">FemaleCount</font> is 0 in that case).</p>\n\n<p>Now we build a query to count\nthe number of male patients who are currently on dialysis. A look at the\ncodebook tells us that &#147;currently on dialysis&#148; means that the\npatient&#146;s most recent mode is between 1 and 13. What&#146;s the\nmost recent event? It&#146;s the highest-numbered event that has a non-zero\ncode&#151;0 doesn&#146;t count as a mode change, since it means\n&#147;not yet used.&#148; We check the most recent event to see if it is between 1 and 13. If so, the patient\nis on dialysis. If the gender code for this patient indicates the patient is\nmale, then this patient is added to the count of male patients who are\ncurrently on dialysis.</p>\n\n<p>&bull;  Create a new query, via the design view</p>\n\n<p>&bull; Create an expression <font class = \"codeFaceSmall\">CountMenCntDx:Count(*)</font>;\nthis new variable is just another (more complicated) count.</p>\n\n<p>Unfortunately, Access does not allow one to use computed\nresults on forms (such as the current dialysis facility we computed above) in\nqueries. So, to select the records to appear in this count, we can&#146;t\nuse the current dialysis mode variable from the form: we have to compute a\nsimilar variable here. </p>\n\n<p>&bull; Create a logical expression that computes the current dialysis mode. Make its value\nparallel the current dialysis form variable. (Hint: the expression begins <font class = \"codeFaceSmall\">CntDxMode: IIf([Event3] &lt;&gt; 0, [Event3],\nIIf([Event2] &lt;&gt; 0, [Event2], ...</font> and ends with <font class = \"codeFaceSmall\">Event1</font> and a few closing parentheses.) Make\nsure <font class = \"codeFaceSmall\">Table:</font> is blank (this expression is\ncertainly not in the table!), <font class = \"codeFaceSmall\">Show:</font> is\nunchecked, and <font class = \"codeFaceSmall\">Total:</font> is <font class = \"codeFaceSmall\">Where</font>. </p>\n\n<p>&bull; Set <font class = \"codeFaceSmall\">Criteria:</font> to <font class = \"codeFaceSmall\">&gt;0 And &lt; 14</font>.</p>\n\n<p>&bull; Save\nyour query as <font class = \"codeFaceSmall\"># Males Now on Dx</font>.</p>\n\n<p>Access will, when the query is opened, compute the current\nmode for each patient, and select out those patients current mode is between 1\nand 13. That&#146;s just the group we want to count.</p>\n\n<p>&bull; Check your work!</p>\n\n<p>We can create as many queries as we wish on the database,\nand they can get pretty much as complicated as we want. (For instance, suppose\nwe wanted to count all the females currently on dialysis. We would have three\ncolumns in the query: the count variable, a &#147;group by&#148; female\nin the next column, and then another &#147;group by,&#148; for current\ndialysis in the third. Access includes in a computed query variable only those\nrecords that meet all the &#147;group by&#148; criteria.) Queries (and\nthus their variables) can also be made available to other queries, so one can\nbuild up complex queries a bit at a time, if desired.</p>\n\n<p>&bull; Create the following summary variables (you&#146;ll note some are just the ones we\ncreated above, or very similar to them):</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;# of people in database {No selection criteria}\n<br>&nbsp;&nbsp;&nbsp;&nbsp;#of women in database {1 selection criterion}\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of men currently on dialysis {2 selection criteria}\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of men who are current transplants {2 selection criteria}\n<p&nbsp;&nbsp;&nbsp;&nbsp;>Again, check your work! Be sure to save your results.</p>\n\n<p>As you&#146;ve noticed, the query viewing is primitive,\nand only allows you to look at the variables in that query. We want to present\na summary report that contains all our summary variables, and is in an\neasy-to-read format.</p>\n\n<p>Unfortunately, Access is very picky about the properties\nthat queries and tables must have in order for all of them to appear in the\nsame report. For instance, if you ask Access to create a report that uses\nvariables from the table itself, and from a query based on that table, it often\nrefuses! It also can give incorrect results when you try to use two (or more)\nqueries in a report that are based on the same table.</p>\n\n<p>So, in order to get all the summary variables into one\nreport, we &#147;fake&#148; Access out (not really: we just follow its\nrules to &#147;work around&#148; its limitations). The trick: copy all\nthe summary variables into one, new query, and then use that new query as the\nbasis of the report:</p>\n\n<p>&bull; Create a new query, using the design view</p>\n\n<p>&bull; In the <font class = \"codeFaceSmall\">Show Table</font> window, select the <font class = \"codeFaceSmall\">Queries</font> tab and, in turn, <font class = \"codeFaceSmall\">Add</font> every query which contains a variable you\nwant to appear on the report. Close the window when you&#146;re done. (If\nyou add a table you decide you don&#146;t need, right-click on it and\nselect <font class = \"codeFaceSmall\">Remove Table</font>. If you later want\nto add a table, click on <font class = \"codeFaceSmall\">Show Table</font> in the <font class = \"codeFaceSmall\">Query</font> menu.</p>\n\n<p>&bull; For each variable you want to appear in the report, click on a <font class = \"codeFaceSmall\">Field:</font> box and select that variable.\nYou&#146;ll note certain settings &#147;come along&#148; with this\nselection; leave them be: they are just what we want.</p>\n\n<p>&bull; Save your query as something like <font class = \"codeFaceSmall\">All Summary\nMeasures</font>.</p>\n\n<p>&bull; Check your selections by opening (running) this query, and note if all the needed\nvariables are present. If so, save the query and exit; if not, go back into\ndesign mode and fix things.</p>\n\n<p>You&#146;re now ready to create the summary report.</p>\n\n<p>&bull; In the <font class = \"codeFaceSmall\">Database</font> window, click on <font class = \"codeFaceSmall\">Reports</font> then on <font class = \"codeFaceSmall\">Create\nreport by using wizard</font>.</p>\n\n<p>The Report Wizard will do a lot of the initial report\ncreation work for you; it&#146;s much faster than building a report from\nthe ground up.</p>\n\n<p>&bull; Where you are asked for the table or query to use, select <font class = \"codeFaceSmall\">All Summary Measures</font>, then click on the right arrow to move each\nof the variables from the query that you want in the report into the <font class = \"codeFaceSmall\">Selected Fields</font> area. (This screen does let\nyou choose variables from other queries and tables, but, if you do,\nyou&#146;ll probably just get error messages!)</p>\n\n<p>&bull; Just click <font class = \"codeFaceSmall\">Next</font> on the following screen: sorting\norders makes no sense for summary variables. (Choosing a sorting order would\nmake sense if we were printing a value for each patient, instead of printing\none value summarizing all patients.)</p>\n\n<p>&bull; Choose a layout and orientation that suits the intended audience; that is, they are not computer or Access experts; they are business types who uderstand dialysis reporting. Click <font class = \"codeFaceSmall\">Next</font>.\nChoose a style that you think your audience will like; click <font class = \"codeFaceSmall\">Next</font>.\nGive a title for your report and click <font class = \"codeFaceSmall\">Finish</font>.\nA preview of the report will appear.</p>\n\n<p>You now have a basic report. But it is a bare-bones report:\nthe titles of the variables, for instance, are not very meaningful to the\nreport&#146;s reader.\nSo, go into the design mode and spiff up the report:</p>\n\n<p>&bull; In the <font class = \"codeFaceSmall\">Database</font> window , click the name of\nyour report and select <font class = \"codeFaceSmall\">Design</font>.</p>\n\n<p>Access treats a layout as having sections. The <font class = \"codeFaceSmall\">Report Header</font> contains information that\nappears once on the report, at the beginning. The <font class = \"codeFaceSmall\">Page Header</font> is information that appears at the top of each page.\nThe <font class = \"codeFaceSmall\">Detail</font> section is information that\nis repeated for each &#147;entity&#148; that appears in the report.\n(Since the variables appearing in this report are summarizing information\nacross all patients, they only appear once; right now, this report has one\nentity). The <font class = \"codeFaceSmall\">Page Footer</font> controls\ninformation that appears at the bottom of every page. The <font class = \"codeFaceSmall\">Report Footer</font> contains information that\nappears once, at the end of the report.</p>\n\n<p>&bull; Move the variables from the <font class = \"codeFaceSmall\">Detail</font> section to\nthe <font class = \"codeFaceSmall\">Report Footer</font> (just select and drag\nthem). </p>\n\n<p>These variables and titles only appear once on this report,\nso they should really be in the <font class = \"codeFaceSmall\">Report Footing</font>\nsection; it is misleading to leave them where they are.</p>\n\n<p>&bull;  Make this report as easy to read and attractive as can be\nmanaged inside Access. You can easily check how the report will look by\nclicking <font class = \"codeFaceSmall\">Print</font> <font class = \"codeFaceSmall\">Preview</font> in the <font class = \"codeFaceSmall\">File</font> menu,\nand then clicking it again to have the design view reappear. Try not to print\ncopy after copy of the report to check its appearance&#151;look at it on\nthe screen. That approach will be faster, save paper, and save you money.</p>\n\n<p>The report format options found in the Toolbox are quite similar\nto those used in form design. Try out various ideas; don&#146;t be afraid\nto experiment. (Make a copy of your database. If your experiments go so awry\nthat you don&#146;t want to try to recover from them, just throw away your\ncurrent database and use the copy.) It&#146;s so easy to create a report\nthat you might make several versions of the report, trying out different\napproaches; when you make the one you think is best, delete the others.</p>\n\n<h4>A note about context</h4>\n\n<p> In the introduction to this exercise, we\ngave you quite a bit of information about the data&#146;s meaning. Yet, in\nall the work you&#146;ve done, you didn&#146;t need to know what the\ndata meant&#151;all you had to do was follow the instructions of others of\nwhat to do with it. This is a useful phenomenon, in that one doesn&#146;t\nneed to be an expert in a given field to do computer work for it.</font></p>\n\n<p>So why did we bother with the\nlengthy background? Because you do need to know about the data&#146;s\ncontext and meaning if you wish to know if your results are reasonable;\nit&#146;s often called a &#147;reality check.&#148; You need to\nknow the context of the data&#146;s use to devise a presentation\nappropriate to your audience. Just because a database produces a result\ndoesn&#146;t mean it is correct or useful! </p>\n\n<h4>A note about saving your database</h4>\n\n<p>Access tries to figure out how big your database is\ngoing to get and reserves space for it. Sometimes this approach makes the\ndatabase file quite large, even though there is little information in the\ndatabase itself. (This typically happens if you repeatedly add, then delete,\nlarge amounts of information). If you find that your database doesn&#146;t\nfit onto your diskette or memory stick, compact it: go to the <font class = \"codeFaceSmall\">Tools</font> menu, select <font class = \"codeFaceSmall\">Database\nUtilities</font>, then, from its submenu, select <font class = \"codeFaceSmall\">Compact\nand Repair Database</font>. That should do the trick. </p>\n\n<p>If, after compaction, your database is still too big to fit\non your backup media (this is quite rare), back up your database to your <font class = \"codeFaceSmall\">H:</font> drive.<b></b></p>\n\n<div class=\"section\">\n<hr>\n<h3>Optional work</h3>\n</div>\n\n<p>This exercise&#146;s required work just scratches the surface of table, form\nand report design and of Access&#146; features. You can add do much more;\nsome ideas follow. We encourage you to do other things instead of or in\naddition to those suggested here&#151;but check with the TA first to make\nsure what you have in mind is reasonable given Access&#146; capabilities\nand the time you have to devote to bringing your idea to fruition.</p>\n\n<p><i>Hint:</i> You&#146;ll\nwant to make extensive use of Access&#146; help facilities, and perhaps get\nguidance from the TA, before undertaking most of these activities.</p>\n\n<p>There are many more useful fields that can be computed for\npatients (and are, in the actual database):</p>\n\n<p>&bull;  Compute the patient&#146;s age, to the nearest year. The\nage is the number of years from birth to today, if the patient is alive, or\nbirth to death, if the patient is deceased. If the birth or death year is\nmissing, set the age to 999. If the birth or death month is missing, assume a\nmonth of 06; if the birth or death day is missing, assume 15. (These are\nstandard assumptions; previous research has shown them to be\nreasonable.)</p>\n\n<p>The easiest way to proceed here is to look at the Patient\nAlive? field. If it is &#147;Yes&#148;, use an &#147;ending\ndate&#148; of today&#146;s date. If not, use the date of death as the\nending date. Using the month and day assumptions above as needed, make\nbeginning (birth) and ending (death or today&#146;s) dates and, using date\narithmetic, compute the difference between the two days. Divide the result by\n365.25 (the number of days in a year, on average), and round to the nearest\nyear. If the calculation can&#146;t be done, store a value of 777. You will\nprobably need some temporary fields, and perhaps another function or two, to\ncomplete the calculation. (Exactly what will be needed depends on exactly how\nyou do the computation; there are several approaches that work.) This\ncalculation will probably require a bit of thought to get right. Do use\nAccess&#146; information tools discussed above to discover how to do the\nnecessary calculations.</p>\n\n<p>&bull;  Compute &#147;Current Transplant?&#148; The field\ncontains &#147;Yes&#148; if the patient&#146;s most recent dialysis event\nwas a transplant, &#147;No&#148; otherwise. </p>\n\n<p>&bull;  Compute the patient&#146;s age at the first event,\nrounded to the nearest year. </p>\n\n<p>&bull;  Compute the patient&#146;s years on dialysis, which is\nthe time from first event until today, if the patient is alive, or to death.\nUse the same rules regarding missing data as we used for the patient&#146;s\nage. (If you computed the patient&#146;s age properly, all you need to do\nis change a date or two in the computation to get these fields&#146;\nvalues.)</p>\n\n<p>&bull;  Compute &#147;grouped versions&#148; of the\nprevious two fields, as follows:</p>\n\n<font class = \"codeFaceSmall\">\n<p>&nbsp;&nbsp;&nbsp;&nbsp;If the field&#146;s value is between 0 and 19, make the grouped\nversion&#146;s value a 1;\n<br>&nbsp;&nbsp;&nbsp;&nbsp;If it is between 20 and 40, make the grouped value a 2;\n<br>&nbsp;&nbsp;&nbsp;&nbsp;If between 41 and 60, make it a 3;\n<br>&nbsp;&nbsp;&nbsp;&nbsp;If 61 or greater, make it a 4;\n<br>&nbsp;&nbsp;&nbsp;&nbsp;If can&#146;t be calculated (999), make it a 9.</p>\n</font>\n\n<p>Add them to the layout; label, format and position them well.</p>\n\n<p>&bull; Add one or more of these following summary fields to\nyour report. Note you may have to create some of the computed fields discussed above. The new fields are</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;# of people in age group 1\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of people in age group 2\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of people in age group 3\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of people in age group 4</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;# of women in age group 1\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of women in age group 2\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of women in age group 3\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of women in age group 4</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;# of men in age group 1\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of men in age group 2\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of men in age group 3\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of men in age group 4</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;# of dx patients in age group 1\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of dx patients in age group 2\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of dx patients in age group 3\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of dx patients in age group 4</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;# of current tx patients in age group 1\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of current tx patients in age group 2\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of current tx patients in age group 3\n<br>&nbsp;&nbsp;&nbsp;&nbsp;# of current tx patients in age group 4</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;#of patients whose first event occurred when they were in age group 1\n<br>&nbsp;&nbsp;&nbsp;&nbsp;#of patients whose first event occurred when they were in age group 2\n<br>&nbsp;&nbsp;&nbsp;&nbsp;#of patients whose first event occurred when they were in age group 3\n<br>&nbsp;&nbsp;&nbsp;&nbsp;#of patients whose first event occurred when they were in age group 4</p>\n\n<p>Another common database activity is to pull out selected\nrecords and/or fields and send them to another site (as the Networks do,\nsending their data to CMS).</p>\n\n<p>Let&#146;s assume you are sending a copy of the database to a researcher. </p>\n\n<p>&bull;  Make a copy of your database. Remove from it the facility\nfields (this researcher doesn&#146;t care about them); also remove the\nsummary fields and reports (these don&#146;t transfer to a different\ndatabase well, since they are not really part of the patient table). Save the\nrevised database with the name <font class = \"codeFaceSmall\">\nFor Dr Spock</font>, as a tab delimited text file. Turn it in electronically with\nyour other work.</p>\n\n<p>There is much more that can be\nlearned from this data. Further summary statistics can be computed, both grand\nand by group, and using fields we haven&#146;t employed; research questions\ncan be investigated. Data can be graphed and charted, making it even easier to\nsee patterns in it. Data can be copied to other tools within Office and\nanalyzed or processed there (for instance, copying data to a spreadsheet lets\nyou use statistics not available in Access.) Or pictures and\nother data can be copied from elsewhere in Office and copied into your database\nlayouts to &#147;spiff them up.&#148;</p>\n\n<p>And there are many other areas of\ninquiry; here are some you might consider: </p>\n\n<p>Do patients who have ever had a\ntransplant live longer than patients who have never had one? (If not, then\nmaybe the government shouldn&#146;t fund transplants&#151;but perhaps\nit&#146;s more subtle than this...)</p>\n\n<p>Are there differences in longevity\nbased on when ESRD began (for instance, do youngsters who start on ESRD live as\nlong as elders who do)? </p>\n\n<p>How long does a typical\ntransplanted kidney function?</p>\n\n<p>How long does a patient typically\nstay on CAPD? To what mode do they go when they change?</p>\n\n<p>Which facilities have the highest\nfatality rate? Transplant failure rate? Leaving-CAPD rate?</p>\n\n<p>Are there major differences in any\nof these findings because of demographic factors (e.g., age, gender,\nethnicity)?</p>\n\n<p>So, if you&#146;d like, &#147;massage the\ndata&#148; further. You&#146;ll need to think carefully about what\nquestions you want to try to answer, and how best to go about analyzing the\ndata to do so.</p>\n\n<p>Your grade for this part of the\nassignment will depend one how much additional work you undertake, how well you\ndo it, and how complicated it is to execute. Remember, though, you cannot get\noptional credit unless you have completed the required parts of this\nassignment; we want you to focus on the required material first. </p>\n\n<font face=\"Helvetica\" size=1>\n<p>Written by\nNorman Jacobson, December 1995; inspired by his work for ESRD Network #18\n<br>Rewritten by\nNorman Jacobson (to change some tasks and split into smaller exercises), December 1996\n<br>Rewritten for Windows NT, Microsoft Access and ICS 1A by Norman Jacobson, September 1997\n<br>Revised by Norman Jacobson, April 1998\n<br>Revised by Norman Jacobson, September 1998\n<br>Minor revisions by Norman Jacobson, August 1999<\n<br>Revised for ICS10A by Norman Jacobson, December 2000<\n<br>Revised for the Winter 2005 offering of ICS10A, including updating to reflect Access 2003, by\nNorman Jacobson, December 2004\n<br>Minor revisions and some polishing for ICS10A Spring 2006 by Norman Jacobson, March and April 2006</p>\n\n</font>\n\n</body>\n</html>\n", "encoding": "ascii"}