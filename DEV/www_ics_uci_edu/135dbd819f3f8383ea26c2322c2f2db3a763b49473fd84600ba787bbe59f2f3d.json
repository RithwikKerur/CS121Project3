{"url": "https://www.ics.uci.edu/~eppstein/junkyard/qtvr/", "content": "<HTML><HEAD>\n<TITLE>QTVR and Mathematical Visualization</TITLE>\n</HEAD><BODY BGCOLOR=\"#FFFFFF\" FGCOLOR=\"#000000\">\n<META name=\"Owner\" value=\"eppstein\">\n<META name=\"Reply-To\" value=\"eppstein@ics.uci.edu\">\n</HEAD><BODY BGCOLOR=\"#FFFFFF\" FGCOLOR=\"#000000\">\n<!--#config timefmt=\"%d %h %Y, %T %Z\" -->\n<H1>\n<A HREF=\"http://www.ics.uci.edu/~eppstein/junkyard/\"><IMG src=\"../junkyard.gif\" ALIGN=center WIDTH=\"545\" HEIGHT=\"45\" ALT=\"The Geometry Junkyard\" BORDER=0></A>\n</H1>\n<HR>\n<H1>Quicktime VR and Mathematical Visualization</H1>\n\nMany mathematical constructions, particularly in geometry, can be\nunderstood more easily if some form of animation or motion is displayed.\nAnimated GIFs, MPEG, and Quicktime are popular formats for simple animations,\nbut do not allow for interaction.\n\n<P>The three most common methods for interactive display of three\ndimensional objects on the web seem to be\nthe Virtual Reality Modeling Language (VRML),\nApple's <A HREF=\"http://quicktimevr.apple.com/\">Quicktime VR</A> (QTVR),\nand Java.  All can be used with Netscape or other browsers on both\nWindows and Mac platforms; Java also works on Unix machines but the\nother two apparently do not.  VRML represents three-dimensional objects\ndirectly, with an interface allowing the objects and point of view to\nboth move, but is limited to displaying only three dimensional Euclidean\nspace and (because it must be rendered in realtime) can only do certain\nprimitive types of rendering.  Since Java is a programming language, it\ncan (theoretical) display anything, and its user interface controls need\nnot correspond directly to camera motion; its limits are set by\nprogrammer competence and the same realtime rendering problem that\nbesets VRML.  QTVR objects are formed simply from a set of precomputed\nimage frames, so it is as unlimited as Java in the types of object it\ncan display, it doesn't require as much programming effort, and it also\navoids the realtime rendering bottleneck of the other two methods.\nQTVR's user interface only provides for two degrees of freedom but those\ndegrees of freedom can like Java be used to control any parameter, not\njust camera motion.  Therefore QTVR seems the most flexible option for\nmathematical visualizations requiring only limited user interaction.\n(QTVR also excels in viewing photographic or photographic-quality images\nsuch as fashion modeling, landscapes, and architectural walkthroughs.)\nHowever, QTVR's bandwidth requirements are typically much higher than\nthe other methods.\n\n<P>Herewith my efforts in the use of QTVR\nfor mathematical visualization.\n\n<P><HR><P>\n\n<H2>Box in a Box</H2>\n\nThis exercise illustrates the solution to a problem\n<A HREF=\"../box-in-box.html\">posed on sci.math by Carl Parkes</A>:\nwhat is the smallest cube that can be put inside another cube\ntouching all the faces?  Or equivalently what is the largest cube\nthat can circumscribe another cube in such a way that all its faces are\ntouched.  In my solution, the inner cube is scaled by a factor of 3/5\nfrom the outer, and is rotated 60 degrees along the main diagonal.\nIf the outer cube is the unit cube [0,1]<sup>3</sup>, the inner cube's\nvertex coordinates are all integer multiples of 1/5.\n\nOriginally, as with most of my geometry junkyard entries, I illustrated\nthis with a line drawing made in Adobe Illustrator (also using Adobe\nDimensions to help with the 3d orthogonal perspective; for more\ncomplicated drawings I use Mathematica or POV-Ray for perspective help):\n\n<P><CENTER><IMG SRC=\"bb-illo.gif\" WIDTH=254 HEIGHT=319\nALT=\"line drawing of box in a box\"><BR>\nAdobe Illustrator line drawing:\n<A HREF=\"bb-illo.gif\">GIF</A>\n(<!--#fsize file=\"bb-illo.gif\" -->);\n<A HREF=\"bb-illo.ps\">postscript source</A>\n(<!--#fsize file=\"bb-illo.ps\" -->)\n</CENTER>\n\n<P>Later, I redid this drawing as a raytraced rendering.\nSome of the complications here included making the outer box look\ntransparent, but not distorting the inner box's shape, and still making it\npossible to visualize the outer shape. I used POV-Ray's glass texture,\nmodified to turn off refraction, increase surface roughness, and\ndecrease the amount of specular reflection.  The image size is about 2/3 that\nof the original line art, and to the eye looks even smaller (more like\n1/2 the size); the more realistic rendering helps make up for the\nloss in size, but the animated GIF's constant motion is distracting.\nThe QTVR version has better color resolution than the GIF, allows for a\ngreater variety of viewpoints, and allows\nthe user to understand the shape better by controlling the direction\nfrom which it is viewed.\n\n<P><CENTER><IMG SRC=\"boxinbox.gif\" WIDTH=200 HEIGHT=200\nALT=\"rendered box in a box\"><BR>\nRendered box in box:\n<A HREF=\"boxinbox.gif\">animated GIF</A>\n(<!--#fsize file=\"boxinbox.gif\" -->); <BR>\n<A HREF=\"boxinbox.mov\">single degree of freedom QTVR</A>\n(<!--#fsize file=\"boxinbox.mov\" -->; same views as GIF); <BR>\n<A HREF=\"bb3d.mov\">full QTVR</A>\n(<!--#fsize file=\"bb3d.mov\" -->);\n<A HREF=\"bb3d.pov\">POV-Ray source</A>\n(<!--#fsize file=\"bb3d.pov\" -->);\n</CENTER>\n\n\n<P><SMALL>Technical details:\nRendered by\n<A HREF=\"http://ourworld.compuserve.com/homepages/povraymac/\">POV-Ray</A></TD>,\nconverted to animated GIF and QTVR by\n<A HREF=\"http://www.pascal.com/mirrors/gifbuilder/\">GIFbuilder 0.5</A>,\n<A HREF=\"http://solutions.apple.com/pub/quicktime-vr/Goodies/ConvertToMovie/ConvertToMovie.html\">ConvertToMovie 1.6</A>,\n<A HREF=\"http://quicktimevr.apple.com/dev/tool.html\">Make QTVR\nObject 1.0b4</A>,\nand a <A HREF=\"rnf.hqx\">simple AppleScript program</A> for renaming\nPOV-Ray output files to the names expected by  ConvertToMovie.\nViews were chosen with 6 degrees\nof separation, decreased from QTVR's recommendation of 10 for greater\nsmoothness of rotation.\nVertical camera angle ranges from 0 to 66 degrees (20 degrees for the GIF).\nBecause of the symmetry of the configuration, rendering only needed to be\ndone through a 120 degree horizontal rotation, saving a factor of 3 in\nfile size and rendering time.\nEven so, the 240 frames in the full QTVR object use 4MB of storage\nand took 6&nbsp;1/2 hours to render on a 200MHz PowerPC 603.\nThis was my first QTVR project, and my first animated GIF, so I spent a\nlot of time trying different image compression options, color maps, and\nso on, finally settling on dithering for the GIF and JPEG compression\n(100% quality) for the\nQTVR frames. Lower quality JPEGs were smaller but made\nthe inner cube's edges blurry; ConvertToMovie's \"Graphics\" option was my\nsecond choice for QTVR image format.\n</SMALL>\n\n<P><HR><P>\n\n<H2>Three Untetrahedralizable Objects</H2>\n\nThe three shapes below are examples of objects that can not be divided\ninto tetrahedra without adding extra \"Steiner\" vertices. \n<A HREF=\"../untetra/\">More mathematical information is available on the\nassociated web page</A>.\n\n<P>I made these as demos for a <A HREF=\"/~eppstein/280g/\">graduate seminar\non mesh generation</A>, to be viewed in class on my laptop computer,\nso the movies are large (both in pixels, 400x400, and in bytes, 6M to 9M).\nDue to time and space limitations I only rendered one degree of freedom.\n\n<P><TABLE><TR ALIGN=CENTER VALIGN=TOP>\n<TD><IMG SRC=\"../untetra/schoen.jpg\" WIDTH=200 HEIGHT=200\" ALT=\"Sch&ouml;nhardt\npolyhedron\">\n\nSch&ouml;nhardt polyhedron:<BR>\n<A HREF=\"../untetra/shoen.mov\">QTVR</A> (6M);<BR>\n<A HREF=\"../untetra/schoen.pov\">POV-Ray source</A> (2k)\n</TD>\n\n<TD><IMG SRC=\"../untetra/thurston.jpg\" WIDTH=200 HEIGHT=200\" ALT=\"Thurston\npolyhedron\">\n\nThurston polyhedron:<BR>\n<A HREF=\"../untetra/thurston.mov\">QTVR</A> (10M);<BR>\n<A HREF=\"../untetra/thurston.pov\">POV-Ray source</A> (2k)\n</TD>\n\n<TD><IMG SRC=\"../untetra/chazelle.jpg\" WIDTH=200 HEIGHT=200\" ALT=\"Chazelle\npolyhedron\">\n\nChazelle polyhedron:<BR>\n<A HREF=\"../untetra/chazelle.mov\">QTVR</A> (10M);<BR>\n<A HREF=\"../untetra/chazelle.pov\">POV-Ray source</A> (2k)\n</TD>\n</TR></TABLE>\n\n<P><SMALL>Technical details:\nRendered by\n<A HREF=\"http://ourworld.compuserve.com/homepages/povraymac/\">POV-Ray</A></TD>\n(with image quality=4, shadows and surface colors rendered correctly but\nno reflections, transparency, etc).\nConverted to JPG by clip2gif, and to QTVR by\n<A HREF=\"http://solutions.apple.com/pub/quicktime-vr/Goodies/ConvertToMovie/ConvertToMovie.html\">ConvertToMovie 1.6</A>,\n<A HREF=\"http://quicktimevr.apple.com/dev/tool.html\">Make QTVR\nObject 1.0b4</A>,\nand a <A HREF=\"rnf.hqx\">simple AppleScript program</A> for renaming\nPOV-Ray output files to the names expected by  ConvertToMovie.\nViews were chosen with 6 degrees\nof separation, decreased from QTVR's recommendation of 10 for greater\nsmoothness of rotation.\nBecause of the symmetry of the configuration, rendering only needed to be\ndone through a 120 degree horizontal rotation for the Sch&ouml;nhardt\npolyhedron, and a 180 degree rotation for the other two.\nThe Chazelle polyhedron\n(formed in POV-Ray as a constructive solid geometry combination of\n44 halfspaces and a cube) was particularly slow to generate: each frame\ntook roughly 12 minutes to render on a 200MHz PowerPC 603.\nImages were not compressed in conversion to QTVR.\n</SMALL>\n\n<P><HR><P>\nFrom the <A HREF=\"/~eppstein/junkyard/\">Geometry Junkyard</A>,\ncomputational\nand recreational geometry.<BR>\n<A HREF=\"http://www.ics.uci.edu/~eppstein/\">David Eppstein</A>,\n<A HREF=\"http://www.ics.uci.edu/~theory/\">Theory Group</A>,\n<A HREF=\"http://www.ics.uci.edu/\">ICS</A>,\n<A HREF=\"http://www.uci.edu/\">UC Irvine</A>.<P>\n<SMALL>Last update: <!--#flastmod file=\"index.html\" -->.</SMALL>\n</BODY></HTML>\n", "encoding": "ascii"}