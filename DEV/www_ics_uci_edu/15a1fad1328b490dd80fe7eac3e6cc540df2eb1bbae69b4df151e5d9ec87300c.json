{"url": "https://www.ics.uci.edu/~aviral/papers/otJournal.html", "content": "<title>otJournal</title>\n<body bgcolor=#ffffff>\n<h2> Retargetable Pipeline Hazard Detection for Partially Bypassed\nProcessors \n</h2>\n  \n<a href=\"http://www.ics.uci.edu/~aviral/papers/OTJournal.pdf\"><img\nsrc=\"pdf.png\" alt=\"pdf\" width=\"34\" height=\"34\" border=\"0\"></a>\n\n\n<p><i>\n<a href=\"http://www.ics.uci.edu/~aviral\"> Aviral Shrivastava </a>,\n<a href=\"http://www.ics.uci.edu/~dutt\"> Nikil Dutt </a>,\n<a href=\"http://www.ics.uci.edu/~nicolau\"> Alex Nicolau </a>, and \n<a href=\"http://search2.intel.com/corporate/default.aspx?culture=en-US&q=Eugene+Earlie\"> Eugene Earlie</a>,\n</i>\n\n<p><b>IEEE TVLSI:</b> <i>IEEE Transactions on Very Large Scale Integrated\ncircuits\n</i>\n\n\n<p><b>Abstract: </b>\nRegister bypassing is a widely used feature in modern processors to eliminate certain data hazards.\nAlthough complete bypassing is ideal for performance, it has significant impact on the cycle time, area,\nand power consumption of the processor. Owing to the strict design constraints on the performance, cost\nand the power consumption of embedded processor systems, architects seek a compromise between the\ndesign parameters by implementing partial bypassing in processors. However, partial bypassing in processors\npresents challenges for compilation. Traditional data hazard detection and/or avoidance techniques used in\nretargetable compilers that assume a constant value of operation latency, break down in the presence of\npartial bypassing. In this article, we present the concept of Operation Tables that can be used to accurately\ndetect data hazards, even in the presence of incomplete bypassing. Operation Tables integrate the detection\nof all kinds of pipeline hazards in a unified framework, and can therefore be easily deployed in a compiler\nto generate better schedules. Our experimental results on the popular Intel XScale embedded processor\nrunning embedded applications from the MiBench suite, demonstrate that accurate pipeline hazard detection\nby Operation Tables can result in up to 20% performance improvement over the best performing GCC\ngenerated code. Finally we demonstrate the usefulness of Operation Tables over various bypass configurations\nof the Intel XScale.\n<p>\n\n<hr>\n\n<table cellpadding=\"2\" cellspacing=\"2\" border=\"0\" width=\"100%\">\n  <tbody>\n    <tr>\n      <td valign=\"left\">\n      Center For Embedded Computer Systems,<br> \n      Department of Information and Computer Science,<br>\n      University of California, Irvine.\n      </td>\n    </tr>\n  </tbody>\n</table>\n", "encoding": "ascii"}