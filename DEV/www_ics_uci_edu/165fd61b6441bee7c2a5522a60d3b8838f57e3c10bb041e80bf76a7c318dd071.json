{"url": "https://www.ics.uci.edu/~alspaugh/cls/shr/javadoc.html", "content": "<?xml version='1.1'?>\n<!DOCTYPE html\n     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'\n     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>\n<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>\n<head>\n  <title>Javadoc</title>\n  <meta name='Author' content='Thomas A. Alspaugh'/>\n  <meta name='Description' content=\"Javadoc\"/>\n  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>\n  <meta http-equiv='Content-Style-Type' content='text/css'/>\n  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>\n  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->\n  <style type='text/css'>\n    dl.code      {  padding-left: 0.75em;  }\n    dl.code dt   {\n      font-family: monospace;\n      font-style: normal;\n      font-size:125%;\n    }\n    dl.code dd   {  margin-left: 1.5em;  }\n    code dfn     {  font-style: normal;  }\n    span.comment {  color: olive;  }\n    dl.code dt   {  font-family: monospace;  }\n    @media screen {\n      body     {  background: url(\"img/bg-javadoc.png\") repeat-y;  }\n      #TMain   {  margin-left: 10.00em;  }\n    }\n  </style>\n</head>\n<body>\n\n<div id='TBg'>\n\n<div id='THeader'>\nJavadoc\n<span class='newUrl'><a href='https://thomasalspaugh.org/pub/fnd/javadoc.html'\n  >thomasalspaugh.org/pub/fnd/javadoc.html</a></span>\n</div>\n\n<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->\n<p>  <a class='sc' href='../../index.html'>Home</a>\n</p>\n<div class='hr'> </div>\n<p>  <a href='index.html'>Foundations home</a>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='set.html'>Sets</a><br/>\n<a href='relation.html'>Relations</a><br/>\n<a href='correspondence.html'>Correspondences</a><br/>\n<a href='orderedSet.html'>Ordered Sets</a><br/>\n<a href='lattice.html'>Lattices</a><br/>\n<a href='graph.html'>Graphs</a><br/>\n<a href='powerset.html'>Powersets</a><br/>\n<a href='binaryString.html'>Binary Strings</a><br/>\n<a href='logicConcepts.html'>Logic</a><br/>\n<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->\n<a href='greek.html'>Greek</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='glossaryExternal.html'>Glossary</a><br/>\n<a href='goodAbstract.html'>Abstracts</a><br/>\n<a href='argument.html'>Argument</a><br/>\n<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>\n<a href='hohfeld.html'>Legal Relations</a><br/>\n<a href='goodPresentation.html'>Presentations</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='quickStart.html'>Elicitation</a><br/>\n<a href='ontology.html'>Glossaries</a><br/>\n<a href='goal.html'>Goals</a><br/>\n<a href='istar.html'>i*</a><br/>\n<a href='SCR.html'>SCR</a><br/>\n<a href='tracing.html'>Tracing</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='alloy.html'>Alloy</a><br/>\n<a href='msc.html'>MSCs</a><br/>\n<a href='regularExpression.html'>Regular Exprs.</a><br/>\n</p><!-- -spell MSCs Exprs -->\n<div class='hr2'> </div>\n<p>\n<a href='java-designPattern.html'>Design Patterns</a><br/>\n<a href='javadoc.html'>Javadoc</a><br/>\n<a href='java-package.html'>Java Packages</a><br/>\n<a href='java-type.html'>Java Types</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='html.html'>(X)HTML</a><br/>\n<a href='xmlSchema.html'>XML Schemas</a><br/>\n<a href='xslt.html'>XSLT</a><br/>\n</p><!-- -spell XSLT -->\n</div>\n\n\n<!-- No right column -->\n<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->\n<!--xhtml -y -->\n\n\n<!--spell API Charset IndexOutOfBoundsException NullPointerException OptsFile -->\n<!--spell SDK StringBuffer StringBuilder abc awt charAt classname -->\n<!--spell compareToIgnoreCase doctitle documenation href html javadoc -->\n<!--spell lang linkplain optsFile packagelist param pathlist serializable -->\n<!--spell sourcefiles sourcepath src str stylesheet subpackages util -->\n<!--spell windowtitle -->\n\n\n<h1>Table of contents</h1>\n\n<div id='ToC'>\n  <h1><a href='#Introduction'>Introduction</a></h1>\n  <h1><a href='#organization'>Javadoc organization</a></h1>\n  <h1><a href='#overview-package'>Overview and package summaries</a></h1>\n  <h2><a href='#overview'>Overview documentation:&nbsp; the overview file</a></h2>\n  <h2><a href='#package'>Package documentation:&nbsp; the <code>package.html</code> file</a></h2>\n  <h1><a href='#doc-comment'>Doc comments</a></h1>\n  <h2><a href='#syntax'>Syntactic form</a></h2>\n  <h2><a href='#first-sentence'>The essential first sentence</a></h2>\n  <h2><a href='#class'>Class and interface doc comments</a></h2>\n  <h2><a href='#field'>Field doc comments</a></h2>\n  <h2><a href='#method'>Constructor and method doc comments</a></h2>\n  <h2><a href='#inheritance'>Inheritance of doc comments</a></h2>\n  <h2><a href='#doc-example'>Example doc comments</a></h2>\n  <h1><a href='#tag'>@Tags</a></h1>\n  <h1><a href='#command-line'>The <code>javadoc</code> command</a></h1>\n  <h2><a href='#options'><code>javadoc</code> -options and arguments</a></h2>\n  <h2><a href='#packages'>Packages</a></h2>\n  <h2><a href='#sourcefiles'>Source files</a></h2>\n  <h2><a href='#at-files'>@files</a></h2>\n</div> <!-- id='ToC' -->\n\n\n\n<h1 id='Introduction'>Introduction</h1>\n\n<p>\n<code>javadoc</code> is a command-line tool\nfor extracting special comments\n(called <a href='#doc-comment'>doc comments</a>)\nfrom java source files\nand generating an easy-to-use HTML file tree\ncontaining them.&nbsp;\n<a  href='#doc-comment'>Doc comments</a> begin with <code>/**</code>\nand immediately precede a\n<a href='#class'>class</a>,\n<a href='#class'>interface</a>,\n<a href='#method'>constructor</a>,\n<a href='#method'>method</a>,\n  or\n<a href='#field'>field</a> definition\nare extracted and processed.&nbsp;\nThe comments can include standard\n<a href='http://www.w3.org/html/'>HTML</a> markup\nand javadoc\n<a href='#tag'><code>@tags</code></a>.&nbsp;\nThe\n<a href='http://java.sun.com/javase/6/docs/api/index.html'>Java API Specification</a>\nis an example of what <code>javadoc</code> produces.&nbsp;\nThe <code>javadoc</code> tool is part of the free Sun SDK distribution.&nbsp;\n</p>\n\n\n<h1 id='organization'>Javadoc organization</h1>\n\n<p>\nThe HTML output generated by <code>javadoc</code>\nis organized like java source is:&nbsp;\n</p>\n\n<ul>\n  <li> at the top level, as a group of several packages\n    (with an <a href='#overview'>overview summary</a>),\n  </li>\n  <li> within a group, as individual packages\n    (each with a <a href='#package'>package summary</a>),\n  </li>\n  <li> within a package, as classes and interfaces\n    (each with a <a href='#class'>class or interface doc comment</a>),\n    and\n  </li>\n  <li> within a class or interface,\n    as fields (each with a <a href='#field'>field doc comment</a>),\n    and constructors and methods\n    (each with a <a href='#method'>constructor or method doc comment</a>).&nbsp;\n  </li>\n</ul>\n\n<h1 id='overview-package'>Overview and package summaries</h1>\n\n<h2 id='overview'>Overview documentation:&nbsp; the overview file</h2>\n\n<p>\nThe overview file for the output from a javadoc compilation\ncan appear in a file of any name;&nbsp;\nthe file name is specified in the <a href='#overview'>-overview</a> option\nto the javadoc command.&nbsp;\n</p>\n\n<p>\nThe file may contain HTML elements and\n<a href='#inline-tag'>inline <code>{@tags}</code></a>,\nand may conclude with one or more:&nbsp;\n</p>\n\n<ul>\n  <li> <code><a href='#see'>@see</a></code> block tags\n  </li>\n  <li> <code><a href='#author'>@author</a></code> block tags\n  </li>\n</ul>\n\n<p>\nThe file should begin with an HTML &lt;body&gt; tag\nand end with an HTML &gt;/body&gt; tag.&nbsp;\n</p>\n\n\n<h2 id='package'>Package documentation:&nbsp; the <code>package.html</code> file</h2>\n\n<p>\nThe summary describing a package\nmust appear in a file named <code>package.html</code>\nin the package directory along with the java files for the class.&nbsp;\n</p>\n\n<p>\nThe format of the <code>package.html</code> file\nis the same as that of the <a href='#overview'>overview</a> file.&nbsp;\n</p>\n\n\n<h1 id='doc-comment'>Doc comments</h1>\n<!-- <div class='toTopH1'><a href=''>top</a></div> -->\n\n<p>\nDoc comments describe\nclasses,\ninterfaces,\nfields,\nconstructors,\nand methods.&nbsp;\n</p>\n\n\n<h2 id='syntax'>Syntactic form</h2>\n\n<p>\nEach doc comment consists of:&nbsp;\n</p>\n\n<ol>\n  <li> <code>/**</code>\n  </li>\n  <li> an optional main description consisting of text that may contain\n    HTML and\n    <a href='#inline-tag'>inline <code>{@tags}</code></a> but no\n    <a href='#block-tag'>block <code>@tags</code></a>\n  </li>\n  <li> zero or more javadoc <a href='#block-tag'>block <code>@tags</code></a>\n  </li>\n  <li> <code>*/</code>\n  </li>\n</ol>\n\n<p>\nText in the description and tag blocks\ncan contain HTML format elements.&nbsp;\n</p>\n\n<table cellpadding='2'>\n<tbody>\n  <tr><td colspan='2'> A doc comment may be all on one line:\n<pre>\n  /**  All on one line -- but still a doc comment.  */\n</pre>\n      </td>\n  </tr>\n  <tr><td valign='top'> or span several lines:\n<pre>\n  /**\n    Spans several lines --\n    still a doc comment\n  */\n</pre>\n      </td>\n      <td>\n        The second and later lines of a multi-line doc comment\n<pre>\n  /**\n   *  For that 'retro'\n   *  FORTRAN look.\n   */\n</pre>\n        may begin with whitespace and an asterisk,\n        which javadoc discards.\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h2 id='first-sentence'>The essential first sentence</h2>\n\n<p>\nThe <i>first sentence</i> of each\n<!-- <a href='#package'>package</a>, -->\n<a href='#class'>class</a>,\n<a href='#class'>interface</a>\n<a href='#field'>field</a>,\n<a href='#method'>constructor</a>,\nand\n<a href='#method'>method</a>\ndoc comment\nis reused in the indexes,\nso this sentence should summarize the thing described,\nconcisely but completely.&nbsp;\n</p>\n\n<p>\nThe recommended grammatical form for the first line of\nthe doc comment for class X is\n'An X is ...'\nor an equivalent sentence.&nbsp;\n</p>\n\n<p>\nThe recommended form for a constructor or method is that it begin with a verb\nand be the completion of a sentence that would begin\n'This constructor ...' or 'This method ...', respectively.&nbsp;\n</p>\n\n<p>\nFor example, the <code>java.lang</code> package and\n<code>java.lang.String</code> doc comments begin:\n</p>\n\n<table>\n<tbody>\n  <tr><th>package</th>\n      <td>'Provides classes that are fundamental to\n        the design of the Java programming language.'\n      </td>\n  </tr>\n  <tr><th>class</th>\n      <td>'The String class represents character strings.'\n      </td>\n  </tr>\n  <tr><th>constructor</th>\n      <td>'Initializes a newly created String object so that it represents\n        an empty character sequence.'\n      </td>\n  </tr>\n  <tr><th>method</th>\n      <td>'Returns the character at the specified index.'\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h2 id='class'>Class and interface doc comments</h2>\n\n<p>\nThe doc comment describing a class or interface\nmust appear immediately before the class or interface.&nbsp;\nIts first sentence should summarize the class or interface\nconcisely but completely;&nbsp;\na good form for class or interface X is\n'An X is a ...', 'An X represents a ...', or\n'A ...' or 'Represents a ....'&nbsp;\nIt may include <a href='#inline-tag'>inline <code>{@tags}</code></a>\nand may conclude with one or more:\n</p>\n\n<ul>\n  <li> <code><a href='#see'>@see</a></code> block tags\n  </li>\n  <li> <code><a href='#author'>@author</a></code> block tags\n  </li>\n</ul>\n\n<h2 id='field'>Field doc comments</h2>\n\n<p>\nThe doc comment describing a field\nmust appear immediately before the field declaration.&nbsp;\nIt may include <a href='#inline-tag'>inline <code>{@tags}</code></a>.&nbsp;\nIts first sentence should summarize the field concisely but completely.&nbsp;\n</p>\n\n\n<h2 id='method'>Constructor and method doc comments</h2>\n\n<p>\nThe doc comment describing a method or constructor\nmust appear immediately before the field declaration.&nbsp;\nIts first sentence should summarize the method or constructor\nconcisely but completely,\nand should begin with a verb and complete 'This constructor ...'\nor 'This method ...', respectively.&nbsp;\nExamples are\n'Initializes a newly created String object so that it represents\nan empty character sequence' or\n'Returns the character at the specified index,'\nrespectively.&nbsp;\nThe doc comment\nmay include <a href='#inline-tag'>inline <code>{@tags}</code></a>,\nand should end with\n</p>\n\n<ul>\n  <li> a <code><a href='#param'>@param</a></code> block tag for each of the\n    method or constructor's parameters,\n  </li>\n  <li> a <code><a href='#return'>@return</a></code> block tag,\n    if it is a method whose type is not <code>void</code>,\n    and\n  </li>\n  <li> a <code><a href='#throws'>@throws</a></code> block tag\n    for each exception the method or constructor\n    can throw (whether or not the method or constructor declares this).\n  </li>\n</ul>\n\n<h2 id='inheritance'>Inheritance of doc comments</h2>\n\n<p>\nThe doc comments of a\n<a href='#class'>class or interface</a>\nmay be inherited by a class that extends or implements it, respectively.&nbsp;\n</p>\n\n<p>\nIf the subclass does not provide its own implementation of a method,\nthe generated description of it\nlists the inherited methods with links to their descriptions.&nbsp;\n</p>\n\n<p>\nIf the subclass implements a method of its superclass or interface,\nbut the java file does not contain a doc comment for it,\nthe doc comment of the superclass or interface\nis inherited\nand appears word-for-word in the description of the subclass.&nbsp;\n</p>\n\n\n<h2 id='doc-example'>Example doc comments</h2>\n\n<h3>For the\n<a href='http://java.sun.com/javase/6/docs/api/java/lang/String.html'\n><code>String</code>\nclass</a></h3>\n\n<pre>\n/**\n  The String class represents character strings.\n  All string literals in Java programs, such as &lt;code&gt;'abc'&lt;/code&gt;,\n  are implemented as instances of this class.\n  &lt;p&gt;\n  Strings are constant;\n  their values cannot be changed after they are created.\n  String buffers support mutable strings.\n  Because String objects are immutable they can be shared.\n  For example:\n  &lt;pre&gt;\n\n           String str = 'abc';\n\n  &lt;/pre&gt;\n  &lt;p&gt;\n  is equivalent to:\n  &lt;pre&gt;\n\n           char data[] = {'a', 'b', 'c'};\n           String str = new String(data);\n\n  &lt;/pre&gt;\n\n  &lt;p&gt;\n  The class\n  &lt;code&gt;String&lt;/code&gt;\n  includes methods for examining individual characters\n  of the sequence, for comparing strings, for searching strings,\n  for extracting substrings, and for creating a copy of a string\n  with all characters translated to uppercase or to lowercase.\n  Case mapping is based on the Unicode Standard version specified by\n  the {@link Character} class.\n\n  &lt;p&gt;\n  Unless otherwise noted,\n  passing a null argument to a constructor or method in this class\n  will cause a {@link NullPointerException} to be thrown.\n\n  @see Object.toString()\n  @see StringBuffer\n  @see StringBuilder\n  @see Charset\n  @see Serialized Form\n*/\npublic class String { ...\n</pre>\n\n\n<h3>For the\n<a\nhref='http://java.sun.com/javase/6/docs/api/java/lang/String.html#CASE_INSENSITIVE_ORDER'><code>CASE_INSENSITIVE_ORDER</code>\nfield</a></h3>\n\n<pre>\n/**\nA Comparator that orders &lt;code&gt;String&lt;/code&gt; objects as by\n&lt;code&gt;compareToIgnoreCase&lt;/code&gt;. This comparator is serializable.\n&lt;p&gt;\nNote that this Comparator does &lt;i&gt;not&lt;/i&gt; take locale into account,\nand will result in an unsatisfactory ordering for certain locales.\nThe java.text package provides &lt;i&gt;Collators&lt;/i&gt; to allow\nlocale-sensitive ordering.\n@see Collator.compare(String, String)\n*/\npublic static final Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER;\n</pre>\n\n<h3>For the\n<a\nhref='http://java.sun.com/javase/6/docs/api/java/lang/String.html#String(java.lang.String)'\n><code>String(String)</code>\nconstructor</a></h3>\n\n<pre>\n/**\n  Initializes a newly created &lt;code&gt;String&lt;/code&gt; object\n  so that it represents the same sequence of characters as the argument;\n  in other words, the newly created string is a copy of the argument string.\n  Unless an explicit copy of &lt;code&gt;original&lt;/code&gt; is needed,\n  use of this constructor is unnecessary since Strings are immutable.\n  @param original  a String.\n*/\npublic String(String original) { ...\n</pre>\n\n\n<h3>For the\n<a href='http://java.sun.com/javase/6/docs/api/java/lang/String.html#charAt(int)'\n><code>charAt(int)</code>\nmethod</a></h3>\n\n<pre>\n/**\n  Returns the &lt;code&gt;char&lt;/code&gt; value at the specified index.\n  An index ranges from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length()\n    - 1&lt;/code&gt;.\n  The first char value of the sequence is at index &lt;code&gt;0&lt;/code&gt;,\n  the next at index &lt;code&gt;1&lt;/code&gt;, and so on, as for array indexing.\n  @param index  the index of the char value.\n  @return the char value at the specified &lt;code&gt;index&lt;/code&gt;\n    of this string.\n    The first &lt;code&gt;char&lt;/code&gt; value is at index\n    &lt;code&gt;0&lt;/code&gt;.\n  @throws IndexOutOfBoundsException  if the index argument is negative\n    or not less than the length of this string.\n*/\npublic char charAt(int index) { ...\n</pre>\n\n\n<h1 id='tag'>@Tags</h1>\n\n<p id='block-tag'>\nA <dfn>block tag</dfn> has the form <code>@tag</code> followed by text.&nbsp;\nBlock tags can only appear after the main description of a doc comment.&nbsp;\n</p>\n\n<p id='inline-tag'>\nAn <dfn>inline tag</dfn> has the form <code>{@tag ...}</code>.&nbsp;\nInline tags may appear anywhere in a doc comment.&nbsp;\n</p>\n\n<p>\nThe most useful javadoc tags are:&nbsp;\n</p>\n\n<dl class='code'>\n  <dt id='author'>@author <i>name</i>\n    </dt>\n    <dd> This tag adds an 'Author' entry\n      at the end of an overview, <a href='#package'>package</a>, or\n      <a href='#class'>class</a> description.&nbsp;\n      Note that author entries are only generated if\n      the <a href='#author'>-author</a> option is given.&nbsp;\n    </dd>\n  <dt id='link'>{@link <i>package.class#member label</i>}<br/>\n      {@linkplain <i>package.class#member label</i>}\n    </dt>\n    <dd>These inline tags produce a link to the documentation\n      for a <a href='#package'>package</a>, <a href='#class'>class</a>,\n      <a href='#class'>interface</a>, <a href='#method'>constructor</a>,\n      <a href='#method'>method</a>, or\n      <a href='#field'>field</a>.&nbsp;\n      Depending on context,\n      parts of <i>package.class#member</i> may be omitted:\n      <table>\n      <tbody>\n        <tr><th class='blk'>In same package and class</th>\n        </tr>\n        <tr><td class='tt'>{@link #field}</td>\n        </tr>\n        <tr><td class='tt'>{@link #method}</td>\n        </tr>\n        <tr><td class='tt'>{@link #method(Type,Type,...)}</td>\n        </tr>\n        <tr><th>In same package, different class</th>\n        </tr>\n        <tr><td class='tt'>{@link Class#field}</td>\n        </tr>\n        <tr><td class='tt'>{@link Class#method}</td>\n        </tr>\n        <tr><td class='tt'>{@link Class#method(Type,Type,...)}</td>\n        </tr>\n        <tr><td class='tt'>{@link Class}</td>\n        </tr>\n        <tr><th>In another package, or from<br/>\n              <code>package.html</code> or overview</th>\n        </tr>\n        <tr><td class='tt'>{@link package.Class#field}</td>\n        </tr>\n        <tr><td class='tt'>{@link package.Class#method}</td>\n        </tr>\n        <tr><td class='tt'>{@link package.Class#method(Type,...)}</td>\n        </tr>\n        <tr><td class='tt'>{@link package.Class}</td>\n        </tr>\n        <tr><td class='tt'>{@link package}</td>\n        </tr>\n      </tbody>\n      </table>\n      <p>\n      If a label is given,\n      it is used as the label for the link.&nbsp;\n      If no label is given,\n      the appropriately-qualified name of the item being linked to\n      is used as the label for the link.&nbsp;\n      </p>\n      <p>\n      <code>{@link ...}</code> displays the link text in <code>code</code> font,\n      while\n      <code>{@linkplain ...}</code> displays it in plain font.&nbsp;\n      Otherwise they behave the same.&nbsp;\n      </p>\n    </dd>\n  <dt id='param'>@param <i>parameter-name description</i>\n    </dt>\n    <dd>This tag introduces a <a href='#method'>constructor</a> or\n      <a href='#method'>method</a> parameter description.&nbsp;\n      The first word after the tag is the name of the parameter,\n      and the rest of the text following the tag\n      is a description of the parameter.&nbsp;\n    </dd>\n  <dt id='return'>@return <i>description</i>\n    </dt>\n    <dd>This tag introduces a description of the value returned\n      by a non-void <a href='#method'>method</a>.&nbsp;\n    </dd>\n  <dt id='see'>@see <i>reference</i>\n    </dt>\n    <dd>This tag adds a 'See Also' entry.&nbsp;\n      <table>\n      <tbody>\n        <tr><th class='lf'>@see '<i>string</i>'</th>\n            <td>Adds an entry with the string</td>\n        </tr>\n        <tr><th class='lf'>@see&nbsp;&lt;a href='URL#label'&gt;label&lt;/a&gt;</th>\n            <td>Adds an entry with that link.</td>\n        </tr>\n        <tr><th class='lf'>@see&nbsp;<i>package.class#member&nbsp;label</i></th>\n            <td>Adds an entry with a link to the specified documentation.&nbsp;\n              See <code><a href='#link'>{@link}</a></code>\n              for the possibilities.&nbsp;</td>\n        </tr>\n      </tbody>\n      </table>\n    </dd>\n  <dt id='serial'>@serial <i>exclude</i>\n    </dt>\n    <dd>Javadoc documentation normally includes a serialized form page\n      and links to it from many locations.&nbsp;\n      This tag in the <code><a href='#package'>package.html</a></code> file\n      prevents this for all classes in the package.&nbsp;\n    </dd>\n  <dt id='throws'>@throws <i>exception-classname when-description</i>\n    </dt>\n    <dd>This tag describes an exception thrown by\n      a <a href='#method'>constructor</a> or <a href='#method'>method</a>.&nbsp;\n      The first word is the name of the exception class that is thrown,\n      and the remainder of the text following the tag\n      explains the circumstances under which this exception is thrown.&nbsp;\n    </dd>\n</dl>\n\n<p>\nSee\n<a href='http://java.sun.com/j2se/javadoc/index.jsp'>Sun's\njavadoc documentation</a>\nfor more tags.&nbsp;\n</p>\n\n\n<h1 id='command-line'>The <code>javadoc</code> command</h1>\n\n<p>\nThe javadoc command line synopsis is\n</p>\n\n<p class='tt' style='padding-left:1em;'>\njavadoc [<a href='#options'>options</a>]\n[<a href='#packages'>packages</a>]\n[<a href='#sourcefiles'>sourcefiles</a>]\n[<a href='#at-files'>@files</a>]\n</p>\n\n<p>\nExamples in this section are adapted from Sun's examples.&nbsp;\n</p>\n\n\n<h2 id='options'><code>javadoc</code> -options and arguments</h2>\n\n<p>\nThe following options are particularly useful.&nbsp;\nSee\n<a href='http://java.sun.com/j2se/javadoc/index.jsp'>Sun's\njavadoc documentation</a>\nfor more.&nbsp;\n</p>\n\n<dl>\n  <dt id='help-opt'>-help\n    </dt>\n    <dd> Displays help for the javadoc command.&nbsp;\n    </dd>\n  <dt id='author-opt'>-author\n    </dt>\n    <dd> Includes the <a href='#author'>author</a> entries in\n      the generated documentation\n      (by default they are not included).&nbsp;\n    </dd>\n  <dt id='d-opt'>-d  <i>directory</i>\n    </dt>\n    <dd> Puts the documentation tree in the named directory.&nbsp;\n    </dd>\n  <dt id='doctitle-opt'>-doctitle\n    </dt>\n    <dd> Gives a heading to begin the <a href='#overview'>overview</a>.&nbsp;\n    </dd>\n  <dt id='exclude-opt'>-exclude <i>packagelist</i>\n    </dt>\n    <dd> If packages have been specified recursively with\n      <code><a href='#sourcepath-opt'>-sourcepath</a></code>,\n      then those packages in <i>packagelist</i> are\n      excluded.&nbsp;\n    </dd>\n  <dt id='link-opt'>-link <i>external-doc-URL</i>\n    </dt>\n    <dd> Creates links to existing javadoc documentation\n      wherever appropriate.&nbsp;\n      For example, if <i>external-doc-URL</i> points to the Java API,\n      then parameters of type String would be linked to the\n      documentation for java.util.String in the API.&nbsp;\n      More than one <code>-link</code> <i>external-doc-URL</i>\n      option may be given.&nbsp;\n    </dd>\n  <dt id='overview-opt'>-overview  <i>overview-file-pathname</i>\n    </dt>\n    <dd> Read the <a href='#overview'>overview</a>\n      from the file <i>overview-file-pathname</i>.&nbsp;\n    </dd>\n  <dt>-package, -private, -protected, -public\n    </dt>\n    <dd>\n      <table>\n      <tbody>\n        <tr><th>Option</th>\n            <th colspan='4'>Which classes, etc., are documented</th>\n        </tr>\n        <tr id='public-opt'    title='public'   ><th class='tt'>-public</th>\n          <td>public</td> <td>         </td> <td>         </td> <td></td>\n        </tr>\n        <tr id='protected-opt'><th class='tt'>-protected</th>\n            <td>public</td> <td>protected</td> <td>         </td> <td></td>\n        </tr>\n        <tr id='package-opt'   title='package'  ><th class='tt'>-package</th>\n          <td>public</td> <td>protected</td> <td>(package)</td> <td></td>\n        </tr>\n        <tr id='private-opt'   title='private'  ><th class='tt'>-private</th>\n          <td>public</td> <td>protected</td> <td>(package)</td> <td>private</td>\n        </tr>\n      </tbody>\n      </table>\n    </dd>\n  <dt id='sourcepath-opt'>-sourcepath <i>pathlist</i>\n    </dt>\n    <dd> Specifies the directories in which to look for\n      packages, classes, and source files to document.&nbsp;\n      If the <i>pathlist</i> contains two or more directories,\n      they are separated by colons (<b>:</b>).&nbsp;\n      If this option is not given,\n      the current directory is assumed.&nbsp;\n    </dd>\n  <dt id='stylesheet-opt'>-stylesheet <i>pathname</i>\n    </dt>\n    <dd> Specifies an alternate stylesheet\n      that the generated documentation will use.&nbsp;\n      Otherwise, <code>javadoc</code> creates a file\n      <code>stylesheet.css</code> in the documenation directory.&nbsp;\n    </dd>\n  <dt id='subpackages-opt'>-subpackages <i>packagelist</i>\n    </dt>\n    <dd> Equivalent to listing the packages in <i>packagelist</i>\n      and all their subpackages.&nbsp;\n      <i>packagelist</i> is colon-separated.&nbsp;\n    </dd>\n  <dt id='use-opt'>-use\n    </dt>\n    <dd> Each class and package will be given a 'Use' page\n      listing where that class or package is used.&nbsp;\n    </dd>\n  <dt id='windowtitle-opt'>-windowtitle\n    </dt>\n    <dd> Specifies the window title that a browser will show\n      for the generated documentation.&nbsp;\n    </dd>\n</dl>\n\n<h2 id='packages'>Packages</h2>\n\n<p>\nTo generate documentation for a package,\nlist the package names.&nbsp;\nIf the package name is two or more levels deep,\nthe directory names are separated by dot (.)\nas always in Java.&nbsp;\njavadoc will look for each package's source files\nin the package directory,\nand will look for the package directory\non the <code><a href='#sourcepath-opt'>-sourcepath</a></code> path,\nor in the current directory if <code>-sourcepath</code> is not given.&nbsp;\n</p>\n\n<p>\nExamples:\n</p>\n\n<ul>\n  <li> <code>javadoc -d /home/html -sourcepath\n      /home/src java.awt java.awt.event</code>\n  </li>\n  <li> <code>javadoc -d /home/html java.awt java.awt.event</code>\n  </li>\n</ul>\n\n<h2 id='sourcefiles'>Source files</h2>\n\n<p>\nTo generate documentation for specific source files,\nlist the source file names\n(using slashes rather than dots to separate directories,\nand including the <code>.java</code> suffix).&nbsp;\n</p>\n\n<p>\nYou can include both package names and source file names\non the same command line.&nbsp;\n</p>\n\n<p>\nExamples:\n</p>\n\n<ul>\n  <li> <code>javadoc -d /home/html Button.java Canvas.java Graphics*.java</code>\n  </li>\n  <li> <code>javadoc -d /home/html\n      java/awt/Button.java java/applet/Applet.java</code>\n  </li>\n  <li> <code>javadoc -d /home/html\n      /home/src/java/awt/Button.java /home/src/java/awt/Graphics*.java</code>\n  </li>\n  <li> <code>javadoc -d /home/html\n      -sourcepath /home/src java.awt /home/src/java/applet/Applet.java</code>\n  </li>\n</ul>\n\n<h2 id='at-files'>@files</h2>\n\n<p>\nAn <code>@file</code> ('at-file') is a file containing javadoc command line\noptions and arguments.&nbsp;\nTo run <code>javadoc</code> using options and arguments\nin two files whose pathname from the current directory\nare <code>optsFile1</code> and <code>package/OptsFile2</code>,\nput <code>@optsFile1</code> <code>@package/OptsFile</code>\non the <code>javadoc</code> command line.&nbsp;\n</p>\n\n\n<!--xhtml -n -->\n</div>\n\n</div><!-- #TBg -->\n\n<div id='TFooter'>\n<div class='W3C'>\n  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'\n    src='../../img/valid-xhtml10-blue.png'\n    alt='Valid XHTML 1.0 Strict'/></a>\n  <br/>\n  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'\n    src='../../img/vcss-blue.png'\n    alt='Valid CSS!'/></a>\n</div>\n<div class='timestamp'>2019Jan18Fr22:03</div>\n<div style='padding-top:1px;'>\n<a class='plain' href='./index.html' style='font-variant:small-caps;'\n>Thomas A. Alspaugh</a>\n<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;\n    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>\n    <!-- -spell alspaugh uci edu --> </span>\n</div>\n</div>\n\n<!-- Google Analytics code -->\n<script type=\"text/javascript\">\nvar gaJsHost = ((\"https:\" == document.location.protocol)\n  ? \"https://ssl.\" : \"http://www.\");\ndocument.write(unescape(\"%3Cscript src='\" + gaJsHost +\n  \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n<script type=\"text/javascript\">\ntry {\nvar pageTracker = _gat._getTracker(\"UA-15281497-1\");\npageTracker._trackPageview();\n} catch(err) {}\n</script>\n\n</body>\n</html>\n\n", "encoding": "ascii"}