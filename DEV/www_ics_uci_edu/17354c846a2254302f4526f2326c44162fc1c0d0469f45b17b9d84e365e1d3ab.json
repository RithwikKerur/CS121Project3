{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/lab2.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Friday, October 7, 2005 6:25 PM\" />\n<TITLE>Lab Assignment 2</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2DE447E\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2005 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/h21/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style1 {font-family: \"Courier New\", Courier, monospace}\n.style3 {font-size: 10pt}\n-->\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<A NAME=\"_top\"></A>\n<P><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY  &bull; FALL 2009</font></P>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Lab Assignment 2</B></FONT><BR />\n</P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>This assignment is due at the end of lab on\nFriday, October 9.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Choose a partner for this assignment, someone\nyou haven&#39;t worked with already, and make sure the TA knows who your partner is.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(a)</B> Do exercise 3.3.4 (just the several-function\n  version).  Pick two of exercises 4.4.1, 4.4.2, 4.4.3, and 4.4.4.  Pick one\n  of exercises 5.1.2, 5.1.3, or 5.1.5.  Collect all of these definitions into\n  one file (with both partners&#39; names at the top) and submit it via Checkmate.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b)</B>  Using the image.ss teachpack in\nDrScheme, we can write functions that process graphic images.  Here is some\nsample code:<A NAME=\"_14_2998\"></A></FONT></P>\n\n<pre class=\"style1\">\n;; Traffic Light example, HtDP Section 6.2, Figure 8\n;; Revised to use image.ss teachpack by Matthias Felleisen\n(define WIDTH 50)\n(define HEIGHT 160)\n(define RADIUS 20)\n(define OFFSET 50)\n\n(define RED (circle RADIUS 'solid 'red))\n(define YELLOW (circle RADIUS 'solid 'yellow))\n(define GREEN (circle RADIUS 'solid 'green))\n\n(define LIGHT-FRAME (rectangle WIDTH HEIGHT 'outline 'black))\n\n(define ALL-THREE-ON\n  (overlay/xy (overlay/xy (overlay/xy LIGHT-FRAME 0 OFFSET GREEN)\n                          0 0 YELLOW)\n              0 (- OFFSET) RED))\n\n\"All three lights on:\"\nALL-THREE-ON\n</pre>\n\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Copy this code and run it.  Don&#39;t forget\nto add the image.ss teachpack (via the Language menu).</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.1)</B>  Define the images </FONT><FONT FACE=\"Courier New\">RED-ON</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">YELLOW-ON</FONT><FONT FACE=\"Garamond\" SIZE=4>,\nand </FONT><FONT FACE=\"Courier New\">GREEN-ON</FONT><FONT FACE=\"Garamond\" SIZE=4>,\neach of which represents a traffic light with just one color light on in\nthe conventional position.  Make sure you display each image to see that\nthey look right.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.2)</B>  Write the function </FONT><FONT FACE=\"Courier New\">turn-off-red</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes a traffic light image as its input and returns a traffic light\nimage that&#39;s the same as the input, except that the red-light position\nis off (i.e., there&#39;s a white circle in the top position).  You don&#39;t\nhave to check whether the red light (or any other light) is on to start\nwith.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>If you test this with </FONT><FONT FACE=\"Courier New\">(turn-off-red\nALL-THREE-ON)</FONT><FONT FACE=\"Garamond\" SIZE=4>, you should see a traffic\nlight with the yellow and green lights on.  Do that, and then just evaluate\nthe symbol </FONT><FONT FACE=\"Courier New\">ALL-THREE-ON</FONT><FONT FACE=\"Garamond\" SIZE=4>\nagain.  Its value didn&#39;t change; it still shows all three colors.  Nothing\nwe&#39;ve done changes the value we associated with </FONT><FONT FACE=\"Courier New\">ALL-THREE-ON</FONT><FONT FACE=\"Garamond\" SIZE=4>;\nwe just used that value as input to a function, which returned another image,\nanother value based on that input.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>If you have experience programming in other\nlanguages, you might have expected </FONT><FONT FACE=\"Courier New\">ALL-THREE-ON</FONT><FONT FACE=\"Garamond\" SIZE=4>\nto change.  That&#39;s because your previous language probably uses the\n<B>imperative programming</B> style, which generally relies on changing\nthe values of variables.  But in Scheme, we&#39;re programming in the <B>functional\nprogramming</B> style.  This means that we&#39;re not changing the values\nof variables; instead, we&#39;re just sending values as inputs to functions,\nwhich return other values.  You may wonder how it&#39;s even possible to\nwrite programs without assigning new values to variables.  Well, just stay\ntuned, and for the moment just remember that the functions we write don&#39;t\nchange the values of their inputs.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.3)</B>  Write the function </FONT><FONT FACE=\"Courier New\">turn-off-light</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes a traffic light and a symbol (</FONT><FONT FACE=\"Courier New\">&#39;red</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">&#39;yellow</FONT><FONT FACE=\"Garamond\" SIZE=4>,\nor </FONT><FONT FACE=\"Courier New\">&#39;green</FONT><FONT FACE=\"Garamond\" SIZE=4>)\nand returns the traffic light with the specified color position turned off.\n Again, you don&#39;t have to check the status of the specified light in\nthe input image.  Hint:  Chapter 5 describes how to design functions that\ntake one of a list of symbols.  Design at least one test case for this function\n(by explicitly creating an expected result and displaying it alongside the\nresult your function produces).</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.4)</B>  Write the function </FONT><FONT FACE=\"Courier New\">turn-on-light</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes a traffic light and a symbol (</FONT><FONT FACE=\"Courier New\">&#39;red</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">&#39;yellow</FONT><FONT FACE=\"Garamond\" SIZE=4>,\nor </FONT><FONT FACE=\"Courier New\">&#39;green</FONT><FONT FACE=\"Garamond\" SIZE=4>)\nand returns the traffic light with the specified color position turned on.\n Again, you don&#39;t have to check the input.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.5)</B>  Write the function </FONT><FONT FACE=\"Courier New\">switch</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes a traffic light and two symbols (chosen from </FONT><FONT FACE=\"Courier New\">&#39;red</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">&#39;yellow</FONT><FONT FACE=\"Garamond\" SIZE=4>,\nor </FONT><FONT FACE=\"Courier New\">&#39;green</FONT><FONT FACE=\"Garamond\" SIZE=4>);\nthe function returns a traffic light with the first-specified light turned\noff and the second-specified light turned on.  You don&#39;t have to check\nthe input.  Hint:  In defining new functions, it is always best to employ\nfunctions you&#39;ve already defined rather than re-creating the same functionality\nfrom scratch.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.6)</B>  Now it&#39;s time to check the\ninput.  Write a predicate function called </FONT><FONT FACE=\"Courier New\">red-on?</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes a traffic light as input and returns a boolean--true if the red\nlight is on in the input and false if it&#39;s off.  Hint:  Use the function\n</FONT><FONT FACE=\"Courier New\">image-inside?</FONT><FONT FACE=\"Garamond\" SIZE=4>\nfrom the image.ss teachpack.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.7)</B>  Write the predicate function </FONT><FONT FACE=\"Courier New\">traffic-light-working?</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes a traffic light as input and returns a boolean&mdash;true if the light\nis working correctly (i.e., just the red is on, just the yellow is on, or\njust the green is on) and false otherwise.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.8)</B>  Write the function </FONT><FONT FACE=\"Courier New\">next</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes a traffic light as input.  If the image doesn&#39;t represent\na working traffic light, just return the image unchanged.  Otherwise, return\nan image representing the next light in the conventional cycle (a green\nlight becomes yellow; a yellow light becomes red; a red light becomes green).\n Write tests that check each of these transitions.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Submit your definitions via Checkmate.<A NAME=\"_14_7701\"></A></FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(c)</B> Do exercises 6.3.3 and 6.5.2 (on\nwhich you should follow the design recipe completely).  Submit your definitions\nvia Checkmate.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(d)</B> Do exercise 7.2.1.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>For this part, clear all teachpacks and then add the universe.ss teachpack. Do these exercises\n  in section 7.4, which involve shape structures that include a shape&#39;s\n  position in a scene:  7.4.1, 7.4.2 (which places the shape&#39;s image in\n  an empty scene according to the shape&#39;s position), and 7.4.3 (which\n  returns a shape like the input, but with a new position).  Then create a\n  world (for use with universe.ss) that holds a shape, write a </FONT><FONT FACE=\"Courier New\">world-draw</FONT><FONT FACE=\"Garamond\" SIZE=4> function, like the one from last week, that draws this world, and write\n    a </FONT><FONT FACE=\"Courier New\">world-next</FONT><FONT FACE=\"Garamond\" SIZE=4> function that produces a world with the translated image your function from\n      7.4.3 creates.  Now you can test these functions with universe.ss, using code\n      similar to the code on last week&#39;s lab.  Finally, notice that exercises\n      7.4.4, 7.4.5, and 7.4.6 are unnecessary because of what universe.ss does for\n      us automatically.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>Do just one of the functions in exercise 7.5.2.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(e)</B>  Remember that each partner must\ncomplete a partner evaluation form and submit it individually at </FONT><span class=\"style3\"><FONT FACE=\"Courier New\">eee.uci.edu</FONT></span><FONT FACE=\"Garamond\" SIZE=4> by the end of the day on Friday.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21 assignments by David\nG. Kay from Fall 2001.  Modified for image.ss and world.ss teachpacks by\nAngelo Pioli and David G. Kay, Fall 2005. Modified by David G. Kay in Fall 2007 and Fall 2009.</FONT></P>\n<HR />\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,<em> </em></FONT><a href=mailto:kay@uci.edu>kay@uci.edu</A>\n</address>\n<P>\n<FONT FACE=\"Palatino\" SIZE=1>Friday, October 7, 2005 -- 6:25 PM</FONT></P>\n</BODY>\n</HTML>\n", "encoding": "ascii"}