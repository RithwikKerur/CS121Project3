{"url": "https://www.ics.uci.edu/~ejw/authoring/sanmateo/long_slides.html", "content": "<HTML>\n<HEAD>\n<!-- Created by AOLpress/1.2 -->\n<TITLE>Dave Long's Slides for San Mateo Distributed Authoring Meeting</TITLE>\n</HEAD>\n<BODY>\n\n<CENTER>\n<H1>AOLpress/AOLserver</H1>\n\n<H2>Dave Long<BR>\nAmerica Online, Santa Barbara</H2>\n\n<H3>\n<I>dave@sb.aol.com</I>\n</H3>\n</CENTER>\n\n<P>\n<B>AOLserver \"webstore\"</B>\n<UL>\n<LI>\ncurrent version of resource in filesystem <LI>\nmeta-data, indices, etc. in database\n<LI>\nDBMS not required; \"stackable\" with other servers </UL>\n<P>\n<B>HTML source</B>\n<UL>\n<LI>\nWith server-side includes and other dynamic content, how does one request the \"original\" page?<BR>\n(Accept: text/x-html-ssi ?)\n<LI>\nHow much canonicalizing should an authoring tool attempt?<BR> (more palatable when pretty-printed, line-break conventions preserved) </UL>\n<P>\n<B>Rewriting relative links...</B>\n<UL>\n<LI>\nduck the issue - do nothing\n<LI>\nduck the issue - use collections\n<LI>\nuser-specified (state space?)\n<LI>\ntemplate specified\n</UL>\n<P>\n<B>Rewriting relative links...</B>\n<UL>\n<LI>\nuser-specified: by type\n<UL>\n<LI>\nconvert { none, relative links, all }\n<LI>\nconvert relative to absolute\n</UL>\n<LI>\ntemplate-specified: for &lt;APPLET&gt; specifies which <PARAM>&lt;PARAM&gt;s can be rewritten (as above) </UL>\n<P>\n<B>Lost Update</B>\n<UL>\n<LI>\ndo nothing (ostriching)\n<LI>\ndetect lost updates (versioning)\n<LI>\nprevent lost updates\\tab (locking)\n<LI>\nfairness issues (leasing)\n</UL>\n<P>\n<B>Lost Update - versioning</B>\n<UL>\n<LI>\nreads include \"Content-Version:\" headers <LI>\nwrites provide \"Derived-From:\" headers\n<LI>\nserver prevents dirty writes\n<LI>\nsolves the \"CREATE\" problem\n<LI>\nheader syntax has changed for HTTP/1.1\n</UL>\n<P>\n<B>Lost Update - locking</B>\n<UL>\n<LI>\nLOCK/UNLOCK methods\n<LI>\n\"Locked-By:\" header\n<LI>\nuse OPTIONS to detect server support\n<LI>\nruns on top of Content-Version scheme\n<LI>\nfair UNLOCK? collaborative groups hopefully share trust! </UL>\n<P>\n<B>Access Control</B>\n<UL>\n<LI>\nusers / groups (multiple membership)\n<LI>\nMETHOD URL (specific/inherited)\n<LI>\nmachine address (netmask)\n</UL>\n<P>\n<B>Access Control List</B>\n<UL>\n<LI>\nMETHOD+aliases URL (+inheritance)\n<LI>\nallow/deny (user0 user1 ... userN)\n<LI>\nallow/deny (group0 group1 ... groupN)\n<LI>\nallow + deny (netmask0 netmask1 ... netmaskN) </UL>\n<P>\n<B>Versions</B>\n<UL>\n<LI>\nresource revisions are timestamped and saved <LI>\naccessed through prefixed URL, therefore <LI>\nrelative links, images, resolved as of that revision's timestamp <LI>\nabsolute links? version != snapshot?\n</UL>\n<P>\n<B>PUT vs. POST to publish</B>\n<UL>\n<LI>\nPUT method simplifies access control\n<LI>\nPUT method simplifies infrastructure<BR> caching proxies, gateways, etc...\n<LI>\ngeneral-use servers starting to support PUT </UL>\n<P>\n<B>namespace methods</B>\n<UL>\n<LI>\nDELETE\n<LI>\nMKDIR\n<LI>\nBROWSE\n</UL>\n<P>\n<B>BROWSE sample</B>\n<PRE>HTTP/1.0 200 OK\nMIME-Version: 1.0\nDate: Tuesday, 09-Jul-96 23:35:44 GMT\nServer: NaviServer/2.0 AOLserver/2.033\nContent-Type: application/x-navibrowse\nContent-Length: 289\n\napplication/x-navidir .\ntext/html .odo.index.htm\napplication/x-navidir download\ntext/html download.html\ntext/html feedback.html\napplication/x-navidoc images\ntext/html index.html\napplication/x-navidoc press\ntext/html search.html\napplication/x-navidoc server\napplication/x-navimap tools.nvm\n</PRE>\n<P>\n<B>URL mapping</B><BR>\nmagic URLs used for: <BR>\nhttp://server/NS/operation/path... (or form data) <UL>\n<LI>\npage permissions\n<LI>\npage versions\n<LI>\nadminister server\n<LI>\nPrimeHost Advanced Control Panel\n<LI>\nuse methods instead?\n</UL>\n<P>\n<B>PrimeHost Control Panel</B><BR>\nlinked to server administration page, provides <UL>\n<LI>\nlog analysis, log rolling\n<LI>\nMIME type configuration\n<LI>\nFTP reporting, configuration\n<LI>\nemail configuration: aliases/mailing lists </UL>\n<P>\ntransparent extension!\n<P>\n<B>Server API's</B>\n<UL>\n<LI>\nshould we standardize?\n<LI>\ncan \"stack\" servers for some functionality <LI>\nISAPI is a possibility\n</UL>\n<P>\n<B>Editing variants</B>\n<UL>\n<LI>\neditable variants have their own URLs\n<LI>\ndoes this apply to versioning, as well?\n<LI>\nassigning variants to resources similar to access control </UL>\n<P>\n<B>PICS, etc...</B>\n<UL>\n<LI>\ndata-driven support for metadata systems (such as PICs rating) <BR> raters provide form-driven well-known URLs to produce their encoding? <LI>\nold NaviPress \"Describe\" functionality<BR> (forms-based association of metadata with resource) </UL>\n<P>\n<B>miscellanea</B>\n<UL>\n<LI>\ncross-server searching (WAIS, MARC, ...) <LI>\ncross-vendor AutoLinking?\n<LI>\nbetter support for link checking (spec'd, just needs to be implemented?) </UL>\n<P>\n</BODY></HTML>", "encoding": "ascii"}