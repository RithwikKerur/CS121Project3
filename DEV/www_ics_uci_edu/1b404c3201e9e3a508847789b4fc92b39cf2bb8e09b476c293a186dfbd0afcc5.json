{"url": "https://www.ics.uci.edu/~kay/courses/i41/hw/hw5.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Friday, October 28, 2005 9:47 AM\" />\n<TITLE>Fifth Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D235E05F\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/i41/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT size=\"2\" FACE=\"Goudy Old Style\">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\" SIZE=6><B>Fifth Homework </B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">This assignment is due at the start of lab on\nMonday, October 24. </FONT></P>\n<FONT FACE=\"Goudy Old Style\"><B>(1)</B>  In Chapter 25, do exercise 25.4.2. Read Chapter 26 and Chapter 27, which cover material we've seen in class.</FONT>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(2) </B>Create a file with the sorting code from last week: <span class=\"Code-in-Body\">sort4</span>, <span class=\"Code-in-Body\">BST-sort</span>, <span class=\"Code-in-Body\">build-list</span>, and the functions they call. Create five lists of random numbers with 20,000, 40,000, 60,000, 80,000, and 100,000 elements. Set up timing expressions to sort each of those lists with the insertion sort and again with the BST sort. Make a table (using a spreadsheet, a word processor, or paper) with two columns, one for insertion sort and the other for BST sort, and five rows, one for each size list. Fill out the table with the timing figures (just use the first figure in each timing, the CPU time). Can you predict what the entries would be for a list of 120,000 elements, or 200,000, or 1,000,000?</FONT></P>\n<P><font face=\"Goudy Old Style\">We'll talk about these issues next week.</font></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(3) </B>In last week's lab you saw an example of nested lists (lists containing other lists). Here's another:</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">;; Data definition:  A book is either\n;; -- empty, or\n;; -- (cons symbol book), where a symbol represents a word, or\n;; -- (cons book book)</font></pre>\n<P><FONT FACE=\"Goudy Old Style\">So this is a book:</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">(define TTC '(A Tale of Two Cities\n                 (It was the best of times)\n                 (It was the Dover road)))</font></pre>\n<P><FONT FACE=\"Goudy Old Style\">This gives us a hierarchical (tree-shaped) organization; each nested list could be a chapter, which itself could contain lists for each section or paragraph. But suppose we want to count the words in this book.</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">;; word-count:  book -&gt; number\n;; Return number of words in book\n\n(check-expect (word-count TTC) 16)\n(check-expect (word-count empty) 0)</font></pre>\n<P><FONT FACE=\"Goudy Old Style\">We can't just say <code>(length TTC)</code>; that gives us the number of elements at the top level (7 in this case), counting each nested list as a single item. Instead, we need to look into each nested list. We can write the code for this by following the data definition, which has three parts: The list is empty, the first item is a symbol, or the first item is a list:</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">(define word-count\n  (lambda (B)\n    (cond\n      ((empty? B) ...)\n      ((symbol? (first B)) ...)\n      (else ...))))</font></pre>\n<P><FONT FACE=\"Goudy Old Style\">If the book is empty, it has zero words. If the first item is a word (a symbol), add 1 to the number of words in the rest of the book. If the first item is a book (a list), add the number of words in that book to the number of words in the rest of the book.</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">(define word-count\n  (lambda (B)\n    (cond\n      ((empty? B) 0)\n      ((symbol? (first B)) (add1 (word-count (rest B))))\n      (else (+ (word-count (first B)) (word-count (rest B)))))))</font></pre>\n<P><FONT FACE=\"Goudy Old Style\">Notice that there's a recursive call in this code at exactly the same places as &quot;book&quot; appears in the data definition above.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Now, define the function <code>word-count2</code> as described below. This is a good measure of your comfort with reading and understanding Scheme code; if it gives you difficulty, sit down with the instructor or TA to get it cleared up.</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">;; word-count2:  book  list-of-symbols  -&gt;  number\n;; Return the number of words in the book that are not on the input list\n(check-expect (word-count2 TTC '(A a An an The the It it Of of)) 9)</font></pre>\n<P><FONT FACE=\"Goudy Old Style\">[Hint: This is very similar to <code>word-count</code>; you just need to focus on the second cond clause. The predefined function <code>member?</code> should be very helpful.]</FONT></P>\n<p><font face=\"Goudy Old Style\"><B>(4)</B> Take this opportunity to go back over all the previous homework assignments and do problems you didn't get to or redo problems that gave you trouble. Since there's not much new Scheme here, you have a chance to shore up your understanding.</FONT>\n<P><FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21 assignments by David G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004-Fall 2009.  Modified Fall 2010 and Fall 2011 by David G. Kay to reflect the <em>Picturing Programs</em> text.</FONT></P>\n<HR />\n<FONT FACE=\"Goudy Old Style\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Goudy Old Style\">\n<!-- #BeginDate format:fcAm1a -->Saturday, October 22, 2011 10:09 AM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "ascii"}