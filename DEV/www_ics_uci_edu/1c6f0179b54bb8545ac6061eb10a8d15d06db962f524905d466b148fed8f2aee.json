{"url": "https://www.ics.uci.edu/~thornton/ics32/ProjectGuide/Project4/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 32 Winter 2019, Project #4: The Fall of the World's Own Optimist (Part 1)</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 32 Winter 2019 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 32 Winter 2019<br />\r\n   Project #4: <i>The Fall of the World's Own Optimist (Part 1)</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Wednesday, March 6, 11:59pm</i></p>\r\n\r\n<p class=\"center\"><i>This project is to be done individually</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Background</p>\r\n\r\n<p>My first exposure to computers, as a kid in school, was in the context of computer games; some were educational games (it was school, after all), though many were not.  The first time I remember sitting behind a computer &mdash; a <a href=\"http://en.wikipedia.org/wiki/Radio_Shack_TRS-80\">Radio Shack TRS-80 Model I</a> &mdash; I played a game called FASTMATH, which pitted two players against one another, trying to alternately solve arithemtic problems and type in the answers as quickly as possible.  Sure, it was just a boring educational game, one that was ridiculously simple by today's standards, but at the time I was captivated, and I still remember it to this day.  (I especially loved winning, though I didn't always win.)</p>\r\n\r\n<p>Thanks to the wisdom and generosity of my parents, it wasn't long before I had my own computer at home (a <a href=\"http://en.wikipedia.org/wiki/Commodore_64\">Commodore 64</a>), complete with its own collection of games.  None of the games I played on my own computer could be classified as educational in a direct sense, though those games were sneaky: They taught me a surprising collection of lessons and motivated me to ask many interesting questions about computing, as I endeavored first to win them outright, then to modify them (to cheat or to change how a game was played to make it more fun), and finally to write them from scratch.  Games in those days, of course, didn't have the same photorealistic, three-dimensional, surround-sound appeal that they have today, but they were nonetheless fun and exciting; their simplicity made writing one's own game seem more possible with limited skills than it does today, in an era of tremendously complex games built by gigantic teams of programmers, designers, and artists.  (In truth, it's easier to build simple games now than it was then, because the computers have become so much more powerful and the tools have gotten better.  It's just harder to compete with the large-scale, professionally-developed games.)  Unfortunately, my skills didn't develop quickly enough &mdash; I always aimed too high, relative to what I knew how to do, but it was tougher when there was no Internet to search when you got stuck on something &mdash; and I never realized the goal of writing my own games before I became interested in other things, though I certainly learned a lot trying.</p>\r\n\r\n<p>This project is the first of a two-part sequence that offers you to opportunity to build your own game.  The first of the two projects focuses on developing a clean set of game logic and a test apparatus that runs in the Python shell to let you (and us) verify that it works as expected.  The second one pivots into drawing graphics, generating sounds, and other techniques to turn it into a playable game.  Along the way, we'll focus on finding a design that serves both purposes, on finding ways to simplify our code by eliminating duplication of boilerplate, and continuing our journey into understanding the mechanics and the benefits of classes and object-oriented programming in Python.  Finally, we'll take a step out of Python's standard library and into the world of third-party, open-source libraries that the Python community has to offer.</p>\r\n\r\n<p>Games may seem frivolous to some of you &mdash; I know that not everyone likes to play them &mdash; but they provide a fascinating combination of problems to be solved: software engineering, human-computer interface, computer networks, psychology and cognition, and even (in multiplayer online games) economics and sociology.  Game developers push the envelope &mdash; in some cases further than just about any other kind of software developers &mdash; and many of these lessons can be applied in more seemingly serious contexts.  Even if you're not that interested in games, you'll be surprised what building games can teach you about software.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The game of Columns</p>\r\n\r\n<p>In the late 1980s, a puzzle-based game called Columns showed up on at least one personal computing platform.  Later, it became somewhat more well-known when it was ported to the Sega Genesis, and later to other video game consoles and personal computers, becoming one of the better-known puzzle games of the early 1990s.  In this project and the one that follows it, you'll be building a version of this game.  It's not going to be our goal to completely duplicate the original, but what we'll be building will maintain its spirit throughout.</p>\r\n\r\n<p>The best way to start getting your mind around the game is actually to watch someone play it; the game is simple in concept, and you'll probably be able to deduce most of the rules just from watching a little bit of it, so best to start there.</p>\r\n\r\n<ul>\r\n  <li><a href=\"https://www.youtube.com/watch?v=pFJvY1k-rpM\">Columns gameplay video (Sega version from around 1990)</a></li>\r\n</ul>\r\n\r\n<p>Having watched the video, you'll have likely figured out many of the core rules of the game already, though I should point them out, not only to be sure that we all agree on what they are, but so that we can agree also on a set of terminology that we'll use to describe how the game is played.  (A common vocabulary goes a long way in letting people talk about abstract concepts without confusion.)</p>\r\n\r\n<ul>\r\n  <li>The <i>field</i> is a grid of cells, each of which is either empty space or contains a colored jewel.  At the outset, the field is empty, but it begins filling up once the game begins.</li>\r\n  <li>One at a time, a <i>faller</i> is created and begins descending from the top of the field downward.  Each faller is made up of three jewels arranged vertically, with the three jewels colored randomly.</li>\r\n  <li>As the faller descends, it can be <i>rotated</i>, which is to say that the bottom jewel becomes the top one, while the other two move down to make room for it.  Because the colors of the jewels are relevant, the act of rotating them serves a vitally important role in the mechanics of the game.</li>\r\n  <li>Fallers are subject to a crude sort of gravity, so they descend through the field until they <i>land</i> either on the bottom of the field or on top of a jewel that is already present in the field.</li>\r\n  <li>Shortly after a faller has landed, it <i>freezes</i>, which is to say that the faller has nowhere left to fall, but that the jewels contained within it will remain in the field, wherever they landed.</li>\r\n  <li>After each faller freezes, if there are three or more jewels of the same color in a row &mdash; either horizontally, vertically, or diagonally &mdash; they are said to <i>match</i>, in which case they are displayed specially and then disappear.  After they disappear, any jewels above them moving down immediately to fill the empty space.</li>\r\n</ul>\r\n\r\n<p>The basic objective of the game is to continue as long as possible, with the game ending as the field becomes to filled to continue.  There are rules around scoring, of course &mdash; because a game like this is a lot less fun if there's no way to measure one's performance &mdash; but we'll skip them for the time being.  For now, our goal is to implement the game's basic mechanics of fallers, movement and rotation, freezing, and the matching and disappearance of adjacent sequences of jewels of the same color.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The program</p>\r\n\r\n<p>This project is focused on implementing the mechanics of Columns, along with a program that you can run in the Python shell with a very spartan user interface that you'll use to test it &mdash; and that we'll use to <i>automatically</i> test it, making it crucial that you get the format of the program's input and output right according to the specification below.  Spacing, capitalization, and other seemingly-minor details are critical; every part of your output needs to be correct to the individual character.</p>\r\n\r\n<p>Using your test program, you won't be able to play a fully-functioning game of Columns, but you will be able to determine whether you've handled all of the game's mechanics correctly: fallers, movement and rotation, freezing, matching, and so on.  Note, too, that you don't need to implement all of the logic to receive at least some credit for the project; details are described a little later in the project, but you can receive substantial partial credit for a partially complete implementation, as long as some of the features are working with precisely correct output.</p>\r\n\r\n<p>The next project will allow you to take the game mechanics you've implemented here and build a playable game out of them.  But, as with a lot of game implementation, first thing's first: Without the underlying logic working, you can't have a game you can play.</p>\r\n\r\n<p class=\"subtitle\">A detailed look at how your program should behave</p>\r\n\r\n<p>Your program will read its input via the Python shell (i.e., using the built-in <b>input()</b> function), <i>printing no prompts to a user</i> with no extraneous output other than precisely what is specified below.  The intent here is not to write a user-friendly user interface; what you're actually doing is building a tool for testing your game mechanics, which we'll then be using to <i>automatically</i> test them.  So it is vital that your program reads inputs and write outputs precisely as specified below.  You can freely assume that the input will match the specification described; we will not be testing your program on any inputs that don't match the specification.</p>\r\n\r\n<ul>\r\n  <li>First, your program needs to know the size of the field.  It will always be a rectangle, but the number of rows and columns can vary.\r\n    <ul>\r\n      <li>First, your program reads a line of input specifying the number of rows in the field.  You can assume this will be no less than 4.</li>\r\n      <li>Next, your program reads a line of input specifying the number of columns in the field.  You can assume this will be no less than 3.</li>\r\n    </ul>\r\n  </li>\r\n  <li>At any given time, the field contains jewels that are one of seven colors.  The colors are represented by these uppercase letters (and only these letters): <b>S</b>, <b>T</b>, <b>V</b>, <b>W</b>, <b>X</b>, <b>Y</b>, <b>Z</b>.  In both the input and output, we'll use these seven letters to denote the seven colors.</li>\r\n  <li>Now, your program needs to know what jewels are in the field to begin with.  There are two situations: We might want to start with an empty field, or we might want to specify the contents of the field in the input.\r\n    <ul>\r\n      <li>If the field is to begin empty, the word <b>EMPTY</b> will appear alone on the next line of input.\r\n      <li>If instead we want to specify the contents of the field in the input, the word <b>CONTENTS</b> will appear alone on the next line of input.  Given that there are <i>r</i> rows and <i>c</i> columns in the field, there would then be <i>r</i> lines of input, each of which will contain exactly <i>c</i> characters; these characters represent the contents of each of the field's cells to start with.\r\n        <ul>\r\n          <li>For a cell that should contain a jewel of some color, an uppercase letter describing each color will be used.</li>\r\n          <li>For a cell that should be empty, a space will be used instead.</li>\r\n          <li>Note that when we're specifying the contents of the field explictly, the spaces will always be present in the input for every cell that's empty; the program should expect to read exactly the correct number of characters.</li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n  <li>At this point, the game is ready to begin.  From here, we will repeatedly do two things: Display the field, then read a command from the user.</li>\r\n  <li>The rules for displaying the field are:\r\n    <ul>\r\n      <li>Given that the field has <i>r</i> rows, the field will be displayed as a total of <i>r</i> + 1 lines of output.  The first <i>r</i> will correspond to the <i>r</i> rows of the field, which each row displayed like this:\r\n       <ul>\r\n         <li>The vertical bar character <b>'|'</b>, followed by three characters for each of the <i>c</i> columns in that row, followed by another vertical bar character <b>'|'</b>.  For each column in that row, the three characters will be:\r\n           <ul>\r\n             <li>Three spaces if the cell is empty</li>\r\n             <li>A space, followed by an uppercase letter if the cell contains a jewel that has been frozen.</li>\r\n             <li>A left bracket character <b>'['</b>, followed by an uppercase letter, followed by a right bracket character <b>']'</b> if the cell contains a jewel that is part of the faller (if any).</li>\r\n             <li>A vertical bar character <b>'|'</b>, followed by an uppercase letter, followed by another vertical bar character <b>'|'</b> if the cell contains a jewel that is part of a faller that has landed but not yet frozen.</li>\r\n             <li>An asterisk character <b>'*'</b>, followed by an uppercase letter, followed by another asterisk character <b>'*'</b> if the cell contains a jewel that has frozen and has been recognized as a match.</li>\r\n           </ul>\r\n         </li>\r\n         <li>After the last row of the field, a space, followed by 3<i>c</i> dashes, followed by another space is displayed.</li>\r\n       </ul>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n  <li>The commands that you would read are:\r\n    <ul>\r\n      <li>A blank line, which is a crude representation of the passage of time.  (In our complete game, this would happen without any input; instead, when a certain amount of time passes, we would see the appropriate effect.)\r\n        <ul>\r\n          <li>If there is a faller present, it falls; if there is a faller that has landed (and has not been moved so that it is no longer in a landed position), it freezes; and so on.</li>\r\n        </ul>\r\n      </li>\r\n      <li><b>F</b>, followed by an integer that is a column number (the columns are numbered 1 through <i>c</i>, if there are <i>c</i> columns), followed by a space, followed by three uppercase letters (representing colors), each of these things separated by spaces (e.g., <b>F 1 S T V</b>).  This means to create a faller in column 1, with a jewel of color <b>S</b> on the top, a jewel of color <b>T</b> below it, and a jewel of color <b>V</b> below that.\r\n        <ul>\r\n          <li>The faller begins with only the bottommost of the three jewels visible.  See the example outputs below for more details.</li>\r\n          <li>Note that there can only be one faller at a time, so this command has no effect if there is a faller that has not already been frozen.</li>\r\n        </ul>\r\n      </li>\r\n      <li><b>R</b> alone on a line, which rotates the faller, if there is one.  If there is no faller currently, this command has no effect.  Note, though, that it is possible to rotate a faller that has landed but not yet frozen.</li>\r\n      <li><b>&lt;</b> alone on a line, which moves the faller one column to the left, if there is one (and if it not blocked by jewels already frozen on the field or by the edge of the field).  If there is no faller or the faller can't be moved to the left, this command has no effect.  Note, though, that it is possible to move a faller that has landed but not yet frozen, which can take it out of its \"landed\" status (if it moves to a column with nothing underneath it).</li>\r\n      <li><b>&gt;</b> alone on a line, which moves the faller one column to the right, if there is one (and if it not blocked by jewels already frozen on the field or by the edge of the field).  If there is no faller or the faller can't be moved to the right, this command has no effect.  Note, though, that it is possible to move a faller that has landed but not yet frozen, which can take it out of its \"landed\" status (if it moves to a column with nothing underneath it).</li>\r\n      <li><b>Q</b> alone on a line, which means that to quit the program.</li>\r\n    </ul>\r\n  </li>\r\n  <li>There are two ways for the program to end:\r\n    <ul>\r\n      <li>If the user specifies the command <b>Q</b>, the program ends, with no additional output being printed.</li>\r\n      <li>When a faller freezes without all three of its jewels being visible in the field (for example, if it lands on a jewel that's two rows below the top and then freezes), the game ends, so the program ends, as well.  In that case, you would print <b>GAME OVER</b> before ending the program.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Two complete examples of program execution</p>\r\n\r\n<p>Below are two examples of the program's execution, which you can consult when there are minor issues that you're not sure how to resolve.  Boldfaced, italicized text indicates input, while normal text indicates output.  Note that blank lines are actually blank input lines; there are no blank output lines in this program's design.  Some additional commentary appears to the right of the example, italicized and written in the form of Python comments; that would not appear in your program's output, but will help you to understand the examples.</p>\r\n\r\n<p class=\"subtitle\">Beginning with an empty field</p>\r\n\r\n<blockquote><pre>\r\n<b><i>4</i></b>\r\n<b><i>3</i></b>\r\n<b><i>EMPTY</i></b>           <i># begin with an empty field with 4 rows and 3 columns</i>\r\n|         |\r\n|         |\r\n|         |\r\n|         |\r\n --------- \r\n<b><i>F 3 X Y Z</i></b>       <i># create a faller containing colors X, Y, Z in column 3</i>\r\n|      [Z]|\r\n|         |\r\n|         |\r\n|         |\r\n --------- \r\n                <i># this is a blank line of input; there are lots of them in these examples</i>\r\n|      [Y]|\r\n|      [Z]|\r\n|         |\r\n|         |     <i># the faller begins falling</i>\r\n --------- \r\n\r\n|      [X]|\r\n|      [Y]|\r\n|      [Z]|\r\n|         |\r\n --------- \r\n\r\n|         |\r\n|      |X||\r\n|      |Y||     <i># the faller has landed</i>\r\n|      |Z||     <i># note the multi-step process here</i>\r\n --------- \r\n\r\n|         |\r\n|       X |\r\n|       Y |\r\n|       Z |     <i># the faller has frozen</i>\r\n ---------\r\n<b><i>F 1 Y Z X</i></b>\r\n|[X]      |\r\n|       X |\r\n|       Y |\r\n|       Z |\r\n --------- \r\n\r\n|[Z]      |\r\n|[X]    X |\r\n|       Y |\r\n|       Z |\r\n --------- \r\n\r\n|[Y]      |\r\n|[Z]    X |\r\n|[X]    Y |\r\n|       Z |\r\n --------- \r\n<b><i>R</i></b>               <i># rotating the faller</i>\r\n|[X]      |\r\n|[Y]    X |\r\n|[Z]    Y |\r\n|       Z |\r\n --------- \r\n<b><i>&gt;</i></b>               <i># moving the faller to the right</i>\r\n|   [X]   |\r\n|   [Y] X |\r\n|   [Z] Y |\r\n|       Z |\r\n --------- \r\n<b><i>&gt;</i></b>\r\n|   [X]   |\r\n|   [Y] X |\r\n|   [Z] Y |\r\n|       Z |     <i># moving to the right again has no effect; it's blocked</i>\r\n --------- \r\n\r\n|         |\r\n|   |X| X |\r\n|   |Y| Y |\r\n|   |Z| Z |\r\n --------- \r\n\r\n|         |\r\n|    X  X |\r\n|    Y  Y |\r\n|    Z  Z |\r\n --------- \r\n<b><i>F 1 T Z S</i></b>\r\n|[S]      |\r\n|    X  X |\r\n|    Y  Y |\r\n|    Z  Z |\r\n --------- \r\n\r\n|[Z]      |\r\n|[S] X  X |\r\n|    Y  Y |\r\n|    Z  Z |\r\n --------- \r\n\r\n|[T]      |\r\n|[Z] X  X |\r\n|[S] Y  Y |\r\n|    Z  Z |\r\n --------- \r\n\r\n|         |\r\n||T| X  X |\r\n||Z| Y  Y |\r\n||S| Z  Z |\r\n --------- \r\n<b><i>R</i></b>               <i>rotation and moving is permitted before freezing</i>\r\n|         |\r\n||S| X  X |\r\n||T| Y  Y |\r\n||Z| Z  Z |\r\n --------- \r\n\r\n|         |\r\n| S  X  X |\r\n| T  Y  Y |\r\n|*Z**Z**Z*|     <i># we have a match!</i>\r\n --------- \r\n\r\n|         |\r\n|         |\r\n| S  X  X |\r\n| T  Y  Y |     <i># and now the matching jewels disappear</i>\r\n --------- \r\n<b><i>F 1 V W Z</i></b>\r\n|[Z]      |\r\n|         |\r\n| S  X  X |\r\n| T  Y  Y |\r\n --------- \r\n\r\n||W|      |\r\n||Z|      |\r\n| S  X  X |\r\n| T  Y  Y |\r\n --------- \r\n\r\n| W       |\r\n| Z       |\r\n| S  X  X |\r\n| T  Y  Y |     <i># landed, but it doesn't fit!</i>\r\n ---------\r\nGAME OVER\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Beginning with the field contents specified</p>\r\n\r\n<blockquote><pre>\r\n<b><i>4</i></b>\r\n<b><i>4</i></b>\r\n<b><i>CONTENTS</i></b>\r\n<b><i> Y X</i></b>\r\n<b><i>S V </i></b>\r\n<b><i>TXYS</i></b>\r\n<b><i>X XY</i></b>\r\n|            |\r\n| S     V  X |\r\n| T  Y  Y  S |  <i># all jewels immediately fill empty space below them</i>\r\n|*X**X**X* Y |  <i># which can trigger matching, as happens here</i>\r\n ------------ \r\n\r\n|            |\r\n|          X |\r\n| S     V  S |\r\n| T *Y**Y**Y*|\r\n ------------ \r\n\r\n|            |\r\n|            |\r\n| S        X |\r\n| T     V  S |\r\n ------------ \r\n<b><i>F 2 X Y Z</i></b>\r\n|   [Z]      |\r\n|            |\r\n| S        X |\r\n| T     V  S |\r\n ------------ \r\n<b><i>Q</i></b>               <i># quitting early is allowed; program ends</i>\r\n</pre></blockquote>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Working incrementally (and a reward for doing so)</p>\r\n\r\n<p>This problem is larger and more complex than you may have worked on before, so it will be important that you're able to control that complexity in your mind by working on the problem incrementally.  You won't be able to solve the entire problem all at once &mdash; and it's possible that some of you won't end up solving the entire problem at all &mdash; yet you do want to be able to get some positive feedback about your progress along the way (and partial credit on the project if you don't finish it), so we're breaking down the grading of this project into a set of features, which may help you to organize your thoughts the same way.  While we aren't (and won't be) explicitly listing a point value on each feature here, this will give you an idea of the way we'll be organizing the grading process.</p>\r\n\r\n<p>Your best bet, overall, is not to implement the entire program at once, haphazardly.  Implement it one complete feature at a time.  (This is good advice even if this wasn't being graded; working incrementally is the only way to build programs too large to work through in one sitting.)  There isn't a single ordering of features that is the \"right\" one, though, of course, some depend on others.  So what you'll want to do is choose one feature to start with, implement just that feature, test it, and then you'll be ready to move on to the next one.  You might also want to keep a copy of your code after you complete each feature, so you can \"roll back\" to the previous copy if you find that the next step you take leads you in a direction you're not happy with.</p>\r\n\r\n<p class=\"subtitle\">The features</p>\r\n\r\n<p>This program can be considered to require the following set of features.  We will be grading these relatively independently of one another, except in the sense that some of them depend on others.  For example, if fallers don't move down as time passes, then you won't ever be able to get them to the point where they've landed and frozen.</p>\r\n\r\n<p>These aren't listed in any particular order &mdash; and are not listed in anything like the order in which I implemented them in my own solution &mdash; so don't feel like you need to work through these from top to bottom.  But this will serve as a checklist to tell you which issues you have left to solve.</p>\r\n\r\n<ul>\r\n  <li>The game can begin with an empty field of the correct size.</li>\r\n  <li>The game can begin with the contents of the field specified, with jewels in some of the cells.</li>\r\n  <li>When there are \"holes\" in the contents of the field specified at the beginning, the jewels \"fall\" immediately to fill the empty spaces below them.</li>\r\n  <li>It is possible to quit the program with the <b>Q</b> command.  (I did this one fairly early; you might want to do the same.)</li>\r\n  <li>A faller can be created in a column and appear with only the bottommost of its three jewels visible.</li>\r\n  <li>Fallers can be moved to the left and to the right at any point until they have frozen.</li>\r\n  <li>Fallers cannot be moved to the left or right if they are blocked by jewels that are previously frozen.</li>\r\n  <li>Fallers can be rotated at any point until they have frozen.</li>\r\n  <li>Fallers land when they can't be moved down any further.</li>\r\n  <li>Fallers freeze at the next \"tick\" of time after they have landed.</li>\r\n  <li>The freezing of a faller can be postponed by moving it to a column with empty space underneath it after landing.</li>\r\n  <li>The game ends when a faller freezes but cannot be displayed entirely in the field because it didn't move down far enough.</li>\r\n  <li>Matching can be performed horizontally (i.e., three jewels of the same color horizontally would be considered to match).</li>\r\n  <li>Matching can be performed vertically.</li>\r\n  <li>Matching can be performed diagonally.</li>\r\n  <li>Matched sequences longer than three jewels are handled.</li>\r\n  <li>More than one matching sequence at the same time can be handled.</li>\r\n  <li>The ending of a game can be postponed if a faller freezes without fitting in the field, but which matches enough jewels that everything then fits.</li>\r\n  <li>When there are three or more jewels in a row in the contents of the field specified at the beginning, matching is triggered.</li>\r\n  <li>When there are \"holes\" in the contents of the field specified at the beginning and jewels fill the spaces immediately, matching is triggered if three or more jewels in a row are present.</li>\r\n</ul>\r\n\r\n<p>Note that substantial partial credit is available for submissions that implement some but not all of these features.  In particular, if you can get everything working except the more esoteric matching scenarios, or even if you can get everything working except matching, you can still receive a fair amount of the 20-point correctness score (plus potentially all of the 10-point quality score).</p>\r\n\r\n<p>However, it is vitally important that the structure of your output is correct, because the grading here will be done in an automated fashion.  Something that appears similar to a casual observer, but is not actually identical to the required output, will nonetheless result in the failure of our tests.  See the section titled <i>Sanity-checking your output</i> below for details on how you can prevent this kind of outcome.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Thinking through your design</p>\r\n\r\n<p class=\"subtitle\">Module design</p>\r\n\r\n<p>You are required to keep the code that implements the game mechanics entirely separate from the code that implements the user interface used for testing it.  To that end, <i>you will be required</i> to submit at least two modules: one that implements your game mechanics and another that implements your user interface.  You're welcome to break these two modules up further if you find it beneficial, but the requirement is that you keep these two parts of your program &mdash; the logic and the user interface &mdash; separate.</p>\r\n\r\n<p>Note that this requirement is motivated partly by a desire to build good design habits, but also by the practical reality that maintaining that separation properly will give you a much better chance of being able to reuse your game mechanics, as-is and with little or no modification, in the next project, when you'll be asked to build a complete Columns game (with graphics, keyboard controls, and so on).  In a big-picture sense, you can think of the user interface in this project as being a \"throwaway\"; while we'll be using it to grade your game mechanics and you'll be using it to verify that the mechanics are correct, the true goal here is the complete version of Columns.  So keeping this \"throwaway\" code completely separate from your game mechanics means that it will be easy to leave it out of your completed version, without causing anything else to break.</p>\r\n\r\n<p>One key thing to keep separate is input and output.  Your game mechanics code should be neither reading input nor printing output &mdash; except maybe temporarily, if you're debugging something.</p>\r\n\r\n<p class=\"subtitle\">Module naming</p>\r\n\r\n<p>One of your modules must be named <b>project4.py</b>, spelled and capitalized exactly that way.  That module must be executable (i.e., it should contain an <b>if __name__ == '__main__':</b> block), and running that module must be the way to run your user interface and play your game.  No other modules will need an <b>if __name__ == '__main__':</b> block in them but, of course, you can feel free to add one if you feel that it's necessary.</p>\r\n\r\n<p class=\"subtitle\">Using classes and exceptions to implement your game mechanics</p>\r\n\r\n<p>Your game mechanics must consist of at least one class whose objects represent the current \"state\" of a Columns game, with methods that manipulate that state; you can feel free to implement additional classes, if you'd like.  Note that this is in stark contrast to the approach used in <b>connectfour.py</b> in <a href=\"../Project2\">Project #2</a>, where we used a namedtuple and a set of functions that returned new states.  Classes offer us the ability to mix data together with the operations that safely manipulate that data; they allow us to create kinds of objects that don't just know how to <i>store</i> things, but also to <i>do</i> things.</p>\r\n\r\n<p>Some of the methods I found useful in my own implementation of the Columns game state are listed below; this is not an exhaustive list, and you'll probably find a need for additional methods beyond these.</p>\r\n\r\n<ul>\r\n  <li>Get the number of rows and/or columns on the board.</li>\r\n  <li>Determine whether the game is over.</li>\r\n  <li>Create a new faller.</li>\r\n  <li>Handle the passage of time (e.g., moving the faller down, etc.).</li>\r\n  <li>Moving the faller to the left.</li>\r\n</ul>\r\n\r\n<p>Even if your user interface does error checking, your game mechanics must not assume the presence of a particular user interface, so it must check any parameters it's given and raise an exception if the parameters are problematic (e.g., a non-existent row or column, an attempt to make an invalid move, an attempt to make a move after the game is over).  Create your own exception class(es) to represent these error conditions.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Using test-driven development</p>\r\n\r\n<p>One issue that comes up in the implementation of a program like this one is that it's difficult to test some of the corner cases that come up in the game mechanics by playing your game using this user interface.  It can be difficult to duplicate certain situations without going through a lot of work up front.  And yet you need to be sure that these issues, and others like them, are handled correctly by your game logic.</p>\r\n\r\n<p>As you build your game mechanics, use the test-driven development approach that we discussed in lecture.  You shouldn't test your shell input and output (e.g., calls to <b>input()</b> and <b>print()</b>) this way.  Instead, just test your game mechanics this way.  (Note that this means you'll want to keep code that calls <b>input()</b> and <b>print()</b> out of your game mechanics altogether, because it's not amenable to this kind of testing, but also because it's not part of how the game is played; it's a user interface detail, which belongs elsewhere.)</p>\r\n\r\n<p>In addition to your program, you'll also need to submit a separate module containing unit tests for your game mechanics.  Use the <b>unittest</b> module from the Python Standard Library, as we did in the <a href=\"../../Notes/TestDrivenDevelopment\">Test-Driven Development</a> lecture.  Keeping with convention, the name of your unit test module might start with <b>test_</b>, and the rest of its name would ideally be the same as the game mechanics module that you're testing.\r\n\r\n<p>Aim for the most complete test coverage you can achieve.  Remember that you don't only want to test the simplest scenario; you also want to consider the ways that things might go wrong, and test those, as well.</p>\r\n\r\n<p class=\"subtitle\">Other notes about testing</p>\r\n\r\n<p>Your ability to specify any initial arrangement of jewels in the field when starting the game is one thing that will really help you (and us!) to test these kinds of scenarios, because you won't need to figure out a sequence of moves that lead from a \"traditional\" initial state to the scenario you want to test.</p>\r\n\r\n<p>Another approach is to figure out some interesting scenarios and write program input that covers these scenarios, saving each one into a file using your favorite text editor.  You can then copy and paste these into your program to test and re-test interesting cases as you work.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Sanity-checking your output</p>\r\n\r\n<p>We are providing a tool that you can use to sanity check whether you've followed some of the basic requirements above.  It will only give you a \"passing\" result in these circumstances:</p>\r\n\r\n<ul>\r\n  <li>It's possible to run your program by executing a correctly-named module (<b>project4.py</b>), spelled and capitalized correctly.</li>\r\n  <li>Executing that module is enough to execute your program.</li>\r\n  <li>Your program reads its input and generates character-for-character correct input for one test scenario, which is similar to the example inputs and outputs shown above.</li>\r\n</ul>\r\n\r\n<p>It should be noted that there are many additional test inputs that will be used when we grade your project, as there are a number of interesting scenarios that are possible.  The way to understand the sanity checker's output is to think of it this way: Just because the sanity checker says your program passes doesn't mean it's close to perfect, but if you <i>cannot</i> get the sanity checker to report that your program passes, it surely will not pass all of our automated tests (and may well fail all of them).</p>\r\n\r\n<p>Running the sanity checker is simple.  First, download the Python module linked below:</p>\r\n\r\n<ul>\r\n  <li><a href=\"project4_sanitycheck.py\">project4_sanitycheck.py</a></li>\r\n</ul>\r\n\r\n<p>Put that file into the same directory as your various Project 4 files.  Running the sanity-checking module &mdash; for example, by loading it in IDLE and pressing F5 (or selecting <b>Run Module</b> from the <b>Run</b> menu) &mdash; will run the sanity checker and report a result, which will be printed to the Python shell.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Thinking about the future in addition to the present</p>\r\n\r\n<p>The next project will revisit the Columns game that you're building here, but will ask you instead to build a playable version of the game using the <b>pygame</b> library.  We'll be talking a lot about <b>pygame</b> over the next couple of weeks in lecture; as we learn more about it, be sure to consider how your design for this project, particularly your game mechanics, can be done in a way that allows you to reuse code in the subsequent project, as you will not want to have to start over from scratch.  This means you'll need to be cognizant of how you can separate code that handles input and output from code that implements underlying game mechanics.  It also means you'll want to start thinking about how your eventual game might need to use your game mechanics, as we learn more about <b>pygame</b> in lecture as we move forward.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>Put your name and student ID in a comment at the top of each of your <b>.py</b> files, then submit all of the files to Checkmate.  Take a moment to be sure that you've submitted all of your files, including the unit tests for your game mechanics.  <i>Do not</i> submit the sanity-checker!</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Clarifications on module naming added by Alex Thornton, Winter 2019.</li>\r\n  <li>Requirements for test-driven development and unit testing added by Alex Thornton, Spring 2018.</li>\r\n  <li>Clarifications and additional advice added by Alex Thornton, Winter 2018.</li>\r\n  <li>Originally written by Alex Thornton, Fall 2017.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}