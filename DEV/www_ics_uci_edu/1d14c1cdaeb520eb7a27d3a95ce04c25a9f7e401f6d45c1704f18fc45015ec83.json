{"url": "https://www.ics.uci.edu/~rickl/courses/cs-171/0-ihler-2016-fq/Projects/ConnectK/scripts/readme_grader", "content": "0. Required Changes\n\tuse python AI--> need to change a line that's making a command line under options.execute part\n\tif command line argument changes --> same as above (this script is combination of macros that would be typed by a person)\n\tlog analysis and grading --> based on the grading scheme, re-write the script [possible to match Canvas name, EEE dropbox student ID]\n\n1. Example Input\n\n\tpython3 grader.py -f final_submissions/M02_minimal -a AI/RandomAI/RandomAI.class -k ConnectK_1.8.jar -p 4 -[u|w|x]\n\n\n2. Output\n\n\tsome logs to the screen from grader.py [shows the progress, neccessary information u: status of unzip, w: status of compilation/submission/executable, x: status of run]\n\tcreates folder final_subission/M0X_XXX_XXXAI_log for storing each std output after running subprocesses; \n\t\tadd EVALUATION WAS DONE FOR THIS CASE if finished succesfully (re-eval avoids same exec by searching this)\n\tcreates folder final_subission/M0X_XXX_XXXAI_log for storing each std err \n\t\tit caputres 2 errors, TimeOut (MAX_TIME=2000, for process, not deadline) and other exceptions\n\t\tprints out what kind of error occured\n\n\tManually organized the result files under final_submissions/EVAL_Results\n\t\tif one wants to see the code with errors (mostly it had error for its own reason except TimeOut)\n\n\n3. folder\n\n\troot_of_script: path of grader.py\n\t\tunder root_of_script, \n\t\t\t1) store grading folders\t final_submissions/M0X_XXX\n\t\t\t2) AI files\tAI\n\t\t\t3) JAR_file\t\tconnectK_1.8.jar\n\n\t\t\tthese file structure is required for running jobs because it will make a command line argument (pointing pathes)\n\t\t\t\t$ java -jar [JAR_file]\t[studentAIfile]\t[AI/RandomAI/RandomAI.class] -nogui\n\n\troot_of_submission:\n\t\tos.path.join(root_of_script, options.gradingfolder (which is argument to -f) )\n\n4. argument options\n\n\tf: destination of grading folder relative to root_of_script\n\n\ta:\tdestimation of AI class file relative to root_of_script\n\n\tk:\tdestimation of JAR file relative to root_of_script\n\n\tp:\tnumber of concurrent subprocesses (default=4)\n\n\n\n5. flag options\n\n\tu:\tunzip and identify submissions (already done, it only decompress zip file and save each to <teamname_name1_name2> folder\n\t\t* it is already finished, no need to run again\n\n\tw:\twalk each folders identified at previous step\n\t\tidentify language\n\t\tcompile (cpp try make first if fails.. then g++; java try make first if fails then javac; python find class AI file and rename as ~AI.py and copy connectK source)\n\t\t* it is already finished, no need to run again \n\n\t\tre-running will skip cpp compilation if *byTA in /bin, all other steps will be repeated for java and python\n\t\tsome times it is necessary to run -w 2-3 times (some makefile terminates my process.. )\n\t\t(if required, remove *byTA in cpp submission --> cpp compilation step skips if *byTA is in bin folder)\n\n\n\tx:\texecute submissions, launch -p number of subprocess at once, MAX_TIME=2000 sec is defined in helper.py [this terminates subprocess]\n\n\n6. Dictionary grader_dict\n\n\tall necessary information is stored as grader_dict\n\tthis dictionary can be used to generate final scores (with each out/err log files)\n\n\tafter finishing each step, u/w/x it stores M0X_XXX_XXX.txt under os.path.join(root_of_script, options.gradingfolder+'M0X_XXX_XXX.txt')\n\tas grading process goes, grader_dict adds more keys (all cumulative, when each step starts it read the dict stored at the previous step)\n\n\n\tafter run:\tgrader_dict[(team_name, name1, name2)] = {} \n\tafter\tu:\tgrader_dict[(team_name, name1, name2)]]\t[zip_file / zip_file_failure / submission_count / directory (relative to root_of_submission) ]\n\tafter\tw:\tgrader_dict[(team_name, name1, name2)]]\t[bin (relative to directory) / src (relative to directory) / lang / compiled / executable]\t\n\tafter\tx:\tgrader_dict[(team_name, name1, name2)]]\t[run (False if exception/TimeOut) ]\t\n\n\n\n\n", "encoding": "ascii"}