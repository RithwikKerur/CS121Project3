{"url": "https://www.ics.uci.edu/~thornton/ics46/Notes/AVLTrees/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 46 Spring 2018, Notes and Examples: AVL Trees</title>\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 46 Spring 2018 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 46 Spring 2018<br />\r\n   Notes and Examples: AVL Trees</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Why we must care about binary search tree balancing</p>\r\n\r\n<p>We've seen previously that the performance characteristics of <a href=\"../BinarySearchTrees\">binary search trees</a> can vary rather wildly, and that they're mainly dependent on the shape of the tree, with the height of the tree being the key determining factor.  By definition, binary search trees restrict what keys are allowed to present in which nodes &mdash; smaller keys have to be in left subtrees and larger keys in right subtrees &mdash; but they specify no restriction on the tree's shape, meaning that both of these are perfectly legal binary search trees containing the keys 1, 2, 3, 4, 5, 6, and 7.</p>\r\n\r\n<p class=\"center\"><img src=\"PerfectBinaryTree.png\" alt=\"Perfect binary tree\" /><img src=\"DegenerateTree.png\" alt=\"Degenerate tree\" /></p>\r\n\r\n<p>Yet, while both of these are legal, one is better than the other, because the height of the first tree (called a <i>perfect binary tree</i>) is smaller than the height of the second (called a <i>degenerate tree</i>).  These two shapes represent the two extremes &mdash; the best and worst possible shapes for a binary search tree containing seven keys.</p>\r\n\r\n<p>Of course, when all you have is a very small number of keys like this, any shape will do.  But as the number of keys grows, the distinction between these two tree shapes becomes increasingly vital.  What's more, the degenerate shape isn't even necessarily a rare edge case: It's what you get when you start with an empty tree and add keys that are already in order, which is a surprisingly common scenario in real-world programs.  For example, one very obvious algorithm for generating unique integer keys &mdash; when all you care about is that they're unique &mdash; is to generate them sequentially.</p>\r\n\r\n<p class=\"subtitle\">What's so bad about a degenerate tree, anyway?</p>\r\n\r\n<p>Just looking at a picture of a degenerate tree, your intuition should already be telling you that something is amiss.  In particular, if you tilt your head 45 degrees to the right, they look just like linked lists; that perception is no accident, as they behave like them, too (except that they're more complicated, to boot!).</p>\r\n\r\n<p>From a more analytical perspective, there are three results that should give us pause:</p>\r\n\r\n<ul>\r\n  <li>Every time you perform a lookup in a degenerate binary search tree, it will take <i>O</i>(<i>n</i>) time, because it's possible that you'll have to reach every node in the tree before you're done.  As <i>n</i> grows, this is a heavy burden to bear.</li>\r\n  <li>If you implement your lookup recursively, you might also be using <i>O</i>(<i>n</i>) memory, too, as you might end up with as many as <i>n</i> frames on your run-time stack &mdash; one for every recursive call.  There are ways to mitigate this &mdash; for example, some kinds of carefully-written recursion (in some programming languages, including C++) can avoid run-time stack growth as you recurse &mdash; but it's still a sign of potential trouble.</li>\r\n  <li>The time it will take you to build the degenerate tree will also be prohibitive.  If you start with an empty binary search tree and add keys to it in order, how long does it take to do it?\r\n    <ul>\r\n      <li>The first key you add will go directly to the root.  You could think of this as taking a single step: creating the node.</li>\r\n      <li>The second key you add will require you to look at the root node, then take one step to the right.  You could think of this as taking two steps.</li>\r\n      <li>Each subsequent key you add will require one more step than the one before it.</li>\r\n      <li>The total number of steps it would take to add <i>n</i> keys would be determined by the sum 1 + 2 + 3 + ... + <i>n</i>.  This sum, which we'll see several times throughout this course, is equal to <i>n</i>(<i>n</i> + 1) / 2.</li>\r\n      <li>So, the total number of steps to build the entire tree would be &Theta;(<i>n</i><sup><small>2</small></sup>).</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p>Overall, when <i>n</i> gets large, the tree would be hideously expensive to build, and then every subsequent search would be painful, as well.  So this, in general, is a situation we need to be sure to avoid, or else we should probably consider a data structure other than a binary search tree; the worst case is simply too much of a burden to bear if <i>n</i> might get large.  But if we can find a way to control the tree's shape more carefully, to force it to remain more <i>balanced</i>, we'll be fine.  The question, of course, is how to do it, and, as importantly, whether we can do it while keeping the cost low enough that it doesn't outweigh the benefit.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Aiming for perfection</p>\r\n\r\n<p>The best goal for us to shoot for would be to maintain perfection.  In other words, every time we insert a key into our binary search tree, it would ideally still be a perfect binary tree, in which case we'd know that the height of the tree would always be &Theta;(log <i>n</i>), with a commensurate effect on performance.</p>\r\n\r\n<p>However, when we consider this goal, a problem emerges almost immediately.  The following are all perfect binary trees, by definition:</p>\r\n\r\n<p class=\"center\"><img src=\"PerfectBinaryTrees_DifferentHeights.png\" alt=\"Perfect binary trees of different heights\" /></p>\r\n\r\n<p>The perfect binary trees pictured above have 1, 3, 7, and 15 nodes respectively, and are the only possible perfect shapes for binary trees with that number of nodes.  The problem, though, lies in the fact that there is no valid perfect binary tree with 2 nodes, or with 4, 5, 6, 8, 9, 10, 11, 12, 13, or 14 nodes.  So, generally, it's impossible for us to guarantee that a binary search tree will always be \"perfect,\" by our definition, because there's simply no way to represent most numbers of keys.</p>\r\n\r\n<p>So, first thing's first: We'll need to relax our definition of \"perfection\" to accommodate every possible number of keys we might want to store.</p>\r\n\r\n<p class=\"subtitle\">Complete binary trees</p>\r\n\r\n<p>A somewhat more relaxed notion of \"perfection\" is something called a <i>complete binary tree</i>, which is defined as follows.</p>\r\n\r\n<blockquote>\r\nA <i>complete binary tree</i> of height <i>h</i> is a binary tree where:\r\n\r\n<ul>\r\n  <li>If <i>h</i> = 0, its left and right subtrees are empty.</li>\r\n  <li>If <i>h</i> &gt; 0, one of two things is true:\r\n    <ul>\r\n      <li>The left subtree is a perfect binary tree of height <i>h</i> &minus; 1 and the right subtree is a complete binary tree of height <i>h</i> &minus; 1</li>\r\n      <li>The left subtree is a complete binary tree of height <i>h</i> &minus; 1 and the right subtree is a perfect binary tree of height <i>h</i> &minus; 2\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</blockquote>\r\n\r\n<p>That can be a bit of a mind-bending definition, but it actually leads to a conceptually simple result: On every level of a complete binary tree, every node that could possibly be present will be, <i>except</i> the last level might be missing nodes, but if it is missing nodes, the nodes that are there will be as far to the left as possible.  The following are all complete binary trees:</p>\r\n\r\n<p class=\"center\"><img src=\"CompleteBinaryTrees_DifferentSizes.png\" alt=\"Complete binary trees of different sizes\" /></p>\r\n\r\n<p>Furthermore, these are the only possible complete binary trees with these numbers of nodes in them; any other arrangement of, say, 6 keys besides the one shown above would violate the definition.</p>\r\n\r\n<p>We've seen that the height of a perfect binary tree is &Theta;(log <i>n</i>).  It's not a stretch to see that the height a complete binary tree will be &Theta;(log <i>n</i>), as well, and we'll accept that via our intuition for now and proceed.  All in all, a complete binary tree would be a great goal for us to attain: If we could keep the shape of our binary search trees complete, we would always have binary search trees with height &Theta;(log <i>n</i>).</p>\r\n\r\n<p class=\"subtitle\">The cost of maintaining completeness</p>\r\n\r\n<p>The trouble, of course, is that we need an algorithm for maintaining completeness.  And before we go to the trouble of trying to figure one out, we should consider whether it's even worth our time.  What can we deduce about the cost of maintaining completeness, even if we haven't figured out an algorithm yet?</p>\r\n\r\n<p>One example demonstrates a very big problem.  Suppose we had the binary search tree on the left &mdash; which is complete, by our definition &mdash; and we wanted to insert the key 1 into it.  If so, we would need an algorithm that would transform the tree on the left into the tree on the right.</p>\r\n\r\n<p class=\"center\"><img src=\"MaintainingCompleteness.png\" alt=\"The cost of maintaining completeness\" /></p>\r\n\r\n<p>The tree on the right is certainly complete, so this would be the outcome we'd want.  But consider what it would take to do it.  <i>Every key in the tree had to move!</i>  So, no matter what algorithm we used, we would still have to move every key.  If there are <i>n</i> keys in the tree, that would take &Omega;(<i>n</i>) time &mdash; moving <i>n</i> keys takes at least linear time, even if you have the best possible algorithm for moving them; the work still has to get done.</p>\r\n\r\n<p>So, in the worst case, maintaining completeness after a single insertion requires &Omega;(<i>n</i>) time.  Unfortunately, this is more time than we ought to be spending on maintaining balance.  This means we'll need to come up with a compromise; as is often the case when we learn or design algorithms, our willingness to tolerate an imperfect result that's still \"good enough\" for our uses will often lead to an algorithm that is much faster than one that achieves a perfect result.  So what would a \"good enough\" result be?</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">What is a \"good\" balance condition</p>\r\n\r\n<p>Our overall goal is for lookups, insertions, and removals from a binary search tree to require <i>O</i>(log <i>n</i>) time in every case, rather than letting them degrade to a worst-case behavior of <i>O</i>(<i>n</i>).  To do that, we need to decide on a <i>balance condition</i>, which is to say that we need to understand what shape is considered well-enough balanced for our purposes, even if not perfect.</p>\r\n\r\n<blockquote>\r\nA <i>\"good\" balance condition</i> has two properties:\r\n\r\n<ul>\r\n  <li>The height of a binary search tree meeting the condition is &Theta;(log <i>n</i>).</li>\r\n  <li>It takes <i>O</i>(log <i>n</i>) time to re-balance the tree on insertions and removals.</li>\r\n</ul>\r\n</blockquote>\r\n\r\n<p>In other words, it guarantees that the height of the tree is still logarithmic, which will give us logarithmic-time lookups, and the time spent re-balancing won't exceed the logarithmic time we would otherwise spend on an insertion or removal when the tree has logarithmic height.  The cost won't outweigh the benefit.</p>\r\n\r\n<p>Coming up with a balance condition like this on our own is a tall task, but we can stand on the shoulders of the giants who came before us, with the definition above helping to guide us toward an understanding of whether we've found what we're looking for.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">A compromise: AVL trees</p>\r\n\r\n<p>There are a few well-known approaches for maintaining binary search trees in a state of near-balance that meets our notion of a \"good\" balance condition.  One of them is called an <i>AVL tree</i>, which we'll explore here.  Others, which are outside the scope of this course, include red-black trees (which meet our definition of \"good\") and splay trees (which don't always meet our definition of \"good\", but do meet it on an amortized basis), but we'll stick with the one solution to the problem for now.</p>\r\n\r\n<p class=\"subtitle\">AVL trees</p>\r\n\r\n<p>AVL trees are what you might called \"nearly balanced\" binary search trees.  While they certainly aren't as perfectly-balanced as possible, they nonetheless achieve the goals we've decided on: maintaining logarithmic height at no more than logarithmic cost.</p>\r\n\r\n<p>So, what makes a binary search tree \"nearly balanced\" enough to be considered an AVL tree?  The core concept is embodied by something called the <i>AVL property</i>.</p>\r\n\r\n<blockquote>\r\nWe say that a node in a binary search tree has the <i>AVL property</i> if the heights of its left and right subtrees differ by no more than 1.\r\n</blockquote>\r\n\r\n<p>In other words, we tolerate a certain amount of imbalance &mdash; heights of subtrees can be slightly different, but no more than that &mdash; in hopes that we can more efficiently maintain it.</p>\r\n\r\n<p>Since we're going to be comparing heights of subtrees, there's one piece of background we need to consider.  Recall that the <i>height of a tree</i> is the length of its longest path.  By definition, the height of a tree with just a root node (and empty subtrees) would then be zero.  But what about a tree that's totally empty?  To maintain a clear pattern, relative to other tree heights, we'll say that the <i>height of an empty tree</i> is -1.  This means that a node with, say, a childless left child and no right child would still be considered balanced.</p>\r\n\r\n<p>This leads us, finally, to the definition of an AVL tree:</p>\r\n\r\n<blockquote>\r\nAn <i>AVL tree</i> is a binary search tree in which all nodes have the AVL property.\r\n</blockquote>\r\n\r\n<p>Below are a few binary trees, two of which are AVL and two of which are not.</p>\r\n\r\n<p class=\"center\"><img src=\"AVLVsNonAVL.png\" alt=\"AVL and non-AVL trees\" /></p>\r\n\r\n<p>The thing to keep in mind about AVL is that it's not a matter of squinting at a tree and deciding whether it \"looks\" balanced.  There's a precise definition, and the two trees above that don't meet that definition fail to meet it because they each have at least one node (marked in the diagrams by a dashed square) that doesn't have the AVL property.</p>\r\n\r\n<p>AVL trees, by definition, are required to meet the balance condition after every operation; every time you insert or remove a key, every node in the tree should have the AVL property.  To meet that requirement, we need to restructure the tree periodically, essentially detecting and correcting imbalance whenever and wherever it happens.  To do that, we need to rearrange the tree in ways that improve its shape without losing the essential ordering property of a binary search tree: smaller keys toward the left, larger ones toward the right.</p>\r\n\r\n<p class=\"subtitle\">Rotations</p>\r\n\r\n<p>Re-balancing of AVL trees is achieved using what are called <i>rotations</i>, which, when used at the proper times, efficiently improve the shape of the tree by altering a handful of pointers.  There are a few kinds of rotations; we should first understand how they work, then focus our attention on when to use them.</p>\r\n\r\n<p>The first kind of rotation is called an <i>LL rotation</i>, which takes the tree on the left and turns it into the tree on the right.  The circle with A and B written in them are each a single node containing a single key; the triangles with T<sub><small>1</small></sub>, T<sub><small>2</small></sub>, and T<sub><small>3</small></sub> written in them are arbitrary subtrees, which may be empty or may contain any number of nodes (but which are, themselves, binary search trees).</p>\r\n\r\n<p class=\"center\"><img src=\"AVL_LLRotation.png\" alt=\"LL rotation in an AVL tree\" /></p>\r\n\r\n<p>It's important to remember that both of these trees &mdash; before and after &mdash; are binary search trees; the rotation doesn't harm the ordering of the keys in nodes, because the subtrees T<sub><small>1</small></sub>, T<sub><small>2</small></sub>, and T<sub><small>3</small></sub> maintain the appropriate positions relative to the keys A and B:</p>\r\n\r\n<ul>\r\n  <li>All keys in T<sub><small>1</small></sub> are smaller than A.</li>\r\n  <li>All keys in T<sub><small>2</small></sub> are larger than A and smaller than B.</li>\r\n  <li>All keys in T<sub><small>3</small></sub> are larger than B.</li>\r\n</ul>\r\n\r\n<p>Performing this rotation would be a simple matter of adjusting a few pointers &mdash; notably, a constant number of pointers, no matter how many nodes are in the tree, which means that this rotation would run in &Theta;(1) time:</p>\r\n\r\n<ul>\r\n  <li>B's parent would now point to A where it used to point to B</li>\r\n  <li>A's right child would now be B instead of the root of T<sub><small>2</small></sub></li>\r\n  <li>B's left child would now be the root of T<sub><small>2</small></sub> instead of A</li>\r\n</ul>\r\n\r\n<p>A second kind of rotation is an <i>RR rotation</i>, which makes a similar adjustment.</p>\r\n\r\n<p class=\"center\"><img src=\"AVL_RRRotation.png\" alt=\"RR rotation in an AVL tree\" /></p>\r\n\r\n<p>Note that an RR rotation is the mirror image of an LL rotation.</p>\r\n\r\n<p>A third kind of rotation is an <i>LR rotation</i>, which makes an adjustment that's slightly more complicated.</p>\r\n\r\n<p class=\"center\"><img src=\"AVL_LRRotation.png\" alt=\"LR rotation in an AVL tree\" /></p>\r\n\r\n<p>An LR rotation requires five pointer updates instead of three, but this is still a constant number of changes and runs in &Theta;(1) time.</p>\r\n\r\n<p>Finally, there is an <i>RL rotation</i>, which is the mirror image of an LR rotation.</p>\r\n\r\n<p class=\"center\"><img src=\"AVL_RLRotation.png\" alt=\"RL rotation in an AVL tree\" /></p>\r\n\r\n<p>Once we understand the mechanics of how rotations work, we're one step closer to understanding AVL trees.  But these rotations aren't arbitrary; they're used specifically to correct imbalances that are detected after insertions or removals.</p>\r\n\r\n<p class=\"subtitle\">An insertion algorithm</p>\r\n\r\n<p>Inserting a key into an AVL tree starts out the same way as insertion into a binary search tree:</p>\r\n\r\n<ul>\r\n  <li>Perform a lookup.  If you find the key already in the tree, you're done, because keys in a binary search tree must be unique.</li>\r\n  <li>When the lookup terminates without the key being found, add a new node in the appropriate leaf position where the lookup ended.</li>\r\n</ul>\r\n\r\n<p>The problem is that adding the new node introduced the possibility of an imbalance.  For example, suppose we started with this AVL tree:</p>\r\n\r\n<p class=\"center\"><img src=\"AVLExample_AboutToBecomeImbalanced.png\" alt=\"An AVL tree in jeopardy of becoming imbalanced\" /></p>\r\n\r\n<p>and then we inserted the key 35 into it.  A binary search tree insertion would give us this as a result:</p>\r\n\r\n<p class=\"center\"><img src=\"AVLExample_AfterBecomingImbalanced.png\" alt=\"An AVL tree after becoming imbalanced\" /></p>\r\n\r\n<p>But this resulting tree is not an AVL tree, because the node containing the key 40 does not have the AVL property, because the difference in the heights of its subtrees is 2.  (Its left subtree has height 1, its right subtree &mdash; which is empty &mdash; has height -1.)  What can we do about it?</p>\r\n\r\n<p>The answer lies in the following algorithm, which we perform after the normal insertion process:</p>\r\n\r\n<ul>\r\n  <li>Work your way back up the tree from the position where you just added a node.  (This could be quite simple if the insertion was done recursively.)  Compare the heights of the left and right subtrees of each node.  When they differ by more than 1, choose a rotation that will fix the imbalance.\r\n    <ul>\r\n      <li>Note that comparing the heights of the left and right subtrees would be quite expensive if you didn't already know what they were.  The solution to this problem is for each node to store its height (i.e., the height of the subtree rooted there).  This can be cheaply updated after every insertion or removal as you unwind the recursion.</li>\r\n    </ul>\r\n  </li>\r\n  <li>The rotation is chosen considering the two links along the path <i>below</i> the node where the imbalance is, heading back down toward where you inserted a node.  (If you were wondering where the names LL, RR, LR, and RL come from, this is the answer to that mystery.)\r\n    <ul>\r\n      <li>If the two links are both to the left, perform an LL rotation rooted where the imbalance is.</li>\r\n      <li>If the two links are both to the right, perform an RR rotation rooted where the imbalance is.</li>\r\n      <li>If the first link is to the left and the second is to the right, perform an LR rotation rooted where the imbalance is.</li>\r\n      <li>If the first link is to the right and the second is to the left, perform an RL rotation rooted where the imbalance is.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p>It can be shown that any one of these rotations &mdash; LL, RR, LR, or RL &mdash; will correct any imbalance brought on by inserting a key.</p>\r\n\r\n<p>In this case, we'd perform an LR rotation &mdash; the first two links leading from 40 down toward 35 are a <b>L</b>eft and a <b>R</b>ight &mdash; rooted at 40, which would correct the imbalance, and the tree would be rearranged to look like this:</p>\r\n\r\n<p class=\"center\"><img src=\"AVLExample_AfterFixingImbalance.png\" alt=\"An AVL tree after fixing the imbalance\" /></p>\r\n\r\n<p>Compare this to the diagram describing an LR rotation:</p>\r\n\r\n<ul>\r\n  <li>The node containing 40 is C</li>\r\n  <li>The node containing 30 is A</li>\r\n  <li>The node containing 35 is B</li>\r\n  <li>The (empty) left subtree of the node containing 30 is T<sub><small>1</small></sub></li>\r\n  <li>The (empty) left subtree of the node containing 35 is T<sub><small>2</small></sub></li>\r\n  <li>The (empty) right subtree of the node containing 35 is T<sub><small>3</small></sub></li>\r\n  <li>The (empty) right subtree of the node containing 40 is T<sub><small>4</small></sub></li>\r\n</ul>\r\n\r\n<p>After the rotation, we see what we'd expect:</p>\r\n\r\n<ul>\r\n  <li>The node B, which in our example contained 35, is now the root of the newly-rotated subtree</li>\r\n  <li>The node A, which in our example contained 30, is now the left child of the root of the newly-rotated subtree</li>\r\n  <li>The node C, which in our example contained 40, is now the right child of the root of the newly-rotated subtree</li>\r\n  <li>The four subtrees T<sub><small>1</small></sub>, T<sub><small>2</small></sub>, T<sub><small>3</small></sub>, and T<sub><small>4</small></sub> were all empty, so they are still empty.</li>\r\n</ul>\r\n\r\n<p>Note, too, that the tree is more balanced after the rotation than it was before.  This is no accident; a single rotation (LL, RR, LR, or RL) is all that's necessary to correct an imbalance introduced by the insertion algorithm.</p>\r\n\r\n<p class=\"subtitle\">A removal algorithm</p>\r\n\r\n<p>Removals are somewhat similar to insertions, in the sense that you would start with the usual binary search tree removal algorithm, then find and correct imbalances while the recursion unwinds.  The key difference is that removals can require more than one rotation to correct imbalances, but will still only require rotations on the path back up to the root from where the removal occurred &mdash; so, generally, <i>O</i>(log <i>n</i>) rotations.</p>\r\n\r\n<p class=\"subtitle\">Asymptotic analysis</p>\r\n\r\n<p>The key question here is <i>What is the height of an AVL tree with <i>n</i> nodes?</i>  If the answer is &Theta;(log <i>n</i>), then we can be certain that lookups, insertions, and removals will take <i>O</i>(log <i>n</i>) time.  How can we be so sure?</p>\r\n\r\n<p>Lookups would be <i>O</i>(log <i>n</i>) because they're the same as they are in a binary search tree that doesn't have the AVL property.  If the height of the tree is &Theta;(log <i>n</i>), lookups will run in <i>O</i>(log <i>n</i>) time.  Insertions and removals, despite being slightly more complicated in an AVL tree, do their work by traversing a single path in the tree &mdash; potentially all the way down to a leaf position, then all the way back up.  If the length of the longest path &mdash; that's what the height of a tree is! &mdash; is &Theta;(log <i>n</i>), then we know that none of these paths is longer than that, so insertions and removals will take <i>O</i>(log <i>n</i>) time.</p>\r\n\r\n<p>So we're left with that key question.  What is the height of an AVL tree with <i>n</i> nodes?  (If you're not curious, you can feel free to just assume this; if you want to know more, keep reading.)</p>\r\n\r\n<p class=\"subtitle\">What is the height of an AVL tree with n nodes? (Optional)</p>\r\n\r\n<p>The answer revolves around noting how many nodes, at minimum, could be in a binary search tree of height <i>n</i> and still have it be an AVL tree.  It turns out AVL trees of height <i>n</i> &ge; 2 that have the minimum number of nodes in them all share a similar property:</p>\r\n\r\n<blockquote>\r\nThe AVL tree with height <i>h</i> &ge; 2 with the minimum number of nodes consists of a root node with two subtrees, one of which is an AVL tree with height <i>h</i> &minus; 1 with the minimum number of nodes, the other of which is an AVL tree with height <i>h</i> &minus; 2 with the minimum number of nodes.\r\n</blockquote>\r\n\r\n<p>Given that observation, we can write a recurrence that describes the number of nodes, at minimum, in an AVL tree of height <i>h</i>.</p>\r\n\r\n<blockquote><pre>\r\n      M(0) = 1       <i>When height is 0, minimum number of nodes is 1 (a root node with no children)</i>\r\n      M(1) = 2       <i>When height is 1, minimum number of nodes is 2 (a root node with one child and not the other)</i>\r\n      M(<i>h</i>) = 1 + M(<i>h</i> - 1) + M(<i>h</i> - 2)\r\n</pre></blockquote>\r\n\r\n<p>While the repeated substitution technique we learned previously isn't a good way to try to solve this particular recurrence, we can prove something interesting quite easily.  We know for sure that AVL trees with larger heights have a bigger minimum number of nodes than AVL trees with smaller heights &mdash; that's fairly self-explanatory &mdash; which means that we can be sure that 1 + M(<i>h</i> &minus; 1) &ge; M(<i>h</i> &minus; 2).  Given that, we can conclude the following:</p>\r\n\r\n<blockquote><pre>\r\n      M(<i>h</i>) &ge; 2M(<i>h</i> - 2)\r\n</pre></blockquote>\r\n\r\n<p>We can then use the repeated substitution technique to determine a lower bound for this recurrence:</p>\r\n\r\n<blockquote><pre>\r\n      M(<i>h</i>) &ge; 2M(<i>h</i> -  2)\r\n           &ge; 2(2M(<i>h</i> - 4))\r\n           &ge; 4M(<i>h</i> - 4)\r\n           &ge; 4(2M(<i>h</i> - 6))\r\n           &ge; 8M(<i>h</i> - 6)\r\n           ...\r\n           &ge; 2<sup><small><i>j</i></small></sup>M(<i>h</i> - 2<i>j</i>)         <i>We could prove this by induction on j, but we'll accept it on faith</i>\r\n\r\n        let <i>j</i> = <i>h</i>/2\r\n\r\n           &ge; 2<sup><small><i>h</i>/2</small></sup>M(<i>h</i> - <i>h</i>)\r\n           &ge; 2<sup><small><i>h</i>/2</small></sup>M(0)\r\n      M(<i>h</i>) &ge; 2<sup><small><i>h</i>/2</small></sup>\r\n</pre></blockquote>\r\n\r\n<p>So, we've shown that the minimum number of nodes that can be present in an AVL tree of height <i>h</i> is at least 2<sup><small><i>h</i>/2</small></sup>.  In reality, it's actually more than that, but this gives us something useful to work with; we can use this result to figure out what we're really interested in, which is the opposite: what is the height of an AVL tree with <i>n</i> nodes?</p>\r\n\r\n<blockquote><pre>\r\n      M(<i>h</i>) &ge; 2<sup><small><i>h</i>/2</small></sup>\r\n  log<sub><small>2</small></sub>M(<i>h</i>) &ge; <i>h</i>/2\r\n2 log<sub><small>2</small></sub>M(<i>h</i>) &ge; <i>h</i>\r\n</pre></blockquote>\r\n\r\n<p>Finally, we see that, for AVL trees of height <i>h</i> with the minimum number of nodes, the height is no more than 2 log<sub><small>2</small></sub><i>n</i>, where <i>n</i> is the number of nodes in the tree.  For AVL trees with more than the minimum number of nodes, the relationship between the number of nodes and the height is even better, though, for reasons we've seen previously, we know that the relationship between the number of nodes and the height of a binary tree can never be better than logarithmic.  So, ultimately, we see that the height of an AVL tree with <i>n</i> nodes is &Theta;(log <i>n</i>).</p>\r\n\r\n<p>(In reality, it turns out that the bound is lower than 2 log<sub><small>2</small></sub><i>n</i>; it's something more akin to about 1.44 log<sub><small>2</small></sub><i>n</i>, even for AVL trees with the minimum number of nodes, though the proof of that is more involved and doesn't change the asymptotic result.)</p>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}