{"url": "https://www.ics.uci.edu/~eppstein/280g/open.html", "content": "<HTML><HEAD>\n<TITLE>Mesh Generation: Open Problems</TITLE>\n<META name=\"Owner\" value=\"eppstein\">\n<META name=\"Reply-To\" value=\"eppstein@ics.uci.edu\">\n</HEAD><BODY>\n\n<A HREF=\"/~theory/\">\n<IMG src=\"/~theory/logo/shortTheory.gif\"\nWIDTH=521 HEIGHT=82 BORDER=0 ALT=\"ICS Theory Group\"></A>\n\n<A HREF=\"/~eppstein/280g/\">\n<H1>ICS 280G, Spring 1997:<BR>\nMesh Generation for Graphics and Scientific Computation</H1></A>\n<!--#config timefmt=\"%d %h %Y, %T %Z\" -->\n\n<H2>Open Problems</H2>\n\n<OL>\n<LI>We proved (<I>4/3/97</I>) the existence of triangulations of any\npolygon or straight line graph, and of convex quadrilateralizations of\nany orthogonal polygon.  What about curved objects?  <A HREF=\"/~eppstein/projects/splinegon/\">Do spline-polygons have spline-triangulations?</A>\nAn example formed by connecting four quarter-ellipses shows Steiner\npoints may be needed, even for quadratic splines, but maybe they only\nneed to be added in the interior of the splinegon.\n\n<P><LI>On <I>4/8/97</I> we went over dynamic programming techniques for\noptimal triangulation (e.g. minimum total edge length) of simple\npolygons, in O(n<sup>3</sup>) time or O(E<sup>3/2</sup>) if the\nvisibility graph has E edges. So the slowest case is seemingly the most\nsimple, when the polygon is convex. Can we find the minimum length\ntriangulation of convex polygons in o(n<sup>3</sup>) time?\nSteve S. suggested Frances Yao's generalization of Knuth's speedup to\noptimal binary search tree construction (which has the same general\ndynamic programming form) but it doesn't seem to work.\n\n<P><LI>The same dynamic programming methods also work for optimal\nquadrilateralization, in time O(n<sup>4</sup>). There is sometimes a\npossible speedup: we can break quadrilaterals into pairs of triangles\nand reduce the time to O(n<sup>3</sup>), but only for those quality\nfunctions which can be computed by adding separately the qualities of\nthe two triangles (e.g. total edge length, allowing concave\nquadrilaterals). The speedup doesn't seem to\nwork when we want to use angle-based quality measures, e.g. even as\nsimple a problem as testing whether there exists a partition of a simple\npolygon into convex quadrilaterals.  Can we test for the existence of\nsuch a partition in time o(n^4)?  What about convex quadrilateralization\nof non-simple polygons?\n\n<P><LI>Non-simple polygons with h holes can be reduced to simple ones by\nchoosing h edges, one going leftwards from the leftmost vertex of each\nhole boundary.  In this way we can find optimal triangulations of them\nin time O(n<sup>3+h</sup>).  It is a famous open problem whether minimum\nlength triangulation is polynomial time (so that we can get rid of the\nexponent of h).  Also, can we use e.g. separator-based divide and\nconquer to reduce the time bound to n<sup>O(sqrt h)</sup>?  If so, can\nthe constants be made small enough for this to actually be more\npractical than the O(n<sup>3+h</sup>) bound?\n\n<P><LI>O'Rourke's art gallery book mentions an\nO(n<sup>7</sup>&nbsp;log&nbsp;n) time bound for a dynamic programming-based\nmethod for partitioning simple polygons into the minimum number of\nstar-shaped regions. Can this be improved? What about dynamic\nprogramming for partitioning into the minimum number of convex pieces,\npresumably this works but is it O(n<sup>3</sup>), O(n<sup>4</sup>), or worse?\n<P>[<I>Note added later: <A HREF=\"convex-decomp.html\">Jeff Erickson tells\nme</A> the best known bound for convex partition is\nO(r<sup>2</sup>n&nbsp;</I>log<I>&nbsp;n) where r is the\nnumber of reflex vertices, which might be as large as n. We haven't\ngotten to Steiner problems yet but the minimum Steiner partition into\nconvex pieces can also be solved in time O(n&nbsp;+&nbsp;r<sup>3</sup>)\nby an algorithm of Chazelle.</I>]\n\n<P><LI>Can we find the triangulation of a planar straight line graph (PSLG)\nthat minimizes the maximum edge length in polynomial time?\nEdelsbrunner and Tan [FOCS '91] solved this for point sets.  Extending\ntheir results to PSLGs would also solve the problem they left open of\nminimizing the lexicographically-ordered vector of edge lengths\n(at least for point sets in general position).\n\n<P><LI>A much more famous optimal triangulation problem: can we find the\ntriangulation minimizing the sum of edge lengths in polynomial time?\nThere has been a lot of work on this for point sets, but less for PSLGs,\nso perhaps the extra complexity of a PSLG would make it easier for an\nNP-completeness proof to go through.\n\n<P><LI>If we are given a set of three-dimensional points, can we find a\ncontinuous piecewise linear interpolating function (i.e. a surface\nformed by projecting the points onto the xy-plane, triangulating, and lifting\nthe triangles back up into 3D) that minimizes the total surface area, in\npolynomial time?  What about a function that maximizes the minimum\ndihedral angle? Note that examples based on a regular octahedron\n(oriented with two faces parallel to the xy-plane, so its vertices\nproject to a regular hexagon) show that edge\ninsertion does not work for these problems.\n\n<P><LI>What if anything can we prove about optimal quadrilateralization\nof point sets and/or planar straight line graphs?\n\n<P><LI>Does every point set, polygon, or planar straight line graph have\na well-defined minimum weight Steiner triangulation?  (The minimum\nweight itself is well defined, but the other possibility is that adding more\nand more Steiner points might be needed to get closer and closer to some\nlimiting weight.)\n\n<P><LI>We showed (<I>4/22/97</I>) that the number of elements required\nfor no-small-angle triangulation could be bounded above and below by\nintegral(1/(local feature size)<sup>2</sup>), and used this to prove the\noptimality of quadtree triangulation and Ruppert's incremental Delaunay method.\nIn my paper \"<A HREF=\"/~eppstein/pubs/p-mwst.html\">Approximating the\nminimum weight Steiner triangulation</A>\" I showed that quadtree\ntriangulation also approximately minimizes the total edge length among\nall Steiner triangulations of a point set, but left open the problem of\nextending this result to polygons.  For quadtree triangulations, the\ntotal edge length is proportional to integral(1/(local feature size)).\nIs this a general lower bound on the length of all triangulations?\nIf so this would simplify my results and lead to the polygon extension.\nIt would also be of interest to find a polynomial-time approximation\nto minimum edge length (quadtrees may be nonpolynomial), but perhaps\nthis could be done with the same shortcutting technique used in my paper.\n\n<P><LI>Another open question from the same approximate minimum weight\npaper: there exist convex polygons for which the min weight\ntriangulation requires Steiner points on the boundary. But are Steiner\npoints ever required in the interior of the polygon?  If not, one might\nbe able to compute the optimal triangulation by dynamic programming,\ninteresting since no optimal Steiner triangulation result is currently known.\n\n<P><LI>We went over the circle-packing method of Bern, Mitchell, and\nRuppert (<I>4/24/97</I>), which nonobtusely triangulates any\npolygon without cracks, using\nonly O(<I>n</I>) triangles.  But it produces lots of right triangles.\nCan it be modified to produce only acute triangles?\n\n<P><LI>Bern, Mitchell, and Ruppert's method works by dividing the\npolygon into kite-shaped regions which are then split into two or four\nright triangles each.\n<A HREF=\"/~eppstein/pubs/p-qpack.html\">Can we say anything about the\nquality of the quadrilateral mesh obtained by not splitting the kites?</A>\n\n<P><LI>Sometimes, it may be possible to pack more circles into the\nregion bounded by four tangent circles, in such a way that all remaining\nregions are bounded by only three circles.  In general position,\nhowever, this doesn't happen.  How easily can we tell whether the\ncircles are in a special position that allows this kind of packing?\n\n<P><LI>Is there a polynomial time algorithm for nonobtusely\ntriangulating polygons with cracks, or arbitrary planar straight line graphs?\nThere is a lower bound of Omega(<I>n</I><sup>2</sup>) on the required\noutput complexity. The only known upper bound is\nO(<I>n</I><sup>4</sup>), on the very special case in which the PSLG is\nitself a triangulation of a simple polygon\n(\"<A HREF=\"/~eppstein/pubs/p-nonobtuse.html\">Polynomial size non-obtuse\ntriangulation of polygons</A>\").\n\n<P><LI>Edelsbrunner and Tan gave an O(<I>n</I><sup>3</sup>) algorithm\nfor <I>conforming Delaunay triangulation</I>, a relaxation of nonobtuse\ntriangulation to which the same Omega(<I>n</I><sup>2</sup>) lower bound\napplies. Can the problem be solved in O(<I>n</I><sup>2</sup>) complexity?\n\n<P><LI><A HREF=\"/~eppstein/projects/tetra/\">How many tetrahedra or\nsimplices are needed to triangulate a given polyhedron or polytope?</A>\nThis is also closely related to the problem of computing the number of\nflips required to convert one planar triangulation into another.\nThe worst-case version of the question in 3d (what is the maximum number\nof tetrahedra required, as a function of <I>n</I>) was answered by Sleator,\nTarjan, and Thurston.  The algorithmic question (how many are required\nfor this particular polyhedron) remains open.  \nAlso open: how many simplices are required to triangulate a\n<I>d</I>-dimensional hypercube, as a function of <I>d</I>.\nDo Steiner points ever help reduce the number of tetrahedra or simplices?\n\n<P><LI>Is it always possible to tetrahedralize (without Steiner points)\nthe shape formed by forming a convex-polyhedron void inside the kernel\nof a star-shaped polyhedron?\n\n<P><LI>For any point set in <B>R</B><SUP>3</SUP>, one can form a <I>flip\ngraph</I> of the different tetrahedralizations of the point set\n(partitions of its convex hull into tetrahedra meeting face to face and\nhaving the points as vertices), in which two tetrahedralizations are\nconnected by an edge if they differ by a <I>flip</I> (if two\nface-to-face tetrahedra together form a convex 5-vertex polyhedron,\nreplace them by a three-tetrahedron subdivision of the same polyhedron\nor vice versa).  This graph is bipartite. Can it be disconnected?\nOr worse, can it have isolated vertices (tetrahedralizations in which no\nflips are possible)?\n\n<P><LI><A HREF=\"http://www.cs.duke.edu/~jeffe/open/comb.html#traversal\">Does\nevery line through a 3-dimensional Delaunay triangulation intersect at\nmost O(<I>n</I>) tetrahedra?</A>\n<P>[<I>Note added October 1999: \n<A HREF=\"http://www.cs.berkeley.edu/~jrs/stab.html\">Jonathan Shewchuk has\nfound a 3d DT in which a line can stab Omega(n<sup>2</sup>) tetrahedra.</A></I>]\n\n<P><LI>Can we efficiently construct the triangulation of a 3d point set\nmaximizing the minimum solid angle?  (Note that unlike its planar analog,\nthis is not optimized by the Delaunay triangulation, due to the fact that,\nif three of four vertices of a tetrahedron are fixed,\nand the solid angle at the fourth point is also fixed,\nthe locus of possible locations for that point is non-spherical.\n<A HREF=\"/~eppstein/pubs/p-meshsmooth.html\">I can prove that this locus\nis convex</A>, but the proof is messy and algebraic -- is there\na simple conceptual proof?)\n\n<P><LI>If we are given <I>n</I> points in space, the Delaunay\ntriangulation of which has <I>t</I> tetrahedra, how quickly can we find\nthat triangulation?\n<A HREF=\"http://www.cs.miami.edu/~tchan/pub.html\">Chan, Snoeyink and Yap\nhave an algorithm with running time\nO((<I>n</I>&nbsp;+&nbsp;<I>t</I>)&nbsp;log<SUP>2</SUP>&nbsp;<I>t</I>)</A>, but this does\nnot quite match the known lower bound of\nOmega(<I>n</I>&nbsp;log&nbsp<I>t</I>&nbsp;+&nbsp;<I>t</I>).\n</UL>\n\n<P>Some more practical problems from Mac\n(meaning, a solution would likely involve an actual working system,\nalthough one might imagine theoretical results in these areas):\n<OL>\n<LI>Hex meshing with quality approaching that which is\nproducable by hand - i.e., by region decomposition \ncontrolled by an expert.\n<LI>Intelligent meshing of features (if you tell the CAD\nsystem to put a certain type of feature on your object, that information\nshould be used by the mesher).\n<LI>Fast remeshing after a local change.\n<LI>Mesh smoothing for high order elements with curved boundaries.\n<LI>Problem dependent, black box meshing, in which the whole process of\nselecting a mesh type, performing mesh generation, applying a numerical\nalgorithm, etc is automatically performed given some specification of\nthe problem to be solved.\n<LI>Decomposition into \"nice\" 2-1/2D regions (generalized cylinders,\nmeeting parallel to each other; one could then apply a planar mesh\nalgorithm to the cylinder cross-section and cut horizontally to get a\ngood 3D mesh).\n</OL>\n\n<HR><P>\n<A HREF=\"/~eppstein/\">David Eppstein</A>,\n<A HREF=\"/~theory/\">Theory Group</A>,\n<A HREF=\"/\">Dept. Information & Computer Science</A>,\n<A HREF=\"http://www.uci.edu/\">UC Irvine</A>.<BR>\n<SMALL>Last update: <!--#flastmod file=\"open.html\" --></SMALL>\n</BODY></HTML>\n", "encoding": "ascii"}