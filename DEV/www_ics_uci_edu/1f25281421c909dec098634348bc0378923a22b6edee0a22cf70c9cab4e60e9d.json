{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/doc/api/aib.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n <head>\n  <!-- IE Standards Mode -->\n  <meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"></meta>\n  <!-- Favicon -->\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"icon\"></link>\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"shortcut icon\"></link>\n  <!-- Page title -->\n  <title>VLFeat - Documentation > C API</title>\n  <!-- Stylesheets -->\n  <link href=\"../vlfeat.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <link href=\"../pygmentize.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <style xml:space=\"preserve\">\n    /* fixes a conflict between Pygmentize and MathJax */\n    .MathJax .mo, .MathJax .mi {color: inherit ! important}\n  </style>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"doxygen.css\"></link>\n  <!-- Scripts-->\n  <script type=\"text/javascript\" src=\"jquery.js\"></script>\n<script type=\"text/javascript\" src=\"dynsections.js\"></script>\n  <!-- MathJax -->\n  <script xml:space=\"preserve\" type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true,\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n        by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers: { autoNumber: 'AMS' }\n      }\n    });\n  </script>\n  <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" xml:space=\"preserve\" type=\"text/javascript\"></script>\n  <!-- Google Custom Search -->\n  <script xml:space=\"preserve\">\n    (function() {\n    var cx = '003215582122030917471:oq23albfeam';\n    var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n    gcse.src = (document.location.protocol == 'https' ? 'https:' : 'http:') +\n    '//www.google.com/cse/cse.js?cx=' + cx;\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n    })();\n  </script>\n  <!-- Google Analytics -->\n  <script xml:space=\"preserve\" type=\"text/javascript\">\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-4936091-2']);\n    _gaq.push(['_trackPageview']);\n    (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    })();\n  </script>\n </head>\n <!-- Body Start -->\n <body>\n  <div id=\"header-section\">\n    <div id=\"header\">\n      <!-- Google CSE Search Box -->\n      <div class=\"searchbox\">\n        <gcse:searchbox-only autoCompleteMaxCompletions=\"5\" autoCompleteMatchType=\"any\" resultsUrl=\"http://www.vlfeat.org/search.html\"></gcse:searchbox-only>\n      </div>\n      <h1 id=\"id-16\"><a shape=\"rect\" href=\"../index.html\" class=\"plain\"><span id=\"vlfeat\">VLFeat</span><span id=\"dotorg\">.org</span></a></h1>\n    </div>\n    <div id=\"sidebar\"> <!-- Navigation Start -->\n      <ul>\n<li><a href=\"../index.html\">Home</a>\n<ul>\n<li><a href=\"../about.html\">About</a>\n</li>\n<li><a href=\"../license.html\">License</a>\n</li>\n</ul></li>\n<li><a href=\"../download.html\">Download</a>\n<ul>\n<li><a href=\"../install-matlab.html\">Using from MATLAB</a>\n</li>\n<li><a href=\"../install-octave.html\">Using from Octave</a>\n</li>\n<li><a href=\"../install-shell.html\">Using from the command line</a>\n</li>\n<li><a href=\"../install-c.html\">Using from C</a>\n<ul>\n<li><a href=\"../xcode.html\">Xcode</a>\n</li>\n<li><a href=\"../vsexpress.html\">Visual C++</a>\n</li>\n<li><a href=\"../gcc.html\">g++</a>\n</li>\n</ul></li>\n<li><a href=\"../compiling.html\">Compiling</a>\n<ul>\n<li><a href=\"../compiling-unix.html\">Compiling on UNIX-like platforms</a>\n</li>\n<li><a href=\"../compiling-windows.html\">Compiling on Windows</a>\n</li>\n</ul></li>\n</ul></li>\n<li><a href=\"../overview/tut.html\">Tutorials</a>\n<ul>\n<li><a href=\"../overview/frame.html\">Local feature frames</a>\n</li>\n<li><a href=\"../overview/covdet.html\">Covariant feature detectors</a>\n</li>\n<li><a href=\"../overview/hog.html\">HOG features</a>\n</li>\n<li><a href=\"../overview/sift.html\">SIFT detector and descriptor</a>\n</li>\n<li><a href=\"../overview/dsift.html\">Dense SIFT</a>\n</li>\n<li><a href=\"../overview/liop.html\">LIOP local descriptor</a>\n</li>\n<li><a href=\"../overview/mser.html\">MSER feature detector</a>\n</li>\n<li><a href=\"../overview/imdisttf.html\">Distance transform</a>\n</li>\n<li><a href=\"../overview/encodings.html\">Fisher Vector and VLAD</a>\n</li>\n<li><a href=\"../overview/gmm.html\">Gaussian Mixture Models</a>\n</li>\n<li><a href=\"../overview/kmeans.html\">K-means clustering</a>\n</li>\n<li><a href=\"../overview/aib.html\">Agglomerative Infromation Bottleneck</a>\n</li>\n<li><a href=\"../overview/quickshift.html\">Quick shift superpixels</a>\n</li>\n<li><a href=\"../overview/slic.html\">SLIC superpixels</a>\n</li>\n<li><a href=\"../overview/svm.html#tut.svm\">Support Vector Machines (SVMs)</a>\n</li>\n<li><a href=\"../overview/kdtree.html\">KD-trees and forests</a>\n</li>\n<li><a href=\"../overview/plots-rank.html\">Plotting AP and ROC curves</a>\n</li>\n<li><a href=\"../overview/utils.html\">Miscellaneous utilities</a>\n</li>\n<li><a href=\"../overview/ikm.html\">Integer K-means</a>\n</li>\n<li><a href=\"../overview/hikm.html\">Hierarchical integer k-means</a>\n</li>\n</ul></li>\n<li><a href=\"../applications/apps.html\">Applications</a>\n</li>\n<li class='active'><a href=\"../doc.html\">Documentation</a>\n<ul>\n<li><a href=\"../matlab/matlab.html\">MATLAB API</a>\n</li>\n<li class='active' class='activeLeaf'><a href=\"index.html\">C API</a>\n</li>\n<li><a href=\"../man/man.html\">Man pages</a>\n</li>\n</ul></li>\n</ul>\n    </div> <!-- sidebar -->\n  </div>\n  <div id=\"headbanner-section\">\n    <div id=\"headbanner\">\n      <span class='page'><a href=\"../doc.html\">Documentation</a></span><span class='separator'>></span><span class='page'><a href=\"index.html\">C API</a></span>\n    </div>\n  </div>\n  <div id=\"content-section\">\n    <div id=\"content-wrapper\">\n      <div id=\"content\">\n      <!-- <pagestyle href=\"%pathto:root;api/tabs.css\"/> -->\n      <div class=\"doxygen\">\n<div id=\"top\">\n<div id=\"top\">\n<!-- Generated by Doxygen 1.8.7 -->\n  <div id=\"navrow1\" class=\"tabs\">\n    <ul class=\"tablist\">\n      <li><a href=\"index.html\"><span>Main&#160;Page</span></a></li>\n      <li class=\"current\"><a href=\"pages.html\"><span>Related&#160;Pages</span></a></li>\n      <li><a href=\"annotated.html\"><span>Data&#160;Structures</span></a></li>\n      <li><a href=\"files.html\"><span>Files</span></a></li>\n    </ul>\n  </div>\n<div id=\"nav-path\" class=\"navpath\">\n  <ul>\n<li class=\"navelem\"><a class=\"el\" href=\"index.html\">Vision Lab Features Library (VLFeat)</a></li>  </ul>\n</div>\n</div><!-- top -->\n<div class=\"header\">\n  <div class=\"headertitle\">\n<div class=\"title\">Agglomerative Information Bottleneck (AIB) </div>  </div>\n</div><!--header-->\n<div class=\"contents\">\n<div class=\"textblock\"><dl class=\"section author\"><dt>Author</dt><dd>Brian Fulkerson </dd>\n<dd>\nAndrea Vedaldi</dd></dl>\n<p><a class=\"el\" href=\"aib_8h.html\">aib.h</a> implemens the Agglomerative Information Bottleneck (AIB) algorithm as first described in <a class=\"el\" href=\"citelist.html#CITEREF_slonim99agglomerative\">[28]</a> .</p>\n<p>AIB takes a discrete valued feature \\(x\\) and a label \\(c\\) and gradually compresses \\(x\\) by iteratively merging values which minimize the loss in mutual information \\(I(x,c)\\).</p>\n<p>While the algorithm is equivalent to the one described in <a class=\"el\" href=\"citelist.html#CITEREF_slonim99agglomerative\">[28]</a> , it has some speedups that enable handling much larger datasets. Let <em>N</em> be the number of feature values and <em>C</em> the number of labels. The algorithm of <a class=\"el\" href=\"citelist.html#CITEREF_slonim99agglomerative\">[28]</a> is \\(O(N^2)\\) in space and \\(O(C N^3)\\) in time. This algorithm is \\(O(N)\\) space and \\(O(C N^2)\\) time in common cases ( \\(O(C N^3)\\) in the worst case).</p>\n<h1><a class=\"anchor\" id=\"aib-overview\"></a>\nOverview</h1>\n<p>Given a discrete feature \\(x \\in \\mathcal{X} = \\{x_1,\\dots,x_N\\}\\) and a category label \\(c = 1,\\dots,C\\) with joint probability \\(p(x,c)\\), AIB computes a compressed feature \\([x]_{ij}\\) by merging two values \\(x_i\\) and \\(x_j\\). Among all the pairs \\(ij\\), AIB chooses the one that yields the smallest loss in the mutual information</p>\n<p class=\"formulaDsp\">\n\\[ D_{ij} = I(x,c) - I([x]_{ij},c) = \\sum_c p(x_i) \\log \\frac{p(x_i,c)}{p(x_i)p(c)} + \\sum_c p(x_i) \\log \\frac{p(x_i,c)}{p(x_i)p(c)} - \\sum_c (p(x_i)+p(x_j)) \\log \\frac {p(x_i,c)+p(x_i,c)}{(p(x_i)+p(x_j))p(c)} \\]\n</p>\n<p>AIB iterates this procedure until the desired level of compression is achieved.</p>\n<h1><a class=\"anchor\" id=\"aib-algorithm\"></a>\nAlgorithm details</h1>\n<p>Computing \\(D_{ij}\\) requires \\(O(C)\\) operations. For example, in standard AIB we need to calculate</p>\n<p class=\"formulaDsp\">\n\\[ D_{ij} = I(x,c) - I([x]_{ij},c) = \\sum_c p(x_i) \\log \\frac{p(x_i,c)}{p(x_i)p(c)} + \\sum_c p(x_i) \\log \\frac{p(x_i,c)}{p(x_i)p(c)} - \\sum_c (p(x_i)+p(x_j)) \\log \\frac {p(x_i,c)+p(x_i,c)}{(p(x_i)+p(x_j))p(c)} \\]\n</p>\n<p>Thus in a basic implementation of AIB, finding the optimal pair \\(ij\\) of feature values requires \\(O(CN^2)\\) operations in total. In order to join all the \\(N\\) values, we repeat this procedure \\(O(N)\\) times, yielding \\(O(N^3 C)\\) time and \\(O(1)\\) space complexity (this does not account for the space need to store the input).</p>\n<p>The complexity can be improved by reusing computations. For instance, we can store the matrix \\(D = [ D_{ij} ]\\) (which requires \\(O(N^2)\\) space). Then, after joining \\(ij\\), all of the matrix <em>D</em> except the rows and columns (the matrix is symmetric) of indexes <em>i</em> and <em>j</em> is unchanged. These two rows and columns are deleted and a new row and column, whose computation requires \\(O(NC)\\) operations, are added for the merged value \\(x_{ij}\\). Finding the minimal element of the matrix still requires \\(O(N^2)\\) operations, so the complexity of this algorithm is \\(O(N^2C + N^3)\\) time and \\(O(N^2)\\) space.</p>\n<p>We can obtain a much better expected complexity as follows. First, instead of storing the whole matrix <em>D</em>, we store the smallest element (index and value) of each row as \\((q_i, D_i)\\) (notice that this is also the best element of each column since <em>D</em> is symmetric). This requires \\(O(N)\\) space and finding the minimal element of the matrix requires \\(O(N)\\) operations. After joining \\(ij\\), we have to efficiently update this representation. This is done as follows:</p>\n<ul>\n<li>The entries \\((q_i,D_i)\\) and \\((q_j,D_j)\\) are deleted.</li>\n<li>A new entry \\((q_{ij},D_{ij})\\) for the joint value \\(x_{ij}\\) is added. This requires \\(O(CN)\\) operations.</li>\n<li>We test which other entries \\((q_{k},D_{k})\\) need to be updated. Recall that \\((q_{k},D_{k})\\) means that, before the merge, the value closest to \\(x_k\\) was \\(x_{q_k}\\) at a distance \\(D_k\\). Then<ul>\n<li>If \\(q_k \\not = i\\), \\(q_k \\not = j\\) and \\(D_{k,ij} \\geq D_k\\), then \\(q_k\\) is still the closest element and we do not do anything.</li>\n<li>If \\(q_k \\not = i\\), \\(q_k \\not = j\\) and \\(D_{k,ij} &lt; D_k\\), then the closest element is \\(ij\\) and we update the entry in constant time.</li>\n<li>If \\(q_k = i\\) or \\(q_k = j\\), then we need to re-compute the closest element in \\(O(CN)\\) operations.</li>\n</ul>\n</li>\n</ul>\n<p>This algorithm requires only \\(O(N)\\) space and \\(O(\\gamma(N) C N^2)\\) time, where \\(\\gamma(N)\\) is the expected number of times we fall in the last case. In common cases one has \\(\\gamma(N) \\approx \\mathrm{const.}\\), so the time saving is significant. </p>\n</div></div><!-- contents -->\n        <!-- Doc Here -->\n      </div>\n      </div>\n      <div class=\"clear\">&nbsp;</div>\n    </div>\n  </div> <!-- content-section -->\n  <div id=\"footer-section\">\n    <div id=\"footer\">\n      &copy; 2007-13 The authors of VLFeat\n    </div> <!-- footer -->\n  </div> <!-- footer section -->\n </body>\n <!-- Body ends -->\n</html>\n", "encoding": "ascii"}