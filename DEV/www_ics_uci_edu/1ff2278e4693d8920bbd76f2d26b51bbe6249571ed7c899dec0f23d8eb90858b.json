{"url": "https://www.ics.uci.edu/~ejw/authoring/minneapolis01/minutes.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r\n<HTML>\r\n<HEAD>\r\n<TITLE>Minutes, March 22, 2001 WebDAV Working Group Meeting, Minneapolis, MN, IETF-50</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<H2 ALIGN=center>WEBDAV WORKING GROUP</H2>\r\n<H3 ALIGN=center>Meeting Minutes<BR>\r\nIETF-50, Minneapolis, MN<BR>\r\nMarch 22, 2001</H3>\r\n\r\n<P>The WebDAV WG met on Thursday, March 22, 2001, from 0900-1130, with\r\napproximately 25 people in attendance. The meeting was chaired by Jim\r\nWhitehead, and meeting notes were recorded by John Stracke. Final\r\nminutes were prepared by Jim Whitehead. Note that throughout the\r\nmeeting, brief notes and observations on the sense of the room on\r\nvarious issues were recorded in a slide presentation that was\r\non-screen during the entire meeting. The final state of these slides\r\ncan be found at URL:<BR><BR>\r\n<A HREF=\"http://www.ics.uci.edu/pub/ietf/webdav/minneapolis01/meeting.htm\">http://www.ics.uci.edu/pub/ietf/webdav/minneapolis01/meeting.htm</A></P>\r\n\r\n<P>The meeting began with a brief discussion of the agenda:</P>\r\n\r\n<UL>\r\n  <LI>Open issues in the ACL specification \r\n  <LI>Reviving DASL \r\n  <LI>Improved status reporting \r\n  <LI>Moving 2518 to Draft status \r\n  <UL>\r\n    <LI>Process for moving forward \r\n    <LI>Discussion of issues list items \r\n</UL>\r\n</UL>\r\n\r\n<H2>ACL Spec open issues</H2>\r\n\r\n<P><B>Does a null resource have an ACL?</B></P> \r\n\r\n<P>Geoff Clemm: does this mean null or lock-null (two separate\r\nquestions). He pointed out that, if null resources exist and can be\r\nPROPFOUND, then Depth: infinity becomes ridiculous. He also believes\r\nthat, for lock-null, it's cheap to add ACLs, but not necessarily\r\nuseful. John Stracke pointed out that it would be nice to be able to\r\ntake out a lock, set the ACL for non-world-readable, then create, so\r\nthat there's no window where the resource may be world-writable. Geoff\r\nnoted that her concerned about the complexity tradeoff. John pointed\r\nout that, in his scenario, one could lock, create with an empty body,\r\nset ACL, then write the real content. At this point, Geoff, Jim\r\nWhitehead, and Eric Sedlar started talking about eliminating lock-null\r\nresources altogether at Draft Standard; nobody objects. \r\n\r\n<P><I>The consensus of the room was that lock-null resources do not\r\nhave an ACL.</I></P>\r\n\r\n<P><B>Can an ldap: scheme URL be used for principal identifiers?</B>\r\n\r\n<P>In past revisions of the ACL specification, principal identifiers\r\nhave always been http: scheme URLs; in San Diego, it was suggested\r\nthat ldap: scheme URLs could make sense, since they refer to\r\npeople. Jim Whitehead stated that this is a tradeoff between\r\nfunctionality on client and on server; the current system requires the\r\nDAV server to sync with LDAP server (if using LDAP), while the ldap:\r\nscheme URLs require the client to access the LDAP server\r\ndirectly. A compromise suggested on the list was to define the ldap-URL\r\nproperty, which points to the principal's LDAP entry.</P>\r\n\r\n<P>Larry Masinter asked: are we permitting https:? Why are we using\r\nURLs, but not permitting all schemes?<BR>\r\nLisa Dusseault: if we don't support ldap: at all, are we\r\ngoing to need to duplicate LDAP functionality in DAV?<BR>\r\nGeoff: by having the DAV server do the mapping, we're exposing what we need (not\r\nmuch) without requiring the client to know LDAP.<BR>\r\nLisa: \"what we need\" will probably grow, so we should support ldap-URL, to\r\nmake sure we have an escape hatch. </P>\r\n\r\n<P>Larry: what are these URLs actually used for?<BR>\r\nEric: accessing data about principals via PROPFIND; e.g., making a picklist for composing\r\nan ACL.<BR>\r\nLarry: OK, and you can't do PROPFIND on an ldap: URL, so\r\nclients would have to support LDAP.<BR>\r\nGeoff: all we want from the principal is grouping, display name, and username (for, e.g.,\r\nDigest-Auth). <BR>\r\nJohn: can we require the DAV server to proxy for the\r\nldap: URLs? <BR>\r\nGeoff: but then we get about the same functionality as\r\nthe ldap-URL property.<BR>\r\nEric: we should get some implementation experience first; nobody's done this yet. <BR>\r\nLarry: maybe implementations should make it a config option? Different people will care differently about LDAP integration.</P>\r\n\r\n<P>Geoff: the person who\r\nproposed the ldap: property has agreed that the ldap-URL property\r\nwould meet his needs. <BR>\r\nLarry: This sounds odd -- what about other URL schemes\r\nwith similar uses?<BR>\r\nEric: I don't really see other such schemes being\r\ncommonly used; there's no good way to map between them.<BR>\r\nBabu S*: two issues; one is permitting LDAP integration, and the other is\r\npermitting everything-under-the-sun integration. <BR>\r\nJim Whitehead stated that he doesn't like the property idea; permitting ldap: URLs would be good enough.<BR>\r\nJohn: but what about LDAP schemas?<BR>\r\nLarry: so require that the schema contain certain properties.<BR>\r\nJohn: but, if we want to integrate with existing\r\ndirectories, that won't work.<BR>\r\nWalter Houser: tarpit. [missed some bits]<BR>\r\nGeoff: ldap: URLs have interop problems (require clients to implement\r\ntoo much); the ldap-URL property <EM>lets</EM> clients get at LDAP\r\ndata, but does not <EM>require</EM> them to do so. <BR>\r\nJimW: so that would let the DAV server be a gateway for just the DAV properties, but not\r\nblock the other information. How about alt-URL, with an alternate URL,\r\nwhich may be ldap:? <BR>\r\nGeoff: OK; but how about a list? <BR>\r\nEric: does 2518 permit non-http: URLs?<BR>\r\nGeoff: yes, but we should strike that.<BR>\r\nEric: Why do we want to limit it like that?<BR>\r\nGeoff: for interop; we put constraints on the protocol to improve interop by keeping it\r\nsimpler. <BR>\r\nEric: but the client treats the principal URL as\r\nnon-dereferenceable; why does it care what the scheme is? </P>\r\n\r\n<P>Walter: what are we trying to answer here?<BR> \r\nJimW put up two questions: \"should the URIs identifying principals be\r\nlimited to just http(s)?\" and \"should principal resources have an\r\noptional property 'alternateURL' that can point off to, e.g., an LDAP\r\naccessible network resource?\".<BR>\r\nLarry: wait a minute; 2518 says that the principal must be an HTTP resource. So, OK, the \"any scheme\" bit\r\nis a hole. <BR>\r\nGeoff: server-side, non-HTTP resources is more\r\nexpensive.<BR>\r\nEric: client-side, exposing it as an HTTP resource is\r\nsupposed to make it easier for the client; but it doesn't, because it\r\nrequires the client to use the DAV server as an LDAP gateway.<BR>\r\nGeoff: if we support non-HTTP, then the client may well not be able to get\r\nthose principals' data.<BR>\r\nEric: but the server isn't required to make\r\nthe principal resources respond to PROPFIND at all.<BR>\r\nGeoff: but, if it does expose the data, it's supposed to do it via PROPFIND.<BR>\r\nJimW: The worst-case with HTTP-only is not worse than the worst-case without;\r\nbut the best-case with is significantly better than best-case\r\nwithout. [dropped some bits] <BR>\r\nEric: we should note this as an open\r\nissue. <BR>\r\nGeoff: at a minimum, we need to fix the inconsistency in 2518\r\n(\"it's an HTTP resource\" and \"it may be any scheme\"). </P>\r\n\r\n<P>JimW next tries to get a sense of the room on these\r\ntwo questions. Larry says the first one strongly depends on context,\r\non how the spec gets written. JimW rewrites the question for clarity:\r\n\"What URI schemes should be allowed for identifying principals?\" Options\r\nlisted:\r\n<UL>\r\n<LI>http(s) only, or a URL that identifies a WebDAV principal\r\nresource\r\n<LI>limited set (http(s), ldap(s))\r\n<LI>http(s) and others explicitly defined by additional specs (the first option was eventually merged into this one, since additional specs can always be written)\r\n<LI>anything\r\n</UL></P>\r\n\r\n<P>Chris Kaler: how about making it an opaque URL,\r\nand publishing Informational RFCs for how to work with different\r\nschemes?<BR>\r\nJohn: but we should really have some minimal set, that\r\nclients can use.<BR>\r\nLisa: There must be some base level of capability that clients can\r\nrely on, without having to implement various approaches for various\r\nservers.<BR>\r\nEric: how about this: use anything, but servers SHOULD use\r\nhttp(s), which is a privileged scheme that points to resources that\r\nSHOULD have additional properties (JimW added this to the list of\r\noptions for the current question).<BR>\r\nEric states that he does not want to make the DAV server replicate data from the LDAP\r\nserver.<BR>\r\nJohn: but, if you're using LDAP for authentication, then\r\nyou're doing that to some extent anyway.<BR>\r\nLarry: what if you're using mailto: for principal URLs?<BR>\r\nEric: why would you do that?<BR>\r\nLisa: mailto: URLs are commonly used for Web services, so that you\r\nhave a single, verifiable, user ID across services.<BR>\r\nChris: what about privacy issues of exposing the user's real\r\nname?<BR>\r\nGeoff: well, but you can use access control (or just not expose\r\nthe data).<BR>\r\nEric: if you don't have the properties, then there's not\r\nmuch point in making it an http: URL.<BR>\r\nGeoff: agreed, so the second SHOULD is OK.</P>\r\n\r\n<P>Larry: so what are these properties used for, anyway?\r\nGeoff: well, they're used for display in the GUI; they might be\r\nuseful.<BR>\r\nLarry: what about auth ID, though? How is it tied to auth\r\nschemes?<BR>\r\nNobody can really remember a good reason to have it.<BR>\r\nJimW: OK, so it seems like we have provisional sentiment to strike it. <BR>\r\nEric: but what harm does it do? Nice for something like Unix's <CODE>ls\r\n-l</CODE>.<BR>\r\nGeoff: it's a potential security weakness (makes it easier\r\nto mount a dictionary attack), recorded as such in our security\r\nconsiderations; removing it would solve that.<BR>\r\nJohn: maybe we did want it for something like <CODE>ls -l</CODE>,\r\nwhere the username is the only way to find a user in the directory; if\r\nwe have the alternateURL property, then we've got that.<BR>\r\nGeoff and JimW: agree.<BR>\r\nLarry: doesn't want to reach conclusion yet; we should go\r\nback and look at how clients actually use this stuff. </P>\r\n\r\n<P>JimW recording: provisionally (subject to the consensus\r\nof the list), we can eliminate the authentication-id property. The\r\nalternateURL property can cover many of the use cases envisioned for\r\nauthentication-id, and is safer. However, we should look for more use\r\ncases. </P> \r\n\r\n<P>JimW recording: provisionally, the answer to the \"what\r\nURL schemes are permitted\" is \"use anything, but servers SHOULD use\r\nhttp(s), which is a privileged scheme that points to resources that\r\nSHOULD have additional properties\". </P> \r\n\r\n<P>JimW recording: sense of the\r\nroom: we should have an alternateURL property.  Babu: we seem to be\r\nusing the terms interoperability and dependencies, and they're\r\nprobably interchangeable (inversely). </P> \r\n\r\n<P>Larry raised a general plea: he was sent with the mission to ask\r\nthat WebDAV and DeltaV and other specs do a better job than they do\r\nnow of dealing with interactions and failure cases. There are too many\r\ncases where there are options whose purposes aren't well specified,\r\nand people who guess differently run into trouble. The alternateURL\r\nproperty is an example; what alternate information does it point to?\r\nEric replied that we could put in better use cases; some were removed\r\nto keep the text pure, but the result is less clarity. Maybe there\r\nshould be a companion document describing these use cases. Geoff added\r\nthat there were problems with use cases in 2518, with people reading\r\nuse-case text as normative. Putting it in a clearly non-normative\r\ncompanion document would help with this problem. Larry stated that\r\nexplanatory text is not as good as making the normative text more\r\nprecise, and Geoff agreed.</P>\r\n\r\n<P>JimW recorded the need to provide information in the specification\r\non how a client might use the alternateURL, and what kind of schemes\r\nmight be used. </P>\r\n\r\n<P><B>MAY/SHOULD/MUST ACL properties be returned by an\r\nallprop PROPIND? (None, some, all?)</B></P>\r\n\r\n<P>The view on list is that PROPFIND allprop MUST NOT return any ACL\r\nproperties, since PROPFIND allprop is already too expensive, since the\r\nserver has to compute all the live properties, and \"current user\r\nprivs\" is very expensive to compute. No one in the room\r\ndisagreed.</P>\r\n\r\n<P>Chris asked, how about striking allprop altogether?  Lisa replied\r\nthat it is too late, since there is at least one client that depends\r\non it.  Eric noted that it is useful for copying resources from server\r\nto server. Geoff replied that a client can use propname to list all\r\nthe names, then retrieve all properties explicitly by name. JimW noted\r\nthat it might be possible to deprecate it in going to Draft Standard,\r\nthen strike it when going from Draft Standard to Standard; but we need\r\nto look into it better. Didn't someone on the list give a rousing\r\ndefense of allprop?  Geoff replied, yes, but it was because he used\r\nit, not because it was the only way; a slow transition wouldn't be so\r\nhard on him. At a minimum, we can make sure that new specifications\r\nstate that their new live properties do not come back from\r\nallprop. Larry warned the group to be wary about transitions. Geoff\r\nadded that, maybe, when deprecated, it can go down to \"all dead\r\nproperties\". There was some discussion on performance reasons not to\r\nhave PROPFIND return live properties. Larry notes that the performance\r\nhit only occurs when PROPFIND allprop is used, and, if it's used, it's\r\nbecause people want the functionality, and workarounds may be less\r\nefficient. Room seems tentatively pleased with limiting PROPFIND\r\nallprop to return only dead properties.</P>\r\n\r\n<P><B>What is the purpose of the DAV:isprincipal property?</B></P>\r\n\r\n<P>This issue was raised by Larry Masinter. JimW noted that this is a\r\nworkaround for the preferred way of expressing this information, which\r\nis in the DAV:resourcetype property. However, one early implementation\r\n(MS WebFolders) considers anything with a non-empty resourcetype to be\r\na collection, and displays them as collections in the Web Folders\r\nUI. Geoff Clemm noted that a principal collection (a group?) is both a\r\ncollection and a principal. Larry then noted that WebFolders won't\r\ndisplay the correct icon anyway, since at present it will make a\r\nprincipal look like a document. Geoff replied that if a principal\r\nlooks like a folder in the UI users will think they can add members to\r\nit. There was a brief discussion over what a GET to a principal URL\r\nreturns; conclusion seems to be that we don't have any particular\r\nreason to define it. There was agreement to explicitly note in the ACL\r\nspecification that GET on a principal resource is intentionally\r\nundefined.</P>\r\n\r\n<P>Eric: since we have different types that can be mixed together\r\n(e.g., collection, principal, versioned), maybe we <EM>should</EM> be\r\nusing properties like DAV:isprincipal. These types aren't unitary\r\ntypes; they're interfaces implemented by the resources. Discussion on\r\nwhich way is best. Larry stated that it's a moral argument; either\r\npunish the bad implementation or write the specification around\r\nit. Geoff noted that what they did wasn't so terrible, after all. JimW\r\nrecorded the (weak) sense of the room to leave the DAV:isprincipal\r\nproperty in place.</P>\r\n\r\n<H2>Reviving DASL</H2> \r\n\r\n<P>There was a brief discussion on reviving the DAV Searching and Locating (DASL) protocol specification, which currently is in Internet-Draft form, and is not currently being worked on.</P>\r\n\r\n<P>JimW asked: </P> \r\n<UL>\r\n  <LI>Who is interested in seeing it completed? Couple of people raised hands. \r\n\r\n  <LI>When should it be completed? <BR> Larry noted that the people\r\n  who want it are some of the same people who are working on ACLs and\r\n  improved status reporting; let's not delay those. Eric added that\r\n  there might be synergy with XML Query (XML Query does searching;\r\n  DASL would limit it to particular directories, for example), so we\r\n  should at least let XML Query people know DASL is coming. Lisa\r\n  stated that XML Query isn't so great for searching properties (as\r\n  DASL was focused on). Xythos has implemented it; what were the\r\n  problems that held back the spec? JimW said that the biggest one was\r\n  I18N (e.g., sorting, string matching); somebody needs to look at it\r\n  in that light.  Might be able to refer to Unicode docs. Larry\r\n  suggested that one path forward is to publish the existing DASL\r\n  protocol specification as Experimental (with the added note that\r\n  Xythos has implemented), so that people can try it; when we get time\r\n  to work on it, then there'll be more experience with it. The sense\r\n  of the room agreed that this was a good approach.\r\n\r\n  <LI>Who is willing to work on it? This question was not asked after\r\n  all.\r\n</UL>\r\n\r\n<H2>Moving 2518 to Draft status</H2>\r\n\r\n<P>Four-part process: </P>\r\n<UL>\r\n    <LI>Resolve issue list items on mailing list \r\n    <UL>\r\n       <LI>Goal: handle 2/week \r\n       <LI>Document solutions with pros/cons \r\n    </UL>\r\n    <LI>Hold face-to-face interoperability b*ke-off \r\n    <UL>\r\n       <LI>Flush out new issues \r\n       <LI>Develop test plan doc on mailing list \r\n       <LI>Aim for late May/early June.\r\n    </UL>\r\n\r\n  <LI>Develop an online form to gather initial implementation and testing data \r\n  <UL>\r\n    <LI>Used successfully for HTTP/1.1 \r\n    <LI>Can be done before the b*ke-off </LI></UL>\r\n\r\n  <LI>Create a farm of significant server implementations for ongoing interop \r\n  testing \r\n  <UL>\r\n    <LI>JimW can host and administer machines at UC Santa Cruz, but cannot \r\n    afford the machines/software. (Easier to put machines on open Internet at \r\n    university than in most companies.) Probably not beta software, though. \r\n    <LI>Donations needed. </LI></UL></LI></UL>\r\n\r\n<P>Walter asked whether it would it be useful for potential customers\r\nto get the results of this testing? Larry noted that there are two\r\ntypes of interop events. The first kind is closed, usually with\r\nprerelease products, to get the products enhanced to be interoperable;\r\nthe second is interoperability demos at trade shows, once the vendors\r\nknow the results are good. We need the first before we can do the\r\nsecond. Survey of the room: 4-5 people interested in attending the\r\nb*ke-off. </P>\r\n\r\n<H2>Advanced Status Reporting (ASR)</H2>\r\n\r\n<P>Lisa Dusseault next led a discussion on advanced status reporting\r\nwithin WebDAV.  Lisa asked who has read the advanced status reporting\r\nI-D? No hand raised. Lisa then stated, \"Don't worry about it; it\r\nhasn't changed significantly from the proposal, which people liked.\"\r\nLarry noted (looking at the draft on his laptop) that the\r\nAccept-Error: header looks like a general HTTP extension, and Lisa\r\nagreed.  Larry then stated that \"Accept-Error: text/xml\" isn't\r\nactually generic XML; it implies this specification's XML DTD. Maybe\r\nit should be text/xml-rfcXXXX, or some such, so that some future Even\r\nMore Advanced Status Reporting can define its own format. Lisa replied\r\nthat, really, the spec is open, it just has to have a particular root\r\nelement. Geoff added that it would be pretty nasty to wind up creating\r\na new namespace of error type specs.  Eric suggested that we define an\r\nXML namespace URI for this version.</P>\r\n\r\n<P>JimW: why not just always send the ASR?<BR>\r\nJohn: but then the existing clients don't have HTML to show to the user.<BR>\r\nJimW: how about putting it in a header?<BR>\r\nLisa: not enough information.<BR>\r\nJimW: what is the goal? Improve the message to the user, or enable better machine-comprehensible error handling? He says it's more for the user; e.g., 423 Locked can give\r\nmore information on what was locked and how.<BR>\r\nGeoff: machine-comprehensible error handling does improve the message to the\r\nuser.<BR>\r\nLisa: the server could already send a more detailed HTML\r\nmessage to the user; structuring it makes it possible for the UI to\r\nassist the user in dealing with the error.<BR>\r\nLarry: how about embedding XML in HTML?<BR>\r\nLisa: lots of people said that was too messy.<BR>\r\nLarry: how about multipart/alternative?<BR>\r\nLisa: was considered, but bandwidth costs.<BR>\r\nLarry: servers also have to worry about CPU cost of computing\r\nthe response.<BR>\r\nLisa: but servers aren't likely to implement ASR at all\r\nunless they know the clients are asking for it. More discussion.<BR>\r\nJimW: Accept-Error: means bandwidth costs, too, on every request.<BR>\r\nLarry: investigate: can browsers accept multipart/alternative anyway? </P>\r\n\r\n<P>JimW: maybe we should narrow this down; add it to base WebDAV (for\r\nbetter interoperability), but not expose it for general HTTP. Or even\r\njust improve the specification of error cases, not necessarily bundle\r\nup all the data into XML.</P>\r\n\r\n<P>*** Meeting adjourned ***</P>\r\n\r\n</BODY>\r\n</HTML>\r\n", "encoding": "ascii"}