{"url": "https://www.ics.uci.edu/~kay/courses/i41/hw/hw1.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Monday, September 26, 2005 7:04 PM\" />\n<TITLE>First Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2EFEE79\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/i41/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.code {\n\tfont-size: x-small;\n\tfont-family: \"Goudy Old Style\";\n}\n.style2 {font-family: \"Goudy Old Style\"}\n.style5 {\n\tfont-family: \"Courier New\";\n\tfont-size: 9pt;\n}\n-->\n</style></HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT size=\"2\" FACE=\"Goudy Old Style\">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\" SIZE=6><B>First Homework </B></FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\">This homework assignment is due at the start of lab on\n  Monday, September 26. Your TA will come around and check you off (at 2:00, for the early section). </FONT></P>\n<P> <font face=\"Goudy Old Style\">The second homework assignment will be available on\nthe web by next Friday and will be due the following Monday at the start of lab; we&#39;ll follow\nthat pattern all quarter.  The URL for the assignments is </font><font face=\"Courier New\"><a href=\"http://www.ics.uci.edu/~kay/courses/i41/hw\"><code>http://www.ics.uci.edu/~kay/courses/i41/hw</code></a></font><font face=\"Goudy Old Style\">;\nwe won&#39;t distribute printed copies of the subsequent assignments (unless,\nafter a couple of weeks, there&#39;s a great clamor for them).</font></P>\n<P><font face=\"Goudy Old Style\">Our homework assignments will include the reading in the textbook and some exercises for you to try out as you read. People learn best when they apply what they read as they go, so it's best to read the book with a computer at hand so you can type things in and try them out. There's always a big gap between thinking you understand something you read and actually being able to apply it. We expect these exercises to go quickly, but if you find yourself spending more than a couple of minutes on an exercise without making any progress, you should ask us (or a classmate) about it rather than continuing to spin your wheels unproductively. Note that this also means you should get started early, so that you'll have the time to get any questions answered.</font></P>\n<P><font face=\"Goudy Old Style\">The homework asssignments don't carry much weight in the course grade (though the lab assignments do). The point is to get you started with the next week's concepts. Thus, it's not a big deal if you don't have answers to every exercise on the homework, so long as you have <em>questions</em> about the ones you can't answer. In fact, we'd expect that if you run into a problem, you'll ask a classmate or send a question to <code>i41@uci.edu</code> even before Monday's lab.</font></P>\n<P><font face=\"Goudy Old Style\">You should also expect to find, especially after a week or two, that when you have the right answer you'll know that it's right. (Of course, having a computer to check it will help, but you will probably observe this even before you check it on the machine. This makes a contrast from the usual experience with other popular programming languages,\n  where &quot;Click &#39;Run&#39; and cross your fingers&quot; is the way people often work.)</font></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(1)</B>  Do everything on the course syllabus\nunder the heading, &quot;What to do this week to get started in Informatics\n41.&quot;  This includes registering yourself at </FONT><FONT FACE=\"Courier New\" SIZE=2><a href=\"http://checkmate.ics.uci.edu/\">checkmate.ics.uci.edu</a></FONT><FONT FACE=\"Goudy Old Style\">,\nfilling out the questionnaire at </FONT><a href=\"http://eee.uci.edu/survey/i41.f11.q\" class=\"style5\"><code>http://eee.uci.edu/survey/i41.f11.q</code></a><FONT FACE=\"Goudy Old Style\">, and turning in your photo.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(2)</B> Read through <a href=\"http://www.ics.uci.edu/~kay/courses/i41/hw/lab0.html\">Lab Assignment 0</a> before you come to lab on Friday just to get an idea of what you'll be doing with your partner. </FONT></P>\n<!--<P><FONT FACE=\"Goudy Old Style\"><b>(3)</b> At the textbook&#39;s web site, </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.htdp.org\">http://www.htdp.org</A></FONT><FONT FACE=\"Goudy Old Style\">,\n  locate the DrScheme Companion.  This on-line handbook is organized into\n  sections that run in parallel with the text.  It explains how to use DrScheme\n  as you work through the book, providing details about Scheme or the DrScheme\n  environment at the point where they&#39;re needed.  As you do the computer-based\n  exercises, you may want to have the DrScheme companion available to consult.\n  Thus, for this week you should start with the DrScheme Setup section and\n  read the parts that apply to you.  Even if you&#39;re not planning to install\n  DrScheme on a machine of your own, read the Preparing DrScheme section;\n  it may save you some hassles in the lab (where others will use the same\n  machine and may change the settings). If you do download DrScheme for your own machine, be sure to install the current version, Version 371.</FONT></P>\n -->\n<P>\n<FONT FACE=\"Goudy Old Style\"><b>(3)</b> We encourage you to talk with\neach other and help each other understand how to do the assignments.  There\nare some limits, though; in particular, remember that knowing <em>how</em> to do it (when the quiz comes, for example) is much more important than just putting down the answer.  If you haven&#39;t already, read the guidelines\nfor collaboration and independent work at </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/courses/i41/hw/collab.html\">http://www.ics.uci.edu/~kay/courses/i41/hw/collab.html</A></FONT><font face=\"Goudy Old Style\">. You may also wish to read some general advice (at </font><a href=\"http://www.ics.uci.edu/~kay/college.html\"><code>http://www.ics.uci.edu/~kay/college.html</code></a><font face=\"Goudy Old Style\">) about how to approach college work; the practices that served you well in secondary school don't all work here.</font></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(4)</B> If you haven&#39;t already, read\nthe <A HREF=\"http://www.ics.uci.edu/~kay/courses/h21/hw/pair.html\">guidelines for pair programming</A>\nat </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/courses/i41/hw/pair.html\">http://www.ics.uci.edu/~kay/courses/i41/hw/pair.html</A></FONT><font face=\"Goudy Old Style\">. This describes how you will be doing all your work in the lab. Pair programming is not a simple as just working together; there are specific roles and specific things each person needs to do. </font></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(5)</B>  Read Chapters 0 through 5 of the <em>Picturing Programs</em> textbook (PP). In most chapters, there are exercises designated &quot;Worked Exercise.&quot; The author uses these to introduce some new concepts in the context of an actual problem. Thus, you shouldn't just glance over them quickly; you should try to follow along closely and, at least sometimes, work along with the book, typing and running the solutions in DrRacket.  It's not enough just to glance over the solution and say, &quot;Yeah, I guess that makes sense.&quot;</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(5.1)</B> In Chapter 1, write an answer to exercises 1.5.2,  typing it into the definitions window of DrRacket and then running them, of course, to make sure your solution works). Remember that you need to click Run to get DrRacket to evaluate the Picturing Programs teachpack; that happens automatically when you type code in the definitions window, but if you're just typing simple expressions in the interactions window, you still need to click Run that one first time at the start of your session. Also write an answer to exercise 1.8.9, which it's easiest to do on paper.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(5.2)</B> In Chapter 2,  answer exercises 2.1.3 and 2.4.3 (which it's easiest to do on paper).</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(5.3)</B> In Chapter 3, answer exercise 3.4.4.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(5.4)</B> In English, there's more than one way to say the same thing. &quot;The teacher kicked the chalk&quot; means the same as &quot;The chalk was kicked by the teacher&quot; (even though you can get picky about the stylistic nuances of the passive voice). The ability to <strong>paraphrase</strong>, to say the same thing in different ways, is common in <strong>natural languages</strong> (human languages). It's also common in programming languages.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Chapter 4 introduces function definitions\u00e2\u20ac\u201dthe fundamental way we &quot;teach&quot; the computer new tricks. You'll notice that in class we use one way of defining functions (called &quot;MIT style,&quot; with <code>lambda)</code> while the textbook uses another way (called &quot;Indiana style&quot;). They both do the same thing; you'll see both ways in this course; you may use either way (though if you don't have a strong preference, use the MIT style because it will make some things easier later on).</FONT></P>\n<P><font face=\"Goudy Old Style\">The MIT style looks like this:</font></P>\n<pre><code>(define double    ; Define double as (lambda (n) (* 2 n)), that is, as a function \n  (lambda (n)     ; that takes one argument, n, and returns (* 2 n).\n    (* 2 n)))</code></pre>\n<P><FONT FACE=\"Goudy Old Style\"> The Indiana style looks like this:</FONT></P>\n<pre><code>(define (double n)  ; Define a function double that takes one argument, n,\n  (* 2 n))          ; and returns (* 2 n)</code></pre>\n<P> <FONT FACE=\"Goudy Old Style\">The MIT style uses the same <code>define</code> syntax we already know, <code>(define </code><em>name value</em><code>)</code>; it's just that the <em>value</em> here is a function, a <code>lambda</code> expression. The Indiana style adds a second syntax for <code>define</code>: <code>(define (</code><em>name parameter1 parameter2</em> ...<code>) </code><em>expression</em><code>)</code> to go along with the original form of <code>define</code> we still use for variables.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"> Do the two exercises listed below for this chapter; after that, you may skip down to item <strong>(5.5)</strong>, but if you'd like more details about MIT and Indiana style, read the rest of this section.</FONT></P>\n<P><font face=\"Goudy Old Style\">MIT and the University of Indiana are two places that have done a lot of work on Scheme over the years. Scheme was invented at MIT, in fact (based on the language Lisp, which was also invented at MIT in 1958 by John McCarthy; Lisp, in turn, was based on a kind of logic called the <strong>lambda calculus</strong>, a logic that described the behavior of functions, invented by the logician Alonzo Church). In Lisp and Scheme, it is much easier to create and manipulate functions than it is in most programming languages. A function can be treated as a piece of data in a Scheme program, just like a number or an image or a string. The Scheme term we use when we're building or describing functions is <code>lambda</code>. (This comes from Alonzo Church. If Greek letters bother you, just think of it as the Greek word for &quot;function.&quot; It's not, but it doesn't hurt to think of it that way.)</font></P>\n<P><FONT FACE=\"Goudy Old Style\">Do exercise 4.2.1 (in both MIT style and Indiana style, varying the function name in the second case so you can have both definitions in the same file).</FONT></P>\n<P><font face=\"Goudy Old Style\">On pages 62 and 63, the textbook gives syntax rules that include a description of the Indiana style for defining functions. Rules 4 and 5 each give a different syntax  for using <code>define</code>. For the MIT style, Rule 4 remains unchanged as the only rule for <code>define</code>. Rule 5 would would just describe a <code>lambda</code> expression as another kind of legal expression, like this:</font></P>\n<P><font face=\"Goudy Old Style\">Syntax Rule 5-MIT: <em>A left parenthesis followed by the word <code><strong>lambda</strong></code>, a left parenthesis, one or more identifiers, a right parenthesis, a legal expression, and another right parenthesis is a legal expression. Think of it as matching the pattern </em><code>(lambda (</code><em>identifier ...</em><code>) </code><em>expression</em><code>)</code></font></P>\n<P><FONT FACE=\"Goudy Old Style\"><em>This sort of lambda expression's value is a function that takes as many parameters as there are identifiers. Those names can appear inside the expression as though they were defined variables; the funciton will return the value of the expression.</em></FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">The MIT style makes the explicit point that functions in Scheme are &quot;first-class objects,&quot; values that can be handled just like numbers or strings or images. We'll see some implications of this in a few weeks.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Do exercise 4.6.2 in both styles (on paper).</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(5.5)</B> In Chapter 5, do exercise 5.3.2. Note that it just asks for a contract and purpose statement; we don't know enough Scheme yet to write the actual function.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(5.6)</B> Just skim Chapter 6 for now. It describes how to set up animations. It's fun to build animations, but they need more complicated set-up than conventional functions in DrRacket's interactions window. Despite the additional details, the underlying programming principles are the same in both contexts. We will do some animations in the lab assignments, but we won't emphasize them on the quizzes or final. Anything we ask about them won't require you to memorize the details; we'll provide whatever reference material is necessary. We also have a <a href=\"http://www.ics.uci.edu/~kay/courses/i41/PPreference.pdf\">reference sheet</a> on these operations that you may find useful.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(6)</B> Look at sections A, B, and C of the <a href=\"http://www.ics.uci.edu/~kay/scheme/finger.html\">Scheme Finger Exercises</a>.  If you're absolutely sure you know how to do them, you don't have to write the answers down or turn them in. But if you're still feeling a little uncertain, working through them will help build your ability.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(7)</B> We have posted <a href=\"http://www.ics.uci.edu/~kay/courses/i41/video/index.html\">a group of short videos</a>  that cover various helpful background information. We'll expect you to watch them over the next week or so; the information could show up on quizzes. </FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(8)</B> Read through <a href=\"http://www.ics.uci.edu/~kay/courses/i41/hw/lab1.html\">Lab Assignment 1</a> before lab on Monday, so you have an idea of what's coming.</FONT><FONT FACE=\"Goudy Old Style\"> You should take a minute to consult the DrRacket Help Desk from the Help\n  menu; it will be useful all quarter long. Enter &quot;Picturing Programs&quot; in the search box and skim the documentation for the Picturing Programs teachpack. This kind of documentation describes an <b>API,</b> an application\n  programming interface; an API is a library of functions that someone has added,\n  a toolkit we can use for some task. (Don't try to learn or memorize this page; just get an overview of what's there. We'll introduce the necessary features as we go along.) Also follow the &quot;image teachpack&quot; link and scan that API.\n</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>What to turn in:</B> Most of these items you just need to do on your own. At the start of lab on Monday, show the TA your solutions to the exercises in part <strong>(5)</strong> above (or let him know where you had difficulty).</FONT></P>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21 and H22 assignments\nby David G. Kay from Fall 2003 and earlier; modified by David G. Kay for\nthe Informatics Core Course, Fall 2004&ndash;Fall 2008 (with Alex Thornton in Fall 2006 and Richard Pattis in Fall 2008). Modified for Picturing Programs by David G. Kay iin Fall 2010.</FONT></P>\n<HR />\n  <span class=\"style2\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <A HREF=\"mailto:kay@uci.edu\">kay@uci.edu</A></span><A HREF=\"mailto:kay@uci.edu\"><span class=\"style2\"><br />\n  </span></A><span class=\"style2\"><span class=\"code\">\n  <!-- #BeginDate format:fcAm1a -->Saturday, September 24, 2011 5:42 PM<!-- #EndDate -->\n  </span><BR />\n</span></BODY>\n</HTML>\n", "encoding": "Windows-1252"}