{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/lab1.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Friday, October 7, 2005 6:25 PM\" />\n<TITLE>Lab Assignment 1</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2DE447E\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2005 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/h21/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style1 {font-family: \"Courier New\", Courier, monospace}\n.style3 {font-size: 10pt}\n.style4 {font-size: 10pt; font-family: \"Courier New\", Courier, monospace; }\n.style8 {font-family: Garamond}\n-->\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY  &bull; FALL 2009</font></P>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Lab Assignment 1</B></FONT><BR />\n</P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>This assignment is due at the end of lab on\nFriday, October 2.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Choose a partner for this assignment, someone\nyou haven&#39;t worked with already, and make sure the TA knows who your partner is.<A NAME=\"_14_2588\"></A></FONT></P>\n<P><font face=\"Garamond\" size=\"4\"><b>(a)</b> With your partner, do these exercises\n  from HtDP:  2.1.1; 2.2.1 and 2.2.3 (these may require knowledge about a particular &quot;problem domain;&quot; of course the web is the most convenient\n  source for that information); 2.2.5; 2.3.1, and\n2.3.3.</font></P>\n<p> <font face=\"Garamond\" size=\"4\">You should be able to place all the definitions\n  and tests into one definitions file.  Include your name and your partner&#39;s,\nsave the file, and submit it via Checkmate.</font></p>\n<p> <font face=\"Garamond\" size=\"4\"><b>(b)</b> With your partner, do exercises\n2.4.1 through 2.4.4.  There&#39;s nothing to turn in for this part, but it's still important that you have the experience of looking at error messages. </font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c)</strong> For this part, you will use a teachpack called <a href=\"http://web.cs.wpi.edu/~kfisler/Courses/TeachScheme/Fabric/4.2/fabric-teachpack.scm\">fabric-teachpack.scm</a>.  (Download the file and save it as a file on your machine; in DrScheme's Language menu, choose Add Teachpack and click Add Teachpack to List; find and select the file you saved; click OK; then click Run.)\n</font></p>\n<p><font face=\"Garamond\" size=\"4\">This teachpack comes with <a href=\"http://web.cs.wpi.edu/~kfisler/Courses/TeachScheme/Fabric/370/fabric-teachpack-docs.txt\">documentation</a>; skim it to get an idea of what it provides and refer back to it as necessary. (The conventional terms for a teachpack&mdash;extra functions for a particular task that aren't part of the programming language to begin with&mdash;are <strong>library</strong> or <strong>API</strong> (application programming interface) or <strong>SDK</strong> (software developer's kit).)</font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c.1) </strong>Familiarize yourself with the images and functions in the\n  teachpack.  Enter the names of the images one at a time in the\n  interactions window.  Try the functions that create fabric images\n  (</font><font size=\"4\"><span class=\"style4\">create-solid-fabric</span></font><font face=\"Garamond\" size=\"4\">, <span class=\"style4\">add-print</span>, <span class=\"style4\">add-horiz-stripe</span>, and\n  <span class=\"style4\">add-vertical-stripe</span>) to see what each one does.</font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c.2)</strong> Write an expression to create blue fabric with red stripes in one\n  direction and purple stripes in the other (you pick the size).</font></p>\n<p><font face=\"Garamond\" size=\"4\">(Here are some more detailed steps, if you'd like them:  First, write an expression to create a blue fabric of some size.  Click Run to test it.  Then create a blue fabric with red stripes, let's say horizontally; do this by calling <span class=\"style4\">add-horiz-stripe</span> with your blue-fabric expression as its third argument.  That is, copy your blue-fabric expression as the third argument at the end of your <span class=\"style4\">add-horiz-stripe</span> expression. This last part is key:  We can use the result of one expression as an argument to another expression, as we saw with <span class=\"style4\">(+ 1 (* 3 5))</span>, and that's how we create more complex, interesting results.  Click Run to see this red-stripe fabric.  Finally, to add the purple stripes, let's say vertically, call <span class=\"style4\">add-vertical-stripe</span> with your whole red-stripe-fabric expression as its third argument.  \"Nesting\" the calls to functions in this way will be basic to everything we do this term.  You'll find that if you hit the Return key before each new function call, DrScheme will indent your program to make it more readable.)\n  \n  Keep this expression in the definitions (top) window and add the subsequent expressions to the same window; you can save them to turn in.</font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c.3)</strong> Write an expression to create a small green stripe fabric with a\n  chili print on it (you pick the size).</font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c.4)</strong> Invent two fabrics of your own using the teachpack functions.</font></p>\n<p><font face=\"Garamond\" size=\"4\"> One way to do this is to find images anywhere (on your computer, on the web) and import the image files into your definitions, using Insert Image from the Special menu. You can also construct your own images using the circle, rectangle, and other operators from the teachpack called image.ss. This teachpack is included in the fabric teachpack; for documentation of the image.ss teachpack, use the DrScheme Help Desk (in the Help menu) and click Teachpacks. Note that the reference material there will contain some ideas and information that's unfamiliar to you so far. That's okay; reference material concentrates on conveying a lot of information, not on giving long explanations. You should just look through the document for the names of some image-creating functions and experiment with them.\n  \n  </font></p>\n<p><font face=\"Garamond\" size=\"4\">Each fabric you design should involve at least two calls to functions that create fabrics. Be creative!</font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c.5)</strong> If you overlay a fabric on top of a clothing image (like tshirt or hat), you can see what the fabric might look like on the clothing.  The <span class=\"style4\">overlay</span> function from the image teachpack does this.  The fabric and the clothing image should be the same size; you can find out the size of an image using the <span class=\"style4\">image-width</span> and <span class=\"style4\">image-height</span> functions, also described in the image teachpack documentation.\n  \n  Write a function <span class=\"style4\">create-from-fabric</span> that consumes an image for a\n  white clothing item (like the tshirt or hat) and a fabric image sized\n  to fit that item, and produces an image of the clothing item in the\n  given fabric.</font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c.6) </strong>Write a function <span class=\"style4\">add-center-logo</span> that consumes an image for a logo\n  and an image for a clothing item and produces an image of the clothing\n  item with the logo centered on it.  The given clothing item may\n  already be printed in fabric.</font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c.7) </strong>Write a function <span class=\"style4\">stack-logos</span> that consumes images of two logos and\n  returns an image with the first logo just above the second logo. You\n  do not need to center the logos, but you may if you wish. (Hint:  Check the image teachpack documentation for <span class=\"style4\">overlay/xy</span> and <span class=\"style4\">image-height</span>.)</font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c.8) </strong>Write a function <span class=\"style4\">side-by-side-logos</span> that consumes images of two\n  logos and returns an image with the first logo to the left of the\n  second logo. You do not need to center the logos, but you may if you\n  wish.</font></p>\n<p><font face=\"Garamond\" size=\"4\"><strong>(c.9) </strong>Define three pieces of clothing using a combination of the\n  teachpack functions and your definitions.  You should use each of the\n  functions you defined at least once.  Again, be creative!</font></p>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d)</B> The universe.ss teachpack provides\nsome functions that let you animate images.  Clear the fabric teachpack, then add the universe.ss teachpack and click Run.</FONT></P>\n<P><font size=\"4\" face=\"Garamond\">Animating images can be a lot of fun, and the universe.ss setup makes it relatively simple. Even so, there's more to think about than when you're just dealing with text.  The information you need is all here, but like much technical material, you may need to read through it carefully, more than once.</font></P>\n<P>\n  <FONT FACE=\"Garamond\" SIZE=4>When we use this teachpack, we create a world\n    that might change at every tick of the clock.  We (re)display the (changed)\nworld at every tick; that gives us the animation.</FONT> <span class=\"style8\">To set this up, the universe.ss teachpack provides us the function </span><span class=\"style4\">big-bang</span><span class=\"style8\"> to start the animation off. E</span><span class=\"style8\">very universe.ss animation will end with four lines like this:</span></P>\n<pre><span class=\"style1\">(big-bang  (make-world 1 1) ; Start the whole thing going with an initial world.\n                            ; In this case our world holds two numbers---two 1s\n                            ; to start with (more on what that means later) \n  (on-tick world-next)      ; Tell it to call world-next at each tick of the clock\n  (on-draw world-draw)      ; Tell it to call world-draw at each tick to redraw the scene\n  (stop-when are-we-done?)) ; Tell it to call are-we-done? to check if we're done\n</span></pre>\n<P><FONT FACE=\"Garamond\" SIZE=4>The </FONT><FONT FACE=\"Garamond\" SIZE=4><span class=\"style8\"> <span class=\"style4\"> big-bang </span></span>expression contains four clauses: an expression (in this case, one that constructs a new world structure containing two ones), <span class=\"style8\"><span class=\"style4\">on-tick </span> (to say what function will change the world every time the clock ticks), </span><span class=\"style4\">on-draw</span><span class=\"style8\"> (to say what function will redraw the scene every time the clock ticks), and </span><span class=\"style4\">stop-when</span><span class=\"style8\"> (to say what function will check at each tick whether we're finished).</span></FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4> In this case, we have to define what a world is (from the above, we can tell it is a structure that contains two numbers, so we have to define that structure) and we have to provide definitions for the functions</FONT> <font face=\"Goudy Old Style\"><span class=\"style4\">world-draw</span></font><FONT FACE=\"Garamond\" SIZE=4>,  </FONT><font face=\"Goudy Old Style\"><span class=\"style4\">world-next</span></font><FONT FACE=\"Garamond\" SIZE=4>, and  </FONT><font face=\"Goudy Old Style\"><span class=\"style4\">are-we-done?</span></font><FONT FACE=\"Garamond\" SIZE=4>.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>Let&#39;s imagine a very simple world, one\n  that has a falling rock and a flying bird.  To make it even simpler, the\n  rock will be a 10-pixel brown circle and the bird will be a 10-pixel yellow\n  square.  Not only that, but the rock will fall straight down, 5 pixels at\n  every clock tick, and the bird flies straight from left to right at the\n  same rate.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>In terms of our animation, what needs to change\nin this world?  Really, just two things:  the horizontal position of the\nbird and the vertical position of the rock.  The background scene, the bird&#39;s image\nand its height, and the rock&#39;s image and its horizontal position, all\nstay constant.  We need to draw them as part of the overall scene, but when we define a world to use\nwith this teachpack, we only need the world to represent the aspects that\nmight change from time to time.  In this case, that&#39;s just two numbers:\n the x-coordinate (horizontal position) of the bird and the y-coordinate\n(vertical position) of the rock.  So let&#39;s define a structure to represent\nour world:</FONT></P>\n\n<pre class=\"style1\">\n(define-struct world (birds-x rocks-y))\n  ;; A world is (make-world Number Number)\n  ;; where the first number is the x-coordinate of the bird\n  ;; and the second number is the y-coordinate of the rock.\n</pre>\n\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Remember that as with any structure, you will\nuse </FONT><FONT FACE=\"Courier New\" class=\"style4\">make-world</FONT><FONT FACE=\"Garamond\" SIZE=4>\nto create a world, </FONT><FONT FACE=\"Courier New\" class=\"style4\">world-birds-x</FONT><FONT FACE=\"Garamond\" SIZE=4>\nto get the bird&#39;s position from a world, and </FONT><FONT FACE=\"Courier New\" class=\"style4\">world-rocks-y</FONT><FONT FACE=\"Garamond\" SIZE=4>\nto get the rock&#39;s position.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>(There&#39;s one other little detail to note.\n In computer graphics&mdash;not just in Scheme&mdash;the convention for x-y coordinates\nis that the origin is in the upper left corner, the x axis extends positively\nto the right, and the y axis extends positively downwards.  So (5,20) would\nbe five pixels from the left side, 20 pixels down from the top.)</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(d.1)</B> Develop the function </FONT><FONT FACE=\"Courier New\" class=\"style4\">world-next</FONT><FONT FACE=\"Garamond\" SIZE=4> that takes a world as input and returns a new world, one that represents how the input\nworld should be at the next clock tick. Follow the design recipe: contract, purpose, examples, header, body, tests.  Hints:  What is the world?  How\ndoes it change at each tick?  How do you create a (new) world?</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(d.2)</B> Develop the function </FONT><FONT FACE=\"Courier New\" class=\"style4\">are-we-done?</FONT><FONT FACE=\"Garamond\" SIZE=4> that takes a world and returns true if the animation should end (let's say, when the rock nearly reaches the bottom of the scene, with a y-value of 190); it should return false otherwise. Follow the design recipe, making up examples/tests like <span class=\"style4\">(check-expect (are-we-done? (make-world 1 1)) false)</span> and <span class=\"style4\">(check-expect (are-we-done? (make-world 1 190)) true)</span>. Are those enough for thorough testing?</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(d.3)</B> Develop the function </FONT><font face=\"Courier New\" class=\"style4\">world-draw</font><font face=\"Garamond\" size=4> that takes a world as input and returns a scene created using </font><font face=\"Courier New\" class=\"style4\">empty-scene</font><font face=\"Garamond\" size=4> and </font><font face=\"Courier New\" class=\"style4\">place-image</font><font face=\"Garamond\" size=4> (as described in the universe.ss documentation).  You should create an empty\nscene of 200 by 200 pixels; into that scene you should place the image of\nthe bird (at a constant height of 120 pixels above the ground) and place\nthe image of the rock (at a constant 80 pixels from the left edge).  Test\nthis out by calling it with </font><font face=\"Courier New\" class=\"style4\">(world-draw\n(make-world 1 1))</font><font size=\"4\" face=\"Garamond\">. </font></P>\n\n\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(d.4)</B> Combine the structure definition\n  above, your three function definitions, and the four setup lines (starting with the call to <span class=\"style4\">big-bang</span>). These should make a runnable animation.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(d.5)</B>  Make the bird fly twice as fast\nas the rock falls.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d.6)</B>  There&#39;s a strong wind blowing.\n Make the rock fall at a 45-degree angle to the right.  You can do this\nwithout changing how the world is defined.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Submit your definitions via Checkmate.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(e)</B> (extra credit) Extra credit problems\n  in ICS H21 follow different rules.  The first rule is that you must finish\n  the main part of the assignment before starting on the extra credit.  The\n  second rule is that you may work with whomever you like on the extra credit\n  problems&mdash;your partner on the main part, one or more other students, or\n  yourself alone; group work must clearly indicate who contributed and how\n  much.  The third rule is that extra credit must be turned in on paper to\n  the TA (clearly marked with the contributors&#39; names and including, where\n  appropriate, printouts of the relevant definitions and interactions).  The\n  fourth rule is that extra credit is mainly for the fun and the glory; it\n  also gives a little bit of credit, but not so much as to make up for low\n  performance on the required work and exams.</FONT></P>\n<p> <font face=\"Garamond\" size=\"4\"><b>(e.1)</b> Do exercise 2.2.4.</font></p>\n<p> <font face=\"Garamond\" size=\"4\"><b>(e.2)</b> What&#39;s the longest number\n  you can generate in DrScheme, without running out of memory and taking no\n  more than 60 seconds of elapsed time?  Generating the big numbers is one\n  part of the question; counting the digits is another.</font></p>\n<p> <font face=\"Garamond\" size=\"4\">Try to count digits using </font><font face=\"Courier New\"><code>(string-length\n  (number-&gt;string </code></font><font face=\"Garamond\" size=\"4\"><i><U>your-big-number</U></i></font><font face=\"Courier New\"><code>))</code></font><font face=\"Garamond\" size=\"4\">.\n    How do you get <i><U>your-big-number</U></i> into that expression without\n    copying and pasting it (or typing the entire number)?</font></p>\n<p> <font face=\"Garamond\" size=\"4\">Try to count the digits using some tool(s)\n  other than Scheme (or any programming language).</font></p>\n<p> <font face=\"Garamond\" size=\"4\">Using your wristwatch (or slow, measured counting),\n  time how long it takes for Scheme to calculate and display your big number.\n  Now, time how long it takes to calculate the big number <i>and then</i> its length (by nesting the expression to generate the big number inside\n  the length-calculating expression above)<b>.</b> You&#39;d expect the second,\n  combined task to take longer, but on some Scheme systems it doesn&#39;t.\n  Does it on your system?  Why might the generate-and-calculate-length task\n  take <i>less</i> time than generating the number without calculating its\n  length?</font></p>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(f)</B>  (extra credit&mdash;the same rules apply) Think of some other, clever ways to enhance\nthe bird-and-rock animation (e.g., have the bird fly more creatively) or create another (e.g.,  draw a simple face\nwhose eye winks).  Just keep to the\nsame basic organization:  A world to represent what changes, a function\nto draw the world, and a function to create the next world from the previous\none.  Show your results to your classmates and the TA.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(g)</B>  Remember that each partner must\ncomplete a partner evaluation form and submit it individually at </FONT><span class=\"style3\"><FONT FACE=\"Courier New\">eee.uci.edu</FONT></span><FONT FACE=\"Garamond\" SIZE=4> by Saturday morning at the latest.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21 assignments by David\nG. Kay from Fall 2001.  Modified for image.ss and world.ss teachpacks by\nAngelo Pioli and David G. Kay, Fall 2005. Modified by David G. Kay in Fall 2007 and Fall 2008. The rock-and-bird example was\nadapted from CS 211 at Northeastern University, taught by Matthias Felleisen\nand John Clements in Fall 2004. The fabric exercise was written by Kathi Fisler at Worcester Polytechnic Institute and modified slightly by David G. Kay. Modified by David G. Kay, Fall 2009, to reflect universe.ss.</FONT></P>\n<HR />\n<FONT FACE=\"Garamond\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Garamond\">\n<!-- #BeginDate format:fcAm1a -->Wednesday, September 23, 2009 11:00 PM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "ascii"}