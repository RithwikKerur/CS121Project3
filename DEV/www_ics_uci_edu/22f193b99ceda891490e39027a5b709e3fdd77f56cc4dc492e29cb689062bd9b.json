{"url": "https://www.ics.uci.edu/~jacobson/cs122b/Project/02-TeamsAndGrading.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n    \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<meta name=\"Generator\" content=\"Microsoft Word 97/98\">\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\">\n<title>Teams, Guidelines and Grading</title>\n</head>\n\n<body>\n<div class=\"title\">\n<center>\n<h2>Teams, Guidelines and Grading</h2>\n</center>\n</div>\n\n<div class=\"section\">\n<hr>\n<h3>Project Phases</h3>\n</div>\n\n<p>Each phase of FabFlixs corresponds to an assignment; a write-up for each appears in this project document. Phase 0 is not graded, as it is just installing various software services and tools you'll need to implement the FabFlixs system. Phases 1 though 5 are graded; details are below.</p>\n\n<div class=\"section\">\n<hr>\n<h3>Project Teams</h3>\n</div>\n\n<p>A project team typically consists of two students. We strongly recommend that you \"team up\" with another student whose schedule and work style are compatible with yours. You will typically find that having someone with whom to discuss ideas, options, design and implementation decisions &#150;and bugs&#150;often results in completing the work more quickly, more correctly and with less frustration. (You'll also have someone with whom you can talk freely about your work without fear of breaking course academic honesty rules.) The team will need a PC for developing FabFlixs; a desktop will work, but a laptop will make doing demos (see below) much easier. Keep this in mind when choosing a team mate.</p>\n\n<p>We strongly encourage you to use the pair prorgramming approach when doing your work; research and observation routinely show that your work will get done faster, and be better, than each person working alone on part of the project and then \"joining together\" the parts to make the whole.</p>\n\n<p>You pick your team mate. If you cannot find one, we suggest posting a note on the class' <a href=\"https://eee.uci.edu/toolbox/messageboard/m8220/f19871/\">EEE MessageBoard</a>, describing what you are looking for in a team mate, what skills and talents you can bring to the team, and a way for interested folks to get in touch with you.</p>\n\n<p>Ocassionally, a student's circumstances make it extremely difficult for the student to team up. If you believe you must work alone, contact the instructor to discuss whether you being a \"team of one\" is appropriate; if so, the instructor will allow you to work on your own.</p>\n\n<p> It sometimes occurs that a team of three is more appropriate than a team of two (especially if having a team of three avoids a person having to work on her or his own). If you would like to be in a team of three, arrange a meeting of all three potential team members with the instructor, who will discuss the pros and cons of the proposed team with you and decide whether to allow it. Please note that, in the past, each member of a three-person team often had to spend <i>more</i> time to complete FabFlixs work than members on two-person teams...adding the extra person almost always increases the time needed to coordinate the work among the team members.</p>\n</p>\n\n<p>Each team must send email to <font class=\"codeFaceSmall\">cs122b-help@ics.uci.edu</font> <i>no later than Friday, April 3, 11 pm,</i> giving the name(s) and student ID(s) of the team members. You can also give us a team name, of no more than 32 characters, of your choosing; if you don't pick one, we'll pick one (a rather boring one, I'm afraid) for you.</p>\n\n<p>Once teams are formed, they can not add or change members. However, a multi-person team can \"break up\" if the members find they just can't work together, they agree to the dissolution and the instructor gives permission. For a dissolution to be granted, send email to </i><font class=\"codeFaceSmall\">cs122b-help@ics.uci.edu</font> giving the team name, member names and a brief reason why the team needs to break up. If the break-up is approved more than 3 days prior to a phase's due date, each team member can use the team's joint work on the current phase and complete the assignment on her/his own. If the break-up is approved 3 days or closer to a phase deadline, then the team must turn in and demonstrate its work for that phase as the team is currently composed. The team separation takes place after the demonstration of the current phase's work, and each (former) team member does her/his work from that point forward. Eacn team member can use the team's previous (joint) work.</p>\n\n<div class=\"section\">\n<hr>\n<h3>Turning in Assignments</h3>\n</div>\n\n<p>When an assignment is due, your team turns it in via the Web using the Checkmate system.  You must have an active UCInetID to use Checkmate.</p>\n\n<p>Go to Checkmate, at <a href=\"http://www.checkmate.ics.uci.edu\">www.checkmate.ics.uci.edu</a>, before the first assignment is due; follow the instructions to sign up to turn in assignments for CS122B. (If you get a message about security certificates, just click <font class=\"codeFaceSmall\">\nContinue</font>). We recommend that all team members sign up for Checkmate; that way, any member can turn assignments in.</p>\n\n<p>Each assignment that is graded (that is, assignments corresponding to phases 1 through 5) describes what is to be turned in.  For each graded assignment, <i>one</i> team member submits the team's work, labeled with the team's name.</p>\n\n<p>If your team wants to submit a newer version of your assignment the deadline, it can\nsubmit a new version of it; we will grade the one submission whose date is closest to and not past the fifth day after the due date. In particular, we will not take a submission that comprises part of a phase's work and combine it with other submissions that complete that phase's work and grade the parts together as if they were a complete assignment. We will not grade files in paper form. Submissions via email will only be graded if Checkmate is nonfuctional at the time the submission is due and the instructor has specifically said that submissions are to be made via email.</p>\n\n<p>You are responsible for submitting the version of your project that you want graded. Accidentally submitting the wrong version or forgetting to submit the assignment or some of its  parts are not grounds for a regrade.</p>\n</P>\n\n<div class=\"section\">\n<hr>\n<h3>Demos and Grading</h3>\n</div>\n<p>For phases 1 to 5, soon after their due dates, each team will meet with course staff to briefly demonstrate its work on that phase; the time allowed for each phase's demostration is given in the phase's write-up. Around the time a phase is due, we'll announce available demo times; you'll email cs122b-help@ics.uci.edu with three preferred times, in priority order. We'll get back to you to confirm your demo time. If you team cannot make any of the proposed times, email <a href=\"mailto:cs122b-help@ics.uci.edu\">cs122b-help@ics.uci.edu</a> right away.</p>\n\n<p>There are three ways to set up a machine to demonstrate your work:</p>\n<ul>\n<li><p>Have the software set up on your team's laptop, and bring the laptop to the demonstration meeting.  This way is easiest, safest and fastest: You do and test the work on the same machine that will be used for the demonstration, so there is no need to install the work on another machine, with its attendant risk of error.</p>\n\n<li><p>Set up the software on one of the computers in the ICS labs that has been configured to support CS122B work. The demo is still fast, as no remote computing is needed, but this approach does require that you install and set up the demonstration on the lab machine prior to the demonstration meeting. If the machine has not yet been used for CS122B work, you might also have to first install and set up the CS122B software environment (discussed in the <a href= \"http://www.ics.uci.edu/~jacobson/cs122b/Project/03-Phase0.html\">Phase 0</a> section of this document).</p><li>\n\n<li><p>Set up the demo on an off-site computer before the meeting, say one at your home or dorm room, and remotely connect to that computer through a computer in lab. This requires making sure the off-site computer will accept a remote connection and setting up the local machine to connect to that computer. The software will likely run much slower than if the machine were local, due to the need to send and receive significant amounts of data between the two machines. Directions for setting up Windows XP computers for remote computing are in the <a href= \"http://www.ics.uci.edu/~jacobson/cs122b/Project/03-Phase0.html\">Phase 0</a> section of this document. (For connecting machines running other O/S's, we will help you as we are able, but it will be up to you to make the connection work. We obviously cannot investigate and test every possible remote-local machine connection that a team might wish to use.)</p>\n</ul>\n\n<p>At the demo, have the ZIP and/or WAR files you turned in stored on your demonstration machine. When the demo begins, we will ask you to create from those files an executable version of your phase's code&#150;and to do it very quickly. \n\n<p>When using a ZIP file, typically best is to have a script file as part of the ZIP that builds the running system, so that all you have to do is unzip the file (with one command or a double-click) and run the script; the system is then ready to run.  We do not care which scripting tool you use (e.g., ANT, make, a windows command line BAT file) or that you use none at all: what matters is that from ZIP file to running system takes place quickly. \n\n<p>For a WAR file, you just deploy it via Tomcat (details on how to do this are in the Phase 2 write-up). </p>\n\n<p>Each team member can earn 0, .5 or 1 point for the demo, depending on how polished and professional the demonstration is and how well it \"shows off\" your work and your understanding of it.  Team members can get different scores. For instance, if one team member effectively does the entire demo, and does it well, and the other member is silent or only gives incorrect or misleading information, the effective member would receive 1 point and the other member zero points. Thus, in a multi-person team, for all members to obtain 1 point, each has to participate equally or near equally in the demonstration. Team members will lose demonstration credit if they have to fumble around, or take inordinately long, to get their system up and running.</p>\n\n<p>We will grade your programs using the following zero-to-four-point scale. Note that if you get 4 points, we consider that full credit for the lab&#150;if you get four points on every assignment, you will have 100% of the possible lab points. Notice that your grade depends on issues of style and performance as well as correctness and completeness. </p>\n\n<p>Many of the tasks we ask you to undertake in these assignments do not have one right answer; they are often many reasonable approaches or solutions. In these situations, you will not be graded on whether your solution is the same as ours; rather, your grade will be based on whether your solution is a reasonable one, and on how well and clearly you have implemented it. If there are additional or particular aspects to grading an assignment, the assignment discusses them.</p>\n\n<p><b>0 points</b>&nbsp;&nbsp;You did not turn in any work towards completion of the assignment.</p>\n<p><b>1 point</b>&nbsp;&nbsp;Work that is meager and poorly done. It would not be considered at all acceptable in academic or professional circles.</p>\n<p><b>2 points</b>&nbsp;&nbsp;Work of reasonable quality and completeness. Shows a basic understanding of the material, but not a complete one. Presentation may be lacking (e.g., written work shows poor composition, a database is poorly organized, a report is hard to follow). Performance is reasonable, but may be less than optimal.</p>\n<p><b>3 points</b>&nbsp;&nbsp;Work of high quality which is complete and well presented, with perhaps a few minor errors and/or style or performance problems; the grade for good, solid&#150;but not extraordinary&#150;work.</p>\n<p><b>4 points</b>&nbsp&nbsp;Work of very high quality that demonstrates a full and complete understanding of the material the lab covers and that is very polished in its presentation; performance is the best that can be expected without specialized knowledge of how database  (or other) commands are implemented. Screens (and forms) are well laid out and easy to read and use.</p>\n\n<p>So, each assignment is worth 5 points, 4 for the work itself and 1 for the demonstration of it. Thus, there are 25 points possible for the course. Each graded assignment is of equal weight when computing the total points for the course; that is, each assignment is worth 20% of your course grade.</p>\n\n<p>Your scores may be adjusted if we have more than one person grading assignments and you have other than the \"easiest\" grader; please also remember we do not grade on a curve. See the <a href=\"//www.ics.uci.edu/~jacobson/cs122b/CourseReference.html\">Course Reference</a> for more details.</p>\n\n<p>Your work will be graded within a few days after it is turned in; the TA will let you know when the grades are available. See the TA as soon as possible if you have questions about the grade you received&#150;and no later than a week after the assignment has been returned, if you are asking for reconsideration of your work. Note that UCI policies prevent us from re-evaluating your work once your course grade is reported to the Registrar.</p>\n\n<div class=\"section\">\n<hr>\n<h3>Due Dates and Late Assignments</h3>\n</div>\n\n<p>Phase 0 has no due date and it is not graded. We strongly recommend that you complete it by the target date given in <a href=\"//www.ics.uci.edu/~jacobson/cs122b/Project/01-Overview.html\">\nOverview and Deadlines</a> so your development environment is stable before you attempt to complete the work other phases require.</p>\n\n<p>The due dates for the graded phases, that is, phases 1 to 5, are also given in <a href=\"//www.ics.uci.edu/~jacobson/cs122b/Project/01-Overview.html\">\nOverview and Deadlines</a>&#150;they are in the \"Deadline\" column.</p>\n\n<p>Any work you submit after its due date and time will incur a penalty of 1 point for each day or part of a day it is late. For example, if you earn 4 points and the assignment is two days late, your score will be 2 points (out of 4). </p>\n\n<p>We will not penalize you for a late assignment if it is late because of significant circumstances beyond your team's control, such as an incapacitating illness or injury or a major emergency, or Checkmate is down, and the team makes the instructor or the TA aware of these circumstances. Conflicts with due dates for your other classes or your job are not sufficient cause to lift the penalty. Should you be unable to turn in an assignment when due, it is best to notify the instructor ahead of time and make arrangements for an alternative due date. If that is not feasible, turn in the assignment as soon after the due date as possible, and, if you think the penalty should be waived, send an email to <font class=\"codeFaceSmall\">cs122B-help@ics.uci.edu</font> describing the unavoidable circumstance that prevented you from turning in the assignment when it was due. We will consider your situation when grading the assignment.</p>\n\n<div class=\"section\">\n<hr>\n<h3>A Note about Copyrights</h3>\n</div>\n\n<p>FabFlixs references copyrighted information such as images and video clips; we must pay close attention to copyright issues to avoid infringement and potential legal action. In particular, do not store any copyrighted materials on your development machines or elsewhere, or otherwise distribute the material, unless you have obtained explicit written permission from the copyright holder to do so. (It is permissible to store links to such material, as we have FabFlixs doing.) Refer to <a href=\"http://www.policies.uci.edu/adm/pols/714-18.html\">UCI's Computer and Network Use Policy</a> for more information. </p>\n\n<font face=\"Helvetica\" size=2>\n<p> Written by Norman Jacobson, March 2005. \n<br>&nbsp;&nbsp;&nbsp;Adapted from similar pages written by Norman Jacobson, Julian Feldman, and David G., Kay for various ICS courses. \n<br>&nbsp;&nbsp;&nbsp;&#147;Turning In Assignments&#148; based on &#147;How to Submit Projects,&#148; by Alex Thornton\n<br>&nbsp;&nbsp;&nbsp;&#147;A Note about Copyrights&#148; based on &#147;Important notice about copyrights,&#148 by Chen Li\n<br>Updated for the Spring 2007 offering of CS122B by Norman Jacobson, March 2007\n<br>Minor edits for the Fall 2007 offering of CS122B by Norman Jacobson, September 2007\n<br>Edited for clarity, and included discussion of pair programming, for the Fall 2008 offering\n<br>&nbsp;&nbsp; of CS122B by Norman Jacobson, September 2008\n<br>Minor typos fixed; dates updated for the Spring 2009 CS122B offering, by Norman Jacobson, March 2009\n</p>\n</font>\n</body>\n</html>\n", "encoding": "ascii"}