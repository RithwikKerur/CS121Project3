{"url": "https://www.ics.uci.edu/~ejw/versioning/arch/0045.html", "content": "<!-- received=\"Thu Jun 06 10:46:00 1996 PDT\" -->\n<!-- sent=\"Thu, 6 Jun 1996 13:45:36 -0400\" -->\n<!-- name=\"David G. Durand\" -->\n<!-- email=\"dgd@cs.bu.edu\" -->\n<!-- subject=\"Re: Versioning Thoughts (in HTML)\" -->\n<!-- id=\"ade26372320210049910@[128.195.21.209]\" -->\n<!-- inreplyto=\"Versioning Thoughts (in HTML)\" -->\n<title>Archive of Working Group on Versioning and Configuration Management of World Wide Web Content: Re: Versioning Thoughts (in HTML)</title>\n<h1>Re: Versioning Thoughts (in HTML)</h1>\n<b>David G. Durand</b> (<a href=\"mailto:dgd@cs.bu.edu\"><i>dgd@cs.bu.edu</i></a>)<br>\n<i>Thu, 6 Jun 1996 13:45:36 -0400</i>\n<p>\n<ul>\n<li> <b>Messages sorted by:</b> <a href=\"index.html#45\">[ date ]</a><a href=\"thread.html#45\">[ thread ]</a><a href=\"subject.html#45\">[ subject ]</a><a href=\"author.html#45\">[ author ]</a>\n<!-- next=\"start\" -->\n<li> <b>Next message:</b> <a href=\"0046.html\">David G. Durand: \"Re: More versioning thoughts.\"</a>\n<li> <b>Previous message:</b> <a href=\"0044.html\">David J. Fiander: \"Re: Versioning Thoughts (in HTML)\"</a>\n<li> <b>Maybe in reply to:</b> <a href=\"0040.html\">David G. Durand: \"Versioning Thoughts (in HTML)\"</a>\n<!-- nextthread=\"start\" -->\n<li> <b>Next in thread:</b> <a href=\"0050.html\">Larry Masinter: \"Re: Versioning Thoughts (in HTML)\"</a>\n<!-- reply=\"end\" -->\n</ul>\n<hr>\n<!-- body=\"start\" -->\n<pre>\n&gt;&gt; &lt;p&gt;Use of versioning operation should not depend on operations such as\n&gt;&gt;LOCK and\n&gt;&gt; UNLOCK. I at least, am taking great pains to avoid the logical or\n&gt;&gt; practical necessity for such operations by making the free creation of\n&gt;&gt; variant versions (and their later merging, if desired) as easy as possible.\n&gt;&gt; I'd like it if we can find a specification for lock and Unlock such that a\n&gt;&gt; server like the one I am implementing will be able to work with editors\n&gt;&gt; that expect LOCK and UNLOCK.\n&gt;\n&gt;I sort of agree and disagree.  I feel that we need to define LOCK\n&gt;and UNLOCK methods, but state that it's up to the server to\n&gt;decide whether or not they're required before editting, or\n&gt;PUTing.  This allows for a strict locking protocol for those\n&gt;sites that feel it's necessary while leaving things open for\n&gt;looser policy.\n\nI think we actually just agree. I don't want to force a policy, but hope\nthat we can define a way for policy assumptions to painlessly vary between\nserver and client. For instance, as long as it's permissible for LOCK to be\nan always-succeed NOP, then a \"locking client\" will work with an\n\"non-locking\" server. If a client does not lock when it should, then the\nerror return can indicate that a lock is required.\n\n&gt;\n&gt;&gt; &lt;p&gt;It should be a server decision as to what version identifier should be\n&gt;&gt; assigned to a document revision when it is submitted.  This follows from\n&gt;&gt; the opaqueness of version parameters in URLs.  It should be a server\n&gt;&gt; decision (not mandated by the protocol) whether to accept a new revision.\n&gt;\n&gt;I agree on both points, but reserve the right to change my mind.\n&gt;The protocol will certainly not specify that the server MUST\n&gt;accept a new revision.  I can think of at least a dozen reasons,\n&gt;all policy-based, why a server might refuse a \"check-in\"\n&gt;operation.\n\nCertainly, it ought to be a server policy decision whether or not to accept\nany change. I just don't want a protocol that says you must have taken a\nlock to submit a change. On the other hand there probably should be\nstandard not-updated reasons like \"file not locked\", \"conflicting update\npending\", \"not authorized\", etc. This list should include common results\nthat might reasonably be implemented by popular policies (like LOCK/UNLOCK\nor CHECKOUT/CHECKIN).\n\n&gt;\n&gt;&gt; &lt;p&gt;I'd like to discuss notions such as VTML as part of the overall\n&gt;&gt; approach to versioning on the web, thus creating a tripartite front for\n&gt;&gt; proper support: &lt;tt&gt;Content-type:&lt;/tt&gt;, HTTP protocol, and URL format.\n&gt;&gt; These correspond to the fundamental versioning notions of naming, access\n&gt;&gt; control, and differencing.\n&gt;\n&gt;I've looked at the VTML paper, but can't say, right now, any more\n&gt;than that.  I will certainly not accept any attempt to specify\n&gt;VTML as the storage format.  The server may accept VTML as a\n&gt;format for updating pages, and it may serve VTML to\n&gt;versioning-aware clients, for display purposes, but how the\n&gt;server stores things is private.\n\n   Definitely. I think that VTML is useful as a way to send information\nbetween versioning aware editors and servers, but it shouldn't be a\nrequirement on versioning aware servers. I also think it would be an\nunreasonable and unpopular requirement for implementation technology. Not\nall versioning systems will even have the information to implement VTML\n(for instance a server that used the VMS file system as a version\n\"repository\").\n\n   -- David\n\n----------------------------------------------+----------------------------\n  David Durand                 <a href=\"mailto:dgd@cs.bu.edu\">dgd@cs.bu.edu</a>  | david@dynamicDiagrams.com\n  Boston University Computer Science          | Dynamic Diagrams\n  <a href=\"http://cs-www.bu.edu:80/students/grads/dgd/\">http://cs-www.bu.edu:80/students/grads/dgd/</a> | http://dynamicDiagrams.com/\n</pre>\n<!-- body=\"end\" -->\n<hr>\n<p>\n<ul>\n<!-- next=\"start\" -->\n<li> <b>Next message:</b> <a href=\"0046.html\">David G. Durand: \"Re: More versioning thoughts.\"</a>\n<li> <b>Previous message:</b> <a href=\"0044.html\">David J. Fiander: \"Re: Versioning Thoughts (in HTML)\"</a>\n<li> <b>Maybe in reply to:</b> <a href=\"0040.html\">David G. Durand: \"Versioning Thoughts (in HTML)\"</a>\n<!-- nextthread=\"start\" -->\n<li> <b>Next in thread:</b> <a href=\"0050.html\">Larry Masinter: \"Re: Versioning Thoughts (in HTML)\"</a>\n<!-- reply=\"end\" -->\n</ul>\n", "encoding": "ascii"}