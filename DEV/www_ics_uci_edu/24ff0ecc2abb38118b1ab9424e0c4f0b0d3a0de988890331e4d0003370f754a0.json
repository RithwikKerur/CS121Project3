{"url": "https://www.ics.uci.edu/~kay/courses/i42/hw/labC.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, February 2, 2006 8:57 PM\">\n<TITLE>Lab Assignment C</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"ADBA4394\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 2, CS2, assignment, Java, OOP\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"A lab assignment for Informatics 42, a second-quarter course in computer science for Informatics majors in the Bren School of Information and Computer Sciences, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2005 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/i42/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT FACE=\"Goudy Old Style\">Informatics 42 &bull; Winter 2012 &bull; David G. Kay\n  &bull; UC Irvine</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\" SIZE=6><B>Lab Assignment C</B></FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">This assignment is due at the end of lab on\nFriday, February 17. </FONT>This is a pair programming assignment; do it with someone you haven't worked with yet this quarter and make sure Joel knows whom you've paired with.</P>\n<P><B>The problem: </B><font face=\"Goudy Old Style\">The assignment, originally written by Alex Thornton, involves building an interpreter for a simple programing language like Basic; Alex calls his language Facile. This may seem a little infrastructural for us, but actually, it's not: Sometimes the right way to solve a problem is to make up a special-purpose language that makes it easy to express the various aspects of the problem (and then build an interpreter to process that language). Even the restaurants program is an anemic example of this; we have a \"restaurant collection manipulation language\" that consists of half a dozen single-letter commands. In a couple of weeks we'll talk a little more about the way computer scientists look at languages.</font>\n<p style=\"color: rgb(0, 0, 0); font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); font-size: medium; \"><font face=\"Goudy Old Style\">You have some advantages over the ICS 22 students who are doing this problem:  You're doing it with pair programming, rather than solo;  you've spent a week (last quarter) thinking about machine-level programming, so the concepts in this assignment will be familiar; and you're coding in Python, which is higher-level than Java (meaning that it does more of the work for you).</font></p>\n<strong> Alex's introduction:</strong> When I was a kid, one of my teachers introduced me to a computer for the first time \u2014 a <a href=\"http://en.wikipedia.org/wiki/TRS-80\"><span class=\"s1\">Radio Shack TRS-80 Model I</span></a> (anybody remember it?). Immediately, I was interested. I played little math games and messed around with other \"state of the art\" educational tools from the early 1980's; as you might imagine, the state of the art wasn't much then, but it was fun.\n<p class=\"p1\">Then one day, my teacher asked me if I wanted to learn how to write my own programs. I thought it sounded like a great idea. So I picked up a book about a language called BASIC \u2014 some of you may have played with it before \u2014 and typed in a short program that asked a user for a number of hits and a number of at-bats and printed out a batting average. (Believe it or not, my mother still has a printout of it, including the comment at the top: \"My first program, by Alex Thornton.\" Yes, I commented my first program.) I ran the program, tried it out, and I was mesmerized; the computer did exactly what I asked it to, exactly the way I asked it to. And my lifelong obsession with what I would later know to be computer science began.</p>\n<p class=\"p1\">BASIC was a good teaching tool for its day: versatile and easy-to-learn. For this project, we've designed a simpler version of BASIC called Facile, which supports only eleven kinds of statements. You'll be building a Facile <i>interpreter</i>, to read and execute Facile programs.</p>\n<p class=\"p1\"><strong>The Facile language:</strong> We'll discuss the requirements for your interpreter later in the write-up. First, let's talk about the Facile language. A Facile program is a sequence of <i>statements</i>, one per line. Here's an example of a Facile program:</p>\n<pre><code>LET A 3\nPRINT A\nGOSUB 7\nPRINT A\nPRINT B\nGOTO 10\nLET A 4\nLET B 6\nRETURN\nPRINT A\nEND\n.</code></pre>\n<p class=\"p1\">Each line contains exactly one statement (i.e., there may be no blank lines). Facile assigns a <i>line number</i> to each of the lines, where the first line of the program is numbered 1, the second line is numbered 2, and so on. The last line of the program is a period (.) on a line by itself. Execution of a Facile program always begins at line number 1. There is no predefined limit on the number of lines in a Facile program.</p>\n<p class=\"p1\"><strong>Variables: </strong>A Facile program has variables, each named by a sequence of characters that does not include whitespace. Each variable is capable of storing an integer value.<span class=\"Apple-converted-space\">\u00a0</span>The value of a variable may be assigned or changed with a LET statement. A LET statement changes the value of one variable. Some examples are:</p>\n<ul class=\"ul1\">\n  <li class=\"li4\"><code>LET A 3</code> \u2014 changes the value of the variable A to 3</li>\n  <li class=\"li4\"><code>LET Z \u20139</code> \u2014 changes the value of the variable Z to \u20139</li>\n</ul>\n<p class=\"p1\">You can print the value of a variable to the console by using a PRINT statement. A PRINT statement prints the value of one variable, followed by a newline. So, consider the following short Facile program:</p>\n<pre><code>LET A 3\nLET Z -9\nPRINT A\nPRINT Z\n.</code></pre>\n<p class=\"p1\">Its output would be:</p>\n<pre><code>3\n-9</code></pre>\n\n<p class=\"p1\"><strong>Execution of a Facile program: </strong>A Facile program is executed one line at a time, beginning at line number 1. Ordinarily, execution proceeds forward, so that line 1 will execute first, followed by line 2, followed by line 3, and so on. Execution continues until either an END statement is reached, or until it reaches the \".\" line that appears at the end of the program.</p>\n<p class=\"p1\">As in any programming language, it is possible in Facile to write programs that execute out of sequence, though the mechanisms are a bit more primitive than they are in a language like Python. A GOTO statement causes execution to \"jump\" immediately to the given number. For example, the statement <b>GOTO 4</b> jumps execution to line 4. Here's an example Facile program that uses GOTO:</p>\n<pre><code>LET A 1\nGOTO 4\nLET A 2\nPRINT A\n.</code>\n</pre>\n<p class=\"p1\">In this program, line 1 is executed first, setting the variable A's value to 1. Then the GOTO statement will immediately jump execution of the program to line 4, skipping the second LET. Line 4 prints the value of A, which is 1. So, the output of the program is 1.</p>\n<p class=\"p1\">A GOTO statement may jump either forward or backward, meaning that the following program is a legal Facile program. See if you can figure out what its output would be.</p>\n<pre><code>LET Z 5\nLET C 0\nGOTO 8\nLET C 4\nPRINT C\nPRINT Z\nEND\nPRINT C\nPRINT Z\nGOTO 4\n.</code></pre>\n<p class=\"p1\">GOTO statements are not permitted to jump beyond the boundaries of the program, to lines before line 1 or lines after the \".\" that completes the program. If such a GOTO statement is encountered while a program is executed, the interpreter terminates with an error message.</p>\n<p class=\"p1\"><strong>Mathematical operations: </strong>Facile provides the typical mathematical operations that can be performed on variables: addition, subtraction, multiplication, and division. Each operation is provided as a statement that changes the value of the given variable. Here are examples of their use:</p>\n<pre><code>LET A 4\nADD A 3\nPRINT A\nLET B 5\nSUB B 3\nPRINT B\nLET C 6\nMULT C 7\nPRINT C\nLET D 7\nDIV D 2\nPRINT D\n.</code>\n</pre>\n<p class=\"p1\">In the example above, the ADD statement adds 3 to the value of A, storing the result in A. So, printing A will display 7 on the console. The output of the program above is:</p>\n<pre><code>7\n2\n42\n3</code>\n</pre>\n<p class=\"p1\">It is important to note that, since all variables in Facile are integers, the DIV statement implements integer division, meaning that its result is the floor (or integral part) of the quotient. So, in the example above, 7 / 2 = 3. [Note: Python has an integer division operator.] The second operand may not be zero, meaning that the statement <b>DIV A 0</b> is illegal. When a Facile program encounters a division by zero, it immediately terminates with an error message.</p>\n<p class=\"p1\"><strong>The IF statement: </strong>Facile provides an IF statement, which acts like a conditional GOTO. It compares the value of some variable to some value, and jumps execution of the program to the given line number if the comparison is true. The comparison can use one of the typical relational operators: &lt;, &lt;=, &gt;, &gt;=, = (equal to), or &lt;&gt; (not equal to).</p>\n<pre><code>LET A 3\nLET B 5\nIF A &lt; 4 THEN 5\nPRINT A\nPRINT B\n.</code>\n</pre>\n<p class=\"p1\">In the program above, the variables A and B are given the values 3 and 5, respectively. An IF statement then compares A to 4. Since A is less than 4, execution jumps to line 5. B's value is printed out. So this program's output is simply a line containing 5.</p>\n<p class=\"p1\">The IF statement in Facile is substantially less flexible than its Python equivalent. In an IF statement in Facile, the token IF must be followed by exactly five tokens. The first must be the name of a variable. The second must be one of the relational operators (&lt;, &lt;=, &gt;, &gt;=, =, or &lt;&gt;). The third must be an integer constant. The fourth must be the word THEN. The fifth must be a line number. They behave in the way you might expect. For example: <b>IF C &lt;&gt; 0 THEN 4</b> means \"jump to line 4 if C is not equal to 0\".</p>\n<p class=\"p1\">Like GOTO statements, IF statements are not permitted to jump beyond the boundaries of the program. An attempt to do so should cause the Facile program to terminate with an error message.</p>\n<p class=\"p1\"><strong>Subroutines: </strong>There are no methods or functions in Facile, but there is a simplified mechanism called a <i>subroutine</i>. A subroutine is a chunk of Facile code that can be \"called\" by issuing a GOSUB statement. GOSUB is much like GOTO; it causes execution to jump to a particular line. However, GOSUB also causes the Facile program to remember where it jumped from. Subsequently, when a RETURN statement is reached, execution continues at the line following the GOSUB statement that caused the jump. Here's an example:</p>\n<pre><code>LET A 1\nGOSUB 6\nPRINT A\nPRINT B\nEND\nLET A 2\nLET B 3\nRETURN\n.</code></pre>\n<p class=\"p1\">In the program above, line 1 is executed first, setting the value of A to 1. Next, a GOSUB statement is reached. Execution jumps to line 6, but Facile also remembers that when a RETURN statement is reached, execution should jump back to the line following the GOSUB \u2014 in this case, line 3. Line 6 is executed next, setting A to 2, then line 7 sets B to 3. Now we reach a RETURN statement, causing execution to jump back to the line number that we're remembering \u2014 line 3. Line 3 prints the value of A (which is 2), then line 4 prints the value of B (which is 3). Next, we reach line 5, which is an END statement, so the program ends.</p>\n<p class=\"p1\">Subroutines can be used very similarly to Python functions, except they do not take parameters or return a value. Consider the following example, which contains a subroutine that prints the values of A, B, and C each time it's called:</p>\n<pre><code>LET A 3\nLET B 0\nLET C 0\nGOSUB 12\nLET B 4\nGOSUB 12\nLET C 5\nGOSUB 12\nLET A 1\nGOSUB 12\nEND\nPRINT A\nPRINT B\nPRINT C\nRETURN\n.</code></pre>\n<p class=\"p7\">Subroutines may call other subroutines, meaning that two or more GOSUB's may be reached before a RETURN is reached. The rules for this are very similar to methods that call other methods in Python; for each GOSUB that is reached, Facile will remember the line to which it should return. When a RETURN is reached, execution will move to the line remembered from the <i>most recent</i> GOSUB. Here's an example:</p>\n<pre><code>LET A 1\nGOSUB 7\nPRINT A\nEND\nLET A 3\nRETURN\nPRINT A\nLET A 2\nGOSUB 5\nPRINT A\nRETURN\n.</code></pre>\n<p class=\"p7\">In this example, execution begins at line 1 by setting the variable A to 1. Next, we jump to line 7 with a GOSUB, remembering that we should jump back to line 3 when we encounter a RETURN. Line 7 prints A (which is 1), then line 8 changes A's value to 2. Now we've reached line 9, which is another GOSUB statement. At this point, execution will jump to line 5, but we'll also need to remember to jump back to the line following this GOSUB \u2014 line 10 \u2014 when we reach a RETURN. But we also need to remember the line from the previous GOSUB \u2014 line 3.</p>\n<p class=\"p1\">Line 5 sets A to 3, then we encounter our first RETURN statement. We're remembering two lines \u2014 line 3 and line 10. But line 10 is the most recently remembered line, so execution jumps to line 10. Line 10 prints A (which is 3). Now we encounter another RETURN statement on line 11. We're remembering the line 3 from the first GOSUB. So execution jumps to line 3, printing A (which is still 3), then ending the program on line 4.</p>\n<p class=\"p1\">So, the output of this program is:</p>\n<pre><code>1\n3\n3</code></pre>\n<p class=\"p1\">Like GOTO statements, GOSUB statements are not permitted to jump beyond the boundaries of the program, to lines before line 1 or lines after the \".\" that completes the program. If such a GOSUB statement is encountered while a program is executed, the interpreter terminates with an error message.</p>\n<p class=\"p1\">It is also an error for a RETURN statement to be encountered when there has been no previous GOSUB. The Facile program will immediately terminate and print an error message in this case, as well.</p>\n<p class=\"p1\"><strong>Whitespace: </strong>While Facile programs may not have blank lines in them, the amount and placement of blank space between the words on each line is considered irrelevant. So, the following is a legal Facile program:</p>\n<pre><code>\u00a0 \u00a0 LET\u00a0 \u00a0 Zebra\u00a0 5\n\u00a0GOTO \u00a0 7\nLET Chimpanzee \u00a0 4\n\u00a0PRINT Chimpanzee\nPRINT \u00a0 \u00a0 \u00a0 \u00a0 Zebra\n\u00a0 END\nPRINT Chimpanzee\n\u00a0 \u00a0 \u00a0 \u00a0 PRINT\u00a0 Zebra\n\u00a0 \u00a0 GOTO\u00a0 \u00a0 \u00a0 3\n.</code>\n</pre>\n<p class=\"p1\"><strong>Experimenting with Facile: </strong>An <i>interpreter</i> is a program that is capable of executing a program written in some programming language. To give you the ability to experiment, we've implemented a Facile interpreter for Windows already. (For those of you who don't ordinarily use Windows, remember that our machines in the ICS labs run Windows, so you'll have ample opportunity to experiment with Facile. You might even want to \"pair program\" while you experiment.) This <a href=\"http://www.ics.uci.edu/~thornton/ics22/LabManual/Simple/Facile.zip\"><span class=\"s1\">Zip archive</span></a> contains the interpreter (Facile.exe) and most of the Facile programs that appear in this write-up, along with a few additional ones that demonstrate fatal errors (division by zero, a RETURN statement without a corresponding GOSUB, and a GOTO to a non-existent line). Feel free to write your own, as well. Unzip the archive into one folder, then double-click the program. From there, it's fairly self-explanatory. A word of warning about this interpreter: we wrote it without making a serious attempt at handling syntax problems, so it assumes that the input file is a legal Facile program. If you attempt to run an input file that is not legal Facile, you may see the message \"ERROR IN PROGRAM\", but it's also possible that my interpreter may simply crash.<span class=\"Apple-converted-space\">\u00a0 </span>Moreover, this interpreter's version of Facile has a few subtle differences from the version described here:<span class=\"Apple-converted-space\">\u00a0 </span>In particular, it recognizes only the 26 variables A through Z, and it initializes all of them to 0 automatically.</p>\n<p class=\"p1\">We're providing this interpreter so you can experiment with the language as you have questions about it. Once you're comfortable with it, it'll be your turn to implement a Facile interpreter. (Bear in mind that this Facile interpreter implements much of the optional work described in the \"Additional challenges\" section below, but it will behave correctly on the samples given in this write-up.)</p>\n<p class=\"p1\"><strong>Your program: </strong>For this project, you'll be building your own <i>Facile interpreter</i>, which is a program that is capable of executing a Facile program, generating the correct output according to the specification in the previous sections. Since you're already familiar with Python, you'll write your Facile interpreter in Python. (Since Python runs on many operating systems, that means, once completed, you'll be able to use your interpreter to run Facile programs on Windows, Mac OS X, Linux, Unix, and several other platforms.)</p>\n<p class=\"p1\">The Facile interpreter that we've provided runs in a (very simple) graphical user interface. Your program, on the other hand, should read one Facile program from an input file, then execute it, writing any output from the Facile program to the console (i.e., using print statements).</p>\n<p class=\"p6\">As a starting point, we will discuss the organization of this program in class.<span class=\"Apple-converted-space\">\u00a0 </span>Of course you may use the code we develop as a basis for your complete solution.</p>\n<p class=\"p1\"><strong>How an interpreter works: </strong>A typical interpreter will execute a program one statement at a time, keeping track of what we might call the <i>program state</i> as it goes along. In the case of a Python interpreter, you might imagine that there would be quite a bit of work to be done. The interpreter would need to keep track of all of the objects \u2014 creating new ones and garbage-collecting old ones as necessary \u2014 as well as maintain the \"call stack,\" along with various other tasks required by Python programs. Implementing an efficient, complete Python interpreter is a project that would easily take many programmer-years.</p>\n<p class=\"p1\">A Facile interpreter is a much simpler program, since Facile is a much simpler programming language. Your interpreter will need to execute a Facile program one statement at a time, updating the program state as necessary, until either an END statement or the \".\" is reached. (The \".\" can simply be treated as an END statement, if you'd like.) The program state consists of the following information:</p>\n<ul class=\"ul1\">\n  <li class=\"li4\">what line of code is currently executing (you might call this the <i>program counter,</i> which you may remember from the Deus X machine)</li>\n  <li class=\"li4\">the integer value in each of the variables</li>\n  <li class=\"li4\">the <em>call stack;</em> that is, the line numbers remembered because of any GOSUB statements (Since each RETURN jumps back to the line following the most recent GOSUB, it makes sense to store these line numbers in a stack.)</li>\n</ul>\n<p class=\"p1\">Each statement has a different effect on the program state. For example, a LET statement will cause the value of one of the variables to change, then cause the program counter to be incremented (since, after a LET statement, execution continues on to the next statement), a GOTO statement will cause the program counter to be changed to the line number specified in the statement, and so on.</p>\n<p class=\"p1\"><strong>Reading the program and representing it in memory: </strong>Your program will need to begin by reading the Facile program from an input file and representing it in memory. There are a number of ways to solve this problem. One way is to read the program into memory as a collection of strings, with each of the strings containing one line of the input program. Every time a particular line is executed, it would need to be parsed (to see what kind of statement it was), then executed. As you might imagine, this is a terribly inefficient way to implement an interpreter, since the same statement may need to be parsed over and over again. You are not permitted to use this approach for your interpreter.</p>\n<p class=\"p1\">A better approach \u2014 one that we're requiring you to use instead \u2014 is to read the input program once, parse it once, and represent it as a list of statement objects. The object-oriented programming concept of inheritance  provides a very natural design approach for this problem.</p>\n<ul class=\"ul1\">\n  <li class=\"li4\">A base class called Statement contains any functionality common to all statements. The only common functionality for all statements is that they can be executed, though what happens when they are executed is different depending on the type of the statement. We can represent this in the Statement class with a method called <b>execute()</b>. A Statement object might also contain a list containing whatever arguments appeared after the keyword.</li>\n  <li class=\"li4\">For each kind of statement (e.g., LET, PRINT, etc.), a subclass of Statement can be designed (e.g., LetStatement, PrintStatement). Each subclass will inherit the field listing the arguments \u2014 the information needed to execute the statement. In the case of a LET statement, for example, the necessary information is the name of the variable and the value to assign into it. Also needed in each of these Statement subclasses is an actual implementation of the <b>execute()</b> method.<span class=\"Apple-converted-space\">\u00a0</span></li>\n</ul>\n<p class=\"p1\">You'll need code that can parse the input file and create the appropriate sequence of Statement objects, reading the input file and returning a list of Statement objects (actually, Statement subclass objects) containing all the statements in the program. Note that line numbers in Facile start at 1, not 0, so we suggest storing None as the first element in the list, then storing the actual Statement objects with indices beginning at 1. (An alternative, storing the statements beginning at index 0, will require the error-prone practice of adding or subtracting one when converting between line numbers and list indices, which can easily lead to chaos.)</p>\n<p class=\"p1\">You may assume that the input file contains a syntactically legal Facile program. It's acceptable for your program to either print an error message, ignore lines that aren't understood, or even crash in the event that it's given an input file that is not legal Facile. (It's a good thing Python interpreters don't behave this way.) We will only test your interpreter with syntactically legal Facile programs, though the programs may have run-time errors in them. As was discussed above, there are three kinds of run-time errors: division by zero, a RETURN statement without a corresponding GOSUB, and a GOTO/GOSUB/IF..THEN to a line outside of the boundaries of the program. Your interpreter will need to behave reasonably in these cases, by printing a meaningful error message and terminating gracefully.</p>\n<p class=\"p1\"><strong>Designing your interpreter: </strong>As the size of a program increases, one of the most difficult obstacles that programmers face is the need to &quot;separate their concerns.&quot; One of the primary strategies that programmers use to separate their concerns is to break a large program into a set of smaller pieces. The obvious mechanism for breaking up a program in an object-oriented language is the use of classes.</p>\n<p class=\"p1\">Separating concerns is something novice programmers need to learn. The temptation is always to try to think about the complete picture, since this strategy works well for the short programs that you write when you're first starting out. As programs become larger, confusion naturally sets in, as the complete picture can be difficult to keep in your brain all at once. Even moderately small programs can be built out of many classes and encompass a great deal of complexity. This project will encourage you to begin thinking about your programs the same way, which will give you the ability to write much larger programs than you could before.</p>\n<p class=\"p1\">The main tasks that your program must perform are:</p>\n<ul class=\"ul1\">\n  <li class=\"li4\">Read the contents of the input file, parsing each line, and storing an object into memory that represents the Facile statement appearing on that line.</li>\n  <li class=\"li4\">Create a representation of the initial program state, then begin executing the program one statement at a time. The execution of each statement will cause the program state to be changed, and may also cause output to appear on the console.</li>\n  <li class=\"li4\">Continue executing the program until an END statement or the \".\" is reached.</li>\n</ul>\n<p class=\"p1\">We suggest breaking up your program in the following way:</p>\n<ul class=\"ul1\">\n  <li class=\"li4\"><b>Main program</b>. This will oversee the execution of the interpreter on one input file. Interpretation requires following the sequence of steps above: parsing the input file, creating an initial program state, then executing one statement at a time until the program ends. Most of the actual work is delegated to other classes, with Interpreter acting as a manager.</li>\n  <li class=\"li4\"><b>Parser</b>. This parses the input file and returns a list of objects representing statements.</li>\n  <li class=\"li4\"><b>CallStack</b>. A generic stack (which you can implement easily with a list). You'll use this to store the return points from GOSUB statements.<span class=\"Apple-converted-space\">\u00a0</span></li>\n  <li class=\"li4\"><b>ProgramState</b>. This represents the state of an executing Facile program. It contains the program counter, the values in each of the variables, and the call stack.</li>\n  <li class=\"li4\"><b>Statement</b>. This class represents a Facile statement. Subclasses such as LetStatement, PrintStatement, etc., implement the actual statements.</li>\n</ul>\n<p class=\"p1\">It's a good idea to build as many of the underlying pieces as you need to implement a couple of the statements, say LET and PRINT, first. Afterwards, add new kinds of statements one or two at a time, making any changes required in the underlying pieces.</p>\n<p class=\"p1\"><strong>Facile quick reference: </strong>Here is a list of all of the Facile statements that should be supported by your interpreter, with a brief description of the effect of each. In each of the statements below, <i>var</i> may be the name of a variable, <i>int</i> may be an integer constant (e.g., 1, \u20133, 15), and <i>linenum</i> may be a line number (1 or greater).</p>\n<table cellspacing=\"1\" cellpadding=\"1\" border=1>\n  <tbody>\n    <tr>\n      <td width=\"193\" valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">Statement</p>\n      </td>\n      <td width=\"673\" valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Description</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">LET <i>var</i> <i>int</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Changes the value of the variable <i>var</i> to the integer <i>int</i>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">PRINT <i>var</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Prints the value of the variable <i>var</i> to the console.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">ADD <i>var</i> <i>int</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Adds <i>int</i> to the value of the variable <i>var</i>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">SUB <i>var</i> <i>int</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Subtracts <i>int</i> from the value of the variable <i>var</i>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">MULT <i>var</i> <i>int</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Multiplies the value of the variable <i>var</i> by the integer <i>int</i>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">DIV <i>var</i> <i>int</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Divides the value of the variable <i>var</i> by the integer <i>int</i>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">GOTO <i>linenum</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Jumps execution of the program to the line numbered <i>linenum</i>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">IF <i>var</i> <i>op</i> <i>int</i> THEN <i>linenum</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Compares the value of the variable <i>var</i> to the integer <i>int</i> using the relational operator <i>op</i> (=, &lt;&gt;, &lt;, &lt;=, &gt;, &gt;=). If the comparison is true, jumps execution of the program to the line numbered <i>linenum</i>. If not, this statement has no effect.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">GOSUB <i>linenum</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Temporarily jumps to the line numbered <i>linenum</i>. A RETURN statement will cause execution to jump back to the line following the GOSUB.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">RETURN</p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Jumps execution of the program back to the line following the most recently-executed GOSUB statement.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">END</p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Ends the program immediately.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td1\">\n        <p class=\"p4\">.</p>\n      </td>\n      <td valign=\"middle\" class=\"td2\">\n        <p class=\"p4\">Special marker that indicates the end of the program text. Behaves as an END statement when encountered.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p class=\"p1\"><strong>Additional challenges: </strong>Your Facile interpreter may implement some additional features; these are not required.Here are two additional statements:</p>\n<table cellspacing=\"1\" cellpadding=\"1\" border=1>\n  <tbody>\n    <tr>\n      <td valign=\"middle\" class=\"td3\">\n        <p class=\"p4\">Statement</p>\n      </td>\n      <td valign=\"middle\" class=\"td4\">\n        <p class=\"p4\">Description</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td3\">\n        <p class=\"p4\">INC <i>var</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td4\">\n        <p class=\"p4\">Adds 1 to the value of the variable <i>var</i>. For example, the statement <b>INC A</b> adds one to the value of A.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"middle\" class=\"td3\">\n        <p class=\"p4\">DEC <i>var</i></p>\n      </td>\n      <td valign=\"middle\" class=\"td4\">\n        <p class=\"p4\">Subtracts 1 from the value of the variable <i>var</i>. For example, the statement <b>DEC A</b> subtracts one from the value of A.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p class=\"p1\">Including these statements in Facile does not dramatically increase its power, but it does allow for convenient incrementing and decrementing, which can be handy for constructing simple \"loops.\"</p>\n<p class=\"p1\">Another improvement to the interpreter can increase the expressiveness of the language quite a bit: Consider a statement such as LET. As defined above, the LET statement sets the value of some variable to some integer constant. But imagine that you wanted to set the value of some variable to be equal to the value of some other variable. Facile, as defined above, does not allow this fundamental operation. But there's no reason it couldn't.</p>\n<p class=\"p1\">In many places where an integer constant may normally appear in a Facile program, your interpreter could also allow the name of a variable to appear. In the case of PRINT, you could also allow an integer constant instead of a variable name. So, for example, these statements may be given to the interpreter:</p>\n<ul class=\"ul1\">\n  <li class=\"li4\"><code>LET A B</code> \u2014 Sets the value of A to be equal to the value of B.</li>\n  <li class=\"li4\"><code>PRINT 3</code> \u2014 Prints the integer constant 3 to the console.</li>\n  <li class=\"li4\"><code>ADD B C</code> \u2014 Adds the value of C to the value of B, storing the result in B.</li>\n  <li class=\"li4\"><code>SUB B C</code>, <code>MULT B C</code>, <code>DIV B C</code> \u2014 similar to the ADD statement above</li>\n  <li class=\"li4\"><code>IF A &lt;= B THEN 4</code> \u2014 Jumps to line 4 if A is less than or equal to B.</li>\n  <li class=\"li4\"><code>IF 3 &lt;= B THEN 4</code> \u2014 Jumps to line 4 if 3 is less than or equal to B.</li>\n  <li class=\"li4\"><code>IF 4 &lt;= 9 THEN 4</code> \u2014 Jumps to line 4 is 4 is less than or equal to 9.</li>\n</ul>\n<p class=\"p1\">You might also consider designing and implementing some new statements to accomplish some of these important goals, or others of your own choosing:</p>\n<ul class=\"ul1\">\n  <li class=\"li4\">Allow Facile programmers to put comments into their code. (This could bring up an interesting question about the design of the language: how should line numbers be counted if not all lines contain code?)</li>\n  <li class=\"li4\">Define additional variables that can store string values instead of integers. The BASIC language names such variables with trailing $ characters. So you might have the variables A$, B$, C$, ...,<span class=\"Apple-converted-space\">\u00a0 </span>each of which is capable of storing a string.</li>\n  <li class=\"li4\">Add a statement, or perhaps a variant of the PRINT statement, to output a string of text (a string literal or the value of a string variable) to the console.</li>\n  <li class=\"li4\">Allow the IF statement to compare two string variables, or to compare a string variable to a string literal.</li>\n  <li class=\"li4\">Add a statement to read an integer and/or string from the console and store it in a variable.</li>\n  <li class=\"li4\">Add a LABEL statement that takes a variable name whose value will be the next line number in the program.<span class=\"Apple-converted-space\">\u00a0 </span>Then that variable could be used as the target for a GOTO or IF statement, saving you from having to count lines.<span class=\"Apple-converted-space\">\u00a0 </span>(Even though it occurs in your code, LABEL isn't an executable statement at all; your parser needs to handle it once, when parsing.)</li>\n</ul>\n<p class=\"p5\">Finally, here's one more sample program. You can run it in Alex's Facile interpreter; you can read it to see what it does; you can use it to test your own interpreter (but it does require that you implement one of the optional features\u2014two if you count comments).</p>\n<pre><code>* MY FIRST FACILE PROGRAM BY DAVID KAY\nLET N 5\nLET F 1\nGOSUB 6\nPRINT F\nEND\nIF N > 1 THEN 8\nRETURN\nMULT F N\nSUB N 1\nGOSUB 6\nRETURN\n.</code></pre>\n<P><strong>When you're done:</strong>\n<ul style=\"color: rgb(0, 0, 0); font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); font-size: medium; \">\n  <li><font face=\"Goudy Old Style\">Submit all your Python source code in one </font><font face=\"Courier New\" size=\"2\">.py</font><font face=\"Goudy Old Style\"><span class=\"Apple-converted-space\">\u00a0</span>file via Checkmate. Each pair should submit just one solution with both partners' names clearly indicated.</font></li>\n  <br>\n  <li><font face=\"Goudy Old Style\">The usual<span class=\"Apple-converted-space\">\u00a0</span><a href=\"http://www.ics.uci.edu/~kay/courses/i42/hw/assignments_index_files/grading_criteria_for_lab.html\">grading criteria</a><span class=\"Apple-converted-space\">\u00a0</span>for lab assignments apply.</font></li>\n  <br>\n  <li><font face=\"Goudy Old Style\">Fill out a partner evaluation at EEE.</font></li>\n</ul>\n<p>\n  <FONT FACE=\"Helvetica\" SIZE=1>  Modified slightly to reflect Python by David G. Kay, Winter 2012.\n    Testing section added back into the assignment by Alex Thornton, Winter 2007.\n    Clarification to the GOTO/GOSUB error condition, specifying that the THEN part of IF statements is to be included, made by Alex Thornton, along with necessary changes<span class=\"Apple-converted-space\">\u00a0</span>\n  A new error condition (GOTO/GOSUB to non-existent line) added by Alex Thornton, along with necessary changes to provided interpreter, Winter 2006.\n  A couple of very minor changes made by Alex Thornton, Fall 2005.\n  Some minor changes introduced by Alex Thornton, Spring 2005.\n  Assignment restructured (to require the use of an object-oriented solution, while no longer requiring the testing portion) by Alex Thornton, Fall 2004.\n  Almost all of the work that was previously optional is now required, along with other heavy modifications, as well as improvements to the given interpreter by Alex Thornton, Winter 2003.\n  Originally written by Alex Thornton, Fall 2002.\n</FONT></P>\n<ul class=\"ul1\">\n</ul>\n</BODY>\n</HTML>\n", "encoding": "utf-8"}