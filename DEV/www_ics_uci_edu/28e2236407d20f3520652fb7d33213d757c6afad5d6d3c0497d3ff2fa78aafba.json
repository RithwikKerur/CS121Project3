{"url": "https://www.ics.uci.edu/~pattis/ICS-31/lectures/expressions/lecture.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Expressions</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Expressions</h1>\r\n<p>\r\n<h2>ICS-31: Introduction to Programming\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<a name=\"StructureAndEvaluation\"><hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>The Structure and Evaluation of Expressions</b></td>\r\n<td width =\"80%\">\r\n   In this section we begin our examination of how to build simple and\r\n     complicated expressions from literals, names, operators, functions, and\r\n     methods.\r\n   The EBNF rules specifying the structure of expressions are overly \r\n     complicated, so instead we will just describe their syntax in English\r\n     (one of the few times we shall do so).\r\n   Here are the three structural rules for expressions; each rule concerns\r\n     the syntax of legal expressions.\r\n  <ul>\r\n    <li><b>S1</b>: A literal is a legal expression\r\n    <li><b>S2</b>: A (variable) name is a legal expression; its type.\r\n    <li><b>S3</b>: An operator (or function or method) whose operands (each of\r\n          which must be a legal expression) is a legal expression.\r\n  </ul>\r\n  We will be interested in computing the type of the object resulting from an\r\n   expression, which we can determine if we know the types of its literals,\r\n   (variable) names and the prototpyes/annotations of its operators, functions,\r\n   and methods.\r\n  <p>\r\n  For each syntax rule there is a companion semantic rule for <b>evaluating</b>\r\n    expressions.\r\n  In some sense, each expression is a question, \"What is the value of ...\"\r\n    which Python answers by evaluating the expression.\r\n  <ul>\r\n    <li><b>E1</b>: A literal evaluates to itself (a trivial but noteworthy\r\n          rule, for the sake of completeness).\r\n    <li><b>E2</b>: A name evaluates to the current object it is bound to\r\n          (refers to it).\r\n    <li><b>E3</b>: An operator (or function or method)\r\n    <ul><li>Evaluates each of its operands or arguments (which are themselves\r\n              legal expressions).\r\n        <li>Performs any implicit conversions\r\n            (e.g., promoting <b>int</b> to <b>float</b> or <b>bool</b> to\r\n            <b>int</b> for arithmetic on mixed types\r\n        <li>Applies the operator to its operands (or calls the function or\r\n              method on its arguments) to to compute its result, which is based\r\n              on the semantics of that operator, function, or method.\r\n            </ul>\r\n  </ul>\r\n  Here, as above, <b>E1</b> and <b>E2</b> are simple rules; all the power is\r\n    in rule <b>E3</b>.\r\n  <p>\r\n  For example, assume that we assign <b>x = 3</b> in a script and then\r\n    want to determine whether the expression <b>3*x+1</b> is a legal expression\r\n   (and what its resulting type and value is).\r\n  Here is a proof in English that this expression is legal and has the value\r\n    <b>10</b>.\r\n  <ul>\r\n    <li>We can prove that <b>3</b> is a legal expression (by <b>S1</b>);\r\n          its value is <b>3</b> (by <b>E1</b>) whose type is <b>int</b>.\r\n    <li>We can prove that <b>x</b> is a legal expression (by <b>S2</b>);\r\n          its value is <b>3</b> (by <b>E2</b>) whose type is <b>int</b>.\r\n    <li>We can prove that <b>3*x</b> is a legal expression (by <b>S3</b>:\r\n          we just proved both <b>3</b> and <b>x</b> are legal\r\n          expressions of type <b>int</b>, and one of the prototypes of\r\n          <b>*</b> is <b>(int,int) -> int</b>); its result value is <b>9</b>\r\n          (by <b>E3</b> and applying the semantics of the multiply operator)\r\n          whose type if <b>int</b>.\r\n    <li>We can prove that <b>1</b> is a legal expression (by <b>S1</b>); its\r\n           value is <b>1</b> (by <b>E1</b>) whose type is <b>int</b>.\r\n    <li>Finally, we can prove that <b>3*x+1</b> is a legal expression\r\n         (by <b>S3</b>: we just proved both <b>3*x</b> and\r\n          <b>1</b> are legal expressions of type <b>int</b>, and one of the\r\n          prototypes of <b>+</b> is <b>+ (int,int) -> int</b>); its result\r\n          value is <b>10</b> (by <b>E3</b> again, and applying the semantics\r\n          of the add operator) whose type if <b>int</b>.\r\n  </ul>\r\n  In fact, these three rules allow us to identify the structure of -and\r\n    evaluate- arbitrarily complicated expressions built from literals,\r\n    (variable) names, operators, functions, and methods.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Oval Diagrams -->\r\n\r\n<a name=\"OvalDiagrams\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Oval Diagrams</b></td>\r\n<td width =\"80%\">\r\n  To illustate that we understand how Python structures and evaluates our\r\n    expressions (and more importantly, to give us a tool to analyze and debug\r\n    incorrectly written expressions), we will study how to illustrate an\r\n    expression as an <b>Oval</b> diagram.\r\n  As we write expressions with many operators, functions, and methods mixing\r\n    many types, this tool will become more and more important.\r\n  <p>\r\n  To create an oval diagram, first circle (or draw an oval around) every \r\n    literal and (variable) name in the expression.\r\n  These expressions are like atoms in chemistry: they contain no smaller\r\n    constituents.\r\n  Next, label their values on the bottoms and the types on these values on the\r\n    top.\r\n  Then, draw an oval around each operator and its operands (or each function or\r\n    method and its arguments); label the bottom with the result value (using\r\n    the semantics of the operator, function, or method) and the top with its\r\n    type.\r\n  <p>\r\n  The outermost oval is labelled by the value and type of the result of the\r\n    entire expression.\r\n  Here is an example of an oval diagram for the previously discussed expression: <b>3*x+1</b> with <b>x</b> bound to <b>3</b>.\r\n<p>\r\n<img src=\"images/oval1.jpg\"></image><p>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Operator Precedence -->\r\n\r\n<a name=\"OperatorPrecedence\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Operator Precedence and Associativity</b></td>\r\n<td width =\"80%\">\r\n  Examine the oval diagram below.\r\n  It has exactly the same tokens as the oval diagram above, but the ovals are\r\n     a bit different.\r\n  They both seem to \"follow all the rules\" for forming/evaluating expressions,\r\n    but the ovals are in different positions, and they ultimately produce\r\n    different values as a result.\r\n  The questions are: which oval diagram is correct (which is the way Python\r\n     analyzes and evaluates expressions) and what extra rules do we need to\r\n     know about to  construct correct oval diagrams?\r\n <p><img src=\"images/oval2.jpg\"></image><p>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp</b></td>\r\n<td width =\"80%\">\r\n  The answers have to do with the concepts of \"operator precedence\" and\r\n   \"operator associativity\": which operators take precedence over other\r\n    operators (which operators are circled/evaluated first) in an expression.\r\n  During this discussin we will learn that we can also use parentheses to\r\n    override the standard operator precedence/associativity when we need to.\r\n  Here is an operator precedence/association table that includes all the\r\n    operators in Python -some we know, others will be covered later- in\r\n    highest to lowest precedence.\r\n<p>\r\n  <table cellspacing=\"0\" cellpadding=\"5\" border=\"1\" rules=\"all\">\r\n  <thead>\r\n  <tr align=\"left\">\r\n  <th>Operator</th><th>Name</th><th>Associativity</th>\r\n  </thead>\r\n  <tbody>\r\n<tr align=\"left\"><td><pre><b>() [] {}</b></pre></td><td>Grouping or tuple, list, set/dictionary</td><td></td>\r\n<tr align=\"left\"><td><pre><b>x.attr, x(...), x[...]</b></pre></td><td>Attribute, call, index/slice</td><td></td>\r\n<tr align=\"left\"><td><pre><b>x**y</b></pre></td><td>Power (exponentiation)</td><td>Right</td>\r\n<tr align=\"left\"><td><pre><b>-x +x ~x</b></pre></td><td>Positive, negative, bit-wise not</td><td></td>\r\n<tr align=\"left\"><td><pre><b>* % / //</b></pre></td><td>Multiply/repetition, remainder/formatting, divide, floor divide</td><td>Left</td>\r\n<tr align=\"left\"><td><pre><b>+ -</b></pre></td><td>Add/catenation, subtract/set-difference</td><td>Left</td>\r\n<tr align=\"left\"><td><pre><b>x&lt;&lt;y x&gt;&gt;y</b></pre></td><td>>>Shift x left/right by y bits</td><td></td>\r\n<tr align=\"left\"><td><pre><b>&</b></pre></td><td>Bitwise AND/set-intersection</td><td></td>\r\n<tr align=\"left\"><td><pre><b>^</b></pre></td><td>Bitwise NOT/set-symmetric-difference(XOR)</td><td></td>\r\n<tr align=\"left\"><td><pre><b>|</b></pre></td><td>Bitwise OR/set-union</td><td></td>\r\n<tr align=\"left\"><td><pre><b>< <= > >= == !=<br>is, is not, in, not in</b></pre></td><td>Comparison<br>object identity, membership</td><td>Chained<br>&nbsp;</td>\r\n<tr align=\"left\"><td><pre><b>not</b></pre></td><td>Logical negation</td><td></td>\r\n<tr align=\"left\"><td><pre><b>and</b></pre></td><td>Logical and (short-circuit)</td><td></td>\r\n<tr align=\"left\"><td><pre><b>or</b></pre></td><td>Logical not (short-circuit)</td><td></td>\r\n<tr align=\"left\"><td><pre><b>x if b else y</b></pre></td><td>Conditional expression</td><td></td>\r\n<tr align=\"left\"><td><pre><b>lambda a : e</b></pre></td><td>Un-named(anonymous) function generation</td><td></td>\r\n<tr align=\"left\"><td><pre><b>yield</b></pre></td><td>Generator function send protocol</td><td></td>\r\n  </td>\r\n  </tbody>\r\n  </table>\r\n  <p>\r\n  The rules for using these tables on expressions are\r\n  <ul>\r\n    <li>O1: When an expression contains two consecutive operators, neither\r\n            appearing in parentheses, Python applies the higher precedence\r\n            operator first.\r\n    <li>O2: When an expression contains two consecutive operators, neither\r\n            appearing in parentheses, and both have the same precedence,\r\n            Python applies left associative operators left to right; it\r\n            applies right associative operators right to left; it applies\r\n            chained operators as one group.\r\n    <li>O3: Python always evaluates expressions in parentheses before it uses\r\n            them as operands/arguments in other expressions (so we can use\r\n            parentheses to override precedence, forcing the operators inside the\r\n            parentheses to be evaluated before the operators outside the\r\n            parentheses).\r\n  </ul>\r\n  Thus, in the expression <b>3*x+1</b> we start by circling all literals and\r\n    (variable) names.\r\n  Then we see two consecutive operators with no parentheses: the <b>*</b>\r\n    operator has a higher precedence than the <b>+</b> operator, so it and its\r\n    operands are circled first.\r\n  Then the <b>+</b> operator and its operands are circled, completing the\r\n    oval diagram. \r\n  Remember, higher precendence operaters are evaluated earlier, lower\r\n    precedence operators are evaluated later.\r\n  <p>\r\n  In the expression below <b>3*(x+1)</b> the subexpression <b>x+1</b> appears\r\n    in parentheses.\r\n  Again, we start by circling all literals and (variable) names.\r\n  Then we see two consecutive operators, but this time the second one is in\r\n    parentheses.\r\n  By rule O3, we must handle all the operators inside the parentheses first\r\n    (circling the <b>+</b> operator first) and then circling the <b>*</b>\r\n    operator last, after its operand has been circled.\r\n  This complete this oval diagram.\r\n  <p>\r\n <p><img src=\"images/oval3.jpg\"></image><p>\r\n In fact, the parentheses themselves are suggestive of two sides of an \r\n   oval; you can always draw ovals around parenthesized expressions: they\r\n   can be used to represent the result computed by the last operator inside\r\n   the parentheses.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Examples -->\r\n\r\n<a name=\"Examples\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Examples</b></td>\r\n<td width =\"80%\">\r\n  Note that in the expression <b>A &nbsp / &nbsp B*C</b> it looks like\r\n    <b>A</b> is being divided by the product <b>B*C</b>, but both operators\r\n    have the same precedence, and are left associative, and all the redundant\r\n    white space is meaningless once we have tokenized the expression (which is\r\n    exactly what Python does first).\r\n  So, this expression is equivalent to <b>A/B*C)</b> (with the extra spaces\r\n    removed) which is equivalent to <b>(A/B)*C</b> (because these operators are\r\n    left associative) and not <b>A/(B*C)</b>.\r\n  If a formula has the product of <b>B</b> and <b>C</b> in the denominator,\r\n    then according to the rules of operator precedence and associativity, we\r\n    must use parentheses in the denominator to instruct Python to compute the\r\n    denominator first.\r\n  Some students, in an attempt to avoid parentheses, write this expression as\r\n    <b>A/B/C</b>, which has the same value, but I think that this form is\r\n    uglier and harder to understand than just putting in the parentheses.\r\n  <p>\r\n  Next, let's examine how to write an oval diagram for a more complicated\r\n    expression, which computes the volume of a sphere of radius <b>r</b>.\r\n <pre><b>  4/3*pi*r**3</b></pre>\r\n  Assume that we bind <b>r = 2</b> and <b>pi = 3.1416</b> (which simplifies\r\n    the math).\r\n  Notice how implicit coversion and operator prototypes ultimately compute a\r\n    <b>float</b> result from this mixture of <b>int</b> and <b>float</b> values\r\n  (detailed below the oval diagram).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<img src=\"images/sphere.jpg\"></image><p>\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp</b></td>\r\n<td width =\"80%\">\r\nNote that there is one <b>/</b> operator, two <b>*</b> operators, and one\r\n  <b>**</b> operator.\r\nBecause of the operator precedence and associativity rules, we do not need\r\n  to use any parentheses to write this expression correctly.\r\nThese rules ensure (a) division occurs before the multiplication following it\r\n  (these equal precedence operators are left associative) and (b) exponentiation\r\n  occurs before the multiplication preceding it (exponentiation has higher\r\n  precedence).\r\n<p>\r\nAlso note that when two <b>int</b> values are divided the result is a\r\n  <b>float</b> (according to the prototype <b>/ (int,int) -> float</b>)\r\n  and in <b>r**3</b> the <b>3</b> is implicitly converted/promoted from an\r\n  <b>int</b> to a <b>float</b> (as required, to match the prototype\r\n   <b>** (float,float) -> float</b>).\r\nWe could have explictly written this subexpression as <b>r**3.</b> which would\r\n  have required no conversion/promotion because <b>3.</b> is a <b>float</b>\r\n  literal.\r\n<p>\r\nNext, let's examine the combination of relational, logical and arithmetic\r\n  operators (and note how multiple adjacent relational operators use chained\r\n    associatitivity).\r\nThis expression, resulting in the <b>bool</b> value <b>False</b> computes\r\n  whether <b>x</b> is between <b>1</b> and <b>10</b> inclusive and <b>x</b>\r\n  is strictly greater than twice <b>y</b>.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<img src=\"images/logical.jpg\"></image><p>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp</b></td>\r\n<td width =\"80%\">\r\nNote that all the relational operators (here <b>&lt;=&nbsp;&nbsp;&lt</b>) have\r\n  a higher precedence than the logical operators (here <b>and</b>)\r\nThat makes sense because relational operators produce <b>bool</b> results and\r\n  logical operators use <b>bool</b> values as their operands; so the relational\r\n  operators should have higher precedence.\r\nArithmetic operators even higher precedence.\r\n<p>\r\nAlso note that because the two <b>&lt;=</b> operators are adjacent, and\r\n  relational operators use chained associativity, we draw one large oval around\r\n  this sequence/chain of operators and their operands.\r\nSo, <b>0 &lt;= x &lt;= 10</b> computes whether both <b>0</b> is less than or\r\n  equal to <b>x</b> and <b>x</b> is less than or equal to <b>10</b>.\r\nWe could write this subexpression as the equivalent\r\n  <b>0 &lt;= x  and x &lt;= 10</b>.\r\nWe prefer the former way, using chained relational operators, because it is\r\n  shorter and just as meaningful.\r\n<p>\r\nHere is one more expression to analyze: it actually is quite interesting in\r\n  what it does and how it does it.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<img src=\"images/min.jpg\"></image><p>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp</b></td>\r\n<td width =\"80%\">\r\nNote that twice the expression computes a <b>bool</b> values and multiplies it\r\n   times an <b>int</b> value.\r\nTo match the prototype (<b>* (int,int) -> int</b>) of the <b>*</b> operator,\r\n  Python implicity converts/promotes each <b>bool</b> to an <b>int</b> according\r\n  to the rule: <b>False</b> promotes to <b>0</b> and <b>True</b> promotes to\r\n   <b>1</b>.\r\n<p>\r\nTry evaluating this expression with <b>x = 3</b> and <b>y = 5</b>; the result\r\n  is again <b>3</b>, but now the left product is <b>3</b> and the right product\r\n  is <b>0</b>.\r\nChoose different values to bind to <b>x</b> and <b>y</b> and evaluate this\r\n  expression: you will find that it always is the smaller of these values; this\r\n  expression computes the minimum of <b>x</b> and <b>y</b>.\r\nHere is a quick justification.\r\nThe two boolean subexpressions are <b>x<=y</b> and <b>x>y</b>; these are\r\n  opposite tests: when one is <b>True</b> the other is <b>False</b>.\r\nSo one side of the sum will always be zero; the other side will be <b>x</b>\r\n  or <b>y</b>; it will be <b>x</b> if <b>x<=y</b> evalutes to <b>True</b>;\r\n  it will be <b>y</b> when <b>x>y</b> evalutes to <b>True</b>.\r\nSo, it will be <b>x</b> when <b>x</b> is the smaller number and it will be\r\n  <b>y</b> when <b>y</b> is the smaller number.\r\n<p>\r\nFinally, we could have made the conversion explicit by instead writing this\r\n  expression as <b>int(x<=y)*x + int(x>y)*y</b>.\r\nBecause implicit conversion from <b>bool</b> to <b>int</b> is not familiar to\r\n  most people, the explicit conversion version is probably better.\r\nOf course, if we ever must analyze and expression to understand it better,\r\n  these oval diagrams are exactly what you should use.\r\n<p>\r\nAs another example, what would the previous expression mean in Python if \r\n  <b>y</b> were bound to a <b>float</b> value instead?\r\nHere is an example.\r\nNotice implicit conversions from both <b>bool</b> to <b>float</b> and from\r\n  <b>int</b> to <b>float</b>.\r\nThe result is a <b>float</b>.\r\nSuprisingly, even if we had written <b>x = 5.</b> and <b>y = 3</b> the result\r\n would have been <b>3.</b> (not <b>3</b>) because of the conversions.\r\n<p>\r\nFinally, let's look at an example that involves a method call instead of a\r\n  function call; this example is also interesting because it use the string\r\n  (<b>str</b>) type, including string semantics for the <b>+</b> and <b>*</b>\r\n  operators.\r\nThe following expression computes an all upper-case letter version of <b>s</b>\r\n  and concatenates it with the <b>!</b> character repeated 3 times.\r\nThe result is the <b>str</b> <b>FIRE!!!</b>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<img src=\"images/string.jpg\"></image><p>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp</b></td>\r\n<td width =\"80%\">\r\nNotice how the method call <b>upper</b> appears, and note that the <b>*</b>\r\n  operator still has precedence over <b>+</b> whether we are using numeric or\r\n  string operands.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Expression Pragmatics -->\r\n\r\n<a name=\"ExpressionPragmatics\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Expression Pragmatics</b></td>\r\n<td width =\"80%\">\r\n  Write expressions correctly (for computers) and clearly (for people,\r\n    including yourself).\r\n  Use suggestive spacing, redundant parentheses, or both to clarify (for the\r\n    person) the meanings of complicated expressions.\r\n  <ul>\r\n    <li>Suggestive Spacing: use extra whitespace around lower-precedence\r\n          operators to suggest that they are evaluated later.\r\n        Recall that whitespace doesn't change the meaning of a program (all the\r\n          tokens remain the same), but this spacing makes it easier for\r\n          people to \"see\" operator precedence.\r\n    <li>Redundant Parentheses: use unneeded parentheses (they do not override\r\n          the precedence of any operators) around higher-precedence operators\r\n          to reinforce that they are evaluated earlier.\r\n  </ul>\r\n  <p>\r\n  <table cellspacing=\"0\" cellpadding=\"5\" border=\"1\" rules=\"all\">\r\n  <thead><tr><th align=\"left\">Expression</th><th>Suggestive Spacing</th><th>Redundant ()</th>\r\n  </thead>\r\n  <tbody>\r\n  <tr valign=\"top\"><td><pre><b>.5*a*t**2+v*t+d</b></pre></td>\r\n    <td><pre><b>.5*a * t**2  +  v*t  +  d</b></pre></td>\r\n    <td><pre><b>.5*a*(t**2)+(v*t)+d</b></pre></td>\r\n  </tbody>\r\n  </table>\r\n  <p>\r\n  Also, use literals of the correct type to avoid implicit conversion (which\r\n    often leads to harder-to-understand expression).\r\n  If you want to indicate conversion, use explict conversion functions to make\r\n    it explicit: doing so doesn't change how Python evaluates the expression\r\n    (implicit/explicit conversion both do the same thing) but for anyone\r\n    reading the code (including you), the expression will be easier to\r\n    understand.\r\n  We can check the expressions we write by analyzing them with oval diagrams,\r\n    and evaluating them for a few different values to ensure that they compute\r\n    the correct answers.\r\n  <p>\r\n  Don't convert literals; when I see students write <b>float(5)</b> it pains me\r\n    greatly: write just <b>5.</b> instead.\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Synthesis -->\r\n\r\n<a name=\"Synthesis\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Synthesis:Formulas -> Expressions</b></td>\r\n<td width =\"80%\">\r\nNow let's look at the problem of translating mathematical formulas (often\r\n  written in a 2-dimensional notation) into  equivlalent Python expressions\r\n  (written in a 1-dimensional notation).\r\nThe key to such a process will be to find the operator that will be applied\r\n  last (after its operands/subexpressions are computed); then to write the\r\n  operator and placeholders for its operands, and apply this process\r\n  recursively to synthesize its subexpressions.\r\nLet's apply this process to to translating the following formula into a Python\r\n  expression: it computes one root of a quadratic equation.\r\n<b><pre>              __________\r\n             / 2\r\n    -b  +  \\/ b  - 4ac\r\n\r\n  ---------------------------\r\n               2a</pre></b>\r\n\r\nSo, for the root of the quadratic equation, the division between the numerator\r\nand the denominator is applied last, so we would start with\r\n\r\n<b><pre>  numerator/denominator</pre></b>\r\n\r\nThe denominator is just <b>2a</b>, so we rewrite the formula as follows,\r\n  putting the denominator in paretheses to avoid the common operator\r\n  precedence mistake.\r\n \r\n<b><pre>  numerator/(2*a)</pre></b>\r\n\r\nNow, the last operator applied in the <b>numerator</b> is the <b>+</b>.\r\nSo we rewrite the formula as follows, putting the <b>numerator</b> in\r\n  parentheses to force the <b>+</b> to be applied before the <b>/</b>.\r\nWe use <b><pre>  (left + right) / (2*a)</pre></b>\r\nbecause\t<b><pre>  left + right / (2*a)</pre></b> would compute incorrectly: it\r\n  would apply the <b>+</b> after division.\r\n<p>\r\nThe <b>left</b> is just <b>-b</b>, so we rewrite the formula as follows.\r\nWe don't need to put -b in parentheses, because the negative operator (-)\r\n  has a precedence higher than <b>+</b> so it will be applied earlier.\r\nWe now have <b><pre>  (-b + right) / (2*a)</pre></b>\r\n\r\nThe <b>right</b> requires using the <b>sqrt</b> function (assume\r\n  <b>from math import sqrt</b>), so we rewrite the formula as follows\r\n<b><pre>  (-b + sqrt(body)) / (2*a)</pre></b>\r\nInside the <b>body</b> the last operator applied is <b>-</b>.\r\nSo we rerwite the formula as follows.\r\n<b><pre>  (-b + sqrt(left - right)) / (2*a)</pre></b>\r\n\r\nThe left formula is just <b>b**2</b>, so we rewrite the formula as follows.\r\nWe don't need to put <b>b**2</b> in parentheses, because the <b>**</b> operator\r\n  has a higher precedence than <b>-</b> so it will be applied earlier.\r\n<b><pre>  (-b + sqrt(b**2 - right)) / (2*a)</pre></b>\r\n\r\nThe <b>right</b> formula performs two multiplications.\r\nSince adjacent multiplications are done left to right, the left operand is\r\n<b>4a</b> and the right is <b>c</b>, so we can rewrite the formula as follows.\r\nWe don't need to put <b>left*c</b> in parentheses, because the * operator has\r\n  a higher precedence than the <b>-</b> operator.\r\n<b><pre>  (-b + sqrt(b**2 - left*c)) / (2*a)</pre></b>\r\n\r\nFinally, we can rewite left as just <b>4*a</b> and we are done converting the\r\nmathematical formula into an Python expression.\r\n<b><pre>  (-b + sqrt(b**2 - 4*a*c)) / (2*a)</pre></b>\r\n\r\nTry to use an oval diagram to analyze this expression to see if we converted\r\n  it correctly.\r\n<p>\r\nWe can carefully apply this method to convert any mathematical formula into a\r\n  Python expression, no matter how complicated it is, but we must also remember\r\n  rules of operator precedence and associativity.\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Simple Functions -->\r\n\r\n<a name=\"SimpleFunctions\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Simple Functions</b></td>\r\n<td width =\"80%\">\r\n\r\nAlthough this is getting a bit ahead of ourselves, we know enough now to\r\n  define simple functions, using the <b>return</b> keyword.\r\nHere is a definition of the <b>quadratic</b> function, which combines a\r\n  function header (which we know about from reading/calling functions) with\r\n  and expression (which we know about from this chapter) just the keyword\r\n  <b>return</b>, which we will discuss exactly when we discuss functions in\r\n  detail: for now, it just tells the function what value to return as a result.\r\n<b><pre>  def quadratic(a,b,c,x):\r\n      return a*x**2 + b*x + c</pre></b>\r\nWith this knowledge you can abstract any compuatation that is an expression into\r\n  a function you can define.\r\nYou can put such a definition in a script (for use once, in the current\r\n  computation) or in a library module, so you can import the function and use\r\n  it in any script.\r\nThis is just the tip of the iceberg about functions, we we will study in more\r\n  detail after we discuss the control structures that often inside them.\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Final -->\r\n\r\n<a name=\"Final\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Final Topics</b></td>\r\n<td width =\"80%\">\r\n\r\nWe briefly touch on two topics here that we will learn much more about later\r\n  (some in ICS-33).\r\nFirst Python translate all the operators into calls on special methods defined\r\n  in the classes that specify their left operand.\r\nSo, for example, in the <b>int</b> class there is a special method call\r\n  <b>__add__</b> that is called whenever an <b>int</b> object is the left\r\n  operand of a <b>+</b> operator; this method determines the type of the\r\n  <b>right</b> operand to determine how to perform the addition: it produces\r\n  an <b>int</b> result if the right operand is an <b>int</b>, but produces a\r\n  <b>float</b> result if the right operand is a <b>float</b>.\r\nWhen we learn how to define our own classes, we can write methods like\r\n  <b>__add__</b> that the <b>+</b> operator will call.\r\n<p>\r\nThere is a special function named <b>eval</b> that is defined in the\r\n  <b>builtins</b> module (whose names are automatically imported into every\r\n  module).\r\nIt has a single <b>str</b> argument and returns some object: the result of\r\n  treating that argument as if Python were to evaluate it as an expression.\r\nIts prototype is <b>eval(str) -> object</b>.\r\nFor example, if we had a script\r\n<b><pre>  a = 1\r\n  b = 2\r\n  print (eval('a+b'))</pre></b>\r\nPython would print <b>3</b>.\r\nBig deal, we could have written <b>print(a+b)</b> inside the script.\r\nBut now let us look at another script.\r\n<b><pre>  a = 1\r\n  b = 2\r\nprint (eval(prompt.for_string('Enter expression using a and b'))))</pre></b>\r\nNow, the user is prompted and could enter any string, say <b>a+3*b</b> and\r\n  Python would <b>eval</b> that string and print the answer <b>7</b>.\r\nSo, in the middle of running a script, Python can ask the user for some\r\n  information (here an expression) and determine its value in the context of\r\n  where the \"code\" was entered.\r\nThat is different than Python knowing what should be in the script before it\r\n  starts running.\r\nThis is a powerful feature that we will use when we need the power.\r\nWhat do you think we happen if we entered <b>a+c</b>?\r\n\r\nNote that <b>eval(\"3\")</b> is the <b>int</b> object with the value\r\n    <b>3</b> (just as <b>int(\"3\")</b> would be;\r\n  <b>eval(\"True\")</b> is the <b>bool</b> object with the value\r\n     <b>true</b>;\r\n  <b>eval(\"'abc'\")</b> is the <b>str</b> object with the value\r\n     <b>'abc'</b>;\r\n  <b>eval('v')</b> is whatever object the name <b>v</b> is bound to\r\n     (which might raise and exception if <b>v</b> is not a defined name:\r\n     <b>NameError: name 'v' is not defined</b>.\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Problem Set -->\r\n\r\n<a name=\"ProblemSet\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Problem Set</b></td>\r\n<td width =\"80%\">\r\n  To ensure that you understand all the material in this lecture, please solve\r\n    the the announced problems after you read the lecture.\r\n  <p>\r\n  If you get stumped on any problem, go back and read the relevant part of the\r\n     lecture.\r\n  If you still have questions, please get help from the Instructor, a CA, a Tutor,\r\n    or any other student.\r\n  <ol>\r\n    <li>What are the results of each of the the following operators?\r\n    <pre><b>    7/10   7./10   7/10.   7./10.\r\n    7/10   57/10   157/10   2157/10\r\n    7//10  57//10  157//10  2157/10\r\n    7%10   57%10   157%10   2157%10</b></pre>\r\n    <p>\r\n\r\n       \r\n    <li>Analyze each of the following expressions, assuming\r\n        <b>a = 1</b> and <b>b=2</b> and write an\r\n          oval diagram for each.\r\n    <pre><b>      (a+b)/2       a+b/2\r\n      100*a//b      100*(a//b)      a//b*100</b></pre>\r\n    <p>\r\n\r\n    <li>Evaluate the expression <b>(a+b - abs(a-b))//2</b> when\r\n        <ul>\r\n          <li><b>a = 3</b> and <b>b = 5</b>\r\n          <li><b>a = 5</b> and <b>b = 3</b>.\r\n        </ul>\r\n        Try a few other example values for <b>a</b> and <b>b</b>.\r\n        Describe in general terms what this expression evaluates to.\r\n    <p>\r\n        \r\n    <li>Suppose that we define <b>attendance = 3000</b> and\r\n          <b>capacity=10000</b> the number of fans attending an event at a\r\n          stadium and the maximum number of fans possible at that\r\n          stadium respectively.\r\n        Which of the following expressions evaluates to 30, the percentage of\r\n          fans in the stadium?\r\n        What do the \"incorrect\" expressions evaluate to?\r\n        <pre><b>        attendance//capacity\r\n        100*attendance//capacity\r\n        100*(attendance//capacity)\r\n        attendance//capacity*100        </b></pre>\r\n\r\n     <li>Assume that we define <b>year</b> to be some <b>int</b> value.\r\n         Write an expression whose result is <b>True</b> whenever <b>year</b>\r\n           stores a leap year and <b>false</b> otherwise.\r\n         We define a leap year as any year that is a perfect multiple of of\r\n           <b>4</b>, but not if it is a perfect multiple of <b>100</b>\r\n           (unless it is also a perfect multiple of <b>400</b>).\r\n         Note that one number is a perfect multiple of another if the\r\n           remainder after division equals zero.\r\n     <p>\r\n\r\n     <li>Assume that we define <b>x</b>, <b>y</b>, and <b>z</b> to refer to\r\n           <b>int</b> values.\r\n         Write an expression that computes whether...\r\n         <ul>\r\n            <li>...<b>x</b> is odd\r\n            <li>...<b>x</b> is a multiple of 20 (e.g., 20, 40, 60, ...)\r\n         </ul>\r\n         Assume that zero is a positive number.\r\n         Write an expression that computes whether...\r\n         <ul>\r\n            <li>...<b>x</b> and <b>y</b> are both positive\r\n            <li>...<b>x</b> and <b>y</b> have the same sign\r\n            (both are positive or both are negative)\r\n            <li>...<b>x</b> and <b>y</b> have different signs\r\n            (one is positive and one is negative)\r\n         </ul>\r\n         Write an expression that computes whether...\r\n         <ul>\r\n            <li>...all three names (<b>x</b>, <b>y</b>, and <b>z</b>) are bound\r\n                to equal values\r\n            <li>...all three names (<b>x</b>, <b>y</b>, and <b>z</b>) are bound\r\n                to different values (none the same)\r\n            <li>...two variables store the same value, but the third one is\r\n                different\r\n         </ul>\r\n       <p>\r\n\r\n     <li>Assume that we specify two points in space by definint the x and y\r\n           coordinate of each using\r\n           <b>x1</b>, <b>y1</b>, <b>x2</b>, and <b>y2</b> all which are\r\n           <b>float</b>.\r\n         Write an expression that computes...\r\n         <ul>\r\n            <li>...the distance between these points\r\n            <li>...the slope of the line from the first point to the second\r\n            <li>...whether both points lie on the same line from the origin\r\n            <li>...whether the first point is above the second\r\n            <li>...what quadrant the first point lies in (1st, 2nd, 3rd, or 4th)\r\n            <li>...whether the two points lie in the same quadrant\r\n         </ul>\r\n     <p>\r\n\r\n     <li>Assume that we specify a circle with the definitions\r\n           <b>centerX</b>, <b>centerY</b>, and <b>radius</b>\r\n           and a point by the defintions <b>x</b> ,<b>y</b> all which are\r\n           <b>float</b>.\r\n         Write an expression that computes whether or not the point lies inside\r\n            the circle (include points on the boundary).\r\n     <p>\r\n\r\n     <li>Assume that specify an interval by a pair of <b>int</b> values (the\r\n           ones at the beginning and end of the interval: <b>5</b> and <b>8</b>\r\n           would specify the interval containing the numbers <b>5</b>,\r\n           <b>6</b>, <b>7</b>, and <b>8</b> inclusive.\r\n         We declare <b>b1</b>, <b>e1</b>, <b>b2</b>, adn <b>e2</b> to\r\n           represent the beginning and end of two intervals (all <b>int</b>),\r\n           and <b>x</b> so represent some <b>int</b> value.\r\n         Note that we will guarantee that the intervals are \"well formed\":\r\n           <b>b1 <= e1</b> and  <b>b2 <= e2</b>.\r\n         <ul>\r\n            <li>Write an expression that computes the number of values in an \r\n                  interval beginning with <b>b1</b> and ending with <b>e1</b>.\r\n            <li>Write an expression that computes whether...\r\n               <ul>\r\n                 <li>...<b>x</b> is inside the first interval\r\n                 <li>...<b>x</b> is not inside the first interval\r\n                 <li>...<b>x</b> is inside the first interval but not the second\r\n                 <li>...<b>x</b> is inside either the first or second interval (or both)\r\n                 <li>...<b>x</b> is inside either the first or second interval (but not both)\r\n               </ul>\r\n            <li>Write an expression that computes whether...\r\n               <ul>\r\n                 <li>...the first interval is the same as the second\r\n                 <li>...the first interval ends before the second one begins\r\n                 <li>...the first interval ends on the same value as the second one begins\r\n                 <li>...the first interval is inside the second one\r\n                 <li>...the first interval and the second interval overlap (at least one common value)\r\n                 <li>...the first interval and the second interval do not overlap (no common values)\r\n               </ul>\r\n         </ul>\r\n         Draw pictures to help you visualize the relationships; choose your relational and logical\r\n           operators carefully, and try a few examples to convince yourself that your expressions are\r\n           correct.\r\n         For example, the following picture shows the first interval inside the second.<br>\r\n         <img src=\"images/inside.gif\"></image>\r\n     <p>\r\n\r\n     <li>Assume that we define <b>x</b>, <b>y</b>, and <b>z</b> to refer to\r\n           <b>int</b> values.\r\n         Write an expression that computes the minimum of these three values.\r\n         You may use the <b>min</b> function; its prototype is\r\n           <b>min(int,int) -> int</b> and it computes/returns the minimum of its\r\n           arguments.\r\n     <p>\r\n\r\n     <li>Assume that we defined\r\n         <b>low</b>, <b>high</b>,and <b>x</b> to be <b>int</b> and that we\r\n         guarantee that <b>low <= high</b>.\r\n         Write an expression whose result is <b>low</b> if <b>x</b> is smaller\r\n          than <b>low</b>,  <b>high</b> if <b>x</b> is greater than\r\n          <b>high</b>, and <b>x</b> if it is between these values.\r\n          You may use the <b>min</b> and the <b>max</b> functions (see the\r\n          problem above).\r\n     <p>\r\n\r\n\r\n </ol>\r\n</td>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}