{"url": "https://www.ics.uci.edu/~pattis/common/handouts/introtopythonineclipse/lecture.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n<html>\n\n<head>\n  <title>Python Programming in the Eclipse IDE</title>\n</head>\n\n<body BGCOLOR=\"white\">\n\n<center>\n<h1>Python Programming in the Eclipse IDE</h1>\n<p>\n</center>\n\n\n<!-- Introduction -->\n\n<a name=\"Introduction\">\n<hr align=\"left\" width=\"100%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Introduction</b></td>\n<td width =\"80%\">\n\nThis handout introduces Python programming in the Eclipse Integrated\n  Development Environment (IDE).\nIt is presented partly as a tutorial and partly in a \"cook book\" style: read\n  the text and follow the instructions to gain some hands-on experience\n  operating this software, which we will use extensively when we write, test,\n  debug, and beautify our own programs.\nUse the resulting screen shots (checking them against what appears on your\n  computer) to ensure that you are correctly following these instructions.\n<p>\n\n<!--- For ICS-31 students\nYou will be instructed to type Python statements and even small programs, using\n  language features that we will cover later in the quarter.\nWe will briefly discuss these features, but for now, do not worry about\n  completely understanding what you type.\nInstead concentrate on ensuring that you type everything exactly as it appears\n  here: character-for-character, using the same upper-case or lower-case\n  letters, punctuation, and even spacing.\n<p>\n\n--->\n\nIn the sections below you will learn how to\n<ul>\n<li>Start and Stop Eclipse\n<li>Recognize the parts of the Eclipse Workbench\n<li>Test code in the Python Interpreter\n<li>Create a New a Project in the Eclipse Workbench\n<li>Enter and Edit a Script (a module that runs as a program)\n<li>Run a Script\n<li>Find and Correct Errors in a Script\n<li>Finish a Project\n<li>Use an Old/Existing/Instrutor-distributed Project in the Eclipse Workbench\n</ul>\n<p>\n\nThe Eclipse project itself resides on the\n  <a href=\"http://www.eclipse.org/\" target= \"_blank\">\n  Eclipse.org</a> web page.\nIf you have not already done so, check the second message\n (<b>Install Course Sofware</b>) on the\n  <a href=\"../../../ICS-33/announcements.html\" target=\"_blank\">Announcements</a>\n  link for instructions on how to install Java, Python, and Eclipse (and now\n  to configure Eclipse to run Python).\n<p>\n\nIt is an excellent idea to create a shortcut to Eclipse on the desktop,\n  and once you have created an Eclipse workspace, a shortcut to it on the\n  desktop.\n</td>\n</tbody>\n</table>\n\n\n<!-- Starting/Stopping Ecliplse -->\n\n<a name=\"StartStop\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Starting and<br>Stopping Eclipse</b></td>\n<td width =\"80%\">\nWe start Eclipse by double-clicking (a shortcut to) its icon, which is\n  commonly referred to as the <b>Death Star</b> (from the Star Wars movies).\n<p>\n  <img src=\"pyimages/deathstar.jpg\">\n<p>\nThe instructions for downloading/installing Eclipe include creating this\n  shortcut; for lab machines, you must select\n  <b>Start | All Programs | Python</b> and then double-click\n  <b>Eclipse</b> to start Eclipse.\n<p>\n\nWhile it is loading, Eclipse displays a splash window like the following.\n<p>\n<img src=\"pyimages/splash.jpg\">\n<p>\nAfter loading, Eclipse next displays the <b>Workspace Launcher</b> window.\nIf this is the first time that we have started Eclipse, this window will\n  display a suggested workspace typed in the <b>Workspace</b> pull-down box,\n  as shown below.\nIf we examine this pull-down box, there will be no other items in it.\n<p>\n<img src=\"pyimages/workspacelauncher.jpg\">.\n<p>\n\nThe form of the suggested workspace is\n  <b>C:\\Users\\<i>username</i>\\eclipse-workspace</b>,\n  where <b><i>username</i></b> appears above as <b>pattis</b>.\n<p>\n\nOn subsequent statups, the contents of the pull-down box will default to\n  the last workspace that we used.\nIt is possible to create/use multiple workspaces: the (10) most recently used\n  ones will appear as items in the <b>Workspace</b> pull-down box, with the\n  most recent workspace that we used visible at the top.\nThis information is stored in the <b>eclipse</b> folder (created when Eclipse\n  was installed), in the file\n  <b>configuration\\.settings\\org.eclipse.ui.ide.prefs</b> (which is a text file\n  that we can read and even edit).\n<p>\n\nIf we use just one workspace (recommended), we can put a check in the checkbox\n  <b>Use this as the default and do not ask again</b>, to avoid\n  this window's prompt altogether.\nOr, we can leave this box unchecked (recommended), at the small cost of having\n  to click the <b>Launch</b> button in this window every time that we start\n  Eclipse; on the positive side, whenever we start Eclipse we will be reminded\n  of the folder that it is using for our workspace, which is useful if we need\n  to know the workspace's name but forget which folder we are using as the\n  workspace.\nIt is an excellent idea to create a shortcut on the desktop to this standard\n  Eclipse workspace.\n<p>\n\nGo ahead now and click the <b>Launch</b> button to select the default work\n  space.\nThe progress bar on the bottom of the splash screen progresses to the end\n  (should take under a minute), at which point the splash window will disappear\n  and Eclipse should appear in the following form (although its window will be\n  bigger on our screen).\n<!---\nIf you see a screen with a tab that says <b>Welcome</b>, click where it says\n  <b>Workbench</b>); this screen appears only when you select a new workspace.\n<p>\n<img src=\"pyimages/welcome.jpg\">.\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nThis screen appears only the first time that you start Eclipse on your\n  computer.\nClick the <b>X</b> to the right of the <b>Welcome</b> tab and Eclipse will\n  display its standard window.\n</td>\n</tbody>\n</table>\n--->\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/eclipsestart.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nTo stop Eclipse, we can either select <b>File | Exit</b> from the left-most\n  pull-down menu, or more simply just click the standard terminate window\n  button (<b>X</b>) in the upper-righthand corner.\nIf the latter, Eclipse will prompt for confirmation of termination with the\n  following window.\n<p>\n<img src=\"pyimages/confirmexit.jpg\">.\n<p>\n\nHere too, we can put a check in the <b>Remember my decsion</b> checkbox:\n  doing so says to terminate in the future without prompting for confirmation.\nOr, we can leave this box unchecked (recommended), at the cost of having to\n  click the <b>OK</b> button in this window every time that we stop Eclipse\n  by clicking the terminate window button; on the positive side, we won't\n  accidentally terminate Eclipse, because we need to confirm the termination.\n<p>\n\nIf we ever put a check in one of these \"do not prompt again\" checkboxes,\n  but later want to restore these prompts, we can do it as follows.\nOnce Eclipse appears on the screen, select <b>Window | Preferences</b>.\nThen disclose <b>General</b> (click its disclosre icon) and\n   <b>Startup and Shutdown</b>\n  (ditto) and then click on the <b>Workspaces</b> entry.\nWe should ultimately see the following window (I am running this on my\n  own computer, where my <i>username</i> is <b>pattis</b>).\n<p>\n<img src=\"pyimages/startupshutdownworkspacespreferences.jpg\">.\n<p>\nWe can check or uncheck the <b>Prompt for workspace on startup</b> box \n  for our preference (recommended to leave this box checked), then click\n  <b>Apply and Close</b> (or just <b>Apply</b> to see/set more preferences).\n<p>\n\nNow click on <b>Startup and Shutdow</b> entry. \nYou should see the following window.\n<p>\n<img src=\"pyimages/startupshutdownpreferences.jpg\">.\n<p>\n\nWe can check or uncheck the <b>Confirm exit when closing last window</b> box\n  for our preference (recommended to leave this box checked), then click\n  <b>Apply and Close</b> (or just <b>Apply</b> to see/set more preferences).\n<p>\n\nPractice starting and stopping Eclipse, setting these prompt/confirm\n  preferences as described above, and observing their behavior.\nAfter starting Eclipse, change the size of its main window, and note that when\n  you stop and then restart it, the window will be the same size: Eclipse\n  remembers the size of this window.\nIn fact, once we start using Eclipse for real programming, whenever it starts\n  it will appear exactly as it appeared when we last stopped it\n  (same size, same geometry, same files open, etc).\nTherefore, it is simple to resume working in exactly the same context that we\n  were in when we lat stopped Eclipse.\n<p>\n\nWhile we are examining preferences, let's illustrate one more that is \n  useful.\nSelect <b>Window | Preferences | PyDev | Editor | Auto Imports</b> and\n  <b>uncheck</b> the <b>Do auto import?</b> checkbox (illustrated below) and\n  then click   <b>Apply and Close</b> (or just <b>Apply</b> to see/set more\n  preferences).\n\n<p>\n<img src=\"pyimages/autoimportpreferences.jpg\">\n<p>\nDoing so is especially important for Mac users, relating to our automatic\n  grading program, which I run on my PC.\n</td>\n</tbody>\n</table>\n\n\n<!-- Nomenclature -->\n\n<a name=\"Nomenclature\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Eclipse Nomenclature</b></td>\n<td width =\"80%\">\nThis section contains a terse description of Eclipse using <b>highlighted</b>\n  technical terms to describe its basic layout and operation.\nStart becoming familar with these terms now; we will repeatedly use them during\n  the course, so we will become very familiar with them.\nBecause Eclipse is an <i>industrial-strength</i> tool, and we are using it in\n  an academic setting (an early programming course), we will focus on only its\n  simpler aspects.\nThe most important terms that we will discuss and use are <b>workbench</b>,\n  <b>workspace</b>, <b>perspective</b>, <b>view</b>, and <b>toolbar</b>.\n<p>\n\n<b>Workbench</b>/<b>Workspace</b>:\nThese two terms are closely connected, to the point of having the same prefix:\n  <b>work</b>.\nThe <b>workbench</b> (or more accurately, the workbench window -see the window\n  below) is the Eclipse interface to a <b>workspace</b>.\nThe <b>workspace</b> is a folder that comprises a collection of files/subfolders\n  that store the workspace's preferences (how the workbench window appears on\n  the screen and how it displays/manipulates it contents) and projects\n  (collections of related programming resources -primarily Python modules,\n  but also data files).\nWe interact with a workspace -view and manipulate its preferences and projects-\n  through a workbench window.\nOne of the primary ways we interact with projects in Eclipse is by editing\n  their Python modules resources whilerunning/debugging/beautifying scripts.\n<p>\n\nPreferences specify how a workbench window displays a workspace; projects\n  specify the software that we can develop using the workbench window.\nIn the section above, we started Eclipse and created a new, \"empty\" workspace;\n  actually, it is not really empty: it stores all the standard preferences for\n  the workbench window (stored in a folder named <b>.metadata</b>), but no\n  projects yet.\nThen, the workbench window displayed this \"empty\" workspace.\nThe workspace also records whether each project it contains is open or closed\n  for use (for more details, see the section on \n  <a href=\"lecture.html#Finishing\" target=\"main\">Closing Workspaces</a>).\nFinally a workspace stores preferences that apply to all its projects, and\n  also apply to the workbench displaying the workspace.\n<p>\n\nEclipse is general: we can have any number of workbench windows open, each \n  referring to a unique workspace.\nFor simplicity, we will always use just one workbench window, and it will\n  always refer to the same workspace.\nIn fact, in the following discussion we often will say <b>Eclipse</b> when we\n  mean a <b>workbench window referring to our standard workspace</b>.\nBelow is an example of Eclipse using all the standard preferences, with\n  labels affixed to many of it interesting features.\nIt shows the \"Demo\" project that we are developing.\nThe rest of the this section will examine other technical terms explaining its\n  layout and operation.\n</td>\n</tbody>\n</table>\n<img src=\"pyimages/workbench.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\n<b>Perspective</b>: At any given time, Eclipse displays one <b>perspective</b>\n  of the many that it can display.\nEach different perspective is suited to one specific programming task.\nThe perspective shown above in Eclipse is the <b>PyDev</b> perspective,\n  which we use to develop Python modules (write/run/edit them).\nNotice that the <b>PyDev</b> perspective appears depressed (it is active)\n  towards the top-right of the workbench.\nIt is followed by another icon, indicating the <b>Debug</b> perspective,\n  which we use to debug Python modules (find/correct errors in them).\nWe can switch to any perspective by clicking its icon; click the <b>Debug</b>\n  perspective and you will see its views (discussed below; many are the same);\n  then click the <b>PyDev</b> perspective to return to its views.\n<p>\nIf we want the names of the perspectives to appear in the icon, we can\n  right-click any icon and chose <b>Show Text</b> as follows\n<p>\n<img src=\"pyimages/showtext.jpg\">\n<p>\nand these perspective icons would appear as\n<p>\n<img src=\"pyimages/perspectivetexts.jpg\">\n<p>\n\n<b>View</b>: Each perspective contains a variety of <b>views</b> that allow\n  us to view, navigate, and edit information about a project.\nSo, views are not just for looking: we can use views to change information too.\nA view may appear as a single tab, or it may be one of many tabs in a tabbed\n  window, containing many views, of which only one is active at a time- the\n  top one.\nThe <b>PyDev</b> perspective contains a variety of standard views illustrated\n  above.\nGoing clockwise from the top left,\n<ul>\n<li>The <b>PyDev Package Explorer</b> view is the only tab in a window that\n      shows all the code (modules and libraries, and their files) under a\n      project name.\n    Here the project name is <b>Demo</b> and it contains a module named\n      <b>Script.py</b>.\n    The next line (<b>Python37...</b>) shows the libraries available; we can\n     disclose it (by clicking the <b>&gt;</b>), and if we do, we can then\n    elide it (by clicking the <b>v</b> that replaced the <b>&gt;</b>).\n<p>\n\n<li>An <b>Editor</b> view is a tabbed window containing one tab per file being\n      edited; here the only file being edited is a module named\n      <b>Script.py</b> so there is only one tab in this editor window.\n    The tab contains the name (here <b>Script</b>) of the resource being edited;\n      if we hover over the tab that views a <b>.py</b> file, Eclipse displays\n      the name of the project folder and the module name itself: here\n      <b>Demo/Script.py</b>.\n    If the resource is not in a project (e.g., a module in a library), its path\n      is displayed before its folder's name.\n<p>\n\n<li>The <b>Outline</b> view is the only tab in a window that shows a high-level\n      outline: where names (imports, variables, and functions/methods) in the\n      module in the active editor tab are defined or redefined.\n    When can click a name in the Outline view, the Python code (re)defining\n      that name will appear in its Editor tab; so the Outline view is one way\n      to navigate a large file containing Python code.\n    The <b>Script.py</b> file is trivial, so the outline contains no usefule\n      information for this example.\n<p>\n<!--\n<li>The <b>Problems</b> view (it is one tab in a window, containing other tabs\n      of which <b>Console</b> is the most important) shows a list of all the\n      errors the Python Interpreter found in the project.\n    The <b>Console</b> view shows the input to and output from the script when\n      it runs; this view can also show interaction with the Pythyon Interpreter\n     (see  <a href=\"lecture.html#RunInterpreter\" target=\"main\">Running the\n      Python Interpreter</a>).\n--->\n</ul>\nWe can adjust the sizes of all the views in a perspective.\nIf we remove a view from a perspective, we can restore that view by selecting\n  <b>Window | Show View</b> and then clicking the\n  view to restore, as illustrated below (for restoring the <b>Console</b> view).\n<p>\n<img src=\"pyimages/restoreview.jpg\">.\n<p>\n\nBecause these views are related, some information is propagated into multiple\n  views: e.g., the red indicators that there are syntax errors in the code.\nWhen such errors appear/disappear in/from one window, they often simultaneously\n  appear/disappear in/from others.\n<p>\n\n<b>Toolbar</b>: The workbench toolbar appears under the menu bar that\n  includes the drop-down menus labeled <b>File</b>, <b>Edit</b>,\n  <b>Refactoring</b>, etc.\nThe toolbar's buttons here act as short cuts for common operations in a\n  perspective; we can also invoke these operations with the pull-down menus,\n  but clicking these buttons is faster.\nThe picture above labels the <b>Make New</b>, <b>Debug</b>, and <b>Run/Rerun</b>\n  buttons, which are the most useful.\nThe buttons on the toolbar change when we change the perspective.\nWe can customize toolbars within a perspective, but we will not cover\n  this topic here.\n<p>\n\nGenerally, we can manipulate the perspective and views (in a perspective) in a\n  few interesting  ways.<p>\n<b>Perspectives</b>:\n<ul>\n<li>We can remove a perspective name from the workbench by right-clicking its\n       icon and selecting <b>Close</b>: we did this for the <b>Java</b>\n       perspective, which we don't need, but initially appeared when we\n       installed Eclipse.\n<p>\n<li>We can restore a closed perspective name <b><i>P</i></b> by selecting \n     <b>Window | Open Perspective | <i>P</i></b> or by clicking the\n     <b>Open Perspective</b> button and selecting <b><i>P</i></b>.\n<p>\n<li>We can elide a perspective name, just displaying its icons by \n       right-clicking any perspective and then selecting <b>Show Text</b>\n      (toggling whether its text is shown).\n<p>\n<li>We can rearrange the order of perspectives by closing them all and then\n      restoring them in the order we want them to appear: <b>PyDev</b> followed\n      by <b>Debug</b> is recommended.\n    We can also do this for most perspecives by dragging/dropping them.\n</ul>\n<p>\n\n<b>View</b>:\n<ul>\n<li>We can remove a view by right-clicking its tab and selecting <b>Close</b>,\n      or pressing the <b>X</b> on its tab after the view's name.\n<p>\n<li>We can restore a view <b><i>V</i></b> by selecting\n     <b>Window | Show View | <i>V</i></b>.\n<p>\n<li>If two view tabs share a vertical boundary, we can drag the boundary left or\n      right to change the relative size of the tabs (lengthing one and\n      shotening the other);\n    if two view tabs share a horizontal boundary, we can drag the boundary up or\n      down to change the relative size of the tabs (lengthing one and\n      shotening the other)\n<p>\n<li>We can dock view tabs/windows to create different tilings of a perspective,\n      by dragging and dropping a tab/window in the desired configuration.\n<p>\n<li>We can restore all standard views for a perspective (and their standard\n      tiling) by selecting <b>Window | Perspective Reset Perspective...</b>\n      from the menu.\n</ul>\n\n</td>\n</tbody>\n</table>\n\n\n\n<!-- Running the Interpreter -->\n\n<a name=\"RunInterpreter\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Running the Python Interpreter</b></td>\n<td width =\"80%\">\nIn this section we will discuss how to run the Python Interpreter in Eclipse.\nWe run the interpreter to experiment easily with small amounts of Python code.\nAs beginners, we can easily perform experiments with the Python Interpreter to\n  help us learn simple Python language features: as more experienced\n  programmers, we can easily investigate more complicated language features and\n  libraries, while writing programs without leaving Eclipse.\nWe will take both roles as the quarter progresses, so it is important to know\n  how to access and use the Python Interpreter in Eclipse.\n<p>\n\nThe Python Interpreter runs in a <b>Console</b> view.\nWhen we start Eclipse we should see one <b>Console</b> view;\n  if we don't, we can select\n  the <b>Window | Show View</b> command illustrated in the previous section to\n  create a console tab.\nOnce we see a <b>Console</b> view, click it, then click the Open Console control\nicon <img src=\"pyimages/openconsolecontrol.jpg\"> (located on the toolbar\n  holding the <b>Console</b> view) and then click <b>6 PyDev Console</b> as\n  illustrated below.\n<p>\n<img src=\"pyimages/openconsolemenu.jpg\">\n<p>\n\nThe following pop-up menu will appear, with the first\n  (<b>Console for currently active editor</b>) <!--- or second\n  (<b>Python console</b>)--> radio button pushed (as is shown below).\n<p>\n<img src=\"pyimages/whichinterpreter.jpg\">\n<p>\nClick <b>OK</b>.\nThe following will appear in the <b>Console</b> view (which appears every time\n  we start the Python Interpreter).\n<p>\n<img src=\"pyimages/pythoninconsole.jpg\">\n<p>\n\nWe can type Python code at the green triple chevron prompt (&gt;&gt;&gt;);\n  when we press the &crarr; key (aka Enter), the Python Interpreter will run\n  our code, print its result, and prompt us again.\nThis is know as REPL: Read (a command or expression), Execute/Evaluate it,\n  Print the result, and Loop back to do it over again.\nEnter the Python code that appears in blue below, and verify that the Python\n  Interpreter prints the information that appears in black.\n<p>\n<img src=\"pyimages/pythoninterpreter.jpg\">\n<p>\n\nIf we enter a line with an error (e.g., misspell <b>sqrt</b> as <b>sqr</b>)\n  the Python Interpreter will display a red error message: there is no\n   <b>sqr</b> function in the <b>math</b> module.\nInstead of retyping this line correctly, we can press the <b>&uarr;</b>\n  (up arrow) key located on the numeric keypad (on the right of the keyboard)\n  under 8 (make sure <b>NumLock</b> is off).\nThis causes the Python Interpreter to redisplay the previous line that we typed,\n  and we can now edit this line: e.g., by using the <b>&larr;</b> (left arrow)\n  key located on the numeric keypad (on the right of the keyboard) under 4, to\n  move the cursor left to the spot where we forgot to type the <b>t</b>, and\n  type the <b>t</b>.\nThen we can press the <b>End</b> key located on the numeric keypad (on the\n  right of the keyboard) under 1 to move the cursor to the end of the line and\n  finally press &crarr;.\n<p>\n<img src=\"pyimages/pythoninterpretererror.jpg\">\n<p>\nAlternatively, we can press the <b>PgUp</b> button but only when the cursor is\n  <b>at the beginning of the last &gt;&gt;&gt;</b> prompt and summon a\n  <b>Command history</b> scrollable window, in which we can select any command\n  we typed previously and re-execute it by clicking and and then clicking\n  <b>OK</b> or double-clicking the command.\n<p>\n<img src=\"pyimages/pythoninterpretercommandhistory.jpg\">\n<p>\nIf we type characters in the bottom text field, the main <c>Command history</b>\n  will show only those commands that typed starting with those characters.\n<p>\n\nNote that when we are editing a line in the Python Interpreter, we can also use\n  the <b>Home</b> key to move the cursor to the start of a line, the &rarr; key\n  to move the cursor right, the <b>Backspace</b> key to remove the character\n  before the cursor and the <b>Del</b> key to remove the character after the\n  cursor.\nIn this way it we can easily correct any code we mistype in the interpreter.\nBy experimenting with the interpreter, typing correct and incorrect commands\n  -and fixing the incorrect ones- we can become proficient in using the\n  interpreter.\n<p>\n\nWe can fill the Eclipse window with the Console by double-clicking its tab or \n  by clicking the Maximimze icon <img src=\"pyimages/maximizeicon.jpg\">.\nThe result appears as follows (with the <b>PyDev Package Explorer</b>, \n  <b>Editor</b>, and <b>Outline</b> views minimized: the first on the left;\n  the second two on the right (<b>Outline</b> on top of Script).\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/consolemaximized.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nWe can return it to its original size by double-clicking its tab again, or by\n  clicking the midimize/restore icon <img src=\"pyimages/restoreicon.jpg\">.\n<p>\nFinally we can click the triangle to the right of the Choose Active Console icon\n  <img src=\"pyimages/chooseactiveconsoleicon.jpg\"> to see all active\n  <b>Console</b>s:\n  at present, one run of the <b>Demo.py</b> script (numbered <b>1</b>) and one\n  <b>PyDev Console</b> (numbered <b>2</b>, with a circle to its left,\n  indcicating that it is the one we see in the <b>Console</b> view).\n<p>\n<img src=\"pyimages/activeconsoles.jpg\">\n<p>\nWhen we have multiple active <b>Console</b>s, we can click any line here to\n  select viewing that <b>Console</b>.\nWe can also click the <img src=\"pyimages/chooseactiveconsoleicon.jpg\"> icon\n  itself to show the \"next\" <b>Console</b>: \"next\" means the one labelled with\n  the higher number, or the one labelled <b>1</b> if there is no higher number.\n</td>\n</tbody>\n</table>\n\n\n\n<!-- Starting a Programming Project -->\n\n<a name=\"StartProject\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Starting a New Programming Project</b></td>\n<td width =\"80%\">\nIn this section we will discuss how to start a new programming project,\n  and how to manipulate the perspectives and views on the workbench window\n  displaying that project.\nIn the next few sections we will learn what we need to know to develop programs\n  in a project: how to write and edit modules; how to run modules as\n  scripts; and how to find and fix syntax and execution errors in modules.\n<p>\n\nStart Eclipse as described above, which should look as follows.\n</td>\n</tbody>\n</table>\n<img src=\"pyimages/startnewproject.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nIf your Workbench doesn't look exactly like this one, try to use the commands\n  covered earlier in this handout to get it too look exactly the same.\nFor example, you might have to open/close views, make the <b>PyDev</b>\n  perspective active, change the perspective icons to include text, etc.\n<p>\n\nTo start a new project, click the down-arrow that is directly to the right of\n  the <b>New</b> icon (<img src=\"pyimages/newicon.jpg\">) on the main toolbar\n  for the <b>PyDev</b> perspective and then select <b>PyDev Project</b>, as\n  shown below.\n<p>\n<img src=\"pyimages/newpydevproject.jpg\">\n<p>\n\nEclipse will display the following window.\n<p>\n<img src=\"pyimages/newpydevprojectwindow.jpg\">\n<p>\n\nIn this window, I have started creating a new project folder.\nI have typed in the project name <b>Demo</b>.\nEclipse has automatically filled in the Directory textbox with the name of the\n  workspace folder it is using (because the <b>Use default</b> checkbox is\n  checked), followed by the project name that I typed.\nWhen we are done entering all the information (typing the project's name,\n  and ensuring that all the radio buttons and puldown menus are corect,\n  specially selecting <b>Grammar Version</b> that is the default\n  (<b>Same as intepreter</b>), we click <b>Finish</b>.\n<p>\n\nEclipse will create a folder with the name <b>Demo</b> in its workspace folder;\n  when we create modules (files ending in <b>.py</b>; see below) for this\n  project, they will be created in this <b>Demo</b> folder.\nEclipse will update its workbench to show <b>Demo</b> project in its\n  <b>PyDev Package Explorer</b> view; we can disclose the project to see\n  it contents (when we create modules, they will appear here).\nHere is what the <b>PyDev Package Explorer</b> view looks like, with a\n  disclosed project.\n<p>\n<img src=\"pyimages/emptyproject.jpg\">.\n<p>\nNote that if we misspell the project name, we can right-click it and choose\n  the <b>Rename</b> option.\n<p>\n<!-- old way\nTo create a new module (the script that we are going to run) inside this\n  project, first select  the Demo project (which should appear as\n  <img src=\"pyimages/selectedproject.jpg\">) and then click the down-arrow on\n  the <b>New</b> icon (<img src=\"pyimages/newicon.jpg\">) that we used to create\n  a new project, but this time select <b>PyDev Module</b>, as shown below.\n--->\nTo create a new module (containing the script that we are going to run) inside\n  this project, first right-click the <b>Demo</b> project (which should appear\n  as <img src=\"pyimages/selectedproject.jpg\">) and then hover over <b>New</b>\n  and select <b>PyDev Module</b>, as shown below.\n<p>\n<img src=\"pyimages/newpydevmodule.jpg\">\n<p>\nWe can also right-click the <b>Demo</b> project and then\n  click the <b>New</b> pull down triange and select <b>PyDev Module</b>.  \nEclipse will then display the following window.\n<p>\n<img src=\"pyimages/newpydevmodulewindow.jpg\">\n<p>\n\nIn this window I have started creating a new module.\nEclipse has automatically filled in the Source Folder textbox with the name of\n  the project folder (<b>Demo</b>) so the module file (<b>Script.py</b>) will\n  be put there.\nIf you do not see anything in the Source Folder textbox the best thing to do is\n  to <b>Cancel</b> the module, then go back and select the <b>Demo</b> project\n  and start creating a new module again (or you can type <b>/Demo</b> into this\n  textbox).\n<p>\nEclipse starts by putting the cursor in the <b>Package</b> textbox.\nLeave that textbox empty and instead select the <b>Name</b> textbox.\nType the module name, <b>Script</b>, there (Eclipse will add the <b>.py</b> to\n  the name of any Python module).\nFinally, click <b>Finish</b>.\n<p>\nEclipse will now show the following window.\n<p>\n<img src=\"pyimages/template.jpg\">\n<p>\nIt should automatically highlight <b>&lt;Empty&gt;</b>: if it does, then\n  click <b>OK</b>; if it doesn't, either double-click\n  <b>&lt;Empty&gt;</b> or single-click it and then click <b>OK</b>.\n<p>\n\nEclipse will create a file named <b>Script.py</b> in the project folder of the\n  <b>Demo</b> project and displays the contents of this file in an editor tab\n  with then name <b>Script</b>.\nInitially, this module contains just a comment about when the module was\n  created and by whom.\n<p>\n\nEclipse will update its workbench to look as follows.\nNotice that Eclipse will automatically put some information into any file it\n  creates (even ones whose template is <b>&lt;Empty&gt;</b>).\n</td>\n</tbody>\n</table>\n<img src=\"pyimages/demoproject.jpg\">.\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nNote that if we misspell the module name, we can right-click it and choose the\n  <b>Rename</b> option.\nBefore continuing to the next section (how to write and edit Python code), we\n   will briefly explore how to manipulate windows and views, to customize them.\n<p>\n<ul>\n<li><b>Change Eclipse (Workbench Window) Size</b>:\n    We can increase or decrease the size of the entire Eclipse window by\n      hovering over one of its boundaries (or corners) until the cursor turns\n          into two opposite-pointing arrows, and then dragging and dropping the\n          boundary (corner) to the desired location\n    The view windows will adjust their size proportionately.\n<p>\n\n<li><b>Change Horizontal/Vertical Window Space Allocation</b>:\n    We can change the horizontal space allocation among windows by moving the\n      mouse to the blue vertical boundary between any windows (the mouse icon\n      becomes two horizontal arrows), and then dragging the boundary left\n      or right.\n    Likewise, we can change the vertical space allocation among windows by\n      moving the mouse to the blue horizontal boundary between any windows (the\n      mouse icon becomes two vertical arrows), and then dragging the boundary\n      up or down.\n    Window(s) on one side of the boundary expand as window(s) on the other\n      side shrink.\n    Scrolling bars may appear/disappear as needed by these adjustments.\n<p>\n\n<li><b>Minimize/Restore/Maximize Views</b>:\n    We can minimize or maximize any window by pressing the required\n      icon, which appears at the right of any tabs in that window: \n      (<img src=\"pyimages/minimizemaximize.jpg\">).\n    If we minimize a window, we can restore it similarly\n      (<img src=\"pyimages/restoreicon.jpg\">);\n    if we maximize a window, we can minimize or midimize/restore it as well\n      (<img src=\"pyimages/minimizerestore.jpg\">).\n    We can also toggle between a midimized/restored and maximized view by\n       double-clicking its tab (the most useful operation of the bunch).\n<p>\n<li><b>Delete/Restore Views</b>:\n    We can delete any view/tab by clicking its terminate (X) button.\n    We can restore any deleted view <b><i>V</i></b> via the <b>Window</b>\n       pull-down  menu by selecting <b>Window | Show View | <i>V</i></b>.\n<p>\n<li><b>Move Views/Tabs</b>:\n    We can move any tab to any view.\n    We do so by dragging the tab to the view that we want it to be positioned\n      in: before, after, or between any other tabs for that view.\n    We can also use this mechanism to change the order of the tabs in any\n      view.\n    For example, we can move the <b>Console</b> view so that it appears to the\n      right of the <b>Script</b> tab in the  <b>Editor</b> view; we can\n      then change move to appear to the left of the <b>Script</b> tab.\n<p>\n<li><b>Rearrange View/Tab Window Docking Structure</b>:\n    We can rearrange how the windows dock with each other, to allow for\n      increased flexibility in how views appear within a perspective.\n    In docking operations, we click a tab or entire view (to select it)\n      and then drag and drop it to the desired location (which can even be\n      outside the Eclipse window: just floating on the desktop!).\n    When dragged, one of a set of possible outlines will appear that indicates\n      how the new docking will be performed.\n    Here is a short movie illustrating \n      <a href =\"pyimages/docking.avi\">docking commands</a> in Eclipse.\n    (download this <b>.avi</b> file; if double-clicking does not run it\n     correctly (with picture and sound), try hovering over it\n      -or right-clicking it- and clicking <b>Windows Media Player</b>.)\n   <p>\n   By choosing <b>Window | Perspective | Reset Perspective...</b> from the menu,\n     Eclipse will restore all the views in a perspective to the standard one\n     for that perspective.\n<p>\n<li><b>Disclose in the PyDev Package Explorer View</b>:\n    In the <b>PyDev Package Explorer</b> view, click the disclosure trianglesd\n      to examine/discose their contents (going from <b>&gt;</b> to <b>v</b>) or\n      hide/elide their contents (going from <b>v</b> to <b>&gt;</b>).\n</ul>\nPractice all these operations until you can make Eclipse (the workbench window)\n   appear in any format that you desire.\n</td>\n</tbody>\n</table>\n\n\n<!-- Editing a Module -->\n\n<a name=\"EditModule\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Editing a Module/Script File</b></td>\n<td width =\"80%\">\nWe edit Python modules in tabs in the <b>Editor</b> view, mostly using standard\n  text editing commands.\nClick the <b>Edit</b> pull-down menu for a list of commands and their\n  keyboard shorcuts.\nAlso click the <b>Source</b> pull-down menu for additional commands involving\n  commenting, reformatting, and generating/organizing the code in a module.\n<p>\n\nWhenever we create a new module, or double click any module in the \n  <b>PyDev Package Explorer</b>, Eclipse will add a view/tab for editing that\n  module in the editor window (if such a view is not already present).\nSometimes project include more than one file.\nWithin an editor window, we can manipulate views/tabs for different files as\ns  described above.\n<p>\nTo add a second <b>Editor</b> view/tab for a module -so that we can view two\n  parts of it simultaneously- we select the tab to duplicate and select the\n  <b>Window | Editor | Toggle Split Editor</b> command (choosing a\n  <b>Horizontal</b> or <b>Vertical</b> split).\nIf we choose a horizontal split as follows\n<p>\n<img src=\"pyimages/split.jpg\">.\n<p>\na second view (not a tab with a name) will appear in the <b>Editor</b> view\n  under the <b>Script</b> tab.\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/neweditorpostdock.jpg\">.\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nIf we issue this <b>toggle</b> command again on the <b>Script</b> tab, Eclipse\n  will merge the two views back into one\n<p>\n\nEclipse should be configured so that the files we edit show their line numbers;\n  as programmers, we will find multiple uses for these numbers.\nIf you do not see these number, right-click in the left margin in any Editor\n  view (e.g., under the Python module <img src=\"pyimages/pythonmoduleicon.jpg\">\n  icon) and then select <b>Show Line Numbers</b> to toggle its \"check\".\nWe can use the same command to remove line numbers, by toggling its \"check\".\n<p>\n<img src=\"pyimages/showlinenumbers.jpg\">\n<p>\nMulti-digit line numbers will be right-aligned.\nWhen Eclipse is configured to show line numbers, it will continue to show line\n  number each time that we start Eclipse (unless we explicitly reconfigure it).\n<p>\n\nHere is the most important information about the Eclipse editor:\n<ul>\n<li>a single click positions the cursor\n<li>a double click selects the entire clicked token\n<li>a triple click selects the entire clicked line\n</ul>\nAfter clicking, dragging the cursor selects multiple characters, tokens, or\n  lines (depending on whether the dragging started after a single-, double-, or\n  triple-click).\nThis information is especially important for deleting code and copying/pasting\n  code.\nWhen you start editing your own modules, practice selecting text (characters,\n  tokens, and lines) and copying/pasting it.\n<p>\n\nHere is the Python code for a complete Python module that I typed into Eclipse:\n  both the <b>Editor</b> and <b>Outline</b> views are present, because Eclipse\n  changes the <b>Outline</b> view as I type code into the Editor view.\nFor now, read the information below to learn how to interpret the contents of\n  the <b>Editor</b> and <b>Outline</b> views.\nAt the end of this section you will be asked to duplicate this code in Eclipse.\nAnd in the next section, we will learn how to run this code.\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/editedfirstscript.jpg\">.\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nNote the annotations indicating\n<ul>\n<li>The file being edited has changed (see the file-change indicator).\n<li>Disclosure circles appear for multi-line code: here a multi-line string and\n      a multi-line function/method definition, both fully disclosed.\n    By clicking, we can elide these to a single line or disclose their full\n      contents.\n<li>Which lines have changed (see the purple coloring of the line numbers);\n      if the change is one or more deleted lines, a small horizontal line\n      appears where the lines <i>used to</i> be).\n<li>As the <b>Editor</b> view changes, the contents of the <b>Outline</b> view\n      changes automatically: here we have defined a <b>cheer_up</b> as a\n      function/method (see big <b>M</b> in frontof it) and <b>sadness</b> as a\n      variable.\n</ul>\n<p>\n\nTo save the changed contents of an <b>Editor</b> view to its file, right-click\n  in the view and select <b>Save</b>; note that this option will not be\n  selectable if the file has not changed: if the file-change indicator is\n  absent.\nAnother way to issues this command is just by typing <b>ctrl/s</b> on the\n  keyboard when this tab is selected.\nAfter issuing this command, the file is updated to contain all the information\n  currently in the tab for this module.\n<p>\n\nIf instead we right-clicked the view and selected the <b>Revert File</b>\n  command, the view would would be restored to the file's contents when it was\n  last saved.\nSo, use <b>Save</b> and <b>Revert File</b> carefully: we will be using\n   <b>Save</b> much more than <b>Revert File</b>, and we can always select the\n   <b>Edit | Undo Typing</b> command (or just press <b>ctrl/z</b> to undo any\n   changes (and selecting this command multiple times undoes multiple changes;\n   if we go too far with <b>ctrl/z</b>, we can press <b>ctrl/y</b> to redo\n   undone commands).\nIf we issued the <b>Save</b> command in the window above, it would be updated\n  and appear as follows.\n<p>\n<img src=\"pyimages/savedfirstscript.jpg\">\n<p>\nNote the disappearance of the asterisk (the file-changed indicator) and the\n  purple change bars.\nOften, if we forget to save a file, and perform some othe operation in Eclipse\n -such as running a script- Eclipse will ask us whether to save the file(s)\n first.\n<p>\nIn the Eclipse editor, whenever we type an opening delimiter -e.g., a\n  parenthesis, brace, bracket, or quotation mark- the editor automatically\n  supplies the matching closing delimeter, and then repositions the cursor\n  between the two so, that we can easily type the delimited entity.\nRelated to this behavior, if the cursor is followed by a closing delimiter, and\n  we type that same closing delimiter, the Editor just moves the cursor past it.\nThis editor behavior can be a little confusing, until we get used to it; but\n  for writing programs, this is useful behavior.\n<p>\nLikewise, whenever we double-click directly after an opening delimiter (except\n  for the quotation mark), the editor automatically highlights all information\n  between that delimiter and its matching closing delimiter.\nBelow I double-clicked just to the right of the first opening parenthesis on \n  line 10.\n<p>\n<img src=\"pyimages/delimiterhighlight.jpg\">\n<p>\nThis operation -matching opening and closing delimiters- is often useful when\n  we are debugging (removing errors from) our programs: errors related to\n  correctly matching opening to closing delimiters.\n<p>\n\nWe can hide any mult-line code (here the top string and <b>cheer_up</b>\n  function/method) from the Editor view by clicking its disclosure\n  circle.\nGenerally throughout Eclipse clicking on a <b>+</b> means disclose the elided\n  information; clicking on a <b>-</b> means hide the disclosed information.\nIn the Editor view below, we have hidden the <b>cheer_up</b> function/method:\n  notice how it shows the header of the method, but not its body, instead \n  showing <img src=\"pyimages/elideicon.jpg\">.\nWith this mechanism we can temporarily hide the parts of our Python code that\n  we are not currently interested in seeing in detail, allowing us to see\n  more code in the tab that we are interested in seeing.\n<p>\n<img src=\"pyimages/elidededitorwindow.jpg\">\n<p>\n\nIn fact, if we hover over a disclosure circle that is eliding information, the\n  cursor will change to a hand (not shown below) and Eclipse will temporarily\n  display the elided information in a yellow box, while keeping it elided in\n  the Editor view (so we can peek at it).\n<p>\n<img src=\"pyimages/hoverelided.jpg\">\n<p>\n\nIf we hover over a name in an Editor view, Eclipse shows us something \n  interesting about that name: its definition.\n<p>\n<img src=\"pyimages/hovername.jpg\">\n<p>\n\nIf we click on a name in the Editor view, Eclipse selects that name as a token\n  and shows us other places in that Editor window where this same name appears,\n  by putting the name in a yellow background.\n<p>\n<img src=\"pyimages/clickname.jpg\">\n<p>\n\nLikewise, in complicated modules, with many names, we can use the <b>Outline</b>\n  view to rapidly examine selected names in the module.\nBy clicking an entry in the Outline view, Eclipse shows us where it was defined\n  in the Editor view (its defintion is outlined in blue) and where it is used\n  (outlined in yellow).\n<p>\n<img src=\"pyimages/outlinetoeditor.jpg\">\n<p>\n\nFinally, whenever we start typing a token, Eclipse displays possible\n  completions for that token based on Python keywords.\nUntil it recognizes a correct token, Eclipse marks the code with a syntax\n  error icon (<img src=\"pyimages/syntaxerroricon.jpg\">), indicating an error\n  (as illustrated below).\nWe will soon learn how to find and fix Python syntax errors in Eclipse.\nNote that because we typed a p, the <b>*</b> indicator once again prefaces\n  <b>Script</b>.\n<p>\n<img src=\"pyimages/keywordcompletion.jpg\">\n<p>\n\nWe can continue typing the token, or double-click one of the keywords to have\n  Eclipse complete the token.\nIf we press &crarr; Eclipse will complete the token with the highlighted\n  completion (and we can use the &uarr; and &darr; keys to scroll through the\n  possible completions before using &crarr; to make our selection).\nDon't be distracted by this mechanism; it is probably best to just keep\n  typing your code and ignore the completions.\nPressing <b>Shift/&crarr;</b> tells Eclipse to ignore word complettion for this\n  word.\n<p>\n\nIn addition if we press the <b>ctrl/space</b> command when Eclipse present us\n  with keyword completions, it will present us with other \"useful\" code that\n  might go here.\nBelow I have highlighted the <b>pow</b> selection, and Eclipse provides me with\n  information about it in yellow on the right.\nI can scroll through or select one of these entries as described above.\n<p>\n<img src=\"pyimages/othercompletions.jpg\">\n<p>\nAgain, it is probably best to ignore these other completions for now.\nThere is a delicate balance beetween what information you should supply and\n  what information Eclipse should provide.\n<p>\nNow it is time to go back and enter into Eclipse all the code illustrated in\n  this section, and reread and practice doing all the operations discussed.\nRemember to type the code carefully, with letters in their correct case, proper\n  punctuation, and proper spacing.\nWatch carefully what happens when you pres &crarr; on lines that do or don't\n  end with a colon (and what the backspace key does on indented lines).\nOnce you are done entering this code, you can go to the next section and learn\n  about executing/runnning it.\n</td>\n</tbody>\n</table>\n\n\n<!-- Running a Module/Script -->\n\n<a name=\"RunScript\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Running a Module/Script</b></td>\n<td width =\"80%\">\nA module of Python code that is runnable (sometimes called \"launchable\") is\n  called a script; other modules contain code that acts as a library of names,\n  and these aren't runnable.\nTo run a script that we are editing, click the Run icon:\n  <img src=\"pyimages/rerunicon.jpg\">.\n<!---old meaning of run/rerun\n<ul>\n<li> Save it: right-click in the editor view and select <b>Save</b>\n     or press <b>ctrl/s</b>; in either case the file-changed indicator should\n     disappear\n<li> Run it: right-click in the editor view for that module, and \n       then select <b>Run As</b> and <b>Python Run</b>\n</ul>\nIf we run a Python script before saving it, we will see the following window\nIf we ever see this window, we should immediatley put a check in the\n  <b>Always save resources before launching</b> \n  checkbox and then click <b>OK</b>.\nIn this way, whenever we run the script, Eclipse will automatically save our\n  script before Eclipse runs our script (which is what we always want to do);\n  and we won't see this window again.\n-->\nWe assume here that there are no syntax or execution errors in our script (there\n  won't be if we typed it exactly as shown above): see the next section for\n  information on correcting syntax and execution errors.\n<p>\nThe first time we run a Python project, Eclipse will display the following\n  <b>Run As</b> pop-up  window.\n<p>\n<img src=\"pyimages/saveandlaunch.jpg\">\n<p>\nClick on <b>Python Run</b> and then click <b>OK</b>.\nPython will save the file for this module and then run its script;\n  if there is no <b>Console</b> view in which to run the script.\n  Eclipse will create a new one.\n<p>\n<blockquote>\nIf the <b>Console</b> view ever disappears, we can always bring it back by \n  selecting <b>Window | Show View | Console</b>.\nWe have already seen one <b>Console</b> view in connection with running the\n Python Interpreter.\nIn fact, if we already have a <b>Console</b> view that shows the Python\n  Interpreter running, it is replaced by a <b>Console</b> view that shows the\n  the script running; the Python Interpreter is still running, and we will see\n  how to bring it back into the <b>Console</b> view at the end of this section\n  (also see the end of the <b>Running the Pyton Interpreter</b> section above).\n</blockquote>\nWhen run this way, the Python script above displays the following.\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/run.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nFirst, notice that information entered by the user appears in a green font;\n  information displayed by the computer appears in a black font.\nAlso notice that the line below the <b>Console</b> view shows that the\n  script has run to completion: it is <b>terminated</b>.\nThe interaction appears in the contents of the <b>Console</b> view: if it\n  does note fit entirely in this view, its contents can be scrolled -both\n  vertically and horizontally.\nOf course we change the relative sizes of the <b>Editor</b> and <b>Console</b>\n  views, or can double-click the <b>Console</b> view to maximize it.\n<p>\nThere are two useful tool buttons to the right of the <b>Console</b> view.\nImmediately to the right is the <b>Terminate</b> button, a faded-red square\n  that stops a running script (it is faded here, because it cannot be\n  selected: the script has already terminated).\nThe next one is the <b>Remove Launch</b> button, a grey X, which clears the\n  contents of the <b>Console</b>; Eclipse does this automatically, if a\n  terminated script is rerun (so only the latest run will appear in the\n  <b>Console</b>).\n<p>\nTry clicking the <b>Remove Launch</b> button: it will clear the console;\n  then click the <b>Run</b> button again.\nThe <b>Console</b> view below shows this script in the middle of running;\n  it is waiting for the user to enter a number.\n<p>\n<img src=\"pyimages/running.jpg\">\n<p>\nHere the line below the <b>Console</b> view does NOT indicate that the\n  script has terminated.\nSo, the <b>Terminate</b> button is bright red, but now the <b>Remove Launch</b>\n  button is Grey: a script must be terminated before it can be removed.\nPres the <b>Terminate</b> button to terminate the script.\nThe <b>Console</b> view now shows as\n<p>\n<img src=\"pyimages/terminated.jpg\">\n<p>\nRun the script again.\n<p>\nIf we don't enter a number for this run, and rerun the same script without\n  terminating the first, Eclipse will do it in another console (remembering\n  both but displaying only the later).\nSuppose we do enter the number <b>5</b> here so the second run terminates.\nWe can see both consoles by clicking the triangle to the right of the Choose\n  Active Console icon <img src=\"pyimages/chooseactiveconsoleicon.jpg\">.\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/activeconsoles2.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nHere it shows the second launch has terminated, but the first launch is still\n  running.\nWe can remove the current (second) launch and/or just select the first launch\n  to show it in the <b>Console</b> view (and continue running it).\nWhen we rerun the same script, Eclipse will reuse the <b>Console</b>\n  view with this terminated script, erasing its original contents first.\nYou should experiment with runing, terminating, and removing runs/launches,\n  using the buttons mentioned above and the arrow to the right of the \n  Choose Active Console icon.\n<p>\n<!---\nOnce we have successfully run a script, we can use the <b>Rerun</b>\n  button on the workbench toolbar (<img src=\"pyimages/rerunicon.jpg\">) to\n  rerun the script easily.\nHow do we know whether or not we can use this shortcut?\nIf we hover over this button it will will typicall display\n  <b>Run <i>P S</i></b> where <b><i>P</i></b> is the name of \n  the Project and <b><i>S</i></b> is the name of the file that contains the\n  script Eclipse will run if we click this button\n  (here <b>Run Demo Script.py</b>).\nSo, if we have previously run the <b>Script</b> script in the <b>Demo</b>\n  project, hovering over this button would show.\n<p>\n<img src=\"pyimages/rerunhover.jpg\">\n<p>\n<!---\nHovering over this button might also show <b>Run As...</b>.\nIf it does, clicking this button will bring up the following window.\n<p>\n<img src=\"pyimages/runas.jpg\">\n<p>\nIn which case we can select <b>Python Run</b> and click <b>OK</b> or\n  double-click <b>Python Run</b>.\nHeck, also talk about the triangle pulldown from which we can launch\n  any recently run scrips\nIf it does not show the script we want to run, revert to the standard way to\n  run a script: right-click in the Editor tab for that script, and \n  then select <b>Run As</b> and <b>Python Run</b>.\n<p>\n--->\nFinally let's briefly examine the most useful buttons (labeled below) on the\n  <b>Console</b> toolbar.\nThey are useful when we are running many scripts (including the Python\n  Intepreter) and need to switch among them or terminate/remove them all.\nNote that sometimes some of these buttons are missing or gray, in which case\n  Eclipse believes that they would be useless in the current context.\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/consoletoolbar.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\n<!---\n<img src=\"pyimages/consoletoolbar.jpg\">\n--->\n<p>\nThe most important thing to say here is that we need to terminate a launch\n  before we can remove it from the <b>Console</b> view.\nThere are two ways to do each.\n<ol>\n<li><b>Terminate Current Launch</b>: terminate the script running in the\n  <b>Console</b> view.\nIt might be waiting for input, producing lots of/no output (talkative and\n  silent infinite loops).\n<b>It is an excellent idea to ensure that each running script is terminated\n  before you rerun it</b> to avoid clogging the computer with running scripts.\n<p>\n<li><b>Remove Current Launch</b>: remove the terminated script from the\n  <b>Console</b> view (it must be already terminated to remove it).\nIf there are other scripts running (or the Python Interpreter is runnning)\n  one of those will take the place of the removed launch in the <b>Console</b>\n  view.\nSee <b>Display Active Console</b> or <b>Cycle through Active Consoles</b> to\n  select any other launch to put in the <b>Console</b>.\n<p>\n<li><b>Remove All Terminated Launches</b>:\n   remove all terminated scripts from appearing in the <b>Console</b> view.\nThis is a big cleanup operation to get rid of (so they will never be seen again)\n  all terminated scripts.\nYou might want to keep around multiple terminated scripts, to see the\n  different outputs they produce (but won't need to do this often).\n<p>\n<li><b>Terminate Current Launch and Rerurn</b>:\n   terminate the current launch and rerun it in the same <b>Consolve</b> view.\n<p>\n<li><b>Terminate All Launches</b>: terminate all scripts running in all\n  <b>Console</b> views.\nThis is a big cleanup operation to terminate all scripts; typically it is\n  followed by removing all these terminated scripts from the <b>Console</b>\n  view.\n<p>\n<li><b>Display Selected Console</b>:\n   select which console to show in the <b>Console</b> view.\nClick this black triangle to get a list of all scripts (running or terminated\n  but not removed) and all Python Interpreters, which can be shown in the\n  <b>Console</b> tab; choose which one to show.\n<p>\n<li><b>Cycle through Active Consoles</b>: see the next script in the\n  <b>Console</b> view.\nRepeated clicking this button cycles through all scripts running and\n  terminated (but not removed) and all Python Interpreters that can be selected.\n<p>\n<li><b>Open Console</b>:\n   we used this to open the Python Interpreter in a Console tab.\nWe can also use it to create more Console tabs, but that option is not very\n  useful.\n<p>\n</ol>\n<p>\nThe biggest problems with <b>Console</b> views is that whenever we run a script\n  (or start a Python Interpreter) it takes over the <b>Console</b>.\nIf we need to see other launches, we must use the black triangle to the right\n  of the <b>Display Selected Console</b> button to select one, or click the\n  button itself to cycle through the various launches.\nIt might be simpler to have multiple <b>Console</b> view tabs, but Eclipse\n  doesn't support this features.\n<p>\nPractice all these operations until you are comfortable using the\n  <b>Console</b> view while running and rerunning programs, and using the\n  Python Interpreter.\n</td>\n</tbody>\n</table>\n\n\n\n\n<!-- Correcting Syntax Errors-->\n\n<a name=\"CorrectingSyntax\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Finding and Fixing<br>Syntax and Execution Errors</b></td>\n<td width =\"80%\">\nThe process of debugging involves first finding and correcting syntax errors,\n  so the program can run, and then correcting execution errors, so that the\n  program will run correctly (produce the correct results).\nThis section discusses how to debug both syntax errors and execution errors,\n  using the standard <b>PyDev</b> perspective; a later handout discusses how to\n  use the <b>Debug</b> perspective to help debug more complicated execution\n  errors.\n<p>\nThe universal color for a syntax error indicator in Eclipse is red; the\n  universal indicator for a syntax error in Eclipse is a red backgound:\n  typically Editor tabs show a red circle containing a white X\n  (e.g., <img src=\"pyimages/syntaxerroricon.jpg\">) to the left of any line\n  with a syntax error (with a red rectangle at the end of the line, while the\n  <b>PyDev Package Explorer</b> view shows a red rectangle containing a white X\n  (e.g., <img src=\"pyimages/syntaxerroricon2.jpg\">) next to any module that\n  contains one or more errors.\n<p>\nOften a single syntax error results in multiple red boxes appearing in multiple\n  views.\nLikewise, the universal color for a warning indicator in Eclipse is yellow.\nYou must stop and fix an error, but you just need to be cautious with a warning\n  (just like road signs).\nWe will discuss when to pay close attention to warnings later in the quarter.\n<p>\nNote that if we click the <b>Project</b> pull-down menu, the item\n  <b>Build Automatically</b> should be checked: if it isn't, click it,\n  and the next time you click this pull-down menu it should be checked\n  (clicking toggles it).\n<p>\nEclipse tries hard to spot syntax errors while we are typing/editing our\n  modules, to help us spot them and fix them immediately.\nIn the following sequence we will type in parts of a script file named\n  <b>Errors.py</b> to observe how we interact with Eclipse to fix syntax\n  errors.\nFor example, if we starting <b>import prompt</b>, while we are still typing\n  the word <b>prompt</b> Eclipse indicates a syntax error on that line and\n  makes a suggestion.\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/syntax1.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\n<p>\nWhen we hover over any error icon, Eclipse shows us information about the\n  error; the information, coming from Python's perspective, may or may not be\n  useful to us understanding the problem. Don't be misled.\n<p>\n<img src=\"pyimages/syntax1explain.jpg\">\n<p>\nWhen we correct the spelling, Eclipse indicates a syntax warning on that line.\nWhen we hover over this warning icon, we see the following.\n<p>\n<img src=\"pyimages/syntax2.jpg\">\n<p>\nHere Eclipse warns us that although we have imported a module correctly, we\n  haven't used it anywhere: of course, since we have just started to type a\n  program, this doesn't concern us.\nSo in this case we can ignore the warning; it will disappear once we write\n  code that uses <b>prompt</b>.\n<p>\nIf we hover over the word <b>Prompt</b> we will see the following information.\n<p>\n<img src=\"pyimages/syntax2a.jpg\">\n<p>\nWhen we use <b>prompt</b> in the next line, but use it incorrectly (there is no\n  <b>for_inp</b> function defined in this module; there is a <b>for_int</b>\n  function), Eclipse removes the warning on line 1 but shows us an error on\n  line 3.\n<p>\n<img src=\"pyimages/syntax3.jpg\">\n<p>\nNote the the red line on the upper right is not on the line with the error.\nBy being at the top, it indicates just that an early line contains an error.\nIn a file with hundreds of lines, this area on the right indicates the\n  relative line position of the error.\nWe can click on these red line and the <b>Editor</b> view will show us the\n  line with the error.\n<p>\nWhen we hover over the error icon, Eclipse shows us the following information.\n<p>\n<img src=\"pyimages/syntax3explain.jpg\">\n<p>\nWhen we correct the spelling of the function name to <b>for_int</b> in that\n  line, but write a call to the <b>print</b> function incorrectly on line 5\n  (it includes a comma before the string <b>'Answer is '</b>), Eclipse\n  indicates a syntax error on that line.\n<p>\n<img src=\"pyimages/syntax4.jpg\">\n<p>\nSometimes Eclipse will still mark line 3 as an error.\nIn such cases, it might take a few seconds for Eclipse to re-analyze the\n  file; we can also save the file (<b>ctrl/s</b> or right-click in the\n  window and select <b>save</b>), which often forces Python to re-analyze it.\n<p>\nWhen we remove this comma, Eclipse shows no more syntax errors in our module.\nNotice the names <b>prompt</b> and <b>x</b> in the Outline view: these\n  are the two name we define in this script.\nNow that this script has no syntax errors, we can run it.\nWhen we do, we get the following interaction in the <b>Console</b> view.\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/execution1.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\nPython executed the import statement and the assignment to <b>x</b> correctly\n  (calling the <b>for_int</b> function in the <b>prompt</b> module; the user\n  typed the value <b>3</b> to the prompt), but when it tried to execute line 5\n  it found an execution error (which raised an exception).\nIt \n<ol>\n<li>Identifies that it detected an execution error with the\n     <b>Traceback</b> line (in red).\n<li>Identifies the file and line number where it detected the execution error\n      (in blue).\n<li>Identifies the code on the line on which it detected the execution error\n      (in red).\n<li>Provides an error message to help us understand the execution error\n      (in red).\n</ol>\nIf we click this blue-underlined information showing the line number, the\n  Editor tab for Error will scroll to line 5 (in bigger programs the screen\n  may not show all the lines) and all the code on that line will be highlighted.\nThe expectation is that the programmer will edit the code there to fix it.\n<p>\nSo, there are two kinds of errors in programming.\nEclipse can detect syntax errors before it runs a script and execution errors\n  after it runs a script.\nWe will learn much more about avoiding, interpreting, and fixing syntax and\n  execution errors throughout the quarter.\nThere a many ways to fix this error; below we edit the script so that it calls\n  the function <b>str</b> explictly, with <b>x</b> as its argument.\nEditing the file and clicking the Run icon leads to the following interaction.\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/execution2.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\n<p>\nThe interactions among editing, saving, and (re)running a script can sometimes\n  be a bit subtle and confusing.\nConfusion arises especially concerning the synchonization of the files we are\n  editing and Eclipse's reporting of syntax errors in various views.\nFor one example, sometimes we type a few lines before Eclipse detects a syntax\n  error on one of the lines (there can be a few seconds of lag).\nAs another example, if we fix an error, its associated error indicators may\n  disappear from some -but not all views; we must sometimes perform further\n  operations, like saving the file to synchronize all these views. \n<p>\nThere is no substitute for using Eclipse repeated to better understand its\n  operation: power and limitations.\n<b>It is always an excellent idea, if you are confused, to save the file</b>\n  and wait a few seconds to see what syntax errors Eclipse detects.\n<p>\nThe following shows what Eclipse would display, if we had continued typing code\n  without fixing the syntax errors.\nWe can do this and come back to fix these errors later, but it is probably\n  better to try to fix each syntax error as Eclipse discovers it (but not\n  necessarily each warning, as we've seen some warnings go away by themself).\nNotice how errors show themselves in many of the views; also notice that there\n  are three distinct red lines on the right, indicating three lines with errors\n  at the top of the program.\n</td>\n</tbody>\n</table>\n<p>\n<img src=\"pyimages/syntaxmany.jpg\">\n<p>\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>&nbsp</b></td>\n<td width =\"80%\">\n<p>\n</td>\n</tbody>\n</table>\n\n\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Advice for Debugging Syntax Errors</b></td>\n<td width =\"80%\">\nInterpret syntax errors/warnings liberally.\n<ul>\n<li>\nWhen Eclipse detects a problem at a token, often either that token is\n  wrong, or the one before it is wrong (less frequently the incorrect token\n  appears even earlier in the script, and even less frequently later).\nCheck all these places in the appropriate order.\n<li>\nSometimes an error/warning message makes no sense: it says that there is one\n  kind of problem in our code, but we actually have to correct a different kind\n  of problem.\nUsing Eclipse repeatedly will give you insight into how to interpret errors.\n<li>\nProblems snowball: one mistake can cause many error/warning messages to\n  appear; by fixing one mistake, many message may disappear.\n</ul>\nTo debug the syntax errors in a program\n<ul>\n<li>\nFix the first problem (or if you are confident, the first few).\nIf the a second error makes no sense, a previous error might be causing the\n  problem (snowballing).\nAlways find and fix at least one error; don't spend time fixing more than a\n  few, because after fixing some earlier errors later ones might disappear or\n  change.\n<li>Save the script to see what syntax errors Eclipse reports.\n<li>\nTry to run a program that shows a confusing error message; sometimes the error\n  message will disappear or change to one that is clearer.\n<li>Repeat this process until there are no syntax errors left.\n<li>\nTo make progress, we must correct at least one error during each editing\n  session before saving the file.\nAnd, fixing only one error at a time ensures that we won't get confused by\n snowball errors.\n<p>\nYou can show the <b>Problems</b> view (<b>Windows | Show View | Problems</b> to\n  see a summary of the errors.\nHere is what it would like for the <b>Errors.py</b> file above.\n<p>\n<img src=\"pyimages/problemsview.jpg\">\n<p>\nNotice that the <b>Problems</b> view shows line 1 to have both an error and a\n  warning: in the <b>Editor</b> view it just shows the (red) error.\nI don't recommend using this view: instead just work within the <b>Editor</b>\n  view.\n</ul>     \n</td>\n</tbody>\n</table>\n\n\n<!-- Closing/Removing Projects -->\n\n<a name=\"Finishing\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Finishing a Project: Closing/Removing It</b></td>\n<td width =\"80%\">\nAs we have seen before, when we terminate Eclipse, it saves all the preferences\n  and projects that appear in our workbench.\nWhen we restart Eclipse, it initializes itself in exactly the same state as\n  when it terminated.\nTherefore, we can seemlessly start Eclipse, create/work on our projects, stop\n  it, restart it, and continue working on our projects just where we left off.\n(this is not exactly true: any programs that were running when we stop Eclipse\n  are automatically terminated).\n<p>\nNow let us explore three options for finishing a project.\nWe need to find out what happens to such projects both on our workbench and\n  in our workspace: knowing the distinction between these terms is citical to\n  understanding these three options.\n<p>\nThe simplest option is to just leave a finished project alone.\nIt will continue to be present on our workbench and in our workspace; we can\n  can undisclose the project so it appears as just one line (not showing\n  any resources in the project).\nThis is a safe option, although our workbench can become cluttered, and we\n  might accidentally change a project that we meant to leave alone.\nStill, I recommend leaving projects elided to one line on your workbench; so,\n  we will only briefly explore two other options: closing and deleting projects.\n<p>\n\n<b>Closing</b>: First, we can just close the project by right-clicking the\n  project name/folder an choosing <b>Close Project</b> in the menu\n  (right below Refresh/F5).\n<p>\n<img src=\"pyimages/closeinmenu.jpg\">\n<p>\nClosed projects will still appear in the <b>PyDev Package Explorer</b> view in\n  our workbench (and are still stored as folders in our workspace folder), but\n  with appear with no disclosure triangle: we cannot examine, run, or modify our\n  code in closed  projects.\nHere is what a closed project looks like in the <b>PyDev Package Explorer</b>\n  view.\n<p>\n<img src=\"pyimages/closedproject.jpg\">\n<p>\nOne of the few operations that we can perform on a closed project is to\n  reopen it: by right-clicking its name and then selecting <b>Open Project</b>\n  (which replaces <b>Close Project</b> on the window above).\nOnce this is done, we can explore the contents of the project again.\nSo, if we are done with a project, we can close it (to avoid accidentally\n  changing it) but reopen it later, if we need to examine/change it:\n  closing is an operation that can be un-done.\n<p>\nNote that we can always copy a project (or just its <b>.py</b> files) from the\n  workspace to any other folder, say to back-up the information.\nIt is always a good idea to back-up your work regularly, although Eclipse is\n  a safe environemnt in which to work: most operations can be un-done.\n<p>\nAnother option we have is deleting a project from the workbench (not just\n  closing it); we will discuss the two forms of deleteing next.\n<p>\n\n<b>Deleting</b>: Our second option is actually removing a project from our\n  workbench (and possibly the workspace too).\nIn this case, the project disappears altogether from our workbench (is not\n  visible in the <b>PyDevPackage Explorer</b> view), as if it were not there;\n  we have the option of leaving its project folder in the workspace (the\n  default), or truly deleting the project folder and all its contents.\nWe delete a project by right-clicking its name and then selecting\n  (<img src=\"pyimages/deleteicon.jpg\">), which is shown in the menu above;\n  by doing so, Eclipse pops-up the following <b>Delete Resources</b>\n  confirmation window.\n<p>\n<img src=\"pyimages/deleteresources.jpg\">\n<p>\nIf we leave the <b>Delete project contents on disk (cannot be undone)</b>\n  checkbox <b>unchecked</b>, Eclipse removes the project from its workbench,\n  but the project folder and the files containing all its resources remain\n  intact in the workspace.\nIn such a case, we can leave this information where it is, or copy/move it\n  elsewhere; at a later time, if we want to recreate the project, it will be\n  easy to do if we have not deleted the project folder and its resources\n  (see the next section for information about how to do this).\n<p>\nBut, if we <b>check</b> the\n  <b>Delete project contents on disk (cannot be undone)</b>\n  checkbox, then Eclipse will not only remove the project from its workbench,\n  but also will delete the project folder and all its resourcess: <b>.py</b>\n  files and any others.\n<p>\nObviously this latter choice is very dangerous, and I recommend NEVER putting a\n  check in this checkbox, which always defaults to being unchecked.\nIf need be, and after we are done with the safer <b>Delete</b> operation, we\n  can use a Windows file explorer  explicitly to delete the project folder\n  ourself; or better yet, archive it by moving it to any other directory on our\n  computer.\nIn any case, at this point Eclipse does not know the project exists, whether\n  or not it is still in our workspace folder.\nThe project will not appear on the workbench.\n</td>\n</tbody>\n</table>\n\n\n<!-- Creating a Programming Project from Existing Sources -->\n\n<a name=\"ExistingSources\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\">\n  <b>Starting an Existing (Old) Programming Project\n<p>\nI often distribute projects in this form</b></td>\n<td width =\"80%\">\nWe have already seen in detail how to start a new project in Eclipse.\nWhen started, these projects contain no modules (no <b>.py</b> files).\nWe have also seen how to create modules in these projects, edit their files,\n  and run their scripts.\nIn this section, we will learn how to start a project using an\n  existing/old project folder that likely already contains modules.\n<p>\nFor example, we might download from the web a folder that contains a\n  one or more modules and then run one of these modules as a script.\nMy <b>Sample Programs</b> link (in the index of the course page) leads to a\n  repository of such project folders.\nFrequently during in the quarter, I will ask you to download programming\n  project folders that contain code that I want you to examine, or in the case\n  of assignments, some starter code in modules that I have written.\n<p>\nThe easiest way to create a project from an existing/old project folder is\n  first to copy (or move) that folder into the workspace folder (if it is\n  not already there).\nIn fact, as we just learned, if we delete a project from a workspace, but\n  do not delete its contents, the project folder remains in the workspace.\nBy deleting the <b>Demo</b> project above, and not deleting its contents, we\n  now have an empty workbench, but the <b>Demo</b> project folder is still\n  in our workspace.\n<p>\nTo start a project from an existing/old project folder in the workspace,\n  first ensure that there are no <b>.project</b> nor <b>.pydevproject</b>\n  files in that folder: if there are, delete them.\n<blockquote>\nIf you you are unable to see files starting with <b>.</b> (called hidden\n  file), try the following links to instruct your operating system to\n  show them.\n<ul>\n<li>\n<a href = \"https://support.microsoft.com/en-us/help/14201/windows-show-hidden-files\" traget=\"main\">PC</a>\n<li>\n<a href = \"https://ianlunn.co.uk/articles/quickly-showhide-hidden-files-mac-os-x-mavericks/\">Mac</a>\n</ul>\nOr try googling your operating system name and <b>\"show hidden files\"</b>.\n</blockquote>\nThen click the down-arrow that is directly to the right of the <b>New</b> icon\n  (<img src=\"pyimages/newicon.jpg\">) on the main toolbar for the <b>PyDev</b>\n  perspective and then select <b>PyDev Project</b>, as shown below.\n<p>\n<img src=\"pyimages/newpydevproject.jpg\">\n<p>\nEclipse will display the following window.\n<p>\n<img src=\"pyimages/oldpydevprojectwindow.jpg\">\n<p>\nWhen we type <b>Demo</b>, the name of a project folder already in the\n  workspace, the line under <b>PyDev Project</b> will say\n  <b>Project location contains existing Python file. The creatre project will\n     include them.</b>\nThe, by clicking <b>Finish</b>, Eclipse creates a project on the workbench from\n  the folder in the workspace, including all the resources that it contains.\nYou can disclose the project in the workbench to see its resources (files).\n<p>\nWe must be careful to spell the name of the existing project folder correctly;\n  if we misspell the name, Eclipse will create a new project folder, rather\n  than use the old one that already exists.\nIf we do misspell the old project folder's name, and Eclipse creates a new\n  project folder for us with this wrong name, we can delete this new project\n  (including its contents, to completely delete it from the workspace), and\n  then repeat these operations but spelling the project folder name correctly.\n<p>\nAlso, if the following error message appears when you are trying to create an\n  old project\n<p>\n<img src=\"pyimages/dotproject.jpg\">\n<p>\nTerminate the current pop-up windows, remove the <b>.project</b> and\n  <b>.pydevproject</b> files from that project folder, and then try\n  creating this old project again.\n<!----\nAlthough it is convenient and useful to keep/copy old project folders in the\n  workspace (recommended); we can create projects using old project folders in\n  other locations (like on the desktop).\n<p>\nFirst, we must get a project folder that contains a project.\nClick to the <b>Sample Programs</b> link on the course web page and download\n  and unzip the program labelled <b>Collatz</b>; put the unzipped folder\n  (named <b>collatz</b>) on the desktop.\n<p>\nTo start a project from an existing/old project folder NOT in the workspace,\n  click the down-arrow that is directly to the right of the <b>New</b> icon\n  (<img src=\"pyimages/newicon.jpg\">) on the main toolbar for the <b>PyDev</b>\n  perspective and then select <b>PyDev Project</b>.\nEclipse will display the following window.\n<p>\n<img src=\"pyimages/old2pydevprojectwindow.jpg\">\n<p>\nI typed <b>Old Collatz</b>, for the the name of a project folder already in the\n  workspace, and clicking <b>Finish</b>, Eclipse creates a project from it,\n  including all the resources that it contains.\n\nThis time, I have created a project and named it <b>Demo2</b>; \n  the contents of this project is already stored in the <b>bouncingballs</b>\n  folder on my desktop (if you haven't already, download and unzip this file\n  on your desktop first: right-click and <b>Save Target As...</b> on \n  <a href=\"../../../ICS-23/programs//bouncingballs.zip\">bouncingballs</a>).\n<p>\nNote that another option is to <b>not</b> type a name for the project; then,\n  by not using the default location, and instead selecting the\n   <b>bouncingballs</b> folder, the project will also be automatically named\n   <b>bouncingballs</b>.\n<p>\nSo long as a project referring to this folder exists is in my workbench, the\n  <b>bouncingballs</b> folder should remain in this location, because although\n  this information is not stored in the workspace, the workbench refers to it.\nMost importantly, all changes made to files in this project by Eclipse will\n  actually be made in the folder containing its resources.\nIf we delete the project from the workbench, and do not delete its contents,\n  the <b>bouncingballs</b> folder will remain intact.\n<p>\nTo run this script, disclose the <b>Demo2</b> and <b>(default package)</b>\n  in the leftmost, <b>PyDev Package Explorer</b> window.\nThen right-click on <b>Application.Java</b> and select <b>Run As</b> and\n  then <b>Java Application</b>.\nClick in various locations on the white screen (to place balls) and then click\n  on the <b>Start</b> button; you can also <b>Reset</b> the simulation or\n  <b>Reverse</b> it.\nIn fact, after running it <b>Reset</b> it, then click 20-30 times in the same\n  location, then <b>Start</b> the simulation and let it run for a minute, and\n  finally <b>Reverse</b> it and let it run for the same amout of time: an\n  interesting thing happens.\n<p>\nNext, we will learn how to add existing Java files and Java archives to a\n  project.\n<p>\n<b>Java File</b>:\nFirst, suppose that we find a Java class stored in file, and that class is\n  useful in some project.\nWe add it to a project by right-clicking the project's name in the \n   <b>PyDev Package Explorer</b> view and then selecting <B>Import</b>.\nWe will see the following <b>Import</b> window.\n<p>\n<img src=\"images/importfile.gif\">\n<p>\nEither double-click <b>File System</b> or select it and click <b>Next</b>.\nWe will next see the following <b>Import</b> window.\n<p>\n<img src=\"images/importfilesystem.gif\">\n<p>\nIn this window we can select exactly which files we want to import to the\n  project.\nIn this example, we can import all the files in the <b>Useful Java Files</b>\n  folder by checking its box in the left pane; or, we can import individual\n  files from this folder by checking their individual boxes in the right pane.\nIn addition, we can use the <b>Select All</b> and <b>Deselect All</b>\n  buttons for further selection control.\nIf I import the <b>Ball</b> and <b>BallPanel</b> classes by checking\n  them and clicking <b>Finish</b>, the <b>PyDev Package Explorer</b> view will\n  show the following\n<p>\n<img src=\"images/packageafterimport.gif\">\n<p>\nEclipse actually copies these <b>.java</b> files into the project folder\n  (and still exist in their original location).\n<p>\n<b>Archive/JAR File</b>:\nNext, suppose that we find a Java Archive/JAR file that is useful in some\n  project.\nThere are two ways to add it to the project.\nWe can import it (following instructions similar to those listed above)\n  in which case all its resources are copied from the archive file into\n  the project folder.\nOr, we can add it to a project's build-path by right-clicking the project's\n  name in the  <b>PyDev Package Explorer</b> view and then selecting\n   <b>Build Path | Add External Archives</b>.\nIn a <b>JAR Selection</b> window we just double-click the Java archive\n  we want to use, or click it and click <b>OK</b>.\\\nEclipse then puts this Java archive on the build path.\nSo long as this project refers to the archive, it should remain in its\n  original location: unlike in the previous case, nothing is copied into\n  the project.\n<p>\nYou can down load sample programs from your course web site to practice both\n  methods of creating projects from existing resources.\nLater in the quarter, you will need to review the material showing how to\n  add class files and archives to projects.\n\n  If a project's resources include a JAR file, we'll have to click\n    next not finish, and add the jar file to the build path.\n  Advanced: later.\n</td>\n</tbody>\n</table>\n\n\n<!-- Preferences\n\n<a name=\"Preferences\"><hr align=\"left\" width=\"33%\">\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\n<tbody>\n<tr valign=\"top\">\n<td width =\"20%\"><b>Some Useful Preferences</b></td>\n<td width =\"80%\">\nEclipse allows us to specify a huge number of personal preferences for the\n  workbench.\nWe can even name collections of preferences, and export them to other users\n  (or import preferences from other users).\nWe set most preferences by first selecting <b>Window | Preferences</b>,\n  which is the last option in the <b>Window</b> pull-down menu.\nFrom there, we use disclosure boxes to navigate to the preference that we\n  want to find.\n<p>\nHere are some useful preference to know about.\n<ul>\n<li>Disclose <b>General</b> and then select <b>Startup and shutdown</b>:\n   determines whether or not the user is prompted when Eclipse starts (for\n   the workspace) and stops (for confirmation).\n<p>\n<li>Disclose <b>Java | Compiler</b> and then select <b>Error/Warnings</b>:\n   allows us to specify whether to ignore certain anomolies or mark them\n   as errors or warnings.\nFor example, disclose <b>Unnecessary Code</b> and see that\n  <b>Local variable is never read</b> is set to <b>Warning</b>\n  (I want to know about this inconsistency, but I don't want to stop\n   a program with this problem from running).\n<p>\n<li>Disclose <b>Java | Editors</b> and then select <b>Content Assist</b>:\n   allows us to check/uncheck <b>Enable auto activation</b>.\n   I prefer disabling this feature, and manually pressing <b>ctrl/space</b>\n    when I want it.\n<!---\n<p>\n<li>Disclose <b>Java | Code Style</b> and then select\n      <b>Formatter</b>; then click the <b>Show...</b> button and ensure you\n      are looking at the <b>Indentation</b> tab:\n      allows us to specify standard tab size for nested control structures\n     (I prefer a <b>Tab size:</b> of 2, but you can leave this number as the\n      default, 4).\n  ;disclose <b>Potential programming problems</b> and set\n  <b>Serializable class without serialVersionUID</b> to <b>ignore</b>.\n--->\n</ul>\n\n</td>\n</tbody>\n</table>\n\n\n<p>\n<hr align=\"left\" width=\"100%\">\n\n</body>\n</html>\n", "encoding": "ascii"}