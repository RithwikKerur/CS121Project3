{"url": "https://www.ics.uci.edu/~arcadia/arcadia_papers/arch/chemabst_abstract.html", "content": "<HTML>\n<!-- $Id: chemabst_abstract.html,v 1.2 1995/05/23 00:45:18 kari Exp $ -->\n<HEAD>\n<TITLE>Arcadia Collected Papers: ABSTRACT</TITLE>\n<META http-equiv=\"Owner\" content=\"Arcadia\">\n<META http-equiv=\"Reply-To\" content=\"arcadia-www@ics.uci.edu\">\n<LINK rev=\"made\" href=\"mailto:arcadia-www@ics.uci.edu\">\n</HEAD><BODY>\n<H1><img align=middle src=\"http://www.ics.uci.edu/~arcadia/Icons/arcadia-logo.gif\"> \nArcadia Papers: Abstract </H1>\n<HR>\n\n\n<A HREF=\"ftp://ftp.cs.colorado.edu/users/alw/papers/tse0495.ps.Z\">\n\"<B>Formal Specification and Analysis of Software Architectures Using\nthe Chemical Abstract Machine Model</B>\"</A>,\nby Paola Inverardi and Alexander L. Wolf\nin <I>IEEE Transactions on Software Engineering</I>, vol. 21, no. 4,\npages 373-386, April 1995.\n\n<H2> Abstract </H2>\n\nWe are exploring an approach to formally specifying and analyzing software\narchitectures that is based on viewing software systems as chemicals whose\nreactions are controlled by explicitly stated rules.  This powerful metaphor\nwas devised in the domain of theoretical computer science by Banatre and\nLe Metayer and then reformulated as the Chemical Abstract Machine, or CHAM,\nby Berry and Boudol.  The CHAM formalism provides a framework for developing\noperational specifications that does not bias the described system toward any\nparticular computational model.  It also encourages the construction and use\nof modular specifications at different levels of detail.  We illustrate the\nuse of the CHAM for architectural description and analysis by applying it to\ntwo different architectures for a simple, but familiar, software system, the\nmulti-phase compiler.\n\n<P>\n\n<HR>\n<ADDRESS>\n<A HREF=\"http://www.ics.uci.edu/Arcadia/\">The Arcadia Project\n&lt;arcadia-www@ics.uci.edu&gt;</A><BR>\nLast modified: Mon May 22 17:45:29 1995\n</ADDRESS>\n</BODY></HTML>\n", "encoding": "ascii"}