{"url": "https://www.ics.uci.edu/~pattis/quotations.html", "content": "<DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Quotations for CS1</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<h1 align=\"center\">Quotations for Learning and Programming</h1>\r\n<p>\r\n<div align=\"left\">\r\nI have enjoyed reading (and writing), collecting, and pondering the following\r\n  quotations, which I think are all relevant to teaching and learning\r\n  programming.\r\nIf you know any others that you think I might like, please email them to \r\n  <a href=\"mailto:pattis@ics.uci.edu\">pattis@ics.uci.edu</a>.\r\nIf you have corrections or further information on the source of one of these\r\nquotations, please let me know that too.\r\n</div>\r\n<p>\r\n\r\n \r\n<hr align=\"left\" width=\"100\">\r\n<p><div align=\"left\">\r\n<a href=#A>A</a>\r\n<a href=#B>B</a>\r\n<a href=#C>C</a>\r\n<a href=#D>D</a>\r\n<a href=#E>E</a>\r\n<a href=#F>F</a>\r\n<a href=#G>G</a>\r\n<a href=#H>H</a>\r\n<a href=#I>I</a>\r\n<a href=#J>J</a>\r\n<a href=#K>K</a>\r\n<a href=#L>L</a>\r\n<a href=#M>M</a>\r\n<a href=#N>N</a>\r\n<a href=#O>O</a>\r\n<a href=#P>P</a>\r\n<a href=#Q>Q</a>\r\n<a href=#R>R</a>\r\n<a href=#S>S</a>\r\n<a href=#T>T</a>\r\n<a href=#U>U</a>\r\n<a href=#V>V</a>\r\n<a href=#W>W</a>\r\n<a href=#X>X</a>\r\n<a href=#Y>Y</a>\r\n<a href=#Z>Z</a>\r\n<p>\r\nQuotations are indexed alphabetically by their author.\r\nFor authors with multiple quotations, the quotations are alphabetized\r\nby the first word in the quotations.\r\n</div>\r\n<p>\r\n\r\n\r\n<a name=\"A\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">A</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nPrograms must be written for people to read, and only incidentally for\r\n  machines to execute. \r\n<p align=\"right\"><i>- H. Abelson and G. Sussman\r\n   (in \"The Structure and Interpretation of Computer Programs)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe computer revolution is a revolution in the way we think and in the way we\r\n express what we think.\r\nThe essence of this change is the emergence of what might best be called\r\n  procedural epistemology--the study of the structure of knowledge from an\r\n  imperative point of view, as opposed to the more declarative point of view\r\n  taken by classical mathematical subjects.\r\n<p align=\"right\"><i>- H. Abelson and G. Sussman (in \"The Structure and Interpretation of Computer Programs)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe have also obtained a glimpse of another crucial idea about languages and\r\n  program design.\r\nThis is the approach of stratified design, the notion that a complex system\r\n  should be structured as a sequence of levels that are described using a\r\n  sequence of languages.\r\nEach level is constructed by combining parts that are regarded as primitive\r\n  at that level, and the parts constructed at each level are used as primitives\r\n  at the next level.\r\nThe language used at each level of a stratified design has primitives, means\r\n  of combination, and means of abstraction appropriate to that level of detail.\r\n<p align=\"right\"><i>- H. Abelson and G. Sussman (in \"The Structure and Interpretation of Computer Programs\")</i>\r\n</table>\r\np>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA common mistake people make when trying to design something completely foolproof is\r\n  to underestimate the ingenuity of complete fools.\r\n<p align=\"right\"><i>- D. Adams</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGood teaching is more a giving of the right questions than a giving of the\r\n  right answers.\r\n<p align=\"right\"><i>- J. Albers</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThey know enough who know how to learn\r\n<p align=\"right\"><i>- J. Adams</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputer Science is a science of abstraction -creating the right\r\n   model for a problem and devising the appropriate mechanizable\r\n  techniques to solve it.\r\n<p align=\"right\"><i>-  A. Aho and J. Ullman</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEach pattern describes a problem which occurs over and over again in our\r\n  environment, and then describes the core of the solution to that problem,\r\n  in such a way that you can use this solution a million times over, without\r\n  ever doing it in the same way twice.\r\n<p align=\"right\"><i>- C. Alexander<tr><td align=\"left\" valign=\"top\">\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDon't worry about people stealing your ideas.\r\nIf your ideas are any good, you'll have to ram them down people's throats.\r\n<p align=\"right\"><i>- H. Aiken</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEighty percent of success is showing up.\r\n<p align=\"right\"><i>- W. Allen</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you're not failing every now and again, it's a sign you're not doing\r\n  anything very innovative.\r\n<p align=\"right\"><i>- W. Allen</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMore is different.\r\n<p align=\"right\"><i>- P. Anderson (attacking the reductionist hypothesis in\r\n   science, by concluding that quantitatively larger systems can be\r\n   qualitatively different)\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf everything is under control, you're not going fast enough.\r\n<p align=\"right\"><i>- M. Andretti (racecar driver) </i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nToday, most software exists, not to solve a problem, but to interface with\r\n  other software.\r\n<p align=\"right\"><i>- I. O. Angell</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAll programmers are playwrights and all computers are lousy actors.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBad code isn't bad, its just misunderstood.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDebugging is anticipated with distaste, performed with reluctance,\r\n  and bragged about forever.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDistance education begins at the 8th row in a classroom.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nExperience is a poor teacher: it gives its tests before it teaches its lessons.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you understand what you're doing, you're not learning anything.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI am not trying to teach you information;\r\nI'm trying to teach you how to think about, interpret, and use the information.\r\n<p align=\"right\"><i>- Anonymous (actually, I lost this reference)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn theory, there is no difference between theory and practice, but not in\r\n  practice.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is easier to measure something than to understand what you have measured.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMeasure twice, cut once.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMicrosoft, where quality is job 1.1\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOn a visit to the NASA space center, President Kennedy spoke to a man\r\n  sweeping up in one of the buildings.\r\n\"What's your job here?\" asked Kennedy.\r\n\"Well Mr. President,\" the janitor replied,\r\n  \"I'm helping to put a man on the moon\".\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOne day a mother comes home from work and asks her son, \"What did you do\r\n  today?\"\r\nThe son replied, \"I taught our dog how to play the piano.\"\r\nThe mother, incredulous, asked, \"Our dog can play the piano?\",\r\n  to which the son laughed and replied, \"Of course not mom.\r\n  I said that I taught him; I didn't say that he learned how.\"\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nHere is how a true educator deals with a problem.\r\n<p>\r\nThe principal of a small middle school had a problem with a few of the older\r\n  girls, who were starting to use lipstick.\r\nThey were applying it in the bathroom, and then they would press their lips to\r\n  the mirror to smooth it out, leaving lip prints.\r\n<p>\r\nHe invited the girls to the ladies room, where they met with the custodian.\r\nHe said he wanted them to witness just how hard it was to clean these mirrors.\r\n<p>\r\nThe custodian took a long brush on a handle out of a box, dipped it into\r\n  the nearest toilet, moved to the mirror, and proceeded to scrub it with the\r\n  brush.\r\n<p>\r\nThat was the last day the girls pressed their lips on the mirror.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgramming languages should be designed not by piling feature on top of\r\n  feature, but by removing the weaknesses and restrictions that make additional\r\n  features appear necessary.\r\n<p align=\"right\"><i>- Anonymous, Revised Report on the Algorithmic Language\r\n  Scheme</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nPrograms for sale: Fast, Reliable, Cheap: choose two.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nReady, fire, aim (the fast approach to software development).<br>\r\nReady, aim, aim, aim, aim ... (the slow approach to software development).\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nReal programmers don't comment their code.\r\nIf it was hard to write, it should be hard to understand.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nRecurses! Called again.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe huge printing presses of a major Chicago newspaper began malfunctioning on\r\n  the Saturday before Christmas, putting all the revenue for advertising \r\n  that was to appear in the Sunday paper in jeopardy.\r\nNone of the technicians could track down the problem.\r\nFinally, a frantic call was made to the retired printer who had worked\r\n  with these presses for over 40 years.\r\n\"We'll pay anything; just come in and fix them,\" he was told.\r\n<p>\r\nWhen he arrived, he walked around for a few minutes, surveying the presses;\r\n  then he approached one of the control panels and opened it.\r\nHe removed a dime from his pocket, turned a screw 1/4 of a turn, and\r\n  said, \"The presses will now work correctly.\"\r\nAfter being profusely thanked, he was told to submit a bill for his\r\n  work.\r\n<p>\r\nThe bill arrived a few days later, for $10,000.00!\r\nNot wanting to pay such a huge amount for so little work, the\r\n  printer was told to please itemize his charges, with the hope\r\n  that he would reduce the amount once he had to identify his\r\n  services.\r\nThe revised bill arrived: $1.00 for turning the screw; $9,999.00\r\n  for knowing which screw to turn.\r\n<p>\r\nCommentary: most debugging problems are fixed easily; identifying the\r\n  location of the problem is hard.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe person who knows HOW will always have a job.\r\nThe person who knows WHY will always be his/her boss.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe sooner you get behind in your work, the more time you have to catch up.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere are only 10 different kinds of people in the world: those who know binary\r\n   and those who don't.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThink (design) globally; act (code) locally.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThink twice, code once.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTime is an excellent teacher; but eventually it kills all its students.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWeeks of programming can save you hours of planning.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen a programming language is created that allows programmers to program\r\n  in simple English, it will be discovered that programmers cannot speak\r\n  English.\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhy do we never have time to do it right, but always have time to do it over?\r\n<p align=\"right\"><i>- Anonymous</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBy viewing the old we learn the new.\r\n<p align=\"right\"><i>- Anonymous Chinese Proverb</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGive me a fish and I eat for a day. Teach me to fish and I eat for a lifetime.\r\n<p align=\"right\"><i>- Anonymous Chinese Proverb</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nHe who asks is a fool for five minutes; he who does not ask remains a fool\r\n  forever.\r\n<p align=\"right\"><i>- Anonymous Chinese Proverb</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTeachers open the door, but you must enter by yourself.\r\n<p align=\"right\"><i>- Anonymous Chinese Proverb</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTell me and I forget. Show me and I remember. Involve me and I understand.\r\n<p align=\"right\"><i>- Anonymous Chinese Proverb</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe first step towards wisdom is calling things by their right names.\r\n<p align=\"right\"><i>- Anonymous Chinese Proverb</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe person who says it cannot be done should not interrupt the person doing it.\r\n<p align=\"right\"><i>- Anonymous Chinese Proverb</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nHe who is ashamed of asking is ashamed of learning.\r\n<p align=\"right\"><i>- Anonymous Danish Proverb</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFor want of a nail the shoe was lost.<br>\r\nFor want of a shoe the horse was lost.<br>\r\nFor want of a horse the rider was lost.<br>\r\nFor want of a rider the message was lost.<br>\r\nFor want of a message the battle was lost.<br>\r\nFor want of a battle the kingdom was lost.<br>\r\nAnd all for the want of a horseshoe nail.<br>\r\n<p align=\"right\"><i>- Anonymous Proverb</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nNo matter how far down the wrong road you have gone, turn back now.\r\n<p align=\"right\"><i>- Anonymous Turkish Proverb</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThose who know, do. Those who understand, teach.\r\n<p align=\"right\"><i>- Aristotle</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe are what we repeatedly do.\r\nExcellence, then, is not an act, but a habit.\r\n<p align=\"right\"><i>- Aristotle</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe most exciting phrase to hear in science -the one that heralds new\r\n  discoveries- is not <i>\"Eureka!\"</i> but <i>\"That's funny...\"</i>.\r\n<p align=\"right\"><i>- I. Asimov</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe Analytical Engine weaves Algebraical patterns just as the Jacquard loom\r\n  weaves flowers and leaves.\r\n<p align=\"right\"><i>- A. Augusta, Countess of Lovelace, on Babbage's Analytical Engine</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<a name=\"B\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">B</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOn two occasions, I have been asked [by members of Parliament], \"Pray,\r\nMr. Babbage, if you put into the machine wrong figures, will the right\r\n  answers come out?\"\r\nI am not able to rightly apprehend the kind of confusion of ideas that\r\n  could provoke such a question.\r\n<p align=\"right\"><i>- C. Babbage</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI, myself, have had many failures and I've learned that if you are not\r\nfailing a lot, you are probably not being as creative as you could be\r\n  -you aren't stretching your imagination.\r\n<p align=\"right\"><i>- J. Backus</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nYou need the willingness to fail all the time.\r\nYou have to generate many ideas and then you have to work\r\n  very hard only to discover that they don't work.\r\nAnd you keep doing that over and over until you find one that does work.\r\n<p align=\"right\"><i>- J. Backus\r\n  (<a href=\"http://www.nytimes.com/2007/03/20/business/20backus.html?_r=1&ref=obituaries&oref=slogin\">NYT Obituary</a> )</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA prudent question is one-half of wisdom.\r\n<p align=\"right\"><i>- F. Bacon</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nPlaying with pointers is like playing with fire.\r\nFire is perhaps the most important tool known to man.\r\nCarefully used, fire brings enormous benefits; but when fire gets out of\r\n  control, disaster strikes.\r\n<p align=\"right\"><i>- J. Barnes</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI can only think that the book is read because it deals with the\r\n  difficulties of schooling, which do not change.\r\nPlease note: the difficulties, not the problems.\r\nProblems are solved or disappear with the revolving times.\r\nDifficulties remain.\r\nIt will always be difficult to teach well, to learn accurately; to read,\r\n  write, and count readily and competently; to acquire a sense of history\r\n  and start one's education or anothers.\r\n<p align=\"right\"><i>- J. Barzun (\"Begin Here\", pp 14), </i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe American university is built on two false premises: that all teachers must\r\n  add to the existing stock of knowledge by research, and that all\r\n  self-respecting institutions fulfill this role only by employing productive\r\n  scholars...Of course, the teacher must keep reading and thinking abreast of\r\n  his time, but this does not mean that he must write and publish.\r\nThe confusion hides a further absurd assumption,  which is that when a man\r\n writes a scholarly book that reaches a dozen specialists he adds immeasurably\r\n to the world's knowledge; whereas if he imparts his thoughts and his reading\r\n to one hundred and fifty students every year, he is wasting his time and\r\n leaving the world in darkness.\r\nOne is tempted to ask what blinkered pedant ever launched the notion that\r\n students in coming to college seceded from the human race and may therefore\r\n be safely left out when knowledge is being broadcast.\r\n<p align=\"right\"><i>- J. Barzun (\"Teacher in America\"), </i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe sole justification of teaching, of the school itself, is that the \r\n  student comes out of it able to do something he could not do before.\r\nI say <i>do</i> and not <i>know</i>, because knowledge that doesn't\r\n  lead to doing something new or doing something better is not knowledge\r\n  at all.\r\n<p align=\"right\"><i>- J. Barzun (\"Begin Here\", pp 112), </i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe truth is, when all is said and done, one does not <i>teach a subject</i>,\r\n  one teaches a student how to learn it.\r\nTeaching may look like administering a dose, but even a dose must be worked\r\n  on by the body if it is to cure.\r\nEach individual must cure his or her own ignorance.\r\n<p align=\"right\"><i>- J. Barzun (\"Begin Here\", pp 35), </i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOptimism is an occupational hazard of programming: testing is the treatment.\r\n<p align=\"right\"><i>- K. Beck</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEver tried. Ever failed. No matter. Try Again. Fail again. Fail better.\r\n<p align=\"right\"><i>- S. Beckett</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe cheapest, fastest, and most reliable components of a computer system are\r\n  those that aren't there.\r\n<p align=\"right\"><i>- G. Bell</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDakin (to Irwin, his teacher):\r\n  Do you really believe that, sir, or are you just trying to make us think?\r\n<p align=\"right\"><i>- A. Bennett (in \"The History Boys\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe key to performance is elegance, not battalions of special cases.\r\n<p align=\"right\"><i>- J. Bentley & D. McIlroy</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWalking on water and developing software from a specification are easy if both\r\n  are frozen.\r\n<p align=\"right\"><i>- E. Berard</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMore than the act of testing, the act of designing tests is one of the best bug\r\n  preventers known.\r\nThe thinking that must be done to create a useful test can discover and\r\n  eliminate bugs before they are coded - indeed, test-design thinking can\r\n  discover and eliminate bugs at every stage in the creation of software, from\r\n  conception to specification, to design, coding and the rest.\r\n<p align=\"right\"><i>- B. Bezier</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n<pre>Percy:  You know, they do say that the Infanta's eyes are more beautiful\r\n        than the famous Stone of Galveston. \r\nEdmund: Mm! ... What?\r\nPercy:  The famous Stone of Galveston, My Lord.\r\nEdmund: And what's that, exactly?\r\nPercy:  Well, it's a famous blue stone, and it comes ... from Galveston.\r\nEdmund: I see. And what about it?\r\nPercy:  Well, My Lord, the Infanta's eyes are bluer than it, for a start.\r\nEdmund: I see. And have you ever seen this stone?\r\nPercy:  (nods) No, not as such, My Lord, but I know a couple of people who\r\n         have, and they say it's very very blue indeed. \r\nEdmund: And have these people seen the Infanta's eyes?\r\nPercy:  No, I shouldn't think so, My Lord.\r\nEdmund: And neither have you, presumably.\r\nPercy:  No, My Lord.\r\nEdmund: So, what you're telling me, Percy, is that something you have never\r\n        seen is slightly less blue than something else you have never seen.\r\nPercy:  (finally begins to grasp) Yes, My Lord.\r\n</pre>\r\nI sometimes feel this way when trying to explain a new programming concept.\r\n<p align=\"right\"><i>- From the </i>Queen of Spain's Beard<i> episode of\r\n  Blackadder.</i><br>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen I grew up, my Dad used to encourage my brother and me to fail.\r\nSo I would come home from school, and sit at the dinner table and my dad would\r\n  say kids what did you fail at this week.\r\nAnd if I didn't have something to tell him, he would be disappointed.\r\nSo if we weren't failing enough in our home, it meant we weren't trying new\r\n  things.\r\n<p align=\"right\"><i>- S. Blakely (founder of Spanx, youngest self-made woman\r\n   billionaire 2013) from\r\n  <a href = \"http://money.cnn.com/video/news/2013/07/26/n-spanx-sara-blakely-billionaire-profile.cnnmoney/index.html?iid=HP_River\">CNN interview</a></i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere is a division in the student population between those who go to college\r\n  to learn and those who go to college to earn a diploma.\r\n<p align=\"right\"><i>- J. Blau (letter to the editor, Chronicle of Higher Education, May 24, 2002)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe cleaner and nicer the program, the faster it's going to run.\r\nAnd if it doesn't, it'll be easy to make it fast.\r\n<p align=\"right\"><i>- J. Bloch (in Seibel, \"Coders at Work\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is wrong to think that the task of physics is to find out how nature is.\r\nPhysics concerns what we say about nature.\r\n<p align=\"right\"><i>- N. Bohr</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOpposites are not contradictory but complementary.\r\n<p align=\"right\"><i>- N. Bohr</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n<p>\r\nSir Thomas More: Why not be a teacher? You'd be a fine teacher; perhaps a great\r\n  one.<br>\r\nRichard Rich: If I was, who would know it?<br>\r\nSir Thomas More: You; your pupils; your friends; G-d. Not a bad public, that.\r\n<p align=\"right\"><i>- R. Bolt (in his play, A Man for All Seasons)</i>\r\n</table>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSoftware development has been, is, and will likely remain fundamentally hard.\r\nBuilding quality systems involves an essential and irreducible complexity,\r\n  which is why the entire history of software engineering can be characterized\r\n  as one of rising levels of abstraction.\r\nAs such, the task of the software development team is to engineer the illusion\r\n  of simplicity.\r\nNonetheless, software-intensive systems can amplify human intelligence, but\r\n  they cannot replace human judgment; software-intensive systems  can fuse,\r\n  co-ordinate, classify, and analyze information, but they cannot create\r\n  knowledge.\r\nIn other words, not everything we want to build can be built: there exist\r\n  pragmatic theoretical and technical limits that make software development\r\n  hard if not impossible.\r\nFurthermore, not everything we want to build should be built: there exist\r\n  moral economic, social, and political limits that govern human industry.\r\nFrom fundamental to human, these are the factors that define the limits of\r\n  software, factors that separate our vision from execution.\r\n<p align=\"right\"><i>- G. Booch (in a blurb from a talk,\r\n   \"The Limits of Software\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThat language is an instrument of human reason, and not merely a medium\r\n  for the expression of thought, is a truth generally admitted.\r\n<p align=\"right\"><i>- G. Boole</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe greatest obstacle to discovery is not ignorance, but the illusion of\r\n  knowledge.\r\n<p align=\"right\"><i>- D. Boorstin</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe most likely way for the world to be destroyed, most experts agree, is by\r\n  accident.\r\nThat's where we come in; we're computer professionals.\r\nWe cause accidents.\r\n<p align=\"right\"><i>- N. Borenstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAll models are wrong; some models are useful.\r\n<p align=\"right\"><i>- G. Box</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSimplicity and flexibility will trump optimization and power in a world where\r\n  connectivity is the key.\r\n<p align=\"right\"><i>- A. Bosworth\r\n  (paraphrased by David Bank in Breaking Windows, page 203)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe important thing in science is not so much to obtain new facts as to\r\n  discover new ways of think about them.\r\n<p align=\"right\"><i>- W. Bragg</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nInformation wants too be free.\r\nInformation also wants to be expensive.\r\nInformation wants to be free because it has become so cheap to distribute,\r\n  copy, and recombine---too cheap to meter.\r\nIt wants to be expensive because it can be immeasurably valuable to the\r\n  recipient.\r\nThat tension will not go away.\r\nIt leads to endless wrenching debate about price, copyright, \"intellectual\r\n  property\", the moral rightness of casual distribution, because each round\r\n  of new devices makes the tension worse, not better.\r\n<p align=\"right\"><i>- S. Brand\r\n  (see the <a href = \"http://www.anu.edu.au/people/Roger.Clarke/II/IWtbF.html\">\r\n   Information Wants to Be Free</a> web page)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgramming is the art of writing essays in crystal clear prose and making them\r\n  executable.\r\n<p align=\"right\"><i>- P. Brinch Hansen</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is important that students bring a certain ragamuffin, barefoot irreverence\r\n  to their studies; they are not here to worship what is known, but to\r\n  question it.\r\n<p align=\"right\"><i>- J. Bronowski</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThat is the essence of science: ask an impertinent question, and you are on\r\n  the way to a pertinent answer.\r\n<p align=\"right\"><i>- J. Bronowski</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWelcome to Yale. \r\nYale will be for you and to you what you make of it. \r\nDespite the gloom of the times this is not a gloomy place.\r\nIt is a place where life can have purpose without being a society of driven\r\n  men and women.\r\nIt is also a place where there is no escape from argument, for the next person\r\n  you meet will not be likely to agree with the last person talked to.\r\nThis is a community which rewards participation but does not expect conformity.\r\nThis is primarily a place for learning, but not all learning is in books or\r\n laboratories or classrooms. \r\nYou probably have not been as free before.\r\nYou may not be as free again.\r\nEnjoy the privilege of doubt. \r\nMake the most of it. \r\n<p align=\"right\"><i>- K. Brewster</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGood judgment comes from experience; experience comes from bad judgment.\r\n<p align=\"right\"><i>- F. Brooks</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMuch of the essence of building a program is in fact the debugging of the\r\n  specification.\r\n<p align=\"right\"><i>- F. Brooks</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nPlan to throw one away; you will anyhow.\r\n<p align=\"right\"><i>- F. Brooks (\"The Mythical Man-Month\", Chapter 11)</i>\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you plan to throw one away, you will throw away two.\r\n<p align=\"right\"><i>- C. Zerouni</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nScientists build to learn; Engineers learn to build.\r\n<p align=\"right\"><i>- F. Brooks</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe hardest part of the software task is arriving at a complete and consistent\r\n  specification, and much of the essence of building a program is in fact the\r\n  debugging of the specification.\r\n<p align=\"right\"><i>- F. Brooks</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe programmer, like the poet, works only slightly removed from pure\r\n  thought-stuff.\r\nHe builds castles in the air, from air, creating by exertion of the\r\n  imagination.\r\nFew media of creation are so flexible, so easy to polish and rework, so readily\r\n  capable of realizing grand conceptual structures.\r\nYet the program construct, unlike the poet's words, is real in\r\n  the sense that it moves and works, producing visible outputs separate from \r\n  the construct itself.\r\nIt prints results, draws pictures, produces sounds, moves arms.\r\nThe magic of myth and legend has come true in our time.\r\nOne types the correct incantation on a keyboard, and a display screen comes to\r\n  life, showing things that never were nor could be.\r\n...\r\nThe computer resembles the magic of legend in this respect, too.\r\nIf one character, one pause, of the incantation is not strictly in proper form,\r\n  the magic doesn't work.\r\nHuman beings are not accustomed to being perfect, and few areas of human\r\n  activity demand it.\r\nAdjusting to the requirement for perfection is, I think, the most difficult\r\n  part of learning to program.\r\n<p align=\"right\"><i>- F. Brooks (\"The Mythical Man Month\", pages 7-8)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSuccessful software always gets changed.\r\n<p align=\"right\"><i>- F. Brooks</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA man's reach should exceed his grasp, or what's heaven for? \r\n<p align=\"right\"><i>- R. Browning</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThey may forget what you said, but they will never forget how you made them\r\n  feel.\r\n<p align=\"right\"><i>- C. Buchner</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n...and then it occurred to me that a computer is a stupid machine with\r\n  the ability to do incredibly smart things, while computer programmers are\r\n  smart people with the ability to do incredibly stupid things.\r\nThey are, in short, a perfect match.\r\n<p align=\"right\"><i>- B. Bryson</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nLearning how to learn is life's most important skill. \r\n<p align=\"right\"><i>- T. Buzan</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"C\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">C</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe first 90% of the code accounts for the first 90% of the development time.\r\nThe remaining 10% of the code accounts for the other 90% of the development\r\n   time.\r\n<p align=\"right\"><i>- T. Cargill</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe sooner you start to code, the longer the program will take.\r\n<p align=\"right\"><i>- R. Carlson</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe important point is that the cost of adding a feature isn't just the time\r\n  it takes to code it.\r\nThe cost also includes the addition of an obstacle to future expansion.\r\nSure, any given feature list can be implemented, given enough coding time.\r\nBut in addition to coming out late, you will usually wind up with a code base\r\n  that is so fragile that new ideas that should be dead-simple wind up taking\r\n  longer and longer to work into the tangled existing web.\r\nThe trick is to pick the features that don't fight each other.\r\n<p align=\"right\"><i>- J. Carmack</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn essence, engineering is doing what you want with what you have.\r\n<p align=\"right\"><i>- J. Carmack</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgramming is not a zero-sum game.\r\nTeaching something to a fellow programmer doesn't take it away from you.\r\nI'm happy to share what I can, because I'm in it for the love of programming.\r\n<p align=\"right\"><i>- J. Carmack</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe think too much about effective methods of teaching and not enough about\r\n  effective methods of learning.\r\nNo matter how good teaching may be, each student must take the responsibility\r\n  for his own education.\r\n<p align=\"right\"><i>- J. Carolus S.J.</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn 1958 I walked into this room full of glowing red tubes.\r\nWhat mesmerized me was that you could write a piece of software and you  created\r\n  this littel universe that you were in charge of, and it did what you told it\r\n  to do.\r\nOf course the problem was it didn't always do what you wanted it to do.\r\nIt did what you told it to do, and the difference between what you wanted and\r\n  what you told it is called a bug.\r\n<p align=\"right\"><i>- V. Cerf</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn a way, math isn't the art of answering mathematical questions, it is\r\n  the art of asking the right questions, the questions that give you insight,\r\n  the ones that lead you in interesting directions, the ones that connect with\r\n  lots of other interesting questions -the ones with beautiful answers.\r\n<p align=\"right\"><i>- G. Chaitin\r\n                     (pg. 23, in \"Meta Math: The Quest for Omega\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMathematical truth is not totally objective.\r\nIf a mathematical statement is false, there will be no proofs, but if it is\r\n  true, there will be an endless variety of proofs, not just one!\r\nProofs are not impersonal, they express the personality of their\r\n  creator/discoverer just as much as literary efforts do.\r\nIf something important is true, there will be <b>many</b> reasons that it is\r\n  true, many proofs of that fact.\r\nMath is the music of reason, and some proofs sound like jazz, others sound\r\n  like a fugue.\r\nWhich is better, the jazz or the fugue?\r\nNeither: it's all a matter of taste...each proof will emphasize different\r\n  aspects of the problem, each proof will lead in a different direction.\r\nEach one will have different corollaries, different\r\n  generalizations...Mathematical facts are not isolated, they are woven into\r\n  a vast spider's web of interconnections.\r\n<p align=\"right\"><i>- G. Chaitin\r\n                     (pg. 23, in \"Meta Math: The Quest for Omega\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny sufficiently advanced technology is indistinguishable from magic.\r\n<p align=\"right\"><i>- A. Clarke</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe don't have time to stop for gas, we're already late.\r\n<p align=\"right\"><i>- M. Cleron (Commenting on how Software Projects are often Run)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTo be truly educated from this point of view means to be in a position to\r\n  inquire and create on the basis of the resources available to you, which\r\n  you've come to appreciate and comprehend.\r\nTo know where to look, to know how to formulate serious questions, to question\r\n  a standard doctrine, if that's appropriate, to find your own way, to shape\r\n  the questions that are worth pursuing, and to develop the path to pursue them.\r\nThat means knowing, understanding many things, but also, much more important\r\n  than what you have stored in your mind, to know where to look, how to look,\r\n  how to question, how to challenge, how to proceed independently to deal with\r\n  the challenges that the world presents to you....\r\n<p align=\"right\"><i>- N. Chomsky\r\n  (<a href=\"https://www.youtube.com/watch?t=202&v=eYHQcXVp4F4\">Video</a> )</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhenever there is a hard job to be done I assign it to a lazy man; he is sure\r\n  to find an easy way of doing it.\r\n<p align=\"right\"><i>- W. Chrysler</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe real technology -behind all our other technologies- is language.\r\nIt actually creates the world our consciousness lives in.\r\n<p align=\"right\"><i>- A. Codrescu</i>\r\n</table>\r\n<p>\r\n                          \r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI hear and I forget; I see and I remember; I do and I understand.\r\n<p align=\"right\"><i>- Confucius</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nNever hesitate to ask a lesser person.\r\n<p align=\"right\"><i>- Confucius</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny organization that designs a system (defined broadly) will produce a design\r\n  whose structure is a copy of the organization's communication structure.<br>\r\n(<i>commonly expressed as Conway's law, \"Systems resemble the organizations\r\n    that produce them.\"</i>)\r\n<p align=\"right\"><i>- M. Conway</i>\r\n</table>\r\n<p>\r\n\r\n                          \r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nPress on.\r\nNothing in the world can take the place of persistence.\r\nTalent will not; nothing is more common than unsuccessful men with talent.\r\nGenius will not; unrewarded genius is almost a proverb.\r\nEducation alone will not; the world is full of educated derelicts.\r\nPersistence and determination alone are omnipotent.\r\n<p align=\"right\"><i>- C. Coolidge</i>\r\n</table>\r\n<p>\r\n                          \r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSix jokes:\r\n\"What do you get when you cross a computer with an airplane?\r\nWhat do you get when you cross a computer with a camera?\r\nWhat do you get when you cross a computer with an alarm clock?\r\nWhat do you get when you cross a computer with a car?\r\nWhat do you get when you cross a computer with a bank?\r\nWhat do you get when you cross a computer with a warship?\"\r\n<p>\r\nIn all six cases the answer is \"A computer.\"\r\n[Cooper illustrates how the <i>nature</i> of these systems becomes\r\n   dominated by  the nature of their computer components]\r\n<p align=\"right\"><i>- A. Cooper (I'm paraphrasing some pictures and text\r\n  appearing in \"The Inmates are Running the Asylum\")</i>\r\n</table>\r\n<p>\r\n                          \r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe value of a prototype is in the education it gives you, not in the code\r\n  itself.\r\n<p align=\"right\"><i>- A. Cooper (in \"The Inmates are Running the Asylum\")</i>\r\n</table>\r\n<p>\r\n                          \r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen the words are fuzzy, the programmers reflexively retreat to the most\r\n  precise method of articulation available: source code.\r\nAlthough there is nothing more precise than code, there is also nothing more\r\n  permanent or resistant to change.\r\nSo the situation frequently crops up where nomenclature confusion drives\r\n  programmers to begin coding prematurely, and that code becomes the\r\n  de facto design, regardless of its appropriateness or correctness.\r\n<p align=\"right\"><i>- A. Cooper (in \"The Inmates are Running the Asylum\")</i>\r\n</table>\r\n<p>\r\n                          \r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDoing more things faster is no substitute for doing the right things.\r\n<p align=\"right\"><i>- S. R. Covey</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe generation of random numbers is too important to be left to chance.\r\n<p align=\"right\"><i>- R. Coveyou</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you don't think carefully, you might believe that programming is just\r\n  typing statements in a programming language.\r\n<p align=\"right\"><i>- W. Cunningham</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"D\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">D</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWho dares to teach must never cease to learn.\r\n<p align=\"right\"><i>- J.C. Dana</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEvery now and then go away, have a little relaxation, for when you come\r\n  back to your work your judgment will be surer.\r\nGo some distance away because then the work appears smaller and more of it can\r\n  be taken in at a glance and a lack of harmony and proportion is more readily\r\n  seen.\r\n<p align=\"right\"><i>- L. Da Vinci</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSimplicity is the ultimate sophistication.\r\n<p align=\"right\"><i>- L. Da Vinci</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you cannot describe what you are doing as a process, you don't know what\r\n  you're doing.\r\n<p align=\"right\"><i>- W. E. Deming</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nQuestion authority; but, raise your hand first.\r\n<p align=\"right\"><i>- A. Dershowitz</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOne can think effectively only when one is willing to endure suspense and to\r\n  undergo the trouble of searching.\r\n<p align=\"right\"><i>- J. Dewey</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAs long as there were no machines, programming was no problem at all; when we\r\n  had a few weak computers, programming became a mild problem, and now [1972]\r\n  that we have gigantic computers, programming has become a gigantic problem.\r\nAs the power of available machines grew by a factor of more than a thousand,\r\n  society's ambition to apply these new machines grew in proportion, and it was\r\n  the poor programmer who found his job in this exploded field of tension\r\n  between the ends and the means.\r\nThe increased power of the hardware, together with the perhaps more dramatic\r\n increase in its reliability, made solutions feasible that the programmer had\r\n not dared to dream about a few years before.\r\nAnd now, a few years later, he <i>had</i> to dream about them and even worse,\r\n  he had to transform such dreams into reality!\r\nIt is no wonder that we found ourselves in a software crisis\r\n<p align=\"right\"><i>- E. Dijkstra (The Humble Programmer,\r\n  \"ACM Turing Award Lectures: The First 25 Years\", Addison-Wesley, 1987, pages 17-32)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA most important, but also most elusive, aspect of any tool is its influence\r\n  on the habits of those who train themselves in its use.\r\nIf the tool is a programming language this influence is, whether we like it\r\n  or not, an influence on our thinking habits....\r\nA programming language is a tool that has profound influence on our thinking\r\n  habits.\r\n<p align=\"right\"><i>- E. Dijkstra</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBeing abstract is something profoundly different from being vague...\r\nThe purpose of abstraction is not to be vague, but to create a new semantic\r\n  level in which one can be absolutely precise.\r\n<p align=\"right\"><i>- E. Dijkstra</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBesides a mathematical inclination, an exceptionally good mastery of one's\r\n  native tongue is the most vital asset of a competent programmer.\r\n<p align=\"right\"><i>- E. Dijkstra</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputer Science is no more about computers than astronomy is about telescopes.\r\n<p align=\"right\"><i>- E. Dijkstra</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf we wish to count lines of code, we should not regard them as <i>lines\r\n  produced</i> but as <i>lines spent</i>.\r\n<p align=\"right\"><i>- E. Dijkstra</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nJohn von Neumann draws attention to what seemed to him a contrast.\r\nHe remarked that for simple mechanisms, it is often easier to describe how\r\n  they work than what they do, while for more complicated mechanisms, it is\r\n  usually the other way around.\r\n<p align=\"right\"><i>- E. Dijkstra (Trip Reports, 213)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nObject-oriented programming is an exceptionally bad idea which could only have\r\n   originated in California\r\n<p align=\"right\"><i>- E. Dijkstra (note: OOP originated in Norway, quite near\r\n  Holland -Dijkstra's home)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n...our intellectual powers are rather geared to master static relations\r\n  and that our powers to visualize processes evolving in time are\r\n  relatively poorly developed.\r\nFor that reason we should do (as wise programmers aware of our limitations)\r\n  our utmost to shorten the conceptual gap between the static program and\r\n  the dynamic process, to make the correspondence between the program\r\n  (spread out in text space) and the process (spread out in time) as trivial\r\n  as possible.\r\n<p align=\"right\"><i>- E. Dijkstra (in \"Goto Considered Harmful\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgram testing can be used to show the presence of bugs, but never to show\r\n  their absence!\r\n<p align=\"right\"><i>- <a href=\"http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD249.PDF\">E. Dijkstra </a>\r\n</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgress is possible only if we train ourselves to think about programs without\r\n  thinking of them as pieces of executable code. \r\n<p align=\"right\"><i>- E. Dijkstra</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSimplicity is a prerequisite for reliability.\r\n<p align=\"right\"><i>- E. Dijkstra</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n...Simplifications have had a much greater long-range scientific impact than\r\n  individual feats of ingenuity.\r\nThe opportunity for simplification is very encouraging, because in all examples\r\n  that come to mind the simple and elegant systems tend to be easier and faster\r\n  to design and get right, more efficient in execution, and much more reliable\r\n  than the more contrived contraptions that have to be debugged into some\r\n  degree of acceptability....Simplicity and elegance are unpopular because they\r\n  require hard work and discipline to achieve and education to be appreciated.\r\n<p align=\"right\"><i>- E. Dijkstra (The Tide, not the waves; in Denning/Metcalfe: Beyond Calculation, Springer-Verlag 1997)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe tools we use have a profound (and devious!) influence on our thinking\r\n  habits, and, therefore, on our thinking abilities.\r\n<p align=\"right\"><i>- E. Dijkstra</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe competent programmer is fully aware of the strictly limited size of his\r\n  own skull; therefore he approaches the programming task in full humility,\r\n  and among other things he avoids clever tricks like the plague.\r\n<p align=\"right\"><i>- E. Dijkstra\r\n   (in \"The Humble Programmer\", his 1972 Turing Award Lecture)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe art of programming is the art of organizing complexity, of mastering\r\n  multitude and avoiding its bastard chaos.\r\n<p align=\"right\"><i>- E. Dijkstra\r\n   (in \"Notes on Structured Programming\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe effective exploitation of his powers of abstraction must be regarded as one\r\n  of the most vital activities of a competent programmer.\r\n<p align=\"right\"><i>- E. Dijkstra\r\n   (in \"The Humble Programmer\", his 1972 Turing Award Lecture)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe are all shaped by the tools we use, in particular: the formalisms we use\r\n  shape our thinking habits, for better or for worse, and that means that\r\n  we have to be very careful in the choice of what we learn and teach,\r\n  for unlearning is not really possible.\r\n<p align=\"right\"><i>- E. Dijkstra (in\r\n  <a href=\"http://www.cs.utexas.edu/users/EWD/ewd13xx/EWD1305.PDF\">\r\n  Answers to Questions from Students of Software Engineering</a>)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe shall do a much better programming job, provided that we approach the task\r\n  with a full appreciation of its tremendous difficulty, provided that we\r\n  stick to modest and elegant programming languages, provided that we respect\r\n  the intrinsic limitations of the human mind and approach the task as Very\r\n    Humble Programmers.\r\n<p align=\"right\"><i>- E. Dijkstra\r\n   (in \"The Humble Programmer\", his 1972 Turing Award Lecture)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nYes, I share your concern: how to program well -though a teachable topic- is\r\n  hardly taught.\r\nThe situation is similar to that in mathematics, where the explicit curriculum\r\n  is confined to mathematical results; how to do mathematics is something the\r\n  student must absorb by osmosis, so to speak.\r\nOne reason for preferring symbol-manipulating, calculating arguments is that\r\n  their design is much better teachable than the design of verbal/pictorial\r\n  arguments.\r\nLarge-scale introduction of courses on such calculational methodology, however,\r\n would encounter insurmountable political problems. \r\n<p align=\"right\"><i>- E. Dijkstra (in\r\n  <a href=\"http://www.cs.utexas.edu/users/EWD/ewd13xx/EWD1305.PDF\">\r\n  Answers to Questions from Students of Software Engineering</a>)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nText is linear; it is black and white; it doesn't zoom around the page in 3-D;\r\n it isn't intelligent by itself; in fact, in terms of immediate reaction it is\r\n quite boring.\r\nI can't imagine a single preliterate was ever wowed at the first sight of\r\n text, and yet text has been the basis of arguably the most fundamental\r\n intellectual transformation of the human species.\r\nIt and its subforms, such as algebra, have made science education for all a\r\n  plausible goal.\r\n<p align=\"right\"><i>- A.diSessa (\"Changing Minds: Computers, Learning, and Literacy\", MIT Press, 2000; page 112)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere is nothing so useless as doing efficiently that which should not be \r\n  done at all.\r\n<p align=\"right\"><i>- P. Drucker</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe first step in fixing a broken program is getting it to fail repeatably [on\r\n the simplest example possible]. \r\n<p align=\"right\"><i>- T. Duff</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt's supposed to be hard!\r\nIf it wasn't hard, everyone would do it.\r\nThe hard... is what makes it great!\r\n<p align=\"right\"><i>- J. Dugan\r\n  (said by Tom Hanks' character in \"A League of Their Own\" in response to \r\n   a complaint from one of his ball players)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn a fixed mindset students believe their basic abilities, their intelligence,\r\n  their talents, are just fixed traits.\r\nThey have a certain amount and that's that, and then their goal becomes to look\r\n  smart all the time and never look dumb.\r\nIn a growth mindset students understand that their talents and abilities can be\r\n  developed through effort, good teaching and persistence.\r\nThey don't necessarily think everyone's the same or anyone can be Einstein, but\r\n  they believe everyone can get smarter if they work at it.\r\n<p align=\"right\"><i>- C. Dweck (see also the quote by J. Hamilton) </i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt's when something fails that you learn.\r\nIf it doesn't fail, you don't learn anything; you haven't made any progress.\r\nEverything I do is a mistake; it fails.\r\n<p align=\"right\"><i>- J. Dyson\r\n  (interview in Wired Magazine, p. 112, Dec. 2012)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<a name=\"E\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">E</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGenius is 1 percent inspiration and 99 percent perspiration.\r\nAs a result, genius is often a talented person who has simply done all of his\r\n  homework.\r\n<p align=\"right\"><i>- T. Edison</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny fool can know. The point is to understand.\r\n<p align=\"right\"><i>- A. Einstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny intelligent fool can make things bigger, more complex, and more\r\n  violent.\r\nIt takes a touch of genius - and a lot of courage - to move in the opposite\r\n  direction.\r\n<p align=\"right\"><i>- A. Einstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEverything should be made as simple as possible, but not simpler.\r\n<p align=\"right\"><i>- A. Einstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nExample isn't another way to teach.\r\nIt is the only way to teach.\r\n<p align=\"right\"><i>- A. Einstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe formulation of a problem is often more essential than its solution, which\r\n  may be merely a matter of mathematical or experimental skill.\r\n<p align=\"right\"><i>- A. Einstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI never teach my pupils.\r\nI only attempt to provide the conditions in which they can learn.\r\n<p align=\"right\"><i>- A. Einstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you can't explain it simply, you don't understand it well enough.\r\n<p align=\"right\"><i>- A. Einstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nImagination is more important than knowledge.\r\n<p align=\"right\"><i>- A. Einstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOut of clutter, find simplicity.\r\nFrom discord, find harmony.\r\nIn the middle of difficulty, lies opportunity.\r\n<p align=\"right\"><i>- A. Einstein</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nReinventing the wheel is a process.\r\n<p align=\"right\"><i>- R. Elisha</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTo arrive at the simple is difficult.\r\n<p align=\"right\"><i>- R. Elisha</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nShall I tell you the secret of the true scholar?\r\nIt is this: every man I meet is my master in some point, and in that I learn\r\n  of him.\r\n<p align=\"right\"><i>- R.W. Emerson</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe proof of a high education is the ability to speak about complex matters\r\n  as simply as possible.\r\n<p align=\"right\"><i>- R.W. Emerson</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<a name=\"F\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">F</h3>\r\n\r\n<!--\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe structure of a system reflects the structure of the organization that built\r\n  it.\r\n<p align=\"right\"><i>- R. Fairley (also see M. Conway)</i>\r\n</table>\r\n<p>\r\n-->\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn those days [batch processing] programmers never even documented their\r\n  programs, because it was assumed that nobody else would ever use them.\r\nNow, however, time-sharing had made exchanging software trivial: you just\r\n   stored one copy in the public repository and thereby effectively gave it to\r\n   the world. \r\nImmediately people began to document their programs and to think of them as\r\n  being usable by others.\r\nThey started to build on each others work.\r\n<p align=\"right\"><i>- R. Fano (in Waldrop, \"The Dream Machine\", pp. 232)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n..a function approach [to teaching programming] has numerous, beneficial side-effects.\r\n<p align=\"right\"><i>- M. Felleisen (in\r\n <a href=\"http://www.ccs.neu.edu/home/matthias/Thoughts/What_s_TeachScheme_.html\">What's TeachScheme!</a>)\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThus, writing a clever piece of code that works is one thing; designing\r\n  something that can support a long-lasting business is quite another.\r\nCommercial software design and production is, or should be, a rigorous,\r\n  capital-intensive activity.\r\nSoftware products should be based on a broad, deep structure that can support\r\n  much more than whatever the product contains at any given time.\r\nIn addition to code that works, you need documentation, help functions, error\r\n  handling, multi-platform support, and multiple languages.\r\nYou also need an underlying architecture that allows you to add and change\r\n  features, purchase and integrated external software components, and allows\r\n  other software vendors to make their products talk to yours, add customized\r\n  widgets to it, embed your product inside something larger of their own.\r\nA good architecture, one that will carry you for a decade's worth of\r\n  unpredictable technology and marked changes, take months to develop.\r\nBut if you skip this step, as Netscape did, you have made a truly Faustian\r\n  bargain.\r\n<p>\r\n\r\nThe problem with this [building just what you need, instead of planning ahead]\r\n  is that these systems start getting ferociously complicated.\r\nIt comes time to fix a mistake, add a feature, replace something and you\r\n  discover that everything is connected to\r\n  everything else in ways you can't even begin to understand.\r\nBecause you're doing something more ambitious than the initial academic\r\n  prototype, it's big enough that you need to partition it across a team.\r\nThe members of the team need to have a clear idea of how their work relates to\r\n everyone else's, and they need to be able to communicate to the testers whose\r\n job it is to find errors.\r\nOtherwise [in other words], you give the patient a kidney transplant and his\r\n heart suddenly fails; then you give him a heart drug, but that makes his\r\n lungs collapse. You don't know why, and you're screwed.\r\n<p>\r\n\r\nAnd then the future comes, and you're really screwed.\r\nLater releases of the product inevitably are more complex, because they must\r\n  continue to support previous version while adding new capabilities.\r\nYou discover that the original developers have quit or been promoted or have\r\n  forgotten what they did, and it's time to keep up with the competition by\r\n  adding new features, supporting more platforms, translating into Japanese,\r\n  and so forth.\r\nThe engineering team has to quadruple in size. You start discovering things\r\n  like three different groups need to change the same piece of code, and each\r\n  set of changes causes problems for the others, and nobody else can test their\r\n  work until that piece of code is stable, so a hundred people twiddle their \r\n  thumbs for a week.\r\nOr you want to use an existing function for some new purpose, but you can't\r\n  isolate it from everything else, so you have to write it all over again.\r\nThis not only means that you have the extra time and cost of writing and\r\n  maintaining twice as much code, but you probably have to ensure that the two\r\n  versions work exactly alike, which they almost certainly won't.\r\n<p>\r\n\r\nWith each successive release, these problems get worse.\r\nBy the time you're on your fifth release, the decision to do your first\r\n product the quick and dirty way has probably cost you ten times what it\r\n originally saved.\r\nA program like Microsoft's Windows 98 is tens of millions of lines of code.\r\nNobody can keep that much complexity in their head or hope to manage it\r\n effectively.\r\nSo you need an architecture that says to everyone, \"Here's how this thing\r\n works, and to do your part, you need to understand only these five things,\r\n and don't you dare touch anything else.\"\r\n<p align=\"right\"><i>- C. Ferguson (High Stakes, No Prisoners; Times Business Press, page 107-109)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI can live with doubt and uncertainty.\r\nI think it's much more interesting to live not knowing than to have answers\r\n  which might be wrong...\r\nIn physics the truth is rarely perfectly clear, and that is certainly\r\n  universally the case in human affairs.\r\nHence, what is not surrounded by uncertainty cannot be the truth.\r\n<p align=\"right\"><i>- R. Feynman (in \"Perfectly Reasonable Deviations from \r\n the Beaten Track: The Letters of Richard P. Feynman\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you're teaching a class, you can think about the elementary things that you\r\n  know very well.\r\nThese things are kind of fun and delightful. It doesn't do any harm to think\r\n  them over again.\r\nIs there a better way to present them?\r\nThe elementary things are easy to think about; if you can't think of a new\r\n  thought, no harm done; what you thought about it before is good enough for\r\n  the class.\r\nIf you do think of something new, you're rather pleased that you have a new\r\n  way of looking at it.\r\n<p>\r\nThe questions of the students are often the source of new research.\r\nThey often ask profound questions that I've thought about at times and then\r\n  given up on, so to speak, for a while.\r\nIt wouldn't do me any harm to think about them again and see if I can go any\r\n  further now.\r\nThe students may not be able to see the thing I want to answer, or the\r\n  subtleties I want to think about, but they remind me of a problem by\r\n  asking questions in the neighborhood of that problem.\r\nIt's not so easy to remind yourself of these things.\r\n<p align=\"right\"><i>- R. Feynman (from \"The Dignified Professor\" in\r\n  \"Surely You're Joking Mr. Feynman\": pg. 166)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nPrecise language is not the problem.\r\nClear language is the problem.\r\n<p align=\"right\"><i>- R. Feynman</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe inside of a computer is as dumb as hell but it goes like mad!\r\n<p align=\"right\"><i>- R. Feynman</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFeynman's Learning Strategy\r\n<p>\r\nStep 1: Continually ask \"Why\"?<br>\r\nStep 2: When you learn something, learn it to where you can explain it to\r\n        a child.<br>\r\nStep 3: Instead of arbitrarily memorizing things, look for the explanation that\r\n         makes it obvious.\r\n<p align=\"right\"><i>- R. Feynman</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhat I cannot create I do not understand.\r\n<p align=\"right\"><i>- R. Feynman</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen the problem [quantum chromodynamics] is finally solved, it will all be\r\n  by imagination.\r\nThen there will be some big thing about the great way it was done.\r\nBut it's simple -it will all be by imagination, and persistence.\r\n<p align=\"right\"><i>- R. Feynman (in Mlodinow's \"Feynman's Rainbow\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen a Caltech student asked the eminent cosmologist Michael Turner what his\r\n  \"bias\" was in favoring one or another particle as a likely candidate\r\n  to compromise dark matter in the universe, Feynman snapped, \"Why do you\r\n  want to know his bias? Form your own bias!\"\r\n<p align=\"right\"><i>- R. Feynman (related by Timothy Ferris in \r\n  \"Perfectly Reasonable Deviations from the Beaten Track: The Letters of\r\n  Richard P. Feynman\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere does not now, nor will there ever exist, a programming language in which\r\n  it is the least bit hard to write bad programs.\r\n<p align=\"right\"><i>- L. Flon</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf I ask another professor what he teaches in the introductory programming\r\n  course, whether he answers proudly \"Pascal\" or diffidently \"FORTRAN,\" I know\r\n  that he is teaching a grammar, a set of semantic rules, and some finished\r\n  algorithms, leaving the students to discover, on their own, some process of\r\n  design.\r\n<p align=\"right\"><i>- R. Floyd</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn order to get the world in one's grasp, to comprehend the world, one must not\r\n  look at the world nor describe it, one must calculate it.\r\n<p align=\"right\"><i>- V. Flusser</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAn engineer can do for a nickel what any damn fool can do for a dollar.\r\n<p align=\"right\"><i>- H. Ford</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFailure is the opportunity to begin again more intelligently.\r\n<p align=\"right\"><i>- H. Ford</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe only real mistake is the one from which we learn nothing.\r\n<p align=\"right\"><i>- H. Ford</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEducation's purpose is to replace an empty mind with an open one.\r\n<p align=\"right\"><i>- M. Forbes</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny fool can write code that a computer can understand.\r\nGood programmers write code that humans can understand. \r\n<p align=\"right\"><i>- M. Fowler, \"Refactoring: Improving the Design of Existing Code\"</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n[Describing JUnit]\r\nNever in the field of program testing, was so much owed by so many to so few\r\n  lines of code.\r\n<p align=\"right\"><i>- M. Fowler (apologizing to Winston Churchill)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAwaken people's curiosity.\r\nIt is enough to open minds, do not overload them.\r\nPut there just a spark.\r\n<p align=\"right\"><i>- A. France</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSimplicity is the soul of efficiency. \r\n<p align=\"right\"><i>- A. Freeman (in The Eye of Osiris)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen I am working on a problem, I never think about beauty.\r\nI think only of how to solve the problem.\r\nBut when I have finished, if the solution is not beautiful, I know it is\r\n  wrong. \r\n<p align=\"right\"><i>- B. Fuller</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe biggest difference between time and space is that you can't reuse time.\r\n<p align=\"right\"><i>- M. Furst</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<a name=\"G\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">G</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nHabitability is the characteristic of source code that enables programmers\r\ncoming to the code later in its life to understand its construction and\r\nintentions and to change it comfortably and confidently... Software needs\r\nto be habitable because it always has to change...Programs are written and\r\nmaintained, bugs are fixed, features are added, performance is tuned, and\r\na whole variety of changes are made both by the original and new programming\r\nteam members... What is important is that it be easy for programmers\r\nto come up to speed with the code, to be able to navigate through it\r\neffectively, to be able to understand what changes to make, and to be able to\r\nmake them safely and correctly.\r\n<p align=\"right\"><i>- R. Gabriel (Patterns of Software, Oxford Press 1996)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAll truths are easy to understand once they are discovered; the point is to\r\n  discover them.\r\n<p align=\"right\"><i>- G. Galilei</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMathematics is the language with which G-d has written the universe.\r\n<p align=\"right\"><i>- G. Galilei</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA complex system that works in invariably found to have evolved from a simple\r\n  system that worked.\r\n<p align=\"right\"><i>- J. Gall</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAn excellent plumber is infinitely more admirable than an incompetent\r\n  philosopher.\r\nThe society that scorns excellence in plumbing because plumbing is a humble\r\n  activity and tolerates shoddiness in philosophy because it is exalted\r\n  activity will have neither good plumbing or good philosophy.\r\nNeither its pipes or its theories will hold water.\r\n<p align=\"right\"><i>- J. Gardner</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n 640K [of main memory] ought to be enough for anybody.\r\n<p align=\"right\"><i>- W. Gates (Founder and CEO Microsoft), 1981 - disclaimed </i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe best way to prepare [to be a programmer] is to write programs, and to\r\n  study great programs that other people have written.\r\nIn my case, I went to the garbage cans at the Computer Science Center and\r\n  fished out listings of their operating systems.\r\n<p align=\"right\"><i>- W. Gates</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n We flew down weekly to meet with IBM, but they thought the way to measure\r\n  software was the amount of code we wrote, when really the better the\r\n  software, the fewer lines of code.\r\n<p align=\"right\"><i>- W. Gates</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA great lathe operator commands several times the wage of an average lathe\r\n  operator, but a great writer of software code is worth 10,000 times the price\r\n  of an average software writer.\r\n<p align=\"right\"><i>- W. Gates</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nLearning to write programs stretches your mind, and helps you think better,\r\n  creates a way to thinking about things that I think is helpful in all domains.\r\n<p align=\"right\"><i>- W. Gates</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is not knowledge, but the act of learning, not possession, but the act\r\n  of getting there which generates the greatest satisfaction.\r\n<p align=\"right\"><i>- F. Gauss</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBeauty is more important in computing than anywhere else in technology because\r\n  software is so complicated.\r\nBeauty is the ultimate defense against complexity.\r\n...\r\nThe geniuses of the computer field, on the other hand, are the\r\n  people with the keenest aesthetic senses, the ones who are \r\n  capable of creating beauty.\r\nBeauty is decisive at every level: the most important interfaces, the most\r\n  important programming languages, the winning algorithms are the beautiful\r\n  ones.\r\n<p align=\"right\"><i>- D. Gelernter (\"Machine Beauty\", Basic Books, 1998)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGood programmers know what's beautiful and bad ones don't.\r\n<p align=\"right\"><i>- D. Gelernter (\"Machine Beauty\", Basic Books, 1998)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nObject-oriented programming as it emerged in Simula 67 allows\r\n  software structure to be based on real-world structures, and\r\n  gives programmers a powerful way to simplify the design and\r\n  construction of complex programs.\r\n<p align=\"right\"><i>- D. Gelernter (\"Machine Beauty\", Basic Books, 1998)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOne of the principal objects of theoretical research in any department of\r\n  knowledge is to find the point of view from which the subject appears in\r\n  its greatest simplicity.\r\n<p align=\"right\"><i>- J. W. Gibbs</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nVague and nebulous is the beginning of all things, but not their end.\r\n<p align=\"right\"><i>- K. Gibran</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAt the source of every error which is blamed on the computer, you will find at\r\n  least two human errors, one of which is the error of blaming it on the\r\n  computer.\r\n<p align=\"right\"><i>- T. Gilb (in \"Laws of Unreliability\",\r\n                      Datamation March 1975)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIndirection is the right direction.\r\n<p align=\"right\"><i>- A. Glew</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputer programs are the most intricate, delicately balanced and finely\r\n  interwoven of all the products of human industry to date.\r\nThey are machines with far more moving parts than any engine: the parts don't\r\n   wear out, but they interact and rub up against one another in ways the\r\n   programmers themselves cannot predict.\r\n<p align=\"right\"><i>- J. Gleick</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nNever put off until run time what can be done at compile time.\r\n<p align=\"right\"><i>- A. Glew</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAlways code as if the guy who ends up maintaining your code will be a violent\r\n  psychopath who knows where you live.\r\n<p align=\"right\"><i>- M. Golding</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThis attitude [the abstract method in mathematics] can be encapsulated in\r\n  the following slogan: a mathematical object <i>is</i> what it <i>does</i>.\r\n<p align=\"right\"><i>- T. Gowers (in \"Mathematics: A Very Short Introduction\"\r\n   pg. 18)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA really good language should be both clean and dirty: cleanly designed,\r\n  with a small core of well understood and highly orthogonal operators,\r\n  but dirty in the sense that it lets hackers have their way with it....A real\r\n  hacker's language will always have a slightly raffish character.\r\n<p align=\"right\"><i>- P. Graham (in \"Hackers and Painters\" pg. 204)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFixing fresh bugs is easier than fixing old ones.\r\nIt's usually fairly quick to find a bug in code you just wrote.\r\nWhen it turns up you often know what's wrong before you even look at the\r\n  source, because you were already worrying about it subconsciously.\r\nFixing a bug in something you wrote six months ago (the average case if you\r\n  release once a year) is a lot more work.\r\nAnd since you don't understand the code as well, you're more likely to fix it\r\n  in an ugly way, or even introduce more bugs.\r\n<p>\r\nWhen you catch bugs early, you also get fewer compound bugs.\r\nCompound bugs are two separate bugs that interact: you trip going downstairs,\r\n  and when you reach for the handrail it come off in your hand.\r\nIn software this kind of bug is the hardest to find, and also tends to have the\r\n  worst consequences.\r\nThe traditional \"break everything and then filter out the bugs\" approach\r\n  inherently yields a lot of compound bugs.\r\nAnd software released in a series of small chances inherently tends not to.\r\nThe floors are constantly being swept clean of any loose objects that might\r\n  later get stuck to something.\r\n<p align=\"right\"><i>- P. Graham (in \"Hackers and Painters\" pg. 65-66)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGreat software, likewise, requires a fanatical devotion to beauty.\r\nIf you look inside good software, you find that parts that no one is ever\r\n  supposed to see are beautiful too.\r\nWhen it comes to code I behave in a way that would make me eligible for\r\n  prescription drugs if I approached everyday life the same way.\r\nIt drives me crazy to see code that's badly indented, or that uses ugly\r\n  variable names.\r\n<p align=\"right\"><i>- P. Graham (in \"Hackers and Painters\" pg. 29)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nImagine the kind of conversation you would have with someone so far away that\r\n  there was a transmission delay of one minute.\r\nNow imagine speaking to someone in the next room.\r\nYou wouldn't just have the same conversation faster, you would have a different\r\n  kind of conversation.\r\nIn Lisp, developing software is like speaking face-to-face.\r\nYou can test code as you're writing it.\r\nAnd instant turnaround has just as dramatic an effect on development as it\r\n  does on conversation.\r\nYou don't just write the same program faster; you write a different kind of\r\n  program. \r\n<p align=\"right\"><i>- P. Graham (in \"On Lisp\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSimplicity is the most important thing in technology.\r\nAnd it's only getting more important.\r\n<p align=\"right\"><i>- P. Graham</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe difference between design and research seems to be a question of the\r\n  good versus the new.\r\nDesign doesn't have to be new, but it has to be good.\r\nResearch doesn't have to be good, but it has to be new.\r\nI think these two paths converge at the top: the best design surpasses its\r\n  predecessors by using new ideas, and the best research solves problems that\r\n  are not only new, but worth solving.\r\nSo ultimately design and research are aiming for the same destination, just\r\n  approaching it from different directions.\r\n<p align=\"right\"><i>- P. Graham (in \"Hackers and Painters\" footnote 9, pg. 224)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe way to make programs easy to read is not to stuff them with comments...\r\nA good programming language ought to be better for explaining software than\r\n  English.\r\nYou should only need comments when there is some kind of kludge you need to\r\n  warn readers about, just as on a road there are only arrows on parts with\r\n  unexpectedly sharp curves.\r\n<p align=\"right\"><i>- P. Graham (in \"Hackers and Painters\" footnote 9, pg. 224)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nYou should figure our programs as you're writing them, just as writers and \r\n  painters and architects do.\r\nRealizing this [programming as sketching] has real implications for software\r\n  design.\r\nIt means that a programming language should, above all, be malleable.\r\nA programming language is for thinking of programs, not for expressing\r\n  programs you've already thought of.\r\nIt should be a pencil, not pen.\r\n<br>...<br>\r\nRemember too that languages are not primarily a form for finished programs,\r\n  but something that programs have to be developed in.\r\n<br>...<br>\r\nA good programming language should, like oil paint, make it easy to change your\r\n  mind.\r\n<br>...<br>\r\nPaintings usually begin with a sketch.\r\nGradually the details get filled in.\r\nBut it is not merely a process of filling in.\r\nSometimes the original plans turn out to be mistaken.\r\nCountless paintings, when you look at them in x-rays, turn out to have limbs\r\n  that have been moved or facial features that have been readjusted.\r\n<br>...<br>\r\nSo the test of a language is not simply how clean the finished program\r\n  looks in it, but how clean the path to the finished program was.\r\n<br>...<br>\r\nWhat made oil paint so exciting, when it first became popular in the \r\n  fifteenth century, was that you could make the finished work <it>from</it>\r\n  the prototype.\r\nYou could make a preliminary drawing if you wanted to, but you weren't held\r\n  to it; you could work out all the details, and even make major changes\r\n  as you finished the painting.\r\nYou can do this with software too.\r\nA prototype doesn't have to be just a model; you can refine it into the\r\n  finished product....it's good for morale.\r\n<br>...<br>\r\nBuilding something by gradually refining a prototype is good for morale\r\n  because it keeps you engaged.\r\nIn software, my rule is: always have working code.\r\nIf you're writing something you'll be able to test in an hour, you have the\r\n  prospect of an immediate reward to motivate you.\r\n<p align=\"right\"><i>- P. Graham (in \"Hackers and Painters\"\r\n   pg. 22, 27, 218, 219, 220, 221)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIncidentally, when we're faced with a \"prove or disprove,\" we're usually\r\n  better off trying first to disprove with a counterexample, for two reasons:\r\nA disproof is potentially easier (we need just one counterexample); and\r\n  nitpicking arouses our creative juices.\r\nEven if the given assertion is true, our search for a counterexample often\r\n  leads to a proof, as soon as we see why a counterexample is impossible.\r\nBesides, it's healthy to be skeptical. \r\n<p align=\"right\"><i>- \r\nR. Graham, D. Knuth and O. Patashnik (in \"Concrete Mathematics: A Foundation\r\n  for Computer Science\")\r\n</i>\r\n</table>\r\n\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny sufficiently complicated C or FORTRAN program contains an ad hoc\r\n  informally specified bug-ridden slow implementation of half of Lisp.\r\n<p align=\"right\"><i>- P. Greenspun</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWriting is nature's way of letting you know how sloppy your thinking is.\r\n<p align=\"right\"><i>- R. Guindon (cartoon, San Francisco Chronincle,\r\n                      January 1989)</i>\r\n<tr><td align=\"left\" valign=\"top\">\r\nMathematics is nature's way of letting you know how sloppy your writing is.\r\n<p align=\"right\"><i>- L. Lamport, (\"Specifying Systems\", 2002, p. 2</i>\r\n<tr><td align=\"left\" valign=\"top\">\r\nFormal mathematics is nature's way of letting you know how sloppy your\r\n  mathematics is.\r\n<p align=\"right\"><i>- L. Lamport, (\"Specifying Systems\", 2002, p. 2</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nUNIX was not designed to stop people from doing stupid things, because that\r\n   would also stop them from doing clever things.\r\n<p align=\"right\"><i>- D. Gwyn</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"H\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">H</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny performance problem can be solved by removing a level of indirection.\r\n  (also see \"Any programming problem...\" by Anonymous).\r\n<p align=\"right\"><i>- M. Haertel</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe tendency to err that programmers have been noticed to share with other\r\n  human beings has often been treated as though it were an awkwardness\r\n  attendant upon programming's adolescence, which like acne would disappear\r\n  with the craft's coming of age.\r\nIt has proved otherwise.\r\n<p align=\"right\"><i>- M. Halpern</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nResearch by Stanford pyschology professor Carol Dweck suggests that a student\r\nwho has been raised to believe that his or her success stems from special\r\nabilities rather than hard work and learning from mistakes may become fixated\r\non maintaining the \"gifted\" status at any cost, which could include cheating.\r\n<p align=\"right\"><i>- J. Hamilton (from \"Why We Cheat\" in \"Stanford Magazine\", Sep/Oct 2015) </i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe purpose of computing is insight, not numbers.\r\n<p align=\"right\"><i>- R. Hamming</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<!---\r\nMissing\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n<p align=\"right\"><i>- F. Hapgood</i>\r\n</table>\r\n<p>\r\n--->\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe mathematician's patterns, like those of the painter's or the poet's,\r\n  the ideas, like the colours or words, must fit together in a harmonious\r\n  way.\r\nThere is no permanent place in this world for ugly mathematics.\r\n<p align=\"right\"><i>- G.H. Hardy (in \"A Mathematician's Apology\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgramming is an explanatory activity.\r\n<p align=\"right\"><i>- R. Harper</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is very interesting to me how quickly the class has divided up into three\r\n  factions.\r\nOne faction being the students who sit in the back of the class, given up\r\n  sitting in their assigned seats, preparing the cases.\r\nWhat is it, only October?\r\nThey've already given up trying -the cowards.\r\nThe second group are the ones who won't raise their hands or volunteer an\r\n  answer, but will try when they're called upon.\r\nThat's where I am right now, living in a state of constant fear.\r\nAnd then there's the third echelon: the upper echelon; the volunteers.\r\nThey raise their hands in class.\r\nThey thrust themselves into the fray.\r\nI don't think they're smarter than anyone else, but they have courage.\r\nAnd, they'll achieve the final recognition, that teachers will get to\r\n  know their names, and they'll get better grades.\r\nThe past couple weeks I've been preparing to enter the upper echelon,\r\n  and this weekend -if I can get all my work done-\r\n  I'm going to enter it Monday morning, in Kingsfield's contract law class.\r\n<p align=\"right\"><i>- James Hart (a law student in \"The Paper Chase\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n[Breaking into the \"red\" room in the Harvard law library, which contains the\r\n  notes of Harvard professors from their school days, and drafts of their\r\n  articles and books]\r\nDo you realize what this is?\r\nThis is it.\r\nThis is the unbroken chain.\r\nThe ageless passing of wisdom.\r\nHey [what is it?] listen to this.\r\n  \"Kingsfield, Charles W. notes on contract law in the course\r\n   on contracts by Professor Williston at the Harvard Law School, 1927\".\r\nWhat the hell is it.\r\nThey're just notes: and they look just like mine.\r\nLook [reading from Kingsfield's notes].\r\n  \"Questions: Does everybody have a contract to obey everybody else's rights.\r\n  What is a contract?\r\n  What do you owe to others?\"\r\nLook, there are even doodles.\r\n[C'mon, let's get outta here.]\r\nWait, wait.\r\n  \"Can we make a contract with G-d that is biding to man?\r\n  ...\r\n  After all, I am almost the living extension of the old judges.\r\n  Where would they be without me.\r\n  I carry in my mind the cases they wrote.\r\n  Where the hell would they be if it wasn't for me?\r\n  Who would hang their pictures if there were no law students?\r\n  It's hard being the living extension of tradition.\"\r\n<p align=\"right\"><i>- James Hart (a law student in \"The Paper Chase\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere are features that should not be used.\r\nThere are concepts that should not be exploited.\r\nThere are problems that should not be solved.\r\nThere are programs that should not be written.\r\n<p align=\"right\"><i>- R. Harter</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEventually hardware fails; eventually software works.\r\n<p align=\"right\"><i>- M. Hartung</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nPROBLEMS<br>\r\nProblems worthy<br>\r\nof attack<br>\r\nprove their worth<br>\r\nby hitting back.\r\n<p align=\"right\"><i>- P.Hein (in \"Grooks\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere are two schools of thought about teaching computer science.\r\nWe might caricature the two views this way:\r\n<ul>\r\n<li><b>The conservative view</b>:\r\nComputer programs have become too large and complex to encompass in a human\r\n  mind.\r\nTherefore, the job of computer science education is to teach people how to\r\n  discipline their work in such a way that 500 mediocre programmers can join\r\n  together and produce a program that correctly meets its specification.\r\n<p>\r\n<li><b>The radical view</b>:\r\nComputer programs have become too large and complex to encompass in a human\r\n  mind.\r\nTherefore, the job of computer science education is to teach people how to\r\n  expand their minds so that the programs can fit, by learning to think in a\r\n  vocabulary of larger, more powerful, more flexible ideas than the obvious\r\n  ones.\r\nEach unit of programming thought must have a big payoff in the capabilities of\r\n  the program.\r\n<p align=\"right\"><i>- B. Harvey and M. Wright (in \"Simply Scheme\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTHE ROAD TO WISDOM<br>\r\nThe road to wisdom? - Well, it's plain<br>\r\nand simple to express:<br>\r\nErr<br>\r\nand err<br>\r\nand err again<br>\r\nbut less<br>\r\nand less<br>\r\nand less.\r\n<p align=\"right\"><i>- P.Hein (in \"Grooks\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe one who insists on never uttering an error must remain silent.\r\n<p align=\"right\"><i>- W. Heisenberg</a></i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe speed of a non-working program is irrelevant.\r\n<p align=\"right\"><i>- S. Heller (in \"Efficient C/C++ Programming\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nRefactoring provides enough energy to a system for it to relax into a new and\r\n  more comfortable state, a new local minimum.\r\nThe effect of refactoring commonality is to tame the complexity of your system.\r\n<p align=\"right\"><i>- K. Henney (in\r\n  <a href=\"http://www.two-sdg.demon.co.uk/curbralan/papers/minimalism/TheImperialClothingCrisis.html\">Minimalism: The Imperial Clothing Crisis)</a></i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA process cannot be understood by stopping it.\r\nUnderstanding must move with the flow of the process, must join and flow\r\n  with it.\r\n<p align=\"right\"><i>- F. Herbert (The First Law of Mentat in \"Dune\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt's [programming] the only job I can think of where I get to be both an\r\n  engineer and an artist.\r\nThere's an incredible, rigorous, technical element to it, which I like\r\n  because you have to do very precise thinking.\r\nOn the other hand, it has a wildly creative side where the boundaries of\r\n  imagination are the only real limitation.\r\n<p align=\"right\"><i>- A. Hertzfeld (original Mac programmer)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n...At first I hoped that such a technically unsound project would collapse but\r\n  I soon realized it was doomed to success.\r\nAlmost anything in software can be implemented, sold, and even used given\r\n  enough determination.\r\nThere is nothing a mere scientist can say that will stand against the flood of\r\n  a hundred million dollars.\r\nBut there is one quality that cannot be purchased in this way -and that is\r\n   reliability.\r\nThe price of reliability is the pursuit of the utmost simplicity.\r\nIt is a price which the very rich find most hard to pay.\r\n<p align=\"right\"><i>- C.A.R. Hoare</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI had the idea to define programming languages in a way that gave enough\r\n  information to the user of the programming language to be able to predict\r\n  whether the computer would do what hte programming wanted it to.\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI was eventually persuaded of the need to design programming notations so as to\r\n  maximize the number of errors which cannot be made, or if made, can be\r\n  reliably detected at compile time.\r\n<p align=\"right\"><i>- C.A.R. Hoare</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn the development of the understanding of complex phenomena, the most powerful\r\n  tool available to the human intellect is abstraction.\r\nAbstraction arises from the recognition of similarities between certain\r\n  objects, situations, or processes in the real world and the decision to\r\n  concentrate on these similarities and to ignore, for the time being, their\r\n  differences.\r\n<p align=\"right\"><i>- C.A.R. Hoare</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nInside every well-written large program is a well-written small program.\r\n<p align=\"right\"><i>- C.A.R. Hoare</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nPremature optimization is the root of all evil in programming.\r\n<p align=\"right\"><i>- C.A.R. Hoare</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe unavoidable price of reliability is simplicity.\r\n<p align=\"right\"><i>- C.A.R. Hoare</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere are two ways of constructing a software design.\r\nOne way is to make it so simple that there are obviously no deficiencies.\r\nAnd the other way is to make it so complicated that there are no obvious\r\n  deficiencies.\r\n<p align=\"right\"><i>- C.A.R. Hoare</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhat is the central core of the subject [computer science]?\r\nWhat is it that distinguishes it from the separate subjects with which it is\r\n  related?\r\nWhat is the linking thread which gathers these disparate branches into a\r\n  single discipline.\r\nMy answer to these questions is simple -it is the art of programming a\r\n  computer.\r\nIt is the art of designing efficient and elegant methods of getting a computer\r\n  to solve problems, theoretical or practical, small or large, simple or\r\n  complex.\r\nIt is the art of translating this design into an effective and accurate\r\n  computer program.\r\n<p align=\"right\"><i>- C.A.R. Hoare</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen examining the detail of the algorithm, it seems probable that the\r\n  proof will be helpful in explaining not only what is happening but why.\r\n<p align=\"right\"><i>- C.A.R. Hoare (in \"An Axiomatic Basis for Computer Programming\", 1969)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nYou cannot teach beginners top-down programming, because they don't know which\r\n  end is up.\r\n<p align=\"right\"><i>- C.A.R. Hoare (private communication)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAll thought is a kind of computation.\r\n<p align=\"right\"><i>- D. Hobbes</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe problem is never how to get new, innovative thoughts into your mind,\r\n  but how to get old ones out!\r\n<p align=\"right\"><i>- D. Hock (founder of VISA)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nUsing a language we may create models of phenomena of interest,\r\n  and by using models, phenomena may be studied for purposes of\r\n  understanding or prediction.\r\nModels may be used for analysis focused on a close examination of\r\n  individual parts of the model and for synthesis aimed at\r\n  understanding the interplay of the parts, that is, understanding\r\n  the model as a whole.\r\nA novel is like a model of the real world expressed in a written\r\n  language like English.\r\nIn a novel, the characters may be analyzed and the interaction between\r\n  people may be displayed and studied.\r\n  (in \"Dreams of Calculus: Perspectives on Mathematics Education\")</i>\r\n<p align=\"right\"><i>- J. Hoffman, C. Johnson, A. Logg\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe ability to simplify means to eliminate the unnecessary so that the\r\n  necessary may speak.\r\n<p align=\"right\"><i>- H. Hofmann (in \"Introduction to the Bootstrap\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThis sequence [of languages, SP/1 through SP/8] solves one of the perennial\r\n  problems of introductory programming.\r\nAs J.J. Horning once put it, the subject requires that everything must be\r\n  taught first.\r\n<p align=\"right\"><i>- R. Holt, D. Wortman, D. Barnard and J. Cordy\r\n   (quoting J.J. Horning) in\r\n   \"SP/k: A System for Teaching Computer Programming\",\r\n   CACM 20/5 (May 77) pg. 303 </i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA ship in port is safe, but that is not what ships are built for.\r\nI want all the youngsters to sail out to sea and be good ships.\r\n<p align=\"right\"><i>- G. Hopper</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen you have a good idea and you've tried it and you know it's going to\r\n  work, go ahead and do it -because it's much easier to apologize afterwards\r\n  than it is to get permission.\r\n<p align=\"right\"><i>- G. Hopper</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputer Science is the only discipline in which we view adding a new wing to a\r\n building as being maintenance.\r\n<p align=\"right\"><i>- J. Horning</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTo treat programming scientifically, it must be possible to specify the\r\n  required properties of programs precisely. Formality is certainly not an end\r\n  in itself.\r\nThe importance of formal specifications must ultimately rest in their utility\r\n  -in whether or not they are used to improve the quality of software or to\r\n  reduce the cost of producing and maintaining software.\r\n<p align=\"right\"><i>- J. Horning</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOne purpose of CRC cards [a design tool] is to fail early, to\r\n  fail often, and to fail inexpensively.\r\nIt is a lot cheaper to tear up a bunch of cards that it would be\r\n  to reorganize a large amount of source code.\r\n<p align=\"right\"><i>- C. Horstmann (in Object-Oriented Design with Java)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAn examination should not be confused with an education.\r\n<p align=\"right\"><i>- C. Hsi</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe [teachers] make the road, others will make the journey.\r\n<p align=\"right\"><i>- V. Hugo</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe greatest mistake you can make in life is to be continually fearing you\r\n  will make one.\r\n<p align=\"right\"><i>- E. Hubbard</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<a name=\"I\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">I</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere were really just two main things [relating to programming languages].\r\nOne was simplicity and the other was practicality.\r\nBut when after 16 years [in 1995] we're still fighting to teach the world about\r\n  these simple things,..., you begin to realize the siple things are not\r\n  obvious.\r\n<p align=\"right\"><i>- A. Iverson</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<a name=\"J\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">J</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nRules of Optimization:<br>\r\n&nbsp Rule 1: Don't do it.<br>\r\n&nbsp Rule 2 (for experts only): Don't do it yet.\r\n<p align=\"right\"><i>- M. A. Jackson\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn the practical use of our intellect, forgetting is as important as remembering.\r\n<p align=\"right\"><i>- W. James\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n\"Do you want to sell sugar water for the rest of your life, or do you want to\r\n  change the world?\" (what Steve Jobs said to John Sculley when trying to\r\n  recruit him from Pepsi to work at Apple in 1983).\r\n<p align=\"right\"><i>- S. Jobs\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEverybody in this country should learn to program a computer, because it\r\n  teaches you how to think.\r\n<p align=\"right\"><i>- S. Jobs\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n\"Learning to program teaches you how to think.\r\n Computer science is a liberal art\"\r\n<p align=\"right\"><i>- S. Jobs\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThat simplicity is the ultimate sophistication.\r\nWhat we meant by that was when you start looking at a problem and it seems\r\n  really simple with all these simple solutions, you don't really understand\r\n  the complexity of the problem.\r\nAnd your solutions are way too oversimplified, and they don't work.\r\nThen you get into the problem, and you see it's really complicated.\r\nAnd you come up with all these convoluted solutions.\r\nThat's sort of the middle, and that's where most people stop, and the\r\n  solutions tend to work for a while.\r\nBut the really great person will keep on going and find, sort of, the key,\r\n  underlying principle of the problem.\r\nAnd come up with a beautiful elegant solution that works.\r\n<p align=\"right\"><i>- S. Jobs\r\n  (in \"The Perfect Thing\" by Steven Levy, pg. 67-68)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThat's been one of my mantras -focus and simplicity.\r\nSimple can be harder than complex: you have to work hard to get your thinking\r\n  clean to make it simple.\r\nBut it's worth it in the end because once you get there, you can move\r\n  mountains.\r\n<p align=\"right\"><i>- S. Jobs\r\n  (BusinessWeek interview, May 1998)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe only problem with Microsoft is they just have no taste.\r\nThey have absolutely no taste.\r\nWhat that means is -I don't mean that in a small way; I mean that in a\r\n  big way- is the sense that they don't think of original ideas.\r\nThey don't bring much culture into their product.\r\n ...\r\nSo I guess I am saddened not by Microsoft's success -I have no problem\r\n  with their success; they've earned their success (for the most part).\r\nI have a problem with the fact that the just make really third-rate products.\r\n<p align=\"right\"><i>- S. Jobs (transcribed from \"Triumph of the Nerds\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBefore software can be reusable it first has to be usable.\r\n<p align=\"right\"><i>- R. Johnson</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhat we hope ever to do with ease, we must first learn to do with diligence.\r\n<p align=\"right\"><i>- S. Johnson</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe fastest algorithm can frequently be replaced by one that is almost as fast\r\n  and much easier to understand.\r\n<p align=\"right\"><i>- D. Jones</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTo teach is to learn twice.\r\n<p align=\"right\"><i>- J. Joubert</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe honest truth is that having a lot of people staring at the\r\n  code does not find the really nasty bugs. The really nasty bugs are\r\n  found by a couple of really smart people who just kill themselves. \r\n(also see \"Given enough eyeballs...\" by E. Raymond).\r\n<p align=\"right\"><i>- B. Joy</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe don't manage our time as well as we manage our space.\r\nThere's an overhead of starting and an overhead of stopping a project because\r\n  you kind of lose your momentum.\r\nAnd you've got to bracket and put aside all the things you're already doing.\r\nSo you need reasonably large blocks of uninterrupted time if you're going to be\r\n  successful at doing some of these things.\r\nThat's why hackers tend to stay up late.\r\n<p> \r\nIf you stay up late and you have another hour of work to do, you can just stay\r\n  up another hour later without running into a wall and having to stop.\r\nWhereas it might take three or four hours if you start over, you might finish\r\n  if you just work that extra hour.\r\nIf you're a morning person, the day always intrudes a fixed amount of time in\r\n  the future.\r\nSo it's much less efficient.\r\nWhich is why I think computer people tend to be night people -because a\r\n  machine doesn't get sleepy.\r\n<p align=\"right\"><i>- B. Joy</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn the particular is contained the universal.\r\n<p align=\"right\"><i>- J. Joyce</i>\r\n</table>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMistakes are the portals of discovery.\r\n<p align=\"right\"><i>- J. Joyce</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n\r\n<a name=\"K\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">K</h3>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFollowing the thin song of mathematics and not the heavy voice of experience\r\n  proved to be another victory for engineering science.\r\n<p align=\"right\"><i>- T. von Karman</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n90% of code written today is getting around other people's mistakes.\r\n<p align=\"right\"><i>- A. Kay</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputer Science today keeps reinventing the flat tire.\r\n<p align=\"right\"><i>- A. Kay</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputers are to computing as instruments are to music.\r\nSoftware is the score whose interpretations amplifies our reach and lifts our\r\n  spirits.\r\nLeonardo da Vinci called music the shaping of the invisible,\r\n  and his phrase is even more apt as a description of software.\r\n<p align=\"right\"><i>- A. Kay</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n[In a programming language] Simple things should be simple and complex things\r\n  should be possible. \r\n<p align=\"right\"><i>- A. Kay</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe best way to predict the future is to invent it.\r\n<p align=\"right\"><i>- A. Kay</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOnce we start learning something, it is very hard for us to see what else\r\n  is going on...\r\nProbably the most disastrous thing that you can ever learn is your first\r\n   programming language, even if it is a good programming language.\r\nAnd the reason is that it tends to become computing.\r\n[And] So it might be a better idea to learn two or three programming languages\r\n  at the same time, even though that is a different kind of struggle,\r\n  but it would at least relativize what people think computing might be.\r\n<p align=\"right\"><i>- A. Kay</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nUntil real software engineering is developed, the next best practice is to\r\n  develop with a dynamic system that has extreme late binding in all aspects.\r\n<p align=\"right\"><i>- A. Kay</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen you can measure what you are speaking about, and express it in \r\n  numbers, you know something about it; but when you cannot measure it,\r\n  when you cannot express it in numbers, your knowledge is of a meager and\r\n  unsatisfactory kind.\r\n<p align=\"right\"><i>- Lord Kelvin</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nShould array indices start at 0 or 1?\r\nMy compromise of 0.5 was rejected without, I thought, proper consideration.\r\n<p align=\"right\"><i>- S. Kelly-Bootle</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you have a large number of unrelated ideas, you have to get quite a distance\r\n  away from them to get a view of all of them, and this is the role of\r\n  abstraction.\r\nIf you look at each too closely you see too many details.\r\nIf you get far away things may appear simpler because you can only see the\r\n  large, broad outlines; you do not get lost in petty details.\r\n<p align=\"right\"><i>- J. Kemeny \r\n                     (co-creator of the BASIC programming language)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAct in haste and repent at leisure; code too soon and debug forever. \r\n<p align=\"right\"><i>- R. Kennington</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nControlling complexity is the essence of computer programming.\r\n<p align=\"right\"><i>- B. Kernighan</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEveryone knows that debugging is twice as hard as writing a program in the\r\n  first place.\r\nSo if you are as clever as you can be when you write it, how will you\r\n  ever debug it?\r\n<p align=\"right\"><i>- B. Kernighan</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nhe most effective debugging tool is still careful thought, coupled with\r\n  judiciously placed print statements.\r\n<p align=\"right\"><i>- B. Kernighan</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAnother effective [debugging] technique is to explain your code to someone\r\n  else.\r\nThis will often cause you to explain the bug to yourself.\r\nSometimes it takes no more than a few sentences, followed by an embarrassed\r\n  \"Never mind, I see what's wrong. Sorry to bother you.\"\r\nThis works remarkably well; you can even use non-programmers as listeners.\r\nOne university computer center kept a teddy bear near the help desk.\r\nStudents with mysterious bugs were required to explain them to the bear before\r\n  they could speak to a human counselor. \r\n<p align=\"right\"><i>- B. Kernighan & D. Pike\r\n  (in \"The Practice of Programming\" pp. 123)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe only way to learn a new programming language is by writing programs in it.\r\n<p align=\"right\"><i>- B. Kernighan & D. Ritchie</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nCan writing be taught?\r\nIt can be learned, but I'm not sure it can be taught.\r\nIt's a self-taught kind of thing.\r\n<p align=\"right\"><i>- S. King (writer; answering a question when interviewed on PBS)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe study of law is something new and unfamiliar to most of you -unlike any\r\n  schooling you have ever been through before.\r\nWe use the Socratic method here:\r\nI call on you, ask you a question, and you answer it.\r\nWhy don't I just give you a lecture?\r\nBecause through my questions you learn to teach yourselves.\r\nThrough this method of questioning-answering, questioning-answering, we seek\r\n  to develop in you the ability to analyze that vast complex of facts that\r\n  constitute the relationships of members within a given society.\r\n<p>\r\nQuestioning and answering.\r\nAt times, you may feel that you have found the correct answer.\r\nI assure you that this is a total delusion on your part.\r\nYou will never find the correct, absolute, and final answer.\r\nIn my classroom, there is always another question, another question to follow\r\n  your answer.\r\nYes, you are on a treadmill.\r\nMy little questions spin the tumblers of your mind.\r\nYou are on an operating table; my little questions are the fingers probing your\r\n  brain.\r\nWe do brain surgery here.\r\nYou teach yourselves the law, but I train your mind.\r\nYou come in here with a skull full of mush, and you leave thinking like a\r\n  lawyer.\r\n<p align=\"right\"><i>- Professor Kingsfield\r\n  (addressing 1st year Harvard Law Students in \"The Paper Chase\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA charlatan makes obscure what is clear; a thinker makes clear what is obscure.\r\n<p align=\"right\"><i>- H. Kingsmill</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI made mistakes, but I never did make the same mistake.\r\n<p align=\"right\"><i>- B. Kirk</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe best theory is motivated by practice, and the set practice is motivated by\r\n  theory.\r\n<p align=\"right\"><i>- D. Knuth</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBeware of bugs in the above code; I have only proved it correct, not tried it. \r\n<p align=\"right\"><i>- D. Knuth</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputers are good at following instructions, but not at reading your mind.\r\n<p align=\"right\"><i>- D. Knuth (Tex, pg. 9)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDebugging is an art that needs much further study ....\r\nThe most effective debugging techniques seem to be those which are designed\r\n  and built into the program itself -many of today's best programmers will\r\n  devote nearly half of their programs to facilitating the debugging process\r\n  on the other half; the first half... will eventually be thrown away, but the\r\n  net result is a surprising gain in productivity.\r\n<p>\r\nAnother good debugging practice is to keep a record of every mistake that\r\n  is made.\r\nEven though this will probably be quite embarrassing, such information\r\n  is invaluable to anyone doing research on the debugging problem, and it\r\n  will also help you learn how to reduce the number of future errors.\r\n<p align=\"right\"><i>- D. Knuth (The Art of Computer Programming, Volume 1)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nLet us change our traditional attitude to the construction of programs.\r\nInstead of imagining that our main task is to instruct a computer what to do,\r\n  let us concentrate rather on explaining to human beings what we want a\r\n  computer to do. \r\n<p align=\"right\"><i>- D. Knuth</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n...<i>methods are more important than facts</i>.\r\nThe educational value of a problem given to a student depends mostly on how\r\n  often the thought processes that are invoked to solve it will be helpful in\r\n  later situations.\r\nIt has little to do with how useful the answer to the problem may be.\r\nOn the other hand, a good problem must also motivate the students; they\r\n  should be interested in seeing the answer.\r\nSince students differ so greatly, I cannot expect everyone to like the problems\r\n  that please me.\r\n<p align=\"right\"><i>- D. Knuth (in \"Are Toy Problems Useful\", Chapter 10 of\r\n  \"Selected Papers on Computer Science\", pg. 176)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n...One of the most important lessons, perhaps, is the fact that SOFTWARE IS\r\n  HARD.\r\nFrom now on I shall have significantly greater respect for every successful\r\n  software tool that I encounter.\r\nDuring the past decade I was surprised to learn that the writing of programs\r\n  for TeX and Metafont proved to be much more difficult than all the other\r\n  things I had done (like proving theorems or writing books).\r\nThe creation of good software demands a significantly higher standard of\r\n  accuracy than those other things do, and it requires a longer attention\r\n  span than other intellectual tasks.\r\n<p align=\"right\"><i>- D. Knuth\r\n   (in \"Selected Papers on Computer Science\", pp 161)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgramming is the art of telling another human being what one wants the\r\n  computer to do.\r\n<p align=\"right\"><i>- D. Knuth</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe should forget about small efficiencies, say about 97% of the time:\r\n  premature optimization is the root of all evil.\r\n<p align=\"right\"><i>- D. Knuth</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen I speak about computer programming as an art, I am thinking primarily of\r\n  it as an art <i>form</i>, in an aesthetic sense.\r\nThe chief goal of my work as an educator and author is to help people learn\r\n  how to write <i>beautiful programs</i>...My feeling is that when we prepare\r\n  a program, the experience can be just like composing poetry or music...Some\r\n  programs are elegant, some are exquisite, some are sparkling.\r\nMy claim is that it is possible to write <i>grand</i> programs, <i>noble</i>\r\n  programs, truly <i>magnificent</i> ones!...computer programming is an art,\r\n  because it applies accumulated knowledge to the world, because it requires\r\n  skill and ingenuity, and especially because it produces objects of beauty.\r\nProgrammers who subconsciously view themselves as artists will enjoy what they\r\n  do and will do it better.\r\n<p align=\"right\"><i>- D. Knuth (Computer Programming as an Art. Turing Award Speech 1974)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen certain concepts of TeX are introduced informally, general rules will be\r\n  stated; afterwards you will find that the rules aren't strictly true.\r\nIn general, the later chapters contain more reliable information than the\r\n  earlier ones do.\r\nThe author feels that this technique of deliberate lying will actually make\r\n  it easier for you to learn the ideas.\r\nOnce you understand a simple but false rule, it will not be hard to supplement\r\n  that rule with its exceptions.\r\n<p align=\"right\"><i>- D. Knuth (Tex, pg. vi)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSteve [Jobs] wanted to see if we couldn't make it [the circuit board of the\r\n  first Mac] more aesthetic...He wanted the inside of the computer to look good\r\n  even if no one would see it.\r\n<p align=\"right\"><i>- D. Kottke (early Apple Engineer)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf we really understand the problem, the answer will come out of it,\r\n  because the answer is not separate from the problem.\r\n<p align=\"right\"><i>- J. Krishnamurti</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny sufficiently advanced bug is indistinguishable from a feature.<br>\r\n<p align=\"right\"><i>- R. Kulawiec</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n\r\n<a name=\"L\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">L</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere is a race between the increasing complexity of the systems we build\r\n  and our ability to develop intellectual tools for understanding their\r\n  complexity.\r\nIf the race is won by our tools, then systems will eventually become easier\r\n  to use and more reliable.\r\nIf not, they will continue to become harder to use and less reliable for all\r\n  but a relatively small set of common tasks.\r\nGiven how hard thinking is, if those intellectual tools are to succeed,\r\n  they will have to substitute calculation for thought.\r\n<p align=\"right\"><i>- L. Lamport</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWriting is nature's way of letting you know how sloppy your thinking is.\r\n<p align=\"right\"><i>- R. Guindon (cartoon, San Francisco Chronincle,\r\n                      January 1989)</i>\r\n<tr><td align=\"left\" valign=\"top\">\r\nMathematics is nature's way of letting you know how sloppy your writing is.\r\n<p align=\"right\"><i>- L. Lamport, (\"Specifying Systems\", 2002, p. 2</i>\r\n<tr><td align=\"left\" valign=\"top\">\r\nFormal mathematics is nature's way of letting you know how sloppy your\r\n  mathematics is.\r\n<p align=\"right\"><i>- L. Lamport, (\"Specifying Systems\", 2002, p. 2</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n\"Where have you performed?\" Murray asked me from behind a copy of Variety.\r\n\"Well, I don't perform, exactly,\" I answered, \"but I have spoken at\r\n   synagogues, and I lecture from time to time at colleges and universities.\"\r\n<p>\r\n\"Universities?\" Murray sputtered.\r\n\"Did he say universities?\r\nWorst audience in the world.\r\nI spoke at a university once.\r\nThey invited me to speak about the hotel industry.\r\nBelieve me, I've got a pretty good routine on this; I've used it many times\r\n  before, and I know where I'm supposed to get reactions: chuckles, laughs,\r\n  applause.\r\nSon of a bitch, I stand up there and it's a grim audience!\r\nAll these young people in jeans and sneakers.\r\nI open it up for questions.\r\nThese bastards are dead serious -they're taking notes!\r\nI realized later, they weren't an audience, they were students.\r\nThey take notes and get grades.\r\nThey're not there to laugh.\r\nWho wants to perform for an audience like that?\"\r\n<p align=\"right\"><i>- A. Lansky, relating his experiences lecturing at resorts\r\n  in the Catskills while raising money for the National Yiddish Book Center\r\n  (described in his book, \"Outwitting History\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe think only through the medium of words.\r\nLanguages are true analytical methods.\r\nAlgebra, which is adapted to its purpose in every species of expression,\r\n  in the most simple, most exact, and best manner possible, is at the same\r\n  time a language and an analytical method.\r\nThe art of reasoning is nothing more than a language well arranged.\r\n<p align=\"right\"><i>- A. Lavoisier</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe don't have much time, so we don't teach them; we acquaint them with things\r\n  that they can learn.\r\n<p align=\"right\"><i>- C. Leiserson (on \"The Undergraduate Practicum\" at MIT,\r\n                          from a talk at CMU)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nLearning is never done without errors and defeat.\r\n<p align=\"right\"><i>- V. Lenin</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you want truly to understand something, try to change it.\r\n<p align=\"right\"><i>- K. Lewin</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA vivid confirmation of this analysis [the importance of extra-curricular\r\n  activities] occurred during a lunchtime conversation I had with three\r\n  computer science graduates of the classes of 1994/1995 who started a company\r\n  together and sold it in 1998 for more than $250 million.\r\nOver sandwiches I asked them what part of their computer science education had\r\n  been most important to the success of their software enterprise.\r\nAfter a moment of tight smiles and awkward silence, one of the young graduates\r\n  spoke up.\r\n\"The computer science courses I took were really terrific,\" he said in an\r\n  attempt to reassure me, \"but I didn't learn much that I could not have\r\n  learned on my own.\r\nThe most important things I learned were from managing the Quincy House Grill.\"\r\nIt made perfect sense -hiring, firing, and inspiring colleagues, working under\r\n  pressure in close quarters- all were very much the same in the\r\n  cheeseburger-flipping business he had run at Harvard as in the software\r\n  business the three had started in a tiny apartment.\r\n<p align=\"right\"><i>- H. Lewis (in \"Excellence Without Soul\", pg. 88)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n...fielding statistics made sense only as numbers, not as language.\r\nLanguage, not numbers, is what interested him\r\n  [Bill James, a baseball writer].\r\nWords, and the meaning they were designed to convey.\r\n\"When the numbers acquire the significance of the language,\" he later wrote,\r\n  \"they acquire the power to do all the things which language can do:\r\n  to become fiction and drama and poetry.\"\r\n<p align=\"right\"><i>- M. Lewis\r\n  (in Moneyball: The Art of Winning an Unfair Game, page 67)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGive me six hours to chop down a tree and I will spend the first four\r\n  sharpening the axe.\r\n<p align=\"right\"><i>- A. Lincoln</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI can't think of a job I'd rather do than computer programming.\r\nAll day, you create patterns and structure out of the formless void, and\r\n  you solve dozens of smaller puzzles along the way.\r\n<p align=\"right\"><i>- P. van Der Linden</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComplexity is a sign of technical immaturity.\r\nSimplicity of use is the real sign of a well design product whether it is an\r\n  ATM or a Patriot missile.\r\n<p align=\"right\"><i>- D. Ling</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGentlemen, we are going to relentlessly chase perfection, knowing full well\r\n  we will not catch it, because nothing is perfect.\r\nBut we are going to relentlessly chase it, because in the process we will catch\r\n   excellence.\r\nI am not remotely interested in just being good.\r\n<p align=\"right\"><i>- V. Lombardi (Greenbay Packers Coach 1959-1967)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComposing computer programs to solve scientific problems is like writing\r\n  poetry.\r\nYou must choose every word with care and link it with the other words in\r\n  perfect syntax.\r\nThere is no place for verbosity or carelessness.\r\nTo become fluent in a computer language demands almost the antithesis of\r\n  modern loose thinking.\r\nIt requires many interactive sessions, the hands-on use of the device. \r\nYou do not learn a foreign language from a book, rather you have to live\r\n  in the country for year to let the language become an automatic part of\r\n  you, and the same is true for computer languages.\r\n\r\n<p align=\"right\"><i>- James Lovelock (Originator of the Gaia Theory)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n\r\n<a name=\"M\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">M</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn the beginning we must simplify the subject, thus unavoidably falsifying it,\r\n  and later we must sophisticate away the falsely simple beginning.\r\n<p align=\"right\"><i>- M. Maimonides</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDevelopment is maintenance.\r\n<p align=\"right\"><i>- B. Marick</i>\r\n</table>\r\n\r\n\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA teacher's job is to take a bunch of live wires and see that they are\r\n  well-grounded.\r\n<p align=\"right\"><i>- D. Martin</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf our designs are failing due to the constant rain of changing requirements,\r\n  it is our designs that are at fault.\r\nWe must somehow find a way to make our designs resilient to such changes and\r\n  protect them from rotting.\r\n<p align=\"right\"><i>- R. Martin</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nReal-life experience is instructive, but the tuition is high.\r\n<p align=\"right\"><i>- A.G. Martinez\r\n  (in \"Chaos Monkeys\", Harper Collins,  2015, pg. 40)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf the only tool you have is a hammer, you tend to see every problem as a nail.\r\n<p align=\"right\"><i>- A. Maslow</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMuch of the beauty that arises in art comes from the struggle an artist wages\r\n  with his limited medium. \r\n<p align=\"right\"><i>- H. Matisse</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOptimization is a funny game, the more you optimize the code the uglier it gets.\r\nPrograms that have been optimized are ... a lot harder to maintain and a lot\r\n  harder to debug as well.\r\n<p align=\"right\"><i>- J. . Mattheij</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny clod can have the facts; having opinions is an art.\r\n<p align=\"right\"><i>- C. McCabe</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGood code is its own best documentation.\r\nAs you're about to add a comment, ask yourself,\r\n  \"How can I improve the code so that this comment isn't needed?\"\r\nImprove the code and then document it to make it even clearer.\r\n<p align=\"right\"><i>- S. McConnell</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt's hard enough to find an error in your code when you're looking for it;\r\n  it's even harder when you've assumed your code is error-free.\r\n<p align=\"right\"><i>- S. McConnell</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt's OK to figure out murder mysteries, but you shouldn't need to figure out\r\n  code.\r\nYou should be able to read it.\r\n<p align=\"right\"><i>- S. McConnell</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTesting by itself does not improve software quality.\r\nTest results are an indicator of quality, but in and of themselves, they\r\n  don't improve it.\r\nTrying to improve software quality by increasing the amount of testing is\r\n  like try to lose weight by weighing yourself more often.\r\nWhat you eat before you step onto the scale determines how much you will\r\n  weigh, and the software development techniques you use determine how many\r\n  errors testing will find.\r\nIf you want to lose weight, don't buy a new scale; change your diet.\r\nIf you want to improve your software, don't test more; develop better.\r\n<p align=\"right\"><i>- S. McConnell</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFormal methods will never have a significant impact until they can be used by\r\n  people who don't understand them.\r\n<p align=\"right\"><i>- T. Melham</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgramming is similar to a game of golf.\r\nThe point is not getting the ball in the hole but how many strokes it takes.\r\n<p align=\"right\"><i>- H. Mills</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe only way for errors to occur in a program is by being put there by\r\n  the author.\r\nNo other mechanisms are known.\r\nPrograms can't acquire bugs by sitting around with other buggy programs.\r\nRight practice aims at preventing insertion of errors and, failing that,\r\n  removing them before testing or any other running of the program.\r\n<p align=\"right\"><i>- H. Mills</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMaking the simple complicated is commonplace; making the complicated simple,\r\n  awesomely simple, that's creativity.\r\n<p align=\"right\"><i>- C. Mingus</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBut the big change was going to thinking of a program as a structure sitting in\r\n  the computer that another program can manipulate.\r\nSo this made it possible in principle to make a program that could even think\r\n  about itself.\r\n<p align=\"right\"><i>- M. Minsky\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA computer is like a violin.\r\nYou can imagine a novice trying first a phonograph and then a violin.\r\nThe latter, he says, sounds terrible.\r\nThat is the argument we have heard from our humanists and most of our\r\n  computer scientists.\r\nComputer programs are good, they say, for particular purposes, but they\r\n  aren't flexible.\r\nNeither is a violin, or a typewriter, until you learn how to use it.\r\n<p align=\"right\"><i>- M. Minsky (in \"Why Programming Is a Good Medium for\r\n  Expressing Poorly-Understood and Sloppily-Formulated Ideas\")\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe key to understanding randomness and all of mathematics is not being\r\n  able to intuit the answer to every problem immediately but merely having\r\n  the tools to figure out the answer.\r\n<p align=\"right\"><i>- L. Mlodinow (in \"The Drunkar's Walk\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nLanguage designers are not intellectuals.\r\nThey're not as interested in thinking as you might hope.\r\nThey just want to get a language done and start using it.\r\n<p align=\"right\"><i>- D. Moon</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nHe who hasn't hacked assembly language as a youth has no heart.\r\nHe who does so as an adult has no brain.\r\n<p align=\"right\"><i>- J Moore</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputer science is to biology what calculus is to physics.\r\nIt's the natural mathematical technique that best maps the character \r\n  of the subject.\r\n<p align=\"right\"><i>- H. Morowitz</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA little inaccuracy sometimes saves tons of explanation.\r\n<p align=\"right\"><i>- H.H. Munro</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"N\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">N</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputing is not about computers any more. It is about living.\r\n<p align=\"right\"><i>- N. Negroponte</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nYou have to honor failure, because failure is just the negative space around\r\n  success.\r\n<p align=\"right\"><i>- R. Nelson (in Wired 06/2004 page 166)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBetween 1892 say, and 1904, movies were made by the cameraman because he \r\n  understood the equipment.\r\nAnd that is exactly where we are now [in software design].\r\nIn 1904 they invented the director; what was the director?\r\nIt was the guy who didn't have to know how to load the camera\r\n  didn't have to know how to sew costumes, play a violin, dance, fence,\r\n  or hang the lights.\r\nBut, he had to know how to make those effects come together in a unified\r\n  experience...\r\nWhy are video games so much better designed than office\r\nsoftware?\r\nVideo games are designed by people who love to play video games.\r\nOffice software is designed by people who want to do something\r\n  else on the weekend...\r\nWhat does show business teach you? \r\nIt teaches you that design is war; it is a power struggle between the\r\n  producers, directors, authors, everyone who wants to be involved.\r\n<p align=\"right\"><i>- T. Nelson (transcribed from a talk at\r\n  <a href=\"http://unrev.stanford.edu/\">Engelbart's Unfinished Revolution</a>\r\n  a Stanford University Symposium)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nError is viewed, therefore, not as an extraneous and misdirected or misdirecting\r\n  accident, but as an essential part of the process [learning].\r\n<p align=\"right\"><i>- J. von Neumann</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn mathematics you don't understand things.\r\nYou just get used to them.\r\n<p align=\"right\"><i>- J. von Neumann</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe sciences do not try to explain, they hardly even try to interpret, they\r\n  mainly make models.\r\nBy a model is meant a mathematical construct which, with the addition of\r\n  certain verbal interpretations, describes observed phenomena.\r\nThe justification of such a mathematical construct is solely and precisely that\r\n  it is expected to work - that is correctly to describe phenomena from a\r\n  reasonably wide area.\r\nFurthermore, it must satisfy certain esthetic criteria - that is, in relation\r\n  to how much it describes, it must be rather simple.\r\n<p align=\"right\"><i>- J. von Neumann</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMillions for compilers, but hardly a penny for understanding human programming\r\n  language use.\r\nNow, programming languages are obviously symmetrical, the computer on one\r\n  side, the human on the other.\r\nIn an appropriate science of computer languages, one would expect that half\r\n  the effort would be on the computer side, understanding how to translate\r\n  the languages into executable form, and half on the human side, understanding\r\n  how to design languages that are easy or productive to use.\r\nYet, we do not even have an enumeration of all the psychological functions\r\n  programing languages serve for the user.\r\nOf course, there is lots of programming language <i>design</i>, but it comes\r\n  from computer scientists.\r\nAnd though technical papers on languages contain mainly appeals to ease of use\r\n  and learning, they patently contain almost no psychological evidence nor any\r\n  appeal to psychological science.\r\n<p align=\"right\"><i>- A. Newell and S. Card</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n\"Two monologues do not make a dialog\"...a technology that gives\r\n  no opportunity for discussion, explanation, or debate is a poor\r\n  technology.\r\n<p align=\"right\"><i>- D. Norman (in The Design of Future Things, Basic Books,\r\n  2007, pg. 6)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n\r\n<a name=\"O\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">O</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere is no reason anyone would want a computer in their home.\r\n<p align=\"right\"><i>- K. Olsen (Founder and President, Digital Equipment Corporation), 1977</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe best performance improvement is the transition from the nonworking state\r\n  to the working state\r\n<p align=\"right\"><i>- J. Osterhout</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComplexity kills.\r\nIt sucks the life out of developers, it makes products difficult to plan,\r\n  build and test, it introduces security challenges and it causes end-user\r\n  and administrator frustration.\r\n...[we should] explore and embrace techniques to reduce complexity. \r\n<p align=\"right\"><i>- R. Ozzie</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<a name=\"P\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">P</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAs a rule, software systems do not work well until they have been used, and\r\n  have failed repeatedly, in real applications.\r\n<p align=\"right\"><i>- D. Parnas</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA programming language is like a natural, human language in that it favors\r\n  certain metaphors, images, and ways of thinking.\r\n<p align=\"right\"><i>- S. Papert (in \"Mindstorms: Children, Computers, and Powerful Ideas\", 1980)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMy basic idea is that programming is the most powerful medium of developing\r\n  the sophisticated and rigorous thinking needed for mathematics, for\r\n  grammar, for physics, for statistics, for all the \"hard\" subjects....\r\nIn short, I believe more than ever that programming should be a key part of\r\n  the intellectual development of people growing up.\r\n<p align=\"right\"><i>- S. Papert (in \"CACM January 2005 (Vol 24, #1, pp38)\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI have made this letter longer than usual, only because I have not had\r\n  the time to make it shorter.\r\n<p align=\"right\"><i>- B. Pascal</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nChance favors the prepared mind.\r\n<p align=\"right\"><i>- L. Pasteur</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA class, in Java, is where we teach objects how to behave.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nCode should run as fast as necessary, but no faster; something important is\r\n  always traded away to increase speed.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nHe who runs an av-rage pace,<br>\r\nruns alone throughout the race.<br>\r\n[I know I'm teaching at the right pace when I please no one:\r\n  half the students say I'm going too slow, half too fast.]\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you cannot grok the overall structure of a program while taking a shower\r\n  [e.g., with no external memory aids], you are not ready to code it.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMistakes lead to failure only if you don't learn from them.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nParadoxically, it is often harder to understand a program than the programming\r\n   language in which it is written.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgramming languages, like pizzas, come in only <i>too</i> sizes; <i>too</i>\r\n  big and <i>too</i> small.<br>\r\n[this quote often appears on the web as \"<i>two</i> sizes\", by reposters who\r\n  don't quite get the wordplay)\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe discipline of programming is most like sorcery.\r\nBoth use precise language to instruct inanimate objects to do our bidding.\r\nSmall mistakes in programs or spells can lead to completely unforeseen\r\n  behavior: e.g., see the story, \"The Sorcerer's Apprentice\".\r\nNeither study is easy: \"...her [Galinda's] early appetite for sorcery\r\n  had waned once she'd heard what a grind it was to learn spells and,\r\n  worse, to <i>understand</i> them.\" from the book \"Wicked\" by G. Maguire.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe purpose of brakes on a car is to allow you to go fast.\r\nAlthough the gas pedal makes you go fast, the brake pedal allows you to\r\n  drive safely while going fast.\r\nThe purpose of a strict compiler (one that performs type checking,\r\n  uninitialized variable checking, reachability analysis, etc.) is to allow\r\n  you to program fast.\r\nProgrammers -like all humans- have limited intellects: when they focus on\r\n  one aspect of a program, they must ignore others.\r\nFocusing on the right aspect at the right time is critical.\r\nBy understanding those aspects that the compiler can check, you can\r\n  ignore them, and focus on more important ones.\r\nSome programmers think that such an approach is reckless; they believe that\r\n  you must pay close attention to everything at once.\r\nThey are right -for them; but I'm just not that smart, so I must use my\r\n  tools more effectively.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe structure of a software system provides the ecology in which code is born,\r\n  matures, and dies.\r\nA well-designed habitat allows for the successful evolution of all the\r\n  components needed in a software system.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe three most important aspects of debugging and real estate are the same:\r\n  Location, Location, and Location.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere is a famous rule in performance optimization called the 90/10 rule: 90%\r\n  of a program's execution time is spent in only 10% of its code.\r\nThe standard inference from this rule is that programmers should find that 10%\r\n  of the code and optimize it, because that's the only code where improvements\r\n  make a difference in the overall system performance.\r\nBut a second inference is just as important: programmers can deoptimize the\r\n  other 90% of the code (in order to make it easier to use, maintain, etc.),\r\n  because deterioration (of performance) of that code won't make much of a\r\n  difference in the overall system performance.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen debugging, novices insert corrective code; experts remove defective code.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen teaching a rapidly changing technology, perspective is more important\r\n  than content.\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhen building a complex system, having crackerjack programmers\r\n (who can make any design work, even a bad one) can be a liability.\r\nThe result, after lots of effort, is a working system that cannot\r\n  be easily maintained or upgraded.\r\nGood -but not great- programmers would fail early, causing a realization\r\n  that the system must be redesigned, and then reimplemented.\r\nThe extra cost is paid once, early in the system's cycle (when it is\r\n  cheap), instead of repeatedly paid late in the system's cycle (when\r\n  it is more expensive).\r\n<p align=\"right\"><i>- R. Pattis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDon't tell people how to do things.\r\nTell them what to do and let them  surprise you with their results.\r\n<p align=\"right\"><i>- G. Patton</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe best way to get a good idea is to get a lot of ideas.\r\n<p align=\"right\"><i>- L. Pauling</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBrick walls are there for a reason.\r\nThe brick walls are not there to keep us out.\r\nThe brick walls are there to show how badly we want something.\r\nBecause the brick walls are there to stop the people who don't want something\r\n  badly enough.\r\nThey are there to keep out the other people.\r\n<p align=\"right\"><i>- R. Pausch\r\n (see <a href=\"http://www.youtube.com/watch?v=ji5_MqicxSo\">The Last Lecture</a>)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA good programming language is a conceptual universe for thinking about\r\n  programming.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA language that doesn't affect the way you think about programming is not\r\n   worth knowing. \r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny noun can be verbed.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFools ignore complexity; pragmatists suffer it; experts avoid it; geniuses\r\n  remove it.\t\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI think it is inevitable that people program poorly.\r\nTraining will not substantially help matters.\r\nWe have to learn to live with it.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI think that it's extraordinarily important that we in computer science keep\r\n  fun in computing.\r\nWhen it started out, it was an awful lot of fun.\r\nOf course, the paying customers got shafted every now and then, and after a\r\n  while we began to take their complaints seriously.\r\nWe began to feel as if we really were responsible for the successful,\r\n  error-free perfect use of these machines.\r\nI don't think we are.\r\nI think we're responsible for stretching them, setting them off in new\r\n  directions, and keeping fun in the house.\r\nI hope the field of computer science never loses its sense of fun.\r\n<!---\r\nAbove all, I hope we don't become missionaries.\r\nDon't feel as if you're Bible salesmen.\r\nThe world has too many of those already.\r\nWhat you know about computing other people will learn.\r\nDon't feel as if the key to successful computing is only in your hands.\r\nWhat's in your hands, I think and hope, is intelligence: the ability to see\r\n  the machine as more than when you were first led up to it, that you can make\r\n  it more.\r\n--->\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt goes against the grain of modern education to teach students to program.\r\nWhat fun is there to making plans, acquiring discipline, organizing thoughts,\r\n  devoting attention to detail, and learning to be self critical.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is easier to write an incorrect program than understand a correct one.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOptimization hinders evolution.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSimplicity does not precede complexity, but follows it.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSoftware is like nothing else in this world except life itself,\r\n  in that it is, in effect, subject to evolution...\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere are two ways to write error-free programs,\r\n  but only the third one works.<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTo understand a program, you must become both the machine and the program.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nYou think you KNOW when you learn, are more sure when you can write, even more\r\n   when you can teach, but certain when you can program.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputers are useless.  They only give you answers.\r\n<p align=\"right\"><i>- P. Picasso</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI am always doing that which I cannot do, in order that I may learn how to\r\n  do it.\r\n<p align=\"right\"><i>- P. Picasso</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFancy algorithms are slow when N is small, and N is usually small.\r\n<p align=\"right\"><i>- R. Pike</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFancy optimizers have fancy bugs.\r\n<p align=\"right\"><i>- R. Pike</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThinking and spoken discourse are the same thing, except that what we call\r\n  thinking is, precisely, the inward dialog carried on by the mind with\r\n  itself without spoken sound.\r\n<p align=\"right\"><i>- Plato</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe mind is not a vessel to be filled, but a fire to be ignited.\r\n<p align=\"right\"><i>- Plutarch (See W.B. Yeats: Education...) </i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nLife is good only for two things: to study mathematics and to teach it.\r\n<p align=\"right\"><i>- M. Poisson</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputers in the future may weigh no more than 1.5 tons.\r\n<p align=\"right\"><i>- Popular Science (1959)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nKnowledge of a subject means knowledge of the language of that subject, which\r\n  includes not only what its words mean, but far more important, how its words\r\n  mean.\r\nAs one learns the language of a subject, one is also learning what the subject\r\n  is.\r\nIt cannot be said often enough that what we call a subject consists mostly,\r\n  if not entirely, of its language. If you eliminate all the words of a\r\n  subject, you have eliminated the subject.\r\nBiology is not plants and animals. It is language about plants and animals.\r\nHistory is not events.\r\nIt is language describing and interpreting events.\r\nAstronomy is not planets and stars. \r\nIt is a way of talking about planets and stars.\r\n<p align=\"right\"><i>- N. Postman</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGates has always understood Moore's Law better than anyone else in the\r\n   industry.\r\nIf you can make something run at all, get it out there -it may be slow and\r\n  clunky, but hardware improvements will bail you out.\r\nIf you wait until it's running perfectly on the hardware already in the field,\r\n  it will be obsolete before it's released.\r\nThis philosophy built Microsoft and is the main reason Microsoft won the war\r\n  IBM declared back in the OS/2 days.\r\n<p align=\"right\"><i>- J. Pournelle (Dr. Dobbs Journal, Feb. 2004, pp. 89)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe voyage of discovery is not in seeking new landscapes but in having new\r\n  eyes.\r\n<p align=\"right\"><i>- M. Proust</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI really hate this darn machine;<br>\r\n&nbsp &nbsp I wish that they would sell it.<br>\r\nIt won't do what I want it to,<br>\r\n&nbsp &nbsp but only what I tell it.<br>\r\n<p align=\"right\"><i>- Programmer's Lament</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n\r\n<a name=\"Q\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">Q</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe underlying complexity of a given problem is constant.\r\nIt can be hidden, but it does not go away.\r\nComplexity is conserved by abstractions.\r\nIn fact, apparent complexity can be increased by abstractions, but the\r\n underlying complexity can never be reduced.\r\n<p align=\"right\"><i>- M. Quail (in his <a href=\"http://madbean.com/2003/mb2003-43\">blog</a>)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputer Science education cannot make anybody an expert programmer any more\r\n  than studying brushes and pigment can make somebody an expert painter.\r\n<p align=\"right\"><i>- E. Raymond</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<a name=\"R\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">R</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGiven enough eyeballs, all bugs are shallow (e.g., given a large enough\r\n  beta-tester and co-developer base, almost every problem will be characterized\r\n  quickly and the fix will be obvious to someone).\r\n(also see \"The honest truth...\" by B. Joy).\r\n\r\n<p align=\"right\"><i>- E. Raymond (Lesson 8 in \r\n  <a href=\"http://www.tuxedo.org/~esr/writings/cathedral-bazaar/\">The Cathedral and the Bazaar</a>)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGood programmers know what to write.\r\nGreat ones know what to use.\r\n[I'd add: Exceptional programmers know how to write code that others can\r\n   use. -REP]\r\n<p align=\"right\"><i>- E. Raymond</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nUgly programs are like ugly suspension bridges: they're much more liable to\r\n  collapse than pretty ones, because the way humans (especially\r\n  engineer-humans) perceive beauty is intimately related to our ability to\r\n  process and understand complexity.\r\nA language that makes it hard to write elegant code makes it hard to write\r\n  good code.\r\n<p align=\"right\"><i>- E. Raymond</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputer Science is the first engineering discipline in which the complexity of\r\n  the objects created is limited solely by the skill of  the creator, and not\r\n  by the strength of raw materials.\r\n<p align=\"right\"><i>- B. Reid</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAll of us had been trained by Kelly Johnson [designer of the Lockheed SR-71]\r\n  and believed fanatically in his insistence that an airplane that looked\r\n  beautiful would fly the same way.\r\n<p align=\"right\"><i>- B. Rich (in \"Skunk Works\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn time of profound change, the learners inherit the earth, while the learned\r\n  find themselves beautifully equipped to deal with a world that no longer\r\n  exists.\r\n<p align=\"right\"><i>- A. Rogers</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nG-d is in the details.\r\n<p align=\"right\"><i>- M. van der Rohe</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nLess is more.\r\n<p align=\"right\"><i>- M. van der Rohe</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSoftware is abstract and therefore seems as if it should be infinitely\r\n  malleable.\r\nAnd yet, for all its ethereal flexibility, it can be stubbornly, maddeningly\r\n   intractable, and it is constantly surprising us with his rigidity.\r\n<p align=\"right\"><i>- S. Rosenberg (in \"Dreaming in Code\", pp 58)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDon't you hate code that's not properly indented?\r\nMaking it [indenting] part of the syntax guarantees that all code is properly\r\n  indented.\r\n<p align=\"right\"><i>- G. van Rossum(designer of the Python)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe highest reward for a person's toil is not what they get for it, but what\r\n  they become by it.\r\n<p align=\"right\"><i>- J. Ruskin</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nLanguage serves not only to express thought but to make possible thoughts which\r\n  could not exist without it.\r\n<p align=\"right\"><i>- B. Russell</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"S\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">S</h3>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA designer knows he's achieved perfection not when there is nothing left to\r\n  add, but when there is nothing left to take away.\r\n<p align=\"right\"><i>- A. de Saint-Exupery</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you want to build a ship, don't drum up the men to gather wood, divide the\r\n  work and give orders.\r\nInstead, teach them to yearn for the vast and endless sea. \r\n<p align=\"right\"><i>- A. de Saint-Exupery</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nQuestions are the important thing, answers are less important.\r\nLearning to ask a good question is the heart of intelligence.\r\nLearning the answer---well, answers are for students.\r\nQuestions are for thinkers.\r\n<p align=\"right\"><i>- R. Schank (in \"The Connoisseur's Guide to the Mind\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere is one very good reason to learn programming, but it has nothing to do\r\n  with preparing for high-tech careers or with making sure one is computer\r\n  literate in order to avoid being cynically manipulated by the computers of\r\n  the future.\r\nThe real value of learning to program can only be understood if\r\n  we look at learning to program as an exercise of the intellect, as a kind of\r\n  modern-day Latin that we learn to sharpen our minds.\r\n<p align=\"right\"><i>- R. Schank (in \"The Cognitive Computer\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAlways do the hard part first.\r\nIf the hard part is impossible, why waste time on the easy part?\r\nOnce the hard part is done, you're home free.\r\n<p>\r\nAlways do the easy part first.\r\nWhat you think at first is the easy part often turns out to be the hard part.\r\nOnce the easy part is done, you can concentrate all your efforts on the hard\r\n  part. \r\n<p align=\"right\"><i>- A. Schapira</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe skill of writing is to create a context in which other people can think.\r\n<p align=\"right\"><i>- E. Schlossberg</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMachines are simple: a hammer, a door hinge, a steak knife.\r\nSystems are much more complicated; they have components, feedback loops, mean\r\n  times between failure, infrastructure.\r\nDigital systems are daedal; even a simple computer program has hundreds of\r\n  thousands of lines of computer code doing all sorts of different things.\r\nA complex computer program has thousands of components, each of which has to\r\n  work by itself and in interaction with all the other components.\r\nThis is why object-oriented programming was developed: to deal with the\r\n  complexity of digital systems...systems have bugs.\r\nA bug is a particular kind of failure...It's different from a malfunction.\r\nWhen something malfunctions, it no longer works properly.\r\nWhen something has a bug, it misbehaves in a particular way, possibly\r\n  unrepeatable, and possibly unexplainable.\r\nBugs are unique to systems.\r\nMachines can break, or fail, or not work, but only a system can have a bug.\r\n<p align=\"right\"><i>- B. Schneier (in Secrets & Lies: Digital Security in a Networked World).</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMicrosoft knows that reliable software is not cost effective.\r\nAccording to studies, 90% to 95% of all bugs are harmless.\r\nThey're never discovered by users, and they don't affect performance.\r\nIt's much cheaper to release buggy software and fix the 5% to 10% of bugs\r\n  people find and complain about.\r\n<p align=\"right\"><i>- B. Schneier</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf the code and the comments disagree, then both are probably wrong.\r\n<p align=\"right\"><i>- N. Schryer</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAlways to see the general in the particular is the very foundation of genius.\r\n<p align=\"right\"><i>- A. Schopenhauer</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThus the task is not so much to see what no one has yet seen, but to think\r\n  what no one has yet thought about that which everybody sees.\r\n<p align=\"right\"><i>- E. Schrodinger</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nData is not information, \r\nInformation is not knowledge,\r\nKnowledge is not understanding,\r\nUnderstanding is not wisdom.\r\n<p align=\"right\"><i>- G. Schubert (extending Cliff Stoll\r\n                      in \"Silicon Snake Oil\"). Also see F. Zappa</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny intelligent fool can make things bigger and more complex.\r\nIt takes a touch of genius -and a lot of courage- to move in the opposite\r\n  direction\r\n<p align=\"right\"><i>- E.F. Schumacher</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI think that there is a need for more CS textbooks.\r\nWeb content and other modern artifacts are important, but I believe a textbook\r\n  written by an expert who is trying to lay out what a student can reasonably\r\n  learn about a subject in a semester is still a critical component and a basis\r\n  for effectively disseminating knowledge.\r\n<p align=\"right\"><i>- R. Sedgewick</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAnd simple truth miscalled simplicity,\r\n<p align=\"right\"><i>- W. Shakespeare (Sonnet 66)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAlmost every problem that you come across is befuddled with all kinds of\r\n  extraneous data of one sort or another, and if you can bring this problem\r\n  down into the main issues, you can see more clearly what you're trying to do.\r\n<p align=\"right\"><i>- C. Shannon</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nLearning results from what the student does and thinks, and only from what\r\n  the student does and thinks.\r\nThe teacher can advance learning only by influencing the student to learn.\r\n<p align=\"right\"><i>- H. Simon</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMathematics is a language.\r\nWe want scientists to be able to read it, speak it, and write it.\r\nBut we are are not training them to be grammarians.\r\n<p align=\"right\"><i>- H. Simon</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nHis philosophy of aesthetics reminds me of a quote that went something like\r\n  this: \"Fashion is what seems beautiful now but looks ugly later; art can be\r\n  ugly at first but it becomes beautiful later.\"\r\nSteve always aspired to make beautiful later.\r\n<p align=\"right\"><i>- M. Simpson (Steve Jobs' sister, quoted from her eulogy)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI'd rather write programs to write programs than write programs.\r\n<p align=\"right\"><i>- D. Sites</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI cannot teach anybody anything, I can only make them think.\r\n<p align=\"right\"><i>- Socrates</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAll understanding begins with our not accepting the world as it appears.\r\n<p align=\"right\"><i>- S. Sontag</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOne must learn by doing the thing; for though you think you know it, you have\r\n  no certainty, until you try.\r\n<p align=\"right\"><i>- Sophocles</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n[On being asked, \"How do we hold on to dreams that, statistically, are\r\n  impossible (like aspiring to be Supreme Court Justice)?\"]\r\n...\r\nExperience has taught me that you cannot value dreams according to the odds of\r\n  their coming true.\r\nTheir real value is in stirring within us the will to aspire.\r\nThat will, wherever it finally leads, does at least move you forward.\r\nAnd after a time you may recognize that the proper measure of success is not\r\n  how much you've closed the distance to some far-off goal but the quiality\r\n  of what you've done today.\r\n<p align=\"right\"><i>- S. Sotomayor (in \"My Beloved World\" pp. viii)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI told him [a cousin] how I had been dazzled by his brilliance and his\r\n   limitless curiosity about how the world works.\r\nAnd how I despaired of ever matching up to him.\r\nHe looked at me and shook his head.\r\n\"You don't understand, do you?\r\nI've always been in awe of you.\r\nThere was nothing you couldn't learn if you set your mind to it.\r\nYou would just study until you figured it out.\r\n...\r\nThe determination you have is special.\r\nIt's a different kind of intelligence.\"\r\n<p align=\"right\"><i>- S. Sotomayor (in \"My Beloved World\" pp. 151)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI've spent my whole life learning how to do things that were hard for me.\r\nNone of it has ever been easy.\r\n...\r\nI've honestly never felt fully prepared at the outset.\r\nYet each time I've survived, I've learned, and I've thrived.\r\nI'm not intimidated by challenges.\r\nMy whole life has been one.\r\nI look forward to enganging in the work [a judgeship] and learning how to do\r\n  it well.\r\n<p align=\"right\"><i>- S. Sotomayor (in \"My Beloved World\" pp. 288)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComputers do not solve problems -computers carry out solutions, specified by\r\n  people, to problems.\r\n<p align=\"right\"><i>- D. D. Spencer</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEMACS could not have been reached by a process of careful design, because such\r\n  processes arrive only at goals which are visible at the outset, and whose\r\n  desirability is established on the bottom line at the outset.\r\nNeither I nor anyone else visualized an extensible editor until I had made one,\r\n  nor appreciated its value until he had experienced it.\r\nEMACS exists because I felt free to make individually useful small\r\n  improvements on a path whose end was not in sight.\r\n<p align=\"right\"><i>- R. Stallman</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGiving the Linus Torvalds Award to the Free Software Foundation is a bit like\r\n  giving the Han Solo Award to the Rebel Alliance.\r\n<p align=\"right\"><i>- R. Stallman</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgramm is not a science.\r\nProgramming is a craft.\r\n<p align=\"right\"><i>- R. Stallman</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBeing forced to write comments actually improves code, because it is easier to\r\n  fix a crock than to explain it.\r\n<p align=\"right\"><i>- G. Steele</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA real failure does not need an excuse.\r\nIt is an end in itself.\r\n<p align=\"right\"><i>- G. Stein</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\n[teaching]is rather artificial.\r\nThe world is complicated and messy, with lots of loose ends, and the teacher's\r\n  job is to impose order on the confusion, to convert a chaotic set of\r\n  episodes into a coherent narrative.\r\n<p align=\"right\"><i>- I. Stewart (in \"Letters to a Young Mathematician\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDon't get suckered in by the comments -they can be terribly misleading: Debug\r\n  only the code.\r\n<p align=\"right\"><i>- D. Storer</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDesign and programming are human activities; forget that and all is lost.\r\n<p align=\"right\"><i>- B. Stroustrup</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is my firm belief that all successful languages are grown and not merely\r\n  designed from first principles\r\n<p align=\"right\"><i>- B. Stroustrup (in \"The Design and Evolution of C++\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMore good code has been written in languages denounced as \"bad\" than in\r\n  languages proclaimed \"wonderful\" -much more.\r\n<p align=\"right\"><i>- B. Stroustrup (in The Design and Evolution of C++)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe most important single aspect of software development is to be clear about\r\n  what you are trying to build.\r\n<p align=\"right\"><i>- B. Stroustrup</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere are only two kinds of programming languages: those people always bitch\r\n  about and those nobody uses. \r\n<p align=\"right\"><i>- B. Stroustrup</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI have learned throughout my life as a composer chiefly through my mistakes\r\n  and pursuits of false assumptions, not my exposure to founts of wisdom\r\n  and knowledge.\r\n<p align=\"right\"><i>- I. Stravinsky</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOmit needless words.\r\nVigorous writing is concise.\r\nA sentence should contain no unnecessary words, a paragraph no unnecessary\r\n  sentences, for the same reason that a drawing should have no unnecessary\r\n  lines and a machine no unnecessary parts. \r\n<p align=\"right\"><i>- W Strunk Jr (in <i>The Elements of Style</i>)\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nRewrite and revise.\r\nDo not be afraid to seize what you have and cut it to ribbons ...\r\nGood writing means good revising.\r\n<p align=\"right\"><i>- W Strunk Jr (in <i>The Elements of Style</i>)\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFor me, great algorithms are the poetry of computation.\r\nJust like verse, they can be terse, allusive, dense, and even\r\nmysterious. But once unlocked, they cast a brilliant new light\r\non some aspect of computing.\r\n<p align=\"right\"><i>- F Sullivan\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn engineering, as in other creative arts, we must learn to do analysis to\r\n  support our efforts in synthesis.\r\nOne cannot build a beautiful and functional bridge without a knowledge of steel\r\n  and dirt, and a considerable mathematical technique for using  this knowledge\r\n  to compute the properties of structures.\r\nSimilarly, one cannot build a beautiful computer system without a deep\r\n  understanding of how to \"previsualize\" the process generated by the code one\r\n  writes.\r\n<p align=\"right\"><i>- G. Sussman</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is a bad plan that admits of no modification.\r\n<p align=\"right\"><i>- P. Syrus</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you want to succeed in this world you don't have to be much cleverer than\r\n  other people; you just have to be one day earlier than most people.\r\n<p align=\"right\"><i>- L. Szilard</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIn life you must often choose between getting a job done or getting credit for\r\n  it.\r\n<p align=\"right\"><i>- L. Szilard</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is better to be clear and wrong than right and confused.\r\n<p align=\"right\"><i>- L. Szilard</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe most important step in getting a job done...is the recognition of the\r\n  problem.\r\n<p align=\"right\"><i>- L. Szilard</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"T\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">T</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI'm a great believer in elegance, ingenious simplicity.\r\nI try to design algorithms and data structures that are beautiful and simple\r\n  and maybe there is complexity in the analysis, but the algorithm can be\r\n  programmed, can be proved correct.\r\n<p align=\"right\"><i>- R. Tarjan</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOnce you succeed in writing the programs for [these] complicated algorithms,\r\n they usually run extremely fast.\r\nThe computer doesn't need to understand the algorithm, its task is only to run\r\n  the programs.\r\n<p align=\"right\"><i>- R. Tarjan</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI believe in excellence.\r\nIt is a basic need of every human soul.\r\nAll of us can be excellent, because, fortunately, we are exceedingly diverse\r\n  in our ambitions and talents.\r\n<p align=\"right\"><i>- E. Teller</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe must learn to live with contradictions, because they lead to deeper and\r\n  more effective understanding.\r\n<p align=\"right\"><i>- E. Teller</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA programming language is a system of notation for describing computations.\r\nA useful programming language must therefore be suited for both\r\n  <i>description</i>(i.e., for human writers and readers of programs) and for\r\n  <i>computation</i> (i.e., for efficient implementation on computers).\r\nBut human beings and computers are so different that it is difficult to find\r\n  notational devices that are well suited to the capabilities of both.\r\n<p align=\"right\"><i>- R. Tennant (Principles of Programming Languages, Prentice Hall, 1981)\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nA lot of people think mastering complexity is the goal.\r\nBut once you have gotten your Master of Complexity merit badge, you don't have\r\n  to keep winning it.\r\nComplexity is the enemy of computer science and it behooves us, as designers,\r\n  to minimize it\r\n<p align=\"right\"><i>- C. Thacker</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOne of my most productive days was throwing away 1,000 lines of code.\r\n<p align=\"right\"><i>- K. Thompson</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBut lo! men have become the tools of their tools.\r\n<p align=\"right\"><i>- H. Thoreau (in Walden)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSimplify, simplify, simplify!\r\n<p align=\"right\"><i>- H. Thoreau (in Walden)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMost good programmers do programming not because they expect to get paid or get\r\n  adulation by the public, but because it is fun to program.\r\n<p align=\"right\"><i>- L. Torvalds</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nCharacter is created by encountering and overcoming failure.\r\n<p align=\"right\"><i>- P. Tough (in</i> How Children Succeed<i>)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe function of genius is not to give new answers, but to pose new questions\r\n  which time and mediocrity can resolve.\r\n<p align=\"right\"><i>- H. Trevor-Howard</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is better to have an approximate answer to the right question than an exact\r\n  answer to the wrong one.\r\n<p align=\"right\"><i>- J. Tukey</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nUnless in communicating with it [a computer] one says exactly what one means,\r\n  trouble is bound to result.\r\n<p align=\"right\"><i>- A. Turing</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"U\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">U</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nHe [John von Neumann] had the invaluable faculty of being able to take the\r\n  most difficult problem and separate it into its components, whereupon\r\n  everything looked brilliantly simple.\r\n<p align=\"right\"><i>- S. Ulam (Bull. of American Mathematical Society, May 1958)\r\n</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nProgramming is the art of algorithm design and the craft of debugging errant\r\n  code.\r\n<p align=\"right\"><i>- E. Ullman\r\n</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<a name=\"V\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">V</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nReal education happens only by failing, changing, challenging, and adjusting.\r\nAll of those gerunds apply to teachers as well as students.\r\nNo person is an \"educator,\" because education is not something one person does\r\n  to another.\r\nEducation is an imprecise process, a dance, and a collaborative experience.\r\n<p>\r\nEducation is the creation of habits of thought and methods of inquiry that\r\n  yield unpredictable results.\r\nWe offer diplomas to people upon completion of a rigorous and diverse set of\r\n intellectual experiences, not the mere accumulation of a series of facts and\r\n techniques.\r\nEducation is certainly not an injection of information into a passive\r\n  receptacle.\r\n<p align=\"right\"><i>- S. Vaidhyanathan (\r\n  <a href=\"http://chronicle.com/blogs/innovations/whats-the-matter-with-moocs/33289?cid=at&utm_source=at&utm_medium=en\"> in\r\n The Chronicle of Higher Education</a>)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt's easy to cry \"bug\" when the truth is that you've got a complex system and\r\n  sometimes it takes a while to get all the components to co-exist peacefully.\r\n<p align=\"right\"><i>- D. Vargas</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe outcome of any serious research can only be to make two questions grow\r\n  where only one grew before.\r\n<p align=\"right\"><i>- T. Veblen</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe best is the enemy of the good.\r\n<p align=\"right\"><i>- Voltaire\r\n(\"Dramatic Art\" in _Philosophical Dictionary, 1764)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nJudge a man by his questions, rather than his answers.\r\n<p align=\"right\"><i>- Voltaire</i>\r\n</table>\r\n<p>\r\n\r\n<a name=\"W\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">W</h3>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe problem with using C++... is that there's already a strong tendency in the\r\n  language to require you to know everything before you can do anything.\r\n<p align=\"right\"><i>- L. Wall</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe mediocre teacher tells.\r\nThe good teacher explains.\r\nThe superior teacher demonstrates.\r\nThe great teacher inspires.\r\n<p align=\"right\"><i>- W. A. Ward</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI think there is a world market for maybe five computers.\r\n<p align=\"right\"><i>- T. J. Watson (Founder and Chairman, IBM), 1943</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf you want to increase your success rate, double your failure rate.\r\n<p align=\"right\"><i>- T. J. Watson</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe computer programmer ... is a creator of universes for which he alone\r\n  is the lawgiver ...\r\nuniverses of virtually unlimited complexity can be created in the form\r\n  of computer programs.\r\nMoreover ... systems so formulated and elaborated <i>act out</i>\r\n  their programmed scripts.\r\nThey compliantly obey their laws and vividly exhibit their obedient behavior.\r\nNo playwright, no stage director, no emperor, however powerful, has ever\r\n  exercised such absolute authority to arrange a stage or a field of battle\r\n  and to command such unswervingly dutiful actors or troops.\r\n<p align=\"right\"><i>- J. Weizenbaum (Computer Power and Human Reason,\r\n   page 115)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nNewton was a genius, but not because of the superior computational power of his\r\n  brain.\r\nNewton's genius was, on the contrary, his ability to simplify, idealize, and\r\n  streamline the world so that it became, in some measure, tractable to the\r\n  brains of perfectly ordinary men.\r\n<p align=\"right\"><i>- G. M. Weinberg</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAny problem in computing can be solved by adding another level of indirection.\r\n(also see \"Any performance problem...\" by M. Haertel).\r\n<p align=\"right\"><i>- D. Wheeler (inventor of the subroutine)</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe best writing is rewriting.\r\n<p align=\"right\"><i>- E. B. White</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nBy relieving the brain of all unnecessary work, a good notation sets it free\r\n  to concentrate on more advanced problems, and in effect increases the mental\r\n  power of the race.\r\n<p align=\"right\"><i>- A. N. Whitehead</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is a profoundly erroneous truism, repeated by all the copybooks, and by\r\n  eminent people when they are making speeches, that we should cultivate the\r\n  habit of thinking what we are doing.\r\nThe precise opposite is the case.\r\n<b>Civilization advances by extending the number of operations which we\r\n  can perform without thinking about them.</b>\r\nOperations of thought are like cavalry charges in a battle -they are strictly \r\n  limited in number, they require fresh horses, and must only be made at\r\n  decisive  moments.\r\n<p align=\"right\"><i>- A. N. Whitehead (in \"An Introduction to Mathematics\")</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI have never learned anything except from people younger than myself.\r\n<p align=\"right\"><i>- O. Wilde</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nAs soon as we started programming, we found out to our surprise that it wasn't\r\n  as easy to get programs right as we had thought.\r\nDebugging had to be discovered.\r\nI can remember the exact instant when I realized that a large part of my life\r\n  from then on was going to be spent in finding mistakes in my own programs.\r\n<p align=\"right\"><i>- M. Wilkes</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFurious activity is no substitute for understanding.\r\n<p align=\"right\"><i>- H. H. Williams\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nFrom a programmer's point of view, the user is a peripheral\r\n  that types when you issue a read request.\r\n<p align=\"right\"><i>- P. Williams\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nHe knows the course forwards and backwards. He teaches it backwards \r\n<p align=\"right\"><i>- S. Willoughby\r\n (commenting on Garrett Birkhoff's freshman calculus course at Harvard<br>in\r\n \"The Other End of the Log: Memoirs of an Education Rebel\")\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe main activity of programming is not the origination of new independent\r\n  programs, but in the integration, modification, and explanation of existing\r\n  ones.\r\n<p align=\"right\"><i>- T. Winograd\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nComplexity has and will maintain a strong fascination for many people.\r\nIt is true that we live in a complex world and strive to solve inherently\r\n   complex problems, which often do require complex mechanisms.\r\nHowever, this should not diminish our desire for elegant solutions, which\r\n  convince by their clarity and effectiveness.\r\nSimple, elegant solutions are more effective, but they are harder to find\r\n  than complex ones, and they require more time, which we too often believe\r\n  to be unaffordable\r\n<p align=\"right\"><i>- N. Wirth</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is a sad manifestation of the spirit of modern times, in which an\r\n  individulal's pride in his/her work has become rare.\r\nThe idea that one might derive satisfaction from his or her successful work,\r\n  because that worrk is ingenious, beautiful, or just pleasing, has become\r\n  ridiculed.\r\nNothing but economic success and monetary reward is acceptable.\r\nHence our occupations have become mere jbos.\r\nBut quality of work can be expected only through personal satisfaction,\r\n dedication, and enjoyment.\r\n<p align=\"right\"><i>- N. Wirth</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIncreasingly, people seem to misinterpret complexity as sophistication, which\r\n  is baffling -the incomprehensible should cause suspicion rather than\r\n  admiration.\r\nPossibly this trend results from a mistaken belief that using a somewhat\r\n  mysterious device confers an aura of power on the user. \r\n<p align=\"right\"><i>- N. Wirth</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMy being a teacher had a decisive influence on making language and systems\r\n  [that I designed] as simple as possible so that in my teaching, I could\r\n  concentrate on the essential issues of programming rather than on details of\r\n  language and notation.\r\n<p align=\"right\"><i>- N. Wirth</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nSoftware gets slower faster than hardware gets faster.\r\n(Or, sometimes known by) Grove [the head of Intel] giveth and\r\n  Gates [the head of Microsoft]  taketh away.)\r\n<p align=\"right\"><i>- N. Wirth</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDon't ask what it means, but rather how it is used.\r\n<p align=\"right\"><i>- L. Wittgenstein\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nIf we spoke a different language, we would perceive a somewhat different\r\n  world.\r\n<p align=\"right\"><i>- L. Wittgenstein\r\n</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe limits of your language are the limits of your world.\r\n<p align=\"right\"><i>- L. Wittgenstein\r\n</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWhat we have loved, others will love, and we will teach them how.\r\n<p align=\"right\"><i>- W. Wordsworth (The Prelude)\r\n</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMore bugs have been introduced into programs through premature optimization\r\n  than any other cause, including pure stupidity.\r\n  (sometimes quoted as, \"More computing sins are committed in the name of\r\n  efficiency (without necessarily achieving it) than for any other single\r\n  reason -including blind stupidity.\")\r\n<p align=\"right\"><i>- W. Wulf\r\n</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"X\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">X</h3>\r\n\r\n\r\n\r\n<a name=\"Y\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">Y</h3>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nEducation is not the filling of a pail, but the lighting of a fire.\r\n<p align=\"right\"><i>- W.B. Yeats (See Plutarch: The mind...) </i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nDo or do not...there is no try\r\n<p align=\"right\"><i>- Yoda</i>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"Z\">\r\n<hr align=\"left\" width=\"100\">\r\n<h3 align=\"left\">Z</h3>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nCutler, armed with a schedule [for finishing MS Windows NT], was urging\r\n  the team to \"eat its own dog food.\"\r\nPart macho stunt and part common sense, the \"dog food diet\" was the cornerstone\r\n  of Cutler's philosophy.\r\n\"We're going to run on the program we build,\" he insisted.\r\nEating dog food meant there would be no escape from facing the flaws and\r\n  imperfections of NT. \r\nEven while immersed in his own piece of NT, a code writer would confront all\r\n  of its weaknesses.\r\nBy controlling the operations of a code writer's computer, NT would define\r\n  the quality of his life.\r\nIf at first NT tasted no better than dog food, all the better.\r\nCode writers would feel an urgent need to raise the dietary level by quickly\r\n  fixing the errant code and writing more durable code in the first place.\r\n<p align=\"right\"><i>- G. P. Zachary (in\r\n   \"Show-Stopper: The Breakneck Race to Create Windows NT and the Next\r\n      Generation at Microsoft\")</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nInformation is not knowledge,\r\nKnowledge is not wisdom,\r\nWisdom is not truth,\r\nTruth is not beauty,\r\nBeauty is not love,\r\nLove is not music,\r\nand Music is THE BEST.\r\n<p align=\"right\"><i>- F. Zappa (Packard Goose). Also see G. Schubert</i>\r\n</table>\r\n<p>\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nTechnical skill is mastery of complexity, while creativity is mastery of\r\n  simplicity.\r\n<p align=\"right\"><i>- E. C. Zeeman</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nOne day Chao-Chou fell down in the snow, and called out: \"Help me! Help\r\n  Me!\"\r\nA monk came and lay down beside him.\r\nChao-Chou got up and went away.\r\n<p align=\"right\"><i>- Zen koan</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWho is wise? He who learns from all people...as it is said: \"From all my\r\n  teachers I gained understanding\".\r\n<p align=\"right\"><i>- B. Zoma (Psalms 119:99)</i>\r\n</table>\r\n<p>\r\n\r\n\r\n<hr align=\"left\" width=\"100\">\r\n<p>\r\n\r\n\r\nThanks to the following contributors of quotes I've missed and felt worthy of\r\n   appearing here, or of digging up the right attribution for quotes that I\r\n   once listed as anonymous:\r\nJoel Adams,\r\nJerry B. Altzman,\r\nCaroline Bauer,\r\nDavid Bell,\r\nTeresa Carrigan,\r\nDavid Edelheit,\r\nSarah Fix,\r\nRick Gee,\r\nHakon \r\n(see his <a href=\"http://www.softwarequotes.com\">SoftwareQuotes.com</a> web site),\r\nJohn Harrison,\r\nHerbert Holland,\r\nRandy Howe (see his book <i>The Quotable Teacher</i>, The Lyons Press, 2003),\r\nJim Huggins\r\n(see his <a href=\"http://www.kettering.edu/~jhuggins/humor/quotes.html\">Short Quotes</a> web site),\r\nDalton Hunkins,\r\nDavid Kay,\r\nPekka Kilpelainen,\r\nButler Lampson,\r\nJiajun Lim,\r\nChris Lowell,\r\nBen Mauer, \r\nSean McLaughlin,\r\nMary-Alice Muraski,\r\nBrad Osgood,\r\nRobert Noonan,\r\nNick Parlante\r\nDan Resler,\r\nNiseeth Sharma,\r\nJonathan Shelly,\r\nMark Steward,\r\nEugene Wallingford,\r\nRichard D. Zakia (see his \r\n<a href=\"http://www.rit.edu/~andpph/text-quotations.html\">Quotes for Teachers</a> web site),\r\nthe <a href=\"http://lambda.weblogs.com/quotes\">\r\n  Lambda the Ultimate</a> web site,\r\nthe <a href=\"http://www.quoteland.com\">\r\n  quoteland.com</a> web site,\r\nthe <a href=\"http://www.cs.wisc.edu/~glew/sayings.html\">\r\n  Andy \"Krazy\" Glew's Favorite Quotes and Sayings</a> web site,\r\nthe <a href=\"http://www.geocities.com/ResearchTriangle/Facility/4118/misc/bscs.html\">\r\n  Bumper-Sticker Computer Science</a> web site,\r\n\r\na <a href=\"http://www.eskimo.com/~hottub/software/programming_quotes.html\">\r\n  Programming Quotations</a> web site,\r\nthe <a href=\"http://www.sysprog.net/quotpgmr.html\">\r\n  sysprog.net Quotations for Programmers</a> web site,\r\nthe <a href=\"http://www.cs.yale.edu/homes/perlis-alan/quotes.html\">\r\n  Alan Perlis Epigrams in Programming</a> web site,\r\nthe <a href=\"http://www.paulgraham.com/quotes.html\">\r\n  Paul Graham's Quotes (mostly about Lisp)</a> web site,\r\nthe <a href=\"http://www.jbox.dk/quotations.htm\">\r\n  Quotations on simplicity in software design</a> web site,\r\n<a href=\"http://www.eskimo.com/~hottub/software/programming_quotes.html\">\r\n  Programming Quotations</a> web site,\r\n<a href=\"http://www.csee.usf.edu/~eugene/quotes/index.html\">\r\n  Eugene Fink's</a> web site,\r\n<a href= \"http://www.vanderburg.org/Misc/Quotes/soft-quotes.html\">\r\n  Glenn Vanderburg: Quotations on Software Design</a> web site,\r\n<a href= \"http://www.jbox.dk/quotations.htm\">\r\n  Glenn Vanderburg: Quotations on Software Design</a> web site,\r\n<a href = \"http://www.vanderburg.org/Misc/Quotes/soft-quotes.html\">\r\n  jbox.dk Quotations on simplicity in software design</a> web site.\r\n<a href = \"http://www.wsc.ma.edu/math/faculty/fleron/quotes/\">\r\n  Mathematical and Educational Quotation Server at Westfield State College</a>\r\n<a href = \"http://www.cs.uku.fi/~kilpelai/pedagogiikasta.html\">\r\nQuotations Related to University Studies of Computer Science (some in\r\n  Finnish)</a>\r\n\r\n</body>\r\n</html>\r\n\r\n<!---A book is never finished, it is only published. (Derick Wood)--->\r\n\r\n<!---\r\nReading, after a certain age, diverts the mind too much from its\r\ncreative pursuits. Any man who reads too much and uses his own brain too\r\nlittle falls into lazy habits of thinking.\r\n    Albert Einstein\r\nYucheng Low\r\n\r\n\r\n\"Everything is theoretically impossible, until it is done.\"\r\n\"I never learned from a man who agreed with me.\"\r\n\"No statement should be believed because it is made by an authority.\"\r\n  Heinlein\r\nMark Levine\r\n--->\r\n", "encoding": "ascii"}