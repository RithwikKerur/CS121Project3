{"url": "https://www.ics.uci.edu/~eppstein/pubs/c-icalp.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head>\n<title>David Eppstein - Publications</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body bgcolor=\"#ffffff\" text=\"#000000\">\n<h1>David Eppstein - Publications</h1>\n<hr><p>\n<h2>\nInt. Colloq. Automata, Languages, and Programming (ICALP)\n</h2>\n<ul>\n<li><b>Reset sequences for monotonic automata</b>.<br>\nD. Eppstein.<br>\n<i>15th Int. Coll. Automata, Languages and Programming,</i>\nTampere, Finland, 1988.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 317, 1988, pp. 230&ndash;238.<br>\n<a href=\"Epp-SJC-90.pdf\"><i>SIAM J. Computing</i> 19 (3): 500&ndash;510, 1990</a>.\n<p>\nAutomata theory.\nA reset sequence for a DFA is an input such that, no matter which\nstate the DFA starts in, it ends up after the input in a known state.\nThese have been used by Natarajan and Goldberg for certain robot motion\nplanning problems (in fact the conference version of this paper used\nthe title \"Reset sequences for finite automata\nwith application to design of parts orienters\"), and also in coding\ntheory where they arise in the design of\nself-synchronizing codes.  This paper considers DFAs in which the\ntransition functions respect a given cyclic ordering of the states, and\nshows that their shortest reset sequences can be found quickly.\nIt also considers parallel algorithms for the problem.\nThere remains open a gap between <i>n<sup>2</sup></i> and <i>n<sup>3</sup></i>\nin the maximum length of reset sequences for general automata.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Reset sequences for monotonic automata\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Reset-sequences-for-monotonic-automata.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein90reset.html\">CiteSeer</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=681434\">ACM DL (ICALP)</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=80025\">ACM DL (SJC)</a>)\n<p>\n<li><b>Parallel algorithmic techniques for combinatorial computation</b>.<br>\nD. Eppstein and\n<a href=\"//www.scs.gatech.edu/people/zvi-galil\">Z. Galil</a>.<br>\n<i>Ann. Rev. Comput. Sci.</i> 3: 233&ndash;283, 1988.<br>\nInvited talk by Z. Galil,\n<a href=\"EppGal-ICALP-89.pdf\"><i>16th Int. Coll. Automata, Languages and Programming,</i> Stresa, Italy, 1989</a>.<br>\n<a href=\"//doi.org/10.1007/BFb0035768\">Springer, <i>Lecture Notes in Comp. Sci.</i> 372, 1989, pp. 304&ndash;318</a>.\n<p>\nThis survey on parallel algorithms emphasized the use of basic\nsubroutines such as prefix sums, Euler tours, ear decomposition, and matrix\nmultiplication for solving more complicated graph problems.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Parallel algorithmic techniques for combinatorial computation\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Parallel-algorithmic-techniques-for-combinatorial-computation.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein88parallel.html\">CiteSeer</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=53603\">ACM DL (ARCS)</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=681611\">ACM DL (ICALP)</a>)\n<p>\n<li><b>The expected extremes in a Delaunay triangulation</b>.<br>\n<a href=\"//www.parc.xerox.com/csl/members/bern/\">M. Bern</a>,\nD. Eppstein, and F. Yao.<br>\n<i>18th Int. Coll. Automata, Languages and Programming,</i>\nMadrid, Spain, 1991.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 510, 1991, 674&ndash;685.<br>\n<a href=\"BerEppYao-IJCGA-91.pdf\"><i>Int. J. Comp. Geom. &amp; Appl.</i> 1 (1): 79&ndash;92, 1991</a>.\n<p>\nDiscusses the expected behavior of Delaunay triangulations for\npoints chosen uniformly at random (without edge effects).\nThe main result is that within a region containing <i>n</i> points,\nthe expected maximum degree is bounded to within a constant factor\nof log <i>n</i> / log log <i>n.</i>\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#The expected extremes in a Delaunay triangulation\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/The-expected-extremes-in-a-Delaunay-triangulation.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/bern91expected.html\">CiteSeer</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=111766\">ACM DL</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=684542\">ACM DL (2)</a>)\n<p>\n<li><b>Stable-matching Voronoi diagrams:\ncombinatorial complexity and algorithms</b>.<br>\n<a href=\"//www.cs.technion.ac.il/~barequet/\">G. Barequet</a>,\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>, and\nN. Mamano.<br>\n<a href=\"//arxiv.org/abs/1804.09411\">arXiv:1804.09411</a><br>\n<i>Proc. 45th International Colloquium on Automata, Languages, and\nProgramming (ICALP 2018)</i>, Prague.<br>\n<a href=\"//doi.org/10.4230/LIPIcs.ICALP.2018.89\">Leibniz International\nProceedings in Informatics (LIPIcs) 107, pp. 89:1&ndash;89:14</a>.<br>\n<p>\nThe stable-matching Voronoi diagram of a collection of point sites in\nthe plane, each with a specified area, is a collection of disjoint\nregions of the plane, one for each site and having the specified area,\nso that no pair of a point and a site are closer to each other than to\nthe farthest other site and point that they may be matched to.\nWe prove nearly-matching upper and lower bounds on the combinatorial\ncomplexity of these diagrams and provide algorithms that can compute them\nin a polynomial number of primitive steps.\n<p>\n<li><b>Optimally sorting evolving data</b>.<br>\nJ. Besa,\n<a href=\"//www.ics.uci.edu/~wdevanny/\">W. E. Devanny</a>,\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>, and\nT. Johnson.<br>\n<a href=\"//arxiv.org/abs/1805.03350\">arXiv:1805.03350</a><br>\n<i>Proc. 45th International Colloquium on Automata, Languages, and\nProgramming (ICALP 2018)</i>, Prague.<br>\n<a href=\"//doi.org/10.4230/LIPIcs.ICALP.2018.81\">Leibniz International Proceedings in Informatics (LIPIcs) 107, pp. 81:1&ndash;81:13</a>.<br>\n<p>\nSuppose that a collection of objects has a linear order that is evolving\nby swaps of randomly chosen consecutive elements. We would like to\nmaintain an approximation to this order using an algorithm that performs\none comparison per swap. We show that repeated insertion sort can\nmaintain linear inversion distance from the underlying order, the best\npossible.\n<p>\n</ul>\n\n<hr><p>\n<a href=\"conf.html\">Conferences</a> &ndash;\n<a href=\"/~eppstein/pubs/\">Publications</a> &ndash;\n<a href=\"/~eppstein/\">David Eppstein</a> &ndash;\n<a href=\"/~theory/\">Theory Group</a> &ndash;\n<a href=\"/\">Inf. &amp; Comp. Sci.</a> &ndash;\n<a href=\"//www.uci.edu/\">UC Irvine</a>\n<p>\n<small>Semi-automatically <a href=\"filter.html\">filtered</a>\nfrom a common source file.</small>\n</body></html>\n", "encoding": "ascii"}