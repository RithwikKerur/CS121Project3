{"url": "https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_9.html#SEC148", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n                      \"http://www.w3.org/TR/html40/loose.dtd\">\n<HTML>\n<!-- Created on September, 4 2018 by texi2html 1.66 -->\n<!--\nWritten by: Lionel Cons <Lionel.Cons@cern.ch> (original author)\n            Karl Berry  <karl@freefriends.org>\n            Olaf Bachmann <obachman@mathematik.uni-kl.de>\n            and many others.\nMaintained by: Many creative people <dev@texi2html.cvshome.org>\nSend bugs and suggestions to <users@texi2html.cvshome.org>\n\n-->\n<HEAD>\n<TITLE>Pintos Projects: Coding Standards</TITLE>\n\n<META NAME=\"description\" CONTENT=\"Pintos Projects: Coding Standards\">\n<META NAME=\"keywords\" CONTENT=\"Pintos Projects: Coding Standards\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<META NAME=\"Generator\" CONTENT=\"texi2html 1.66\">\n<LINK REL=\"stylesheet\" HREF=\"pintos.css\">\n</HEAD>\n\n<BODY >\n\n<A NAME=\"SEC148\"></A>\n<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>\n<TR><TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos_8.html#SEC141\"> &lt;&lt; </A>]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos_10.html#SEC152\"> &gt;&gt; </A>]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos.html#SEC_Top\">Top</A>]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos.html#SEC_Contents\">Contents</A>]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[Index]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos_abt.html#SEC_About\"> ? </A>]</TD>\n</TR></TABLE>\n\n<HR SIZE=2>\n<H1> C. Coding Standards </H1>\n<!--docid::SEC148::-->\n<P>\n\nOur standards for coding are most important for grading.  We want to\nstress that aside from the fact that we are explicitly basing part of\nyour grade on these things, good coding practices will improve the\nquality of your code.  This makes it easier for your partners to\ninteract with it, and ultimately, will improve your chances of having a\ngood working program.  That said once, the rest of this document will\ndiscuss only the ways in which our coding standards will affect our\ngrading.\n</P>\n<P>\n\n<A NAME=\"Coding Style\"></A>\n<HR SIZE=\"6\">\n<A NAME=\"SEC149\"></A>\n<H2> C.1 Style </H2>\n<!--docid::SEC149::-->\n<P>\n\nStyle, for the purposes of our grading, refers to how readable your\ncode is.  At minimum, this means that your code is well formatted, your\nvariable names are descriptive and your functions are decomposed and\nwell commented.  Any other factors which make it hard (or easy) for us\nto read or use your code will be reflected in your style grade.\n</P>\n<P>\n\nThe existing Pintos code is written in the GNU style and largely\nfollows the <A HREF=\"http://www.gnu.org/prep/standards_toc.html\">GNU\nCoding Standards</A>.  We encourage you to follow the applicable parts of\nthem too, especially chapter 5, &quot;Making the Best Use of C.&quot;  Using a\ndifferent style won't cause actual problems, but it's ugly to see\ngratuitous differences in style from one function to another.  If your\ncode is too ugly, it will cost you points.\n</P>\n<P>\n\nPlease limit C source file lines to at most 79 characters long.\n</P>\n<P>\n\nPintos comments sometimes refer to external standards or\nspecifications by writing a name inside square brackets, like this:\n<CODE>[IA32-v3a]</CODE>.  These names refer to the reference names used in\nthis documentation (see section <A HREF=\"pintos_14.html#SEC175\">Bibliography</A>).\n</P>\n<P>\n\nIf you remove existing Pintos code, please delete it from your source\nfile entirely.  Don't just put it into a comment or a conditional\ncompilation directive, because that makes the resulting code hard to\nread.\n</P>\n<P>\n\nWe're only going to do a compile in the directory for the project being\nsubmitted.  You don't need to make sure that the previous projects also\ncompile.\n</P>\n<P>\n\nProject code should be written so that all of the subproblems for the\nproject function together, that is, without the need to rebuild with\ndifferent macros defined, etc.  If you do extra credit work that\nchanges normal Pintos behavior so as to interfere with grading, then\nyou must implement it so that it only acts that way when given a\nspecial command-line option of the form <Q><SAMP>-<VAR>name</VAR></SAMP></Q>, where\n<VAR>name</VAR> is a name of your choice.  You can add such an option by\nmodifying <CODE>parse_options()</CODE> in <Q><TT>threads/init.c</TT></Q>.\n</P>\n<P>\n\nThe introduction describes additional coding style requirements\n(see section <A HREF=\"pintos_1.html#SEC9\">1.2.2 Design</A>).\n</P>\n<P>\n\n<A NAME=\"C99\"></A>\n<HR SIZE=\"6\">\n<A NAME=\"SEC150\"></A>\n<H2> C.2 C99 </H2>\n<!--docid::SEC150::-->\n<P>\n\nThe Pintos source code uses a few features of the &quot;C99&quot; standard\nlibrary that were not in the original 1989 standard for C.  Many\nprogrammers are unaware of these feature, so we will describe them.  The\nnew features used in Pintos are\nmostly in new headers:\n</P>\n<P>\n\n</P>\n<DL COMPACT>\n<DT><Q><TT>&lt;stdbool.h&gt;</TT></Q>\n<DD>Defines macros <CODE>bool</CODE>, a 1-bit type that takes on only the values\n0 and 1, <CODE>true</CODE>, which expands to 1, and <CODE>false</CODE>, which\nexpands to 0.\n<P>\n\n</P>\n<DT><Q><TT>&lt;stdint.h&gt;</TT></Q>\n<DD>On systems that support them, this header defines types\n<CODE>int<VAR>n</VAR>_t</CODE> and <CODE>uint<VAR>n</VAR>_t</CODE> for <VAR>n</VAR> = 8, 16, 32,\n64, and possibly other values.  These are 2's complement signed and unsigned\ntypes, respectively, with the given number of bits.  \n<P>\n\nOn systems where it is possible, this header also defines types\n<CODE>intptr_t</CODE> and <CODE>uintptr_t</CODE>, which are integer types big\nenough to hold a pointer.\n</P>\n<P>\n\nOn all systems, this header defines types <CODE>intmax_t</CODE> and\n<CODE>uintmax_t</CODE>, which are the system's signed and unsigned integer\ntypes with the widest ranges.\n</P>\n<P>\n\nFor every signed integer type <CODE><VAR>type</VAR>_t</CODE> defined here, as well\nas for <CODE>ptrdiff_t</CODE> defined in <Q><TT>&lt;stddef.h&gt;</TT></Q>, this header also\ndefines macros <CODE><VAR>TYPE</VAR>_MAX</CODE> and <CODE><VAR>TYPE</VAR>_MIN</CODE> that\ngive the type's range.  Similarly, for every unsigned integer type\n<CODE><VAR>type</VAR>_t</CODE> defined here, as well as for <CODE>size_t</CODE> defined\nin <Q><TT>&lt;stddef.h&gt;</TT></Q>, this header defines a <CODE><VAR>TYPE</VAR>_MAX</CODE>\nmacro giving its maximum value.\n</P>\n<P>\n\n</P>\n<DT><Q><TT>&lt;inttypes.h&gt;</TT></Q>\n<DD><Q><TT>&lt;stdint.h&gt;</TT></Q> provides no straightforward way to format\nthe types it defines with <CODE>printf()</CODE> and related functions.  This\nheader provides macros to help with that.  For every\n<CODE>int<VAR>n</VAR>_t</CODE> defined by <Q><TT>&lt;stdint.h&gt;</TT></Q>, it provides macros\n<CODE>PRId<VAR>n</VAR></CODE> and <CODE>PRIi<VAR>n</VAR></CODE> for formatting values of\nthat type with <CODE>&quot;%d&quot;</CODE> and <CODE>&quot;%i&quot;</CODE>.  Similarly, for every\n<CODE>uint<VAR>n</VAR>_t</CODE>, it provides <CODE>PRIo<VAR>n</VAR></CODE>,\n<CODE>PRIu<VAR>n</VAR></CODE>, <CODE>PRIu<VAR>x</VAR></CODE>, and <CODE>PRIu<VAR>X</VAR></CODE>.\n<P>\n\nYou use these something like this, taking advantage of the fact that\nthe C compiler concatenates adjacent string literals:\n<TABLE><tr><td>&nbsp;</td><td class=example><pre>#include &lt;inttypes.h&gt;\n<small>...</small>\nint32_t value = <small>...</small>;\nprintf (&quot;value=%08&quot;PRId32&quot;\\n&quot;, value);\n</pre></td></tr></table>The <Q><SAMP>%</SAMP></Q> is not supplied by the <CODE>PRI</CODE> macros.  As shown\nabove, you supply it yourself and follow it by any flags, field\nwidth, etc.\n<P>\n\n</P>\n<DT><Q><TT>&lt;stdio.h&gt;</TT></Q>\n<DD>The <CODE>printf()</CODE> function has some new type modifiers for printing\nstandard types:\n<P>\n\n</P>\n<DL COMPACT>\n<DT><Q><SAMP>j</SAMP></Q>\n<DD>For <CODE>intmax_t</CODE> (e.g. <Q><SAMP>%jd</SAMP></Q>) or <CODE>uintmax_t</CODE> (e.g.\n<Q><SAMP>%ju</SAMP></Q>).\n<P>\n\n</P>\n<DT><Q><SAMP>z</SAMP></Q>\n<DD>For <CODE>size_t</CODE> (e.g. <Q><SAMP>%zu</SAMP></Q>).\n<P>\n\n</P>\n<DT><Q><SAMP>t</SAMP></Q>\n<DD>For <CODE>ptrdiff_t</CODE> (e.g. <Q><SAMP>%td</SAMP></Q>).\n</DL>\n<P>\n\nPintos <CODE>printf()</CODE> also implements a nonstandard <Q><SAMP>'</SAMP></Q> flag that\ngroups large numbers with commas to make them easier to read.\n</DL>\n<P>\n\n<A NAME=\"Unsafe String Functions\"></A>\n<HR SIZE=\"6\">\n<A NAME=\"SEC151\"></A>\n<H2> C.3 Unsafe String Functions </H2>\n<!--docid::SEC151::-->\n<P>\n\nA few of the string functions declared in the standard\n<Q><TT>&lt;string.h&gt;</TT></Q> and <Q><TT>&lt;stdio.h&gt;</TT></Q> headers are notoriously unsafe.\nThe worst offenders are intentionally not included in the Pintos C\nlibrary:\n</P>\n<P>\n\n</P>\n<DL COMPACT>\n<DT><CODE>strcpy</CODE>\n<DD>When used carelessly this function can overflow the buffer reserved\nfor its output string.  Use <CODE>strlcpy()</CODE> instead.  Refer to\ncomments in its source code in <CODE>lib/string.c</CODE> for documentation.\n<P>\n\n</P>\n<DT><CODE>strncpy</CODE>\n<DD>This function can leave its destination buffer without a null string\nterminator.  It also has performance problems.  Again, use\n<CODE>strlcpy()</CODE>.\n<P>\n\n</P>\n<DT><CODE>strcat</CODE>\n<DD>Same issue as <CODE>strcpy()</CODE>.  Use <CODE>strlcat()</CODE> instead.\nAgain, refer to comments in its source code in <CODE>lib/string.c</CODE> for\ndocumentation.\n<P>\n\n</P>\n<DT><CODE>strncat</CODE>\n<DD>The meaning of its buffer size argument is surprising.\nAgain, use <CODE>strlcat()</CODE>.\n<P>\n\n</P>\n<DT><CODE>strtok</CODE>\n<DD>Uses global data, so it is unsafe in threaded programs such as\nkernels.  Use <CODE>strtok_r()</CODE> instead, and see its source code in\n<CODE>lib/string.c</CODE> for documentation and an example.\n<P>\n\n</P>\n<DT><CODE>sprintf</CODE>\n<DD>Same issue as <CODE>strcpy()</CODE>.  Use <CODE>snprintf()</CODE> instead.  Refer\nto comments in <CODE>lib/stdio.h</CODE> for documentation.\n<P>\n\n</P>\n<DT><CODE>vsprintf</CODE>\n<DD>Same issue as <CODE>strcpy()</CODE>.  Use <CODE>vsnprintf()</CODE> instead.\n</DL>\n<P>\n\nIf you try to use any of these functions, the error message will give\nyou a hint by referring to an identifier like\n<CODE>dont_use_sprintf_use_snprintf</CODE>.\n<A NAME=\"Project Documentation\"></A>\n<HR SIZE=\"6\">\n<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>\n<TR><TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos_9.html#SEC148\"> &lt;&lt; </A>]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos_10.html#SEC152\"> &gt;&gt; </A>]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\"> &nbsp; <TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos.html#SEC_Top\">Top</A>]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos.html#SEC_Contents\">Contents</A>]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[Index]</TD>\n<TD VALIGN=\"MIDDLE\" ALIGN=\"LEFT\">[<A HREF=\"pintos_abt.html#SEC_About\"> ? </A>]</TD>\n</TR></TABLE>\n<BR>\n<FONT SIZE=\"-1\">\nThis document was generated\nby <I>Ryan Huang</I> on <I>September, 4 2018</I>\nusing <A HREF=\"http://texi2html.cvshome.org\"><I>texi2html</I></A>\n</FONT>\n\n</BODY>\n</HTML>\n", "encoding": "ascii"}