{"url": "https://www.ics.uci.edu/~jacobson/cs122b/Project/07-Phase4.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n    \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n   <meta name=\"GENERATOR\" content=\"Mozilla/4.79 (Macintosh; U; PPC) [Netscape]\">\n   <title>Database Administration: User Management & Database Tuning</title>\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\">\n</head>\n\n<body>\n\n<body>\n\n<div class=\"title\">\n<center>\n<h2>Database Administration: User Management & Database Tuning</h2>\n<h4>Phase 4</h4>\n</center>\n</div>\n\n\n<div class=\"section\">\n<hr>\n<h3>Overview</h3>\n</div>\n\n<p>In this phase, we add features to the FabFlixs database to allow for different user groups (each with appropriate permissions) and to tune the database.</p>\n\n\n<div class=\"section\">\n<hr>\n<h3>References</h3>\n</div>\n<ul>\n\t<li><a href=\"http://java.sun.com/j2se/1.3/docs/guide/jdbc/\">Official JDBC documentation</a>\n\t<li><a href=\"http://java.sun.com/javase/6/docs/api/java/sql/package-summary.html\">Java 5.0 API Documentation for Statement, PreparedStatement and CallableStatement in java.sql</a>\n\t<li><a href=\"http://www.postgresql.org/docs/8.3/interactive/user-manag.html\">Database Roles and Privileges - Sections 19-19.4 of the PostgreSQL manual</a>\n\t<li><a href=\"http://www.postgresql.org/docs/8.3/interactive/ddl-priv.html\">Privileges -  Section 5.6 of the PostgreSQL manual</a>\n\t<li><a href=\"http://www.postgresql.org/docs/8.3/interactive/sql-commands.html\">CREATE, ALTER, DROP, GRANT, REVOKE, ANALYZE and EXPLAIN SQL Commands - Section VI.I of the PostgreSQL manual</a>\n\t<li><a href=\"http://www.postgresql.org/docs/8.3/interactive/catalogs.html\">System Catalogs - Chapter 44 of the postgreSQL manual</a>\n\t<li><a href=\"http://www.postgresql.org/docs/8.3/interactive/app-psql.html\">psql documentation</a>\n\t  <li><a href=\"http://www.postgresql.org/docs/8.3/interactive/populate.html\">Bulk Populating a postreSQL Database - Section 14.4 of the PostgreSQL manual</a></li>\n\t<li><a href=\"http://java.sun.com/developer/onlineTraining/Programming/JDCBook/conpool.html\">JDBC Tutorial on Connection Pooling</a></li>\n\t<li>And, of course, the instructor and the TA\n</ul>\n\n\n<div class=\"section\">\n<hr>\n<h3>What to Turn In</h3>\n</div>\nIn one ZIP file, labeled with your team name, your updated employee access system, your tuning report and a README file explaining how to compile, load, and otherwise prepare your system for use, and how to run it; make sure the file's extension is ZIP.\n</p>\n\n<div class=\"section\">\n<hr>\n<h3>Terminology</h3>\n</div>\n\n<p><b>Attributes</b>: permissions that can be given to, or taken away from, a PostgreSQL ROLE, managed with the CREATE ROLE and ALTER ROLE commands.</p>\n\n<p><b>Privileges</b>: access and use permissions to the database and its objects (tables, functions, langauges, etc.) that can be given to, or taken from, a PostgreSQL ROLE, managed with the GRANT and REVOKE commands.</p>\n\n<div class=\"section\">\n<hr>\n<h3>User Groups; Permissions Management</h3>\n</div>\n\n<p>Required is adding user groups and to manage them with the \"back-end program\" (the program first developed in Phase 1); those groups and their capabilities are </p>\n<ul>\n      <li><p>DBA - Database Administrator. Only superusers can be DBA members. DBAs are the only group to have full access to the back-end system, including the new Permissions Management feature (see below). </p></li>\n\t <li><p>DB Staff. DB staff have full access to all features of the back-end system except that 1) when they enter the Permissions Management feature, they can only view attributes and permissions&#151;they do not even see the menu options for other features, and 2) they have either no access, or only restricted access, to the arbitrary SQL command function (see below for details).</p> </li>\n \t<li><p>FabFlixs Staff. These users have access only to the back-end functions that print information; for example, they can use the function that prints movie information for a given star. They do not have access to&#151;in fact, do not even know about&#151;any other functions (see below).</p></li>  \n</ul>\n\n<h4>The superuser and communication security</h4>\n\n<p>A superuser is a user, a role with the login privilege, that has all\nprivileges, including the privilege of creating other roles, including users. \nTo create FabFlixs user groups, the database must first have at least one superuser, which it does: the superuser 'postgres', created when you installed PostgreSQL.</p>\n\n<p>If you wish to create another superuser, say one called <font class = \"codefacesmall\">root</font>, log into the database as <font class = \"codefacesmall\">postgres</font> and issue the SQL command\n</p>\n\n    <div align=\"center\"><font class=\"codeFaceSmall\">CREATE ROLE root WITH PASSWORD 'rootpassword' SUPERUSER CREATEROLE CREATEDB LOGIN;</font></div>\n\t\n<p>make sure you have this testing environment \"locked down\" so that only authorized computers can get acess to FabFlixs. The default installation of PostgreSQL allows only localhost access, typically what is desired at this stage. If you changed that access (e.g., in Phase 0), double check to ensure that only authorized computers will get to FabFlixs (see <a href=\"http://www.ics.uci.edu/~jacobson/cs122b/Project/03-Phase0.html\">Enabling remote computers to communicate with the PostgreSQL server</a>, in Phase 0, for details.\n\n<h4><a name=\"roles\"></a>User and group Management</h4>\n\n<p>You are required to implement the new Permissions Management feature in the backend program. It allows a user in the DB Staff group to view users and user groups along with their attributes and privileges. It allows a DBA to not only view these settings, but to change them. The DBA can also add and remove users, move users to another group and change attributes and privileges; s/he cannot, however, add or remove groups. More specifically, the feature provides these capabilities:</p>\n<ol>\n\t<li> <p>Create new users and place them in a group: DBA only.</p></li>\n<p>A DBA can create a new user and add her/him to one of the three user groups, or move an existing user to a group of which s/he is not currently a member. A new member of a group should have <i>all and only</i> the permissions of that group. Since these groups comprise all staff, and group permissions are cumulative (that is, since DBA has all the permisssions for DB Staff, and DB Staff has all the permissions of FabFlixs Staff), a user must be a member of a group, and of only one group.  This implies that when a user is moved to a new group, that user is removed from her/his current group.)</p>\n</li>\n\n  <li><p>Modify group attributes: DBA only.</p>\n<p>A member of the DBA group can alter the attributes and privileges of any of the three user groups. As a wrong setting can seriously compromise database security, this feature must have verification checks passed (e.g., \"Are you sure?\"-type questions answered yes) before the change is made.</p>\n</li>\n\n<li><p>Remove users: DBA only.</p>\n<p>Deletes a user from the FabFlixs system (including removing said from its group); a verfication check is required.</p>\n</li>\n\n<li> <p>Display roles and their attributes and privileges (DBA and DB Staff only)</p>\n<p>The staff member can repeatedly choose to view the attributes and privileges of any user or any particular group, until a command is given to exit the feature. The display of information must, of course, be easy for a DBA or DB Staff (that is, someone with their assumed expertise) to read and understand.\n(Yes, it is the case that a user's attributes and privileges are completely determined by her/his group, and so one could just display a user's group and issue another command to view the group's attributes and privileges if need be&#151;but that is cumbersome. Displaying all information about a user at once is more efficacious.)</p>\n</ol>\n\n<p>The three user groups are permanent; therefore, there should be no way within this function to delete a group. </p>\n\n<p>To enforce the security these functions implement, the arbitrary SQL command function must now be limited. Required is that only DBAs can use the feature. Desired, but not required for full credit (which means that if you do it you can earn credit that can offset points lost for other reasons) is a more nuanced restriction: DBAs can issue any command, but DB Staff and FabFlixs Staff can only issue those arbitrary SQL commands that are consistent with the permissions and access of those groups, as described above.</p>\n\n<p>The exact look and feel of the Permissions Management feature is up to\nyou, but it should be consistent with the interface used in the rest of\nthe program. </p>\n\n<p>Regardless of the interface, the Permissions Management feature should act like its own mini-system: the user enters into it, sees a menu of choices, picks and executes a choice, then goes back to the menu; this continues until some sort of exit command is issued to take the user out of Permissions Management and back to the main FabFlixs menu.</p> \n\nThe back-end user should only \"see\" those functions and features her/his group are allowed to employ. For instance, if the user who logged into this system is DB Staff, that user <i>only</i> sees menu options that allow for viewing of permissions information and specifically <i>does not see</i> options that would add, delete, or modify this information; if the user is FabFlixs staff, s/he does not see a menu option for the permissions subsystem, for the arbitrary SQL function, or for any other function s/he is not allowed to use.</p>\n\n<p>Some hints and suggestions:</p>\n<ul> \n\t<li><p><i>Thoroughly</i> read the PostgreSQL documentation on roles and,\nin particular, on the CREATE ROLE, ALTER ROLE, DROP ROLE, GRANT and  REVOKE commands.</p>\n</li>\n\t<li><p>Have appropriate error handling. For example, if the back-end user tries\nto create a new user that already exists, that should be an error;\nAll errors should be dealt with and communicated in a manner appropriate for your backend system's user interface.</p> </li>\n\n\t<li><p>Try to display lists of things\nso that as many as feasible fit neatly on one screen. Of course, that\nwill not be possible for sufficiently large lists, so have a way to scroll\nthough the items (such as the \"next 20\" and \"previous 20\" approach used\nin Phase 2, if you have a Web interface, or \"Press RETURN to continue\"-type messages if you are using a command-line interface.).</p></li>\n\n<li><p><i>Thoroughly</i> check that your Permissions Management feature and the now-changed arbirtrary SQL command feature work properly&#151;it would be a major security breach if they did not!</p>\n</li>\n</ul>\n\n<h4>Some Technical Points</h4>\n\n\n<p>To display the information required in the above-described\nfunctions, or to show us during your demonstration that changes made to\nroles by your program are actually appearing in the database, you will\nneed to access certain of PostgreSQL's internal tables of metadata,\ncalled <i>catalogs</i> (see the references, above). In\nparticular, you will likely find useful information in the following catalogs: </p>\n\n<ul>\n<li><p><font class=\"codeFaceSmall\">pg_authid</font>: roles information; <font class = \"codeFaceSmall\">pg_roles</font> is the same, but with password blanked</p></li>\n<li><p><font class=\"codeFaceSmall\">pg_auth_members</font>: information about the membership relations between roles</p></li>\n <li><p><font class=\"codeFaceSmall\">pg_class</font>: information about \ntables and table-like objects, such as views; the <font class=\"codeFaceSmall\">relacl</font> (relation access control list) attribute gives information about who has access to a particluar table</p></li>\n<li><p><font class=\"codeFaceSmall\">pg_proc</font>: information about existing\nstored procedures; the <font class=\"codeFaceSmall\">proacl</font> attribute gives information about who has  access to a particular procedure</p></li>\n<li><p><font class=\"codeFaceSmall\">pg_namespace</font>: a list of the namespaces in use; in  particular, PUBLIC identifies those entites that are user-defined</p></li>\n</ul>\n\n<p>The <font class=\"codeFaceSmall\">pg_class</font> and <font class=\"codeFaceSmall\">pg_proc</font> tables have information about both system and user tables, and\nboth standard and user PostgreSQL functions, respectively. We are only\ninterested in user-created tables and functions, i.e., your\ninterface should allow authorized users to change user privileges only\non user-created tables and functions: These all have the namespace <font class=\"codeFaceSmall\">public</font>.</p>\n\n<p><i>Do not directly change the information in these catalogs</i>, as\nyou could (quite easily) break the database. Instead, call upon GRANT,\nREVOKE, ALTER, CREATE and DROP as appropriate; those commands will\nupdate the catalogs.</p>\n\n<p>You will need to log in as a superuser if you want\nunfettered access to all the roles, along with their attributes and\nprivileges. In psql, you can use the <font class=\"codeFaceSmall\">\\dg</font> command to display roles and the <font class=\"codeFaceSmall\">\\z</font> command to display information about existing privileges. pgAdmin also can display this information.</p>\n\n<p>When accessing a function, you need to provide its name <i>and its argument types</i>;\nas postgreSQL allows function overloading, the arguments are needed to\nuniquely define which function is being used. So, for instance, one says</p>\n\n<pre>\nGRANT EXECUTE ON FUNCTION concat(varchar, varchar) TO dbstaff ;\n</pre>\n<p>One way to find the arguments of a function is to issue</p>\n\n<pre>\nselect proname, nspname, proargtypes \nfrom pg_proc, pg_namespace \nwhere pg_proc.pronamespace = pg_namespace.oid and\npg_namespace.nspname='public' ;\n</pre>\n\n<p>which returns a table such as </p>\n\n\n<pre> \n      proname        | nspname |               proargtypes \n----------------------+---------+------------------------------------------------- \nadd_one               | public  |                                              23 \nadd_one               | public  |                                       1043 1043 \nconcat                | public  |                                       1043 1043 \nplpgsql_call_handler  | public  | \nadd_movie             | public  | 1043 23 1043 1043 1043 1015 1015 1015 1182 1015\n(5 rows) \n</pre>\n\n\n<p>Now you can look up the argtype of interest, in our case, code 1043 from <font class=\"codeFaceSmall\">concat</font>:</p>\n\n<pre>\n\t\tselect typname from pg_type where oid=1043;\n</pre>\n\n<p>which returns</p>\n\n\n<pre>\ntypname\n--------- \nvarchar\n(1 row)\n</pre>\n\n\n<p>Here's a SELECT statement that will provide a table of just user-defined functions:</p>\n\n<pre>\nselect proname, nspname\nfrom pg_proc, pg_namespace \nwhere pg_proc.pronamespace = pg_namespace.oid and pg_namespace.nspname='public' ;\n</pre>\n\n<p>(No, it's not straight-forward, but so it goes...)</p>\n\n<p>Similar queries can be used to identify public tables. </p>\n\n  \n<div class=\"section\">\n<hr>\n<h3>Tuning</h3>\n</div>\n\n<p>As movies and related information are added to the FabFlixs database, customer\nbrowsing and searching times may increase to unacceptable levels. So,\nhere we create a large test database, reflective of how big the FabFlixs\ndatabase is likely to become, and determine if indexing certain\ndatabase tables is warranted.</p>\n\n<ul>\n    <li><p> Generate a test database of at least 250,000 movie records\nand at least 25,000 star records. Titles and names can be randomly\ngenerated. (Hint: Write a short JDBC program that generates a list of\ntitles and a list of stars, then write combinations of these\nrepeatedly to a file such that 250,000 movie and 25,000 star records\nresult. Store them in Comma Separated Value format; then you can use \nCOPY to do a fast, bulk incorporation of these records into the database. \nRefer to the \"Bulk Populating a postreSQL Database\" reference above.)</p></li>\n\n    <li><p>Using the FabFlixs back-end program, conduct at\nleast 10 searches by movie title, at least 10 by star name, and at\nleast 10 by both movie title and star name. (Searching is done in the\nmanner described in Phase 3; in particular, fuzzy searching is allowed.)\nMake sure the searches lead to different parts of\neach table, in particular its start, middle and end. Determine the\naverage time it takes to complete each of these three kinds of\nsearches. (Hint: add code to your FabFlixs system\nso that the computer measures and reports the time. For instance, you\ncan use <font class=\"codeFaceSmall\">System.nanoTime()</font>, which reports\nthe number of nanoseconds since some system-determined fixed time. Call the method\nbefore you start a set of searches, call it again right after that\nset completes, then subtract to get the time the set of searches takes and divide by \nthe number of searches to obtain the average time. This code can be commented \nout when you are done, so when the system is put into production, the user does \nnot see the times.)\n</li>\n    <li><p> Now create various indexes into the database tables; your\ngoal is to have these indices make the searches significantly faster.\nWhich tables you index, what you index on, what kind of index you use, \nand how many indices you have&#151;that's all up to you. Think carefully \nabout what to try. Redo the same searches as before with (various combinations \nand types of) indices in effect and again determine the average search times. \nYou will very likely find the ANALYZE and EXPLAIN commands provide information \nuseful in making these decisions.</p></li>\n\n    <li><p>Write a short (one page or so) summary report that explains\nwhat indices you tried and the results you obtained when using and not using these indices.  Then give your reasoned opinion as to which, if any,\nindices should be used in the final, production system; justify your recommendations (quoting your timings and information gleaned from EXPLAIN and ANALYZE, as appropriate).\nRemember that indices don't always help (check out the PostgreSQL documentation for\nsome insight into when they do and don't) and that there are trade-offs; for instance, indices take more disk\nspace, and it takes longer to add and delete records when they are\nin use. Your report is to be stored in a file that is readable by Word\nor Firefox.</p></li>\n</ul>\n      \n      <p> Desired, but not required for full credit, are tests with multiple users searching the database simultaneously. This can be done \nby modifying your back-end system to repeatedly issue a SQL command\nand then using multiple such back-end\nsystems simultaneously. You can also do it by writing a multi-threaded Java program \nwhere each thread queries the database. If you are interested in doing even more sophisticated\ntesting, contact the instructor.</p></li>\n\n<div class=\"section\">\n  <hr>\n  <h3>Demonstration</h3>\n</div>\n\n<p>Prior to your demonstration, have at least three users in each of the three user groups.</p>\n\n  <p>During the demonstration, first show us that the three default\nroles have the specified attributes and privileges and that each has at\nleast three users. Further, show us the capabilities of your Permissions\nManagement feature; what you do in what order is up to you,\nbut be sure to demonstrate Permissions Management\ncapabilities thoroughly. While showing us these features, also show us that\nchanges you made using the program really did end up in the database.\nFor instance, you could have an open window with pgAdmin running\nand, after doing some work using the Permissions Management\nfeature, issue pgAdmin commands to show us that the changes were indeed\nmade to the database.</p>\n\n  <p>Also, briefly explain the results of your tuning\ntests and your recommendations regarding indexing of the database.</p>\n\n\n<font face=\"Helvetica\" size=\"2\">\n<p>Written Chen Li as  \"Project 4\" for ICS185 Fall 2005.\n<br>Revised by Norman Jacobson for the Spring 2005 offering of ICS185, May 2005.\n<br>Revised by Norman Jacobson with assistance from Michael Sirivianos, for the Winter 2006 offering of ICS185, \n<br>&nbsp;&nbsp;to include FabFlix user groups, and to reflect the use of postgres 8.1, including the use of \"roles,\"\nFebruary 2006.\n<br>Minor revisions by Norman Jacobson primarily to reflect 8.1 syntax, and to improve clarity, for CS122B Spring 2007, May 2007. <br>&nbsp;&nbsp;Includes some updates made in the CS122B Winter 2007 version of this exercise.\n<br>Minor edits by Norman Jacobson, September and November 2007.\n<br>Revised to clarify requirements and meanings of 'attributes' and 'privileges,' by Norman Jacobson, December 2007.\n<br>Revised to reflect using PostgreSQL 8.3.3 under Windows to to correct minor typos, by Norman Jacobson, September 2008.\n<br>Revised to include READ.ME requirement, by Norman Jacobson, December 2008.\n<br>Revised to suggest System.nanoTime() for timings; some minor polishing, by Norman Jacobson, March 2009.\n</p>\n</body>\n</html>\n", "encoding": "ascii"}