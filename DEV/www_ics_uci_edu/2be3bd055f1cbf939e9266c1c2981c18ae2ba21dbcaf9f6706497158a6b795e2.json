{"url": "https://www.ics.uci.edu/~ejw/authoring/collection/dt/Minutes990119.txt", "content": "WebDAV Advanced Collections Conference Call - 1/19/99\n\nAttending: Judy Slein, Geoff Clemm, Tyson Chihaya, Jim Davis, Jim Whitehead, Chuck Fay\n \nACTION ITEMS\n\nGeoff: Send a message on the semantics of COPY for references to the WebDAV mailing list.\nJim W: Revise last week's minutes as Yaron requested.\nJudy: Add to the issues list all the ***** notes in the spec \nJudy: Spec changes\nJudy: Add to the issues list: How should COPY behave for references?\n\nLOGISTICS\n\nFrom now on, Judy will send updates to documents only to Jim W.  Jim in turn will post them \nto the design Web site and announce the updates to the team.\n\nFuture meetings will use the same phone number / PIN.  They have been scheduled through\nMarch.\n\nISSUE 3A: REF-INTEGRITY HEADER\n\nAre there real cases where the client will prefer to have a weak link? \nThe Fielding scenarios: create a collection populated with references before the content\nis available, or temporarily remove content but don't want to have to delete / recreate\nreferences.\nConfiguration Management systems typically support both weak and strong links.\n\nThe only defined value will be DAV:do-not-enforce.  If the header is not present, the\nserver follows the policy of its choice.  That may be to enforce referential integrity\nin some particular way or not to enforce it at all.\n\nValues need to be extensible.  \n\nGeoff wants clients to be able to submit other values that might specify a particular kind\nof strong reference, which servers will ignore if they do not understand them, but will\nat least result in some sort of strong reference.\n\nConclusion: We confirmed last week's decision to keep the Ref-Integrity header.  Its only\ndefined value will be DAV:do-not-enforce, and extensions will explicitly be allowed.\n\nISSUE 3B: DAV:REFINTEGRITY PROPERTY\n\nLast week we were unable to come up with a scenario where a client would want to examine\nthis property, since the only values we can provide are \"weak\" and \"other\".\n\nIf a reference is broken, a client might look at DAV:refintegrity as a first step in\ninvestigating.  It's a natural part of investigating what sort of object I'm looking at,\nlike ls -l in Unix.\n\nThere is no harm in defining such a property.  It's just displaying part of the state of\nthe resource.  In general, it should be possible to examine the state of a resource.\n\nThe number of properties is growing, and we should be careful not to define unnecessary\nproperties.\n\nWhat should its values be?\n\nWe decided early on not to tackle issues about strong references, but only to provide\nplace-holders for future treatment of strong references.\n\nWe don't want to choose values that will be difficult for servers to fit themselves into.\nNo matter what policies on enforcing referential integrity we choose as values, there will \nlikely be servers that don't quite follow any of them.\n\nweak / strong, where we leave the definition of \"strong\" deliberately vague, and tell\nclients not to assume any particular policy on how to enforce referential integrity based\non a value of \"strong\"\nweak / everything else\nweak / extensions\n\nThe values have to be extensible, so that servers can use other values by private agreement\nnow and so that we can add more values to the standard later.\n\nIn the worst case, client can ask server for its identification to figure out what policy\nit follows.\n\nConclusion:  Keep the DAV:refintegrity property, with \"weak\" as the only defined value and\nextensions allowed\n\nDANGLING REFERENCES\n\nThe current specification is ok, *except* for the following:\n\nAdd a discussion of behavior when No-Passthrough is used.  In that case, methods should\nsucceed.  The client will not be informed that the reference is broken.\n\nPROPFIND gets 404 (acts just like GET).\nPROPPATCH gets 404.\n\nBehavior of COPY for a broken reference will depend on what we decide for the general\nbehavior of COPY for references.\n\nCOPY SEMANTICS\n\nIt's not clear that COPY should be treated like MOVE / DELETE.  There needs to be a way\nto create a new reference at the destination, and also a way to copy the content to the\ndestination.  We may want to use MKREF to create the new reference, and COPY to copy the\ncontent of the target resource.\n\nJudy will add this to the issues list, and Geoff will send mail to WebDAV on this subject.\n\nDAV:REFTARGET PROPERTY\n\nRef-Target Property -- pressure to delete backpointers\npart of the state of the resource -- if no other problems caused by making it visible, \nmake visible \nfor versioning, it's needed\n(use access control if want to hide state)\n\n409 STATUS CODE\n\nIs it acceptable to use this code in response to MKREF when the conflict is not with the \nstate of the request-URI, but with the state of something else?\n\n412 (Precondition Failed) might be better, but this will cause problems with If headers.\n\nConclusion: Keep 409 unless Roy Fielding or someone else knowledgeable about HTTP status\ncodes complains.\n\nISSUE 7: HEADERS FOR MOVE / COPY\n\nIs it possible to use Ref-Target, Ref-Type, or Ref-Integrity with COPY / MOVE?\n\nNo to all of these.  There's no real gain from MOVE / COPY vs. DELETE / MKREF for\nreferences.  And they would really be causing a different reference to be created.\n\nNO-PASSTHROUGH HEADER\n\nCan we find a better (positive, rather than negative) name?\n\nThe current name seems intuitively clear -- people understand what it means.\nIt has no value, so we don't have to worry about double negatives when its value is false.\n\nConclusion: Keep the current name unless a better proposal is made.\n\nLOCKING\n\nWe could choose to ignore down-level clients for locking redirect resources.\nWe would like to be able to keep the semantics consistent between locking a redirect\nreference and locking a collection that contains some redirect references.\nWe would like a server *not* to have to go off to another server to lock a redirect\nreference.\nWe would like to be able to extend locking to other new types of resources in the\nfuture, using the same technique we choose here.\n\nChuck: Is there a similar problem for 302s unrelated to referencing, that should have been\ndealt with in WebDAV?\n\nWe could have a special header to get the behavior we want, for example, lock both the\nredirect reference and its target.  But that would force the server to go off-server in\nsome cases.\n\nWould it be acceptable to have the lock fail whenever a collection contains redirect\nreferences (because each redirect reference gets a 302)? No.\n\nProposal: Let LOCK on a collection lock just the redirect references.  Let LOCK on an\nindividual redirect reference work the same way.  So 302 never gets returned for either one.\nThere's no way for down-level client to lock the target of a redirect reference.\n\nChuck: This would produce surprising results.  A client would think that the\ntarget resources had been locked, but it would turn out that they had not.\nJim W: The (referencing) client would discover that there was a redirect reference when it\ntries to operate on that resource and gets a 302, and would then realize that the target\nhad not been locked.\n\nSurprising results are a bad thing, but it would be worse to have the whole LOCK fail\nbecause it couldn't get to the target. \n\nConclusion: LOCK on a redirect reference does lock the reference, and does not get a 302\nresponse.  This means that there is no way for a down-level client to lock the target of\na redirect reference.  LOCK on a collection that has redirect references locks the\nredirect references and does not cause 302s for them.  LOCK on a direct reference locks\nboth the reference and its target.  LOCK on a collection that has direct references locks\nboth the direct references and their targets.  (All these decisions are for the cases where\nNo-Passthrough is *not* being used.)\n\nREFERENCES AS SYNONYMS RATHER THAN RESOURCES\n\nJim W: Maybe we should reconsider the semantics for direct references.  WebDAV already\nassumes that multiple URLs may point to the same resource.  Think of direct references as\na way for a client to create alternative URLs for the same resource. Can we let direct\nreferences just be alternative URLs for the same resource?  Can we give up the idea that\nreferences have their own properties? Can we give up treating them as full-fledged resources?\n\nWe could do the same for redirect references, as well.\n\nObjection: If we have a chain of direct references, we may want to do something in the\nmiddle of the chain.  This is common in configuration management.  For this, we need \nthe reftarget property.\n\nThere is a requirement for properties on references.  The examples presented for that \nrequirement were who created the reference, when, etc.  Should we reconsider this\nrequirement?\n\nThe history of changes to collection membership can be treated as a property of the\ncollection.\n\nThe mapping of references to their targets could also just be in server someplace, \nnot a property on a referential resource.\n\nThere needs to be a way to discover and control linkages.  Clients need to be able to find\nout which things in a collection are references and which have their own content.\n\nKeeping references as independent resources is better than changing the nature and\nsemantics of collections, which would require changes to the WebDAV specification.\n\nConclusion: References are resources.\n", "encoding": "ascii"}