{"url": "https://www.ics.uci.edu/~eppstein/pubs/graph-color.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head>\n<title>David Eppstein - Publications</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body bgcolor=\"#ffffff\" text=\"#000000\">\n<h1>David Eppstein - Publications</h1>\n<hr><p>\n<h2>\nGraph coloring\n</h2>\n<ul>\n<li><b>3-Coloring in time O(1.3446<sup><i>n</i></sup>): a no-MIS algorithm</b>.<br>\n<a href=\"//www.cis.temple.edu/~beigel/\">R. Beigel</a>\nand D. Eppstein.<br>\n<a href=\"ftp://ftp.eccc.uni-trier.de/pub/eccc/reports/1995/TR95-033/index.html\">\nTech. Rep. 95-033</a>, Electronic Coll. Computational Complexity, 1995.<br>\n<i>36th IEEE Symp. Foundations of Comp. Sci.</i>, 1995, pp. 444&ndash;453.<br>\n<a href=\"//www.cis.temple.edu/~beigel/FESNP/\">DIMACS\nWorksh. Faster Exact Solutions for NP-Hard Problems</a>, 2000.\n<p>\nSpeeds up 3-coloring by solving a harder problem:\nconstraint satisfaction in which each variable can take on\none of three values and each constraint forbids a pair of\nvariable assignments.  The detailed solution involves\nseveral long hairy case analyses.\nSimilar methods apply also to 3-list-coloring,\n3-edge-coloring, and 3-SAT.  The 3-SAT algorithm is fixed-parameter tractible in that it is polynomial time when the number of 3-variable clauses is O(log n).\nMerged into\n<a href=\"p-3color2.html\">3-coloring in time O(1.3289^n)</a>\nfor the journal version.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#3-coloring in time $O(1.3446^n)$: a no-MIS algorithm\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/3-coloring-in-time-O(1.3446^n)-a-no-MIS-algorithm.html\">Citations</a> &ndash;\n<a href=\"//1013seopc.eecs.uic.edu/FESNP/abstracts.html#eppstein\">DIMACS\nabstract</a> and <a href=\"BeiEpp-DIMACS-00.pdf\">slides</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/beigel95coloring.html\">CiteSeer</a>)\n<p>\n<li><b>Algorithms for coloring quadtrees</b>.<br>\n<a href=\"//www.parc.xerox.com/csl/members/bern/\">M. Bern</a>,\nD. Eppstein, and\nB. Hutchings.<br>\n<a href=\"//arXiv.org/abs/cs.CG/9907030\">arXiv:cs.CG/9907030</a>.<br>\n<i>Algorithmica</i> 32 (1): 87&ndash;94, 2002.\n<p>\nWe consider several variations of the problem of\n<a href=\"graph-color.html\">coloring</a> the squares of a\n<a href=\"geom-qt.html\">quadtree</a> so that no two adjacent squares are\ncolored alike.\nWe give simple linear time algorithms for 3-coloring balanced quadtrees\nwith edge adjacency, 4-coloring unbalanced quadtrees with edge\nadjacency, and 6-coloring balanced or unbalanced quadtrees with corner\nadjacency.  The number of colors used by the first two algorithms is\noptimal; for the third algorithm, 5 colors may sometimes be\nneeded.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Algorithms for coloring quadtrees\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Algorithms-for-coloring-quadtrees.html\">Citations</a>)\n<p>\n<li><b>3-coloring in time O(1.3289^n)</b>.<br>\n<a href=\"//www.cis.temple.edu/~beigel/\">R. Beigel</a>\nand D. Eppstein.<br>\n<a href=\"//arXiv.org/abs/cs.DS/0006046\">arXiv:cs.DS/0006046</a>.<br>\n<a href=\"//doi.org/10.1016/j.jalgor.2004.06.008\"><i>J. Algorithms</i>\n54:2 (2005) 168-204.</a>\n<p>\nJournal paper combining <a href=\"graph-color.html\">3-coloring algorithms</a>\nfrom our\n<a href=\"p-3color.html\">FOCS '95 paper</a> with improved bounds from our\n<a href=\"p-3color3.html\">SODA '01 paper</a>.\n<p>\n(<a href=\"/~eppstein/bibs/eppstein.html#3-coloring in time $O(1.3289^n)$\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/3-coloring-in-time-O(1.3289^n).html\">Citations</a>)\n<p>\n<li><b>Improved algorithms for 3-coloring, 3-edge-coloring, and constraint\nsatisfaction</b>.<br>\nD. Eppstein.<br>\n<a href=\"//arXiv.org/abs/cs.DS/0009006\">arXiv:cs.DS/0009006</a>.<br>\n<a href=\"//portal.acm.org/citation.cfm?id=365471\"><i>12th ACM-SIAM Symp. Discrete Algorithms,</i>\nWashington, 2001, pp. 329&ndash;337</a>.\n<p>\nSummarizes recent improvements to\n\"<a href=\"p-3color.html\">3-Coloring in time\nO(1.3446<sup><i>n</i></sup>): a no-MIS algorithm</a>\".\nMerged with that paper for the\n<a href=\"p-3color2.html\">journal version</a>.\n<p>\n(<a href=\"Epp-SODA-01-slides.pdf\">SODA talk slides</a> &ndash;\n<a href=\"/~eppstein/bibs/eppstein.html#Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfaction\">BibTeX</a> &ndash;\n<a href=\"Epp-SODA-01.pdf\">SODA paper</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein01improved.html\">CiteSeer</a>)\n<p>\n<li><b>Small maximal independent sets and faster exact graph coloring</b>.<br>\nD. Eppstein.<br>\n<a href=\"//arXiv.org/abs/cs.DS/0011009\">arXiv:cs.DS/0011009</a>.<br>\n<a href=\"Epp-WADS-01.pdf\"><i>7th Worksh. Algorithms and Data\nStructures,</i> Providence, Rhode\nIsland, 2001</a>.<br>\nSpringer, <i>Lecture Notes in\nComp. Sci.</i> 2125, 2001, pp. 462&ndash;470.<br>\n<a href=\"//doi.org/10.7155/jgaa.00064\"><i>J. Graph\nAlgorithms and Applications</i>\n(special issue for WADS'01) 7 (2): 131&ndash;140, 2003</a>.\n<p>\nWe show that any graph can be\n<a href=\"graph-color.html\">colored</a> in time O(2.415<sup>n</sup>),\nby a dynamic programming procedure in which we extend partial colorings\non subsets of the vertices by adding one more color for\na maximal independent set.  The time bound follows from limiting\nour attention to maximal independent subsets that are small relative to\nthe previously colored subset, and from bounding the number of small\nmaximal independent subsets that can occur in any graph.\n<p>\n(<a href=\"/~eppstein/bibs/eppstein.html#Small maximal independent sets and faster exact graph coloring\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Small-maximal-independent-sets-and-faster-exact-graph-coloring.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein01small.html\">CiteSeer</a> &ndash;\n<a href=\"Epp-WADS-01-slides.pdf\">WADS talk slides</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=673363\">ACM DL</a>)\n<p>\n<li><b>Confluent layered drawings</b>.<br>\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>,\nand\nJ. Meng.<br>\n12th Int. Symp. Graph Drawing, New York, 2004.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 3383, 2004, pp. 184&ndash;194.<br>\n<a href=\"//arxiv.org/abs/cs.CG/0507051\">arXiv:cs.CG/0507051</a>.<br>\n<a href=\"//doi.org/10.1007/s00453-006-0159-8\"><i>Algorithmica</i> 47 (4): 439&ndash;452 (special issue for Graph Drawing), 2007</a>.\n<p>\nDescribes a <a href=\"gdraw.html\">graph drawing</a> technique\ncombining ideas of\n<a href=\"p-confluent.html\">confluent drawing</a>\nwith Sugiyama-style layered drawing.\nUses a reduction to <a href=\"graph-color.html\">graph coloring</a>\nto find and visualize sets of bicliques in each layer.\n<p>\n(<a href=\"//www.ics.uci.edu/~eppstein/bibs/eppstein.html#Confluent layered drawings\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Confluent-layered-drawings.html\">Citations</a> &ndash;\n<a href=\"//gdea.informatik.uni-koeln.de/archive/00000586/\">GDEA</a>)\n<p>\n<li><b>Choosing colors for geometric graphs via color space embeddings.</b><br>\n<a href=\"/~dillenco/\">M. Dillencourt</a>,\nD. Eppstein, and\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>.<br>\n<a href=\"//arxiv.org/abs/cs.CG/0609033\">arXiv:cs.CG/0609033</a>.<br>\n14th Int. Symp. Graph Drawing, Karlsruhe, Germany, 2006.<br>\n<a href=\"//doi.org/10.1007/978-3-540-70904-6_29\">Springer, <i>Lecture Notes in\nComp. Sci.</i> 4372, 2007, pp. 294&ndash;305</a>.\n<p>\nWe show how to choose colors for the vertices of a graph drawing in such\na way that all colors are easily distinguishable, but such that adjacent\nvertices have especially dissimilar colors, by considering the problem\nas one of embedding the graph into a three-dimensional color space.\n<p>\n(<a href=\"DilEppGoo-GD-06-talk.pdf\">GD'06 talk slides</a>)\n<p>\n<li><b>Minimum forcing sets for Miura folding patterns</b>.<br>\n<a href=\"//www.humboldt.edu/math/node/34\">B. Ballinger</a>,\n<a href=\"//www.csc.villanova.edu/~mdamian/\">M. Damian</a>,\nD. Eppstein,\n<a href=\"//www.cs.siena.edu/~flatland/\">R. Flatland</a>,\nJ. Ginepro, and\n<a href=\"//mars.wne.edu/~thull/\">T. Hull</a>.<br>\n<a href=\"//arxiv.org/abs/1410.2231\">arXiv:1410.2231</a>.<br>\n<a href=\"//doi.org/10.1137/1.9781611973730.11\"><i>26th ACM-SIAM Symp. on Discrete Algorithms</i>, San Diego, 2015, pp. 136&ndash;147</a>.\n<p>\nA forcing set for an origami crease pattern is a subset of the folds\nwith the property that, if these folds are folded the correct way\n(mountain vs valley) the rest of the pattern also has to be folded the\ncorrect way. We use a combinatorial equivalence with three-colored grids\nto construct minimum-cardinality forcing sets for the Miura-ori folding\npattern and for other patterns with differing folds along the same line\nsegments.\n<p>\n(<a href=\"BalDamEpp-SODA-15-slides.pdf\">Slides</a>)\n<p>\n</ul>\n\n<hr><p>\n<a href=\"graph.html\">Graph Theory</a> &ndash;\n<a href=\"/~eppstein/pubs/\">Publications</a> &ndash;\n<a href=\"/~eppstein/\">David Eppstein</a> &ndash;\n<a href=\"/~theory/\">Theory Group</a> &ndash;\n<a href=\"/\">Inf. &amp; Comp. Sci.</a> &ndash;\n<a href=\"//www.uci.edu/\">UC Irvine</a>\n<p>\n<small>Semi-automatically <a href=\"filter.html\">filtered</a>\nfrom a common source file.</small>\n</body></html>\n", "encoding": "ascii"}