{"url": "https://www.ics.uci.edu/~kay/courses/31/string-formatting.html", "content": "\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, January 5, 2006 2:39 PM\">\n<TITLE>String Formatting</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D250620B\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"java programming, data structures\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Web references for computer science topics, especially Java programming and data structures.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2006 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/31/mainstyle.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P>\nICS 31 &bull; David G. Kay &bull; UC Irvine</FONT></P>\n<P><B><font size=6>String Formatting</font></B></P>\n<P>&nbsp;</P>\nAre you tired of printing dollars-and-cents \namounts in Python that look like <code>$ 12.0</code> ?\nDo you want to have precise control over what \nthe text results of your programs look like?\nYou're ready to learn <strong>string formatting.</strong>\n<p>\nPython, like most programming languages, provides\na rich set of features for specifying the format of\ntext.  They make it possible to format things into\nnicely aligned tables, or smoothly flowing sentences,\nor even rudimentary text-based graphics.\nFormatting specifications aren't conceptually difficult;\nthey're not like mutable vs. immutable or navigating\nthrough lists of namedtuples containing other lists.\nBut they are intricate: They control the character-by-character\narrangement on the page or screen.  \nSince even one extra space can mess up your results,\nstring formatting requires us to pay close, meticulous attention.\n</p>\n<p>&nbsp;</p>\n<h2>Printing constants and expressions</h2>\n<p>\nSuppose we define the Dish namedtuple and some\nDish objects as follows:\n<pre><code>from collections import namedtuple\nDish = namedtuple('Dish', 'name price calories')\nd1 = Dish(\"Paht Woon Sen\", 12.50, 340)\nd2 = Dish(\"Mee Krob\", 9.00, 355)\nd3 = Dish(\"Escargots\", 24.50, 95)\nDL = [d1, d2, d3]</code></pre>\n<p>\nNow suppose we want to display a Dish in this form:\n<pre><code>Paht Woon Sen ($12.50): 340 cal.</code></pre>\nThis text, and any text we plan to print,\nconsists of constant parts (that are the same\nevery time we print the results) and\nvariable parts (that may change every time,\ndepending on the data).\n</p>\n<p>\nHere are the variable parts of this string (underlined):\n<pre><code> Paht Woon Sen ($12.50): 340 cal.\n -------------   -----   ---\n <u><em>VARIABLE</em></u>        <u><em>VAR</em></u>     <u><em>VAR</em></u></code></pre>\nThe variable parts are the data values:\n<code>'Paht Woon Sen'</code>, <code>12.50</code>, \nand <code>340</code>.\n</p>\n<p>\nHere are the constant parts of the same string (underlined below):\n<pre><code> Paht Woon Sen ($12.50): 340 cal.\n              ---     ---   -----\n            <u><em>CONST.</em></u>    <u><em>CON.</em></u>  <u><em>CONSTANT</em></u><em></em></code></pre>\nThe constant parts are the three strings\n<code>' ($'</code> (space-parenthesis-dollar sign),\n<code>'): '</code> (parenthesis-colon-space), and\n<code>' cal.'</code> (space-c-a-l-period).\n</p><p>\nNext we list the <em>names</em> of the variable/data parts.\nThese might be Python variable names, or more complicated Python expressions.  In this case, the names are\n<code>d1.name</code>, <code>d1.price</code>, \nand <code>d1.calories</code>.\n</p><p>\nNext we decide whether we need any precise formatting (a specific number of digits or other precise spacing).  \nWe will want these eventually, but for now, let's say no so we can cover some other issues first.\n</p>\n<p>\nCopy the code below,\npaste it into a Python file, and run it in IDLE:\n<pre><code>from collections import namedtuple\nDish = namedtuple('Dish', 'name price calories')\nd1 = Dish(\"Paht Woon Sen\", 12.50, 340)\nd2 = Dish(\"Mee Krob\", 9.00, 355)\nd3 = Dish(\"Escargots\", 24.50, 95)\nDL = [d1, d2, d3]</code></p></pre>\n<p>\nAs we discuss each of the lines of code below,\ncopy the line into IDLE and run it.\n</p>\n<p>&nbsp;</p>\n<h2>Controlling spacing between items (arguments to print(), concatenation, sep=, end=)</h2>\n<p>\n  First we print the variable and constant parts as usual:\n<pre><code>print(d1.name, \" ($\", d1.price, \"): \", d1.calories, \" cal.\")</code></pre>\nThis gives us our results, but without fancy formatting.\nThe <code>print()</code> function automatically prints one space\nto separate each of its arguments; that gives us the\nextra spaces we see when we run the code above.\n</p>\n<p>\nNext we try to eliminate the extra spaces using concatenation (+).\n[This will give us an error when we try to concatenate a\nnumber into a string.  Once you run this code and see the message, comment\nout this line or remove it so the subsequent examples run.]\n<pre><code>print(d1.name + \" ($\" + d1.price + \"): \" + d1.calories + \" cal.\")</code></pre>\n<p>With concatenation and calls to <code>str()</code>, we can control\n  the horizontal spacing precisely:\n<pre><code>print(d1.name + \" ($\" + str(d1.price) + \"): \" + str(d1.calories) + \" cal.\")</code></pre>\n<p>\nThe <code>print()</code> function automatically prints one space\nto separate each of its arguments; we can change that\nusing the <code>sep=</code> keyword parameter.  First we separate\nthe items with the empty string instead of a space:\n<pre><code>print(d1.name, \" ($\", d1.price, \"): \", d1.calories, \" cal.\", sep=\"\")</code></pre>\nThis gets the horizontal spacing right.\n</p>\n<p>\nAs another illustration, we can separate the items with\nany other separator string we care to specify:\n<pre><code>print(d1.name, \" ($\", d1.price, \"): \", d1.calories, \" cal.\", sep=\"---\")</code></pre>\n<p>\nBy default (i.e., without our having to give specific instructions), <code>print()</code> prints a newline at the end of each invocation (at the end of each call to <code>print()</code>).  That's what\ngives us the blank lines each time we call <code>print()</code> with no arguments.\nIn the code below, we see that each call to <code>print()</code> prints its arguments followed by a newline:\n<pre><code>print('Huey', 'Dewey', 'Louie')\nprint('Donald')\nprint('Scrooge')\nprint()\nprint('Daisy')\nprint(\"\\n\")\nprint('Daffy')</code></pre><p>\nNotice especially the two blank lines between Daisy and Daffy:  \nOne is for the explicit <code>\"\\n\"</code> and the second is what <code>print()</code> automatically provides.\n</p>\n<p>\nWe can specify different behavior at the end of each\ncall to <code>print()</code> by using the <code>end=</code> \nkeyword parameter.\nIt says what to print (instead of the usual newline) after the call to <code>print()</code> has printed it arguments.\nSaying <code>end=\" \"</code>, for example, says, \"Keep whatever\nis printed next on the same line as what we just printed.\"\n<pre><code>print(\"--------------------------\")\nprint('Huey', 'Dewey', 'Louie', end=\" \")\nprint('Donald', end=\" \")\nprint('Scrooge')\nprint()</code></p></pre>\n<p>\nAs with <code>sep=</code>, the value of the <code>end=</code> \nparameter can be any string:\n<pre><code>print('Donald', end=\"Zot! Zot! Zot!\")\nprint('---> This follows the end= string in the previous line <---')\nprint(\"\\n\")\nprint('Huey', 'Dewey', 'Louie', sep=\" ** \", end=\"End of the line.\\n\")\nprint(\"Hey, Uncle Donald!\")</code>\n</pre>\n<h2>F-strings (not in the textbook)</h2>\n<p>Starting with Python 3.6, we have an alternative way to combine constants and variables. It's called &quot;f-strings&quot; and it's not available in versions of Python before 3.6. So far, when using <code>print()</code>, we've built up our output part by part, separated by commas. We've also created one big part by concatenating subparts with the\n  <code>+</code> operator. With an f-string, we can lay out the constant part of the text we want to print, inserting the variable/expression parts where needed in the string, designated by surrounding the expression with curly braces.\n<p>If <code>d</code> is a Dish created with <code>Dish('Chicken Pot Pie', 23.95, 2200)</code>, we can print it in a form like this:\n<p><code>The dish Chicken Pot Pie has 2200 calories and costs $23.95.</code>\n<p>using an f-string as follows:\n<p><code>print(f'The dish {d.name} has {d.calories} calories and costs ${d.price}.'</code>\n<p>We can print out the Dish <code>d</code> in the briefer format shown earlier, using a different f-string as follows:\n<p><code>print(f'{d1.name} (${d1.price}): {d1.calories} cal.')</code>\n\n<p>Note the <code>f</code> right before the first apostrophe; that's where f-strings get their name, of course.  More importantly, note that the three expressions to be printed are enclosed in curly braces and everything else in the f-string is the surrounding constant text information. Each expression (in curly braces) is evaluated and its printable value is inserted in place of the brace-enclosed expresson; the result is the value of the f-string (which we're talking about printing, but could just as well be assigned to a variable or passed to a function).<p>[Details: f-strings can use <code>F</code> or <code>f</code>. They can use apostrophes, double-quotes, triple-apostrophes, or triple double-quotes.  To include a curly-brace character in an f-string, you don't escape it with a backslash; you enter two curly braces in a row: The value of <br /><code>f'There are {2+2+2} {{curly braces}} in this f-string but just 2 in its value'</code><br /> is <br /><code>'There are 6 {curly braces} in this f-string but just 2 in its value.'</code>\n<p>An f-string is a string; it can be used anywhere any other string can be used, e.g., in string functions and methods.]</p>\n<p>&nbsp;</p>\n<h2>Format specifications</h2>\n<p>We can do a lot with the techniques we already know,\n  but one more technique, format specifications, is useful in  these two situations:\n<ul>\n<li>Specify a particular number of digits to the right of a decimal point (in the example below, two digits, for dollars-and-cents amounts):\n  <pre><code>     Paht Woon Sen ($12.50): 340 cal.</code></pre>\n</li>\n<li>Place values into fixed-sized \"fields\" to line the values up:\n  <pre><code>     Paht Woon Sen  12.50 340\n     Mee Krob        9.00 355\n     Escargots      24.50  95</code>\n</pre>\n</li>\n</ul>\n<p>A format specification is a few extra characters placed inside the curly braces in an f-string (or in a call to the str.format() method, which we will cover later). The syntax for each format specification has this form:</p>\n<p><code>{ </code><u><var><font size=2>EXPRESSION</font></var></u><code> <strong>:</strong> </code><u><var><font size=2>FORMAT-CODE</font></var></u><code> }</code></p>\n<p>\nTo the left of the colon is the expression, as before,  to print in that space. What can we put to the right of the colon?\n  That's where we put the <strong>field width specifications</strong>, the instructions to Python\n  for how many characters in the formatted string to devote to each data item.\n  The syntax of a field width specification (what can go to the right of the colon\n  in a format specification) depends on the type of data being formatted.\n  Here are the three main types, for strings, ints, and floats respectively:\n<p><var><u><font size=2>FIELD-WIDTH</font></u></var><code><strong>s</strong></code>\n<br /><var><u><font size=2>FIELD-WIDTH</font></u></var><code><strong>d</strong></code>\n<br />\n<var><u><font size=2>FIELD-WIDTH</font></u></var><code><strong>.</strong></code><var><u><font size=2>NUMBER-OF-DECIMAL-PLACES</font></u></var><code><strong>f</strong></code></p>\n<p>\nFor example, if <code>x</code> is a variable holding a number, a format specification of <code>{x:5.2f]</code> says:\n<ul>\n<li>Reserve a 5-character field in the result string.\n</li>\n<li>In that field, place a float number (the valueof <code>x</code>) with two digits to the right of the decimal point.\n</li>\n</ul>\n<p>\nTry running this example:\n<pre><code>print(f'{d1.name} (${d1.price:5.2f}): {d1.calories} cal.')</code></pre><p>Notice that the 5-character field counts one character for the decimal point itself.  \n</p>\n<p>\nWhat happens if we use a larger field width than our data requires?\n<pre><code>print(f'{d1.name} (${d1.price:7.2f}): {d1.calories} cal.')</code>\n</pre>\n<p>\n  We use 5 of the 7 characters for the number, with the two extra spaces after the dollar sign and before the first digit of the number.  \n</p>\n<p>\nWhat if we specify a narrower field than we need?\n<pre><code>print(f'{d1.name} (${d1.price:3.2f}): {d1.calories} cal.')</code></pre><p>Python has three choices in this situation:  It could give us an error message;\nit could chop off the value somehow to make it fit in the specified-width field;\nor it could take as many digits as it needs, even if that exceeds the specified\nfield width.  Python takes the latter choice, with the reasoning that it's better\nto see the actual value with messed-up formatting than to see only part of the\nvalue or not to see it at all.\n</p><p>\nSo in Python, if the field width is too small, Python still takes the number of \ncharacters it needs.\n</p>\n<p>\nIn fact, if we always want to take up exactly the space we need for the value,\nwith no extra spaces, we use a field width of zero:\n<pre><code>print(f'{d1.name} (${d1.price:0.2f}): {d1.calories} cal.')\nprint(f'{d1.name} (${3.50:0.2f}): {d1.calories} cal.')\nprint(f'{d1.name} (${53453453:0.2f}): {d1.calories} cal.')</code></pre>\n<p>\nAnother use of field width specifications is to line things up in columns like this:\n<pre><code>     Paht Woon Sen  12.50 340\n     Mee Krob        9.00 355\n     Escargots      24.50  95</code></pre>\n<p>To do this, we choose a field width that's large\nenough to accommodate the largest value we expect in a given column:\n<pre><code>print(f'{d1.name:20s} (${d1.price:6.2f}): {d1.calories:4d} cal.')</code></pre><p>This says to place the dish name in a 20-character field,\nthe price in a six-character field (with two digits to the right of the\ndecimal point), and the number of calories in a 4-character field.\n(By default, strings are aligned with the left edge of their field\nand numbers are aligned with their rightmost digit; this reflects the\ntypical practice in typesetting data in tables.)\n\u0005</p>\n<p>\nWe can put this in a loop through our list of dishes:\n<pre><code>for d in DL:\n    print(f'{d.name:20s} (${d.price:6.2f}): {d.calories:4d} cal.')</code></pre>\n<p>\nFinally, we can write a function that \nprints our dish information in tabular format with titles:\n<pre><code>def print_dishlist_info(DL: [Dish]) -> None:  # Just prints\n    \"\"\" Print a table with a row for each dish \"\"\"\n    print(\"Name                 Price Calories\")\n    print(\"----                 ----- --------\")\n    for d in DL:\n        print(f'{d.name:20s} (${d.price:6.2f}): {d.calories:4d} cal.')\n    return\nprint()\nprint_dishlist_info(DL)</code></pre><p>&nbsp;</p>\n<h2>The format() method</h2>\n<p>The most powerful tool for formatting text is the <code>format()</code> method. \n  We won't use it to do any more than we can do with f-strings and format specifications, but we cover it here because it's in the textbook, it's available before Python 3.6, and it could show up on exams or other course materials.</p>\n<p> Here is the syntax of the <code>format()</code> method on strings: </p>\n<p> &nbsp;&nbsp;&nbsp;&nbsp;<u><var><font size=2>FORMAT-STRING</font></var></u><code><strong>.</strong>format(</code><u><var><font size=2>SERIES-OF-EXPRESSIONS-TO-PRINT</font></var></u><code>)</code> </p>\n<p> Here is one form of the Dish-printing example above:</p>\n<p><code>print('{:20s} (${:6.2f}): {:4d} cal.'.format(d1.name, d1.price, d1.calories))</code></p>\n<p>We wrote above about the constant parts and the variable parts of what we\n  want to print.  With the <code>format()</code> method, the constant parts go in the format string; the variable parts are the arguments to the method (i.e., they go in the series of expressions). </p>\n<p> Here are the semantics:  The <code>format()</code> method returns a string,\n  which we usually print out (but we could use the string returned by <code>format()</code> in any other context where a string makes sense, e.g., by assigning it to a variable).\n  The string is formatted according to the instructions\n  in the format-string, following this pattern:</p>\n<p> <code>print( </code><u><var><font size=2>FORMAT-STRING</font></var></u><code> <strong>.</strong> format(d1.name, d1.price, d1.calories)</code></p>\n<p> The format string looks like the desired output.\n  It contains constant parts and variable parts; \n  in the format string each variable part is a placeholder\n  or \"format specification\" (shown below as a dashed line) for the eventual data value\n  that will appear in that place.\n<pre><code>\"-------- ($--------): -------- cal.\"\n <em><u>FMT-SPEC</u></em>   <u><em>FMT-SPEC</em></u>   <u><em>FMT-SPEC</em></u></code></pre>\n<p> Each placeholder (dashed line) is a place where we put a <strong>format specification</strong>, which can tell Python which of\n  the variable parts to print and how to print it.\n  Actual format specifications in Python don't use dashed lines.\n  Instead they use curly braces: <code>{ }</code> </p>\n<p> We can combine what we've learned so far into this working\n  Python code, which of course you should run:\n<pre><code>print(\"{} (${}): {} cal.\".format(d1.name, d1.price, d1.calories))</code></pre>\n<p> This code says to print the value of <code>d1.name</code> where\n  the first set of braces appears (at the start of the format string),\n  then to print space-parenthesis-dollar-sign, then to print the value\n  of <code>d1.price</code> where the second set of braces appears,\n  then to print a few more characters, then the value of <code>d1.calories</code> where the third set of braces appears, and then the last few characters in\n  the format string. \n  There are three arguments to <code>format()</code>; they correspond with\n  the three format specifications (<code>{ }</code>) in the format string. </p>\n<p> To control the formatting further, we can say things inside the curly braces.  \n  The syntax for each format specification has this form:\n<p><code>{ </code><u><var><font size=2>ARGUMENT-SELECTOR</font></var></u><code> <strong>:</strong></code><u><var><font size=2>FORMAT-CODE</font></var></u><code> }</code></p>\n<p> To the left of the colon is a value that indicates\n  which of the arguments to <code>format()</code> to print in that space.\n  Usually we just take them in order, but Python allows us to specify them\n  in a different order:\n<pre><code>print(\"{2:} (${1:}): {0:} cal.\".format(d1.calories, d1.price, d1.name)</code></pre>\n<p> It's not that common to want to reorder the appearance of the arguments\n  in the format string;\n  normally we'll leave the left side of the colon empty.\n  (But if we didn't at least mention what could go there,\n  format strings would seem even stranger than they do already.)\n  The code below shows nothing on either side of the colon\n  in the format specifications.  It behaves just the same\n  as if we'd used <code>{ }</code> without the colons.\n<pre><code>print(\"{:} (${:}): {:} cal.\".format(d1.name, d1.price, d1.calories))</code></pre>\n<p> If we rarely put anything to the left of the colon in a format specification,\n  what can we put to the right of the colon?\n  That's where we put the <strong>field width specifications</strong>, These have the same syntax and semantics with the format() method as they do with f-strings.<code></code></p>\n<p>Here's a version of the table-printing code using format():\n<pre><code>print(\"{:20s}{:6.2f}{:4d}\".format(d1.name, d1.price, d1.calories))</code>\n</pre>\n<p>There are many more features to the <code>format()</code> method than we have covered here.  String formatting is almost a sub-language of its own within Python.\n  You are welcome to explore at python.org or in other reference materials.\n  But for the problems or exams in this class, you will not need anything beyond \n  what's on this page.\n</p>\n<HR>\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,</FONT><a href=mailto:kay@uci.edu> kay@uci.edu</A>\n</address>\n<p>Copyright 2014 by David G. Kay.  Permission granted for individual nonprofit use in the study \nof Python programming.  All other rights reserved.</p>\n</BODY>\n</HTML>\n", "encoding": "ascii"}