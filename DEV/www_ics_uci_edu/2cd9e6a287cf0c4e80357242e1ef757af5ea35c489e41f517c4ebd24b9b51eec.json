{"url": "https://www.ics.uci.edu/~kay/courses/i41/Vectors_of_Vectors_files/_color-list-_image-vecto.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Monday, December 6, 2004 6:57 AM\">\n<TITLE>;; color-list-&gt;image-vector: (listof color) number number -&gt; vector-of-lines</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERXDATA\" CONTENT=\"D06B02B3\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"Scheme, two-dimensional arrays, images\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Narrative example of creating two-dimensional arrays (vectors of vectors) in Scheme, using a rectangular array of pixels as the problem domain.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2004 by David G. Kay.  All rights reserved.\">\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<A NAME=\"_top\"></A>\n<A NAME=\"list-image conversions\"></A>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; color-list-&gt;image-vector: (listof\ncolor) number number -&gt; vector-of-lines</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; Return a vector of vectors with the numbers\nof rows and columns specified,</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; containing the colors in the input list.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define color-list-&gt;image-vector</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (L rows cols)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (local ((define image\n   ; First, set up the structure of the vector</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (build-vector </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; rows </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; (lambda (r) (build-vector cols (lambda (c) 'anything-for-now)))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160; (define cl-&gt;iv-aux</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (lambda (L last-row last-col curr-row curr-col)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; (cond        ; Use the list to guide the process</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160; ((empty? L) image)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160; (else (begin</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (image-set!\nimage curr-row curr-col (first L))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (if (= curr-col\nlast-col)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n(cl-&gt;iv-aux (rest L) last-row last-col</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (add1 curr-row) 0)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n(cl-&gt;iv-aux (rest L) last-row last-col</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; curr-row (add1 curr-col)))))))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; (cl-&gt;iv-aux\nL (sub1 rows) (sub1 cols) 0 0))))</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; image-vector-&gt;color-list: vector-of-lines\n-&gt; (listof color)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; Return a list containing all the elements\nin the image vector</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; (in row-major order, i.e., everything\nin the first row, then</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; everything in the second, and so on).\n The approach we take here</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; is to work backwards, from the lower\nright corner, so we can just</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; cons each successive item onto the list\nwe have so far.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define image-vector-&gt;color-list</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (image)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (local ((define last-row\n(sub1 (vector-length image)))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160; (define last-col (sub1 (vector-length (vector-ref image 0))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160; (define iv-&gt;cl-aux</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (lambda (image curr-row curr-col list-so-far)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; (local ((define list-with-next-pixel </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (cons (image-ref\nimage curr-row curr-col)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; list-so-far)))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160; (cond</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160; ((and (= curr-row 0) (= curr-col\n0)) &#160; ; We&#39;ve added last pixel</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; list-with-next-pixel) &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; ; so return final list.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160; ((= curr-col 0) &#160;  &#160; \n&#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; ;\nWe reached start of</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (iv-&gt;cl-aux image &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; ; a row,\nso go up one</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; (sub1 curr-row) last-col row &#160;  &#160; ; row\nthe next</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; list-with-next-pixel)) &#160;  &#160;  &#160;  &#160;\n &#160; ; time around.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160; (else &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; ; We stay on this row,</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (iv-&gt;cl-aux image &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; ; moving\none pixel to</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; curr-row (sub1 curr-col) &#160;  &#160;  &#160;\n &#160; ; the left next</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; list-with-next-pixel))))))) &#160;  &#160; ; time\naround.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; (iv-&gt;cl-aux\nimage last-row last-col empty))))</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; show: image-vector -&gt; side effect\n(display)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; Display the image in the vector using\ntools from image.ss teachpack.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; color-list-&gt;image takes its arguments\nin (columns, rows) order </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; (i.e., x, then y), which is opposite\nfrom our (rows, columns) order.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define show</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (image)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (color-list-&gt;image\n(image-vector-&gt;color-list image)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (vector-length (vector-ref\nimage 0))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (vector-length image)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; 0 0)))</FONT></P>\n<BR CLEAR=ALL>\n<P>\n</P>\n<HR>\n<P>\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,\n</FONT><FONT FACE=\"Goudy Old Style\">406B Computer Science\n<BR>\n</FONT><FONT FACE=\"Palatino\"><A HREF=\"http://www.uci.edu/\">University of California, Irvine</A>\n<BR>\n</FONT><FONT FACE=\"Goudy Old Style\">Irvine, CA  92697-3425</FONT><FONT FACE=\"Palatino\">\n --  </FONT><FONT FACE=\"Goudy Old Style\">(949) 824-5072</FONT><FONT FACE=\"Palatino\">\n --  Fax </FONT><FONT FACE=\"Goudy Old Style\">(949) 824-4056</FONT><FONT FACE=\"Palatino\">\n --  Email  <a href=mailto:kay@uci.edu>\n</FONT><FONT FACE=\"Courier\"><TT><A HREF=\"mailto:kay@uci.edu\">kay@uci.edu</A></a>\n<BR>\n</address>\n</TT></FONT></P>\n<P>\n<FONT FACE=\"Palatino\" SIZE=1>Monday, December 6, 2004 -- 6:57 AM</FONT></P>\n</BODY>\n</HTML>\n", "encoding": "ascii"}