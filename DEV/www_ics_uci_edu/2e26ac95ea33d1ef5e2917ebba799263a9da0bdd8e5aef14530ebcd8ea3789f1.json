{"url": "https://www.ics.uci.edu/~thornton/ics65/ProjectGuide/Project2/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 65 Fall 2012, Project #2: Maps and Legends</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 65 Fall 2012 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../ProjectGuide\">Project Guide</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 65 Fall 2012<br />\n   Project #2: <i>Maps and Legends</i></p>\n   \n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Wednesday, November 7, 11:59pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>In the last couple of decades, two forces have combined to fundamentally change how software is built:</p>\n\n<ul>\n  <li>The rise of an \"always-on\" Internet, local networks within organizations, and a growing variety of Internet-capable devices allows us to make assumptions about near-ubiquitous connectivity.</li>\n  <li>The cost of acquiring and connecting many small servers has dropped precipitously.  Thanks especially to cloud providers, it's no longer even necessary to purchase the servers; it's now possible to dynamically (and automatically) rent servers by the hour in data centers around the world.</li>\n</ul>\n\n<p>What were once single, large-scale software systems running on beefy individual servers are now collections of cooperating services communicating with one another over networks.  The paradigm of providing <i>software as a service</i> (i.e., providing the ability to access software running on the provider's servers &mdash; or even on servers rented by the provider from a third party &mdash; rather than providing software to be installed on the user's infrastructure) is becoming increasingly popular and profitable.</p>\n\n<p>So it's become quite useful to break complex problems into small services.  In this project, we'll consider one such service: an <i>authentication service</i> that manages usernames and passwords.  It will not be battle-ready &mdash; it'll store its information only in memory with no redundancy, and will completely ignore security, for example &mdash; but it will serve as a vehicle for us to continue our recent exploration into writing <i>well-behaved</i> C++ classes and begin to consider the design of somewhat larger C++ programs, which will seed our work on future projects.</p>\n\n<p class=\"subtitle\">Well-behaved classes</p>\n\n<p>We discussed in lecture what I call <i>well-behaved</i> C++ classes.  A well-behaved C++ class is one that \"just works\" when you use it the way you use any other type in the language.  Well-behaved C++ classes have objects that clean up after themselves when they die, that can be copied in a way that makes the copy unique and separate from the original, that can be made constant while preserving the ability to perform whatever operations do not change the publicly observable state of the object, and so on.</p>\n\n<p>Every C++ class you write, starting with this project, will have to be a well-behaved class.  What we'll discover as we go forward is that the design choices we make can make this a much simpler goal to achieve than you might think.  But first we need to understand where the issues and pitfalls lie, and what tools C++ provides us to solve the problem.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The program</p>\n\n<p>You will be writing an <i>authentication service</i>, whose role is to keep track of username/password combinations, verify that a particular username/password combination is valid, and be able to report on the number of unique username/password combinations that are currently known.  As in the previous project, it will read all of its input from the standard input (<b>cin</b>) and will write all of its output to the standard output (<b>cout</b>), though you could certainly imagine it doing its work across a network connection instead.  (If text-based communication like this seems primitive, you might be surprised to find out that many well-known Internet protocols actually send text-based commands and responses that are little different than what we're doing here.)</p>\n\n<p>Your program should read one line of input at a time, parse it, and execute one <i>command</i>.  Any command that is unrecognized &mdash; because, for example, it's an unrecognized command or it has too few parameters &mdash; is should be recognized as <i>invalid</i>.  Valid commands, on the other hand, should be executed and will have some kind of observable effect.</p>\n\n<p>The program continues reading, parsing, and processing one command at a time until a special \"quit\" command appears on the input, in which case the program ends.</p>\n\n<p>The program stores a collection of username/password combinations in a hash table stored in memory.  Initially, there are no username/password combinations stored; there are commands to create and remove them.</p>\n\n<p>Before the program ends, any objects it has allocated dynamically must be deallocated.</p>\n\n<p class=\"subtitle\">The commands</p>\n\n<p>The following commands must be supported.  Every command appears on a line by itself, and the output of every command should appear on a line by itself.</p>\n\n<table class=\"normal\">\n  <tr class=\"top\">\n    <td>Command Format</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td><b>CREATE&nbsp;<i>username</i>&nbsp;<i>password</i></b></td>\n    <td>Create a new username/password combination and stores it in the program's collection.  If successful, the output is <b>CREATED</b>.  If the username is already stored in the collection, no change is made and the output is <b>EXISTS</b>.</td>\n  </tr>\n  <tr>\n    <td><b>LOGIN&nbsp;<i>username</i>&nbsp;<i>password</i></b></td>\n    <td>Checks a username/password combination to see if it is valid.  A username/password combination is valid if it exists (i.e., the username is in the collection <i>and</i> is associated with the password), in which case the output is <b>SUCCEEDED</b>.  If the username/password combination does not exist, the output is <b>FAILED</b>.</td>\n  </tr>\n  <tr>\n    <td><b>REMOVE&nbsp;<i>username</i></b></td>\n    <td>Removes the username/password combination with the given username, if it exists.  If so, the output is <b>REMOVED</b>.  If no username/password combination with the given username exists, the output is <b>NONEXISTENT</b>.</td>\n  </tr>\n  <tr>\n    <td><b>COUNT</b></td>\n    <td>The output is the number of username/password combinations currently being stored.</td>\n  </tr>\n  <tr>\n    <td><b>QUIT</b></td>\n    <td>The output of this command is <b>GOODBYE</b>.  Once this command has been processed, the program should end.</td>\n  </tr>\n</table>\n\n<p>All commands require all of the parameters listed above.  The output for any invalid command &mdash; one that is missing parameters, has too many parameters, or is simply unrecognized (e.g., <b>LISTEN to music</b>) should be <b>INVALID</b>.</p>\n\n<p class=\"subtitle\">Minor but important details</p>\n\n<p>All input and output is case-sensitive.  (You'll find that this means you don't have to worry at all about case, as string comparisons, by default, take case into account.)</p>\n\n<p>It is safe to assume that usernames and passwords can contain any character <i>other than</i> whitespace, but they can never have whitespace characters in them.  (This simplifies the problem of parsing the commands.)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">A complete example of program execution</p>\n\n<p>The following is a complete example of program execution, demonstrating how input and output are interleaved.  Input is shown in a regular font weight; output is shown in <b>bold</b>.</p>\n\n<blockquote><pre>\nCREATE thornton@ics.uci.edu abcdefg\n<b>CREATED</b>\nCREATE boo@thornton.com sleeping\n<b>CREATED</b>\nCREATE boo@thornton.com playing\n<b>EXISTS</b>\nLOGIN thornton@ics.uci.edu abcdefg\n<b>SUCCEEDED</b>\nLOGIN thornton@ics.uci.edu defg\n<b>FAILED</b>\nLOGIN bill.gates@microsoft.com windows\n<b>FAILED</b>\nCOUNT\n<b>2</b>\nREMOVE thornton@ics.uci.edu\n<b>REMOVED</b>\nREMOVE thornton@ics.uci.edu\n<b>NONEXISTENT</b>\nREMOVE edge@u2.com\n<b>NONEXISTENT</b>\nLOGINS hello@hello.com hello\n<b>INVALID</b>\nLOGIN thornton@ics.uci.edu\n<b>INVALID</b>\nLOGIN\n<b>INVALID</b>\nWTF\n<b>INVALID</b>\n\n<b>INVALID</b>\nQUIT\n<b>GOODBYE</b>\n</pre></blockquote>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Some background on our hash table implementation</p>\n\n<p>Hash tables are implemented in many slightly different ways, but the central concept is always the same: when storing a collection of <i>search keys</i> (and possibly other information attached to each), define a way to determine where each search key \"belongs,\" then use that as a starting point for deciding where to store the key and where to find it later.  Deciding where a search key belongs is the role of a <i>hash function</i>, whose job is to take a key and return a <i>hash value</i>.  The hash value is, in turn, used to choose a location to store, find, or remove the key.</p>\n\n<p>Our hash table has the specific goal of acting as a <i>map</i>, which is a collection of key/value pairs; so, we'll implement it in a class called HashMap.  It will be <i>separately chained</i>, which is to say that it will be implemented as a dynamically-allocated array of <i>buckets</i>, where each bucket is a singly-linked list (or, more specifically, a dynamically-allocated array of pointers to nodes, with an empty list represented by <b>nullptr</b>).  Because keys and values are paired together, each linked list node will store both a key and a value.</p>\n\n<p class=\"subtitle\">Hash functions</p>\n\n<p>Each HashMap can optionally be given a hash function as a constructor parameter, or it will use a default (of your choosing) if none is specified.  Hash functions have the type <b>std::function&lt;unsigned int(const std::string&)&gt;</b>, which means they are anything that can be treated as a function that takes a <b>const std::string&</b> as a parameter and returns an <b>unsigned int</b>.  Since they will be unaware of the number of buckets, they can actually legally return any arbitrary <b>unsigned int</b>, so it will be up to the HashMap class to take the values returned by the hash function and reduce them into the range of available bucket indices (e.g., by using the <b>%</b> operator).</p>\n\n<p class=\"subtitle\">Load factors and rehashing</p>\n\n<p>While linked lists can grow with relative impunity, the performance of a separately-chained hash table is a function of the lengths of its linked lists, so we're strongly incentivized to keep those lists as short as possible.  Even with a wonderfully-designed hash function, a separately-chained hash table can still be slow simply because it's become overly full, with every list storing multiple keys.  We'd like to avoid this problem.</p>\n\n<p>This leads to a question: How do we measure how \"full\" a hash table is?  We say that the <i>load factor</i> of a hash table is the number of keys it's storing divided by the number of buckets (or, stated differently, the average length of its lists).  To avoid the performance hit of becoming overly full, your HashMap class is required to allocate a larger number of buckets and rehash all of the keys whenever the load factor exceeds a threshold of 0.8.  (The reason that rehashing is necessary is that the number of buckets has an effect on which bucket a key will be stored in, so changing the number of buckets requires rehashing the keys so they're each stored in their new \"home.\")</p>\n\n<p class=\"subtitle\">Design requirements for your HashMap class</p>\n\n<p>Your HashMap class <i>must</i> use the following header file as a starting point:</p>\n\n<ul>\n  <li><a href=\"HashMap.h\">HashMap.h</a></li>\n</ul>\n\n<p>That header file declares a set of members that your class is required to implement as-is &mdash; though you're welcome to add anything you'd like to it, you won't be able to change or remove anything &mdash; because we'll be running a set of unit tests against your HashMap class to verify its correctness, separately from the rest of your program.</p>\n\n<p>One of the primary goals of this project is to explore the tools provided by C++ to allow you to write a <i>well-behaved</i> class, so your HashMap class will be required to be well-behaved.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Some rules, limitations, and additional challenges</p>\n\n<p>Here are the rules and limitations governing your work on this project.</p>\n\n<ul>\n  <li>You are not permitted to use containers (e.g., <b>std::vector</b>) or generic algorithms (e.g., <b>std::find</b>) from the C++ standard library.  We will be exploring the standard library in some depth in the relatively near future, but the goal here is to implement your own data structure by hand, to gain an understanding of how to build a well-behaved class out of underlying features that are not themselves well-behaved.</li>\n  <li>The public members of your HashMap class cannot be changed in any way (including seemingly minor changes, such as removing <b>const</b> from one of the member variable declarations), so that we can compile and run our unit tests against your class, which will expect the public members to be identical to their current declarations.</li>\n  <li>Now that we're embracing C++'s object-oriented features, you should write classes other than just HashMap in your implementation.  While there are no specific rules about precisely which classes you need, consider how you might slice the program's functionality into pieces or layers, representing each of those layers with a class.</li>\n  <li>All of your classes should be well-behaved and no memory or resources should leak anywhere in your program.  Note, however, that classes whose member variables are all of well-behaved types are generally well-behaved without any extra work (e.g., you won't find that you need the Big Three in those classes); don't write the Big Three unless you need them.</li>\n  <li>Every class must be declared in its own header file and implemented in its own source file, with separation of interface and implementation as we've seen in <a href=\"../../CodeExamples\">code examples</a> thus far.</li>\n</ul>\n\n<p class=\"subtitle\">Additional challenges</p>\n\n<p>As you work on the project, if you're interested in tackling additional challenges, here are a few directions you can go.  In general, you should always feel free to explore the use of language features we've yet to cover, though you should also be aware that you sometimes won't be able to submit your work (if you choose features that explicitly violate one of the rules above, such as using C++ standard library containers like <b>std::list</b>); that doesn't stop you from doing it as a learning experience.</p>\n\n<ul>\n  <li>One design challenge is to consider implementing your user interface using the Command pattern, with inheritance and polymorphism used to differentiate the different commands that can be entered via the standard input.</li>\n  <li>Another design challenge is that the HashMap class is somewhat more limited than it could be, because it requires its keys and values to be strings.  A more broadly useful HashMap would be implemented as a <i>template class</i>, meaning that individual HashMap objects can have their key and value types configured (e.g., HashMap&lt;int, Student&gt;).  If you'd like to go this route, we can talk about ways to do it that won't break our unit tests; you'll have to approach it carefully, but it can be done.  (Or you can work on that part separately and not submit it.)</li>\n  <li>A useful optimization is to implement the ability for your HashMaps to be <i>moved</i>.  You can accomplish this by adding a <i>move constructor</i> and a <i>move assignment operator</i> to your HashMap class, which requires the use of a new C++11 feature called <i>rvalue references</i>.</li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Testing</p>\n\n<p>As in the previous project, there is no explicit deliverable demonstrating that you tested your program, but you would nonetheless be well-advised to run your program on test inputs other than the example here, and to test your HashMap class in ways not necessarily exercised by the entire program, as we will be running two kinds of tests:</p>\n\n<ul>\n  <li>Whole-program tests, where we will redirect test input files into the program's standard input and check the output against our expectations</li>\n  <li>Unit tests that focus only on your HashMap class, including member functions and other functionality (e.g., the Big Three) that your program may or may not use</li>\n</ul>\n\n<p class=\"subtitle\">Why should we test functionality that's not used by the program?</p>\n\n<p>You should think of classes as reusable components.  To the extent that we can make their designs clear and their implementations bullet-proof, reuse will be enabled.  For example, when you've finished your HashMap class, you should be able to write a second, separate program that uses it in ways that your original program didn't &mdash; and I'd suggest doing this in the course of your testing &mdash; yet still see, ultimately, that it works as it should; if not, you still have work to do.</p>\n\n<p class=\"subtitle\">Writing two main() functions</p>\n\n<p>The <b>main()</b> function in C++ is special, in the sense that there can only be one of them in a program.  If you try to compile a program with more than one <b>main()</b> function, the linker will refuse to link the program, because the initial call to main() &mdash; the one that starts the program &mdash; will be ambiguous.</p>\n\n<p>There is a lot of value in writing your tests in a separate source file from your regular <b>main()</b>.  Given that, there are at least a couple of ways to work around the problem in Visual Studio:</p>\n\n<ul>\n  <li>Write one <b>main()</b> function with calls to two other functions &mdash; one that starts your program normally, another that runs tests &mdash; written in separate source files.  Comment out one call or the other, depending on which you want to run.</li>\n  <li>Write your <b>main()</b> functions in two separate source files.  When you want to choose one over the other, exclude the one you don't want from your Visual Studio project (by right-clicking the file and selecting <b>Exclude from Project</b>) and, if it's not in the project, adding the one you do want (by right-clicking the project, selecting <b>Add</b> and then <b>Existing Item...</b>).</li>\n</ul>\n\n<p class=\"subtitle\">What to submit</p>\n\n<p>As no credit is offered for them, please do not submit your tests, as it runs the risk of making it more difficult for us to compile and run your program using our test automation.  The value in writing tests is not to please us; the value in writing them is ensuring that your HashMap class is complete and correct (which will be reflected in your score).</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>Submit all of the source (<b>.cpp</b>) and header (<b>.h</b>) files that comprise your program.  Afterward, take a moment to be sure that you submitted all of the files; if you missed one, we won't be able to compile and run your program, which can result in a substantial penalty, since we won't be able to evaluate your program's correctness.</p>\n\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you accidentally submitted the wrong version.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Originally written by Alex Thornton, Fall 2012.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}