{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/doc/overview/kdtree.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n <head>\n  <!-- IE Standards Mode -->\n  <meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"></meta>\n\n  <!-- Favicon -->\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"icon\"></link>\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"shortcut icon\"></link>\n\n  <!-- Page title -->\n  <title>VLFeat - Tutorials > KD-trees and forests</title>\n\n  <!-- Stylesheets -->\n  <link href=\"../vlfeat.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <link href=\"../pygmentize.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <style xml:space=\"preserve\">\n    /* fixes a conflict between Pygmentize and MathJax */\n    .MathJax .mo, .MathJax .mi {color: inherit ! important}\n  </style>\n  \n\n  <!-- Scripts-->\n  \n\n  <!-- MathJax -->\n  <script xml:space=\"preserve\" type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true,\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n        by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers: { autoNumber: 'AMS' }\n      }\n    });\n  </script>\n  <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" xml:space=\"preserve\" type=\"text/javascript\"></script>\n\n  <!-- Google Custom Search -->\n  <script xml:space=\"preserve\">\n    (function() {\n    var cx = '003215582122030917471:oq23albfeam';\n    var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n    gcse.src = (document.location.protocol == 'https' ? 'https:' : 'http:') +\n    '//www.google.com/cse/cse.js?cx=' + cx;\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n    })();\n  </script>\n\n  <!-- Google Analytics -->\n  <script xml:space=\"preserve\" type=\"text/javascript\">\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-4936091-2']);\n    _gaq.push(['_trackPageview']);\n    (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    })();\n  </script>\n </head>\n\n <!-- Body Start -->\n <body>\n  <div id=\"header-section\">\n    <div id=\"header\">\n      <!-- Google CSE Search Box -->\n      <div class=\"searchbox\">\n        <gcse:searchbox-only autoCompleteMaxCompletions=\"5\" autoCompleteMatchType=\"any\" resultsUrl=\"http://www.vlfeat.org/search.html\"></gcse:searchbox-only>\n      </div>\n      <h1 id=\"id-16\"><a shape=\"rect\" href=\"../index.html\" class=\"plain\"><span id=\"vlfeat\">VLFeat</span><span id=\"dotorg\">.org</span></a></h1>\n    </div>\n    <div id=\"sidebar\"> <!-- Navigation Start -->\n      <ul>\n<li><a href=\"../index.html\">Home</a>\n<ul>\n<li><a href=\"../about.html\">About</a>\n</li>\n<li><a href=\"../license.html\">License</a>\n</li>\n</ul></li>\n<li><a href=\"../download.html\">Download</a>\n<ul>\n<li><a href=\"../install-matlab.html\">Using from MATLAB</a>\n</li>\n<li><a href=\"../install-octave.html\">Using from Octave</a>\n</li>\n<li><a href=\"../install-shell.html\">Using from the command line</a>\n</li>\n<li><a href=\"../install-c.html\">Using from C</a>\n<ul>\n<li><a href=\"../xcode.html\">Xcode</a>\n</li>\n<li><a href=\"../vsexpress.html\">Visual C++</a>\n</li>\n<li><a href=\"../gcc.html\">g++</a>\n</li>\n</ul></li>\n<li><a href=\"../compiling.html\">Compiling</a>\n<ul>\n<li><a href=\"../compiling-unix.html\">Compiling on UNIX-like platforms</a>\n</li>\n<li><a href=\"../compiling-windows.html\">Compiling on Windows</a>\n</li>\n</ul></li>\n</ul></li>\n<li class='active'><a href=\"tut.html\">Tutorials</a>\n<ul>\n<li><a href=\"frame.html\">Local feature frames</a>\n</li>\n<li><a href=\"covdet.html\">Covariant feature detectors</a>\n</li>\n<li><a href=\"hog.html\">HOG features</a>\n</li>\n<li><a href=\"sift.html\">SIFT detector and descriptor</a>\n</li>\n<li><a href=\"dsift.html\">Dense SIFT</a>\n</li>\n<li><a href=\"liop.html\">LIOP local descriptor</a>\n</li>\n<li><a href=\"mser.html\">MSER feature detector</a>\n</li>\n<li><a href=\"imdisttf.html\">Distance transform</a>\n</li>\n<li><a href=\"encodings.html\">Fisher Vector and VLAD</a>\n</li>\n<li><a href=\"gmm.html\">Gaussian Mixture Models</a>\n</li>\n<li><a href=\"kmeans.html\">K-means clustering</a>\n</li>\n<li><a href=\"aib.html\">Agglomerative Infromation Bottleneck</a>\n</li>\n<li><a href=\"quickshift.html\">Quick shift superpixels</a>\n</li>\n<li><a href=\"slic.html\">SLIC superpixels</a>\n</li>\n<li><a href=\"svm.html#tut.svm\">Support Vector Machines (SVMs)</a>\n</li>\n<li class='active' class='activeLeaf'><a href=\"kdtree.html\">KD-trees and forests</a>\n</li>\n<li><a href=\"plots-rank.html\">Plotting AP and ROC curves</a>\n</li>\n<li><a href=\"utils.html\">Miscellaneous utilities</a>\n</li>\n<li><a href=\"ikm.html\">Integer K-means</a>\n</li>\n<li><a href=\"hikm.html\">Hierarchical integer k-means</a>\n</li>\n</ul></li>\n<li><a href=\"../applications/apps.html\">Applications</a>\n</li>\n<li><a href=\"../doc.html\">Documentation</a>\n<ul>\n<li><a href=\"../matlab/matlab.html\">MATLAB API</a>\n</li>\n<li><a href=\"../api/index.html\">C API</a>\n</li>\n<li><a href=\"../man/man.html\">Man pages</a>\n<ul>\n<li><a href=\"../man/mser.html\">mser</a>\n</li>\n<li><a href=\"../man/sift.html\">sift</a>\n</li>\n<li><a href=\"../man/vlfeat.html\">vlfeat</a>\n</li>\n</ul></li>\n</ul></li>\n</ul>\n\n    </div> <!-- sidebar -->\n  </div>\n  <div id=\"headbanner-section\">\n    <div id=\"headbanner\">\n      <span class='page'><a href=\"tut.html\">Tutorials</a></span><span class='separator'>></span><span class='page'><a href=\"kdtree.html\">KD-trees and forests</a></span>\n    </div>\n  </div>\n  <div id=\"content-section\">\n    <div id=\"content-wrapper\">\n      <div id=\"content\">\n        \n    \n\n<div class='toc'>\n<h3>Table of Contents</h3><ul><li class=\"level1\"><a href=\"#tut.kdtree.introduction\">Introduction</a></li>\n<li class=\"level1\"><a href=\"#tut.kdtree.querying\">Querying</a></li>\n<li class=\"level1\"><a href=\"#tut.kdtree.forest\">Randomized kd-tree forests</a></li>\n</ul>\n</div><!-- Table of contents -->\n\n\n<p><b>VLFeat</b> implements the randomized kd-tree forest from\n<a shape=\"rect\" href=\"http://www.cs.ubc.ca/~mariusm/index.php/FLANN/FLANN\">FLANN</a>.\nThis enables fast medium and large scale nearest neighbor queries\namong high dimensional data points (such as those produced by SIFT).\n</p>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.kdtree.introduction\">Introduction</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>A kd-tree is a data structure used to quickly solve\nnearest-neighbor queries. Consider a set of 2D points uniformly\ndistributed in the unit square:</p>\n\n<div class=\"highlight\"><pre>  <span class=\"n\">X</span> <span class=\"p\">=</span> <span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>A kd-tree is generated by using the <code/><a href=../matlab/vl_kdtreebuild.html>vl_kdtreebuild</a></code> function:\n</p>\n\n<div class=\"highlight\"><pre>  <span class=\"n\">kdtree</span> <span class=\"p\">=</span> <span class=\"n\">vl_kdtreebuild</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>The returned <code/>kdtree</code> indexes the set of\npoints <code/>X</code>. Given a query point <code/>Q</code>, the\nfunction <code/><a href=../matlab/vl_kdtreequery.html>vl_kdtreequery</a></code> returns its nearest neighbor\nin <code/>X</code>:</p>\n\n<div class=\"highlight\"><pre>  <span class=\"n\">Q</span> <span class=\"p\">=</span> <span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n  <span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_kdtreequery</span><span class=\"p\">(</span><span class=\"n\">kdforest</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Here <code/>index</code> stores the index of the column\nof <code/>X</code> that is closest to the point <code/>Q</code>.\n<code/>distance</code> is the squared euclidean distance between <code/>X(index),Q</code>.</p>\n\n<p>A kd-tree is a hierarchal structure built by partitioning the data\nrecursively along the dimension of maximum variance. At\neach iteration the variance of each column is computed and the data is\nsplit into two parts on the column with maximum variance. The\nsplitting threshold can be selected to be the mean or the median (use\nthe <code/>ThresholdMethod</code> option of\n<code/><a href=../matlab/vl_kdtreebuild.html>vl_kdtreebuild</a></code>).</p>\n\n<div class=\"figure\">\n <img src=\"../demo/kdtree_uniform_mean.jpg\"></img>\n <img src=\"../demo/kdtree_uniform_median.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n   kd-tree partitions of a uniform set of data points, using\n   the mean (left image) and the median (right image) thresholding\n   options of <code/><a href=../matlab/vl_kdtreebuild.html>vl_kdtreebuild</a></code>. On the bottom right corner\n   a query point is marked along with the ten closest neighbors as\n   found by <code/><a href=../matlab/vl_kdtreequery.html>vl_kdtreequery</a></code>. Figure generated\n   by <code/><a href=../matlab/demo/vl_demo_kdtree.html>vl_demo_kdtree</a></code>.\n  </span>\n </div>\n</div>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.kdtree.querying\">Querying</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p><code/><a href=../matlab/vl_kdtreequery.html>vl_kdtreequery</a></code> uses a best-bin first search\nheuristic. This is a branch-and-bound technique that maintains an\nestimate of the smallest distance from the query point to any of the\ndata points down all of the open paths.</p>\n\n<p><code/><a href=../matlab/vl_kdtreequery.html>vl_kdtreequery</a></code> supports two important operations:\n  <em>approximate nearest-neighbor search</em> and <em>k-nearest\n  neighbor search</em>. The latter can be used to return the\n  <em>k</em> nearest neighbors to a given query point <code/>Q</code>.\n  For instance:\n</p>\n\n<div class=\"highlight\"><pre><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_kdtreequery</span><span class=\"p\">(</span><span class=\"n\">kdtree</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"s\">&#39;NumNeighbors&#39;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>returns the closest 10 neighbors to <code/>Q</code>\nin <code/>X</code> and their distances, stored along the columns of\n<code/>index</code> and <code/>distance</code>.</p>\n\n<p>The <code/>MaxComparisons</code> option is used to run an ANN query.\nThe parameter specifies how many paths in the best-bin-first search of\nthe kd-tree can be checked before giving up and returning the closest\npoint encountered so far. For instance:</p>\n\n<div class=\"highlight\"><pre><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_kdtreequery</span><span class=\"p\">(</span><span class=\"n\">kdtree</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"s\">&#39;NumNeighbors&#39;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s\">&#39;MaxComparisons&#39;</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>does not compare any point in <code/>Q</code> with more than 15\npoints in <code/>X</code>.</p>\n\n<div class=\"figure\">\n <img src=\"../demo/kdtree_ann_1.jpg\"></img>\n <img src=\"../demo/kdtree_ann_2.jpg\"></img>\n <img src=\"../demo/kdtree_ann_3.jpg\"></img>\n <img src=\"../demo/kdtree_ann_4.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n    Finding the 10 approximated nearest neighbors for increasing\n    values of the <code/>MaxComparisons</code> parameter. Note that at\n    most <code/>MaxComparisons</code> neighbors can be returned (if more\n    are requested, they are ignored). Figure generated\n    by <code/><a href=../matlab/demo/vl_demo_kdtree_ann.html>vl_demo_kdtree_ann</a></code>.\n  </span>\n </div>\n</div>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.kdtree.forest\">Randomized kd-tree forests</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>VLFeat supports constructing randomized <em>forests</em> of\nkd-trees to improve the effectiveness of the representation in high\ndimensions. The parameter <code/>NumTrees</code> of\n<code/><a href=../matlab/vl_kdtreebuild.html>vl_kdtreebuild</a></code> specifies how many trees to use in\nconstructing the forest. Each tree is constructed independently.\nInstead of always splitting on the maximally variant dimension, each\ntree chooses randomly among the top five most variant dimensions at\neach level. When querying, <code/><a href=../matlab/vl_kdtreequery.html>vl_kdtreequery</a></code> runs\nbest-bin-first across all the trees in parallel. For instance</p>\n\n<div class=\"highlight\"><pre>  <span class=\"n\">kdtree</span> <span class=\"p\">=</span> <span class=\"n\">vl_kdtreebuild</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"s\">&#39;NumTrees&#39;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n  <span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_kdtreequery</span><span class=\"p\">(</span><span class=\"n\">kdtree</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>constructs four trees and queries them.</p>\n\n<div class=\"figure\">\n <img src=\"../demo/kdtree_forest_tree_1.jpg\"></img>\n <img src=\"../demo/kdtree_forest_tree_2.jpg\"></img>\n <img src=\"../demo/kdtree_forest_tree_3.jpg\"></img>\n <img src=\"../demo/kdtree_forest_tree_4.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n    The parameter <code/>NumTrees</code>\n    tells <code/><a href=../matlab/vl_kdtreebuild.html>vl_kdtreebuild</a></code> to construct a number of\n    randomized kd-trees. Figure generated\n    by <code/><a href=../matlab/demo/vl_demo_kdtree_forest.html>vl_demo_kdtree_forest</a></code>.\n  </span>\n </div>\n</div>\n\n\n\n  \n      </div>\n      <div class=\"clear\">&nbsp;</div>\n    </div>\n  </div> <!-- content-section -->\n  <div id=\"footer-section\">\n    <div id=\"footer\">\n      &copy; 2007-13 The authors of VLFeat\n    </div> <!-- footer -->\n  </div> <!-- footer section -->\n </body>\n <!-- Body ends -->\n</html>\n ", "encoding": "ascii"}