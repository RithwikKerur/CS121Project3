{"url": "https://www.ics.uci.edu/~theory/269/140516a.html", "content": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>Theory Seminar, May 16, 2013</title>\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\"\n  src=\"http://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"http://www.ics.uci.edu/~theory/logo/CATOC2.jpg\"></a>\n<h2><a href=\"/~theory/269/\">CS 269S, Spring 2014: Theory Seminar</a><br>\nICS Building, Room 243, 1pm\n\n<hr />\nMay 16, 2013:</h2>\n<h1>\nZig-zag Sort: A simple deterministic data-oblivious sorting algorithm\nrunning in $O(n\\log n)$ time\n</h1>\n<h2>\nMichael T. Goodrich\n</h2>\n\n<p>\nWe describe and analyze Zig-zag Sort--a deterministic data-oblivious\nsorting algorithm running in $O(n\\log n)$ time that is arguably simpler\nthan previously known algorithms with similar properties, which are\nbased on the AKS sorting network. Because it is data-oblivious and\ndeterministic, Zig-zag Sort can be implemented as a simple $O(n\\log\nn)$-size sorting network, thereby providing a solution to an open\nproblem posed by Incerpi and Sedgewick in 1985. In addition, Zig-zag\nSort is a variant of Shellsort, and is, in fact, the first deterministic\nShellsort variant running in $O(n\\log n)$ time. The existence of such an\nalgorithm was posed as an open problem by Plaxton et al. in 1992 and\nalso by Sedgewick in 1996. More relevant for today, however, is the fact\nthat the existence of a simple data-oblivious deterministic sorting\nalgorithm running in $O(n\\log n)$ time simplifies the inner-loop\ncomputation in several proposed oblivious-RAM simulation methods (which\nutilize AKS sorting networks), and this, in turn, implies simplified\nmechanisms for privacy-preserving data outsourcing in several cloud\ncomputing applications. We provide both constructive and\nnon-constructive implementations of Zig-zag Sort, based on the existence\nof a circuit known as an epsilon-halver, such that the constant factors\nin our constructive implementations are orders of magnitude smaller than\nthose for constructive variants of the AKS sorting network, which are\nalso based on the use of epsilon-halvers.</p>\n\n(Practice talk for a paper to be presented at STOC 2014.)\n\n</body>\n</html>\n\n", "encoding": "ascii"}