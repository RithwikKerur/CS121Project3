{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/lab4.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, October 13, 2005 12:04 PM\" />\n<TITLE>Lab Assignment 4</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2C1C98C\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/h21/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style2 {font-family: \"Courier New\", Courier, monospace}\n.style3 {font-family: Garamond}\n.style21 {font-size: 10pt}\n-->\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY &bull; FALL 2009</font></P>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Lab Assignment 4</B></FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>This assignment is due at the end of lab on\nFriday, October 23. </FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Choose a partner for this assignment, someone\nyou haven&#39;t worked with already.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(a)</B>  Do exercise 11.2.2. What they're asking for is a list of <em>n</em> pairs (each pair is a <font face=\"Courier New, Courier, monospace\" class=\"style2\">posn</font> structure; each pair has the values <em>i</em> and <em>f</em>(<em>i</em>) where <em>i</em> starts at <em>n</em> and goes down by one each time until it reaches zero). Next do exercise 12.2.1 (just adapting\nthe program in Figure 33).</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>Write the function \n  <font face=\"Courier New, Courier, monospace\">in-ascending-order?</font> as described below; you might use this in testing the results of a sorting program.\n</font></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">;; in-ascending-order?: list-of-numbers -> boolean\n;; Return true if the list is empty or if each item <= all following items\n(check-expect (in-ascending-order? empty) true)\n(check-expect (in-ascending-order? (list 17)) true)\n(check-expect (in-ascending-order? (list 12 14 16 18 20)) true)\n(check-expect (in-ascending-order? (list 12 14 18 16 20)) false)</font></pre>\n<P><FONT FACE=\"Garamond\" SIZE=4>(Hint: A one-element list is always in ascending order; consider treating that case in a separate cond clause.)</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>Here's a question to think about:  If we want to test the correctness\nof our sorting function, is it enough to have tests of\nthe form \n<font face=\"Courier New, Courier, monospace\">(check-expect (in-ascending-order? (sort L)) true)</font>?\nThat is, if the results of our sorting function are\nsorted into ascending order, are we satisfied that our\nsorting function works correctly?  (Put another way,\ncan we think of a way to write <font face=\"Courier New, Courier, monospace\">sort</font> so that its result\nalways passes the <font face=\"Courier New, Courier, monospace\">in-ascending-order?</font> test but the \nresult is not correctly sorted?)</FONT></P>\n\n<P><FONT FACE=\"Garamond\" SIZE=4>Collect your definitions for all these exercises\ninto one Scheme file, make sure both partners&#39; names are in a comment\nat the top, and submit it via Checkmate.</FONT></P>\n<P>\n  <FONT FACE=\"Garamond\" SIZE=4><B>(b)</B>   At this point in the assignment, change\nyour language level to Intermediate Student.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>Copy the code for the restaurants\n  program to your machine and run it to make sure it works properly in your\n  environment.</FONT></P>\n<P><span class=\"style3\">After completing the task of reimplementing the collection,\n  add one new feature to the program:</span> <FONT FACE=\"Courier New\">c:\n    Change prices for the dishes served</FONT><FONT FACE=\"Garamond\" SIZE=4>.\n      When the user types </FONT><span class=\"style2\">&#39;c&#39;</span><FONT FACE=\"Garamond\" SIZE=4>,\n    the program should ask the user for an amount (positive or negative) representing\n    a percentage change in price (so that 100 would double a price and -50 would\n    cut it in half).  Then it should apply that price change to the prices for\n    all the restaurants in the collection.  [Here are some hints on how to approach\n    this.  Before reading further, you might want to think about how you'd do it.  You might approach\n    this  byfirst writing a </FONT><FONT FACE=\"Courier New\">rrant-change-price</FONT><FONT FACE=\"Garamond\" SIZE=4>\n    function that takes a restaurant and a percentage change number, as above,\n    and returns a restaurant that has all the same information, except that\n    the price is changed appropriately.  Next you might write a function to\n    apply </FONT><FONT FACE=\"Courier New\">rrant-change-price</FONT><FONT FACE=\"Garamond\" SIZE=4>\n    to all the restaurants in the collection.  Finally, you can incorporate\n    these calls into the main program, adding the appropriate command handling\n    and so on.]</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(c)</B> As we start this part of the lab, we need to explain one new feature of Scheme: the quote operator. If we type<font face=\"Courier New, Courier, monospace\"> (+ 2 2)</font> in the interactions window, Scheme evaluates it by applying the <font face=\"Courier New, Courier, monospace\">+</font> operator to its arguments to get 4. If we type <font face=\"Courier New, Courier, monospace\">&quot;(+ 2 2)&quot;</font>, scheme <em>doesn't</em> evaluate it as an arithmetic expression; the quotation marks just say to evaluate it as a string, and return the literal value <font face=\"Courier New, Courier, monospace\">&quot;(+ 2 2)&quot;</font>.  Sometimes we want Scheme to evaluate what we type; sometimes we just want Scheme to treat it as data.  The way we say \"don't evaluate\" in Scheme is not to use double quote marks (which actually say \"evaluate this as a string\").  Instead, we use the quote operator, which can take the form <font face=\"Courier New, Courier, monospace\">(quote x)</font> or <font face=\"Courier New, Courier, monospace\">'x</font>.  This is particularly convenient if we want to indicate a constant list in our code:  We can still say <font face=\"Courier New, Courier, monospace\">(list 1 2 3)</font>, but we can also say <font face=\"Courier New, Courier, monospace\">(quote (1 2 3))</font> or <font face=\"Courier New, Courier, monospace\">'(1 2 3)</font>.  Of course <font face=\"Courier New, Courier, monospace\">(1 2 3)</font> (without the <font face=\"Courier New, Courier, monospace\">list</font> or <font face=\"Courier New, Courier, monospace\">quote</font> or apostrophe) would give us an error, because <font face=\"Courier New, Courier, monospace\">1</font> isn't the name of a defined function.  In this lab problem, you can see how we mght want to use quoted lists.</FONT></P>\n<p><FONT FACE=\"Garamond\" SIZE=4>A recipe is a structure</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">    (make-recipe T IL SL)</font></pre>\n<FONT FACE=\"Garamond\" SIZE=4>where T is the title (a symbol), IL is a list\nof ingredients, and SL is a list of steps.</FONT>\n<P> <FONT FACE=\"Garamond\" SIZE=4>An single ingredient is a symbol (like </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">&#39;eggs</FONT></span><FONT FACE=\"Garamond\" SIZE=4>);\n  a single step is a list of symbols (like </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">&#39;(beat the eggs)</FONT></span><FONT FACE=\"Garamond\" SIZE=4>).  A recipe contains a list\n    of ingredients and a list of steps; for example:</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">(make-recipe &#39;ThaiIcedCoffee \n  &#160;&#160; &#39;(coffee sugar condensed-milk ice) \n  &#160;&#160; &#39;((brew coffee) (add sugar and condensed-milk) (pour coffee mixture over ice)))</font></pre>\n<P> <FONT FACE=\"Garamond\" SIZE=4>(Here you can see one advantage of using symbols instead of strings; with strings, we'd have to double-quote every individual word, but with symbols, we can just single-quote the whole list of them. Ask yourselves: What would be the problem with double-quoting the whole list of symbols here?)</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(c.1)</B> Write the structure definition\n  for a recipe, using &quot;title,&quot; &quot;ingredients,&quot; and &quot;steps&quot;\n  as the names of the fields.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(c.2)</B> Some people say that any recipe\n  can be improved by the addition of chocolate.  (Others say sesame oil, or\n  Tabasco sauce.)  Write a definition of </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">add-special-ingredient</FONT></span><FONT FACE=\"Garamond\" SIZE=4>.\n    You may use an auxiliary function if you like. </FONT>\n</p><pre><font size=\"2\" face=\"Courier New, Courier, monospace\">; add-special-ingredient:  list-of-recipes  symbol   -&gt;  list-of-recipes \n; Return a list containing all the recipes in the input list, but with the symbol added\n;      at the beginning of the ingredients list of each recipe.</font></pre>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(c.3)</B> Write a definition for </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">complete-ingredients-list</FONT></span>\n.\n</p><pre><font size=\"2\" face=\"Courier New, Courier, monospace\">; complete-ingredients-list:  list-of-recipes  -&gt;  list-of-symbols\n; Return a list containing all the ingredients from all the recipes in the list,\n;     with no duplications.  (You may assume that all the elements of a single\n;     ingredients list are unique.)</font></pre>\n<P> <FONT FACE=\"Garamond\" SIZE=4>[Hint:  Define an auxiliary function called<span class=\"style1\"> add-unique</span>.]</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(c.4)</B> Sometimes we have to substitute\n  one ingredient for another in a recipe. Write a definition for <span class=\"style1\">replace-ingredient</span></FONT>\nas described below.  Auxiliary functions are essential here.\n</p><pre><font size=\"2\" face=\"Courier New, Courier, monospace\">; replace-ingredient: symbol1  symbol2  recipe  -&gt;  recipe \n; Return a recipe like the input, but with every instance of symbol1 replaced by symbol2, \n;     both in the ingredients list and in the list of steps. \n; Example: Suppose TIC is the Thai Iced Coffee recipe defined above. \n;    (replace-ingredient &#39;coffee &#39;decaf  TIC) would return \n;    (make-recipe &#39;ThaiIcedCoffee \n;      &#160; &#39;(decaf sugar condensed-milk ice)\n;      &#160; &#39;((brew decaf) (add sugar and condensed-milk) (pour decaf mixture over ice)))</font></pre>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(c.5)</B> Some recipes are so complex that they include in their steps some references to other recipes. A cake recipe in a cookbook, for example, might have as one step, &quot;Use the chocolate icing recipe on page 23.&quot; To reflect this in our Scheme recipes, we change our definition of a &quot;list of steps&quot;:</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>A list of steps (LOS) is either</FONT></P>\n<ol>\n  <li><FONT FACE=\"Garamond\" SIZE=4>empty;</FONT></li>\n  <li><FONT FACE=\"Garamond\" SIZE=4>(cons S LOS), where S is a single step (i.e., a list of symbols); or</FONT></li>\n  <li><FONT FACE=\"Garamond\" SIZE=4>(cons R LOS), where R is a recipe.</FONT></li>\n</ol>\n<P> <FONT FACE=\"Garamond\" SIZE=4>Write a definition for <span class=\"style1\">complete-ingredients-list2</span> that accommodates these (possibly nested) recipes.</FONT>\n</p><pre><font size=\"2\" face=\"Courier New, Courier, monospace\">; complete-ingredients-list2:  list-of-recipes -&gt;  list-of-symbols \n; Return a list containing all the ingredients from all the recipes in the list, \n;     including nested recipes, with no duplications.  (You may assume that all the\n;     elements of a single ingredients list are unique.)  </font></pre>\n<P><FONT FACE=\"Garamond\" SIZE=4>Collect these definitions and submit them via Checkmate.  Turn in what you have by the due date; then consult with the TA if you'd like to keep working.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(d) </B>(extra credit,\naccording to the usual rules) Do exercises 12.4.1 and 12.4.2.</FONT></P>\n<P>\n  <FONT FACE=\"Garamond\" SIZE=4><B>(e)</B>  Remember that each partner must\ncomplete a partner evaluation form via the Survey tool on <code>eee.uci.edu</code>.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments by David\nG. Kay from Fall 2001; modified by David G. Kay, Fall 2004&ndash;Fall 2009.</FONT></P>\n<HR />\n<FONT FACE=\"Garamond\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Garamond\">\n<!-- #BeginDate format:fcAm1a -->Sunday, October 18, 2009 4:53 PM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "ascii"}