{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node155.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Parsing other Data Structures</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Parsing other Data Structures\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html4102 HREF=\"node156.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html4100 HREF=\"node152.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html4096 HREF=\"node154.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html4104 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html4103 HREF=\"node156.html\"> Exceptions</A>\r\n<B>Up:</B> <A NAME=tex2html4101 HREF=\"node152.html\"> Definite Clause Grammars </A>\r\n<B> Previous:</B> <A NAME=tex2html4097 HREF=\"node154.html\"> Mapping to Prolog </A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION001233000000000000000> Parsing other Data Structures</A></H2>\r\n<P>\r\nDCGs are in principle not limited to the parsing of lists.\r\nThe predicate 'C'/3 is responsible for reading resp. generating\r\nthe input tokens. The default definition is\r\n<A NAME=2447>&#160;</A>\r\n<blockquote> <PRE>'C'([Token|Rest], Token, Rest).\r\n</PRE></blockquote>\r\nThe first argument represents the parsing input before consuming\r\nToken and Rest is the input after consuming Token.\r\nBy redefining 'C'/3, it is possible to apply a DCG to other\r\ninput sources than a list, e.g. to parse directly from an I/O stream:\r\n<blockquote> <PRE>'C'(Stream-Pos0, Token, Stream-Pos1) :-\r\n        seek(Stream, Pos0),\r\n        read_string(Stream, &quot; &quot;, _, TokenString),\r\n        atom_string(Token, TokenString),\r\n        at(Stream, Pos1).\r\n\r\n sentence --&gt; noun, [is], adjective.\r\n noun --&gt; [prolog] ; [lisp].\r\n adjective --&gt; [boring] ; [great].\r\n</PRE></blockquote>\r\nThis can then be applied to a string as follows:\r\n<blockquote> <PRE>[eclipse 1]: String = &quot;prolog is great&quot;, open(String, string, S),\r\n             phrase(sentence, S-0, S-End).\r\n..\r\nEnd = 15\r\nyes.\r\n</PRE></blockquote>\r\nUnlike the default definition, this definition of 'C'/3 is not bi-directional.\r\nConsequently, the grammar rules using it can only be used for parsing,\r\nnot for generating sentences.\r\n<P>\r\nNote that every grammar rule uses the definition of 'C'/3 which is visible in\r\nthe module where the grammar rule itself is defined.\r\n<P>\r\n\r\n<P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}