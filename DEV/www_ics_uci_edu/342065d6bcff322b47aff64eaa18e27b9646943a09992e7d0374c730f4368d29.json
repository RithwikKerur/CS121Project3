{"url": "https://www.ics.uci.edu/~sternh/courses/210/randomize.Rmd", "content": "---\r\ntitle: \"BankStudy\"\r\noutput: html_document\r\n---\r\n\r\n```{r setup, include=FALSE}\r\nknitr::opts_chunk$set(echo = TRUE)\r\n```\r\n\r\n## R Markdown\r\n\r\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\r\n\r\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk by using three single open quote marks and specifying a name for the chunk of R code (e.g., {r mycode}), and then closing the chunk of code with (again) three single open quote marks.\r\n\r\nThe first chunk here loads the tidyverse package (which I use as a default)\r\nand then generates data from a normal distribution while ensuring\r\nthat it would have approximately the mean and s.d. that I want for the example.\r\n\r\n```{r gendata}\r\nlibrary(tidyverse)\r\n\r\nnofee <- round(scale(rnorm(25,0,1))*272 + 1871)\r\nrebate <- round(scale(rnorm(25,0,1))*360 + 2061)\r\n```\r\n\r\nThe next bit of code provides some summary statistics and plots.  Note that describe is a function that I am creating.  In future sessions I can use it without redefining it.\r\n\r\n```{r explore}\r\ndescribe <- function(x){c(n=length(x),mean=mean(x),sd=sqrt(var(x)),quantile(x))}\r\ndescribe(nofee)\r\ndescribe(rebate)\r\nhist(nofee)\r\nqqnorm(nofee)\r\nhist(rebate)\r\nqqnorm(rebate)\r\n```\r\n\r\nDemonstration of the randomization test.  I put all the data into a single \r\nvector and then randomly sample half to be in the \"random\" nofee group (a) \r\nand then take the remaining half to be in the \"random\" rebate group (b).  I \r\ncollect the difference between the two sample means for each randomization.\r\nThese are summarized and graphed.  This is followed by calculation of the randomization p-value.\r\n\r\n```{r randomize}\r\n\r\ndata <- c(nofee, rebate)\r\ntotn <- length(data)\r\nnsims <- 1000\r\nrandomdist <- rep(0,nsims)\r\nfor (i in (1:nsims)) {\r\n  a <- sample(data,totn/2)\r\n  suma <- sum(a)\r\n  sumb <- sum(data) - suma\r\n  randomdist[i] <- sumb/length(rebate) - suma/length(nofee)\r\n}\r\ndescribe(randomdist)\r\nhist(randomdist)\r\nsum(abs(randomdist) > (mean(rebate)-mean(nofee)))/nsims\r\n```\r\n\r\nAs a final step we can compute the t-test on the original data for comparison.  First assuming the two populations have equal variance and then removing this assumption. Note how similar the p-value is to the randomization estimate.\r\n\r\n```{r ttests}\r\n\r\nt.test(nofee,rebate,var.equal=TRUE)\r\nt.test(nofee,rebate,var.equal=FALSE)\r\n```\r\n", "encoding": "ascii"}