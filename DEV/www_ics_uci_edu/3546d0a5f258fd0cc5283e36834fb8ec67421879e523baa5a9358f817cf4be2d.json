{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node295.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> The Mode Analyser</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" The Mode Analyser\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html5805 HREF=\"node296.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html5803 HREF=\"node268.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html5797 HREF=\"node294.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html5807 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html5806 HREF=\"node296.html\"> Parallel Utilities</A>\r\n<B>Up:</B> <A NAME=tex2html5804 HREF=\"node268.html\"> Libraries</A>\r\n<B> Previous:</B> <A NAME=tex2html5798 HREF=\"node294.html\"> I/O Redirection</A>\r\n<BR> <HR> <P>\r\n<H1><A NAME=SECTION0022110000000000000000> The Mode Analyser</A></H1>\r\n<P>\r\n<A NAME=chapmodes>&#160;</A>\r\n<A NAME=6909>&#160;</A>\r\n<A NAME=6910>&#160;</A>\r\n<P>\r\nThis library provides a static mode analysis tool for <A NAME=tex2html1389 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  programs.\r\nIt takes as input a Prolog program and a goal pattern, and performs\r\nan analysis of the modes that the predicates in the program will\r\nbe called with, given the specified goal pattern.\r\nThe mode analyser is loaded with\r\n<PRE>    :- lib(modes).\r\n</PRE>\r\nThe usage is simple. The predicate <b> read_source/1</b> is used to read in the\r\nsource file to be analysed. The predicate <b> analyze/1</b> starts the analysis\r\nwith a given call pattern and prints the results in the form of a compilable\r\nmode declaration:\r\n<blockquote> <PRE>[eclipse 2]: read_source(qsort).\r\nreading qsort\r\n\r\nyes.\r\n[eclipse 3]: analyze(qsort(++,-)).\r\n\r\n% Analysed 3 call patterns of 3 predicates in 0.05 sec\r\n% Number of pending goals: 29\r\n% Global Stack used:       12892\r\n:- mode partition(++, ++, -, -).\r\n:- mode qsort(++, -).\r\n:- mode qsort(++, -, ++).\r\n\r\nyes.\r\n[eclipse 4]: analyze(qsort(+,-)).\r\n\r\n% Analysed 4 call patterns of 3 predicates in 0.13 sec\r\n% Number of pending goals: 54\r\n% Global Stack used:       35968\r\n:- mode partition(?, ?, -, -).\r\n:- mode qsort(+, -).\r\n:- mode qsort(+, -, +).\r\n\r\nyes.\r\n</PRE>\r\n</blockquote>\r\nRestrictions: Programs that use coroutining features cannot be analysed.\r\n<P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}