{"url": "https://www.ics.uci.edu/~theory/269/170609a.html", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n<html>\n<head>\n<title>Theory Seminar, June 9, 2017</title>\n<link rel=\"stylesheet\" href=\"../stylesheet.css\" type=\"text/css\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n\n<body>\n<p><a href=\"/~theory/\"><img src=\"/~theory/logo/CATOC2.jpg\" \nalt=\"ICS Theory Group\"></a></p>\n\n<h2><a href=\"/~theory/269/\">Spring 2017: Theory Seminar</a><br>\nBren Hall, Room 1423, 1:00pm</h2>\n\n<hr>\n\n<h2>June 9, 2017:</h2>\n<h1>\n2-3 Cuckoo Filters for Faster Triangle Listing and Set Intersection\n</h1>\n<h2>\nGrady Yu\n</h2>\n\n<p>\n<b>Abstract:</b>\nWe introduce new dynamic set intersection data structures,\nwhich we call 2-3 cuckoo filters and hash tables. These\nstructures differ from the standard cuckoo hash tables and\ncuckoo filters in that they choose two out of three locations\nto store each item, instead of one out of two, ensuring\nthat any item in an intersection of two structures will\nhave at least one common location in both structures. We\ndemonstrate the utility of these structures by using them\nin improved algorithms for listing triangles and answering\nset intersection queries in internal or external memory. For\na graph G of n vertices and m edges, our internal-memory\ntriangle listing algorithm runs in O(m(\u03b1(G) log w)/w + k)\nexpected time, where \u03b1(G) is the arboricity of G, w is the\nnumber of bits in a machine word, and k is the number\nof output triangles. Our external-memory algorithm uses\nO(sort(n \u03b1(G)) + sort(m(\u03b1(G) log w)/w) + sort(k)) expected\nnumber of I/Os.\n</p>\n\n<p>\n<a href=\"http://dl.acm.org/authorize.cfm?key=N37877\">PODS\nConference paper</a>, by\nDavid Eppstein, Michael T. Goodrich, Michael Mitzenmacher, and Manuel R. Torres.\n</p>\n\n</body>\n</html>\n\n", "encoding": "utf-8"}