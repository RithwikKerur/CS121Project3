{"url": "https://www.ics.uci.edu/~jacobson/ics21/LabManual/09-Assignment4.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n    \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<meta name=\"Generator\" content=\"Microsoft Word 97/98\">\n<title>A Donation to the Music Archive</title>\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\">\n</head>\n\n<body>\n\n<div class=\"title\">\n<center>\n<h2>A Donation to the Music Archive</h2>\n<h4>Lab Assignment 4<br>\nto prepare for Lab Exam 4</h4>\n</center>\n</div>\n\n<p>This lab gives you practice with simple nested data structures and formatted console output. You also gain additional practice in using ArrayLists and classes others have written.</p>\n\n<div class=\"section\">\n<hr>\n<h3>Program Requirements</h3>\n</div>\n\n<p>A serious collector of recorded music has left his collection to a music archive. You&#146;ve been hired to create a title index and some &#147;media counts&#148; for the collection, using the information from a file that lists the donated items. The archive needs the title index to easily find items; it needs the counts to determine how many storage shelves are required for each kind of media.</p>\n\n<p>The archive has begun making a catalog of the donated items. A catalog entry consists of an accession number (a unqiue identifier), the work&#146;s title, and the kind of media the music is on, such as paper (a book or pages of sheet music) or vinyl record(s). An accession number is no more than 10 characters, and can be made up of digits and/or letters (and no other symbols). The title is no longer than 50 characters and always starts with a capital letter; it never contains a semicolon (for reasons that will become clear shortly). The media categories are each designated by a single uppercase letter:\n<pre>\nLetter   Category\nC        Compact media\nP        Paper (sheet music, books)\nV        Shellac & vinyl records\nW        Wax cylinder\n</pre>\n<div class=\"section\">\n<hr>\n<h3>Technical Details</h3>\n</div>\n<p>You&#146;ve worked out with your archive contact that the input file given to you will be a text file, called <font class = \"codeFaceSmall\">music.txt</font>. Each donated item&#146;s information is on one line (and there is only donated item per line). Each line will have the form<br><br>\n<i>acccession number</i>; <i> title</i>; <i>media category code</i><br><br>\nthat is, a line is formed by an accession number, a title, and a media category code, with these three fields separated by a semicolon (;) and a space. (There is no &#147;;&#148; or space at the end of the line.) Each line will end with the standard PC end-of-line mark&mdash;that is, a carriage return character followed by a line feed character; in Java terms, the characters<font class = \"codeFaceSmall\"> \\r\\n</font>.</p>\n\n<p> The provided music file will have been run though a testing program to ensure its format is correct and that its fields follow the specifications given for them. You can be confident that the music file will be in the correct format to be fed into your program.</p>\n\n<p>In the Eclipse project, you will find the MusicFile, a class containing the methods needed to properly process the music file&#151;to open it, read a line of information from it, and close it. Since MusicFile is provided as a class file, the project also contains the document <font class = \"codeFaceSmall\">MusicFileDoc.txt</font>; it describes MusicFile&#146;s public methods.\n</p>\n\n<p>The index is to be placed into a text file called <font class = \"codeFaceSmall\">index.txt</font>. It will have the information about each musical item on one line, nicely formatted, and be in alphabetical order by title. The details of writing to and formatting the lines of the index file have been encapsulated in the class IndexFile, which has already been written and is in the project file;  <font class = \"codeFaceSmall\">IndexFileDoc.txt</font> documents its public methods.</p>\n\n<p>The counts are to be displayed in the console window in a neat, easy-to-read arrangement, after the index file is constructed (and stored). Each count is labeled so the user knows the media to which the count refers. </p>\n\n<p>The actual list of music will be provided to you at a later date, as the cataloging of the collection is ongoing. So, you will have to test your program using a &#147;fake&#148; list. We&#146;ve provided one for you, called <font class = \"codeFaceSmall\">music.txt</font>. You should also test your program on other test lists you put together, ones designed to try and &#147;break&#148; your program. (And if they do not break your code, then you have reasonably certainty that the indexing part of your program works correctly.) Especially, try music files that are empty; have one, two or three items; place one item in every bucket; add a new item before all items in a bucket or after all items in a bucket...any and all cases that might uncover a potential mistake.</p>\n\n<p>The program&#146;s major steps are straight-forward: \n<ul>\n<li>Construct the music file, index file, and structure to sort the music items, the MusicList.</li>\n<li> Open the music file; for each line of the music file, read in its fields and make a MusicItem object out of them. </li>\n<li>Place that item into the intermal MusicList structure; MusicList is cleverly structured so that when an item is added to it, that item is in the correct order with respect to the others.</li> \n<li>As you read each item, examine its media code and update the appropriate count.</li> \n<li>Once all items are read, open the index file. Then, for each item in the music list, pass it to the method that writes a line to the index file. \nClose the files when you process the last item on the music list. Print a message telling the user the name of the index file (so the user can find it).</li>\n<li>Print out the media counts, and compute and print the count of all the items,\nall labeled so the user knows what&#146;s what.</li></p>\n</ul>\n<p>When you create <font class = \"codefacesmall\">index.txt</font> for the first time (or re-create it when it has been deleted) you will likely need to select your project folder and issue the <font class = \"codefacesmall\">Refresh</font> command (it&#146;s in the <font class = \"codefacesmall\">File</font> menu, among other places) to see it in the Package Explorer.</.p>\n\n<p>After you run the program, if you open<font class = \"codefacesmall\"> index.txt</font> in the editing window, you may very well be told the &#147;resource is out of sync with the file system... .&#148 This occurs because the editor has the old version of the file in its memory, but knows the version on disk has changed. Just hit F5 to display the current contents of the index file. And if you run the program with <font class = \"codefacesmall\">index.txt</font> file open in the editor window, when you go back to look at its contents (after the program completes) you&#146;ll likely see a dialog box warning you that &#147;The file...has been changed on the file system&#148 and asking if you want to &#147;replace the editor contents with these changes?&#148 Click on <font class = \"codefacesmall\">Yes</font>; you will then see the current contents of <font class = \"codefacesmall\">index.txt</font> in the window.</p>\n\n<p>The files discussed above, along with a number of Java skeleton programs we&#146;ve provided, are in the zipped Eclipse project file\n<a href=\"http://www.ics.uci.edu/~jacobson/ics21/LabManual/LabFiles/21Lab4.zip\"><font class = \"codefacesmall\"><font class = \"codefacesmall\">21Lab4.zip</font></font></a>. Using the same procedure that you followed previously, unzip the file and import this project into your Eclipse workspace.</p>\n\n\n<p>A hint: You will probably find the String method <font class = \"codeFaceSmall\">compareTo()</font> quite useful. <font class = \"codeFaceSmall\">s.compareTo(t)</font>, with <font class = \"codeFaceSmall\">s</font> and <font class = \"codeFaceSmall\">t</font> being Strings, returns 0 if <font class = \"codeFaceSmall\">s</font> and <font class = \"codeFaceSmall\">t</font> have the same value, a number less than 0 if <font class = \"codeFaceSmall\">s</font> comes before <font class = \"codeFaceSmall\">t</font> in alphanumeric order, and a number greater than 0 if <font class = \"codeFaceSmall\">s</font> comes after <font class = \"codeFaceSmall\">t</font>. This method comes in handy when figuring out where to place a music item in the music list so that ordering by title is maintained.</p>\n\n<p>An admonition: There are two methods in the ArrayList class called <font class = \"codefacesmall\">add</font>. <font class = \"codefacesmall\">add(item)</font> adds an item to the end of an ArrayList. <font class = \"codefacesmall\">add(i, item)</font> adds an item at position <i>i</i> of an ArrayList, moving all items from <i>i</i> to the end of the list &#147;over by one.&#148; You will likely need to use both of these in your program; do not confuse them!</p>\n\n<div class=\"section\">\n<hr>\n<h3>About Lab Exam 4</h3>\n</div>\n\n<p>Lab Exam 4 will be very similar, but perhaps not identical, to the program you have been asked to write for this assignment. The lab exam will ask you to complete one or more of the following methods:</p>\n\n<ul>\n<li>The Bucket constructor</li>\n<li>Bucket.addItem</li>\n<li>The MusicItem constructor</li>\n<li>The MusicList constructor</li>\n<li>MusicList.addItem</li>\n<li>MusicList.updateCounts</li>\n<li>The MusicManager constructor</li>\n<li>MusicManager.makeIndexAndDisplayCounts</li>\n<li>MusicManager.makeMusicIndex()</li>\n<li>MusicManager.writeMusicIndex()</li>\n<li>MusicManager.displayCounts</li>\n</ul>\n\n<hr>\n<div class=\"history\">\n<br>Written by Norman Jacobson for ICS 21 Fall 2004, July 2004.\n<br>Minor revisions, by Norman Jacobson for ICS21 Winter 2005, December 2004.\n<br>Rvised to reflect encapsulation of file handling routines, by Norman Jacobson for ICS21 Fall 2006, November 2006.\n<br>Minor edits for clarity, by Norman Jacobson, December 2006 and September 2008\n<br>Minor editing to reflect use of Eclipse and for improved clarity, by Norman Jacobson, September 2009. \n<br>&nbsp;&nbsp;Includes some text adapted from Alex Thornton's Lab 4 for ICS 21 Summer 2009.\n<br>Minor typos fixed, by Norman Jacobson, September 2010.\n<br>Revised to remove requirement of status messages (processing is fast enough that users <br>&nbsp;&nbsp;will not wonder if program is hung up), and to make explicit the requirement to display\n<br>&nbsp;&nbsp;the name of the index file, by Norman Jacobson, December 2010.\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}