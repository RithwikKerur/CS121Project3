{"url": "https://www.ics.uci.edu/~pattis/ICS-21/programs.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Sample Programs</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Sample Programs</h1>\r\n<p>\r\n<h2>Introduction to Computer Science I\r\n<br>\r\nICS-21: Lecture A/Labs 1-3<br>\r\nSpring 2012<br>\r\n</h2><p>\r\n</center>\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<p>\r\nThe following is a list of zipped Eclipse programming project files (more\r\n  might be added during the semester).\r\nPlease feel free to download, unzip, and study these programs (both their code\r\n  and their run-time behavior).\r\nProgrammers gain tremendous insight into all facets of programming by studying\r\n  the code of other programmers (especially those with more experience; and I\r\n  am happy to improve my code based on your observations -nothing is perfect).\r\nA good programmer typically makes elegant use of the required language\r\n  features, resulting in smaller, more elegant code.\r\n<p>\r\nAll downloaded projects are listed alphabetically.\r\nAll are zip files, so unzip them first.\r\nMost project files require the standard course library \r\n (<b>edu.uci.ics.pattis.introlib</b>;\r\n if you followed the Eclipse installation instructions, you should be fine with\r\n this <b>jar</b> file: reread the direction if necessary).\r\n<p>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n<p>\r\n\r\n\r\nDownload: <a href=\"programs/arraydemo.zip\">Array Demonstration</a><br>\r\nThis program shows how to declare, initialize, and manipulate simple\r\n  arrays of <b>int</b>/<b>String</b> values using a variety of <b>for</b> \r\n  loops.\r\n<p>\r\n\r\nDownload: <a href=\"programs/simple2darraydemo.zip\">\r\n          2-D Array Demonstration</a><br>\r\nThis program shows how to declare, initialize, and manipulate simple\r\n  2-d (rectangular) arrays of <b>int</b> values using a variety of\r\n  <b>for</b> loops.\r\n<p>\r\n\r\nDownload: <a href=\"programs/average.zip\">Average</a><br>\r\nThe Average program prompts the user to enter the name of a file containing\r\n  test score date; then it reads that file (starting with the maximum\r\n  possibe score for the test) followed by a sequence of scores ended by the\r\n  sentinel <b>-1</b>.\r\nFinally, it prints some statistics about the scores in this file.\r\n<p>\r\n\r\nDownload: <a href=\"programs/backtracking.zip\">Backtracking</a><br>\r\nThese programs use a generalized backtracking search to search an implicit\r\n  game tree.\r\nSee the <b>backTrack</b> package, which contains the <b>Problem</b> interface,\r\n  and the <b>Solver</b> class, which solves any problem expressible by a class\r\n  implementing this interface.\r\nThe <b>NQueens</b> package contains a <b>NQueens</b> class and a simple\r\n  application that uses <b>Solver</b> to solve it (how to place N queens on\r\n  a chessboard so that none can attack another).\r\nThe <b>Satifiability</b> package contains a <b>Satisfiability</b> class and a \r\n  simple application that uses <b>Solver</b> to solve it (how to assign T/F\r\n  values to variables in a formula to satisfy it -make it evaluated to true).\r\nThe <b>Sudoku</b> package contains a <b>Sudoku</b> class and a simple\r\n  application that reads a Sudoku puzzle and uses <b>Solver</b> to solve it\r\n (how to assign 1-9 values to cells in a Sudoku puzzle to satisfy its\r\n constraints).\r\n<p>\r\n\r\nDownload: <a href=\"programs/bouncingballs.zip\">Bouncing Balls</a><br>\r\nThe program is implemented using the Model-View-Controller pattern.\r\nIt simulate balls bouncing in a box.\r\nThe user can create new balls by clicking in the box.\r\nThe user also can press buttons to start/stop/reset the simulation.\r\n<p>\r\n\r\nDownload: <a href=\"programs/classexamples.zip\">\r\n  Class Examples</a><br>\r\nThis program illustrates how to construct and use (call methods on) objects\r\n   from a variety of simple classes:\r\n  <b>DiceEnsemble</b>, \r\n  <b>StringTokenizer</b>, \r\n  <b>Timer</b>, \r\n  <b>TypedBufferReader</b>, \r\n  <b>DecimalFormat</b>, \r\n  <b>BigInteger</b>, \r\n  <b>Integer</b>, and \r\n  <b>String</b>.\r\n<p>\r\n\r\nDownload: <a href=\"programs/colorcalculator.zip\">Color Calculator</a><br>\r\nThe program is implemented using the Model-View-Controller pattern.\r\nIt allows us to see a color (and its hexidecimal value) as we change its red,\r\n  green, and blue components in the range [0..255].\r\nThese colors are all represented by <code>ModularCounter</code>s, and\r\n  the <b>Model</b> class has a <b>main</b> method so that it can be\r\n  tested independently form the Controller and View.\r\nNote, the hex value can be used in HTML to specify a color.\r\n<p>\r\n\r\n<!-- Now a programming assignment\r\nDownload: <a href=\"programs/collatzwithobjects.zip\">\r\n  Collatz Conjecture</a><br>\r\nThe Collatz conjecture states: starting with any positive number, repeat the\r\n  process \"If it is even, halve it; if it is odd, multiply it by three and\r\n  add one\" and eventually the remaining value reduces to one.\r\nNo one has been able to prove this conjecture, but a short program allows you\r\n  to investigate it.\r\nIt is interesting to obseve the number of cycles required to reduce the\r\n  starting number to 1, looking for a pattern.\r\nThis program uses the <code>BigInteger</code> class to allow arbitrarily large\r\n  values (not restricted to the bounded type <b>int</b>) and the\r\n  <code>Timer</code> class to keep track of the processing time.\r\n<p>\r\n--->\r\n\r\nDownload: <a href=\"programs/collatzfordebugging.zip\">\r\n  Collatz Conjecture <b>FOR DEBUGGER HANDOUT</b></a><br>\r\nThe Collatz conjecture states: starting with any positive number, repeat the\r\n  process \"If it is even, halve it; if it is odd, multiply it by three and\r\n  add one\" and eventually the remaining value reduces to one.\r\nNo one has been able to prove this conjecture, but a short program allows you\r\n  to investigate it.\r\nIt is interesting to obseve the number of cycles required to reduce the\r\n  starting number to 1, looking for a pattern.\r\nUnlike the program above, this is a simpler one, using the <code>int</code>\r\n  type, useful for illustrating the debugger.\r\n<p>\r\n\r\nDownload: <a href=\"programs/controllers.zip\">\r\n  Controller Demonstrations</a><br>\r\nDemonstrations of using Controllers in the MVC pattern.\r\nThe <b>mouse</b> project illustrates all mouse controllers (each associated \r\n  with a trivial behavior).\r\nThe <b>grabbag</b> project illustrate many other controllers:\r\n  <b>JButton</b>, <b>JTextField</b>, <b>JRadioButton</b>, <b>JTextArea</b>,\r\n  <b>JScrollPane</b>, <b>RadioButtonPanel</b>, and <b>SliderPanel</b>.\r\n<p>\r\n\r\nDownload: <a href=\"programs/crapsstatistics.zip\">\r\n  Craps Statistics</a><br>\r\nThis program prompts the user for the number of craps games to play (craps\r\n  is a dice game whose rules are explained in the opening comment in the\r\n  Application.java file).\r\nIt then simulates that many games of craps, printing the number of wins,\r\n  losses, dice throws, elapsed time, and playing speed.\r\nThis program uses the <code>DiceEnsemble</code> and <code>Timer</code> \r\n  classes.\r\n<p>\r\n\r\nDownload: <a href=\"programs/crapsstatisticsfordebugging.zip\">\r\n  Craps Statistics <b>FOR DEBUGGER HANDOUT</b></a><br>\r\nThis program prompts the user for the number of craps games to play (craps\r\n  is a dice game whose rules are explained in the opening comment in the\r\n  Application.java file).\r\nIt then simulates that many games of craps, printing the number of wins,\r\n  losses, dice throws, elapsed time, and playing speed.\r\nUnlike the program above, this is a simpler one, not using classes,\r\n  useful for illustrating the debugger.\r\n<p>\r\n\r\nDownload: <a href=\"programs/datecalculator1.zip\">\r\n  Date Calculator #1</a><br>\r\nA small program for for computing some information about dates.\r\nThis program illustrates how to use five <b>static</b> methods and twelve\r\n  <b>static</b> fields written directly in the <b>Application</b> class.\r\n<p>\r\n\r\nDownload: <a href=\"programs/datecalculator2.zip\">\r\n  Date Calculator #2</a><br>\r\nA small program for for computing some information about dates.\r\nThis program illustrates how to use five <b>static</b> methods and twelve\r\n  <b>static</b> fields written in the <b>DateUtility</b> class (included in\r\n  this project folder).\r\nWhen learning to write classes (that are just libraries of <b>static</b>\r\n   methods), this is a good place to start.\r\n<p>\r\n\r\nDownload: <a href=\"programs/dicedemo.zip\">\r\n  DiceEnsemble Demonstration</a><br>\r\nA driver program for testing the <code>DiceEnsemble</code> class\r\n  (from the course library).\r\n<p>\r\n\r\nDownload: <a href=\"programs/directorylister.zip\">\r\n  Directory Lister</a><br>\r\nA program that lists the contents of any folder and computes statistics about\r\n  its subfolders and files.\r\nThis program uses Java's <b>File</b> class (defined in the <b>java.io</b>\r\n  package), which represents an N-ary tree by using arrays.\r\nThese N-ary trees are processed by both iteration and recursion.\r\n<p>\r\n\r\nDownload: <a href=\"programs/expressiontrees.zip\">\r\n  Expression Trees</a><br>\r\nA program that reads an expression in standard Java form (literals only,\r\n  no variables) and then builds an expression tree for it (using parentheses\r\n  and operator precedence to guide it) and then evaluates the tree and\r\n  prints its postfix form.\r\nIt uses a <b>SimpleStack</b> as an critical data structure.\r\n<p>\r\n\r\nDownload: <a href=\"programs/extendedexpressiontrees.zip\">\r\n  Expression Trees (Extended)</a><br>\r\nA program that reads an expression in standard Java form (<b>BigInteger</b>\r\n  literals and variables) and then builds an expression tree for it (using\r\n  parentheses, operator precedence, and associativity to guide it) and then\r\n  evaluates the tree and prints its postfix form (and shows the variable\r\n  <b>Map</b>).\r\nIt uses a <b>SimpleStack</b> as an critical data structure.\r\n<p>\r\n\r\nDownload: <a href=\"programs/fileinput.zip\">\r\n  File Input</a><br>\r\nA simple program illustrating the pattern used to read input files (including\r\n  a <b>try-catch</b> statment to terminate the file reading loop when there is\r\n  no more input).\r\nThis program actually recovers from errors on a line by line basis, as\r\n  described in the lecture on the\r\n  <a href=\"lectures/usingclasses/lecture.html#RealFileIO\" target=\"_blank\">\r\n  TypedBufferReader</a> class for Java file input.\r\n<p>\r\n\r\nDownload: <a href=\"programs/hashing.zip\">\r\n  Testing <b>Hashing</b> on Strings</a><br>\r\nTwo drivers.\r\nOne tests chained hashing on Strings in two ways: random Strings\r\n  and all String up to N characters; one tests open hashing on\r\n  random Strings with linear or quadratic probing.\r\nThere are lots of ways to run these drivers (or just choose the\r\n  defaults).\r\nIf you want, use your own hashing function, testing its speed and\r\n  ability to put distribute the values among the bins.\r\n<p>\r\n\r\nDownload: <a href=\"programs/interfacedemo.zip\">Interface Demonstration</a><br>\r\nA simple program illustrating two Java interfaces <b>DecisionInt</b> and\r\n   <b>Univariate</b> and how they are used, as described in the lecture on the\r\n  <a href=\"../lectures/interfaces/lecture.html#\" target=\"_blank\">\r\n   Interfaces</a>.\r\nThis is the beginning of real object-oriented programming.\r\nThe name of the interface is uses as a parameter type in a method, and many\r\n  classes are defined to <b>implement</b> that interface.\r\n<p>\r\n\r\nDownload: <a href=\"programs/java5examples.zip\">\r\n  Java 1.5 Examples</a><br>\r\nIllustrates various features new to Java 1.5: extended for loops,\r\n  autoboxing, var-args, c-style formatting, and using generic collection\r\n  class.\r\n<p>\r\n\r\nDownload: <a href=\"programs/junitstackdemo.zip\">\r\n  JUnit: Stack Test</a><br>\r\nUses JUnit to test a stack class (which is correct).\r\nI recommend that you insert bugs into the stack class and see\r\n  if they are diagnosed (so you will get familiar with\r\n  interpreting errors from JUnit.\r\nSee also the <b>Course Software</b> download <b>JUnit Testing Framework</b>\r\n  (reachable via the <b>Online Resources</b> link).\r\n<p>\r\n\r\nDownload: <a href=\"programs/layouts.zip\">\r\n  Layout Manager Demonstrations</a><br>\r\nDemonstrations for four standard Layout Managers: <b>FlowLayout</b>,\r\n  <b>BoxLayout</b>, <b>GridLayout</b> and <b>BorderLayour</b>.\r\nAlso includes a demonstration of recursively combining these <b>JPanel</b>s\r\n  and their layouts.\r\nFinally, includes a demonstration <b>TwoColumnLayout</b>, showing how to write\r\n new, simple layout managers.\r\n<p>\r\n\r\nDownload: <a href=\"programs/mindistance.zip\">\r\n  Minimum Distance between Points: 3 Algorithmis</a><br>\r\nA driver program for using the three algorithms on arrays of\r\n   randomly generated <b>Point2D.Double</b>s.\r\nThe brute force algorithm is O(N^2), the sorting/recursive algorithm\r\n  is O(NlogN), and the hash algorithm is O(N), although empirically\r\n  it runs more slowly than the sort/recursive algorithm.\r\n<p>\r\n\r\nDownload: <a href=\"programs/modularcounterdemo.zip\">\r\n  ModularCounter Demonstration</a><br>\r\nA driver program for testing the <code>ModularCounter</code> class\r\n  (from the <b>introlib</b> library).\r\n<p>\r\n\r\nDownload: <a href=\"programs/oolistdemo.zip\">\r\n  Object-Oriented List Demo</a><br>\r\nA driver program for testing Object-Oriented Linked Lists.\r\nIncluded are interfaces for list algorithms, the declaration\r\n  of the classes needed to implement linked lists, and\r\n  various classes that specify algorithms.\r\nUses the singleton and strategy pattern.\r\nSee also\r\n  <a href=\"http://www.exciton.cs.rice.edu/research/SIGCSE99/PatDatAlgo.doc\">\r\n  Patterns for Decoupling Data Structurs and Algorithms</a>\r\n<p>\r\n\r\nDownload: <a href=\"programs/orderedcollection.zip\">\r\n  Ordered Collection Demonstration</a><br>\r\nA driver program for testing all the ordered collection classes:\r\n  <code>ArrayStack</code>, <code>ListStack</code>,\r\n  <code>ArrayQueue</code>, <code>ListQueue</code>,\r\n  <code>ArrayPriorityQueue</code>, and <code>ArrayUnsortedPriorityQueue</code>.\r\nAll the relevant interfaces, abstract classes, and classes are included in\r\n  this driver, which can generically test each of these concrete classes.\r\n<p>\r\n\r\nDownload: <a href=\"programs/positionalshapedemo.zip\">\r\n  Positional Shape Inheritance Demonstration</a><br>\r\nA program using abstract classes and inheritance.\r\nThe classes in this program is described in the <b>first</b> design in the\r\n  <a href=\"../lectures/abstractclasses/index.html\" target=\"_blank\">\r\n    Abstract Classes</a> lecture.\r\n<p>\r\n\r\nDownload: <a href=\"programs/positionalshapedemo2.zip\">\r\n  Positional Shape Inheritance Demonstration 2</a><br>\r\nA program using interfaces, abstract classes, and inheritance.\r\nThe classes in this program is described in the <b>second</b> design in the\r\n  <a href=\"../lectures/abstractclasses/index.html\" target=\"_blank\">\r\n    Abstract Classes</a> lecture.\r\n<p>\r\n\r\nDownload: <a href=\"programs/rationaldemo.zip\">\r\n  Rational Demonstration</a><br>\r\nA driver program for testing the <code>Rational</code> class\r\n  (from the <b>introlib</b> library).\r\n<p>\r\n\r\nDownload: <a href=\"programs/reflectivetestdriver.zip\">\r\n  Reflective Test Driver</a><br>\r\nUsing Java's powerful reflection mechanism, this test driver\r\n  allows you to test any Java class!\r\nJust enter its full name (prefixed by its package) and\r\n  then you'll get to choose a constructor (and arguments)\r\n  and repeatedly be able to call methods on it (and supply arguments).\r\nTruly amazing!\r\n<p>\r\n\r\nDownload: <a href=\"programs/simpledicedemo.zip\">\r\n  SimpleDiceEnsemble Demonstration</a><br>\r\nA driver program for testing the <code>SimpleDiceEnsemble</code> class\r\n  (a slightly simpler version than the one in the <b>introlib</b> library;\r\n  it doesn't\r\n  use arrays and has no <b>getPips</b> method) which is discussed in the\r\n  <a href=\"lectures/writingclasses/index.html\"  target=\"_blank\">\r\n    Writing Classes</a> lecture.\r\n<p>\r\n\r\nDownload: <a href=\"programs/simplequeuedemo.zip\">\r\n  SimpleQueue Demonstration</a><br>\r\nA driver program for using the <b>SimpleQueue</b> collection class\r\n    described in the lecture on the\r\n  <a href=\"lectures/arrays1d/lecture.html#Queue\" target=\"_blank\">\r\n    1-d Arrays...</a>.\r\nIt declares an instance variable that is an array that grows to\r\n   acccomodate all the required references stored in the queue.\r\nQueues support first-in/first-out behavior.\r\n<p>\r\n\r\nDownload: <a href=\"programs/simplequeuedemo with List.zip\">\r\n  SimpleQueue Demonstration with List</a><br>\r\nA driver program for using the <b>SimpleQueue</b> collection class\r\n    described in the lecture on the\r\n  <a href=\"lectures/arrays1d/lecture.html#Queue\" target=\"_blank\">\r\n    1-d Arrays...</a>.\r\nIt declares an instance variable that is an array that grows to\r\n   acccomodate all the required references stored in the queue.\r\nQueues support first-in/first-out behavior.\r\n<b>Note, this version is implemented with a List,not an array</b>\r\n<p>\r\n\r\nDownload: <a href=\"programs/simplequeuewithiteratordemo.zip\">\r\n  SimpleQueue with Iterator Demonstration</a><br>\r\nA driver program for using the <b>SimpleQueue</b> collection class\r\n    described first in the lecture on the\r\n  <a href=\"lectures/arrays1d/lecture.html#Queue\" target=\"_blank\">\r\n    1-d Arrays...</a> and then modified to include iterators in the lecture\r\n  <a href=\"lectures/collectionsi/index.html\" target=\"_blank\">\r\n    Collection Classes: Basics</a>.\r\nIt declares an instance variable that is an array that grows to\r\n   acccomodate all the required references stored in the stack.\r\nQueues support first-in/first-out behavior.\r\nThe menu has been enlarged to include testing the iterator inner-class.\r\n<p>\r\n\r\nDownload: <a href=\"programs/simplestackdemo.zip\">\r\n  SimpleStack Demonstration</a><br>\r\nA driver program for using the <b>SimpleStack</b> collection class\r\n    described in the lecture on the\r\n  <a href=\"lectures/arrays1d/lecture.html#Stack\" target=\"_blank\">\r\n    1-d Arrays...</a>.\r\nIt declares an instance variable that is an array that grows to\r\n   acccomodate all the required references stored in the stack.\r\nStacks support last-in/first-out behavior.\r\n<p>\r\n\r\nDownload: <a href=\"programs/examBST-size.zip\">\r\n  size in BST</a><br>\r\nA solution to a problem even too simple to put on the programming exam, for\r\n  computing the <b>size</b> of a <b>BST</b> using the classes appearing\r\n  on the second programming exam.\r\n<p>\r\n\r\nDownload: <a href=\"programs/sortingwithinterfaces.zip\">\r\n  Sorting (with Interfaces) Demonstration</a><br>\r\nA driver program for using the <b>Arrays.sort</b> method on arrays of\r\n   <b>Point</b>s.\r\nIt includes classes that implement the <b>Comparator</b> interface,\r\n   for sorting by X coordinate, by Y coordinate, by distance from the\r\n   origin, and by angle from the origin (in all cases, both increasing\r\n   and decreasing through the use of the <b>ReverseAComparator</b>\r\n   decorator.\r\n<p>\r\n\r\nDownload: <a href=\"programs/sorting.zip\">Sorting Methods Demonstraction</a><br>\r\nThis program is a driver for the sorting methods in the <b>Sort</b> class\r\n  (included in this download).\r\nIt allows the testing and timing of all these sort methods, and\r\n  <b>Arrays.sort</b>.\r\nIt also contains an executable, that you can run immediately.\r\n<p>\r\n\r\nDownload: <a href=\"programs/statespacesearch.zip\">State Space Search</a><br>\r\nThese programs use a generalized state-space searching to solve various\r\n  various problems involving applying operators.\r\nSee the <b>stateSpace</b> package, which contains the <b>Problem</b> interface,\r\n  and the <b>Solver</b> class, which solves any problem expressible by a class\r\n  implementing this interface.\r\nThe <b>puzzleNxN</b> package contains a <b>PuzzleNxN</b> class and a simple\r\n  application that uses <b>Solver</b> to solve it (how to acheive a standard\r\n  puzzle configuration).\r\nThe <b>waterJugs</b> package contains a <b>WaterJugs</b> class and a simple\r\n  application that uses <b>Solver</b> to solve it (how to achieve a certain\r\n  configuration).\r\n<p>\r\n\r\nDownload: <a href=\"programs/supermarket.zip\">Supermarket Simulation</a><br>\r\nThis program simulates a supermarket using queues (for the checkout lines)\r\n  and priority queues (for the scheduling events; the event to happen most\r\n  closely in the future has the highest priority).\r\nThe simulated supermarket is specified by an array storing the maximum number\r\n  of items that can be checked-out in each line.\r\nThe events are \"enter the store and start shopping\" (at random intervals),\r\n  \"enter a checkout line\" (based on the number of items bought, the sizes\r\n  of the lines, and how many items are allowable), start checkout process\r\n (keep track of shopper's wait time: from entering a line to checking out),\r\n  and \"exit store\".\r\nThe unhappiness of a custom is computed (line wait time/shop time) and\r\n  an average over all shoppers is reported.\r\nThe program also reports the running time and simulation speed (# of events\r\n  processed/second).\r\n<p>\r\n\r\nDownload: <a href=\"programs/threads.zip\">Thread Demonstrations</a><br>\r\nThis folder contains four small programs that demonstrate threads:\r\n<b>Thread</b>/<b>Runnable</b> illustrate two ways to use threads.\r\n<b>Timer</b> illustrates how to use an action listener which is activated\r\n  regularly.\r\n<b>Animation</b> shows how such a time can be used to run a tiny GUI animation.\r\n<p>\r\n\r\nDownload: <a href=\"programs/treeheights.zip\">Tree Heights</a><br>\r\nThis folder contains a program and an executable that builds random trees\r\n  and shows a histogram of their heights.\r\nIt illustrates the heights of random trees, which are much closer to\r\n  their minimum than their maximums.\r\n<p>\r\n\r\nDownload: <a href=\"programs/tripplanner.zip\">Trip Planner</a><br>\r\nThis program prompts the user for information about the price of gas\r\n  and the length of a trip and computes the number of tanks of gas\r\n  needed, the cost, and the amount of few remaining in the tank on arrival.\r\n<p>\r\n\r\nDownload: <a href=\"programs/views.zip\">\r\n  View Demonstrations</a><br>\r\nDemonstrations of using <b>JFrame</b>s and <b>JPanel</b>s.\r\nThe <b>JFrame</b> demonstration shows how to create, position, size,\r\n  and label windows.\r\nThe <b>JPanel</b> demonstrations show how to draw figures, put text,\r\n  put icons (and animate them), and put buttons into <b>JPanel</b>s.\r\n<p>\r\n\r\nDownload: <a href=\"programs/xref.zip\">X (cross) Reference</a><br>\r\nThis program produces a cross-reference list of any text file.\r\nIt uses the map and list collection classes to do so: the\r\n  <b>Application</b> class uses non-generic collections (pre Java 1.5)\r\n  and the <b>GenericApplication</b> class uses Java 1.5 Generic\r\n  collections (and one Java 1.5 <b>for</b> loop).\r\nThe download includes a complete copy of Mark Twain's \"Tom Sawyer\"\r\n  and the correct output for this input.\r\n<p>\r\n\r\n<!--Download: <a href=\"programs/faceflasher.zip\">Face Flasher</a>--->\r\nDownload: <a href=\"../misc/preclass/midtermgrades.xls\">Face Flasher</a>\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}