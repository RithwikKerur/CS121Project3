{"url": "https://www.ics.uci.edu/~emilyo/teaching/info43f2015/homeworks/Homework2.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n  <meta http-equiv=\"Content-Style-Type\" content=\"text/css\">\n  <title></title>\n  <meta name=\"Generator\" content=\"Cocoa HTML Writer\">\n  <meta name=\"CocoaVersion\" content=\"1348.17\">\n  <style type=\"text/css\">\n    p.p1 {margin: 0.0px 0.0px 14.0px 0.0px; text-align: center; font: 18.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p2 {margin: 0.0px 0.0px 15.0px 0.0px; text-align: center; font: 14.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p3 {margin: 0.0px 0.0px 12.0px 0.0px; font: 14.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p5 {margin: 0.0px 0.0px 12.0px 0.0px; font: 14.0px Times; color: #000000; -webkit-text-stroke: #000000; min-height: 18.0px}\n    span.s1 {font-kerning: none}\n    span.s2 {font: 14.0px Times; text-decoration: underline ; font-kerning: none; color: #0000ee; -webkit-text-stroke: 0px #0000ee}\n  </style>\n</head>\n<body>\n<p class=\"p1\"><span class=\"s1\"><b>Inf 43: Introduction to Software Engineering</b></span></p>\n<p class=\"p2\"><span class=\"s1\"><b>Fall, 2015<br>\nHomework 2: Black-Box Testing of PrivatePractice<br>\nDue Wednesday, November 18, 11:55pm (through EEE) <span class=\"Apple-converted-space\">\u00a0</span></b></span></p>\n<p class=\"p2\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\">This assignment is about testing, specifically partitioning the test-input domain for two requirements/use cases.</span></p>\n<p class=\"p3\"><span class=\"s1\">For this assignment, you are required to plan for testing of the PrivatePractice system using a \"black box\" or specification-based testing approach. In particular, you will develop tests for two of the use cases for PrivatePractice, listed below. (These two use cases were not necessarily given in the interviews, so don't worry if you did not include them in your requirements specification.) You will not execute any test cases since there is no code available. Use the following two use cases for PrivatePractice as the requirements specification for this assignment.<br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\"><b>Use Case 1: Calculate Body Mass Index (BMI)</b></span></p>\n<p class=\"p3\"><span class=\"s1\">In this use case, the doctor asks the system to calculate a patient\u2019s BMI. To accomplish this, the user must input three items:</span></p>\n<p class=\"p3\"><span class=\"s1\">1. The \u201cfeet\u201d portion of the patient\u2019s height (must be a valid non-negative number, or else the user will get an error message)</span></p>\n<p class=\"p3\"><span class=\"s1\">2. The \u201cinches\u201d portion of the patient\u2019s height (must be a valid non-negative number, or else the user will get an error message)</span></p>\n<p class=\"p3\"><span class=\"s1\">3. The patient\u2019s weight in pounds (must be a valid non-negative number, or else the user will get an error message)</span></p>\n<p class=\"p3\"><span class=\"s1\">Once all three items are inputted, the user can ask the system to calculate the BMI. Assume that the user interface does not allow any of these three items to be blank (e.g., the button to calculate BMI is grayed out unless all three items are entered.) (Hint: none of your test cases should include a blank entry!)</span></p>\n<p class=\"p3\"><span class=\"s1\">The output of this use case would be their BMI as a floating point number with exactly one digit after the decimal point (round to the nearest tenth). The system should calculate BMI using the following formula:</span></p>\n<p class=\"p3\"><span class=\"s1\">(weight in pounds * 703) / ((height in inches) ^2)</span></p>\n<p class=\"p4\"><span class=\"s1\">For example, for a 6-foot, 3-inch person with a weight of 215 pounds, the formula would become:</span></p>\n<p class=\"p4\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p4\"><span class=\"s1\">(215 * 703) / (75 ^2) = 151,145 / 5,625 = 26.9</span></p>\n<p class=\"p4\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p4\"><span class=\"s1\">Thus, a BMI of 26.9 would be calculated for these inputs.</span></p>\n<p class=\"p4\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p4\"><span class=\"s1\">*Note: Regardless of what your basis is for a particular test case, all test cases for this use case must consist of all three items (feet, inches, weight)</span></p>\n<p class=\"p4\"><span class=\"s1\">*Note 2: If the input results in division by 0, \u201cNaN\u201d is displayed as the BMI.</span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\"><b>Use Case 2: Find Earliest Available Appointments</b></span></p>\n<p class=\"p3\"><span class=\"s1\">In this use case, the patient asks the appointment system to find the (at most) 5 earliest available appointments for the next 5 days. Some assumptions:</span></p>\n<p class=\"p3\"><span class=\"s1\">1. There are 3 doctors that work at the hospital: Dr. Khode, Dr. Kumar, and Dr. Sethi.</span></p>\n<p class=\"p3\"><span class=\"s1\">2. Each doctor works from 8am-5pm every day (with no lunch\u2014sorry guys.)</span></p>\n<p class=\"p3\"><span class=\"s1\">3. Appointments are only schedule at times that end in :00, :15, :30, or :45.<span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\">4. An appointment can be 15-, 30-, or 45-minutes long.</span></p>\n<p class=\"p3\"><span class=\"s1\">5. If there are multiple appointments available at the same time with different doctors, the system will return them in alphabetical order by the doctor\u2019s last name.</span></p>\n<p class=\"p3\"><span class=\"s1\">6. The system should return no more than 5 appointments.</span></p>\n<p class=\"p3\"><span class=\"s1\">7. If there are no appointments matching the criteria, the system will display the message \u201cNo available appointments.\u201d</span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\">For this use case, the user is asked to specify:</span></p>\n<p class=\"p3\"><span class=\"s1\">1. The length of the desired appointment (15, 30, or 45 minutes). This is a mandatory field chosen from a drop-down list that does not allow the field to be left blank or contain any invalid data.</span></p>\n<p class=\"p3\"><span class=\"s1\">2. Their preferred doctor(s). The user can specify 0 or more doctors through checkboxes (which allow no invalid input). This input is optional. If no doctors are checked, the system will search for the earliest appointments available with any doctor.</span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\">The input for each test case is:</span></p>\n<p class=\"p3\"><span class=\"s1\">1. The current schedule (which appointment times are taken for the next 5 days for each doctor)<span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\">2. Appointment length<span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\">3. Preferred doctor (can be left blank).<span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\">For example, let\u2019s first define a schedule, calling it SCHEDULE_A (remember, the times specified here are the times that are <b>already taken</b> by existing appointments).</span></p>\n<p class=\"p3\"><span class=\"s1\">SCHEDULE_A:</span></p>\n<p class=\"p3\"><span class=\"s1\">Khode: Day 1: 8:00am-5:00pm; Day 2: 8:00am-5:00pm; Day 3: 8:00am-5:00pm; Day 4: 8:00am-5:00pm; Day 5: 8:00am-8:30am, 9:15am-5:00pm</span></p>\n<p class=\"p3\"><span class=\"s1\">Kumar: Day 1: none; Day 2: none; Day 3: none; Day 4: none; Day 5: none</span></p>\n<p class=\"p3\"><span class=\"s1\">Sethi: Day 1: 8:30am-10:45am, 11:00am-4:45pm; Day 2: 8:00am-3:15pm, 3:45pm-5:00pm; Day 3: 8:00am-4:45pm; Day 4: 8:00am-5:00pm; Day 5: 10:15am-10:30am, 10:45am-3:15pm<span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p5\"><span class=\"s1\"><span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\">Then, one of my test case inputs might be:<span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\">{SCHEDULE_A,<span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\">45 minutes,</span></p>\n<p class=\"p3\"><span class=\"s1\">Khode/Sethi}.<span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\">The expected output of this test case would be:</span></p>\n<p class=\"p3\"><span class=\"s1\">{Day 5/Sethi: 8:00am-8:45am, <span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\">Day 5/Sethi: 8:15am-9:00am,</span></p>\n<p class=\"p3\"><span class=\"s1\">Day 5/Khode: 8:30am-9:15am,</span></p>\n<p class=\"p3\"><span class=\"s1\">Day 5/Sethi: 8:30am-9:15am</span></p>\n<p class=\"p3\"><span class=\"s1\">Day 5/Sethi: 8:45am\u20149:30am}.<span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\">All of your test cases could use the same schedule, and that would be ok.</span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p3\"><span class=\"s1\">You will follow the equivalence class partitioning approach to black box testing. For each of these two use cases, determine exactly three bases, making sure that each of them is a reasonable criterion that can be used to divide the domain of possible test cases into interesting subdomains. For each basis, <b>list at least three subdomains and two test cases for each subdomain</b>. (&lt;- DO NOT OVERLOOK THIS REQUIREMENT\u2014YOU WILL LOSE BIG POINTS IF YOU DO!) Make sure your subdomains cover the whole range of possible inputs. You should avoid overlapping your subdomains whenever possible.</span></p>\n<p class=\"p3\"><span class=\"s1\">Record your test cases in a collection of 6 test matrices. Your homework should start from the <a href=\"http://www.ics.uci.edu/~emilyo/teaching/info43f2015/homeworks/Homework2Template.docx\"><span class=\"s2\">Homework 2 template</span></a>. Be sure to turn it in as a Word file! DO NOT CHANGE THE FORMAT OF THE TESTING MATRIX. You can add/remove space in between the matrices to keep all of each table on one page, and you can add/remove <b>rows</b> (but not columns) from the matrices. No other edits are allowed. If you do, you will be deducted points. (If you see that an edit is necessary, ask me about it first to makes sure that it's ok.)</span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n</body>\n</html>\n", "encoding": "utf-8"}