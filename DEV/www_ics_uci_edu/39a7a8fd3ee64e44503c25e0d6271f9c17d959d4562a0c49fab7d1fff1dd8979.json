{"url": "https://www.ics.uci.edu/~pattis/ICS-33/lectures/Inherited%20Method%20Calls.txt", "content": "\t  How ModularCounter method calls work with Inheritance\r\n\r\n(nf)   : (not found), check higher base class in inheritance hierarchy\r\nself/m : self parameter in method name (actually bound to m)\r\n\r\n------------------------------------------------------------------------------\r\n\r\n\r\nm = Modular_Counter(2,10)\r\n\r\nCall\t\tm.reset()\r\nFEOOP\t\tModular_Counter.reset(m)\r\n(nf)Inheritance\tCounter.reset(m)\r\nMethod Body\t\tself/m._value = 0\r\n\r\nm._value is now 0\r\n\r\n------------------------------------------------------------------------------\r\n\r\nm = Modular_Counter(2,10)  # inc calls Counter.inc\r\n\r\nCall\t\tm.inc()\r\nFEOOP\t\tModular_Counter.inc(m)\r\nMethod Body (if test)   self/m.value_of()\r\nFEOOP\t\t\tModular_Counter.value_of(self/m)\r\n(nf) Inheritance\tCounter.value_of(self/m)\r\nMethod Body\t\t\treturn self/m._value (2)\r\nMethod Body (if)\tcompares (2) == self._modulus -1 (False, in if)\r\nBody if (False part)\tCounter.inc(self/m)\r\nMethod Body\t \t\tself/m._value += 1\r\n\r\nm._value is now 3\r\n\r\n------------------------------------------------------------------------------\r\n\r\nm = Modular_Counter(9,10) # inc calls reset\r\n\r\nCall\t\tm.inc()\r\nFEOOP\t\tModular_Counter.inc(m)\r\nMethod Body (if)        self/m.value_of()\r\nFEOOP\t\t\tModular_Counter.value_of(self/m)\r\n(nf) Inheritance\tCounter.value_of(self/m)\r\nMethod Body\t\t\treturn self/m._value (9)\r\nMethod Body (if)        compares (9) == self._modulus -1 (True, in if)\r\nBody of if (True part)\tself/m.reset()\r\nFEOOP\t\t\tModular_Counter.reset(self/m)\r\n(nf) Inheritance\tCounter.reset(self/m)\r\nMethod Body\t\t\tself/m._value = 0\r\n\r\nm._value is now 0\r\n\r\n------------------------------------------------------------------------------\r\n\r\nJust the \"interesting parts\" (used above) of these classes.\r\nSee lecture note for all details.\r\n\r\nclass Counter:\r\n    ...\r\n\r\n    def reset(self):\t\t# NOT overridden in Modular_Counter\r\n        self._value = 0\r\n        \r\n    def inc(self):\t\t# Overridden\r\n        self._value += 1\r\n        \r\n    def value_of(self):         # NOT overridden in Modular_Counter\r\n        return self._value\r\n    \r\n    \r\nclass Modular_Counter(Counter):\r\n    ...\r\n\r\n    def inc(self):\r\n        if self.value_of() == self._modulus - 1:\r\n            self.reset()\r\n        else:\r\n            Counter.inc(self)\r\n", "encoding": "ascii"}