{"url": "https://www.ics.uci.edu/~thornton/ics46/ProjectGuide/Project1/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 46 Spring 2018, Project #1: Dark at the End of the Tunnel</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 46 Spring 2018 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 46 Spring 2018<br />\r\n   Project #1: <i>Dark at the End of the Tunnel</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Monday, April 23, 11:59pm</i></b></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Introduction</p>\r\n\r\n<p>As a very young kid, I found myself fascinated by mazes.  Whenever I saw a maze printed on a piece of paper, I was compelled to grab it and try to solve it.  I recall having soft-covered books full of them and, when those weren't satisfying enough, I even tried drawing my own, though with the undeveloped skills I had at the time &mdash; both in terms of being able to design a challenging maze, and also the more fundamental skill of being able to draw a straight line &mdash; it proved to be a difficult proposition.</p>\r\n\r\n<p>While time marched on and I became less enamored with mazes as I got older, I became more interested in computer science, which provided a fresh impetus to consider mazes again; in particular, I considered how software could generate a challenging maze and also figure out automatically how to solve one.  As I learned more about computer science, the solutions became evident, and I eventually found it an interesting problem for my students to solve.  It's funny how things come full-circle sometimes.</p>\r\n\r\n<p>This project asks you to implement one or more classes in C++ that are capable of generating two-dimensional mazes of arbitrary size, along with one or more classes in C++ that are capable of solving them.  The goal is to provide you with more practice and a fuller understanding of how to use recursion to solve real problems, as at least one of your generators and at least one of your solvers is required to use a recursive <i>depth-first</i> algorithm.  It will also provide you with an opportunity to make heavy use of pre-existing classes for which you have no source code, and for which only part of it will have value to you; understanding how existing code works and determining what parts of it can be applied to solve your own problems are important real-world programming skills that you'll need to employ as you move from \"sanitized\" coursework to real-world work, so I'd like to help you to develop those skills here.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Getting started</p>\r\n\r\n<p>Before you begin work on this project, there are a couple of chores you'll need to complete on your ICS 46 VM to get it set up to proceed.</p>\r\n\r\n<p class=\"subtitle\">Refreshing your ICS 46 VM environment</p>\r\n\r\n<p>Even if you previously downloaded your ICS 46 VM, you will probably need to refresh its environment before proceeding with this project.  Log into your VM and issue the command <b>ics46 version</b> to see what version of the ICS 46 environment you currently have stored on your VM.  Note, in particular, the timestamp; if you see a version with a timestamp older than the one listed below, you'll want to refresh your environment by running the command <b>ics46 refresh</b> to download the latest one before you proceed with this project.</p>\r\n\r\n<blockquote><pre>\r\n2018-04-06 22:51:38\r\nProject #1 template added \r\n</pre></blockquote>\r\n\r\n<p>If you're unable to get outgoing network access to work on the ICS 46 VM &mdash; something that afflicts a handful of students each quarter &mdash; then the <b>ics46 refresh</b> command won't work, but an alternative approach is to download the latest environment from the link below, then to upload the file on to your ICS 46 VM using SCP.  (See the <a href=\"../Project0\">Project #0</a> write-up for more details on using SCP.)  Once the file is on your VM, you can run the command <b>ics46 refresh_local NAME_OF_ENVIRONMENT_FILE</b>, replacing <b>NAME_OF_ENVIRONMENT_FILE</b> with the name of the file you uploaded; note that you'd need to be in the same directory where the file is when you run the command.</p>\r\n\r\n<ul>\r\n  <li><a href=\"../../vm/ics46-2018spring-environment.tar.gz\">ics46-2018spring-environment.tar.gz</a></li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Creating your project directory on your ICS 46 VM</p>\r\n\r\n<p>A project template has been created specifically for this project, containing a similar structure to the <b>basic</b> template you saw in <a href=\"../Project0\">Project #0</a>, but including a fair amount of code (both source code and compiled libraries) that is being provided as a starting point.  So you'll absolutely need to use the <b>project1</b> template for this project, as opposed to the <b>basic</b> one.</p>\r\n\r\n<p>Decide on a name for your project directory, then issue the command <b>ics46 start <i>YOUR_CHOSEN_PROJECT_NAME</i> project1</b> to create your new project directory using the <b>project1</b> template.  (For example, if you wanted to call your project directory <b>proj1</b>, you would issue the command <b>ics46 start proj1 project1</b> to create it.)  Now you're ready to proceed!</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The project directory</p>\r\n\r\n<p>Change into your project directory and take a look around, to be sure you're aware of what's already available.  What you'll find will look a lot like the <b>basic</b> and <b>project0</b> project templates you've seen previously, and the ultimate result of building everything in your project will be three separate programs you can run with a script called <b>run</b>.</p>\r\n\r\n<ul>\r\n  <li><b>./run app</b> runs the application, a GUI that displays mazes and their solutions.</li>\r\n  <li><b>./run exp</b> runs any experiments you want to write as you work.  These are not required, but they may help you to isolate issues and experiment with their solutions outside of the context of the GUI.</li>\r\n  <li><b>./run gtest</b> runs any Google Test unit tests that you want to write as you work.  As with the experiments, they are not required, but this is another good tool for isolating issues, figuring out how to fix them, and then verifying that they're fixed.</li>\r\n</ul>\r\n\r\n<p>As before, you'll be able to build just one of these programs by passing a parameter to the <b>build</b> script, e.g., <b>./build gtest</b>, to save yourself the time waiting for all three to build if you only actually want one of them.</p>\r\n\r\n<p>More specifically, here's what you'll find in your project directory:</p>\r\n\r\n<ul>\r\n  <li>A directory called <b>lib</b>, in which there are two precompiled libraries that make up the part of the project that you won't be implementing yourself.\r\n    <ul>\r\n      <li><b>libdarkmaze.so</b> contains implementations of maze-related concepts like mazes, maze solutions, verifiers, and so on.</li>\r\n      <li><b>libdarkui.so</b> contains the implementation of the application's graphical user interface.  You will not have to implement the GUI yourself; it is being provided, in its entirety, in this library.</li>\r\n    </ul>\r\n  Note that these libraries are being provided in a compiled form without source code, though you'll find declarations of some of their classes elsewhere (see below).  (Note, also, that these libraries are likely only to be compatible with the ICS 46 VM, so you are unlikely to be able to do your work anywhere except using the VM.)</li>\r\n  <li>A directory called <b>include</b>, in which you'll find three directories:\r\n    <ul>\r\n      <li><b>darkmaze</b>, which contains declarations of classes exported by <b>libdarkmaze.so</b>.  You will need to include some of these files in your own header and source files, though you will not need all of them; it's up to you to decide which of these is relevant to your work.</li>\r\n      <li><b>darkui</b>, which contains declarations of classes exported by <b>libdarkui.so</b>.  This is not something you're likely to need, as the only place this is likely to be useful is in the application's <b>main()</b> function, which has already been written.</li>\r\n      <li><b>ics46</b>, which contains a broad-based <i>ICS 46 Library</i>, which will grow as we continue our work this quarter, providing tools that will assist you (and also me!) in implementing your projects.</li>\r\n    </ul>\r\n  </li>\r\n  <li>A directory called <b>app</b>, in which the application's <b>main()</b> function resides.  This has already been completed; you shouldn't have to modify it.</li>\r\n  <li>A directory called <b>core</b>, in which you'll write your maze generators, maze solvers, and any additional code for this project.</li>\r\n  <li>A directory called <b>exp</b>, in which you'll write any experiments that you'd like to write outside of the context of the GUI.  The file <b>expmain.cpp</b> is the entry point for the experiments (which you run with the command <b>./run exp</b>).</li>\r\n  <li>A directory called <b>gtest</b>, in which you'll write any unit tests that you'd like to write.  The file <b>gtestmain.cpp</b> is the entry point and has already been written; all you need to do is create new source files and place them in the <b>gtest</b> directory, then rebuild, and they will be executed automatically when you issue the command <b>./run gtest</b>.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The application</p>\r\n\r\n<p>Your work on this project begins with an already-existing, already-working application with a graphical user interface (GUI) that can display a maze and its solution, and can also animate the process of generating and solving a maze.  The GUI window looks like this:</p>\r\n\r\n<p class=\"center\"><img src=\"ics46-Project1.png\" alt=\"ICS 46 Project #1 - Screenshot\" /></p>\r\n\r\n<p>The large area with a white background is where a maze and its solution are drawn.  Initially, this will be an empty area with a white background; when you generate or a solve a maze, the result will appear within that area.  In the example above, both a maze and its solution are displayed.</p>\r\n\r\n<p>Along the right-hand side of the window are a set of controls, allowing you to:</p>\r\n\r\n<ul>\r\n  <li>Choose the width and height of the maze you'd like to generate.  The range, not shown numerically, is from 10-50 cells wide and 10-50 cells tall.</li>\r\n  <li>Choose what algorithm you'd like to use to generate a maze.  There are three algorithms provided (and you'll write one or more additional algorithms):\r\n    <ul>\r\n      <li><b>Depth-First (Provided)</b>, which is a recursive, depth-first maze generator like one that you'll be building.</li>\r\n      <li><b>Kruskal's Algorithm (Provided)</b>, which uses a well-known algorithm called Kruskal's algorithm to randomly remove walls so long as they do not cause the maze to become imperfect (i.e., introduce two separate paths connecting any two cells).</li>\r\n      <li><b>Boo's Algorithm (Provided)</b>, which uses a newly-invented algorithm called Boo's algorithm to generate a maze that, while not technically perfect, looks pretty good nonetheless.</li>\r\n    </ul>\r\n  </li>\r\n  <li>Generate a new maze, which will clear out any existing maze and its solution.</li>\r\n  <li>Choose what algorithm you'd like to use to solve a maze.  There are two algorithms provided (and you'll write one or more additional algorithms):\r\n    <ul>\r\n      <li><b>Breadth-First (Provided)</b>, which uses a breadth-first approach to solving a maze.</li>\r\n      <li><b>Depth-First (Provided)</b>, which uses a recursive, depth-first algorithm for solving a maze like one that you'll be building.</li>\r\n    </ul>\r\n  </li>\r\n  <li>Control whether or not the process of generating and solving mazes will be animated (i.e., each step will be shown individually, as opposed to only seeing the final result) and, if so, at what speed the animation will progress.</li>\r\n</ul>\r\n\r\n<p>Just below the display of the maze and its solution is a line of text that displays various messages.  When you first start the program, it says <b>Welcome!</b>.  When a maze generator or maze solver finishes, this message will tell you about the result &mdash; in particular, whether a generated maze is perfect, and whether a solution is complete and correct &mdash; which is a good way to verify that your algorithms are doing what you expect them to do.</p>\r\n\r\n<p>Note, also, that you can stop a maze generator or maze solver while it's running by clicking the <b>X</b> at the top-right corner of the window.  Normally, that <b>X</b> closes the window, but if a maze generator or maze solver is running, it simply cancels the operation in progress instead.</p>\r\n\r\n<p class=\"subtitle\">A brief word of warning</p>\r\n\r\n<p>When you start the application on your ICS 46 VM, you may notice an error message like this one in your Terminal window:</p>\r\n\r\n<blockquote><pre>\r\nQApplication: invalid style override passed, ignoring it\r\n</pre></blockquote>\r\n\r\n<p>This is something you can safely ignore, since it has no effect on our work here.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The requirements</p>\r\n\r\n<p>This project requires you to complete two tasks:</p>\r\n\r\n<ul>\r\n  <li>Write a maze generator that uses a recursive, depth-first algorithm to randomly generate a maze of arbitrary size, with the result required to be a <i>perfect maze</i>.\r\n    <ul>\r\n      <li>You can also optionally write as many additional maze generators as you'd like, with no limitations on what algorithms or techniques you use, and with no limitation that the result be a perfect maze.  Feel free to do anything you'd like and let your creativity run wild.</li>\r\n    </ul>\r\n  </li>\r\n  <li>Write a maze solver that uses a recursive, depth-first algorithm to traverse and solve a maze of arbitrary size, with the solution extending from the maze's starting cell to its ending cell without crossing any walls.\r\n    <ul>\r\n      <li>You can also optionally write as many additional maze solvers as you'd like, with no limitations on what algorithms or techniques you use, and with no limitation that the result be a correct, complete maze solution.  Feel free to do anything you'd like and let your creativity run wild.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p>Note that you are not required to write any code in <b>exp</b> or <b>gtest</b>, but you are welcome to write anything you'd like that helps you to isolate issues and test your work.</p>\r\n\r\n<p class=\"subtitle\">A quick note about extra credit</p>\r\n\r\n<p>While we encourage you to explore as many maze generators and maze solvers as you'd like, be aware that we are not offering extra credit for generators or solvers beyond the one of each that you are required to implement.  You can receive a perfect score on this project while implementing only a single maze generator and a single maze solver, and writing additional ones will not improve your score, but they can be a lot of fun to build!</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Generating a maze</p>\r\n\r\n<p>Each maze generator needs to be written in its own class.  So, to write a maze generator, create a new class in the <b>core</b> directory of your project directory, declaring the class in a header file and defining its member functions (and other source code) in a corresponding source file.</p>\r\n\r\n<p>The GUI automatically displays all of the maze generators that are compiled into the program, but only if you follow a couple of rules to help the GUI find and create them:</p>\r\n\r\n<ul>\r\n  <li>You must derive your class from the abstract base class <b>MazeGenerator</b>, which is declared in a file <b>MazeGenerator.hpp</b> in <b>include/darkmaze</b>.  (You can include this file by simply saying <b>#include \"MazeGenerator.hpp\"</b>, since the compiler has already been configured to look in the <b>include/darkmaze</b> directory for header files.)  Deriving from this class obligates you to provide an implementation for this member function in your class:\r\n<blockquote><pre>\r\nvirtual void generateMaze(Maze& maze);\r\n</pre></blockquote>\r\n  where <b>Maze</b> is declared in the file <b>Maze.hpp</b>, also in the <b>include/darkmaze</b> directory.</li>\r\n  </li>\r\n  <li>You must be sure that your class has a default constructor (i.e., a constructor that takes no parameters).  Most likely, you won't implement a constructor in your class at all, since the default is probably going to be fine; if you do implement your own constructor, though, be sure you implement at least one that takes no parameters.</li>\r\n  <li>In the source file &mdash; not in the header file, as it's important that this only be executed once &mdash; you'll need to do two things:\r\n    <ul>\r\n      <li>Write this include directive near the top:\r\n<blockquote><pre>\r\n#include &lt;ics46/factory/DynamicFactory.hpp&gt;\r\n</pre></blockquote>\r\n      </li>\r\n      <li>Write this line of code somewhere after that include directive (and somewhere after you've included the header file corresponding to your source file, so that the declaration of your class will have been seen already):\r\n<blockquote><pre>\r\nICS46_DYNAMIC_FACTORY_REGISTER(MazeGenerator, <b><i>name of your class</i></b>, \"<b><i>display name</i></b>\");\r\n</pre></blockquote>\r\n      substituting the name of your class where <b><i>name of your class</i></b> appears and the name you'd like to see in the GUI for your maze generator where <b><i>display name</i></b> appears.  For example, my <b>KruskalMazeGenerator.cpp</b> file (whose source code has not been provided, but is compiled into the <b>libdarkmaze.so</b> library) has this line near the top:\r\n<blockquote><pre>\r\nICS46_DYNAMIC_FACTORY_REGISTER(MazeGenerator, KruskalMazeGenerator, \"Kruskal's Algorithm (Provided)\");\r\n</pre></blockquote>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">The required algorithm</p>\r\n\r\n<p>The required algorithm must generate a <i>perfect maze</i>.  Viewing a maze as a two-dimensional matrix of square cells, a perfect maze is one in which any two cells are connected by a single unique path.  An important consequence of a maze being perfect is that all cells in a perfect maze are reachable from the starting point by some unique path, meaning that perfect mazes are guaranteed to have a solution.  They're also guaranteed to have a unique solution, which makes them more interesting to solve.</p>\r\n\r\n<p>To generate a perfect maze, you'll use a recursive algorithm to \"dig tunnels\" of various lengths.  It starts with a maze in which all of the possible walls exist (i.e., a wall exists on every side of every cell), then continues removing walls until a perfect maze has been constructed.  Naturally, it requires some care not to remove walls that would cause the maze to be imperfect; in our tunnel-digging algorithm, we have to be sure we stop digging before we knock out walls that would lead to places we've already been.</p>\r\n\r\n<p>The algorithm works, then, by starting at a particular cell (and it doesn't matter, ultimately, which cell you start from), and does the following:</p>\r\n\r\n<ul>\r\n  <li>Mark the current cell as \"visited.\"</li>\r\n  <li>While the current cell has any adjacent cells that have not yet been visited...\r\n    <ul>\r\n      <li>Choose one of the unvisited adjacent cells at random.  Randomness is important here, or your algorithm will always generate the same maze.</li>\r\n      <li>Remove the wall between the current cell and the cell you just chose.</li>\r\n      <li>Recursively call this algorithm, with the chosen cell becoming the current cell.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p>As you generate your maze, you'll need to call member functions on the <b>Maze</b> object that was provided as a parameter.  Don't assume anything in particular about that <b>Maze</b> object, other than it has the correct width and height; make any changes you need to make in order to achieve the correct result, and make sure it works regardless of what walls are in place (or not in place) when your algorithm is called.</p>\r\n\r\n<p>The animation in the GUI is automatic; if animation is selected in the GUI, any change you make to your maze will result in the GUI window being redrawn, so you won't need to do anything special to accommodate that feature.  (Among other things, this will help you to visualize your own algorithm's progress, which might help you to determine whether it's correct, and also to debug it.)</p>\r\n\r\n<p>You can write as many other maze generators as you'd like, by following the same steps (i.e., creating a separate class that derives from <b>MazeGenerator</b>, registering it with the <b>DynamicFactory</b>, giving it a display name, etc.).  All of the maze generators you write should show up in the GUI if you set them up right.</p>\r\n\r\n<p class=\"subtitle\">Naming your required maze generator so we can find it</p>\r\n\r\n<p>Each of your maze generators has a <i>display name</i>, given as a string literal as the third parameter in the call to the <b>ICS46_DYNAMIC_FACTORY_REGISTER</b> macro.  So we know which one of your maze generators is the required one (and, thus, the one we should grade), you <i>must</i> choose a display name for your required maze generator that has the parenthesized word <b>(Required)</b> on the end of it (similar to how the provided generators have the parenthesized word <b>(Provided)</b> on the end of their names); capitalization and the parentheses are important here.</p>\r\n\r\n<p>Otherwise, you can name your required generator anything you'd like, and you can name any other generators in any way you'd like, except they should <i>not</i> have the word <b>(Required)</b> on the end of them.  And, of course, <i>none</i> of your generators should have the word <b>(Provided)</b> on the end of their names, since none of yours were provided to you by us.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Solving a maze</p>\r\n\r\n<p>Each maze solver needs to be written in its own class.  So, to write a maze solver, create a new class in the <b>core</b> directory of your project directory, declaring the class in a header file and defining its member functions (and other source code) in a corresponding source file.</p>\r\n\r\n<p>The GUI automatically displays all of the maze solvers that are compiled into the program, but only if you follow similar rules to those you followed for your generators:</p>\r\n\r\n<ul>\r\n  <li>You must derive your class from the abstract base class <b>MazeSolver</b>, which is declared in a file <b>MazeSolver.hpp</b> in <b>include/darkmaze</b>.  (You can include this file by simply saying <b>#include \"MazeSolver.hpp\"</b>, since the compiler has already been configured to look in the <b>include/darkmaze</b> directory for header files.)  Deriving from this class obligates you to provide an implementation for this member function in your class:\r\n<blockquote><pre>\r\nvirtual void solveMaze(const Maze& maze, MazeSolution& mazeSolution);\r\n</pre></blockquote>\r\n  where <b>Maze</b> is declared in the file <b>Maze.hpp</b> and <b>MazeSolution</b> is declared in the file <b>MazeSolution.hpp</b>, also in the <b>include/darkmaze</b> directory.</li>\r\n  </li>\r\n  <li>You must be sure that your class has a default constructor (i.e., a constructor that takes no parameters).  Most likely, you won't implement a constructor in your class at all, since the default is probably going to be fine; if you do implement your own constructor, though, be sure you implement at least one that takes no parameters.</li>\r\n  <li>Register your class with the ICS 46 DynamicFactory, just as you did with your maze solver:\r\n<blockquote><pre>\r\nICS46_DYNAMIC_FACTORY_REGISTER(MazeSolver, <b><i>name of your class</i></b>, \"<b><i>display name</i></b>\");\r\n</pre></blockquote>\r\n      substituting the name of your class where <b><i>name of your class</i></b> appears and the name you'd like to see in the GUI for your maze solver where <b><i>display name</i></b> appears.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">The required algorithm</p>\r\n\r\n<p>The required algorithm must solve the maze using a recursive algorithm with <i>backtracking</i>.  A backtracking algorithm is one that recursively investigates all of the possibilities by moving down a path that hopefully leads to a solution and then, if that path fails, backing up to the nearest place where some untried alternative is available and trying another path.  While you could potentially implement an algorithm like this iteratively, it turns out to be a lot less work to do so recursively, as the process of recursion will naturally and automatically manage details that you would otherwise have to manage yourself.</p>\r\n\r\n<p>I'll leave the details of this algorithm as an exercise for you to figure out.  If you understand the maze-generating algorithm above, it should not be a big step to design the maze-solving algorithm.</p>\r\n\r\n<p>As your algorithm seeks a solution, you'll need to call member functions on the <b>Maze</b> and <b>MazeSolution</b> objects that were provided as parameters, though note that the <b>Maze</b> has been passed as a constant (because you shouldn't have to change a maze in order to solve it).</p>\r\n\r\n<p>The animation in the GUI is automatic; if animation is selected in the GUI, any change you make to your maze solution will result in the GUI window being redrawn, so you won't need to do anything special to accommodate that feature.  (Among other things, this will help you to visualize your own algorithm's progress, which might help you to determine whether it's correct, and also to debug it.)</p>\r\n\r\n<p>You can write as many other maze solvers as you'd like, by following the same steps (i.e., creating a separate class that derives from <b>MazeSolver</b>, registering it with the <b>DynamicFactory</b>, giving it a display name, etc.).  All of the maze solvers you write should show up in the GUI if you set them up right.</p>\r\n\r\n<p class=\"subtitle\">Naming your required maze solver so we can find it</p>\r\n\r\n<p>Each of your maze generators has a <i>display name</i>, given as a string literal as the third parameter in the call to the <b>ICS46_DYNAMIC_FACTORY_REGISTER</b> macro.  So we know which one of your maze solvers is the required one, you <i>must</i> choose a display name for your required maze solver that has the parenthesized word <b>(Required)</b> on the end of it (similar to how the provided solvers have the parenthesized word <b>(Provided)</b> on the end of their names); capitalization and the parentheses are important here.</p>\r\n\r\n<p>Otherwise, you can name your required solver anything you'd like, and you can name any other solvers in any way you'd like, except they should <i>not</i> have the word <b>(Required)</b> on the end of them.  And, of course, <i>none</i> of your solvers should have the word <b>(Provided)</b> on the end of their names, since none of yours were provided to you by us.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>After using the <b>gather</b> script in your project directory to gather up your C++ source and header files into a single <b>project1.tar.gz</b> file (as you did in <a href=\"../Project0\">Project #0</a>, submit that file (and only that file) to Checkmate.  Refer back to <a href=\"../Project0\">Project #0</a> if you need instructions on how to do that.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're reponsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.  (It's not a bad idea to look at the contents of your tarball before submitting it; see <a href=\"../Project0\">Project #0</a> for instructions on how to do that.)</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Adjustments and clarifications, along with a new maze generator, by Alex Thornton, Spring 2017.</li>\r\n  <li>Multiple clarifications, along with a fair number of changes and bug fixes to the underlying code, by Alex Thornton, Spring 2015.</li>\r\n  <li>Originally written by Alex Thornton, Spring 2014, with heavy influence from a similarly-named project from ICS 23.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}