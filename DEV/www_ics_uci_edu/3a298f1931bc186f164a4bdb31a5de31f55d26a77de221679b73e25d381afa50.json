{"url": "https://www.ics.uci.edu/~eppstein/261/s13-hw4.txt", "content": "CS 261, Spring 2013, Homework 4 Due Thursday, May 9\n\n\n1. Suppose that a binary heap contains the four values 1, 2, 3, and 4\n(with smaller numbers meaning higher priority). List all of the\npermutations of these values that represent valid configurations of the\nheap.\n\n\n2. Suppose that we have a binary heap with n numbers in it, again with\nsmaller numbers meaning higher priority. We know that the minimum of the\nnumbers is in position 0 of the heap. How many different positions could\npossibly hold the maximum of the numbers? (You should assume that all\nthe numbers are different from each other.)\n\n\n3. Consider the following naive representation of a priority queue: we\nrepresent the queue as a dynamic array of the data values, with no\nconstraints on how they are ordered. To find the minimum value, we\nsearch through the whole array.\n\n(a) What are the amortized time bounds for the add, decrease priority,\nand delete min operations in this structure? Give your answers in\nO-notation as a function of n, the number of values in the priority\nqueue.\n\n(b) If we are using a priority queue to implement Dijkstra's shortest\npath algorithms, are there graphs for which this naive method would lead\nto a total time bound that is the same as or better than the bound given\nby using Fibonacci heaps? If yes, describe these graphs. If no, explain\nwhy not.\n\n\n4. Suppose that we perform the following two operations on a Fibonacci\nheap: first, create a new heap from a given set of n values, and second,\nperform a single delete-min operation. How many trees will there be in\nthe structure that we finish with, as a function of n?  (Hint: consider\nthe binary representation of n.)\n", "encoding": "ascii"}