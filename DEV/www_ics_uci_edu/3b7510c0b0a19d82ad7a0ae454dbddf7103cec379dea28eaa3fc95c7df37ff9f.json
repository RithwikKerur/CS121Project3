{"url": "https://www.ics.uci.edu/~kay/courses/i42/wildride/problem_description_files/index.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Tuesday, March 7, 2006 5:17 AM\">\n<TITLE>Wild Ride Case Study</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERXDATA\" CONTENT=\"4C51F460\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/i42/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT FACE=\"Goudy Old Style\" SIZE=6><B>M<FONT SIZE=5>R</FONT>. K<FONT SIZE=5>AY</FONT>&#39;<FONT SIZE=5>S\n  </FONT>W<FONT SIZE=5>ILD </FONT>R<FONT SIZE=5>IDE\n  <BR>\n  </FONT></B></FONT><FONT FACE=\"Goudy Old Style\" SIZE=5><B>P<FONT SIZE=4>ROBLEM\nDESCRIPTION</FONT></B></FONT></P>\n<FONT FACE=\"Goudy Old Style\">[This document provides an overview of the\nsimulation.  It discusses some details of behavior  and implementation,\nbut it is not a complete, formal specification document.]</FONT> <BR><BR>\n<FONT FACE=\"Goudy Old Style\">1. Introduction</FONT> <BR>\n<P>\n<FONT FACE=\"Goudy Old Style\">At amusement parks like Disneyland, there are\nmany attractions (usually rides, but also stores and restaurants).  In successful\namusement parks (also called theme parks), there are also many customers.\nCustomers visit one attraction after another; usually more customers want\nto visit an attraction than the attraction can hold at one time, so often\ncustomers spend time waiting in line.  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Amusement park operators pay a lot of attention\nto the way customers flow through the park.  They want all the attractions\nto be operating at full capacity, and they want people to spend as little\ntime as possible in line so they will have a good time and come back again.\n </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Since hundreds of millions of dollars go into\nthe design of a new amusement park, it pays to plan ahead, and to predict\nas accurately as possible how people will behave when the park is open.\n One good tool for this is computer simulation.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">2. Simulation</FONT></P>\n<FONT FACE=\"Goudy Old Style\">Simulation is different from reality.  If we\nwant to know how well a newly-designed helicopter or racing schooner will\nperform, we might build a prototype and try it out.  If we want to know\nhow many incoming freshmen will graduate in four years or less, we might\nsimply admit those students and keep track of them over their college careers.\n If we want to know which arrangement of rides works best, we could build\nthem and see what happens.  But those approaches cost a lot and take too\nlong. </FONT>\n<P>\n  <FONT FACE=\"Goudy Old Style\">We can call the helicopter, the schooner, the\n    students, or the amusement park a system (which means no more than &quot;a\n    group of things forming a unified whole&quot;).  We can design models of\n    these systems and how they behave, simplified descriptions that leave out\n    unnecessary detail (like the color of the sail or the freshman's height\n    or the shape of the cars in &quot;Mr. Toad's Wild Ride&quot;).  [Of course,\n    the major pitfall in designing these models is omitting a detail that is\n    not unnecessary; perhaps a freshman's height does affect his or her success\n    in school.]  And we can code these models as computer programs, running\n    them over and over, easily changing various values, to help predict the\n    systems' performance without all the bothersome cost, time, and detail of\nthe real thing.  That's simulation. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">One type of simulation involves the behavior\nof a population (such as the students above, but not the schooner or helicopter).\nOne approach to population simulation involved statistical changes to the\npopulation as a whole (e.g., &quot;If there's a black plague epidemic, the\npopulation decreases by 25%&quot;).  Another approach is to represent each\nindividual in the population separately, by an object in a program; object-oriented\nprogramming is a natural way to implement simulations like this.  The simulator,\nthen, gives each object a turn, during which the object can change its status\nand possibly affect its environment.  We can call it one &quot;round&quot;\nof the simulation when each individual object has had one turn.  The simulation\nwill typically continue for a specified number of rounds, or until some\ncondition occurs (such  as all the objects finishing their work). </FONT></P>\n<FONT FACE=\"Goudy Old Style\">3.  This Problem</FONT> <BR>\n<P>\n<FONT FACE=\"Goudy Old Style\">Since Orange County is a center of theme parks,\nyou decide to offer a simulation service for theme park designers.  Your\nfirst step is to design and implement the software that you will use.  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Your program will simulate two different classes\nof objects: attractions and customers.  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">As described below, each attraction will have\ncertain information, such as its location in the park, the number of customers\nit can handle at once, the amount of time customers have spent waiting in\nline before actually starting the ride, and the amount of time it takes\na customer to complete the ride once he or she starts it.  Each attraction\nwill also perform  operations such as taking the next customers in line,\nreleasing customers after their turn is over, informing customers how long\nthe wait will be, and so on. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Each customer will start with a &quot;wishlist&quot;&mdash;the\nlist of attractions he or she wants to visit during the day, each with a\npriority that indicates how important the attraction is to that customer.\n Each customer will also have some way of deciding, at any moment, which\nattraction to visit next.  The customer might use a simple-minded decision\nalgorithm, such as &quot;Always go to the ride with the next highest priority.&quot;\n But some customers might be more clever; they might decide to start with\nthe rides that are furthest from the entrance, because the crowds will be\nsmaller, or they might decide to postpone some rides if the wait in line\nlooks too long, or they might choose a lower-priority ride if it happens\nto be nearby. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">When you specify each customer to the system,\nyou will be able to choose from a few different decision strategies; others\ncould be implemented.  [In fact, prospective customers who want to get the\nmost out of their trip will also be able to use your  service (providing\nyou an additional stream of income); they will be able to try out different\ndecision strategies and see which one works best.  In fact, we think we've\nseen a web site that provides just such a planning service.]  More information\nabout customers appears below. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Your program, then,\nwill be a simulation system that manages the two kinds of objects.  After\nsetting things up initially&mdash;the attractions, the customers, the opening\nand closing times of the park&mdash;it will cycle through the minutes of the day.\n At each minute, it will give a turn to each customer entering the park\nand each customer just leaving a ride, so they can  apply their decision\nstrategies, coming up with the ride to visit next. Also, every ride will\nget a turn to take in some customers and release some customers, depending\non the size of its line and the amount of time it takes to go through the\nattraction.   Finally, each customer who is &quot;in transit&quot;  from\none place to the next will move closer to his or her goal. So at the end\nof each cycle, some customers will be in line for rides, some will actually\nbe on the rides, and some will be walking from one ride to another. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Then, at the next minute, the whole cycle repeats\nagain. The simulator stops shortly after it reaches the park's closing time.\n (Since  customers might actually be on a ride at the exact time the park\ncloses, you have to allow time for them to finish and leave the park). At\nthe end of the day, the simulator prints some statistics about each customer's\nvisit.  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">A realistic simulation might operate second-by-second\ninstead of a minute at a time; however, that would take 60 times the computing\npower so to keep things simple, especially if we have a lot of customers,\nwe'll leave things on a minute-by-minute basis for now. </FONT></P>\n<FONT FACE=\"Goudy Old Style\">4. Attractions</FONT> <BR>\n<P>\n<FONT FACE=\"Goudy Old Style\">Each ride will store this information:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Name</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">Entrance location (where in the park the ride's\nentrance is)</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">Exit location (some rides take you from one\nlocation to another)</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">How many cars are in use on the ride at present</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">Maximum number of people per car</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">Maximum number of cars the ride can handle</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Parameters for loading and ride time (see below)</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">Queue of customers waiting in line for this\nride</FONT></LI>\n</UL>\n<P>\n<FONT FACE=\"Goudy Old Style\">Different rides load and discharge their passengers\ndifferently; this affects the length of time it takes to complete the ride\nand the number of passengers the ride can handle.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">4.1.  Ride Loading Characteristics</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Each ride maintains a queue of customers waiting\nto ride it. At each minute, the ride may take some people from this queue\nand put them on the ride, and it will take any people who have completed\nthe ride and send them back out into the park to decide which ride to visit\nnext.  This continues until closing time, after which nobody else can get\nin line and the ride empties out its queue.  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">At each minute, the ride has to figure out\nif any cars are loaded and ready to be dispatched on the ride, if any cars\nare empty and ready to load, and if any cars have completed the ride and\nare ready to unload.  Different rides differ in the precise details of how\nthey handle their passengers; we can categorize rides as cycle rides, continuous\nrides, or interval rides. </FONT></P>\n<FONT FACE=\"Goudy Old Style\">4.1.1.  Cycle Rides</FONT>\n<P>\n  <FONT FACE=\"Goudy Old Style\">You could also call cycle rides &quot;stop-and-go&quot;\n  rides. Everyone gets on the ride at once, the ride does what it does, and\n  then everyone gets off.  Nobody is riding while people are unloading and\n  the new people are loading.  A show in a theater is a cycle ride; so are\n  carousels and the &quot;Dumbo&quot; ride at Disneyland.  To describe a cycle\n    ride, you need to specify the amount of time the ride is in motion and the\n    amount of time it takes to unload and load the ride.  Finally, a cycle ride\n    will start as scheduled if some of its cars are empty, but it will not start\nif it has no passengers at all. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">At the beginning of each cycle, the ride will\ndecide whether to add one more car to the ride, remove one car, or make\nno change.  If the number of people waiting in line is greater than the\ncurrent capacity of the ride, and if fewer than the maximum number of cars\nare in use, it will add one car.  It will remove one car from the ride if\ntwo or more cars were empty during each of the last three cycles.   </FONT></P>\n<FONT FACE=\"Goudy Old Style\">4.1.2.  Continuous Rides</FONT>\n<P>\n  <FONT FACE=\"Goudy Old Style\">Continuous rides never stop; they are like\n    a circular conveyer belt that goes around and around.  Escalators and ski\n    lifts are continuous rides; so was the &quot;Sky Ride&quot; aerial tram\n    at Disneyland.  There is no separate loading time for a continuous ride;\n    it loads one car per minute and  you need only the length of the ride to\n    describe it.   On a continuous ride, if an empty car is ready to leave,\n    it can leave even if nobody's in it.  However, no more than one car may\nleave in a single minute. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">At any minute, if more than five carloads of\npeople are waiting in line, the ride will add one car (up to the maximum).\n If there has been a sequence of empty cars launched that's longer than\none-third of the number of cars on the ride, then the ride will remove one\ncar. </FONT></P>\n<FONT FACE=\"Goudy Old Style\">4.1.3.  Interval Rides</FONT>\n<P>\n  <FONT FACE=\"Goudy Old Style\">On an interval ride, cars are loaded, unloaded,\n    and dispatched at certain set intervals. As a car pulls up to the load point,\n    riders who have just completed the ride exit to their left.  Then the people\n    who are waiting to ride enter the car from the right. The loaded car is\n    released to the dispatch point a few yards down the line, where it is launched.\n    If nobody is waiting for the ride, cars remain waiting to be loaded; on\n    interval rides, no empty cars are launched.  On the other hand, no more\n    than one car may be launched per minute.  To describe an interval ride,\n    you need the length of the ride and the length of time it takes to unload\n    and reload a car.  Subways are interval rides (except that subways have\n    multiple loading points and not everybody in a car gets on and off at the\n    same place); so are roller coasters, including Disneyland's &quot;Matterhorn&quot;\nand &quot;Space Mountain&quot;. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">At any minute, the ride will add one car to\nbe loaded if the number of people waiting is more than the current number\nof cars could accommodate in one full circuit of the ride.  (Thus, if there\nare currently 10 cars on the ride, each holding 6 people, you'll add one\ncar if there are more than 60 people in line.)  It will remove one car if\nmore than one empty car has been waiting to load for over 10 minutes.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">4.2.  Other Kinds of Rides</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">You can imagine still other kinds of rides.\n For example, some attractions allow the customer to spend as much time\nas he or she wants:  stores and museums are like this, and so is &quot;Tom\nSawyer's Island&quot; at Disneyland.  But for now, the simulator will not\nmodel rides like  these. </FONT></P>\n<FONT FACE=\"Goudy Old Style\">5. Customers</FONT> <BR>\n<P>\n<FONT FACE=\"Goudy Old Style\">&#160;  Each customer who enters the park has\nthese characteristics:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Name</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Arrival time at the park</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Initial wishlist of rides and priorities</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Current &quot;working agenda&quot; of rides\n  to visit</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Decision strategy</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Exit strategy</FONT><FONT FACE=\"Goudy Old Style\">&#160;</FONT></LI>\n</UL>\n<P>\n<FONT FACE=\"Goudy Old Style\">5.1.  The Customer Wishlist</FONT></P>\n<FONT FACE=\"Goudy Old Style\">Each customer comes to the park with a prioritized\nwishlist, listing the names of the rides the customer wants to ride  with\na priority for each ride.   Some customers may just visit each ride in priority\norder and then leave the park, but customers may also have more sophisticated\nways of choosing their rides.  </FONT>\n<P>\n  <FONT FACE=\"Goudy Old Style\">Starting from the original wishlist, the customer\n    creates and maintains a working agenda, another prioritized list of rides\n    that can change from time to time.  Every time the customer finishes a ride,\n    for example, the customer removes the ride just finished from the agenda.\n    We discuss below what happens when the agenda is empty or the park's closing\n    time arrives.  The customer will also keep track of which rides he or she\nhas visited, which may be used in deciding which ride to visit next.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">The priorities are represented by integers,\nwith lower values indicating higher priorities (so a customer's number-one\npriority comes before the number-two priority, for example). </FONT></P>\n<FONT FACE=\"Goudy Old Style\">5.2.  Decision Strategies</FONT> <BR>\n<P>\n<FONT FACE=\"Goudy Old Style\">The simulator allows customers to specify one\nof three strategies for choosing a next ride  (i.e., reprioritizing the\nagenda so that the  next ride is at the front): </FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"Goudy Old Style\">The default strategy, following the priorities\non the original wishlist</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Pick the closest ride on the wishlist first</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Pick first the ride that has the shortest waiting\n    time (including both walking to the ride and the estimated waiting time\n  in line)</FONT></LI>\n</UL>\n<P>\n<FONT FACE=\"Goudy Old Style\">(In our park, the waiting time for any ride\nis available to  the customer  from  any location; there are courtesy phones\nand large message boards that keep the customers up to date, so they don't\nhave to walk over to a ride to see how long the wait is.)  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Other strategies could be imagined and implemented.\n </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Each customer can also specify an exit strategy\nthat determines when the customer will leave the park: </FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Head for the exit when the agenda is empty</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Head for the exit at a specific time</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Stay until the park closes</FONT></LI>\n</UL>\n<P>\n<FONT FACE=\"Goudy Old Style\">When the working agenda is empty, if the customer\nis not yet ready to leave, the customer will refill the working agenda as\nfollows:  Add all the rides in the park that  the customer hasn't visited\nyet, and if the agenda runs out again, add the closest 15 rides to the customer's\ncurrent location.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">6.  Distance</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Distances in the park are measured in &quot;distance\nunits&quot;; one unit is the distance someone can walk in one minute, which\nmakes calculation easy.  Locations are given in an x-y (Cartesian) coordinate\nsystem, in which the park's entrance/exit is (0,0).  The simulator calculates\ndistances between rides by the straight-line Euclidean distance; it does\nnot take obstacles into account.  When you calculate walking times based\non distances, you should convert any non-integer distances to the next highest\ninteger, since the simulator keeps track of everything in whole minutes.\n</FONT></P>\n<FONT FACE=\"Goudy Old Style\">7.  Operation of the Simulator</FONT> <BR>\n<P>\n<FONT FACE=\"Goudy Old Style\">Broadly speaking, your simulator will let the\nuser run one or more simulations, each of which will behave as follows:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Read in descriptions of the rides and the customers\n(according to the specified input format)</FONT><BR>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">For each clock tick (each minute),</FONT><BR>\n  <UL>\n  <LI>\n    <FONT FACE=\"Goudy Old Style\">Check the queue at the front gate for any customers\n      whose arrival time has come</FONT><BR>\n  </LI>\n  <LI>\n    <FONT FACE=\"Goudy Old Style\">Check the customers in transit for any who\n      have arrived at their destination</FONT><BR>\n  </LI>\n  <LI>\n    <FONT FACE=\"Goudy Old Style\">Check each ride and, as appropriate for that\n      ride, (a) launch the first loaded car that is ready to go, (b) unload any\n      cars that have completed the ride, sending the finished riders back into\n      transit, (c) load the available cars, and (d) decide whether to add or remove\n      cars from the ride</FONT><BR>\n  </LI>\n  </UL>\n</LI>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">After the park closes, print some overall statistics\n  and allow the user to request other, more detailed statistics.</FONT><BR>\n</LI>\n</UL>\n<P>\n<FONT FACE=\"Goudy Old Style\">8.  Input</FONT></P>\n<FONT FACE=\"Goudy Old Style\">The simulator will read plain text input files,\none describing the rides and one describing the customers.  In both files,\nlines with an asterisk in the first column are ignored (and thus can serve\nas comments in the input) and empty lines are also ignored. </FONT> <BR>\n<P>\n<FONT FACE=\"Goudy Old Style\">8.1.  Input of Rides</FONT></P>\n<FONT FACE=\"Goudy Old Style\">The basic input format for rides is as follows:</FONT>\n<PRE><code>    <i>Ride_Name</i>\n    <i>entrance_X  entrance_Y</i>\n    <i>exit_X  exit_Y</i>\n    <i>initial_num_of_cars  max_num_of_cars  capacity_per_car</i>\n    <i>Ride_Type</i>\n    <i>ride_time  loading_time</i></code></PRE>\n<P>\n<FONT FACE=\"Goudy Old Style\">The ride type must be one of the following:\nContinuous, Cycle, or Interval.  For continuous rides, no loading time is\nspecified.</FONT></P>\n<FONT FACE=\"Goudy Old Style\">Here is an example:</FONT>\n<PRE><code>* Sample ride file\nPolymorphic Paddleboats\n4 1\n4 1\n1 2 1\nCycle\n3 3\nInheritance Insanity\n2 2\n4 6\n1 3 1\nContinuous\n5</code></PRE>\n<P>\n<FONT FACE=\"Goudy Old Style\">8.2.  Input of Customers</FONT></P>\n<FONT FACE=\"Goudy Old Style\">The basic input format for customers is as\nfollows:</FONT>\n<PRE><code>    <i>Customer_name</i>\n    <i>time_entered_hour  time_entered_minutes</i>\n    <i>Customer_type</i>\n    <i>Exit_strategy</i>\n    <i>exit_time_hour  exit_time_minuts</i>\n    <i>wish_list_priority1  wish_list_ride1</i>\n    <i>wish_list_priority2  wish_list_ride2</i>\n    <i>wish_list_priority3  wish_list_ride3</i>\n    ...\n    <i>wish_list_priorityN  wish_list_rideN</i>\n    <i>----</i></code></PRE>\n<P>\n<FONT FACE=\"Goudy Old Style\">The customer type must be one of the following:\nClosest Ride First, Highest Priority First, or Shortest Time First.  The\nexit strategy must be one of the following:  Empty Wish List, Park Closing\nTime, or Set Time. If the exit strategy is Set Time, the following line\nmust specify an exit time (both hours and minutes); for the other exit \nstrategies no exit time line will appear. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">All the hour fields are based on a 24-hour\nclock.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">The delimiter &quot;</FONT><FONT FACE=\"Courier New\" SIZE=2>----</FONT><FONT FACE=\"Goudy Old Style\">&quot;,\nstarting in the first column, signals the end of a customer's wishlist.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Here is an example:</FONT></P>\n<PRE><code>* Sample customer file:\nJohn McCarthy\n9 15\nClosest Ride First\nEmpty Wish List\n3 Polymorphic Paddleboats\n2 Inheritance Insanity\n----\nDonald E. Knuth\n9 25\nHighest Priority First\nSet Time\n10 00\n2 Inheritance Insanity\n8 Casting Coaster\n----\n</code></PRE>\n<FONT FACE=\"Goudy Old Style\">9.  Output</FONT>\n<P>\n  <FONT FACE=\"Goudy Old Style\">The simulator gathers a variety of statistics\non the rides and the customers.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">For each customer, it keeps track of the name\nof each attraction visited, and for each, the times when the customer got\nin line, got onto the ride, and completed the ride.  It can also compute\nthe total time spent in the park, the total time spent in line, the total\ntime spent riding rides, and the percentage of rides on  the original wishlist\nthat the customer visited.   The user can also view the customer with the\nmost or least time in the park or in line.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">For each ride, it keeps track of the total\nnumber of  riders, the average number per minute, the minimum, maximum,\nand average number of cars, and the minimum, maximum, and average line length\nand waiting time.  The user can also view the attraction with the most or\nfewest visitors or the longest or shortest average waiting time.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">The user can also view the statistics for a\nspecific customer or attraction by name or write all the statistics to a\nfile for later review.</FONT></P>\n</BODY>\n</HTML>", "encoding": "ascii"}