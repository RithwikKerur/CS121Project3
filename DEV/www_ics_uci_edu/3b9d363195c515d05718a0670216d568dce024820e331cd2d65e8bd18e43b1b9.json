{"url": "https://www.ics.uci.edu/~thornton/ics32/ProjectGuide/Project0/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 32 Winter 2019, Project #0: Square One</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 32 Winter 2019 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 32 Winter 2019<br />\r\n   Project #0: <i>Square One</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, January 11, 11:59pm</i></p>\r\n\r\n<p class=\"center\"><i>This project is to be done individually</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Introduction</p>\r\n\r\n<p>In this course, you will continue to develop the programming skills you began building in ICS 31, with an ever-sharpening focus on solving larger, more complex problems at a level of quality that edges closer to work done by professionals.  While the projects we'll work on this quarter might be simple for someone who has years of prior experience, we will nonetheless attack these problems with the same approach that a professional software engineer might.  We'll consider each problem in its full depth, think about how to work on it incrementally, spend some time testing our solution to ensure that it works correctly, and make sure that we've got the little details correct and not just the big ideas.  Larger programs that solve real-world problems succeed or fail on being completely correct, and even a one-character mistake in input or output can sometimes make all the difference, so we need to get accustomed to that level of scrunity, so that we can apply it when it is warranted.</p>\r\n\r\n<p>This project asks you to do two things:</p>\r\n\r\n<ol>\r\n  <li>Set up your development environment, so you will be ready to work on your projects this quarter.</li>\r\n  <li>Write a short program and submit it, to ensure that you're aware of the mechanisms of the course &mdash; how to write short Python programs, how to submit your work &mdash; and so you can become acclimated to how automated testing will be used to grade at least some of your work this quarter.</li>\r\n</ol>\r\n\r\n<p class=\"subtitle\">Setting up your development environment</p>\r\n\r\n<p>It is very common in real-world software development jobs to be given, at the outset of a new job, a list of tools that you will be required to use.  Flexibility is great, and it's nice to be able to choose one's own toolset, but, unfortunately, many software tools introduce constraints on how a program can be written, how its components can be arranged, what functions can be called, what documentation can be written and how, what additional software it can be combined with, how it can be \"built\" to be distributed to end users, and so on.  So, like it or not, real-world software development usually requires at least some of the tools to be set in stone and used by all members of a team, even if not all members have the same preferences; this is simply a reality that software developers have to face.</p>\r\n\r\n<p>Since we will be poking our heads into a fair number of darker \"real-world\" corners in this course, it becomes necessary for us to agree on the set of development tools that we'll use.  Not only will it be important to agree on the right tools, but it will be important to agree to use the right <i>versions</i> of those tools, as each differs in not-insignificant ways.  One goal of this project is to introduce you to those tools, provide instructions on how to install and configure them on your own machines, and get you ready to use them for your work this quarter.</p>\r\n\r\n<p class=\"subtitle\">Writing a short program</p>\r\n\r\n<p>This project will also require you to write and submit a short program.  Unlike most of our projects, we're less concerned about <i>how</i> you solve the problem than we normally will be.  There are no points for what we call \"quality of solution,\" meaning that issues like style, organization of your program, and so on, are not relevant on this project.  All that matters is that the program works, but that is a very precise requirement: The output of your program has to be <i>correct to the character</i> to receive full credit.  Paying attention to the exact requirements, then, will be paramount.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The ICS 32 development environment</p>\r\n\r\n<p>The development environment for this course may seem quite familiar if you took ICS 31 recently.  As a standard, we will use the IDLE environment that is included with Python.  However, we will be using a particular version of Python (3.7.2) and certain configuration that was less important previously will become more important to us this quarter.  So rather than installing the tools yourself, I'd like each of you to follow these instructions, even if you think there is a better way to do it; this way, everyone is on an equal footing, and later needs you may not be aware of &mdash; if, for example, we start installing and using third-party libraries &mdash; will be met.</p>\r\n\r\n<p>Note that Python 3.7.2 was released in December 2018, and that's the version you'll want to obtain for your use this quarter.  It's fine, in principle, to use 3.7.1 or 3.7.0 instead, if you've already got it installed &mdash; I wouldn't expect there to be any differences that are all that meaningful to us, though it is possible that 3.7.2 will have fixed a bug or two that affects us, so you might still consider upgrading.  If you have a version older than 3.7.0, you'll definitely need to upgrade, though, as there are some differences that will potentially affect your work this quarter (e.g., some code I will write in class won't run on 3.6 or earlier).</p>\r\n\r\n<!--\r\n<p class=\"subtitle\">Avoiding newer versions of Python than 3.7.0</p>\r\n\r\n<p>It should be noted that there is ongoing development of the next version of Python, to be called Python 3.7.0, and that pre-release \"alpha\" versions are already available.  While the 3.7.0 release will be largely identical to 3.6.5, it does include a handful of new features and additional libraries.  For your work this quarter, though, you should avoid pre-release versions of 3.7.0 and stick with 3.6.5, as this is the version available in the ICS labs and matches what we'll be using to grade your work.  We like to stay with the latest when we can, but 3.7.0 is not yet complete and stable, so it's not ready for us to incorporate it into this quarter's course; anything new in 3.7.0 will be incompatible with prior releases, which sets up the very real possibility that you might write a program that works one way on 3.7.0, but works differently (or not at all!) when we grade it using 3.6.5.</p>\r\n\r\n<p>The safest way to avoid this problem is to use the same version we'll be using for grading: 3.6.5.</p>\r\n-->\r\n\r\n<!--\r\n<p>It should be noted that Python 3.5.0 was released a week or so prior to the quarter starting.  While the 3.5.0 release is nearly identical to 3.4.3, it does include a handful of new features and additional libraries.  For your work this quarter, though, you should avoid the 3.5.0 release and stick with 3.4.3, as this is the version available in the ICS labs and matches what we'll be using to grade your work.  We like to stay with the latest when we can, but 3.5.0 wasn't ready in time for us to incorporate it into this quarter's course; anything new in 3.5.0 will be incompatible with prior releases, which sets up the very real possibility that you might write a program that works one way on 3.5.0, but works differently (or not at all!) when we grade it using 3.4.3.</p>\r\n\r\n<p>The safest way to avoid this problem is to use the same version we'll be using for grading: 3.4.3.</p>\r\n-->\r\n\r\n<p class=\"subtitle\">What do I do to get things set up?</p>\r\n\r\n<p>If you will be doing your work solely using machines in the ICS labs, you're done!  The software you need is already installed and configured properly, so there's nothing you'll need to do for this project.  Note, though, that some of our labs are \"laptop-only\" sections, so there may not always be a machine available to you that has Python installed on it.</p>\r\n\r\n<p>So, assuming that you will be wanting to do at least some of your work on your own machine, what you do next depends on what operating system you're running on your machine.</p>\r\n\r\n<ul>\r\n  <li><a href=\"InstallWindows.html\">Installing and Configuring the ICS 32 Development Environment on Windows</a></li>\r\n  <li><a href=\"InstallMac.html\">Installing and Configuring the ICS 32 Development Environment on Mac OS X</a></li>\r\n  <li>(I expect that you'd be able to successfully use Linux in this course, as well, but the number of different distributions and competing mechanisms for installing, managing, and configuring software makes it impossible for me to provide a single set of comprehensive instructions, so you'll sadly be on your own; if you're a Linux user, however, you're probably accustomed to that!)</li>\r\n</ul>\r\n\r\n<p>Once you're done following the installation instructions for your chosen operating system, you're ready to proceed with your work in this course, beginning with this project.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The program</p>\r\n\r\n<p>Your program is required to read a single line of input from the user (without printing any input prompt), which is expected to be a positive integer <i>n</i> (i.e., <i>n</i> will be neither zero nor negative).  You can freely assume that your program will be given a positive integer, and it's not important what you do in any other case; we'll only test your program with positive integer input.  You can also freely assume that <i>n</i> will not be greater than 999.</p>\r\n\r\n<p>After reading the input, your program will print a <i>downward block diagonal</i> of size <i>n</i>.  The precise format of a downward block diagonal is best demonstrated with an example.  If the input to the program was <b>4</b>, the output would look like this:</p>\r\n\r\n<blockquote><pre>\r\n+-+\r\n| |\r\n+-+-+\r\n  | |\r\n  +-+-+\r\n    | |\r\n    +-+-+\r\n      | |\r\n      +-+\r\n</pre></blockquote>\r\n\r\n<p>A few additional requirements apply:</p>\r\n\r\n<ul>\r\n  <li>Though I've indented the text above to set it apart from the rest of the project write-up, note that the left edge of the topmost block must begin in the leftmost column of the output (i.e., it should not be indented at all).</li>\r\n  <li>There must be no whitespace (e.g., spaces or tabs) at the end of each line of output.</li>\r\n  <li>There must be a newline on the end of each line, including the last one.</li>\r\n</ul>\r\n\r\n<p>This is a complete specification of the structure of a downward block diagonal; the description is enough to solve the problem, so we will not be answering any additional questions about its structure.  However, we are providing a tool that will give you a basic understanding of whether your program is reading the correct input and generating output in the correct format.</p>\r\n\r\n<p class=\"subtitle\">Naming and organizational requirements</p>\r\n\r\n<p>How you organize your program is, for the most part, up to you, with a couple of requirements that you'll need to follow.</p>\r\n\r\n<ul>\r\n  <li>Your program must be written entirely in a single Python module, in a file named <b>project0.py</b>.  Note that capitalization and spacing are important here (i.e., no letters in the filename are capitalized and there are no spaces); they're part of the requirement.</li>\r\n  <li>Executing your <b>project0</b> module &mdash; by, for example, pressing F5 or selecting <b>Run Module</b> from the <b>Run</b> menu in IDLE &mdash; must cause your program to read its input and then print its output.  It must not be necessary to call a function manually to make your program run.</li>\r\n</ul>\r\n\r\n<p>Other than that, anything goes; you can organize your solution in any way you'd like.  Note that future projects will take what we call \"quality of solution\" a lot more seriously, but the name of the game in this warm-up project is simply to submit a program that works.</p>\r\n\r\n<p class=\"subtitle\">Sanity-checking your output</p>\r\n\r\n<p>We are also providing a tool that you can use to sanity-check whether you've followed the basic requirements above.  It will only give you a \"passing\" result in these circumstances:</p>\r\n\r\n<ul>\r\n  <li>You've named your file <b>project0.py</b>.</li>\r\n  <li>Executing that module is enough to execute your program.</li>\r\n  <li>Your program reads its input and generates character-by-character correct input for one test scenario.</li>\r\n</ul>\r\n\r\n<p>Note that additional test inputs will be used when we grade your project.  The way to understand the sanity checker's output is to think of it this way: Just because the sanity checker says your program passes doesn't mean it's perfect, but if you <i>cannot</i> get the sanity checker to report that your program passes, it surely will not pass all of our automated tests.</p>\r\n\r\n<p>Running the sanity checker is simple.  First, download the Python module linked below:</p>\r\n\r\n<ul>\r\n  <li><a href=\"project0_sanitycheck.py\">project0_sanitycheck.py</a></li>\r\n</ul>\r\n\r\n<p>Put that file into the same directory as your <b>project0.py</b> file.  Running the <b>project0_sanitycheck.py</b> module &mdash; for example, by loading it in IDLE and pressing F5 (or selecting <b>Run Module</b> from the <b>Run</b> menu) &mdash; will run the sanity checker and report a result, which will be printed to the Python shell.</p>\r\n\r\n<p class=\"subtitle\">How we will grade your submission</p>\r\n\r\n<p>Unlike other projects, this project will be graded on a 2-point scale, with the 2 points being allocated completely to whether or not you submitted something that meets all of the above requirements.  The following rubric will be used:</p>\r\n\r\n<ul>\r\n  <li>If all of our automated tests pass, you will receive 2 points.</li>\r\n  <li>If any of our automated tests pass (i.e., at least one of them passes, even if all the others fail), you will receive 1.5 points.</li>\r\n  <li>If none of our automated tests pass, but you did submit a file named <b>project0.py</b>, you will receive 1 point.</li>\r\n  <li>If you did not submit a file named <b>project0.py</b>, but you did submit a Python module in a file whose name ends in <b>.py</b>, you will receive 0.5 points.</li>\r\n  <li>If you did not submit a Python module at all, you will receive 0 points.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>This project is not included in the late work policy for this course.  It needs to be completed during Week 1 and submitted before the due date above.  Submissions beyond that deadline will not be considered.</p>\r\n\r\n<p>The late work policy for this course &mdash; which does not apply to this project, but applies to all of the others &mdash; is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n<p class=\"subtitle\">Should I submit if I'm not enrolled yet?</p>\r\n\r\n<p>If you're on the waitlist for the course and intending to enroll if given the chance, you'll still need to submit this project on time.  You can register yourself in Checkmate even if you're not enrolled in the course.  Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Originally written by Alex Thornton, Spring 2017, with the installation/setup information reused from a previous Assignment #0.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}