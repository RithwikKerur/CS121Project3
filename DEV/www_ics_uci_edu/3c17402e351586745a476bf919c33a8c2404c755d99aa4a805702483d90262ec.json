{"url": "https://www.ics.uci.edu/~pattis/common/handouts/bugs.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Bugs</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Bugs in Programming</h1>\r\n<p>\r\n<p>\r\n</center>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\nWebster's Collegiate Dictionary includes the following definition of\r\n  <b>bug</b>: \"an unexpected defect, fault, flaw, or imperfection.\"\r\nIn programming jargon, \"errors\" known as \"bugs\".\r\nThere are many apocryphal stories about the origin of this term and how it\r\n  got applied to programming.\r\nIn the most popular story, Grace Murray Hopper discovered that the Harvard\r\n  Mark II computer was producing incorrect answers.\r\nWhen she examined the machine more closely, trying to locate the problem, she\r\n  found a squashed moth, which was caught between the contacts of an \r\n  electromechanical relay, preventing the  relay from fully closing and\r\n  conducting electricity; ergo, the first computer bug.\r\nIn fact, she extracted the moth with a pair of tweezers and taped it into the\r\n  operator's logbook with the comment \"First actual bug found\" -implying that\r\n  the term was already in use at that time.\r\nOther stories about the first use of \"bug\" abound, so perhaps we shall never\r\n  know the true entomology of this word.\r\n<p>\r\nThe term bug became popular in programming to save the egos of programmers who\r\n  could not admit that their programs were full of errors.\r\nInstead, they preferred to say that their programs had bugs in them.\r\nActually, the metaphor is apt: programming bugs are hard to find; and although\r\n  a located bug is frequently easy to fix, it is difficult to ensure that all\r\n  the bugs have been removed from a program.\r\n<p>\r\n<b>Debugging</b> is the name that programmers give to the activity of locating\r\n  and removing errors from programs (once the errors are known to exist, from\r\n  <b>testing</b> the program).\r\nA programmer who is testing a program is often looking for new bugs to correct.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Categorizing Bugs</b></td>\r\n<td width =\"80%\">\r\nThis section categorizes bugs into four broad categories, each illustrated via\r\n  an analogy that should help clarify its nature.\r\nKnowing the names of our enemies is the first step toward defeating them, so in\r\n  the paragraphs below we define and explain the terms <b>token error</b>,\r\n  <b>syntax error</b>, <b>execution error</b>, and <b>intent error</b>.\r\n<p>\r\nYou might ask, \"Why spend so much time talking about bugs when they should\r\n  never occur?\"\r\nThe answer to this question is that programming requires an inhuman amount of\r\n  precision, and although bugs should not occur in principle, they occur\r\n frequently in practice.\r\nInstead of expecting to write a completely correct program, we should expect\r\n  to write a partially correct program.\r\nThen, we must become adept at quickly finding and fixing bugs by closely\r\n  examining our programs (either by hand or with a special tool that helps\r\n  us monitor an executing program).\r\nWhenever we change a program, we should be able to prove that at least one bug\r\n  has been removed, and that our program has become more correct.\r\nIt is common for novice programmers to change programs randomly, and as a\r\n  result make them less correct.\r\nAvoid this temptation: debug your programs by carefully analyzing them, making\r\n  only proven corrections that you understand. \r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Token Errors</b></td>\r\n<td width =\"80%\">\r\nA token error occurs whenever our program contains a word or symbol that is not\r\n  in Python's vocabulary or has been previously bound to a value..\r\nAs an analogy, suppose that one day we are standing on a street in San\r\n  Francisco, and are asked by a lost motorist, \"How can I get to Portland,\r\n  Oregon?\"\r\nIf we say, \"Just keep gngoi for ihegt hundred semil,\" we would have committed\r\n  multiple token errors.\r\nThe motorist is unable to follow our instructions, because he is unable to\r\n  decipher some of the words from which the instructions are composed.\r\nSimilarly, the Python interpreter must recognize each token (identifier, \r\n  operator, delimiter, literal, and comment) in our programs.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Syntax Errors</b></td>\r\n<td width =\"80%\">\r\nEven though the Python interpreter may recognize every token in a program, the\r\n  program still may contain a syntax error.\r\nThis type of error occurs whenever we use incorrect grammar or punctuation\r\n  (according to the syntax rules of the Python programming language).\r\nGoing back to our lost motorist, we might reply, \"For keep hundred miles going\r\n  eight just.\"\r\nHere, each word/token is individually recognizable as correct English, but we\r\n  have combined them in a senseless and convoluted manner: the parts of speech\r\n  are not in their correct positions for English grammar.\r\n<p>\r\nIf a program contains any token or syntactic errors, the Python interpreter\r\n  will discover and report them (typically in an Eclipse editor view).\r\nIn both cases, the Python Interpreter has no idea of what we meant to say, so\r\n  it will not try to correct the error; it will simply report it.\r\n<p>\r\nAll these errors are called <b>static</b> errors, because the Python\r\n  Interpreter detects them while we are typing the program, before we run it.\r\nErrors that occur when the program is running (or executing) are called\r\n  <b>dynamic</b> (or run-time) errors.\r\nIt is much easier to fix <b>static</b> errors.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Execution Errors</b></td>\r\n<td width =\"80%\">\r\nExecution errors occur when the Python intepreter is executing code and\r\n  discovers that it  can't legally carry out one of our instructions (for\r\n  example, dividing by 0).\r\nIf it recognizes such a case, it raises an exception and terminates execution\r\n  of the program (again, supplying some information about the error).\r\nReturning to our motorist trying to get from San Francisco to Portland, we\r\n  might tell him to, \"keep going for eight hundred miles.\"\r\nBut, if he happens to be facing west at the time, and interprets our\r\n  instructions literally, he could travel only a few miles before reaching the\r\n  Pacific Ocean.\r\nAt this point he would stop (we hope) and realize that he could not complete\r\n  our instructions as given.\r\nThis illustrates an execution error.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Intent Errors</b></td>\r\n<td width =\"80%\">\r\nThe final error category is the most insidious, because the Python Interpreter\r\n  cannot detect and report this kind of error when it occurs.\r\nAn intent error occurs whenever Python successfully runs our program, but the\r\n  program doesn't produce the correct result.\r\nComing back to our motorist who is trying to reach Portland from San Francisco;\r\n  we could again tell him, \"Just keep going for eight hundred miles.\"\r\nBut if this time he happened to be facing south, he could successfully finish\r\n  our instructions, but he would end up in Tijuana, Mexico not Portland, Oregon.\r\n<p>\r\nRemember that Python understands neither our programs nor what we indended them\r\n  to do.\r\nIt knows only how to run our programs.\r\nThere is no way for Python to know what we intend the program to do, or detect\r\n  that our program did not accomplish what we intended it to do.\r\n<p>\r\nFrequently, intent errors occur early in our programs and then later lead to\r\n  execution errors.\r\nIn such cases, the error may become manifest at a location that is different\r\n  than the location that is the source of the error.  \r\nThus, we must carefully examine our programs, either from the beginning, or\r\n  backward from the execution error, or end of the program, to locate the\r\n  incorrect instructions.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n<h3>Footnotes</h3>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Grace Murray Hopper</b></td>\r\n<td width =\"80%\">\r\nGrace Murray Hopper (1907-1992) was a mathematician who joined the Navy as a\r\n  WAVE during World War II.\r\nDuring her wartime service, she was a programmer who worked on the Harvard\r\n  series of computers: the first general-purpose American stored-program\r\n  computer.\r\nAfter the war she joined the Remington Rand Corporation, but also continued to\r\n  be active in the Navy.\r\nDuring the 50s and 60s she worked on the development of compilers in general,\r\n  and in particular on the programming language COBOL, which is used still\r\n  extensively for business programming.\r\n<p>\r\nShe retired from the Navy in 1986, having reached the rank of a Rear Admiral.\r\nThroughout her lifetime she was an active lecturer and educator; in her honor,\r\n  the Association of Computing Machinery (ACM) has named a prize for innovative\r\n  software developed by young computer scientists in her honor.\r\nThey also hold the \"Grace Hopper Celebration of Women in Computing\" conference\r\n  in her honor every year.\r\nThe Navy also named a guided missile destroyer in her honor.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>On the origin of Bugs: the OED</b></td>\r\n<td width =\"80%\">\r\nThe Oxford English Dictionary cites a 1889 newspaper quotation that said,\r\n  \"Mr. Edison, I was informed, had been up the two previous nights discovering\r\n  'a bug' in his phonograph.\"\r\nIt is not know where this term first occurred in print.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}