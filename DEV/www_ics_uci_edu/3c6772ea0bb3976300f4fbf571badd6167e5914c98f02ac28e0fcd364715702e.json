{"url": "https://www.ics.uci.edu/~eppstein/261/s13-mt-answers.txt", "content": "1. (a) There are two cases. If an insertion does not require a\nreallocation, then it takes O(1) actual time, and the potential function\nchanges by +2 = O(1), so the total amortized time is O(1). If it does\nrequire a reallocation, it takes O(n) actual time (where n is the number\nof items prior to the update) and the potential function changes from n\nto 2, so the total change is 2-n, cancelling the actual time and again\ngiving O(1) amortized time.\n\n(b) Again there are two cases. If a deletion does not require a\nreallocation, it takes O(1) actual time and changes the potential\nfunction by +1, so the total is O(1). If it does require a reallocation,\nthen (letting n be the number of items prior to the update) it takes\nO(n) actual time, and the potential function changes from n to 1, so the\ntotal change is 1-n, again cancelling the actual time and giving O(1)\namortized time.\n\n(c) No.\n\nExplanation 1: Because amortized analysis is only valid if you use the\nsame potential function to analyze every operation.\n\nExplanation 2: For this problem, it is possible to have a sequence of\noperations that alternate between insertions and deletions, with the\narray at the threshold value so that every operation leads to a\nreallocation. For this sequence of operations, the actual time per\noperation is Theta(n). It is not possible for the sum of the amortized\ntimes, over a sequence of operations, to be less than the sum of the\nactual times, so it is not possible to come up with an amortized\nanalysis that uses only O(1) time per operation.\n\n\n2.\n  o\n /|\\\no o o\n\nThis tree has three children and only four nodes. However in a Fibonacci\nheap every tree with three children has at least five nodes.\n\n\n3. (a) Let the two hash functions be h1 and h2. If the three keys x, y,\nand z have h1(x)=h1(y)=h1(z) and h2(x)=h2(y)=h2(z) then they will cause\na failure, and this is the only pattern for three keys that will cause a\nfailure.\n\n(b) 1/10000 = 1/10^4. Whatever values are chosen for h1(x) and h2(x), there is a one in ten probability that the same values are chosen for each of h1(y), h2(y), h1(z), and h2(z). Because of 3-independence, it is safe to compute the probability that all of these events happen at once by multiplying together the four 1/10 probabilities.\n\n\n4. There are four tables of 2^8 entries each, for a total of 1024 random numbers.\n\n\n5. Use successor(-infinity) to find the highest priority item.\n\n\n6. The simplest answer is to set w_i = 1/2^i.  Then W = sum w_i < 2, so\nlog(W/w_i) < log(2^{i+1}) = i+1.\n\nIt is also possible to set w_i=1/(i+1)^2; using this choice gives time\nO(log(i+1)) amortized time per operation, better than the O(i+1)\nrequired by the problem. (It is necessary to use 1/(i+1)^2 rather than\n1/i^2 to avoid dividing by zero for i=0.) However it doesn't work to use\nw_i=1/(i+1) because then we would have W=Theta(log n) and\nlog(W/w_i)=O(log i + loglog n), not good enough for small values of i.\n", "encoding": "ascii"}