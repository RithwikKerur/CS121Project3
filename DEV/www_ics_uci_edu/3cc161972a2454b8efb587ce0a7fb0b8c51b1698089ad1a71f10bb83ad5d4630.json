{"url": "https://www.ics.uci.edu/~ejw/authoring/draft-ota-http-version-00.txt", "content": "\nInternet Draft\t\t\t\t\t           K. Ota, NTT\n<draft-ntt-http-version-00>                          K. Takahashi, NTT\n                                               K. Sekiya, NTT Software\nExpires May 1997                                     November 06, 1996\n\n\n\tVersion management with meta-level links via HTTP/1.1\n\nStatus of Memo\n\n     This document is an Internet-Draft.  Internet-Drafts are working\n     documents of the Internet Engineering Task Force (IETF), its\n     areas, and its working groups.  Note that other groups may also\n     distribute working documents as Internet-Drafts.\n\n     Internet-Drafts are draft documents valid for a maximum of six\n     months and may be updated, replaced, or obsoleted by other\n     documents at any time.  It is inappropriate to use Internet-\n     Drafts as reference material or to cite them other than as\n     ``work in progress.''\n\n     To learn the current status of any Internet-Draft, please check\n     the ``1id-abstracts.txt'' listing contained in the Internet-\n     Drafts Shadow Directories on ftp.is.co.za (Africa),\n     nic.nordu.net (Europe), munnari.oz.au (Pacific Rim),\n     ds.internic.net (US East Coast), or ftp.isi.edu (US West Coast).\n\n     Distribution of this document is unlimited. Please send comments\n     to Kenji Ota, NTT (ota@nttlabs.com), Kenji Takahashi\n     (kt@nttlabs.com), or Kazuchika Sekiya (sekiya@ntts.com).\n\nAbstract\n\n\tThis draft describes version management of the resources with\n\tsome extensions to HTTP/1.1.\n\tThe main point of our approach is to use meta-level links,\n\twhich is not an anchor of HTML format, but an attribute of the\n\tresource. So, the contents need not to be an HTML format.\n\n1. Introduction\n\n\tConventionally, most resources are linked each other with\n\tlinks described in HTML files. This mechanism is not useful in\n\tversion management, because HTML files have to be edited in\n\torder to manipulate the links between the versions of a\n\tresource.\n\n\t This document describes a mechanism for version management of \n\tresources, which uses meta-level links. A meta-level link\n\trelates two resources outside the contents of resources. So,\n\tthe contents need not to be an HTML format.\n\n\t This document also describes the classification of the\n\tPUT method. It is used for the server to distinguish between\n\tnormal resources and versioned resources.\n\n\t The locking mechanism is also described. It prevents multiple\n\tclients from editing the same resource at one time. So, our\n\tpolicy of locking is similar to RCS.\n\n2. Meta-level links\n\n\tA meta-level link, that is meta-information of resources, \n\trelates two resources outside the contents of resources. \n\tIt is independent from the contents of resource. So, the\n\tcontent of the resource needs not to be HTML format.\n\tThe draft specification of HTTP/1.1[1] specifies \"Link:\"\n\theader field in the appendices chapter. \n\n\tThe LINK and UNLINK methods manipulate the meta-level links. These\n\tmethods are also specified in the appendices chapter of\n\tHTTP/1.1 specification.\n\n\tIf the GET or HEAD request sends to the server, the server\n\treturns the \"Link:\" header in the response.\n\tIf the PUT request sends to the server with the \"Link:\"\n\theader, the server establishes the links between the\n\tresource specified by Request-URI and resources specified in\n\tthe \"Link:\" header.\n\n\tThe meta-level links can be used to manage the versions of the\n\tresources. The chapter 5 describes details of version\n\tmanagement using this meta-level links. The meta-level links\n\tthemselves are so generic as to used for other purposes than\n\tversion management. For example, annotations to some web\n\tcontents can be linked by using this.\n\n3. Locking mechanism\n\n\tWe propose LOCK/UNLOCK method for locking a resource.\n\tLocking a resource means that the server excludes the other\n\trequests for update to the same resource, in order to\n\tmake sure that only one user can update a resource while the\n\tresource being locked.\n\tWe also propose \"X-Lock:\" header field.\n\n\tIt is assumed that the client and the server have some\n\tauthentication functions. This document does not refer to it.\n\n  3.1. LOCK/UNLOCK\n\n\tThe LOCK method requests that the server lock the\n\tresource identified by the Request-URI. \n\n\tThe UNLOCK method requests that the server cancel the\n\tlock status of the resource identified by the\n\tRequest-URI.\n\n\tOnly the user who has locked a resource can request PUT, POST,\n\tLOCK or UNLOCK to it. Any users, however, can always request\n\tGET, HEAD and LINK.\n\n  3.2. X-Lock: header field\n\n\tThe \"X-Lock:\" is a header in the server response that\n\trepresents the information about locking status of a requested\n\tresource.\n\tWhen the client sends a GET, HEAD or LOCK request to the\n\tlocked resource, the server returns the response including\n\tthe \"X-Lock:\" header. Then, the client can show the\n\tinformation to the users. The followings are BNF and an\n\texample of this header.\n\n\tX-Lock = \"X-Lock\" \":\" \"user=\" user_name \";\" \"date=\" HTTP-date\n\tuser_name = 1*8(ALPHA | DIGIT)\n\n\tex.\n\tX-Lock: user=\"sekiya\"; date=\"Thu, 15 Feb 1996 23:44:20 GMT\"\n\n4. Creation and modification of web resources via HTTP\n\n  4.1. \"X-PUT-Class\" header field\n\n\tWe propose \"X-PUT-Class\" header field for the PUT method. \n\tIt specifies a type of a resource when the resource is\n\tcreated. The server decides how to handle to the resource\n\taccording to the value of its field. The strings of \"File\",\n\t\"Mkdir\" or \"VersionedFile\" are allowed as its value. The value\n\tof the header field is stored as an attribute of the resource.\n\tBNF is as follows,\n\n\t\tPUT-Class = \"X-PUT-Class\" : PUT_type\n\t\tPUT_type = (\"File\" | \"Mkdir\" | \"VersionedFile\")\n\n\tThe meaning of each values is as follows.\n\n\t- \"File\"\n\t\tThe resource specified by the Request-URI is created\n\t\tas a normal file. The PUT request to this type of\n\t\tresource requests that the server overwrite the\n\t\tcontents with the new entity.\n\t- \"VersionedFile\"\n\t\tThe resource specified by the Request-URI is created\n\t\tas a versioned file. The PUT request to this type of\n\t\tan existing resource means that the server creates a\n\t\tnew version of resource with the received entity.\n\t- \"Mkdir\"\n\t\tThe resource specified by the Request-URI is created\n\t\tas an identifier of a collection of resources, such a\n\t\tdirectory, that manages the name for some resources\n\t\tunder it.\n\n5. Versioning\n\n\t We have decided our naming scheme based on the following:\n\n\t(1) accessibility from existing browsers (e.g. Netscape)\n\t(2) easy manipulation in existing directory-based file systems\n\t\t(e.g. UNIX file system)\n\t(3) ability of representing \"composite\" versions\n\t\t(e.g. version 2 of composite resource that consists of\n\t\tversion 5 of X, a component resource, and version 3 of\n\t\tY, another component resource)\n\n  5.1. Naming Scheme\n\n\tA series of versions of a resource is identified by a unique\n\tdirectory name in a file system as a \"representative\"\n\tURL. Each version of a resource is placed under the directory\n\tand represented as follows:\n\n\t\trepresentative_URL \"/\" version_number\n\n\tFor example, version 3 of\n\t\"http://www.nttlabs.com/project1/x.html\" is represented as\n\tfollows:\n\n\t\thttp://www.nttlabs.com/project1/x.html/3\n\n\tThe latest version is referred by the representative URL and\n\tspecific version can be referred by the representative URL +\n\t\"/version_number\". (Figure 1.)\n\t In this way, users can access any version by existing\n\tbrowsers and easily manipulate it in existing file systems. \n\n  5.2. Versioning by using Link mechanism\n\n\t Each time a version of a resource has been revised, a new\n\tversion is created and given a new URL based on the naming\n\tscheme described above.  In the same time, the original and\n\tnew versions are linked bidirectionally with meta-level links.\n\tA link named \"new\" is established from the original to new\n\tversions and a link named \"old\" is established from the new to\n\toriginal versions.\n\n\tFor example, Figure 1. illustrates links between\n\tversions of a resource (http://host/some/resource).\n \n\n\t\t\thttp://host/some/resource --------+\n                                                          |\n\t------------------------------------------------- | --------\n                                                          |\n                                                          V\n\n             /1             /2             /3             /4\n\t+----------+   +----------+   +----------+   +----------+\n\t|+--------+|   |+--------+|   |+--------+|   |+--------+|\n\t||  new   ||-->||  new   ||-->||  new   ||-->||  new   ||\n\t||        ||<--||  old   ||<--||  old   ||<--||  old   ||\n\t|+--------+|   |+--------+|   |+--------+|   |+--------+|\n\t|+--------+|   |+--------+|   |+--------+|   |+--------+|\n\t||        ||   ||        ||   ||        ||   ||        ||\n\t||        ||   ||        ||   ||        ||   ||        ||\n\t||        ||   ||        ||   ||        ||   ||        ||\n\t|+--------+|   |+--------+|   |+--------+|   |+--------+|\n\t+----------+   +----------+   +----------+   +----------+\n                                                     latest version\n\n\t\tFigure 1. Links between versions of a resource\n\n\n\t A particular version of a resource can be transmitted via\n\tHTTP by specified by the \"Content-Version:\" field of HTTP\n\theaders, or according to the naming scheme when using existing\n\tclients. The following is an example of two type of\n\tspecifying some version of a certain resource.\n\n\t\thttp://www.nttlabs.com/project1/x.html/3\n\t\t\tor \n\t\thttp://www.nttlabs.com/project1/x.html\n\t\tContent-Version: \"3\"\n\n  5.3. Examples of HTTP interactions\n\n    5.3.1. Create a new resource\n\n\t[request]\n\t\tPUT http://server/path/resource\n\t\t\tX-PUT-Class: VersionedFile\n\t\t(contents of initial version)\n\n\t[response]\n\t\t201 Created\n\t\thttp://server/path/resource\n\t\tContent-Version: \"1\"\n\n    5.3.2. Retrieve latest version\n\n\t[request]\n\t\tGET http://server/path/resource\n\t\t(Retreive the latest version automatically)\n\n\t[response]\n\t        200 OK\n\t        Content-Version: \"5\"\n\t\tLink: <http://server/path/resource/4>; rel=\"old\"\n\t        (contents of version 5)\n\n    5.3.3. Retrieve a particular version\n\n\t[request]\n\t\tGET http://server/path/resource\n\t\tContent-Version: \"3\"\n\n\t\t  or \n\t\tGET http://server/path/resource/3\n\n\t[response]\n\t\t200 OK\n\t\tContent-Version: \"3\"\n\t\tLink: <http://server/path/resource/2>; rel=\"old\"\n\t\tLink: <http://server/path/resource/4>; rel=\"new\"\n\t\t(contents of version 3)\n\n    5.3.4. Update an existing (versioned) resource\n\n\t[request]\n\t\tPUT http://server/path/resource\n\t        (changed contents)\n\n\t[response]\n\t        201 Created\n\t        (Resource for new version are created, and establish\n\t\tlinks between created version and its new/old version)\n\nReferences\n\n[1] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk and T. Berners-Lee,\n\t\"Hypertext Transfer Protocol -- HTTP/1.1,\"\n\tInternet Draft, Work in Progress, August 1996\n\n[2] E. J. Whitehead, Jr.,\n\t\"Requirements on HTTP for Distributed Content Editing,\"\n\tInternet Draft, Work in Progress, September 1996\n\n[3] T. Berners-Lee, L. Masinter, M. McCahill. \"Uniform Resource\n\tLocators (URL).\" RFC 1738, CERN, Xerox PARC, University of\n\tMinnesota, December 1994.\n\nAuthor Address\n\nKenji Ota\nNTT Software Laboratories\n250 Cambridge Avenue, #205\nPalo Alto, CA 94306, USA\nEmail: ota@nttlabs.com\n\nKenji Takahashi\nNTT Multimedia Communications Laboratories\n250 Cambridge Avenue, #205\nPalo Alto, CA 94306, USA\nEmail: kt@nttlabs.com\n\nKazuchika Sekiya\nNTT Software Corporation\n250 Cambridge Avenue, #205\nPalo Alto, CA 94306, USA\nEmail: sekiya@ntts.com\n", "encoding": "ascii"}