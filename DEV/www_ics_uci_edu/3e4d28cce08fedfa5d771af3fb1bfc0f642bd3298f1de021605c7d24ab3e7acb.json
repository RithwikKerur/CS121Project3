{"url": "https://www.ics.uci.edu/~ardalan/courses/os/grading.html", "content": "<!--\n * Contains elements from:\n *\n * http://www.cs.columbia.edu/~roxana/research/index.html\n * https://www.cs.jhu.edu/~huang/cs318/fall18/project/guide.html\n *\n -->\n<html class=\"no-js\" lang=\"en\"><!-- Created on August, 12 2017 by texi2html 1.66 --><!--\nWritten by: Lionel Cons <Lionel.Cons@cern.ch> (original author)\n            Karl Berry  <karl@freefriends.org>\n            Olaf Bachmann <obachman@mathematik.uni-kl.de>\n            and many others.\nMaintained by: Many creative people <dev@texi2html.cvshome.org>\nSend bugs and suggestions to <users@texi2html.cvshome.org>\n-->\n<head>\n    <meta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <title>Ardalan Amiri Sani</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <link rel=\"stylesheet\" href=\"css/style.css\">\n    <link rel=\"shortcut icon\" href=\"img/favicon.ico\">\n</head>\n\n<body>\n<div id=\"main_body\">\n\n    <table width=\"100%\" height=125>\n        <tr>\n            <td>\n                <h1>CompSci 143A: Principles of Operating System</h1>\n                <p>\n                    <b>Instructor:</b> <a href=\"http://www.ics.uci.edu/~ardalan/\">Ardalan Amiri Sani</a><br/>\n                </p>\n            </td>\n        </tr>\n    </table>\n\n    <div id=\"navigation\">\n        <ul>\n            <li><a href=\"index.html\">Home</a></li>\n            <li><a href=\"lectures.html\">Lectures</a></li>\n            <li><a href=\"homework.html\">Homework</a></li>\n            <li><a href=\"discussions.html\">Discussions</a></li>\n            <li><a href=\"reading.html\">Reading</a></li>\n            <li><a href=\"project.html\">Project</a></li>\n        </ul>\n    </div>\n\n\n    <h2 id=\"grading\">Grading Policy</h2>\n\n    <p>We will grade your assignments based on test results and design quality,\n        which comprises <strong>60%</strong> and <strong>40%</strong> of your grade, respectively.</p>\n\n    <hr size=\"6\">\n\n    <h3 id=\"test-results\">Test Results</h3>\n    <p>\n\n        Your test result grade (for lab 1) will be based on our tests. Lab 1 has\n        several tests, each of which has a name beginning with <q><tt>tests</tt></q>.\n        To completely test your submission, invoke <code>make check</code> from the\n        project <q><tt>build</tt></q> directory. This will build and run each test and\n        print a \"pass\" or \"fail\" message for each one. When a test fails,\n        <code>make check</code> also prints some details of the reason for failure.\n        After running all the tests, <code>make check</code> also prints a summary\n        of the test results.\n    </p>\n    <p>\n\n        For lab 1, the tests will probably run faster in Bochs (compared to QEMU).\n\t<!--For the\n\t rest of the projects, they will run much faster in QEMU.-->\n        <code>make check</code> will select the faster simulator by default, but\n        you can override its choice by specifying <code><samp>SIMULATOR=--bochs</samp></code> or\n        <code><samp>SIMULATOR=--qemu</samp></code> on the <code>make</code> command line.\n    </p>\n    <p>\n\n        You can also run individual tests one at a time. A given test <var>t</var>\n        writes its output to <q><tt><var>t</var>.output</tt></q>, then a script scores the\n        output as \"pass\" or \"fail\" and writes the verdict to\n        <q><tt><var>t</var>.result</tt></q>. To run and grade a single test, <code>make</code>\n        the <q><tt>.result</tt></q> file explicitly from the <q><tt>build</tt></q> directory, e.g.\n        <code>make tests/threads/alarm-multiple.result</code>. If <code>make</code> says\n        that the test result is up-to-date, but you want to re-run it anyway,\n        either run <code>make clean</code> or delete the <q><tt>.output</tt></q> file by hand.\n    </p>\n    <p>\n\n        By default, each test provides feedback only at completion, not during\n        its run. If you prefer, you can observe the progress of each test by\n        specifying <q><samp>VERBOSE=1</samp></q> on the <code>make</code> command line, as in\n        <code>make check VERBOSE=1</code>. You can also provide arbitrary options to the\n        <code>pintos</code> run by the tests with <q><samp>PINTOSOPTS='\n        <small>...</small>\n        '</samp></q>,\n        e.g. <code>make check PINTOSOPTS='-j 1'</code> to select a jitter value of 1\n        (see section <a href=\"pintos/pintos_1.html#SEC6\">1.1.4\n        Debugging versus Testing</a>).\n    </p>\n    <p>\n\n        All of the tests and related files are in <q><tt>pintos/src/tests</tt></q>.\n        Before we test your submission, we will replace the contents of that\n        directory by a pristine, unmodified copy, to ensure that the correct\n        tests are used. Thus, you can modify some of the tests if that helps in\n        debugging, but we will run the originals.\n    </p>\n    <p>\n\n        All software has bugs, so some of our tests may be flawed. If you think\n        a test failure is a bug in the test, not a bug in your code,\n        please point it out. We will look at it and fix it if necessary.\n    </p>\n    <p>\n\n    </p>\n    <div class=\"panel panel-warning\">\n        <div class=\"panel-heading\">\n            <strong>Warning!</strong>\n        </div>\n        <div class=\"panel-body\">\n            Please don't try to take advantage of our generosity in giving out our\n            test suite. Your code has to work properly in the general case, not\n            just for the test cases we supply. For example, it would be unacceptable\n            to explicitly base the kernel's behavior on the name of the running\n            test case. Such attempts to side-step the test cases will receive no\n            credit. If you think your solution may be in a gray area here, please ask us.\n        </div>\n    </div>\n    <p></p>\n    <p>\n\n    </p>\n    <hr size=\"6\">\n    <h3>Design</h3>\n    <p>\n\n        We will judge your design based on the design document and the source\n        code that you submit. We will read your entire design document and much\n        of your source code.\n    </p>\n    <p>\n\n        Don't forget that design quality, including the design document, is 40%\n        of your project grade. It\n        is better to spend one or two hours writing a good design document than\n        it is to spend that time getting the last 5% of the points for tests and\n        then trying to rush through writing the design document in the last 15\n        minutes.\n    </p>\n\n    <hr size=\"6\">\n    <h4>Design Document</h4>\n    <p>\n\n        We provide a design document template for the project. For each\n        significant part of a project, the template asks questions in four\n        areas:\n    </p>\n    <p>\n\n    </p>\n    <dl compact=\"\">\n        <dt><strong>Data Structures</strong>\n        </dt>\n        <dd><p>\n\n            The instructions for this section are always the same:\n        </p>\n            <p>\n\n            </p>\n            <blockquote>\n                Copy here the declaration of each new or changed <code>struct</code> or\n                <code>struct</code> member, global or static variable, <code>typedef</code>, or\n                enumeration. Identify the purpose of each in 25 words or less.\n            </blockquote>\n            <p>\n\n                The first part is mechanical. Just copy new or modified declarations\n                into the design document, to highlight for us the actual changes to data\n                structures. Each declaration should include the comment that should\n                accompany it in the source code (see below).\n            </p>\n            <p>\n\n                We also ask for a very brief description of the purpose of each new or\n                changed data structure. The limit of 25 words or less is a guideline\n                intended to save your time and avoid duplication with later areas.\n            </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><strong>Algorithms</strong>\n        </dt>\n        <dd><p>\n\n            This is where you tell us how your code works, through questions that\n            probe your understanding of your code. We might not be able to easily\n            figure it out from the code, because many creative solutions exist for\n            most OS problems. Help us out a little.\n        </p>\n            <p>\n\n                Your answers should be at a level below the high level description of\n                requirements given in the assignment. We have read the assignment too,\n                so it is unnecessary to repeat or rephrase what is stated there. On the\n                other hand, your answers should be at a level above the low level of the\n                code itself. Don't give a line-by-line run-down of what your code does.\n                Instead, use your answers to explain how your code works to implement\n                the requirements.\n            </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><strong>Synchronization</strong>\n        </dt>\n        <dd><p>\n\n            An operating system kernel is a complex, multithreaded program, in which\n            synchronizing multiple threads can be difficult. This section asks\n            about how you chose to synchronize this particular type of activity.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><strong>Rationale</strong>\n        </dt>\n        <dd><p>\n\n            Whereas the other sections primarily ask \"what\" and \"how,\" the\n            rationale section concentrates on \"why.\" This is where we ask you to\n            justify some design decisions, by explaining why the choices you made\n            are better than alternatives. You may be able to state these in terms\n            of time and space complexity, which can be made as rough or informal\n            arguments (formal language or proofs are unnecessary).\n            &lt;/DL&gt;\n        </p>\n            <p>\n\n                An incomplete, evasive, or non-responsive design document or one that\n                strays from the template without good reason may be penalized.\n                Incorrect capitalization, punctuation, spelling, or grammar can also\n                cost points. See section <a\n                    href=\"pintos/pintos_9.html#SEC142\">D. Project\n                Documentation</a>, for a sample design document\n                for a fictitious project.\n            </p>\n            <p>\n\n            </p>\n            <hr size=\"6\">\n            <h4> Source Code </h4>\n\n            Your design will also be judged by looking at your source code. We will\n            typically look at the differences between the original Pintos source\n            tree and your submission, based on the output of a command like\n            <code>diff -urpb pintos.orig pintos.submitted</code>. We will try to match up your\n            description of the design with the code submitted. Important\n            discrepancies between the description and the actual code will be\n            penalized, as will be any bugs we find by spot checks.\n            <p></p>\n            <p>\n\n                The most important aspects of source code design are those that specifically\n                relate to the operating system issues at stake in the project.\n\t\t<!--For\n                example, the organization of an inode is an important part of file\n                system design, so in the file system project a poorly designed inode\n                would lose points.\n\t\t-->Other issues are much less important. For\n                example, multiple Pintos design problems call for a \"priority\n                queue,\" that is, a dynamic collection from which the minimum (or\n                maximum) item can quickly be extracted. Fast priority queues can be\n                implemented many ways, but we do not expect you to build a fancy data\n                structure even if it might improve performance. Instead, you are\n                welcome to use a linked list (and Pintos even provides one with\n                convenient functions for sorting and finding minimums and maximums).\n            </p>\n            <p>\n\n                Pintos is written in a consistent style. Make your additions and\n                modifications in existing Pintos source files blend in, not stick out.\n                In new source files, adopt the existing Pintos style by preference, but\n                make your code self-consistent at the very least. There should not be a\n                patchwork of different styles that makes it obvious that three different\n                people wrote the code. Use horizontal and vertical white space to make\n                code readable. Add a brief comment on every structure, structure\n                member, global or static variable, typedef, enumeration, and function\n                definition. Update\n                existing comments as you modify code. Don't comment out or use the\n                preprocessor to ignore blocks of code (instead, remove it entirely).\n                Use assertions to document key invariants. Decompose code into\n                functions for clarity. Code that is difficult to understand because it\n                violates these or other \"common sense\" software engineering practices\n                will be penalized.\n            </p>\n            <p>\n\n                In the end, remember your audience. Code is written primarily to be\n                read by humans. It has to be acceptable to the compiler too, but the\n                compiler doesn't care about how it looks or how well it is written.\n            </p>\n            <p></p></dd>\n        <p></p></dl>\n    <p></p>\n\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}