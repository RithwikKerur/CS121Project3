{"url": "https://www.ics.uci.edu/~goodrich/teach/cs165/proj/proj1.html", "content": "<html>\n\n<head>\n<title>CS 165 - Project 1 - Testing Running Times</title>\n</head>\n\n<body bgcolor=\"#FFFFFF\">\n\n<center>\n\n<h2>\nCS 165 - Project 1 - Testing Running Times<br>\n100 points\n</h2>\n<p>\n<b>Due:</b> <del>Friday, April 26, 2019</del> <b>Monday, April 29, 2019, 11:55pm</b> </h2>\n<p>\n<b>\nPlease submit your project electronically via \n<a href=\"https://eee.uci.edu/\">EEE Dropbox</a>,\nwith the source code as a single zip file and your report\nas a single pdf file.\n</b>\n\n</center>\n\n<p>\nProject 1 involves testing various sorting algorithms experimentally to \ndetermine their real-world running times.\nIn particular, you will need to implement each of the following\nsorting algorithms:\n\n<ul>\n<li> <b>Bubble-sort</b>\n<li> <b>Insertion-sort</b>\n<li> <b>Spin-the-bottle sort</b>\n<li> <b>Two implementations of Shellsort</b> (using two different gap sequences)\n<li> <b>Two implementations of Annealing sort</b> \n(using two different temperature-repetition sequences)\n</ul>\n\n<p>\nFor each implementation, you need to perform runtime experiments\non random permutations, with multiple\nruns for each problem size, for increasing problem sizes. \nSpecifically, you need to do a set of experiments for each of the following\ndistributions:\n<ul>\n<li> <b>Uniformly distributed permutations</b>, \nthat is, permutations of the numbers, 1,2,3,...,n,\nwhere all permutations are equally likely.\n<li>\n<b>Almost-sorted permutations</b>. These are generated by starting with a \nsorted array/vector of n numbers, say, the numbers 1,2,3,...,n, in this order.\nThen, independently\nchoose 2log n pairs, (i,j), where i and j are uniformly-chosen random integers\nin the range from 0 to n-1, and swap the numbers at positions i and j in \nthe array/vector.\n</ul>\n\n<p>\nYou must plot \nthe results on a \n<a href=\"https://en.wikipedia.org/wiki/Log%E2%80%93log_plot\">\nlog-log scale</a> (with uniformly distrubted permuations on one\nplot and almost-sorted permutations on another)\nto empirically determine the algorithm's\nasymptotic running time for each type of distribution.\nYou then need to rank all your sorting implementations from asymptotically slowest\nto fastest based on your experimental results.\n\n<p>\nIn addition, for Shellsort and Annealing sort, you need to test two different\nsets of parameters that are used by the algorithm, comparing the two to see\nwhich one is best. \nYou should experiment with several different parameter sets, so that the\nfinal two you use are the two best among many.\nYou should strive to find parameter sets so that one of your Shellsort or\nAnnealing sort implementations is the fastest among all the \nsorting algorithms you test.\n\n<p>\nProduce a report write-up that explains the algorithms you implemented, reports\non the runtime performance you observed in your experiments, and makes a\nconclusion regarding which of the set of algorithms you tested is best and why\nyou think it is best.\n\n<p>\nTurn in your source code (but not test data) as one big zip file, so that when\nit is unzipped, the code for each algorithm is in a different file, \nnamed as follows:\n<ul>\n<li> bubble_sort.cpp\n<li> insertion_sort.cpp \n<li> spin_the_bottle_sort.cpp\n<li> shell_sort.cpp\n<li> annealing_sort.cpp\n</ul>\nAll your files should include the file,\n<a href=\"project1.h\">project1.h</a>.\nYou should also have a file, main.cpp, that runs all your experiments.\n\n<p>\nTurn in your report write-up as one PDF file.\n\n</body>\n\n</html>\n", "encoding": "ascii"}