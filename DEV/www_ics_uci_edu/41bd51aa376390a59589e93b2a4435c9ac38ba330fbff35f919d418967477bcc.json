{"url": "https://www.ics.uci.edu/~thornton/ics21/LabManual/Lab2/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 21 / CSE 21 Summer 2012, Lab 2: Animated Smiley</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 21 / CSE 21 Summer 2012 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../LabManual\">Lab Manual</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 21 / CSE 21 Summer 2012<br />\n   Lab 2: Animated Smiley</p>\n   \n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Purpose</p>\n\n<p>This assignment gives you some more practice in basic Java programming, including practice with \"if\" statements and simple loops, by enhancing the previous Smiley program to handle animation of a smiley face as it moves and interacts with the walls (boundaries) of the graphics window.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Reminder: Find yourself a new partner!</p>\n\n<p>We're requiring you to work with a different partner on each assignment, so don't forget to find a new partner before you proceed with this assignment.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Program behavior and general requirements</p>\n\n<p>In general, you are to complete the Java class SmileyAnimation, which we've added to the Smiley program so that smiley faces can be animated.</p>\n\n<p>A completed version of this program will work in the following way:</p>\n\n<ul>\n  <li>When you execute the program (i.e., run the main method in the Smiley class), a graphics window appears, with a smiley face in it and colored walls around the edges.</li>\n  <li>The exact shape and color of the smiley face and its parts are up to you, within the bounds that the face must be small enough that it can move around within the graphics window, and that it be recognizable as a smiley face.</li>\n  <li>The smiley face heads off in some direction toward one of the walls.  When it hits one of the walls, it should:\n    <ol>\n      <li>Change the color of its face to the color of the wall, and the wall color should become the color of the smiley face; in other words, the colors swap.</li>\n      <li>Rebound from the wall, either directly (going back the way it came), or at 45 degrees up or down (if it hit the left or right wall) or 45 degrees left or right (if it hit the top or bottom wall); the direction is randomly chosen.</li>\n    </ol>\n  </li>\n  <li>This behavior continues for a number of milliseconds that is specified by a constant in the program.  Every time the smiley hits a wall, the smiley and the wall swap colors and the smiley rebounds, heading to another wall.</li>\n  <li>Closing the window ends the program, even if the window is closed while the smiley is still moving.</li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Technical details</p>\n\n<p>For this assignment, we've again helped you get started by providing some code and lots of comments and documentation.  All of your work is to be done in the SmileyAnimation class.  We've provided several already-written classes (in compiled form) that provide functions that you will likely need to use in your program.  Three of these in particular &mdash; SmileyFace, SmileyFacePart, and SmileyDisplay &mdash; have public methods you may need to employ, so we've included text files &mdash; SmileyFace.txt, SmileyFacePart.txt, and SmileyDisplay.txt &mdash; describing those public methods.  You may be surprised that SmileyFace and SmileyFacePart are not provided in source code form, since you wrote them in the last assignment.  But that is exactly the point: having written and thoroughly tested them, we can now use their methods to make and manipulate smiley face characteristics without paying attention to the classes' details; we don't need the source to use the classes' capabilities.</p>\n\n<p>These files have been collected into an Eclipse project and zipped into an archive called <a href=\"21Lab2.zip\">21Lab2.zip</a>.  Using the same procedure that you followed in the last assignment, import this project into your Eclipse workspace.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Testing tips</p>\n\n<p>It's typically fastest to implement and debug a program when it is done in stages; when something goes wrong, you know it was because of changes made at the current stage, thus reducing the amount of code you have to search to find the mistake.  Testing in stages can take many forms.  For this assignment, since all of the methods you are writing are in one class, testing in stages boils down to adding and testing a method or two at a time, judiciously choosing them so that, as you add them, you are incrementally heading to a completed program.</p>\n\n<p>For an example, here's an outline of one way to incrementally implement and test your program:</p>\n\n<ul>\n  <li>Start by just constructing and painting the initial smiley face; don't animate it yet.  Fill in methods that require a return value (such as those that check whether a wall has been hit) with a \"bogus\" return value initially, with the understanding that you'll write them correctly later.</li>\n  <li>Move the smiley in one, chosen direction (not randomly) and make sure it goes in that direction.  Change the chosen direction a few times and re-run the program, making sure each time that the smiley face goes where it's supposed to go.</li>\n  <li>Using the chosen direction, make the smiley stop when it reaches a wall; repeat for all four walls.</li>\n  <li>When the smiley hits a wall, swap the color of the wall with the face's color; repeat for all four walls.</li>\n  <li>Have the smiley hit the wall \"dead on,\" swap colors and have the smiley return back the way it came; repeat for all four walls.</li>\n  <li>Have the smiley rebound from a wall at the three angles that can (later) randomly occur; repeat for each angle and each of the four walls.</li>\n  <li>Choose the \"bounce direction\" randomly, as described above.</li>\n  <li>Test the whole program with various starting positions, sizes, and colors of smiley faces.</li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">About Lab Exam 2</p>\n\n<p>Lab Exam 2 will be very similar, but perhaps not identical, to the program you are being asked to write for this assignment.  The lab exam will ask you to implement one or more of the following methods from the SmileyAnimation class:</p>\n\n<ul>\n  <li>The SmileyAnimation constructor</li>\n  <li>animate</li>\n  <li>hitSomething</li>\n  <li>adjustColorAndDirection</li>\n  <li>adjustColor</li>\n  <li>adjustDirection</li>\n  <li>hitLeftWall</li>\n  <li>hitRightWall</li>\n  <li>hitTopWall</li>\n  <li>hitBottomWall</li>\n</ul>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Adapted by Alex Thornton to emphasize the use of Eclipse, Summer 2009.</li>\n  <li>Originally written by Norm Jacobson, September 2006 - September 2008.</li>\n</ul>\n\n</div>", "encoding": "ascii"}