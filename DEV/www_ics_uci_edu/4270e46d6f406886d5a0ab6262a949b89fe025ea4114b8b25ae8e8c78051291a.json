{"url": "https://www.ics.uci.edu/~jmoorkan/vhdlref/var_dec.html", "content": "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=us-ascii\">\n<!-- base href=\"http://www.vdlande.com/VHDL/var_dec.html\" --><title>VHDL Reference Guide - Variable Declaration</title></head><body bgcolor=\"mintcream\"><div style=\"border: 1px solid rgb(153, 153, 153); margin: -1px -1px 0pt; padding: 0pt; background: rgb(255, 255, 255) none repeat scroll 0% 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;\"><div style=\"border: 1px solid rgb(153, 153, 153); margin: 12px; padding: 8px; background: rgb(221, 221, 221) none repeat scroll 0% 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; font-family: arial,sans-serif; font-style: normal; font-variant: normal; font-size: 13px; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none; color: rgb(0, 0, 0); font-weight: normal; text-align: left;\">This is Google's cache of <a href=\"http://www.vdlande.com/VHDL/var_dec.html\" style=\"text-decoration: underline; color: rgb(0, 0, 204);\">http://www.vdlande.com/VHDL/var_dec.html</a>. It is a snapshot of the page as it appeared on Oct 15, 2009 21:22:17 GMT. The <a href=\"http://www.vdlande.com/VHDL/var_dec.html\" style=\"text-decoration: underline; color: rgb(0, 0, 204);\">current page</a> could have changed in the meantime. <a href=\"http://www.google.com/intl/en/help/features_list.html#cached\" style=\"text-decoration: underline; color: rgb(0, 0, 204);\">Learn more</a><br><br><div style=\"float: right;\"><a href=\"http://74.125.155.132/search?q=cache:GV8uFD0u1B0J:www.vdlande.com/VHDL/var_dec.html+site:www.vdlande.com+VHDL+reference+guide+vdlande&amp;hl=en&amp;client=firefox-a&amp;gl=us&amp;strip=1\" style=\"text-decoration: underline; color: rgb(0, 0, 204);\">Text-only version</a></div>\n<div>These search terms are highlighted: <span style=\"background: rgb(255, 255, 102) none repeat scroll 0% 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-weight: bold;\">vhdl</span>&nbsp;These terms only appear in links pointing to this page: <span style=\"font-weight: bold;\">reference</span>&nbsp;<span style=\"font-weight: bold;\">guide</span>&nbsp;<span style=\"font-weight: bold;\">vdlande</span>&nbsp;&nbsp;</div></div></div><div style=\"position: relative;\">\n\n\n\n\n\n<div align=\"center\">\n<table border=\"0\" cellpadding=\"5\">\n<caption><b>Variable Declaration</b></caption>\n<tbody><tr><td colspan=\"3\"><hr></td></tr>\n<tr>\n<td bgcolor=\"lightcyan\">Declaration</td>\n<td>---- used in ----&gt;</td>\n<td bgcolor=\"lightgreen\">Process<br>Procedure<br>Function</td>\n</tr>\n</tbody></table>\n\n<p><table border=\"0\">\n<tbody><tr><td><hr width=\"150\"></td><td>Syntax</td><td><hr width=\"150\"></td></tr>\n</tbody></table></p><p>\n</p></div>\n\n<div align=\"center\">\n<table border=\"1\" cellpadding=\"5\" width=\"40%\">\n<tbody><tr><td><pre>variable variable_name : type;</pre></td></tr>\n<tr><td></td></tr>\n<tr><td><pre>variable variable_name : type := initial_value;</pre></td>\n</tr>\n</tbody></table><p>\n</p></div>\n\n\n\n<div align=\"center\">\nSee LRM section 4.3.1.3\n\n<p><table align=\"center\" border=\"0\">\n<tbody><tr><td><hr width=\"150\"></td><td>Rules and Examples</td><td><hr width=\"150\"></td></tr>\n</tbody></table></p><p>\n</p></div>\n\n<div align=\"left\">\n<table border=\"1\" cellpadding=\"5\" width=\"60%\">\n<tbody><tr>\n<td><pre>variable HEIGHT : integer := 8;\nvariable COND : boolean := true;\nvariable IN_STRING : string(1 to 80);\nvariable M,N : bit := '1';\nvariable I : integer range 0 to 3;\nvariable MAKE_FRAME_STATE :\n    T_MAKE_FRAME_STATE := RCV_HIGH;</pre></td>\n</tr>\n</tbody></table><p>\n</p></div>\n\n<div align=\"right\">\n<table border=\"1\" cellpadding=\"5\" width=\"60%\">\n<tbody><tr>\n<td>A Variable may be given an explicit initial value when it is\ndeclared. If a variable is not given an explicit value, it's default\nvalue will be the leftmost value (<b>'left</b>) of its declared type.\n<pre>variable I : integer range 0 to 3;\n-- initial value of I is 0\nvariable X : std_ulogic;\n-- initial value of X is 'U'</pre></td>\n</tr>\n</tbody></table><p>\n</p></div>\n\n<div align=\"center\">\n<table border=\"1\" cellpadding=\"5\" width=\"80%\">\n<tbody><tr>\n<td>Variables within subprograms (functions and procedures) are\ninitialised each time the subprogram is called:\n<pre>function PARITY (X : std_ulogic_vector)\n                 return std_ulogic is\n  variable TMP : std_ulogic := '0';\nbegin\n  for J in X'range loop\n    TMP := TMP xor X(J);\n  end loop; --no need to initialise TMP\n  return TMP;\nend PARITY;</pre></td>\n</tr>\n</tbody></table><p>\n</p></div>\n\n<div align=\"center\">\n<table border=\"1\" cellpadding=\"5\" width=\"70%\">\n<tbody><tr>\n<td>Variables in processes, except for \"FOR LOOP\" variables, receive\ntheir initial values at the start of the simulation time (time = 0 ns)\n<pre>process (A)\n   variable TMP : std_ulogic := '0';\nbegin\n   TMP := '0';\n   -- in this example we need to reset\n   -- TMP to '0' each time the process \n   -- is activated\n   for I in A'low to A'high loop\n      TMP := TMP xor A(I);\n   end loop;\n   ODD &lt;= TMP;\nend process;\n</pre></td>\n</tr>\n</tbody></table><p>\n</p></div>\n\n<div align=\"center\">\n<p><table align=\"center\" border=\"0\">\n<tbody><tr><td><hr width=\"150\"></td><td>Synthesis Issues</td><td><hr width=\"150\"></td></tr>\n</tbody></table></p><p>\n</p></div>\n\n<div align=\"center\">\n<table border=\"0\" cellpadding=\"5\" width=\"70%\">\n<tbody><tr>\n<td>Variables are supported for synthesis, providing they are of a type\nacceptable to the logic synthesis tool.\n<p>\nIn a \"clocked process\", each variable which has its value read before it\nhas had an assignment to it will be synthesised as the output of a\nregister.\n</p><p>\nIn a \"combinational process\", reading a variable before it has had an\nassignment may cause a latch to be synthesised.\n</p><p>\nVariables declared in a subprogram are synthesised as combinational\nlogic.\n</p></td>\n</tr>\n</tbody></table><p>\n</p></div>\n\n\n\n<div align=\"center\">\n<p><table border=\"0\">\n<tbody><tr><td><hr width=\"150\"></td><td>Whats New in '93</td><td><hr width=\"150\"></td></tr>\n</tbody></table></p><p>\n\nIn <b style=\"color: black; background-color: rgb(255, 255, 102);\">VHDL</b>-93, <b>shared variables</b> may be declared within an\narchitecture, block, generate statement, or package:\n</p><pre><b>shared variable</b> variable_name : type;</pre>\nShared variables may be accessed by more than one process. However, the\nlanguage does not define what happens if two or more processes make\nconflicting accesses to a shared variable at the same time.\n\n</div>\n\n<hr width=\"80%\">\n</div></body></html>", "encoding": "ascii"}