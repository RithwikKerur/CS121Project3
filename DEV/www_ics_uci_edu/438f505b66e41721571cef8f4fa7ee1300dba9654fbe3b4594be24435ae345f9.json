{"url": "https://www.ics.uci.edu/~ejw/authoring/versioning/draft-whitehead-webdav-versioning-00.txt", "content": "INTERNET DRAFT                         E. J. Whitehead, Jr., UC Irvine\n<draft-whitehead-webdav-versioning-00>\n\nExpires December, 1998                                    June 9, 1998\n\n\n\n                       A Web Versioning Protocol\n\n\nStatus of this Memo\n\n   This document is an Internet-Draft. Internet-Drafts are working\n   documents of the Internet Engineering Task Force (IETF), its areas,\n   and its working groups. Note that other groups may also distribute\n   working documents as Internet-Drafts.\n\n   Internet-Drafts are draft documents valid for a maximum of six\n   months and may be updated, replaced, or made obsolete by other\n   documents at any time. It is inappropriate to use Internet-Drafts as\n   reference material or to cite them other than as \"work in progress\".\n\n   To learn the current status of any Internet-Draft, please check the\n   \"1id-abstracts.txt\" listing contained in the Internet-Drafts Shadow\n   Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),\n   munnari.oz.au (Pacific Rim), ftp.ietf.org (US East Coast), or\n   ftp.isi.edu (US West Coast).\n\n   Distribution of this document is unlimited. Please send comments to\n   the Distributed Authoring and Versioning (WEBDAV) working group at\n   <w3c-dist-auth@w3.org>, which may be joined by sending a message\n   with subject \"subscribe\" to <w3c-dist-auth-request@w3.org>.\n\n   Discussions of the WEBDAV working group are archived at\n   <URL:http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth>.\n\n\nCopyright Notice\n\n   Copyright (C) The Internet Society (1998). All Rights Reserved.\n\n\nAbstract\n\n   This document describes a set of methods, headers, and properties\n   which extend the HTTP and WebDAV protocols to support versioning and\n   variant authoring of Web resources. Operations are provided to\n   support differencing two resources, applying a difference to a\n   resource, checkin and checkout, along with creation, manipulation,\n   and listing a version and variant history graph.\n\n\n\n\n\n\n\n\ndraft-whitehead-webdav-versioning-00                          [Page 1]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n\n\nContents\n\nSTATUS OF THIS MEMO...................................................1\nCOPYRIGHT NOTICE......................................................1\nABSTRACT..............................................................1\nCONTENTS..............................................................2\n1 INTRODUCTION .......................................................4\n2 NOTATIONAL CONVENTIONS .............................................4\n3 VGRAPH - VERSION AND VARIANT GRAPH .................................4\n4 MAPPING A VGRAPH INTO A HTTP URL NAMESPACE .........................5\n4.1  Vhandle and Vportal .............................................6\n4.2  Example of Vhandle and Vportal ..................................6\n4.3  An Example of Vhandle and Vportal for Only Variants .............8\n4.4  Alternate Approaches Considered, But Not Followed ...............9\n 4.4.1   Client Controlled Versioning ................................9\n 4.4.2   Ordered Collections ........................................10\n5 HTTP METHODS FOR VERSIONING AND VARIANT AUTHORING .................11\n5.1  CREATE .........................................................11\n 5.1.1   Example - CREATE a Vhandle to Existing Vgraph ..............12\n 5.1.2   Example - CREATE a Vhandle and a new Vgraph ................12\n 5.1.3   Example - CREATE a Vhandle, Vportal, and Vgraph ............13\n5.2  DIFF ...........................................................13\n 5.2.1   Example - DIFF of Two Unversioned text Resources ...........14\n 5.2.2   Example - DIFF of Two Versioned text Resources .............14\n 5.2.3   Example - DIFF of Two Unversioned image Resources ..........15\n 5.2.4   Example - DIFF between an image and text Resource ..........15\n5.3  PATCH ..........................................................15\n5.4  DEFSET .........................................................16\n 5.4.1   Example - DEFSET to an Exact Version Identifier ............16\n 5.4.2   Example - DEFSET to the Latest Version .....................17\n5.5  GRAPHOP ........................................................17\n 5.5.1   Example - GRAPHOP to Create Arcs and Nodes .................18\n5.6  GRAPHGET .......................................................20\n5.7  CHECKOUT .......................................................20\n 5.7.1   Example - CHECKOUT .........................................21\n5.8  CHECKIN ........................................................22\n 5.8.1   Example - CHECKIN ..........................................23\n6 OPERATION OF EXISTING HTTP AND WEBDAV METHODS ON VHANDLE AND VPORTAL\nRESOURCES............................................................24\n6.1  GET, HEAD ......................................................24\n6.2  PUT ............................................................24\n6.3  POST, TRACE ....................................................24\n6.4  OPTIONS ........................................................24\n6.5  DELETE .........................................................24\n6.6  COPY ...........................................................24\n6.7  MOVE ...........................................................24\n\n\n\n\n\ndraft-whitehead-webdav-versioning-00                          [Page 2]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n6.8  PROPFIND/PROPPATCH .............................................25\n6.9  LOCK/UNLOCK ....................................................25\n6.10 MKCOL ..........................................................25\n7 HTTP HEADERS FOR VERSIONING AND VARIANT AUTHORING .................25\n7.1  Diff ...........................................................25\n7.2  Videntifier ....................................................25\n8 PROPERTIES ........................................................26\n9 INTERNATIONALIZATION CONSIDERATIONS ...............................26\n10  IANA CONSIDERATIONS .............................................26\n11  SECURITY CONSIDERATIONS .........................................26\n12  XML ELEMENT DEFINITIONS .........................................26\n13  REFERENCES ......................................................26\n14  AUTHOR'S ADDRESS ................................................27\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndraft-whitehead-webdav-versioning-00                          [Page 3]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n1  Introduction\n\n   Change is ubiquitous, nowhere more evident than in Web content.\n   Whether to support collaborative authoring, tracking content\n   deliveries, efficient retrieval of resources by requesting a delta,\n   or retrieval of previous versions of a resource, versioning\n   functionality is a key infrastructure for manipulating Web resources\n   which change over time.\n\n   In a global information system, one type of content does not suit\n   all. People who use the Web typically prefer their content in a\n   specific human language, character set, and media type. The Web\n   currently supports retrieval of such resource variants via content\n   negotiation, but provides limited support for authoring them.\n\n   Variation and change are not orthogonal, since an abstract Web\n   resource may have multiple versions, changing over time, and each\n   version of the resource may have several variants, to satisfy many\n   consumers.\n\n   This document describes extensions to the WebDAV distributed\n   authoring protocol [WebDAV], itself an extension of the HTTP 1.1\n   protocol [RFC2068], for manipulating versioned resources, variants\n   of resources, and their combinations.\n\n\n2  Notational Conventions\n\n   Since this document describes a set of extensions to the HTTP/1.1\n   protocol, the augmented BNF used herein to describe protocol\n   elements is exactly the same as described in section 2.1 of\n   [RFC2068].  Since this augmented BNF uses the basic production rules\n   provided in section 2.2 of [RFC2068], these rules apply to this\n   document as well.\n\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\n\n3  Vgraph - Version and Variant Graph\n\n   A Vgraph is a directed acyclic graph which models the versions and\n   variants of one conceptual resource. A Vgraph consists of resources\n   (nodes), and typed relationships (arcs). The \"derived-from\"\n   relationship models a later resource as a revision of another\n   resource. For example, a revision labeled \"1.2\" has a \"derived-from\"\n   relationship to revision \"1.1\". The \"variant-of\" relationship models\n   situations where one resource varies from another by human language,\n   charset, media type, or content coding.  A resource which is a\n   German language variant has a \"variant-of\" relationship to the\n   original English language resource.\n\ndraft-whitehead-webdav-versioning-00                          [Page 4]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n\n   In this specification, every version and variant of a resource is\n   itself a separate resource, with a separate URI. So, if there is a\n   set of resources which are conceptually viewed as \"hello.html\", then\n   versions 1 and 2 of hello.html would each have their own URIs, and\n   the URI for version 1 would be different than the URI for version 2.\n   If there was a German language variant of version 1 of hello.html,\n   it would have a URI which is different than the URIs of English\n   language versions 1 and 2 of hello.html.\n\n   Nodes are referentially contained within a Vgraph, and are\n   identified by their URI. Both nodes and arcs can have descriptive\n   information associated with them, known as properties. Node\n   descriptive information has a 1:1 correspondence with WebDAV\n   properties, hence any property that can be retrieved from the Vgraph\n   can be retrieved from a property on the resource, assuming the\n   Vgraph and the resource are on the same server, and the resource\n   supports WebDAV properties (e.g., an FTP resource would not).\n   Relationships are binary only, corresponding directly to arcs in a\n   graph.\n\n   A Vgraph MUST have a globally unique identifier, which is a URI. No\n   operations are supported on this URI by default (like a property\n   name, it is just a unique identifier). Similarly, all elements of\n   the Vgraph have globally unique identifiers; nodes are uniquely\n   identified by their URI, and each arc MUST have a globally unique\n   identifier, which is a URI.\n\n   A Vgraph has sufficient expressiveness to represent version\n   histories which span multiple servers, and can contain resources in\n   multiple URI schemes. Since resources are not directly contained by\n   a Vgraph, the same resource may participate in multiple Vgraphs. A\n   Vgraph expresses derived-from and is-variant-of relationships\n   between resources of any media type, and the media type may vary\n   across resources in a Vgraph.\n\n4  Mapping a Vgraph into a HTTP URL Namespace\n\n   One of the siren calls for Web versioning is mandating a single\n   mapping of a Vgraph into the HTTP URL namespace.  A typical approach\n   is to specify a convention for adding a version identifier to a URL,\n   such as \",v{version id}\".  This approach has fatal drawbacks:\n\n   - It adds semantics to URLs, making them non-opaque, and subject to\n   namespace collisions with other such URL \"munging\" schemes.\n\n   - It hard-codes derived-from relationships into version identifiers,\n   limiting their expressiveness, for example, mandating \"1.2\" instead\n   of \"Jim's interim version\".\n\n   - Since a specific version's URL is constructed from a version\n   identifier appended to a base URL, it requires all revisions of a\n\ndraft-whitehead-webdav-versioning-00                          [Page 5]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   resource to be located on the same server, and resources are limited\n   to membership in just a single Vgraph.\n\n   - The approach scales poorly for handling variants, since extra\n   information must be added to the URL for representing variants of a\n   specific version of a resource (e.g., \",v{version\n   id},var{en,application/pdf}\").\n\n   - It confuses the distinction between a single Web resource, and all\n   of the resources contained within a Vgraph.\n\n   A far more flexible approach is have no mapping of a Vgraph into the\n   HTTP URL namespace, providing instead two abstractions, a Vhandle,\n   and a Vportal.\n\n4.1 Vhandle and Vportal\n\n   A Vhandle is a location in the HTTP URL namespace which supports\n   operations on one Vgraph.  A Vhandle can be created anywhere in the\n   HTTP URL namespace, and supports operations which manipulate the\n   graph structure of its Vgraph.  Operations such as checkout,\n   checkin, add an arc, add a node, and retrieve graph contents are\n   applied to a Vhandle. When a Vhandle is created, the Vgraph it\n   operates upon is specified by the Vgraph's unique identifier.\n\n   A Vportal is a location in the HTTP URL namespace which supports\n   retrieval operations on one Vgraph.  A Vportal can be created\n   anywhere in the HTTP URL namespace. Operations such as retrieve a\n   specific version, retrieve a specific variant (e.g., GET with Accept\n   headers), set the default version/variant for unspecified retrieval\n   (e.g. GET without content negotiation or a named version), and\n   retrieving a difference between two versions are applied to a\n   Vportal. When a Vportal is created, the Vgraph it operates upon is\n   specified by the Vgraph's unique identifier.\n\n   Any Vgraph MUST have at least 1 Vhandle, and MAY have more. There\n   may be 0 or more Vportals for any Vgraph.  While Vhandles and\n   Vportals are distinct abstractions, a given URL MAY act as both a\n   Vhandle and a Vportal simultaneously.\n\n4.2 Example of Vhandle and Vportal\n\n   In this example, there is a conceptual resource called\n   \"datasheet.html\", which has three revisions where each revision has\n   a Japanese language variant. The server which manages these\n   resources, \"www.specs.com\", reserves an area of its HTTP namespace\n   under \"/vcache/\" specifically for versions and variants of\n   resources, and this area is separate from the area of its namespace,\n   \"/products/\", where requests for information are made.\n\n   This server has chosen a scheme where it assigns a unique numeric\n   identifier to each version and variant of a resource, and so for\n\ndraft-whitehead-webdav-versioning-00                          [Page 6]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   this server version 1 of datasheet.html is located at\n   \"http://www.specs.com/vcache/52619.html\" (52619 is a unique number\n   generated by the server according to its server-specific naming\n   scheme), version 2 is located at\n   \"http://www.specs.com/vcache/43687.html\", and version 3 is located\n   at \"http://www.specs.com/vcache/68432.html\". The Japanese language\n   variant of version 1 of datasheet.html is located at\n   \"http://www.specs.com/vcache/59766.html\", and the variants of\n   versions 2 and 3 are located at\n   \"http://www.specs.com/vcache/12344.html\" and\n   \"http://www.specs.com/vcache/87663.html\".  Like for versions 1\n   through 3, the server's specific naming policy for version and\n   variants has been used to generate these names, and the semantics of\n   the names are only meaningful to the server.\n\n   The Vgraph has the unique URI, \"vgraph:4A7F-52DE-5DFA29FE-12A0\", and\n   the following relationships:\n\n   http://www.specs.com/vcache/68432.html derived-from\n   http://www.specs.com/vcache/43687.html\n   (That is, version 3 is derived from version 2.)\n\n   http://www.specs.com/vcache/43687.html derived-from\n   http://www.specs.com/vcache/52619.html\n   (Version 2 is derived from version 1.)\n\n   http://www.specs.com/vcache/59766.html is-variant-of\n   http://www.specs.com/vcache/52619.html\n   (The Japanese language variant of version 1.)\n\n   http://www.specs.com/vcache/12344.html is-variant-of\n   http://www.specs.com/vcache/43687.html\n   (The Japanese language variant of version 2.)\n\n   http://www.specs.com/vcache/87663.html is-variant-of\n   http://www.specs.com/vcache/68432.html\n   (The Japanese language variant of version 3.)\n\n   There is one Vportal for this Vgraph, located at\n   \"http://www.specs.com/products/chips/6502\".  This Vportal has its\n   default retrieval set to return version 3.\n\n   The following HTTP 1.1 request:\n\n   GET /products/chips/6502 HTTP/1.1\n   Host: www.specs.com\n\n   Returns exactly the same entity as a GET (with no content\n   negotiation) of http://www.specs.com/vcache/68432.html, i.e., it\n   returns version 3.\n\n   Adding language content negotiation to the request:\n\ndraft-whitehead-webdav-versioning-00                          [Page 7]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n\n   GET /products/chips/6502 HTTP/1.1\n   Host: www.specs.com\n   Accept-language: jp\n\n   Returns exactly the same entity as a GET (with no content\n   negotiation) of http://www.specs.com/vcache/87663.html, i.e., it\n   returns the Japanese language variant of version 3.\n\n   A specific version could be requested:\n\n   GET /products/chips/6502 HTTP/1.1\n   Host: www.specs.com\n   Videntifier: 2\n\n   This returns http://www.specs.com/vcache/43687.html, which is\n   version 2.\n\n   The Vgraph in this example has a single Vhandle, which has the same\n   URL as the Vportal.\n\n\n4.3 An Example of Vhandle and Vportal for Only Variants\n\n   The example features a conceptual resource called \"vino.html\",\n   located on server \"http://www.vinomundial.com/\", which is\n   unversioned and has three language variants, German, French, and\n   English, in addition to its Spanish source. This server uses the\n   naming scheme of placing the language code of the variant in the\n   URL.\n\n   The Vgraph has the unique URI, \"vgraph:6B9A-86BE-5EA47610-8876\", and\n   has the following relationships:\n\n   http://www.vinomundial.com/vino.de.html is-variant-of\n   http://www.vinomundial.com/vino.es.html\n   (The German language variant is a variant of the Spanish language\n   source.)\n\n   http://www.vinomundial.com/vino.fr.html is-variant-of\n   http://www.vinomundial.com/vino.es.html\n   (The French language variant is a variant of the Spanish language\n   source.)\n\n   http://www.vinomundial.com/vino.en.html is-variant-of\n   http://www.vinomundial.com/vino.es.html\n   (The English language variant is a variant of the Spanish language\n   source.)\n\n   The Vportal for this Vgraph is located at\n   http://www.vinomundial.com/vino.html, and is set so the default\n\n\ndraft-whitehead-webdav-versioning-00                          [Page 8]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   resource retrieved from this URL is the Spanish language variant,\n   http://www.vinomundial.com/vino.es.html.\n\n   An example retrieval with content negotiation from the portal URL\n   is:\n\n   GET /vino.html HTTP/1.1\n   Host: www.vinomundial.com\n   Accept-language: de\n\n   This returns the German language variant of the resource, i.e., the\n   same entity returned by a GET without accept headers on\n   http://www.vinomundial.com/vino.de.html.\n\n   This site also maintains a German-only hierarchy at\n   \"http://www.vinomundial.com/de/\" where all of the resources are in\n   German. There is a second Vportal on the Vgraph located in this\n   hierarchy, at \"http://www.vinomundial.com/de/vino.html\"  This\n   Vportal is set so the default resource retrieved from this URL is\n   the German language variant,\n   http://www.vinomundial.com/vino.de.html.\n\n   This site also maintains a separate authoring section, at\n   \"http://www.vinomundial.com/authoring/\", and the Vhandle for the\n   Vgraph is located there, at\n   \"http://www.vinomundial.com/authoring/vino.html\". Whereas the rest\n   of the site is open to all requests, access to the authoring section\n   of the site is protected using Digest authentication, and all access\n   must be authenticated.\n\n4.4 Alternate Approaches Considered, But Not Followed\n\n   Two alternate approaches for mapping versioned resources into the\n   HTTP URL space have been considered, but not used in this draft.\n   However, a discussion of these alternate approaches, their strengths\n   and deficiencies is useful to distinguish the approach presented\n   here.\n\n4.4.1     Client Controlled Versioning\n\n   In this approach, the client controls the mapping of versioned\n   resources into the HTTP URL space, and manages all versioning\n   operations, as well as the consistency maintenance of the\n   version/variant graph.  The paper, \"Version management with meta-\n   level links via HTTP/1.1\", by K. Ota, K. Takahashi, K. Sekiya\n   (draft-http-ntt-version-00, expired, but available off\n   http://www.ics.uci.edu/pub/ietf/webdav/), is an example of this\n   approach.\n\n   As an example of client controlled versioning, a checkout translates\n   into operations to create a new resource, lock the resource, lock\n   the predecessor, update the link information (stored in properties)\n\ndraft-whitehead-webdav-versioning-00                          [Page 9]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   on the predecessor to point to the checked-out resource, unlock the\n   predecessor, add comment information to the new resource.  Since the\n   client is only using base WebDAV operations to perform the\n   versioning, the server is completely unaware of any versioning --\n   all versioning semantics are provided by the client.\n\n   The benefits of this approach are:\n\n   1) Versioning capability can be achieved with smarter clients\n      working against WebDAV servers, so no new server technology is\n      needed (except for programmatic access control).\n   2) Due to the flexibility of the approach, different versioning\n      styles can easily be accommodated -- a new style requires a new\n      client.  However, interactions between versioning operation\n      conventions for different versioning styles would need to be\n      addressed.\n   3) Members of the version graph can be located anywhere in the HTTP\n      URL space, and the version graph can span multiple HTTP servers,\n      and could potentially span several protocols.\n\n   There are several drawbacks to this approach:\n\n   1) The server is unable to provide consistency maintenance for the\n      version graph.  For example, if a client that is unaware of the\n      versioning conventions deletes an intermediate member of a\n      version graph, the graph will be inconsistent.\n   2) The server is unable to optimize the storage of versions by using\n      delta-based compression mechanisms.\n   3) Since there is only one mapping of the members of the version\n      graph into the HTTP URL hierarchy, it is difficult to provide a\n      \"retrieve default member\" operation, e.g., a GET on URL XYZ\n      always returns the most recent member of the version graph.\n   4) Either retrieval of the complete version graph is an expensive\n      operation, requiring traversal of the graph, or the client is\n      responsible for replicating is-derived-from links from the\n      resource which contains the complete version graph, and to\n      individual members of the version graph.  Neither is desirable.\n   5) The technique does not handle versioning collections well.\n\n\n4.4.2     Ordered Collections\n\n   This technique linearizes the version graph, placing an order on the\n   members of the graph, and then places all members of the version\n   graph into a collection with this ordering.  Limiting the graph to\n   linear versioning simplifies this technique, since there then exists\n   a simple temporal mapping of members of the version graph into the\n   ordering maintained by the collection.  Furthermore, in the linear\n   versioning case, the version graph can be implicitly encoded into\n   the ordering, and hence the server will automatically maintain the\n   consistency of the version graph.\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 10]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   So, using this technique, the versions of a resource called\n   \"hello.java\" would be placed into an ordered collection called\n   \"hello.java\", and the individual versions would be named following\n   some naming convention, such as \"hello.java,v1\", \"hello.java,v2\",\n   etc.  So, to retrieve version 2 of hello.java, a GET would be\n   performed on \"hello.java/hello.java,v2\".  Retrieval of a default\n   member of the collection is supported by creating a convention for\n   the response of GET on the collection, e.g., a GET on \"hello.java/\"\n   might always return the most recent member of the version\n   graph/collection.\n\n   A variation on this approach which uses non-ordered collections and\n   permits non-linear version graphs is shown in the slide presentation\n   at: <http://www.ics.uci.edu/pub/ietf/webdav/orem/versioning/>.\n\n   The benefits of this approach are:\n\n   1) A simple client can use the ordering characteristics of the\n      collection to implicitly encode the version graph (linear\n      versioning only).\n   2) The server will perform automatic consistency maintenance of the\n      collection, hence version graph.\n   3) Supports retrieval of a default member of a collection.\n   4) Versioning can be supported by a simple client, and a relatively\n      simple server.\n\n   The drawbacks to this approach are:\n\n   1) If the version graph is implicitly stored in the ordering, it\n      extends poorly to non-linear version graphs, or graphs which have\n      variant relationships.\n   2) It extends poorly to versioning collections, that is, the\n      technique only works for the leaves of a HTTP URL hierarchy.\n   3) A single resource cannot participate in multiple version graphs,\n      (or conventions involving referential collection members must be\n      created, with implications for consistency maintenance.)\n   4) Requires modifications to the existing HTTP URL hierarchy.\n\n   Of these criticisms, the most telling is the inability to handle\n   versioned collections, thus locking out a future mechanism for\n   configuration management.\n\n\n5  HTTP Methods for Versioning and Variant Authoring\n\n5.1 CREATE\n\n   The CREATE method is used to create a Vhandle, a Vportal, or a\n   combination Vhandle and Vportal resource at the Request-URI.  When\n   CREATE is used to create a Vhandle, either the URI of an existing\n   Vgraph MUST be given, or a new Vgraph will be created along with the\n   Vhandle, and the Vhandle will point to the new Vgraph.\n\ndraft-whitehead-webdav-versioning-00                         [Page 11]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n\n5.1.1     Example - CREATE a Vhandle to Existing Vgraph\n\n   CREATE /authoring/dav-handle HTTP/1.1\n   Host: www.ics.uci.edu\n   Content-Length: xxx\n   Content-Type: text/xml; charset=\"utf-8\"\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:create>\n      <D:vhandle>\n         <D:href>\n             vgraph:4A7F-52DE-5DFA29FE-12A0\n         </D:href>\n      </D:vhandle>\n   </D:create>\n\n\n   HTTP/1.1 201 Created\n\n   This example shows the creation of the Vhandle at URL\n   http://www.ics.uci.edu/authoring/dav-handle/.  This Vhandle permits\n   operations on the Vgraph with the unique identifier, vgraph:4A7F-\n   52DE-5DFA29FE-12A0.\n\n\n5.1.2     Example - CREATE a Vhandle and a new Vgraph\n\n   CREATE /authoring/spec-handle HTTP/1.1\n   Host: www.ics.uci.edu\n   Content-Length: xxx\n   Content-Type: text/xml; charset=\"utf-8\"\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:create>\n      <D:vhandle/>\n   </D:create>\n\n\n   HTTP/1.1 201 Created\n\n   Content-Length: xxx\n   Content-Type: text/xml; charset=\"utf-8\"\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:vgraph>\n      <D:href>\n         vgraph:5FDE-A43D-7865FDEA-7654\n      </D:href>\n   </D:vgraph>\n\ndraft-whitehead-webdav-versioning-00                         [Page 12]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n\n\n   This example shows the creation of a new Vgraph, which has been\n   assigned the unique name, vgraph:5FDE-A43D-7865FDEA-7654, and the\n   creation of a new Vhandle for that Vgraph, at\n   http://www.ics.uci.edu/authoring/spec-handle.\n\n5.1.3     Example - CREATE a Vhandle, Vportal, and Vgraph\n\n   CREATE /spec-sheets/widget.html HTTP/1.1\n   Host: www.prod.com\n   Content-Length: xxx\n   Content-Type: text/xml; charset=\"utf-8\"\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:create>\n      <D:vhandle/><D:vportal/>\n   </D:create>\n\n\n   HTTP/1.1 201 Created\n   Content-Length: xxx\n   Content-Type: text/xml; charset=\"utf-8\"\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:vgraph>\n      <D:href>\n         vgraph:A7D9-EAEA-54AFFDEA-7654\n      </D:href>\n   </D:vgraph>\n\n\n   This example shows the creation of a new Vgraph, with the unique\n   identifier, vgraph:A7D9-EAEA-54AFFDEA-7654, and a resource at\n   http://www.prod.com/spec-sheets/wideget.html which simultaneously\n   acts as both a Vhandle and a Vportal for the Vgraph.\n\n5.2 DIFF\n\n   The response from this method is the difference between two\n   resources.  Each of the two resources may be given as the URI of a\n   non-versioned resource, or the URI of a Vportal resource combined\n   with a version identifier.  This supports differences between two\n   arbitrary resources, two resources in the same Vgraph, resources\n   from different Vgraphs, or between a versioned resource and a non-\n   versioned resource.\n\n   The first resource is specified by the Request-URI.  If the Request-\n   URI is the URL of a Vportal, then the version identifier of a\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 13]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   specific member of the Vgraph may be specified with the Videntifier\n   header.  The second resource is specified by the Diff header.\n\n   The entity response from DIFF represents the difference(s) between\n   the two request resources.  A server MAY return the difference in\n   any format, however a server MUST minimally support the TBD\n   difference format for all media types, and MUST perform Accept\n   header processing of client diff format preferences.\n\n   The server MUST minimally supply differences between two instances\n   of the same media type, for all text media types encoded using the\n   same charset.  Ideally, servers will support differences between all\n   media types, minimally providing an octet-level difference.  The\n   server SHOULD supply differences between different instances of the\n   text media type, (e.g. text/html and text/xml), and MAY support\n   differences between media types from different top-level trees. For\n   example, supporting a difference between text/xml and\n   application/xml is possible and meaningful, while a difference\n   between text/xml and image/gif is not.\n\n   *** Design Issue: which diff format should be required?\n\n5.2.1     Example - DIFF of Two Unversioned text Resources\n\n   DIFF /drafts/draft-01.txt HTTP/1.1\n   Host: www.npo.org\n   Diff: <http://www.npo.org/drafts/draft-00.txt>\n\n\n   HTTP/1.1 200 OK\n   Content-type: zzz/dav-required-diff-format\n   Content-length: xyx\n\n   {.... diff entity here ...}\n\n\n   In this example, two non-versioned resources,\n   http://www.npo.org/drafts/draft-00.txt and\n   http://www.npo.org/drafts/draft-01.txt, which are text/plain,\n   charset=\"us-ascii\", are differenced.  Since the difference format is\n   currently TBD, the exact difference between the two resources is not\n   shown in this example.\n\n\n5.2.2     Example - DIFF of Two Versioned text Resources\n\n   DIFF /drafts/draft.txt HTTP/1.1\n   Videntifier: \"1\"\n   Host: www.npo.org\n   Diff: <http://www.npo.org/drafts/draft.txt>; \"0\"\n\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 14]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   HTTP/1.1 200 OK\n   Content-type: zzz/dav-required-diff-format\n   Content-length: xyx\n\n   {... diff entity here ...}\n\n\n   In this example, the URL http://www.npo.org/drafts/draft.txt\n   identifies a Vportal, hence the two resources being differenced are\n   the two members of the associated Vgraph with version identifiers\n   \"0\" and \"1\".  In this example, both resources are text/plain,\n   charset=\"us-ascii\". Since the difference format is currently TBD,\n   the exact difference between the two resources is not shown in this\n   example.\n\n\n5.2.3     Example - DIFF of Two Unversioned image Resources\n\n   DIFF /images/new-logo.gif HTTP/1.1\n   Host: www.corp.com\n   Diff: <http://www.corp.com/images/old-logo.gif>\n\n\n   HTTP/1.1 200 OK\n   Content-type: zzz/dav-required-diff-format\n   Content-length: xyx\n\n   {... diff entity here ...}\n\n   This example shows two non-versioned GIF images (image/gif) being\n   compared, http://www.corp.com/images/new-logo.gif, and\n   http://www.corp.com/iamges/old-logo.gif.\n\n\n5.2.4     Example - DIFF between an image and text Resource\n\n   DIFF /images/new-logo.gif HTTP/1.1\n   Host: www.corp.com\n   Diff: <http://www.corp.com/drafts/index.html>; \"1.1\"\n\n\n   HTTP/1.1 409 Conflict\n\n   This example shows two resources, one an unversioned GIF image at\n   http://www.corp.com/images/new-logo.gif, the other a versioned HTML\n   resource which has version \"1.1\" in the Vgraph associated with the\n   Vportal http://www.corp.com/drafts/index.html.  Since the server\n   cann perform a diff between a text/html and an image/gif resource,\n   it responds with a 409 Conflict status code.\n\n5.3 PATCH\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 15]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   The PATCH method is used to modify parts of the entity returned in\n   the response to a GET method.\n\n   The request entity of the PATCH method contains a list of\n   differences between the resource identified by the Request-URI and\n   the desired content of the resource after the PATCH action has been\n   applied.  The list of differences is in a format defined by the\n   media type of the entity (e.g., \"application/diff\") and must include\n   sufficient information to allow the server to convert the original\n   version of the resource to the desired version.  Processing\n   performed by PATCH is atomic.  Hence all changes MUST be\n   successfully executed or the method fails.  PATCH MUST fail\n   executed on a non-existent resource; i.e., PATCH does not create a\n   resource as a side effect.\n\n   If the request appears (at least initially) to be acceptable, the\n   server MUST transmit an interim 100 response message after receiving\n   the empty line terminating the request headers and continue\n   processing the request.  Since the semantics of PATCH are non-\n   idempotent, responses to this method are not cacheable.\n\n   *** Design Issue: In what format should the patch be applied?  There\n   needs to be one patch format which all compliant applications must\n   support.\n\n5.4 DEFSET\n\n   This method sets the default resource for the Vportal specified by\n   the Request-URI.  The default resource is specified by the\n   Videntifier header, and identifies the resource which responds to\n   HTTP GET and POST method invocations (without Accept headers) on the\n   Vportal URI.\n\n\n5.4.1     Example - DEFSET to an Exact Version Identifier\n\n   DEFSET /drafts/pos-paper.html HTTP/1.1\n\n   Host: www.ics.uci.edu\n   Videntifier: \"1.3\"\n\n   HTTP/1.1 200 OK\n\n\n   GET /drafts/pos-paper.html HTTP/1.1\n   Host: www.ics.uci.edu\n\n   HTTP/1.1 200 OK\n   Content-type: text/html\n   Content-length: xyx\n\n   { ... this is the entity body for version 1.3 of pos-paper.html ...}\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 16]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n\n   This example of DEFSET sets the default resource for the Vportal\n   http://www.ics.uci.edu/drafts/pos-paper.html.  The new default is\n   version 1.3 of the Vgraph associated with the Vportal.  The GET\n   method invocation after the DEFSET shows that the Vportal\n   http://www.ics.uci.edu/drafts/pos-paper.html will respond to a GET\n   with no Accept headers by returning the entity body of the resource\n   which is version 1.3 of the Vgraph associated with this Vportal.\n\n\n5.4.2     Example - DEFSET to the Latest Version\n\n   DEFSET /drafts/pos-paper.html HTTP/1.1\n   Host: www.ics.uci.edu\n   Videntifier: latest\n\n   HTTP/1.1 200 OK\n\n\n   GET /drafts/pos-paper.html HTTP/1.1\n   Host: www.ics.uci.edu\n\n   HTTP/1.1 200 OK\n   Content-type: text/html\n   Content-length: xyx\n\n   { ... this is the entity body for the most recent member of the\n   Vgraph associated with the Vportal\n   http://www.ics.uci.edu/drafts/pos-paper.html ...}\n\n\n   This example of DEFSET sets the default resource for the Vportal\n   http://www.ics.uci.edu/drafts/pos-paper.html.  The new default is\n   the most recent member of the Vgraph associated with the Vportal.\n   The GET method invocation after the DEFSET shows that the Vportal\n   http://www.ics.uci.edu/drafts/pos-paper.html will respond to a GET\n   with no Accept headers by returning the entity body of the resource\n   which is the most recent member (of any branch) of the Vgraph\n   associated with this Vportal.\n\n\n5.5 GRAPHOP\n\n   The GRAPHOP method processes instructions specified in the request\n   body to add a node or remove a node or add an arc or remove an arc\n   from the Vgraph associated with the Vhandle specified by the\n   Request-URI.  Instruction processing MUST occur in the order\n   instructions are received (i.e., from top to bottom).  Instructions\n   MUST either all be executed, or none executed.  Thus if any error\n   occurs during processing all executed instructions MUST be undone\n   and a proper error result returned.\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 17]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   After all instruction processing has completed, the server MUST\n   ensure the graph is consistent by removing all arcs which do not\n   have a node at each endpoint, and all nodes which are not connected\n   to at least one arc.\n\n   *** Design issue: if an arc in the middle of a graph is removed,\n   there could be multiple, disconnected graphs.  Should these extra\n   arcs be pruned?\n\n   Since the Vgraph only contains nodes by-reference, and not by-value,\n   if a node is removed from a Vgraph it does not imply the resource\n   associated with that node is deleted.\n\n   All servers MUST support the addarc and addnode processing\n   instructions, and SHOULD support the delarc and delnode processing\n   instructions.\n\n\n5.5.1     Example - GRAPHOP to Create Arcs and Nodes\n\n   GRAPHOP /project/src/Makefile HTTP/1.1\n   Host: www.code.com\n   Content-type: text/xml; charset=\"utf-8\"\n   Content-length: xyx\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:graphop>\n      <D:addnode>\n         <D:href>http://www.code.com/vcache/Makefile?v=1.0</D:href>\n         <D:href>http://www.code.com/vcache/Makefile?v=1.1</D:href>\n         <D:href>http://www.code.com/vcache/Makefile?v=1.2</D:href>\n      </D:addnode>\n      <D:addarc>\n         <D:arc>\n            <D:href>http://www.code.com/vcache/Makefile?v=1.1</D:href>\n            <D:href>http://www.code.com/vcache/Makefile?v=1.0</D:href>\n            <D:arctype><isderivedfrom/></D:arctype>\n         </D:arc>\n         <D:arc>\n            <D:href>http://www.code.com/vcache/Makefile?v=1.2</D:href>\n            <D:href>http://www.code.com/vcache/Makefile?v=1.1</D:href>\n            <D:arctype><isderivedfrom/></D:arctype>\n         </D:arc>\n      </D:addarc>\n   </D:graphop>\n\n\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: zyz\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 18]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:multistatus>\n       <D:response>\n          <D:graphresponse>\n             <D:addnodestat>\n                <D:status>HTTP/1.1 200 OK</D:status>\n             </D:addnodestat>\n             <D:addarcstat>\n                <D:arc>\n                   <D:href>\n                       http://www.code.com/vcache/Makefile?v=1.1\n                   </D:href>\n                   <D:href>\n                       http://www.code.com/vcache/Makefile?v=1.0\n                   </D:href>\n                   <D:arctype><isderivedfrom/></D:arctype>\n                   <D:arcid>arcid:4567-ae4f-78de54ad-6754</D:arcid>\n                </D:arc>\n                <D:arc>\n                   <D:href>\n                       http://www.code.com/vcache/Makefile?v=1.2\n                   </D:href>\n                   <D:href>\n                       http://www.code.com/vcache/Makefile?v=1.1\n                   </D:href>\n                   <D:arctype><isderivedfrom/></D:arctype>\n                   <D:arcid>arcid:4567-de21-432156d8-ad31</D:arcid>\n                </D:arc>\n                <D:status>HTTP/1.1 200 OK</D:status>\n             </D:addarcstat>\n          </D:graphresponse>\n       </D:response>\n   </D:multistatus>\n\n\n   This example shows a Vgraph being populated with three nodes and two\n   arcs.  The following resources (which existed prior to the beginning\n   of GRAPHOP processing) were successfully added to the Vgraph:\n\n   http://www.code.com/vcache/Makefile?v=1.0\n   http://www.code.com/vcache/Makefile?v=1.1\n   http://www.code.com/vcache/Makefile?v=1.2\n\n   Two arcs were successfully added to the graph, and were assigned the\n   following unique identifiers:\n\n   http://www.code.com/vcache/Makefile?v=1.2 is-derived-from\n   http://www.code.com/vcache/Makefile?v=1.1\n   unique identifier: arcid:4567-ae4f-78de54ad-6754\n\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 19]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   http://www.code.com/vcache/Makefile?v=1.1 is-derived-from\n   http://www.code.com/vcache/Makefile?v=1.0\n   unique identifier: arcid:4567-de21-432156d8-ad31\n\n   Since the graph was consistent after adding these three nodes and\n   two arcs, the server was not required to perform any additional\n   processing to maintain the consistency of the Vgraph.\n\n5.6 GRAPHGET\n\n   The GRAPHGET method returns an entity body listing the contents of\n   the Vgraph associated with the Vhandle specified by the Request-URI.\n\n   *** Design issue: How should the Vgraph entity be returned?  RDF is\n   one solution, as is XML without RDF semantics.\n\n   *** Design issue: should comment (arbitrary property) information be\n   returned by GRAPHGET?\n\n\n5.7 CHECKOUT\n\n   The CHECKOUT method performs the following operations on the Vgraph\n   associated with the Vportal at the Request-URI:\n\n   1) A new resource, known as the \"working resource\", is created at a\n      location determined by the server.  This resource is acted upon\n      by authoring tools, accepting PUTs of intermediate and final\n      results, and allowing properties to be read and set on it.\n   2) The initial contents of the working resource are identical to the\n      resource whose version is given by the Videntifier header, if\n      specified, or the default resource if not.\n   3) An \"is-derived-from\" relationship is added to the Vgraph between\n      the working resource and the resource given by the Videntifier\n      header, if specified, or the default resource if not.\n   4) The working resource is write locked, with the type of the write\n      lock (exclusive or shared) determined by the server.  By default,\n      the lock SHOULD be an exclusive write lock.\n   5) Any check-out comments submitted in the request body are stored\n      in the comments property on the working resource.\n   6) Access permissions MUST be set so the principal requesting the\n      check-out has read and write permission to the working resource.\n\n   All of these operations MUST be performed, or none are performed.\n   Thus, if any error occurs during processing, all operations\n   performed to that time MUST be undone and a proper error result\n   returned.\n\n   Since a lock is being created during normal CHECKOUT processing, the\n   Timeout header (specified in [WebDAV]) MAY be submitted with a\n   CHECKOUT method request, and is subject to normal Timeout header\n   processing as described in [WebDAV].\n\ndraft-whitehead-webdav-versioning-00                         [Page 20]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n\n   *** Design Issue: What should be the behavior if the lock times out?\n\n   *** Design Issue: Extending Checkout to work with Depth header to\n   check out a collection hierarchy with one operation.\n\n   A successful response to CHECKOUT will return a checkoutstat XML\n   element which contains the URL of the working resource, and a\n   lockdiscovery XML element that describes the lock created on the\n   working resource.\n\n5.7.1     Example - CHECKOUT\n\n   >> Request\n\n   CHECKOUT /reports/1998/q1.doc HTTP/1.1\n   Host: www.funcorp.com\n   Content-type: text/xml; charset=\"utf-8\"\n   Content-length: xxyx\n   Videntifier: \"1.5\"\n   Timeout: Infinite\n   Authorization: Digest username=\"craig.snider\",\n      realm=\"reports@www.funcorp.com\", nonce=\"...\",\n      uri=\"/reports/1998/q1.doc\", response=\"...\", opaque=\"...\"\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:checkoutinfo>\n       <D:comment>Checked-out to add new project expense numbers.\n       </D:comment>\n       <D:owner>Craig Snider</D:owner>\n   </D:checkoutinfo>\n\n   >> Response\n\n   HTTP/1.1 200 OK\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: zzyzx\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:checkoutstat>\n       <D:lockdiscovery>\n           <D:activelock>\n              <D:locktype><D:write/></D:locktype>\n              <D:lockscope><D:exclusive/></D:lockscope>\n              <D:depth>0</D:depth>\n              <D:owner>\n                 Craig Snider\n              </D:owner>\n              <D:timeout>Infinite</D:timeout>\n              <D:locktoken>\n\ndraft-whitehead-webdav-versioning-00                         [Page 21]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n                  <D:href>\n             opaquelocktoken:e5d7a3214-6da3-4432-5c39-fe98a34deaea\n                  </D:href>\n              </D:locktoken>\n           </D:activelock>\n       <D:lockdiscovery>\n       <D:workingresource>\n          <D:href>\n             http://www.mycorp.com/vcache/q1.doc?v1.6\n          </D:href>\n       </D:workingresource>\n   </D:checkoutstat>\n\n\n   This example shows a CHECKOUT being performed on the Vgraph\n   associated with the Vportal at\n   http://www.funcorp.com/reports/1998/q1.doc.  The checkout was\n   submitted with a Videntifier header of \"1.5\", meaning the checkout\n   is occurring off of version 1.5 of q1.doc.  A comment was submited\n   with the checkout, giving rationale for the checkout operation, and\n   owner information was also submitted for the lock created during\n   checkout. A lock timeout value of \"Infinite\" was also requested,\n   expressing a desire for a lock which never times out.\n\n   The response from the CHECKOUT method lists the characteristics of\n   the lock, and the location of the working resource.  In this case,\n   the lock is an exclusive write lock, that will never time out, and\n   affects affects the working resource.  The lock token for the lock\n   is \"opaquelocktoken:e5d7a3214-6da3-4432-5c39-fe98a34deaea\", and the\n   owner information from the request has been associated with the\n   lock.\n\n   The location of the working resource is\n   \"http://www.mycorp.com/vcache/q1.doc?v1.6\".\n\n   In this example, the nonce, response, and opaque fields have not\n   been calculated in the Authorization request header.\n\n5.8 CHECKIN\n\n   The CHECKIN method performs the following operations on the Vgraph\n   associated with the Vportal given by the Request-URI, and on the\n   working resource specified in the request body.\n\n   1) The working resource is unlocked.\n   2) The access control for the working resource is set such that no\n      principal has write access (i.e., it is frozen).\n   3) The server MAY set the version identifier for the working\n      resource to the version identifier specified in the request body.\n\n   All of these operations MUST be performed, or none are performed.\n   Thus, if any error occurs during processing, all operations\n\ndraft-whitehead-webdav-versioning-00                         [Page 22]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   performed to that time MUST be undone and a proper error result\n   returned.\n\n   A valid CHECKIN request MUST include a Lock-Token header listing the\n   lock token of the working resource's lock.\n\n5.8.1     Example - CHECKIN\n\n   >> Request\n\n   CHECKIN /reports/1998/q1.doc HTTP/1.1\n   Host: www.funcorp.com\n   Content-type: text/xml; charset=\"utf-8\"\n   Content-length: zxyzx\n   Lock-Token: <opaquelocktoken:e5d7a3214-6da3-4432-5c39-fe98a34deaea>\n   Authorization: Digest username=\"craig.snider\",\n      realm=\"reports@www.funcorp.com\", nonce=\"...\",\n      uri=\"/reports/1998/q1.doc\", response=\"...\", opaque=\"...\"\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:checkininfo>\n       <D:comment>Added project expense numbers, fixed Figure 5,\n                  made minor fixes from reviewer's feedback.\n       </D:comment>\n       <D:workingresource>\n          <D:href>\n             http://www.mycorp.com/vcache/q1.doc?v1.6\n          </D:href>\n       </D:workingresource>\n       <D:videntifier>\n          Stable release 1\n       </D:videntifier>\n   </D:checkininfo>\n\n\n   >> Response\n\n   HTTP/1.1 200 OK\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: zxyzx\n\n   <?xml version=\"1.0\"?>\n   <?xml:namespace ns=\"DAV:\" prefix=\"D\"?>\n   <D:checkinstat>\n       <D:videntifier>\n          Stable release 1\n       </D:videntifier>\n   </D:checkinstat>\n\n\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 23]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   This example shows a CHECKIN method which checks-in the working\n   resource \"http://www.mycorp.com/vcache/q1.doc?v1.6\" which is a\n   member of the Vgraph associated with the Vportal\n   http://www.funcorp.com/reports/1998/q1.doc.  Comments have been\n   submitted with the checkin, as has a suggested version identifier\n   (\"Stable release 1\").\n\n   The response from CHECKIN gives the actual version identifier\n   assigned by the server.  In this case, the server accepted the\n   version identifier submitted by the user agent.\n\n   In this example, the nonce, response, and opaque fields have not\n   been calculated in the Authorization request header.\n\n6  Operation of Existing HTTP and WebDAV Methods on Vhandle and Vportal\n   Resources\n\n   [Ed note: This section needs to be fleshed-out.  These are my\n   initial views on how they should be defined.]\n\n6.1 GET, HEAD\n\n   GET and HEAD on a Vportal are redirected to the default member of\n   the associated Vgraph.  GET and HEAD on a Vhandle are not defined by\n   this specification.\n\n6.2 PUT\n\n   PUT is not permitted to either a Vhandle or Vportal.\n\n6.3 POST, TRACE\n\n   Same as in RFC 2068.\n\n6.4 OPTIONS\n\n   Same as in RFC 2068 plus WebDAV extensions.\n\n6.5 DELETE\n\n   Operates on the Vhandle and Vportal.  Deleting the last Vhandle to a\n   Vgraph removes the Vgraph (and could leave dangling Vportals).\n\n6.6 COPY\n\n   Operates on the Vhandle and Vportal (i.e., duplicates the Vhandle or\n   the Vportal in a new location in the namespace).\n\n6.7 MOVE\n\n   Operates on the Vhandle and Vportal (i.e., moves the Vhandle or the\n   Vportal to a new location in the namespace).\n\ndraft-whitehead-webdav-versioning-00                         [Page 24]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n\n6.8 PROPFIND/PROPPATCH\n\n   Operates on the properties of the Vhandle or the Vportal (i.e., both\n   a Vhandle and a Vportal have properties for each instance).\n\n   *** Design Issue: Since PROPFIND is used to list the members of a\n   collection, if this approach is extended to handle versioned\n   collections, there will need to be a way to pass the PROPFIND to the\n   default member of the Vgraph for the versioned collection to afford\n   a \"list the members of the default member of the Vgraph for the\n   versioned collection.\"\n\n6.9 LOCK/UNLOCK\n\n   A lock on a Vhandle affects the Vhandle and the Vgraph, but is not\n   propagated to the individual members of the Vgraph (the reference is\n   locked, not the actual resource).  A lock on a Vportal affects only\n   the Vportal, but not the Vgraph.\n\n6.10 MKCOL\n\n   Not allowed on a Vgraph or a Vportal.\n\n\n7  HTTP Headers for Versioning and Variant Authoring\n\n7.1 Diff\n\n   Diff = \"Diff\" \":\" Coded-url [\";\" version-id]  ; Coded-url from\n   Section 8.4 of [WebDAV]\n   versiod-id = quoted-string\n\n   The Diff header is used to specify one of the two URIs being\n   differenced by the DIFF method.  If the Coded-url is the URL of a\n   Vportal, then the optional version-id specifies the version\n   identifier of a specific member of the Vgraph.\n\n7.2 Videntifier\n\n   Videntifier = \"Videntifier\" \":\" vspec\n   vspec = version-id | \"latest\" [branch-id]\n   branch-id = Coded-url\n\n   If the Request URI is a Vportal, this header specifies a member of\n   the Vgraph associated with that Vportal.  The specification is\n   either an exact version identifier, or the most recent member of the\n   Vgraph (\"latest\"), or the most recent member of a branch of the\n   Vgraph (\"latest\" along with a branch identifier URI).\n\n\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 25]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   *** Design issue: Since version identifiers are human-readable\n   fields, need to have i18n support.  This implies that version\n   identifiers should be marshalled in the request body.\n\n8  Properties\n\n   Need properties for comments, version graph info, and arcs leading\n   to/from this node for all vgraphs the resource participates in (need\n   to get root, default, pred., succ.)\n\n   A Vportal and a Vhandle have properties associated with each\n   instance of the Vportal or Vhandle.\n\n9  Internationalization Considerations\n\n   TBD.\n\n   Fields in the protocol that are human-readable:\n   - version identifier\n   - comments submitted on checkout and checkin\n\n\n10 IANA Considerations\n\n   This protocol defines several new URI schemes:\n   - vgraph:, for globally unique version graph identifiers\n   - arcid:, for globally unique arc identifiers\n\n\n11 Security Considerations\n\n   TBD.\n\n\n12 XML Element Definitions\n\n   TBD.  Some element definitions are reused from the WebDAV\n   Distributed Authoring Protocol specification [WebDAV].\n\n13 References\n\n   [RFC2068] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, T. Berners-\n   Lee, \"Hypertext Transfer Protocol -- HTTP/1.1.\" RFC 2068. U.C.\n   Irvine, DEC, MIT/LCS. January, 1997.\n\n   [RFC2119] S. Bradner, \"Key Words for use in RFCs to Indicate\n   Requirement Levels.\" RFC 2119, BCP 14.  Harvard University. March,\n   1997.\n\n\n   [WebDAV] Y. Y. Goland, E. J. Whitehead, Jr., A. Faizi, S. R. Carter,\n   D. Jensen, \"Extensions for Distributed Authoring on the World Wide\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 26]\n\f\nINTERNET-DRAFT        A Web Versioning Protocol           June 9, 1998\n\n\n\n   Web -- WEBDAV\".  Microsoft, U.C. Irvine, Netscape, Novell.\n   Internet-draft, work-in-progress.  <draft-ietf-webdav-protocol-08>\n\n14 Author's Address\n\n   E. James Whitehead, Jr.\n   Dept. of Information and Computer Science\n   University of California, Irvine\n   Irvine, CA 92697-3425\n   Email: ejw@ics.uci.edu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndraft-whitehead-webdav-versioning-00                         [Page 27]\n\f\n", "encoding": "ascii"}