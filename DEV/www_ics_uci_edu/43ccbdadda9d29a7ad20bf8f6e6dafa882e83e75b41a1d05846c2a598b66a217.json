{"url": "https://www.ics.uci.edu/~thornton/ics65/ProjectGuide/Project5/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 65 Fall 2012, Project #5: Plug In Baby</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 65 Fall 2012 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../ProjectGuide\">Project Guide</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 65 Fall 2012<br />\n   Project #5: <i>Plug In Baby</i></p>\n   \n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Sunday, December 9, 11:59pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>Previously, you've explored the C++ standard library and built your understanding of many of the classes and functions that comprise it, as well as the general approaches used throughout it.  As we've gradually lifted the veil on the C++ language, we've learned more and more about the techniques that are used to build the kinds of functionality you find in the standard library and to make its components well-behaved (e.g., template functions, template classes, copy constructors, assignment operators, destructors, and so on).</p>\n\n<p>One of the standard library's strengths is its <i>extensibility</i>, i.e., the ability it gives its users to extend it with new functionality that plugs cleanly into its existing functionality.  For example, new containers that follow the appropriate set of rules will automatically be compatible with standard generic algorithms; new generic algorithms will similarly be compatible with existing containers in the library; and, of course, new algorithms will also interact nicely with new containers.  In any programming language, there is value in everyone in its community of users agreeing on how certain commonly-occurring problems will be solved; C++ is no different.</p>\n\n<p>This project is an exploration of what it takes to build a standard-library-compatible container, and how to plug it into existing algorithms.  We'll discover that we will also seamlessly plug into other C++ language features, such as the <i>range-based for loop</i> if we commit ourselves to following standard-library-compliant rules.  Finally, we'll (optionally) consider the performance optimization afforded by extending the Big Three into the Big Five instead and some additional operations we could add if we wanted to make our sorted list more flexible.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">A container for us to build</p>\n\n<p>You are no doubt familiar already with the concept of a <i>linked list</i>, which is a collection of <i>nodes</i>, each of which stores one data element.  The nodes are linked together in different ways (e.g., singly, doubly, circularly) depending on one's requirements, but the concept is similar no matter the implementation details: linked lists trade away the ability to easily jump from one node to another far-away node, while eliminating specific requirements about where elements can be stored in memory in relation to ecah other, allowing other things, such as being able to insert new elements without moving existing ones, to run more smoothly.</p>\n\n<p>In this project, we'll build a <i>sorted list</i>, a linked list in which elements are stored in ascending order.  It will be \"well-behaved\" in the ways we've discussed previously &mdash; most notably, it will manage its own memory appropriately &mdash; and it will support some of the basic idioms from the standard C++ library, such as providing iterators and the functions that create them, so that it will work with compatible generic algorithms and the range-based for loop.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The program</p>\n\n<p>In this project, you'll build a standard-library-compliant implementation of a sorted list, the specific requirements for which are described below.  Additionally, you'll build a test program that exercises your implementation, both in terms of how its individual member functions perform, and also how well it plugs into existing standard library algorithms.</p>\n\n<p>There is no stated number of test cases that are required; your test program is done when you've covered all of the cases that you feel are important in order to verify that your sorted list is not only working on its own, but that it plugs into the standard library correctly.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The specific requirements</p>\n\n<p class=\"subtitle\">The ics65::sorted_list template class</p>\n\n<p>Your primary goal is to write a template class called <b>sorted_list</b> in a namespace called <b>ics65</b>, which takes a single type parameter specifying what kind of elements it stores.  So, for example, an <b>ics65::sorted_list&lt;int&gt;</b> would be a sorted list of integers.  (Note that since we're attempting to write a template class that plugs into the standard library, we're adopting the standard library's naming convention in which names are all lowercase and words are separated by underscores.)</p>\n\n<p>Fundamentally, your class should be <i>well-behaved</i>, in the sense that we've been discussing it this quarter: it cleans up any memory it allocates and it can be copied (with the copies being entirely separate from one another).  Since you will no doubt need to dynamically allocate your nodes, the Big Three become necessary.  Additionally, it will need to be as exception safe as you can make it, meaning that each function should provide either the <i>basic guarantee</i>, the <i>strong guarantee</i>, or the <i>nothrow guarantee</i> in the case that they throw exceptions.</p>\n\n<p>The requirements for your template class follow.</p>\n\n<ul>\n  <li>It must contain a no-argument constructor that initializes the list to be empty</li>\n  <li>It must have a destructor, copy constructor, and overloaded assignment operator, because you'll need these to make it well-behaved</li>\n  <li>It must include the following member functions:\n    <ul>\n      <li><b>add()</b>, which takes a <b>T</b> object and adds it in the appropriate position in the list, returning <b>void</b></li>\n      <li><b>erase()</b>, which takes an iterator and removes the object at that position in the list, returning <b>void</b>.  Note that this function will either need to support every kind of iterator, or you'll need overloads that support each one\n        <li>This function should throw a <b>std::out_of_range</b> if the iterator is referring to the \"past end\" or \"past rend\" position (see below)</li>\n      </li>\n      <li><b>clear()</b>, which takes no parameters, makes the list empty, and returns <b>void</b></li>\n      <li><b>size()</b>, which returns a <b>size_t</b> indicating the number of elements in the list.  (<b>size_t</b> is a built-in type in C++ that indicates the size of a container; it's generally compatible with <b>unsigned int</b>.)</li>\n      <li><b>empty()</b>, which returns true if the list is empty and false otherwise.</li>\n    </ul>\n    Decide which of these member functions should be marked <b>const</b>, based on whether they change the list or not.  If they can be made <b>const</b> while preserving their semantics, do it.\n  </li>\n  <li>It must support <i>forward iterators</i> that allow reading from, but not writing to, the elements of the list.  It's important that the iterators do not allow list elements to be modified, because they otherwise could be used to subvert the ordering property of the list.  To support forward iterators, there are a few things you'll need to do:\n    <ul>\n      <li>Two types, <b>ics65::sorted_list&lt;T&gt;::iterator</b> and <b>ics65::sorted_list&lt;T&gt;::const_iterator</b>, both of which represent a forward iterator that iterates through elements from first to last and allows them to be read but not written.  (The reason we need both typenames even though they're the same is because users of standard-library-compliant containers will expect both types to be there.)</li>\n      <li>Two more types, <b>ics65::sorted_list&lt;T&gt;::reverse_iterator</b> and <b>ics65::sorted_list&lt;T&gt;::reverse_const_iterator</b>, both of which represent a forward iterator that iterates through elements in reverse and allows them to be read but not written.</li>\n      <li>All of these iterator types must support the necessary operator overloads, so that they are compatible with standard algorithms:\n        <ul>\n          <li><b>operator==</b>, which compares two iterators to see if they refer to the same location</li>\n          <li><b>operator!=</b>, which compares two iterators to see if they <i>do not</i> refer to the same location</li>\n          <li><b>operator++</b> (in both pre- and post-increment form), which advances the iterator (to the next node, in the case of a regular iterator; to the previous node, in the case of a reverse iterator)</li>\n          <li><b>operator*</b> (the dereference operator, not multiplication!) and <b>operator-&gt;</b>, so that the iterator will function similarly to a pointer.  Note that both of these operators should provide read-only access to the elements of the list no matter what (i.e., they return references or pointers to <b>const</b> values)</li>\n        </ul>\n        Decide which of these operator overloads should be marked <b>const</b>, based on whether they change the meaning of the iterator or not; if they can be marked <b>const</b> while preserving their semantics, do it.\n      </li>\n      <li>There are a few other \"marker\" types that are required of your iterator.  The easiest way to get these markers in place is to implement your iterator using a class that derives from <b>std::iterator&lt;std::forward_iterator_tag, T&gt;</b> (where T is the type of element in the list), which immediately fills in a few details that are necessary for forward iterators.</li>\n    </ul>\n  </li>\n  <li>It must support the standard functions used to create iterators and reverse iterators on a container:\n    <ul>\n      <li><b>begin()</b>, which returns an <b>iterator</b> (or <b>const_iterator</b>, if the sorted_list is const) referring to the list's first element</li>\n      <li><b>end()</b>, which returns an <b>iterator</b> (or <b>const_iterator</b>, if the sorted_list is const) referring to the list's \"past end\" position, just beyond its last element</li>\n      <li><b>rbegin()</b>, which returns a <b>reverse_iterator</b> (or <b>reverse_const_iterator</b>, if the sorted_list is const) referring to the list's last element</li>\n      <li><b>rend()</b>, which returns a <b>reverse_iterator</b> (or <b>reverse_const_iterator</b>, if the sorted_list is const) referring to the list's \"past rend\" position, just before its first element</li>\n    </ul>\n  </li>\n  <li>The only kind of comparison operator that should be used on T objects is operator&lt; (i.e., you can compare them with the &lt; operator, but not &gt;, ==, &lt;=, and so on).  This is a fairly typical restriction in the standard C++ library, made so that controlling ordering requires overloading only one operator.</li>\n</ul>\n\n<p>Since there are iterators that traverse the list in both directions, your linked list implementation will need to be doubly-linked.  Note, too, that the notion of \"past end\" and \"past rend\" is most simply implemented by having special nodes at the beginning and end of the list, so your iterator can be fundamentally based around a pointer to a node.</p>\n\n<p class=\"subtitle\">Testing</p>\n\n<p>Write a program that runs some <i>unit tests</i> against your <b>sorted_list</b> template class to ensure that it works as you expect.  As C++ lacks a built-in unit testing framework, this is best done by simply writing a collection of functions and calling each of them explicitly from <b>main()</b>.  Your goal is a program that tells you when something is broken, so focus on writing output that describes problems, as opposed to just dumping pages of debug output that you would need to manually verify.</p>\n\n<p>As stated above, there is no explicit number of test cases that are required; your test program is done when you have covered everything you believe is important.</p>\n\n<p>There are a couple of things from the standard library worth trying, just to get a feel for whether your <b>sorted_list</b> template class is plugging into the standard library as it should:</p>\n\n<ul>\n  <li>If you've followed the requirements above, your sorted_list should be compatible with the <i>range-based for loop</i> from C++11, which would make something like this legal:\n    <blockquote><pre>\nics65::sorted_list&lt;std::string&gt; theList;\n\n// add some elements to theList\n\nfor (const std::string& s : list)\n{\n    std::cout << s << std::endl;\n}</pre></blockquote>\n\n    The range-based for loop requires <b>begin()</b> and <b>end()</b> functions, as well as standard-library-compliant iterators.\n  </li>\n  <li>Additionally, generic algorithms in the standard library that use only forward iterators and don't modify the underlying list should be supported automatically, which would also make something like this legal:\n    <blockquote><pre>\nics65::sorted_list&lt;int&gt; aList;\n\n// add some elements to aList\n\nstd::for_each(aList.begin(), aList.end(), [](int i) { std::cout << i << std::endl; });</blockquote></pre>\n\n    Note that many of the generic algorithms in the standard library require other behavior &mdash; random-access iterators, the ability to change or rearrange the elements of the list &mdash; that would not be appropriate; we don't expect these to be compatible with our sorted_list.\n  </li>\n</ul>\n\n<p class=\"subtitle\">Additional challenges to improve performance and flexibility</p>\n\n<p>There are a few things we can do to improve the performance and flexibility of our template class.  None of these is required and, as usual, extra credit is not offered, but if you're looking for a few additional things to improve your template class, here are some things you could consider.</p>\n\n<ul>\n  <li>Instead of supporting only forward iterators, support <i>bidirectional iterators</i> instead.  You'd still want your iterators to be read-only (i.e., not to be able to change elements in the list), so that iterators can't be used to subvert the ordering properties of the list, but supporting the ability to traverse in both directions can be handy.</li>\n  <li>C++11 supports the ability to write <i>move constructors</i> and <i>move assignment operators</i>, which are called by the compiler in some special circumstances, such as when an object is being created as a copy of an existing object that is temporary or is on the verge of death, in which case the act of copying can be made more efficient.  They also improve the performance of <b>std::swap</b>, which nowadays uses move semantics to speed things up.  When I've occasionally mentioned that the Big Three is really the Big Five in C++11, that's what I meant; move constructors and move assignment operators are the fourth and fifth thing.</li>\n  <li>Allow a user of our <b>sorted_list</b> to configure how sorting is done by accepting a constructor parameter, a <b>std::function&lt;bool(const T&, const T&)&gt;</b>, which takes the place of the &lt; operator for comparing T objects for the purposes of ordering them.  Make sure there's a default for this parameter, so it defaults to &lt; when not specified.  (See <b>std::less</b> in the standard library for a handy way to set up that default.)</li>\n  <li>We can make our <b>sorted_list</b> more like the built-in <b>std::list</b> by adding a few additional useful operations to it: <b>merge</b>, <b>remove</b>, <b>remove_if</b>, <b>unique</b>, and lexicographical comparisons of the entire list using relational operators like <b>operator==</b> and <b>operator&lt;</b>.</li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Starting point</p>\n\n<p>This project has no starting point, as I'd like you to build it from scratch, though you do need to make sure you meet the requirements laid out above.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>Submit the source (<b>.cpp</b>) and header (<b>.h</b>) files that comprise your sorted list template class and your test program.  Afterward, take a moment to be sure that you submitted all of the files; if you missed one, we won't be able to compile and run your program, which can result in a substantial penalty, since we won't be able to evaluate your program's correctness.</p>\n\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you accidentally submitted the wrong version.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Limitations</p>\n\n<p>While the goal here is to plug into existing standard library functionality, you are required to implement your own linked list structure and manipulate nodes and their links by hand, as opposed to using <b>std::list</b> for that purpose.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Originally written by Alex Thornton, Fall 2012</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}