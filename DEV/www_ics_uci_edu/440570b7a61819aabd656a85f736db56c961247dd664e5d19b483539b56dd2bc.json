{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/doc/overview/frame.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n <head>\n  <!-- IE Standards Mode -->\n  <meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"></meta>\n\n  <!-- Favicon -->\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"icon\"></link>\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"shortcut icon\"></link>\n\n  <!-- Page title -->\n  <title>VLFeat - Tutorials > Local feature frames</title>\n\n  <!-- Stylesheets -->\n  <link href=\"../vlfeat.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <link href=\"../pygmentize.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <style xml:space=\"preserve\">\n    /* fixes a conflict between Pygmentize and MathJax */\n    .MathJax .mo, .MathJax .mi {color: inherit ! important}\n  </style>\n  \n\n  <!-- Scripts-->\n  \n\n  <!-- MathJax -->\n  <script xml:space=\"preserve\" type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true,\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n        by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers: { autoNumber: 'AMS' }\n      }\n    });\n  </script>\n  <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" xml:space=\"preserve\" type=\"text/javascript\"></script>\n\n  <!-- Google Custom Search -->\n  <script xml:space=\"preserve\">\n    (function() {\n    var cx = '003215582122030917471:oq23albfeam';\n    var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n    gcse.src = (document.location.protocol == 'https' ? 'https:' : 'http:') +\n    '//www.google.com/cse/cse.js?cx=' + cx;\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n    })();\n  </script>\n\n  <!-- Google Analytics -->\n  <script xml:space=\"preserve\" type=\"text/javascript\">\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-4936091-2']);\n    _gaq.push(['_trackPageview']);\n    (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    })();\n  </script>\n </head>\n\n <!-- Body Start -->\n <body>\n  <div id=\"header-section\">\n    <div id=\"header\">\n      <!-- Google CSE Search Box -->\n      <div class=\"searchbox\">\n        <gcse:searchbox-only autoCompleteMaxCompletions=\"5\" autoCompleteMatchType=\"any\" resultsUrl=\"http://www.vlfeat.org/search.html\"></gcse:searchbox-only>\n      </div>\n      <h1 id=\"id-16\"><a shape=\"rect\" href=\"../index.html\" class=\"plain\"><span id=\"vlfeat\">VLFeat</span><span id=\"dotorg\">.org</span></a></h1>\n    </div>\n    <div id=\"sidebar\"> <!-- Navigation Start -->\n      <ul>\n<li><a href=\"../index.html\">Home</a>\n<ul>\n<li><a href=\"../about.html\">About</a>\n</li>\n<li><a href=\"../license.html\">License</a>\n</li>\n</ul></li>\n<li><a href=\"../download.html\">Download</a>\n<ul>\n<li><a href=\"../install-matlab.html\">Using from MATLAB</a>\n</li>\n<li><a href=\"../install-octave.html\">Using from Octave</a>\n</li>\n<li><a href=\"../install-shell.html\">Using from the command line</a>\n</li>\n<li><a href=\"../install-c.html\">Using from C</a>\n<ul>\n<li><a href=\"../xcode.html\">Xcode</a>\n</li>\n<li><a href=\"../vsexpress.html\">Visual C++</a>\n</li>\n<li><a href=\"../gcc.html\">g++</a>\n</li>\n</ul></li>\n<li><a href=\"../compiling.html\">Compiling</a>\n<ul>\n<li><a href=\"../compiling-unix.html\">Compiling on UNIX-like platforms</a>\n</li>\n<li><a href=\"../compiling-windows.html\">Compiling on Windows</a>\n</li>\n</ul></li>\n</ul></li>\n<li class='active'><a href=\"tut.html\">Tutorials</a>\n<ul>\n<li class='active' class='activeLeaf'><a href=\"frame.html\">Local feature frames</a>\n</li>\n<li><a href=\"covdet.html\">Covariant feature detectors</a>\n</li>\n<li><a href=\"hog.html\">HOG features</a>\n</li>\n<li><a href=\"sift.html\">SIFT detector and descriptor</a>\n</li>\n<li><a href=\"dsift.html\">Dense SIFT</a>\n</li>\n<li><a href=\"liop.html\">LIOP local descriptor</a>\n</li>\n<li><a href=\"mser.html\">MSER feature detector</a>\n</li>\n<li><a href=\"imdisttf.html\">Distance transform</a>\n</li>\n<li><a href=\"encodings.html\">Fisher Vector and VLAD</a>\n</li>\n<li><a href=\"gmm.html\">Gaussian Mixture Models</a>\n</li>\n<li><a href=\"kmeans.html\">K-means clustering</a>\n</li>\n<li><a href=\"aib.html\">Agglomerative Infromation Bottleneck</a>\n</li>\n<li><a href=\"quickshift.html\">Quick shift superpixels</a>\n</li>\n<li><a href=\"slic.html\">SLIC superpixels</a>\n</li>\n<li><a href=\"svm.html#tut.svm\">Support Vector Machines (SVMs)</a>\n</li>\n<li><a href=\"kdtree.html\">KD-trees and forests</a>\n</li>\n<li><a href=\"plots-rank.html\">Plotting AP and ROC curves</a>\n</li>\n<li><a href=\"utils.html\">Miscellaneous utilities</a>\n</li>\n<li><a href=\"ikm.html\">Integer K-means</a>\n</li>\n<li><a href=\"hikm.html\">Hierarchical integer k-means</a>\n</li>\n</ul></li>\n<li><a href=\"../applications/apps.html\">Applications</a>\n</li>\n<li><a href=\"../doc.html\">Documentation</a>\n<ul>\n<li><a href=\"../matlab/matlab.html\">MATLAB API</a>\n</li>\n<li><a href=\"../api/index.html\">C API</a>\n</li>\n<li><a href=\"../man/man.html\">Man pages</a>\n<ul>\n<li><a href=\"../man/mser.html\">mser</a>\n</li>\n<li><a href=\"../man/sift.html\">sift</a>\n</li>\n<li><a href=\"../man/vlfeat.html\">vlfeat</a>\n</li>\n</ul></li>\n</ul></li>\n</ul>\n\n    </div> <!-- sidebar -->\n  </div>\n  <div id=\"headbanner-section\">\n    <div id=\"headbanner\">\n      <span class='page'><a href=\"tut.html\">Tutorials</a></span><span class='separator'>></span><span class='page'><a href=\"frame.html\">Local feature frames</a></span>\n    </div>\n  </div>\n  <div id=\"content-section\">\n    <div id=\"content-wrapper\">\n      <div id=\"content\">\n        \n    \n\n<div class='toc'>\n<h3>Table of Contents</h3><ul><li class=\"level1\"><a href=\"#id-579\">Types of frames</a></li>\n<li class=\"level1\"><a href=\"#id-595\">Features frames as geometric frames</a></li>\n<li class=\"level1\"><a href=\"#id-604\">Oriented frames</a></li>\n<li class=\"level1\"><a href=\"#id-642\">Converting between frame types</a></li>\n</ul>\n</div><!-- Table of contents -->\n\n\n<p>This page introduces the notion of local feature frame used\nextensively in VLFeat.  A <em>feature frame</em> or simply\na <em>frame</em>, is a geometric object such as a point, a circle, or\nan ellipse representing the location and shape of an image\nfeature. Frame types are closed under certain classes of\ntransformations of the plane (for example circles are closed under\nsimilarity transformations) and can be used in corresponding\nco-variant feature detectors.</p>\n\n<h1 id=\"id-579\">Types of frames</h1>\n\n<p>VLFeat uses five types of frames:</p>\n\n<ul>\n<li><em>points</em> defined by their center $(x,y)$;</li>\n<li><em>circles</em> defined by their center $(x,y)$ and radius\n$\\sigma$;</li>\n<li><em>ellipses</em> defined by their center $T = (x,y)$, and a\npositive semidefinte matrix $\\Sigma$ such that the ellipse is the set\nof points $\\{\\bx \\in \\real^2: (\\bx-T)^\\top\\Sigma^{-1}(\\bx-T)=1\\}$;</li>\n<li><em>oriented circles</em> defined by their center $(x,y)$, their\nradius $\\sigma$, and rotation $\\theta$;</li>\n<li>and <em>oriented ellipses</em> defined by an affine transformation\n$(A,T)$, where $A\\in\\real^{2\\times2}$ is the linear component and\n$T\\in\\real^2$ the translation.</li>\n</ul>\n\n<p>A frame of each of these types can then be represented by 2, 3, 4,\n5, or 6 numbers respectively, packed into a vector <code/>frame</code>\nusing the conventions detailed in <code/><a href=../matlab/vl_plotframe.html>vl_plotframe</a></code>.</p>\n\n<h1 id=\"id-595\">Features frames as geometric frames</h1>\n\n<p>The purpose of a frame is twofold. First, it specifies a local\nimage region. Second, and perhaps more importantly, it specifies an\nimage transformation. A frame instance can in fact be thought as a\ntransformed variant of a <em>canonical</em> or <em>standard\nframe</em>.</p>\n\n<p>For example, a point $(x,y)$ can be seen as the translated version\nof the origin $(0,0)$ taken as canonical point frame. Likewise, a\ncircle with center $(x,y)$ and radius $\\sigma$ can be seen as the\ntranslated and rescaled version of a unit circle centered at the\norigin, taken as canonical circular frame.</p>\n\n<p>In general, different classes of frames are closed under different\nclasses of 2D transformations. For instance, points are closed under\nall transformations, while disks are closed under translations, rigid\nmotions, similarity, but not general affine transformations. Within a\nclass of compatible transformations, a frame may specify one uniquely\nif it can be obtained by transforming the standard frame in only one\nway. For instance, a point $(x,y)$ can be obtained from $(0,0)$\nthrough a unique translation $T=(x,y)$. Likewise, a circle can be\nobtained from the standard circle by a unique translation and\nrescaling. However, neither a point or a circle is sufficient to fully\nspecify a similarity transformation (e.g. a circle leaves the rotation\nundetermined).</p>\n\n<p>Since frames specify <em>transformations of the image domain</em>,\ni.e.  coordinate changes, they are surrogates of geometric reference\nframes. In particular, the mapping from a standard frame to one\nmeasured by a local feature detector is often undone\nto <em>normalize</em> the local image appearance, a key process in the\ncomputation of invariant feature descriptors.</p>\n\n<h1 id=\"id-604\">Oriented frames</h1>\n\n<p>While unoriented frames (points, circles, and ellipses) are easy to\nunderstand, a few words should be spent illustrating\ntheir <em>oriented</em> variants. Intuitively, an oriented circle\n(ellipse) is a circle (ellipse) with a radius representing its\norientation, such as the following:</p>\n\n<div class=\"figure\">\n <img src=\"../demo/frame_standard.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n    The standard oriented frame: a unit circle, centered at the\n    origin, with a radius pointing downwards. This frame can be seen\n    as an oriented disc with null translation, unit radius, and null\n    rotation, encoded as the 4D vector <code/>[0;0;1;0]</code>;\n    alternatively, it can be seen as an oriented ellipse with affine\n    transformation $(I,0)$ encoded as a 6D\n    vector <code/>[0;0;1;0;0;1]</code>. Figure generated\n    by <code/><a href=../matlab/demo/vl_demo_frame.html>vl_demo_frame</a></code>.\n  </span>\n </div>\n</div>\n\n<p>This figure was generated by using the <code/><a href=../matlab/vl_plotframe.html>vl_plotframe</a></code>\nfunction:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">A</span> <span class=\"p\">=</span> <span class=\"nb\">eye</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">T</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">;</span>\n<span class=\"n\">f</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">T</span> <span class=\"p\">;</span> <span class=\"n\">A</span><span class=\"p\">(:)]</span> <span class=\"p\">;</span>\n<span class=\"n\">vl_plotframe</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>This particular oriented frame is conventionally deemed to\nbe <em>standard</em> and, as shown in the code fragment above, it\ncorresponds to the identity affine transformation. Since this ellipse\nis also a circle, the frame can equivalently be represented by an\noriented circle with unit radius and null orientation:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">radius</span> <span class=\"p\">=</span> <span class=\"mi\">1</span> <span class=\"p\">;</span>\n<span class=\"n\">theta</span> <span class=\"p\">=</span> <span class=\"mi\">0</span> <span class=\"p\">;</span>\n<span class=\"n\">f</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">T</span> <span class=\"p\">;</span> <span class=\"n\">radius</span> <span class=\"p\">;</span> <span class=\"n\">theta</span><span class=\"p\">]</span> <span class=\"p\">;</span>\n<span class=\"n\">vl_plotframe</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>A positive rotation of the frame appears clockwise because the\nimage coordinate system is left-handed (Y axis pointing\ndownwards):</p>\n\n<div class=\"figure\">\n <img src=\"../demo/frame_rotated.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n    A frame rotated by 45 degrees; note that the rotation is\n    clockwise: this is because the image uses a left-handed coordinate\n    system (Y axis pointing downwards). Figure generated\n    by <code/><a href=../matlab/demo/vl_demo_frame.html>vl_demo_frame</a></code>.\n  </span>\n </div>\n</div>\n\n<div class=\"highlight\"><pre><span class=\"n\">radius</span> <span class=\"p\">=</span> <span class=\"mi\">1</span> <span class=\"p\">;</span>\n<span class=\"n\">theta</span> <span class=\"p\">=</span> <span class=\"nb\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span> <span class=\"p\">;</span>\n<span class=\"n\">f</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">T</span> <span class=\"p\">;</span> <span class=\"n\">radius</span> <span class=\"p\">;</span> <span class=\"n\">theta</span><span class=\"p\">]</span> <span class=\"p\">;</span>\n<span class=\"n\">vl_plotframe</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>As indicated above, frames are often used to specify image\ntransformations. In particular, oriented ellipses and oriented circles\ncan be obtained by a unique affine transformation of the standard\noriented circle shown above (the difference is that, different from\noriented ellipses, oriented circles are not close with respect to all\naffine transformations).</p>\n\n<p>For the oriented ellipse, this affine transformation $(A,T)$ is\nencoded explicitly in the <code/>frame</code> vector used to represent\nit numerically. For example, the code fragment</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">f</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">T</span> <span class=\"p\">;</span> <span class=\"n\">A</span><span class=\"p\">(:)]</span> <span class=\"p\">;</span>\n<span class=\"n\">vl_plotframe</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>produces the plot</p>\n\n<div class=\"figure\">\n <img src=\"../demo/frame_affine.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n    An oriented ellipse is specified as the affine transformation\n    $(A,T)$ of the standard oriented frame shown above. Figure\n    generated by <code/><a href=../matlab/demo/vl_demo_frame.html>vl_demo_frame</a></code>.\n  </span>\n </div>\n</div>\n\n<p>Note that, when features extracted by a detector such\nas <code/><a href=../matlab/vl_covdet.html>vl_covdet</a></code> or <code/><a href=../matlab/vl_sift.html>vl_sift</a></code>, are normalized, this\nis done by applying the affine transformation which is\nthe <em>inverse</em> of the one specified by the feature frame; in\nthis way, in fact, the frame is transformed back to its standardized\nversion.</p>\n\n<p>Similarly, unoriented frames can all be seen as affine\ntransformations of the standard unoriented frame (the unit circle\ncentered at the origin). In this case, however, the affine\ntransformation $(A,T)$ is determined only up to a rotation $(AR,\nT)$. &gt;When this ambiguity exists and an affine transformation $(A,T)$\nneeds to be selected, it is customary to choose $R$ such that the Y\naxis of the image is mapped onto itself (see below).</p>\n\n<h1 id=\"id-642\">Converting between frame types</h1>\n\n<p>The function <code/><a href=../matlab/vl_frame2oell.html>vl_frame2oell</a></code> can be used to convert any\nframe type to an oriented ellipse.</p>\n\n<p>Since all oriented frames are special cases of oriented ellipses,\nthis transformation is trivial for oriented circles and ellipses. On\nthe other hand, rewriting unoriented frames as <em>oriented</em>\nellipses requires assigning (arbitrarily) an orientation to them.</p>\n\n<p>By default, when an arbitrary orientation has to be selected in the\nconversion, this is done in such a way that the affine transformation\n$(A,T)$ is <em>upright</em>. This means that $A$ maps the Y axis to\nitself:</p>\n\n\\[\n  A\\begin{bmatrix}1\\\\ 0\\end{bmatrix} \\propto \\begin{bmatrix}1\\\\ 0\\end{bmatrix}.\n\\]\n\n<p>This effect can be better understood by starting from some oriented\nframes, removing the orientation, and then\nusing <code/><a href=../matlab/vl_frame2oell.html>vl_frame2oell</a></code> to generate oriented ellipses back:\nin the process, orientation information is lost and replaced by a\nconventional orientation:</p>\n\n<div class=\"figure\">\n <img src=\"../demo/frame_frame2oell.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n    Top: randomly sampled oriented ellipses. Middle: the same ellipses\n    with the orientation removed. Bottom: oriented ellipses again,\n    obtained by calling <code/><a href=../matlab/vl_frame2oell.html>vl_frame2oell</a></code>; note that the\n    orientation is upright. Figure generated\n    by <code/><a href=../matlab/demo/vl_demo_frame.html>vl_demo_frame</a></code>.\n  </span>\n </div>\n</div>\n\n\n  \n      </div>\n      <div class=\"clear\">&nbsp;</div>\n    </div>\n  </div> <!-- content-section -->\n  <div id=\"footer-section\">\n    <div id=\"footer\">\n      &copy; 2007-13 The authors of VLFeat\n    </div> <!-- footer -->\n  </div> <!-- footer section -->\n </body>\n <!-- Body ends -->\n</html>\n ", "encoding": "ascii"}