{"url": "https://www.ics.uci.edu/~kay/courses/i41/hw/lab4.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, October 13, 2005 12:04 PM\" />\n<TITLE>Lab Assignment 4</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2C1C67F\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/i41/code.css\" rel=\"stylesheet\" type=\"text/css\" /></HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT size=\"2\" FACE=\"Goudy Old Style\">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\" SIZE=6><B>Lab Assignment 4 </B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">This assignment is due at the end of lab on\nFriday, October 21. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Choose a partner for this assignment, someone\nyou haven&#39;t worked with already. Make sure you use the signup sheet to register your partnership.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(a)</B> Do exercises 22.5.20 (for which the predefined <code>length</code> function will be useful) and 23.2.1 (is <code>substitute</code> a mapping, filtering, or folding/reducing operation?).</FONT></P>\n<P>\n  <FONT FACE=\"Goudy Old Style\"><B>(b)</B>  In class we wrote a function like\n<code>in-ascending-order?</code> as described below; we used it in testing the results of a sorting program. </FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">;; in-ascending-order?: list-of-numbers -> boolean\n;; Return true if the list is empty or if each item <= all following items\n(check-expect (in-ascending-order? empty) true)\n(check-expect (in-ascending-order? (list 17)) true)\n(check-expect (in-ascending-order? (list 12 14 16 18 20)) true)\n(check-expect (in-ascending-order? (list 12 14 18 16 20)) false)</font></pre>\n<P><FONT FACE=\"Goudy Old Style\">The function as described above only works for numbers and ascending order. As we did in class with the sorting functions, generalize this function so that it works for ascending or descending order, numbers or strings or restaurants, or lists of any type of data for which two elements can be compared and put into order. Take a minute to go back and look at the code we wrote in class to see how this was done. Rename your generalized function <code>in-order?</code>.  Write <code>check-expect</code> tests that demonstrate your function's correctness on lists of numbers (correctly ordered or not), strings, and restaurants, in both ascending and descending order, correctly ordered or not. (If you're counting, that's at least 12 tests).</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Here's a question to think about:  If we want to test the correctness\n  of a sorting function, is it enough to have tests of\n  the form <code>(check-expect (in-ascending-order? (sort L)) true)</code>?\n  That is, if the results of our sorting function are\n  in ascending order, are we satisfied that our\n  sorting function works correctly?  (Put another way,\n  can we think of a way to write <code>sort</code> so that its result\n  always passes the <code>in-ascending-order?</code> test but the \n  result is not correctly sorted?)</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Collect your definitions\n  for parts <strong>(a)</strong> and <strong>(b) </strong>into one Scheme file, make sure both partners&#39; names\n  are in a comment at the top, and submit it via Checkmate. (Remember to make just one submission for both partners.)</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(c)</B>  As you start working with the restaurants program, change your language level to Intermediate Student.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Copy the code for the restaurants\n  program to your machine and run it to make sure it works properly in your\n  environment. See the Fourth Homework for details.</FONT></P>\n<p><FONT FACE=\"Goudy Old Style\">Add one new feature to the program: </FONT><FONT FACE=\"Courier New\" SIZE=2>c:\n      Change prices for the dishes served</FONT><FONT FACE=\"Goudy Old Style\">.\n        When the user types \"</FONT><FONT FACE=\"Courier New\" SIZE=2>c</FONT><FONT FACE=\"Goudy Old Style\">\",\n          the program should ask the user for an amount (positive or negative) representing\n          a percentage change in price (so that 100 would double a price and &ndash;50 would\n          cut it in half).  Then it should apply that price change to the prices for\n          all the restaurants in the collection.  [Here are some hints on how to approach\n          this.  Before reading further, you might want to think, yourselves, about how you'd do it; you'll learn better if you think about it before reading on. You might approach\n          this task by first writing a </FONT><FONT FACE=\"Courier New\" SIZE=2>rrant-change-price</FONT><FONT FACE=\"Goudy Old Style\">\n          function that takes a restaurant and a percentage change number, as above,\n          and returns a restaurant that has all the same information, except that\n          the price is changed appropriately.  Next you might write a function to\n          apply </FONT><FONT FACE=\"Courier New\" SIZE=2>rrant-change-price</FONT><FONT FACE=\"Goudy Old Style\">\n          to all the restaurants in the collection.  Finally, you can incorporate\n          these calls into the main program, adding the appropriate command handling\n  and so on.]</FONT></p>\n<p><font face=\"Goudy Old Style\">Submit your modified restaurants program (the whole definitions file, including parts you didn't change) via Checkmate.</font></p>\n<p><FONT FACE=\"Goudy Old Style\"><B>(d)</B> As we start this part of the lab, we'll review a feature of Scheme we mentioned in class: the quote operator. If we type <code>(+ 2 2)</code> in the interactions window, Scheme evaluates it by applying the \n    <code>+</code> \noperator to its arguments to get 4. If we type \n<code>&quot;(+ 2 2)&quot;</code>,\nScheme <em>doesn't</em> evaluate it as an arithmetic expression; the quotation marks just say to evaluate it as a string, and return the literal value \n<code>&quot;(+ 2 2)&quot;</code>.\n  Sometimes we want Scheme to evaluate what we type; sometimes we just want Scheme to treat it as data.  The way we say \"don't evaluate\" in Scheme is not to use double quote marks (which actually say \"evaluate this as a string\").  Instead, we use the quote operator, which can take the form \n  <code>(quote x)</code>\n   or \n   <code>'x</code>.\n     This is particularly convenient if we want to indicate a constant list in our code:  We can still say\n     <code>(list 1 2 3)</code>,\n      but we can also say \n      <code>(quote (1 2 3))</code>\n       or \n       <code>'(1 2 3)</code>.\n         Of course \n         <code>(1 2 3)</code>\n          (without the \n          <code>list</code>\n           or \n           <code>quote</code>\n            or apostrophe) would give us an error, because \n            <code>1</code>\nisn't the name of a defined function.  In this lab problem, you can see how we mght want to use quoted lists.</FONT></p>\n<p><font face=\"Goudy Old Style\">In this problem, we're also using symbols instead of strings. For our purposes, they're basically the same thing, but symbols are single words (whereas strings can include spaces and punctuation and anything you can type on the keyboard). Because symbols are single words, we can quote them with a single apostrophe instead of with double-quotes.</font></p>\n<p><FONT FACE=\"Goudy Old Style\">A recipe is a structure</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">    (make-recipe T IL SL)</font></pre>\n\n  <FONT FACE=\"Goudy Old Style\">where T is the title (a symbol), IL is a list\nof ingredients, and SL is a list of steps.</FONT>\n<P>\n  <FONT FACE=\"Goudy Old Style\">An single ingredient is a symbol (like </FONT>\n  <code>&#39;eggs</code><FONT FACE=\"Goudy Old Style\">);\n    a single step is a list of symbols (like </FONT>\n  <code>&#39;(beat the eggs)</code><FONT FACE=\"Goudy Old Style\">).\n      A recipe contains a list\nof ingredients and a list of steps; for example:</FONT></P>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">(make-recipe &#39;ThaiIcedCoffee \n  &#160;&#160; &#39;(coffee sugar condensed-milk ice) \n  &#160;&#160; &#39;((brew coffee) (add sugar and condensed-milk) (pour coffee mixture over ice)))</font></pre>\n<P>  <FONT FACE=\"Goudy Old Style\">(Here you can see one advantage of using symbols instead of strings; with strings, we'd have to double-quote every individual word, but with symbols, we can just single-quote the whole list of them. Ask yourselves: What would be the problem with double-quoting the whole list of symbols here?)</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(d.1)</B> Write the structure definition\n  for a recipe, using &quot;title,&quot; &quot;ingredients,&quot; and &quot;steps&quot;\n  as the names of the fields.</FONT></P>\n<P>\n  <FONT FACE=\"Goudy Old Style\"><B>(d.2)</B> Some people say that any recipe\n    can be improved by the addition of chocolate.  (Others say sesame oil, or\n  Tabasco sauce.)  Write a definition of </FONT>\n  <code>add-special-ingredient</code>\n  <FONT FACE=\"Goudy Old Style\">.\n      You may use an auxiliary function if you like.\n  </FONT></p><pre><font size=\"2\" face=\"Courier New, Courier, monospace\">; add-special-ingredient:  list-of-recipes  symbol   -&gt;  list-of-recipes \n; Return a list containing all the recipes in the input list, but with the symbol added\n;      at the beginning of the ingredients list of each recipe.</font></pre>\n<P>\n  <FONT FACE=\"Goudy Old Style\"><B>(d.3)</B>  Write a definition for \n  </FONT><code>complete-ingredients-list</code>\n</p><FONT FACE=\"Goudy Old Style\">\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">; complete-ingredients-list:  list-of-recipes  -&gt;  list-of-symbols\n; Return a list containing all the ingredients from all the recipes in the list,\n;     with no duplications.  (You may assume that all the elements of a single\n;     ingredients list are unique.)</font></pre>\n<P>\n<FONT FACE=\"Goudy Old Style\">[Hint:  Define an auxiliary function called</FONT> <code>add-unique</code><FONT FACE=\"Goudy Old Style\">.]</FONT></P>\n</font><P>\n  <FONT FACE=\"Goudy Old Style\"><B>(d.4)</B> Sometimes we have to substitute\n  one ingredient for another in a recipe. Write a definition for <code>replace-ingredient</code> as described below.  Auxiliary functions are essential here. \n</FONT></p><FONT FACE=\"Goudy Old Style\">\n<FONT FACE=\"Goudy Old Style\"><pre><font size=\"2\" face=\"Courier New, Courier, monospace\">; replace-ingredient: symbol1  symbol2  recipe  -&gt;  recipe \n; Return a recipe like the input, but with every instance of symbol1 replaced by symbol2, \n;     both in the ingredients list and in the list of steps. \n; Example: Suppose TIC is the Thai Iced Coffee recipe defined above. \n;    (replace-ingredient &#39;coffee &#39;decaf  TIC) would return \n;    (make-recipe &#39;ThaiIcedCoffee \n;      &#160; &#39;(decaf sugar condensed-milk ice)\n;      &#160; &#39;((brew decaf) (add sugar and condensed-milk) (pour decaf mixture over ice)))</font></pre>\n</font></font><P> <FONT FACE=\"Goudy Old Style\"><B>(d.5)</B> (optional) Some recipes are so complex that they include in their steps some references to other recipes. A cake recipe in a cookbook, for example, might have as one step, &quot;Use the chocolate icing recipe on page 23.&quot; To reflect this in our Scheme recipes, we change our definition of a &quot;list of steps&quot;:</FONT></P><FONT FACE=\"Goudy Old Style\"><FONT FACE=\"Goudy Old Style\">\n<P><FONT FACE=\"Goudy Old Style\">A list of steps (LOS) is either</FONT></P>\n<ol>\n  <li><FONT FACE=\"Goudy Old Style\">empty;</FONT></li>\n  <li><FONT FACE=\"Goudy Old Style\">(cons S LOS), where S is a single step (i.e., a list of symbols); or</FONT></li>\n  <li><FONT FACE=\"Goudy Old Style\">(cons R LOS), where R is a recipe.</FONT></li>\n</ol>\n<P> <FONT FACE=\"Goudy Old Style\">Write a definition for </FONT><code>complete-ingredients-list2</code><FONT FACE=\"Goudy Old Style\"> that accommodates these (possibly nested) recipes.</font>\n</p><pre><font size=\"2\" face=\"Courier New, Courier, monospace\">; complete-ingredients-list2:  list-of-recipes -&gt;  list-of-symbols \n; Return a list containing all the ingredients from all the recipes in the list, \n;     including nested recipes, with no duplications.  (You may assume that all the\n;     elements of a single ingredients list are unique.)  </font></pre>\n<P><FONT FACE=\"Goudy Old Style\">Collect these definitions and submit them via Checkmate.  Turn in what you have by the due date; then consult with the TA if you'd like to keep working.</FONT></P>\n\n</font></font>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(e)</B> If you have time, do exercises 22.5.15, 22.6.7, and 23.4.1.</FONT> </P>\n\n<P><font face=\"Goudy Old Style\"><B>(f)</B> Remember that each partner must\n  complete a partner evaluation form on eee.uci.edu.</font></P><FONT FACE=\"Goudy Old Style\"><FONT FACE=\"Goudy Old Style\">\n<BR />\n<P>\n  <FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments by David\nG. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004&ndash;Fall 2009. Modified to reflect the <em>Picturing Programs</em> text by David G. Kay, Fall 2010 and Fall 2011.</FONT></P>\n<HR />\n<FONT FACE=\"Goudy Old Style\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Goudy Old Style\">\n<!-- #BeginDate format:fcAm1a -->Monday, October 24, 2011 6:54 AM<!-- #EndDate -->\n</font></span>\n</font>\n</font>\n</BODY>\n</HTML>\n\n", "encoding": "ascii"}