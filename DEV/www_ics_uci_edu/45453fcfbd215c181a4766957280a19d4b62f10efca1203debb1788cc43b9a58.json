{"url": "https://www.ics.uci.edu/~ejw/authoring/requirements/draft-ietf-webdav-requirements-00.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<HTML>\n<HEAD>\n   <TITLE>WebDAV Requirements</TITLE>\n</HEAD>\n<BODY>\n<PRE>\nWEBDAV Working Group\t\t\t\tJ.A. Slein\nINTERNET-DRAFT      \t\t\t\tXerox Corporation\n&lt;draft-ietf-webdav-requirements.txt&gt;\t\tF. Vitali\n\t\t\t\t\t\tUniversity of Bologna              \n\t\t\t\t\t\tE.J. Whitehead, Jr.\n\t\t\t\t\t\tU.C. Irvine\n\t\t\t\t\t\tD.G. Durand\n\t\t\t\t\t\tBoston University\n\t\t\t\t\t\tMay 30, 1997\n\nExpires November 30, 1997\n</PRE>\n<H2 ALIGN=CENTER>Requirements for Distributed Authoring and Versioning\n</H2> \n<H2 ALIGN=CENTER>on the World Wide Web\n</H2>\n\n<H3>Status of this Memo</H3>\n\n<P>This document is an Internet draft. Internet drafts are working\ndocuments of the Internet Engineering Task Force (IETF), its areas and\nits working groups. Note that other groups may also distribute working\ninformation as Internet drafts.\n\n<P>Internet Drafts are draft documents valid for a maximum of six months\nand can be updated, replaced or obsoleted by other documents at any\ntime. It is inappropriate to use Internet drafts as reference material\nor to cite them as other than as \"work in progress\".\n\n<P>To learn the current status of any Internet draft please check the\n\"lid-abstracts.txt\" listing contained in the Internet drafts shadow\ndirectories on ftp.is.co.za (Africa), nic.nordu.net (Europe),\nmunnari.oz.au (Pacific Rim), ds.internic.net (US East coast) or\nftp.isi.edu (US West coast). Further information about the IETF can be\nfound at URL: http://www.ietf.org/\n\n<P>Distribution of this document is unlimited. Please send comments to the\nWWW Distributed Authoring and Versioning (WebDAV) mailing list,\n<w3c-dist-auth@w3.org>, which may be joined by sending a message with\nsubject \"subscribe\" to <w3c-dist-auth-request@w3.org>. Discussions are\narchived at URL:\nhttp://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth/.\n\n<H3>Abstract</H3>\n\n<P>Current World Wide Web (WWW or Web) standards provide simple support \nfor applications which allow remote editing of typed data. In practice, \nthe existing capabilities of the WWW have proven inadequate to support \nefficient, scalable remote editing free of overwriting conflicts.  \nThis document presents a list of features in the form of requirements \nwhich, if implemented, would improve the efficiency of common remote \nediting operations, provide a locking mechanism to prevent overwrite \nconflicts, improve link management support between non-HTML \ndata types, provide a simple attribute-value metadata facility, provide\nfor the creation and reading of container data types, and integrate \nversioning into the WWW.\n\n<H3>1. Introduction</H3>\n\n<P>This document describes functionality which, if incorporated in an \nextension to the existing HTTP proposed standard [4], would allow tools \nfor remote loading, editing and saving (publishing) of various media \ntypes on the WWW to interoperate with any compliant Web server. As much \nas possible, this functionality is described without suggesting a \nproposed implementation, since there are many ways to perform the \nfunctionality within the WWW framework. It is also possible that a \nsingle mechanism could simultaneously satisfy several requirements.\n\n<P>This document is intended to reflect the consensus of the WWW \nDistributed Authoring and Versioning working group (WebDAV) as to the \nfunctionality that needs to be standardized to support distributed \nauthoring and versioning on the Web. However, this version still has \nsome elements that are being debated in the working group. The following\nelements are still under discussion:\n\n<UL>\n<LI>Whether support for multi-resource locking is needed\n<LI>Whether reservations should be treated as shared or advisory locks\n<LI>What requirements there should be for access control\n<LI>What requirements there should be for internationalization\n<LI>How far WebDAV should be concerned about compatibility with\nother transport protocols besides HTTP\n</UL>\n\n<H3>2. Rationale</H3>\n\n<P>Current Web standards contain functionality which enables the editing of \nWeb content at a remote location, without direct access to the storage \nmedia via an operating system. This capability is exploited by several \nexisting HTML distributed authoring tools, and by a growing number of \nmainstream applications (e.g., word processors) which allow users to \nwrite (publish) their work to an HTTP server. To date, experience from \nthe HTML authoring tools has shown they are unable to meet their users' \nneeds using the facilities of Web standards. The consequence of \nthis is either postponed introduction of distributed authoring \ncapability, or the addition of nonstandard extensions to the HTTP \nprotocol or other Web standards.  These extensions, developed in \nisolation, are not interoperable.\n\n<P>Other authoring applications have wanted to access document repositories \nor version control systems through Web gateways, and have been similarly\nfrustrated.  Where this access is available at all, it is through\nnonstandard extensions to HTTP or other standards that force clients to \nuse a different interface for each vendor's service.\n\n<P>This document describes requirements for a set of standard extensions\nto HTTP that would allow distributed Web authoring tools to provide\nthe functionality their users need by means of the same standard\nsyntax across all compliant servers. The broad categories of \nfunctionality that need to be standardized are:\n\n<UL>\n<LI>Attributes\n<LI>Links\n<LI>Locking\n<LI>Reservations\n<LI>Retrieval of Unprocessed Source\n<LI>Partial Write\n<LI>Name Space Manipulation\n<LI>Collections\n<LI>Versioning\n<LI>Security\n<LI>Internationalization\n</UL>\n\n<H3>3. Terminology</H3>\n\n<P>Where there is overlap, usage is intended to be consistent with that in \nthe HTTP 1.1 specification [4].\n\n<DL>\n<DT>Attribute\n<DD>Named descriptive information about a resource.\n\n<DT>Client\n<DD>A program which issues HTTP requests and accepts responses.\n\n<DT>Collection\n<DD>A collection is a resource that contains other resources,\neither directly or by reference.\n\n<DT>Distributed Authoring Tool\n<DD>A program which can retrieve a source entity via HTTP, allow \nediting of this entity, and then save/publish this entity\nto a server using HTTP.\n\n<DT>Entity\n<DD>The information transferred in a request or response.\n\n<DT>Hierarchical Collection\n<DD>A hierarchical organization of resources.  A hierarchical\ncollection is a resource that contains other resources, \nincluding collections, either directly or by reference.\n\n<DT>Link\n<DD>A typed connection between two resources.\n\n<DT>Lock\n<DD>A mechanism for preventing anyone other than the owner of the\nlock from accessing a resource.\n\n<DT>Member of Version Graph\n<DD>A resource that is a node in a version graph, and so is derived\nfrom the resources that precede it in the graph, and is the \nbasis of those that succeed it.\n\n<DT>Reservation\n<DD>A declaration to the server that one intends to edit a resource.\n\n<DT>Resource\n<DD>A network data object or service that can be identified by\na URI.\n\n<DT>Server\n<DD>A program which receives and responds to HTTP requests.\n\n<DT>Server Attribute\n<DD>An attribute whose value is generated by the server.\n\n<DT>User Agent\n<DD>The client that initiates a request.\n\n<DT>User Attribute\n<DD>An attribute whose value is provided by a user or a user agent.\n\n<DT>Version Graph\n<DD>A directed acyclic graph with resources as its nodes, where\neach node is derived from its predecessor(s).\n\n<DT>Write Lock\n<DD>A lock that prevents anyone except its owner from modifying\nthe resource it applies to.\n</DL>\n\n\n<H3>4. General Principles</H3>\n\n<P>This section describes a set of general principles that the WebDAV\nextensions should follow.  These principles cut across categories of\nfunctionality.\n\n<H4>4.1. User Agent Interoperability</H4>\n\n<P>All WebDAV clients should be able to work with any WebDAV-compliant HTTP\nserver. It is acceptable for some client/server combinations to provide\nspecial features that are not universally available, but the protocol\nshould be sufficient that a basic level of functionality will be\nuniversal.\n\n<H4>4.2. Client Simplicity</H4>\n\n<P>The WebDAV extensions should be designed to allow client implementations\nto be simple.\n\n<H4>4.3. Legacy Client Support</H4>\n\n<P>It should be possible to implement a WebDAV-compliant server in such a\nway that it can interoperate with non-WebDAV clients.  Such a server\nwould be able to understand any valid HTTP 1.1 request from an ordinary\nWeb client without WebDAV extensions, and to provide a valid HTTP 1.1 \nresponse that does not require the client to understand the extensions.\n\n<H4>4.4. Data Format Compatibility</H4>\n\n<P>WebDAV-compliant servers should be able to work with existing resources \nand URIs [2]. Special additional information should not become a \nmandatory part of document formats.\n\n<H4>4.5. Replicated, Distributed Systems</H4>\n\n<P>Distribution and replication are at the heart of the Internet.  All\nWebDAV extensions should be designed to allow for distribution and\nreplication.  Version trees should be able to be split across multiple\nservers.  Collections may have members on different servers.  Resources\nmay have attributes on different servers.  Any resources may be cached\nor replicated for mobile computing or other reasons.  Consequently, the\nWebDAV extensions must be able to operate in a distributed, replicated\nenvironment.\n\n<H4>4.6 Parsimony in Client-Server Interactions</H4> \n\n<P>The WebDAV extensions should keep to a minimum the number of \ninteractions between the client and the server needed to perform common\nfunctions. For example, publishing a document to the Web will often mean\npublishing content together with related metadata.  A client may often \nneed to find out what version graph a particular resource belongs to, \nor to find out which resource in a version graph is the published one.\nThe extensions should make it possible to do these things efficiently.\n\n<H4>4.7. Changes to HTTP</H4>\n\n<P>WebDAV adds a number of new types of objects to the Web: links, \ncollections, version graphs, etc.  Existing HTTP methods such as\nDELETE and PUT will have to operate in well-defined ways in this \nexpanded environment. WebDAV should explicitly address not only new\nmethods, headers, and MIME types, but also any required changes to the\nexisting HTTP methods and headers.\n\n<H4>4.8. Alternate Transport Mechanisms</H4>\n\n<P>It may be desirable to transport WebDAV requests and responses by other\nmechanisms, particularly EMail, in addition to HTTP.  The WebDAV protocol\nspecification should not preculde a future body from developing an\ninteroperability specification for disconnected operation via EMail.\n\n<H3>5. Requirements</H3>\n\n<P>In the requirement descriptions below, the requirement will be stated,\nfollowed by its rationale.\n\n<H4>5.1. Attributes</H4>\n\n<H4>5.1.1. Functional Requirements</H4>\n\n<P>It must be possible to create, modify, query, read and delete arbitrary\nattributes on resources of any media type.\n\n<H4>5.1.2. Rationale</H4> \n\n<P>Attributes describe resources of any media type.  They may \ninclude bibliographic information such as author, title, publisher, \nand subject, constraints on usage, PICS ratings, etc. These\nattributes have many uses, such as supporting searches on attribute \nvalues, enforcing copyrights, and the creation of catalog entries as \nplaceholders for objects which are not available in electronic form, or \nwhich will be available later.\n\n<H4>5.2. Links</H4>\n\n<H4>5.2.1. Functional Requirements</H4>\n\n<P>It must be possible to create, modify, query, read and delete typed \nlinks between resources of any media type.\n\n<H4>5.2.2. Rationale</H4> \n\n<P>One type of link between resources is the hypertext link, which is \nbrowsable using a hypertext style point-and-click user interface. Links, \nwhether they are browsable hypertext links, or simply a means of \ncapturing a connection between resources, have many purposes.  Links \ncan support pushbutton printing of a multi-resource document in a \nprescribed order, jumping to the access control page for a resource, \nand quick browsing of related information, such as a table of contents, \nan index, a glossary, a bibliographic record, help pages, etc. While \nlink support is provided by the HTML \"LINK\" element, this is limited \nonly to HTML resources [1]. Similar support is needed for bitmap image \ntypes, and other non-HTML media types.  \n\n<H4>5.3. Locking</H4>\n\n<H4>5.3.1. General Principles</H4>\n\n<P><B>5.3.1.1. Independence of locks.</B> It must be possible to lock a resource\nwithout re-reading the resource, and without committing to editing the \nresource.\n\n<P><B>5.3.1.2. Multi-Resource Locking.</B> It must be possible to take out a \nlock on multiple resources in the same action, and this locking \noperation must be atomic across these resources.\n\n<H4>5.3.2. Functional Requirements</H4>\n\n<P><B>5.3.2.1. Write Locks.</B> It must be possible to restrict modification of \na resource to a specific person.\n\n<P><B>5.3.2.2. Lock Query.</B> It must be possible to find out whether a given \nresource has any active modification restrictions, and if so, who \ncurrently has modification permission.\n\n<P><B>5.3.2.3. Unlock.</B> It must be possible to remove a lock.\n\n<H4>5.3.3. Rationale</H4>\n\n<P>At present, the Web provides limited support for preventing two or more \npeople from overwriting each other's modifications when they save to a \ngiven URI. Furthermore, there is no way to discover whether someone else\nis currently making modifications to a resource. This is known as the \n\"lost update problem,\" or the \"overwrite problem.\" Since there can be \nsignificant cost associated with discovering and repairing lost \nmodifications, preventing this problem is crucial for supporting \ndistributed authoring. A write lock ensures that only one person may \nmodify a resource, preventing overwrites. Furthermore, locking support \nis a key component of many versioning schemes, a desirable capability \nfor distributed authoring.\n\n<P>An author may wish to lock an entire web of resources even though he \nis editing just a single resource, to keep the other resources from \nchanging. In this way, an author can ensure that if a local hypertext \nweb is consistent in his distributed authoring tool, it will then be \nconsistent when he writes it to the server. Because of this, it should \nbe possible to take out a lock without also causing transmission of the \ncontents of a resource.\n\n<P>It is often necessary to guarantee that a lock or unlock operation \noccurs at the same time across multiple resources, a feature which is \nsupported by the multiple-resource locking requirement. This is useful \nfor preventing a collision between two people trying to establish locks \non the same set of resources, since with multi-resource locking, one of \nthe two people will get a lock. If this same multiple-resource locking \nscenario was repeated by using atomic lock operations iterated across \nthe resources, the result would be a splitting of the locks between the \ntwo people, based on resource ordering and race conditions.\n\n<H4>5.4. Reservations</H4>\n\n<H4>5.4.1. Functional Requirements</H4> \n\n<P><B>5.4.1.1. Reserve.</B> It must be possible to notify the server that \na resource is about to be edited by a given person.\n\n<P><B>5.4.1.2. Reservation Query.</B> It must be possible to find out whether \na given resource has any active reservations, and if so, who currently \nholds reservations.\n\n<P><B>5.4.1.3. Release Reservation.</B>  It must be possible to release the \nreservation.\n\n<H4>5.4.2. Rationale</H4>\n\n<P>Experience from configuration management systems has shown that people \nneed to know when they are about to enter a parallel editing situation. \nOnce notified, they either decide not to edit in parallel with the \nother authors, or they use out-of-band communication (face-to-face, \ntelephone, etc.) to coordinate their editing to minimize the difficulty \nof merging their results. Reservations are separate from locking, since \na write lock does not necessarily imply a resource will be edited, and \na reservation does not carry with it any access restrictions. This \ncapability supports versioning, since a check-out typically involves \ntaking out a write lock, making a reservation, and getting the resource\nto be edited.\n\n<H4>5.5. Retrieval of Unprocessed Source for Editing</H4>\n\n<H4>5.5.1. Functional Requirement</H4>\n\n<P>The source of any given resource must be retrievable.\n\n<H4>5.5.2. Rationale</H4>\n\n<P>There are many cases where the source stored on a server does \nnot correspond to the actual entity transmitted in response to an HTTP \nGET. Current known cases are server side include directives, and \nStandard Generalized Markup Language (SGML) source which is\nconverted on the fly to HyperText Markup Language (HTML) [1] output \nentities. There are many possible cases, such as automatic conversion \nof bitmap images into several variant bitmap media types (e.g. GIF, \nJPEG), and automatic conversion of an application's native media type \ninto HTML. As an example of this last case, a word processor could \nstore its native media type on a server which automatically converts \nit to HTML. A GET of this resource would retrieve the HTML. Retrieving \nthe source would retrieve the word processor native format.\n\n<H4>5.6. Partial Write.</H4>\n\n<H4>5.6.1. Functional Requirement</H4> \n\n<P>After editing a resource, it must be possible to write only the changes\nto the resource, rather than retransmitting the entire resource.\n\n<H4>5.6.2. Rationale</H4>\n\n<P>During distributed editing which occurs over wide geographic separations\nand/or over low bandwidth connections, it is extremely inefficient\nand frustrating to rewrite a large resource after minor changes, such \nas a one-character spelling correction. Support is needed for \ntransmitting \"insert\" (e.g., add this sentence in the middle of a \ndocument) and \"delete\" (e.g. remove this paragraph from the middle of \na document) style updates. Support for partial resource updates will \nmake small edits more efficient, and allow distributed authoring tools \nto scale up for editing large documents.\n\n<H4>5.7. Name Space Manipulation</H4>\n\n<H4>5.7.1. Copy</H4>\n\n<H4>5.7.1.1. Functional Requirements</H4> \n\n<P>It must be possible to duplicate a resource without a client loading, \nthen resaving the resource. After the copy operation, the content of \nthe destination resource must be octet for octet identical to the \ncontent of the source resource. A modification to either resource must \nnot cause a modification to the other.\n\n<H4>5.7.1.2. Rationale</H4>\n\n<P>There are many reasons why a resource might need to be duplicated, such \nas changing ownership, preparing for major modifications, or making \na backup. Due to network costs associated with loading and saving a \nresource, it is far preferable to have a server perform a resource copy\nthan a client. If a copied resource records which resource it is a copy\nof, then it would be possible for a cache to avoid loading the copied \nresource if it already locally stores the original.\n\n<H4>5.7.2. Move/Rename</H4>\n\n<H4>5.7.2.1. Functional Requirements</H4> \n\n<P>It must be possible to change the location of a resource without \na client loading, then resaving the resource under a different name. \nAfter the move operation, the content of the resource at its new \nlocation must be octet for octet identical to the content of the prior \nresource. It must no longer be possible to access the resource at its \noriginal location.\n\n<H4>5.7.2.2. Rationale</H4>\n\n<P>It is often necessary to change the name of a resource, for example due \nto adoption of a new naming convention, or if a typing error was made \nentering the name originally. Due to network costs, it is undesirable \nto perform this operation by loading, then resaving the resource,\nfollowed by a delete of the old resource. Similarly, a single rename \noperation is more efficient than a copy followed by a delete operation.\nNote that moving a resource is considered the same function as renaming\na resource.\n\n<H4>5.8. Collections</H4>\n\n<P>A collection is a resource that is a container for other resources,\nincluding other collections.  A resource may belong to a collection\neither directly or by reference.  If a resource belongs to a\ncollection directly, namespace operations like copy, move, and\ndelete applied to the collection also apply to the resource.  If a\nresource belongs to a collection by reference, namespace operations\napplied to the collection affect only the reference, not the resource\nitself.\n\n<H4>5.8.1. Functional Requirements</H4>\n\n<P><B>5.8.1.1. List Collection.</B> A listing of all resources in a specific \ncollection must be accessible.\n\n<P><B>5.8.1.2. Make Collection.</B> It must be possible to create a new \ncollection.\n\n<P><B>5.8.1.3. Add to Collection.</B>  It must be possible to add a resource to a\ncollection directly or by reference.\n\n<P><B>5.8.1.4. Remove from Collection.</B>  It must be possible to remove a\nresource from a collection.\n\n<H4>5.8.2. Rationale</H4>\n\n<P>In [2] it states that, \"some URL schemes (such as the ftp, http, and \nfile schemes) contain names that can be considered hierarchical.\" \nEspecially for HTTP servers which directly map all or part of their URL \nname space into a filesystem, it is very useful to get a listing of all \nresources located at a particular hierarchy level. This functionality \nsupports \"Save As...\" dialog boxes, which provide a listing of the \nentities at a current hierarchy level, and allow navigation through \nthe hierarchy. It also supports the creation of graphical visualizations\n(typically as a network) of the hypertext structure among the entities \nat a hierarchy level, or set of levels. It also supports a tree\nvisualization of the entities and their hierarchy levels.\n\n<P>In addition, document management systems may want to make their \ndocuments accessible through the Web.  They typically allow the \norganization of documents into collections, and so also want their users\nto be able to view the collection hierarchy through the Web.\n\n<P>There are many instances where there is not a strong correlation between\na URL hierarchy level and the notion of a collection. One example is a \nserver in which the URL hierarchy level maps to a computational process \nwhich performs some resolution on the name. In this case, the contents \nof the URL hierarchy level can vary depending on the input to the \ncomputation, and the number of resources accessible via the computation \ncan be very large. It does not make sense to implement a directory \nfeature for such a namespace. However, the utility of listing the \ncontents of those URL hierarchy levels which do correspond to \ncollections, such as the large number of HTTP servers which map their \nnamespace to a filesystem, argue for the inclusion of this capability, \ndespite not being meaningful in all cases. If listing the contents of \na URL hierarchy level does not makes sense for a particular URL, then \na \"405 Method Not Allowed\" status code could be issued.\n\n<P>The ability to create collections to hold related resources supports \nmanagement of a name space by packaging its members into small, related \nclusters. The utility of this capability is demonstrated by the broad \nimplementation of directories in recent operating systems. The ability \nto create a collection also supports the creation of \"Save As...\" \ndialog boxes with \"New Level/Folder/Directory\" capability, common in \nmany applications.\n\n<H4>5.9. Versioning</H4>\n\n<H4>5.9.1. Background and General Principles</H4>\n\n<P><B>5.9.1.1. Stability of versions.</B> Most versioning systems are intended to\nprovide an accurate record of the history of evolution of a document. \nThis accuracy is ensured by the fact that a version eventually becomes \n\"frozen\" and immutable. Once a version is frozen, further changes will \ncreate new versions rather than modifying the original. In order for \ncaching and persistent references to be properly maintained, a client \nmust be able to determine that a version has been frozen. Any successful\nattempt to retrieve a frozen version of a resource will always retrieve\nexactly the same content, or return an error if that version (or the \nresource itself) is no longer available.\n\n<H4>5.9.1.2. Operations for Creating New Versions</H4>\n\n<P>Version management systems vary greatly in the operations they require,\nthe order of the operations, and how they are combined into atomic\nfunctions.  In the most complete cases, the logical operations involved\nare:\n\n<UL>\n<LI>Reserve existing version\n<LI>Lock existing version\n<LI>Retrieve existing version\n<LI>Request or suggest identifier for new version\n<LI>Write new version\n<LI>Release lock\n<LI>Release reservation\n</UL>\n\n<P>With the exception of requesting a new version identifier, all of these\noperations have applications outside of versioning and are either \nalready part of HTTP or are discussed in earlier sections of these\nrequirements. Typically, versioning systems combine reservation, \nlocking, and retrieval -- or some subset of these -- into an atomic \ncheckout function.  They combine writing, releasing the lock, and \nreleasing the reservation -- or some subset of these -- into an atomic \ncheckin function.  The new version identifier may be assigned either at \ncheckout or at checkin.\n\n<P>The WebDAV extensions must find some balance between allowing versioning\nservers to adopt whatever policies they wish with regard to these \noperations and enforcing enough uniformity to keep client \nimplementations simple.\n\n<H4>5.9.1.3. The Versioning Model</H4>\n\n<P>Each version typically stands in a \"derived from\" relationship to its \npredecessor(s).  It is possible to derive several different versions \nfrom a single version (branching), and to derive a single version from \nseveral versions (merging).  Consequently, the collection of related\nversions forms a directed acyclic graph.  In the following discussion,\nthis graph will be called a \"version graph\".  Each node of this graph\nis a \"version\" or \"member of the version graph\".  The arcs of the graph\ncapture the \"derived from\" relationships.\n\n<P>It is also possible for a single resource to participate in multiple\nversion graphs.\n\n<P>The WebDAV extensions should support this versioning model, though\nparticular servers may restrict it in various ways.\n\n<P><B>5.9.1.4. Versioning Policies.</B> Many writers, including Feiler [3] and \nHaake and Hicks [5], have discussed the notion of versioning styles \n(referred to here as versioning policies, to reflect the nature of \nclient/server interaction) as one way to think about the different \npolicies that versioning systems implement. Versioning policies include\ndecisions on the shape of version histories (linear or branched), the \ngranularity of change tracking, locking requirements made by a server, \netc. The protocol should clearly identify the policies that it dictates\nand the policies that are left up to versioning system implementors or\nadministrators.\n\n<P><B>5.9.1.5.</B> It is possible to version resources of any media type.\n\n<H4>5.9.2. Functional Requirements</H4>\n\n<P><B>5.9.2.1. Referring to a version graph.</B> There must be a way to refer to\na version graph as a whole.  \n\n<P>Some queries and operations apply, not to any one member of a\nversion graph, but to the version graph as a whole.  For example, a \nclient may request that an entire graph be moved, or may ask for a \nversion history. In these cases, a way to refer to the whole version \ngraph is required.\n\n<P><B>5.9.2.2. Referring to a specific member of a version graph.</B> There must\nbe a way to refer to each member of a version graph. This means that \neach member of the graph is itself a resource. \n\n<P>Each member of a version graph must be a resource if it is to be \npossible for a hypertext link to refer to specific version of a page, \nor for a client to request a specific version of a document for editing.\n\n<P><B>5.9.2.3.</B> A client must be able to determine whether a resource is a \nversion graph, or whether a resource is itself a member of a version \ngraph.\n\n<P>A resource may be a simple, non-versioned resource, or it may be a \nversion graph, or it may be a member of a version graph.  A client needs\nto be able to tell which sort of resource it is accessing.\n\n<P><B>5.9.2.4.</B> There must be a way to refer to a server-defined default \nmember of a version graph.\n\n<P>The server should return a default version of a resource for requests \nthat ask for the default version, as well as for requests where no\nspecific version information is provided. This is one of the simplest \nways to guarantee non-versioning client compatibility. This does not \nrule out the possibility of a server returning an error when no sensible\ndefault exists.\n\n<P>It may also be desirable to be able to refer to other special members \nof a version graph. For example, there may be a current version for\nediting that is different from the default version.  For a graph with\nseveral branches, it may be useful to be able to request the tip version\nof any branch.\n\n<P><B>5.9.2.5.</B> It must be possible, given a reference to a member of a version\ngraph, to find out which version graph(s) that resource belongs to.\n\n<P>This makes it possible to understand the versioning context of the \nresource. It makes it possible to retrieve a version history for the \ngraphs to which it belongs, and to browse the version graph. It also \nsupports some comparison operations: It makes it possible to determine \nwhether two references designate members of the same version graph.\n\n<P><B>5.9.2.6. Navigation of a version graph.</B>  Given a reference to a member \nof a version graph, it must be possible to discover and access the \nfollowing related members of the version graph.\n<UL>\n<LI>root member of the graph\n<LI>predecessor member(s)\n<LI>successor member(s)\n<LI>default member of the graph\n</UL>\n<P>It must be possible in some way for a versioning client to access\nversions related to a resource currently being exhamined.\n\n<P><B>5.9.2.7. Version Topology.</B> There must be a way to retrieve the complete \nversion topology for a version graph, including information about all \nmembers of the version graph. The format for this information must be \nstandardized so that the basic information can be used by all clients. \nOther specialized formats should be accomodated, for servers and \nclients that require information that cannot be included in the \nstandard topology.\n\n<P><B>5.9.2.8.</B> A client must be able to propose a version identifier to be \nused for a new member of a version graph. The server may refuse to use \nthe client's suggested version identifier.  The server should tell the\nclient what version identifier it has assigned to the new member of the\nversion graph.\n\n<P><B>5.9.2.9.</B> A version identifier must be unique across a version graph.\n\n<P><B>5.9.2.10.</B> A client must be able to supply version-specific metadata to \nbe associated with a new member of a version graph. (See Section 5.1 \n\"Attributes\" above.) At a minimum, it must be possible to associate \ncomments with the new member, explaining what changes were made.\n\n<P><B>5.9.2.11.</B> A client must be able to query the server for information \nabout a version tree, including which versions are locked, which are \nreserved for editing, and by whom (Session Tracking).\n\n<H4>5.9.3. Rationale</H4>\n\n<P>Versioning in the context of the world-wide web offers a variety of\nbenefits:\n\n<P>It provides infrastructure for efficient and controlled management of \nlarge evolving web sites. Modern configuration management systems are \nbuilt on some form of repository that can track the revision history of\nindividual resources, and provide the higher-level tools to manage \nthose saved versions. Basic versioning capabilities are required to \nsupport such systems.\n\n<P>It allows parallel development and update of single resources. Since \nversioning systems register change by creating new objects, they\nenable simultaneous write access by allowing the creation of variant\nversions. Many also provide merge support to ease the reverse operation.\n\n<P>It provides a framework for coordinating changes to resources. While \nspecifics vary, most systems provide some method of controlling or \ntracking access to enable collaborative resource development.\n\n<P>It allows browsing through past and alternative versions of a resource.\nFrequently the modification and authorship history of a resource is\ncritical information in itself.\n\n<P>It provides stable names that can support externally stored links for\nannotation and link-server support. Both annotation and link servers \nfrequently need to store stable references to portions of resources \nthat are not under their direct control. By providing stable states of \nresources, version control systems allow not only stable pointers into \nthose resources, but also well-defined methods to determine the \nrelationships of those states of a resource.\n\n<P>It allows explicit semantic representation of single resources with \nmultiple states. A versioning system directly represents the fact that \na resource has an explicit history, and a persistent identity across \nthe various states it has had during the course of that history.\n\n<H4>5.10. Security</H4>\n\n<P><B>5.10.1. Authentication.</B> The WebDAV specification should state how the \nWebDAV extensions interoperate with existing authentication schemes, \nand should make recommendations for using those schemes.\n\n<P><B>5.10.2. Access Control.</B> Access control requirements are TBD, and may\neventually be specified in a separate access control draft.\n\n<P><B>5.10.3. Interoperability with Security Protocols.</B> The WebDAV \nspecification should provide a minimal list of security protocols\nwhich any compliant server / client should support.  These protocols\nshould insure the authenticity of messages and the privacy and \nintegrity of messages in transit.\n\n<H4>5.11. Internationalization</H4>\n\n<P>Internationalization requirements are TBD.\n\n<H3>6. Acknowledgements</H3>\n\n<P>Our understanding of these issues has emerged as the result of much\nthoughtful discussion, email, and assistance by many people, who\ndeserve recognition for their effort.\n\n<UL>\n<LI>Dylan Barrell, Open Text, dbarrell@opentext.ch\n<LI>Barbara Bazemore, PC DOCS, barbarab@pcdocs.com\n<LI>Martin Cagan, Continuus Software, Marty_Cagan@continuus.com\n<LI>Steve Carter, Novell, srcarter@novell.com\n<LI>Dan Connolly, World Wide Web Consortium, connolly@w3.org\n<LI>Jim Cunningham, Netscape, jfc@netscape.com\n<LI>Ron Daniel Jr., Los Alamos National Laboratory, rdaniel@lanl.gov\n<LI>Mark Day, Lotus, Mark_Day@lotus.com\n<LI>Asad Faizi, Netscape, asad@netscape.com\n<LI>Ron Fein, Microsoft, ronfe@microsoft.com\n<LI>David Fiander, Mortice Kern Systems, davidf@mks.com\n<LI>Roy Fielding, U.C. Irvine, fielding@ics.uci.edu\n<LI>Mark Fisher, FisherM@exch1.indy.tce.com\n<LI>Yaron Y. Goland, Microsoft, yarong@microsoft.com\n<LI>Phill Hallam-Baker, MIT, hallam@ai.mit.edu\n<LI>Dennis Hamilton, Xerox PARC, hamilton@parc.xerox.com\n<LI>Andre van der Hoek, University of Colorado, Boulder,\nandre@bigtime.cs.colorado.edu\n<LI>Del Jensen, Novell, dcjensen@novell.com\n<LI>Gail Kaiser, Columbia University, kaiser@cs.columbia.edu\n<LI>Rohit Khare, World Wide Web Consortium, khare@w3.org\n<LI>Mike Little, Bellcore, little@bellcore.com\n<LI>Dave Long, America Online, dave@sb.aol.com\n<LI>Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org\n<LI>Ora Lassila, Nokia Research Center, ora.lassila@research.nokia.com\n<LI>Larry Masinter, Xerox PARC, masinter@parc.xerox.com\n<LI>Murray Maloney, SoftQuad, murray@sq.com\n<LI>Jim Miller, World Wide Web Consortium, jmiller@w3.org\n<LI>Keith Moore, University of Tennessee, Knoxville, moore@cs.utk.edu\n<LI>Jon Radoff, NovaLink, jradoff@novalink.com\n<LI>Alan Robertson, alanr@bell-labs.com\n<LI>Andrew Schulert, Microsoft, andyschu@microsoft.com\n<LI>Christopher Seiwald, Perforce Software, seiwald@perforce.com\n<LI>Einar Stefferud, stef@nma.com\n<LI>Richard Taylor, U.C. Irvine, taylor@ics.uci.edu\n<LI>Robert Thau, MIT, rst@ai.mit.edu\n<LI>Sankar Virdhagriswaran, sv@hunchuen.crystaliz.com\n<LI>Gregory J. Woodhouse, gjw@wnetc.com\n</UL>\n\n<H3>7. References</H3>\n\n<P>[1] T. Berners-Lee, D. Connolly, \"HyperText Markup Language\nSpecification - 2.0\", RFC 1866, MIT/LCS, November 1995.\n\n<P>[2] T. Berners-Lee, L. Masinter, M. McCahill. \"Uniform Resource\nLocators (URL)\", RFC 1738, CERN, Xerox PARC, University of Minnesota,\nDecember 1994.\n\n<P>[3] P. Feiler, \"Configuration Management Models in Commercial\nEnvironments\", Software Engineering Institute Technical Report\nCMU/SEI-91-TR-7, \n<http://www.sei.cmu.edu/products/publications/91.reports/91.tr.007.html>\n\n<P>[4] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and\nT. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2068,\nU.C. Irvine, DEC, MIT/LCS, January 1997.\n\n<P>[5] A. Haake, D. Hicks, \"VerSE: Towards Hypertext Versioning Styles\", \nProc. Hypertext'96, The Seventh ACM Conference on Hypertext, 1996,\npages 224-234.\n\n<H3>8. Authors' Addresses</H3>\n\n<PRE>Judith Slein\nXerox Corporation\n800 Phillips Road 128-29E\nWebster, NY 14580\n\nEMail: slein@wrc.xerox.com\n\nFabio Vitali\nDepartment of Computer Science\nUniversity of Bologna\nITALY\n\nEMail: fabio@cs.unibo.it\n\nE. James Whitehead, Jr.\nDepartment of Information and Computer Science\nUniversity of California\nIrvine, CA 92697-3425\n\nFax: 714-824-4056\nEMail: ejw@ics.uci.edu\n\nDavid G. Durand\nDepartment of Computer Science\nBoston University\nBoston, MA\n\nEMail: dgd@cs.bu.edu\n</PRE>\n<P>Expires November 30, 1997\n</BODY>\n</HTML>\n\n", "encoding": "ascii"}