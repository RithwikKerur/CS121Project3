{"url": "https://www.ics.uci.edu/~aburtsev/143A/hw/xv6-setup.html", "content": "<HTML>\n<HEAD>\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\">\n<TITLE>143A Principles of Operating Systems</TITLE>\n<LINK HREF=\"./css/main.css\" TYPE=\"text/css\" REL=\"stylesheet\">\n<META NAME=\"Description\" CONTENT=\"Home page of Anton Burtsev.\">\n<META NAME=\"Keywords\" CONTENT=\"Anton Burtsev, Burtsev, Anton, cs143A\">\n<SCRIPT SRC=\"./scripts/image_switcher.js\" LANGUAGE=\"JavaScript\"></SCRIPT>\n</HEAD>\n\n<BODY BGCOLOR=\"#FFFFFF\" LEFTMARGIN=\"0\" TOPMARGIN=\"0\" MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\">\n\t<TABLE  ID=\"text\" ALIGN=\"CENTER\" WIDTH=\"600\" BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"0\">\n\t<TR>\n\t\t<TD ALIGN=\"LEFT\" BGCOLOR=\"#FFFFFF\"><!-- top margin --> \n\t\t\t<IMG SRC=\"./images/spacer.gif\" WIDTH=\"100%\" HEIGHT=\"15\" ALT=\"\" BORDER=\"0\"/>\n\t\t</TD>\n\t</TR>\n\t<TR>\n\t<TD>\n\t\t<DIV ID=\"tech_nav\">\n\t\t\t<A HREF=\"../index.html\">Home</A>\n\t\t\t<IMG SRC=\"./images/spacer.gif\" WIDTH=\"100%\" HEIGHT=\"30\" ALT=\"\" BORDER=\"0\"/>\n\t\t</DIV>\n\t</TD>\n\t</TR>\t\n\t<TR>\n\t<TD COLSPAN=\"4\" ALIGN=\"LEFT\" BGCOLOR=\"#FFFFFF\">\n\n\n\t\t<P>\n\n\n<h1>Instructions for building xv6 on Openlab (circinus) servers</h1> \n\n<b>Note:</b> Up until summer 2018, Openlab machines were running 32bit operating\nsystems. In that environment it was very hard (lots of dependencies) to build\nthe Qemu emulator required to run the xv6 operating system. Therefore,\npreviously we relied on a Vagrant VM, i.e.  a full 64bit Linux distribution\nthat was running inside a hardware-assisted virtualization container (VT-x),\ninside which we built Qemu and ran xv6. However, as Openlab machines were\nupdated, it no longer makes sense to start another VM. Now we can simply build\nQemu on the circinus machines and run xv6 without Vagrant. The instructions\nbelow are now the recommend way to work with this class. \n\n<p> Xv6 is a real operating system kernel, and hence, it needs real hardware to\nboot.  Fortunately, today we can emulate hardware in software. Programs like\nQEMU can emulate functionality of the real physical CPU in software. I.e., QEMU\nimplements the normal CPU loop similar to the one we discussed in class:\nfetches an instruction pointed by the instruction pointer register (EIP),\ndecodes it, performs all permission and condition checks, computes the outcome,\nincrements EIP and continues to the next instruction. Like a real PC platform,\nQEMU emulates hardware boot protocol.  QEMU starts by loading the disk sector\nnumber 0 into the memory location 0x7c00 and jumping to it. Xv6 takes it from\nthere. At a high level, for xv6 it does not matter if it runs on the real\nhardware or under QEMU. Of course, emulation is slower than real hardware, but\nbesides that as long as QEMU implements the logic of the CPU correctly we do\nnot see any deviations from a real baremetal execution. Surprisingly, QEMU is\nreasonably fast, so you as a human barely notice the difference. </p>\n\n<h2>SSH into Openlab (circinus-XX)</h2>\n\n<p>\nWe will use circinus machines 1 through 48: <b>circinus-1.ics.uci.edu</b> to <b>circinus-48.ics.uci.edu</b>.\n</p>\n<p>\n\tBefore you begin, you need to select a circinus server for yourself.\n\tWe are following the following method to select a server just to provide some uniform distribution of \nstudents across different servers: \n\t<ul>\n\t\t<li>Find out your student ID <br>\n\t\t\t(Let's say: 66541280)\n\t\t</li>\n\t\t<li>Evaluate serverNumber = (studentIDNumber mod 47) + 1\n\t\t\t<br>Ex: 66541280 => 44\n\t\t</li>\n\t\t<li>Your server name is : <b>circinus-{serverNumber}.ics.uci.edu</b>\n\t\t\t<br>Ex: circinus-44.ics.uci.edu\n\t\t</li>\n\t</ul>\n<p>\n\nTo configure your xv6 environment, login to your server\n\n<pre> \n$ ssh UCInetID@circinus-XX.ics.uci.edu\n</pre>\n\n<b>Note: if a specific server is not available, just choose any circinus machine randomly.</b>\n\n\n<h3>Troubleshooting your Circinus ssh connection</h3>\n\nIf you get something like <pre>Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)</pre> \n\nmessage from ssh and\nyou're connecting from outside of campus, you need to need to either use\nAnyConnect VPN to tunnel in or setup an SSH keypair for passwordless login.\nOpenlab machines do not accept outside password login attempts.\n\n<h2>Clone and build Qemu</h2>\n\n<p> To run xv6 we need to compile and install a version of the QEMU emulator.\nDefault QEMU's debugging facilities, while powerful, are somewhat immature, so\nit is highly recommend you use a patched version of Qemu which is maintained by\nMIT instead of the stock version that may come with your distribution.\n\nFrom inside your home folder create a new directory for this class. I suggest\nyou start in your home folder (unless you know what you're doing this is a good\nway to go)\n<pre> \ncd ~\nmkdir cs143a\n</pre>\n\nChange into this new directory\n<pre>\ncd cs143a\n</pre>\n\nClone the MIT's qemu distribution into the qemu folder  \n\n<pre>git clone https://github.com/mit-pdos/6.828-qemu.git qemu </pre>\n\nChange into qemu folder and initialize another git submodule\n\n<pre>\ncd qemu \ngit submodule update --init pixman\n</pre>\n\nConfigure qemu with minimal settings and the prefix pointing to the install\nfolder \n\n<pre>./configure --disable-kvm --disable-werror --prefix=/home/&lt;YourUCInetID&gt;/cs143a/qemu-install --target-list=\"i386-softmmu x86_64-softmmu\"</pre>\n\nFor example, for me this becomes: \n<pre>./configure --disable-kvm --disable-werror --prefix=/home/aburtsev/cs143a/qemu-install --target-list=\"i386-softmmu x86_64-softmmu\"</pre>\n\nMake and install qemu (this will take some time)\n\n<pre>\nmake -j 8\nmake install\n</pre>\n\nTo make qemu accessible from other programs add it to your path. You can either add it every time you log in to the circinus machine by exporting the PATH variable, or you can add this line to .bash_profile file in your home folder. \n\n<pre>\nexport PATH=$PATH:$HOME/cs143a/qemu-install/bin\n</pre>\n\nIf you decide to add the PATH permanently to your .bash_profile the line should look \nsomething like\n\n<pre>export PATH=$HOME/cs143a/qemu-install/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/usr/X11R6/bin:$HOME/bin:$PATH</pre>\n\n\n<h2>Clone, build, and boot xv6</h2>\n\nChange back into the <tt>cs143a</tt> folder and clone xv6 repository. \n\n<pre>cd ~/cs143a\ngit clone git://github.com/mit-pdos/xv6-public.git\nCloning into xv6...\n...\n</pre>\n\nBuild xv6 (you only will see a bunch of output from the make command that\ninvokes the gcc compiler on all kernel files, links the kernel with ld, creates\nthe kernel file system with all user-level programs that will be available\ninside xv6, and so on): \n\n<pre>$ cd xv6-public \n$ make </pre>\n\n<p> You're now ready to run xv6.\n\n<pre>\n$ make qemu-nox ...  </pre>\n\n<p>You are now running xv6 on top a hardware platform that is emulated by the\nQemu emulator. You are now done with the xv6 setup and can continue moving to any homeworks that are currently assigned. \n\n\n<p>You can find more information about QEMU monitor and GDB\ndebugger <a\nhref=\"https://pdos.csail.mit.edu/6.828/2018/labguide.html\">here</a>, feel free\nto explore them.  </p>\n\n\n<h3>Troubleshooting your Circinus ssh connection</h3>\n\nIf you get something like <pre> Permission denied\n(publickey,gssapi-keyex,gssapi-with-mic,password) </pre> message from ssh and\nyou're connecting from outside of campus, you need to need to either use\nAnyConnect VPN to tunnel in or setup an SSH keypair for passwordless login.\nOpenlab machines do not accept outside password login attempts.\n\n<h1>Alternative ways to install xv6 if you feel like it (not required for this class)</h1>\n\n<h2>Xv6 on your own Linux system</h2>\n\nWhile we provide instructions for how to use Circinus machines, you are more than welcome \nto configure and run xv6 on your own laptop, desktop, or VM.  \nIf you decide to use your own environment, see the instructions on the <a\nhref=\"https://pdos.csail.mit.edu/6.828/2018/tools.html\">xv6 tools</a> page for\nhow to set up xv6.  I've successfully built xv6 on my Ubuntu 14.04 LTS and later on \nUbuntu 16.04 and 18.04 LTS. I had to install the following packages in order to build QEMU: libz-dev,\nlibtool-bin, libtool, libglib2.0-dev, libpixman-1-dev, libfdt-dev. \n\n\n<h2>XV6 in Docker</h2>\n\n\n<p>In case you want to use run xv6 on your own machine using docker containers, you can try it out as well. \nI have successfully built XV6 using the <b>grantbot/xv6</b> image hosted in the docker <a href=\"https://hub.docker.com/r/grantbot/xv6/\">hub</a><p>\n<p>In my localmachine, I downloaded the XV6 source code as follows : </p>\n<pre>\nlocalhost$ mkdir XV6_Dev\nlocalhost$ cd XV6_Dev\nlocalhost$ git clone git://github.com/mit-pdos/xv6-public.git\nCloning into xv6...\n...\n</pre>\n<p>Next, you will need to setup Docker, if you don't have it already on your machine. I followed the instructions from\n\t<a href=\"https://docs.docker.com/docker-for-mac/\">here.</a>\n\tYou will find similar instructions for other OS as well in the docker website. Once you have the setup ready, download the\n\t<b>grantbot/xv6</b> image using\n<pre>\ndocker pull grantbot/xv6\n</pre>\n<br>\t\nThen you can start the container using\n<pre>\ndocker run -v '/{Path to local XV6 folder}/XV6_Dev':/home/a/XV6_Dev/ -i -t grantbot/xv6\n</pre>\nOnce you have the bash prompt you can type the following to start XV6,\n<pre>\ncd ~/XV6_Dev/\nmake qemu-nox\n</pre>\n</p>\n\n\n</div>\n\n\t</TD>\t\t\t\n\t</TR>\n\t<TR>\n\t\t<TD ALIGN=\"LEFT\" BGCOLOR=\"#FFFFFF\"><!-- top margin --> \n\t\t\t<IMG SRC=\"./images/spacer.gif\" WIDTH=\"100%\" HEIGHT=\"15\" ALT=\"\" BORDER=\"0\"/>\n\t\t</TD>\n\t</TR>\n\t<TR>\n\t<TD COLSPAN=\"4\">\n\t\t<DIV ID=\"tech\">Updated: September, 2019</DIV>\n\t</TD>\n\t</TR>\n\t</TABLE>\n</BODY>\n</HTML>\n\n\n", "encoding": "ascii"}