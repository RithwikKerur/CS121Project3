{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node141.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Token I/O</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Token I/O\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html3945 HREF=\"node142.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html3943 HREF=\"node139.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html3937 HREF=\"node140.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html3947 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html3946 HREF=\"node142.html\"> Term I/O</A>\r\n<B>Up:</B> <A NAME=tex2html3944 HREF=\"node139.html\"> Communication with Streams</A>\r\n<B> Previous:</B> <A NAME=tex2html3938 HREF=\"node140.html\"> Character I/O</A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION001142000000000000000> Token I/O</A></H2>\r\n<P>\r\nThe predicate <blockquote> <PRE>read_token(Token, Class)\r\n</PRE></blockquote> represents the second\r\n<A NAME=2143>&#160;</A>\r\nway of interpreting stream contents.\r\nIt reads the next token from the current\r\ninput stream, unifies it with <i> Token</i>,\r\nand its token class is unified with <i> Class</i>.\r\nA token is either a sequence of characters with the same or compatible\r\ncharacter class, e.g. ab_1A, then it is a Prolog constant\r\nor variable, or a single character, e.g. ')'.\r\nThe token class represents the type of the token and\r\nits special meaning, e.g. <tt> fullstop</tt>, <tt> comma</tt>, <tt> open_par</tt>, etc.\r\n<A NAME=2149>&#160;</A>\r\n<A NAME=2150>&#160;</A>\r\n<A NAME=2151>&#160;</A>\r\n<blockquote> <PRE>read_token(Stream, Token, Class)\r\n</PRE></blockquote>\r\nreads a token from the specified stream.\r\nA further, very flexible possibility to read a sequence of\r\ncharacters is provided by the built-ins\r\n<A NAME=2154>&#160;</A>\r\n<A NAME=2155>&#160;</A>\r\n<blockquote> <PRE>read_string(Stream, Delimiters, Length, String)\r\nread_string(Delimiters, Length, String)\r\n</PRE></blockquote>\r\nHere, the input is read up to a specified delimiter or up to a specified\r\nlength, and returned as an <A NAME=tex2html475 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  string.\r\n<P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}