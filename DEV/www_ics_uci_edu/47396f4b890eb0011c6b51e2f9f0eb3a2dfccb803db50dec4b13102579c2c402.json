{"url": "https://www.ics.uci.edu/~ejw/authoring/requirements/rfc2291.txt", "content": "\n\n\n\n\n\nNetwork Working Group                                          J. Slein\nRequest for Comments: 2291                            Xerox Corporation\nCategory: Informational                                       F. Vitali\n                                                  University of Bologna\n                                                           E. Whitehead\n                                                            U.C. Irvine\n                                                              D. Durand\n                                                      Boston University\n                                                          February 1998\n\n\n        Requirements for a Distributed Authoring and Versioning\n                    Protocol for the World Wide Web\n\nStatus of this Memo\n\n   This memo provides information for the Internet community.  It does\n   not specify an Internet standard of any kind.  Distribution of this\n   memo is unlimited.\n\nCopyright Notice\n\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n\nAbstract\n\n   Current World Wide Web (WWW or Web) standards provide simple support\n   for applications which allow remote editing of typed data. In\n   practice, the existing capabilities of the WWW have proven inadequate\n   to support efficient, scalable remote editing free of overwriting\n   conflicts. This document presents a list of features in the form of\n   requirements for a Web Distributed Authoring and Versioning protocol\n   which, if implemented, would improve the efficiency of common remote\n   editing operations, provide a locking mechanism to prevent overwrite\n   conflicts, improve link management support between non-HTML data\n   types, provide a simple attribute-value metadata facility, provide\n   for the creation and reading of container data types, and integrate\n   versioning into the WWW.\n\n1. Introduction\n\n   This document describes functionality which, if incorporated in an\n   extension to the existing HTTP proposed standard [HTTP], would allow\n   tools for remote loading, editing and saving (publishing) of various\n   media types on the WWW to interoperate with any compliant Web server.\n   As much as possible, this functionality is described without\n   suggesting a proposed implementation, since there are many ways to\n   perform the functionality within the WWW framework. It is also\n\n\n\nSlein, et. al.               Informational                      [Page 1]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   possible that a single mechanism could simultaneously satisfy several\n   requirements.\n\n   This document reflects the consensus of the WWW Distributed Authoring\n   and Versioning working group (WebDAV) as to the functionality that\n   should be standardized to support distributed authoring and\n   versioning on the Web.  As with any set of requirements, practical\n   considerations may make it impossible to satisfy them all.  It is the\n   intention of the WebDAV working group to come as close as possible to\n   satisfying them in the specifications that make up the WebDAV\n   protocol.\n\n2. Rationale\n\n   Current Web standards contain functionality which enables the editing\n   of Web content at a remote location, without direct access to the\n   storage media via an operating system. This capability is exploited\n   by several existing HTML distributed authoring tools, and by a\n   growing number of mainstream applications (e.g., word processors)\n   which allow users to write (publish) their work to an HTTP server. To\n   date, experience from the HTML authoring tools has shown they are\n   unable to meet their users' needs using the facilities of Web\n   standards. The consequence of this is either postponed introduction\n   of distributed authoring capability, or the addition of nonstandard\n   extensions to the HTTP protocol or other Web standards.  These\n   extensions, developed in isolation, are not interoperable.\n\n   Other authoring applications have wanted to access document\n   repositories or version control systems through Web gateways, and\n   have been similarly frustrated.  Where this access is available at\n   all, it is through nonstandard extensions to HTTP or other standards\n   that force clients to use a different interface for each vendor's\n   service.\n\n   This document describes requirements for a set of standard extensions\n   to HTTP that would allow distributed Web authoring tools to provide\n   the functionality their users need by means of the same standard\n   syntax across all compliant servers. The broad categories of\n   functionality that need to be standardized are:\n\n        Properties\n        Links\n        Locking\n        Reservations\n        Retrieval of Unprocessed Source\n        Partial Write\n        Name Space Manipulation\n        Collections\n\n\n\nSlein, et. al.               Informational                      [Page 2]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n        Versioning\n        Variants\n        Security\n        Internationalization\n\n3. Terminology\n\n   Where there is overlap, usage is intended to be consistent with that\n   in the HTTP 1.1 specification [HTTP].\n\n   Client\n        A program which issues HTTP requests and accepts responses.\n\n   Collection\n        A collection is a resource that contains other resources, either\n        directly or by reference.\n\n   Distributed Authoring Tool\n        A program which can retrieve a source entity via HTTP, allow\n        editing of this entity, and then save/publish this entity to a\n        server using HTTP.\n\n   Entity\n        The information transferred in a request or response.\n\n   Hierarchical Collection\n        A hierarchical organization of resources.  A hierarchical\n        collection is a resource that contains other resources,\n        including collections, either directly or by reference.\n\n   Link\n        A typed connection between two or more resources.\n\n   Lock\n        A mechanism for preventing anyone other than the owner of the\n        lock from accessing a resource.\n\n   Member of Version Graph\n        A resource that is a node in a version graph, and so is derived\n        from the resources that precede it in the graph, and is the\n        basis of those that succeed it.\n\n   Property\n        Named descriptive information about a resource.\n\n   Reservation\n        A declaration that one intends to edit a resource.\n\n\n\n\nSlein, et. al.               Informational                      [Page 3]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   Resource\n        A network data object or service that can be identified by a\n        URI.\n\n   Server\n        A program which receives and responds to HTTP requests.\n\n   User Agent\n        The client that initiates a request.\n\n   Variant\n        A representation of a resource.  A resource may have one or more\n        representations associated with it at any given time.\n\n   Version Graph\n        A directed acyclic graph with resources as its nodes, where each\n        node is derived from its predecessor(s).\n\n   Write Lock\n        A lock that prevents anyone except its owner from modifying the\n        resource it applies to.\n\n4. General Principles\n\n   This section describes a set of general principles that the WebDAV\n   extensions should follow.  These principles cut across categories of\n   functionality.\n\n4.1. User Agent Interoperability\n\n   All WebDAV clients should be able to work with any WebDAV-compliant\n   HTTP server. It is acceptable for some client/server combinations to\n   provide special features that are not universally available, but the\n   protocol should be sufficient that a basic level of functionality\n   will be universal.\n\n4.2. Client Simplicity\n\n   The WebDAV extensions should be designed to allow client\n   implementations to be simple.\n\n\n\n\n\n\n\n\n\n\n\nSlein, et. al.               Informational                      [Page 4]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n4.3. Legacy Client Support\n\n   It should be possible to implement a WebDAV-compliant server in such\n   a way that it can interoperate with non-WebDAV clients.  Such a\n   server would be able to understand any valid HTTP 1.1 request from an\n   ordinary Web client without WebDAV extensions, and to provide a valid\n   HTTP 1.1 response that does not require the client to understand the\n   extensions.\n\n4.4. Data Format Compatibility\n\n   WebDAV-compliant servers should be able to work with existing\n   resources and URIs [URL]. Special additional information should not\n   become a mandatory part of document formats.\n\n4.5. Replicated, Distributed Systems\n\n   Distribution and replication are at the heart of the Internet.  All\n   WebDAV extensions should be designed to allow for distribution and\n   replication.  Version trees should be able to be split across\n   multiple servers.  Collections may have members on different servers.\n   Any resource may be cached or replicated for mobile computing or\n   other reasons.  Consequently, the WebDAV extensions must be able to\n   operate in a distributed, replicated environment.\n\n4.6 Parsimony in Client-Server Interactions\n\n   The WebDAV extensions should keep to a minimum the number of\n   interactions between the client and the server needed to perform\n   common functions. For example, publishing a document to the Web will\n   often mean publishing content together with related properties.  A\n   client may often need to find out what version graph a particular\n   resource belongs to, or to find out which resource in a version graph\n   is the published one.  The extensions should make it possible to do\n   these things efficiently.\n\n4.7. Changes to HTTP\n\n   WebDAV adds a number of new types of objects to the Web: properties,\n   collections, version graphs, etc.  Existing HTTP methods such as\n   DELETE and PUT will have to operate in well-defined ways in this\n   expanded environment. WebDAV should explicitly address not only new\n   methods, headers, and MIME types, but also any required changes to\n   the existing HTTP methods and headers.\n\n\n\n\n\n\n\nSlein, et. al.               Informational                      [Page 5]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n4.8. Alternate Transport Mechanisms\n\n   It may be desirable to transport WebDAV requests and responses by\n   other mechanisms, particularly EMail, in addition to HTTP.  The\n   WebDAV protocol specification should not preclude a future body from\n   developing an interoperability specification for disconnected\n   operation via EMail.\n\n5. Requirements\n\n   In the requirement descriptions below, the requirement will be\n   stated, followed by its rationale.\n\n5.1. Properties\n\n5.1.1. Functional Requirements\n\n   It must be possible to create, modify, read and delete arbitrary\n   properties on resources of any media type.\n\n5.1.2. Rationale\n\n   Properties describe resources of any media type.  They may include\n   bibliographic information such as author, title, publisher, and\n   subject, constraints on usage, PICS ratings, etc. These properties\n   have many uses, such as supporting searches on property values,\n   enforcing copyrights, and the creation of catalog entries as\n   placeholders for objects which are not available in electronic form,\n   or which will be available later.\n\n5.2. Links\n\n5.2.1. Functional Requirements\n\n   It must be possible to create, modify, read and delete typed links\n   between resources of any media type.\n\n5.2.2. Rationale\n\n   One type of link between resources is the hypertext link, which is\n   browsable using a hypertext style point-and-click user interface.\n   Links, whether they are browsable hypertext links, or simply a means\n   of capturing a relationship between resources, have many purposes.\n   Links can support pushbutton printing of a multi-resource document in\n   a prescribed order, jumping to the access control page for a\n   resource, and quick browsing of related information, such as a table\n\n\n\n\n\nSlein, et. al.               Informational                      [Page 6]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   of contents, an index, a glossary, a bibliographic record, help\n   pages, etc. While link support is provided by the HTML \"LINK\"\n   element, this is limited only to HTML resources [HTML]. Similar\n   support is needed for bitmap image types, and other non-HTML media\n   types.\n\n5.3. Locking\n\n5.3.1. General Principles\n\n   5.3.1.1. Independence of locks. It must be possible to lock a\n   resource without performing an additional retrieval of the resource,\n   and without committing to editing the resource.\n\n   5.3.1.2. Multi-Resource Locking. It must be possible to take out a\n   lock on multiple resources residing on the same server in a single\n   action, and this locking operation must be atomic across these\n   resources.\n\n5.3.2. Functional Requirements\n\n   5.3.2.1. Write Locks. It must be possible to restrict modification of\n   a resource to a specific person.\n\n   5.3.2.2. Lock Query. It must be possible to find out whether a given\n   resource has any active locks, and if so, who holds those locks.\n\n   5.3.2.3. Unlock. It must be possible to remove a lock.\n\n5.3.3. Rationale\n\n   At present, the Web provides limited support for preventing two or\n   more people from overwriting each other's modifications when they\n   save to a given URI. Furthermore, there is no way to discover whether\n   someone else is currently making modifications to a resource. This is\n   known as the \"lost update problem,\" or the \"overwrite problem.\" Since\n   there can be significant cost associated with discovering and\n   repairing lost modifications, preventing this problem is crucial for\n   supporting distributed authoring. A write lock ensures that only one\n   person may modify a resource, preventing overwrites. Furthermore,\n   locking support is a key component of many versioning schemes, a\n   desirable capability for distributed authoring.\n\n   An author may wish to lock an entire web of resources even though he\n   is editing just a single resource, to keep the other resources from\n   changing. In this way, an author can ensure that if a local hypertext\n   web is consistent in his distributed authoring tool, it will then be\n\n\n\n\nSlein, et. al.               Informational                      [Page 7]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   consistent when he writes it to the server. Because of this, it\n   should be possible to take out a lock without also causing\n   transmission of the contents of a resource.\n\n   It is often necessary to guarantee that a lock or unlock operation\n   occurs at the same time across multiple resources, a feature which is\n   supported by the multiple-resource locking requirement. This is\n   useful for preventing a collision between two people trying to\n   establish locks on the same set of resources, since with multi-\n   resource locking, one of the two people will get a lock. If this same\n   multiple-resource locking scenario was repeated by using atomic lock\n   operations iterated across the resources, the result would be a\n   splitting of the locks between the two people, based on resource\n   ordering and race conditions.\n\n5.4. Reservations\n\n5.4.1. Functional Requirements\n\n   5.4.1.1. Reserve. It must be possible for a principal to register\n   with the server an intent to edit a given resource, so that other\n   principals can discover who intends to edit the resource.\n\n   5.4.1.2. Reservation Query. It must be possible to find out whether a\n   given resource has any active reservations, and if so, who currently\n   holds reservations.\n\n   5.4.1.3. Release Reservation.  It must be possible to release the\n   reservation.\n\n5.4.2. Rationale\n\n   Experience from configuration management systems has shown that\n   people need to know when they are about to enter a parallel editing\n   situation. Once notified, they either decide not to edit in parallel\n   with the other authors, or they use out-of-band communication (face-\n   to-face, telephone, etc.) to coordinate their editing to minimize the\n   difficulty of merging their results. Reservations are separate from\n   locking, since a write lock does not necessarily imply a resource\n   will be edited, and a reservation does not carry with it any access\n   restrictions. This capability supports versioning, since a check-out\n   typically involves taking out a write lock, making a reservation, and\n   getting the resource to be edited.\n\n\n\n\n\n\n\n\nSlein, et. al.               Informational                      [Page 8]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n5.5. Retrieval of Unprocessed Source for Editing\n\n5.5.1. Functional Requirement\n\n   The source of any given resource must be retrievable by any principal\n   with authorization to edit the resource.\n\n5.5.2. Rationale\n\n   There are many cases where the source stored on a server does not\n   correspond to the actual entity transmitted in response to an HTTP\n   GET. Current known cases are server side include directives, and\n   Standard Generalized Markup Language (SGML) source which is converted\n   on the fly to HyperText Markup Language (HTML) [HTML] output\n   entities. There are many possible cases, such as automatic conversion\n   of bitmap images into several variant bitmap media types (e.g. GIF,\n   JPEG), and automatic conversion of an application's native media type\n   into HTML. As an example of this last case, a word processor could\n   store its native media type on a server which automatically converts\n   it to HTML. A GET of this resource would retrieve the HTML.\n   Retrieving the source would retrieve the word processor native\n   format.\n\n5.6. Partial Write.\n\n5.6.1. Functional Requirement\n\n   After editing a resource, it must be possible to write only the\n   changes to the resource, rather than retransmitting the entire\n   resource.\n\n5.6.2. Rationale\n\n   During distributed editing which occurs over wide geographic\n   separations and/or over low bandwidth connections, it is extremely\n   inefficient and frustrating to rewrite a large resource after minor\n   changes, such as a one-character spelling correction. Support is\n   needed for transmitting \"insert\" (e.g., add this sentence in the\n   middle of a document) and \"delete\" (e.g. remove this paragraph from\n   the middle of a document) style updates. Support for partial resource\n   updates will make small edits more efficient, and allow distributed\n   authoring tools to scale up for editing large documents.\n\n\n\n\n\n\n\n\n\nSlein, et. al.               Informational                      [Page 9]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n5.7. Name Space Manipulation\n\n5.7.1. Copy\n\n5.7.1.1. Functional Requirements\n\n   It must be possible to duplicate a resource without a client loading,\n   then resaving the resource. After the copy operation, a modification\n   to either resource must not cause a modification to the other.\n\n5.7.1.2. Rationale\n\n   There are many reasons why a resource might need to be duplicated,\n   such as changing ownership, preparing for major modifications, or\n   making a backup. Due to network costs associated with loading and\n   saving a resource, it is far preferable to have a server perform a\n   resource copy than a client.\n\n5.7.2. Move/Rename\n\n5.7.2.1. Functional Requirements\n\n   It must be possible to change the location of a resource without a\n   client loading, then resaving the resource under a different name.\n   After the move operation, it must no longer be possible to access the\n   resource at its original location.\n\n5.7.2.2. Rationale\n\n   It is often necessary to change the name of a resource, for example\n   due to adoption of a new naming convention, or if a typing error was\n   made entering the name originally. Due to network costs, it is\n   undesirable to perform this operation by loading, then resaving the\n   resource, followed by a delete of the old resource. Similarly, a\n   single rename operation is more efficient than a copy followed by a\n   delete operation.  Note that moving a resource is considered the same\n   function as renaming a resource.\n\n5.8. Collections\n\n   A collection is a resource that is a container for other resources,\n   including other collections.  A resource may belong to a collection\n   either directly or by reference.  If a resource belongs to a\n   collection directly, name space operations like copy, move, and\n   delete applied to the collection also apply to the resource.  If a\n   resource belongs to a collection by reference, name space operations\n   applied to the collection affect only the reference, not the resource\n   itself.\n\n\n\nSlein, et. al.               Informational                     [Page 10]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n5.8.1. Functional Requirements\n\n   5.8.1.1. List Collection. A listing of all resources in a specific\n   collection must be accessible.\n\n   5.8.1.2. Make Collection. It must be possible to create a new\n   collection.\n\n   5.8.1.3. Add to Collection.  It must be possible to add a resource to\n   a collection directly or by reference.\n\n   5.8.1.4. Remove from Collection.  It must be possible to remove a\n   resource from a collection.\n\n5.8.2. Rationale\n\n   In [URL] it states that, \"some URL schemes (such as the ftp, http,\n   and file schemes) contain names that can be considered hierarchical.\"\n   Especially for HTTP servers which directly map all or part of their\n   URL name space into a filesystem, it is very useful to get a listing\n   of all resources located at a particular hierarchy level. This\n   functionality supports \"Save As...\" dialog boxes, which provide a\n   listing of the entities at a current hierarchy level, and allow\n   navigation through the hierarchy. It also supports the creation of\n   graphical visualizations (typically as a network) of the hypertext\n   structure among the entities at a hierarchy level, or set of levels.\n   It also supports a tree visualization of the entities and their\n   hierarchy levels.\n\n   In addition, document management systems may want to make their\n   documents accessible through the Web.  They typically allow the\n   organization of documents into collections, and so also want their\n   users to be able to view the collection hierarchy through the Web.\n\n   There are many instances where there is not a strong correlation\n   between a URL hierarchy level and the notion of a collection. One\n   example is a server in which the URL hierarchy level maps to a\n   computational process which performs some resolution on the name. In\n   this case, the contents of the URL hierarchy level can vary depending\n   on the input to the computation, and the number of resources\n   accessible via the computation can be very large. It does not make\n   sense to implement a directory feature for such a name space.\n   However, the utility of listing the contents of those URL hierarchy\n   levels which do correspond to collections, such as the large number\n   of HTTP servers which map their name space to a filesystem, argue for\n   the inclusion of this capability, despite not being meaningful in all\n\n\n\n\n\nSlein, et. al.               Informational                     [Page 11]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   cases. If listing the contents of a URL hierarchy level does not\n   makes sense for a particular URL, then a \"405 Method Not Allowed\"\n   status code could be issued.\n\n   The ability to create collections to hold related resources supports\n   management of a name space by packaging its members into small,\n   related clusters. The utility of this capability is demonstrated by\n   the broad implementation of directories in recent operating systems.\n   The ability to create a collection also supports the creation of\n   \"Save As...\" dialog boxes with \"New Level/Folder/Directory\"\n   capability, common in many applications.\n\n5.9. Versioning\n\n5.9.1. Background and General Principles\n\n   5.9.1.1. Stability of versions. Most versioning systems are intended\n   to provide an accurate record of the history of evolution of a\n   document. This accuracy is ensured by the fact that a version\n   eventually becomes \"frozen\" and immutable. Once a version is frozen,\n   further changes will create new versions rather than modifying the\n   original. In order for caching and persistent references to be\n   properly maintained, a client must be able to determine that a\n   version has been frozen. Any successful attempt to retrieve a frozen\n   version of a resource will always retrieve exactly the same content,\n   or return an error if that version (or the resource itself) is no\n   longer available.\n\n   5.9.1.2. Operations for Creating New Versions.  Version management\n   systems vary greatly in the operations they require, the order of the\n   operations, and how they are combined into atomic functions.  In the\n   most complete cases, the logical operations involved are:\n\n        o Reserve existing version\n        o Lock existing version\n        o Retrieve existing version\n        o Request or suggest identifier for new version\n        o Write new version\n        o Release lock\n        o Release reservation\n\n   With the exception of requesting a new version identifier, all of\n   these operations have applications outside of versioning and are\n   either already part of HTTP or are discussed in earlier sections of\n   these requirements. Typically, versioning systems combine\n   reservation, locking, and retrieval -- or some subset of these --\n   into an atomic checkout function.  They combine writing, releasing\n\n\n\n\nSlein, et. al.               Informational                     [Page 12]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   the lock, and releasing the reservation -- or some subset of these --\n   into an atomic checkin function.  The new version identifier may be\n   assigned either at checkout or at checkin.\n\n   The WebDAV extensions must find some balance between allowing\n   versioning servers to adopt whatever policies they wish with regard\n   to these operations and enforcing enough uniformity to keep client\n   implementations simple.\n\n   5.9.1.3. The Versioning Model.  Each version typically stands in a\n   \"derived from\" relationship to its predecessor(s).  It is possible to\n   derive several different versions from a single version (branching),\n   and to derive a single version from several versions (merging).\n   Consequently, the collection of related versions forms a directed\n   acyclic graph.  In the following discussion, this graph will be\n   called a \"version graph\".  Each node of this graph is a \"version\" or\n   \"member of the version graph\".  The arcs of the graph capture the\n   \"derived from\" relationships.\n\n   It is also possible for a single resource to participate in multiple\n   version graphs.\n\n   The WebDAV extensions should support this versioning model, though\n   particular servers may restrict it in various ways.\n\n   5.9.1.4. Versioning Policies. Many writers, including Feiler [CM] and\n   Haake and Hicks [VSE], have discussed the notion of versioning styles\n   (referred to here as versioning policies, to reflect the nature of\n   client/server interaction) as one way to think about the different\n   policies that versioning systems implement. Versioning policies\n   include decisions on the shape of version histories (linear or\n   branched), the granularity of change tracking, locking requirements\n   made by a server, etc. The protocol should clearly identify the\n   policies that it dictates and the policies that are left up to\n   versioning system implementors or administrators.\n\n   5.9.1.5. It is possible to version resources of any media type.\n\n5.9.2. Functional Requirements\n\n   5.9.2.1. Referring to a version graph. There must be a way to refer\n   to a version graph as a whole.\n\n   Some queries and operations apply, not to any one member of a version\n   graph, but to the version graph as a whole.  For example, a client\n   may request that an entire graph be moved, or may ask for a version\n   history. In these cases, a way to refer to the whole version graph is\n   required.\n\n\n\nSlein, et. al.               Informational                     [Page 13]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   5.9.2.2. Referring to a specific member of a version graph. There\n   must be a way to refer to each member of a version graph. This means\n   that each member of the graph is itself a resource.\n\n   Each member of a version graph must be a resource if it is to be\n   possible for a hypertext link to refer to specific version of a page,\n   or for a client to request a specific version of a document for\n   editing.\n\n   5.9.2.3. A client must be able to determine whether a resource is a\n   version graph, or whether a resource is itself a member of a version\n   graph.\n\n   A resource may be a simple, non-versioned resource, or it may be a\n   version graph, or it may be a member of a version graph.  A client\n   needs to be able to tell which sort of resource it is accessing.\n\n   5.9.2.4. There must be a way to refer to a server-defined default\n   member of a version graph.\n\n   The server should return a default version of a resource for requests\n   that ask for the default version, as well as for requests where no\n   specific version information is provided. This is one of the simplest\n   ways to guarantee non-versioning client compatibility. This does not\n   rule out the possibility of a server returning an error when no\n   sensible default exists.\n\n   It may also be desirable to be able to refer to other special members\n   of a version graph. For example, there may be a current version for\n   editing that is different from the default version.  For a graph with\n   several branches, it may be useful to be able to request the tip\n   version of any branch.\n\n   5.9.2.5. It must be possible, given a reference to a member of a\n   version graph, to find out which version graph(s) that resource\n   belongs to.\n\n   This makes it possible to understand the versioning context of the\n   resource. It makes it possible to retrieve a version history for the\n   graphs to which it belongs, and to browse the version graph. It also\n   supports some comparison operations: It makes it possible to\n   determine whether two references designate members of the same\n   version graph.\n\n   5.9.2.6. Navigation of a version graph.  Given a reference to a\n   member of a version graph, it must be possible to discover and access\n   the following related members of the version graph.\n\n\n\n\nSlein, et. al.               Informational                     [Page 14]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n        o root member of the graph\n        o predecessor member(s)\n        o successor member(s)\n        o default member of the graph\n\n   It must be possible in some way for a versioning client to access\n   versions related to a resource currently being examined.\n\n   5.9.2.7. Version Topology. There must be a way to retrieve the\n   complete version topology for a version graph, including information\n   about all members of the version graph. The format for this\n   information must be standardized so that the basic information can be\n   used by all clients. Other specialized formats should be\n   accommodated, for servers and clients that require information that\n   cannot be included in the standard topology.\n\n   5.9.2.8. A client must be able to propose a version identifier to be\n   used for a new member of a version graph. The server may refuse to\n   use the client's suggested version identifier.  The server should\n   tell the client what version identifier it has assigned to the new\n   member of the version graph.\n\n   5.9.2.9. A version identifier must be unique across a version graph.\n\n   5.9.2.10. A client must be able to supply version-specific properties\n   to be associated with a new member of a version graph. (See Section\n   5.1 \"Properties\" above.) At a minimum, it must be possible to\n   associate comments with the new member, explaining what changes were\n   made.\n\n   5.9.2.11. A client must be able to query the server for information\n   about a version tree, including which versions are locked, which are\n   reserved for editing, and by whom (Session Tracking).\n\n5.9.3. Rationale\n\n   Versioning in the context of the world-wide web offers a variety of\n   benefits:\n\n   It provides infrastructure for efficient and controlled management of\n   large evolving web sites. Modern configuration management systems are\n   built on some form of repository that can track the revision history\n   of individual resources, and provide the higher-level tools to manage\n   those saved versions. Basic versioning capabilities are required to\n   support such systems.\n\n\n\n\n\n\nSlein, et. al.               Informational                     [Page 15]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   It allows parallel development and update of single resources. Since\n   versioning systems register change by creating new objects, they\n   enable simultaneous write access by allowing the creation of variant\n   versions. Many also provide merge support to ease the reverse\n   operation.\n\n   It provides a framework for coordinating changes to resources. While\n   specifics vary, most systems provide some method of controlling or\n   tracking access to enable collaborative resource development.\n\n   It allows browsing through past and alternative versions of a\n   resource.  Frequently the modification and authorship history of a\n   resource is critical information in itself.\n\n   It provides stable names that can support externally stored links for\n   annotation and link-server support. Both annotation and link servers\n   frequently need to store stable references to portions of resources\n   that are not under their direct control. By providing stable states\n   of resources, version control systems allow not only stable pointers\n   into those resources, but also well-defined methods to determine the\n   relationships of those states of a resource.\n\n   It allows explicit semantic representation of single resources with\n   multiple states. A versioning system directly represents the fact\n   that a resource has an explicit history, and a persistent identity\n   across the various states it has had during the course of that\n   history.\n\n5.10. Variants\n\n   Detailed requirements for variants will be developed in a separate\n   document.\n\n5.10.1. Functional Requirements\n\n   It must be possible to send variants to the server, describing the\n   relationships between the variants and their parent resource.  In\n   addition, it must be possible to write and retrieve variants of\n   property labels, property descriptions, and property values.\n\n5.10.2. Rationale\n\n   The HTTP working group is addressing problems of content negotiation\n   and retrieval of variants of a resource.  To extend this work to an\n   authoring environment, WEBDAV must standardize mechanisms for authors\n   to use when submitting variants to a server.  Authors need to be able\n   to provide variants in different file or document formats, for\n   different uses. They need to provide variants optimized for different\n\n\n\nSlein, et. al.               Informational                     [Page 16]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   clients and for different output devices.  They need to be able to\n   provide variants in different languages in the international\n   environment of the Web.  In support of internationalization\n   requirements (See 5.12 below), variants need to be supported not just\n   for the content of resources, but for any information intended for\n   human use, such as property values, labels, and descriptions.\n\n5.11. Security\n\n   5.11.1. Authentication. The WebDAV specification should state how the\n   WebDAV extensions interoperate with existing authentication schemes,\n   and should make recommendations for using those schemes.\n\n   5.11.2. Access Control. Access control requirements are specified in\n   a separate access control work in progress [AC].\n\n   5.11.3. Interoperability with Security Protocols. The WebDAV\n   specification must provide a minimal list of security protocols which\n   any compliant server / client must support.  These protocols should\n   insure the authenticity of messages and the privacy and integrity of\n   messages in transit.\n\n5.12. Internationalization\n\n5.12.1. Character Sets and Languages\n\n   Since Web distributed authoring occurs in a multi-lingual\n   environment, information intended for user comprehension must conform\n   to the IETF Character Set Policy [CHAR].  This policy addresses\n   character sets and encodings, and language tagging.\n\n5.12.2. Rationale\n\n   In the international environment of the Internet, it is important to\n   insure that any information intended for user comprehension can be\n   displayed in a writing system and language agreeable to both the\n   client and the server. The information encompassed by this\n   requirement includes not only the content of resources, but also such\n   things as display names and descriptions of properties, property\n   values, and status messages.\n\n6. Acknowledgements\n\n   Our understanding of these issues has emerged as the result of much\n   thoughtful discussion, email, and assistance by many people, who\n   deserve recognition for their effort.\n\n\n\n\n\nSlein, et. al.               Informational                     [Page 17]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n   Terry Allen, tallen@sonic.net\n   Alan Babich, FileNet, babich@filenet.com\n   Dylan Barrell, Open Text, dbarrell@opentext.ch\n   Barbara Bazemore, PC DOCS, barbarab@pcdocs.com\n   Martin Cagan, Continuus Software, Marty_Cagan@continuus.com\n   Steve Carter, Novell, srcarter@novell.com\n   Dan Connolly, World Wide Web Consortium, connolly@w3.org\n   Jim Cunningham, Netscape, jfc@netscape.com\n   Ron Daniel Jr., Los Alamos National Laboratory, rdaniel@lanl.gov\n   Mark Day, Lotus, Mark_Day@lotus.com\n   Martin J. Duerst, mduerst@ifi.unizh.ch\n   Asad Faizi, Netscape, asad@netscape.com\n   Ron Fein, Microsoft, ronfe@microsoft.com\n   David Fiander, Mortice Kern Systems, davidf@mks.com\n   Roy Fielding, U.C. Irvine, fielding@ics.uci.edu\n   Mark Fisher, Thomson Consumer Electronics, FisherM@indy.tce.com\n   Yaron Y. Goland, Microsoft, yarong@microsoft.com\n   Phill Hallam-Baker, MIT, hallam@ai.mit.edu\n   Dennis Hamilton, Xerox PARC, hamilton@parc.xerox.com\n   Andre van der Hoek, University of Colorado, Boulder,\n     andre@cs.colorado.edu\n   Del Jensen, Novell, dcjensen@novell.com\n   Gail Kaiser, Columbia University, kaiser@cs.columbia.edu\n   Rohit Khare, World Wide Web Consortium, khare@w3.org\n   Ora Lassila, Nokia Research Center, ora.lassila@research.nokia.com\n   Ben Laurie, A.L. Digital, ben@algroup.co.uk\n   Mike Little, Bellcore, little@bellcore.com\n   Dave Long, America Online, dave@sb.aol.com\n   Larry Masinter, Xerox PARC, masinter@parc.xerox.com\n   Murray Maloney, SoftQuad, murray@sq.com\n   Jim Miller, World Wide Web Consortium, jmiller@w3.org\n   Howard S. Modell, Boeing, howard.s.modell@boeing.com\n   Keith Moore, University of Tennessee, Knoxville, moore@cs.utk.edu\n   Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org\n   Jon Radoff, NovaLink, jradoff@novalink.com\n   Alan Robertson, alanr@bell-labs.com\n   Henry Sanders, Microsoft,\n   Andrew Schulert, Microsoft, andyschu@microsoft.com\n   Christopher Seiwald, Perforce Software, seiwald@perforce.com\n   Einar Stefferud, stef@nma.com\n   Richard Taylor, U.C. Irvine, taylor@ics.uci.edu\n   Robert Thau, MIT, rst@ai.mit.edu\n   Sankar Virdhagriswaran, sv@hunchuen.crystaliz.com\n   Dan Whelan, FileNet, dan@FILENET.COM\n   Gregory J. Woodhouse, gjw@wnetc.com\n\n\n\n\n\n\nSlein, et. al.               Informational                     [Page 18]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n7. References\n\n   [AC] J. Radoff, \"Requirements for Access Control within Distributed\n   Authoring and Versioning Environments on the World Wide Web\",\n   unpublished manuscript, <http://lists.w3.org/Archives/Public/w3c-\n   dist-auth/1997AprJun/0183.html>\n\n   [CHAR] Alvestrand, H., \"IETF Policy on Character Sets and Languages\",\n   RFC 2277, January 1998.\n\n   [CM] P. Feiler, \"Configuration Management Models in Commercial\n   Environments\", Software Engineering Institute Technical Report\n   CMU/SEI-91-TR-7,\n   <http://www.sei.cmu.edu/products/publications/91.reports/91.tr.007.html>\n\n   [HTML] Berners-Lee, T., and  D. Connolly, \"HyperText Markup Language\n   Specification - 2.0\", RFC 1866, November 1995.\n\n   [HTTP] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., and T.\n   Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2068,\n   January 1997.\n\n   [ISO 10646] ISO/IEC 10646-1:1993. \"International Standard --\n   Information Technology -- Universal Multiple-Octet Coded Character\n   Set (UCS) -- Part 1: Architecture and Basic Multilingual Plane.\"\n\n   [URL] Berners-Lee, T., Masinter, L., and M. McCahill. \"Uniform\n   Resource Locators (URL)\", RFC 1738, December 1994.\n\n   [VSE] A. Haake, D. Hicks, \"VerSE: Towards Hypertext Versioning\n   Styles\", Proc. Hypertext'96, The Seventh ACM Conference on Hypertext,\n   1996, pages 224-234.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlein, et. al.               Informational                     [Page 19]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n8. Authors' Addresses\n\n   Judith Slein\n   Xerox Corporation\n   800 Phillips Road 128-29E\n   Webster, NY 14580\n\n   EMail: slein@wrc.xerox.com\n\n\n   Fabio Vitali\n   Department of Computer Science\n   University of Bologna\n   ITALY\n\n   EMail: fabio@cs.unibo.it\n\n\n   E. James Whitehead, Jr.\n   Department of Information and Computer Science\n   University of California\n   Irvine, CA 92697-3425\n\n   Fax: 714-824-4056\n   EMail: ejw@ics.uci.edu\n\n\n   David G. Durand\n   Department of Computer Science\n   Boston University\n   Boston, MA\n\n   EMail: dgd@cs.bu.edu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlein, et. al.               Informational                     [Page 20]\n\f\nRFC 2291          Distributed Authoring and Versioning     February 1998\n\n\n9.  Full Copyright Statement\n\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n\n   This document and translations of it may be copied and furnished to\n   others, and derivative works that comment on or otherwise explain it\n   or assist in its implementation may be prepared, copied, published\n   and distributed, in whole or in part, without restriction of any\n   kind, provided that the above copyright notice and this paragraph are\n   included on all such copies and derivative works.  However, this\n   document itself may not be modified in any way, such as by removing\n   the copyright notice or references to the Internet Society or other\n   Internet organizations, except as needed for the purpose of\n   developing Internet standards in which case the procedures for\n   copyrights defined in the Internet Standards process must be\n   followed, or as required to translate it into languages other than\n   English.\n\n   The limited permissions granted above are perpetual and will not be\n   revoked by the Internet Society or its successors or assigns.\n\n   This document and the information contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlein, et. al.               Informational                     [Page 21]\n\f\n", "encoding": "ascii"}