{"url": "https://www.ics.uci.edu/~ejw/authoring/scenarios/draft-ietf-webdav-scenarios-00.txt", "content": "\n\nWEBDAV Working Group                           Ora Lassila\nINTERNET-DRAFT                                 Nokia Research Center\n<draft-ietf-webdav-scenarios-00.txt>           May 1997\n\nExpires November, 1997\n\n\n         HTTP-based Distributed Content Editing Scenarios\n\n\nStatus of this Document\n\nThis document is an Internet-Draft.  Internet-Drafts are working\ndocuments of the Internet Engineering Task Force (IETF), its areas,\nand its working groups.  Note that other groups may also distribute\nworking documents as Internet-Drafts.\n\nInternet-Drafts are draft documents valid for a maximum of six months\nand may be updated, replaced, or obsoleted by other documents at any\ntime.  It is inappropriate to use Internet-Drafts as reference\nmaterial or to cite them other than as \"work in progress.\"\n\nTo learn the current status of any Internet-Draft, please check the\n\"1id-abstracts.txt\" listing contained in the Internet-Drafts Shadow\nDirectories on ftp.is.co.za (Africa), nic.nordu.net (Europe),\nmunnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or\nftp.isi.edu (US West Coast).\n\nDistribution of this document is unlimited.  Please send any comments\nor questions regarding this document to Ora Lassila, Nokia Research\nCenter (ora.lassila@research.nokia.com).  The subject matter of this\ndocument is discussed on the WWW Distributed Authoring and Versioning\nmailing list, w3c-dist-auth@w3.org, which may be joined by sending a\nmessage with subject \"subscribe\" to w3c-dist-auth-request@w3.org.\n\nAbstract\n\nThis document contains examples of distributed editing conducted\nthrough HTTP. These scenarios have been developed by the Distributed\nAuthoring and Versioning Group in the course of specifying\nrequirements for distributed editing, and aim to demonstrate the\nconcepts of distributed editing.  The document presents a logical\nhierarchy of scenarios, separating actual editing actions from\ndocument management.\n\n1. Introduction\n\nThe purpose of this document is to catalog scenarios of distributed\nediting and authoring as well as versioning, as related to the work of\nthe Distributed Authoring and Versioning group, and particularly to\nthe Interned Draft document \"Requirements on HTTP for Distributed\nContent Editing\" [1].  These scenarios can serve as examples of\ndistributed authoring and versioning HTTP extensions' usage, and can\nbe used as basis for discussion of various requirements and protocol\nfeatures.\n\nThe scenarios in this document have been divided into sections\naddressing different aspects of the distributed authoring area: the\nfirst section focuses on the manipulation of the contents of resources\n(documents), the second section focuses on the management of the\ndocuments themselves and their relationships to other documents and\nthe URL space.  A third section has also been included for scenarios\nnot clearly belonging to either of the first two sections.\n\nThe individuals \"Jane\" and \"Joe\", used in the scenarios, can in most\nscenarios (if not all of them) be understood as either real people or\nas some types of software agents.\n\n2. Distributed Editing\n\nThis section contains scenarios where contents of resources are\nchanged through the use of HTTP (as opposed to through local file\nsystem operations).\n\n2.1. Opening and Closing Documents\n\nScenarios in this section illustrate opening and closing of documents\nand retrieving their contents for editing.  They are related to (and\npartially overlap) scenarios in section 2.2.\n\n2.1.1. Opening Documents\n\nScenario A: Jane requests that document D be opened.  D is available\nin English, Finnish and Swedish, each using different word processors\nand each with different revision histories.\n\nScenario B: Jane requests that document D be opened.  D contains links\nto headers, footers and graphical material.  Variation 1: Jane's\nclient side environment is a browser.  Variation 2: Jane's client side\nenvironment is an editor.\n\nNotes:\n\n  1. In both scenarios it is important that source entities have\n     meta-data identifying both the native (or \"source\") format (MS\n     Word, Corel WP, etc.) and format revision.\n\n  2. Scenario B also illustrates the possible desirability of\n     server-side support for conversion of document source to a normal\n     (canonical) form (such as HTML/MIME) for viewer/browser support.\n     A typical DMS might, upon receipt of the OPEN request, retrieve\n     the document meta-data and content from the store and create a\n     temporary file containing the document content in its native\n     format (such as Microsoft Word) on the system(s) hosting the\n     store.  The DMS would then respond (via the server) with status,\n     the URL of the temporary file and the document meta-data\n     (establishing context for the document object).  The client-side\n     process might then issue a GET request for either the source\n     document (for editing), or the normal form document (for\n     viewing).  Though one might expect that editing source implies\n     GETting source, one must not rule out the possibility of editing\n     the (temporary) source file in-situ (server side); editing server\n     side in-situ is one plausible approach to collaborative editing.\n     While the Extension may not initially support collaborative\n     editing of a single document, the Extension architecture should\n     neither proscribe such functionality nor should it favor the\n     adoption of any one particular implementation architecture.\n\n2.1.2. Checking Documents In and Out\n\nScenario A: Jane \"checks out\" a document D with an \"intent to edit\"\n(i.e., a high probability that Jane will delete, add-to or change\ndocument content or document meta-data).  Variation 1: Jane wants\nexclusive editing rights (\"write lock\") to D.  Jane has no objection\nto letting others view as it is edited.  Variation 2: Jane wants\nexclusive editing rights to D and objects to others viewing D as it is\nedited (\"read/write lock\").  Variation 3: Jane wants to edit a local\ncopy of D with the intent to merge and resolve conflicts later at\n\"check in\".  Note that this case accommodates editing \"off-line\"\n(disconnected mode).  Variation 4: Jane is willing to engage in\n\"free-for-all\" editing, but wishes to make it known to other potential\neditors that she is entering/leaving the melee.\n\n2.2. Editing Documents\n\nScenarios in this section are related to retrieving the contents of a\ndocument in various formats for editing.  The are related to (and\npartially overlap) scenarios in the previous section.\n\n2.2.1. Editing HTML\n\nScenario A: Jane, the maintainer of a web page, needs to update its\nHTML source.  There are no other variants to this page, such as\ntranslations into other languages.  She is working with a distributed\nauthoring tool, DistEdit.  She loads the HTML source into DistEdit via\nHTTP.  She then performs some edits to the HTML source.  The HTML\nsource is then written back to its original URL using HTTP.  The\ndistributed editing session is ended.\n\nRelevant requirements (see [1]) and/or protocol features: Source\nRetrieval, HTTP PUT, Partial Write.\n\n2.2.2. Editing a Particular Language Version of an HTML Resource\n\nScenario A: Jane, who is fluent in Finnish, needs to update the HTML\nsource of the Finnish language variant of a web page which has\nEnglish, Finnish, and Swedish language variants.  She is working with\na distributed authoring tool, DistEdit.  She loads the Finnish\nlanguage HTML source into DistEdit using HTTP, and makes some\ncorrections and modifications.  She then writes the HTML source back\nto the original URL using HTTP.  The distributed editing session is\nended.\n\nRelevant requirements and/or protocol features: Source Retrieval, HTTP\nPUT, Partial Write.\n\n2.2.3. Editing HTML with Server Side Includes\n\nScenario A: Jane needs to update the HTML source of a web page.  The\nHTML source includes a server side include (SSI) directive which\ninstructs the HTTP server to insert the current date into the\ndocument, and is written in English.  There are no other variants to\nthis page, such as translations into other languages.  Jane is working\nwith a distributed authoring tool, DistEdit.  She loads the HTML\nsource (including the source of the server side include directive)\ninto DistEdit via HTTP.  She then performs some edits to the HTML\nsource.  The HTML source is then written back to its original URL\nusing HTTP.  The distributed editing session is ended.\n\nRelevant requirements and/or protocol features: Source Retrieval, HTTP\nPUT, Partial Write.\n\n2.2.4. Editing Word Processor Source which Gets Converted to HTML\n\nScenario A: Jane needs to update the source of a web page, stored in\nthe native format of the HTTP-aware word processor DistProc.  The HTTP\nserver containing this resource has extensions provided by the vendor\nof DistProc which automatically convert the DistProc native files into\nHTML which is served whenever the web page is accessed from its URL,\nU.  The web page does not include any graphic content, and is written\nin English.  She loads the web page source into DistProc from URL U\nusing HTTP, and begins to edit this DistProc native format source\nfile.  After making some modifications, she saves the source file back\nto the original URL, U, using HTTP.  She then checks the HTML source\nby retrieving URL U using their favorite web browser.  Since it looks\nfine, she ends the distributed editing session.\n\nRelevant requirements and/or protocol features: Source Retrieval, HTTP\nPUT.\n\n2.2.5. Multiple Simultaneous Editors\n\nScenario A: A certain Web site is maintained by two people, both of\nwhom make changes on an ad hoc basis.  As is frequently the case,\nthere are a few documents that are hot points of congestion, even\nbetween these two people.  Both people (we'll call them \"Jane\" and\n\"Joe\") have a fancy, version-aware Web authoring tool that interacts\nwith their Web server.\n\nJoe downloads a document from the Web site, and decides that it needs\nwork.  He clicks on the \"edit\" button from his browser/authoring tool,\nand the tool reports two things: first, that the Web server has\nacknowledged his edit operation (giving him assurance that a\nsubsequent PUT will not be a complete surprise to the server); second,\nthat the document he will edit is identical to that which he viewed.\nThis may not always be the case: sometimes the document viewed by\nusers is not the true, editable source of the document.  But in this\ncase it is.  Joe proceeds to revamp the document.\n\nJane meanwhile is viewing the same document and realizes that in the\ndocument the word \"fuchsia\" has a typo.  Jane also clicks the \"edit\"\nbutton, but the authoring tool has a lengthier report for her: in\naddition to what Joe was told, Jane is told that Joe is also working\non the same document.  Jane calls Joe and they reach an agreement:\nJane will make her fix now (because the error is embarrassing) and Joe\nwill make sure this alteration makes it into his revision.\n\nJane makes her changes and clicks the \"save\" button.  Her authoring\ntool prompts her for a brief description of her changes, and then the\nserver informs Jane that her change has resulted in a new, named\nrevision of the document, and that name is displayed.\n\nJoe forgets what he was doing, and weeks later (while working on\nsomething else) clicks the \"what am I working on\" button.  In the long\nlist of documents that Joe has started to change is the document we've\nbeen discussing, and Joe decides it is time to finish it off.  He\nmakes his final edits, and clicks the \"save\" button.  Joe, however,\ngets a message indicating that what he edited is no longer the latest\nversion of the document, and Joe clicks the \"merge\" button.  The\nauthoring tool has the latest and greatest merge mechanisms, and in\nthe process of resolving Jane's work with his he realizes that Jane\ndid more than just fix the misspelling she said she would.  That\ndoesn't matter, because the merge mechanism uses actual differences,\nnot verbally stated intentions.\n\nJoe again clicks the \"save\" button, and this time he is prompted for a\ndescription and his new version of the document is saved.\n\n[Continued in 3.6.1.]\n\n3. Distributed Document Management\n\nScenarios in this section describe remote management of the properties\nof resources, remote management of URL hierarchies (these could be\ncalled \"directories\"), as well as visualization of the relationships\namong graphs.\n\n3.1. Opening/Closing Document Containers\n\nScenarios in this section are illustrate management of document\ncontainers (e.g., \"folders\").\n\n3.1.1. Opening a Document Container\n\nScenario A: Jane requests that repository R (a web, a DMS store, etc.)\nbe opened.  The server response to Jane establishes context for R; for\nexample, a list of R attributes and corresponding attribute values,\nfollowed by a list cataloging the objects immediately subordinate to R\n(folders, files, pages, whatever).  Variation 1: Jane requests by\nlocation (URL).  Variation 2: Jane requests by identity (URI).\n\nScenario B: Jane requests that file F (containing document D) be\nopened.  The server response to Jane establishes context for F; for\nexample a \"reference handle\" for accessing the attributes and content\nof F.\n\nScenario C: Jane opens folder S.  In response, Jane receives context\nfor S.  Just after Jane's OPEN request Joe initiates a MOVE of S.\n\nNotes:\n\n  1. A semantic problem: how does Jane understand the object-context\n     response of the OPEN well enough to make use of it?\n\n  2. The need to support URI's as well as URL's.  We should keep a\n     close eye on the URI/URC work groups (see URI specification [2],\n     and see also [3]).\n\n  3. The issue of locking resources.  In scenario C, suppose Jane opens\n     S in something like a \"share deny none\" mode.  What might happen?\n     a) The server might reject Joe's MOVE request.  b) The server\n     might honor Joe's MOVE request and \"shadow\" the old URL for S\n     until there is no pending operation or unresolved state with\n     respect to S via the shadow URL.  c) The server might honor\n     Joe's MOVE request and do nothing about pending operations or\n     unresolved states with respect to S via the orphaned URL.\n\n3.1.2. Closing a Document Container\n\nScenario A: Jane, having examined the list of container attributes for\nfolder S, uses an editing tool in order to change the value V1 of the\nattribute A to V2.  The new attribute value has local instantiation at\nthe remote host(s) which are providing an environment for Jane's\nediting tool.  The (server side) object S itself does not yet reflect\nV2 at A.  Through some action, either explicitly (such as requesting a\n\"close\" transaction with S) or implicitly (such as ending the edit\nsession) Jane asks for closure with S.  Variation 1: A second party\nJoe has meanwhile requested to PUT a value to A.  Variation 2: At the\ntime of Jane's CLOSE request, Jane is disconnected from the network.\n\nScenario B: Jane has opened folder S and requested that all objects in\nS not accessed within the last six months be deleted.  Before the\ndeletion is complete, Jane requests closure with the repository R\ncontaining S.\n\nNotes:\n\n  1. The problem of encountering a race condition is the explicit\n     issue raised by Scenario A.  But there is also the implicit issue\n     of providing a common semantic space for Jane's editing\n     environment and the server-side DMS.  In this case it would be\n     nice if Jane's environment had lexicological connection with A,\n     i.e., could ascertain how the value of A is represented (data\n     type, range, etc.).  Semantic problems such as these are often\n     resolved by promoting standard formats for the transport\n     container.  Will the work group get involved with format issues?\n\n  2. Scenario B illustrates an obvious closure issue, to wit: all\n     ongoing processes and unresolved state conditions that are\n     artifacts of the interaction between Jane, S and R must be\n     \"cleanly\" terminated and resolved before closure.  Usually.\n\n3.2. Creating Documents\n\nScenarios in this section illustrate various ways of creating new\ndocuments.\n\n3.2.1. Creating a New Resource\n\nScenario A: Jane is working with distributed authoring tool DistEdit\non a new HTML page which does not contain any embedded graphical\ncontent.  She has finished her edits, and saves the HTML resource to a\nweb server using the HTTP protocol.  She is prompted for a URL for the\nnew document; the page is then written to this URL using the HTTP\n\"PUT\" method.\n\nRelevant requirements and/or protocol features: HTTP PUT.\n\n3.2.2. Creating a New Resource Through a \"Save As\" Dialog Box\"\n\nScenario A: Jane is working with distributed authoring tool DistEdit\non a new HTML page which does not contain any embedded graphical\ncontent.  She has finished her edits, and wishes to save the HTML\nresource to a web server using the HTTP protocol, but does not know\nthe exact name of the level of the URL hierarchy where she wants the\ndocument to be stored.  She invokes the \"Save As...\" feature of\nDistEdit, which includes a hierarchy level viewer, a list of all the\nentities and their MIME types at a specific level of the hierarchy,\nalong with the ability to go up or down a level of the hierarchy by\nclicking on either \"..\" to go up, or the name of a hierarchy level to\ngo down.  She moves up and down within the URL hierarchy using the\nfacilities of the hierarchy level viewer, finally finding a good\nhierarchy level for the resource.  She then enters a name for the HTML\nresource, and hits the \"Save\" button.  The DistEdit tool now writes\nthe HTML page to the URL created by combining the hierarchy level\nselected using the hierarchy level viewer, and the name just entered\nby her.  The web page is written to the URL using the HTTP \"PUT\"\nmethod.\n\nNotes:\n\n  1. The AOLpress distributed authoring tool currently provides this\n     capability, which they term \"Network saving of HTML pages\" using\n     the \"AOLpress file dialog.\"\n\n  2. For file-based servers, there is typically a mapping between URL\n     hierarchy levels and directories in the filesystem.\n\nRelevant requirements and/or protocol features: List URL Hierarchy\nLevel, HTTP PUT.\n\n3.2.3. Creating a New Resource in a New Hierarchy Level\n\nScenario A: Jane is working with distributed authoring tool DistEdit\non a new HTML page which contains some associated embedded graphical\ncontent.  She finishes her edits, and wishes to save the HTML resource\nto a web server using the HTTP protocol, as well as save the graphical\nimages (collectively we will call this publishing).  She invokes the\npublishing feature of DistEdit, which includes the hierarchy level\nviewer (as described in the previous scenario).  She finds a level of\nthe hierarchy using the hierarchy viewer, but since this is a new web,\nshe decides to create a new level of the hierarchy just to contain\nthis web.  Pressing the \"Create New Hierarchy\" button causes the\nauthor to be queried for the name of the new hierarchy level.  Once\nentered, DistEdit informs the HTTP server that a new hierarchy level\nshould be added below the level currently displayed in the hierarchy\nlevel viewer.  If the author has the correct access permissions to\ncreate a new hierarchy, the new hierarchy level is created.  The web\nauthor then presses the \"Publish\" button, and his web of HTML and\ngraphic entities are written to the HTTP server.\n\nNotes:\n\n  1. The AOLpress distributed authoring tool currently provides the\n     capability to make new hierarchy levels, supported by their\n     \"MKDIR\" HTTP method.\n\nRelevant requirements and/or protocol features: List URL Hierarchy\nLevel, Make URL Hierarchy Level, HTTP PUT.\n\n3.2.4. Visualizing Webs as Graphs\n\nScenario A: In order to understand the link structure and resource\ninclusion relationships at a hierarchy level, a web maintainer chooses\nthe \"Graph View\" option of their distributed editing tool DistEdit.\nDistEdit queries the web maintainer for which level of the hierarchy\nto display using a graph visualization, and then uses the HTTP\nprotocol to read information about that level of the hierarchy.\nDistEdit uses this information to display a graphical visualization of\nthe hierarchy level, including an icon for each resource, solid lines\nbetween the icons representing links, and dashed lines representing\ninclusion (for example, images loaded using the IMG tag).  Entities\nthe web maintainer has read and write access to are displayed in\ngreen, those which they have read access to are in white, and those\nwhich they have no access to are in red.  To create the graph\nvisualization, DistEdit must, using HTTP, get a listing of all the\nentities at a level of the hierarchy, and their access control\npermissions.\n\nNotes:\n\n  1. The AOLpress distributed authoring tool currently provides a\n     similar capability, which they term the \"MiniWeb,\" a \"bird's-eye\"\n     graphical view of web site documents and how they are linked\n     together.\n\n  2. The FrontPage distributed authoring tool provides equivalent\n     capability, which they call a \"Link View,\" and also supports the\n     related \"Outline View\" and \"Summary View.\"\n\nRelevant requirements and/or protocol features: List URL Hierarchy\nLevel.\n\n3.3. Attribute Management\n\nScenarios in this section illustrate management of document attribute\ndata, and the administration of access rights.\n\n3.3.1. Getting Attribute Values\n\nScenario A: Jane submits a list of document URIs with the request that\nthe \"subject/summary\" attribute value be returned for each document.\n\n3.3.2. Modifying/Setting Document Attribute Values\n\nScenario A: Jane requests that the value of the document attribute\n\"subject/summary\" for document D be modified to correct an error.\n\nScenario B: Jane is creating a new document on the Web.  She sends it\nto the server, but also wants to set a bunch of attributes that can be\nused later in searches (author, title, type of document, subject,\norganization, etc.).  Sometimes she may also want to create catalog\nentries for documents that are not available in electronic form.\nThere will be no content for these documents, just attributes.\n\nRelevant requirements and/or protocol features: Attributes.\n\n3.3.3. Access Control\n\nScenarios in this subsection illustrate various situations of\nassigning, modifying and revoking access rights to a document or group\nof documents.\n\n3.3.3.1. Modifying Access Rights\n\nScenario A (Realistic): A sales manager at a company which contains an\norganization-wide intranet is working with an intranet-enabled\nspreadsheet program, DistCalc.  After entering the sales figures for\nthe previous month (which are below projections), a graph of the sales\nfigures is generated as a JPEG image, and then saved to the\ndepartmental HTTP server using the HTTP \"PUT\" method.  Realizing that\nit might be best to limit access to this information, in their web\nbrowser they bring up the graph image.  After selecting the menu\noption, \"Modify Access Permissions,\" the browser displays the access\ncontrol page for the graph image resource.  The sales manager uses the\n(server-specific) facilities on this page to modify the sales chart's\naccess control rights so it is password protected.\n\nScenario B (Ideal): In the ideal case, the DistCalc program would\ndisplay a dialog box asking the user for what access rights the graph\nresource should have before the graph is saved to the departmental\nHTTP server.\n\nNotes:\n\n  1. The \"realistic\" case assumes that reaching consensus on an access\n     control standard for HTTP resources is not achievable in the near\n     term, and hence access control will vary with server type.  It\n     also assumes a continuation of the current trend of having an\n     access control URL for each resource.  The \"ideal\" case shows\n     what could be achieved if an HTTP access control standard is\n     created.\n\nNo matching requirements or protocol features.\n\n3.3.3.2. Using Special Access Rights\n\nScenario A: A museum's paintings are being made available online.\nThere are several different collections of paintings with different\naccess rules.  Paintings may migrate from one collection to another\nfrom time to time.\n\n  1. One collection, meant to entice visitors into the museum, is\n     freely available to all.\n\n  2. In another collection, anyone can view metadata or retrieve a\n     low-resolution rendition of any painting for free, but retrieval\n     of a high-resolution rendition requires payment of a fee.  Museum\n     members can retrieve even high-resolution renditions from this\n     collection without charge.\n\n  3. A children's collection lets children submit art works.  The\n     child registers when he submits an art work.  Any child can add,\n     remove, or modify his own work.  Anyone can view works in this\n     collection for free.  Access control for this site can be managed\n     by creating the three collections, and setting access rights for\n     each collection at the server.  The curator can move paintings\n     from one collection to another with a Web-based tool.  The museum\n     application enforces access rights by consulting the museum's\n     membership database and the children's registry, together with\n     the access policies.\n\nScenario B: A university library wants to put reserve readings on line\nfor its students.  In order not to violate any copyright laws, it\nneeds to set permissions so that only students registered for a\nparticular course can view the readings for that course.  The\nlibrarian putting the reserve readings online is using a Web-based\ntool.  Whenever he adds a reading to the Web site, the tool prompts\nhim for the course numbers whose students should be allowed to access\nthat reading.  The reserve readings application at the Web server is\ntied to the course registration database to enforce these permissions\nwhen students try to access materials.\n\nScenario C: Some products support a notion of community-administered\nWeb sites. Anyone can set up an account for himself at one of these\nsites.  Then, when logged on as himself, he can add collections and\nmaterials to the site, and determine access rights for any objects he\nadds.  He can change these access rights at any time.  He can create\ngroups and users, and administer the groups and users he owns or has\npermission to administer.\n\nNotes:\n\n  1. Xerox's DocuShare system supports Scenario C.\n\n3.3.3.3. Access Rights and Document State\n\nA team is working on a project that involves sensitive business data.\nThe project's deliverables include several papers, each of which goes\nthrough several cycles of writing and review before it is approved for\ndistribution.  A person who is an author of one paper may be on the\nreview team for several others.  Outside reviewers are also engaged\nfor each of the papers. While a paper is in a writing phase, only its\nauthors have write access to it, and only project team members have\nread access to it.  When a paper is in a review cycle, read and print\naccess is extended to reviewers.  This access is removed once review\nis complete.  When a version is approved for distribution, a short\nlist of users throughout the company is given read and print\npermission (each of these users can print at most one copy); a longer\nlist can read the paper, but not make printed copies.  The project\nlead assigns people to the authoring and reviewing groups and\ndistribution lists for each paper, and determines when each paper\nmoves from one phase to another.  All this is done with Web-based\ntools.\n\n3.3.3.4. Access Rights and Versioning\n\nA versioned document describing a company's product offerings is being\ndeveloped at a Web site.  It is expected to evolve over time as\nproduct offerings change.  The team leader designates one version of a\ndocument as the public version.  Everyone in the world has read access\nto this version.  The team leader can change which version is the\npublic version at any time.  The team leader also gets to decide which\nversion of the document team members are allowed to modify at any\ntime.  Only team members have write access to this version.  Any other\nversions are viewable, but not modifiable, by team members.  The team\nleader makes these changes to the access restrictions on versions\nusing a Web-based tool.\n\n3.4. Copying, Moving and Deleting\n\nScenarios in this section illustrate typical \"housekeeping\" involved\nwith managing documents, such as renaming, moving them around, and\ndeleting them.\n\n3.4.1. Copying Documents\n\nScenario A: Jane is looking at the list of monthly reports available\non the server.  She selects one from the list that she wants to use as\nthe basis for a new monthly report.  She asks for a copy of this\nmonthly report to be made in the same directory but with a different\nname.  Since she is not intending to work on it now, there is no\nreason to pull the content to the client.\n\nRelevant requirements and/or protocol features: Copy.\n\n3.4.2. Copying Document Containers\n\nScenario A: Jane directs that folder S1 be copied to folder S2.  While\nthe copy is in progress, Joe directs that S1 be moved to folder S3.\n\nScenario B: Jane directs that a container F be copied to a location\noutside the repository R.  Although F contains only a simple text\ndocument, the structure of F both as a logical and a physical entity\nis highly idiosyncratic, being intimately bound to R.  Consequently, F\ncannot be expressed in the external domain.  Variation 1: The DMS has\nexport capability (to the external file system) with a granularity\nthat can resolve F.  Variation 2: The document contained by F has a\nnative format corresponding to the tool used to generate the document\n(HTML, WPD, etc.).  In this case one could interpret the copy as a\ntransform from F in the DMS domain to the native document format D in\nthe external domain.  Variation 3: The container to be copied is\nfolder-like, i.e. a proper container, and the container hierarchy in R\nis compatible with the external domain container hierarchy.  In this\ncase, some kind of copy/transform could be implemented, with the\nunderstanding that container attributes might be largely distorted or\nlost.\n\nNotes:\n\n  1. Copying within R should be no big deal, though scenario 6a does\n     illustrate why one might desire some kind of \"read-lock\"\n     mechanism. As scenario B illustrates, copying container structure\n     and content from one repository to another can be problematical.\n     For example: how does one, in general, map a plex container model\n     to a hierarchical model?\n\n3.4.3. Deleting and Undeleting Documents\n\nScenario A: Jane directs that page P and all subordinate objects be\ndeleted from web W.  Pn is subordinate to Pk is subordinate to P, and\nboth Pk and Pn are in scope (i.e., in W).  It so happens that Pn\nforward links to Pk.  The delete process DEL recursively chains down\nfrom P, eventually encountering Pk, and asserts a \"read lock\" on Pk\npreparatory to deleting Pk.  Since Pk has subordinate links, DEL\ncontinues down the chain until it encounters Pn, where it asserts a\n\"read lock\" and recursively chains forward to Pk.  DEL requests a\n\"read lock\" on Pk.\n\nNotes:\n\n  1. Document deletions (like container deletions) can be subject to\n     qualifying conditions such as meeting query and scope criteria.\n\n  2. Developers must be wary of deadlocks.\n\n3.4.4. Deleting and Undeleting Document Containers\n\nScenario A: Jane opens folder S and examines its content.  Jane\ndecides to delete all non-folder objects in S, but is unsure if\nexisting folders subordinate to S have valuable content.  Jane directs\nthat all non-folder objects in S be deleted.\n\nScenario B: Jane directs that folder S and all subordinate folders and\ncontent be deleted.  A document subordinate to S is currently open to\nJoe.\n\nScenario C: Jane directs that file F containing document D be deleted.\nA copy process of D to some other repository is in progress.\n\nScenario D: Jane directs that all containers and related content\nsubordinate to folder S with content that has not been modified since\na given date (supplied by Jane or otherwise provided) be deleted.  One\nor more active documents in the repository reference a common header\nthat is in a file F subordinate to S.  F meets the delete criterion.\n\nScenario E (Undeleting): Container S1 (subordinate to S) and all\nsubordinate containers have been deleted.  Jane requests that\ncontainer S3 and all subordinate objects be undeleted, where S3 was\nsubordinate to S2 which in turn was subordinate to S1.  Variation 1:\nThe container structure is \"plex\", so that S3 was also subordinate to\nSk which was not subordinate to S1.\n\nNotes:\n\n  1. The delete might need to act within the context of query results\n     on container/content attributes as well as scope conditions on\n     the store hierarchy.\n\n  2. B and C show how \"locking\" might be a good thing.\n\n  3. D illustrates how someone might wish to incorporate a \"reference\n     count\" attribute on linked objects, and desire that reference\n     count values be appropriately factored into the query/scope\n     constraints for certain kinds of transactions.\n\n3.4.5. Moving Documents\n\nScenario A: Jane notices that after recently editing the content of a\ndocument its assigned name no longer makes logical sense. She decides\nto rename the document.  She selects the document from a list of\nexisting documents and is prompted for a new name.  Since she does not\nintend to work on it now, there is no reason to pull the content to\nthe client.\n\n3.4.6. Moving Document Containers\n\nScenario A: Jane directs that folder S1 be moved to folder S2.  In the\ncontainer hierarchy, S2 is subordinate to S1.\n\nScenario B: Jane directs that container S1 be moved to container S2.\nThere exists in web W a page P that is external to S which makes\n(forward) reference (via URI) to one or more objects in S.\n\nNotes:\n\n  1. Again we see in the second scenario why it might be desirable to\n     support the URI initiative.\n\n3.5. Working with Multiple Documents/Resources\n\nScenarios in this section illustrate situations where manipulation of\na (logical) collection of related document is necessary.\n\n3.5.1. Printing a Multi-Resource Document\n\nScenario A (Browsing): A net surfer browsing the web loads the\nintroductory page for a book which has been written in HTML and\nsubdivided so that there is a separate resource for each chapter, and\nmany side links to clarifying text and standalone figures.  Since the\nbook is of interest, the net surfer would like to print the entire\ndocument.  Clicking on the \"Print\" button of their web browser brings\nup the Print dialog box, which contains an option, \"Print\nmulti-resource document,\" which they select, before pressing the\n\"Start Printing\" button.\n\nThe browser now begins, in the background, to load all of the chapters\nof the book along with their explanatory sidebars, sending them one by\none, in order, to the printer.  When complete, the browser pops-up a\ndialog box stating that the document has been completely printed.\n\nScenario B (Distributed Authoring): This scenario applies equally well\nto a distributed authoring situation.  If the author of a\nmulti-resource document is using a distributed authoring tool to write\nthe document, it is desirable for them to be able to print the\ndocument as a whole, rather than by loading and printing each resource\nin turn.\n\nNotes:\n\n  1. This type of printing capability is supported by the KMS\n     hypertext system, an early monolithic (but very feature-rich)\n     hypertext environment.\n\n  2. Another common example of a multi-resource document which would\n     be desirable to print as a whole is a slide presentation which\n     has been converted into HTML.\n\n3.5.2. Quick Browsing of Related Resources\n\nScenario A: A professor is working on a new textbook using their\nfavorite intranet-enabled word processor, DistProc.  Once the initial\ndraft of this book is complete, they use the \"Publish\" feature of\nDistProc to save their book as multiple resources, one per chapter, on\na web server.  Since the author intends for their students to read the\ntext using web browsers employing a DistProc reader plug-in, the\nprofessor has the book on the HTTP server in DistProc native format,\npreserving layout information.\n\nIn order to provide additional browsing structure to the students, the\nprofessor uses the feature of DistProc to automatically create links\nto the table of contents, index, and glossary for the book.  To make\ngenerating feedback easier, all book chapters automatically have a\nlink to a corrections and feedback page.  As the students are reading\nthe text, these automatic links are displayed as special toolbar icons\nin their browser.\n\nNotes:\n\n  1. The AOLpress distributed authoring tool currently \"allows pages\n     to add toolbar buttons on the fly using the HTML 3.2\n\n       <link rel ...>\n\n     -tag.  For example, your page can add toolbar buttons that link\n     to a home page, table of contents, index, glossary, copyright\n     page, next page, previous page, help page, higher level page, or\n     a bookmark in the document.\"\n\n  2. The scenario above is currently unachievable because LINK tags\n     are only supported in HTML.\n\n3.6. Publishing and Reverting\n\nThese scenarios are hopefully illustrative of the need of a versioning\nscheme for distributed editing.\n\n3.6.1. Revising a Set of Documents and Publishing Them When Complete\n\n[Continued from 2.2.5.]\n\nScenario A: Jane and Joe's version-aware web server is fairly simple:\nnormally, it serves up the latest revision of each document, but if\ninstructed it will instead serve up the revisions of documents as\nlisted in a named configuration.  In this way, they can make their\ntrivial changes and have them show up immediately, but if they plan to\nmake a heavy-duty overhaul they can save the current set as a working\nconfiguration and tell the server to use those until the work is\ncomplete (this can all be carried out without the explicit knowledge\nof Jane and Joe's authoring tool, because the Web server makes itself\nconfigurable via Web pages with forms on them).\n\nJoe is about to make a set of minor changes, and to be on the safe\nside tells the server to save the current configuration as \"stable\", a\nname he uses for these occasions.  He goes through the various\ndocuments, clicking \"edit\" on any that he thinks are in need of\nupdating.\n\nOnce again Joe forgets what he is doing, but a few days later the\n\"what am I working on\" button again comes in handy.  He realizes that\nhis work is about complete, and makes his final edits.\n\nJoe's changes really are a coherent set that should appear\nsimultaneously, and he doesn't want to find out halfway through saving\nthat Jane has made changes that need merging, so he clicks the \"Save\nAll\" button.  Fortunately, Jane has been busy viewing other parts of\nthe web and hasn't made any changes to their local Web pages, and so\nJoe is prompted for a description of the changes he has made.  Since\nJoe is saving all the documents at once, a single description applies\nto all the changes.  One by one the new documents are saved, and in\nthe end Joe gets confirmation that all documents are in place.  Joe\nbrowses the result and is satisfied that their customers are seeing\nwhat he has just finished.\n\nJoe goes on vacation.\n\n[Continued in 3.6.2.]\n\n3.6.2. Reverting the Revised Document Set\n\n[Continued from 3.6.1.]\n\nScenario A: Jane gets back to real work and realizes that every\ndocument that Joe edited has the same old spelling problem.  In a\npanic she calls Joe but realizes that he is on vacation.  Knowing that\nthe errors would harm their image, she decides to undo what Joe has\ndone until he returns and can correct his mistakes.\n\nJane begins by browsing the revision history of each document, and\nnotes that all the erroneous documents came about at the same time\nwhen Joe saved his changes just before vacation.\n\nJane browses the configuration lists in the version-aware web server\nand sees that Joe had made a \"stable\" configuration before his latest\nwork.  Jane instructs the server to serve up only documents from the\n\"stable\" configuration.  As this doesn't involve changing any of Joe's\nwork, it is a quick fix to the pages on their public web server.  Jane\nnow browses the documents on their server and is satisfied that they\nare the precursors to Joe's latest change.\n\nWhen Joe returns, he fixes his spelling mistakes and then tells the\nserver to resume using the latest documents.\n\n4. Versioning Issues\n\nVersioning (the ability to retain revision histories for documents) is\ndiscussed in several scenarios in this document.  Section 3.6\n(Publishing and Reverting) presents scenarios where versioning is\nnecessary, as well as section 2.1.2 (Checking Documents In and Out)\nvariation 3 and section 2.2.5 (Multiple Simultaneous Editors). The\nrelationship between versioning and access privileges is discussed in\nsection 3.3.3.4 (Access Rights and Versioning).\n\n5. Miscellaneous Scenarios\n\nScenario A: Jane's department keeps its documents organized in\nhierarchical collections.  There is a collection called \"Monthly\nReports\" with subcollections for each month.  There is also a\ncollection called \"Monthly Business Letters\" with subcollections for\neach month.  The monthly reports are used to derive the monthly\nbusiness letters, so the monthly reports appear in the appropriate\n\"Monthly Business Letters\" subcollections as well.  When Jane writes\nher monthly report, she puts it into Monthly Reports/199608 and into\nMonthly Business Letters/199608.  Only one copy of the report should\nexist on the server, but it appears in both places when users browse\nor search the collections.\n\nScenario B: The first time Jane's monthly report gets printed, it gets\nconverted to PostScript, which she wants to store on the server.  Now\nthere will be two renditions of the same (versions of the same)\ndocument from which she can choose when she retrieves the document in\nthe future.  She also saves the printing instructions (duplex,\nlandscape, stapled, etc.)  for the document, which she may want to\nretrieve with the PostScript later.\n\n6. References\n\n[1] Jim Whitehead, 1996.  \"Requirements on HTTP for Distributed\n    Content Editing\", Internet Draft (available on-line from the\n    Internet Draft collections as draft-whitehead-http-distreq-00.txt)\n\n[2] Tim Berners-Lee, 1994. \"Universal Resource Identifiers in WWW - A\n    Unifying Syntax for the Expression of Names and Addresses of\n    Objects on the Network as used in the World-Wide Web\", Request for\n    Comments #1630\n\n[3] --, \"Uniform Resource Identifiers\", available on-line as\n    http://www.acl.lanl.gov/URI/uri.html\n\n[4] J.A.Slein, F.Vitali, E.J.Whitehead and D.G.Durand, 1997.\n    \"Requirements for Distributed Authoring and Versioning on the\n    World Wide Web\", Internet Draft (available on-line from the\n    Internet Draft collections as\n    draft-ietf-webdav-requirements-00.txt)\n\nAcknowledgments\n\nThe following people have contributed to this document by submitting\nsample scenarios and/or by commenting:\n\n   * Eui-Suk Chung, Ericsson, euisuk@w3.org\n   * Del Jensen, Novell\n   * Dave Long, dave@sb.aol.com\n   * Christopher Seiwald, Perforce Software, seiwald@perforce.com\n   * Judith A. Slein, Xerox, slein@wrc.xerox.com\n   * Jim Whitehead, UC Irvine, ejw@ics.uci.edu\n\nAuthor's Address\n\nOra Lassila\n\nNokia Research Center / Boston\n3 Burlington Woods Drive, Suite #250\nBurlington, MA 01803\n\nPhone:  +1 (617) 238-4908\nFax:    +1 (617) 238-4949\nE-Mail: ora.lassila@research.nokia.com\n\n\n", "encoding": "ascii"}