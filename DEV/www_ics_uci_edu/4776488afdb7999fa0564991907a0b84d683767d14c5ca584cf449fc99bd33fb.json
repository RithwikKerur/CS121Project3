{"url": "https://www.ics.uci.edu/~thornton/ics32/ProjectGuide/Project5/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 32 Winter 2019, Project #5: The Fall of the World's Own Optimist (Part 2)</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 32 Winter 2019 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 32 Winter 2019<br />\r\n   Project #5: <i>The Fall of the World's Own Optimist (Part 2)</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, March 15, 11:59pm</i></p>\r\n\r\n<p class=\"center\"><i>This project is to be done individually</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Background</p>\r\n\r\n<p>In the <a href=\"../Project4\">previous project</a>, you implemented a Columns game with a fairly primitive user interface that ran within the Python shell, in the spirit of the user interfaces we've been building all quarter.  This didn't make for a particularly fun game, but it did let us focus our energies on the precise rules of our game, so we could get all of the various mechanics right, before turning our attention to making a playable game out of it.  In this project, we'll switch over to making the game playable.</p>\r\n\r\n<p>In recent lectures, we've been learning more about <b>PyGame</b>, a third-party library &mdash; not one built into Python, but nonetheless one that is easily downloaded and installed for your use.  This project asks you to take the program you wrote for the <a href=\"../Project4\">previous project</a> and replace its user interface with a graphical one.  You'll build your game using the <b>PyGame</b> library, as we've been doing in lecture.  Rather than simulating the passage of time by pressing the <b>Enter</b> key, the game will move on its own; this will add the key elements of challenge and fun to it.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The program</p>\r\n\r\n<p>This project asks you to build a graphical, playable version of Columns, based on the game mechanics from the <a href=\"../Project4\">previous project</a>.  However, we'll need to make a couple of minor changes to it:</p>\r\n\r\n<ul>\r\n  <li>The field will always consist of 13 rows and 6 columns, and will always start out empty.</li>\r\n  <li>The seven colors of jewels were represented as uppercase letters previously.  Instead, choose seven colors &mdash; you can choose any colors you'd like, though they should be different enough that you can easily tell the difference between them at a glance.  (You might want your game mechanics to still refer to them using uppercase letters, and that's fine; but when you display them, what differentiates the jewels should be their colors.)</li>\r\n  <li>There needs to be some kind of visual cue when fallers land.  Additionally, if you support matching, you would ideally want a visual cue when jewels match before they disappear, as well.  You have your choice about these visual cues &mdash; you can use colors or other visual effects.</li>\r\n  <li>Rather than the user adding fallers manually, they appear randomly.  Whenever there isn't a faller in the field, a new one appears in a randomly-chosen column and consisting of random colors.</li>\r\n  <li>Rather than the user pressing the <b>Enter</b> key to simulate the passage of time, you'll instead \"tick\" the game mechanics once per second automatically.</li>\r\n  <li>Rather than the user typing commands like <b>R</b>, <b>&lt;</b>, and <b>&gt;</b> in the Python shell to rotate and move the faller, the user instead should move them by pressing keys on the keyboard; every keypress rotates or moves the faller once.  So that we'll know how to grade your project, we'll all use the same keys: <i>left arrow</i> and <i>right arrow</i> should move the faller to the left and right, respectively, while the spacebar should rotate the faller.</li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Which rules must be implemented?</p>\r\n\r\n<p>The only game mechanics that are absolutely necessary &mdash; for full credit on this project &mdash; are the mechanics of creating fallers, moving and rotating them, and having them land and freeze.  All of the other mechanics &mdash; matching, particularly &mdash; are optional.  If you already completed <a href=\"../Project4\">Project #4</a>, you'll want to include them here.  But we do want those of you who have only partial implementations (within bounds of reason) to be able to proceed with this project without penalty.</p>\r\n\r\n<p class=\"subtitle\">What should it look like?</p>\r\n\r\n<p>You have a fair amount of leeway about how the game looks.  The basic feel should be similar to the <a href=\"https://www.youtube.com/watch?v=pFJvY1k-rpM\">1990 Sega version</a>, in the sense that you would display the jewels in a grid, and you would see them move one grid cell at a time.  Jewels should be displayed with different colors, and you can opt to use different shapes, though that is not required.</p>\r\n\r\n<p class=\"subtitle\">Additional challenges</p>\r\n\r\n<p>You are certainly welcome to add new features to your game, though they are not required (and extra credit is not offered in this course).  Some ideas of what you might add include:</p>\r\n\r\n<ul>\r\n  <li>Displaying the contents of the \"next\" faller that will appear, before it appears.</li>\r\n  <li>A mechanism for keeping score and displaying it.</li>\r\n  <li>Representing the jewels using small images, instead of drawing them programmatically.  (There are limitations on the size of those images; see below.)</li>\r\n  <li>Adding sound effects and/or music.  (There are limitations on the size of the files needed for this, as well.)</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Approaching the problem</p>\r\n\r\n<p class=\"subtitle\">Reusing your game mechanics</p>\r\n\r\n<p>If you have a complete set of game mechanics from the <a href=\"../Project4\">previous project</a>, you'll find that your task this time is primarily one of visualization and taking input.  Your game mechanics, if designed appropriately before, should be largely usable without modification.  In some ways, it may not (e.g., if your game mechanics made assumptions about the user interface running in the Python shell, or about the specifics of the input and output like <b>EMPTY</b> or <b>F 1 X Y Z</b>); in the areas where your game mechanics aren't as good of a fit lie learning opportunities.  Reflect on what changes you had to make and why, and understand how you could have avoided making those changes.</p>\r\n\r\n<p>Note, too, that you are eligible for up to full credit on this project even if you don't have absolutely perfect game mechanics, though there are some requirements that do need to be met, as described above.</p>\r\n\r\n<p class=\"subtitle\">What to do if you didn't complete your game mechanics previously</p>\r\n\r\n<p>If you did not complete your game mechanics previously, you will need to complete the most basic requirements now &mdash; see above &mdash; and I would suggest focusing your energy on just what's necessary, since it will be somewhat easier to implement than the full rules.  Since implementing only the necessary rules leaves open the possibility of receiving full credit on this project (i.e., there are no deductions for not implementing more than this, and there are no bonuses for implementing everything), there's no benefit &mdash; from a grade perspective &mdash; in implementing the full rules (though, of course, you're welcome to do so, if you'd like).</p>\r\n\r\n<p>It should go without saying &mdash; but prior experience has shown otherwise &mdash; that you are required to submit <i>your own</i> game mechanics in this project, not someone else's.  It's certainly true that the focus of this project is on building the graphical portion of the game, but one of the learning objectives here is becoming accustomed to reusing your own code to satisfy new requirements, so you can determine which parts of your own design worked well in the new context, which ones didn't, and reflect on why.</p>\r\n\r\n<p class=\"subtitle\">Module design</p>\r\n\r\n<p>As before, you are required to keep the code that implements the game mechanics entirely separate from the code that implements the graphics and input handling for your game.  To that end, <i>you will be required</i> to submit at least two modules: one that implements your game mechanics and another that implements the graphical portion.  You're welcome to break these two modules up further if you find it beneficial, but the requirement is to keep these two parts of your program &mdash; the logic and the user interface &mdash; separate.</p>\r\n\r\n<p>At least one of your modules should be executable (i.e., should contain an <b>if __name__ == '__main__':</b> block), namely the one that you would execute if you wanted to launch your game.</p>\r\n\r\n<p class=\"subtitle\">Using classes to implement your game</p>\r\n\r\n<p>Because your event handlers will need access to the game's current state, the graphical portion of your game should be implemented as one or more classes, in the style we've been discussing in recent lectures, with (at least) an object representing the game itself; you may also find it useful to have additional kinds of objects that represent parts of your graphical implementation, but this is up to you to decide and is not a requirement.</p>\r\n\r\n<p class=\"subtitle\">Drawing the state of the game and resizing the window</p>\r\n\r\n<p>You'll need to draw the game board using <b>PyGame</b>, which you can do programmatically using something like <b>pygame.draw</b> or by using small images and \"blitting\" them on to the display instead.  Additionally, your game window must support resizing, and resizing it must cause the area in which the board is drawn to change size correspondingly, with the game's graphics redrawn to fill the available space in some reasonable way, so the user can decide how large of a window he or she would like to play the game on.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">How we will be running your program</p>\r\n\r\n<p>Because we will be using the third-party library <b>PyGame</b>, it is important that we all agree on how the various files and configuration will be done.  This is what we're going to do when we run your program:</p>\r\n\r\n<ul>\r\n  <li>First, we'll create a virtual environment, using the techniques shown in the <a href=\"../../Notes/ThirdPartyLibraries\">Third-Party Libraries</a> notes, then install the latest version of <b>PyGame</b> into it.</li>\r\n  <li>Next, we'll create a <b>src</b> directory within that virtual environment, then take all of your source code (i.e., all of your <b>.py</b> files) plus any additional files needed for your game (images, sounds, etc.) and put them into that <b>src</b> directory.  (Your game will need to be implemented to assume that all of these files are in the same directory.)</li>\r\n</ul>\r\n\r\n<p>You'll want to be sure, before you submit your work, that this technique for setting up your project will work properly.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Where to find more information about PyGame</p>\r\n\r\n<p>When you want to know more about the PyGame library, a good place to start is the <a href=\"../../Notes\">Notes and Examples</a> on the course web site, where I've tried to outline the big-picture concepts and demonstrate a few examples.  Most likely, though, there will be things that you run into that don't happen to covered in those notes, so you'll also want to be able to navigate PyGame's online documentation, which is actually extensive and quite good.  You can find that documentation at the link below.</p>\r\n\r\n<ul>\r\n  <li><a href=\"https://www.pygame.org/docs/\">PyGame documentation</a></li>\r\n</ul>\r\n\r\n<p>The documentation is organized into sections for each part of the library; you'll see links to those sections listed near the top of the page.  For example, if you're unsure about some part of the <b>pygame.display</b> library, you'll find a link titled <b>display</b>.  I generally find myself using those navigation links near the top when I want to jump around and look at the details of things I don't remember or haven't seen yet.</p>\r\n\r\n<p>There are also some tutorials available, though you'll find that they can take you into a lot of places where we won't need to go for our work.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Limitations</p>\r\n\r\n<p>The only third-party library you are permitted to use is <b>PyGame</b> &mdash; which, in fact, you're required to use.  Otherwise, you're free to use modules in Python's standard library to the extent that they're helpful to you.</p>\r\n\r\n<p>There is a hard limit of 256KB on any additional files &mdash; images, sounds, and so on &mdash; that you want to submit above and beyond the Python source code for your game.  This will allow you to spruce up your game to some extent, but disallows something like a large MP3 file for background music, a video that plays when the game start, and things of that nature.  (This limitation is mainly motivated by the fact that this is a very large course, yet we're all sharing the same submission system and working to the same deadline, so we can't have hundreds of megabytes of data being submitted to Checkmate.)</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>Put your name and student ID in a comment at the top of each of your <b>.py</b> files, then submit all of the files to Checkmate.  Take a moment to be sure that you've submitted all of your files.</p>\r\n\r\n<p>If you have additional files &mdash; images or sounds, for example &mdash; that are also part of your game, you'll need to submit these, as well; there will be an additional area within the Project 5 dropbox on Checkmate to submit them.  (Note that we will be assuming that we can copy these files into the same directory as your source code in order to run the game; see above.)  We aren't kidding when we say that there is a limit of 256KB per student for \"assets\" like these; unfortunately, we're not going to be able to allow massive sets of files to be submitted, since there is a very large number of students enrolled in this course.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Modifications and clarifications by Alex Thornton, Winter 2018.</li>\r\n  <li>Originally written by Alex Thornton, Fall 2017.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}