{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/Makefile", "content": "# file: Makefile\n# description: Build everything\n# author: Andrea Vedaldi\n\n# Copyright (C) 2014 Andrea Vedaldi.\n# Copyright (C) 2007-12 Andrea Vedaldi and Brian Fulkerson.\n# All rights reserved.\n#\n# This file is part of the VLFeat library and is made available under\n# the terms of the BSD license (see the COPYING file).\n\n# VLFEAT BUILDING INSTRUCTIONS\n#\n# This makefile builds VLFeat on standard Unix installations with the\n# GNU toolchain. Mac OS X and GNU-Linux are explicitly\n# supported. Usually, compiling VLFeat reduces to typing\n#\n# > cd PATH_TO_VLFEAT_SOURCE_TREE\n# > make\n#\n# The makefile attempts to automatically determine the host\n# architecture. If this fails, or if the architecture is ambiguous,\n# the architecture can be set by specifying the ARCH variable. For\n# instance:\n#\n# > make ARCH=maci64\n#\n# builds VLFeat for Mac OS X Intel 64 bit. Pease\n# see http://www.vlfeat.org/compiling.html\n# for troubleshooting and details.\n#\n# Other useful variables are listed below (their default value is in\n# square brackets).\n#\n#   ARCH [not defined] - Active architecture. The supported\n#       architectures are maci, maci64, glnx86, or glnxa64 (these are\n#       the same architecture identifiers used by MATLAB:\n#       http://www.mathworks.com/help/techdoc/ref/computer.html). If\n#       undefined, the makefile attempts to automatically detect the\n#       architecture.\n#\n#   DEBUG [not defined] - If defined, turns on debugging symbols and\n#       turns off optimizations\n#\n#   PROFILE [not defined] - If defined, turns on debugging symbols but\n#       does NOT turn off optimizations.\n#\n#   VERB [not defined] - If defined, display in full the command\n#       executed and their output.\n#\n#   MEX [mex]- Path to MATLAB MEX compiler. If undefined, MATLAB support\n#       is disabled.\n#\n#   MKOCTFILE [not defined] - Path to Octave MKOCTFILE compiler. If undefined,\n#       Octave support is disabled.\n#\n# If defined to anything other than \"no\", the following falgs disable\n# specific features in the library. By defaults, all the features are\n# enabled.  If the makefile finds that the environment is unable to\n# support some of them, it may decide to disable them automatically\n# (in this case it will print a message).  This behaviour can be\n# overriden by defining the flag to be \"no\".\n#\n#   DISABLE_SSE2 - SSE2 vector instructions support.\n#   DISABLE_AVX - AVX vector instructions support.\n#   DISABLE_THREADS - Supprot for multithreded library client.\n#   DISABLE_OPENMP - OpenMP-based multithreaded computations.\n#\n# To completely remove all build products use\n#\n# > make distclean\n#\n# Other useful targets include:\n#\n#   clean - Removes intermediate build products for the active architecture.\n#   archclean - Removes all build products for the active architecture.\n#   distclean - Removes all build products.\n#   info - Display a list of the variables defined by the Makefile.\n#   help - Print this message.\n#\n# VLFeat is compsed of different parts (DLL, command line utilities,\n# MATLAB interface, Octave interface) so the makefile is divided in\n# components, located in make/*.mak. Please check out the\n# corresponding files in order to adjust parameters.\n\n# Copyright (C) 2014 Andrea Vedaldi.\n# Copyright (C) 2007-13 Andrea Vedaldi and Brian Fulkerson.\n# All rights reserved.\n#\n# This file is part of the VLFeat library and is made available under\n# the terms of the BSD license (see the COPYING file).\n\nSHELL = /bin/bash\n\n.PHONY : all\nall:\n\n# Select which features to disable\n# DISABLE_SSE2=yes\n# DISABLE_AVX=yes\n# DISABLE_THREADS=yes\n# DISABLE_OPENMP=yes\n\n# --------------------------------------------------------------------\n#                                                       Error Messages\n# --------------------------------------------------------------------\n\nerr_no_arch  =\nerr_no_arch +=$(shell echo \"** Unknown host architecture '$(UNAME)'. This identifier\"   1>&2)\nerr_no_arch +=$(shell echo \"** was obtained by running 'uname -sm'. Edit the Makefile \" 1>&2)\nerr_no_arch +=$(shell echo \"** to add the appropriate configuration.\"                   1>&2)\nerr_no_arch +=config\n\nerr_internal  =$(shell echo Internal error)\nerr_internal +=internal\n\nerr_spaces  = $(shell echo \"** VLFeat root dir VLDIR='$(VLDIR)' contains spaces.\"  1>&2)\nerr_spaces += $(shell echo \"** This is not supported due to GNU Make limitations.\" 1>&2)\nerr_spaces +=spaces\n\n# --------------------------------------------------------------------\n#                                             Auto-detect architecture\n# --------------------------------------------------------------------\n\nDarwin_PPC_ARCH := mac\nDarwin_Power_Macintosh_ARCH := mac\nDarwin_i386_ARCH := maci64\nDarwin_x86_64_ARCH := maci64\nLinux_i386_ARCH := glnx86\nLinux_i686_ARCH := glnx86\nLinux_unknown_ARCH := glnx86\nLinux_x86_64_ARCH := glnxa64\n\nUNAME := $(shell uname -sm)\nARCH ?= $($(shell echo \"$(UNAME)\" | tr \\  _)_ARCH)\n\n# sanity check\nifeq ($(ARCH),)\ndie:=$(error $(err_no_arch))\nendif\n\nifneq ($(VLDIR),$(shell echo \"$(VLDIR)\" | sed 's/ //g'))\ndie:=$(error $(err_spaces))\nendif\n\n# --------------------------------------------------------------------\n#                                                        Configuration\n# --------------------------------------------------------------------\n\nVLDIR ?= .\nLIBTOOL ?= libtool\n\nSTD_CLFAGS = $(CFLAGS)\nSTD_CFLAGS += -std=c99\nSTD_CFLAGS += -Wall -Wextra\nSTD_CFLAGS += -Wno-unused-function -Wno-long-long -Wno-variadic-macros\nSTD_CFLAGS += $(if $(DEBUG), -DDEBUG -O0 -g, -DNDEBUG -O3)\nSTD_CFLAGS += $(if $(PROFILE), -g)\n\nSTD_LDFLAGS = $(LDFLAGS)\n\n# Architecture specific ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Detect compiler\nCOMPILER_VER_STRING:=$(shell $(CC) --version) $(shell $(CC) -v 2>&1)\nCOMPILER:=other\n\nifneq ($(shell echo \"$(COMPILER_VER_STRING)\" | grep \"gcc\"),)\nCOMPILER:=gcc\nCOMPILER_VER:=$(shell \\\n$(CC) -dumpversion | \\\nsed -e 's/\\.\\([0-9][0-9]\\)/\\1/g' \\\n    -e 's/\\.\\([0-9]\\)/0\\1/g' \\\n    -e 's/^[0-9]\\{3,4\\}$$/&00/' )\nendif\n\nifeq \"$(findstring clang,$(COMPILER_VER_STRING))\" \"clang\"\nCOMPILER:=clang\nCOMPILER_VER:=$(shell \\\necho \"$(COMPILER_VER_STRING)\" | \\\nsed -n -e 's/.*version *\\([0-9.][0-9.]*\\).*/\\1/p;' | \\\nsed -e 's/\\.\\([0-9][0-9]\\)/\\1/g' \\\n    -e 's/\\.\\([0-9]\\)/0\\1/g' \\\n    -e 's/^[0-9]\\{3,4\\}$$/&00/' )\nendif\n\n$(info Detected compiler: $(COMPILER) $(COMPILER_VER))\nifeq \"$(COMPILER_VER)\" \"other\"\n$(warning Unsupported compiler detected, use at your own risk!)\nendif\n\nifeq \"$(COMPILER)\" \"gcc\"\nifeq \"$(shell expr $(COMPILER_VER) \\<= 40600)\" \"1\"\nifneq \"$(DISABLE_AVX)\" \"no\"\n$(info GCC <= 4.6.0 detected, disabling AVX.)\nDISABLE_AVX:=yes\nendif\nendif\nendif\n\nifeq \"$(COMPILER)\" \"clang\"\nifneq \"$(DISABLE_OPENMP)\" \"no\"\n$(info Clang does not support OpenMP yet, disabling.)\nDISABLE_OPENMP:=yes\nendif\nendif\n\n# Mac OS X Intel\nifeq \"$(ARCH)\" \"$(filter $(ARCH),maci maci64)\"\nifeq \"$(ARCH)\" \"maci\"\nmarch=32\nelse\nmarch=64\nendif\nSDKROOT ?= $(shell xcrun -sdk macosx --show-sdk-path)\nMACOSX_DEPLOYMENT_TARGET ?= 10.4\nSTD_CFLAGS += -m$(march) -isysroot $(SDKROOT) -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET)\nSTD_LDFLAGS += -Wl,-syslibroot,$(SDKROOT) -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET)\nendif\n\n# Linux\nifeq \"$(ARCH)\" \"$(filter $(ARCH),glnx86 glnxa64)\"\nifeq \"$(ARCH)\" \"glnx86\"\nmarch=32\nelse\nmarch=64\nendif\n# Target compatibility with GLIBC 2.3.4\n# 1) _GNU_SOURCE avoids using isoc99_fscanf, limiting binary portability to recent GLIBC.\n# 2) -fno-stack-protector avoids using a feature requiring GLBIC 2.4\nSTD_CFLAGS += -m$(march) -D_GNU_SOURCE -fno-stack-protector\nSTD_LDFLAGS += -m$(march) -Wl,--rpath,\\$$ORIGIN/ -Wl,--as-needed\nendif\n\n# Convert back DISALBE_*=\"no\" flags to be empty\nifeq \"$(DISABLE_SSE2)\" \"no\"\noverride DISABLE_SSE2:=\nendif\nifeq \"$(DISABLE_AVX)\" \"no\"\noverride DISABLE_AVX:=\nendif\nifeq \"$(DISABLE_THREADS)\" \"no\"\noverride DISABLE_THREADS:=\nendif\nifeq \"$(DISABLE_OPENMP)\" \"no\"\noverride DISABLE_OPENMP:=\nendif\n\n# --------------------------------------------------------------------\n#                                                            Functions\n# --------------------------------------------------------------------\n\n# $(call if-like,FILTER,WHY,WHAT)\ndefine if-like\n$(if $(filter $(1),$(2)),$(3))\nendef\n\n# $(call dump-var,VAR) pretty-prints the content of a variable VAR on\n# multiple columns\nifdef VERB\ndefine dump-var\n@echo \"$(1) =\"\n@echo \"$($(1))\" | sed 's/\\([^ ][^ ]* [^ ][^ ]*\\) */\\1#/g' | \\\ntr '#' '\\n' | column -t | sed 's/\\(.*\\)/  \\1/g'\nendef\nelse\ndefine dump-var\n@printf \"%15s = %s\\n\" \"$(1)\" \\\n\"$$(echo '$($(1))' | sed -e 's/[^ ][^ ]* /\\.\\.\\./3' -e 's/\\.\\.\\..*$$/\\.\\.\\./g')\"\nendef\nendif\n\n# $(call echo-var,VAR) pretty-prints the content of a variable VAR on\n# one line\ndefine echo-var\n@printf \"%15s = %s\\n\" '$(1)' '$($(1))'\nendef\n\n# $(call echo-title,TITLE) pretty-prints TITLE as a title\ndefine echo-title\n@printf \"** %s\\n\" '$(1)'\nendef\n\n# $(call C, CMD) runs $(CMD) silently\ndefine C\n@printf \"%15s %s\\n\" '$(1)' '$(@)'\n$(Q)\"$($(1))\"\nendef\n\n# If verbose print everything\nifdef VERB\nQ=\nelse\nQ=@\nendif\n\n# Greater or equal: returns the empty string if $1 >= $2, otherwise returns 'false',\n# where the arguments are integer numbers\ngt = $(shell if [ \"$(1)\" -lt \"$(2)\" ] ; then echo false ; fi)\n\n# rule to create a directory\n.PRECIOUS: %/.dirstamp\n%/.dirstamp :\n\t@printf \"%15s %s\\n\" MK \"$(dir $@)\"\n\t@mkdir -p $(dir $@)\n\t@echo \"Directory generated by make.\" > $@\n\n# $(call gendir, TARGET, DIR1 DIR2 ...) creates a target TARGET-dir that\n# triggers the creation of the directories DIR1, DIR2\ndefine gendir\n$(1)-dir=$(foreach x,$(2),$(x)/.dirstamp)\nendef\n\n# --------------------------------------------------------------------\n#                                                                Build\n# --------------------------------------------------------------------\n\n# Each Makefile submodule appends appropriate dependencies to the all,\n# clean, archclean, distclean, and info targets. In addition, it\n# appends to the deps and bins variables the list of .d files (to be\n# inclued by make as auto-dependencies) and the list of files to be\n# added to the binary distribution.\n\n.PHONY: clean, archclean, distclean, info, help\nno_dep_targets := clean archclean distclean info help\n\ninclude make/dll.mak\ninclude make/bin.mak\ninclude make/matlab.mak\ninclude make/octave.mak\ninclude make/doc.mak\ninclude make/dist.mak\n\nclean:\n\trm -f  `find . -name '*~'`\n\trm -f  `find . -name '.DS_Store'`\n\trm -f  `find . -name '.gdb_history'`\n\trm -f  `find . -name '._*'`\n\trm -rf ./results\n\narchclean: clean\n\ndistclean:\n\ninfo:\n\t$(call echo-title,General settings)\n\t$(call dump-var,deps)\n\t$(call echo-var,PROFILE)\n\t$(call echo-var,DEBUG)\n\t$(call echo-var,VER)\n\t$(call echo-var,ARCH)\n\t$(call echo-var,CC)\n\t$(call echo-var,COMPILER)\n\t$(call echo-var,COMPILER_VER)\n\t$(call echo-var,STD_CFLAGS)\n\t$(call echo-var,STD_LDFLAGS)\n\t$(call echo-var,DISABLE_SSE2)\n\t$(call echo-var,DISABLE_AVX)\n\t$(call echo-var,DISABLE_THREADS)\n\t$(call echo-var,DISABLE_OPENMP)\n\t@printf \"\\nThere are %s lines of code.\\n\" \\\n\t`cat $(m_src) $(mex_src) $(dll_src) $(dll_hdr) $(bin_src) | wc -l`\n\n# Holw help works: cat this file,\n# skip the first block until an empty line is found (twice)\n# print the first block until an empty line,\n# remove the `# ' prefix from each remaining line\n\nhelp:\n\t@cat Makefile | \\\n\tsed -n '1,/^$$/!p' | \\\n\tsed -n '1,/^$$/!p' | \\\n\tsed -n '1,/^$$/p' | \\\n\tsed 's/^# \\{0,1\\}\\(.*\\)$$/\\1/'\n\n# --------------------------------------------------------------------\n#                                                 Include dependencies\n# --------------------------------------------------------------------\n\n.PRECIOUS: $(deps)\n\nifeq ($(filter $(no_dep_targets), $(MAKECMDGOALS)),)\n-include $(deps)\nendif\n", "encoding": "ascii"}