{"url": "https://www.ics.uci.edu/~eppstein/gina/vidgames.html", "content": "<HTML><HEAD>\n<TITLE>Geometry in Action: Game Programming</TITLE>\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\"\nhref=\"http://www.ics.uci.edu/~eppstein/gina/gina.rss\" />\n</HEAD><BODY BGCOLOR=\"#FFFFFF\" TEXT=\"#000000\">\n<!--#config timefmt=\"%d %h %Y, %T %Z\" -->\n<DIV ALIGN=CENTER>\n<H1>\n<IMG src=\"gina.gif\" ALT=\"Geometry in Action\">\n</H1>\n</DIV>\n<HR><P>\n<H2>Video and Computer Game Programming</H2></A>\n\nVideo game programming is closely related to \n<A HREF=\"graphics.html\">computer graphics</A>,\nbut has its own special needs -- often speed is much more important\nthan verisimilitude.  Therefore rather than using slow but accurate\ngraphics techniques such as radiosity, video game engines are typically\nbased on simpler techniques such as raycasting, using binary space\npartitions as a primary geometric data structure.\nSimulation of non-player-characters in video games\noften requires some geometric computation, for instance of\nshort paths around obstacles.\nThere may also be the possibility of a connection with\n<A HREF=\"gdraw.html\">graph drawing</A>,\nfor automated layout of adventure game maps.\n<P><UL>\n<LI>For basic theoretical work on BSP trees, see two\npapers by F. Yao and M. S. Paterson: \"Efficient binary space\npartitions for hidden-surface removal and solid modeling\", 5th\nSymp. Comp. Geom. (1989) 23-32 and Disc. Comp. Geom. 5 (1990)\n485-503.  and \"Optimal binary space partitions for orthogonal\nobjects\", 1st SODA (1990) 99-113.  See also E. Torres,\n\"Optimization of the binary space partition algorithm (BSP) for the\nvisualization of dynamic scenes\", Eurographics (1990) 507-518, and\nAgarwal et al., \"<A HREF=\"http://www.cs.duke.edu/~pankaj/papers/bsp-fat.ps.gz\">Binary space partitions for fat rectangles</A>, 37th FOCS (1996).\nApparently the question of tight complexity bounds for planar\nBSP trees remains open.\n<P>\n<LI><A HREF=\"http://reality.sgi.com/bspfaq/\">The BSP tree FAQ</A> is largely devoted to implementation issues,\nand includes a description of BSP usage in DOOM.\n<P>\n<LI><A HREF=\"http://www.neversoft.com/christer/GR/game_programming_page.html\">Game\nprogramming resources</A>, C. Ericson, Neversoft Entertainment.\n<P>\n<LI><A HREF=\"http://www.gamesdomain.co.uk/gamedev/gprog.html\">The\nNexus game programming page</A>.\n<P>\n<LI>Ian Parberry's\n<A HREF=\"http://hercule.csci.unt.edu/larc/\">\nLaboratory for Recreational Computing</A>.\n<P>\n<LI><A HREF=\"http://wwwwbs.cs.tu-berlin.de/user/ki/engines.html\">3d Engines</A>\nfor real-time graphics.\n<P>\n<li><a href=\"http://164.195.100.11/netacgi/nph-Parser?p=1&u=/netahtml/search-adv.htm&r=1&f=G&l=50&d=PALL&S1=3889107.WKU.\">US\nPatent 3889107</a> covers the use of binary space partitions for hidden\nsurface removal, shadow calculation, and collision detection.\n<p>\n</UL><HR><P>\nPart of\n<A HREF=\"http://www.ics.uci.edu/~eppstein/geom.html\">Geometry in Action</A>,\na collection of applications of computational geometry.<BR>\n<A HREF=\"http://www.ics.uci.edu/~eppstein/\">David Eppstein</A>,\n<A HREF=\"http://www.ics.uci.edu/~theory/\">Theory Group</A>,\n<A HREF=\"http://www.ics.uci.edu/\">ICS</A>,\n<A HREF=\"http://www.uci.edu/\">UC Irvine</A>.<P>\n<SMALL>Semi-automatically\n<A HREF=\"http://www.ics.uci.edu/~eppstein/pubs/filter.html\">filtered</A>\nfrom a common source file.</SMALL>\n</BODY></HTML>\n", "encoding": "ascii"}