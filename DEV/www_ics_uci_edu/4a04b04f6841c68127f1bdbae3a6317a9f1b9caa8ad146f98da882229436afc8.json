{"url": "https://www.ics.uci.edu/~kay/courses/31/hw/lab8.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Tuesday, November 22, 2005 9:30 AM\" />\n<TITLE>ICS 31 Lab 8</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"33CB8976\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine.\" />     \n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n<link href=\"http://www.ics.uci.edu/~kay/courses/31/mainstyle.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<p><FONT size=\"2\"  >ICS 31 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2017</FONT></p>\n<p><FONT   SIZE=6><B>Lab Assignment 8 </B></FONT>\n</p>\n<P>This assignment is due <font  >by 10:00 p.m.</font> on Monday, November 27. Choose a new partner for this assignment, someone you haven't worked with already.<!-- Choose someone whose Thanksgiving schedule is compatible with yours; if you won't be here for lab on the day before Thanksgiving, pick someone who's able to work with you for a few extra out-of-lab hours some other time.</P>\n\n<P>You may also wish to plan now for Lab Assignment 9, which will be a 10-day lab starting on Monday of the ninth week (that's Thanksgiving week) and ending on Wednesday of the tenth week. We stretch this lab over two weeks to accommodate different Thanksgiving break schedules: You should choose a partner whose Thanksgiving schedule is compatibe with yours; if you won't be here for lab on the day before Thanksgiving, pick someone who's able to work with you for a few extra out-of-lab hours before then.</P>\n-->\n This assignment spans the Thanksgiving weekend and includes the following Monday, to give you some flexibility over the holiday.  Pick a partner whose schedule is compatible with yours; if you don't plan to be in lab on the Wednesday before Thanksgiving, for example, arrange in advance with your partner another time to spend a couple of hours working. \n<P> <em>Do not</em> engage in any of the following practices; they are not acceptable and may result in reduced scores or worse: (i) working solo (this lab, like all labs in this course, is a pair programming assignment); (ii) splitting the lab with your partner (&quot;You do (c) and (d), I'll do (e) and (f)&quot; and just pasting the the parts together and turning them in\u2014this is not pair programming and both partners won't learn the concepts (which of course may show up on exams or in later courses); (iii) working with someone other than your official partner. Points (ii) and (iii) could land you in academic honesty trouble, too: If you don't participate in the development of everything you turn in, you don't know whether your partner might have gotten code from an illegitimate source, and since you're responsible for code submitted by your partner, you could get into hot water for what your partner did. Too many people landed in trouble just this way in last quarter's class. You and your official partner should collaborate on your own joint work. If collaborating means you don't get quite as far as you might have gotten by one of these other impermissible strategies, your score will still be higher than if you're detected doing something impermissible.\n<p>Reports from the lab indicate that some students are still not reading the lab problems carefully (if at all). You can't succeed (as a programmer or in this class) if you just skim the problem specifications to &quot;get the general idea&quot; (you can do that the first time through, but then you have to go back to read it in detail, and check back yet again when you run into questions or difficulties). We've said this before, but it bears repeating: Read the problem more\n  than once to be sure you understand precisely what your\n  code is supposed to do.  Come up with some examples that\n  show the code's behavior, inputs or arguments and their\n  expected results.  (These will become your assertions or\n  other tests.)  Follow the <a href=\"http://www.ics.uci.edu/~kay/courses/31/design-recipe.html\">design recipe</a>:  annotations of\n  the types of the parameters and the return value;\n  docstring comments to give a brief \"purpose statement\";\n  assertions or other tests.  The TAs and tutors won't be\n  able to help you unless and until you can show them\nthese things.</P>\n<P>&nbsp;</P>\n<P><font  ><strong>Preparation</strong></font> (Do this part individually)</P>\n<P><font  ><strong>(1)</strong></font> If you need to go back and re-read some of the assigned portions of the textbook, this is your opportunity to do that. Also, (re-)read section 5.3 in the Perkovic text.</P>\n<!--<P><strong>(for Zyante readers)</strong> Read sections 5.10\u20135.12, 6.1\u20136.3.</P>\n<P><strong>(for Perkovic readers)</strong> Read section 5.3.</P>-->\n<P><font  ><strong>(2) </strong></font><font  >We will <a href=\"http://www.ics.uci.edu/~kay/python/ICStunes0.py\">post some code</a> to implement a music-management program like the one we worked on in class.</font> If you're using your own computer, download and run this code to make sure it works in your environment. Then you should read it. Reading code is an important skill, one that beginning programmers ignore too often. Sure, code isn't as easy to read as a novel; you need to go over it carefully and ask yourself what it does and how it works. Don't let this intimidate you! Just take it one function at a time.</P>\n<p>&nbsp;</p>\n<p><font  ><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>\n<p><strong>(a) </strong>Choose a partner for this assignment and register your partnership using the <a href=\"http://ics31-partner-app.appspot.com/\">partner app</a>, ideally by Monday. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab.</p>\n<p><strong>(b)</strong> Prepare your <code>lab8.py</code> file as in previous labs, including a line like this: </p>\n<pre>\n#  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 8.\n</pre>\n<p><strong>(c) </strong>     Complete the following set of exercises, using the definition <code>Dish = namedtuple('Dish', 'name price calories')</code>:\n\n<p><strong>(c.1)</strong> Download this file and save it in the directory where you've saved your <code>lab8.py</code> file: \n<a href=\"http://www.ics.uci.edu/~kay/courses/31/hw/menu1.txt\">http://www.ics.uci.edu/~kay/courses/31/hw/menu1.txt</a>.  [In your downloaded copies, keep the filename <code>menu1.txt</code>; changing it interferes with accurate grading.]</p>\n<p>Take a look at the file's contents:  Its first line is a number; it says how many more lines are in the file.  Each remaining line represents one Dish, with its three field values separated from one another with a tab (<code>\\t</code>) character.</p>\n<p>\nWrite a function called <code>read_menu_with_count</code> that  takes as an\nargument a string naming a file in this format, reads the file, and returns a list of Dish structures created  from the data.  (With the list returned by this function, you could print out a menu (dishlist) as you did in a previous lab. You don't have to do that again here; we're just noting how the components might fit.).  Note that the price and calories fields are numbers, so you'll have to convert the text data you read (including getting rid of the dollar sign).</p>\n<p>Test that your code also works with this file:\n<a href=\"http://www.ics.uci.edu/~kay/courses/31/hw/menu2.txt\">http://www.ics.uci.edu/~kay/courses/31/hw/menu2.txt</a>. [Again, use the same file name,  <code>menu2.txt</code>.]</p>\n\n<!-- Solution (to a previous version of the problem)\ndef read_menu(filename: str) -> list:\n\t''' Takes as input a filename to a menu text file\n\tand returns a list of Dish namedtuple objects in that file.\n\t'''\n\tresult = []\n\tinfile = open(filename, 'r')\n\tnum_dish = int(infile.readline())\n\tfor i in range(num_dish):\n\t\tline = infile.readline()\n\t\tline = line.strip().split(' ')\n\t\tresult.append(Dish(line[0], line[1], int(line[2])))\n\tinfile.close()\n\treturn result\n\ntest = read_menu('menu1.txt')\ntest2 = read_menu('menu2.txt')\n\n-->\n<p><strong>(c.2)</strong> Next, download and examine this file:\n<a href=\"http://www.ics.uci.edu/~kay/courses/31/hw/menu3.txt\">http://www.ics.uci.edu/~kay/courses/31/hw/menu3.txt</a>.\n[And don't rename it.] It's similar to the others, in that it contains lines with Dish information.  But there's no count of lines at the top of the file; there's just the data.</p>\n<p>\nWrite a function called <code>read_menu</code> that  takes as an\nargument a string naming a file in this format, reads the file, and returns a list of Dish structures created  from the data.\n</p>\n\n\n<!-- Solution to an earlier version of the problem\ndef read_menu2(filename: str) -> list:\n\t''' Takes as input a filename to a menu text file\n\tand returns a list of Dish namedtuple objects in that file.\n\t'''\n\tresult = []\n\tinfile = open(filename, 'r')\n\twhile True:\n\t\tline = infile.readline()\n\t\tif line == '':\n\t\t\tbreak\n\t\tline = line.strip().split(' ')\n\t\tresult.append(Dish(line[0], line[1], int(line[2])))\n\n\tinfile.close()\n\treturn result\n\nprint(read_menu2('menu3.txt'))\n-->\n\n<p>\n<strong>(c.3)</strong> Implement the function <code>write_menu</code> that takes as its argument a list of Dish namedtuples and a string that names a file.\nYour function should write the Dish data to the named file (in the first format, with the number of dishes on the first line). </p>\n<p>After you finish your own testing, comment out or remove all calls to <code>read_menu()</code>, <code>read_menu_with_count()</code>, and <code>write_menu()</code> from your <code>lab8.py</code> file. The automated checker will supply all necessary calls to these functions.</p>\n\n<!--\nSolution to an earlier version\ndef write_menu(dishes: 'list of dishes', filename: str) -> None:\n\toutfile = open(filename, 'w')\n\tfor dish in dishes:\n\t\toutfile.write('{} {} {}'.format(dish.name, dish.price, dish.cal))\n\t\toutfile.write('\\n')\n\toutfile.close()\n\nwrite_menu(test, 'test.txt')\nwrite_menu(test2, 'test2.txt')\n\n-->\n\n\n<p><strong>(d) </strong>These definitions should be familiar:</p>\n<pre><code>  Course = namedtuple('Course', 'dept num title instr units')\n  # Each field is a string except the number of units\n  ics31 = Course('ICS', '31', 'Intro to Programming', 'Kay', 4.0)\n  ics32 = Course('ICS', '32', 'Programming with Libraries', 'Thornton', 4.0)\n  wr39a = Course('Writing', '39A', 'Intro Composition', 'Alexander', 4.0)\n  wr39b = Course('Writing', '39B', 'Intermediate Composition', 'Gross', 4.0)\n  bio97 = Course('Biology', '97', 'Genetics', 'Smith', 4.0)\n  mgt1  = Course('Management', '1', 'Intro to Management', 'Jones', 2.0)\n  \n  Student = namedtuple('Student', 'ID name level major studylist')\n  # All are strings except studylist, which is a list of Courses.\n  sW = Student('11223344', 'Anteater, Peter', 'FR', 'PSB', [ics31, wr39a, bio97, mgt1])\n  sX = Student('21223344', 'Anteater, Andrea', 'SO', 'CS', [ics31, wr39b, bio97, mgt1])\n  sY = Student('31223344', 'Programmer, Paul', 'FR', 'COG SCI', [ics32, wr39a, bio97])\n  sZ = Student('41223344', 'Programmer, Patsy', 'SR', 'PSB', [ics32, mgt1])\n  \n  StudentBody = [sW, sX, sY, sZ]</code>\n</pre>\n<p> \n  <strong>(d.1)</strong> Define the function <code>Students_at_level</code> that takes a list of Students and a string\n  (representing a class level, e.g., <code>'FR'</code>  or <code>'SO'</code>) and returns a list of students whose class\n  level matches the parameter.\n</p>\n<!--        \ndef Students_at_level(SL: [Student], level_to_match: str) -> [Student]:\n''' Return students whose class level matches the parameter\n'''\nresult = [ ]\nfor s in SL:\nif s.level == level_to_match:\nresult.append(s)\nreturn result\nassert(Students_at_level([], 'FR') == [])\nassert(Students_at_level(StudentBody, 'GR') == [])\nassert(Students_at_level(StudentBody, 'FR') == [sW, sY])\nassert(Students_at_level(StudentBody, 'SO') == [sX])\n-->\n<p>This kind of task is called <strong>filtering</strong>: It takes a list and returns just selected items from that list, according to\nsome selection criterion (in this case, matching the class level).</p>\n<p><strong>(d.2)</strong>  Define the function <code>Students_in_majors</code>  that does another filtering task:\n    It takes a list of Students\nand a list of strings (where each string represents a major) and returns a list of Students that have majors on\nthe specified list.\n</p>\n<!--        \ndef Students_in_majors(SL: [Student], ML: [str]) -> [Student]:\n''' Return students whose major is on the list ML\n'''\nresult = [ ]\nfor s in SL:\nif s.major in ML:\nresult.append(s)\nreturn result\n\nassert(Students_in_majors([ ], [ ]) == [ ])\nassert(Students_in_majors([ ], ['ICS', 'CGS', 'SE' ]) == [ ])\nassert(Students_in_majors(StudentBody, ['COG SCI', 'PSB', 'UBW']) == [sW, sY, sZ])\nassert(Students_in_majors(StudentBody, ['PSB']) == [sW, sZ])\nassert(Students_in_majors(StudentBody, ['UBW', 'AE']) == [ ])\nassert(Students_in_majors(StudentBody, ['CS']) == [sX])\n-->\n<p><strong>(d.3)</strong>  Define the function <code>Students_in_class</code>  that takes a list of Students, and two strings\u2014a department name\nand a course number (e.g., <code>'ICS'</code>  and <code>'31'</code>)\u2014and returns a list of those Students who \n    are enrolled in the\nspecified class.  You should include definitions of these functions (for more context, see the Winter 2013 second midterm):</p>\n<pre><code>def Course_equals(c1: Course, c2: Course) -> bool:\n    ''' Return True if the department and number of c1 match the department and\n\t     number of c2 (and False otherwise)\n    '''\n<!-- return c1.dept == c2.dept and c1.num == c2.num -->def Course_on_studylist(c: Course, SL: 'list of Course') -> bool:\n    ''' Return True if the course c equals any course on the list SL (where equality\n\t     means matching department name and course number) and False otherwise.\n    '''\n<!-- for a_course in SL:\n    if Course_equals(c, a_course):\n        return True\n    return False  -->def Student_is_enrolled(S: Student, department: str, coursenum: str) -> bool:\n    ''' Return True if the course (department and course number) is on the student's\n\t     studylist (and False otherwise)\n    '''</code></pre>\n<!--        \ndef Students_in_class(SL: [Student], department: str, coursenum: str) -> [Student]:\n''' Return a list of all students in SL who are enrolled in the designated class\n'''\nresult = [ ]\nfor s in SL:\nif Student_is_enrolled(s, department, coursenum):\nresult.append(s)\nreturn result\nassert(Students_in_class([ ], 'ICS', '31') == [ ])\nassert(Students_in_class(StudentBody, 'UBW', '175CW') == [ ])\nassert(Students_in_class(StudentBody, 'ICS', '31') == [sW, sX])\nassert(Students_in_class(StudentBody, 'Writing', '39B') == [sX])\nassert(Students_in_class(StudentBody, 'Management', '1') == [sW, sX, sZ])\n-->\n<p><strong>(d.4)</strong>  Define the function <code>Student_names</code> that takes a list of Students and\nreturns a list of just the <i>names</i> of those students.\nThis is called a <strong>mapping</strong> operation:  We apply one operation (extracting the\nname in this case) to every item on a list and collect the results.</p>\n<!--        \ndef Student_names(SL: [Student]) -> [str]:\n''' Return a list of the names of each student in SL\n'''\nresult = [ ]\nfor s in SL:\nresult.append(s.name)\nreturn result\n-->\n<p><strong>(d.5)</strong>  By using these (and similar) filtering and mapping operations, you can easily compute\nresults like the following:\n<ul>     \n<li>\n    A list of Students who are majors from the School of ICS (those majors are\n<code>['CS', 'CSE', 'BIM', 'INFX', 'CGS', 'SE', 'ICS']</code>)\n</li>\n<li>     \nA list of the <em>names</em> of Students who are majors from the School of ICS </li>\n<li>\n     The number of Students who are majors from the School of ICS. This is called a <strong>reducing</strong> operation (or sometimes<strong> folding</strong> or <strong>accumulating</strong>)\u2014it reduces a sequence down to a single value (e.g., by adding up the items)</li>\n<li>\n    A list of the names of seniors who are majors in the School of ICS\n</li><li>\n    The number of seniors who are majors from the School of ICS\n</li><li>\n    The percentage of majors from the School of ICS who are seniors\n</li><li>\n    The number of freshmen who are majors from the School of ICS and enrolled in ICS 31\n</li>\n<li>The average number of units that freshmen in ICS 31 are enrolled in</li>\n</ul>\n<p>For each quantity described above, write a statement (or short series of statements)\nto compute and print it.  Enhance your test data collection so you can run meaningful\ntests; you may share test data with your classmates outside your pairs.\n</p> <p><strong>(e)</strong> Download  the ICStunes program on the lab machine (or whatever machine you and your partner are using) and run it to make sure it works. As you work on this part, make your changes in (copies of) the <code>ICStunes.py</code> file you downloaded; use your <code>lab8.py</code> file for the other parts of this assignment.</p>\n<p><strong>(e.1)</strong> Write a function called<code> Song_str </code>that takes a song and returns a string containing that song's information in an easily readable format suitable for printing. You may choose the exact layout.</p>\n<p>Then write a function called<code> Album_str</code> that takes an album and returns a string containing that album's information (including the <code>Song_str</code> information for each song on the album) in an easily readable format suitable for printing.</p>\n<p>Test your functions by printing a couple of the sorted collections from the first part of the ICStunes file.</p>\n<p>Finally, write a function called <code>Songdisplay_str</code> that takes a Songdisplay and returns a string containing that information in an easily readable form suitable for printing. Test it using the results of <code>top_n_played</code> (located at the bottom of the ICStunes file).</p>\n<p><strong>(e.2)</strong> As we did previously with the albums' year, title, length, and ID, write a key function and a call to the <code>sort()</code> method to sort the collection<code> MUSIC</code> by the number of tracks on each album, lowest to highest; then print the resulting collection using<code> Album_str</code>. </p>\n<p>Next, sort the collection <code>MUSIC</code> by some <em>other</em> key to rearrange it. Then perform the number-of-tracks sorting task by calling<code> collection_sort</code> and then printing the resulting sorted collection.</p>\n<p><strong>(e.3)</strong>\nWrite a function called <code>unplayed_songs</code> that takes a music collection (a list of albums) and returns a list of Songdisplays, one for each song that has never been played. Print the resulting list using <code>Songdisplay_str</code>. [Please note: At this point it should be clear to everyone that the print statement does not go inside the <code>unplayed_songs</code> function. That function, as specified above, <em>returns</em> a list of Songdisplays; you print that result <em>in the calling program\u2014where you call the function.</em> That's what this problem specifies.] </p>\n<p><strong>(e.4)</strong> Write a function called <code>length_from_songdisplay</code> that takes a Songdisplay and returns the length of the song. (This is quick and easy.)</p>\n<p><strong>(e.5)</strong> Write a function called <code>favorite_album</code> that takes a list of albums and returns the album that is the \"favorite.\" We'll define the favorite album as the one that the user has spent the most time listening to.  [The total time the user has spent listening to an album is computed from the play counts and the song lengths.] </p>\n<p>Try to work out this function out together; that's how you learn. Use the following hints only if you're totally stuck (and then take them just one at a time): (i) Write a function <code>Song_listening_time</code> that takes a single song and returns the total number of seconds the user has spent listening to it (see above). (ii) Write a function <code>Album_listening_time</code> that takes an album and returns the total listening time for all the songs in an album together. (iii) Use <code>sort()</code> or <code>collection_sort</code> and the functions you defined to implement <code>favorite_album</code>.</p>\n<p>Figure out by hand which album in the collection<code> MUSIC</code> has the greatest listening time (it's okay to collaborate with your classmates outside of your partnership on this specific fact); then print (using<code> Album_str</code>, of course) the result of calling<code> favorite_album</code> on the collection<code> MUSIC</code> and see if it matches. [Hint: Songdisplays aren't involved in this part.]</p>\n<p><strong>(e.6) </strong>Generalize the<code> top_n_played </code>function (i.e, make it apply to a broader range of criteria than just play counts) as follows: Write a function called<code> top_n </code>that takes a list of albums and a number, as before, plus two additional parameters\u2014(the name of) a function we can use as a sort key for comparing albums and a Boolean (that's true if you want the <em>n</em> highest values and false if you want the <em>n</em> lowest). Thus, you could use the new <code>top_n</code> to produce the same result as\n<code>top_n_played</code> by calling <pre><code>top_n(MUSIC, 3, play_count_from_songdisplay, True)</code></pre> \n<p>and you could use it to produce the 10 shortest songs by calling\n<pre><code>top_n(MUSIC, 10, length_from_songdisplay, False)</code></pre> \n<p><strong>(e.7)</strong> Total listening time isn't the only way of determining a favorite album. Generalize your <code>favorite_album</code> function by writing a function called  <code>favorite_album2</code> that takes a list of albums and a second argument\u2014a &quot;favorite measurement function&quot; that  <code>favorite_album2</code> can apply to each album, comparing those results to determine the favorite. This call to   <code>favorite_album2</code> would behave the same way as a call to the original   <code>favorite_album</code> function:</p>\n<pre><code>favorite_album2(MUSIC, Album_listening_time)</code>\n</pre>\n<p>Write at least one example of a favorite measurement function other than total listening time. Then test your   <code>favorite_album2</code> function by applying that new function. [Hint: Songdisplays aren't involved in this part.]</p>\n<p><strong>(e.8)</strong> Music manager programs typically provide a search box into which you can type a keyword; the program then searches your collection for songs containing that keyword in their title, their artist, or their album's title. Write a function called  <code>collection_search</code> that behaves in the same way, taking a collection and a string as parameters and returning a list of Songdisplays of songs whose title, artist, or album title include that string. (We hope you notice that this task is similar to one you've already done in a recent lab.)</p>\n<p><strong>(e.9) </strong>Submit your <code>ICStunes.py</code> file (including your modifications and any of the original code that you didn't modify) via Checkmate. Running your file should demonstrate the operation of each part of this problem.</p>\n<p><strong>(f)</strong>\nRead over the &quot;<a href=\"http://www.ics.uci.edu/~kay/courses/31/hw/BandB.html\">Anteater Bed and Breakfast</a>&quot; problem. This will be a large part of Lab Assignment 9; it will be helpful for you to get a head start by reading the specification and learning what it's all about.\n</p>\n<p>Then write and submit a solution to Stage I of the BandB problem, in a file called <code>BandBI.py</code>. Do not solve or submit more than Stage I; that's for the next lab with a new partner.</p>\n<p>For Stage I in this assignment, the \"main function\" in your code should be named <code>BandB</code>; it should take no arguments, it should prompt the user (using <code>input()</code>) for the name of the command file, and it should print its results (to the normal place, the console).  The last line of your <code>BandBI.py</code> file should be a call to <code>BandB()</code>; that will start things up. Some of this will change slightly in the next lab assignment. </p>\n<p><strong></strong><strong>(g)</strong> If time permits, take the opportunity to go back and finish any of the previous weeks' lab problems that you didn't complete. The point of this is less for credit than to let you gain the experience that those problems provided. You may do this with your current partner or individually.</p>\n<p><strong>(h)</strong> Remember that each partner must complete a partner evaluation form and submit it individually. Do this using the <a href=\"http://ics31-partner-app.appspot.com/\">partner app</a>. Make sure you know your partner's name, first and last, so you can evaluate the right person.\n  <!-- Some students have been forgetting to specify their partner's name on the survey; from now on, if you forget your partner's name we won't give you credit for completing the evaluation.-->\nPlease complete your evaluation by the end of the day on Monday, or Tuesday night at the latest. It only takes a couple of minutes and not doing it hurts your participation score.</p>\n<p><strong>What to turn in:</strong> Submit via Checkmate  your  <code>lab8.py</code> file containing your solutions to parts (c) and (d), your <code>ICStunes.py</code> file with your solutions to part (e), and your <code>BandBI.py</code> file with your solution to part (f). Remember what we've said in previous labs about rereading the assignment and rerunning your Python files.</p>\n<p>Also remember that each student must complete a partner evaluation form in the usual manner; these evaluations contribute to your class participation score. </p>\n<p>&nbsp;</p>\n<p><font face=\"Helvetica\" size=\"1\">Written by David G. Kay in Fall 2012 for ICS 31, based in part on assignments from ICS H21 and Informatics 41. Modified by David G. Kay, Winter 2013  Fall 2013, Winter 2014, Winter 2015, Fall 2015, Spring 2017.</font></p>\n<br class=\"Apple-interchange-newline\">\n<HR />\n<FONT  ><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\"  >\n<!-- #BeginDate format:fcAm1a -->Thursday, November 23, 2017 4:43 PM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "utf-8"}