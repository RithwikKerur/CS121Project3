{"url": "https://www.ics.uci.edu/~kay/scheme/infx-tunes.rkt", "content": "\n;; InfxTunes:  A Music Manager\n;; Originally by Alex Thornton, Fall 2006.\n;; Modified by David G. Kay, Fall 2007 and Fall 2008.\n;; Use DrScheme's Intermediate Student with Lambda language.\n\n\n;                                                                        \n;         ;;  ;;                                                         \n;          ;   ;                                                         \n;          ;   ;                                                         \n;    ;;    ;   ;;;;; ;;  ;; ;; ;;; ;;;         ;;;;; ;;;;  ;; ;;;   ;;;; \n;   ;  ;   ;   ;   ;; ;   ;  ;;  ;;  ;         ;   ;;;  ;;  ;;  ;  ;  ;  \n;   ;  ;   ;   ;    ; ;   ;  ;   ;   ;         ;   ;;    ;  ;   ;  ;  ;  \n;   ;;;; ; ;   ;    ; ;   ;  ;   ;   ;         ;;;; ;    ;  ;   ;   ;;   \n;   ;  ; ; ;   ;   ;; ;   ;  ;   ;   ;         ;  ;;;;  ;;  ;   ;  ;     \n;   ;;;;;;;;;  ;;;;;  ;;;;;;;;; ;;; ;;; ;;     ;;;;  ;;;;  ;;; ;;; ;;;;  \n;                                        ;                         ;   ; \n;                                       ;                          ;   ; \n;; An album is:\n;;   * a unique ID number [number]\n;;   * an artist [string]\n;;   * a title [string]\n;;   * a year of release [number]\n;;   * a list of songs [list-of-songs]\n\n;; A song is:\n;;   * a track number [number]\n;;   * a title [string]\n;;   * a length in seconds [number]\n;;   * a play count [number] - how many times have I listened to it?\n\n(define-struct album (id artist title year songs))\n(define-struct song (track-num title length play-count))\n\n(define MUSIC (list (make-album 1 \"Peter Gabriel\" \"Up\" 2002\n                              (list (make-song 1 \"Darkness\" 411 5)\n                                    (make-song 2 \"Growing Up\" 453 5)\n                                    (make-song 3 \"Sky Blue\" 397 2)\n                                    (make-song 4 \"No Way Out\" 473 2)\n                                    (make-song 5 \"I Grieve\" 444 2)\n                                    (make-song 6 \"The Barry Williams Show\" 735 1)\n                                    (make-song 7 \"My Head Sounds Like That\" 389 1)\n                                    (make-song 8 \"More Than This\" 362 1)\n                                    (make-song 9 \"Signal to Noise\" 456 2)\n                                    (make-song 10 \"The Drop\" 179 1)))\n                  (make-album 2 \"Simple Minds\" \"Once Upon a Time\" 1985\n                              (list (make-song 1 \"Once Upon a Time\" 345 9)\n                                    (make-song 2 \"All the Things She Said\" 256 10)\n                                    (make-song 3 \"Ghost Dancing\" 285 7)\n                                    (make-song 4 \"Alive and Kicking\" 326 26)\n                                    (make-song 5 \"Oh Jungleland\" 314 13)\n                                    (make-song 6 \"I Wish You Were Here\" 282 12)\n                                    (make-song 7 \"Sanctify Yourself\" 297 7)\n                                    (make-song 8 \"Come a Long Way\" 307 5)))\n                  (make-album 3 \"The Postal Service\" \"Give Up\" 2003\n                              (list (make-song 1 \"The District Sleeps Alone\" 284 13)\n                                    (make-song 2 \"Such Great Heights\" 266 13)\n                                    (make-song 3 \"Sleeping In\" 261 12)\n                                    (make-song 4 \"Nothing Better\" 226 18)\n                                    (make-song 5 \"Recycled Air\" 269 13)\n                                    (make-song 6 \"Clark Gable\" 294 12)\n                                    (make-song 7 \"We Will Become Silhouettes\" 300 11)\n                                    (make-song 8 \"This Place is a Prison\" 234 9)\n                                    (make-song 9 \"Brand New Colony\" 252 9)\n                                    (make-song 10 \"Natural Anthem\" 307 7)))\n                  (make-album 4 \"Midnight Oil\" \"Blue Sky Mining\" 1989\n                              (list (make-song 1 \"Blue Sky Mine\" 258 12)\n                                    (make-song 2 \"Stars of Warburton\" 294 11)\n                                    (make-song 3 \"Bedlam Bridge\" 266 11)\n                                    (make-song 4 \"Forgotten Years\" 266 8)\n                                    (make-song 5 \"Mountains of Burma\" 296 9)\n                                    (make-song 6 \"King of the Mountain\" 231 8)\n                                    (make-song 7 \"River Runs Red\" 322 9)\n                                    (make-song 8 \"Shakers and Movers\" 268 9)\n                                    (make-song 9 \"One Country\" 353 7)\n                                    (make-song 10 \"Antarctica\" 258 6)))\n                  (make-album 5 \"The Rolling Stones\" \"Let It Bleed\" 1969\n                              (list (make-song 1 \"Gimme Shelter\" 272 3)\n                                    (make-song 2 \"Love In Vain\" 259 2)\n                                    (make-song 3 \"Country Honk\" 187 0)\n                                    (make-song 4 \"Live With Me\" 213 2)\n                                    (make-song 5 \"Let It Bleed\" 327 2)\n                                    (make-song 6 \"Midnight Rambler\" 412 1)\n                                    (make-song 7 \"You Got the Silver\" 170 0)\n                                    (make-song 8 \"Monkey Man\" 251 13)\n                                    (make-song 9 \"You Can't Always Get What You Want\" 448 10)))))\n\n;; album-earlier?:  album  album  ->  boolean\n;; Return true if the first input's year is less than the second's\n(define album-earlier?\n (lambda (a1 a2)\n   (< (album-year a1) (album-year a2))))\n\n;; Sort the collection into chronological order.\n\n;; quicksort (predefined): (listof X) (X X -> boolean) -> (listof X)\n;; Return original list in order according to comparison function.\n(check-expect (quicksort '(23 235 24 632 14 432 36 23 113) >) (list 632 432 235 113 36 24 23 23 14))\n(check-expect (quicksort '(23 235 24 632 14 432 36 23 113) <) (list 14 23 23 24 36 113 235 432 632))\n\n(check-expect\n(quicksort MUSIC album-earlier?)\n(quicksort MUSIC (lambda (a1 a2) (< (album-year a1) (album-year a2)))))\n\n;; Sort in ascending order by album title\n\n; (quicksort MUSIC (lambda (a1 a2) (string<? (album-title a1) (album-title a2))))\n\n;; Could build a make-album-comparator function \n;; (like make-checker) to construct these functions.\n\n;  ;;;;;;;                    ;     ;;;                                      \n;     ;                      ;;    ;   ;                                     \n;     ;     ;;   ; ;;       ; ;    ;   ;     ;;;    ;;    ; ;;    ;; ;  ;;;  \n;     ;    ;  ;  ;;  ;        ;    ;   ;    ;   ;  ;  ;   ;;  ;  ;  ;; ;   ; \n;     ;   ;    ; ;    ;       ;    ;   ;    ;     ;    ;  ;   ; ;    ; ;     \n;     ;   ;    ; ;    ;       ;    ;   ;     ;;;  ;    ;  ;   ; ;    ;  ;;;  \n;     ;   ;    ; ;    ;       ;    ;   ;        ; ;    ;  ;   ; ;    ;     ; \n;     ;    ;  ;  ;;  ;        ;    ;   ;    ;   ;  ;  ;   ;   ;  ;  ;; ;   ; \n;     ;     ;;   ; ;;         ;     ;;;      ;;;    ;;    ;   ;   ;; ;  ;;;  \n;                ;                                                   ;       \n;                ;                                               ;  ;        \n;                ;                                                ;;         \n\n;; Top 10 most frequently played songs.\n\n;; Collect all the songs out of all the albums.\n;; To find the MOST frequent, just use \"king-of-the-hill\" maximum algorithm.\n;; To find the top N, though, is tricky to code that way.\n;; Better:  Take the list of songs, sort by play count, take first 10.\n\n;; Top-down approach:\n\n;; top-10-songs:  list-of-album  ->  list-of-song\n;; Return the top ten most frequently played songs in the collection.\n(define top-10-songs\n (lambda (AL) \n   (first-n 10 (quicksort (all-songs AL) play-count-greater?))))\n\n;; play-count-greater?:  song  song  ->  boolean\n;; Return true if the first song's play-count is greater than the second's.\n(define play-count-greater?\n (lambda (s1 s2)\n   (> (song-play-count s1) (song-play-count s2))))\n\n#|\n\n; We can try writing first-n by making some simplifying assumptions:\n\n;; first-n-assuming:  number  list  ->  list\n;; Return first n items on list, assuming there are at least that many\n(define first-n-assuming\n (lambda (n L)\n   (cond\n     ((zero? n) empty)\n     (else (cons (first L) (first-n (sub1 n) (rest L)))))))\n\n;; first-n-error:  number  list  ->  list\n;; Return first n items on list, throwing error if n longer than list\n(define first-n-error\n (lambda (n L)\n   (cond\n     ((> n (length L)) (error 'first-n-error \"Asking for more items than on list\"))\n     (else (first-n-assuming n L)))))\n\n; Now let's do it the way our InfxTunes application would want it:\n; If the list is shorter than n, just return the sorter list.\n\n;; first-n:  number  list  ->  list\n;; Return the first n items on the list, or the whole list if it's shorter\n\n; First, list separately the (categories of) values for each argument, L and n:\n; AFTER we consider each case separately, we can combine them to shorten the code.\n(define first-n\n (lambda (n L)\n   (cond\n     ((and (empty? L) (zero? n)) empty)\n     ((and (cons? L)  (zero? n)) empty)\n     ((and (empty? L) (positive? n)) empty)\n     ((and (cons? L)  (positive? n)) (cons (first L) (first-n (sub1 n) (rest L)))))))\n\n; First simplification:\n(define first-n\n (lambda (n L)\n   (cond\n     ((empty? L) empty)\n     ((zero? n) empty)\n     (else (cons (first L) (first-n (sub1 n) (rest L)))))))\n|#\n\n;; first-n:  number  list  ->  list\n;; Return the first n items on the list (assuming list is at least that long)\n;; If list is shorter than n, just return the shorter list.\n(define first-n\n (lambda (n L)\n   (cond\n     ((or (empty? L) (zero? n)) empty)\n     (else (cons (first L) (first-n (sub1 n) (rest L)))))))\n\n\n(check-expect (first-n 5 empty) empty)\n(check-expect (first-n 3 (list 1 2 3 4 5 6)) (list 1 2 3))\n(check-expect (first-n 1 (list 17)) (list 17))\n(check-expect (first-n 5 (list 1 2 3)) (list 1 2 3))\n(check-expect (first-n 0 (list 1 2 3)) empty)\n\n;; all-songs:  list-of-album -> list-of-songs\n;; Return a list of all the songs on all the albums\n(define all-songs\n (lambda (AL)\n   ;; (foldr append empty list-of-songlists):  ( (S1 S2 S3) (S4 S5) (S6 S7 S8 S9) )\n   (foldr append empty (map album-songs AL))))\n\n(check-expect\n(top-10-songs MUSIC)\n(list\n (make-song 4 \"Alive and Kicking\" 326 26)\n (make-song 4 \"Nothing Better\" 226 18)\n (make-song 5 \"Oh Jungleland\" 314 13)\n (make-song 1 \"The District Sleeps Alone\" 284 13)\n (make-song 2 \"Such Great Heights\" 266 13)\n (make-song 5 \"Recycled Air\" 269 13)\n (make-song 8 \"Monkey Man\" 251 13)\n (make-song 6 \"I Wish You Were Here\" 282 12)\n (make-song 3 \"Sleeping In\" 261 12)\n (make-song 6 \"Clark Gable\" 294 12)))\n;                                      ;  ;               ;                    \n;                                      ;                  ;                    \n;   ;;;    ;;    ; ;;    ;; ;       ;; ;  ;  ;;;  ; ;;    ;  ;;;   ;   ;  ;;;  \n;  ;   ;  ;  ;   ;;  ;  ;  ;;      ;  ;;  ; ;   ; ;;  ;   ; ;   ;  ;   ; ;   ; \n;  ;     ;    ;  ;   ; ;    ;     ;    ;  ; ;     ;    ;  ;    ;;  ;   ; ;     \n;   ;;;  ;    ;  ;   ; ;    ; ;;; ;    ;  ;  ;;;  ;    ;  ;  ;; ;   ; ;   ;;;  \n;      ; ;    ;  ;   ; ;    ;     ;    ;  ;     ; ;    ;  ; ;   ;   ; ;      ; \n;  ;   ;  ;  ;   ;   ;  ;  ;;      ;  ;;  ; ;   ; ;;  ;   ; ;  ;;    ;   ;   ; \n;   ;;;    ;;    ;   ;   ;; ;       ;; ;  ;  ;;;  ; ;;    ;  ;;  ;   ;    ;;;  \n;                           ;                     ;                 ;          \n;                       ;  ;                      ;                 ;          \n;                        ;;                       ;                ;           \n\n;; But these songs don't have their album information!  That's something we'd want\n;; to see if we displayed these songs on our iPod screen.\n\n;; We could flatten out our data structure, storing a copy of the album\n;; information with each song:\n;;            (make-song 5 \"Rolling Stones\" \"Let it Bleed\" 1969  1 \"Gimme Shelter\" 272 3)\n;;            (make-song 5 \"Rolling Stones\" \"Let it Bleed\" 1969  2 \"Love In Vain\" 259 2)\n;;            (make-song 5 \"Rolling Stones\" \"Let it Bleed\" 1969  3 \"Country Honk\" 197 0)\n;;            ...\n;; This would work, but there's a lot of duplicate data (wasteful of storage and error-prone).\n;; So this isn't a good way to store the data permanently.\n\n;; Instead, let's just get the album info that goes with a song WHEN WE NEED IT,\n;; during the computation.  To do this, we define a structure that contains the\n;; info we need to display a song (on our iPod screen, e.g.)---song details plus\n;; the info we need from that song's album:\n\n(define-struct song-display (artist a-title year track-num s-title play-count))\n\n;; We'll create these structures as we need them during the computation,\n;; discarding them as we're done; this doesn't affect the main, permanent\n;; list of albums (like the one we defined as MUSIC above).\n\n;; top-10-songs-to-display: list-of-album -> list-of-song-display\n;; Return song-display structures for the top 10 songs by play-count\n(define top-10-songs-to-display\n (lambda (AL)\n   (first-n 10 (quicksort (all-song-displays AL)\n                          (lambda (SD1 SD2) (> (song-display-play-count SD1)\n                                               (song-display-play-count SD2)))))))\n\n;          ;  ;                                         ;  ;               ;                    \n;          ;  ;                                         ;                  ;                    \n;   ;;;    ;  ;      ;;;    ;;    ; ;;    ;; ;       ;; ;  ;  ;;;  ; ;;    ;  ;;;   ;   ;  ;;;  \n;  ;   ;   ;  ;     ;   ;  ;  ;   ;;  ;  ;  ;;      ;  ;;  ; ;   ; ;;  ;   ; ;   ;  ;   ; ;   ; \n;     ;;   ;  ;     ;     ;    ;  ;   ; ;    ;     ;    ;  ; ;     ;    ;  ;    ;;  ;   ; ;     \n;   ;; ;   ;  ; ;;;  ;;;  ;    ;  ;   ; ;    ; ;;; ;    ;  ;  ;;;  ;    ;  ;  ;; ;   ; ;   ;;;  \n;  ;   ;   ;  ;         ; ;    ;  ;   ; ;    ;     ;    ;  ;     ; ;    ;  ; ;   ;   ; ;      ; \n;  ;  ;;   ;  ;     ;   ;  ;  ;   ;   ;  ;  ;;      ;  ;;  ; ;   ; ;;  ;   ; ;  ;;    ;   ;   ; \n;   ;;  ;  ;  ;      ;;;    ;;    ;   ;   ;; ;       ;; ;  ;  ;;;  ; ;;    ;  ;;  ;   ;    ;;;  \n;                                            ;                     ;                 ;          \n;                                        ;  ;                      ;                 ;          \n;                                         ;;                       ;                ;           \n\n;; all-song-displays:  list-of-album  ->  list-of-song-display\n;; Return a list of the display-format structures for each song on the album list\n(define all-song-displays\n  (lambda (AL)\n    (foldr append empty (map (lambda (A) ;for each album in the collection\n                               ; create-song-displays-for-this-album's-songs\n                               ;(map create-a-song-display (album-songs A))                               \n                               (map \n                                (lambda (S)\n                                  (make-song-display (album-artist A)\n                                                     (album-title A)\n                                                     (album-year A)\n                                                     (song-track-num S)\n                                                     (song-title S)\n                                                     (song-play-count S)))\n                                (album-songs A)))\n                             AL))))\n\n#|\n; Other versions of all-song-displays:\n\n; 1. Pull the song-display creation into a locally defined function\n(define all-song-displays\n (lambda (AL)\n   (foldr append empty (map (lambda (A) \n                              (local ((define song->song-display\n                                        (lambda (S)\n                                          (make-song-display\n                                             (album-artist A)\n                                             (album-title A)\n                                             (album-year A)\n                                             (song-track-num S)\n                                             (song-title S)\n                                             (song-play-count S)))))\n                                (map song->song-display (album-songs A))))\n                            AL))))\n\n; 2. Also pull into a local definition the function that handles one album\n(define all-song-displays\n  (lambda (AL)\n    (local (;; get-song-display-list:  album  ->  list-of-song-display\n            ;; Take each song in an album, turn it into a song-display, and collect them into a list\n            (define get-song-display-list\n              (lambda (A) \n                (local (;; song->song-display:  song  ->  song-display\n                        ;; Take a song and create a song-display from it\n                        (define song->song-display\n                          (lambda (S)\n                            (make-song-display\n                             (album-artist A)\n                             (album-title A)\n                             (album-year A)\n                             (song-track-num S)\n                             (song-title S)\n                             (song-play-count S)))))\n                  (map song->song-display (album-songs A))))))\n      (foldr append empty (map get-song-display-list AL)))))\n\n\n; 3.  Do it without map at all, just peeling back the layers, function by function\n\n;; all-song-displays:  list-of-album  ->  list-of-song-display\n;; Return a list of the display-format structures for every song on \n;; every album on the album list\n;; (This function goes album by album, collecting the song-display lists from each.)\n(define all-song-displays\n  (lambda (AL)\n    (cond\n      ((empty? AL) empty)\n      (else (append (get-song-display-list (first AL)) (all-song-displays (rest AL)))))))\n\n;; get-song-display-list:  album  ->  list-of-song-display\n;; Take each song in an album, turn it into a song-display, and collect them into a list\n;; (This function pulls out the song list as a separate list, for easy processing.)\n(define get-song-display-list\n  (lambda (A)\n    (construct-song-displays A (album-songs A))))\n\n;; construct-song-displays:  album  list-of-songs  ->  list-of-song-display\n;; For each song on the list, construct a song-display with the song and album info.\n(define construct-song-displays\n  (lambda (A SL)\n    (cond\n      ((empty? SL) empty)\n      (else (cons (song->song-display A (first SL)) (construct-song-displays A (rest SL)))))))\n\n;; song->song-display:  album song -> song-display\n;; Take a song and its album information and create a song-display from it.\n(define song->song-display\n(lambda (A S)\n  (make-song-display\n   (album-artist A)\n   (album-title A)\n   (album-year A)\n   (song-track-num S)\n   (song-title S)\n   (song-play-count S))))\n|#\n\n;; So now we can get our top 10 songs, with the line for each song\n;; also containing its album information.  This makes it easy to\n;; display all the info we need for each of the songs.\n\n(check-expect\n(top-10-songs-to-display MUSIC)\n(list\n (make-song-display \"Simple Minds\" \"Once Upon a Time\" 1985 4 \"Alive and Kicking\" 26)\n (make-song-display \"The Postal Service\" \"Give Up\" 2003 4 \"Nothing Better\" 18)\n (make-song-display \"Simple Minds\" \"Once Upon a Time\" 1985 5 \"Oh Jungleland\" 13)\n (make-song-display \"The Postal Service\" \"Give Up\" 2003 1 \"The District Sleeps Alone\" 13)\n (make-song-display \"The Postal Service\" \"Give Up\" 2003 2 \"Such Great Heights\" 13)\n (make-song-display \"The Postal Service\" \"Give Up\" 2003 5 \"Recycled Air\" 13)\n (make-song-display \"The Rolling Stones\" \"Let It Bleed\" 1969 8 \"Monkey Man\" 13)\n (make-song-display \"Simple Minds\" \"Once Upon a Time\" 1985 6 \"I Wish You Were Here\" 12)\n (make-song-display \"The Postal Service\" \"Give Up\" 2003 3 \"Sleeping In\" 12)\n (make-song-display \"The Postal Service\" \"Give Up\" 2003 6 \"Clark Gable\" 12)))\n", "encoding": "ascii"}