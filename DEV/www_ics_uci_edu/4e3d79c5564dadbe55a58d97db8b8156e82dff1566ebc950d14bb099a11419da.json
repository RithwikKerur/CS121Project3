{"url": "https://www.ics.uci.edu/~pattis/ICS-21/assignments/program1/program.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 1</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 1</h1>\r\n<h1>Simple Program Suite</h1>\r\n<p>\r\n<h2>Introduction to Computer Science I<br>\r\nICS-21<br>\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\n  Please print a copy of this assignment, read it carefully, and\r\n    highlight material you think will be useful to you while you\r\n    are working on the program or submitting it.\r\n  <p>\r\n  This first real programming assignment is designed to ensure that you know\r\n    the fundamentals of writing, testing, and debugging simple programs using\r\n    the Eclipse Integrated Development Environment (Eclipse IDE).\r\n  You will fill-in parts of one program and then write three simple programs\r\n    in this assignment: each consists of a <b>main</b> method whose body \r\n    includes statements that\r\n  <ul>\r\n    <li>Declare some variables (sometimes also initializing them),\r\n    <li>Prompt the user for input (values to store into variables)\r\n          from the console via methods in the <b>Prompt</b> class,\r\n    <li>Calculate values from these variables using expressions, and store\r\n          the calculated values into other variables (typically to output at\r\n          the end of the program),\r\n    <li>Output results to the user via the console\r\n          (using the <b>System.out.print</b> and/or <b>System.out.println</b>\r\n           methods)\r\n  </ul>\r\n  <p>\r\n  In this assignment you may assume that all input entered by the user of your\r\n     program is correct; in the next assignment we will practice validating\r\n     user input.\r\n  <p>\r\n  You can better understand this assignment, and check the behavior of your\r\n     programs against my solutions, by downloading the\r\n     <a href=\"executable.zip\">Program #1 Executables</a> zip file, unzipping\r\n     it, and running the programs it contains.\r\n  <p>\r\n  On a PC\r\n   <ul>\r\n     <li>Double click each of the <b>Run ...</b> icons to run its\r\n            associated program.\r\n  </ul>\r\n  On any platform running Eclipse (PC or Mac)\r\n   <ul>\r\n     <li>Start Eclipse and create a new project, using the unzipped executable\r\n           folder as its existing source.\r\n         Disclose the project (at the top),\r\n            then disclose the <b>Referenced Libraries</b> icon,\r\n            then disclose the <b>program1solution.jar</b> icon inside it,\r\n             and then disclose the <b>(default package)</b> icon inside it.\r\n         Finally, right click any of the <b>.class</b> files\r\n           and then select <b>Run As</b> and <b>Java Application</b>.\r\n  </ul>\r\n  Please run these programs now, both ways if possible (see sample inputs in\r\n    the sections below), and observe the user interaction with the programs.\r\n  <p>\r\n  Note that although you can run these three programs, you cannot examine\r\n    their Java code.\r\n  Before writing your programs, run my executables and examine the form in\r\n    which the do their input/output, and use the same form in the programs\r\n    that you write.\r\n  <p>\r\n  To start working on this assignment, download and unzip\r\n    <a href=\"start.zip\">Program #1 Project Folder</a>, which contains\r\n    statements from the first program you must write.\r\n  Rename this project folder <b>Program1</b>).\r\n  Then create three more new Java classes in it (as you did for one class in \r\n    Program #0).\r\n  The existing class is named <b>ExpressionTest</b>; each of the three \r\n    remaining classes will contain a program that you will write from scratch\r\n    to solve one problem; name the classes <b>EscapeVelocity</b>,\r\n    <b>ChangeMaker</b>, and <b>PizzaPricer</b>.\r\n  Write, run, and debug each class/program as you did in Program #0.\r\n  When you finish each part, submit its <b>.java</b> file.\r\n  <p>\r\n  <b>Only one programmer of the pair should dropoff the programs: the same one\r\n       for each part.\r\n     It doesn't matter which of the pair submits, but that person should\r\n       submit all the parts.\r\n     Of course, each program should contain both student names (see below).</b>\r\n  <p>\r\n  IMPORTANT: \r\n    Download the <a href=\"../../programs/droptime.zip\">Drop Time</a> program\r\n      and examine and run it; use it as a model for all three of your programs.\r\n    It declares variables, prompts the user for inputs (stored in some\r\n       variables), computes values (stored in other variables), and prints the\r\n       values of some variables along with some text.\r\n  <p>\r\n  Please cut, paste, and fill in the following comment at the top of each of\r\n     your programs (see how I did this in the Drop Time program mentioned\r\n     above).\r\n  Ensure that the names and email addresses of <b>both programmers</b> in the\r\n    pair appear in each program that you write, at the top of this big comment.\r\n<b><pre>\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Name/e-mail    : e.g., Richard Pattis/pattis@ics.uci.edu\r\n//                        Norm Jacobson/jacobson@ics.uci.edu\r\n//                        You must list both in paired projects\r\n// Course/Lab     : e.g., ICS-21/Lab 1, 2, or 3\r\n// Program #/Name : e.g., Program #1/ExpressionTest\r\n//\r\n// Description:\r\n//\r\n//    Fill in this section with a description of your program. A good rule of\r\n// thumb is that a description should be about 1/10th to 1/5th the size (in\r\n// lines) of the program (in lines) that it describes.\r\n//\r\n// Known Bugs (if any)  : (if you know about/explain a bug here, you will lose\r\n//                        less credit for it than if you don't acknowledge it).\r\n//\r\n// Program History:\r\n//   List dates for any major events in the program's life-cycle: e.g.,\r\n//   program started, removal of a major bug, program finished; get into the\r\n//   habit of documenting (with an audit trail) major changes to every file\r\n//   that you edit. The first entries might be...\r\n//   9/1/08: R. Pattis/N. Jacobson  - Started program, working as a pair\r\n//   9/1/08: R. Pattis/N. Jacobson  - suspended work; met with TA to discuss complicated bug\r\n//   9/2/08: R. Pattis/N. Jacobson  - Finished program, submitted for grading\r\n//\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n</pre></b>\r\n<p>\r\nAll programs prompt the user for information on the console. \r\nTo get access to the class and its needed method names, you will have to add\r\n  the import statement <b>import edu.uci.ics.pattis.introlib.Prompt;</b>\r\n  after the big comment above (and of course, you will also have to\r\n  add the  <b>introlib.jar</b> file to Eclipse, if you haven't done so).\r\nThis import gives this program access to all methods in the <b>Prompt</b>\r\n  class.\r\nNote that you will also use methods from the <b>Math</b> class, but\r\n  this class is implicitly/automatically imported into every Java program.\r\n<p>\r\nFinally, it is a mistake to try to do all these problems in one sitting\r\n  (especially on the night that they all are due).\r\nWhile all are simple, each part gets progressively harder.\r\nSit down during the first lab and try to finish the first part; over the \r\n  weekend, try to finish the second and third parts; if you succeed and have\r\n  more time, finsh the last part (otherwise save it for next week) -maybe you\r\n  will finish them all quickly.\r\nEven though the programming problems get more complicated, the first one is\r\n  likely to cause you the most trouble: understanding the basics of the\r\n  assignment (shared by all three programs), setting up everything, etc.\r\nIt is important that you encounter all these difficulties early, by attempting\r\n  to finish one problem over the first lab/weekend, well before the entire\r\n  assignment is due; this will give you time to seek and obtain help, if you\r\n  need it.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Escape Velocity -->\r\n\r\n<a name=\"EscapeVelocity\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Part 1:<br>Calculating Escape Velocity</b></td>\r\n<td width =\"80%\">\r\n  The velocity needed to escape the gravitation field of a planet is given by\r\n  the mathematical formula\r\n  <pre><b>\r\n          +---------\r\n         /  2 g mP\r\n  v =   /  --------\r\n      \\/      rP\r\n</b></pre>\r\nwhere <b>g</b> is the Gravitational constant (6.67x10<sup>-11</sup> in the\r\n  metric system),\r\n<b>mP</b> is the mass of the planet (in kilograms), <b>rP</b> is the radius of\r\n  the planet (in meters) and <b>v</b> is the escape velocity in\r\n  (in meters/second). \r\n<p>\r\nHere is a short table of planets and their (<b>approximate</b>) calculated\r\n  escape velocities.\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"1\" rules=\"all\">\r\n<thead><tr><th align=\"left\">Planet</th><th>Mass<br>(kilograms)</th><th>Radius<br>(meters)</th><th>Approximate Escape<br> Velocity (meters/sec)</th>\r\n</thead>\r\n<tbody>\r\n<tr valign=\"top\"><td>Earth</td><td>5.983x10<sup>24</sup></td><td>6.357x10<sup>6</sup></td><td align=\"right\">11,200</td> \r\n<tr valign=\"top\"><td>Venus</td><td>4.906x10<sup>24</sup></td><td>6.185x10<sup>6</sup></td><td align=\"right\">10,300</td>\r\n<tr valign=\"top\"><td>Mars</td><td>6.581x10<sup>23</sup></td><td>3.382x10<sup>6</sup></td><td align=\"right\">5,100</td>\r\n<tr valign=\"top\"><td>Jupiter</td><td>1.904x10<sup>27</sup></td><td>6.974x10<sup>7</sup></td><td align=\"right\">60,300</td>\r\n<tr valign=\"top\"><td>Earth's Moon</td><td>7.347x10<sup>22</sup></td><td>1.738x10<sup>6</sup></td><td align=\"right\">2,370</td>\r\n</tbody>\r\n</table>\r\n<p>\r\nWrite a program that prompts the user for a planet's mass and radius, and then\r\n  computes and displays the escape velocity of the planet.\r\nVerify these answers in the table above to ensure that your program is working\r\n  correctly.  \r\nTo use the <b>sqrt</b> function (function is a mathematical term), remember to\r\n  call the <b>Math.sqrt</b> method (method is a programming term) in your\r\n  program.\r\n<p>\r\nThe <a href=\"../../programs/droptime.zip\">Drop Time</a> program, mentioned\r\n  above, also uses such a call to a method in the <b>Math</b> library class,\r\n  and has similar code to what you need to write.\r\nExamine this program and use it as a model for the one that solves the Escape\r\n  Velocity program.\r\nRemember to fill in all the information in the comment at the top of the\r\n program.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Escape Velocity -->\r\n\r\n<a name=\"EscapeVelocity\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Part 2:<br>Formulas -> Expressions</b></b></td>\r\n<td width =\"80%\">\r\n  The following three lines contain a total of 13 formulas<p>\r\n  <image src=\"formulas.gif\">\r\n  <p>\r\n  There are 7 on the first line, and 3 each on the second and third lines.\r\n  <p>\r\n  The class <b>ExpressionTest</b> contains a driver program to test all these\r\n    formulas: it declares the needed variables, prompts the user for their \r\n    values, and prints the answers.\r\n  But, you need to translate each of the 13 formulas into a correct Java\r\n    Expression (each now just says <b>answer = 0;</b>).\r\n  For maximum credit, your expressions should contain no redundant\r\n     parentheses; parentheses are redundant if they can be removed, but\r\n     leave the expression always still computing the correct answer, still\r\n     performing the required operations in the correct order.\r\n  <p>\r\n  For example, the parentheses in <b>(a*b)/c</b> are redundant because\r\n    even if we remove them, the expression <b>a*b/c</b> will still multiply\r\n    <b>a</b> by <b>b</b> before dividing by <b>c</b> (by Java's rules of\r\n    operator precedence and associativity).\r\n  The parentheses in <b>a/(2.*b)</b> are NOT redundant because if we remove\r\n     them, the result will be the quantity <b>a/2.</b> times <b>b</b>.\r\n  Note, some students might write <b>a/2./b</b> but I find this expression\r\n    more difficult to understand: you don't have to <b>minimize</b>\r\n    parentheses; you just want to write no redundant ones.\r\n  There is a difference between these goals (reread the material above for\r\n    clarification).\r\n  <p>\r\n  Finally, for the mathematical constants &pi; and <i>e</i> in these formulas,\r\n    use <b>Math.PI</b> and <b>Math.E</b> instead of writing your own literals\r\n    that approximate these values.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Change Maker -->\r\n\r\n<a name=\"ChangeMaker\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Part 3:<br>Change Maker</b></td>\r\n<td width =\"80%\">\r\n  Write a program that prompts the user for some amount of change to make (an\r\n    <b>int</b> from <b>1</b> to <b>99</b> cents; don't worry about bad input),\r\n    and then computes and displays the number of quarters, dimes, nickels, and\r\n    pennies to make that amount of change.\r\n  Always compute the fewest coins to make that change.\r\n  For example, if the user entered <b>69</b> the program would display\r\n  <pre><b>    To make change for 69 cents:\r\n      2 quarters\r\n      1 dimes\r\n      1 nickels\r\n      4 pennies</b></pre>\r\n  Don't worry about displaying things like <b>1 dimes</b> (mismatching a\r\n    singular and plural).\r\n  <p>\r\n  Algorithm Hint: After the user inputs the amount of change to make, first\r\n    determine the number of quarters to return (using <b>/</b> on <b>int</b>s:\r\n    here truncation is useful), and then update the amount of change to make to\r\n    be the remaining amount to return after accounting for the quarters\r\n    returned; repeat this process for dimes, then nickels, and finally for\r\n    pennies.\r\n  <p>\r\n  For example, to make <b>69</b> cents in change, the program computes <b>2</b>\r\n     quarters, leaving <b>19</b> cents in change to be made by dimes, nickels,\r\n     and pennies; then the program computes <b>1</b> dime, leaving <b>9</b>\r\n     cents in change to be made by nickels and pennies; etc.\r\n  Finally, note that some amounts may be zero:\r\n  <pre><b>    To make change for 55 cents:\r\n      2 quarters\r\n      0 dimes\r\n      1 nickels\r\n      0 pennies</b></pre>\r\n  Some solutions make use the the <b>%</b> operator; there are many different\r\n     ways to solve this problem.\r\n  Before programming the solution in Java, develop a procedure that allows\r\n    <b>you</b> to calculate the right values when you follow it, and then\r\n    automate that solution  by translating it into a Java program.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Pizza Pricer -->\r\n\r\n<a name=\"PizzaPricer\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Part 4:<br>Pizza Pricer</b></td>\r\n<td width =\"80%\">\r\n  Write a program that computes pizza prices.\r\n  The program should prompt the user to enter the diameter of the pizza (as an\r\n    <b>int</b>, in inches, not as a <b>double</b>) and the price of the pizza\r\n    (as a <b>double</b>, in dollars).\r\n  Then the program should compute and display\r\n  <ol>\r\n    <li>How many people the pizza feeds, assuming each person gets to eat a\r\n           minimum\r\n          <b>50 in<sup>2</sup></b> of pizza: this value must be an <b>int</b>,\r\n          so if your program computes <b>2.8</b> people are fed, then the\r\n          \"correct\" number of people it feeds is <b>2</b> (with each person\r\n          getting a bit more than the minimum amount of pizza).\r\n    <li>The relative price of the pizza (in <b>cents/in<sup>2</sup></b>).\r\n    <li>The cost (in <b>dollars per person</b>; include a <b>15%</b> tip).\r\n  </ol>\r\n  To get an excellent approximation to pi, use the static field <b>PI</b> in\r\n     the <b>java.lang.Math</b> class in your area calculations; refer to it in \r\n     your program as <b>Math.PI</b>.\r\n  <p>\r\n  Test and check your program on various sizes and prices of pizzas (and\r\n    compare its results with my executable).\r\n  See the sample program\r\n    <a href=\"../../programs/tripplanner.zip\">Trip Planner</a> for a similar\r\n    program.\r\n  Use this program as a model for the one that you are writing.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}