{"url": "https://www.ics.uci.edu/~yamingy/npmle.r", "content": "dyn.load(\"npmle.so\")\n\nmix=function(X, iter=10000, alg=4){\n  ## compute MLE of mixture proportions\n  ## maximize sum_i log(sum_j X_ij*theta_j)\n  ## required input: \n  ##   X: matrix of mixture components (nonnegative; no row identically zero)\n  ##   X_ij: density of component j evaluated at observation i \n  ## optional input:\n  ##   iter: maximum number of iterations (default=10000)\n  ##   alg: choice of algorithm (default=4, cocktail algorithm)\n  ## output: a list of \n  ##   (i) MLE of mixture proportions; (ii) iteration count\n  n=as.integer(dim(X)[1]); \n  p=as.integer(dim(X)[2]); \n  Xvec=as.double(c(t(X)));\n  theta=as.double(rep(1/p, p));\n  .C(\"alg_mix\", n, p, Xvec, as.double(rep(1, n)), theta, as.integer(iter), as.integer(alg))[5:6]\n}\n\n## toy example\nn=100;\np=20;\nX=matrix(nrow=n, ncol=p);\nfor(i in 1:p)\n  X[,i]=runif(n, 0, 1);\n# X=read.table(\"galaxy.X\")\nprint(\"cocktail algorithm for computing the MLE of mixture proportions\");\noutput=mix(X);\nprint(\"MLE:\");\nprint(output[[1]]);\nprint(\"number of iterations:\");\nprint(output[[2]]); \n\nnpmle=function(p, l, u, iter=10000, alg=4){\n  ## compute NPMLE of the distribution function for censored data \n  ## maximize sum_i log(sum_j X_ij*theta_j)\n  ##   X_ij=1 if l_i<=j<=u_i, and X_ij=0 otherwise\n  ## required input: \n  ##   p: number of time points\n  ##   (l, u): vectors of integers (ranks) \n  ##     [l_i, u_i]: censoring interval for subject i\n  ## optional input: \n  ##   iter: maximum number of iterations (default=10000)\n  ##   alg: choice of algorithm (default=4, cocktail algorithm)\n  ## output: a list of \n  ##   (i) NPMLE; (ii) iteration count\n  n=as.integer(length(l));\n  p=as.integer(p);\n  #shift from R indexing to C indexing\n  l=as.integer(l-1)\n  u=as.integer(u-1)\n  theta=as.double(rep(1/p, p));\n  .C(\"alg_npmle\", n, p, l, u, as.double(rep(1, n)), theta, as.integer(iter), as.integer(alg))[6:7]\n}\n\n## toy example\np=5  \nl=c(2, 1, 3, 4, 2)\nu=c(3, 3, 4, 4, 5) \nprint(\"cocktail algorithm for computing the NPMLE of the distribution function with censored data\");\noutput=npmle(p, l, u);\nprint(\"NPMLE:\");\nprint(output[[1]]);\nprint(\"number of iterations:\");\nprint(output[[2]]);\n \n", "encoding": "ascii"}