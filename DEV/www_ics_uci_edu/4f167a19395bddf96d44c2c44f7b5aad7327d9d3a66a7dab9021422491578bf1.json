{"url": "https://www.ics.uci.edu/~ejw/authoring/oslo/minutes.txt", "content": "WebDAV WG Minutes\nOslo IETF 45\nThursday, July 15, 1999\n\n\nA meeting of the WebDAV working group was held on Thursday, July 15,\n1999, from 9:00AM to 11:30AM.  Geoff Clemm was the acting chair for\nthe duration of the meeting.  Minutes were recorded by Lisa Lippert.\n \nBINDING SEMANTICS\n-----------------\n\nThere was not enough consensus on what a direct reference should be,\nhow it should interact with locking/collections/versioning, so this\nwas dropped and the redirect bindings were used.\n \nNew method:  BIND \n \nLarry Masinter: It seemed that the model for these representations did\nmap into the underlying architecture, is that true?  Is it widespread?\nDo BIND and ordered collections map to existing capabilities or is it\nnew capability that people are comfortable adding?\n \nGeoff Clemm: People want this behaviour.  The proposal already takes\ninto account some subtleties of existing implementations.\n\nYaron Goland: Essentially it started with Unix, 'ln' type\nfunctionality.  How can we best represent it in the protocol as\nclosely as possible to existing linking functionality?  On the other\nhand, ordered collections have apparently been implemented in very\nadvanced doc mgmt systems, nevertheless Judy Slein did a good job of\nspecifying this functionality.\n\nGeoff: There are a couple of other people on the ML saying this is\nrequired functionality.\n \nGeoff returned to discussing bindings: bindings allow you to bind\n\"/a/b/foo.html\" to \"/a/b/bar.html\", so that a resource has two names,\na PROPPATCH will affect both.  It does cause interesting issues with\nLOCK -- if you lock one, can you MOVE the other?\n \nExplanation of how a binding to a collection works -- rather than have\na shadow resource created for every resource within the collection,\njust the collection link is created.  The purpose of the collection\nbinding is, however, to have available all the collection resources\nunder the new link.\n \nJules?  worried about whether this was specifying the implementation,\nand Geoff clarified that the implementation discussion was only to\nensure that a compliant implementation was possible, and any other way\nof implementing consistent with the protocol is valid.  Geoff\nexplained how a collection binding requires that new resources in the\nsource collection results in new resources available under the link\ncollection.  Jules asked whether the protocol violated the\nreversibility of the bindings, and Geoff does not think this has been\nviolated.\n \nGeoff discussed circular bindings:  \n\nBIND /x/ to /x/circle-x/\n\nThis results in \n   /x/\n   /x/y/\n   /x/circle-x/\n   /x/circle-x/y\n   /x/circle-x/circle-x/\n   ...\n\nWe strongly distinguish bindings, which connect a name and a resource,\nand a mapping, which is a connection between some legal name and a\nresource.  The creation of one new binding can induce an infinite\nnumber of mappings, i.e. names that are now linked to a resource.  A\ndelete of a binding can remove an infinite number of mappings.\n \nBecause of this, a circularity check is required.  PROPFIND depth\ninfinity does include a circularity check that only needs to be done\nby servers that support bindings.  There is a new response code to be\nreturned rather than return a 500 server error.\n \nYaron pointed out that servers may just ignore this requirement as\nroughly equivalent.\n\nNick Shelness: I have a hunch this breaks the model where resources\nknow what they belong to.  You might have an infinite number of\nmembership.  Geoff thinks this is OK though.  Nick will think more\nabout this.\n \nQuestion:  Why do we even allow circularity?\n\nGeoff: it was argued that it was tougher to prevent circularity than\nto deal with it, but the more important argument is that it should be\npossible to just classify a collection as part of a set which contains\nitself, that there were contains-itself relationships that people\nwanted to model.  Example from \"include\" files: a collection which\ncontained all the files included might include itself.  These might be\nexcluded by some kind of #ifdef behaviour... Everybody in the design\nteam had their own favourite example of why circularity should be\nallowed (otherwise would be faked in some way more painful than asking\nthe server to do the circularity check)\n \nYaron: We've created a situation where any PROPFIND depth infinity\nrequest will generate an error if there is a circularity.\n\nGeoff: We thought of some custom stuff to tell the server to \"ignore\ncircularities\", but figured it's most useful for clients to be able to\ndeal with the circularity error by controling depth more carefully in\nrequests.\n\nYaron: These relationships have kind of poisoned effects.  E.g. Depth\ninfinity DASL requests will be the rule, and these will now result in\nerrors because of a cycle somewhere, and that seems problematic.  I\nwould like to see some kind of discussion of what circularities would\nresult in for other areas of DAV, like searching, versioning, etc.\n\nGeoff: Yes, we wanted to open this up for discussion.  If anybody else\nrequires this feature, add your vote.\n \nQuestion: Note that circular references might be much more complex,\nand involve many levels before the circularity is discoverable.  This\nis a hard problem to find out when the binding is created: a complete\ntree traversal would be required every time a reference is created.\nIt might make sense, when doing these traversals, to indicate to the\nserver not to traverse links, just like in Unix.\n\nGeoff: This was one of the reasons for removing support for direct\nbindings.  There is no difference between the original URL to a\nresource and the new bound URL, they are both bindings to the actual\nresource.  The result is that instead of paying on deep traversals,\nyou pay on every binding.  To require the server to do this check on\nevery creation of a binding was actually the more serious\nimplementation check than to do this only on PROPFIND depth infinity.\n \nLisa Lippert: The price for not checking when the binding is created\ncould me more than we can know now, covering more than just PROPFIND\ndepth infinity.\n\nGeoff:  Yes.  \n\nYaron:  MOVE and COPY are like this.\n\nGeoff: MOVE is very like BIND, it just creates a new link between a\nname and a resource.  If anybody else can identify the methods which\nconcern them...\n\nYaron: That's why I'm pounding on the model.  I think we just have to\nsay we're running with scissors with this feature.\n \nJohn Stracke:  But since a MOVE is a COPY followed by a DELETE...\n\nYaron: NO.  In the webDAV spec, MOVE is not defined as a copy followed\nby a delete.  We said that a MOVE is logically equivalent to an\natomically performed (with fixup) COPY then DELETE.  It was an attempt\nto inherit certain behaviours that applied to COPY, without specifying\nimplementation. We knew that certain servers would end up deleting a\nresource (i.e. in the case of a MOVE from one server to another).  We\nneeded a way to say that if a MOVE operation implementation did\ninvolve a DELETE, it would operate in a certain way to comply with\nrequirements from the military.\n \nGeoff: I need to explain how MOVE works with respect to bindings.  A\nMOVE is, in the case of a binding, like a BIND followed by a DELETE.\nThe difference is in all the other bindings to the thing that is being\nmoved: the other bindings (other than the ones being moved) are\nunchanged; they continue to have the same name and point to the same\nresource.  This is important, because the result does not involve\ncreating a brand new copy of the resource, which is what a COPY then\nDELETE would cause.\n \nSummary: the core of bindings is pretty simple, but it has some\ninteresting implications.  Modulo a few problems, the WebDAV base has\nbeen a good one to work on, it's a very effective base to work on for\nboth the design teams I'm on.\n \nPROCESS QUESTIONS\n-----------------\n\nQuestion: Do you feel the ordering sections of advanced collections\nare complete?\n\nGeoff: We (the authors, at least) only agree that clients should be\nable to tell the server that this should be after that.  We don't know\nwhat server-maintained orderings are or mean.  Client-defined\norderings are less controversial.\n \nQuestion: It sounds like there are actually three independent\nspecifications in advanced collections, at different levels of\ncompletion...\n\nGeoff: Yes, the status of ordering is that not many cared, and the few\nwho did only agree on client-side ordering.  It would be a shame to\nhold up the rest of the protocol while we're resolving that issue.\nThere's less administrative need to separate the redirect references\nfrom the binding functionality; on the other hand their connection is\ngratuitous.\n\nKeith:  Just put redirect references in a separate document.\n\nLarry: Historically, redirect references were a response to\nrequirements for collection-based functionality.\n\nGeoff: I am happy to follow Keith's direction so if anybody else has a\nproblem take it up in mail. Are there other issues with respect to\nthese specifications -- is it OK for them to fall under the \"finishing\nup WebDAV\" WG?\n\nKeith:  Is it close to being done?\n\nGeoff:  Yes\n\nYaron:  No\n\nKeith: Take 3 months to finish, then decide what to do, but don't go\nunder the assumption that the current WebDAV WG will continue to exist\nto do this.  I bet you could get the bindings done in under 3 months.\nDo them in the order of how you think you can get them done.\n \nLarry:  Just split up the document and last-call the pieces.  \n\nGeoff: Whichever are done in 3 months fall under this WG...\n\nLarry: It's not that there is less consensus for ordering, there are\njust fewer people interested in seeing this functionality.  That\ndoesn't mean it will drag out any longer than bindings.\n \nGeoff:  Any other issues?\n\nLarry: There are two elements of functionality which I think need to\nbe worked out before we can say we've accomplished a protocol that can\nbe used to do distributed authoring:\n\n - variants\n - compound documents\n\nThis doesn't meet the charter until we've resolved those.\n\nKeith: A lot of people have been chewing over those for decades.  I'm\nnot sure you can do anything.\n\nLarry: I'm interested in pursuing protocol elements that would further\nthis functionality, whether within this WG or elsewhere.  This could\nbe done in DMA.\n\nYaron: I would much rather this happen in IETF.  We would have to do a\nlot of work before the work could continue in DMA with the same kind\nof openness.\n \nGeoff: One could use the same gating function for a subset of the\nversioning work that is of sufficient maturity that it could be closed\noff in 3 months.\n\nKeith:  No.\n ", "encoding": "ascii"}