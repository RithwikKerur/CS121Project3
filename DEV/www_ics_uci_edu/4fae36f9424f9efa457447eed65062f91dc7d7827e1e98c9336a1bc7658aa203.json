{"url": "https://www.ics.uci.edu/~ejw/authoring/protocol/draft-ietf-webdav-protocol-03.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<HEAD>\r\n<TITLE> Extensions for Distributed Authoring and Versioning\r\n                              on the\r\n                      World Wide Web -- WEBDAV\r\n</TITLE>\r\n</HEAD>\r\n<html>\r\n<body>\r\n<h1>\r\n         Extensions for Distributed Authoring and Versioning\r\n                              on the\r\n                      World Wide Web -- WEBDAV\r\n</h1>\r\n<PRE>\r\nWEBDAV Working Group                     Y. Y. Goland, Microsoft\r\nINTERNET-DRAFT                 E. J. Whitehead, Jr., U.C. Irvine\r\n&lt;draft-ietf-webdav-protocol-03&gt;               A. Faizi, Netscape\r\n                                             S. R Carter, Novell\r\n                                               D. Jensen, Novell\r\nExpires April 6, 1998                         September 29, 1997\r\n\r\n\r\n</PRE>\r\n\r\n<hr>\r\nThis HTML version was converted from plaintext ASCII to HTML by Jim Davis.  Apologies for any errors inserted in the process.\r\n<hr>\r\n\r\n<H2>Status of this Memo</H2>\r\n\r\n<p>This document is an Internet-Draft. Internet-Drafts are working\r\ndocuments of the Internet Engineering Task Force (IETF), its\r\nareas, and its working groups. Note that other groups may also\r\ndistribute working documents as Internet-Drafts.\r\n\r\n<P>Internet-Drafts are draft documents valid for a maximum of six\r\nmonths and may be updated, replaced, or made obsolete by other\r\ndocuments at any time. It is inappropriate to use Internet-Drafts\r\nas reference material or to cite them other than as \"work in\r\nprogress\".\r\n\r\n<P>To learn the current status of any Internet-Draft, please check\r\nthe \"1id-abstracts.txt\" listing contained in the Internet-Drafts\r\nShadow Directories on ftp.is.co.za (Africa), nic.nordu.net\r\n(Europe), munnari.oz.au (Pacific Rim), ds.internic.net (US East\r\nCoast), or ftp.isi.edu (US West Coast).\r\n\r\n<P>Distribution of this document is unlimited. Please send comments\r\nto the Distributed Authoring and Versioning (WEBDAV) working\r\ngroup at &lt;w3c-dist-auth@w3.org&gt;, which may be joined by sending a\r\nmessage with subject \"subscribe\" to &lt;w3c-dist-auth-request@w3.org&gt;.\r\n\r\n<P>Discussions of the WEBDAV working group are archived at\r\n&lt;URL:http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth&gt;.\r\n\r\n\r\n<H2>Abstract</H2>\r\n\r\n\r\n<P>This Document specifies a set of methods and content-types\r\nancillary to HTTP/1.1 for the management of resource properties,\r\nsimple name space manipulation, simple resource locking\r\n(collision avoidance) and resource version control.\r\n\r\n\r\n<pre>\r\n                        Table of Contents\r\nAbstract\r\n1    Terminology\r\n2    Data Model and Methods for DAV Properties\r\n     2.1  Introduction\r\n          2.1.1 The DAV Property\r\n          2.1.2 Existing Metadata Proposals\r\n          2.1.3 Properties and HTTP Headers\r\n     2.2  A Property Model for HTTP Resources\r\n          2.2.1 Overview\r\n          2.2.2 Property Namespace\r\n     2.3  Schemas\r\n          2.3.1 PropSchema XML Element\r\n          2.3.2 DTD XML Element\r\n          2.3.3 DefinedProps XML Element\r\n          2.3.4 PropEntries XML Element\r\n          2.3.5 Live XML Element\r\n     2.4  DAV Schema\r\n          2.4.1 DAV Property\r\n          2.4.2 Level XML Element\r\n          2.4.3 Prop XML element\r\n          2.4.4 PropLoc XML Attribute\r\n          2.4.5 Example\r\n     2.5  Property Identifiers\r\n          2.5.1 Problem Definition\r\n     2.6  Link XML Element\r\n          2.6.1 Problem Description\r\n          2.6.2 Solution Requirements\r\n          2.6.3 Link XML Element\r\n          2.6.4 Src XML Element\r\n          2.6.5 Dst XML Element\r\n          2.6.6 Example\r\n     2.7  Multi-Status Response\r\n          2.7.1 Problem Definition\r\n          2.7.2 Solution Requirements\r\n          2.7.3 Multi-Status Response\r\n     2.8  Properties and Methods\r\n          2.8.1 DELETE\r\n          2.8.2 GET\r\n          2.8.3 PROPPATCH\r\n          2.8.4 PUT\r\n          2.8.5 PROPFIND\r\n3    A Proposal for Collections of Web Resources and Name Space\r\nOperations\r\n     3.1  Observations on the HTTP Object Model\r\n          3.1.1 Collection Resources\r\n          3.1.2 Creation and Retrieval of Collection Resources\r\n          3.1.3 Source Resources and Output Resources\r\n     3.2  MKCOL Method\r\n          3.2.1 Problem Description\r\n          3.2.2 Solution Requirements\r\n          3.2.3 Request\r\n          3.2.4 Response\r\n          3.2.5 Example\r\n     3.3  Standard DAV Properties\r\n          3.3.1 IsCollection Property\r\n          3.3.2 DisplayName Property\r\n          3.3.3 CreationDate Property\r\n          3.3.4 GETentity Property\r\n          3.3.5 INDEXentity Property\r\n          3.3.6 Content-Type XML Element\r\n          3.3.7 Content-Length XML Element\r\n          3.3.8 Content-Language XML Element\r\n          3.3.9 Last-Modified XML Element\r\n          3.3.10 Etag XML Element\r\n     3.4  INDEX Method\r\n          3.4.1 Problem Description\r\n          3.4.2 Solution Requirements\r\n          3.4.3 The Request\r\n          3.4.4 The Response\r\n          3.4.5 ResInfo XML Element\r\n          3.4.6 Members XML Element\r\n          3.4.7 Href XML Element\r\n          3.4.8 Example\r\n     3.5  Behavior of RFC 2068 Methods on Collections\r\n          3.5.1 GET, HEAD for Collections\r\n          3.5.2 POST for Collections\r\n          3.5.3 PUT for Collections\r\n          3.5.4 DELETE for Collections\r\n          3.5.5 DELETE Method for Non-Collection Resources\r\n     3.6  COPY Method\r\n          3.6.1 Problem Description\r\n          3.6.2 Solution Requirements\r\n          3.6.3 The Request\r\n          3.6.4 The Response\r\n          3.6.5 Examples\r\n     3.7  MOVE Method\r\n          3.7.1 Problem Description\r\n          3.7.2 Solution Requirements\r\n          3.7.3 The Request\r\n          3.7.4 The Response\r\n          3.7.5 Examples\r\n     3.8  ADDREF Method\r\n          3.8.1 Problem Definition\r\n          3.8.2 Solution Requirements\r\n          3.8.3 The Request\r\n          3.8.4 Example\r\n     3.9  DELREF Method\r\n          3.9.1 Problem Definition\r\n          3.9.2 Solution Requirements\r\n          3.9.3 The Request\r\n          3.9.4 Example\r\n     3.10 PATCH Method\r\n          3.10.1 Problem Definition\r\n          3.10.2 Solution Requirements\r\n          3.10.3 The Request\r\n          3.10.4 text/xml elements for PATCH\r\n          3.10.5 The Response\r\n          3.10.6 Examples\r\n     3.11 Headers\r\n          3.11.1 Destination Header\r\n          3.11.2 Enforce-Live-Properties Header\r\n          3.11.3 Overwrite Header\r\n          3.11.4 Destroy Header\r\n          3.11.5 Collection-Member Header\r\n     3.12 Links\r\n          3.12.1 Source Link Property Type\r\n4    State Tokens\r\n     4.1  Overview\r\n          4.1.1 Problem Description\r\n          4.1.2 Solution Requirements\r\n     4.2  State Token Syntax\r\n     4.3  State Token Conditional Headers\r\n          4.3.1 If-State-Match\r\n          4.3.2 If-None-State-Match\r\n     4.4  State Token Header\r\n     4.5  E-Tags\r\n5    Locking\r\n     5.1  Problem Description - Overview\r\n          5.1.1 Exclusive Vs. Shared Locks\r\n          5.1.2 Required Support\r\n     5.2  LOCK Method\r\n          5.2.1 Operation\r\n          5.2.2 Effect of Locks on Properties and Containers\r\n          5.2.3 Locking Replicated Resources\r\n          5.2.4 Interaction with other Methods\r\n          5.2.5 Lock Compatibility Table\r\n          5.2.6 Status Codes\r\n          5.2.7 Example\r\n          5.2.8 Lock-Info Request Header\r\n          5.2.9 Owner Request Header\r\n          5.2.10 Time-Out Header\r\n          5.2.11 State-Token Header\r\n     5.3  Write Lock\r\n     5.4  Lock Tokens\r\n          5.4.1 Problem Description\r\n          5.4.2 Proposed Solution\r\n          5.4.3 Lock Token Definition\r\n     5.5  UNLOCK Method\r\n          5.5.1 Problem Definition\r\n          5.5.2 Example\r\n     5.6  Discovery Mechanisms\r\n          5.6.1 Lock Type Discovery\r\n          5.6.2 Active Lock Discovery\r\n6    Version Control\r\n7    Internationalization Support\r\n8    Security Considerations\r\n\r\n9    Acknowledgements\r\n10   References\r\n11   Authors' Addresses\r\n</pre>\r\n\r\n\r\n<h2>1    Terminology</h2>\r\n\r\n<P>Collection - A resource that contains member resources.\r\n\r\n<P>Member Resource - a resource referred to by a collection. There\r\nare two types of member resources: external and internal.\r\n\r\n<P>Internal Member Resource - the name given to a member resource of\r\na collection whose URI is relative to the URI of the collection.\r\n\r\n<P>External Member Resource - a member resource with an absolute URI\r\nthat is not relative to its parent\u2019s URI.\r\n\r\n<P>Properties - A set of name/value pairs that contain descriptive\r\ninformation about a resource.\r\n\r\n<P>Live Properties - Properties whose semantics and syntax are\r\nenforced by the server. For example, a live \"read-only\" property\r\nthat is enforced by the server would disallow PUTs to the\r\nassociated resource.\r\n\r\n<P>Dead properties - Properties whose semantics and syntax are not\r\nenforced by the server. A dead \"read-only\" property would not be\r\nenforced by the server and thus would not be used by the server\r\nas a reason to disallow a PUT on the associated resource.\r\n\r\n\r\n<h2>2    Data Model and Methods for DAV Properties</h2>\r\n\r\n<h3>2.1  Introduction</h3>\r\n\r\n\r\n<h4>2.1.1     The DAV Property</h4>\r\n\r\nProperties are pieces of data that describe the state of a\r\nresource. Properties are data about data. The term property is\r\nused within this specification to disambiguate the concept from\r\nthe overloaded terms \"metadata\" and \"attribute\".\r\nProperties are used within distributed authoring environments to\r\nprovide for efficient discovery and management of resources. For\r\nexample, a 'subject' property might allow for the indexing of all\r\nresources by their subject, and an 'author' property might allow\r\nfor the discovery of what authors have written which documents.\r\n\r\n\r\n<h4>2.1.2     Existing Metadata Proposals</h4>\r\nProperties have a long played an essential role in the\r\nmaintenance of large document repositories, and many current\r\nproposals contain some notion of a property. These include PICS\r\n[Miller et al., 1996], PICS-NG, the Rel/Rev draft [Maloney,\r\n1996], Web Collections, XML [Bray, Sperberg-McQueen, 1997],\r\nseveral proposals on representing relationships within HTML,\r\ndigital signature manifests (DCMF), and a position paper on Web\r\nmetadata architecture [Berners-Lee, 1997].\r\n\r\n<P>Some proposals come from a digital library perspective. These\r\ninclude the Dublin Core [Weibel et al., 1995] metadata set and\r\nthe Warwick Framework [Lagoze, 1996], a container architecture\r\nfor different metadata schemas. The literature includes many\r\nexamples of metadata, including MARC [MARC, 1994], a\r\nbibliographic metadata format, RFC 1807 [Lasher, Cohen, 1995], a\r\ntechnical report bibliographic format employed by the Dienst\r\nsystem, and the proceedings from the first IEEE Metadata\r\nconference describe many community-specific metadata sets.\r\n\r\n<P>Participants of the 1996 Metadata II Workshop in Warwick, UK\r\n[Lagoze, 1996], noted that, \"new metadata sets will develop as\r\nthe networked infrastructure matures\" and \"different communities\r\nwill propose, design, and be responsible for different types of\r\nmetadata.\" These observations can be corroborated by noting that\r\nmany community-specific sets of metadata already exist, and there\r\nis significant motivation for the development of new forms of\r\nmetadata as many communities increasingly make their data\r\navailable in digital form, requiring a metadata format to assist\r\ndata location and cataloging.\r\n\r\n\r\n<h4>2.1.3     Properties and HTTP Headers</h4>\r\n\r\nProperties already exist, in a limited sense, within HTTP through\r\nthe use of message headers. However, in distributed authoring\r\nenvironments a relatively large number of properties are needed\r\nto describe the state of a resource, and setting/returning them\r\nall through HTTP headers is inefficient. Thus a mechanism is\r\nneeded which allows a principal to identify a set of properties\r\nin which the principal is interested and to then set or retrieve\r\njust those properties.\r\n\r\n\r\n<h3>2.2  A Property Model for HTTP Resources</h3>\r\n\r\n\r\n<h4>2.2.1     Overview</h4>\r\n\r\nThe DAV property model is based on name/value doubles. The name\r\nof a property identifies the property's syntax and semantics, and\r\nprovides an address with which to refer to a property. The name\r\nand value of a property is expressed as a well-formed XML\r\nelement, where the name of the property is the name of the XML\r\nelement, and the value of the property MUST be either blank, or a\r\nwell-formed XML element value.\r\n\r\n\r\n<h4>2.2.2     Property Namespace</h4>\r\n\r\n\r\n<h4>2.2.2.1   Problem Definition</h4>\r\n\r\nThe requirement is to be able to associate a value with a\r\nproperty name on a resource and to be able to directly address\r\nthat value.\r\n<h4>2.2.2.2   Solution Requirement</h4>\r\n\r\nIdeally a property namespace should work well with extant\r\nproperty implementations as well as database systems. The DAV\r\nproperty namespace has been specified with the following two\r\nfacts in mind:\r\n\r\n<LI>     Namespaces associated with flat file systems are ubiquitous.\r\n\r\n<LI>     The majority of databases use a fixed schema mechanism.\r\nThe last point makes efficient implementation of hierarchical\r\nproperties difficult. Specifically, each property has a random\r\nset of children; the best a relational database can do is provide\r\na table with name and value, where the value is a series of\r\nindexes into other tables and each index represents a specific\r\nvalue. However most RDBS do not provide for table pointers, only\r\nindex values. Such a system would have to be jury-rigged to\r\nhandle table pointers. In addition, indexing systems are\r\noptimized for a small set of relatively large tables;\r\nhierarchical property systems tend toward many properties, each\r\nwith different numbers and types of children, thus potentially\r\nrequiring a table for each child.\r\n\r\n<P>It would seem best to implement a flat property namespace,\r\ninducing a natural isomorphism between DAV and most native file\r\nsystems. Adopting such a model will not restrict RDBS from taking\r\nfull advantage of their search facilities.\r\n\r\n<P>However, it seems that future trends might be toward hierarchical\r\nproperties. Therefore, DAV requirements [Slein et al.] stipulate\r\nthat the design of the flat property system MUST be such that it\r\nwill be possible to add true hierarchical properties later\r\nwithout breaking downlevel clients. Specifically, a flat client\r\nMUST be able to speak to a hierarchical server and a hierarchical\r\nclient MUST be able to speak to a flat server. Worst case either\r\nway MUST be that the request fails.\r\n\r\n\r\n<h4>2.2.2.3   Property Names</h4>\r\n\r\nA property name identifies both the syntax and semantics of the\r\nproperty's value. It is critical that property names do not\r\ncollide, e.g., two principals defining the same property name\r\nwith two different meanings.\r\n\r\n<P>The URI framework provides a mechanism to prevent namespace\r\ncollision and for varying degrees of administrative control.\r\nRather than reinvent these desirable features, DAV properties\r\nmake use of them by requiring that all DAV property names MUST be\r\nURIs.  Since a property is also an XML element, the name of the\r\nXML element is a URI.\r\n\r\n<P>The property namespace is flat, that is, it is not possible to\r\nstring together a series of property names in order to refer to a\r\nhierarchy of properties. Thus it is possible to refer to a\r\nproperty B but not a property A/B, where is also a property\r\ndefined on the resource.\r\n\r\n<P>Finally, it is not possible to define the same property twice as\r\nthis would cause a collision in the resource's property\r\nnamespace.\r\n\r\n\r\n<h3>2.3  Schemas</h3>\r\nA schema is a group of property names and XML elements.\r\n\r\n<P>Schema discovery is used to determine if a system supports a\r\ngroup of properties or XML elements. A property does not\r\nnecessarily contain sufficient information to identify any\r\nschema(s) to which it may belong.\r\n\r\n<P>As with property names, schemas MUST use URIs as their names.\r\n\r\n<P>A resource declares its support for a schema by defining a\r\nproperty whose name is the same as the schema's. The property\r\nSHOULD contain the PropSchema XML element.\r\n\r\n\r\n<h4>2.3.1     PropSchema XML Element</h4>\r\n\r\n<p>Name: <tt>http://www.ietf.org/standards/dav/PropSchema</tt>\r\n<BR>Purpose:  To provide information about properties\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Values:   [DTD] [DefinedProps]\r\n<BR>Description:This property contains the definition of the schema.\r\nThis definition consists of two parts. A DTD element that\r\ncontains a DTD that declares all XML elements and DefinedProps\r\nthat defines any properties associated with the schema. As with\r\nall XML it is possible to add extra XML elements. Therefore\r\nschemas may define extra XML elements which are to be included\r\nwith their values.\r\n\r\n<h4>2.3.2     DTD XML Element</h4>\r\n\r\n<p>Name: <tt>http://www.ietf.org/standards/dav/DTD</tt>\r\n<BR>Purpose:  To contain the DTD for XML elements associated with the\r\nschema.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Values:   XML Declaration statements\r\n\r\n\r\n<h4>2.3.3     DefinedProps XML Element</h4>\r\n\r\n<p>Name: <tt>http://www.ietf.org/standards/dav/DefinedProps</tt>\r\n<BR>Purpose:  To contain a list of properties defined by the schema.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Values:   1*PropEntries\r\n\r\n\r\n<h4>2.3.4     PropEntries XML Element</h4>\r\n\r\n<p>Name: <tt>http://www.ietf.org/standards/dav/PropEntries</tt>\r\n<BR>Purpose:  To contain the name of a defined property, the DTD of\r\nits value, and its live/dead status.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT>   DefinedProps</tt>\r\n<BR>Values:   Prop [DTD] [Live]\r\n<BR>Description:Prop contains the name of the property. The DTD\r\ncontains the DTD of the property's value. Live, if defined,\r\nindicates that the property has semantics and syntax that are\r\nenforced by the server.\r\n\r\n\r\n<h4>2.3.5     Live XML Element</h4>\r\n\r\n<p>Name: <tt>http://www.ietf.org/standards/dav/Live</tt>\r\n<BR>Purpose:  If present this indicates the server MUST enforce the\r\nsyntax and semantics of the property.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT>   PropEntries</tt>\r\n\r\n\r\n<h3>2.4  DAV Schema</h3>\r\n\r\nThe DAV Schema is specified as\r\nhttp://www.ietf.org/standards/dav/. This schema is used to\r\nindicate support for\r\n<li>    properties that may be defined on a resource and\r\n<li>    XML elements that may be returned in responses.\r\n\r\n\r\n<h4>2.4.1     DAV Property</h4>\r\n\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav</tt>\r\n<BR>Purpose:  Defines support for the DAV schema and protocol.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Values:   PropSchema Level\r\n<BR>Description:This property indicates that the resource supports\r\nthe DAV schema and protocol to the level indicated. THE VALUE IN\r\nPROPSCHEMA IS TBD, WE NEED TO PROVIDE IT IN AN APPENDIX.\r\n\r\n\r\n<h4>2.4.2     Level XML Element</h4>\r\n\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/level</tt>\r\n<BR>Purpose:  To indicate the level of DAV compliance the resource\r\nmeets.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT>   DAV</tt>\r\n<BR>Values:   \"1\" | \"2\" | \"3\"\r\n<BR>Description:A value of 1 for level indicates that the resource\r\nsupports the property and namespace sections of the DAV\r\nspecification. Level 2 indicates that the resource supports level\r\n1 and the lock section of the specification, with a minimum\r\nlocking capability of the write lock. Level 3 indicates support\r\nfor levels 1 and 2 as well as support for the versioning section\r\nof the DAV specification.\r\n\r\n\r\n<h4>2.4.3     Prop XML element</h4>\r\n\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/prop</tt>\r\n<BR>Purpose:  Contains properties related to a resource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Values:   XML Elements\r\n<BR>Description:The Prop XML element is a generic container for\r\nproperties defined on resources. All elements inside Prop MUST\r\ndefine properties related to the resource. No other elements may\r\nbe used inside of a Prop element.\r\n\r\n\r\n<h4>2.4.4     PropLoc XML Attribute</h4>\r\n\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/PropLoc</tt>\r\n<BR>Purpose:  To specify the location of the associated property.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Values:   URL\r\n<BR>Description:This attribute is used with elements inside of Props\r\ncontained in responses to specify the URL of the property on the\r\nassociated resource. The PropLoc attribute MUST NOT be used in\r\nrequests.\r\n\r\n\r\n<h4>2.4.5     Example</h4>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace href=\"http://www.ietf.org/standards/dav/\" AS=\"D\"/&gt;\r\n&lt;?XML:Namespace href=\"AIIM:Dublin:\" AS=\"A\"/&gt;\r\n&lt;D:Prop&gt;\r\n     &lt;A:Author\r\n         D:PropLoc=\"http://www.foo.com/resource/props/Author\"&gt;\r\n          Larry Masinter\r\n     &lt;/A:Author&gt;\r\n&lt;/D:Prop&gt;\r\n</PRE>\r\n\r\n<P>The previous specifies that the property author exists on some\r\nunspecified resource and that the property can be directly\r\nreferenced at <TT>http://www.foo.com/resource/props/Author</TT>. The\r\nresource upon which the property is defined must be determined\r\nfrom context.\r\n\r\n\r\n<h3>2.5  Property Identifiers</h3>\r\n\r\n\r\n<h4>2.5.1     Problem Definition</h4>\r\n\r\nDAV properties are resources and thus may have a URI where the\r\nvalue of an instance of the property may be retrieved.  This URI\r\nis separate from the URI name of the property, which identifies\r\nthe syntax and semantics of the property, but which does not give\r\ninformation on how to access the value of an instance of the\r\nproperty.\r\n\r\n<P>A server is free to assign whatever URI it chooses to identify an\r\ninstance of a property defined on a resource. In fact, a server\r\nis free not to reveal the URI of an instance of a particular\r\nresource and instead require that the client access the property\r\nthrough <tt>PROPFIND</tt> and <tt>PROPPATCH</tt>.  However, many servers will want\r\nto allow clients to directly manipulate properties. On these\r\nservers, a client can discover the URI of an instance of a\r\nproperty by performing a <tt>PROPFIND</tt> and examining the PropLoc\r\nattribute, if returned, of each property.\r\n\r\n<h3>2.6  Link XML Element</h3>\r\n\r\n\r\n<h4>2.6.1     Problem Description</h4>\r\n\r\nA mechanism is needed to associate resources with other\r\nresources. These associations, known as links, consist of three\r\nvalues, a type describing the nature of the association, the\r\nsource of the link, and the destination of the link. In the case\r\nof annotation, neither the source nor the destination of a link\r\nneed be the resource upon which the link is recorded.\r\n\r\n\r\n<h4>2.6.2     Solution Requirements</h4>\r\n\r\nThe association mechanism MUST make use of the DAV property\r\nmechanism in order to make the existence of the associations\r\nsearchable.\r\n\r\n\r\n<h4>2.6.3     Link XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/link</tt>\r\n<BR>Purpose:  To identify a property as a link and to contain the\r\nsource and destination of that link.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Values:   1*Src 1*Dst\r\n<BR>Description:Link is used to provide the sources and destinations\r\nof a link. The type of the property containing the Link XML\r\nelement provides the type of the link. Link is a multi-valued\r\nelement, so multiple Links may be used together to indicate\r\nmultiple links with the same type.\r\n\r\n\r\n<h4>2.6.4     Src XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/src</tt>\r\n<BR>Purpose: To indicate the source of a link.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <tt>http://www.ietf.org/standards/dav/link</tt>\r\n<BR>Values: URI\r\n\r\n\r\n<h4>2.6.5     Dst XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/Dst</tt>\r\n<BR>Purpose: To indicate the destination of a link\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <tt>http://www.ietf.org/standards/dav/link</tt>\r\n<BR>Values: URI\r\n\r\n\r\n<h4>2.6.6     Example</h4>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace\r\n     href = \"http://www.ietf.org/standards/dav/\" AS = \"D\"/&gt;\r\n&lt;?XML:Namespace\r\n     href = \"http://www.foocorp.com/Project/\" AS = \"F\"/&gt;\r\n&lt;D:Prop&gt;\r\n     &lt;Source&gt;\r\n          &lt;Link&gt;\r\n               &lt;F:ProjFiles&gt;Source&lt;/F:ProjFiles&gt;\r\n               &lt;src&gt;http://foo.bar/program&lt;/src&gt;\r\n               &lt;dst&gt;http://foo.bar/src/main.c&lt;/dst&gt;\r\n          &lt;/Link&gt;\r\n          &lt;Link&gt;\r\n               &lt;F:ProjFiles&gt;Library&lt;/F:ProjFiles&gt;\r\n               &lt;src&gt;http://foo.bar/program&lt;/src&gt;\r\n               &lt;dst&gt;http://foo.bar/src/main.lib&lt;/dst&gt;\r\n          &lt;/Link&gt;\r\n          &lt;Link&gt;\r\n               &lt;F:ProjFiles&gt;Makefile&lt;/F:ProjFiles&gt;\r\n               &lt;src&gt;http://foo.bar/program&lt;/src&gt;\r\n               &lt;dst&gt;http://foo.bar/src/makefile&lt;/dst&gt;\r\n     &lt;Link&gt;\r\n     &lt;/Source&gt;\r\n&lt;/D:Prop&gt;\r\n</PRE>\r\n\r\n<P>In this example the resource http://foo.bar/program has a source\r\nproperty defined which contains three links. Each link contains\r\nthree elements, two of which, src and dst, are part of the DAV\r\nschema defined in this document, and one which is defined by the\r\nschema http://www.foocorp.com/project/ (Source, Library, and\r\nMakefile). A client which only implements the elements in the DAV\r\nspec will not understand the foocorp elements and will ignore\r\nthem, thus seeing the expected source and destination links. An\r\nenhanced client may know about the foocorp elements and be able\r\nto present the user with additional information about the links.\r\n\r\n\r\n<h3>2.7  Multi-Status Response</h3>\r\n\r\n\r\n<h4>2.7.1     Problem Definition</h4>\r\n\r\nSome methods effect more than one resource. The effect of the\r\nmethod on each of the scoped resources may be different, as such\r\na return format that can specify the effect of the method on each\r\nresource is needed.\r\n\r\n\r\n<h4>2.7.2     Solution Requirements</h4>\r\n\r\nThe solution must:\r\n<LI>communicate the status code and reason\r\n<li>give the URI of the resource on which the method was invoked\r\n<li>   be consistent with other return body formats\r\n\r\n<h4>2.7.3     Multi-Status Response</h4>\r\n\r\nThe default multi-status response body is an text/xml HTTP entity\r\nthat contains a single XML element called multiresponse, which\r\ncontains a set of XML elements called response, one for each 200,\r\n300, 400, and 500 series status code generated during the method\r\ninvocation.  100 series status codes MUST NOT be recorded in a\r\nresponse XML element.\r\n\r\n\r\n<h4>2.7.3.1   MultiResponse</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/multiresponse</tt>\r\n<BR>Purpose:  Contains multiple response messages.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Value:    1*Response [ResponseDescription]\r\n<BR>Description:The ResponseDescription at the top level is used to\r\nprovide a general message describing the over arching nature of\r\nthe response. If this value is available an application MAY use\r\nit instead of presenting the individual response descriptions\r\ncontain within the responses.\r\n\r\n\r\n<h4>2.7.3.2   Response</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/response</tt>\r\n<BR>Purpose:  Holds a single response\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Value:    (Prop | HREF) Status [ResponseDescription]\r\n<BR>Description: Prop MUST contain one or more empty XML elements\r\nrepresenting the name of properties. Multiple properties may be\r\nincluded if the same response applies to them all. If HREF is\r\nused then the response refers to a problem with the referenced\r\nresource, not a property.\r\n\r\n\r\n<h4>2.7.3.3   Status</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/status</tt>\r\n<BR>Purpose:  Holds a single HTTP status-line\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT>   Response</tt>\r\n<BR>Value:    status-line   ;status-line defined in [Fielding et al.,\r\n1997]\r\n\r\n\r\n<h4>2.7.3.4   ResponseDescription</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/ResponseDescription</tt>\r\n<BR>Purpose:  Contains a message that can be displayed to the user\r\nexplaining the nature of the response.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Multiresponse and/or Response\r\n<BR>Value:    Any\r\n<BR>Description:   This XML element provides information suitable to\r\nbe presented to a user.\r\n\r\n\r\n<h3>2.8  Properties and Methods</h3>\r\n\r\n\r\n<h4>2.8.1     DELETE</h4>\r\n\r\nAs properties are resources, the deletion of a property causes\r\nthe same result as the deletion of any resource. It is worth\r\npointing out that the deletion of a property effects both direct\r\nmanipulation, that is by the property's URL, as well as indirect\r\ndiscovery and manipulation, that is <tt>PROPPATCH</tt> and <tt>PROPFIND</tt>.\r\n\r\n\r\n<h4>2.8.2     GET</h4>\r\n\r\nA GET with a Request-URI that identifies a property returns the\r\nname and value of that property.  Accept types may be used to\r\nspecify the format of the return value, but all DAV compliant\r\nservers MUST at minimum support a return type of text/xml. If\r\ntext/xml is used as the response format then it MUST return the\r\nname and value of the property using the Prop XML element.\r\n\r\n\r\n<h4>2.8.2.1   Example</h4>\r\n\r\nThe following example assumes that the property's URL, originally\r\ngenerated by the server, was discovered by examining the proploc\r\nXML attribute returned on a result from a FINDPROP.\r\n\r\n<PRE>\r\nGET /bar.html;prop=z39.50_authors HTTP/1.1\r\nHost: foo.com\r\n</PRE>\r\n\r\n<PRE>\r\nHTTP/1.1 200 OK\r\nContent-Type: text/xml\r\nContent-Length: xxxx\r\nE-tag: \"1234\"\r\nLast-Modified: xxxx\r\n</PRE>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace\r\n     href = \"http://www.ietf.org/standards/dav/\" AS = \"D\"/&gt;\r\n&lt;?XML:Namespace\r\n     href = \"http://www.w3.com/standards/z39.50/\"AS = \"Z\"/&gt;\r\n&lt;D:prop&gt;\r\n     &lt;Z:Authors&gt;\r\n          &lt;Z:Author&gt;Jane Doe&lt;/Z:Author&gt;\r\n          &lt;Z:Author&gt;Joe Doe&lt;/Z:Author&gt;\r\n           &lt;Z:Author&gt;Lots o'Doe&lt;/Z:Author&gt;\r\n     &lt;/Z:Authors&gt;\r\n&lt;/D:prop&gt;\r\n</PRE>\r\n\r\n\r\n<h4>2.8.3     PROPPATCH</h4>\r\n\r\nThe <tt>PROPPATCH</tt> method processes instructions specified in the\r\nrequest body to create and/or remove properties defined on the\r\nresource identified by Request-URI.\r\n\r\n<P>All DAV compliant servers MUST process instructions which are\r\nspecified using the PropertyUpdate, Create, and Remove XML\r\nelements of the DAV schema.  The request message body MUST\r\ncontain at least one PropertyUpdate XML element.  Instruction\r\nprocessing MUST occur in the order instructions are received\r\n(i.e., from top to bottom), and MUST be performed atomically.\r\n\r\n\r\n<h4>2.8.3.1   PropertyUpdate XML element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/PropertyUpdate</tt>\r\n<BR>Purpose:  To contain a request to alter the properties on a resource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Values:   *(Create | Remove)\r\n<BR>Description:This XML element is a container for the information\r\nrequired to modify the properties on the resource. This XML\r\nelement is multi-valued.\r\n\r\n\r\n<h4>2.8.3.2   Create XML element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/create</tt>\r\n<BR>Purpose:  To create the DAV properties specified inside the Create XML element.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <tt>http://www.ietf.org/standards/dav/PropertyUpdate</tt>\r\n<BR>Values:   Prop\r\n<BR>Description:This XML element MUST contain only a Prop XML\r\nelement. The elements contained by Prop specify the name and\r\nvalue of properties that are created on Request-URI. If a\r\nproperty already exists then its value is replaced. The Prop XML\r\nelement MUST NOT contain a PropLoc XML attribute.\r\n\r\n\r\n<h4>2.8.3.3   Remove XML element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/remove</tt>\r\n<BR>Purpose:  To remove the DAV properties specified inside the\r\nRemove XML element.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <tt>http://www.ietf.org/standards/dav/PropertyUpdate</tt>\r\n<BR>Values:   Prop\r\n<BR>Description:Remove specifies that the properties specified in\r\nProp should be removed. Specifying the removal of a property that\r\ndoes not exist is not an error. All the elements in Prop MUST be\r\nempty, as only the names of properties to be removed are\r\nrequired.\r\n\r\n\r\n<h4>2.8.3.4   Response</h4>\r\n\r\nThe response MUST have a response body that contains a\r\nmultiresponse identifying the results for each property.\r\n\r\n<h4>2.8.3.5   Response Codes</h4>\r\n\r\n<LI>200 OK - The command succeeded. As there can be a mixture of\r\nCreate and Removes in a body, a 201 Create seems inappropriate.\r\n<LI>403 Forbidden - The client, for reasons the server chooses not to\r\nspecify, can not alter one of the properties.\r\n<LI>405 Conflict - The client has provided a value whose semantics\r\nare not appropriate for the property. This includes trying to set\r\nread only properties.\r\n<LI>413 Request Entity Too Long - If a particular property is too\r\nlong to be recorded then a composite XML error will be returned\r\nindicating the offending property.\r\n<LI>417 Insufficient Space on Resource - The resource does not have\r\nsufficient space to record the state of the resource after the\r\nexecution of this method.\r\n<LI>418 Atomicity Failure - The command was not executed because of\r\nan atomicity failure elsewhere the caused the entire command to\r\nbe aborted.\r\n\r\n\r\n<h4>2.8.3.6   Example</h4>\r\n\r\n<PRE>\r\nPROPPATCH /bar.html HTTP/1.1\r\nHost: www.foo.com\r\nContent-Type: text/xml\r\nContent-Length: xxxx\r\n</PRE>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace\r\n     href = \"http://www.ietf.org/standards/dav/\" AS = \"D\"/&gt;\r\n&lt;?XML:Namespace\r\n     href = \"http://www.w3.com/standards/z39.50/\" AS = \"Z\"/&gt;\r\n&lt;D:PropertyUpdate&gt;\r\n     &lt;Create&gt;\r\n          &lt;prop&gt;\r\n               &lt;Z:authors&gt;\r\n                    &lt;Z:Author&gt;Jim Whitehead&lt;/Z:Author&gt;\r\n                    &lt;Z:Author&gt;Roy Fielding&lt;/Z:Author&gt;\r\n               &lt;/Z:authors&gt;\r\n          &lt;/Prop&gt;\r\n     &lt;/Create&gt;\r\n     &lt;Remove&gt;\r\n          &lt;prop&gt;&lt;Z:Copyright-Owner/&gt;&lt;/prop&gt;\r\n     &lt;/Remove&gt;\r\n&lt;/D:PropertyUpdate&gt;\r\n</PRE>\r\n\r\n<PRE>\r\nHTTP/1.1 405 Conflict\r\nContent-Type: text/xml\r\nContent-Length: xxxxx\r\n</PRE>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace\r\n     href=\"http://www.ietf.org/standards/dav/\" AS = \"D\"/&gt;\r\n&lt;?XML:Namespace\r\n     href=\"http://www.w3.com/standards/z39.50/\" AS = \"Z\"/&gt;\r\n&lt;D:MultiResponse&gt;\r\n     &lt;ResponseDescription&gt; Copyright Owner can not be deleted or\r\naltered.&lt;/ResponseDescription&gt;\r\n     &lt;Response&gt;\r\n          &lt;Prop&gt;&lt;Z:authors/&gt;&lt;/Prop&gt;\r\n          &lt;Status&gt;HTTP/1.1 418 Atomicity Failure&lt;/Status&gt;\r\n     &lt;/Response&gt;\r\n     &lt;Response&gt;\r\n          &lt;Prop&gt;&lt;Z:Copyright-Owner/&gt;&lt;/Prop&gt;\r\n          &lt;Status&gt;HTTP/1.1 405 Conflict&lt;/Status&gt;\r\n     &lt;/Response&gt;\r\n&lt;/D:MultiResponse&gt;\r\n</PRE>\r\n\r\n\r\n<h4>2.8.4     PUT</h4>\r\n\r\nA PUT is specified in order to control what is returned by a GET.\r\nHowever a GET on a property always returns a predefined property\r\ncontainment format. Therefore PUT can not be used if the Request-URI refers to a property.\r\n\r\n\r\n<h4>2.8.5     PROPFIND</h4>\r\n\r\nThe <tt>PROPFIND</tt> method retrieves properties defined on Request-URI.\r\nThe request message body is an XML document that MUST contain\r\nonly one PropFind XML element, which specifies the type of\r\nproperty find action to be performed.  The XML element contained\r\nby PropFind specifies the type of action to be performed:\r\nretrieve all property names and values (AllProp), retrieve only\r\nspecified property names and values (Prop), or retrieve only a\r\nlist of all property names (Propname).  When a Prop XML element\r\nis present, it specifies a list of the names of properties whose\r\nname and value are to be returned.  The Prop element, when used\r\nwithin a FINDPROP request body MUST be empty.\r\n\r\n<P>The response is a text/xml message body that contains a\r\nMultiResponse XML element which describes the results of the\r\nattempts to retrieve the various properties. If a property was\r\nsuccessfully retrieved then its value MUST be returned in the\r\nprop XML element. In the case of Allprop and Findprop, if a\r\nprincipal does not have the right to know if a particular\r\nproperty exists, an error MUST NOT be returned. The results of\r\nthis method SHOULD NOT be cached.\r\n\r\n\r\n<h4>2.8.5.1   Propfind XML element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/Propfind</tt>\r\n<BR>Purpose:  To specify the set of matching properties\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Values:   (Prop | Allprop | Propname)\r\n<BR>Description: Propfind is a container element for the exact\r\nspecification of a <tt>PROPFIND</tt> request.\r\n\r\n\r\n<h4>2.8.5.2   Allprop</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/Allprop</tt>\r\n<BR>Purpose:  To specify that all properties are to be returned\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT>   Propfind</tt>\r\n<BR>Description: Its presence in a <tt>PROPFIND</tt> request specifies the\r\nname and value of all properties defined on the resource MUST be\r\nreturned.\r\n\r\n\r\n<h4>2.8.5.3   Propname</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/Propname</tt>\r\n<BR>Purpose:  To specify that the names of all properties defined on\r\nthe resource are to be returned.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT>   Propfind</tt>\r\n<BR>Description: Its presence in a <tt>PROPFIND</tt> request specifies the\r\nname of all properties defined on the resource MUST be returned.\r\n\r\n\r\n<h4>2.8.5.4   PropFindResult XML element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/PropFindResult</tt>\r\n<BR>Purpose: To contain the results of a SEARCH request\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: Any\r\n<BR>Values: Prop\r\n\r\n\r\n<h4>2.8.5.5   Example 1 - Prop</h4>\r\n\r\n<PRE>\r\nPROPFIND  /container/ HTTP/1.1\r\nHost: www.foo.bar\r\nContent-Length: xxxx\r\nContent-Type: text/xml\r\n</PRE>\r\n\r\n\r\n<PRE>\r\n&lt;?XML:Namespace href =\r\n     \"http://www.ietf.org/standards/dav/\" AS = \"G\"/&gt;\r\n&lt;?XML:Namespace href =\r\n     \"http://www.foo.bar/boxschema/\" AS = \"B\"/&gt;\r\n&lt;G:PROPFIND&gt;\r\n     &lt;prop&gt;\r\n          &lt;B:bigbox&gt;\r\n          &lt;B:author&gt;\r\n          &lt;B:DingALing&gt;\r\n          &lt;B:Random&gt;\r\n     &lt;/prop&gt;\r\n&lt;/G:PROPFIND&gt;\r\n</PRE>\r\n\r\n<PRE>\r\nHTTP/1.1 207 Partial Success\r\nContent-Type: text/xml\r\nContent-Length: xxxxx\r\n</PRE>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace\r\n     href =\"http://www.ietf.org/standards/dav/\" AS = \"S\"&gt;\r\n&lt;?XML:Namespace href = \"http://www.foo.bar/boxschema\" AS = R\"&gt;\r\n&lt;D:MultiResponse&gt;\r\n     &lt;ResponseDescription&gt; There has been an access violation\r\nerror. &lt;/ResponseDescription&gt;\r\n     &lt;Response&gt;\r\n          &lt;Prop&gt;\r\n               &lt;R:bigbox D:Proploc=\"http://prop.com/BoxType\"&gt;\r\n                    &lt;BoxType&gt;Box type A&lt;/BoxType&gt;\r\n               &lt;/R:bigbox&gt;\r\n               &lt;R:author D:Proploc=\"http://prop.com/Author\"&gt;\r\n                    &lt;Name&gt;J.J. Dingleheimerschmidt&lt;/Name&gt;\r\n               &lt;/R:author&gt;\r\n          &lt;/Prop&gt;\r\n          &lt;Status&gt;HTTP/1.1 200 Success&lt;/Status&gt;\r\n&lt;/Response&gt;\r\n     &lt;Response&gt;\r\n          &lt;Prop&gt;&lt;R:DingALing/&gt;&lt;R:Random/&gt;&lt;/&gt;\r\n          &lt;Status&gt;HTTP/1.1 403 Forbidden&lt;/Status&gt;\r\n          &lt;ResponseDescription&gt; The user does not have access to\r\nthe DingALink property. &lt;/ResponseDescription&gt;\r\n     &lt;/Response&gt;\r\n&lt;/D:MultiResponse&gt;\r\n</PRE>\r\n\r\n<P>The result will return all properties on the container. In this\r\ncase only two properties were found. The principal did not have\r\nsufficient access rights to see the third and fourth properties\r\nso an error was returned.\r\n\r\n\r\n<h4>2.8.5.6   Example 2 - Allprop</h4>\r\n\r\n<PRE>\r\nPROPFIND  /container/ HTTP/1.1\r\nHost: www.foo.bar\r\nContent-Length: xxxx\r\nContent-Type: text/xml\r\n</PRE>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace href =\r\n     \"http://www.ietf.org/standards/dav/\" AS = \"G\"/&gt;\r\n&lt;G:PROPFIND&gt;\r\n     &lt;Allprop/&gt;\r\n&lt;/G:PROPFIND&gt;\r\n</PRE>\r\n\r\n<PRE>\r\nHTTP/1.1 200 Success\r\nContent-Type: text/xml\r\nContent-Length: xxxxx\r\n</PRE>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace href =\r\n     \"http://www.ietf.org/standards/dav/\" As = \"S\"&gt;\r\n&lt;?XML:Namespace href = \"http://www.foo.bar/boxschema\" AS = R\"&gt;\r\n&lt;S:MultiResponse&gt;\r\n     &lt;Prop&gt;\r\n          &lt;R:bigbox D:Proploc=\"http://prop.com/BigBox\"&gt;\r\n               &lt;BoxType&gt;Box type A&lt;/BoxType&gt;\r\n          &lt;/R:bigbox&gt;\r\n          &lt;R:author D:Proploc=\"http://prop.com/Author\"&gt;\r\n               &lt;Name&gt;Hadrian&lt;/Name&gt;\r\n          &lt;/R:author&gt;\r\n     &lt;/Prop&gt;\r\n     &lt;Status&gt;HTTP/1.1 200 Success&lt;/Status&gt;\r\n&lt;/S:MultiResponse&gt;\r\n</PRE>\r\n\r\n<P>This particular client only had the right to see two properties,\r\nBoxType and Author. No error is returned for the remaining\r\nproperties, as the client does not even have sufficient rights to\r\nknow they exist. If the client did have the right to know they\r\nexisted but did not have the right to see their value, a 201\r\nPartial Success with a multiresponse, as used in the previous\r\nexample, would have been returned.\r\n\r\n\r\n<h4>2.8.5.7   Example 3 - Propname</h4>\r\n\r\n<PRE>\r\nPROPFIND  /container/ HTTP/1.1\r\nHost: www.foo.bar\r\nContent-Length: xxxx\r\nContent-Type: text/xml\r\n</PRE>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace\r\n     href = \"http://www.ietf.org/standards/dav/\" AS = \"G\"/&gt;\r\n&lt;G:PROPFIND&gt;\r\n     &lt;Propname/&gt;\r\n&lt;/G:PROPFIND&gt;\r\n</PRE>\r\n\r\n<PRE>\r\nHTTP/1.1 200 Success\r\nContent-Type: text/xml\r\nContent-Length: xxxxx\r\n</PRE>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace\r\n     href = \"http://www.ietf.org/standards/dav/\" As = \"S\"&gt;\r\n&lt;?XML:Namespace\r\n     href = \"http://www.foo.bar/boxschema\" AS = \"R\"&gt;\r\n&lt;S:MultiResponse&gt;\r\n     &lt;Prop&gt;\r\n          &lt;R:bigbox D:Proploc=\"http://prop.com/BigBox\"/&gt;\r\n          &lt;R:author D:Proploc=\"http://prop.com/Author\"/&gt;\r\n          &lt;R:DingALing/&gt;\r\n          &lt;R:Random/&gt;\r\n     &lt;/Prop&gt;\r\n     &lt;Status&gt;HTTP/1.1 200 Success&lt;/Status&gt;\r\n&lt;/S:MultiResponse&gt;\r\n</PRE>\r\n\r\nIn this case only two of the properties have direct URLs\r\navailable, while the other two properties can only be referenced\r\nvia <tt>PROPFIND</tt> and <tt>PROPPATCH</tt>.\r\n\r\n\r\n<h2>3    A Proposal for Collections of Web Resources and Name Space   Operations</h2>\r\n\r\n<h3>3.1  Observations on the HTTP Object Model</h3>\r\n\r\nThis section provides a description of a new type of Web\r\nresource, the collection, and discusses its interactions with the\r\nHTTP URL namespace.  This discussion is a prerequisite for the\r\nspecification of methods that operate on collections, given later\r\nin this document.\r\n\r\n\r\n<h4>3.1.1     Collection Resources</h4>\r\n\r\nA collection is a resource whose state consists of a list of\r\ninternal members, a list of external members, and a set of\r\nproperties.  An internal member resource MUST have a URI that is\r\nimmediately relative to the base URI of the collection, that is,\r\na relative URI in which \"../\" is illegal, which must begin with\r\n\"./\" and which MAY contain only one other \"/\" at the end of the\r\nURI. An external member resource MUST be an absolute URI that is\r\nnot an internal URI.  Any given internal or external URI MUST\r\nonly belong to the collection once, i.e., multiple instances of\r\nURIs in a collection are illegal.  Properties defined on\r\ncollections have no special distinction, and behave exactly as do\r\nproperties on non-collection resources.\r\nThe purpose of a collection resource is to model collection-like\r\nobjects (e.g., a filesystem directory) within a server's\r\nnamespace.  Once these objects have been modeled with\r\ncollections, a client may perform an <TT>INDEX</TT>, add and remove\r\nexternal members using <TT>ADDREF</TT> and <TT>DELREF</TT>, and perform recursive\r\noperations, such as a full hierarchy copy.\r\nTo support methods which operate on collections, a server SHOULD\r\nmodel its collection-like objects with collection resources.  For\r\nexample, a server which is implemented on top of a filesystem\r\nSHOULD treat all filesystem directories exposed by the server as\r\ncollection resources.\r\n\r\n<h4>3.1.2     Creation and Retrieval of Collection Resources</h4>\r\n\r\nThis document specifies the <tt>MKCOL</tt> method to create new collection\r\nresources, and the <tt>INDEX</tt> method to list their contents.2\r\nIn HTTP/1.1, the PUT method is defined to store the request body\r\nat the location specified by Request-URI.  While a description\r\nformat for a collection can readily be constructed that could be\r\nused with PUT, the implications of sending such a description to\r\nthe server are undesirable.  For example, if a description of a\r\ncollection that omitted some existing resources were PUT to a\r\nserver, this might be interpreted as a command to remove those\r\nmembers.  This would extend PUT to perform <tt>DELETE</tt> functionality,\r\nwhich is undesirable since it changes the semantics of PUT, and\r\nmakes it difficult to control <tt>DELETE</tt> functionality with an access\r\ncontrol scheme based on methods.\r\nWhile the POST method is sufficiently open-ended that a \"create a\r\ncollection\" POST command could be constructed, this is\r\nundesirable because it would be difficult to separate access\r\ncontrol for collection creation from other uses of POST if they\r\nboth use the same method.\r\nWhile it might seem desirable to have GET return a listing of the\r\nmembers of a collection, this is foiled by the existence of the\r\n\"index.html\" de-facto standard namespace redirection, in which a\r\nGET request on a collection is automatically redirected to the\r\nindex.html resource.\r\nThe exact definition of the behavior of GET and PUT on\r\ncollections is defined later in this document.\r\n\r\n\r\n<h4>3.1.2.1   Example</h4>\r\n\r\nThe structured resource http://foo/bar is created with a PUT. Bar\r\nis a multipart/related file with two members http://foo/bar/a and\r\nhttp://foo/bar/b. If bar were deleted then both a and b would\r\nalso be deleted since they are all really just one resource. If\r\nhttp://foo/bar/a/c was PUT then a <tt>DELETE</tt> on http://foo/bar/a\r\nwould also delete http://foo/bar/a/c as c was created with a PUT\r\nnot a <tt>MKCOL</tt>.\r\nIf http://foo/bar/b/d is created with a <tt>MKCOL</tt> and\r\nhttp://foo/bar/b/d/e was created then a <tt>DELETE</tt> on d would fail\r\nbecause d is a collection with an internal member. However the\r\nexistence of the collection d is something of an illusion. If a\r\n<tt>DELETE</tt> was executed on http://foo/bar then everything would be\r\ndeleted, even though http://foo/bar/b/d was created with a <tt>MKCOL</tt>.\r\nThus the effect of a <tt>MKCOL</tt> within a composite resource\u2019s\r\nnamespace is felt on its children, not its ancestors. The\r\nchildren of d MUST be treated as members of a collection when a\r\nmethod is executed on d. But a method executed on b or a is\r\ntreated as if there only existed a non-collection resource.\r\n\r\n\r\n<h4>3.1.3     Source Resources and Output Resources</h4>\r\n\r\nFor many resources, the entity returned by GET exactly matches\r\nthe persistent state of the resource, for example, a GIF file\r\nstored on a disk.  For this simple case, the URL at which a\r\nresource is accessed is identical to the URL at which the source\r\n(the persistent state) of the resource is accessed. This is also\r\nthe case for HTML source files that are not processed by the\r\nserver prior to transmission.\r\nHowever, the server can sometimes process HTML resources before\r\nthey are transmitted as a return entity body. For example,\r\nserver-side-include directives within an HTML file instruct a server to\r\nreplace the directive with another value, such as the current\r\ndate.  In this case, what is returned by GET (HTML plus date)\r\ndiffers from the persistent state of the resource (HTML plus\r\ndirective). Typically there is no way to access the HTML resource\r\ncontaining the unprocessed directive.\r\nSometimes the entity returned by GET is the output of a data-producing process that is described by one or more source\r\nresources (that may not even have a location in the URL\r\nnamespace).  A single data-producing process may dynamically\r\ngenerate the state of a potentially large number of output\r\nresources. An example of this is a CGI script that describes a\r\n\"finger\" gateway process that maps part of the namespace of a\r\nserver into finger requests, such as\r\nhttp://www.foo.bar.org/finger_gateway/user@host.\r\nIn the absence of distributed authoring capability, it is\r\nacceptable to have no mapping of source resource(s) to the URI\r\nnamespace, and in fact has desirable security benefits. However,\r\nif remote editing of the source resource(s) is desired, the\r\nsource resource(s) should be given a location in the URI\r\nnamespace. This source location should not be one of the\r\nlocations at which the generated output is retrievable, since in\r\ngeneral it is impossible for the server to differentiate requests\r\nfor source resources from requests for process output resources.\r\nThere is often a many-to-many relationship between source\r\nresources and output resources.\r\nFor DAV compliant servers all output resources which have a\r\nsingle source resource (and that source resource has a URI), the\r\nURI of the source resource SHOULD be stored in a single link on\r\nthe output resource with type\r\nhttp://www.ietf.org/standards/dav/source. Note that by storing\r\nthe source URI in links on the output resources, the burden of\r\ndiscovering the source is placed on the authoring client.\r\n\r\n\r\n<h3>3.2  MKCOL Method</h3>\r\n\r\n\r\n<h4>3.2.1     Problem Description</h4>\r\n\r\nA client must be able to create a collection.\r\n\r\n\r\n<h4>3.2.2     Solution Requirements</h4>\r\n\r\nThe solution:\r\n<li>   Must ensure that a collection has been made (i.e. that it\r\n  responds to the <tt>INDEX</tt> method) as opposed to a non-collection\r\n  resource. If a collection could not be made, it must indicate\r\n  this failure to the user-agent.\r\n\r\n\r\n<h4>3.2.3     Request</h4>\r\n\r\nMKCOL creates a new collection resource at the location specified\r\nby the Request-URI. If the Request-URI exists, then <tt>MKCOL</tt> must\r\nfail. During <tt>MKCOL</tt> processing, a server MUST make the Request-URI\r\na member of its parent collection. If no such an ancestor exists,\r\nthe method MUST fail. When the <tt>MKCOL</tt> operation creates a new\r\ncollection resource, all ancestors MUST already exist, or the\r\nmethod MUST fail with a 409 Conflict status code.  For example,\r\nif a request to create collection /a/b/c/d/ is made, and neither\r\n/a/b/ nor /a/b/c/ exist, the request MUST fail.\r\n\r\n\r\n<h4>3.2.3.1   MKCOL Without Request Body</h4>\r\n\r\nWhen <tt>MKCOL</tt> is invoked without a request body, the newly created\r\ncollection has no members.\r\n\r\n\r\n<h4>3.2.3.2   MKCOL With Request Body</h4>\r\n\r\nA <tt>MKCOL</tt> request message MAY contain a message body.  The behavior\r\nof a <tt>MKCOL</tt> request when the body is present is limited to\r\ncreating collections, members of a collection, bodies of members\r\nand properties on the collections or members. If the server\r\nreceives a <tt>MKCOL</tt> request entity type it does not support or\r\nunderstand it MUST respond with a 415 (Unsupported Media Type)\r\nstatus code.  The exact behavior of <tt>MKCOL</tt> for various request\r\nmedia types is undefined in this document, and will be specified\r\nin separate documents.\r\n\r\n\r\n<h4>3.2.4     Response</h4>\r\n\r\nResponses from a <tt>MKCOL</tt> request are not cacheable, since <tt>MKCOL</tt> has\r\nnon-idempotent semantics.\r\n<LI>201 (Created) - The collection or structured resource was created\r\nin its entirety.\r\n<LI>403 (Forbidden) - This indicates at least one of two conditions:\r\n1) The server does not allow the creation of collections at the\r\ngiven location in its namespace, and 2) The parent collection of\r\nthe Request-URI exists but cannot accept members.\r\n<LI>409 (Conflict) - A collection cannot be made at the Request-URI\r\nuntil one or more intermediate collections have been created.\r\n<LI>415 (Unsupported Media Type)- The server does not support the\r\nrequest type of the body.\r\n<LI>417 (Insufficient Space on Resource) - The resource does not have\r\nsufficient space to record the state of the resource after the\r\nexecution of this method.\r\n\r\n\r\n<h4>3.2.5     Example</h4>\r\n\r\nThis example creates a container collection called\r\n/webdisc/xfiles/ on the server www.server.org.\r\n<PRE>\r\n     MKCOL /webdisc/xfiles/ HTTP/1.1\r\n     Host: www.server.org\r\n</PRE>\r\n\r\n\r\n<PRE>\r\n     HTTP/1.1 201 Created\r\n</PRE>\r\n\r\n\r\n<h3>3.3  Standard DAV Properties</h3>\r\n\r\nThe following properties are defined on DAV compliant resources.\r\nAll enclosed properties are part of the DAV Schema.\r\n\r\n\r\n<h4>3.3.1     IsCollection Property</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/iscollection</tt>\r\n<BR>Purpose:  This property contains a Boolean value that is set to\r\n\"true\" if the resource is a collection\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Value:    (\"true\" | \"false\")\r\n<BR>Description: This property MUST be defined on all DAV compliant\r\nresources.\r\n\r\n\r\n<h4>3.3.2     DisplayName Property</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/displayname</tt>\r\n<BR>Purpose:  A name for the resource that is suitable for\r\npresentation to a user.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Value:    Any valid XML character data (as defined in [Bray,\r\nSperberg-McQueen, 1997])\r\n<BR>Description: This property SHOULD be defined on all DAV compliant\r\nresources. If present, the property a description of the resource\r\nthat is suitable for presentation to a user.\r\n\r\n<h4>3.3.3     CreationDate3 Property</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/creationdate</tt>\r\n<BR>Purpose:  The time and 4date the resource was created.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Value:    The time and date MUST be given in ISO 8601 format\r\n[ISO8601]\r\n<BR>Description: This property SHOULD be defined on all DAV compliant\r\nresources. If present, it contains a timestamp of the moment when\r\nthe resource was created (i.e., the moment it had non-null\r\nstate).\r\n\r\n\r\n<h4>3.3.4     GETentity Property5</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/GETentity</tt>\r\n<BR>Purpose:  Contains the value of headers that are returned by a\r\nGET without Accept headers.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Value:    Content-Type Content-Length Content-Language Last-Modified Etag Creation-Date\r\n<BR>Description: This property MUST be defined on all DAV compliant\r\nresources unless GET is not supported, in which case this\r\nproperty MUST NOT be defined. This property MUST contain at most\r\none instance of each element in its Value, if they are defined.\r\n\r\n<h4>3.3.5     INDEXentity Property</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/INDEXentity</tt>\r\n<BR>Purpose:  Contains the value of headers that are returned by an\r\n<tt>INDEX</tt>.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Value:    Content-Type Content-Length Content-Language Last-Modified Etag Creation-Date\r\n<BR>Description: This property MUST be defined on all DAV compliant\r\nresources unless <tt>INDEX</tt> is not supported, in which case this\r\nproperty MUST NOT be defined. This property MUST contain at most\r\none instance of each element in its Value, if they are defined.\r\n\r\n\r\n<h4>3.3.6     Content-Type XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/content-type</tt>\r\n<BR>Purpose:  The content-type of the member resource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   GETentity or INDEXentity\r\n<BR>Value:    media-type   ; defined in Section 3.7 of [Fielding et\r\nal., 1997]\r\n<BR>Description: If the parent of this element is GETentity, the\r\nvalue MUST be identical to the content-type returned by a GET on\r\nthe resource without Accept headers.  If the parent is\r\nINDEXentity, the value MUST be identical to the content-type\r\nreturned by an <tt>INDEX</tt> on the resource.  If no content-type is\r\navailable, this element MUST NOT be defined.\r\n\r\n\r\n<h4>3.3.7     Content-Length XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/content-length</tt>\r\n<BR>Purpose:  Describes the default content-length of the resource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Value:    content-length ; see section 14.14 of RFC 2068\r\n<BR>Description: If the parent of this element is GETentity, this\r\nelement MUST have a value equal to the content-length header\r\nreturned by a GET on the resource without Accept headers.  If the\r\nparent is INDEXentity, the value MUST be identical to the\r\ncontent-length returned by an <tt>INDEX</tt> on the resource.  If no content-length is available, this element MUST NOT be defined.\r\n\r\n\r\n<h4>3.3.8     Content-Language XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/content-language</tt>\r\n<BR>Purpose:  Describes the default natural language of a resource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Value:    language-tag   ;language-tag is defined in section 14.13 of RFC 2068\r\n<BR>Description: If the parent of this element is GETentity, this\r\nelement MUST have a value equal to the content-language header\r\nreturned by a GET on the resource without Accept headers.  If the\r\nparent is INDEXentity, the value MUST be identical to the\r\ncontent-language header returned by an <tt>INDEX</tt> on the resource.  If no\r\ncontent-language header is available, this element MUST NOT be\r\ndefined.\r\n\r\n\r\n<h4>3.3.9     Last-Modified XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/last-modified</tt>\r\n<BR>Purpose:  The date the resource was last modified.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   GETentity or INDEXentity\r\n<BR>Value:    The date MUST be given in RFC 1123 format (rfc-1123\r\nproduction, defined in section 3.3.1 of [Fielding et al., 1997]\r\n<BR>Description: If the parent of this element is GETentity, this\r\nelement MUST have a value equal to the last-modified header\r\nreturned by a GET on the resource without Accept headers.  If the\r\nparent is INDEXentity, the value MUST be identical to the last-modified header returned by an <tt>INDEX</tt> on the resource.  If no\r\nlast-modified header is available, this element MUST NOT be defined.\r\n\r\n\r\n<h4>3.3.10    Etag XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/etag</tt>\r\n<BR>Purpose:  The entity tag of the resource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   GETentity or INDEXentity\r\n<BR>Value:    entity-tag  ; defined in Section 3.11 of [Fielding et\r\nal., 1997]\r\n<BR>Description: If the parent of this element is GETentity, this\r\nelement MUST have a value equal to the entity-tag header returned\r\nby a GET on the resource without Accept headers.  If the parent\r\nis INDEXentity, the value MUST be identical to the entity-tag\r\nheader returned by an <tt>INDEX</tt> on the resource.  If no entity-tag\r\nheader is available, this element MUST NOT be defined.\r\n\r\n\r\n<h3>3.4  INDEX Method</h3>\r\n\r\n\r\n<h4>3.4.1     Problem Description</h4>\r\n\r\nA mechanism is needed to discover if a resource is a collection\r\nand if so, list its members.\r\n<h4>3.4.2     Solution Requirements</h4>\r\n\r\nThe solution:\r\n<li>   must allow a client to discover the members of a collection\r\n<li>   must always provide a machine-readable description of the\r\n  membership of a collection\r\n<li>   must be leveraged as a more general mechanism to provide a\r\n  list of contents for any resource which can profitably return a\r\n  membership like listing.\r\n\r\n\r\n<h4>3.4.3     The Request</h4>\r\n\r\nThe <tt>INDEX</tt> method returns a machine-readable representation of the\r\nmembership of the resource at the Request-URI.\r\n\r\n<P>For a collection, <tt>INDEX</tt> MUST return a list of its members. All\r\nWebDAV compliant resources MUST support the text/xml response\r\nentity described below.  The <tt>INDEX</tt> result for a collection MAY\r\nalso return a list of the members of child collections, to any\r\ndepth.\r\n\r\n<P>Collections that respond to an <tt>INDEX</tt> method with a text/xml\r\nentity MUST contain only one ResInfo element.  This ResInfo\r\nelement contains an Href element, which gives the identifier(s)\r\nof the resource, a Prop element, which gives selected properties\r\nof the resource, and a Members element, which contains a ResInfo\r\nelement for each member of the collection.  The Prop element MUST\r\ncontain at least the following properties, if they are defined\r\nand available: <TT>DisplayName</TT>, <TT>IsCollection</TT>, <TT>CreationDate</TT>,\r\n<TT>GETentity</TT>, and <TT>INDEXentity</TT>.\r\n\r\n<P>The response from <tt>INDEX</tt> is cacheable, and SHOULD be accompanied\r\nby an ETag header (see section 13.3.4 of RFC 2068). If GET and\r\n<tt>INDEX</tt> return different entities for the same resource state, they\r\nMUST return different entity tags.\r\n\r\n\r\n<h4>3.4.4     The Response</h4>\r\n\r\n<LI>200 (OK) - The server MUST send a machine readable response\r\nentity which describes the membership of the resource.\r\n\r\n\r\n<h4>3.4.5     ResInfo XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/resinfo</tt>\r\n<BR>Purpose:  Describes a resource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Value:    Href Prop Members\r\n<BR>Description: There MUST be at least one Href element.  Each Href\r\nelement contains a URI for the resource, which MUST be an\r\nabsolute URI. There MUST be a single Prop element that contains a\r\nseries of properties defined on the resource.  If the resource is\r\na collection, it MAY have at most one Members element, which\r\ndescribes the members of the collection.\r\n\r\n\r\n<h4>3.4.6     Members XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/members</tt>\r\n<BR>Purpose:  Describes the membership of a collection resource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT>   ResInfo</tt>\r\n<BR>Value:    ResInfo\r\n<BR>Description: Contains zero or more ResInfo elements, which\r\ndescribe members of the collection.\r\n\r\n\r\n<h4>3.4.7     Href XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/href</tt>\r\n<BR>Purpose:  To identify that the content of the element is a URI.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent:   Any\r\n<BR>Value:    URI ; See section 3.2.1 of [Fielding et al., 1997]\r\n\r\n<h4>3.4.8     Example</h4>\r\n\r\n<PRE>\r\nINDEX /user/yarong/dav_drafts/ HTTP/1.1\r\nHost: www.microsoft.com\r\n</PRE>\r\n\r\n<PRE>\r\nHTTP/1.1 200 OK\r\nContent-Type: text/xml\r\nContent-Length: xxx\r\nLast-Modified: Thu, 11 Sep 1997 23:45:12 GMT\r\nETag: \"fooyyybar\"\r\n</PRE>\r\n\r\n<PRE>\r\n&lt;?XML:Namespace\r\n     href = \"http://www.ietf.org/standards/dav/\" as = \"D\"/&gt;\r\n&lt;D:ResInfo&gt;\r\n     &lt;XML:Href&gt;\r\n          http://www.microsoft.com/user/yarong/dav_drafts/\r\n     &lt;/XML:Href&gt;\r\n     &lt;Prop&gt;\r\n        &lt;DisplayName&gt;\r\n          WebDAV working drafts directory\r\n        &lt;/DisplayName&gt;\r\n        &lt;IsCollection&gt;true&lt;/IsCollection&gt;\r\n        &lt;CreationDate&gt;19970418T070304Z&lt;/CreationDate&gt;\r\n        &lt;GETentity&gt;\r\n          &lt;Content-Type&gt;text/html&lt;/Content-Type&gt;\r\n          &lt;Content-Length&gt;2754&lt;/Content-Length&gt;\r\n          &lt;Content-Language&gt;en&lt;/Content-Language&gt;\r\n          &lt;Last-Modified&gt;\r\n               Fri, 22 Aug 1997 10:11:26 GMT\r\n          &lt;/Last-Modified&gt;\r\n          &lt;Etag&gt;\"8675309\"&lt;/Etag&gt;\r\n        &lt;/GETentity&gt;\r\n        &lt;INDEXentity&gt;\r\n          &lt;Content-Type&gt;text/xml&lt;/Content-Type&gt;\r\n          &lt;Content-Length&gt;xxx&lt;/Content-Length&gt;\r\n          &lt;Last-Modified&gt;\r\n               Thu, 11 Sep 1997 23:45:12 GMT\r\n          &lt;/Last-Modified&gt;\r\n          &lt;Etag&gt;\"fooyyybar\"&lt;/Etag&gt;\r\n        &lt;/INDEXentity&gt;\r\n     &lt;/Prop&gt;\r\n</PRE>\r\n\r\n<PRE>\r\n     &lt;Members&gt;\r\n        &lt;ResInfo&gt;\r\n          &lt;XML:Href&gt;\r\n          http://www.microsoft.com/user/yarong/dav_drafts/base\r\n          &lt;/XML:Href&gt;\r\n          &lt;Prop&gt;\r\n             &lt;IsCollection\r\n     D:PropLoc=\"http://www.microsoft.com/user/yarong/dav_drafts/b\r\n     ase;props=IsCollection\"&gt;\r\n               False\r\n             &lt;/IsCollection&gt;\r\n             &lt;DisplayName&gt;\r\n               WebDAV Name Space Operations Draft\r\n             &lt;/DisplayName&gt;\r\n             &lt;Creation-Date&gt;19970320T230525Z&lt;/Creation-Date&gt;\r\n             &lt;GETentity&gt;\r\n               &lt;Content-Type&gt;application/msword&lt;/Content-Type&gt;\r\n               &lt;Content-Length&gt;1400&lt;/Content-Length&gt;\r\n               &lt;Content-Language&gt;en&lt;/Content-Language&gt;\r\n               &lt;Last-Modified&gt;\r\n                    Fri, 22 Aug 1997 18:22:56 GMT\r\n               &lt;/Last-Modified&gt;\r\n               &lt;Etag&gt;\"8675309\"&lt;/Etag&gt;\r\n             &lt;/GETentity&gt;\r\n          &lt;/Prop&gt;\r\n        &lt;/ResInfo&gt;\r\n     &lt;/Members&gt;\r\n&lt;/D:ResInfo&gt;\r\n</PRE>\r\n\r\n<p>\r\nThis example shows the result of the <tt>INDEX</tt> method applied to the\r\ncollection resource\r\nhttp://www.microsoft.com/user/yarong/dav_drafts/.  It returns a\r\nresponse body in XML format, which gives information about the\r\ncontainer and its sole member,\r\nhttp://www.microsoft.com/user/yarong/dav_drafts/base. The entry\r\non the collection confirms that resource the <tt>INDEX</tt> was executed\r\non is a collection. The result also contains the URI of the\r\nIsCollection property on the member resource.\r\n\r\n\r\n<h3>3.5  Behavior of RFC 2068 Methods on Collections</h3>\r\n\r\nWith the introduction of the collection resource type to the HTTP\r\nobject model, it is necessary to define the behavior of the\r\nexisting methods (defined in RFC 2068) when invoked on a\r\ncollection resource to avoid ambiguity.  While some methods, such\r\nas <TT>OPTIONS</TT> and <TT>TRACE</TT> behave identically when applied to\r\ncollections, <TT>GET</TT>, <TT>HEAD</TT>, <TT>POST</TT>, <TT>PUT</TT>, and <tt>DELETE</tt> require some\r\nadditional explanation.\r\n\r\n\r\n<h4>3.5.1     GET, HEAD for Collections</h4>\r\n\r\nThe semantics of <TT>GET</TT> are unchanged when applied to a collection,\r\nsince <TT>GET</TT> is defined as, \"retrieve whatever information (in the\r\nform of an entity) is identified by the Request-URI\" [Fielding et\r\nal., 1997]. <TT>GET</TT> when applied to a collection MAY return the\r\ncontents of an \"index.html\" resource, a human-readable view of\r\nthe contents of the collection, or something else altogether, and\r\nhence it is possible the result of a <TT>GET</TT> on a collection will\r\nbear no correlation to the state of the collection.\r\nSimilarly, since the definition of <TT>HEAD</TT> is a <TT>GET</TT> without a\r\nresponse message body, the semantics of <TT>HEAD</TT> are unmodified when\r\napplied to collection resources.\r\n\r\n\r\n<h4>3.5.2     POST for Collections</h4>\r\n\r\nSince by definition the actual function performed by <TT>POST</TT> is\r\ndetermined by the server and often depends on the particular\r\nresource, the behavior of <TT>POST</TT> when applied to collections cannot\r\nbe meaningfully modified because it is largely undefined.  Thus\r\nthe semantics of <TT>POST</TT> are unmodified when applied to a\r\ncollection.\r\n\r\n\r\n<h4>3.5.3     PUT for Collections</h4>\r\n\r\nAs defined in the HTTP/1.1 specification [Fielding et al., 1997],\r\nthe \"<TT>PUT</TT> method requests that the enclosed entity be stored under\r\nthe supplied Request-URI.\"  Since submission of an entity\r\nrepresenting a collection would implicitly encode creation and\r\ndeletion of resources, this specification intentionally does not\r\ndefine a transmission format for creating a collection using <TT>PUT</TT>.\r\nInstead, the <tt>MKCOL</tt> method is defined to create collections.  If a\r\n<TT>PUT</TT> is invoked on a collection resource it MUST fail.\r\nWhen the <TT>PUT</TT> operation creates a new non-collection resource all\r\nancestors MUST already exist.  If all ancestors do not exist, the\r\nmethod MUST fail with a 409 Conflict status code.  For example,\r\nif resource /a/b/c/d.html is to be created and /a/b/c/ does not\r\nexist, then the request MUST fail.\r\n\r\n\r\n<h4>3.5.3.1   PUT for Non-Collection Resources</h4>\r\n\r\nA <TT>PUT</TT> performed on an existing resource replaces the <TT>GET</TT> response\r\nentity of the resource, but MUST NOT change the value of any dead\r\nproperties defined on the resource.  Live properties defined on\r\nthe resource MAY be recomputed during <TT>PUT</TT> processing.\r\n\r\n<h4>3.5.4     DELETE for Collections</h4>\r\n\r\nWhen <tt>DELETE</tt> is applied to a collection without internal members\r\nthe collection resource, along with its properties, and external\r\nmembers, MUST be deleted.  A <tt>DELETE</tt> method applied to a\r\ncollection resource containing internal member resources MUST\r\nfail with a 409 Conflict status code.\r\n\r\n<h4>3.5.5     DELETE Method for Non-Collection Resources</h4>\r\n\r\nIf the <tt>DELETE</tt> method is issued to a non-collection resource which\r\nis an internal member of a collection, then during <tt>DELETE</tt>\r\nprocessing a server MUST remove the Request-URI from its parent\r\ncollection. A server MAY remove the URI of a deleted resource\r\nfrom any collections of which the resource is an external member.\r\n\r\n\r\n<h3>3.6  COPY Method</h3>\r\n\r\n\r\n<h4>3.6.1     Problem Description</h4>\r\n\r\nCurrently, in order to create a copy of a resource, the client\r\nmust <TT>GET</TT> an entity and then <TT>PUT</TT> that entity to the desired\r\ndestination. This requires (1) an entity to be transmitted to and\r\nfrom the server and (2) that the resource be expressible as an\r\nentity with complete fidelity.\r\nThis is problematic because of the network traffic involved in\r\nmaking a copy, and because there is often no way to fully express\r\na resource as an entity without a loss of fidelity.\r\n\r\n\r\n<h4>3.6.2     Solution Requirements</h4>\r\n\r\nThe solution:\r\n<li>   MUST allow a principal to create a copy of a resource\r\nwithout having to transmit the resource to and from the server.\r\n\r\n\r\n<h4>3.6.3     The Request</h4>\r\n\r\nThe <tt>COPY</tt> method creates a duplicate of the source resource, given\r\nby the Request-URI, in the destination resource, given by the\r\nDestination header.  The Destination header MUST be present.  The\r\nexact behavior of the <tt>COPY</tt> method depends on the type of the\r\nsource resource.\r\n\r\n\r\n<h4>3.6.3.1   COPY for HTTP/1.1 resources</h4>\r\n\r\nWhen the source resource is not a collection, and is not a\r\nproperty, the body of the destination resource MUST be octet-for-octet identical to the body of the source resource. Alterations\r\nto the destination resource do not modify the source resource.\r\nAlterations to the source resource do not modify the destination\r\nresource. Thus, all copies are performed \"by-value\".\r\nAll properties on the source resource MUST be duplicated on the\r\ndestination resource, subject to modifying headers, following the\r\ndefinition for copying properties.\r\n\r\n\r\n<h4>3.6.3.2   COPY for Properties</h4>\r\n\r\nThe following section defines how properties on a resource are\r\nhandled during a <tt>COPY</tt> operation.\r\nLive properties SHOULD be duplicated as identically behaving live\r\nproperties at the destination resource. Since they are live\r\nproperties, the server determines the syntax and semantics (hence\r\nvalue) of these properties.  Properties named by the Enforce-Live-Properties header MUST be live on the destination resource, or\r\nthe method MUST fail.  If a property is not named by Enforce-Live-Properties and cannot be copied live, then its value MUST be\r\nduplicated, octet-for-octet, in an identically named, dead\r\nresource on the destination resource.\r\nIf a property on the source already exists on the resource and\r\nthe overwrite header is set to TRUE then the property at the\r\ndestination MUST be overwritten with the property from the\r\nsource. If the overwrite header is false and the previous\r\nsituation exists then the <tt>COPY</tt> MUST fail with a 409 Conflict.\r\n\r\n\r\n<h4>3.6.3.3   COPY for Collections</h4>\r\n\r\nA <tt>COPY</tt> on a collection causes a collection resource to be created\r\nat the destination with the same properties, but without any\r\nmembers, internal or external.  All properties on the source\r\ncollection are copied over to the destination collection. Where\r\nthere is a conflict the source properties will overwrite the\r\ndestination properties. Any members at the <I>[sic]</I> MUST be duplicated on\r\nthe destination collection, subject to modifying headers,\r\nfollowing the definition for copying properties.\r\n\r\n\r\n<h4>3.6.3.4   Type Interactions</h4>\r\n\r\nIf the destination resource identifies a property and the source\r\nresource is not a property, then the copy SHOULD fail.\r\nIf the destination resource identifies a collection and the\r\nOverwrite header is \"true,\" prior to performing the copy, the\r\nserver MUST perform a <tt>DELETE</tt> operation on the collection.\r\n\r\n\r\n<h4>3.6.4     The Response</h4>\r\n\r\n<LI>200 (OK) The source resource was successfully copied to a pre-existing destination resource.\r\n<LI>201 (Created) The source resource was successfully copied.  The\r\ncopy operation resulted in the creation of a new resource.\r\n<LI>412 (Precondition Failed) This status code MUST be returned if\r\nthe server was unable to maintain the liveness of the properties\r\nlisted in the Enforce-Live-Properties header, or if the Overwrite\r\nheader is false, and the state of the destination resource is\r\nnon-null.\r\n<LI>417 (Insufficient Space on Resource) - The destination resource\r\ndoes not have sufficient space to record the state of the\r\nresource after the execution of this method.\r\n<LI>500 (Server Error) The resource was in such a state that it could\r\nnot be copied. This may occur if the Destination header specifies\r\na resource that is outside the namespace the resource is able to\r\ninteract with.\r\n\r\n\r\n<h4>3.6.5     Examples</h4>\r\n\r\n\r\n<h4>3.6.5.1   Overwrite Example</h4>\r\n\r\nThis example shows resource\r\nhttp://www.ics.uci.edu/~fielding/index.html being copied to the\r\nlocation http://www.ics.uci.edu/users/f/fielding/index.html.  The\r\ncontents of the destination resource were overwritten, if non-null.\r\n\r\n<PRE>\r\nCOPY /~fielding/index.html HTTP/1.1\r\nHost: www.ics.uci.edu\r\nDestination: http://www.ics.uci.edu/users/f/fielding/index.html\r\n</PRE>\r\n\r\n\r\n<PRE>\r\nHTTP/1.1 200 OK\r\n</PRE>\r\n\r\n\r\n<h4>3.6.5.2   No Overwrite Example</h4>\r\n\r\nThe following example shows the same copy operation being\r\nperformed, except with the Overwrite header set to \"false.\"  A\r\nresponse of 412, Precondition Failed, is returned because the\r\ndestination resource has a non-null state.\r\n\r\n<PRE>\r\nCOPY /~fielding/index.html HTTP/1.1\r\nHost: www.ics.uci.edu\r\nDestination: http://www.ics.uci.edu/users/f/fielding/index.html\r\nOverwrite: \"false\"\r\n</PRE>\r\n\r\n\r\n<PRE>\r\nHTTP/1.1 412 Precondition Failed\r\n</PRE>\r\n\r\n\r\n\r\n\r\n<h3>3.7  MOVE Method</h3>\r\n<h4>3.7.1     Problem Description</h4>\r\n\r\nThe move operation on a resource is the logical equivalent of a\r\ncopy followed by a delete, where the actions are performed\r\natomically.  Using RFC 2068 methods only, this procedure could be\r\nperformed in several steps. First, the client could issue a <TT>GET</TT>\r\nto retrieve a representation of a resource, issue a <tt>DELETE</tt> to\r\nremove the resource from the server, then use <TT>PUT</TT> to place the\r\nresource on the server with a new URI. As is the case for <tt>COPY</tt> -\r\nbecause of the network traffic involved in making a move, and\r\nbecause there is often no way to fully express a resource as an\r\nentity without a loss of fidelity - server move functionality is\r\npreferable.\r\nWith a WEBDAV server, a principal may accomplish this task by\r\nissuing a <tt>COPY</tt> and then <tt>DELETE</tt>. Network load decreases, but the\r\nserver load may still be significant because the server must\r\ncreate a duplicate resource. Were a server to know beforehand\r\nthat a principal intended to perform <tt>COPY</tt> and <tt>DELETE</tt> operations\r\nin succession, it could avoid the creation of a duplicate\r\nresource.\r\n\r\n\r\n<h4>3.7.2     Solution Requirements</h4>\r\n\r\nThe solution:\r\n<li>   Must prevent the unneeded transfer of entity bodies from and\r\n  to the server.\r\n<li>   Must prevent the unneeded creation of copies by the server.\r\n\r\n\r\n<h4>3.7.3     The Request</h4>\r\n\r\nThe move operation on a resource is the logical equivalent of a\r\ncopy followed by a delete, where the actions are performed\r\natomically. If a resource exists at the destination, the\r\ndestination resource will be <TT>DELETEd</TT> as a side effect of the <tt>MOVE</tt>\r\noperation, subject to the restrictions of the overwrite header.\r\n\r\n\r\n<h4>3.7.4     The Response</h4>\r\n\r\n<LI>200 (OK) - The resource was moved. A successful response must\r\ncontain the Content-Location header, set equal to the URI in\r\nsource. This lets caches properly flush any cached entries for\r\nthe source. Unfortunately the Content-Location header only allows\r\na single value so it is not possible for caches unfamiliar with\r\nthe <tt>MOVE</tt> method to properly clear their caches.\r\n<LI>412 (Precondition Failed) This status code MUST be returned if\r\nthe server was unable to maintain the liveness of the properties\r\nlisted in the Enforce-Live-Properties header, or if the Overwrite\r\nheader is false, and the state of the destination resource is\r\nnon-\r\nnull.\r\n<LI>501 (Not Implemented) - This may occur if the Destination header\r\nspecifies a resource which is outside its domain of control\r\n(e.g., stored on another server) resource and the server either\r\nrefuses or is incapable of moving to an external resource.\r\n<LI>502 (Bad Gateway) - This may occur when moving to external\r\nresources and the destination server refused to accept the\r\nresource.\r\n\r\n\r\n<h4>3.7.5     Examples</h4>\r\n<h4>3.7.5.1   Overwrite Example</h4>\r\n\r\nThis example shows resource\r\nhttp://www.ics.uci.edu/~fielding/index.html being moved to the\r\nlocation http://www.ics.uci.edu/users/f/fielding/index.html.  The\r\ncontents of the destination resource were overwritten, if non-null.\r\n\r\n<PRE>\r\nMOVE /~fielding/index.html HTTP/1.1\r\nHost: www.ics.uci.edu\r\nDestination: http://www.ics.uci.edu/users/f/fielding/index.html\r\n</PRE>\r\n\r\n\r\n<PRE>\r\nHTTP/1.1 200 OK\r\nContent-Location:\r\nhttp://www.ics.uci.edu/users/f/fielding/index.html\r\n</PRE>\r\n\r\n\r\n<h3>3.8  ADDREF Method</h3>\r\n\r\n\r\n<h4>3.8.1     Problem Definition</h4>\r\n\r\nThere needs to be a way to add an external member to a\r\ncollection.\r\n\r\n\r\n<h4>3.8.2     Solution Requirements</h4>\r\n\r\nThe solution must:\r\n<li>   allow access control\r\n<li>   allow referencing to URIs of external members\r\n<li>   not require a body\r\n\r\n\r\n<h4>3.8.3     The Request</h4>\r\n\r\nThe <TT>ADDREF</TT> method adds the URI specified in the Collection-Member\r\nheader as an external member to the collection specified by the\r\nRequest-URI. The value in the Collection-Member header MUST be an\r\nabsolute URI meeting the requirements of an external member URI.\r\nIt is not an error if the URI specified in the Collection-Member\r\nheader already exists as an external member of the collection,\r\nhowever, after processing <TT>ADDREF</TT> there MUST be only one instance\r\nof the URI in the collection.  If the URI specified in the\r\nCollection-Member header already exists as an internal member of\r\nthe collection, the <TT>ADDREF</TT> method MUST fail with a 412\r\nPrecondition Failed status code.\r\n\r\n\r\n<h4>3.8.4     Example</h4>\r\n\r\n<PRE>\r\nADDREF /~whitehead/dav/ HTTP/1.1\r\nHOST: www.ics.udi.edu\r\nCollection-Member: http://www.ietf.org/standards/dav/\r\n</PRE>\r\n\r\n\r\n<PRE>\r\nHTTP/1.1 200 OK\r\n</PRE>\r\n\r\n\r\n<h3>3.9  DELREF Method</h3>\r\n\r\n\r\n<h4>3.9.1     Problem Definition</h4>\r\nThere needs to be a way to remove an external member from a\r\ncollection.\r\n\r\n\r\n<h4>3.9.2     Solution Requirements</h4>\r\n\r\nThe solution must:\r\n<li>   allow access control\r\n<li>   allow referencing to URIs of external members\r\n<li>   not require a body\r\n\r\n\r\n<h4>3.9.3     The Request</h4>\r\n\r\nThe <TT>DELREF</TT> method removes the URI specified in the Collection-Member header from the collection specified by the Request-URI.\r\nDELREFing a URI which is not a member of the collection is not an\r\nerror. DELREFing an internal member MUST fail with a 412\r\nPrecondition Failed status code.\r\n\r\n\r\n<h4>3.9.4     Example</h4>\r\n\r\n<PRE>\r\nDELREF /~whitehead/dav/ HTTP/1.1\r\nHost: www.ics.udi.edu\r\nCollection-Member: http://www.ietf.org/standards/dav/\r\n</PRE>\r\n\r\n\r\n<PRE>\r\nHTTP/1.1 200 OK\r\n</PRE>\r\n\r\n\r\n<h3>3.10 PATCH Method</h3>\r\n\r\n\r\n<h4>3.10.1    Problem Definition</h4>\r\n\r\nAt present, if a principal wishes to modify a resource, they must\r\nissue a <TT>GET</TT> against the resource, modify their local copy of the\r\nresource, and then issue a <TT>PUT</TT> to place the modified resource on\r\nthe server. This procedure is inefficient because the entire\r\nentity for a resource must be transmitted to and from the server\r\nin order to make even small changes.  Ideally, the update entity\r\ntransmitted to the server should be proportional in size to the\r\nmodifications.\r\n\r\n\r\n<h4>3.10.2    Solution Requirements</h4>\r\n\r\nThe solution must:\r\n<li>   allow partial modification of a resource without having to\r\n  transmit the entire modified resource\r\n<li>   allow byte-range patching\r\n<li>   allows extensions so that patches can be done beyond simple\r\n  byte-range patching\r\n<li>   allow ranges to be deleted, inserted, and replaced\r\n\r\n\r\n<h4>3.10.3    The Request</h4>\r\n\r\nThe request entity of the <TT>PATCH</TT> method contains a list of\r\ndifferences between the resource identified by the Request-URI\r\nand the desired content of the resource after the <TT>PATCH</TT> action\r\nhas been applied.  The list of differences is in a format defined\r\nby the media type of the entity (e.g., \"application/diff\") and\r\nmust include sufficient information to allow the server to\r\nconvert the original version of the resource to the desired\r\nversion.  Processing performed by <TT>PATCH</TT> is atomic, hence all\r\nchanges MUST be successfully executed or the method fails. <TT>PATCH</TT>\r\nMUST fail if executed on a non-existent resource; i.e. <TT>PATCH</TT> does\r\nnot create a resource as a side effect.\r\nIf the request appears (at least initially) to be acceptable, the\r\nserver MUST transmit an interim 100 response message after\r\nreceiving the empty line terminating the request headers and\r\ncontinue processing the request.  Since the semantics of <TT>PATCH</TT>\r\nare non-idempotent, responses to this method are not cacheable.\r\nWhile server support for <TT>PATCH</TT> is optional, if a server does\r\nsupport <TT>PATCH</TT>, it MUST support at least the text/xml diff format\r\ndefined below.  Support for the VTML difference format [VTML] is\r\nrecommended, but not required.\r\n\r\n\r\n<h4>3.10.4    text/xml elements for PATCH</h4>\r\n\r\nThe resourceupdate XML element contains a set of XML sub-entities\r\nthat describe modification operations.  The name and meaning of\r\nthese XML elements is given below. Processing of these directives\r\nMUST be performed in the order encountered within the XML\r\ndocument.  A directive operates on the resource as modified by\r\nall previous directives (executed in sequential order). The\r\nlength of the resource MAY be extended or reduced by a <TT>PATCH</TT>.\r\nThe changes specified by the resourceupdate XML element MUST be\r\nexecuted atomically.\r\n\r\n\r\n<h4>3.10.4.1  ResourceUpdate</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/patch/resourceupdate</tt>\r\n<BR>Purpose:       Contains an ordered set of changes to a non-collection, non-property resource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/patch/</tt>\r\n<BR>Parent:        Any\r\n<BR>Value:         *(Insert | Delete | Replace)\r\n\r\n\r\n<h4>3.10.4.2  Insert</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/patch/insert</tt>\r\n<BR>Purpose:       Insert the XML element\u2019s contents starting at the\r\nspecified octet.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/patch/</tt>\r\n<BR>Parent: <TT>        ResourceUpdate</tt>\r\n<BR>Value:         The insert XML element MUST contain an Octet-Range\r\nXML element that specifies an octet position within the body of a\r\nresource.  A value of \"end\" specifies the end of the resource.\r\nThe body of the insert XML element contains the octets to be\r\ninserted.\r\n<p>Please note that in order to protect the white space contained in\r\nthis XML element the following attribute/value MUST be included\r\nin the element: XML-SPACE = \"PRESERVE\".\r\n\r\n\r\n<h4>3.10.4.3  Delete</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/patch/delete</tt>\r\n<BR>Purpose:       Removes the specified range of octets.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/patch/</tt>\r\n<BR>Parent: <TT>        ResourceUpdate</tt>\r\n<BR>Value:         The Delete XML element MUST contain an octet-range\r\nXML element.\r\n<BR>Discussion: The octets that are deleted are removed, which means\r\nthe resource is collapsed and the length of the resource is\r\ndecremented by the size of the octet range.  It is not\r\nappropriate to replace deleted octets with zeroed-out octets,\r\nsince zero is a valid octet value.\r\n\r\n\r\n<h4>3.10.4.4  Replace</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/patch/replace</tt>\r\n<BR>Purpose:       Replaces the specified range of octets with the\r\ncontents of the XML element.  If the number of octets in the XML\r\nelement is different from the number of octets specified, the\r\nupdate MUST be rejected.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/patch/</tt>\r\n<BR>Parent: <TT>        ResourceUpdate</tt>\r\n<BR>Value:         The Replace XML element MUST contain an octet-range XML element. The contents of the entity are the replacement\r\noctets.\r\nPlease note that in order to protect the white space contained in\r\nthis XML element the following attribute/value MUST be included\r\nin the element: XML-SPACE = \"PRESERVE\".\r\n\r\n\r\n<h4>3.10.4.5  Octet-Range Attribute</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/patch/octet-range</tt>\r\n<BR>Purpose:  Specifies a range of octets that the enclosing property\r\neffects.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/patch/</tt>\r\n<BR>Parent: <TT>   Insert, Delete, Replace</tt>\r\n<BR>Value:    number [\"-\" (number | \"end\")]\r\n<BR>          Number = 1*Digit\r\n<BR>Description: Octet numbering begins with 0. If the octet contains\r\na single number then the operation is to begin at that octet and\r\nto continue for a length specified by the operation. In the case\r\nof a delete, this would mean to delete a single octet. In the\r\ncase of an insert this would mean to begin the insertion at the\r\nspecified octet and to continue for the length of the included\r\nvalue, extending the resource if necessary. In the case of\r\nreplace, the replace begins at the specified octet and overwrites\r\nall that follow to the length of the included value.\r\n\r\n\r\n<h4>3.10.5    The Response</h4>\r\n\r\n<LI>200 (OK) - The request entity body was processed without error,\r\nresulting in an update to the state of the resource.\r\n<LI>409 (Conflict) - If the update information in the request message\r\nbody does not make sense given the current state of the resource\r\n(e.g., an instruction to delete a non-existent line), this status\r\ncode MAY be returned.\r\n<LI>415 (Unsupported Media Type) - The server does not support the\r\ncontent type of the update instructions in the request message\r\nbody.\r\n<LI>416 (Unprocessable Entity) - A new status code.  The server\r\nunderstands the content type of the request entity, but was\r\nunable to process the contained instructions.\r\n<LI>417 (Insufficient Space on Resource) - The resource does not have\r\nsufficient space to record the state of the resource after the\r\nexecution of this method.\r\n\r\n\r\n<h4>3.10.6    Examples</h4>\r\n<h4>3.10.6.1  HTML file modification</h4>\r\n\r\nThe following example shows a modification of the title and\r\ncontents of the HTML resource http://www.example.org/hello.html.\r\n\r\n<p>Before:\r\n<PRE>\r\n     &lt;HTML&gt;\r\n     &lt;HEAD&gt;\r\n     &lt;TITLE&gt;Hello world HTML page&lt;/TITLE&gt;\r\n     &lt;/HEAD&gt;\r\n     &lt;BODY&gt;\r\n     &lt;P&gt;Hello, world!&lt;/P&gt;\r\n     &lt;/BODY&gt;\r\n     &lt;/HTML&gt;\r\n</PRE>\r\n<p>PATCH Request:                     Response:\r\n<PRE>\r\n     PATCH hello.html HTTP/1.1\r\n     Host: www.example.org\r\n     Content-Type: text/xml\r\n     Content-Length: xxx\r\n</PRE>\r\n\r\n<PRE>\r\n                                   HTTP/1.1 100 Continue\r\n     &lt;?XML:Namespace href =\r\n     \"http://www.ietf.org/standards/dav/patch/\" AS = \"D\"/&gt;\r\n     &lt;D:ResourceUpdate&gt;\r\n          &lt;Replace XML-SPACE = \"PRESERVE\"&gt;&lt;octet-range&gt;14&lt;/octet-range&gt;\r\n         &amp;003CTITLE&amp;003ENew Title&amp;003C/TITLE&amp;003E&lt;/Replace&gt;\r\n          &lt;Delete&gt;&lt;octet-range&gt;38-50&lt;/Delete&gt;\r\n     &lt;Insert XML-SPACE = \"PRESERVE\"&gt;&lt;octet-range&gt;86&lt;/&gt;&amp;003CP&amp;003ENew paragraph&amp;003C/P&amp;003E&lt;/Insert&gt;\r\n     &lt;/D:ResourceUpdate&gt;\r\n                                   HTTP/1.1 200 OK\r\n</PRE>\r\n<p>\r\nAfter:\r\n<PRE>\r\n     &lt;HTML&gt;\r\n     &lt;HEAD&gt;\r\n     &lt;TITLE&gt;New Title&lt;/TITLE&gt;\r\n     &lt;/HEAD&gt;\r\n     &lt;BODY&gt;\r\n     &lt;P&gt;Hello, world!&lt;/P&gt;\r\n     &lt;P&gt;New paragraph&lt;/P&gt;\r\n     &lt;/BODY&gt;\r\n     &lt;/HTML&gt;\r\n</PRE>\r\n\r\n<h3>3.11 Headers</h3>\r\n\r\n<h4>3.11.1    Destination Header</h4>\r\n\r\nThe Destination header specifies a destination resource for\r\nmethods such as <tt>COPY</tt> and <tt>MOVE</tt>, which take two URIs as parameters.\r\n     Destination= \"Destination\" \":\" URI\r\n\r\n\r\n<h4>3.11.2    Enforce-Live-Properties Header</h4>\r\n\r\nThe Enforce-Live-Properties header specifies properties that MUST\r\nbe \"live\" after they are copied (moved) to the destination\r\nresource of a copy (or move). If the value \"*\" is given for the\r\nheader, then it designates all live properties on the source\r\nresource.  If the value is \"Omit\" then the server MUST NOT\r\nduplicate on the destination resource any properties that are\r\ndefined on the source resource. If this header is not included\r\nthen the server is expected to act as defined by the default\r\nproperty handling behavior of the associated method.\r\n<PRE>\r\n     EnforceLiveProperties = \"Enforce-Live-Properties\" \":\" (\"*\" |\r\n     \"Omit\" | 1#(Property-Name))\r\n     Property-Name = \"&lt;\" URI \"&gt;\"\r\n</PRE>\r\n\r\n\r\n<h4>3.11.3    Overwrite Header</h4>\r\nThe Overwrite header specifies whether the server should\r\noverwrite the state of a non-null destination resource during a\r\n<tt>COPY</tt> or <tt>MOVE</tt>.  A value of \"false\" states that the server MUST NOT\r\nperform the <tt>COPY</tt> or <tt>MOVE</tt> operation if the state of the\r\ndestination resource is non-null. By default, the value of\r\nOverwrite is \"true,\" and a client MAY omit this header from a\r\nrequest when its value is \"true.\" While the Overwrite header\r\nappears to duplicate the functionality of the If-Match: * header\r\nof HTTP/1.1, If-Match applies only to the Request-URI, and not to\r\nthe Destination of a <tt>COPY</tt> or <tt>MOVE</tt>.\r\n<PRE>\r\n     Overwrite = \"Overwrite\" \":\" (\"true\" | \"false\")\r\n</PRE>\r\nIf there is a conflict and the Overwrite header equals \"true\", or\r\nis absent and thus defaults to \"true\", then the method MUST fail\r\nwith a 409 Conflict.\r\n\r\n\r\n<h4>3.11.4    Destroy Header</h4>\r\n\r\nWhen deleting a resource the client often wishes to specify\r\nexactly what sort of delete is being enacted. The Destroy header,\r\nused with the Mandatory header, allows the client to specify the\r\nend result they desire. The Destroy header is specified as\r\nfollows:\r\n\r\n<LI> The Undelete token requests that, if possible, the resource\r\nshould be left in a state such that it can be undeleted. The\r\nserver is not required to honor this request.\r\n\r\n<LI> The NoUndelete token requests that the resource MUST NOT be left\r\nin a state such that it can be undeleted.\r\n\r\n<LI> The VersionDestroy token includes the functionality of the\r\nNoUndelete token and extends it to include having the server\r\nremove all versioning references to the resource that it has\r\ncontrol over.\r\n <blockquote><TT>\r\n  DestroyHeader = \"Destroy\" \":\" #Choices\r\n <P>  Choices = \"VersionDestroy\" | \"NoUndelete\" | \"Undelete\" | token\r\n|\"&lt;\" URI \"&gt;\" ; a token extension MUST NOT be used unless it is\r\nspecified in a RFC16, otherwise a URI MUST be used for\r\nextensions.\r\n</TT></blockquote>\r\n\r\n\r\n<h4>3.11.5    Collection-Member Header</h4>\r\n\r\nThe Collection-Member header specifies the URI of an external\r\nresource to be added/deleted to/from a collection.\r\n<PRE>\r\n     CollectionMember = \"Collection-Member\" \":\" URI\r\n</PRE>\r\n\r\n\r\n<h3>3.12 Links</h3>\r\n\r\n\r\n<h4>3.12.1    Source Link Property Type</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/link/source</tt>\r\n<BR>Purpose:       The destination of the source link identifies the\r\nresource that contains the unprocessed source of the link\u2019s\r\nsource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/link/</tt>\r\n<BR>Parent:        Any\r\n<BR>Value:         An XML document with zero or more link XML\r\nelements.\r\n<BR>Discussion: The source of the link (src) is typically the URI of\r\nthe output resource on which the link is defined, and there is\r\ntypically only one destination (dst) of the link, which is the\r\nURI where the unprocessed source of the resource may be accessed.\r\nWhen more than one link destination exists, this specification\r\nasserts no policy on ordering.\r\n\r\n\r\n<h2>4    State Tokens</h2>\r\n\r\n<h3>4.1  Overview</h3>\r\n\r\n\r\n<h4>4.1.1     Problem Description</h4>\r\n\r\nThere are times when a principal will want to predicate\r\nsuccessful execution of a method on the current state of a\r\nresource.  While HTTP/1.1 provides a mechanism for conditional\r\nexecution of methods using entity tags via the \"If-Match\" and\r\n\"If-None-Match\" headers, the mechanism is not sufficiently extensible\r\nto express conditional statements involving more generic state\r\nindicators, such as lock tokens.\r\n\r\n <P>The fundamental issue with entity tags is that they can only be\r\ngenerated by a resource. However there are times when a client\r\nwill want to be able to share state tokens between resources,\r\npotentially on different servers, as well as be able to generate\r\ncertain types of lock tokens without first having to communicate\r\nwith a server.\r\n\r\n<P>For example, a principal may wish to require that resource B have\r\na certain state in order for a method to successfully execute on\r\nresource A. If the client submits an e-tag from resource B to\r\nresource A, then A has no way of knowing that the e-tag is meant\r\nto describe resource B.\r\n\r\n<P>Another example occurs when a principal wishes to predicate the\r\nsuccessful completion of a method on the absence of any locks on\r\na resource. It is not sufficient to submit an \"If-None-Match: *\"\r\nas this refers to the existence of an entity, not of a lock.\r\n\r\n<P>This draft defines the term \"state token\" as an identifier for a\r\nstate of a resource. The sections below define requirements for\r\nstate tokens and provide a  state token syntax, along with two\r\nnew headers which can accept the new state token syntax.\r\n\r\n\r\n<h4>4.1.2     Solution Requirements</h4>\r\n\r\n\r\n<h4>4.1.2.1   Syntax</h4>\r\n\r\nSelf-Describing. A state token must be self describing such that\r\nupon inspecting a state token it is possible to determine what\r\nsort of state token it is, what resource(s) it applies to, and\r\nwhat state it represents.\r\n\r\n<P>This self-describing nature allows servers to accept tokens from\r\nother servers and potentially be able to coordinate state\r\ninformation cross resource and cross site through standardized\r\nprotocols. For example, the execution of a request on resource A\r\ncan be predicated on the state of resource B, where A and B are\r\npotentially on different servers.\r\n\r\n<P>Client Generable. The state token syntax must allow, when\r\nappropriate, for clients to generate a state token without having\r\nfirst communicated with a server.\r\n\r\n<P>One drawback of entity tags is that they are set by the server,\r\nand there is no interoperable algorithm for calculating an entity\r\ntag. Consequently, a client cannot generate an entity tag from a\r\nparticular state of a resource.  However, a state token which\r\nencodes an MD5 state hash could be calculated by a client based\r\non a client-held state of a resource, and then submitted to a\r\nserver in a conditional method invocation.\r\n\r\n<P>Another potential use for client generable state tokens is for a\r\nclient to generate lock tokens with wild card fields, and hence\r\nbe able to express conditionals such as: \"only execute this GET\r\nif there are no write locks on this resource.\"\r\n\r\n\r\n<h4>4.1.2.2   Conditonals</h4>\r\n\r\nUniversal. A solution must be applicable to all requests.\r\nPositive and Negative. Conditional expressions must allow for the\r\nexpression of both positive and negative state requirements.\r\n\r\n\r\n<h3>4.2  State Token Syntax</h3>\r\nState tokens are URLs employing the following syntax:\r\n<PRE>\r\nState-Token = \"StateToken:\" Type \":\" Resources \":\" State-Info\r\nType = \"Type\" \"=\" Caret-encoded-URL\r\nResources = \"Res\" \"=\" Caret-encoded-URL\r\nCaret-encoded-URL = \"^\" Resource \"^\"\r\nResource = &lt;A URI where all \"^\" characters are escaped&gt;\r\nState-Info = *(uchar | reserved)  ; uchar, reserved defined\r\nsection 3.2.1 of RFC 2068\r\n</pre>\r\n\r\n<P>This proposal has created a new URL scheme for state tokens\r\nbecause a state token names a network resource using its normal\r\nname, which is typically state-invariant, along with additional\r\ninformation that specifies a particular state of the resource.\r\nEncoding the state information into the native URL scheme of the\r\nnetwork resource was not felt to be safe, since freedom from name\r\nspace collisions could not be guaranteed. If this proposal is\r\naccepted, the StateToken URL scheme will need to be defined and\r\nregistered with IANA.\r\n\r\n<P>State Token URLs begin with the URL scheme name \"StateToken\"\r\nrather than the name of the particular state token type they\r\nrepresent in order to make the URL self describing. Thus it is\r\npossible to examine the URL and know, at a minimum, that it is a\r\nstate token.\r\n\r\n<P>Labeled name/value pairs are used within the token to allow new\r\nfields to be added. Processors of state tokens MUST be prepared\r\nto accept the fields in whatever order they are present and MUST\r\nignore any fields they do not understand.\r\nThe \"Type\" field specifies the type of the state information\r\nencoded in the state token. A URL is used in order to avoid\r\nnamespace collisions.\r\n\r\n<P>The \"Res\" field identifies the resource for which the state token\r\nspecifies a particular state. Since commas and spaces are\r\nacceptable URL characters, a caret is used to delimit a URL.\r\nSince a caret is an acceptable URL character, any instances of it\r\nmust be escaped using the % escape convention.\r\n\r\n<P>The State-Info production is expanded upon in descriptions of\r\nspecific state token types, and is intended to contain the state\r\ndescription information for a particular state token.\r\n\r\n\r\n<h3>4.3  State Token Conditional Headers</h3>\r\n\r\n\r\n<h4>4.3.1     If-State-Match</h4>\r\n\r\n<PRE>\r\nIf-State-Match = \"If-State-Match\" \":\" (\"AND\" | \"OR\") 1#(\"&lt;\" State-Token \"&gt;\")\r\n</PRE>\r\n\r\n<P>The If-State-Match header is intended to have similar\r\nfunctionality to the If-Match header defined in section 14.25 of\r\nRFC 2068.\r\n\r\n<P>If the AND keyword is used and all of the state tokens identify\r\nthe state of the resource, then the server MAY perform the\r\nrequested method. If the OR keyword is used and any of the state\r\ntokens identifies the current state of the resource, then server\r\nMAY perform the requested method.  If neither of the keyword\r\nrequirements is met, the server MUST NOT perform the requested\r\nmethod, and MUST return a 412 (Precondition Failed) response.\r\n\r\n\r\n<h4>4.3.2     If-None-State-Match</h4>\r\n\r\n<PRE>\r\nIf-None-State-Match = \"If-None-State-Match\" \":\" 1#(\"&lt;\" State-Token \"&gt;\")\r\n</PRE>\r\n\r\n<P>The If-None-State-Match header is intended to have similar\r\nfunctionality to the If-None-Match header defined in section\r\n14.26 of RFC 2068.\r\n\r\n<P>If any of the state tokens identifies the current state of the\r\nresource, the server MUST NOT perform the requested method.\r\nInstead, if the request method was <TT>GET</TT>, <TT>HEAD</TT>, <tt>INDEX</tt>, or <TT>GETMETA</TT>,\r\nthe server SHOULD respond with a 304 (Not Modified) response,\r\nincluding the cache-related entity-header fields (particularly\r\nETag) of the current state of the resource.  For all other\r\nrequest methods, the server MUST respond with a status of 412\r\n(Precondition Failed).\r\n\r\n<P>If none of the state tokens identifies the current state of the\r\nresource, the server MAY perform the requested method.\r\n\r\n<P>Note that the \"AND\" and \"OR\" keywords specified with the If-State-Match header are intentionally not defined for If-None-State-Match, because this functionality is not required.\r\n\r\n\r\n<h3>4.4  State Token Header</h3>\r\n\r\n<PRE>State-Token-Header = \"State-Token\" \":\" 1#(\"&lt;\" State-Token \"&gt;\")\r\n</PRE>\r\n\r\n <P>The State Token header is intended to have similar functionality\r\nto the etag header defined in section 14.20 of RFC 2068. The\r\npurpose of the tag is to return state tokens defined on a\r\nresource in a response. The contents of the state-token are not\r\nguaranteed to be exhaustive and are generally used to return a\r\nnew state token that has been defined as the result of a method.\r\nFor example, if a LOCK method were successfully executed on a\r\nresource the response would include a state token header with the\r\nlock state token included.\r\n\r\n<h3>4.5  E-Tags</h3>\r\n\r\nE-tags have already been deployed using the If-Match and If-None-Match headers.  Introducing two mechanisms to express e-tags\r\nwould only confuse matters, therefore e-tags should continue to\r\nbe expressed using quoted strings and the If-Match and If-None-Match headers.\r\n\r\n\r\n<h2>5    Locking</h2>\r\n\r\n<h3>5.1  Problem Description - Overview</h3>\r\n\r\nLocking is used to arbitrate access to a resource amongst\r\nprincipals that have equal access rights to that resource.\r\n\r\n<P>This draft allows locks to vary over two parameters, the number\r\nof principals involved and the type of access to be granted. This\r\ndraft will only provide for the definition of locking for one\r\naccess type, write. However, the syntax is extensible enough to\r\nallow for the specification of other access types. It is a goal\r\nof this proposal that it use the same access verbs as will be\r\ndefined in the access control draft.\r\n\r\n\r\n<h4>5.1.1     Exclusive Vs. Shared Locks</h4>\r\n\r\nThe most basic form of <TT>LOCK</TT> is an exclusive lock. This is a lock\r\nwhere the access right in question is only granted to a single\r\nprincipal. The need for this arbitration results from a desire to\r\navoid having to constantly merge results. In fact, many users so\r\ndislike having to merge that they would rather serialize their\r\naccess to a resource rather than have to constantly perform\r\nmerges.\r\n\r\n<P>However, there are times when the goal of a lock is not to\r\nexclude others from exercising an access right but rather to\r\nprovide a mechanism for principals to indicate that they intend\r\nto exercise their access right.  Shared locks are provided for\r\nthis case. A shared lock allows multiple principals to receive a\r\nlock, hence any principal with appropriate access can get the\r\nlock.\r\n\r\n<P>With shared locks there are two trust sets that affect a\r\nresource.  The first trust set is created by access permissions.\r\nPrincipals who are trusted, for example, may have permission to\r\nwrite the resource, those who are not, don't.  Among those who\r\nhave access permission to write the resource, the set of\r\nprincipals who have taken out a shared lock also must trust each\r\nother, creating a (probably) smaller trust set within the access\r\npermission write set.\r\n\r\n<P>Starting with every possible principal on the Internet, in most\r\nsituations the vast majority of these principals will not have\r\nwrite access to a given resource.  Of the small number who do\r\nhave write access, some principals may decide to guarantee their\r\nedits are free from overwrite conflicts by using exclusive write\r\nlocks in conjunction with a precondition header (If-State-Match)\r\nthat checks for existence of the lock prior to writing the\r\nresource. Others may decide they trust their collaborators (the\r\npotential set of collaborators being the set of principals who\r\nhave write permission) and use a shared lock, which informs their\r\ncollaborators that a principal is potentially working on the\r\nresource.\r\n\r\n <P>The WebDAV extensions to HTTP do not need to provide all of the\r\ncommunications paths necessary for principals to coordinate their\r\nactivities.  When using shared locks, principals may use any out\r\nof band communication channel to coordinate their work (e.g.,\r\nface-to-face interaction, written notes, post-it notes on the\r\nscreen, telephone conversation, email).  The intent of a shared\r\nlock is to let collaborators know who else is potentially working\r\non a resource.\r\n\r\n<P>Why not use exclusive write locks all the time?  Experience from\r\ninitial Web distributed authoring systems has indicated that\r\nexclusive write locks are often too rigid.  An exclusive write\r\nlock is used to enforce a particular editing process: take out\r\nexclusive write lock, read the resource, perform edits, write the\r\nresource, release the lock.  What happens if the lock isn't\r\nreleased?  While the time-out mechanism provides one solution, if\r\nyou need to force the release of a lock immediately, it doesn't\r\nhelp much.  Granted, an administrator can release the lock for\r\nyou, but this could become a significant burden for large sites.\r\nFurther, what if the administrator can't be reached immediately?\r\n\r\n<P>Despite their potential problems, exclusive write locks are\r\nextremely useful, since often a guarantee of freedom from\r\noverwrite conflicts is exactly what is needed.  The solution:\r\nprovide exclusive write locks, but also provide a less strict\r\nmechanism in the form of shared locks which can be used by a set\r\nof people who trust each other and who have access to a\r\ncommunications channel external to HTTP which can be used to\r\nnegotiate writing to the resource.\r\n\r\n\r\n<h4>5.1.2     Required Support</h4>\r\n\r\nA DAV compliant server is not required to support locking in any\r\nform. If the server does support locking it may choose to support\r\nany combination of exclusive and shared locks for any access\r\ntypes.\r\n\r\n<P>The reason for this flexibility is that server implementers have\r\nsaid that they are willing to accept minimum requirements on all\r\nservices but locking. Locking policy strikes to the very heart of\r\ntheir resource management and versioning systems and they require\r\ncontrol over what sort of locking will be made available. For\r\nexample, some systems only support shared write locks while\r\nothers only provide support for exclusive write locks. As each\r\nsystem is sufficiently different to merit exclusion of certain\r\nlocking features, the authors are proposing that locking be\r\nallowed as the sole axis of negotiation within DAV.\r\n\r\n\r\n<h3>5.2  LOCK Method</h3>\r\n\r\n\r\n<h4>5.2.1     Operation</h4>\r\n\r\nA lock method invocation creates the lock specified by the Lock-Info header on the request-URI. Lock method requests SHOULD NOT\r\nhave a request body. A user-agent SHOULD submit an Owner header\r\nfield with a lock request.\r\n\r\n<P>A successful response to a lock invocation MUST include a Lock-Token header. If the server supports a time based lock removal\r\nmechanism on the resource, a successful lock invocation SHOULD\r\nreturn a Time-Out header.\r\n<h4>5.2.2     Effect of Locks on Properties and Containers</h4>\r\n\r\nBy default a lock affects the entire state of the resource,\r\nincluding its associated properties. As such it is illegal to\r\nspecify a lock on a property. For containers, a lock also affects\r\nthe ability to add or remove members. The nature of the effect\r\ndepends upon the type of access control involved.  The Depth\r\nheader expresses the general semantics of a <TT>LOCK</TT> method request\r\nwhen invoked on a collection (note that specific lock types may\r\nrestrict the effect of a lock, for example limiting the allowable\r\nvalues of the Depth header):\r\n\r\n<li>    A Depth header (defined in the namespace draft) may be used\r\n  on a <TT>LOCK</TT> method when the <TT>LOCK</TT> method is applied to a\r\ncollection\r\n  resource. The legal values for Depth on a <TT>LOCK</TT> are 0, 1, and\r\n  Infinity. A Depth of 0 instructs the resource to just lock the\r\n  container. As previously mentioned, depending on the type of\r\n  lock, the lock affects the ability to add or remove members of\r\n  the container.\r\n\r\n<li>    A Depth of 1 means that the container is locked and a <TT>LOCK</TT>\r\n  is executed on the container\u2019s propagate members with a Depth\r\nof\r\n  0 and If-Range, If-Modified-Since, If-Unmodified-Since, If-Match\r\n  and If-None-Match headers are dropped. However, the effects of\r\n  the <TT>LOCK</TT> MUST be atomic in that either the container and all of\r\n  its members are locked or no lock is granted. The result of a\r\n  Depth 1 lock is a single lock token which represents the lock\r\non\r\n  the container and all of its members. This lock token may be\r\nused\r\n  in an If-State-Match or If-Not-State-Match header against any\r\nof\r\n  the resources covered by the lock. Since the lock token\r\n  represents a lock on all the resources, an <TT>UNLOCK</TT> using that\r\n  token will remove the lock from all included resources, not\r\njust\r\n  the resource the <TT>UNLOCK</TT> was executed on.\r\n\r\n<li>    A Depth of infinity means that the <TT>LOCK</TT> is recursively\r\n  executed, with a Depth of infinity, on the collection and all\r\nof\r\n  its propagate members and all of their propagate members. As\r\nwith\r\n  a Depth of 1, the <TT>LOCK</TT> must be granted in total or not at all.\r\n  Otherwise the lock operates in the same manner as a Depth of 1\r\n  lock.\r\n\r\n<P>The default behavior when locking a container is to act as if a\r\n\"Depth: 0\" header had been placed on the method.\r\n\r\n\r\n<h4>5.2.3     Locking Replicated Resources</h4>\r\n\r\nSome servers automatically replicate resources across multiple\r\nURLs. In such a circumstance the server MAY only accept a lock on\r\none of the URLs if the server can guarantee that the lock will be\r\nhonored across all the URLs.\r\n\r\n\r\n<h4>5.2.4     Interaction with other Methods</h4>\r\n\r\nOnly two methods, <tt>MOVE</tt> and <tt>DELETE</tt>, have side effects which\r\ninvolve locks. When a resource is moved, its lock SHOULD be moved\r\nwith it. However this may not always be possible and there is\r\ncurrently no proposal to create a header which would specify that\r\nthe lock request should fail if the resource\u2019s locks can not be\r\nmaintained. A <tt>COPY</tt> MUST NOT copy any locks on the source resource\r\nover to the destination resource. Deleting a resource MUST remove\r\nall locks on the resource.\r\n\r\n\r\n<h4>5.2.5     Lock Compatibility Table</h4>\r\n\r\nThe table below describes the behavior that occurs when a lock\r\nrequest is made on a resource.\r\n\r\n<table>\r\n<tr><th>Lock request<BR>Current lock state<Td>      Shared Lock<td>       Exclusive Lock</tr>\r\n<tr><TD>None<TD>                     True<TD>              True</TR>\r\n<TR><TD>Shared Lock<TD>              True<TD>              False</TR>\r\n<TR><TD>Exclusive Lock<TD>           False<TD>             False*</TR>\r\n</table>\r\n\r\n<P>Legend: True = lock MAY be granted.  False = lock MUST NOT be\r\ngranted.  *=if the principal requesting the lock is the owner of\r\nthe lock, the lock MAY be regranted.\r\n\r\n<P>The current lock state of a resource is given in the leftmost\r\ncolumn, and lock requests are listed in the first row.  The\r\nintersection of a row and column gives the result of a lock\r\nrequest.  For example, if a shared lock is held on a resource,\r\nand an exclusive lock is requested, the table entry is \"false\",\r\nindicating the lock must not be granted.\r\n\r\n<P>If an exclusive lock is re-requested by the principal who owns\r\nthe lock, the lock MAY be regranted. If the lock is regranted,\r\nthe same lock token that was previously issued MUST be returned.\r\n\r\n\r\n<h4>5.2.6     Status Codes</h4>\r\n\r\n<LI>412 \"Precondition Failed\" - The included state-token was not\r\nenforceable on this resource.\r\n\r\n<LI>416 \"Locked\" - The resource is locked so the method has been\r\nrejected.\r\n\r\n\r\n<h4>5.2.7     Example</h4>\r\n\r\n<PRE>\r\nLOCK /workspace/webdav/proposal.doc HTTP/1.1\r\nHost: webdav.sb.aol.com\r\nLock-Info: LockType=Write LockScope=Exclusive\r\nOwner: &lt;http://www.ics.uci.edu/~ejw/contact.html&gt;\r\n</PRE>\r\n\r\n\r\n<PRE>\r\nHTTP/1.1 200 OK\r\nState-Token: StateToken:Type=^DAV:/LOCK/DAVLOCK^:Res=^http://www.ics.uci.edu/workspace/webdav/proposal.doc^:LockType=Write:LockScope=Exclusive:ServerID=12382349AdfFFF\r\nTime-Out: ClockType=Activity TimeType=second;604800\r\n</PRE>\r\n\r\n<p>This example shows the successful creation of an exclusive write\r\nlock on resource\r\n<TT>http://webdav.sb.aol.com/workspace/webdav/proposal.doc</TT>. The\r\nresource <TT>http://www.ics.uci.edu/~ejw/contact.html</TT> contains\r\ncontact information for the owner of the lock. The server has an\r\nactivity-based timeout policy in place on this resource, which\r\ncauses the lock to automatically be removed after 1 week (604800\r\nseconds). The response has a <TT>Lock-Token</TT> header that gives the\r\nstate token URL for the lock token generated by this lock\r\nrequest.\r\n\r\n\r\n\r\n<h4>5.2.8     Lock-Info Request Header</h4>\r\n\r\nThe <TT>Lock-Info</TT> header specifies the scope and type of a lock for a\r\n<TT>LOCK</TT> method request. The syntax specification below is\r\nextensible, allowing new type and scope identifiers to be added.\r\n<PRE>\r\nLockInfo = \"Lock-Info\" \":\" DAVLockType SP DAVLockScope CRLF\r\nDAVLockType = \"LockType\" \"=\" DAVLockTypeValue\r\nDAVLockTypeValue = (\"Write\" | *(uchar | reserved))\r\nDAVLockScope = \"LockScope\" \"=\" DAVLockScopeValue\r\nDAVLockScopeValue = (\"Exclusive\" |\"Shared\" | *(uchar | reserved))\r\n</PRE>\r\n\r\n\r\n<h4>5.2.9     Owner Request Header</h4>\r\n\r\n\r\n<h4>5.2.9.1   Problem Description</h4>\r\n\r\nWhen discovering the list of owners of locks on a resource, a\r\nprincipal may want to be able to contact the owner directly. For\r\nthis to be possible the lock discovery mechanism must provide\r\nenough information for the lock owner to be contacted.\r\n\r\n\r\n<h4>5.2.9.2   Solution Requirements</h4>\r\n\r\nNot all systems have authentication procedures that provide\r\nsufficient information to identify a particular user in a way\r\nthat is meaningful to a human. In addition, many systems that do\r\nhave sufficient information, such as a name and e-mail address,\r\ndo not have the ability to associate this information with the\r\nlock discovery mechanism. Therefore a means is needed to allow\r\nprincipals to provide authentication in a manner which will be\r\nmeaningful to a human.\r\n\r\n<P>The <TT>From</TT> header (defined in RFC 2068), which contains only an\r\nemail mailbox, is not sufficient for the purposes of quick\r\nidentification. When desperately looking for someone to remove a\r\nlock, e-mail is often not sufficient. A telephone number (cell\r\nnumber, pager number, etc.) would be better. Furthermore, the\r\nemail address in the <TT>From</TT> field may or may not support including\r\nthe owners name and that name is often set to an alias anyway.\r\nTherefore a header more flexible than <TT>From</TT> is required.\r\n\r\n\r\n<h4>5.2.9.3   Syntax</h4>\r\n\r\n<PRE>Owner = \"Owner\" \":\" ((\"&lt;\" URI \"&gt;\")  | quoted-string)\r\n</PRE>\r\n\r\nThe URI SHOULD provide a means for either directly contacting the\r\nprincipal (such as a telephone number or e-mail URI), or for\r\ndiscovering the principal (such as  the URL of a homepage).  The\r\nquoted string SHOULD provide a means for directly contacting the\r\nprincipal, such as a name and telephone number.\r\n\r\n\r\n<h4>5.2.10    Time-Out Header</h4>\r\n\r\n<h4>5.2.10.1  Problem Description</h4>\r\n\r\nIn a perfect world principals take out locks, use the resource as\r\nneeded, and then remove the lock when it is no longer needed.\r\nHowever, this scenario is frequently not completed, leaving\r\nactive but unused locks. Reasons for this include client programs\r\ncrashing and loosing information about locks, users leaving their\r\nsystems for the day and forgetting to remove their locks, etc. As\r\na result of this behavior, servers need to establish a policy by\r\nwhich they can remove a lock without input from the lock owner.\r\nOnce such a policy is instituted, the server also needs a\r\nmechanism to inform the principal of the policy.\r\n\r\n\r\n<h4>5.2.10.2  Solution Requirements</h4>\r\n\r\nThere are two basic lock removal policies, administrator and time\r\nbased remove. In the first case a principal other than the lock\r\nowner has sufficient access rights to order the lock removed,\r\neven though they did not take it out. User-agents MUST assume\r\nthat such a mechanism is available and thus locks may arbitrarily\r\ndisappear at any time. If their actions require confirmation of\r\nthe existence of a lock then the If-State headers are available.\r\n\r\n<P>The second solution, is the time based removal policy. Activity\r\nbased systems set a timer as soon as the lock is taken out. Every\r\ntime a method is executed on the resource, the timer is reset. If\r\nthe timer runs out, the lock is removed.\r\n\r\n<P>Finally, some systems only allow locks to exist for the duration\r\nof a session, where a session is defined as the time when the\r\nHTTP connection that was used to take out the lock remains\r\nconnected. This mechanism is used to allow programs which are\r\nlikely to be improperly exited, such as JAVA programs running in\r\na browser, to take out locks without leaving a lot of ownerless\r\nlocks around when they are improperly exited.\r\n\r\n\r\n<h4>5.2.10.3  Syntax</h4>\r\n\r\n<PRE>\r\nTimeOut = \"Time-Out\" \":\" ((TimeOutType SP Session) | TimeOutVal |\r\n          Session) CRLF\r\nTimeOutType = ClockType SP TimeType\r\nClockType = \"ClockType\" \"=\" ClockTypeValue\r\nClockTypeValue = \"Activity\"\r\nTimeType = \"TimeType\" \"=\" TimeTypeValue\r\nTimeTypeValue = \"Second\" \";\" DAVTimeOutVal\r\nDAVTimeOutVal = 1*digit\r\nSession = \"Session\" \"=\" (\"Yes\" | \"No\")\r\n</PRE>\r\n\r\nThe \"Second\" TimeType specifies the number of seconds that may\r\nelapse before the lock is automatically removed. A server MUST\r\nnot generate a time out value for \"second\" greater than 2^32-1.\r\n\r\n<P>If no time based system is in use then a Time-Out header MUST NOT\r\nbe returned. The Time-Out header MUST only be returned in a\r\nresponse to a <TT>LOCK</TT> request.When session is set to yes then\r\nwhatever <TT>clocktype</TT> and <TT>timetype</TT> is being used, their effects are\r\nscoped within that particular session. So an absolute lock with a\r\nten day expiration period will only remain active so long as the\r\nsession remains active. A <TT>DAVTimeOutVal</TT> value must be greater\r\nthan zero.\r\n\r\n<P>Clients MAY include <TT>TimeOut</TT> headers in their <TT>LOCK</TT> requests.\r\nHowever the server is not required to honor or even consider the\r\nrequest. The primary purpose in allowing clients to submit a\r\n<TT>TimeOut</TT> header is to inform the server if the client is\r\nrequesting a session based lock. If a timeout is associated with\r\nthe lock, the server MUST return a <TT>TimeOut</TT> header with a valid\r\nvalue.\r\n\r\n\r\n<h4>5.2.11    State-Token Header</h4>\r\n\r\n\r\n<h4>5.2.11.1  Problem Definition</h4>\r\n\r\nProgram A, used by User A, takes out a write lock on a resource.\r\nProgram B, also run by User A, then proceeds to perform a <TT>PUT</TT> to\r\nthe locked resource. The <TT>PUT</TT> will succeed because locks are\r\nassociated with a principal, not a program, and thus program B,\r\nbecause it is acting with principal A\u2019s credential, will be\r\nallowed to perform the <TT>PUT</TT>. In reality program B had no knowledge\r\nof the lock and had it had such knowledge, would not have\r\noverwritten the resource. Hence, a mechanism is needed to prevent\r\ndifferent programs from accidentally ignoring locks taken out by\r\nother programs with the same authorization.\r\n\r\n\r\n<h4>5.2.11.2  Solution Requirement</h4>\r\n\r\nThe solution must not require principals to perform discovery in\r\norder to prevent accidental overwrites as this could cause race\r\nconditions.\r\n\r\n<P>The solution must not require that clients guess what sorts of\r\nlocks might be used and use if-state-match headers with wildcards\r\nto prevent collisions. The problem with trying to \"guess\" which\r\nlocks are being used is that new lock types might be introduced,\r\nand the program would not know to \"guess them\". So, for example,\r\na client might put in an if-state-match header with a wildcard\r\nspecifying that if any write lock is outstanding then the\r\noperation should fail. However a new read/write lock could be\r\nintroduced which the client would not know to put in the header.\r\n\r\n\r\n<h4>5.2.11.3  State-Token Header</h4>\r\n\r\nThe State-Token header is returned in a successful response to\r\nthe <TT>LOCK</TT> method or is used as a request header with the <TT>UNLOCK</TT>\r\nmethod.\r\n\r\n<P>The State-Token header containing a lock token owned by the\r\nrequest principal is used by the principal on arbitrary method to\r\nindicate that the principal is aware of the specified lock. If\r\nthe State-Token header with the appropriate lock token is not\r\nincluded the request MUST be rejected, even though the requesting\r\nprincipal has authorization to make modifications specified by\r\nthe lock type. This injunction does not apply to methods that are\r\nnot affected by the principal\u2019s lock.\r\n\r\n<P>For example, Program A, used by user A, takes out a write lock on\r\na resource. Program A then makes a number of <TT>PUT</TT> requests on the\r\nlocked resource, all the requests contain a State-Token header\r\nwhich includes the write lock state token. Program B, also run by\r\nUser A, then proceeds to perform a <TT>PUT</TT> to the locked resource.\r\nHowever program B was not aware of the existence of the lock and\r\nso does not include the appropriate state-token header. The\r\nmethod is rejected even though principal A is authorized to\r\nperform the <TT>PUT</TT>. Program B can, if it so chooses, now perform\r\nlock discovery and obtain the lock token. Note that program A and\r\nB can perform <TT>GETs</TT> without using the state-token header because\r\nthe ability to perform a <TT>GET</TT> is not affected by a write lock.\r\nNote that having a lock state token provides no special access\r\nrights. Anyone can find out anyone else\u2019s lock state token by\r\nperforming lock discovery. Locks are to be enforced based upon\r\nwhatever authentication mechanism is used by the server, not\r\nbased on the secrecy of the token values.\r\n\r\n<h3>5.3  Write Lock</h3>\r\n\r\nA write lock prevents a principal without the lock from\r\nsuccessfully executing a <TT>PUT</TT>, <TT>POST</TT>, <tt>DELETE</tt>, <tt>MKCOL</tt>, <tt>PROPPATCH</tt>,\r\n<TT>PATCH</TT>, <TT>ADDREF</TT> or <TT>DELREF</TT> on the locked resource. All other\r\nmethods, <TT>GET</TT> in particular, function independent of the lock.\r\n\r\n<P>While those without a write lock may not alter a property on a\r\nresource it is still possible for the values of live properties\r\nto change, even while locked, due to the requirements of their\r\nschemas. Only dead properties and live properties defined to\r\nrespect locks are guaranteed to not change while locked.\r\n\r\n<P>It is possible to assert a write lock on a null resource in order\r\nto lock the name. Please note, however, that locking a null\r\nresource effectively makes the resource non-null as the resource\r\nnow has lock related properties defined on it.\r\n\r\n<P>Write locking a container also prevents adding or removing\r\nmembers of the container. This means that attempts to <TT>PUT</TT>/<TT>POST</TT> a\r\nresource into the immediate name space of the write locked\r\ncontainer MUST fail if the principal requesting the action does\r\nnot have the write lock on the container. In order to keep the\r\nbehavior of locking containers consistent all locks on containers\r\nMUST contain a Depth header equal to infinity, any other value is\r\nillegal.\r\n\r\n\r\n<h3>5.4  Lock Tokens</h3>\r\n\r\n\r\n<h4>5.4.1     Problem Description</h4>\r\n\r\nIt is possible that once a lock has been granted it may be\r\nremoved without the lock owner\u2019s knowledge. This can cause\r\nserialization problems if the lock owner executes methods\r\nthinking their lock is still in effect. Thus a mechanism is\r\nneeded for a principal to predicate the successful execution of a\r\nmessage upon the continuing existence of a lock.\r\n\r\n\r\n<h4>5.4.2     Proposed Solution</h4>\r\n\r\nThe proposed solution is to provide a lock token in the response\r\nof a lock request. The lock token is a type of state token and\r\ndescribes a particular lock. The same lock token must never be\r\nrepeated on a particular resource. This prevents problems with\r\nlong held outstanding lock tokens being confused with newer\r\ntokens. This uniqueness requirement is the same as for e-tags.\r\nThis requirement also allows for tokens to be submitted across\r\nresources and servers without fear of confusion.\r\n\r\n\r\n<h4>5.4.3     Lock Token Definition</h4>\r\n\r\nThe lock token is returned in the State-Token header in the\r\nresponse to a <TT>LOCK</TT> method. The lock token can also be discovered\r\nthrough lock discovery on a resource.\r\n<p>\r\n<PRE>\r\nLock-Token-URL = \"StateToken:\" Type \":\" Resources \":\" State-Info\r\nType = \"Type\" \"=\" \"^DAV:/LOCK/DAVLOCK^\"\r\nResources = \"Res\" \"=\" 1*(\"^\" Caret-Encoded-URI \"^\")\r\nCaret-Encoded-URI = &lt;This is a URI which has all \"^\"s % encoded.&gt;\r\nState-Info = DAVLockScope \":\" DAVLockType \":\" ServerID  ;\r\nDAVLockScope, DAVLockType defined in Lock-Info header\r\nServerID = \"ServerID\" \"=\" *(uchar | reserved)\r\n</PRE>\r\n\r\n<P>The ServerID is a field for use by the server. Its most basic\r\npurpose is to put in a unique identifier to guarantee that a\r\nserver will never confuse an old lock token with a newer one.\r\nHowever the server is free to use the field to record whatever\r\ninformation it deems fit. The field is opaque to clients.\r\n\r\n\r\n<h3>5.5  UNLOCK Method</h3>\r\n\r\n\r\n<h4>5.5.1     Problem Definition</h4>\r\n\r\nThe <TT>UNLOCK</TT> method removes the lock identified by the lock token\r\nin the State-Token header from the Request-URI.\r\n\r\n\r\n<h4>5.5.2     Example</h4>\r\n\r\n<PRE>\r\nUNLOCK /workspace/webdav/proposal.doc HTTP/1.1\r\nHost: webdav.sb.aol.com\r\nState-Token: StateToken:Type=^DAV:/LOCK/DAVLOCK^:Res=^http://www.\r\nics.uci.edu/workspace/webdav/proposal.doc^:LockType=Write:LockSco\r\npe=Exclusive:ServerID=12382349AdfFFF\r\n</PRE>\r\n\r\n\r\n<PRE>\r\nHTTP/1.1 200 OK\r\n</PRE>\r\n\r\n<P>In this example, the lock from example of Section 2.9 is removed\r\nfrom the resource at\r\n<TT>http://webdav.sb.aol.com/workspace/webdav/proposal.doc</TT>\r\n\r\n\r\n<h3>5.6  Discovery Mechanisms</h3>\r\n\r\n\r\n<h4>5.6.1     Lock Type Discovery</h4>\r\n\r\n\r\n<h4>5.6.1.1   Problem Definition</h4>\r\n\r\nSince server lock support is optional, a client trying to lock a\r\nresource on a server can either try the lock and hope for the\r\nbest or can perform some form of discovery to determine what lock\r\ntypes the server actually supports, then formulate a supported\r\nrequest.  This is known as lock type discovery. Lock type\r\ndiscovery is not the same as discovering what access control\r\ntypes are supported, as there may be access control types without\r\ncorresponding lock types.\r\n\r\n\r\n<h4>5.6.1.2   SupportedLock Property</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/lock/supportedlock</tt>\r\n<BR>Purpose: To provide a listing of the lock types supported by the\r\nresource.\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Values: An XML document containing zero or more LockEntry XML\r\nelements.\r\n<BR>Description: The SupportedLock property of a resource returns a\r\nlisting of the combinations of scope and access types which may\r\nbe specified in a lock request on the resource. Note that the\r\nactual contents are themselves controlled by access controls so a\r\nserver is not required to provide information the client is not\r\nauthorized to see. If SupportedLock is available on \"*\" then it\r\nMUST define the set of locks allowed on all resources on that\r\nserver.\r\n\r\n\r\n<h4>5.6.1.3   LOCKENTRY XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/lockentry</tt>\r\n<BR>Purpose: Defines a DAVLockType/LockScope pair which may be\r\nlegally used with a LOCK on the specified resource.\r\n<BR>Schema: <tt>HYPERLINK http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: A SupportedLock entry\r\n<BR>Values: LockType LockScope\r\n\r\n\r\n<h4>5.6.1.4   LOCKTYPE XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/locktype</tt>\r\n<BR>Purpose: Lists a DAVLockType\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT> LOCKENTRY</tt>\r\n<BR>Values: DAVLockTypeValue\r\n\r\n\r\n<h4>5.6.1.5   LOCKSCOPE XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/lockscope</tt>\r\n<BR>Purpose: Lists a DAVLockScope\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT> LOCKENTRY</tt>\r\n<BR>Values: DAVLockScopeValue\r\n\r\n\r\n<h4>5.6.2     Active Lock Discovery</h4>\r\n\r\n\r\n<h4>5.6.2.1   Problem Definition</h4>\r\n\r\nIf another principal locks a resource that a principal wishes to\r\naccess, it is useful for the second principal to be able to find\r\nout who the first principal is.\r\n\r\n\r\n<h4>5.6.2.2   Solution Requirements</h4>\r\n\r\nThe lock discovery mechanism should provide a list of who has the\r\nresource locked, what locks they have, and what their lock tokens\r\nare. The lock tokens are useful in shared lock situations where\r\ntwo principals in particular may want to guarantee that they do\r\nnot overwrite each other. The lock tokens are also useful for\r\nadministrative purposes so that an administrator can remove a\r\nlock by referring to its token.\r\n\r\n\r\n<h4>5.6.2.3   LOCKDISCOVERY Property</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/lockdiscovery</tt>\r\n<BR>Purpose: To discover what locks are active on a resource\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Values: An XML document containing zero or more ActiveLock XML\r\nelements.\r\n<BR>Description: The <TT>LOCKDISCOVERY</TT> property returns a listing of who\r\nhas a lock, what type of lock they have, the time out type and\r\nthe time remaining on the time out, and the associated lock\r\ntoken. The server is free to withhold any or all of this\r\ninformation if the requesting principal does not have sufficient\r\naccess rights to see the requested data.\r\n\r\n\r\n<h4>5.6.2.4   ACTIVELOCK XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/activelock</tt>\r\n<BR>Purpose: A multivalued XML element that describes a particular\r\nactive lock on a resource\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: A LOCKDISCOVERY entry\r\n<BR>Values: LOCKTYPE LOCKSCOPE OWNER TIMEOUT LOCKTOKEN\r\n\r\n\r\n<h4>5.6.2.5   OWNER XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/lock/owner</tt>\r\n<BR>Purpose: Returns owner information\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT> ACTIVELOCK</tt>\r\n<BR>Values: XML:REF | {any valid XML string}\r\n\r\n\r\n<h4>5.6.2.6   TIMEOUT XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/timeout</tt>\r\n<BR>Purpose: Returns information about the timeout associated with\r\nthe lock\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT> ACTIVELOCK</tt>\r\n<BR>Values: CLOCKTYPE TIMETYPE TIMEOUTVAL\r\n\r\n\r\n<h4>5.6.2.7   CLOCKTYPE XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/clocktype</tt>\r\n<BR>Purpose: Returns the clock type used with this lock\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT> TIMEOUT</tt>\r\n<BR>Values:  ClockTypeValue\r\n\r\n\r\n<h4>5.6.2.8   TIMETYPE XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/clocktype</tt>\r\n<BR>Purpose: Returns the time type used with this lock\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT> TIMEOUT</tt>\r\n<BR>Values: TimeTypeValue\r\n\r\n\r\n<h4>5.6.2.9   TIMEOUTVAL XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/timeoutval</tt>\r\n<BR>Purpose: Returns the amount of time left on the lock\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT> TIMEOUT</tt>\r\n<BR>Values: DAVTimeOutVal\r\n\r\n<h4>5.6.2.10  LOCKTOKEN XML Element</h4>\r\n<BR>Name: <tt>http://www.ietf.org/standards/dav/statetoken</tt>\r\n<BR>Purpose: Returns the lock token\r\n<BR>Schema: <tt>http://www.ietf.org/standards/dav/</tt>\r\n<BR>Parent: <TT> ACTIVELOCK</tt>\r\n<BR>Values: XML:REF\r\n<BR>Description: The REF contains a Lock-Token-URL.\r\n\r\n\r\n<h2>6    Version Control</h2>\r\n[TBD]\r\n\r\n\r\n<h2>7    Internationalization Support</h2>\r\n[TBD]\r\n\r\n\r\n<h2>8    Security Considerations</h2>\r\n[TBD]\r\n\r\n\r\n<h2>9    Acknowledgements</h2>\r\n\r\nTerry Allen, Harald Alvestrand, Alan Babich, Dylan Barrell,\r\nBernard Chester, Dan Connolly, Jim Cunningham, Ron Daniel, Jr.,\r\nKeith Dawson, Mark Day, Martin Duerst, David Durand, Lee Farrell,\r\nChuck Fay, Roy Fielding, Mark Fisher, Alan Freier, George\r\nFlorentine, Jim Gettys, Phill Hallam-Baker, Dennis Hamilton,\r\nSteve Henning, Alex Hopmann, Andre van der Hoek, Ben Laurie, Paul\r\nLeach, Ora Lassila, Karen MacArthur, Steven Martin, Larry\r\nMasinter, Michael Mealling, Keith Moore, Henrik Nielsen, Kenji\r\nOta, Bob Parker, Glenn Peterson, Jon Radoff, Saveen Reddy, Henry\r\nSanders, Christopher Seiwald, Judith Slein, Mike Spreitzer, Einar\r\nStefferud, Ralph Swick, Kenji Takahashi, Robert Thau, Sankar\r\nVirdhagriswaran, Fabio Vitali, Gregory Woodhouse, Lauren Wood\r\n\r\n\r\n<h2>10   References</h2>\r\n\r\n[Berners-Lee, 1997] T. Berners-Lee, \"Metadata Architecture.\"\r\nUnpublished white paper, January 1997.\r\n<A HREF=\"http://www.w3.org/pub/WWW/DesignIssues/Metadata.html\">http://www.w3.org/pub/WWW/DesignIssues/Metadata.html.</A>\r\n\r\n<P>[Bray, Sperberg-McQueen, 1997] T. Bray, C. M. Sperberg-McQueen,\r\n\"Extensible Markup Language (XML): Part I. Syntax\", WD-xml-lang.html, <A HREF=\"http://www.w3.org/pub/WWW/TR/WD-xml-lang.html\">http://www.w3.org/pub/WWW/TR/WD-xml-lang.html</A>.\r\n\r\n<P>[Connolly et al, 1997] D. Connolly, R. Khare, H.F. Nielsen, \"PEP\r\n- an Extension Mechanism for HTTP\", Internet draft, work-in-progress. draft-ietf-http-pep-04.txt,\r\n<A HREF=\"ftp://ds.internic.net/internet-drafts/draft-ietf-http-pep-04.txt\">ftp://ds.internic.net/internet-drafts/draft-ietf-http-pep-04.txt</A>.\r\n\r\n<P>[Fielding et al., 1997] R. Fielding, J. Gettys, J. Mogul, H.\r\nFrystyk, T. Berners-Lee, \"Hypertext Transfer Protocol --HTTP/1.1.\" RFC 2068. U.C. Irvine, DEC, MIT/LCS.  January, 1997.\r\n\r\n<P>[Lasher, Cohen, 1995] R. Lasher, D. Cohen, \"A Format for\r\nBibliographic Records,\" RFC 1807. Stanford, Myricom. June, 1995.\r\n\r\n<P>[Maloney, 1996] M. Maloney, \"Hypertext Links in HTML.\" Internet\r\ndraft (expired), work-in-progress, January, 1996.\r\n\r\n<P>[MARC, 1994] Network Development and MARC Standards, Office, ed.\r\n1994. \"USMARC Format for Bibliographic Data\", 1994. Washington,\r\nDC: Cataloging Distribution Service, Library of Congress.\r\n[Miller et al., 1996] J. Miller, T. Krauskopf, P. Resnick, W.\r\nTreese, \"PICS Label Distribution Label Syntax and Communication\r\nProtocols\" Version 1.1, W3C Recommendation REC-PICS-labels-961031.\r\n<A HREF=\"http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html\">http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html</A>\r\n\r\n<P>[Slein et al., 1997] J. A. Slein, F. Vitali, E. J. Whitehead,\r\nJr., D. Durand, \"Requirements for Distributed Authoring and\r\nVersioning on the World Wide Web.\" Internet-draft, work-in-progress, draft-ietf-webdav-requirements-03.txt,\r\n<A HREF=\"ftp://ds.internic.net/internet-drafts/draft-ietf-webdav-requirements-03.txt\">ftp://ds.internic.net/internet-drafts/draft-ietf-webdav-requirements-03.txt</A>.\r\n\r\n<P>[WebDAV, 1997] WEBDAV Design Team. \"A Proposal for Web Metadata\r\nOperations.\" Unpublished manuscript.\r\n<A HREF=\"http://www.ics.uci.edu/~ejw/authoring/proposals/metadata.html\">http://www.ics.uci.edu/~ejw/authoring/proposals/metadata.html</A>\r\n\r\n<P>[Weibel et al., 1995] S. Weibel, J. Godby, E. Miller, R. Daniel,\r\n\"OCLC/NCSA Metadata Workshop Report.\"\r\n<A HREF=\"http://purl.oclc.org/metadata/dublin_core_report\">http://purl.oclc.org/metadata/dublin_core_report</A>.\r\n\r\n<P>[Yergeau, 1997] F. Yergeau, \"UTF-8, a transformation format of\r\nUnicode and ISO 10646\", Internet Draft, work-in-progress, draft-yergeau-utf8-rev-00.txt, <A HREF=\"http://www.internic.net/internet-drafts/draft-yergeau-utf8-rev-00.txt\">http://www.internic.net/internet-drafts/draft-yergeau-utf8-rev-00.txt</A>.\r\n\r\n\r\n<h2>11   Authors' Addresses</h2>\r\n\r\n<PRE>\r\nY. Y. Goland\r\nMicrosoft Corporation\r\nOne Microsoft Way\r\nRedmond, WA 98052-6399\r\nEmail yarong@microsoft.com\r\n\r\nE. J. Whitehead, Jr.\r\nDept. Of Information and Computer Science\r\nUniversity of California, Irvine\r\nIrvine, CA 92697-3425\r\nEmail: ejw@ics.uci.edu\r\n\r\nA. Faizi\r\nNetscape\r\n685 East Middlefield Road\r\nMountain View, CA 94043\r\nEmail: asad@netscape.com\r\n\r\nS. R Carter\r\nNovell\r\n1555 N. Technology Way\r\nM/S ORM F111\r\nOrem, UT 84097-2399\r\nEmail srcarter@novell.com\r\n\r\nD. Jensen\r\nNovell\r\n1555 N. Technology Way\r\nM/S ORM F111\r\nOrem, UT 84097-2399\r\nEmail dcjensen@novell.com\r\n</PRE>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "Windows-1252"}