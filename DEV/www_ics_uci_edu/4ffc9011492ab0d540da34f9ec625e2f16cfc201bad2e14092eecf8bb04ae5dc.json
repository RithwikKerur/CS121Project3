{"url": "https://www.ics.uci.edu/~eppstein/ca/search.html", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <title>Life Search Programs</title>\n\n    <style type=\"text/css\">\n        body { \n            color: black;\n            margin: 15pt;\n            background: white url(b35s236c6g.gif);\n        }\n        dt {\n            margin-top: 15pt;\n            font-weight: bold;\n        }\n        span { \n            background-color: white;\n        }\n        div {\n            text-align: right;\n        }\n    </style>\n  </head>\n\n  <body>\n    <h1><span>Life Search Programs</span></h1>\n\n    <p><span>It is possible to find small but interesting patterns\n    in Life just by trying random seed patterns, or by manually\n    setting up glider crashes, etc. But many lifenthusiasts have\n    written search programs to aid in finding larger patterns. It\n    may be more productive to write your own programs than to run\n    the ones listed here, since that way you're more likely to find\n    something nobody else could have found. But, sometimes there's\n    already an available tool for what you want, and anyway it's\n    hard to be original without knowing what's already been\n    done.</span></p>\n\n    <p><span>This page is intended as a catalog of these search\n    programs: who wrote them, how do they work, what can they find,\n    and how can one obtain them? I'm including even unobtainable\n    programs here, for historical purposes and since it may be\n    useful to have a description of their design\n    principles.</span></p>\n\n    <dl>\n      <dt><span>Bays</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.cs.sc.edu/~bays/\">Carter Bays</a><br />\n       <i>Requirements:</i> Unknown<br />\n       <i>Availability:</i> Unknown<br />\n       <i>Description:</i> Forms seed patterns by setting cells on\n      or off randomly within a small rectangular block in a larger\n      field. If evolution of a seed reaches the field boundary, the\n      resulting pattern is recentered and evolved again. Patterns\n      that reach the boundary a second time are saved as possible\n      gliders. Used by Bays to find gliders in several\n      three-dimensional and triangular-lattice cellular\n      automata.</span></dd>\n\n      <dt><span>catalyst</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.gabrielnivasch.org/\">Gabriel\n      Nivasch</a><br />\n       <i>Requirements:</i> Platform-independent C++<br />\n       <i>Availability:</i> <a\n      href=\"http://www.gabrielnivasch.org/fun/life/\">Freeware,\n      on web</a><br />\n       <i>Description:</i> Places still-life catalysts to react\n      with a given pattern. The program uses an exhaustive\n      depth-first traversal of all possibilities. It only places a\n      catalyst at the moment that it will react with the pattern,\n      using a data structure to make sure that the placement will\n      not interfere with previous steps of the\n      reaction.</span></dd>\n\n      <dt><span>dr</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.math.ucdavis.edu/~dean/\">Dean\n      Hickerson</a><br />\n       <i>Requirements:</i> Platform-independent C<br />\n       <i>Availability:</i> Contact author<br />\n       <i>Description:</i> Searches for patterns consisting of a\n      small perturbation \"drifting\" across a still-life background.\n      Takes as input the perturbation and part of the background.\n      Depth-first; simulates the evolution of the perturbation,\n      making a choice whenever it needs the value of an unknown\n      background cell, and backtracking whenever it finds an\n      inconsistency in the background or the perturbation grows too\n      large. Useful for finding high-period billiard-table\n      oscillators, circuitry consisting of signals moving through\n      static wires and components, and custom eaters.</span></dd>\n\n      <dt><span>gencols</span></dt>\n\n      <dd><span><i>Author:</i> Paul Callahan<br />\n       <i>Requirements:</i> Platform-independent C<br />\n       <i>Availability:</i> <a\n      href=\"http://www.radicaleye.com/lifepage/gencols.txt\">Freeware,\n      on web</a><br />\n       <i>Description:</i> Enumerates collisions between patterns\n      (e.g. gliders and still lifes). Includes output filters to\n      detect oscillators, spaceships, or successful eating of one\n      pattern by another. Life evolution rule is hardcoded as a\n      sequence of bit-parallel integer operations (so it's possible\n      to change but not easy).</span></dd>\n\n      <dt><span>gfind</span></dt>\n\n      <dd><span><i>Author:</i> <a href=\"/~eppstein/\">David\n      Eppstein</a><br />\n       <i>Requirements:</i> Platform-independent C<br />\n       <i>Availability:</i> <a href=\"gfind.c\">Freeware, on\n      web</a><br />\n       <i>Description:</i> Breadth first search for low-period\n      spaceships. Extends partial patterns a row at a time, keeping\n      track of rows in all phases of the pattern. Finds successor\n      rows using a bit-parallel graph path computation; hash table\n      eliminates redundant search branches; uses depth first\n      iterated deepening, garbage collection, and row width\n      reduction (triggered by excess depth in iterated deepening\n      stages) to limit the breadth first queue size. Includes modes\n      for finding symmetric patterns. For more details see my paper\n      <a href=\"http://arxiv.org/abs/cs.AI/0004003\">\"Searching for\n      Spaceships\"</a> .</span></dd>\n\n      <dt><span>Glue</span></dt>\n\n      <dd><span><i>Author:</i> Paul Chapman<br />\n       <i>Requirements:</i> MS-Windows<br />\n       <i>Availability:</i> In development<br />\n       <i>Description:</i> Searches for slow-salvo constructions in\n      Life (patterns that can be formed by starting from a blinker\n      or block and colliding a single glider at a time into a\n      previously constructed pattern, as described in Nicholas\n      Gotts' paper \"Self-Organized Construction in Sparse Random\n      Arrays of Conway's Game of Life\"). Takes a given starting\n      pattern and generates and catalogs every possible collision\n      between it and a glider.</span></dd>\n\n      <dt><span>gsearch</span></dt>\n\n      <dd><span><i>Author:</i> <a href=\"/~eppstein/\">David\n      Eppstein</a><br />\n       <i>Requirements:</i> Platform-independent C. Memory\n      intensive<br />\n       <i>Availability:</i> <a href=\"gsearch.c\">Freeware, on\n      web</a><br />\n       <i>Description:</i> Performs a brute force search of all\n      patterns fitting within a small rectangle (4x7 taking a day\n      or two). Evolves each such pattern for a specified number of\n      generations or until it repeats, grows too large, or matches\n      a previously seen pattern. Recognizes spaceships,\n      oscillators, unstable oscillators (such as Life queen bee and\n      p90), replicators, and some puffers. Includes modes for\n      finding symmetric patterns.</span></dd>\n\n      <dt><span>Hersrch</span></dt>\n\n      <dd><span><i>Author:</i> Karel Suhajda<br />\n       <i>Requirements:</i> Windows<br />\n       <i>Availability:</i> <a href=\"http://www.volny.cz/kasuha/\">C++ source and executable</a><br />\n       <i>Description:</i>\n      Searches for open or closed Herschel tracks in Conway's Game of Life,\n      using a database of known static and periodic track components.\n      Backtracking search, pruning the search tree when the pattern exceeds\n      given size bounds or when a self-overlapping sequence of\n      components is detected (using an Aho-Corasick string matching automaton\n      on a predefined list of impossible sequences).</span></dd>\n\n      <dt><span>Holzwart</span></dt>\n\n      <dd><span><i>Author:</i> Hartmut Holzwart<br />\n       <i>Requirements:</i> Unknown<br />\n       <i>Availability:</i> Unknown<br />\n       <i>Description:</i> Another search program similar to LS and\n      lifesrc. Limited by machine precision to patterns with width\n      at most 31. Used by Holzwart to find many variant c/2 and c/3\n      spaceships in Life, and related patterns including the\n      \"spacefiller\" in which four c/2 spaceships stretch the\n      corners of a growing diamond shaped still life.</span></dd>\n\n      <dt><span>knight</span></dt>\n\n      <dd><span><i>Author:</i> <a href=\"mailto:coe@vitesse.com\">Tim\n      Coe</a><br />\n       <i>Requirements:</i> Platform-independent C. Memory\n      intensive<br />\n       <i>Availability:</i> Contact author<br />\n       <i>Description:</i> Breadth first search for low-period\n      spaceships. Extends partial patterns a row at a time in one\n      phase only; checks that evolving the pattern through a period\n      results in the same rows. Uses a fixed amount of depth-first\n      lookahead per node to limit the breadth first queue size.\n      Includes modes for finding symmetric patterns. Life evolution\n      rule is hardcoded as a sequence of bit-parallel integer\n      operations, multiple times throughout 25 pages of uncommented\n      C (so not really possible to change without rewriting the\n      whole program).</span></dd>\n\n      <dt><span>LifeLab</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.kagi.com/authors/akt/\">Andrew\n      Trevorrow</a><br />\n       <i>Requirements:</i> Macintosh<br />\n       <i>Availability:</i> <a\n      href=\"http://www.trevorrow.com/lifelab/\">Shareware, on\n      web</a><br />\n       <i>Description:</i> This is a general purpose CA\n      viewing/editing system, but it also includes a brute force\n      search of all patterns fitting within a small rectangle.\n      Evolves each such pattern for a specified number of\n      generations or until it repeats. Recognizes spaceships,\n      oscillators, still lifes, and methusalahs. Not very\n      fast.</span></dd>\n\n      <dt><span>lifesrc</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.canb.auug.org.au/~dbell/\">David\n      Bell</a><br />\n       <i>Requirements:</i> Platform-independent C<br />\n       <i>Availability:</i> <a\n      href=\"http://www.canb.auug.org.au/~dbell/programs/lifesrc-3.7.tar.gz\">\n      C source</a> , <a\n      href=\"http://entropymine.com/jason/life/software/\">Windows\n      executable</a><br />\n       <i>Description:</i> Depth-first backtracking search for\n      low-period spaceships, oscillators, still lifes, puffers, or\n      predecessors of a given pattern. Maintains the state of each\n      phase of each cell in a specified region as unknown, live,\n      dead, or don't care; recursively tries setting each unknown\n      cell to live or dead and propagating the consequences to\n      neighboring cells in neighboring generations. Includes modes\n      for finding symmetric patterns.</span></dd>\n\n      <dt><span>LS</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.math.ucdavis.edu/~dean/\">Dean\n      Hickerson</a><br />\n       <i>Requirements:</i> Apple IIe<br />\n       <i>Availability:</i> Still exists on a 5 1/4\" floppy\n      somewhere<br />\n       <i>Description:</i> Depth-first backtracking search for\n      low-period oscillators, spaceships, and predecessors of a\n      given pattern, similar to lifesrc. The name is short for\n      \"Life search\". Written in 1989 using a combination of 6502\n      assembler and Basic; mentioned by <a\n      href=\"http://home.interserv.com/~mniemiec/lifecred.htm\">Mark\n      Niemiec</a> as the first program to search for oscillators.\n      Described in more detail in the file \"ORIGIN\" included in\n      some lifesrc distributions.</span></dd>\n\n      <dt><span>new4</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"mailto:KiwiCado23@aol.com\">Keith Amling</a><br />\n       <i>Requirements:</i> Windows-specific C++<br />\n       <i>Availability:</i> Contact author<br />\n       <i>Description:</i> Depth first search for low-period\n      spaceships. Extends partial patterns a column at a time,\n      keeping track of columns in a single phase of the pattern. At\n      each level of search, tries all possible choices for the next\n      column, and for each choice performs the evolution rule p\n      times on the last 2p+1 columns (where p is the desired\n      period). If the result of the evolution matches a shifted\n      copy of the original middle column, the search continues\n      recursively. Stops and outputs a successful spaceship when\n      the result of the evolution matches not just the middle\n      column but also all later columns. Life evolution rule is\n      hardcoded but only in a small number of easy to change\n      lines.</span></dd>\n\n      <dt><span>Niemiec</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://home.interserv.com/~mniemiec/\">Mark\n      Niemiec</a><br />\n       <i>Requirements:</i> Unknown<br />\n       <i>Availability:</i> Unknown<br />\n       <i>Description:</i> This is described by <a\n      href=\"http://www.uni-bielefeld.de/~achim/still_life.html\">Achim\n      Flammenkamp</a> as an improved version of Raynham's still\n      life enumerator, written in 1989, capable of finding all\n      still lifes with up to 20 live bits. Design principles\n      unknown. Niemiec apparently also wrote a brute force search\n      program, which finds all oscillators or spaceships that fit\n      in a given area (5x5 taking a few days as of 1994) based on a\n      principle attributed by him to Raynham of simultaneously\n      running two copies, one twice as fast as the other, and\n      detecting when both reach the same state. (The same principle\n      has been discovered by many other workers in other areas e.g.\n      the Pollard rho factoring algorithm.).</span></dd>\n\n      <dt><span>ofind</span></dt>\n\n      <dd><span><i>Author:</i> <a href=\"/~eppstein/\">David\n      Eppstein</a><br />\n       <i>Requirements:</i> Platform-independent C<br />\n       <i>Availability:</i> <a href=\"ofind.c\">Freeware, on\n      web</a><br />\n       <i>Description:</i> Breadth first search for low-period\n      oscillators. Similar to gfind, but extends patterns in all\n      phases simultaneously rather than a single phase at a time,\n      and includes special handling of stator cells. User can\n      specify what spark the oscillator should produce, or how it\n      should interact with neighboring patterns of other\n      periods.</span></dd>\n\n      <dt><span>polyomino</span></dt>\n\n      <dd><span><i>Author:</i> Paul Callahan<br />\n       <i>Requirements:</i> Unknown<br />\n       <i>Availability:</i> <a\n      href=\"mailto:pbclife@jps.net\">Contact author</a><br />\n       <i>Description:</i> Enumerates all small polyominos\n      (presumably by a backtracking tree search that tries all ways\n      of adding a cell to each n-polyomino, in such a way that the\n      same (n+1)-polyomino couldn't have been formed in a\n      previously listed way). Simulates the evolution of each\n      polyomino, determining whether it generates a previously\n      known interesting pattern (such as a switch engine, Herschel,\n      or pi) by forming 32-bit words representing the recent\n      history of each cell and comparing against known signature\n      words. Useful for finding small infinite-growth\n      patterns.</span></dd>\n\n      <dt><span>ptbsearch</span></dt>\n\n      <dd><span><i>Author:</i> Paul Callahan<br />\n       <i>Requirements:</i> Platform-independent C<br />\n       <i>Availability:</i> <a href=\"ptbsearch.tar.gz\">Freeware, on\n      web</a><br />\n       <i>Description:</i> Attempts to perturb a starting reaction\n      by adding combinations of eaters or other still lifes, to\n      make a different reaction product without destroying the\n      added patterns. Life evolution rule is hardcoded in source\n      but easy to change. Useful for finding Herschel tracks and\n      glider guns.</span></dd>\n\n      <dt><span>Random Agar</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.gabrielnivasch.org/\">Gabriel\n      Nivasch</a><br />\n       <i>Requirements:</i> Platform-independent C++<br />\n       <i>Availability:</i> <a\n      href=\"http://www.gabrielnivasch.org/fun/life/\">Freeware,\n      on web</a><br />\n       <i>Description:</i> This program is intended to look for new\n      Life oscillators, wicks, and agars. It generates random\n      spatially periodic patterns, and runs them until they\n      oscillate. It includes complete support for all possible\n      symmetry types and clever oscillation detection\n      algorithms.</span></dd>\n\n      <dt><span>Raynham</span></dt>\n\n      <dd><span><i>Author:</i> Peter Raynham<br />\n       <i>Requirements:</i> Unknown<br />\n       <i>Availability:</i> Unknown<br />\n       <i>Description:</i> This is described by <a\n      href=\"http://home.interserv.com/~mniemiec/lifecred.htm\">Mark\n      Niemiec</a> and <a\n      href=\"http://www.uni-bielefeld.de/~achim/still_life.html\">Achim\n      Flammenkamp</a> as the first program to search for still\n      lifes, written in the mid-1970's. Design principles\n      unknown.</span></dd>\n\n      <dt><span>sngdetect</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.gabrielnivasch.org/\">Gabriel\n      Nivasch</a><br />\n       <i>Requirements:</i> Platform-independent C++<br />\n       <i>Availability:</i> <a\n      href=\"http://www.gabrielnivasch.org/fun/life/\">Freeware,\n      on web</a><br />\n       <i>Description:</i> Tests interactions of gliders with\n      patterns formed from common still lifes and oscillators. For\n      each interaction, test whether the same pattern reappears,\n      shifted some distance from its original position.</span></dd>\n\n      <dt><span>stilledit</span></dt>\n\n      <dd><span><i>Author:</i> Paul Callahan<br />\n       <i>Requirements:</i> Java-enabled web browser<br />\n       <i>Availability:</i> <a\n      href=\"http://www.radicaleye.com/lifepage/stilledit.html\">Web\n      applet</a><br />\n       <i>Description:</i> After the user edits a pattern, in which\n      some cells' states are marked as \"fixed\", this program\n      attempts to find a still life matching those requirements by\n      a hill-climbing approach, in which it toggles the state of\n      unfixed cells to minimize the number of violations of the CA\n      evolution rule, with some randomized variation to avoid\n      getting stuck in local minima. Only works for Life, not other\n      totalistic rules, but Java source code is\n      available.</span></dd>\n\n      <dt><span>Still Lifes Auto</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.gabrielnivasch.org/\">Gabriel\n      Nivasch</a><br />\n       <i>Requirements:</i> Mac executable<br />\n       <i>Availability:</i> <a\n      href=\"http://www.gabrielnivasch.org/fun/life/\">Freeware,\n      on web</a><br />\n       <i>Description:</i> Mac port of StillEdit with a few added\n      features.</span></dd>\n\n      <dt><span>Tooke</span></dt>\n\n      <dd><span><i>Author:</i> Paul Tooke<br />\n       <i>Requirements:</i> Unknown<br />\n       <i>Availability:</i> Unknown<br />\n       <i>Description:</i> Searches for puffers by truncating tails\n      of spaceships (generated by a modified version of gfind) and\n      testing what happens to the resulting patterns.</span></dd>\n\n      <dt><span>torus</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://entropymine.com/jason/\">Jason Summers</a><br />\n       <i>Requirements:</i> Platform-independent C<br />\n       <i>Availability:</i> <a\n      href=\"http://entropymine.com/jason/life/software/\">Freeware,\n      on web</a><br />\n       <i>Description:</i> Searches for high-period oscillators by\n      testing the evolution of random periodic initial conditions.\n      No user interface; user must change parameters in the source\n      code.</span></dd>\n\n      <dt><span>tweak</span></dt>\n\n      <dd><span><i>Author:</i> <a\n      href=\"http://www.canb.auug.org.au/~dbell/\">David\n      Bell</a><br />\n       <i>Requirements:</i> Unknown<br />\n       <i>Availability:</i> Unknown<br />\n       <i>Description:</i> Modifies known puffers or wicktrailers\n      by changing cell values within a small rectangle using a\n      brute force enumeration. Filtering principles\n      unknown.</span></dd>\n\n      <dt><span>Wechsler</span></dt>\n\n      <dd><span><i>Author:</i> Allan Wechsler<br />\n       <i>Requirements:</i> Unknown<br />\n       <i>Availability:</i> Unknown<br />\n       <i>Description:</i> Developed in 1994, this program\n      attempted to use genetic programming to \"breed\" spaceships\n      and oscillators of a fixed period, using as a fitness\n      function the similarity between the original pattern and (a\n      shifted copy of) the pattern after evolving the given number\n      of iterations. However, this program was only capable of\n      finding small objects with small periods. Dave Greene tells\n      me he later ran a similar experiment with even less\n      success.</span></dd>\n    </dl>\n    <hr />\n\n    <div>\n      <small><a href=\"/~eppstein/ca/\">Cellular automata</a> , <a\n      href=\"/~eppstein/\">D. Eppstein</a></small>\n    </div>\n  </body>\n</html>\n", "encoding": "ascii"}