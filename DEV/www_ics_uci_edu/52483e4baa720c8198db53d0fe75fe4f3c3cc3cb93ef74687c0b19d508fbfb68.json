{"url": "https://www.ics.uci.edu/~alspaugh/cls/shr/als/declarationConstraint.als", "content": "//  Example signatures, declarations, and constraints\n\n//  The motivations for this example are:\n//    - people have friends, and a person can have a best friend (but only one)\n//    - a best friend is also a friend\n//    - people can have dogs;  one person can have several\n//    - dogs tend to focus on one person (their \"owner\", in this model)\n//    - A proverb:  A dog is man's best friend.  So, what if someone's\n//      best friend is a dog rather than a person?  What would that mean?\n\n//  One way this might work out is to theorize that if a person's best friend\n//  is a dog, it is going to be that person's dog (not someone else's).\n//  How would we say this in logic (and thus in Alloy)?\n\nsig Dog {\n  owner: lone Person   //  Each dog is focused on his/her owner.\n                       //  But a stray dog could have 0 owners, thus \"lone\".\n}\n\nsig Person {\n  friend: Person,      //  Any number of friends (0 to whatever)\n  bestFriend:\n    lone (Person+Dog), //  But at most only one best friend (0 or 1)\n  dog: Dog             //  Any number of dogs\n}\n\n//  This next thing is a signature fact -- it is only about Person\n//  (the signature immediately before it).\n//  Note the use of the \"this\" keyword, and the absence of the \"fact\" keyword.\n{\n  this not in friend    //  We don't say that someone is their own friend.\n}\n//  Because it's a signature fact, we don't have to say which Person's\n//  friend and best friend we are talking about -- it's as though we had said\n//    all p: Person | p not in p.friend\n//  in an ordinary fact.\n\n//  Can only have one signature fact, so this next one is just a fact\n//  (with a \"fact\" keyword)\nfact {\n  bestFriend :> Person //  The part of the bestFriend relation\n                       //  that links Persons to Persons (not to Dogs) ...\n  in friend            //  is a sub-relation of friend.\n}\n//  That is, if someone's best friend is a person (not a dog),\n//  then that best friend is also a friend.\n\nfact {\n  bestFriend :> Dog    //  The part of the bestFriend relation\n                       //  that links Persons to Dogs ...\n  in dog               //  is a sub-relation of dog.\n}\n//  That is, if someone's best friend is a dog (not a person),\n//  then that dog is the person's dog.\n\n\npred show {}\nrun show\n\nfact {\n  all d: Dog |         //  For every dog,\n  all p: d.owner |     //  ... the dog's owner ...\n  d in p.dog           //  ... has that dog\n}                      //  I don't think this can be made a signature fact\n                       //  for either Dog or Person:\n                       //  it talks about both Dogs and Persons.\n\nassert dogOwnerAssert {//  I think this assertion says the same thing.\n  owner                //  Dog -> lone Person\n  in\n  ~dog                 //  Dog -> Person\n}\ncheck dogOwnerAssert   //  So it should always be true (no counterexample).\n\nassert ownerDogAssert {//  This assertion says something else\n  dog                  //  Person -> Dog\n  in\n  ~owner               //  Person lone -> Dog\n}\ncheck ownerDogAssert   //  Alloy will find a counterexample for this.\n\n//  To make ownerDogAssert valid, we need another fact (uncomment it):\n//fact {\n//  all p:Person | all d:p.dog | p = d.owner\n//}\n\n//  (Recall that \"valid\" means \"true for every world\".\n", "encoding": "ascii"}