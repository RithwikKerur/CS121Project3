{"url": "https://www.ics.uci.edu/~thornton/ics65/ProjectGuide/VisualStudioTutorial.html", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\" />\n\n<title>ICS 65 Fall 2012, Visual Studio 2012 Tutorial</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 65 Fall 2012 |\n<a href=\"../index.html\">News</a> |\n<a href=\"../CourseReference.html\">Course Reference</a> |\n<a href=\"../Schedule.html\">Schedule</a> |\n<a href=\"../ProjectGuide\">Project Guide</a> |\n<a href=\"../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 65 Fall 2012<br />\n   Visual Studio 2012 Tutorial</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>While this is certainly not intended to be a full-scale tutorial about Visual Studio, it should instruct you on a few of the most basic features that you'll be needing for your work in this course.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Installing Visual Studio</p>\n\n<p>Visual Studio 2012 will already be installed in the ICS labs.  If you'd like to use it on your own machine, you can obtain it via Microsoft's DreamSpark program (formerly called MSDNAA), to which the Bren School of ICS is a subscriber.  For more information about DreamSpark, see <a href=\"http://www.ics.uci.edu/computing/services/msdnaa_faq.php\">this FAQ</a>.</p>\n\n<p>Note that most of the differences between the versions of Visual Studio (e.g., 2012 vs. 2010, 2010 vs. 2005) are not important in this course, but a critical difference is compiler support for new features in the C++11 standard.  You are well-advised to use Visual Studio 2012 in this course, even if you prefer another version normally; different versions of Visual Studio can be installed alongside one another on the same machine and will co-exist peacefully.</p>\n\n<p>When installing Visual Studio, you can save a good deal of hard drive space by choosing to install only Visual C++, but you can also feel free to install other parts of the package if you're interested in them.  Visual C# and Visual Basic provide useful options for .NET-based Windows programming, for example, which is a handy thing to learn about.</p>\n\n<p>When you first run Visual Studio, it asks you what kind of work you intend to do with it.  Choose the option that says you'll be doing \"Visual C++ development,\" which will configure the application to work best for doing C++ work.  The rest of this tutorial assumes that you've made this choice.  (If you didn't, that's okay, but the user interface may be laid out differently, and keyboard shortcuts may not be the same.  Be warned.)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">How Visual Studio organizes a program</p>\n\n<p>Visual Studio can compile programs as simple as the infamous \"Hello World!\" program, or large-scale applications whose output includes many executables and libraries.  Because it is an industrial-strength tool, Visual Studio needs to be able to manage a great deal of complexity.  To that end, it organizes a program in the following way:</p>\n\n<ul>\n  <li>An entire application is organized into a <i>solution</i>.  The output of a solution might be a single executable program, or it might be many executables and libraries.  For our purposes in this course, the output of a solution will always be a single executable that is a console-mode Windows program.</li>\n  <li>Each \"target\" (i.e., executable or library) in a solution is set up as a <i>project</i>.  One solution contains one or more projects.  For our purposes, our solutions will always contain exactly one project.</li>\n</ul>\n\n<p>Creating a new solution, or a new project within a solution, can be a somewhat daunting task.  Visual Studio asks you to choose from among a large variety of project types (console-mode Windows programs, Windows programs with GUIs, various kinds of libraries and shared components, etc.) and provides a wealth of configuration options.  To simplify things for this course, I've created an empty solution for you to use as a starting point for all of your projects.</p>\n\n<ul>\n  <li><a href=\"65Solution.zip\">65Solution.zip</a> (an Visual Studio 2012 solution with an empty C++ project)</li>\n</ul>\n\n<p>I highly recommend that you use this empty solution as a start to each of your projects, since we'll be grading them by importing the code into this empty solution.  Creating your own solution and using the wrong settings creates the very real possibility of your program working on your machine but not on ours; if you use a different setup from ours, you bear the risk that differences will have an effect.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Okay, I have a solution... Now what?</p>\n\n<p>There are a few principal tasks that you'll engage in as you write your programs.  Refer to the following screenshot as I continue with the tutorial:</p>\n\n<p class=\"center\"><img src=\"VisualStudio2012.png\" alt=\"\" /></p>\n\n<p>(Your Visual Studio window may be organized somewhat differently, as I've manipulated various settings over time to change the layout to my liking.  Still, you should see the window divided into the sections you see above, even if they're arranged differently.  Also, note that there has been a fair amount of controversy in the Windows development community about the colors and styles in the Visual Studio 2012 user interface; if you think this is not the prettiest window you've ever seen, I agree.)</p>\n\n<p>Along the left side of the window is the Solution Explorer, which, for our purposes, is a list of all of the source and header files in your program.  The largest portion of the window is devoted to viewing and editing your code, providing a fairly straightforward and typical code editor.  Along the bottom of the window is the Output area, which will show you the output generated by compiling your program or performing a search.</p>\n\n<p>First and foremost, you'll need to add new source and header files to your program.  Fear not; this is easy to do.  Right-click on the boldfaced word <b>65Project</b> in the Solution Explorer, select <b>Add</b> on the ensuing menu, then select <b>New Item...</b> on the next menu.  You'll then be prompted with a dialog box that may overwhelm you at first.  Don't let it!  Select <b>Code</b> on the \"Categories\" list along the left, then select \"C++ File (.cpp)\" or \"Header File (.h)\" in the Templates section, then type a name into the Name field.  It's that simple!  From there, you can write code into the file, and Visual Studio will add it to the list of things to be compiled.</p>\n\n<p>When you want to compile your program, go to the Build menu and select <b>Build Solution</b> (or press F7 as a shortcut).  The output of the compilation process should appear in the Output area of the window.  If there are errors, they'll be displayed to you after compilation is complete.</p>\n\n<p>If your program compiles with no errors, it's time to run it.  You can run it with or without debugging.  To execute your program in debug mode, select <b>Start</b> from the Debug menu or press F5.  To execute your program without debugging, select <b>Start Without Debugging</b> from the Debug menu or press Ctrl+F5.  A word of advice: When you run your program with debugging, its console window disappears immediately after the program ends, without allowing you to view its output.  When you run without debugging, a <i>Press any key to continue</i> prompt is displayed in the console window when your program ends.  So, unless you really need the debugger, running your program without debugging will probably be easier for you to use.</p>\n\n<p>At some point in your development, you may decide that you don't want a source or header file anymore.  You can remove it from your solution by simply right-clicking it in the Solution Explorer, then selecting <b>Remove</b> on the ensuing menu.  It should be noted that this doesn't remove the file from your hard drive; it only removes it from the solution.  You'll probably also want to delete the file, so that you don't accidentally submit it.</p>\n\n<p>Feel free to explore Visual Studio more on your own.  Don't let yourself get too bogged down in its various features; for now, it's probably best to stick to the simple stuff and concentrate your energies on your C++ programs.  Enjoy!</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Updated for Visual Studio 2012 by Alex Thornton, Fall 2012.</li>\n  <li>Updated for Visual Studio 2010 by Alex Thornton, Summer 2010.</li>\n  <li>Updated for Visual Studio 2008 by Alex Thornton, Winter 2008.</li>\n  <li>Updated for Visual Studio 2005 by Alex Thornton, Spring 2007.</li>\n  <li>Originally written by Alex Thornton, Winter 2004.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}