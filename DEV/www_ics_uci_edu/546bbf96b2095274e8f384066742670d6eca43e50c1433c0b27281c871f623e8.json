{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node59.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Compiler versus Interpreter</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Compiler versus Interpreter\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html2963 HREF=\"node60.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html2961 HREF=\"node58.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html2955 HREF=\"node58.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html2965 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html2964 HREF=\"node60.html\"> Name clashes with </A>\r\n<B>Up:</B> <A NAME=tex2html2962 HREF=\"node58.html\"> Using the compatibility </A>\r\n<B> Previous:</B> <A NAME=tex2html2956 HREF=\"node58.html\"> Using the compatibility </A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION00511000000000000000> Compiler versus Interpreter</A></H2>\r\n<P>\r\nIf your program was written for an interpreter, e.g. C-Prolog,\r\nyou have to be aware that <A NAME=tex2html226 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  is a compiling system.\r\nThere is a distinction between <i> static</i> and <i> dynamic</i> predicates.\r\nBy default, a predicate is static. This means that its clauses have to be\r\nbe compiled as a whole (they must not be spread over multiple files),\r\nits source code is not stored in the system, \r\nand it can not be modified (only recompiled as a whole).\r\nIn contrast, a dynamic predicate may be modified by compiling or\r\nasserting new clauses and by retracting clauses.\r\nIts source code can be accessed using <b> clause/1,2</b> or <b> listing/0,1</b>\r\nA predicate is dynamic when it is explicitly declared as such or when\r\nit was created using <b> assert/1</b>.\r\nPorting programs from an interpreter usually requires the addition of\r\nsome <b> dynamic</b> declarations.\r\nIn the worst case, when (almost) all procedures have to be dynamic,\r\nthe flag <b> all_dynamic</b> can be set instead.\r\n<P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}