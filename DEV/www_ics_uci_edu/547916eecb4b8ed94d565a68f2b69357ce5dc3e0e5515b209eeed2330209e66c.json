{"url": "https://www.ics.uci.edu/~eppstein/pubs/kbest.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head>\n<title>David Eppstein - Publications</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body bgcolor=\"#ffffff\" text=\"#000000\">\n<h1>David Eppstein - Publications</h1>\n<hr><p>\n<h2>\nGenerating multiple near-optimal solutions\n</h2>\nSee also my\n<a href=\"//www.ics.uci.edu/~eppstein/bibs/kpath.bib\">\nbibliography of algorithms for <i>k</i> shortest paths</a>, which\nalso includes related work on other \"<i>k</i>th best\nsolution\" problems, especially the <i>k</i> smallest spanning trees.\nVictor Jim&eacute;nez and Andr&eacute;s Marzal maintain a web page on\n<a href=\"//terra.act.uji.es/REA/\">algorithms for k shortest paths</a>.\n<p>\n<ul>\n<li><b>Finding the <i>k</i> smallest spanning trees</b>.<br>\nD. Eppstein.<br>\n<i>2nd Scand. Worksh. Algorithm Theory,</i> Bergen, Norway, 1990.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 447, 1990, pp. 38&ndash;47.<br>\n<a href=\"Epp-BIT-92.pdf\"><i>BIT</i> 32: 237&ndash;248, 1992</a>\n(special issue for 2nd Scand. Worksh. Algorithm Theory).\n<p>\nBy removing edges not involved in some solution,\nand contracting edges involved in all solutions,\nwe reduce the problem to one in a graph with O(<i>k</i>)\nedges and vertices.  This simplification step\ntransforms any time bound involving <i>m</i> or <i>n</i>\nto one involving min(<i>m,</i> <i>k</i>) or min(<i>n,</i> <i>k</i>)\nrespectively.  This paper also introduces the geometric\nversion of the <i>k</i> smallest spanning trees problem\n(the graph version was long known) which it solves using\norder (<i>k</i>+1) Voronoi diagrams.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Finding the $k$ smallest spanning trees\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Finding-the-k-smallest-spanning-trees.html\">Citations</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=671927\">ACM DL (SWAT)</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=174321\">ACM DL (BIT)</a>)\n<p>\n<li><b>Iterated nearest neighbors and finding minimal polytopes</b>.<br>\nD. Eppstein and \n<a href=\"//compgeom.cs.uiuc.edu/~jeffe/\">J. Erickson</a>.<br>\nTech. Rep. 92-71, ICS, UCI, 1992.<br>\n<a href=\"//portal.acm.org/citation.cfm?id=313612\">\n<i>4th ACM-SIAM Symp. Discrete Algorithms,</i> Austin, 1993, pp. 64&ndash;73</a>.<br>\n<a href=\"//compgeom.cs.uiuc.edu/~jeffe/pubs/pdf/small.pdf\"><i>Disc. Comp. Geom.</i> 11: 321&ndash;350, 1994</a>.\n<p>\nShowed that for various optimization criteria, the\noptimal polygon containing <i>k</i> of <i>n</i>\npoints must be near one of the points, hence one can transform\ntime bounds involving several factors of <i>n</i>\nto bounds linear in <i>n</i> but polynomial in <i>k.</i>\nUsed as a subroutine are data structures for finding several\n<a href=\"geom-nn.html\">nearest neighbors</a> in rectilinear metric spaces, and\nalgorithms for finding the\n<a href=\"geom-deep.html\">deepest point in an arrangement</a> of cubes or\nspheres.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Iterated nearest neighbors and finding minimal polytopes\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Iterated-nearest-neighbors-and-finding-minimal-polytopes.html\">Citations</a> &ndash;\n<a href=\"//compgeom.cs.uiuc.edu/~jeffe/pubs/small.html\">Jeff's pub list entry</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/erickson94iterated.html\">CiteSeer</a>)\n<p>\n<li><b>Tree-weighted neighbors and geometric <i>k</i> smallest spanning trees</b>.<br>\nD. Eppstein.<br>\n<a href=\"Epp-TR-92-77.pdf\">Tech. Rep. 92-77</a>, ICS, UCI, 1992.<br>\n<i>Int. J. Comp. Geom. &amp; Appl.</i> 4: 229&ndash;238, 1994.\n<p>\n\"<a href=\"p-kmst.html\">Finding the <i>k</i> smallest spanning trees</a>\"\nused higher order Voronoi diagrams to reduce the geometric\n<a href=\"kbest.html\"><i>k</i> smallest</a>\n<a href=\"mst.html\">spanning tree</a> problem to the graph problem.\nHere I instead use nearest neighbors for a modified\ndistance function where the bottleneck shortest path length\nis subtracted from the true distance between points.\nThe result improves the planar time bounds and extends\nmore easily to higher dimensions.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Tree-weighted neighbors and geometric $k$ smallest spanning trees\">BibTeX</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein92treeweighted.html\">CiteSeer</a>)\n\n<p>\n<li><b>Ten algorithms for Egyptian fractions</b>.<br>\nD. Eppstein.<br>\n<i>Mathematica in Education and Research</i> 4 (2): 5&ndash;15, 1995.\n<p>\nNumber theory.\nI survey and implement in <i>Mathematica</i> several methods\nfor representing rational numbers as sums of distinct unit fractions.\nOne of the methods involves searching for paths in a certain graph\nusing a <a href=\"p-kpath.html\"><i>k</i> shortest paths</a> heuristic.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Ten algorithms for Egyptian fractions\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Ten-algorithms-for-Egyptian-fractions.html\">Citations</a> &ndash;\n<a href=\"//www.ics.uci.edu/~eppstein/numth/egypt/\">Also available\nin HTML and Mathematica notebook formats</a>)\n<p>\n<li><b>Sparsification&mdash;A technique for speeding up dynamic graph algorithms</b>.<br>\nD. Eppstein,\n<a href=\"//www.scs.gatech.edu/people/zvi-galil\">Z. Galil</a>, \n<a href=\"//www.info.uniroma2.it/~italiano/\">\nG.F. Italiano</a>, and A. Nissenzweig.<br>\n<i>33rd IEEE Symp. Foundations of Comp. Sci.,</i> Pittsburgh, 1992, pp. 60&ndash;69.<br>\nTech. Rep. RC 19272 (83907), IBM, 1993.<br>\nTech. Rep. CS96-11, Univ. Ca' Foscari di Venezia, Oct. 1996.<br>\n<a href=\"//doi.org/10.1145/265910.265914\"><i>J. ACM</i> 44 (5): 669&ndash;696, 1997</a>.\n<p>\nUses a divide and conquer on the edge set of a graph, together with the\nidea of replacing subgraphs by sparser certificates, to make various\ndynamic algorithms as fast on dense graphs as they are on sparse graphs.\nApplications include random generation of spanning trees\nas well as finding the <i>k</i>\n<a href=\"mst.html\">minimum weight spanning trees</a>\nfor a given parameter <i>k.</i>\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Sparsification &ndash;- A technique for speeding up dynamic graph algorithms\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Sparsification-A-technique-for-speeding-up-dynamic-graph-algorithms.html\">Citations</a> &ndash;\n<a href=\"//theory.lcs.mit.edu/~dmjones/FOCS/References/eppsteingin1992:60.html\">MIT hypertext bibliography</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=265914\">ACM DL</a>)\n<p>\n<li><b>Improved sparsification</b>.<br>\nD. Eppstein,\n<a href=\"//www.scs.gatech.edu/people/zvi-galil\">Z. Galil</a>, and \n<a href=\"//www.info.uniroma2.it/~italiano/\">\nG.F. Italiano</a>.<br>\n<a href=\"EppGalIta-TR-93-20.pdf\">Tech. Rep. 93-20</a>, ICS, UCI, 1993.\n<p>\nSaves a log factor over dynamic graph algorithms in\n\"<a href=\"p-sparsification.html\">Sparsification</a>\"\nand their applications, by dividing vertices instead of edges.\nMerged into the journal version of \"Sparsification\".\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Improved sparsification\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Improved-sparsification.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein93improved.html\">CiteSeer</a>)\n<p>\n<li><b>Separator based sparsification for dynamic planar graph algorithms</b>.<br>\nD. Eppstein,\n<a href=\"//www.scs.gatech.edu/people/zvi-galil\">Z. Galil</a>, \n<a href=\"//www.info.uniroma2.it/~italiano/\">\nG.F. Italiano</a>, and T. Spencer.<br>\n<a href=\"//portal.acm.org/citation.cfm?id=167159\"><i>25th ACM Symp. Theory of Computing,</i> San Diego, 1993, pp. 208&ndash;217.</a>\n<p>\nReplaces portions of a hierarchical separator decomposition with smaller\ncertificates to achieve fast update times for various dynamic planar graph problems.  Applications include finding the <i>k</i>\n<a href=\"mst.html\">best spanning trees</a> of a planar graph.\n<p>\n(<a href=\"/~eppstein/bibs/eppstein.html#Separator based sparsification for dynamic planar graph algorithms\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Separator-based-sparsification-for-dynamic-planar-graph-algorithms.html\">Citations</a> &ndash;\n<a href=\"//theory.lcs.mit.edu/~dmjones/STOC/References/eppsteingis1993:208.html\">MIT hypertext bibliography</a>)\n<p>\n<li><b>Separator based sparsification I:\nplanarity testing and minimum spanning trees</b>.<br>\nD. Eppstein,\n<a href=\"//www.scs.gatech.edu/people/zvi-galil\">Z. Galil</a>, \n<a href=\"//www.info.uniroma2.it/~italiano/\">\nG.F. Italiano</a>, and T. Spencer.<br>\n<a href=\"//doi.org/10.1006/jcss.1996.0002\">\n<i>J. Comp. Sys. Sci.</i> 52: 3&ndash;27, 1996\n(special issue for 25th STOC)</a>.\n<p>\nFirst half of journal version of\n<a href=\"p-egis.html\">Separator based sparsification for dynamic planar graph algorithms</a>.\n<p>\n(<a href=\"//fano.ics.uci.edu/cites/Document/Separator-based-sparsification-I-planarity-testing-and-minimum-spanning-trees.html\">Citations</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=227486\">ACM DL</a>)\n<p>\n<li><b>Algorithms for proximity problems in higher dimensions</b>.<br>\n<a href=\"//www.middlebury.edu/~dickerso/\">\nM. T. Dickerson</a> and D. Eppstein.<br>\n<a href=\"//doi.org/10.1016/0925-7721(95)00009-7\">\n<i>Comp. Geom. Theory &amp; Applications</i> 5: 277&ndash;291, 1996</a>.\n<p>\nCombines a method from\n\"<a href=\"p-pgood.html\">Provably good mesh generation</a>\" for\nfinding sparse high-dimensional Delaunay triangulations,\na method of Dickerson, Drysdale, and Sack\n[\"<a href=\"//www.middlebury.edu/~dickerso/research/enum.html\">Simple\nalgorithms for enumerating interpoint distances</a>\", IJCGA 1992]\nfor using Delaunay\ntriangulations to search for nearest neighbors,\nand a method of Frederickson for speeding up tree-based searches.\nThe results are fast algorithms for several proximity problems\nsuch as finding the <i>k</i> nearest neighbors to each point\nin a given point set.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Algorithms for proximity problems in higher dimensions\">BibTeX</a> &ndash;\n<a href=\"DicEpp-CGTA-96.pdf\">Full paper</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Algorithms-for-proximity-problems-in-higher-dimensions.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/dickerson96algorithms.html\">CiteSeer</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=236474\">ACM DL</a>)\n<p>\n<li><b>Finding the <i>k</i> shortest paths</b>.<br>\nD. Eppstein.<br>\n<i>35th IEEE Symp. Foundations of Comp. Sci.,</i> Santa Fe, 1994, pp. 154&ndash;165.<br>\n<a href=\"Epp-TR-94-26.pdf\">Tech. Rep. 94-26</a>, ICS, UCI, 1994.<br>\n<a href=\"//doi.org/10.1137/S0097539795290477\">\n<i>SIAM J. Computing</i> 28 (2): 652&ndash;673, 1998</a>.\n<p>\nThis paper presents an algorithm that finds multiple short paths connecting\ntwo terminals in a graph\n(allowing repeated vertices and edges in the paths)\nin constant time per path after a preprocessing stage\ndominated by a single-source shortest path computation.\nThe paths it finds are the <i>k</i> shortest in the graph, where <i>k</i> is a\nparameter given as input to the algorithm.\n<p>\nThe <i>k</i> shortest paths problem has many important applications for finding\nalternative solutions to geographic path planning problems, network\nrouting, hypothesis generation in computational linguistics, and\nsequence alignment and metabolic pathway finding in\nbioinformatics. Although there have been many papers on the\n<i>k</i> shortest paths problem before and after this one, it has become\nfrequently cited in those application areas.\nAdditionally, it marks a boundary in the theoretical study of the problem:\nprior theoretical work largely concerned how quickly the problem could\nbe solved, a line of research that was closed off by the optimal time\nbounds of this paper. Subsequent work has focused instead\non devising efficient algorithms for more complex alternative\nformulations of the problem that avoid the repeated\nvertices and other shortcomings of the alternative paths produced by\nthis formulation.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Finding the $k$ shortest paths\">BibTeX</a> &ndash;\n<a href=\"Epp-SJC-98.pdf\">Full paper</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Finding-the-k-shortest-paths.html\">Citations</a> &ndash;\n<a href=\"graehl.zip\">Graehl implementation</a> &ndash;\n<a href=\"//terra.act.uji.es/REA/\">Jim&eacute;nez-Marzal implementations</a> &ndash;\n<a href=\"Shibuya.tar.gz\">Shibuya implementation</a> &ndash;\n<a href=\"//www.mat.uc.pt/~eqvm/cientificos/research.html\">Martins implementation</a> &ndash;\n<a href=\"//christophercliff.com/eppstein/\">Cliff OpenStreetMap demo</a> &ndash;\nCiteSeer:\n<a href=\"//citeseer.ist.psu.edu/eppstein94finding.html\">TR '94</a>,\n<a href=\"//citeseer.ist.psu.edu/eppstein98finding.html\">SJC '98</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=299886\">ACM DL</a>)\n<p>\n<li><b>Representing all minimum spanning trees with applications to\ncounting and generation</b>.<br>\nD. Eppstein.<br>\n<a href=\"Epp-TR-95-50.pdf\">Tech. Rep. 95-50</a>, ICS, UCI, 1995.\n<p>\nShows how to find for any edge weighted graph G an equivalent\ngraph EG such that the <a href=\"mst.html\">minimum spanning trees</a>\nof G correspond one-for-one with the spanning trees of EG.\nThe equivalent graph can be\nconstructed in time O(m+n log n) given a single minimum spanning tree of\nG.  As a consequence one can find fast algorithms for counting, listing,\nand randomly generating MSTs.\nAlso discusses similar\nequivalent graph constructions for\n<a href=\"graph-path.html\">shortest paths</a>, minimum cost flows,\nand <a href=\"graph-match.html\">bipartite matching</a>.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Representing all minimum spanning trees with applications to counting and generation\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Representing-all-minimum-spanning-trees-with-applications-to-counting-and-generation.html\">Citations</a>)\n<p>\n<li><b>Finding common ancestors and disjoint paths in DAGs</b>.<br>\nD. Eppstein.<br>\n<a href=\"Epp-TR-95-52.pdf\">Tech. Rep. 95-52</a>, ICS, UCI, 1995.\n<p>\nThis paper describes algorithms for finding pairs of vertex-disjoint\npaths in a DAG, either connecting two given nodes to a common\nancestor, or connecting two given pairs of terminals.\nThe main results were merged into the journal version of\n\"<a href=\"p-kpath.html\">Finding the <i>k</i> shortest paths</a>\".\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Finding common ancestors and disjoint paths in DAGs\">BibTeX</a>)\n<p>\n<li><b>All maximal independent sets and dynamic dominance for sparse\ngraphs.</b><br>\nD. Eppstein.<br>\n<a href=\"//arxiv.org/abs/cs.DS/0407036\">arXiv:cs.DS/0407036</a>.<br>\n<i>16th ACM-SIAM Symp. Discrete Algorithms,</i>\nVancouver, 2005, pp. 451&ndash;459.<br>\n<a href=\"//doi.org/10.1145/1597036.1597042\"><i>ACM Trans. Algorithms</i> 5(4):A38, 2009</a>.\n<p>\nWe show how to apply reverse search to list all maximal independent sets\nin bounded-degree graphs in constant time per set, in graphs from minor\nclosed families in linear time per set, and in sparse graphs\nin subquadratic time per set.  The latter two results rely on new\ndata structures for maintaining a dynamic vertex set in a graph\nand quickly testing whether the set dominates all other vertices.\n<p>\n(<a href=\"Epp-SODA-05-talk.pdf\">SODA05 talk slides</a> &ndash;\n<a href=\"//www.ics.uci.edu/~eppstein/bibs/eppstein.html#All maximal independent sets and dynamic dominance for sparse graphs\">BibTeX</a>)\n<p>\n<li><b><i>k</i>-best enumeration</b>.<br>\nD. Eppstein.<br>\n<a href=\"//doi.org/10.1007/978-3-642-27848-8_733-1\"><i>Encyclopedia of Algorithms</i></a> (Ming-Yang Kao, ed.), Springer, added 2014.<br>\n<a href=\"//arxiv.org/abs/1412.5075\">arXiv:1412.5075</a>.<br>\n<a href=\"//bulletin.eatcs.org/index.php/beatcs/article/view/322\"><i>Bull. EATCS</i> 115, 2015</a>.\n<p>\nA brief survey of algorithms for finding the <i>k</i> shortest paths and\nrelated <i>k</i>-best enumeration problems. The arXiv/EATCS version is\nsignificantly longer and with more references than the Springer version.\n<p>\n<li><b><i>K</i>-best solutions of MSO problems on tree-decomposable graphs</b>.<br>\nD. Eppstein and\n<a href=\"//ls11-www.cs.uni-dortmund.de/staff/kurz\">D. Kurz</a>.<br>\n<a href=\"//arxiv.org/abs/1703.02784\">arXiv:1703.02784</a>.<br>\n<i>Proc. 12th International Symposium on Parameterized and Exact\nComputation (IPEC 2017)</i>, Vienna, Austria, 2017.<br>\n<a href=\"//doi.org/10.4230/LIPIcs.IPEC.2017.16\">Leibniz International\nProceedings in Informatics (LIPIcs) 89, pp. 16.1&ndash;16.13</a>\n<p>\nWe show that, on graphs of bounded treewidth, for any\noptimization problem definable in monadic second-order logic, we can\nfind the <i>k</i> best solutions in logarithmic time per solution.\n<p>\n</ul>\n\n<hr><p>\n<a href=\"/~eppstein/pubs/\">Publications</a> &ndash;\n<a href=\"/~eppstein/\">David Eppstein</a> &ndash;\n<a href=\"/~theory/\">Theory Group</a> &ndash;\n<a href=\"/\">Inf. &amp; Comp. Sci.</a> &ndash;\n<a href=\"//www.uci.edu/\">UC Irvine</a>\n<p>\n<small>Semi-automatically <a href=\"filter.html\">filtered</a>\nfrom a common source file.</small>\n</body></html>\n", "encoding": "ascii"}