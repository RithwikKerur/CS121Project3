{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/doc/overview/svm.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n <head>\n  <!-- IE Standards Mode -->\n  <meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"></meta>\n\n  <!-- Favicon -->\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"icon\"></link>\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"shortcut icon\"></link>\n\n  <!-- Page title -->\n  <title>VLFeat - Tutorials > Support Vector Machines (SVMs)</title>\n\n  <!-- Stylesheets -->\n  <link href=\"../vlfeat.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <link href=\"../pygmentize.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <style xml:space=\"preserve\">\n    /* fixes a conflict between Pygmentize and MathJax */\n    .MathJax .mo, .MathJax .mi {color: inherit ! important}\n  </style>\n  \n\n  <!-- Scripts-->\n  \n\n  <!-- MathJax -->\n  <script xml:space=\"preserve\" type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true,\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n        by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers: { autoNumber: 'AMS' }\n      }\n    });\n  </script>\n  <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" xml:space=\"preserve\" type=\"text/javascript\"></script>\n\n  <!-- Google Custom Search -->\n  <script xml:space=\"preserve\">\n    (function() {\n    var cx = '003215582122030917471:oq23albfeam';\n    var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n    gcse.src = (document.location.protocol == 'https' ? 'https:' : 'http:') +\n    '//www.google.com/cse/cse.js?cx=' + cx;\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n    })();\n  </script>\n\n  <!-- Google Analytics -->\n  <script xml:space=\"preserve\" type=\"text/javascript\">\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-4936091-2']);\n    _gaq.push(['_trackPageview']);\n    (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    })();\n  </script>\n </head>\n\n <!-- Body Start -->\n <body>\n  <div id=\"header-section\">\n    <div id=\"header\">\n      <!-- Google CSE Search Box -->\n      <div class=\"searchbox\">\n        <gcse:searchbox-only autoCompleteMaxCompletions=\"5\" autoCompleteMatchType=\"any\" resultsUrl=\"http://www.vlfeat.org/search.html\"></gcse:searchbox-only>\n      </div>\n      <h1 id=\"id-16\"><a shape=\"rect\" href=\"../index.html\" class=\"plain\"><span id=\"vlfeat\">VLFeat</span><span id=\"dotorg\">.org</span></a></h1>\n    </div>\n    <div id=\"sidebar\"> <!-- Navigation Start -->\n      <ul>\n<li><a href=\"../index.html\">Home</a>\n<ul>\n<li><a href=\"../about.html\">About</a>\n</li>\n<li><a href=\"../license.html\">License</a>\n</li>\n</ul></li>\n<li><a href=\"../download.html\">Download</a>\n<ul>\n<li><a href=\"../install-matlab.html\">Using from MATLAB</a>\n</li>\n<li><a href=\"../install-octave.html\">Using from Octave</a>\n</li>\n<li><a href=\"../install-shell.html\">Using from the command line</a>\n</li>\n<li><a href=\"../install-c.html\">Using from C</a>\n<ul>\n<li><a href=\"../xcode.html\">Xcode</a>\n</li>\n<li><a href=\"../vsexpress.html\">Visual C++</a>\n</li>\n<li><a href=\"../gcc.html\">g++</a>\n</li>\n</ul></li>\n<li><a href=\"../compiling.html\">Compiling</a>\n<ul>\n<li><a href=\"../compiling-unix.html\">Compiling on UNIX-like platforms</a>\n</li>\n<li><a href=\"../compiling-windows.html\">Compiling on Windows</a>\n</li>\n</ul></li>\n</ul></li>\n<li class='active'><a href=\"tut.html\">Tutorials</a>\n<ul>\n<li><a href=\"frame.html\">Local feature frames</a>\n</li>\n<li><a href=\"covdet.html\">Covariant feature detectors</a>\n</li>\n<li><a href=\"hog.html\">HOG features</a>\n</li>\n<li><a href=\"sift.html\">SIFT detector and descriptor</a>\n</li>\n<li><a href=\"dsift.html\">Dense SIFT</a>\n</li>\n<li><a href=\"liop.html\">LIOP local descriptor</a>\n</li>\n<li><a href=\"mser.html\">MSER feature detector</a>\n</li>\n<li><a href=\"imdisttf.html\">Distance transform</a>\n</li>\n<li><a href=\"encodings.html\">Fisher Vector and VLAD</a>\n</li>\n<li><a href=\"gmm.html\">Gaussian Mixture Models</a>\n</li>\n<li><a href=\"kmeans.html\">K-means clustering</a>\n</li>\n<li><a href=\"aib.html\">Agglomerative Infromation Bottleneck</a>\n</li>\n<li><a href=\"quickshift.html\">Quick shift superpixels</a>\n</li>\n<li><a href=\"slic.html\">SLIC superpixels</a>\n</li>\n<li class='active' class='activeLeaf'><a href=\"svm.html#tut.svm\">Support Vector Machines (SVMs)</a>\n</li>\n<li><a href=\"kdtree.html\">KD-trees and forests</a>\n</li>\n<li><a href=\"plots-rank.html\">Plotting AP and ROC curves</a>\n</li>\n<li><a href=\"utils.html\">Miscellaneous utilities</a>\n</li>\n<li><a href=\"ikm.html\">Integer K-means</a>\n</li>\n<li><a href=\"hikm.html\">Hierarchical integer k-means</a>\n</li>\n</ul></li>\n<li><a href=\"../applications/apps.html\">Applications</a>\n</li>\n<li><a href=\"../doc.html\">Documentation</a>\n<ul>\n<li><a href=\"../matlab/matlab.html\">MATLAB API</a>\n</li>\n<li><a href=\"../api/index.html\">C API</a>\n</li>\n<li><a href=\"../man/man.html\">Man pages</a>\n<ul>\n<li><a href=\"../man/mser.html\">mser</a>\n</li>\n<li><a href=\"../man/sift.html\">sift</a>\n</li>\n<li><a href=\"../man/vlfeat.html\">vlfeat</a>\n</li>\n</ul></li>\n</ul></li>\n</ul>\n\n    </div> <!-- sidebar -->\n  </div>\n  <div id=\"headbanner-section\">\n    <div id=\"headbanner\">\n      <span class='page'><a href=\"tut.html\">Tutorials</a></span><span class='separator'>></span><span class='page'><a href=\"svm.html#tut.svm\">Support Vector Machines (SVMs)</a></span>\n    </div>\n  </div>\n  <div id=\"content-section\">\n    <div id=\"content-wrapper\">\n      <div id=\"content\">\n        \n    \n\n<div class='toc'>\n<h3>Table of Contents</h3><ul><li class=\"level1\"><a href=\"#tut.svm\">Support vector machine</a></li>\n<li class=\"level1\"><a href=\"#tut.svm.diagn\">Diagnostics</a></li>\n<li class=\"level1\"><a href=\"#tut.svm.references\">References</a></li>\n</ul>\n</div><!-- Table of contents -->\n\n\n<p><b>VLFeat</b> includes fast SVM solvers,\nSGC <a shape=\"rect\" href=\"#ref1\">[1]</a> and (S)DCA <a shape=\"rect\" href=\"#ref2\">[2]</a>, both\nimplemented in <code/><a href=../matlab/vl_svmtrain.html>vl_svmtrain</a></code>.  The function also implements\nfeatures, like Homogeneous kernel map expansion and SVM online\nstatistics. (S)DCA can also be used with different loss functions.</p>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.svm\">Support vector machine</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>A simple example on how to use <code/><a href=../matlab/vl_svmtrain.html>vl_svmtrain</a></code> is\npresented below. Let's first load and plot the training data:</p>\n\n<div class=\"highlight\"><pre><span class=\"c\">% Load training data X and their labels y</span>\n<span class=\"n\">vl_setup</span> <span class=\"n\">demo</span> <span class=\"c\">% to load the demo data</span>\n<span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s\">&#39;vl_demo_svm_data.mat&#39;</span><span class=\"p\">);</span>\n\n<span class=\"n\">Xp</span> <span class=\"p\">=</span> <span class=\"n\">X</span><span class=\"p\">(:,</span><span class=\"n\">y</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"n\">Xn</span> <span class=\"p\">=</span> <span class=\"n\">X</span><span class=\"p\">(:,</span><span class=\"n\">y</span><span class=\"o\">==-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"n\">figure</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">Xn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,:),</span><span class=\"n\">Xn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,:),</span><span class=\"s\">&#39;*r&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">hold</span> <span class=\"n\">on</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">Xp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,:),</span><span class=\"n\">Xp</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,:),</span><span class=\"s\">&#39;*b&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">axis</span> <span class=\"n\">equal</span> <span class=\"p\">;</span>\n</pre></div>\n\n<p>Now we have a plot of the tutorial training data:</p>\n<div class=\"figure\">\n <img src=\"../demo/svm_training.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n   Training Data.\n  </span>\n </div>\n</div>\n\n<p>Now we will set the learning parameters:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">lambda</span> <span class=\"p\">=</span> <span class=\"mf\">0.01</span> <span class=\"p\">;</span> <span class=\"c\">% Regularization parameter</span>\n<span class=\"n\">maxIter</span> <span class=\"p\">=</span> <span class=\"mi\">1000</span> <span class=\"p\">;</span> <span class=\"c\">% Maximum number of iterations</span>\n</pre></div>\n\n\n\n\n<p>Learning a linear classifier can be easily done with the following 1\nline of code:</p>\n\n<div class=\"highlight\"><pre><span class=\"p\">[</span><span class=\"n\">w</span> <span class=\"n\">b</span> <span class=\"n\">info</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_svmtrain</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">lambda</span><span class=\"p\">,</span> <span class=\"s\">&#39;MaxNumIterations&#39;</span><span class=\"p\">,</span> <span class=\"n\">maxIter</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Now we can plot the output model over the training\ndata.</p>\n\n<div class=\"highlight\"><pre><span class=\"c\">% Visualisation</span>\n<span class=\"n\">eq</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">num2str</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"s\">&#39;*x+&#39;</span> <span class=\"n\">num2str</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"s\">&#39;*y+&#39;</span> <span class=\"n\">num2str</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)];</span>\n<span class=\"n\">line</span> <span class=\"p\">=</span> <span class=\"n\">ezplot</span><span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"o\">-</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]);</span>\n<span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"s\">&#39;Color&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mf\">0.8</span> <span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"s\">&#39;linewidth&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>The result is plotted in the following figure. </p>\n\n<div class=\"figure\">\n <img src=\"../demo/svm_training_result.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n   Learned model.\n  </span>\n </div>\n</div>\n\n<p> The output <code/>info</code> is a struct containing some\n  statistic on the learned SVM: </p>\n\n<div class=\"highlight\"><pre><span class=\"n\">info</span> <span class=\"p\">=</span>\n\n            <span class=\"n\">solver</span><span class=\"p\">:</span> <span class=\"s\">&#39;sdca&#39;</span>\n            <span class=\"n\">lambda</span><span class=\"p\">:</span> <span class=\"mf\">0.0100</span>\n    <span class=\"n\">biasMultiplier</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n              <span class=\"n\">bias</span><span class=\"p\">:</span> <span class=\"mf\">0.0657</span>\n         <span class=\"n\">objective</span><span class=\"p\">:</span> <span class=\"mf\">0.2105</span>\n       <span class=\"n\">regularizer</span><span class=\"p\">:</span> <span class=\"mf\">0.0726</span>\n              <span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"mf\">0.1379</span>\n     <span class=\"n\">dualObjective</span><span class=\"p\">:</span> <span class=\"mf\">0.2016</span>\n          <span class=\"n\">dualLoss</span><span class=\"p\">:</span> <span class=\"mf\">0.2742</span>\n        <span class=\"n\">dualityGap</span><span class=\"p\">:</span> <span class=\"mf\">0.0088</span>\n         <span class=\"n\">iteration</span><span class=\"p\">:</span> <span class=\"mi\">525</span>\n             <span class=\"n\">epoch</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n       <span class=\"n\">elapsedTime</span><span class=\"p\">:</span> <span class=\"mf\">0.0300</span>\n</pre></div>\n\n\n<p>It is also possible to use under some\n  assumptions <a shape=\"rect\" href=\"#ref3\">[3]</a> a homogeneous kernel map expanded online inside the\n  solver. This can be done with the following commands:  </p>\n\n<div class=\"highlight\"><pre><span class=\"c\">% create a structure with kernel map parameters</span>\n<span class=\"n\">hom</span><span class=\"p\">.</span><span class=\"n\">kernel</span> <span class=\"p\">=</span> <span class=\"s\">&#39;KChi2&#39;</span><span class=\"p\">;</span>\n<span class=\"n\">hom</span><span class=\"p\">.</span><span class=\"n\">order</span> <span class=\"p\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"c\">% create the dataset structure</span>\n<span class=\"n\">dataset</span> <span class=\"p\">=</span> <span class=\"n\">vl_svmdataset</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"s\">&#39;homkermap&#39;</span><span class=\"p\">,</span> <span class=\"n\">hom</span><span class=\"p\">);</span>\n<span class=\"c\">% learn the SVM with online kernel map expansion using the dataset structure</span>\n<span class=\"p\">[</span><span class=\"n\">w</span> <span class=\"n\">b</span> <span class=\"n\">info</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_svmtrain</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">lambda</span><span class=\"p\">,</span> <span class=\"s\">&#39;MaxNumIterations&#39;</span><span class=\"p\">,</span> <span class=\"n\">maxIter</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>The above code creates a training set without applying any\n  homogeneous kernel map to the data. When the solver is called it will expand each data point with a Chi Squared kernel\n  of period 2.</p>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.svm.diagn\">Diagnostics</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>VLFeat allows to get statistics during the training process. It is\n  sufficient to pass a function handle to the solver. The function\n  will be then called every <code/>DiagnosticFrequency</code> time.</p>\n\n<p>(S)DCA diagnostics also provides the duality gap value (the difference between primal and dual energy),\n  which is the upper bound of the primal task sub-optimality.</p>\n\n<div class=\"highlight\"><pre><span class=\"c\">% Diagnostic function</span>\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"nf\">diagnostics</span><span class=\"p\">(</span>svm<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">energy</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">energy</span> <span class=\"p\">[</span><span class=\"n\">svm</span><span class=\"p\">.</span><span class=\"n\">objective</span> <span class=\"p\">;</span> <span class=\"n\">svm</span><span class=\"p\">.</span><span class=\"n\">dualObjective</span> <span class=\"p\">;</span> <span class=\"n\">svm</span><span class=\"p\">.</span><span class=\"n\">dualityGap</span> <span class=\"p\">]</span> <span class=\"p\">]</span> <span class=\"p\">;</span>\n<span class=\"k\">end</span>\n\n<span class=\"c\">% Training the SVM</span>\n<span class=\"n\">energy</span> <span class=\"p\">=</span> <span class=\"p\">[]</span> <span class=\"p\">;</span>\n<span class=\"p\">[</span><span class=\"n\">w</span> <span class=\"n\">b</span> <span class=\"n\">info</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_svmtrain</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">lambda</span><span class=\"p\">,</span><span class=\"c\">...</span>\n                           <span class=\"s\">&#39;MaxNumIterations&#39;</span><span class=\"p\">,</span><span class=\"n\">maxIter</span><span class=\"p\">,</span><span class=\"c\">...</span>\n                           <span class=\"s\">&#39;DiagnosticFunction&#39;</span><span class=\"p\">,@</span><span class=\"n\">diagnostics</span><span class=\"p\">,</span><span class=\"c\">...</span>\n                           <span class=\"s\">&#39;DiagnosticFrequency&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>The objective values for the past iterations are kept in the\n  matrix <code/>energy</code>. Now we can plot the objective values from the learning process. </p>\n\n<div class=\"highlight\"><pre><span class=\"n\">figure</span>\n<span class=\"n\">hold</span> <span class=\"n\">on</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">energy</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,:),</span><span class=\"s\">&#39;--b&#39;</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">energy</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,:),</span><span class=\"s\">&#39;-.g&#39;</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">energy</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,:),</span><span class=\"s\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"s\">&#39;Primal objective&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;Dual objective&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;Duality gap&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s\">&#39;Diagnostics iteration&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s\">&#39;Energy&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<div class=\"figure\">\n <img src=\"../demo/svm_energy.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n   SVM objective values plot.\n  </span>\n </div>\n</div>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.svm.references\">References</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<ul>\n\n<li id=\"ref1\">[1] Y. Singer and N. Srebro. <em>Pegasos: Primal\n  estimated sub-gradient solver for SVM</em>. In Proc. ICML,\n  2007.\n</li>\n\n<li id=\"ref2\">[2] S. Shalev-Schwartz and T. Zhang. <em>Stochastic Dual Coordinate Ascent Methods for Regularized Loss Minimization</em>. 2013.\n</li>\n\n<li id=\"ref3\">[3] A. Vedaldi and A. Zisserman. <em>Efficient additive\n    kernels via explicit feature maps</em>. In PAMI, 2011.\n</li>\n\n</ul>\n\n\n  \n      </div>\n      <div class=\"clear\">&nbsp;</div>\n    </div>\n  </div> <!-- content-section -->\n  <div id=\"footer-section\">\n    <div id=\"footer\">\n      &copy; 2007-13 The authors of VLFeat\n    </div> <!-- footer -->\n  </div> <!-- footer section -->\n </body>\n <!-- Body ends -->\n</html>\n ", "encoding": "ascii"}