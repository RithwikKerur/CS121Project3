{"url": "https://www.ics.uci.edu/~theory/269/960216.html", "content": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>Theory Seminar, 16 Feb 1996</title>\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"/~theory/logo/shortTheory.gif\" align= \n\"bottom\" alt=\"ICS Theory Group\"></a> \n\n<h1>ICS 269, Winter 1996: Theory Seminar</h1>\n\n<hr>\n<h2>16 February 1996:<br>\nRandomized Paging Algorithms<br>\n<a href=\"http://cs.ucr.edu/~marek/\">Marek Chrobak</a>, Dept. of\nComputer Science, UC Riverside</h2>\n\n<p>The paging problem is defined as follows: We are given a\ntwo-level memory system, in which one level is a fast memory,\ncalled <i>cache</i>, capable of holding <i>k</i> items, and the\nsecond level is an unbounded but slow memory. At each given time\nstep, a request to an item is issued. Given a request to an item\n<i>p</i>, a <i>miss</i> occurs if <i>p</i> is not present in the\nfast memory. In response to a miss, we need to choose an item <i>\nq</i> in the cache and replace it by <i>p</i>. The choice of <i>\nq</i> needs to be made <i>on-line</i>, without the knowledge of\nfuture requests. Our goal is to design a replacement strategy with\na small number of misses.</p>\n\n<p>We use the competitive analysis to study online randomized\nalgorithms for paging. Our goal is to show how the concept of work\nfunctions, used previously mostly for the analysis of deterministic\nalgorithms, can also be applied, in a systematic fashion, to the\nrandomized case. We present two results: We first show that the\ncompetitiveness of the marking algorithm is exactly 2H(<i>k</i>)-1.\nPreviously, it was known to be between H(<i>k</i>) and\n2H(<i>k</i>). Our second result is a new, H(<i>k</i>)-competitive\nalgorithm for paging. Our algorithm, as well as its analysis, is\nsimpler than the known algorithm by McGeoch and Sleator. Another\nadvantage of our method is that it can be implemented with\ncomplexity bounds independent of the number of past requests:\nO(<i>k</i>^2 log <i>k</i>) memory and time O(<i>k</i>^2) per\nrequest.</p>\n</body>\n</html>\n\n", "encoding": "ascii"}