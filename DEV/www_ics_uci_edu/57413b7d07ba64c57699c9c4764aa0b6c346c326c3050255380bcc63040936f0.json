{"url": "https://www.ics.uci.edu/~kay/courses/i41/hw/hw4.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, October 13, 2005 12:04 PM\" />\n<TITLE>Fourth Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2C1C67F\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT size=\"2\" FACE=\"Goudy Old Style\">INFORMATICS 41 &bull; DAVID G. KAY&bull; UC IRVINE &bull; FALL 2011</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\" SIZE=6><B>Fourth Homework </B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">This assignment is due at the start of lab on\nMonday, October 17. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><strong>(1)</strong>  In Chapter 22, do exercises 22.5.11, 22.5.12, and 22.6.3, most of which are similar to problems we did in class.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(2)</B> In Chapter 23, do exercise 23.1.3. What kind of operation is this: mapping, filtering, or reducing/folding?</FONT></P>\n<FONT FACE=\"Goudy Old Style\"><B></B></FONT>\n<P><FONT FACE=\"Goudy Old Style\"><B>(3)</B> Chapter 24 uses the tools we already have to build something else. As it happens, the &quot;something else&quot; in this case is numbers, which of course are already predefined in the language. That might lead you to ask what the point is of building it ourselves &quot;from scratch.&quot; But showing this building process helps you understand how it works and how to build other, more complicated things later. Skim through Chapter 24, but at this point we're not assigning any exercises from that chapter.</FONT></P>\n<FONT FACE=\"Goudy Old Style\"><B></B></FONT>\n<P><FONT FACE=\"Goudy Old Style\"><B>(4)</B>  The code for the restaurants program\n  we did in class is available at </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants1.scm\">http://www.ics.uci.edu/~kay/scheme/restaurants1.scm</A></FONT><FONT FACE=\"Goudy Old Style\">.  The teachpack for text input and output is at </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/scheme/simple-text-io.ss\">http://www.ics.uci.edu/~kay/scheme/simple-text-io.ss</A></FONT><FONT FACE=\"Goudy Old Style\">.   If you're using your own machine, download and install these files so you can run the restaurants program. (Download the teachpack rather than just copying and pasting its text; to do this, right-click or control-click on the link and then choose to download or save the linked file into the folder where you'll be storing your own code. Then you can add the teachpack via the Language menu in DrScheme: Use &quot;Add Teachpack to the List&quot; to locate the teachpack file; then select it and click OK. Be sure to change the language level to Intermediate Student.)  [Technical problems are always possible when installing new software; as always, let us know if things don't work as you think they should.</FONT><FONT FACE=\"Garamond\" SIZE=4>]</FONT>\n</P>\n<P><FONT FACE=\"Goudy Old Style\">Look over the\n  restaurants code to become familiar with how it&#39;s organized. The first time you see a few pages of code, it can be daunting, but learning to find your way through a whole program is an important skill and now's the time to start developing it. (Real programs, of course, are hundreds of pages long.) So don't just glance at it and say, &quot;Yeah, whatever.&quot; Spend some time studying it. Reading code is an excellent (and under-appreciated) way to build your own programming skills.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Recognize that this code is divided into parts: One part describes individual restaurants and the operations on them; another part describes the <em>collection</em> of restaurants and operations on the collection; that's the most imporant part for our purposes, and the part you should understand thoroughly. Another part (that starts on the first page) controls the whole program, presenting the menu to the user and accepting the commands. In model-view-controller terms, the restaurant and collection parts make up the model, and the first page (plus the <font face=\"Courier New, Courier, monospace\">get-it</font> function at the end) make up the view and controller.  The view/controller parts are less important; you should be able to follow how they work, but we won't be asking you to reproduce code like that without having a reference copy to work from.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Now, try these\n  two tasks. When you modify large, unfamiliar programs, you want to be especially careful (a) to make and test only small changes at one time, (b) to make your changes deliberately, with high confidence that they will work as intended, rather than just changing things haphazardly and hoping they'll work, and (c) make each small set of changes on a new copy of the code, so if you have to &quot;roll back&quot; those changes you won't have far back to go because you'll have a copy of your most recent, stable version. It's easy to lose your way when navigating around a large program; these steps will help keep you on track.</FONT></P>\n\n<UL>\n  <LI><font face=\"Goudy Old Style\">Change the command for adding a new restaurant to <CODE><font face=\"Courier New, Courier, monospace\">'n'</font></CODE> instead of\n      <CODE><font face=\"Courier New, Courier, monospace\">'a'</font></CODE>.</font></LI>\n  <LI><font face=\"Goudy Old Style\">Try</font><font face=\"Goudy Old Style\"> to add an additional menu choice: <CODE><font face=\"Courier New, Courier, monospace\">e: Remove (erase) all the\n      restaurants from the collection</font></CODE>.\n      If the user types <CODE><font face=\"Courier New, Courier, monospace\">'e'</font></CODE> and then <CODE><font face=\"Courier New, Courier, monospace\">'p'</font></CODE>, for example, nothing would\n      be printed.  [This will require modifications or additions in a few places. You can do the\n      main part of the work very easily indeed, with a single procedure call. The key is to think\n      functionally, not of changing values but of describing or creating the new value.] Test out your modified program interactively to satisfy yourself that it works as intended.</font></LI>\n</UL>\n<P>\n  <FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21 assignments by David\nG. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2009. Modified by David G. Kay to reflect the <em>Picturing Programs</em> text, Fall 2010. Modified by David G. Kay, Fall 2011.</FONT></P>\n<HR />\n<FONT FACE=\"Goudy Old Style\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Goudy Old Style\">\n<!-- #BeginDate format:fcAm1a -->Friday, October 14, 2011 7:40 AM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "ascii"}