{"url": "https://www.ics.uci.edu/~eppstein/261/f03-outline/09.augbst", "content": "Augmenting Binary Search Trees\n\n\nDynamic statistical aggregation of data:\n  - mean: easy\n  - variance: easy\n  - median: ?\n  - median queries: ?\n\nAugment binary search tree with subtree size\n(maybe known already e.g. for BB[alpha] tree)\n\ninsert, delete -> update sizes along path to root\nrotate -> recompute sizes at rotated nodes\n\nBinary search for median -> compare sizes not keys\nO(log n) time\n\n\nRange searching problems:\n - find out about all items within a given range of values\n - listing, counting, average, max-priority\n\nListing: binary search for range boundaries,\n   traverse all subtrees within range\n\n\"Decomposable\": associative aggregation operation\nMaintain aggregate value at each tree node\nUpdate on insert/delete/rotate as before\n => any can maintain any decomposable quantity in O(log n) ags/op\n\n\nMultidimensional range queries\n - e.g. all points in rectangle\n\n\nWarm-up: three-sided queries\nPriority search tree:\n    each item has two numbers associated with it:\n\tx, y or value, priority\n    store two items at each node:\n\tmax priority item in that subtree\n\tmedian value item (or near middle in case of dynamic trees)\n    left subtree has all remaining items earlier than median\n    right subtree has all remaining items later than median\n\nThree-sided query:\n    if max prio too small: stop\n    else if root not in range:\n        recurse on only one side\n    else: recurse on both sides\n\n    shape of search frontier...O(log n + k)\n\nMaintaining balance in priority search tree?\nRotations don't work -- how to rotate max priority items?\nBB[alpha] trees do work\n\n\nFour-sided queries\nRecursive queries: apply range query y to all points in range query x\n\nIdea: go back to augmenting usual binary search tree for x values\n    so items in range search for x => O(log n) subtrees\n    augment each bst node with range search data struc for y\n\tso rectangle query => O(log n) y-structure queries\n\nQuery time: O(log^2 n)\nSpace (for balanced outer tree): O(n log n) [each item in O(log n) inner]\nMaintain dynamically:\n    again rotations no good\n    BB[alpha] trees:\n        when rebuilding subtree of outer tree, also rebuild inner structures\n\tinner structures can all be rebuilt in O(n) time\n\t\t[recover sorted order from previous version of structures]\n\tso amortized time per update O(log n)\n", "encoding": "ascii"}