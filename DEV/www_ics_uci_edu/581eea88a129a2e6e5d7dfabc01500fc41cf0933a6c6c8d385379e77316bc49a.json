{"url": "https://www.ics.uci.edu/~ejw/authoring/collection/dt/CollReqts031.txt", "content": "     WEBDAV Working Group                       J. Slein, Xerox Corporation\n     INTERNET DRAFT                             J. Davis, Xerox Corporation\n     <draft-ietf-webdav-collection-reqts-03.1>             January 18, 1999\n     Expires July 18, 1999\n\n          Requirements for Advanced Collection Functionality in WebDAV\n\n     Status of this Memo\n\n        This document is an Internet-Draft. Internet-Drafts are working\n        documents of the Internet Engineering Task Force (IETF), its\n        areas, and its working groups. Note that other groups may also\n        distribute working documents as Internet-Drafts.\n\n        Internet-Drafts are draft documents valid for a maximum of six\n        months and may be updated, replaced, or made obsolete by other\n        documents at any time. It is inappropriate to use Internet-Drafts\n        as reference material or to cite them other than as \"work in\n        progress\".\n\n        To view the entire list of current Internet-Drafts, please check\n        the \"1id-abstracts.txt\" listing contained in the Internet-Drafts\n        Shadow Directories on ftp.is.co.za (Africa), ftp.nordu.net\n        (Northern Europe), ftp.nis.garr.it (Southern Europe),munnari.oz.au \n        (Pacific Rim), ftp.ietf.org (US EastCoast), or ftp.isi.edu (US West\n        Coast).\n\n        Distribution of this document is unlimited. Please send comments\n        to the Distributed Authoring and Versioning (WebDAV) working group\n        at <w3c-dist-auth@w3.org>, which may be joined by sending a\n        message with subject \"subscribe\" to <w3c-dist-auth-\n        request@w3.org>.\n\n        Discussions of the WEBDAV working group are archived at URL:\n        <http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth>.\n\n     Abstract\n\n        The base WebDAV protocol [WebDAV] provides basic support for\n        collections.  It defines a MKCOL method for creating collections\n        and specifies how other HTTP and WebDAV methods interact with\n        collections.  It supports internal members of collections, which it\n        defines as members whose URIs are immediately relative to the URI\n        of the collection.\n\n        This draft sets out requirements for more advanced, optional\n        collection functionality. It extends the base functionality in two\n        general directions: support for referential resources, and support\n        for ordered collections.  A separate WebDAV specification is\n        expected to define protocol elements providing the functionality\n        described here.\n\n     1  Terminology\n\n        The terminology used here follows and extends that in the base \n        WebDAV protocol specification [WebDAV].\n\n\nSlein & Davis                                                    Page 1\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n       Collection\n          A resource that contains a set of URIs, termed member URIs, which\n          identify member resources\n\n       Member URI\n          A URI which is a member of the set of URIs contained by a\n          collection\n\n       Referential Resource (or Reference)\n          A resource that has no body of its own (though it does have\n          properties), but rather is a reference to another resource\n\n       Ordinary Resource\n          A resource that is not a reference to another resource\n\n       Target Resource\n          The resource referenced by a referential resource\n\n       Direct Reference\n          A reference that is resolved by the server without any client\n          action, giving the client the illusion that it is operating\n          directly on the target resource\n\n       Redirect Reference\n          A reference that requires client action before it can be\n          resolved, so that the client is aware that a reference is\n          mediating between it and the target resource\n\n       Strong Reference\n          A reference whose referential integrity is enforced by the\n          server\n\n       Weak Reference\n          A reference whose referential integrity is not enforced by the\n          server\n\n       Referential Integrity\n          The integrity of a reference is preserved as long as it points\n          to the same resource it pointed to when it was created.  Its\n          integrity may be destroyed if the target resource is moved\n          without updating the reference to reflect its new location, or\n          if the target resource is deleted.\n\n     2  Introduction and Rationale\n\n        The simple collections that the base WebDAV specification supports\n        are powerful enough to be widely useful.  They provide for the\n        hierarchical organization of resources, with mechanisms for\n        creating and deleting collections, copying and moving them,\n        locking them, adding resources to them and deleting resources from\n        them, and getting listings of their members.  Delete, copy, move,\n        list, and lock operations can be applied recursively, so that a\n        client can operate on whole hierarchies with a single request.\n\n        Many applications, however, need more powerful collections.  There\n\nSlein & Davis                                                    Page 2\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n        are two areas in particular where more powerful functionality is\n        often needed: referential resources and ordering.  This draft\n        details the additional functionality that is needed in these two\n        areas.\n\n     2.1  Referential Resources\n\n        Referential resources make it possible for many collections, on the\n        same or different servers, to share the same resource.  Because\n        the collections share the resource by referencing it, only one\n        physical copy of the resource need exist, and any changes made in\n        the resource are visible from all the collections that reference\n        it.\n\n        So, for example, the mathematics department at one university can\n        create a collection of information on fractals that contains the\n        URIs of some local resources, but also references resources at\n        several other universities.\n\n        In another scenario, a manufacturing company develops and maintains\n        its product maintenance manuals on the Web. There is a separate\n        collection for each product manual.  Each manual is divided into\n        sections, one section for every product component.  Since many of\n        the company\u2019s products contain some of the same components, many of\n        the product maintenance manuals have sections in common.  Each\n        manual may have some unique sections, whose URIs are internal\n        members of its collection.  But for product components that are\n        common to multiple products, the manual's collection references a\n        resource in a shared library.\n\n        Strong references and weak references are both useful in different\n        contexts.  Some applications cannot tolerate broken links.\n        A software development application, for example, must be able to\n        rely on the integrity of references to component modules.  Such\n        applications must be able to request strong references.  Other\n        applications may want to reference target resources on multiple\n        servers, where referential integrity cannot be enforced, and may\n        be less concerned about possible broken references.  Both strong\n        references and weak references should eventually be supported by\n        WebDAV.\n\n        Similarly, both redirect and direct references may be useful.\n        Redirect references are simple for servers to implement, but\n        require client action before they can be resolved.  Direct\n        references are more difficult for servers to implement,\n        particularly if target resources may be on a different server, but\n        are simpler for clients to use.  A client need not be aware that a\n        direct reference is mediating between it and the resource it is\n        accessing.\n\n     2.2  Ordered Collections\n\n        For many applications, it is useful to be able to impose an\n        ordering on a collection.  In the product manual application\n        above, the sections of each manual may be ordered so that they can\n\nSlein & Davis                                                    Page 3\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n        be printed together as a book.  A configuration management\n        application might use a collection to represent a version series,\n        in which case the \"derives from\" relationship might be represented\n        as an ordering on the collection.\n\n        A collection ordering may sometimes be based on property values.\n        An example of such an ordering is one that is alphabetical by\n        author\u2019s last name, or one from most recent to oldest last-\n        modified-date.  An ordering need not be based on property values,\n        however.  A professor may order a collection of course readings in\n        the sequence that makes sense to coordinate them with her lectures,\n        where there is no property on the member resources that could be\n        used to create this ordering.  This set of requirements is\n        primarily concerned with orderings that are not based on property\n        values.\n\n        Another useful distinction is between server-maintained and\n        client-maintained orderings.  In server-maintained orderings, the\n        server enforces the semantics of the ordering by placing each\n        collection member at the appropriate position in the ordering;\n        clients cannot alter the ordering.  In client-maintained orderings,\n        the client places each collection member in the ordering based on\n        its understanding of the semantics of the ordering; the server\n        does nothing to validate the client's positioning of the member\n        in the ordering.  This set of requirements is concerned only with\n        client-maintained orderings.\n\n        WebDAV already provides tools that could be used for creating and\n        maintaining ordered collections.  For example, using only the base\n        WebDAV specification, an application could create a WebDAV property\n        called \"Order\" on a collection resource.  The value of this\n        property might be a list of the collection's member URIs.\n\n        What the base WebDAV specification does not do is standardize a\n        single way to represent orderings for collections.\n\n        Different applications and services should be able to operate on\n        the same collection without private agreements about how to manage\n        and examine its order.  To make this possible, there needs to be a\n        standard way to manipulate and retrieve the order of a collection,\n        and a standard representation of the ordering.\n\n        In any situation where collaborative management of a collection\n        takes place, and different authoring tools or WebDAV servers might\n        be used by the collaborators, standardization is important.  It is\n        also important where a different tool may be used to view the\n        collection from the one that was used to create it.\n\n        So for example, two users from different organizations, using\n        different authoring tools, are working together to create a\n        collection.  One of the tools uses a property on the collection\n        called \"Order\" to store an ordering of the collection.  The other\n        tool uses a property called \"SequenceNumber\" on the resources\n        identified by the collection's member URIs.  If each user adds some\n        members to the collection, there will be no reliable ordering.\n\nSlein & Davis                                                    Page 4\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n\n     3  Requirements\n\n     3.1  Referential Resources\n\n        Requirements 3.1.1 - 3.1.9 apply to referential resources in\n        general.  Requirements 3.1.10 - 3.1.13 apply to referential \n        resources only in the context of collections.  Requirements\n        3.1.14 - 3.1.15 apply only to redirect references.  Requirements\n        3.1.16 - 3.1.17 apply only to direct references.  Requirements\n        3.1.18 - 3.1.22 relate to strong references and enforcement of\n        referential integrity.\n\n     3.1.1  A single target resource may be referenced by multiple\n            referential resources.\n\n        This is the primary benefit that referential resources bring.\n        They allow resources to be shared by multiple collections, which\n        may reside on the same server as the shared resource or on other\n        servers.\n\n     3.1.2  It is possible to create a referential resource.\n\n     3.1.3  It is possible to delete a referential resource.\n\n        It is important to note that this is a different operation from\n        deleting the reference\u2019s target resource.  It must be possible to\n        delete a reference without deleting its target.\n\n     3.1.4  It is possible to set and retrieve the properties of a\n            reference, distinct from those of its target.\n\n        There are properties like \"who created this reference\" and \"when \n        was this reference created\", \"what type of reference is this\", and\n        \"is referential integrity maintained for this reference\" that\n        clearly belong to the reference, and not to its target resource,\n        which may be referenced by many different referential resources.\n        Clients must be able to set properties on a reference, and retrieve\n        the properties of a reference.\n\n     3.1.5  More generally, there is a way to cause any operation to be\n            applied to the reference itself, rather than to its target.\n\n        Although the more common case is for the client to use a reference\n        to operate on its target resource, there will be cases where\n        clients need to operate on the reference itself.  They may need\n        to view the HTTP headers of the referential resource, retrieve its\n        capabilities, lock it, etc.\n\n     3.1.6  Operations on a target resource do not affect references to it\n            except as needed to enforce referential integrity.\n\n        We do not expect operations on a target to affect references to\n        it.  Locking a target does not cause the references to it to be\n        locked.  Modifying the properties of a target does not cause\n\nSlein & Davis                                                    Page 5\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n        changes in the properties of references to it.  Etc.  \n\n        This requirement is qualified to allow for strong references.  For\n        strong references, some operations on targets must cause changes in\n        the references to them.  For example, if the target of a strong \n        reference is moved, the reference must change to reflect the new\n        location of the target.\n\n     3.1.7  For any target resource, it is possible to request a list of\n            the references to it.\n\n        There are many scenarios that use this capability.  On a server\n        that does not provide strong references, a client may, as a good\n        citizen, want to check for references before deleting a resource.\n        Some servers enforce referential integrity by blocking deletes\n        for resources that have references to them.  In this case, a client\n        may need to discover the references in order to delete them before\n        deleting their target.\n\n     3.1.8  A plain HTTP 1.1 browser or a non-referencing WebDAV client is\n            able to use a referential resource to access its target.\n\n        This minimal level of compatibility with older clients is needed\n        to make deployment of WebDAV collection functionality feasible.\n        References are a new type of resource whose main purpose is to\n        allow ordinary resources to be shared by multiple collections.\n        Although referencing clients may be needed to create and manipulate\n        these new resources, older clients should be able to read and\n        make use of the collections built using references.\n\n     3.1.9  There is no requirement that references be acyclic.\n\n        From a practical standpoint, servers generally cannot control what\n        happens on other servers.  If a reference R on one server points to\n        a target T on another server, R's server cannot prevent T from\n        being changed to point back to R.  In addition, there may be\n        applications where cyclic references are desirable.\n\n     3.1.10 A listing of the members of a collection shows both its\n            ordinary members and its referential members.\n\n        A listing of collection members with Depth = 1 or Depth = infinity\n        shows all URIs in the collection, whether they identify ordinary\n        resources or referential resources.\n\n     3.1.11 Multiple referential resources with the same target may have\n            URIs in the same collection.\n\n        It is often useful to allow the same resource to be referenced in\n        a collection multiple times.  Typically, these are cases where the\n        collection is ordered.  Consider a case where a collection\n        represents a book, with one member URI for each page in the\n        book.  A particular graphic needs to appear in several places in\n        the book, and so its URI needs to appear in the collection several\n        times.\n\nSlein & Davis                                                    Page 6\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n\n     3.1.12 A single collection may contain both the URI of a reference and\n            the URI of its target resource.\n\n        In the example just described, the collection might contain the URI\n        of the graphic, and also the URIs of several references to the\n        graphic, so that the graphic can appear multiple times in the book.\n\n     3.1.13 For any target resource, it is possible to discover what\n            collections reference it.\n\n        Though generally useful, this capability is especially critical\n        for Document Management Systems that populate collections entirely\n        via references.  Users of these systems may wish to see what\n        collections a particular resource belongs to, and to be able to\n        navigate to any of those collections.\n\n     3.1.14 For any redirect reference, it is possible to obtain\n            the URI of its target resource.\n\n        This follows from the definition of a redirect reference, which is\n        not resolved automatically.  The reference must give the client\n        access to the URI of the target resource in order for the client to\n        redirect its request to the target resource.\n\n     3.1.15 For any resource, it is possible to discover whether it is a\n            redirect reference.\n\n        Since operations on redirect references are not passed through to\n        their targets automatically, it is important for clients to be able\n        to discover which resources are redirect references.  Then the\n        client can resolve the references in order to perform operations on\n        their targets.\n\n     3.1.16 Operations on a direct reference, except for those that alter\n            the membership of the collection that contains it, are\n            automatically applied to its target resource.\n\n        The purpose of direct references is to simplify operations for\n        clients by hiding from them the fact that a reference is mediating\n        between their requests and the target resource.  To achieve this\n        purpose, most operations must be passed through to the target\n        resource automatically.\n\n        However, operations that alter collection membership should not be\n        passed through to the target.  Examples of these operations are\n        delete and move operations.  The purpose of references is to allow\n        collections to include resources that exist elsewhere.  Deleting or\n        moving a reference's URI from a collection should affect only\n        that collection, not any other collection of which the target\n        resource is a member, either internally or by reference.\n\n     3.1.17 For any resource, it is possible to discover whether it is a\n            direct reference.\n\n\nSlein & Davis                                                    Page 7\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n        Since the behavior of direct references is different from\n        the behavior of redirect references, it is important for clients\n        to be able to discover whether they are operating on a direct\n        reference. \n\n     3.1.18 It is possible to request creation of a referential resource\n            for which the server will enforce referential integrity.\n\n        For some applications, broken references are unacceptable.  \n        Breakage may be unavoidable when a target resource resides on a \n        different server from the referential resource that references it.\n        Servers can, however, maintain the integrity of referential \n        resources when they receive MOVE or DELETE requests for target \n        resources under their own control.  For applications that require\n        referential integrity, it must be possible to specify in a\n        request for creation of a referential resource that its integrity\n        be enforced.  A referential resource whose integrity is\n        enforced by the server is called a strong reference.\n\n     3.1.19 It is possible when creating a reference to request that the\n            server not enforce referential integrity for that reference.\n\n        In some circumstances users may want to be able to create\n        dangling references.  For example, an administrator may want to\n        populate a directory with references before their target resources\n        have been created.  When updating a site, he may want to remove\n        target resources for a short period without having to destroy and\n        recreate all the references to them.\n\n     3.1.20 These requirements are silent as to what policy should be used\n            to enforce referential integrity.\n\n        A server enforces the integrity of a reference if it ensures that\n        the reference will not be broken, or enables the reference's owner\n        to ensure that the reference will not be broken.\n\n        There are many policies that could be adopted to fulfill this\n        commitment.  For example, a server could refuse to allow a target\n        to be deleted while there are strong references to the target.\n        Alternatively, the server could delete the strong references along\n        with the target.  Alternatively, the server could flag the strong\n        references \"Target Deleted\" when it deletes the target.  Or the\n        server could notify the owners of all strong references when it\n        deletes a target, allowing the owners to take whatever action they\n        wish.  These requirements say nothing about what policy should be\n        used to enforce referential integrity.\n\n     3.1.21 It is possible to discover whether a referential resource is a \n            strong reference or a weak reference.\n\n        Knowing whether a referential resource is strong or weak allows a\n        client to intelligently choose its own strategy for working with\n        referential resources.  For example, if a client does not know\n        whether a particular reference is strong or weak, it may choose to\n        recreate that referential resource to be sure of referential\n\nSlein & Davis                                                    Page 8\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n        integrity; but if it knows that the reference is strong, it will\n        not bother to do this.\n\n     3.1.22 It is possible to discover whether a resource is the target of\n            a strong reference.\n\n        This requirement insures that both ends of a referential integrity\n        relationship have the same information available.\n\n     3.2  Ordered Collections\n\n     3.2.1  Ordering is sufficiently standardized that different \n            applications and servers can operate on the same ordering \n            without private agreements.\n\n        Applications and servers can apply an ordering to a collection\u2019s \n        members or discover the ordering of a collection's members without\n        private agreements.  They can also modify an ordering, at least\n        with the help of a human user for semantics (See 3.2.3), without\n        private agreements.\n\n        This is the minimum that is needed to support collaborative\n        management of an ordered collection, where different authoring\n        tools might be used by the collaborators.  It is also what allows\n        a different tool to be used to view the collection from the one\n        that was used to create it.  Finally, it is needed in order for\n        servers to list collection members in order, as required by 3.2.6.\n\n     3.2.2  A collection is not required to be ordered.\n\n        A WebDAV server may support collections without supporting ordered\n        collections.  Even if the server supports ordered collections, \n        there is no requirement that every collection on that server be\n        ordered.  Since these requirements concern only client-maintained\n        orderings, clients will decide whether any given collection is\n        ordered.\n\n        The remaining requirements apply only to collections that are\n        ordered.\n\n     3.2.3  The semantics of an ordering are discoverable.\n\n        The semantics of an ordering is the principle or rule according to\n        which the collection members are ordered.  This principle must be\n        discoverable if someone (or some application) other than the one\n        that created a collection is to be able to add a member to it and\n        determine where it makes sense to position the new member in the\n        collection's ordering.\n\n        In some cases it may be possible for the semantics to be expressed\n        in a machine-usable way, so that an application could automatically\n        position a new member in the ordering.  In other cases the \n        semantics may require a human user to apply them.  In either case\n        they should be discoverable.\n\n\nSlein & Davis                                                    Page 9\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n     3.2.4  Each collection member appears in the ordering exactly once.\n\n        It would be possible to support orderings that contain only a\n        subset of the collection members, or orderings that can contain\n        a single collection member more than once.  It is not necessary,\n        however, since the same result can be achieved by creating a\n        new collection with exactly the desired members, and including\n        each member of the new collection in its ordering exactly once.\n\n        This requirement implies that the server will check, whenever a\n        member is added to an ordering, to make sure that it is not already\n        in the ordering.  It also implies that either the protocol itself\n        or the server will insure that whenever a new member is added to\n        a collection, it is also added to the collection ordering.\n\n     3.2.5  An ordering does not include any resources that are not members\n            of the collection.\n\n        The server must insure that when a member is removed from a \n        collection, it is also removed from the collection's ordering.\n\n     3.2.6  When a client requests a listing of the members of a\n            collection, this listing is returned in the order specified by\n            the collection.\n\n        This requirement frees clients from the burden of applying the\n        ordering to the member listing.\n\n     3.2.7  It is possible to order the members of a collection in a\n            client-specified way, not necessarily based on property values.\n\n        Orderings that are based on property values can be obtained by a\n        search protocol that supports sorted result sets.  This set of\n        requirements is not concerned with such orderings.  It is intended\n        primarily to support orderings that cannot be obtained by sorting\n        on property values.\n\n        A property is not always available that can serve as the basis for\n        a desired ordering.  For example, a professor may wish to order a \n        collection of course readings in the sequence that coordinates the\n        readings with her lectures.  But the properties of resources at the\n        Web site are standardized and do not include one that is\n        appropriate to use for this purpose.\n\n        Even if the professor in the example could create a \n        \"sequencenumber\" property to use in sorting the collection, this\n        strategy would be undesirable unless she knew she would not be\n        adding any readings or changing the order of her lectures once the\n        values of sequencenumber were set.  Inserting a new reading into\n        the sequence would require updating the sequencenumber property of\n        each reading that comes after the new one in the sequence.  Ordered\n        collections are intended to support this sort of case, where\n        sorting based on a property value is impossible or inefficient.\n\n     3.2.8  A single ordering may contain both ordinary and referential\n\nSlein & Davis                                                    Page 10\n\fINTERNET-DRAFT        WebDAV Collection Requirements        January 1999\n\n            resources. \n\n        The professor in the previous example may store some readings as\n        internal members of the collection, but reference others from\n        servers at another university.  Nevertheless, all the readings\n        need to be included in the ordering for her students\u2019 use.\n\n     4  Acknowledgements\n\n        This draft has benefited from thoughtful discussion by Jim Amsden, \n        Alan Babich, Steve Carter, Geoffrey Clemm, Ken Coar, Ellis Cohen,\n        Bruce Cragun, Spencer Dawkins, Rajiv Dulepet, David Durand,\n        Chuck Fay, Roy Fielding, Yaron Goland, Fred Hitt, Alex Hopmann,\n        Marcus Jager, Chris Kaler, Manoj Karichainula, Rohit Khare,\n        Daniel LaLiberte, Steve Martin, Surendra Koduru Reddy, Sam Ruby,\n        Nick Shelness, John Stracke, John Turner, Jim Whitehead, and\n        others. \n\n     5  References\n\n        [WebDAV] Y. Y. Goland, E. J. Whitehead, Jr., A. Faizi,\n        S. R. Carter, D. Jensen, \"HTTP Extensions for Distributed\n        Authoring - WebDAV.\" work in progress,\n        Draft-ietf-webdav-protocol-09. Microsoft, U.C. Irvine, Netscape,\n        Novell. November, 1998.\n\n     6  Authors' Addresses\n\n        J. Slein\n        Xerox Corporation\n        800 Phillips Road\n        Webster, NY 14580\n        Email: jslein@crt.xerox.com\n\n\tJ. Davis\n\tXerox Corporation\n        3333 Coyote Hill Road\n        Palo Alto, CA 94304\n\tEmail: jdavis@parc.xerox.com\n\n     Expires July 18, 1999\n\nSlein & Davis                                                    Page 11\n\f", "encoding": "Windows-1252"}