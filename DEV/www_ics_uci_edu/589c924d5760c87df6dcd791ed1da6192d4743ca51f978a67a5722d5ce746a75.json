{"url": "https://www.ics.uci.edu/~theory/269/181102.html", "content": "<!DOCTYPE html>\n<html>\n<head>\n<title>Theory Seminar, November 2, 2018</title>\n<link rel=\"stylesheet\" href=\"../stylesheet.css\" type=\"text/css\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"http://www.ics.uci.edu/~theory/logo/CATOC2.jpg\"\nalt=\"Center for Algorithms and Theory of Computation\"></a>\n<h2><a href=\"/~theory/269/\">CS 269S, Fall 2018: Theory Seminar</a><br>\nBren Hall, Room 1423, 1pm</h2>\n<hr />\n<h2>November 2, 2018:</h2>\n<h1>BIOS ORAM: Improved Privacy-Preserving Data Access for Parameterized\nOutsourced Storage</h1>\n<h2>Rob Gevorkyan</h2>\n\n<p>Algorithms for oblivious random access machine (ORAM) simulation\nallow a client, Alice, to obfuscate a pattern of data accesses with a\nserver, Bob, who is maintaining Alice's outsourced data while trying to\nlearn information about her data. We present a novel ORAM scheme that\nimproves the asymptotic I/O overhead of previous schemes for a wide\nrange of size parameters for clientside private memory and message\nblocks, from logarithmic to polynomial. Our method achieves statistical\nsecurity for hiding Alice's access pattern and, with high probability,\nachieves an I/O overhead that ranges from $O(1)$ to $O(\\log^2\nn/(\\log\\log n)^2)$, depending on these size parameters, where $n$ is the\nsize of Alice's outsourced memory. Our scheme, which we call BIOS ORAM,\ncombines multiple uses of B-trees with a reduction of ORAM simulation to\nisogrammic access sequences. </p>\n\n<p>(Based on <a href=\"https://arxiv.org/abs/1709.06534\">a paper by Mike\nGoodrich at WPES'17</a>.)</p>\n\n</body></html>\n", "encoding": "ascii"}