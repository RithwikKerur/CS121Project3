{"url": "https://www.ics.uci.edu/~ejw/authoring/collection/dt/Minutes990209.txt", "content": "WebDAV Advanced Collections Conference Call - 2/9/99\n\nAttending: Judy Slein, Jim Davis, Tyson Chihaya, Chuck Fay, Jim Whitehead, Geoff Clemm\n\nACTION ITEMS\n\nJudy: Spec changes\nJudy: Update issues list\nJudy: Write up concern about not responding with 302 to COPY for redirect references\n\nNEXT WEEK:\n\nRevisit LOCKING, anything else that arises from the versioning workshop.\n\nLOGISTICS\n\nCut-off for Internet Drafts is February 26.  Judy will aim to submit our draft February 19.\nSend out a call for volunteers to review the spec in detail when the new draft gets posted\non Internet Drafts.\n\nCOPY (ISSUE 16)\n\nOriginal proposal: COPY by default affects the target.  Because the point of doing a COPY is\nto end up with a separate resource that can be modified without affecting the original\nresource.\n\nChris Kaler thought that copying the link would be the default behavior -- think about\nWindows, where an icon indicates the type of resource you are working with.  If you copy\na shortcut, you expect to get a copy of the shortcut, not a copy of the content it points to.\nWe agree this is not a compelling argument.  Windows is a referencing-aware client.  The\ndefault behavior should be what down-level clients need.  Referencing-aware clients can\nalways use No-Passthrough.\n\nJim W: When you copy a tree, you expect the whole tree to behave as the original tree did.\nThis argues that you would copy the references, not copy their targets into the new tree.\n\nGeoff: If you are copying a tree to a tape for archive, you want to be sure that you have all\nthe content, not a bunch of broken references.\n\nAgreed: We want to be consistent between the case where we COPY an individual reference, the\ncase where we COPY a collection that contains references, and the case where we COPY a \nreference whose target is a collection.\n\nAgreed?: COPY on a direct reference gets passed through to the target.  (So similarly for\nCOPY on a collection that contains direct references -- the targets of the direct references\nget copied into the new collection.)  Chuck is not happy about this for direct references\nin collections -- you want the new collection to behave just like the old -- you want a\nNo-Passthrough header on the new collection to get the same results as on the old.\n\nThe issues are all related to redirect references:\n\nNote that in WebDAV COPY and MOVE are *not* atomic.  If a problem is encountered while\ncopying a collection, the server copies as much of the tree as it can.\n\n302 seems intuitive for the top level (request COPY for a redirect reference whose target\nis a collection), but not inside tree (request COPY for a collection that contains\nredirect references).\n\nIf there are redirect references inside the tree, a Multi-Status response with reftype and\nlocation for each redirect reference could be returned.  The client can then decide whether\nto do the actual copies.\n\nDo we really want to require a Multi-Status response? The client can traverse the tree \nbefore COPY to discover whether there are any redirect references.\n\nWhat would WebDAV require for a pre-referencing redirect resource in a collection that is\nbeing COPIED? Can we be consistent with that behavior?\n\nProposal: COPY on a redirect always copies the reference itself, and does not return a 302.\n\n\nhave direct be transparent\nhave redirect not have that transparency\n\n\n\nclients encouraged to do propfind if they care, in case there might be redirect involved\n\nredir always \n\ndown-level is ok, when do GET result is redirect\n\nWhat would a COPY on an old-fashioned 302 do?  We should do the same for redirect\nreferences.\nWebDAV is silent about COPY on a 302 resource because it expected consulting the HTTP spec\nwould give the right answer. \nJim W: if hardcoded 302s, response should be multistatus - COPY and MOVE are best effort.\nJim W: (a few minutes later) succeed or 404, never 302\nAlso waffled on whether a 302 resource would be listed in a PROPFIND on the collection that\ncontains it.\nRoy thinks it is a resource, and so should be returned in a collection listing.\nJim W: Either the server knows that for this URL it should always return 302 to any request,\nor else there is a simple resource there that always returns 302.\nIs a resource that responds to some requests with 302 required to respond to all requests\nwith 302?\n\nWeb server might not be able to honor any new semantics for a 302. \n\nJim D: Server does copy foo.cgi to a place that doesn't support cgi, and reports success even\nif won't run.  [What point is this trying to make? JS]\n\n\n\nChuck: In some cases we let redirect references behave like 302 resources.  (Geoff: They\nmodel (mimic) 302 resources.)  If we want to do something different in this case, we need to\ndo it consciously and explain why.\n\nChuck: From perspective of down-level client, where some 302s are from ordinary 302 \nresources and some are from redirect references, how do the semantics look?\n\nChuck: If we choose a different semantics for redirect references and old 302 resources, ok.\nBut make sure it's not consequential to down-level clients or consciously write them off.\n\nJim W: It won't be a common operation to copy a redirect reference.  It will be more common \nto copy a collection that contains redirect references.\n\nIf a client copies a collection, it probably wanted redirect references copied.  So it's \nbetter not to return 302s.\n\nJudy: We introduced the 302 response for redirect references (and the name \"redirect\nreference\" to go with it) to allow down-level clients to use redirect references.  We\nshouldn't abandon down-level clients if we can help it.\n\nJudy: Write up this concern.\n\nShould we consider using 307 (Temporary Redirect) (See the latest HTTP draft 06) instead\nof 302?  No, probably very few clients are following new developments in the HTTP spec.\n\nSECURITY (ISSUE 10)\n\nWe should state the Hide-Target concerns, and point out that they can be partially\naddressed by an ACL mechanism at the level of properties.  The Ref-Target header is,\nhowever, returned in the response to many requests and can't be hidden by hiding\nproperties.\n\nIt would be possible to create a ref on a trusted server, pointing to a hacker's server,\nto make people send information unwittingly to the hacker's server.  (For redirect \nreferences, see HTTP/1.1 -- client is required to notify the user for requests other\nthat GET or HEAD.)\n\nIf a direct reference has a target on a different server, there are performance and security\nissues. In the previous case, if a hacker compromises a trusted server using direct\nreferences, there will be no indication to the user that the operation is going off server\n(unless the client watches for reftype / reftarget in response).\n\nRemove 2.6 Modifications of Ordering.  This is not a serious risk.\n\nAdd to 12.2 Denial of Service that there are already other ways to mount denial of service\nattacks -- posting the URL on a Web page at a busy site. \n\nHIERARCHIES OF REFERENCES (ISSUE 19)\n\nJim W: Agree on the semantics we think are right without worrying about consistency with\nthe WebDAV spec.  We'll revisit the WebDAV spec's statements about namespace consistency\non the way to draft standard, and take into account the referencing semantics.\n\nConsider the URL /x/y.html, where /x/ is a reference whose target is collection /a/.  Then\ny.html is a member of /a/.  y.html may also be a reference.\n\nSince /x/ is a reference, it can't have members. So you dereference it and see whether it \npoints to a collection.  If not, a request on the URL /x/y.html fails.  If so, then you check\nthat collection to see whether it has a member y.html.  If not, a request on the URL fails.\n\nThere is no significant performance issue associated with this semantics if there is a\nmapping from DAV references to operating system constructs (Unix symbolic links, Windows\nshortcuts).\n\n\n\n", "encoding": "ascii"}