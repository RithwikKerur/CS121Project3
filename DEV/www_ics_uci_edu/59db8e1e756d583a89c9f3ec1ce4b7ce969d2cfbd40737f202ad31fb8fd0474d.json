{"url": "https://www.ics.uci.edu/~eppstein/gina/scot.drysdale.html", "content": "<HTML><HEAD>\n<TITLE>Geometry in Action</TITLE>\n<META name=\"Owner\" value=\"eppstein\">\n<META name=\"Reply-To\" value=\"eppstein@ics.uci.edu\">\n</HEAD><BODY BGCOLOR=\"#FFFFFF\" FGCOLOR=\"#000000\">\n<!--#config timefmt=\"%d %h %Y, %T %Z\" -->\n<H1>\n<CENTER><A HREF=\"http://www.ics.uci.edu/~eppstein/geom.html\"><IMG src=\"gina.gif\" ALIGN=center WIDTH=\"493\" HEIGHT=\"52\" ALT=\"Geometry in Action\" BORDER=0></A></CENTER>\n</H1>\n<HR><P>\n<CENTER>Scot Drysdale<BR>\nDartmouth College</CENTER>\n\n<P><CENTER><H2>Voronoi Diagrams: Applications from Archaology to\nZoology</H2></CENTER>\n\n<P><CENTER>Regional Geometry Institute, Smith College\n<BR>July 19, 1993</CENTER>\n\n<OL>\n<LI><A HREF=\"#app\">Applications</A>\n<LI><A HREF=\"#dna\">Definitions</A>\n<LI><A HREF=\"#dt\">Delaunay Triangulations</A>\n<LI><A HREF=\"#var\">Variations</A>\n<LI><A HREF=\"#alg\">Algorithms</A>\n<LI><A HREF=\"#ref\">References</A>\n</OL>\n\n<A NAME=\"app\">\n<P><CENTER><H3><HR>Applications of Voronoi Diagrams<HR></H3></CENTER>\n</A>\n\n<P>Scot listed about twenty fields in which Voronoi diagrams are in\ncommon use (although often not by that name).  \n\n<UL>\n\n<P><LI>Anthropology and Archeology -- Identify the parts of a region under\nthe influence of different neolithic clans, chiefdoms, ceremonial\ncenters, or hill forts.\n\n<P><LI>Astronomy -- Identify clusters of stars and clusters of galaxies\n(Here we saw what may be the earliest picture of a Voronoi diagram,\ndrawn by Descartes in 1644, where the regions described the regions\nof gravitational influence of the sun and other stars.) \n\n<P><LI>Biology, Ecology, Forestry -- Model and analyze plant competition\n(\"Area potentially available to a tree\", \"Plant polygons\")\n\n<P><LI>Cartography -- Piece together satellite photographs into large\n\"mosaic\" maps\n\n<P><LI>Crystallography and Chemistry -- Study chemical properties of\nmetallic sodium (\"Wigner-Seitz regions\"); Modelling alloy structures\nas sphere packings (\"Domain of an atom\") \n\n<P><LI>Finite Element Analysis -- Generating finite element meshes which\navoid small angles\n\n<P><LI>Geography -- Analyzing patterns of urban settlements\n\n<P><LI>Geology -- Estimation of ore reserves in a deposit using information\nobtained from bore holes; modelling crack patterns in basalt due to\ncontraction on cooling\n\n<P><LI>Geometric Modeling -- Finding \"good\" triangulations of 3D surfaces\n\n<P><LI>Marketing -- Model market of US metropolitan areas; market area\nextending down to individual retail stores\n\n<P><LI>Mathematics -- Study of positive definite quadratic forms\n(\"Dirichlet tesselation\", \"Voronoi diagram\") \n\n<P><LI>Metallurgy -- Modelling \"grain growth\" in metal films\n\n<P><LI>Meteorology -- Estimate regional rainfall averages, given data at\ndiscrete rain gauges (\"Thiessen polygons\")\n\n<P><LI>Pattern Recognition -- Find simple descriptors for shapes that\nextract 1D characterizations from 2D shapes (\"Medial axis\" or\n\"skeleton\" of a contour) \n\n<P><LI>Physiology -- Analysis of capillary distribution in cross-sections\nof muscle tissue to compute oxygen transport (\"Capillary domains\")\n\n<P><LI>Robotics -- Path planning in the presence of obstacles\n\n<P><LI>Statistics and Data Analysis -- Analyze statistical clustering\n(\"Natural neighbors\" interpolation) \n\n<P><LI>Zoology -- Model and analyze the territories of animals\n\n</UL>\n\n<P>In addition to all these \"real world\" applications, Voronoi diagrams\nhave several applications within the field of computer science, in\nparticular, computational geometry.\n\n<P><UL>\n\n<P><LI>Knuth's Post Office Problem -- Given a set of locations for post\noffices, how do you determine the closest post office to a given\nhouse?  (Apparently, Knuth was ignoring the existence of ZIP codes.)\n\n<P><LI>Closest Pair -- Given a set of points, which two are closest\ntogether?\n\n<P><LI>All Nearest Neighbors -- Given a set of points, find each point's\nnearest neighbor\n\n<P><LI>Euclidean Minimum Spanning Tree\n\n<P><LI>Largest Empty Circle, also known as the Toxic Waste Dump Problem\n\n<P><LI>Fixed Radius Near Neighbors -- Find all pairs of points closer than\na given distance apart.\n\n<P><LI>All k Nearest Neighbors -- Find each point's k closest neighbors\n\n<P><LI>Enumerating interpoint distances in increasing order -- Find the\nclosest pair, then the next closest pair, then the next closest\npair, and so on.\n\n</UL>\n\n<P>[A quick search through recent computational geometry literature finds\nabout 300 papers, almost all published in the last decade, with either\n\"Voronoi\" or \"Delaunay\" in the title.  Over a third of those papers\nwere published since 1990.]\n\n<A NAME=\"dna\">\n<P><CENTER><H3><HR>Voronoi Diagrams -- Definitions and Examples<HR></H3></CENTER>\n</A>\n\n<P>A Voronoi diagram of a set of \"sites\" (points) is a collection of\nregions that divide up the plane.  Each region corresponds to one of\nthe sites, and all the points in one region are closer to the\ncorresponding site than to any other site.\n\n<P>All of the Voronoi regions are convex polygons.  Some of them are\ninfinite -- these correspond to the sites on the convex hull.  The\nboundary between two adjacent regions is a line segment, and the line\nthat contains it is the perpendicular bisector of the segment joining\nthe two sites.  Usually, Voronoi regions meet three at at time at\nVoronoi points.  If three sites determine Voronoi regions that meet at\na Voronoi point, the circle through those three sites is centered at\nthat Voronoi point, and there are no other sites in the circle.\n\n<P>So how would this be useful for solving, say Knuth's Post Office\nProblem?  Suppose we had the Voronoi diagram of the post office\nlocations.  Then the find the closest post office to a given house,\nall we need to do is figure out which Voronoi region the house is in.\nThis is an example of the \"point location\" problem.\n\n<P>Once we have the Voronoi diagram, we can solve the post office problem\nas follows.  (This is not the best solution, but it's reasonably\nsimple.)  Draw a vertical line through each of the Voronoi points.\nThese lines split the plane into vertical slabs.  To locate a point p,\nfirst do a binary search to find the slab containing p.  Within each\nslab, there are no Voronoi points, so the Voronoi edges that cross\neach slab do so nicely.  To find the Voronoi region containing p, we\njust do another binary search, this time on the spaces between the\nVoronoi edges in our slab.  Altogether, the search takes O(log n)\nsteps, where n is the number of sites.\n\n<P>Now let's look at the toxic waste dump problem.  You are given n\npoints in the plane, representing cities, and you want to put a toxic\nwaste dump as far from the cities as possible.  Obviously, the best\nsolution is to put the dump far away from ALL the points, but to make\nthe problem interesting, let's suppose we have to put the dump inside\nthe convex hull of the points.  With this contraint, the best place to\nput the waste dump is either (1) on a Voronoi vertex, or (2) on the\nmidpoint of a convex hull edge, which must be on a Voronoi edge.\n\n\n<A NAME=\"dt\">\n<P><CENTER><H3><HR>Delaunay Triangulations<HR></H3></CENTER>\n</A>\n\n<P>The Delaunay triangulation is the dual of the Voronoi diagram.  To\nbuild the Delaunay triangulation, draw a line segment between any two\nsites whose Voronoi regions share an edge.  This procedure splits the\nconvex hull of the sites into triangles.\n\n<P>The Delaunay triangulation has a number of nice properties.  For\nexample, each point is connected to its nearest neighbor by an edge in\nthe triangulation.  Since the Delaunay triangulation is a planar\ngraph, it has at most 3n-6 edges, where n is the number of sites.  So\nonce you have the Dealunay triangulation, if you want to find the\nclosest pair of sites, you only have to look at 3n-6 pairs, instead of\nall n(n-1)/2 possible pairs.\n\n<P>Here are some nice properties of the Delaunay triangulation:\n\n<P><UL>\n\n<P><LI>It's dual to the Voronoi diagram, so computing one automatically\ngives you the other.\n\n<P><LI>The Empty Circle Property -- If you draw a circle through the\nvertices of ANY Delaunay triangle, no other sites will be inside\nthat circle.\n\n<P><LI>It's a planar graph.  By Euler's formula, it has at most 3n-6 edges\nand at most 2n-5 triangles.  This property can be used to reduce\nmany problems with quadratic size (like closest pair) down to linear\nsize in the time it takes to construct the triangulation.\n\n<P><LI>It contains \"fat\" triangles, in the sense that the minimum angle of\nany Delaunay triangle is as large as possible.  In fact, if you\nwrite down the list of all angles in the Delaunay triangulation, in\nincreasing order, then do the same thing for any other triangulation\nof the same set of points, the Delaunay list is guaranteed to be\nlexicographically smaller.\n\n</UL>\n\n<A NAME=\"var\">\n<P><CENTER><H3><HR>Variations on Voronoi Diagrams<HR></H3></CENTER>\n</A>\n\n<P>One way of getting Voronoi diagrams is by growing crystals.  If you\nstart a number of crystals, all growing at the same rate, and all\nstarting at the same time, you get a number of growing circles.  As\nthese circles meet, straight line boundaries appear between them.\nEventually, the entire plane will be filled up.  Each crystal will\nexactly fill up the Voronoi region of its point of origin.\n\n<P>This is a little too simple.  In reality, crystals start growing at\ndifferent times.  Even if they still grow at the same rate, if they\nstart at different times, they will no longer meet in straight lines.\nInstead, they will meet in hyperbolic segments.  The diagram you get\nis called the \"additively weighted Voronoi diagram\".  It's defined\njust like the usual Voronoi diagram, but each site has a weight, and\nyou measure distance to a site, you add its weight to the usual\nEuclidean distance.\n\n<P>Now suppose instead that all the crystals start at the same time, but\ngrow at different rates.  Now you get what's called the\n\"multiplicatively weighted Voronoi diagram\".  Once again, each site is\ngiven a weight, but when you measure the distance to a site, you\n<I>multiply</I> by its weight.  Now the boundaries between different regions\nare segments of circles.\n\n<P>This model still has some problems.  For example, in a multiplic-\natively weighted Voronoi diagram, it's possible for a region to be\ndisconnected.  Obviously, this can't happen with real crystals.  So\nthere's yat another version which treats existing crystals as\nobstacles, and lets fast-growing crstals grow around the slower ones.\nNow the boundaries between neighboring regions are sort of\ntear-shaped.  This variation is called the \"multiplicatively weighted\ncrystal growth Voronoi diagram.\"\n\n<P>There are several other variations.  You can change the metric from\nthe normal Euclidean distance to L<sub>1</sub>, or L<sub>p</sub>, or\nL<sub>infinity</sub>, or even stranger distance functions.  You can\nweight the sites additively <I>and</I> mulitplicatively.  You can change the\nsites from points to line segments or circles or polygons.  You can\ngeneralize to higher dimensions.  You can associate points with the\nfarthest site, instead of their nearest site.  And so on.\n\n<P>Different applications of Voronoi diagrams require different\nvariations.  For example, motion planning algorithims for circular\nrobots often use the Voronoi diagram of the obstacles.  If there is a\npath from one location to another, then there must be a path that\nfollows the edges of the Voronoi diagram, since those edges are by\ndefinition as far from the obstacles as possible.\n\n<A NAME=\"alg\">\n<P><CENTER><H3><HR>Algorithms for Computing Voronoi Diagrams<HR></H3></CENTER>\n</A>\n\n<P>There are literally hundreds of different algorithms for constructing\nvarious types of Voronoi diagrams.  I will describe two of the\nsimplest.\n\n<P>The first algorithm inserts the points one at a time into the diagram.\nWhenever a new point comes in, we need to do three things.  First, we\nneed to figure out which of the existing Voronoi cells contains the\nnew site.  Second, we need to \"walk around\" the boundary of the new\nsite's Voronoi region, inserting new edges into the diagram.  Finally,\nwe delete all the old edges sticking into the new region.\n\n<P>The second and third steps are the harder ones.  It's possible that\neach new site's Voronoi cell will touch all the old cells.  Thus, in\nthe worst case, we end up spending linear time on each cell, or\nO(n<sup>2</sup>)\ntime overall.  However, it has been proven that if you insert the\npoints in random order, the expected time is only O(n log n),\nregardless of which set of points we're given.\n\nA divide and conquer algorithm for constructing Voronoi diagrams was\ndiscovered by Shamos and Hoey.  Split the points into two halves, the\nleftmost n/2 points, which we'll color bLue, and the rightmost n/2\npoints, which we'll color Red.  Recursively compute the Voronio\ndiagram of the two halves.  Finally, merge the two diagrams by finding\nthe edges that separate the bLue points from the Red points\n\nThe last step can be done in linear time by the \"walking ant\" method.\nAn ant starts down at -infinity, walking upward along the path halfway\nbetween some blue point and some red point.  The ant wants to walk all\nthe way up to +infinity, staying as far away from the points as\npossible.  Whenever the ant gets to a red Voronoi edge, it turns away\nfrom the new red point.  Whenever it hits a blue edge, it turns away\nfrom the new blue point.\n\nThere are a few surprisingly difficult details left to deal with, like\nhow does the ant know where to start, and how do you know which edge\nthe ant will hit next.  (The interested reader is strongly encouraged\nto consult the standard computational geometry literature for\nsolutions to these details.)\n\n<A NAME=\"ref\">\n<P><CENTER><H3><HR>References for Further Reading<HR></H3></CENTER>\n</A>\n\n<P><OL>\n\n<P><LI>Okabe, Boots, and Sugihara, <I>Spatial Tesselations: Concepts and\nApplications of Voronoi Diagrams</I>, Wiley, 1992.  This book describes\neverything mentioned in this talk, including an excellent survey of\nVoronoi applications in dozens of different fields.\n\n<P><LI>Aurenhammer, \"Voronoi Diagrams: A Survey of a Fundamental\nGeometric Data Structure\", <I>ACM Computing Surveys</I> 23 (1991), page\n345-405.  This is an excellent survey of recent technical results and\na few applications, with several hundred references into the\ncomputational geometry literature.\n\n<P>Also suggested are a few of the standard computational geometry texts:\n\n<P><LI>Preparata and Shamos, <I>Computational Geometry: An Introduction</I>,\nSpringer-Verlag, 1985.  Excellent introduction, at about the graduate\nstudent level, but somewhat out of date.\n\n<P><LI>Edelsbrunner, <I>Algorithms in Combinatorial Geometry</I>,\nSpringer-Verlag, 1987.  Much more thorough and technical than P&S.\nNot for the faint of heart.  Again, slightly out of date.\n\n<P><LI>O'Rourke, <I>Computational Geometry in C</I>, to appear late this year.\nJoe's book will be a gentler (and more up-to-date) introduction than\nP&S, specifically designed for undergraduates.\n\n</OL>\n\n<P><HR>\n<P>[Lightly formatted by DE from notes typed for geometry.forum by <A HREF=\"http://www.cs.duke.edu/~jeffe/\">Jeff Erickson</A>.]\n\n<P>\nPart of\n<A HREF=\"http://www.ics.uci.edu/~eppstein/geom.html\">Geometry in Action</A>,\na collection of applications of computational geometry.<BR>\n<A HREF=\"http://www.ics.uci.edu/~eppstein/\">David Eppstein</A>,\n<A HREF=\"http://www.ics.uci.edu/~theory/\">Theory Group</A>,\n<A HREF=\"http://www.ics.uci.edu/\">ICS</A>,\n<A HREF=\"http://www.uci.edu/\">UC Irvine</A>.\n\n<P><SMALL>Last update: <!--#flastmod file=\"scot.drysdale.html\" -->.</SMALL>\n</BODY></HTML>\n", "encoding": "ascii"}