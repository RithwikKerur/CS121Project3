{"url": "https://www.ics.uci.edu/~peymano/papers/sewww.html", "content": "<HTML><HEAD>\n<TITLE>WWW Paper</TITLE>\n</HEAD><BODY>\n<BODY BGCOLOR=\"#ffffff\">\n\n<h1 align=center>\n\t\t\t\t  The WWW as an Enabling Technology <br>\n\t\t\t\t\t   for Software Engineering\n</h1>\n\n<p align=center>\n<a href=\"http://www.ics.uci.edu/~peymano\">Peyman Oreizy</a> <br>\n<a href=\"http://www.ics.uci.edu/\">Department of Information and\nComputer Science</a> <br>\n<a href=\"http://www.ics.uci.edu/\">University of California, Irvine</a> <br>\n<a href=\"mailto:peymano at ics.uci.edu\">peymano at ics.uci.edu</a>\n\n<p> The workshop announcement states in regard to the WWW that \"the\nsoftware engineering community is now faced with two significant\nchallenges and opportunities on:\n\n<ul>\n<li> how best to capitalize on the nature of the Web to leverage\nexisting goals and work and,\n\n<li> how, given our expertise in building software systems, to\nparticipate in the shaping of the Web.\"\n</ul>\n\n<p> But the WWW is more than a new technology for software engineers to\nleverage and shape for our problems.  The WWW is an <em>enabling\ntechnology</em>.  The Web has the potential of changing software\ndevelopment as dramatically as the transistor and microprocessor\nchanged computer architecture.\n\n<p> An enabling technology does this by changing fundamental assumptions\nwhich are ingrained in our discipline.  For example, the\nmicroprocessor changed the reliability, cost, transistor density, and\nperformance assumptions underlying hardware design.  Changing these\nunderlying assumptions resulted in new design approaches and broadened\nthe practical scope of its use.\n\n<p> The central premise of this paper is that the Web changes some of the\nfundamental assumptions underlying existing software engineering\ndiscipline.  Consequently, the Web has the potential for changing our\nnotion of the software artifact itself and the processes by which it\nis constructed.\n\n\n<h2> What Assumptions Are Changing? </h2>\n\n<p>Predicting the impact of the Web on software engineering is\ndifficult.  Instead, we focus on the changing assumptions implied by\nthe Web.  We believe it is more effective to state the catalysts of\nchange than to predict their effects. Since the Web itself is rapidly\nchanging, our list is bound to grow in length.\n\n<ul>\n\n<li> cheap, direct, highly accessibly customer channel -- The Web\nprovides a cheap, direct, and easily accessible medium of\ncommunication between customers and software developers.  Customers\ncan use the Web to interact directly with software developers, for\nexample to request product features and submit bug reports.\n\n<p> Software producers have begun using the Web to advertise their\nproducts, and provide product literature, product support, and early\nprototypes to customers. Distribution costs are significantly lowered\nin comparison to tradition distribution channels which require product\npackaging, space on store shelves, and warehousing costs.\n\n<p> The Web enables new software pricing models, such as per use or\nper function.  The Web also makes the distribution of small\napplications economical.  Such applications, freely distributed by\nsoftware producers, may provide an effective means to advertise\nsoftware and services. <br> <br>\n\n<li> remote, frequently updated resources -- Product documentation,\ntutorials, help, frequently asked questions may also be provided to\ncustomers in a timely, cost effective manner.  Software patches,\nproviding bug fixes and new functionality, distributed using the Web\nhave also become common place.  The Web enables new software\ndistribution models, such as weekly updates, by significantly reducing\nthe costs and risks traditionally associated with software\ndistribution.  <br> <br>\n\n<li> new medium of communication and distribution -- The software\nartifact has evolved as the communication and distribution medium\navailable to it has evolved.  Since the Web provides a new medium of\ninformation exchange, the software artifact itself will evolve in\norder to use it effectively. This change has far reaching consequences\nand is dealt with in a subsequent section of this paper.\n <br> <br>\n\n<li> large, globally accessibly information spaces -- The Web provides a\nglobally shared and hyper-linked information space, in which the\nphysical location of the information is largely transparent to users.\nBy significantly reducing the difficulty and costs associated with\nbrowsing and extending and globally shared information space, the Web\nhas enabled geographically distributed development of complex products\n<a href=\"#CTG96\">[CTG96]</a>. <br> <br>\n\n<li> searching of large global information spaces -- Effectively\nutilizing a large, global information spaces hinges on the ability to\neffectively and efficiently search it.  The existence of several\nkeyword-based Web indexing technologies, such as <a\nhref=\"http://www.altavista.digital.com\">AltaVista</a>, demonstrate\nthat searching unstructured information is feasible and effective.\nCategorization-based indexing, such as <a href=\"http://www.yahoo.com\">\nYahoo!</a>, is an effective means for searching smaller information\nspaces.\n\n<p>Both keyword- and categorization-based techniques have been used as\nmechanisms to support Web-based component repositories.  <a\nhref=\"http://www.gamelan.com\">Gamelan</a>, a popular Java component\nand resource repository, has indexed approximately 6,000\nartifacts. <br> <br>\n\n<li> simplicity, extensibility, standardization -- The Web is based on\nseveral simple, extensible standards (e.g., URI, HTTP, and HTML).\nSimultaneously achieving all three properties resulted in significant\nbenefits: simplicity facilitated adoption, extensibility facilitated\nevolution and customization, and standardization facilitated\ninteroperability and heterogeneity.  Software engineers strive to build\nsystems with similar benefits, but are arguably rarely as successful.\nThe effectiveness of these properties in helping to achieve these\nbenefits should not be underestimated.\n\n</ul>\n\n<p>The subsequent sections of this paper explore one of these changing\nassumptions, the Web as a new medium of information exchange, in the\nhopes that a more detailed discussion will more clearly demonstrate\nthe dramatic changes that the Web represents.\n\n\n<h2> The Web as a New Medium for Software </h2>\n\n<p>The software artifact has evolved as the communication and\ndistribution medium available to it has evolved.  Because the Web\nrepresents a new medium of information exchange accessible to the\nsoftware artifact, it has the potential to change the software\nartifact.\n\n<p>Traditional software distribution mediums include magnetic tape,\nfloppy disk, CD-ROMs, and networked PCs.  Consider the CD-ROM's\neffects on the software artifact and its distribution.  The tremendous\ncapacity provided a cost effective mechanism to distribute large\nsoftware systems and data.  Multimedia reference and entertainment\nsoftware represented a new class of systems that took advantage of the\nunique properties of the medium.\n\n<p>Even though we are at its early stages, some of the Web's effects\non software is already apparent.  Miniature applications, called\napplets, have become commonplace on the Web.  Several interesting\nproperties set them apart from traditional software applications:\n\n<ul>\n\n<li> applets are automatically downloaded, installed, and executed without\nuser involvement;\n\n<li> applets \"reside\" on Web pages, automatically being executed when\nthe user arrives at the page and stopped when the user leaves the\npage;\n\n<li> applets are embedded within the information of a Web page, as\nopposed to traditional applications which embed the information;\n\n<li> applets are dynamically and transparently loaded on an as-needed basis;\n\n<li> applets are cached by the browser for efficiently;\n\n<li> applet interaction with the browser and client operating system are\nseverely restricted for security reasons.\n\n</ul>\n\n<p> In effect, software has inherited several properties of the Web\nmedium.  In the cases distinguished above, it in essence behaves as\nanother browser content type.  In order to display a Web page, the\nbrowser downloads all the elements of the Web page, and for each one\ndetermines the content type of the element and invokes the associated\ncontent handler.  In the case of applets, the browser's content\nhandler is an interpreter for a virtual machine which essentially\nexecutes the content.\n\n<p> Initially, the Web could be characterized as a medium based solely\non a \"pull\" content model, in which users <em>explicitly</em> request\npages to be downloaded from the server to the browser.  Recent\ntechnologies (e.g., <a\nhref=\"http://www.marimba.com/datasheets/castanet-ds.html\">Marimba's\nCastanet</a>) built atop the Web infrastructure have begun to\nextended the medium to support a \"push\" content model as well.  In a\npush content model, users can register interest in a Web page and the\nserver sends the Web page to the browser whenever it changes.  Other\ncommunication mediums that are based on the push model include\ntelevision and radio broadcasting.\n\nA medium supporting the push model has the potential to further\ndifferentiate software that effectively leverages its properties.  The\ndistinguishing characteristics of the push model for software includes\nthe ability to:\n\n<ul>\n\n<li> receive and apply software patches as they are made available;\n\n<li> tailor software distribution to the specific needs of individual\nusers by permitting finer grained control when registering interests.\n\n</ul>\n\n\n<h2> Evaluating Existing Technologies  </h2>\n\n<p>The existing set of technologies provide some of the facilities\nneeded to effectively leverage the properties of the Web, but they\nfall short in several respects.  In this section, we discuss the\neffectiveness of browser plug-ins, <a href=#Java>Java applets</a>, <a\nhref=#ActiveX\">ActiveX components</a>, and <a\nhref=\"#Castanet\">Castanet</a> in enabling software systems to leverage\nthe Web communication and distribution medium.\n\n<h3> Browser Plug-Ins </h3>\n\n<p>Browsers \"plug-ins\" have enabled independent extension of media\ntypes, thereby enabling third-parties to extend the browser without\nchanging browser source code.  A plug-in encapsulates the\nfunctionality required to display a particular content type as a\nsoftware component (typically implemented as a dynamic link library).\nWhen the browser is executed, it determines which plug-ins are\navailable and the content types they support.  The browser augments\nits internally supported content types with those supported by\nplug-ins. When the browser downloads an element from a Web page whose\nhandler is provided by a plug-in, the handler is loaded and executed\nto display content within a window region determined by browser <a\nhref=\"#NPA96\">[NPA96]</a>.  But plug-ins suffer two shortcomings\nthat prevent them from taking full advantage of the medium: (1) users\nmust explicitly request that a new plug-in be downloaded, and (2)\nusers must manually install them which usually requires quitting and\nrestarting the browser so that the new plug-in can be recognized.\n\n<h3> ActiveX and Java Applets </h3>\n\n<p>Java applets and ActiveX components are two mechanisms for\nimplementing applets.  From our perspective, the most significant\ndifferences between the two are (a) ActiveX components are applets\nwritten for specific platforms whereas Java applets are byte-code\ninterpreted and chiefly platform independent; and (b) the security\nmodel adopt by them. The ActiveX security model resembles that of a\nsoftware retail store in which the company that developed the applet\nis identified and the user is asked to approve its execution.  Once\napproved, the applet has unrestricted access to the client machine.\nThe Java applet security model is based the \"sandbox\" model, in which\napplets are executed without explicit user approval but has severely\nrestricted access to the client machine.\n\n<p>Unlike plug-ins, ActiveX and Java applets are downloaded,\ninstalled, and executed automatically and without user involvement.\nBut both suffer several shortcomings that restrict the degree to which\nthey can leverage the medium.  Both technologies restrict the applet's\nexecution scope to a single Web page.  As such, an applet's execution\ncontext cannot be preserved beyond a Web page unless the context is\ntransmitted to the Web server as the user leaves the source page, and\nsubsequently downloaded when the user arrives at the destination page.\n\n<p>Security restrictions inherent in the Java \"sandbox\" model provides\nfurther restricts on Java applets.  Java applets cannot tailor their\nbehavior to the user's environment since they are restricted from\nquerying and otherwise accessing the client machine.  Since each Java\napplet runs in its own sandbox, direct inter-applet communication is\nprohibited.  Applets can only communicate if (a) both were downloaded\nfrom the same Web server, (b) each is explicitly aware of one other,\nand (c) all communication is routed through the common Web server.\n\n<h3> Castanet </h3>\n\n<p> <a\nhref=\"http://www.marimba.com/datasheets/castanet-ds.html\">Marimba's\nCastanet</a> technology is representative of early efforts at\nextending the Web communications medium to support the push model.\nTwo components comprise the functionality: a client-side component\nthat allows the user to register interest in and receive content from\nmultiple sources, and a server-side component that maintains user\ninterests, manages distribution, and transmits the content as it\nchanges.\n\n<p> Castanet distributions are independent of browser Web pages, so\ndistributed content may persists until the user explicitly unregisters\ninterest in the content.  This alleviates the execution scope\nlimitations inherent in the Java applet and ActiveX\napproaches. Castanet's server-side component may be extended using a\nplug-in mechanism, thereby permitting the content it distributes to be\npersonalized on a user-by-user basis.\n\n<p> Existing Castanet technology is based on Java applications,\nthereby avoiding the severe security restrictions of Java applets.\nBut Castanet content has limited access to the users client machine,\nfor example file I/O is restricted to a private directory.\n\n<p> But because a separate Java virtual machine is used to execute\ncontent provided by each source site, communication among content\nprovided by different sites is restricted.\n\n\n<h2> Preliminary Work </h2>\n\n<p>We have done preliminary work in building an environment that\nsupports access to the Web medium which is less restrictive than the\nexisting technologies in the hopes of investigating the consequences\nof the medium freely.  Although our prototype is incomplete,\nexperiments with it have been encouraging.\n\n<p>Our environment consists of a Web browser, a component repository,\na command shell, and an applet incorporation handler.  Using the\nenvironment, the user can locate a desired applet.  By clicking on the\napplet, the user explicitly requests that it be downloaded.  The Web\nbrowser then downloads the applet binary and invokes the incorporation\nhandler to process the applet.  The incorporation handler uncompresses\nthe applet and deposits it into the component repository.  Once\napplets have been placed in the repository, users can invoke them\nusing the command shell.\n\n<p>Applets in our environment adhere to a canonical structure which\nrequires that they communicate exclusively using event broadcasts.  By\ncontrolling the event routing mechanism between applets, the command\nshell allows the user to compose applets in arbitrary ways.  In this\nsense, our command shell is similar to the ability of a UNIX command\nshell in allowing users to combine UNIX filter applications using UNIX\npipes.\n\n<p>All the tools in the environment are written in the Java\nprogramming language.  The JFox Web browser <a\nhref=\"#Wen96\">[Wen96]</a> was integrated by modifying it to recognize\nour applet content type and to handle the content type using our\nincorporation handler.\n\n<p>Although simplistic, our environment is unique in that it allows\napplets downloaded from different sources to communicate under user\ncontrol.  Applets may freely query the client machine and utilize\nfacilities of the host operating system.\n\n<p>The current implementation has only allowed us to investigate the\npull model aspects of the Web medium.  In the future, we plan on\nintegrating existing push content technology into the environment to\nenable further investigation.\n\n\n<h2> Conclusions </h2>\n\n<p>The properties of the Web medium raise many interesting issues and\nquestions that should be considered and investigated by the software\nengineering community.  Some interesting questions include:\n\n<ul>\n\n<li> Is the Web expanding the domain of software engineering or just\ncausing us to look at an unexplored region of the existing domain?\n\n<li> Do these changing assumptions necessitate fundamentally new\ntechniques, methods, and processes for software development or can\nexisting techniques be applied effectively?\n\n<li> What are the tradeoffs between the benefits the Web medium and\nthe risks inherent in its use?\n\n</ul>\n\n<h2> Acknowledgements </h2>\n\nMark Bergman, Debbie Dubrow, and Roy Fielding provided valuable\ninsight and feedback on this work.\n\n\n<h2> References </h2>\n\n<dl>\n\n<a name=\"ActiveX\">\n<dt> ActiveX Components\n<dd> Microsoft Inc. <a href=\"http://www.microsoft.com/\">\nhttp://www.microsoft.com/</a>\n<br> <br>\n\n<a name=\"Castanet\">\n<dt> Castanet Technology\n<dd> Marimba Inc.  <a href=\"http://www.marimba.com/\">\nhttp://www.marimba.com/</a>\n<br> <br>\n\n<a name=\"CTG96\">\n<dt> [CTG96]\n<dd> M. R. Cutkosky, J. M. Tenenbaum, J. Glicksman.  Madefast:\nCollaborative Engineering over the Internet.  Communications of the\nACM, September 1996, vol. 39, no. 9, pages 78--87.\n<br> <br>\n\n<a name=\"Java\">\n<dt> Java Applets\n<dd> JavaSoft Inc. <a href=\"http://www.javasoft.com/\">\nhttp://www.javasoft.com/</a>\n<br> <br>\n\n<a name=\"NPA96\">\n<dt> [NPA96]\n<dd> Netscape Corporation, The Plug-in Developer's Guide.\n<a href=http://home.netscape.com/eng/mozilla/3.0/handbook/plugins/pguide.htm>\nhttp://home.netscape.com/eng/mozilla/3.0/handbook/plugins/pguide.htm.</a>\n<br> <br>\n\n<a name=\"Wen96\">\n<dt> [Wen96]\n<dd> T. Wendt.  JFox WWW Browser.  Available at\n<a href=\"http://www.uni-kassel.de/fb16/ipm/mt/java/jfox.html\">\nhttp://www.uni-kassel.de/fb16/ipm/mt/java/jfox.html</a>\n<br> <br>\n\n</dl>\n\n<script src=\"http://www.google-analytics.com/urchin.js\" type=\"text/javascript\">\n</script>\n<script type=\"text/javascript\">\n_uacct = \"UA-2517225-2\";\nurchinTracker();\n</script>\n\n</body>\n</html>\n", "encoding": "ascii"}