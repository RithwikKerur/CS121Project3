{"url": "https://www.ics.uci.edu/~eppstein/numth/egypt/approx.html", "content": "<!-- This document automatically created using nb2html -->\n<!--         nb2html is Copyright T.D.Robb 1994        -->\n<H1><CENTER>\nAlgorithms for Egyptian Fractions\n</CENTER></H1>\n<P>\n<HR><H2><IMG SRC=\"mmaSection.gif\" ALT=\"o\">\nMethods Based on Approximation\n</H2>\n<P>\nThe most natural and obvious method of finding an Egyptian fraction representation for a given number is to approximate the number as closely as possible by a single unit fraction, and then to use the same method to represent the remainder.  For instance, the largest unit fraction less than 5/6 is 1/2, and removing 1/2 from 5/6 leaves 1/3, so this idea leads to the representation 1/2+1/3 mentioned above.  There are several ways of translating this idea into a specific algorithm.\n<H3><IMG SRC=\"mmaSubSection.gif\" ALT=\"+\">\nThe Greedy Method\n</H3>\n<P>\nThe greedy method produces an Egyptian fraction representation of a number q by letting the first unit fraction be the largest unit fraction less than q, and then continuing in the same manner to represent the remaining value.  If q&gt;1, we first separate out the integer part Floor[q] before representing the remaining fraction.  Our implementation works by first computing a list of the fractions left after subtracting each successive term in the greedy representation, and then subtracting a shifted copy of this list from itself.\n<BLOCKQUOTE><PRE><B>\nGreedyPart[q_Integer] := 0;\nGreedyPart[Rational[1,y_]] := 0;\nGreedyPart[q_Rational] :=\n\tq - If[q &lt; 0 || q &gt; 1, Floor[q],\n\t\t   Rational[1,1+Quotient[1,q]]];\n   \t\t  \nSubtractShifted[l_] := Drop[l,-2] - Take[l,{2,-2}];\n\nEgyptGreedy[q_] :=\n\tSubtractShifted[FixedPointList[GreedyPart,q]]\n</B></PRE></BLOCKQUOTE>\n<P>\nLet us now make sure that this routine correctly finds an Egyptian fraction representation, and analyze its performance.  If we start with x/y, the remaining value after one step is\n(y mod x) / y(Ceiling[y/x]), which has a smaller numerator.  Similarly, the numerator decreases after each further step, so the algorithm always halts.  The resulting sequence of fractions clearly adds to the original input, so the only way this method could go wrong would be if two of the fractions were equal (this is not allowed in Egyptian fractions).  But this can't happen, since the denominators of the fractions must be strictly increasing: if we had two successive terms 1/a and 1/b with b &lt;= a, we could have chosen 1/(a-1) instead of 1/a.\n<P>\nSince the numerator decreases after each step, the number of terms in the representation of x/y is at most x.  In many cases we could expect each successive numerator to be randomly distributed modulo the previous numerator; if this were really true we would instead only expect to see O(Log x) terms.  The denominator is at most squared each step, so the largest denominator is at most y^(2^x) or more generally y^(2^k) where k is the number of terms.  The number of operations performed by the algorithm is proportional to k, but some of these operations might involve arithmetic on very large numbers.  We demonstrate this method with a simple example.\n<BLOCKQUOTE><PRE><B>\nEgyptGreedy[18/23]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1  1  1    1\n{-, -, --, ----}\n 2  4  31  2852\n</PRE></BLOCKQUOTE>\n<P>\nThat example was fairly well behaved; Wagon\n<A HREF=\"refs.html#Wag91\">[Wag91]</A>suggests trying this method on 31/311, which produces a representation with 10 terms, the maximum denominator having over 500 digits.  (As we will see later, other methods produce much better representations for 31/311.)\n<P>\nWe can easily modify our code to test the assertion that the numerators of the fractions remaining at each step do indeed decrease.\n<BLOCKQUOTE><PRE><B>\nEgyptGreedyNumerators[q_] :=\n    Numerator[Drop[FixedPointList[GreedyPart,q],-2]]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptGreedyNumerators[18/23]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n{18, 13, 3, 1}\n</PRE></BLOCKQUOTE>\n<H3><IMG SRC=\"mmaSubSection.gif\" ALT=\"+\">\nThe Harmonic Method\n</H3>\n<P>\nThe greedy method treats the integer and fractional parts of a number differently.  Instead, we can always remove the largest unit fraction that is smaller than both x/y and the previously removed unit fraction, even if x/y is larger than one.  We treat this separately from the greedy method as it must be implemented somewhat differently &#173; FixedPointList now needs two values, the remaining fraction and the bound on the denominator.  Once we have found the sequence of remaining fractions, we remove the denominator bounds by Transpose (faster than applying First to each member of the list) and subtract the shifted list from itself as before.  Our function takes two arguments, the first being the number we want to represent and the second being the largest denominator already included in the representation.  The same method can also be used to generate Egyptian fractions in which the first term is arbitrarily small, simply by supplying a large integer in the second argument.\n<BLOCKQUOTE><PRE><B>\nHarmonicPart[{0,d_}] := {0,d};\nHarmonicPart[{Rational[1,y_],d_}] := {0,d};\nHarmonicPart[{q_,d_}] :=\n    Max[d,1+Quotient[1,q]] //\n    {q-1/#,#+1} &amp;;\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptHarmonic[q_,d_] :=\n    Transpose[FixedPointList[HarmonicPart,{q,d}]][[1]] //\n    SubtractShifted\n</B></PRE></BLOCKQUOTE>\n<P>\nThe algorithm constructs a fragment of the harmonic series 1/2+1/3+1/4+1/5+... until this would produce a result larger than the original input, at which point the algorithm switches to the Greedy method for the remainder.  This switch must happen after at most Exp[O(x/y+Log d)] terms, because the Harmonic series diverges (the sum up to 1/k is roughly Log k).  Therefore the correctness of the algorithm follows from the same analysis we saw before.  However it may produce many more terms, with larger denominators, than the greedy method.  Each step at most squares the denominator, so when the switch happens, the denominator of the remaining fraction can be at most doubly exponentially small with respect to x/y, and the eventual number of terms is doubly exponential in x/y (singly exponential in d).  By the same analysis as the greedy algorithm, the largest denominator of the eventual representation is then at most quadruply exponential in x/y and triply exponential in d.  As for the greedy method, this is only the worst case, and we can expect in practice to see one fewer level of exponentials in both the number of terms and the largest denominator.  Even so, this algorithm tends to produce large representations.\n<BLOCKQUOTE><PRE><B>\nEgyptHarmonic[18/23,5]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1  1  1  1  1  1    1      1\n{-, -, -, -, -, --, ---, --------}\n 5  6  7  8  9  28  794  23010120\n</PRE></BLOCKQUOTE>\n<P>\n<A NAME=\"odd\"><H3><IMG SRC=\"mmaSubSection.gif\" ALT=\"+\">\nThe Odd Greedy Method\n</H3>\n<P>\n</A>Each x/y with y odd is known to have an Egyptian fraction representation in which each denominator is odd\n<A HREF=\"refs.html#Bre54\">[Bre54</A>,\n<A HREF=\"refs.html#Ste54\">Ste54]</A>. Conversely, if y is even, at least one of the terms in its representation must also be even.  The most straightforward method of finding an odd-denominator representation seems to be to modify the greedy method to only use odd denominators, but it is not known whether this really works.\n<BLOCKQUOTE><PRE><B>\nOddGreedyPart[{0,d_}] := {0,d};\nOddGreedyPart[{Rational[1,y_],d_}] := {0,d};\nOddGreedyPart[{q_,d_}] :=\n    Max[d,1+Quotient[1,q]] //\n    If[OddQ[#],#,#+1] &amp; //\n    {q-1/#,#+1} &amp;;\n\nEgyptOddGreedy[q_,d_:3] :=\n    Transpose[FixedPointList[OddGreedyPart,{q,d}]][[1]] //\n    SubtractShifted\n</B></PRE></BLOCKQUOTE>\n<P>\nUnlike the greedy method, the numerators of the remaining fractions do not decrease at each step.\nThere are two reasons: first, like the harmonic method, we use a parameter d to make sure that the fractions we generate are distinct; d is used until the series 1/3+1/5+1/7+1/9+... becomes larger than q, at which point it becomes unimportant, but in this stage the numerators will in general increase.  Second, whenever parity forces us to use a larger denominator than the greedy method, the denominator will again increase.  We now give an example with q&lt;1/3 to demonstrate the second phenomenon.\n<BLOCKQUOTE><PRE><B>\nEgyptOddGreedyNumerators[q_,d_:3] :=\n    Transpose[FixedPointList[OddGreedyPart,{q,d}]][[1]] //\n    Numerator[Drop[#,-2]] &amp;\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptOddGreedy[10/39]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1  1    1     1\n{-, --, ---, ------}\n 5  19  265  196365\n</PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptOddGreedyNumerators[10/39]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n{10, 11, 14, 1}\n</PRE></BLOCKQUOTE>\n<P>\nProving whether this method always halts remains an important open problem in the theory of Egyptian fractions\n<A HREF=\"refs.html#Guy81\">[Guy81</A>,\n<A HREF=\"refs.html#KW91\">KW91]</A>. A heuristic argument shows that the answer is likely to be positive.  After enough fractions have been generated for d to become unimportant, each step reduces the remaining fraction from some value x/y to a smaller fraction in which the numerator is between 1 and 2x-1.  If each successive numerator were randomly distributed in this range, we would expect to see the numerators decrease by a factor of Exp[Integrate[Log[x],{x,0,2}]/2] ~= 0.73576 per step.  Therefore we should expect the algorithm to produce roughly (Log n)/(1-Log 2) ~= 3.26 Log n unit fractions before halting, where n is the numerator of the remaining fraction at the point that d  becomes unimportant.  Of course nothing here is actually random, which is why this argument is not rigorous.  (Also it ignores the possibility that the numerator and denominator of the fraction remaining after some steps may have a common factor, but that only serves to reduce the number of terms.)  To test this argument, we compare it with the actual performance of our algorithm.\n<BLOCKQUOTE><PRE><B>\nTestOddGreedy[q_] :=\n\tEgyptOddGreedyNumerators[q] //\n\tListPlot[Log[#]/(1-Log[2]),\n\t\t\t PlotJoined-&gt;True,\n\t\t\t AxesOrigin-&gt;{0,0}]&amp;\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nTestOddGreedy[1999999991/123412340001]\n</B></PRE></BLOCKQUOTE>\n<CENTER><IMG SRC=\"egypt_2_3_0^1.gif\" WIDTH=282 HEIGHT=174></CENTER>\n<P>\nOur code normalizes the vertical axis to match our heuristic prediction of the number of steps remaining.  At least for this example, the numerators seem to decrease much more quickly than our prediction, so the number of terms generated (15) is considerably smaller than the 70 we would expect.  It is also interesting to note the large drops made by the numerator in the third, seventh, and final steps.  A closer inspection reveals that these phenomena are due to cancellation between common factors of the numerators and denominators of intermediate terms: these three steps involve common factors of 63, 45, and 5739, and two other steps involve factors of three.\nIt is not clear to me why such large cancellations should occur.\n<P><HR><P><A HREF=\"http://www.ics.uci.edu/~eppstein/numth/egypt/\">Egyptian Fractions,\n</A><A HREF=\"http://www.ics.uci.edu/~eppstein/numth/\">Number Theory,\n</A><A HREF=\"http://www.ics.uci.edu/~eppstein/\">David Eppstein,\n</A><A HREF=\"http://www.ics.uci.edu/\">ICS,\n</A><A HREF=\"http://www.uci.edu/\">UC Irvine\n</A><P><SMALL>Formatted by\n<A HREF=\"http://www.hallym.ac.kr/~physics/education/Math/tdr/nbks/sourceCode.html\">nb2html</A> and\n<A HREF=\"http://www.ics.uci.edu/~eppstein/pubs/filter.html\">filter</A>.\n<!--#config timefmt=\"%d %h %Y, %T %Z\" -->Last update:\n<!--#flastmod file=\"egypt.ma\" -->.\n</SMALL>", "encoding": "ascii"}