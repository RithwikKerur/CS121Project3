{"url": "https://www.ics.uci.edu/~jacobson/ics45J/LabManual/09-Assignment5.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\r\n    \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r\n<meta name=\"Generator\" content=\"Microsoft Word 97/98\">\r\n<title>A Donation to the Music Archive</title>\r\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\">\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"title\">\r\n<center>\r\n<h2>A Donation to the Music Archive</h2>\r\n<h4>Lab Assignment 5</h4>\r\n</center>\r\n</div>\r\n\r\n<p>This lab gives you practice with simple nested data structures involving ArrayList and LinkedList, formatted console output, sequential input from both the local disk and a Web site, sequential output, and the Scanner class; interfaces, inheritance and polymorphism also play a large role.</p>\r\n\r\n<div class=\"section\">\r\n<hr>\r\n<h3>Pair Programming</h3>\r\n</div>\r\n\r\n<p>You may pair program for this assignment, or work alone. Make this decision before you begin work on the assignment. Once you make the decision, it stands for the duration of the assignment. If you choose to pair program, you must work with the same partner for the assignment's duration.</h4></p>\r\n\r\n<div class=\"section\">\r\n<hr>\r\n<h3>Program Requirements</h3>\r\n</div>\r\n\r\n<p>A serious collector of recorded music has left his collection to a music archive. You've been hired to create a title index and some \"media counts\" for the collection, using the information from a file that lists the donated items. The archive needs the title index to easily find items; it needs the counts to determine how many storage shelves are required for each kind of media.</p>\r\n\r\n<p>The archive has begun making a catalog of the donated items. A catalog entry consists of an accession number (a unqiue identifier), the work's title, the kind of media the music is on, such as paper (a book or pages of sheet music) or vinyl record(s) and, depending on the kind of media, a bit more about the item; details below.</p>\r\n\r\n<p>An accession number is no more than 10 characters, and can be made up of digits and/or letters (and no other symbols). The title is no longer than 50 characters and always starts with a capital letter; it never contains a semicolon (for reasons that will become clear shortly). The media categories are each designated by a single uppercase letter, as shown in the chart below, For each media type, the chart also shows the additional data about the item that is to be included in the report:\r\n\r\n<pre>\r\nLetter   Category                    Additional Information\r\nC        Compact media               number of tracks (integer), year of release (string)\r\nP        Paper (sheet music, books)  number of pages (integer)\r\nV        Shellac & vinyl records     record label's imprint (string), speed of play - 33, 45, 78 (integer)\r\nW        Wax cylinder                maker (string)\r\n</pre>\r\n\r\n\r\n<div class=\"section\">\r\n<hr>\r\n<h3>Technical Details</h3>\r\n</div>\r\n\r\n<p>You've worked out with your archive contact that the input file given to you will be a text file, called <font class = \"codeFaceSmall\">music.txt</font>, that can be found in one or two places: on the local disk, or on the web site http://www.ics.uci.edu/~jacobson/ics45J/LabManual/LabFiles/Lab5Files -- so the Web path to the file is <br>\r\nhttp://www.ics.uci.edu/~jacobson/ics45J/LabManual/LabFiles/Lab5Files/music.txt</p>\r\n\r\n<p>When the program is run, its first action (the user sees) is a question asking whether to use the version of the file on the disk or the Web; the program uses the chosen version as the input file, if it exsits. If it does not, or some other problem prevents the file from being found, the program prints out a message to the console window describing the problem and exits.\r\n\r\n<p> Each donated item's information is on one line (and there is only donated item per line). Each line will have the form\r\n<br><br>\r\n<i>acccession number</i>; <i> title</i>; <i> media category code</i>; <i> additional information</i>\r\n<br><br>\r\nthat is, a line is formed by an accession number, a title, and a media category code, and one or two additional items of information, depending upon the media code, with each of these fields separated by a semicolon (;) and a space. (There is no \";\" or space at the end of the line.) Each line will end with the standard PC end-of-line mark&mdash;that is, a carriage return character followed by a line feed character; in Java terms, the characters<font class = \"codeFaceSmall\"> \\r\\n</font>.</p>\r\n\r\n<p> The provided music file will have been run though a testing program to ensure its format is correct and that its fields follow the specifications given for them. You can be confident that the music file will be in the correct format to be fed into your program.</p>\r\n\r\n<p>The indexed items are to be placed into a text file called <font class = \"codeFaceSmall\">index.txt</font>. It will have the information about each musical item on one line, nicely formatted, and be in alphabetical order by title. Be sure the program tells the user the name of the file, and where to find it.</p>\r\n\r\n<p>The counts are to be displayed in the console window in a neat, easy-to-read arrangement, after the index file is constructed (and stored). Each count is labeled so the user knows the media to which the count refers. </p>\r\n\r\n<p>The basic flow of the program goes like this:\r\n<pre>\r\n\tAsk the user if the music file is on disk or on the Web\r\n\tIf it exists, open it (as a Scanner); if not (or other problem), exit with a message to the user\r\n\tConstruct an (empty) MusicList\r\n\tFor each line of the music file,\r\n\t\tuse it to build a MusicItem object\r\n\t\tfind the Bucket in the MusicList at which the MusicItem is to be inserted\r\n\t\tplace it into that Bucket, in alphabetical order by title\r\n\t\tincrement the media count for the media type of this MusicItem\r\n\tClose the music file\r\n\tOpen the index file for sequential output; if any problems, exit with a message to the user\r\n\tFor each Bucket in the MusicList\r\n\t\tFor each MusicItem in the Bucket\r\n\t\t\twrite the MusicItem out (nicely formatted) to the index file\r\n\tClose the index file.\r\n    Print a message telling the user the index' file's name and location\r\n\tPrint out the media counts, labeled so the user knows what's what\r\n\tCompute and print the count of all the items, also appropriately labeled \r\n</pre>\r\n\r\n<p>When you create <font class = \"codefacesmall\">index.txt</font> for the first time (or re-create it when it has been deleted) you will likely need to select your project folder and issue the <font class = \"codefacesmall\">Refresh</font> command (it&#146;s in the <font class = \"codefacesmall\">File</font> menu, among other places) to see it in the Package Explorer.</.p>\r\n\r\n<p>After you run the program, if you open<font class = \"codefacesmall\"> index.txt</font> in the editing window, you may very well be told the &#147;resource is out of sync with the file system... .&#148 This occurs because the editor has the old version of the file in its memory, but knows the version on disk has changed. Just hit F5 to display the current contents of the index file. And if you run the program with <font class = \"codefacesmall\">index.txt</font> file open in the editor window, when you go back to look at its contents (after the program completes) you&#146;ll likely see a dialog box warning you that \"The file...has been changed on the file system\" and asking if you want to \"replace the editor contents with these changes?\" Click on <font class = \"codefacesmall\">Yes</font>; you will then see the current contents of <font class = \"codefacesmall\">index.txt</font> in the window.</p>\r\n\r\n<p>A hint: You will probably find the String method <font class = \"codeFaceSmall\">compareTo()</font> quite useful. <font class = \"codeFaceSmall\">s.compareTo(t)</font>, with <font class = \"codeFaceSmall\">s</font> and <font class = \"codeFaceSmall\">t</font> being Strings, returns 0 if <font class = \"codeFaceSmall\">s</font> and <font class = \"codeFaceSmall\">t</font> have the same value, a number less than 0 if <font class = \"codeFaceSmall\">s</font> comes before <font class = \"codeFaceSmall\">t</font> in alphanumeric order, and a number greater than 0 if <font class = \"codeFaceSmall\">s</font> comes after <font class = \"codeFaceSmall\">t</font>. This method comes in handy when figuring out where to place a music item in the music list so that ordering by title is maintained.</p>\r\n\r\n<p>Another hint: You will also probably find the String method <font class = \"codeFaceSmall\">split(<i>delimiter</i>)</font> quite useful. <font class = \"codeFaceSmall\">split</font> returns an array (of type <font class = \"codeFaceSmall\">String</font>) with each cell containing the substring that is terminated by the given delimiter, or by the end of the string; they are placed in order in the array. So, if you have, say, a string \"This is a sentence.\" stored in <font class = \"codeFaceSmall\">aSentence</font>, <font class = \"codeFaceSmall\">String[] words = aSentence.split(\" \")</font> will return <font class = \"codeFaceSmall\">words[0] = \"This\"</font>, <font class = \"codeFaceSmall\">word[2] = \"is\"</font>, <font class = \"codeFaceSmall\">word[3] = \"a\"</font> and <font class = \"codeFaceSmall\">word[4] = \"sentence.\"</font> -- a handy method for breaking up the music item line into its component parts.\r\n</p>\r\n\r\n<p>An admonition: There are two methods in the ArrayList and LinkedList class called <font class = \"codefacesmall\">add</font>. <font class = \"codefacesmall\">add(item)</font> adds an item to the end of the list. <font class = \"codefacesmall\">add(i, item)</font> adds an item at position <i>i</i> of an list, moving all items from <i>i</i> to the end of the list \"over by one.\" You will likely need to use both of these in your program; do not confuse them!</p>\r\n\r\n<p>As usual, we provide an Eclipse Project, <a href=\"//www.ics.uci.edu/~jacobson/ics45J/LabManual/LabFiles/Lab5.zip\"><font class = \"codefacesmall\"><font class = \"codefacesmall\">Lab5.zip</font></font></a>. In it, you will find interfaces for the classes you are to write to create the program and an test input file. (Unlike previous assignments, you are writing this program from scratch.)  \r\nThe actual list of music will be provided to you at a later date, as the cataloging of the collection is ongoing. So, you will have to test your program using a &#147;fake&#148; list. We've provided one for you, called <font class = \"codeFaceSmall\">music.txt</font>. You should also test your program on other test lists you put together, ones designed to try and \"break\" your program. (And if they do not break your code, then you have reasonably certainty that the indexing part of your program works correctly.) Especially, try music files that are empty; have one, two or three items; place one item in every bucket; add a new item before all items in a bucket or after all items in a bucket...any and all cases that might uncover a potential mistake.</p>\r\n\r\n\r\n<div class=\"section\">\r\n<hr>\r\n<h3>Deliverables</h3>\r\n</div>\r\n\r\n<p>Zip up your <i>project</i> folder into the file <font class = \"codefacesmall\">MusicArchive.zip</font>, and turn it in via Checkmate.\r\n</p>\r\n\r\n<hr>\r\n<div class=\"history\">\r\n<br>Written by Norman Jacobson for ICS 21 Fall 2004, July 2004.\r\n<br>Minor revisions, by Norman Jacobson for ICS21 Winter 2005, December 2004.\r\n<br>Rvised to reflect encapsulation of file handling routines, by Norman Jacobson for ICS21 Fall 2006, November 2006.\r\n<br>Minor edits for clarity, by Norman Jacobson, December 2006 and September 2008\r\n<br>Minor editing to reflect use of Eclipse and for improved clarity, by Norman Jacobson, September 2009. \r\n<br>&nbsp;&nbsp;Includes some text adapted from Alex Thornton's Lab 4 for ICS 21 Summer 2009.\r\n<br>Minor typos fixed, by Norman Jacobson, September 2010.\r\n<br>Revised to remove requirement of status messages (processing is fast enough that users <br>&nbsp;&nbsp;will not wonder if program is hung up), and to make explicit the requirement to display\r\n<br>&nbsp;&nbsp;the name of the index file, by Norman Jacobson, December 2010.\r\n<br>Revised from ICS21 Lab Assignments 4 and 5, for ICS 45J, by Norman Jacobson, September 2012.\r\n<br>Deliverables section added, by Norman Jacobson, October 2012.\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}