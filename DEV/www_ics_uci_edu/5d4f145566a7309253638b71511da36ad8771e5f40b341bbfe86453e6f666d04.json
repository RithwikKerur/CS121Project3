{"url": "https://www.ics.uci.edu/~irani/s11_22/Project1/Project1.html", "content": "<html>\r\n  <head>\r\n    <title>ICS 22/CSE 22 - Project #1: Perfect Candidate</title>\r\n    <LINK href=\"../../style.css\" rel=\"StyleSheet\" type=\"text/css\">\r\n  </head>\r\n  <body bgcolor=\"DCFBFB\" text=\"5C4033\" >\r\n\r\n\r\n\r\n  <div id=\"content\">\r\n\r\n    <h1>Project #1: <i>Perfect Candidate</i></h1>\r\n    <p><b>Due date and time:</b> <i>Friday, April 8, 6:59pm</i></p>\r\n    <p><i>This project is to be done in pairs using the \"pair programming\" technique</i></p>\r\n\r\n    <h1>Introduction</h1>\r\n    <p>Like many aspects of our lives that we view transparently, when an election comes and we decide to vote, we have the luxury of going to our local polling place &mdash; or even just submitting an absentee ballot &mdash; casting our vote, and not thinking too much about the work that goes into managing the election.  But elections pose a significant logistical challenge.  Ballots must be designed and printed.  Voter registration lists must be maintained.  Only registered voters can be allowed to vote, and each must be allowed to vote only once.  It must not be possible to figure out which voters placed which votes.  Ultimately, votes must be counted and results disseminated.  As with many logistical challenges, the burden of handling elections is increasingly being placed on computers; these kinds of logistics are among the things that computers handle best, though automated solutions present their own problems when not designed and built carefully.</p>\r\n    <p>In recent years, various on-paper voting mechanisms have been replaced with electronic voting machines.  This project will let you explore the design and implementation of software for a highly simplified voting machine that allows users to cast votes for one race (say, Mayor of Simpleton) and counts the number of votes for each candidate.  I should be careful to point out that the design of a viable real-world voting machine requires a fair amount of care; it is important to note that our voting machine lacks a number of important features &mdash; not the least of which is some form of security mechanism &mdash; that are essential in a realistic one.</p>\r\n\r\n    <h1>Choosing a partner</h1>\r\n    <p>Before going any further with the assignment, choose a partner from among the people in lab with you.\r\n    (It's fine, even preferable, to read this project write-up on your own ahead of time, though, so\r\n    you and your partner can hit the ground running in lab.)</p>\r\n    <p>If you're having trouble finding a partner, notify your TA, so that you can be assisted\r\n    in finding one.  If you have not found a partner and notified your TA of the pairing by the end of the lab meeting on <b>Wednesday, March  30</b> you will be assigned a partner and notified via email; once your TA has selected a partner for you, we will not allow you to switch to another one.</p>\r\n    <p><i>You will not receive credit on this assignment if you work on it alone, without the prior consent of the instructor.</i>  (Please note that \"prior consent\" does not include approaching us the day the project is due, having completed it on your own, and telling us that you haven't been able to find a partner.)</p>\r\n    <p>Be sure, too, that you've read the section entitled \"Pair programming\" on the <a href=\"../projectintro.html\">Introduction to the Projects</a>.  The way we're doing business in ICS 22 / CSE 22 is essentially the same as it was in ICS 21 / CSE 21 last quarter, but there are some subtle differences, and it's worth knowing about them up front.</p>\r\n\r\n    <h1>The program</h1>\r\n    <p>Our program is the software for a simplified voting machine with a graphical user interface (GUI).  When started up, it reads information about a single race from an input file, then displays a ballot.  The ballot can be used to cast votes indiscriminately &mdash; there's nothing in our program that forces users to \"log in\" or otherwise identify themselves before casting a vote &mdash; with the votes being counted underneath the covers, but not displayed to the user while the voting is in progress.  After closing the ballot window, the program saves the results of the election into an output file, formatted in a particular way.</p>\r\n\r\n    <h1>Starting point</h1>\r\n    <p>To give you a more realistic context for your project, I've implemented the complete GUI; I've given you the Java code for the classes that comprise the GUI, but you will not need to read, understand, or modify that code in any way.  (Still, you can check it out if you're interested.  Even a cursory glance will demonstrate that coding up even simple user interfaces like this one can be a complicated process!)</p>\r\n    <p>I've also provided a skeleton implementation of the \"model,\" the classes that implement the underlying engine for the program, which handles tasks like reading the input file, writing the output file, and counting the votes.  You are not permitted to modify the signatures of the methods that I've provided in the engine classes.  This restriction is motivated by one practical need: my GUI code expects these methods to have the same names, take the same kinds of parameters, and behave (outwardly) exactly as specified.  If you alter the signatures of these methods, the GUI code will no longer compile or work.</p>\r\n    <p>The starting point is available in a <a href=\"Candidate.zip\">Zip archive</a>.</p>\r\n\r\n    <h1>Getting started on your project using Eclipse</h1>\r\n    <p>It's best if you work on this project (and all subsequent Java projects) within the same Eclipse workspace that you downloaded and used for <a href=\"../Project0/Project0.html\">In-Lab Project #0</a>.  If you haven't done that project, it would be a good idea for you to go back and follow through its steps; it shouldn't take very long, and it will acclimate you to the Eclipse environment that we'll be using for the rest of the quarter.  If you did the assignment, but lost or no longer have access to your workspace, go back to that assignment page and download the workspace again, then continue to use it for the rest of the quarter.</p>\r\n    <p>Follow the same steps as you did in the in-lab assignment to create a project and import the starting point code into it.  Name the project <b>PerfectCandidate</b>.  You'll then be ready to get started.</p>\r\n    <p>Once you've imported the code, you can compile the program, but it will not work correctly until you've implemented at least some of the methods.</p>\r\n\r\n    <h1>What do I need to implement?</h1>\r\n    <p>You'll be writing code in four classes:</p>\r\n    <ul>\r\n    <li><b>Candidate</b>, each object of which represents one candidate on a ballot, consisting of a name, a party affiliation, and the number of votes received by that candidate so far.</li>\r\n    <li><b>Ballot</b>, each object of which represents a single ballot, consisting of an ArrayList of Candidates, as well as the name of the office that is up for a vote.</li>\r\n    <li><b>BallotReader</b>, which consists of a single static method that reads a ballot from an input file.</li>\r\n    <li><b>ResultWriter</b>, which consists of a single static method that writes the election results into an output file in a format specified in detail later in this write-up.</li>\r\n    </ul>\r\n    <p>Each of the methods in these four classes are commented but not implemented; your job will be to fill in the implementation of all of these methods.  You do not need to read, understand, or modify any of the other code.  (You're welcome to read through it if you'd like, but you are not permitted to modify it.)</p>\r\n    <p>I suggest working on these classes in the order listed above.  Once you've implemented Candidate and Ballot, the program should compile and run, though the ballot will always consist of the same candidates &mdash; because the provided BallotReader just constructs a hard-coded ballot instead of reading one from an input file &mdash; and the program will not write any output &mdash; because the provided ResultWriter does nothing.</p>\r\n\r\n    <h1>A word of warning about contracts</h1>\r\n    <p>As you work on this project, you and I have made an agreement, a <i>contract</i>, of sorts.  I've provided the GUI in its entirety; in return, you're required to write your code according to the provided specification.  If your code deviates from the specification &mdash; say, a method returns null when it's not supposed to &mdash; it's entirely possible that my GUI will behave unpredictably or even crash.</p>\r\n    <p>(This illustrates an important point about building large-scale software: When many people work together on a large project, it's important that they agree on what the interfaces between their parts are.  In this case, you and your partner are collaborating with me &mdash; my GUI depends on your engine &mdash; and our agreement is that your engine conforms to the specification provided.  Naturally, the larger the software and the more people and pieces involved, the more important these kinds of agreements become.)</p>\r\n    <p>If you're not sure whether your methods follow the specifications, one way to solve that problem is to test them.  We'll discuss testing a bit later in the quarter, and you'll gradually be required to demonstrate more testing on each project.  For now, you can write code that creates objects, calls methods on them, and prints their output to the console, so that you can check whether the output is correct.  It would be wise to write your tests in a separate class with a main method, so you can execute the program itself normally, or execute the tests by running your test class instead.</p>\r\n\r\n    <h1>Reading the input file</h1>\r\n    <h2>Input file format</h2>\r\n    <p>The program reads ballot information from an input file, an example of which follows:</p>\r\n    <pre>\r\n    Mayor of Simpleton\r\n    3\r\n    Joe Incumbent;Powerful Party\r\n    Mark Challenger;Less Powerful Party\r\n    Gene Unpopular;Nobody Party\r\n    </pre>\r\n    <p>The first line of the input file specifies the name of the office that is being voted upon.  The next line consists of a number that specifies how many candidates are running for the office.  If that number is <i>n</i>, the next <i>n</i> lines each specify a candidate, with the candidate's name appearing on the line first, followed by a semicolon, and followed by the candidate's party affiliation.</p>\r\n    <p>You may assume that the input file will always be properly formatted according to this specification.  If it's not, it's fine for your program to misbehave or even crash; we will only test your program with valid input files.</p>\r\n    <h2>A couple of hints</h2>\r\n\r\n    <ul>\r\n    <li>Scanners are capable of reading one line of input at a time from any input source, including a file.  I suggest always reading the file one line at a time, then processing the line.</li>\r\n    <li>In addition to being able to read one line of input at a time, Scanners can also read one \"token\" at a time.  The definition of a token is flexible and can be handled differently in different circumstances.  By default, tokens are separated by spaces (or line breaks), so that the string \"123 456 789\" contains three tokens: \"123\", \"456\", and \"789\".  However, there are ways to change this behavior; one way is with the useDelimiter() method.  (See the <a href=\"http://java.sun.com/javase/6/docs/api/index.html\">Java API documentation</a> about Scanner for more details.)</li>\r\n    <li>Scanners can also be wrapped around Strings, to be used in breaking the String into smaller pieces.  In this example:\r\n    <pre>\r\n    String numbers = \"123 456 789\";\r\n\r\n    Scanner s = new Scanner(numbers);\r\n\r\n    while (s.hasNextInt())\r\n    {\r\n    System.out.println(s.nextInt());\r\n    }\r\n\r\n    </pre>\r\n    the output of the code fragment is:\r\n    <pre>\r\n    123\r\n    456\r\n    789\r\n    </pre>\r\n    This technique will come in handy for reading information about each candidate, since there are two pieces of information on each line, separated by a semicolon.\r\n    </li>\r\n    </ul>\r\n\r\n    <h1>Formatting your output</h1>\r\n    <p>In this program, you won't just be printing unformatted text to the console using System.out.println; you'll instead be writing a nicely formatted output file that indicates the results of the election.  (Unrealistic as it may be in any but the most local of elections, we'll assume that there is only one voting machine being used by all voters.)  An example of the output format follows:</p>\r\n    <pre>\r\n    RESULTS - Mayor of Simpleton\r\n    ----------------------------\r\n    Joe Incumbent - Powerful Party                 77\r\n    Mark Challenger - Less Powerful Party         105\r\n    Gene Unpopular - Nobody Party                   1\r\n\r\n    WINNER: Mark Challenger - Less Powerful Party\r\n    </pre>\r\n\r\n    <p>The details of the output format are:</p>\r\n    <ul>\r\n    <li>The first line begins with the word \"RESULTS\", followed by a space, a dash, another space, and then name of the office that users voted for.</li>\r\n    <li>A line of dashes, where there exactly as many dashes as there are characters on the first line.</li>\r\n\r\n    <li>For each candidate on the ballot (you can list them in the same order they appear on the ballot; it's not necessary to sort them by the number of votes), with each candidate appearing on a separate line:\r\n    <ul>\r\n    <li>The name of the candidate, a space, a dash, a space, and the candidate's party affiliation.  Collectively, we'll call this the candidate's <i>tag</i>.</li>\r\n    <li>The number of votes received by that candidate.</li>\r\n    <li>The candidate names should be left-justified in the first column of the output.</li>\r\n    <li>The numbers of votes should be right-justified in the last column of the output.</li>\r\n    <li>To calculate how many columns your output should have total, first figure out the number of characters in the longest tag for any candidate.  (In the example above, \"Mark Challenger - Less Powerful Party\" is the longest tag, consisting of 37 characters.)  Then, add 12 to the length of the longest tag.</li>\r\n    </ul>\r\n    </li>\r\n    <li>A blank line appears after all of the candidates are listed with their vote totals.</li>\r\n    <li>Finally, a line that indicates the winner, with the word \"WINNER\", a colon, a space, and the winning candidate's tag.\r\n    <ul>\r\n    <li>In the event of a tie, this line should read \"NO WINNER\" instead.</li>\r\n    </ul>\r\n\r\n    </li>\r\n    </ul>\r\n\r\n    <p>When you want to write formatted output, with left- and/or right-justification within certain numbers of characters, the <b>String.format( )</b> method helps; it knows how to take data of various types, format it according to your specifications, and return it to you as a String.  The first parameter you pass to it is called a <i>format string</i>, which is used to tell it how you'd like the data to be formatted, with placeholders for the data.  Subsequent parameters specify the data that will replace the placeholders.  Here's an example from a hypothetical Person class:</p>\r\n\r\n    <pre>\r\n    String s = \"\";\r\n    s += String.format(\"%-10s: %s\\n\", \"Name\", name);\r\n    s += String.format(\"%-10s: %s\\n\", \"Title\", title);\r\n    s += String.format(\"%-10s: %4d\\n\", \"Height\", height);\r\n    s += String.format(\"%-10s: %4d\\n\", \"Weight\", weight);\r\n    System.out.println(s);\r\n    </pre>\r\n\r\n    <p>This code might generate the following output for a hypothetical person and print it to the console:</p>\r\n\r\n    <pre>\r\n    Name      : John Doe\r\n    Title     : CEO\r\n    Height    :   71\r\n    Weight    :  190\r\n    </pre>\r\n\r\n    <p>In the format string, each occurrence of the <b>%</b> character indicates a placeholder for a piece of data.  It is followed by a letter such as <b>s</b> (for a String) or <b>d</b> (for an integer), with an optional number in front of it that indicates justification (a positive number means to right-justify, while a negative number means to left-justify).  In the example code above, you can see the placeholder <b>%-10s</b>, which means to print a String left-justified within 10 characters (i.e., with extra space added after it so that it fills up at least 10 characters).  The placeholder <b>%4d</b> means to print an integer right-justified within 4 characters (i.e., with extra space added before it, if needed).  The placeholder <b>%s</b> simply means to print a String, with no extra spaces added before or after it.</p>\r\n\r\n    <p>If the format string has two placeholders in it, as in the example code above, you'll need to supply it with two parameters that supply the data.  For example, this line:</p>\r\n\r\n    <pre>\r\n    s += String.format(\"%-10s: %4d\\n\", \"Height\", height);\r\n    </pre>\r\n\r\n    <p>...tells the method to left-justify the text \"Height\" within 10 characters, follow that by a colon and a space, and follow that with the integer height right-justified within 4 characters.  The <b>\\n</b> you see at the end of the format string says to insert a newline character, so that subsequent characters will appear on the next line when the String is printed.</p>\r\n\r\n    <p>This is a great tool that you can use to format your output to make it look nice; I expect you to use it to format your output as specified.</p>\r\n\r\n    <h1>What else might I need from the Java library?</h1>\r\n\r\n    <p>You will find some or all of the following classes and methods in the Java library useful.  Sometimes, you'll find that you need to know details about how they work that we haven't yet talked about in class.  When you need more information about them, see the <a href=\"http://java.sun.com/javase/6/docs/api/\">Java API documentation</a>, which describes all of the classes and methods in the Java library.  (You probably won't find that you'll need to read all of the documentation.  The trick with documentation, when there's as much of it as there is in the Java API, is to know what you're looking for and focus on that, rather than reading everything.)</p>\r\n\r\n    <ul>\r\n    <li>ArrayList</li>\r\n\r\n    <li>FileReader</li>\r\n    <li>FileWriter</li>\r\n    <li>IOException</li>\r\n    <li>PrintWriter</li>\r\n    <li>Scanner</li>\r\n    <li>String.format( )</li>\r\n\r\n    <li>String.length( )</li>\r\n    </ul>\r\n\r\n    <p>Note that you may well be able to finish this project without using everything on the list above.  Java has a large, industrial-strength library, which means that there are often many ways to accomplish the same goal.  The ones listed above are the ones that will likely present the simplest path to a solution, but your prior experience may have turned you on to different choices; for the most part, that's fine.</p>\r\n\r\n    <h1>Testing</h1>\r\n\r\n    <p>Perhaps the simplest way to test a program is to execute it and observe its output for various inputs.  For a program such as this one, whose input comes from a user interface, in addition to an input file, this means running the program, trying various combinations of inputs by hand, and observing the program's behavior.  The primary advantage of such a testing strategy is that it doesn't require you to write additional code.  On the other hand, the need for you to actively run the test cases &mdash; by typing and/or clicking your mouse one step at a time &mdash; and assess the output by reading it and comparing it to the expected output is a major disadvantage, particular with regard to the <i>repeatability</i> of the tests.  In other words, if you want to run the tests several times as you debug your program, you'll have to manually execute your tests each time, manually comparing the output to the expected output.  Still, for our relatively simple program, this strategy will suffice.  As the quarter progresses, we'll discuss and use better testing strategies.</p>\r\n\r\n    <p>To satisfy the <b>Testing</b> portion of this project, you'll write a <i>test plan</i>.  A test plan is a series of <i>test cases</i>, each of which is specifically chosen to demonstrate that some particular portion of the program works correctly for a particular class of input.  For example, here is a test case which addresses the problem of attempting to deposit a negative amount of money into a savings account using an ATM:</p>\r\n\r\n    <blockquote>\r\n    <p><b>Test Case:</b> Negative deposit amount into savings</p>\r\n    <p><b>Purpose:</b> Ensures that users may not deposit a negative amount of money into a savings account.  Only positive deposit amounts should be legal.</p>\r\n    <p><b>Steps:</b>\r\n    <ol>\r\n    <li>From the program's main command prompt, enter a \"view balance\" command.</li>\r\n    <li>When asked to select an account to view the balance of, select the savings account.</li>\r\n    <li>From the program's main command prompt, enter the \"deposit\" command.</li>\r\n    <li>When asked to select an account as the target of the deposit, select the savings account.</li>\r\n    <li>When asked to enter an amount, enter a negative amount, such as $-15.</li>\r\n    </ol>\r\n\r\n    </p>\r\n    <p><b>Expected Output:</b> After entering the negative amount, the program should display an error message indicating that negative amounts may not be deposited.  The savings account balance should not have changed.</p>\r\n    <p><b>Additional Comments:</b> It might be useflu to run this test cases for two or three different negative amounts.</p>\r\n    </blockquote>\r\n\r\n    <p>You should format your test cases similarly to the style above, including <b>Test Case</b>, <b>Purpose</b>, <b>Steps</b>, and <b>Expected Output</b> sections.  If the contents of the input file are relevant to a particular test case &mdash; they often will be &mdash; include a section <b>Input File</b> that shows the input file's contents.  If you do not have any additional comments to make for a particular test case, you may leave the <b>Additional Comments</b> section out.</p>\r\n\r\n    <p>You may use any software you'd like to write your test plan, but you may not handwrite it.  Submit it in either Microsoft Word format (.doc), Rich Text Format (.rtf), PDF format, or as a text file.  Unfortunately, if we can't open your document, we won't be able to grade it, so please be sure to use one of these four formats.</p>\r\n\r\n    <p>Note, also, that you are required work on your test plan using the same \"pair programming\" technique that you use for writing your code.  Two heads are really better than one when it comes to testing.</p>\r\n\r\n    <p>Take a few minutes when writing your test plan to make sure that it's written clearly; we're certainly not looking for fine literature here, but a few minutes spent cleaning up the grammar and spelling will be much appreciated, and will be reflected in the score you receive.</p>\r\n\r\n    <h1>Normal, error, and boundary cases</h1>\r\n    <p>There are three kinds of test cases that I'd like you to focus your attention on:</p>\r\n\r\n    <ul>\r\n    <li><i>Normal cases.</i>  A normal case is a test case that exercises some ordinary function of the program using valid input.  For example, depositing $20 into an ATM constitutes a normal case, since it is legal.  We would expect to see the account's balance increase by $20.</li>\r\n    <li><i>Error cases.</i>  An error case is a test case that verifies that the program correctly handles invalid input or other error conditions.  For example, withdrawing $30 from an account with only $20 in it constitutes an error case, since the program will not perform normally (i.e., withdraw the money) in this case.</li>\r\n    <li><i>Boundary cases.</i>  Sometimes, programs work correctly in normal cases as well as most error cases, but misbehave on the <i>boundary</i> between the normal and error cases.  For example, it is useful in an ATM to test what happens when you attempt to withdraw the exact balance of an account (leaving $0 remaining in it).  Test cases such as these often highlight a program's most serious flaws, when you've made a mistake such as using \"&lt;\" where you should have used \"&lt;=\".</li>\r\n    </ul>\r\n\r\n    <h1>Additional Eclipse skills that might come in handy</h1>\r\n    <h2>Creating a new class in Eclipse</h2>\r\n    <p>It's possible &mdash; and, in fact, perfectly reasonable &mdash; to do this project without creating any new classes.  Still, in case you want to create any, or in preparation for future projects (where you will definitely be creating new classes), let me take you through the steps in Eclipse for creating a new class.</p>\r\n    <p>When you want to create a new class in your <b>PerfectCandidate</b> project:</p>\r\n    <ul>\r\n    <li>Make sure that your <b>PerfectCandidate</b> project is selected in the Package Explorer.  (In other words, click once on the entry for <b>PerfectCandidate</b>, so that it is highlighted.)</li>\r\n    <li>From the <b>File</b> menu, select <b>New</b>, then <b>Class</b>.</li>\r\n\r\n    <li>You'll then see a dialog box pop up that looks like this:<br />\r\n    <br>\r\n    <img src=\"Eclipse-NewClass.jpg\" alt=\"New Class Dialog\" /><br /><br />\r\n    In this dialog, you can tell Eclipse what it needs to know in order to create your new class.  The only thing you'll need to specify is the name of the class, which you can type into the <b>Name:</b> field, where the cursor is displayed in the above screenshot; the default is fine for all of the other settings (for now).  When you type the name of the class, you'll see a warning appear near the top of the dialog that says \"The use of the default package is discouraged\"; it's safe to ignore that warning for the time being.</li>\r\n    <li>After you've typed the name of your new class, click the Finish button in the class creation dialog and Eclipse will create a new class for you.  A new <b>.java</b> file with the appropriate name will be added to your project, and it will contain an empty class declaration, ready for you to write code into it.</li>\r\n    </li>\r\n    </ul>\r\n\r\n\r\n    <h1>Deliverables</h1>\r\n\r\n    <p>It is only necessary for one of the two partners to submit the project; the TAs are aware of the partnerships, and will figure out which project submissions belong to which pairing.  Put the names and student IDs of both partners in a comment at the top of each of your <b>.java</b> files, then submit all of the .java files, including the ones that we provided to you, to Checkmate.  Also, submit your test plan in either Microsoft Word format (.doc), Rich Text Format (.rtf), PDF format, or as a text file.  Please do not turn in the <b>.class</b> files, or other files generated by Eclipse.  Afterward, take a moment to be sure that you submitted all of the files; if you missed one, we won't be able to compile and run your program, which can result in a substantial penalty, since we won't be able to evaluate your program's correctness.</p>\r\n\r\n    <p>Follow <a href=\"../submittingprojects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version by accident.</p>\r\n    </div>\r\n\r\n\r\n\t  <h3>Acknowledgements</h3>\r\n\t      <ul class=\"nomarker\">\r\n\t          <li>Imported from Eric Hennigan's ICS 22 which was in turn adapted from Alex Thornton's version which he\r\n\t      developed over many years.</li>\r\n\t    </ul>\r\n\r\n\r\n\r\n  </div>\r\n  </body>\r\n</html>\r\n\u0000", "encoding": "ascii"}