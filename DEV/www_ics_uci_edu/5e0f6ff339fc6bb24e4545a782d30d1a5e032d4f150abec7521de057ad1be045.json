{"url": "https://www.ics.uci.edu/~thornton/ics33/CodeExamples/Inheritance/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 33 Summer 2013, Code Example: Inheritance</title>\n\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 33 Summer 2013 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../ProjectGuide\">Project Guide</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 33 Summer 2013<br />\n   Code Example: Inheritance</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Background</p>\n\n<p>Programming languages like Python aim to improve our ability to write programs.  The goal is for us to be able to write code that reads naturally (given an understanding of how the language works), that means what it says, that meets the necessary requirements, and that is amenable to being changed.</p>\n\n<p>The last of those is a very big deal indeed.  In real-world scenarios, code lives a lot longer than you might think; it's not at all uncommon for systems to be in real use for ten years or more.  (Checkmate, the system that you use to submit your projects, was originally written around 2002.)  Yet, in those ten years, it's not as though the systems don't change.  New features need to be added, existing problems need to be fixed, all while preserving the original functionality without breaking it, and often the later changes are written by people other than those who wrote the original system.</p>\n\n<p>The primary antidote to this problem is to divide up a program into as many separate pieces as possible, with each depending on as little knowledge as possible about the others, and with each problem solved once and only once.  Previously, we've seen that functions provide some assistance with this: for a function to make productive use of another function, all it needs to know is the <i>contract</i> that the other function specifies (i.e., what arguments it accepts and what results it gives back).  So one way to divide up a large program is into many interacting functions, with each one solving a single problem, and each making use of other functions that solve smaller parts of the problem.  And if we ever want to write two functions that are partly the same, our best move is to take the parts that are similar and write a third function that implements them, then to have the other two functions call the third &mdash; this is vastly better than copying and pasting the similarity in two places.</p>\n\n<p>We've seen, too, how classes also form part of the solution to the problem of organizing a large program, by allowing us to define new kinds of objects other than the ones that are built into Python.  Like the built-in kinds of objects, ours can store information in attributes and can provide methods to allow us to interact with them.  And by providing methods with the same signatures, two or more different kinds of objects can be used interchangeably.</p>\n\n<p>But what do we do about the problem of two classes that both need the same code &mdash; the same methods with the same bodies.  The answer lies in a Python feature called <i>inheritance</i>, which allows us to define a new kind of class whose objects behave like objects of another class that's already been defined, <i>except</i> in the ways that we specify.  We've seen this previously when we define new kinds of exceptions:</p>\n\n<blockquote><pre>\nclass GameError(Exception):\n    pass\n</pre></blockquote>\n\n<p>This says \"A GameError object is just like any other Exception object and, other than their types, it doesn't differ from them in any way.\"  (The \"just like any other Exception object\" part is what we get when we put \"Exception\" in parentheses after the name of the class when we define it; the \"doesn't differ from them in any way\" part is because the body of our new class simply says \"pass\".)  Automatically, without me having to say anything else, I can now raise a GameError the same way I raise other kinds of exceptions in Python; that GameError will carry with it a traceback and other things that every other kind of exception carries.  And to get all of that, all I had to do was say that GameError <i>inherits</i> from Exception &mdash; which is the technical term for putting Exception in parentheses at the top of GameError's definition.</p>\n\n<p>Inheritance is a very powerful technique for allowing many classes to share common behavior without having to copy and paste that behavior into all of them.  This example explores the details of that technique and demonstrates how it can be used to solve a practical problem.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Namespaces and lookup rules</p>\n\n<p>Suppose you have an object <b>x</b> of some class <b>C</b> and you write the following expression:</p>\n\n<blockquote><pre>\nx.hello(7, 'boo')\n</pre></blockquote>\n\n<p>There is a set of rules that Python uses to determine how to evaluate an expression like this.  They start like this:</p>\n\n<ul>\n  <li>As we've seen every object has <i>attributes</i>.  Those attributes are stored in the object's <i>namespace</i>, a dictionary inside of the object (and note that the dictionary has a name, <b>x.__dict__</b>).  Given the expression above, Python will first check to see if <b>x</b> contains an attribute called <b>hello</b> and, if so, whether it is a function that can be called with two arguments.\n    <ul>\n      <li>If <b>x</b> has no attribute <b>hello</b>, Python continues to the next rule, looking in the next possible place for <b>hello</b>.</li>\n      <li>If <b>x</b> has an attribute <b>hello</b> that is a function that can be called with two arguments, it does so; the result of the function is the result of the expression.</li>\n      <li>If <b>x</b> has an attribute <b>hello</b> that is not a function, or that is a function that cannot be called with two arguments, Python raises an exception.</li>\n    </ul>\n  </li>\n  <li>If <b>hello</b> doesn't appear in the object <b>x</b>, Python continues its search in the <i>class</i> of <b>x</b>.  Classes, too, have namespaces associated with them, and those namespaces are also implemented as dictionaries.  <b>C.__dict__</b> or <b>type(x).__dict__</b> would give you back that dictionary.  Inside of a class' dictionary is a collection of the methods and class variables defined in the class.  So Python will check to see if the class C contains a method <b>hello</b> that takes three arguments (the first being the \"self\" argument, then the other two that we passed).\n    <ul>\n      <li>If the class <b>C</b> has a <b>hello</b> method that can take three arguments, it calls the method; the result of the method is the result of the expression.</li>\n      <li>If the class <b>C</b> has a <b>hello</b> method that cannot take three arguments, Python raises an exception.</li>\n      <li>If the class <b>C</b> does not have a <b>hello</b> method, all is not lost yet, but we need to know more of the story...</li>\n    </ul>\n  </li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Superclasses and subclasses</p>\n\n<p>When we say that a class inherits from another class, we're introducing a relationship between the two classes.  Philosophically, that relationship is what is sometimes called an \"is a\" relationship; for example, our class GameError inherited from Exception, so we've effectively said \"A GameError <i>is an</i> Exception.\"  Implicit in that relationship is the understanding that GameErrors can do whatever Exceptions can do, without us having to say any more about it.  \"A GameError is an Exception.\"  That's a powerful thing to be able to say.</p>\n\n<p>When we've established such a relationship, we say that Exception is a <i>superclass</i> of GameError, and that GameError is a <i>subclass</i> of Exception.  (Exception is also sometimes called a <i>base class</i> of GameError; these terms are used fairly interchangeably, though the term \"superclass\" is more common.)</p>\n\n<p class=\"subtitle\">The 'object' class</p>\n\n<p>Perhaps unbeknownst to you, you've been using inheritance already in every class you've ever written.  That's because classes that don't specify a superclass are automatically given a superclass called <b>object</b>.  In other words, this class definition:</p>\n\n<blockquote><pre>\nclass Person:\n    pass\n</pre></blockquote>\n\n<p>is equivalent to this one:</p>\n\n<blockquote><pre>\nclass Person(object):\n    pass\n</pre></blockquote>\n\n<p>We don't generally bother to write the long form of this, since it is implied by the shorter one, but we do need to understand that this relationship is in place.  If, philosophically, an inheritance relationship establishes an \"is a\" relationship between the two classes, then we've effectively said \"A Person is an object.\"  And that's not very surprising, when you think about it for a minute; a class is a blueprint for a kind of object, so it's no surprise that anything you create from that blueprint \"is an object.\"</p>\n\n<p>You might be wondering why there's a class called <b>object</b> and why every other class would inherit from it.  The reason is that this is a way for Python to provide behavior that's common to all objects automatically.  For example, you can display any kind of object in the Python interpreter:</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; Person()\n&lt;__main__.Person object at 0x02EC1DD0&gt;\n</pre></blockquote>\n\n<p>Why is that?  Because the <b>object</b> class provides an implementation of the <b>__repr__</b> method that controls how an object is displayed in the interpreter.  Unless you say otherwise, all objects of your class use that implementation, for reasons we'll see shortly.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Namespaces and superclasses</p>\n\n<p>Consider the following two classes <b>A</b> and <b>B</b>.</p>\n\n<blockquote><pre>\nclass A:\n    def foo(self, x):\n        return x * x\n\n    def bar(self, x):\n        return x + x\n\n\nclass B(A):\n    def bar(self, x):\n        return x + 1\n\n    def boo(self, x):\n        return x * 3\n</pre></blockquote>\n\n<p>From this, we see that the class <b>B</b> inherits from the class <b>A</b>, which, in turn, inherits from the built-in class <b>object</b>.  Neither <b>A</b> nor <b>B</b> objects have any attributes (because we never assigned anything to <b>self.<i>anything</i></b>), but each of these classes has a namespace which contain (more or less) the following things:</p>\n\n<table class=\"normal\">\n  <tr class=\"top\"><td>A</td></tr>\n  <tr><td>method <b>foo(self, x)</b></td></tr>\n  <tr><td>method <b>bar(self, x)</b></td></tr>\n</table>\n\n<br />\n\n<table class=\"normal\">\n  <tr class=\"top\"><td>B</td></tr>\n  <tr><td>method <b>bar(self, x)</b></td></tr>\n  <tr><td>method <b>boo(self, x)</b></td></tr>\n</table>\n\n<p>The <b>object</b> class, too, has a namespace, which contains many things that Python provides automatically to every kind of object.</p>\n\n<p>The big question, then, is what happens when we call various methods on <b>A</b> and <b>B</b> objects.  Suppose we have an object <b>q</b> of the class <b>A</b> and an object <b>r</b> of the class <b>B</b>.  Here are some examples:</p>\n\n<ul>\n  <li><b>q.foo(13)</b>\n    <ul>\n      <li>Python first looks for an attribute <b>foo</b> in the object <b>q</b>.  <b>q</b> has no attributes, so Python continues searching elsewhere.</li>\n      <li>Next, Python looks for <b>foo</b> in the class <b>A</b>'s namespace.  The class <b>A</b> contains a method <b>foo</b>, and that method can be called with two arguments (<b>self</b> = <b>q</b>, <b>x</b> = 13), so that's what Python does.  The method returns the square of <b>x</b>, so the result is 169.</li>\n    </ul>\n  </li>\n  <li><b>r.bar(12)</b>\n    <ul>\n      <li>Python first looks for an attribute <b>bar</b> in the object <b>r</b>, which has no attributes.</li>\n      <li>Next, Python looks for <b>bar</b> in the class <b>B</b>'s namespace (since <b>r</b> is a <b>B</b> object).  The class <b>B</b> contains a method <b>bar</b>, and that method can be called with two arguments (<b>self</b> = <b>r</b>, <b>x</b> = 12), so that's what Python does.  The method returns <b>x</b> + 1, so the result is 13.</li>\n    </ul>\n  </li>\n  <li><b>r.foo(10)</b>\n    <ul>\n      <li>First, Python fails to find an attribute <b>foo</b> in <b>r</b>.</li>\n      <li>Next, Python fails to find <b>foo</b> in <b>B</b>'s namespace.</li>\n      <li>All is not lost.  If <b>foo</b> isn't found in <b>B</b>'s namespace, Python continues searching in the namespace of <b>B</b>'s superclass.  <b>B</b>'s superclass is <b>A</b>, so Python checks to see if the class <b>A</b> defines <b>foo</b>.  And, as we can see, it does, and it takes the right arguments!  So Python calls <b>A</b>'s <b>foo</b> method, which squares its argument and returns 100.</li>\n    </ul>\n  </li>\n  <li><b>q.boo(9)</b>\n    <ul>\n      <li>Python fails to find an attribute <b>boo</b> in <b>q</b>.</li>\n      <li>Python also fails to find <b>boo</b> in the class <b>A</b>'s namespace.</li>\n      <li>Finally, Python looks in the class <b>object</b>'s namespace, but doesn't find <b>boo</b> there, either.</li>\n      <li>So this object has no <b>boo</b> method; Python raises an exception.</li>\n    </ul>\n  </li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The story behind the story</p>\n\n<p>The general rule shown above can be boiled down simply: when you try to access something belonging to an object, Python first checks if the object has it, then checks if the object's class has it, then checks if its class' superclass has it, and so on, until it either finds what it's looking for or runs out of places to look.</p>\n\n<p>That rule isn't arbitrary; there's actually a very good reason for it, and if you know the reason, the rule is easier to remember.  When you write a class that inherits from another class, you're essentially saying \"These things are like those other things, <i>except</i> here's how they're different.\"  The subclass specifies only the things that make its objects different from objects of the superclass; in every other way, the intent is that subclass objects are just like superclass objects.</p>\n\n<p>To make that idea a reality, Python conducts its search by starting from more specific types and moving to less specific types.  If it finds a method in a subclass, that takes precedence over what it might find in the superclass &mdash; because if a method is written in a subclass, it's intended to be part of what makes that subclass' objects different from objects of the superclass.  If not, it continues searching in the superclass, because if the subclass doesn't say that its objects are different, they should act just like objects of its superclass do.</p>\n\n<p>Consider these two classes:</p>\n\n<blockquote><pre>\nclass Person:\n    def acting_ability(self):\n        return 0\n\n    def singing_ability(self):\n        return 0\n\n\nclass ProfessionalSinger(Person):\n    def singing_ability(self):\n        return 10\n</pre></blockquote>\n\n<p>The spirit of what we wrote in these two classes is this:</p>\n\n<ul>\n  <li>In general, people have no acting ability and no singing ability.</li>\n  <li>However, professional singers have a higher singing ability, yet they have no acting ability; in terms of acting, they're just like everyone else.</li>\n</ul>\n\n<p>What's most useful about this is that it's all automatic.  If you have an object of one of these classes and call the <b>singing_ability</b> method, the \"right thing\" happens &mdash; if it's a Person object, the answer is 0; if it's a ProfessionalSinger, the answer is 10; if it's anything else, the result is an exception.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The complete code example</p>\n\n<p>In lecture, we explored an example of writing a video game, specifically a first-person shooter in which the player navigates the world and shoots three-headed monsters with various kinds of weapons.  We obviously didn't build the entire game; we focused our energy on one tiny slice of it:</p>\n\n<ul>\n  <li>There are many kinds of weapons.  We implement two kinds: a <i>water pistol</i> (which fires bursts of water) and a <i>trout gun</i> (which fired fish, given that the three-headed monsters are allergic).</li>\n  <li>Every kind of weapon has an amount of <i>ammunition</i>, i.e., the number of times it can be fired before it has no more ammunition (no more bullets, no more rockets, no more water, no more fish, or whatever else it fires).</li>\n  <li>Every kind of weapon can be fired, provided that it has ammunition in it.</li>\n  <li>Weapons can be <i>blocked</i>, which means that they are unable to fire even though they have ammunition in them.  Water might corrode the water pistol gradually; the fish fired by the trout gun might fall apart in the barrel of the gun and jam it.  What causes a weapon to be blocked &mdash; and how often it is blocked &mdash; depends on what kind of weapon it is.</li>\n</ul>\n\n<p>Putting these ideas together, we realized that there were some things that all weapons had in common, while there were other things that made them different from one another.  This is a classic situation in which inheritance can be useful, with the commonalities being implemented in a superclass and the specifics being implemented in subclasses.</p>\n\n<p>The code example below implements these ideas using inheritance.</p>\n\n<ul>\n  <li><a href=\"weapons.py\">weapons.py</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}