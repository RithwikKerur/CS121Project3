{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/Makefile.mak", "content": "# file: Makefile.mak\n# descrption: Microsoft NMake makefile\n# authors: Andrea Vedaldi, Brian Fulkerson, Mircea Cimpoi\n\n# Copyright (C) 2007-12 Andrea Vedaldi and Brian Fulkerson.\n# All rights reserved.\n#\n# This file is part of the VLFeat library and is made available under\n# the terms of the BSD license (see the COPYING file).\n\n# --------------------------------------------------------------------\n#                                                        Customization\n# --------------------------------------------------------------------\n# To modify this script to run on your platform it is usually\n# sufficient to modify the following variables:\n#\n# ARCH: Either win32 or win64 [win64]\n# DEBUG: Set to yes to ativate debugging [no]\n# MATLABROOT: Path to MATLAB\n# MSVSVER: Visual Studio version (e.g. 80, 90, 100) [90 for VS 9.0]\n# MSVCROOT: Visual C++ location [$(VCInstallDir)].\n# WINSDKROOT: Windows SDK location [$(WindowsSdkDir)]\n#\n# Note that some of these variables depend on the architecture\n# (either win32 or win64).\n\nVER = 0.9.20\nARCH = win64\nDEBUG = no\nBRANCH = v$(VER)-$(ARCH)\nMSVSVER =\nMSVCROOT = $(VCINSTALLDIR)\nWINSDKROOT = $(WINDOWSSDKDIR)\nGIT = git\n\n!if \"$(MSVCROOT)\" == \"\"\nMSVCROOT = C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\n!endif\n\n!if \"$(WINSDKROOT)\" == \"\"\nWINSDKROOT = C:\\Program Files\\Microsoft SDKs\\Windows\\v7.0A\n!endif\n\n!include make/nmake_helper.mak\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 32-bit\n!if \"$(ARCH)\" == \"win32\"\n!message === COMPILING FOR 32-BIT\n\nMATLABROOT = C:\\Program Files (x86)\\MATLAB\\R2010b\nMEX = \"$(MATLABROOT)\\bin\\mex.bat\"\nMEXOPT = \"$(MATLABROOT)\\bin\\win32\\mexopts\\msvc$(MSVSVER)opts.bat\"\nMEXEXT = mexw32\nMEX_FLAGS =\n\nCC = \"$(MSVCROOT)\\bin\\cl.exe\"\nLINK = \"$(MSVCROOT)\\bin\\link.exe\"\nMSVCR_PATH = $(MSVCROOT)\\redist\\x86\\Microsoft.VC$(MSVSVER).CRT\n\nLFLAGS = /MACHINE:X86 \\\n         /LIBPATH:\"$(MSVCROOT)\\lib\" \\\n         /LIBPATH:\"$(WINSDKROOT)\\lib\"\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 64-bit\n!elseif \"$(ARCH)\" == \"win64\"\n!message === COMPILING FOR 64-BIT\n\nMATLABROOT = C:\\Program Files\\MATLAB\\R2010b\nMEX = \"$(MATLABROOT)\\bin\\mex.bat\"\nMEXOPT = \"$(MATLABROOT)\\bin\\win64\\mexopts\\msvc$(MSVSVER)opts.bat\"\nMEXEXT = mexw64\nMEX_FLAGS = -largeArrayDims\n\nCC = \"$(MSVCROOT)\\bin\\amd64\\cl.exe\"\nLINK = \"$(MSVCROOT)\\bin\\amd64\\link.exe\"\n!if $(MSVSVER) >= 100\nMSVCR_PATH = $(MSVCROOT)\\redist\\x64\\Microsoft.VC$(MSVSVER).CRT\n!else\nMSVCR_PATH = $(MSVCROOT)\\redist\\amd64\\Microsoft.VC$(MSVSVER).CRT\n!endif\n\nLFLAGS = /MACHINE:X64 \\\n         /LIBPATH:\"$(MSVCROOT)\\lib\\amd64\" \\\n         /LIBPATH:\"$(WINSDKROOT)\\lib\\x64\"\n!else\n!error ARCH = $(ARCH) is an unknown architecture.\n!endif\n\n# --------------------------------------------------------------------\n#                                                                Flags\n# --------------------------------------------------------------------\n# Debug info is embedded in .obj and .lib files (CodeView /Z7 option)\n# but in .pdb files for .exe and .dll (since the linker does not\n# produce CodeView output anymore).\n#\n# CFLAGS\n#   /nologo            : CL does not display splash\n#   _CRT_NO_DEPRECATE  : Do not deprecate `insecure' fscanf, snprintf, ...\n#   __LITTLE_ENDIAN__  : Signal little endian architecture\n#   /I.                : Add VLROOT to include search path\n#   /MD                : Multi-thread run-time library dynamically linked\n#   /TC                : Source code is C (not C++)\n#   /W3                : Usa all warnings\n#   /Zp8               : Align structures to 8 bytes\n#   /Ox                : Turn on optimizations\n#   /D\"DEBUG\"          : [DEBUG] Turn on debugging in VLFeat\n#   /Z7                : [DEBUG] Embedded CodeView debug info in .obj\n#   /D\"NDEBUG\"         : [NO DEBUG] Switches off asserts\n#\n# LFLAGS\n#   /NOLOGO            : LINK does not display splash\n#   /INCREMENTAL:NO    : No incremental linking\n#   /MANIFEST          : See DLL HELL below\n#   /DEBUG             : [DEBUG] Generate debug info (.pdb files)\n#\n# MEX_FLAGS\n#   -I                 : Include VLFeat\n#   -L                 : Add a library search path\n#   -l                 : Link a dll\n#\n# ======================= ABOUT THE DLL HELL =========================\n#\n# This makefile compiles VLFeat to make use of the side-by-side\n# deployment model, redestribtin the appropraite Visual C runtime\n# library with the library and executables. In Visual Studio < 10.0\n# this meant including a manifest file, while in version >= 10.0 this\n# requirement has been relaxed.\n#\n# References:\n#   http://www.codeguru.com/forum/showthread.php?t=408061\n#   http://mariusbancila.ro/blog/2010/03/24/visual-studio-2010-changes-for-vc-part-5\n#   http://social.msdn.microsoft.com/Forums/is/vcgeneral/thread/ca9177b2-2d02-42d8-8892-c6a25e6cfadb\n#\n\nbindir = bin\\$(ARCH)\nmexdir = toolbox\\mex\\$(MEXEXT)\nobjdir = $(bindir)\\objs\n\nCFLAGS = /nologo /TC /MD \\\n         /D\"_CRT_SECURE_NO_DEPRECATE\" \\\n         /D\"__LITTLE_ENDIAN__\" \\\n         /D\"VL_DISABLE_AVX\" \\\n         /I. \\\n         /W1 /Zp8 /openmp\n\nLFLAGS = $(LFLAGS) /NOLOGO \\\n         /INCREMENTAL:NO \\\n         /MANIFEST\n\n!if \"$(DEBUG)\" != \"no\"\n!message === DEBUGGING ON\nCFLAGS = $(CFLAGS) /Z7 /D\"DEBUG\"\nLFLAGS = $(LFLAGS) /DEBUG\nMEX_FLAGS = $(MEX_FLAGS) -g\n!else\n!message === DEBUGGING OFF\nCFLAGS = $(CFLAGS) /D\"NDEBUG\" /Ox\n!endif\n\nDLL_CFLAGS = /D\"VL_BUILD_DLL\"\nEXE_LFLAGS = $(LFLAGS) /LIBPATH:\"$(bindir)\" vl.lib\nMEX_FLAGS = $(MEX_FLAGS) -f $(MEXOPT) -I. -Itoolbox -L\"$(bindir)\" -lvl\n\nlibsrc = \\\n  vl\\aib.c \\\n  vl\\array.c \\\n  vl\\covdet.c \\\n  vl\\dsift.c \\\n  vl\\fisher.c \\\n  vl\\generic.c \\\n  vl\\getopt_long.c \\\n  vl\\gmm.c \\\n  vl\\hikmeans.c \\\n  vl\\hog.c \\\n  vl\\homkermap.c \\\n  vl\\host.c \\\n  vl\\ikmeans.c \\\n  vl\\imopv.c \\\n  vl\\imopv_sse2.c \\\n  vl\\kdtree.c \\\n  vl\\kmeans.c \\\n  vl\\lbp.c \\\n  vl\\liop.c \\\n  vl\\mathop.c \\\n  vl\\mathop_avx.c \\\n  vl\\mathop_sse2.c \\\n  vl\\mser.c \\\n  vl\\pgm.c \\\n  vl\\quickshift.c \\\n  vl\\random.c \\\n  vl\\rodrigues.c \\\n  vl\\scalespace.c \\\n  vl\\sift.c \\\n  vl\\slic.c \\\n  vl\\stringop.c \\\n  vl\\svm.c \\\n  vl\\svmdataset.c \\\n  vl\\vlad.c\n\ncmdsrc = \\\n  src\\aib.c \\\n  src\\mser.c \\\n  src\\sift.c \\\n  src\\test_gauss_elimination.c \\\n  src\\test_getopt_long.c \\\n  src\\test_gmm.c \\\n  src\\test_heap-def.c \\\n  src\\test_host.c \\\n  src\\test_imopv.c \\\n  src\\test_kmeans.c \\\n  src\\test_liop.c \\\n  src\\test_mathop.c \\\n  src\\test_mathop_abs.c \\\n  src\\test_nan.c \\\n  src\\test_qsort-def.c \\\n  src\\test_rand.c \\\n  src\\test_sqrti.c \\\n  src\\test_stringop.c \\\n  src\\test_svd2.c \\\n  src\\test_threads.c \\\n  src\\test_vec_comp.c\n\ncmdsrc = \\\n  src\\aib.c \\\n  src\\mser.c \\\n  src\\sift.c \\\n  src\\test_gauss_elimination.c \\\n  src\\test_getopt_long.c \\\n  src\\test_gmm.c \\\n  src\\test_heap-def.c \\\n  src\\test_host.c \\\n  src\\test_imopv.c \\\n  src\\test_kmeans.c \\\n  src\\test_liop.c \\\n  src\\test_mathop.c \\\n  src\\test_mathop_abs.c \\\n  src\\test_nan.c \\\n  src\\test_qsort-def.c \\\n  src\\test_rand.c \\\n  src\\test_sqrti.c \\\n  src\\test_stringop.c \\\n  src\\test_svd2.c \\\n  src\\test_threads.c \\\n  src\\test_vec_comp.c\n\nmexsrc = \\\n  toolbox\\aib\\vl_aib.c \\\n  toolbox\\aib\\vl_aibhist.c \\\n  toolbox\\fisher\\vl_fisher.c \\\n  toolbox\\geometry\\vl_irodr.c \\\n  toolbox\\geometry\\vl_rodr.c \\\n  toolbox\\gmm\\vl_gmm.c \\\n  toolbox\\imop\\vl_imdisttf.c \\\n  toolbox\\imop\\vl_imintegral.c \\\n  toolbox\\imop\\vl_imsmooth.c \\\n  toolbox\\imop\\vl_imwbackwardmx.c \\\n  toolbox\\imop\\vl_tpsumx.c \\\n  toolbox\\kmeans\\vl_hikmeans.c \\\n  toolbox\\kmeans\\vl_hikmeanspush.c \\\n  toolbox\\kmeans\\vl_ikmeans.c \\\n  toolbox\\kmeans\\vl_ikmeanspush.c \\\n  toolbox\\kmeans\\vl_kmeans.c \\\n  toolbox\\misc\\vl_alldist.c \\\n  toolbox\\misc\\vl_alldist2.c \\\n  toolbox\\misc\\vl_binsearch.c \\\n  toolbox\\misc\\vl_binsum.c \\\n  toolbox\\misc\\vl_cummax.c \\\n  toolbox\\misc\\vl_getpid.c \\\n  toolbox\\misc\\vl_hog.c \\\n  toolbox\\misc\\vl_homkermap.c \\\n  toolbox\\misc\\vl_ihashfind.c \\\n  toolbox\\misc\\vl_ihashsum.c \\\n  toolbox\\misc\\vl_inthist.c \\\n  toolbox\\misc\\vl_kdtreebuild.c \\\n  toolbox\\misc\\vl_kdtreequery.c \\\n  toolbox\\misc\\vl_lbp.c \\\n  toolbox\\misc\\vl_localmax.c \\\n  toolbox\\misc\\vl_sampleinthist.c \\\n  toolbox\\misc\\vl_simdctrl.c \\\n  toolbox\\misc\\vl_svmtrain.c \\\n  toolbox\\misc\\vl_threads.c \\\n  toolbox\\misc\\vl_twister.c \\\n  toolbox\\misc\\vl_version.c \\\n  toolbox\\mser\\vl_erfill.c \\\n  toolbox\\mser\\vl_mser.c \\\n  toolbox\\quickshift\\vl_quickshift.c \\\n  toolbox\\sift\\vl_covdet.c \\\n  toolbox\\sift\\vl_dsift.c \\\n  toolbox\\sift\\vl_liop.c \\\n  toolbox\\sift\\vl_sift.c \\\n  toolbox\\sift\\vl_siftdescriptor.c \\\n  toolbox\\sift\\vl_ubcmatch.c \\\n  toolbox\\slic\\vl_slic.c \\\n  toolbox\\vlad\\vl_vlad.c\n\n!if \"$(ARCH)\" == \"win32\"\nlibobj = $(libsrc:vl\\=bin\\win32\\objs\\)\ncmdexe = $(cmdsrc:src\\=bin\\win32\\)\nmexdll = $(mexsrc:.c=.mexw32)\nmexdll = $(mexdll:toolbox\\fisher=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\sift=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\mser=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\imop=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\geometry=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\gmm=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\kmeans=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\misc=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\aib=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\quickshift=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\slic=toolbox\\mex\\mexw32)\nmexdll = $(mexdll:toolbox\\vlad=toolbox\\mex\\mexw32)\nmexpdb = $(mexdll:.dll=.pdb)\n\n!elseif \"$(ARCH)\" == \"win64\"\nlibobj = $(libsrc:vl\\=bin\\win64\\objs\\)\ncmdexe = $(cmdsrc:src\\=bin\\win64\\)\nmexdll = $(mexsrc:.c=.mexw64)\nmexdll = $(mexdll:toolbox\\fisher=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\sift=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\mser=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\imop=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\geometry=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\gmm=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\kmeans=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\misc=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\aib=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\quickshift=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\slic=toolbox\\mex\\mexw64)\nmexdll = $(mexdll:toolbox\\vlad=toolbox\\mex\\mexw64)\nmexpdb = $(mexdll:.mexw64=.pdb)\n!endif\n\nlibobj = $(libobj:.c=.obj)\ncmdexe = $(cmdexe:.c=.exe)\ncmdpdb = $(cmdexe:.exe=.pdb)\n\n# Visual Studio redistributable files\nMSVCR = Microsoft.VC$(MSVSVER).CRT\n!if $(MSVSVER) <= 90\n# VS <= 2008 needs a manifest too\nbincrt = $(bindir)\\msvcr$(MSVSVER).dll $(bindir)\\$(MSVCR).manifest\nmexcrt = $(mexdir)\\msvcr$(MSVSVER).dll $(mexdir)\\$(MSVCR).manifest\n!else\nbincrt = $(bindir)\\msvcr$(MSVSVER).dll\nmexcrt = $(mexdir)\\msvcr$(MSVSVER).dll\n!endif\n\n!ifdef MATLABROOT\nall: $(bindir) $(objdir) $(mexdir) \\\n     $(bincrt) $(bindir)\\vl.lib $(bindir)\\vl.dll \\\n     $(cmdexe) \\\n     $(mexcrt) $(mexdir)\\vl.dll $(mexdll)\n!else\nall: $(bindir) $(objdir) \\\n     $(bincrt) $(bindir)\\vl.lib $(bindir)\\vl.dll \\\n     $(cmdexe)\n!endif\n\nBUILD_MEX=@echo .... CC [MEX] $(@) && \\\n\t$(MEX) $(MEX_FLAGS) \"$(<)\" -output $(@)\n\n# --------------------------------------------------------------------\n#                                                    Maintenance rules\n# --------------------------------------------------------------------\n\nclean:\n\tdel /f /Q $(libobj)\n\tdel /f /Q $(objdir)\n\tdel /f /Q $(cmdpdb)\n\tdel /f /Q $(mexpdb)\n\narchclean:\n\tif exist bin\\$(ARCH) rmdir /S /Q bin\\$(ARCH)\n\tif exist $(mexdir) rmdir /S /Q $(mexdir)\n\ndistclean:\n\tif exist bin rmdir /S /Q bin\n\tif exist toolbox\\mex rmdir /S /Q toolbox\\mex\n\ninfo:\n\t@echo $(mexx)\n\t@echo ** bindir      = $(bindir)\n\t@echo ** mexdir      = $(mexdir)\n\t@echo ** objdir      = $(objdir)\n\t@echo ** libsrc      = $(libsrc)\n\t@echo ** libobj      = $(libobj)\n\t@echo ** cmdsrc      = $(cmdsrc)\n\t@echo ** cmdexe      = $(cmdexe)\n\t@echo ** mexsrc      = $(mexsrc)\n\t@echo ** mexdll      = $(mexdll)\n\t@echo ** CC          = $(CC)\n\t@echo ** CFLAGS      = $(CFLAGS)\n\t@echo ** DLL_CFLAGS  = $(DLL_CFLAGS)\n\t@echo ** MEX_FLAGS   = $(MEX_FLAGS)\n\t@echo ** BUILD_MEX   = \"$(BUILD_MEX)\"\n\t@echo ** MATLABROOT  = $(MATLABROOT)\n\t@echo ** MEX         = $(MEX)\n\t@echo ** MEXEXT      = $(MEXEXT)\n\t@echo ** MEXOPT      = $(MEXOPT)\n\t@echo ** MSVSVER     = $(MSVSVER)\n\t@echo ** MSVCROOT    = $(MSVCROOT)\n\t@echo ** MSVCR       = $(MSVCR)\n\t@echo ** MSVCR_PATH  = $(MSVCR_PATH)\n\t@echo ** bincrt      = $(bincrt)\n\t@echo ** mexcrt      = $(mexcrt)\n\t@echo ** WINSDKROOT  = $(WINSDKROOT)\n\t@echo ** DEBUG       = $(DEBUG)\n\n# --------------------------------------------------------------------\n#                                                          Build rules\n# --------------------------------------------------------------------\n\n# create directory if missing\n$(bindir) :\n\tmkdir $(bindir)\n\n$(objdir) :\n\tmkdir $(objdir)\n\n$(mexdir) :\n\tmkdir $(mexdir)\n\n# --------------------------------------------------------------------\n#                                      Rules to compile the VLFeat DLL\n# --------------------------------------------------------------------\n\n# special sources with SSE2 support\n$(objdir)\\mathop_sse2.obj : vl\\mathop_sse2.c\n\t@echo .... CC [+SSE2] $(@)\n\t@$(CC) $(CFLAGS) $(DLL_CFLAGS) /arch:SSE2 /D\"__SSE2__\" /c /Fo\"$(@)\" \"vl\\$(@B).c\"\n\n$(objdir)\\imopv_sse2.obj : vl\\imopv_sse2.c\n\t@echo .... CC [+SSE2] $(@)\n\t@$(CC) $(CFLAGS) $(DLL_CFLAGS) /arch:SSE2 /D\"__SSE2__\" /c /Fo\"$(@)\" \"vl\\$(@B).c\"\n\n# vl\\*.c -> $objdir\\*.obj\n{vl}.c{$(objdir)}.obj:\n\t@echo .... CC $(@)\n\t@$(CC) $(CFLAGS) $(DLL_CFLAGS) /c /Fo\"$(@)\" \"$(<)\"\n\n# Link VLFeat DLL\n$(bindir)\\vl.dll : $(libobj)\n\t@echo .. LINK [DLL] $(@R).dll\n\t$(LINK) /DLL  $(LFLAGS) $(**) /OUT:\"$(@)\"\n\t@mt /nologo /outputresource:\"$(@);#2\" /manifest \"$(@R).dll.manifest\"\n\t@-del \"$(@R).dll.manifest\"\n\n# *.obj -> *.lib\n$(bindir)\\vl.lib : $(libobj)\n\t@echo ... LIB $(@R).lib\n\t@lib $(**) /OUT:\"$(@)\" /NOLOGO\n\n# redistributable: msvcr__.dll => bin/win{32,64}/msvcr__.dll\n$(bindir)\\$(MSVCR).manifest : \"$(MSVCR_PATH)\\$(MSVCR).manifest\"\n        copy $(**) \"$(@)\"\n\n$(bindir)\\msvcr$(MSVSVER).dll: \"$(MSVCR_PATH)\\msvcr$(MSVSVER).dll\"\n        copy $(**) \"$(@)\"\n\n# --------------------------------------------------------------------\n#                                Rules to compile the VLFeat EXE files\n# --------------------------------------------------------------------\n\n# src\\*.c -> $bindir\\*.exe\n{src}.c{$(bindir)}.exe:\n\t@echo .... CC [EXE] $(@)\n\t@$(CC) $(CFLAGS) /Fe\"$(@)\" /Fo\"$(@R).obj\" \"$(<)\" /link $(EXE_LFLAGS)\n\t@MT /nologo /outputresource:\"$(@);#1\" /manifest \"$(@).manifest\"\n\t@-del \"$(@).manifest\"\n\t@-del \"$(@R).obj\"\n\n# --------------------------------------------------------------------\n#                                Rules to compile the VLFeat MEX files\n# --------------------------------------------------------------------\n\nstartmatlab:\n\t\"$(MATLABROOT)/bin/matlab.exe\" -nodesktop\n\n# toolbox\\*.c -> toolbox\\*.dll\n{toolbox\\sift}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\mser}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\imop}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\gmm}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\geometry}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\kmeans}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\aib}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\quickshift}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\misc}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\slic}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\vlad}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n{toolbox\\fisher}.c{$(mexdir)}.$(MEXEXT):\n\t$(BUILD_MEX)\n\n# vl.dll => mexw{32,64}\\vl.dll\n$(mexdir)\\vl.dll : $(bindir)\\vl.dll\n\tcopy \"$(**)\" \"$(@)\"\n\n# Ideally, the DLL should be linked to Intel compatibility library libiomp5md.dll that\n# ships with MATLAB. However, there does not seem to be a clean way to do so without\n# the .lib file. This is suboptimal as it casues two OMP libraries to be used (vcomp and iomp5).\n# Possible work arounds that did not work yet: generate the .lib file from the .dll file,\n# redirect somehow vcomp to iomp5.\n\n#$(LINK) /LIBPATH:\"$(MATLABROOT)\\extern\\lib\\win64\\microsoft\" /DLL $(LFLAGS) $(**) libmwblas.lib /nodefaultlib:vcomp /OUT:\"$(@)\"\n#$(mexdir)\\vl.dll : $(libobj)\n#\t@echo .. LINK [DLL] $(@R).dll\n#  $(LINK) /DLL $(LFLAGS) $(**) /OUT:\"$(@)\"\n#\t@-del \"$(@R).dll.manifest\"\n\n# redistributable: msvcr__.dll => bin/win{32,64}/msvcr__.dll\n$(mexdir)\\$(MSVCR).manifest : \"$(MSVCR_PATH)\\$(MSVCR).manifest\"\n        copy $(**) \"$(@)\"\n\n$(mexdir)\\msvcr$(MSVSVER).dll: \"$(MSVCR_PATH)\\msvcr$(MSVSVER).dll\"\n        copy $(**) \"$(@)\"\n\n# --------------------------------------------------------------------\n#                                       Rules to post the binary files\n# --------------------------------------------------------------------\n\nbin-release:\n\techo Fetching remote tags && \\\n\t$(GIT) fetch --tags && \\\n\techo Checking out v$(VER) && \\\n\t$(GIT) checkout v$(VER)\n\techo Rebuilding binaries for release\n\tif exist \"bin\\$(ARCH)\" del /f /Q \"bin\\$(ARCH)\"\n\tif exist \"bin\\mex\\$(ARCH)\" del /f /Q \"toolbox\\mex$(ARCH)\"\n\tnmake /f Makefile.mak ARCH=$(ARCH)\n\nbin-commit: bin-release\n\t@echo Fetching remote tags && \\\n\t$(GIT) fetch --tags\n\t@echo Crearing/resetting and checking out branch $(BRANCH) to v$(VER) && \\\n\t$(GIT) branch -f $(BRANCH) v$(VER) && \\\n\t$(GIT) checkout $(BRANCH)\n\t@echo Adding binaries && \\\n\t$(GIT) add -f $(bincrt) && \\\n\t$(GIT) add -f \"$(bindir)\\vl.lib\" && \\\n\t$(GIT) add -f \"$(bindir)\\vl.dll\" && \\\n\t$(GIT) add -f $(cmdexe) && \\\n\t@echo Adding MEX files && \\\n\t$(GIT) add -f $(mexcrt) && \\\n\t$(GIT) add -f \"$(mexdir)\\vl.dll\" && \\\n\t$(GIT) add -f $(mexdll) && \\\n\t@echo Commiting changes && \\\n\t$(GIT) commit -m \"$(ARCH) binaries for version $(VER)\"\n\t@echo Commiting and pushing to server the binaries && \\\n\t$(GIT) push -v --force bin $(BRANCH):refs/heads/$(BRANCH) && \\\n\t$(GIT) checkout v$(VER) && \\\n\t$(GIT) branch -D $(BRANCH)\n", "encoding": "ascii"}