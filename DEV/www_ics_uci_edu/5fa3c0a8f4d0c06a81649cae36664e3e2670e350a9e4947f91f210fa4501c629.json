{"url": "https://www.ics.uci.edu/~pattis/ICS-21/assignments/program3/program.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 3</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 3</h1>\r\n<h1>Intermediate Program Suite II</h1>\r\n<p>\r\n<h2>Introduction to Computer Science I\r\n<br>\r\nICS-21<br>\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\n  Please print a copy of this assignment, read it carefully, and\r\n    highlight material you think will be useful to you while you\r\n    are working on the program or submitting it.\r\n  <p>\r\n  This programmmng assignment is a continuation of Program 2.\r\n  It is designed to ensure that you know how to write programs that combine\r\n    the standard control structures in Java: blocks, ifs, <b>for</b> loops,\r\n    and <b>break</b> statements (to terminate <b>for</b> loops); and the\r\n    other statements: declarations and expression statements.\r\n  You will continue to write, test, and debug programs using\r\n    <b>iterative enhancement</b>.\r\n  Finally, work on writing the clearest and simpliest code possible,\r\n    declaring the appropriate number of variables (to have their\r\n    <b>natural</b> type, and be aggressive with <b>final</b>) in their\r\n    appropriate  block (smallest scope).\r\n  <p>\r\n  You will write three programs in this assignment.\r\n  As always, you can check the behavior of your programs against mine by\r\n    downloading my executable zip file\r\n     <a href=\"executable.zip\">Program #3 Executables</a>\r\n     and unzipping it.\r\n  See <a href=\"../program1/program.html\">Program #1</a>) for details on how\r\n     to run these executables on both PCs and in Eclipses (PCs and Macs).\r\n  Remember, you can run these programs, but not examine their source (Java)\r\n    code.\r\n  Copy the input/output form of the executable programs in the programs that\r\n    you write: use exactly the same prompts and messages.\r\n  For the <b>Cannon</b> and <b>Rocket</b> programs, there are executable\r\n    versions for the kernel and each enhancement.\r\n  <p>\r\n  For your information, I am listing below the number of lines in my solution\r\n    programs.\r\n  These programs are formated in the standard way.\r\n  I am <b>counting</b> only lines with code (even if the only code on the line\r\n    is a brace that closes a block); but I am <b>not counting</b> blank lines\r\n    nor lines filled with comments.\r\n  My \"cannon\" program is 34 lines; my \"rocket\" program is 47 lines; my\r\n    \"average\" program is 47 lines.\r\n  Your programs might be smaller, and they might be larger; but if your program\r\n    starts going over 2-3 times the size of mine, you might want to rethink it\r\n    (or come get some help).\r\n  <p>\r\n  Please follow the instructions below for each program: finish each\r\n    enhancement before continuing to the next one (including printing\r\n    whatever messages it displays in the console, copied exactly).\r\n  Feel free to use the infinite <b>for</b> loop and <b>if</b>/<b>break</b>\r\n    statements to write all loops; when you are finished, you may simplify\r\n    these loops (to general <b>for</b><b>while</b> or <b>do</b> loops); or,\r\n    if you feel comfortable with these more advanced loops, write them from\r\n    the start.\r\n  <p>\r\n  In each of these programs, please pay particularly close attention to the\r\n     following style principles (discussed in the lecture on\r\n     <a href=\"../../lectures/style/lecture.html\">Coding Style</a>).\r\n  <ul>\r\n    <li><b>Names</b>: Choose good names for variables.\r\n    <li><b>Alignment</b>: Indent statements to clarify the meaning of their\r\n        control structures.\r\n    <li><b>Locality</b>: Keep related information together; separate unrelated\r\n        information.\r\n    <li><b>Comments</b>: Document your code appropriately with comments.\r\n  </ul>\r\n  Please examine the\r\n    <a href=\"../../programs.html\">Sample Programs</a>\r\n    that I have provided for examples of good programming style.\r\n  Look at my solutions to the previous programming assignment.\r\n  Learn to copy this style, just as artists in the middle ages learned to copy\r\n    their master's style before developing their own.\r\n  In this program, your <b>style will be graded</b>; before handing in these\r\n    programs, wait until you receive your graded program #2, which will\r\n    give you some feedback on style.\r\n  <p>\r\n  To work on this assignment, create one Java project (call it <b>Program3</b>)\r\n    and create three new Java classes in it (as you did for one class in \r\n    Program #2).\r\n  Each class will contain a program that you will write to solve one problem;\r\n    name the classes <b>Cannon</b>, <b>Rocket</b>, and <b>Average</b>.\r\n  Write, run, and debug each class/program as you did in Program #2.\r\n  When you finish each part, submit its <b>.java</b> file.\r\n  <p>\r\n  <b>Only one programmer of the pair should dropoff the programs: the same one\r\n       for each part.\r\n     It doesn't matter which of the pair submits, but that person should\r\n       submit all the parts.\r\n     Of course, each program should contain both student names (in the\r\n        comment: the same one you cut, pasted, ane filled in at the top of\r\n        each program in <a href=\"../program1/program.html\">Program #1</a>).</b>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Cannon -->\r\n\r\n<a name=\"Darts\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Physics Simulation and Optimization</b></td>\r\n<td width =\"80%\">\r\n  You will write a program that determines the angle to fire a cannon\r\n    so that its projectile hits the center of the entrance to a cave.\r\n  First we will discuss the relevant laws of motion and learn how to write code\r\n    that simulates the flight of the projectile.\r\n  Then we will write code that searches for the correct angle to fire the\r\n    cannon, by repeated simulating the projectile for a range of angles.\r\n  This general coupling of a <b>simulation</b> and an <b>optimization</b>\r\n   (here, finding the optimal angle to shoot the cannon) is a powerful\r\n   problem solving technique.\r\n  <p>\r\n  Here is a a picture with some relevant information.\r\n  Note that the trajectory of a cannon shell (with no air resistance)\r\n    is a parabola.\r\n  <p>\r\n  <image src=\"images/cannon.gif\">\r\n  <p>\r\n  To simulate the flight of a projectile from a cannon, we must know its\r\n    speed (<b>s</b> in feet/second) and angle (<b>&theta;</b> in radians); and\r\n    we must choose a time increment (<b>dT</b> in seconds) for our simulation.\r\n  At the start of the simulation, the <b>x</b> and <b>y</b> coordinates\r\n    of the projectile are both <b>0</b> (feet) and the simulation time\r\n    (<b>t</b>) is <b>0</b> (seconds).\r\n  For each time increment\r\n  <ul>\r\n    <li><b>t</b> is <b>incremented</b> by <b>dT</b> seconds\r\n    <li>the <b>x</b> coordinate is <b>incremented</b> by\r\n          <b>s*cos(&theta;)*dT</b> feet\r\n    <li>the <b>y</b> coordinate is <b>incremented</b> by\r\n         <b>(s*sin(&theta;)  -  32.17*t)*dT </b> feet\r\n  </ul>\r\n  The statements incrementing these variables should appear in the program\r\n    in the order show above.\r\n  These equations are imprecise: they ignore air resistance among other\r\n     problems, but they are good enough (and certainly simple enough) for\r\n     our purposes\r\n  Here we are assuming a gravitational acceleration downward of <b>32.17</b>\r\n    feet/second^2.\r\n  Also, assume that <b>dT</b> will always be <b>.01</b> seconds.\r\n  The simulation runs until EITHER the <b>y</b> coordinate goes negative\r\n    (angle was not able to reach the target) OR the <b>x</b> coordinate\r\n    reaches or exceeds the required distance to the target (at which point\r\n    we can check the <b>y</b> coordinate to determine whether it was the right\r\n    height to hit the target).\r\n  <p>\r\n  Design, code, test, and debug this program using\r\n    <b>iterative-enhancement</b>, as 5 mini-projects.\r\n  Test each project (compare it to my executable) to ensure that it is correct\r\n    before proceeding to the next enhancement.\r\n  This is the same methodology that we will use for larger programs; so, it is\r\n    a good idea to practice this technique here, where the program is small,\r\n    even if you can write the entire program all at once.\r\n  <ol>\r\n    <li>Write a kernel program that prompts the user for the speed (in feet\r\n          per second) and angle (in degrees -and convert it to radians) of\r\n          the projectile (the conversion is 1 degree = &pi;/180 radians; but\r\n          also look at the Javadoc for the <b>Math</b> class, which includes\r\n          the <b>toRadians</b> and <b>toDegrees</b> methods).\r\n        Use one of the advanced <b>Prompt.forDouble</b> methods to\r\n          ensure the speed is within the range <b>[0,10000]</b> and the\r\n          angle is within the range <b>[0,90]</b>.\r\n        Hint: look up (in the <b>Prompt</b> class in the <b>Javadoc of Introlib\r\n           API</b>) all the overloaded versions of the <b>forDouble</b> method\r\n           and choose the correct one.\r\n        <p> \r\n        Then write a loop that simulates the projectile using the information\r\n          above until its <b>y</b> coordinate goes negative, printing the time,\r\n          and x and y coordinates during each iteration.\r\n        <p>\r\n        This is a pretty big kernel, with lots of details.\r\n        Enter a few speeds and angles to test it (and compare it against\r\n          my executable).\r\n    <p>\r\n    <li>Enhance the program so that it prompts the user for a <b>distance</b>\r\n          (within\r\n          the range <b>[0,100000]</b>) and  terminates the simulation loop\r\n          EITHER after its <b>y</b> coordinate goes negative OR after its\r\n          <b>x</b> coordinate exceeds that <b>distance</b>.\r\n        Enter a few speeds and angles to test both termination conditions.\r\n    <p>\r\n    <li>Enhance the program so that it prompts the user for a <b>height</b>\r\n          (within the range <b>[0,100000]</b>) and after that computes &theta;\r\n          (rather than prompting for it) as the angle of a straigh line from \r\n          the cannon <b>(0,0)</b> to the entrance of the cave\r\n          <b>(distance,height)</b>.\r\n        It then prints this angle (in degrees) and does the simulation with\r\n          this angle.\r\n        Hint: look up (in the <b>Math</b> class in the <b>Javadoc of Sun's\r\n           API</b>)  the two argument version of arctangent function\r\n          (<b>Math.atan2</b>) which computes its result in radians;\r\n          can you explain why this angle will never shoot the projectile too\r\n          high and almost always shoot it too low?\r\n    <p>\r\n    <li>Enhance the program by prompting the user whether or not to do a\r\n          detailed trace (use one of the advanced <b>Prompt.forBoolean</b>\r\n           methods to have the default value be <b>false</b>): if a detailed\r\n           trace is requested, print the same information as before; if it is\r\n           not requested, print only the final time, <b>x</b> coordinate, and\r\n           <b>y</b> coordinate when the simulation terminates.\r\n    <p>\r\n    <li>Enhance the program by embedding the entire simulation (after the\r\n          prompting) inside another loop.\r\n        The outer loop simulates the projectile for the calculated &theta; and\r\n          other bigger &theta;s.\r\n        Starting at the calculated &theta; simulate the cannon.\r\n        If after any simulation, the final <b>y</b> coordinate, at termination\r\n           of the inner loop, is greater than the <b>height</b> terminate the\r\n           program (the outer loop): the angle is the best approximation to\r\n           shooting the projectile into the cave.\r\n        Otherwise (final <b>y</b> coordinate is not greater than the\r\n           <b>height</b>) increment the angle by .1 degrees\r\n          (<b>not</b> .1 radians).\r\n        If the new angle exceeds 90, print the message\r\n          <b>Entered speed cannot reach target</b> and terminate the outer\r\n          loop.\r\n        Otherwise try the simulation (run the inner loop again) with that new\r\n          angle.\r\n        <p>\r\n        Ensure that for each new &theta; the simulation starts the cannon\r\n          shell at the origin at time zero (use tracing).\r\n  </ol>\r\n  Submit ONLY THE FINAL ENHANCEMENT of the program: the one meeting the\r\n    complete specifications.\r\n  You might try testing your final program (and my final executable) with\r\n    a <b>distance</b> of <b>10,000</b>, a <b>height</b> of <b>2,000</b> and\r\n    a <b>speed</b> of <b>700</b> (with a <b>speed</b> of <b>600</b> it cannot\r\n    hit the target).\r\n  If you have any questions about my output, ask me about it.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Rocket -->\r\n\r\n<a name=\"Rocket\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Simulating the Flight of a Rocket</b></td>\r\n<td width =\"80%\">\r\n  Write a program that performs the following tasks.\r\n    <ul>\r\n      <li>Prompt the user to enter the following information describing the\r\n            rocket:\r\n          <ul>\r\n            <li>Thrust (in pounds)\r\n            <li>Thrust Duration (in seconds)\r\n            <li>Mass (in pounds)\r\n          </ul>\r\n         Assume that the user always enters reasonable  values; do not\r\n          write input validation code for this part of the assignment.\r\n      <li>Prompt the user, asking whether to print a detailed trace of the\r\n            flight\r\n      <li>Simulate the rocket flying vertically (straight up), using\r\n            these values and a simulation time increment of <b>.01</b> seconds.\r\n          If the user requested tracing, print the time, thrust, acceleration,\r\n            velocity at the end of the interval and height at the end of the\r\n            interval.\r\n          Continue the simulation until the rocket reaches its apex (recognized\r\n            when its velocity, which is initially zero, then positive as the\r\n            rocket ascends, begins to go negative; with insufficient thrust,\r\n            the rocket's height will immediately go negative without ever\r\n            launching upwards).\r\n      <li>Print the following information, accumulated over the rocket's entire\r\n            flight\r\n           <ul>\r\n             <li>The total impulse (entered thrust times thrust duration)\r\n             <li>The total flight time (burn + coast time)\r\n             <li>The burn time (same as thrust duration, which the user enters)\r\n             <li>The coast time (time from the end of the thrust to the apex)\r\n             <li>The maximum velocity it achieved during the entire simulation\r\n             <li>The maximum height it achieved during the entire simulation\r\n            </ul>\r\n      </ul>\r\n  The basic formula for simulating rocket flight is <b><pre>\r\n          th - cd v<sup>2</sup>\r\n    a = -------------  - g\r\n             m</pre></b>\r\n  We recompute this formula for every time interval during the simulation.\r\n  In it <b>a</b>, the acceleration for that time interval, is computed from\r\n  <ul>\r\n    <li><b>th</b> is the thrust (from time zero up to the thrust time, use\r\n        the entered thrust, after that the thrust is zero while the rocket\r\n        is coasting)\r\n    <li><b>cd</b> is the coefficient of drag (use <b>.0001</b> in the program)\r\n    <li><b>v</b> is current velocity (at the start of the interval)\r\n    <li><b>m</b> is the mass of the rocket\r\n    <li><b>g</b> is the gravitational acceleration on the surface of the earth:\r\n       32.17 feet/sec/sec\r\n  </ul>\r\n  The rocket starts at time <b>0.</b> with its height and velocity both\r\n    <b>0.</b>\r\n  For each time interval of <b>.01</b> seconds (let's call it <b>dT</b>), the\r\n    program (a) increments the total time by <b>dT</b>, (b) calculates the\r\n     acceleration of the rocket (from the formula above) for that time\r\n     interval; remember to use the correct thrust, depending on the time\r\n     (either the original thrust or <b>0.</b>, depending on how the time\r\n     compares to the thrust duration)\r\n     and (c) calculates the new velocity and height (at the end of the time\r\n     interval) as follows:\r\n  <ul>\r\n    <li>The new (end of the time interval) velocity, which is the old (start\r\n        of the time interval) velocity + <b>a * dT</b>; the average velocity\r\n        over the interval is the average of the old and new velocities.\r\n    <li>The new (end of the time interval) height, which is the old (start of\r\n        the time interval) height + the average velocity <b>* dT</b>.\r\n    <li>The maximum velocity and height, which may be updated depending on\r\n          their values at the start of the time interval and the newly computed\r\n          velocity and height at the end of the time interval.\r\n  </ul>\r\n  It is important to understand the description above before coding it in Java.\r\n  <p>\r\n  Design, code, test, and debug this program using\r\n    <b>iterative-enhancement</b>, as 6 mini-projects.\r\n  Test each project to ensure that it is correct before proceeding to the next\r\n    enhancement.\r\n  This is the same methodology that we will use for larger programs; so, it is\r\n    a good idea to practice this technique here, where the program is small,\r\n    even if you can write the entire program all at once.\r\n  <ol>\r\n    <li>Write a kernel program that prompts the user for all the rocket\r\n          information specified above, and then loops, incrementing the time\r\n          (until it exceeds the time that the engine stops burning),\r\n          displaying the time and thrust for each time interval.\r\n        Ensure the time and thrust are displayed correctly, and the loop\r\n          terminates at the correct time.\r\n        Try a thrust of 100 for .5 seconds with a mass of 1.\r\n          (for this kernel, and the subsequent enhancements).\r\n        Don't worry about doing anything with the mass.\r\n    <p>\r\n    <li>Enhance the program so that it computes the acceleration and then the\r\n          velocity (which starts at <b>0.</b>) correctly; change the loop to\r\n          terminate when the velocity becomes negative (the rocket has reached\r\n          its apex and is falling back to earth).\r\n        During each iteration of the loop, compute the acceleration using the\r\n          formula shown above, paying close attention to whether the engine is\r\n          burning, and update the velocity using the description shown above.\r\n        In addition to displaying the time and thrust (which should eventually\r\n          drop to <b>0.</b> after it has finished burning), display the\r\n          acceleration for the interval, and the velocity at the end of the\r\n          interval.\r\n    <p>\r\n    <li>Enhance the program so that it computes the height (which starts at\r\n          <b>0.</b>) correctly.\r\n        During each iteration of the loop, update the height using the formula\r\n          shown above.\r\n        In addition to displaying everything else, display the height at the\r\n          end of each time interval.\r\n    <p>\r\n    <li>Enhance the program to keep track of the maximum velocity and height.\r\n        In addition to displaying everything else, display these values at the\r\n          end of each time interval.\r\n        Finally, display these values after the loop terminates.\r\n    <p>\r\n    <li>Enhance the program to display all the required information after the\r\n          loop terminates (display this information in the correct form).\r\n        This information includes the total impulse, the flight time (broken\r\n          down into burn time and coast time), the maximum velocity and the\r\n          maximum height.\r\n    <p>\r\n    <li>Enhance the program to prompt the user about tracing (with a default\r\n          value of <b>false</b>), and then display the intermediate results \r\n          only if the user enters <b>true</b>.\r\n        Always print the information after the loop terminates (see the\r\n          previous enhancement).\r\n  </ol>\r\n  Remember to use <b>final</b> appropriately/aggressively when declaring\r\n     constants representing the information needed for this program.\r\n  <p>\r\n  Submit ONLY THE FINAL ENHANCEMENT of the program: the one meeting the\r\n    complete specifications (note that the program you submit SHOULD NOT print\r\n    any intermediate results unless the user explicitly requests tracing).\r\n  Test your debugged/completed program for a thrust of 100 lbs, a time of 10\r\n     secs, and a mass of 1 lb and compare it to the results of my excutable;\r\n     for full credit your results should match exactly (certainly to most of\r\n     the many digits printed by a <b>double</b>).\r\n  If you have any questions about my output, ask me about it.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Average Upgrade -->\r\n\r\n<a name=\"BigCollatz\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Average Upgrade</b></td>\r\n<td width =\"80%\">\r\n  Don't start this project with the new project folder.\r\n  Instead, download the <a href=\"../../programs/average.zip\">Average</a>\r\n    project folder, unzip it, and use the unzipped folder as a project\r\n   folder.\r\n  <p>\r\n  When compiled and run, it prompts the user for a file name and then processes\r\n    exam scores in that file to compute the average of all the exams.\r\n  The first value in the file is the maximum score possible for the exam, and\r\n    almost all the remaining values are legal exam scores.\r\n  The final value in the file must be <b>-1</b>: such a value is called a\r\n    <i>sentinel</i>; it marks the end of data in the file; it is <b>not</b> a\r\n    value to be <b>processed</b> when computing the average.\r\n  <p>\r\n  The <b>Average</b> project folder also includes a few data files (all ending\r\n    in <b>.txt</b>) that you can test this program on.\r\n  When prompted for a file name, type one of these names (for this too work,\r\n    the files need to be at the top level in the project folder).\r\n  <p>\r\n  Don't worry about the file-reading part of this code, because it is correct\r\n    and does not need to be changed: just concentrate on the overall looping \r\n    structure of the program and add Java declarations and statements at\r\n    appropriate locations to make the following changes.\r\n  Again, make these changes one at a time, designing, coding, testing, and\r\n    debugging each enhancement before proceeding to the next one.\r\n  Before starting to write your program, run mine a few times to familiarize\r\n    youself with it.\r\n  <ol>\r\n    <li>Enhance the program to discard all scores that are not between 0 and\r\n          the maximum score (inclusive).\r\n        Neither count these exams nor use them in computing the sum.\r\n        Display a message immediately for each illegal score that is discarded.\r\n        Note that the file <b>average3.txt</b> contains a large number of\r\n          scores, including one that is too low and one that is too high.\r\n    <p>\r\n    <li>Enhance the program to count the total number of out-of-range scores\r\n          and print this value with the other statistics at the end of the\r\n          program.\r\n        If there are no scores, don't display any statistics.\r\n    <p>\r\n    <li>Enhance the program to keep track of the minimum and maximum legal\r\n          scores in the file, and then print out their values at the end,\r\n          along with the average, and the total number of out-of-range scores.\r\n        Again, do not process scores that are out of range.\r\n        Think about how you will initialize and update these extremal\r\n          variables.\r\n        <p>\r\n        Hint: Imagine someone is giving you one card after another, with a\r\n          value on each card; you have to discard each card before you go to\r\n          the next one: how could you compute the maximum of all the cards that\r\n          were handed to you?\r\n        What could we initialize the maximum and minimum scores to before any\r\n           scores are processed to insure this process proceeds correctly?\r\n        How is this problem similar to finding the maximum velocity and\r\n          height in the rocket program; how is it different?\r\n  </ol>\r\n  Submit ONLY THE FINAL ENHANCEMENT of the program: the one meeting the\r\n    complete specifications.\r\n  Test your debugged/completed program on all four input files and ensure\r\n    it computes the correct statistics for each.\r\n  Finally, remember to update the <b>Description:</b> comment to include\r\n    the new functionality added to the program.\r\n</tbody>\r\n</table>\r\n\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}