{"url": "https://www.ics.uci.edu/~willmlam/teaching/cs175_w12/Mancala/MancalaGameState.txt", "content": "Interface for the Mancala Game state class.\n\nThe Mancala board is represented by a 2xC array.\nThe following shows what indices correspond to the locations of the buckets.\n| 1,0 | 1,1 | 1,2 | 1,3 | 1,4 | 1,5 | ...\n| 0,0 | 0,1 | 0,2 | 0,3 | 0,4 | 0,5 | ...\n\nPlayer buckets are stored in a 1x2 array (scores).\n\npublic class MancalaGameState {\n    // Constructor for a new Mancala gamestate with the specified number of \n    // stones in each bucket\n    public MancalaGameState(int startingStones);\n\n    // Creates a copy of the game state\n    public MancalaGameState copy();\n\n    // Resets the game to the initial state\n    public void reset();\n\n    // Accessors\n\n    // Get the current player\n    public int CurrentPlayer();\n\n    // Get the number of stones at the specified bucket\n    public int stonesAt(int x, int y);\n\n    // Get the number of rows on the board\n    public int rows();\n\n    // Get the number of columns on the board\n    public int cols();\n\n    // Check whether the move is valid\n    public boolean validMove(int col);\n\n    // Play at a given column, throws an Exception if the move is not valid\n    public GameState play(int col) throws Exception;\n\n    // Check if the state is terminal\n    public boolean checkEndGame();\n\n    // Compute the final score (should be called once at the end of a game)\n    public void computeFinalScore();\n\n    // Get the score of the specified player\n    public int getScore(int i);\n\n    // Prints the state in the console\n    public void printState()\n}\n", "encoding": "ascii"}