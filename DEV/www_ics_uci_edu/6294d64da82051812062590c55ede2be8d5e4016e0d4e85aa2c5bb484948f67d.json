{"url": "https://www.ics.uci.edu/~thornton/ics65/Schedule.html", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"course.css\" type=\"text/css\" />\n\n<title>ICS 65 Fall 2012, Schedule</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 65 Fall 2012 |\n<a href=\"index.html\">News</a> |\n<a href=\"CourseReference.html\">Course Reference</a> |\n<a href=\"Schedule.html\">Schedule</a> |\n<a href=\"ProjectGuide\">Project Guide</a> |\n<a href=\"CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 65 Fall 2012<br />\n   Schedule</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p>All assigned readings are from the Savitch text, 5th Edition.  It is a good idea to skim the assigned reading <i>before</i> the lecture for the main ideas, attend lecture, and then to go through the assigned reading again to fill in the details that you missed, both in your initial skim of the reading and in the lecture.</p>\n\n<p>Some lectures have little or no reading corresponding to them.  In some cases, this is because a block of reading corresponds to more than one lecture.  In other cases, the material covered in that lecture is not discussed in the textbook.</p>\n\n<table class=\"normal\">\n  <tr class=\"top\">\n    <td>Date</td>\n    <td>Lecture Topics</td>\n    <td>Readings</td>\n    <td>Project Due</td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 0</td>\n  </tr>\n  <tr>\n    <td>Th 9/27</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Course introduction and goals</li>\n        <li>The challenge of learning a second programming language</li>\n        <li>The challenge of learning C++ as a second programming language</li>\n        <li>Historical perspective and philosophical backdrop</li>\n        <li>The design goals of C++</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 1</td>\n  </tr>\n  <tr>\n    <td>Tu 10/2</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>The <b>main()</b> function</li>\n        <li>Types and static type checking</li>\n        <li>Basic built-in data types</li>\n        <li>Expressions and statements</li>\n        <li>Control structures</li>\n        <li>The distinction between lvalues and rvalues</li>\n        <li>Declaration vs. definition</li>\n        <li>Calling and declaring functions</li>\n        <li>Parameters and arguments</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 1</li>\n        <li>Ch. 2.1 - 2.3</li>\n        <li>Ch. 3</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Th 10/4</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Behind the scenes of a C++ program</li>\n        <li>The Von Neumann architecture (briefly)</li>\n        <li>Registers, instruction pointers, stack pointers, and frame pointers</li>\n        <li>Calling conventions</li>\n        <li>References</li>\n        <li>Pass-by-value vs. pass-by-reference</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 4.1</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 2</td>\n  </tr>\n  <tr>\n    <td>Tu 10/9</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Function overloading (briefly)</li>\n        <li>Default arguments</li>\n        <li>Separate compilation and linking</li>\n        <li>The <b>#include</b> directive</li>\n        <li>Guarding against multiple inclusion</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 4.2</li>\n \t\t<li>Ch. 11.1</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Th 10/11</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>The <b>std::string</b> type</li>\n        <li>Behind the scenes of a C++ program (continued)</li>\n        <li>The heap (also known as: the free store)</li>\n        <li>Heap-based memory allocation</li>\n        <li>The importance of cleaning up heap-allocated memory</li>\n        <li>Strings as parameters</li>\n        <li>Pointers</li>\n        <li><b>new</b> and <b>delete</b></li>\n        <li>The <b>nullptr</b> constant</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 9.1</li>\n        <li>Ch. 9.3</li>\n        <li>Ch. 10.1</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 3</td>\n  </tr>\n  <tr>\n    <td>Tu 10/16</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Single-dimension arrays</li>\n        <li>Statically-allocated arrays</li>\n        <li>Dynamically-allocated arrays</li>\n        <li>How arrays and pointers are related</li>\n        <li>Passing arrays as parameters to functions</li>\n        <li>Pointer arithmetic</li>\n        <li>The <b>delete[]</b> operator</li>\n        <li>C-style strings (and why we mostly avoid them)</li>\n        <li>Constants and the <b>const</b> qualifier</li>\n        <li>How <b>const</b> affects references and pointers</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 5.1 - 5.3</li>\n        <li>Ch. 10.2</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Th 10/18</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>On the need for creating new types</li>\n        <li>Structures</li>\n        <li>Member variables in a structure</li>\n        <li>Statically- and dynamically-allocated structures</li>\n        <li>The <b>.</b> and <b>-&gt;</b> operators</li>\n        <li>Behind the scenes of a C++ program (continued)</li>\n        <li>How structures are laid out in memory</li>\n        <li>Why padding is sometimes added between member variables of a structure</li>\n        <li>The (lack of a) distinction between built-in types and user-defined types</li>\n        <li>Classes</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 6</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 4</td>\n  </tr>\n  <tr>\n    <td>Tu 10/23</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Declaring classes</li>\n        <li>Access control (<b>public</b> and <b>private</b>)</li>\n        <li>Constructors</li>\n        <li>Member variables and member functions in a class</li>\n        <li>The <b>this</b> pointer</li>\n        <li>Separating interface from implementation</li>\n        <li>Making a class <b>const</b>-aware</li>\n        <li>Statically- and dynamically-allocated objects</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 7.1 - 7.2</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>W 10/24</td>\n    <td></td>\n    <td></td>\n    <td><a href=\"ProjectGuide/Project1\">Project #1</a> due 11:59pm</td>\n  </tr>\n  <tr>\n    <td>Th 10/25</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Managing object lifetime</li>\n        <li>Destructors</li>\n        <li>Copy constructors</li>\n        <li>Overloading the assignment operator</li>\n        <li>Guarding against self-assignment</li>\n        <li>Building a \"well-behaved\" Vector class</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 10.3</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 5</td>\n  </tr>\n  <tr>\n    <td>Tu 10/30</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li><b>MIDTERM &mdash; regular lecture time and location</b></li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Th 11/1</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li><b>std</b>: The C++ standard library</li>\n        <li>Standard collections: <b>vector</b> and <b>list</b></li>\n        <li>Iterators</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 19</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 6</td>\n  </tr>\n  <tr>\n    <td>Tu 11/6</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Iterators (continued)</li>\n        <li><b>auto</b> and type inference (briefly)</li>\n        <li>Generic algorithms</li>\n        <li><b>std::function</b> and lambda expressions</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>W 11/7</td>\n    <td></td>\n    <td></td>\n    <td><a href=\"ProjectGuide/Project2\">Project #2</a> due 11:59pm</td>\n  </tr>\n  <tr>\n    <td>Th 11/8</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Inheritance</li>\n        <li>Constructors and derived classes</li>\n        <li>Order of construction and destruction of class members</li>\n        <li>Virtual functions and polymorphism</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 14</li>\n        <li>Ch. 15</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 7</td>\n  </tr>\n  <tr>\n    <td>M 11/12</td>\n    <td><b>University Holiday &mdash; Veterans' Day</td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Tu 11/13</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Why destructors sometimes need to be virtual, but constructors don't (and can't!)</li>\n        <li>\"Pure\" virtual functions and abstract base classes</li>\n        <li>Behind the scenes of a C++ program (continued)</li>\n        <li>How inheritance and polymorphism are implemented<li>\n        <li>Why virtual functions have an added cost</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Th 11/15</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Implicit type conversions</li>\n        <li>Explicit constructors</li>\n        <li>Operator overloading</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 8</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 8</td>\n  </tr>\n  <tr>\n    <td>M 11/19</td>\n    <td></td>\n    <td></td>\n    <td><a href=\"ProjectGuide/Project3\">Project #3</a> due 11:59pm</td>\n  </tr>\n  <tr>\n    <td>Tu 11/20</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Operator overloading (continued)</li>\n        <li>Friend functions and friend classes</li>\n        <li>Template functions</li>\n        <li>Why C++ provides lousy error messages when you misuse a template</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 16.1</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Th 11/22</td>\n    <td><b>University Holiday &mdash; Thanksgiving (NO LECTURE TODAY)</b></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>F 11/23</td>\n    <td><b>University Holiday &mdash; Thanksgiving</b></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 9</td>\n  </tr>\n  <tr>\n    <td>Tu 11/27</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Designing classes more carefully</li>\n        <li>Contracts</li>\n        <li>Preconditions and postconditions</li>\n        <li>Class invariants</li>\n        <li>Documenting contracts</li>\n        <li>Exceptions in C++</li>\n        <li>Throwing and catching exceptions</li>\n        <li>Exception safety: making sure that contracts hold true even when exceptions are thrown</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Ch. 18</li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Th 11/29</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Exception safety and guarantees</li>\n        <li>The basic guarantee, the strong guarantee, and no throw guarantee</li>\n        <li>Implementing an exception-safe version of our Vector class template</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Week 10</td>\n  </tr>\n  <tr>\n    <td>M 12/3</td>\n    <td></td>\n    <td></td>\n    <td><a href=\"ProjectGuide/Project4\">Project #4</a> due 11:59pm</td>\n  </tr>\n  <tr>\n    <td>Tu 12/4</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Implementing a standard-library-compliant container</li>\n        <li>What needs to be implemented in order to be standard-library-compliant</li>\n        <li>How to implement iterators, begin(), end(), rbegin(), and rend()</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Th 12/6</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li>Inheriting implementations with interfaces</li>\n        <li>Private and protected inheritance</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"nomarker\">\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Su 12/9</td>\n    <td></td>\n    <td></td>\n    <td><a href=\"ProjectGuide/Project5\">Project #5</a> due 11:59pm</td>\n  </tr>\n  <tr class=\"divider\">\n    <td colspan=\"5\">Finals Week</td>\n  </tr>\n  <tr>\n    <td>Tu 12/11</td>\n    <td>\n      <ul class=\"nomarker\">\n        <li><b>FINAL EXAM: 4:00pm-6:00pm, ICS 174</b></li>\n      </ul>\n    </td>\n    <td></td>\n    <td></td>\n  </tr>\n</table>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}