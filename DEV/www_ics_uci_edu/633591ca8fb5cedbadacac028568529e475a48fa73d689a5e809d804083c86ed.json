{"url": "https://www.ics.uci.edu/~kay/courses/i42/hw/hw4.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, January 26, 2006 6:41 PM\">\n<TITLE>Fourth Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D24CAD65\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/i42/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT FACE=\"Goudy Old Style\">Informatics 42 &bull; Winter 2012 &bull; David G. Kay\n  &bull; UC Irvine</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\" SIZE=6><B>Fourth Homework</B></FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\">Get your work checked and signed off by a classmate, then show it to your TA in lab by Monday, February 6. This assignment is all pencil-and-paper, which should\ngive you some more time to work on your lab assignment.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(a)</B> Give the average-case run-time\npolynomial and the O-notation for the following code segment, as we did in class.  Count each\nassignment statement and each function\ncall.</FONT></P>\n<pre><code>print(\"This line is executed only once.\")\ntotal = 0\nfor i in range(n):\n    x = readAnInt()  # count this line twice:  assignment plus call\n    total += x\n    if i % 2 == 0:   # equivalent to (even? i); % is mod (remainder)\n        print(x)\nprint(\"Total:  \")\nprint(total)\nprint(\"The end.\")</code>\n</pre>\n<P><FONT FACE=\"Goudy Old Style\"><B>(b)</B> You have been asked to write the spell checker\n  for SnazzyWrite, a word processing program that competes with Microsoft\n  Word.  Your software will take words from the user&#39;s document and look\n  each word up in a list of correctly spelled words.  (Sometimes this is called\n  a dictionary, but for clarity we&#39;ll call it a word list even if may not be implemented in Python as either a list or a dictionary.)</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">If your program doesn&#39;t find a word in\nthe word list, it notifies the user that the word is probably misspelled.\n In that case, it also gives the user the opportunity to add the word to\nthe word list, since the word may be a new word rather than a misspelling.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">You consider the following alternatives for\nimplementing the word list:</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">I.  A dynamically allocated singly-linked list,\nordered alphabetically, plus a single integer to store the number of words</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">II.  An array/vector ordered alphabetically, plus\na single integer to store the number of words</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">III.  A hash table as described in class (with\na good hash function, an appropriate table size, and collisions resolved\nby chaining)</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">IV.  A reasonably balanced binary search tree,\nordered alphabetically</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b.1)</B>  Complete the following table, giving\nthe best O-notation for each operation on each data structure, assuming\nthat each operation is implemented using the most efficient algorithm\navailable.  Assume that the word list contains <I>w</I> words and the user&#39;s\ndocument contains <I>d</I> words--use these variables, not <I>n.</I></FONT>\n<TABLE BORDER=1 CELLSPACING=1 WIDTH=100% CELLPADDING=1>\n<COL WIDTH=47%><COL WIDTH=13%><COL WIDTH=13%><COL WIDTH=13%><COL WIDTH=14%>\n<TR>\n<TD WIDTH=47% VALIGN=TOP>\n<FONT FACE=\"Goudy Old Style\"><B>Operation</B></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Goudy Old Style\"><B>Linked List</B></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Goudy Old Style\"><B>Array</B></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Goudy Old Style\"><B>Hash Table</B></FONT></TD>\n<TD WIDTH=14% VALIGN=TOP>\n<FONT FACE=\"Goudy Old Style\"><B>Bin. S. Tree</B></FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=47% VALIGN=TOP>\n<FONT FACE=\"Goudy Old Style\">Look up (search for) a single word in the word\nlist</FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28w29.gif\" WIDTH=27 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(w)\"></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28log.gif\" WIDTH=33 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(log\">\n<IMG SRC=\"Fourth_Homework_files/Symbol12_w29.gif\" WIDTH=15 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"w)\"></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28129.gif\" WIDTH=25 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(1)\"></FONT></TD>\n<TD WIDTH=14% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28log.gif\" WIDTH=33 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(log\">\n<IMG SRC=\"Fourth_Homework_files/Symbol12_w29.gif\" WIDTH=15 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"w)\"></FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=47% VALIGN=TOP>\n<FONT FACE=\"Goudy Old Style\">Add a new word to the word list</FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28w29.gif\" WIDTH=27 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(w)\"></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28w29.gif\" WIDTH=27 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(w)\"></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28129.gif\" WIDTH=25 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(1)\"></FONT></TD>\n<TD WIDTH=14% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28log.gif\" WIDTH=33 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(log\">\n<IMG SRC=\"Fourth_Homework_files/Symbol12_w29.gif\" WIDTH=15 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"w)\"></FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=47% VALIGN=TOP>\n<FONT FACE=\"Goudy Old Style\">Spell-check an entire document (assuming no\nnew words)</FONT></TD>\n<TD WIDTH=13% VALIGN=TOP><FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28dw29.gif\" WIDTH=33 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(dw)\"></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28d.gif\" WIDTH=21 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(d\">\n<IMG SRC=\"Fourth_Homework_files/Symbol12_log.gif\" WIDTH=21 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"log\">\n<IMG SRC=\"Fourth_Homework_files/Symbol12_w29.gif\" WIDTH=15 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"w)\"></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28d29.gif\" WIDTH=25 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(d)\"></FONT></TD>\n<TD WIDTH=14% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28d.gif\" WIDTH=21 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(d\">\n<IMG SRC=\"Fourth_Homework_files/Symbol12_log.gif\" WIDTH=21 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"log\">\n<IMG SRC=\"Fourth_Homework_files/Symbol12_w29.gif\" WIDTH=15 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"w)\"></FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=47% VALIGN=TOP>\n<FONT FACE=\"Goudy Old Style\">Print all the words in the word list in alphabetical\norder</FONT></TD>\n<TD WIDTH=13% VALIGN=TOP><FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28w29.gif\" WIDTH=27 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(w)\"></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28w29.gif\" WIDTH=41 HEIGHT=24 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(w)\"></FONT></TD>\n<TD WIDTH=13% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28w.gif\" WIDTH=23 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(w\">\n<IMG SRC=\"Fourth_Homework_files/Symbol12_log.gif\" WIDTH=21 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"log\">\n<IMG SRC=\"Fourth_Homework_files/Symbol12_w29.gif\" WIDTH=15 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"w)\"></FONT></TD>\n<TD WIDTH=14% VALIGN=TOP>\n<FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\"><IMG SRC=\"Fourth_Homework_files/Symbol12_O28w29.gif\" WIDTH=27 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"O(w)\"></FONT><BR></TD>\n</TR>\n</TABLE>\n<p><font face=\"Goudy Old Style\"><B>(b.2) </B> In the table above, some of the\n  entries measure primarily comparisons and others mainly measure data movements.\n  Circle each entry above whose O-notation measures primarily data movements.</font>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b.3)</B>  Which of these data structures\nwould be best for this task?  Give a very brief but clear and valid reason\nfor your choice. </FONT><FONT FACE=\"Symbol\" COLOR=\"#FFFFFF\">\n</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b.4)</B>  Considering only the O-notations\nabove, which two data structures should, logically, never be used for this\ntask?</FONT></P>\n<P>\n  <font face=\"Goudy Old Style\"><B>(c)</B> </font>Take some time to read through Alex Thornton's ICS 22 lab assignment, <a href=\"http://www.ics.uci.edu/~thornton/ics22/LabManual/Simple/\">&quot;What's Simple is True.&quot;</a> We will be doing a version of this as our next lab assignment. We may spend some class time starting it together, so you should be prepared to get the most out of that discussion by having a decent idea in advance of what the problem's about.</P>\n<p style=\"color: rgb(0, 0, 0); font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); font-size: medium; \"><font face=\"Goudy Old Style\">The assignment involves building an interpreter for a simple programing language like Basic; Alex calls his language Facile. This may seem a little infrastructural for us, but actually, it's not: Sometimes the right way to solve a problem is to make up a special-purpose language that makes it easy to express the various aspects of the problem (and then build an interpreter to process that language). Even the restaurants program is an anemic example of this; we have a \"restaurant collection manipulation language\" that consists of half a dozen single-letter commands. </font></p>\n<p style=\"color: rgb(0, 0, 0); font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); font-size: medium; \"><font face=\"Goudy Old Style\">Alex makes a big point in his writeup about how hefty this assignment is, but besides the fact that you're intrepid informaticians, always up for new experiences and challenges, you have two distinct advantages over the ICS 22 students doing this assignment: You're doing it with pair programming, and you've spent a week (last quarter) thinking about machine-level programming, so the concepts in this assignment will be familiar.</font><!--\n<P><font face=\"Goudy Old Style\">Let's think a little bit about designing SnazzyWrite to properly handle exceptions.</font></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(e.1)</B> As part of the SnazzyWrite application, you decide that you need the following method:</FONT></P>\n<PRE><font face=\"Courier New, Courier, monospace\">public ArrayList&lt;String&gt; readParagraphs(String filename)\n</font></PRE>\n<P>\n<FONT FACE=\"Goudy Old Style\">The method is intended to take a filename as a parameter, open the specified file, read its contents, and return an ArrayList&lt;String&gt;, where each String is the text of one paragraph.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">One of the first things that the method will do is to open the specified file, in preparation for reading its contents.  As we discussed in class, this operation fails in some circumstances (e.g., the file doesn't exist, can't be accessed because it's locked by another program, resides on a hard drive that's connected via a network connection that's down), throwing an IOException.  Should the method catch and handle this exception, or should the method allow it to be thrown to its caller?  In a couple of sentences, justify your answer.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(e.2)</B> Now we'll turn our attention back to the spell checker that we were considering in the previous parts of this homework.  Suppose that you're going to write a method called checkDocument that spell checks an entire document &mdash; perhaps it's given the ArrayList&lt;String&gt; returned by readParagraphs from part (e.1) as a parameter.  Would it be a reasonable design strategy for checkDocument to throw an exception in the case that it finds a spelling error?  In a couple of sentences, explain why or why not.</FONT></P> --></p>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Written by David G. Kay, Winter 2001.  Modified by Alex Thornton, Winter 2007. Modified by David G. Kay, Winter 2012.</FONT></P>\n<BR CLEAR=ALL>\n</BODY>\n</HTML>", "encoding": "ascii"}