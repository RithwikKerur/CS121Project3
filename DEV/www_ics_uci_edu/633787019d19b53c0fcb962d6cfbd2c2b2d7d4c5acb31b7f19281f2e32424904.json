{"url": "https://www.ics.uci.edu/~kkask/Spring-2018%20CS273P/Demos/Intro_Tutorial.ipynb", "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# NumPy, MatPlotLib, and course tools tutorial\\n\",\n    \"In this notebook, we will go through some basics of the python tools for numerical computing and plotting, as well as some of the code framework we will be using in class.\\n\",\n    \"\\n\",\n    \"### NumPy\\n\",\n    \"There are many libraries for scientific computing in python, but NumPy (http://www.numpy.org/) is one of the most common and well established.  NumPy gives a relatively efficient framework for manipulating fixed-type arrays, such as vectors, matrices, and tensors, as well as extensive libraries for common operations on those structures, such as computing data statistics, linear algebraic operations, and much more.  Many of its core operations are similar to Matlab/Octave, although it is more flexible and Pythonic.  \\n\",\n    \"\\n\",\n    \"### MatPlotLib\\n\",\n    \"MatPlotLib (http://matplotlib.org/) is a library for generating plots and figures in Python, specifically modeled to mimic the capabilities of Matlab for generating easy visualizations.  There are many alternative libraries for plotting data, some with featurs that matplotlib lacks, but matplotlib's simplicity and similarity to Matlab syntax and capabilities have made it fairly popular.\\n\",\n    \"\\n\",\n    \"### SciPy\\n\",\n    \"We will also occasionally need SciPy (http://www.scipy.org/), which has some functions not included in NumPy.\\n\",\n    \"\\n\",\n    \"All three libraries should be fairly simple to install; I would recommend installing the \\\"full SciPy stack\\\" (which includes iPython notebook and a few other things), as detailed here: http://www.scipy.org/install.html\\n\",\n    \"\\n\",\n    \"You may find iPython notebooks very helpful in creating nice homework reports; they allow you both a nice interactive format for experimentation, as well as re-running the whole thing from scratch if desired.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Course Tools\\n\",\n    \"We will also use some simple machine learning tools developed for the class.  These are not an offical library, so you'll just install them like your own source code -- place the \\\"mltools\\\" directory (not just the files, but the directory itself) in either your current working directory, or in a directory on your python path.  (You can check that this is working by e.g. \\n\",\n    \"> python -c \\\"import mltools as ml\\\"\\n\",\n    \"\\n\",\n    \"If you get an error, the code is not located correctly.\\n\",\n    \"\\n\",\n    \"Note that, while these tools are useable for your own projects, they are intended to provide a simplified skeleton of how various machine learning techniques work, for the educational purpose of understanding the concepts and writing and examining a number of fundamental algorithms.  If you are interested in using a more fully-featured library for practice, there are a number of excellent options, including\\n\",\n    \"* PyLearn2 (Python), http://deeplearning.net/software/pylearn2/\\n\",\n    \"* PMTK3 (Octave), https://github.com/probml/pmtk3\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"source\": [\n    \"## NumPy Basics\\n\",\n    \"We will use NumPy for representing data matrices and vectors.\\n\",\n    \"\\n\",\n    \"### Defining arrays of data\\n\",\n    \"To define one-dimensional arrays (vectors), we can use numpy's \\\"array\\\" object and pass it a list of values:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[1 2 3 4 5 6 7]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"\\n\",\n    \"a = np.array([1,2,3,4,5,6,7])\\n\",\n    \"# or equivalently, using Python iterables:\\n\",\n    \"a = np.array( range(1,8) )\\n\",\n    \"print a\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"To make a 2D array (matrix), provide the constructor with a list of lists:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[ 1  2  3  4]\\n\",\n      \" [ 5  6  7  8]\\n\",\n      \" [ 9 10 11 12]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.array( [[1,2,3,4],[5,6,7,8],[9,10,11,12]] )\\n\",\n    \"print A\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"For linear algebra-like operations will usually want \\\"vectors\\\" of size (m,1) or size (1,n) -- in other words, two-dimensional matrices.  (Note: there is a numpy class \\\"matrix\\\" that is specialized to linear algebra, but you should be a bit careful mixing \\\"array\\\" and \\\"matrix\\\" objects; so for now we'll stick with arrays).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# A row vector can be created as:\\n\",\n    \"b = np.array( [[1,2,3,4,5,6,7]])\\n\",\n    \"# and a column vector as\\n\",\n    \"bT = np.array( [[1],[2],[3],[4],[5],[6],[7]] )\\n\",\n    \"# that's pretty inconvient, so we usually just use the \\\"transpose\\\" operator:\\n\",\n    \"bT = np.array( [[1,2,3,4,5,6,7]]).T\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"One thing to notice is that $a$ and $b$ are not quite the same!  $a$ is a vector with shape (7,), while $b$ is actually a matrix with shape (1,7) -- it has two dimensions, one of which just happens to be one.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a's shape:  (7,) ; \\t b's shape:  (1, 7)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print \\\"a's shape: \\\",a.shape,\\\"; \\\\t b's shape: \\\",b.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The difference here is pretty semantic, but can make a difference to python -- \\n\",\n    \"so if you're getting shape errors, check what shape your variables are and make\\n\",\n    \"sure that's what's expected.\\n\",\n    \"You can use \\\"atleast_2d\\\" to force a vector to become a matrix, but be careful of what size is created:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"shape after 2D:  (1, 7)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"aNew = np.atleast_2d(a)\\n\",\n    \"print \\\"shape after 2D: \\\", aNew.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"There are several useful constructors for matrices that automatically \\\"fill\\\" a matrix of some shape:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"A0 = np.zeros( (3,4) )    # create a 3x4 matrix of all zeros\\n\",\n    \"A1 = np.ones( (4,4) )     # create a 3x4 matrix of all ones\\n\",\n    \"Ru = np.random.rand(2,2)  # create a 2x2 matrix of uniform random numbers, in [0,1)\\n\",\n    \"Rn = np.random.randn(3,2) # create a 3x2 matrix of Gaussian random numbers, with mean 0 and variance 1\\n\",\n    \"B = np.tile(b, (3,2))     # create a matrix by \\\"tiling\\\" copies of b (3 copies by 2 copies)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"A very useful constructor is linspace (and similarly logspace)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"b = np.linspace(1.0,7.0,4) # length-4 vector interpolating between 1.0 and 7.0\\n\",\n    \"c = np.logspace(0.0,2.0,7) # length-7 vector interpolating between 10^0 and 10^2 logarithmically\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Array indexing\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Arrays can be indexed in simple and useful ways.\\n\",\n    \"The (i,j)th entry in a matrix is simply:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"A[2,0]= 9\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print \\\"A[2,0]=\\\",A[2,0]   # 3rd row, 1st column\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"To reference an entire row or column, use the slice operator \\\":\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"A[0,:]= [1 2 3 4]\\n\",\n      \"A[:,1]= [ 2  6 10]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print \\\"A[0,:]=\\\",A[0,:]\\n\",\n    \"print \\\"A[:,1]=\\\",A[:,1]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Note that these are now vectors, not size-1 matrices, per the previous discussion.\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"You can use more general slicing with steps:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"A[1,0:2]= [5 6]\\n\",\n      \"A[0,0:4:2]= [1 3]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print \\\"A[1,0:2]=\\\",A[1,0:2]\\n\",\n    \"print \\\"A[0,0:4:2]=\\\",A[0,0:4:2]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"It is often useful to use lists to slice out particular rows or columns.\\n\",\n    \"You can do this with one row and several columns (or vice versa):\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"A[2, [1,4]]= [ 9 12]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print \\\"A[2, [1,4]]=\\\",A[2, [0,3]]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"or all rows and selected columns (or vice versa)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"A[:, [1,4]]=\\n\",\n      \"[[ 1  4]\\n\",\n      \" [ 5  8]\\n\",\n      \" [ 9 12]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print \\\"A[:, [1,4]]=\\\\n\\\",A[:, [0,3]]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Arithmetic operations\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Arithmetic operations are defined for arrays, i.e.,\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"a  = a+2\\n\",\n    \"# or\\n\",\n    \"a += 2\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"adds the scalar value 2 to every entry of a; similarly for *,-,/, etc.\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"You can add two vectors if they are the same size:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a + 2*c =  [   7.           10.30886938   16.28317767   28.           52.0886938\\n\",\n      \"  102.83177667  211.        ]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print \\\"a + 2*c = \\\",a+2*c\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"but you cannot add two vectors that are not the same size (unless one is a scalar):\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a + b =  Got exception!\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"try:\\n\",\n    \"    print \\\"a + b = \\\",a+b  # raises a ValueError exception\\n\",\n    \"except:\\n\",\n    \"    print \\\"Got exception!\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Operators are interpreted as elementwise, so that a*c is a vector:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[    5.            12.92660814    32.49112184    80.           193.8991221\\n\",\n      \"   464.15888336  1100.        ]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print a * c\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Linear-algebraic operations are also defined for vectors and matrices:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([  50.,  114.,  178.])\"\n      ]\n     },\n     \"execution_count\": 21,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"a.dot(c.T)  # The dot product between vectors a and c\\n\",\n    \"A.dot(b.T)  # The matrix-vector product of A and  c\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Elementwise powers are ** while matrix powers use the linalg module:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"R=A**2,                        # The elementwise square of A: R(i,j)=A(i,j)^2\\n\",\n    \"R=np.linalg.matrix_power(A1,2)  # The matrix product R=A1*A1: R(i,j)=\\\\sum_k A1(i,k)*A1(k,j)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### NOTE ###\\n\",\n    \"numpy also includes a \\\"matrix\\\" class, which wraps / redefines the \\\"array\\\" class\\n\",\n    \"for *matrix* objects, the operator \\\"\\\\*\\\" means matrix multiplication, and \\\"\\\\*\\\\*\\\" matrix power\\n\",\n    \"So, be careful which type of object you make!\\n\",\n    \"We usually want both matrix-like operators and array-like operators, so for consistency\\n\",\n    \"I usually define the objects to be arrays, and use \\\"dot\\\" when I want matrix operations.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Logical operands and logical indexing\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"It's often useful to use elementwise logical operations, which produce new (logical) vectors and matrices:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a==b :  [ True False  True]\\n\",\n      \"a!=b :  [False  True False]\\n\",\n      \"a<2  :  [ True  True False]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"a = np.array([0,1,2])\\n\",\n    \"b = np.array([0,0,2])\\n\",\n    \"\\n\",\n    \"# comparison operators produce new logical vectors or matrices:\\n\",\n    \"print \\\"a==b : \\\",a==b   # prints logical vector [1,0,1]\\n\",\n    \"print \\\"a!=b : \\\",a!=b   # prints logical vector [0,1,0]\\n\",\n    \"print \\\"a<2  : \\\",a<2    # prints logical vector [1,1,0]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"For us in flow control (if, etc.), you probably want to convert these to scalars with any or all:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Any?  True\\n\",\n      \"All?  False\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print \\\"Any? \\\",np.any( a!=b )   # true if any a(i)!=b(i) for some i \\n\",\n    \"print \\\"All? \\\",np.all( a==b )   # true if all a(i)=b(i) for every i \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"For matrices, you may want to only collapse one or more dimensions:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[False  True]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"M=[[0,1],[0,0]]; \\n\",\n    \"print np.any( M , axis=0)      # acts on individual columns of M; returns a logical row vector \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"We can use these logical vectors and matrices for indexing, such as to extract sub-matrices:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 26,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Positive entries of a:  [1 2]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print \\\"Positive entries of a: \\\", a[ a>0 ]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## MatPlotLib for plotting\\n\",\n    \"MatPlotLib gives a nice plotting interface similar to Matlab / Octave.\\n\",\n    \"\\n\",\n    \"### Scatterplots and line plots\\n\",\n    \"The most typical action is to plot one sequence (x-values) against another (y-values); this can be done using disconnected points (a scatterplot), or by connecting adjacent points in the sequence (in the order they were provided).  The latter is usually used to give a nice (piecewise linear) visualization of a continuous curve, by specifying x-values in order, and the y-values given by the function at those x-values:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt   # use matplotlib for plotting with inline plots\\n\",\n    \"%matplotlib inline\\n\",\n    \"#import mpld3                       # mpld3 is a \\\"interactive plot\\\" widget for ipython notebook\\n\",\n    \"#mpld3.enable_notebook()            # uncomment to be able to zoom into plots, etc.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Plotting a scatter of data points:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 34,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\nJEmSpMnw/9IsyM3OnswAAAAAAElFTkSuQmCC\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x7f3851625110>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x_values = np.random.rand(1,10)   # unformly in [0,1)\\n\",\n    \"y_values = np.random.randn(1,10)  # Gaussian distribution\\n\",\n    \"plt.plot(x_values, y_values, 'ko');\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The string determines the plot appearance -- in this case, black circles.  You can use color strings ('r', 'g', 'b', 'm', 'c', 'y', ...) or use the \\\"Color\\\" keyword to specify an RGB color.  Marker appearance ('o','s','v','.', ...) controls how the points look.\\n\",\n    \"\\n\",\n    \"If we connect those points using a line appearance specification ('-','--',':',...), it will not look very good, because the points are not ordered in any meaningful way.  Let's try a line plot using an ordered sequence of x values:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 33,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\ngg==\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x7f385160c710>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x_values = np.linspace(0,8,100)\\n\",\n    \"y_values = np.sin(x_values)\\n\",\n    \"plt.plot(x_values,y_values,'b-');\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"This is actually a plot of a large number of points (100), with no marker shape and connected by a solid line.\\n\",\n    \"\\n\",\n    \"For plotting multiple point sets or curves, you can pass more vectors into the plot function, or call the function multiple times:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 45,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x7f3850d9ac90>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x_values = np.linspace(0,8,100)\\n\",\n    \"y1 = np.sin(x_values)         # sinusoidal function\\n\",\n    \"y2 = (x_values - 3)**2 / 12   # a simple quadratic curve\\n\",\n    \"y3 = 0.5*x_values - 1.0       # a simple linear function\\n\",\n    \"\\n\",\n    \"plt.plot(x_values, y1, 'b-', x_values, y2, 'g--');  # plot two curves\\n\",\n    \"plt.plot(x_values, y3, 'r:'); # add a curve to the plot\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"You may want to explicitly set the plot ranges -- perhaps the most common pattern is to plot something, get the plot's ranges, and then restore them later after plotting another function:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 47,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(0.0, 8.0, -1.0, 1.0)\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"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\\nI5GI+eknOPFEm5sK0g5TbVBKwv33w6+/WjOfuFi3zt7Mpk2zy0wR2V27dlCjhh1iEyRK7KVYtgzO\\nOAMWLYJDD3UaStr162cnQk2e7DqSFP34Y/x+aZI2ixZZk6+vv4b99nMdzR+pxl6Khx6Crl3jmR/u\\nuMNm+kOZ2L//3hph5+a6jkQiqls32/sRtKSerNiO2OfNs+Osvv46GIdSuzBhAjz6qP0sQtfoTP3V\\nxScffQQtW8JXXwVzWbBG7CXo1s2W/MU1qYOtAqpaFcaOdR1JknJyrN8DKKmLLxIJG6lnZgYzqScr\\nlol99mzr4Ni+vetI3KpQwdbud+9ua/kDr0cPO7ZGxCeTJ8PPP0OrVq4jKZ/YlWISCWja1Br5tGmT\\n9qcPnETCera3axeCP2b1Vxcf5ebCqadaefLqq11HUzyVYoowdao1+7rlFteRBEP+qD0z0zreBlq1\\nakrq4ptx46BKlWjsPo9VYk8krLb++ONQSV1y/qtJEzthafhw15EUQf3VJQ1ycy0vZGZG44jcWCX2\\nyZNhyxa49lrXkQTPk0/a4SLbtrmOpBD1V5c0mDDBFhKErXVAcWKT2BMJS1zduoVwaV8anHGGtSse\\nMcJ1JEVo1iwawygJpETCRuvdu0fnzyw2KW76dFi7VqP1knTrZsd+BWKFjPqrS5q8844l9BYtXEfi\\nndgk9ieftHXrWv5cvMaN4cgj4fXXXUeC+qtLWkRxtA4xWe44e7atglmyRLmiNFOnwl132Tp/lawk\\n6iZNstYi8+eH5+9dyx3zPPmk7SZTUi9ds2a2onD8eEcBqL+6pNFTT8HDD4cnqScrYv87u/v0U+vU\\nFoaTxYOgQgX7Q3/qqV2799PqzTetgY+Iz2bNsp7rUZx3i3wp5vrr4ayzoEsX358qMnJz7dCRf/0L\\nLrvMdTQi/rjiCvv7vuMO15GUTez7sS9fbsv4vvkGqlf39akiZ9QoGDLEVhOlhfqrSxotXmxlx2++\\ngb32ch1N2cS+xt6njzX6UlIvu+uusxWHn36ahidTf3VJs169bJFA2JJ6siI7Yl+zxg6h/eILDQRT\\n1acPzJ2bpuWP6q8uabJyJTRoAEuXQs2arqMpu1iXYp54AlasiNdZpl7bsAGOPhr+8x846igfniAn\\nx5YjRGkBsQTefffZxWGfPq4jSU1sE/vWrZaQpk+HE07w5Sli44EHrA/Xs8/68OBPPmlDpo4dfXhw\\n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\\nyQyyzvvjAAAAAElFTkSuQmCC\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x7f385143f790>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x_values = np.linspace(0,8,100)\\n\",\n    \"y1 = np.sin(x_values)         # sinusoidal function\\n\",\n    \"y3 = 0.5*x_values - 1.0       # a simple linear function\\n\",\n    \"\\n\",\n    \"plt.plot(x_values, y1, 'b-') \\n\",\n    \"ax = plt.axis()               # get the x and y axis ranges\\n\",\n    \"print ax\\n\",\n    \"# you can set or modify the axis values explicitly if you want...\\n\",\n    \"\\n\",\n    \"# now plot something else (which will change the axis ranges):\\n\",\n    \"plt.plot(x_values, y3, 'r:'); # add the linear curve\\n\",\n    \"plt.axis(ax);                 # restore the original plot's axis ranges\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Histograms\\n\",\n    \"Histograms are also useful visualizations:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 49,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAXIAAAD/CAYAAADsfV27AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\\nAAALEgAACxIB0t1+/AAADJ9JREFUeJzt3W+MHHUdx/H3Qv9QubumNbFBJTRZxGcYwKSABA7lAQZr\\nSaMYRCIERQQFjaQhoLQmGhNJa4oiJCAQiSmmpCKJKTapNy0KtjSmGP5EaBtNwD4gFNpeIaal64OZ\\n89br3e3M7N/v7vuVTDqzM7PzvV9//dx09jezIEmSJEmSJEmSJEmSJEmSVEilwfqTgQeBs4AacBPw\\nH+BR4DjwInBLtk6S1INWAA9l85cAv8+mi7PX7geu7EJdkqQCTs7+/Crpmfjrdes+D/yi0wVJkiad\\nlGOb90kDfD3wG/7/csw4sLD1ZUmS8pqTc7vrgCXATuCUuteHgXdaXJMkqYBGQX4t8FHgJ8B7pGfn\\nu0ivl28DPgtsnW7HarVa27t3b+sqlaT+txc4s9VvugD4LWloPwssBz4GJNnyQ8w88qWm1OrVq7td\\nQs+wLSbZFpNsixQlRwA2OiN/D/jSNK+PljmYJKn18nzYKUnqYQZ5B4yOjna7hJ5hW0yyLSbZFs1p\\ndGdnM7JLPpKkPCqVCpTIZc/IJSk4g1ySgjPIJSk4g1ySgjPIJSk4g1ySgjPIJSk4g1ySgjPIJSk4\\ng1ySgjPIJSk4g1ySgjPIJSk4g1ySgjPIJSm4Rl/11pQbbvhWoe0XLJjHPff8mAULFrSpIknqP239\\nYgn4eaEd5s9fw0sv7aBarbapJEnqXWW/WKKtZ+RQ7Ix87tyftakOSepfXiOXpOAMckkKziCXpOAM\\nckkKziCXpOAMckkKziCXpOAMckkKrlGQzwUeA7YDO4DlwDnAG8BYNl3VzgIlSbNrdGfnNcCbwLXA\\nIuAF4IfAWmBde0uTJOXRKMg3Ak9k8ycBR4HzgI8DK4DXgO8A4+0qUJI0u0aXVo6QhvQwaajfBewE\\nbgcuAfYBq9tZoCRpdnkemnU6sAm4D3gcWAgczNY9CdzbntIkSXk0CvIlwBbgZtIPNgGeBm4Fngc+\\nA+yaefc1dfOj2SRJAkiShCRJmn6fRs+9XQ98EfhH3Wt3kH7YeRTYD9zI9NfIa1ArVMzQUJXdu7f4\\nPHJJA6ldzyO/LZumuqjogSRJ7eENQZIUnEEuScEZ5JIUnEEuScEZ5JIUnEEuScEZ5JIUnEEuScEZ\\n5JIUnEEuScEZ5JIUnEEuScEZ5JIUnEEuScEZ5JIUnEEuScEZ5JIUnEEuScEZ5JIUnEEuScEZ5JIU\\nnEEuScEZ5JIUnEEuScEZ5JIUnEEuScEZ5JIUnEEuScEZ5JIUnEEuScHNabB+LvAwcAYwH/gR8Arw\\nKHAceBG4Bai1r0RJ0mwanZFfA7wJXAxcDtwHrAXuzF6rACvaWaAkaXaNgnwjcHfdtkeBc4Ht2Wub\\ngcvaU5okKY9GQX4EGAeGSUP9+1P2GQcWtqc0SVIeja6RA5wObCK9rLIB+GndumHgnZl3XVM3P5pN\\nkiSAJElIkqTp96k0WL8ESICbgbHstadIr5NvAx4AtpKerU9VK/oZ6NBQld27t1CtVgvtJ0n9oFKp\\nQONcPkGjM/I7SS+d3M3ktfLbgHuBecDLwBNFDypJap1GQX5bNk012vpSJElleEOQJAVnkEtScAa5\\nJAVnkEtScAa5JAVnkEtScAa5JAVnkEtScAa5JAVnkEtScAa5JAVnkEtScAa5JAVnkEtScAa5JAVn\\nkEtScAa5JAVnkEtScAa5JAVnkEtScAa5JAVnkEtScAa5JAVnkEtScAa5JAVnkEtScAa5JAVnkEtS\\ncAa5JAWXN8iXAWPZ/DnA69nyGHBVG+qSJOU0J8c2q4CvAOPZ8nnAumySJHVZnjPyPcBKoJItnwdc\\nAWwDHgKG2lOaJCmPPEG+CThWt7wDuB24BNgHrG5DXZKknPJcWpnqd8DBbP5J4N6ZN11TNz+aTZIk\\ngCRJSJKk6fepNN4EgKXABuAC4DngVuB54NvAR4A7ptmnBrVCxQwNVdm9ewvVarXQfpLUDyqVCuTP\\n5f8pckY+kco3AfcBR4H9wI1FDypJap28Qf5P4MJs/gXgorZUI0kqzBuCJCk4g1ySgjPIJSk4g1yS\\ngjPIJSk4g1ySgjPIJSk4g1ySgjPIJSk4g1ySgjPIJSk4g1ySgjPIJSk4g1ySgjPIJSk4g1ySgjPI\\nJSk4g1ySgjPIJSm4wt/WXEBt8vua8xkaqlKrvcWRIwcLH2x4eBGHDh0ovJ8k9YpKpQIlcjnvly93\\nTBrixX4BABw+3M7fSZLUu7y0IknBGeSSFJxBLknBGeSSFJxBLknBGeSSFJxBLknBGeSSFFzeIF8G\\njGXzZwJ/BrYDv6S9d4dKkhrIE+SrgAeB+dnyOuBO4GLSEF/RntIkSXnkCfI9wEomz7zPJT0bB9gM\\nXNaGuiRJOeUJ8k3Asbrl+ksp48DCllYkSSqkzEOzjtfNDwPvzLzpmrr50WySJAEkSUKSJE2/T94P\\nKpcCG4ALgKeAtcA24AFgK7Bxmn1KPcZ2fHwfZZ5+CBVqtTL7SVJv6MRjbCdS8nukH37OA14Gnih6\\nUElS6/TcF0t4Ri5pUJU9I/eGIEkKziCXpOAMckkKziCXpOD6KMjnUKlUCk8jI4u7XbgkNaXMDUE9\\n6hhlRrscPuwzvyTF1kdn5JI0mAxySQrOIJek4AxySQrOIJek4AxySQrOIJek4AxySQrOIJek4Axy\\nSQrOIJek4AxySQrOIJek4Pro6YdlzZn4nrwC5gJHCx9peHgRhw4dKLyfJM3GIC/1+NtKiX18ZK6k\\n9vDSiiQFZ5BLUnAGuSQFZ5BLUnAGuSQFZ5B3VDrUseg0MrK424VL6mEOP+yoMkMdHbYoaXaekUtS\\ncM2ckf8NOJjN7wNuaL4cSVJRZYP8lOzPS1tViCSpnLKXVj4BfAD4I7AVWNayiiRJhZQ9Iz8C3AP8\\nCvgYsBk4CzjeorokSTmVDfJXgT3Z/GvAW8BpwButKEqSlF/ZIL8eOBu4BfgwMALsP3GzNXXzo9mk\\n4so8atfH5kq9LkkSkiRp+n3KDlCeAzwCnJEtrwL+OmWbWtEx00NDVcbH91FmrHXZR8uW26+Tx2pu\\nv1qtzH6SuiE7YSucy2XPyI8B15bcV5LUQt4QJEnBGeSSFJxBLknBGeSSFJxB3td8bK40CHyMbV/z\\nsbnSIPCMXJKCM8glKTiDXJKCM8glKTiDXJKCM8jVdSMjix0mKTXB4YfqusOH38ZhklJ5npFLUnAG\\nuSQFZ5BLUnAGuSQFZ5BLUnAGuSQF5/BDTWPOxJfAFjQXONrqYmbR2TqHhxdx6NCBwvuNjCzOhlgW\\nVbY9+/vnK1tnP2vnQNxa0bHBQ0NVxsf30fvfUN/JY7lfL+1XqxXfL/1l48833fE6WWcE2YlJ4Vz2\\n0ookBWeQS1JwBrkkBWeQS1JwBrkkBefwQym3ssMdo+j3n69/GeRSbscoP8wugn7/+fqXl1YkKbiy\\nQX4S8ADwLDAGVFtWkSSpkLJBfiUwD7gQuANY27KK+lLS7QJ6SNLtAnpI0u0CekjS7QJCKxvknwKe\\nzuZ3AJ9sTTn9Kul2AT0k6XYBPSTpdgE9JOl2AaGVDfIR4FDd8vtNvJckqQllR60cAobrlk8Cjk/d\\naGRkeaE3fffd/SXLkaTBVXbc0EpgOXA9cD7wA+CKKdvswQ9BJamIvcCZnTpYBbgf+Es2ndWpA0uS\\nJEmSJPWPRjcGLQd2Zuu/1tnSOq5RW3wXeDFbN0b/X45aRvpzTjVIfWLCTG0xaH1iLvAYsJ102PLU\\n0RCD1DcatUVH+8ZK4OFsfhnw5JRCXwMWZvM7gQ+1s5gum60tIP1LO6ejFXXPKuDvpP8g6w1an4CZ\\n2wIGq08AXAesy+YXAf+qWzdofeM6Zm4L6HDfWAtcVbf8et382cDmuuV1wBc6UVSXzNYWAC8DG4Fn\\nSO+G7WcrST95f27K64PWJ2DmtoDB6hMApwJD2fwHSUdoTBi0vjFbW0DBvtHsTTyz3Rg0AhysW3eY\\n9Ldtv2p0k9QG4BvAp4GLOHG4Zj/ZRPoovakGrU/AzG0Bg9UnAI4A46T3oGwE7qpbN2h9Y7a2gIJ9\\no9kgn+3GoINT1g0Dbzd5vF7W6Cap9cAB4CjwBwbrv9QTBq1PNDKIfeJ04E/Ar4HH614fxL4xU1tA\\nh/vGSuCRbP787IAT5gKvkl7/mQfsAk5rZzFdNltbLCS9BnYq6Rj8jcDlHa2u85Zy4uWEQesTE5Zy\\nYlsMYp9YArwCXDrNukHrG7O1Rcf7xnQ3Bl0NfD1b/znSDy12Ad9sZyE9oFFbXE3aFs8Aq7tRYIct\\nZfIDvkHtExOWMn1bDFqfWA/8m8mRGGPAlxnMvtGoLQatb0iSJEmSJEmSJEmSJEmSJEmSJEmD4794\\nQWC5JEV35gAAAABJRU5ErkJggg==\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x7f385140b190>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(y2, bins=20);\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The outputs of hist include the bin locations, the number of data in each bin, and the \\\"handles\\\" to the plot elements to manipulate their appearance, if desired.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Subplots and plot sizes\\n\",\n    \"It is often useful to put more than one plot together in a group; you can do this using the subplot function.  There are various options; for example, \\\"sharex\\\" and \\\"sharey\\\" allow multiple plots to share a single axis range (or, you can set it manually, of course).\\n\",\n    \"\\n\",\n    \"I often find it necessary to also change the geometry of the figure for multiple subplots -- although this is more generally useful as well, if you have a plot that looks better wider and shorter, for example.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 52,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAsUAAADHCAYAAADxnC46AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XucTfX+x/GXGUPu13INUYRuLkVIU+FUouhKVyW6nzin\\njqOEnK4nTvpFF5GTyi23kEthckmUnCQphCiRS4NxnZn9++O7x2xjjD179trftdZ+Px+P/bBn1p61\\nPmPmM+uzv+uzvl8QEREREREREREREREREREREREREREREREREREREREREREREREREZEINQMW5PL5\\nDsBy4Auge0wjEpGckoAxwEJgGSY/Q/UCVmNyeQFQN6bRiUhOicAoYDGwCGiYY7vOsSIu8ySwCpOU\\noZKAdUCZ4PPlwBmxDU1EQtwDDAk+LwdszrF9DNAolgGJSJ6uB94JPr8cmBqyTedYEYckFOBr1wOd\\ngUI5Pl8/uC0VOIp5p9u6AMcRkYKZCDwTfJ4ApOfY3gToixmR6hPDuEQkd9OAnsHntYA9Idt0jhVx\\nSEGK4smceHIFKI1J1iz7MO9oRcSONGA/UApTID+VY/tYzAn4SqAV0D6m0YlIbjKA0cBrwIchn9c5\\nVsQhBSmKTyYVc/LNUorj3+UCUKdOnQCghx56ZD/W45wzgfnAe8C4HNuGArsxo04zyaWVQvmqhx4n\\nPJzM1yz3YHr8RwDFgp/TOVYPPSJ7nDJnnSiK1wLnYHoXi2Au6yzN+aINGzYQCAQcffTv3z/P7TNm\\nBDj77ABt2gT46KMAO3eaz2dmBvjmmwD9+weoWDHAQw8F2L07//uPxffghWPE+/dw9GiAAQMClC0b\\noGfPAEuXBjhwwGxLSwswe3aAO+4IANRxIB8BKgFzMfcBjM6xrQzwHVAC0wp1JfC1G/PVC8fQ9xA/\\nx3AwXwHuBP4ZfH4QyMSc1MEl51g//AxjcQx9D5aP8emnBB54gEAgvJwtXPDcPZaoXYCSmHe0vYE5\\nmKJ7JLAtCseJmsxM6N8f/vtfGDkS2rY9fnuhQtCokXk8+ij07QvNmsH06VCvnp2YxZt++w26dIGk\\nJFi9GqpVO3578eLwl7+Yx/vvOxZGX0zx+wzZvcUjMIXwCEwf8QLgMPAZMNuxSEQkHB9h3sB+jrmZ\\n7q9AJzxyjhVxjcsug7PPDvvlBS2KNwEtgs/Hhnx+RvDhOunpcPvtsG0bfPUVVKqU9+srVIC33oJ3\\n3oHWrWHyZGjZMjaxirdt2QJXXAF33gn9+kGCE9dlwvPX4ONkxnJ8/oqIXQeBW/PY7tpzrIh1+/aZ\\nIq9uXShaFGrVCvtL7Z2mYyA5Ofm4jzMzoUcP2LMHPv301AVxqO7d4b33oHNn+O673PfvBD8cIx6/\\nh61bTUH84IPmqoTFgtgz4vH3xI3H8MP3EKtjxDO//AyVT/b3H/VjfP45jBkT0ZfmnE4tlgLBHo+Y\\n+ec/YeFCmDsXSpSIbB/jxsHf/w5ffAE1akQ3PvGHgwehVSu46SbzOxeuQoUKgd2czEvM81XEzVye\\nr6CcFTlOODkbN0XxtGnw2GOwYgVUrFiwfb38MkyZYgrspKToxCf+EAjAPffAkSPw4YemPz1cLj/J\\n6gQrEsLl+QrKWYknc+bApk3Qs+dJXxJOzsbFRd2NG+H++80ob0ELYjAjxeXLw9NPF3xf4i/vvAMr\\nV5p/81MQi4iISITq1YOmTQu8G9+PFGdmQnIydOxoitlo2bnTzE7x7rvQpk309ivetXmzycnPP4cG\\nDfL/9S4fedKok0gIl+crKGfF744cMY+SJcN6uUaKgREjzP9Zr17R3W/FimZWigceMD2kEt8CAXM1\\nonfvyApiERERyYc33oBXX43qLn09Uvzbb3DhhTB/Ppx/vjPHuOUWM+vHv/7lzP7FG0aPhtdfhy+/\\nhMIRTnTo8pEnjTqJhHB5voJyVvwuPd30KSYmhvXyuL/RrmtXOOsseO45546RVXhHeslcvG/fPtPO\\nNG0aXHxx5Ptx+UlWJ1iREC7PV1DOih8tWmTmHr7kknx/aVy3TyxfbgrVvn2dPU7VqmbarX/8w9nj\\niHu98IJZFbEgBbGIiIicwt695uEQX44UBwJw+eVw991w332OHOI4hw+bkcL33jOr3kn82LjRFMPf\\nfnviEs755fKRJ406iYRweb6Cclb8IjPTtEkUcEqnuB0pnjbNrFp3zz2xOV7RoqZF48knTUEu8WPA\\nAHjkkYIXxCIiIpKLAQPMjTsx4LuR4sxMuOgieP55uO66qO8+z+M2bQr9+kGnTrE7rtjz449m5br1\\n66FMmYLvz+UjTxp1Egnh8nwF5az4xY4dULo0nHZagXYTlyPF06aZVebat4/tcRMSoH9/GDRIo8Xx\\nYtAg+Otfo1MQi4iISNCaNbBrl3l+xhkFLojD5auiOBAwhcozz9hZTaxDBzNDyKxZsT+2xNbatTB3\\nrlk6XEQkipKAMcBCYBnQIcf2XsBqYEHwUTem0YnEwuTJ8NVXMT+sr9onZswwSy+vXGlvid3x481c\\n0l98oWV+/ezee810f/36RW+fLr8cq0uxIiEczNd7gAuA3kA54H9AzZDtY4AhwMpT7Ec5KxIi7uYp\\nvuwyePRRs6CGLRkZZr7iN96AK6+0F4c457ff4LzzYN06qFAhevtVUSziHQ7ma4ngfvcDFYDlQJ2Q\\n7WuA74HKwEzgxZPsRzkr3jJwIFx1lblZxwFx1VO8fDls2QKdO9uNIzER/vY3+M9/7MYhzvm//4Pb\\nb49uQSwiEpSGKYhLAROBp3JsHwv0BK4EWgExvoNGxCHXXgsNG1oNwTcjxV26mPlie/eO2i4jdvAg\\n1KwJixebJaDFP/btM20Ty5dD7drR3bdGikW8w+F8PROYDAwDRufYVhrIWr3gQcxo8r9y2Uegf//+\\nxz5ITk4mOTk52nGKFMz27XD66Wa2gihLSUkhJSXl2McDBw6EeGif+OUXMw3bxo3umQngqacgNRVe\\nf912JBJNr71mVpmcODH6+1ZRLOIdDuZrJSAFeAhzI12oMsAqoAFwAJgAjARm57If5ay43223wUMP\\nxWTls7jpKf7HP+DIEXe1LPz2m7kK8PPPUK6c7WgkGgIBqF8fRoww/evRpqJYxDsczNehwM3AjyGf\\nG4HpNR4BdMHMQHEY+AwYeJL9KGfF/dLToXDhmBwqLoriQ4egRg1YsgTOOScKUUXR7bebBT169bId\\niUTDZ5+Zn+WqVc7MLKKiWMQ7XJ6voJwVtxo+3KxyVqVKTA8bFzfaffSRaZ1wW0EM8OCD8NZbWszD\\nL4YNg4cf1lR7IiIiEStSxEzV5UKeHylu2dLM9mB71oncBAJm6q5hw0D3N3jbli1w4YWmf71kSWeO\\n4fKRJ406iYRweb6CclbcJIZtEifj+5HiVatg0ybo2NF2JLkrVAgeeMCMFou3vfMOdO3qXEEsIiLi\\nS4EAtGtnlm52OU+PFD/yiJkrduDJbjNwgT//NFN4/fijWb5bvCcjw/wMP/7YtOo4xeUjTxp1Egnh\\n8nwF5ay4yY4d1osgX48UHzoEY8dCt262I8lb2bJw/fXw/vu2I5FIffaZmUbRyYJYRETEV+bONW0T\\nYL0gDpdni+Jp06BRI6hVy3Ykp9atG7z7rm6486qRI+G++2xHUSBJwBhgIbAM6JBjewfMUrJfAN1j\\nG5qIiPhOIGBmQti2zXYk+eLZ9omrr4a77jJ9nm6XmWlmxxg/3kzRJt6xcyecfbbpXS9b1tljOXg5\\n9h7gAqA3UA74H1AzuC0JWAM0xSwGsAS4DtiRYx+6FCsSQu0TIt7i2/aJLVvMMrudOtmOJDwJCXD3\\n3Wa0WLzlww+hfXvnC2KHTQSeCT5PANJDttUH1gOpwFFgMeD80kIiHqQiUyQPGRlmKrDff7cdScQ8\\nWRSPGQO33ALFitmOJHx33w3jxpleaPGOMWPMFQmPSwP2A6UwBfJTIdtKYwriLPswS8mKSA79FvRj\\nxIoRtsMQcafERHjiCahUyXYkEbM7aVwEAgFTqIwcaTuS/KlZ09yoNX063Hyz7WgkHGvXwtatcNVV\\ntiOJijOBycAwYFzI51MxxXKWUsCe3HYwYMCAY8+Tk5NJ1uTbEkdmfTqLIS8PoXvj7gyYPsB2OCLu\\nsWlT9g1el15qM5IC81xP8TffwE03wYYN3ltZbNQoM63X1Km2I5FwPP00HDwIgwfH5ngO9ihWAlKA\\nh4AFObYlAd8DzTAjyl9gbrzLeXeE+hMlrr227DUW/bKIiTdPBNRTLALA4cPQujXMng3lytmOJk/h\\n5KzniuLevaFECRg0yIGIHJaaCjVqwMaNUL687WgkL5mZULu2eQMTq6nYHDzJDgVuBn4M+dwIoETw\\n3+swPccJwEjgjVz2oROsxK30zHTO+b9zGHfjOJpVbwaoKBY5JhDwxChlODnrqfaJjAzTlzt/vu1I\\nIlOmjFnU5aOPoEcP29FIXhYvhlKlzNLOPvDX4ONkZgQfIpKLSWsmUa1UtWMFsUhcO3gQnnsO+vWD\\nokU9URCHK9Ib7RKANzGXWhcAdXJs7wWsDm5bANSNNMBQ8+dDtWpw7rnR2Jsdt98OH3xgOwo5lbFj\\nzXR/Psp1EYnQzgM7eeqyp079wujR3OLiXkWLQvXqZmotn4n0lN8Zc8n1Xkwv4j+BG0K2jwGGACvz\\n2Ee+L+106wYXXAC9euUvWDc5fBiqVoWVK00rhbjP0aPmZ7R8uVneOVZcfjlWl2JFQjicr/egucXF\\nbQ4dgtNOsx1FxJycp7glMDv4fBkmOUM1AfoCi4A+ER7jOIcPm1XsbrklGnuzp2hRM7/yxIm2I5GT\\nmT8f6tSJbUEsIhJCc4uLu+zZAxdfbIoxH4u0KC4N7A35OCPHvsYCPYErgVZA+wiPc8zcuXDeeaZ9\\nwutuvdWsbifuNG4c3Hab7ShEJI5pbnFxl3LlYNEiM7LnY5HeaLeX4+c2TQAyQz4eSnbRPBNoFPz3\\nOPmZ93T8eFNM+sEVV5hp/TZu1Gik22RdkfjXv5w/VkpKCikpKc4fSES8SHOLi11HjsCMGWaVOvDc\\n0q6RnGML0lPcAegGNAf6kT0aXAZYBTTA9DtNwEzzNDvHPsLudzp4EKpUgR9/9PRCKcd54AEz5deT\\nT9qOREJNmwZDhsDnn8f+2OopFnGPIxlHKJJY5KTbHc5XzS0u9u3ebWaYGDoUCntqsrJcOdlTPAU4\\nhGnwH4yZbaILcD/mXWwfTCIvxMxCkbMgzpdPPoEmTfxTEIPpjVYLhftMnOj9vnURKbjec3ozbPkw\\nW4fvixlgeobsWZy6Ys6xRzE34M3BFMQjObEgFim48uVh2DBfFMTh8sTiHV26QHIy9OzpbECxlJ5u\\nZjRZvBjOPtt2NAKmdaJyZVizxlyZiDWNFIu4w460HZz7+rn88PAPVCqZ+2iMy/MVlLMSic2b4ZFH\\nzGVTn0255uRIccwcOgSzZsENN5z6tV5SuLCZhWLSJNuRSJZPP4Xzz7dTEIuIe7z65at0Oa/LSQti\\nEd+qUcMszOGzgjhcrv+u5841y+z6qXUiy403qih2k48+gptush2FiNiUeiiVt1a8xRMtn7Adikhs\\nZGbC2rXmeaFCZkGIOOX6onjSJP8WKpdfDj//DL/8YjsSOXIEPv44+yZbEYlPw78aTvtz2lOrbC3b\\noYjExk8/QZ8+oHYbdxfFWbOBdOpkOxJnJCVBx44webLtSGTePLN8ePXqtiMREZsqFK9An1ZRWXNK\\nxBvOPRemTDGjxHHO1UXx/PlQr54/Fuw4GbVQuMOUKeZnISLxrUeTHjQ4vYHtMESctW4dPPts9scq\\niAGXF8WTJ/u/UGnTBlavhm2aUMeajAxzo61fr0iIiIgc54wzzJ3lchzXFsUZGabH0++FStGicM01\\n5nsVO774wkzFVru27UhEREQctH+/+bdMGf8XWBFwbVH85Zdmxol4KFQ6dTKX78WOKVP0t0FERHzu\\n88/h7rttR+Fqrl284+9/hxIlYODAGEZkyb59pm96yxbz5k1iJxAwb7ymTbM/C43LFwPQQgDiW5v/\\n3Ez10tVJTEgM+2tcnq+gnJWcAgE4eBCKF7cdiRWeXbwjEICpU+Nn9K5UKbjsMrNIicTWt9+aOcrV\\nWiUSn9Iz02kzpg1fbv3Sdigi0bdlC3zyiXleqFDcFsThcmVRvHq1WQb5wgttRxI7aqGwY+pUs1qi\\nbrwViU/jVo+jaqmqtKzR0nYoItG3ezds2GA7Cs9wZfvEoEGwaxe8+mqMI7Jo+3Yz/dz27ebmO4mN\\nRo1g6FBo3dp2JK6/HKtLseI7GZkZNBzekGHXDuOq2lfl62tdnq+gnI1vgYBGe3LwbPvEtGlm9C6e\\nVKoE551n5maW2PjlF9i6FVq0sB2JiNgwbvU4KhSvwJVnXWk7FJHomTrV3Jgl+ea6onjrVti4EVq1\\nsh1J7F1/vaZmi6WPP4b27aFwYduRiEisZWRm8OzCZxmYPDBrBMltmgELcvl8L2B1cNsCoG4sgxIP\\naNcOeve2HYUnua4onj4drr02PguVjh1NoaYrXrExbZp5IyIi8Wlwu8FcdVb+2iZi5ElgBJBbM11j\\n4E7giuDjpxjGJW61Z09273Dx4v5eCthBriuKP/7YFIfxqF49KFkSvvnGdiT+9+efsGyZeUMtIvEn\\nMSGR6+pe59ZR4vVAZ3Lvf2wC9AUWAX1iGZS42Ny5MGmS7Sg8z1Xjsfv2wZIlMGGC7UjsyRotbtLE\\ndiT+NmuWubmuRAnbkYiInGAyUOsk28YCw4B9wBSgPTAzNmGJa916q+0IfMFVRfGcOeamp1KlbEdi\\nT8eO8Nhj8bFoiU3Tp8flFYlmwIuYS66hegH3AX8EP+6JLsmKuNVQYG/w+UygEScpigcMGHDseXJy\\nMsnJyQ6HJjE1ebIZTdQqdblKSUkhJSUlX1/jqinZ7roLmjeHhx6yFJELpKdDlSrw9ddQs6btaPzp\\n6FEz28fq1VC1qu1osjk8xdOTwB3AfiDnfBtjgCHAyjy+XtM7iYSIwZRstTCjwpeGfK4MsApoABwA\\nJgAjgdm5fL1y1u9+/NEUDQ0b2o7EEzw1JVtGhrmkfd11tiOxq3BhuOYamDHDdiT+tWSJWdrZTQVx\\nDKhHUeLe4fTDvL3ibTxULGYF2gW4H0jF5OgCYCFmForcCmLxq4MH4cAB87xePRXEUeaaovjLL83N\\nkjVq2I7Evg4dzOV9cUac3sw5GUg/ybaxmJaJK4FWmB5FEd95e8XbTF071a031+W0ieyrOmMxs1Fk\\nPb8EuAxQo128GTIERow49eskIq7pKZ4+XaPEWf7yF7j3Xti/38xGIdETCJjftXi+mTMXYfUoqj9R\\nvCztSBrPL36eT7p+EtHXR9KfKBJ1Tz4Zn3PWxohreoobNoRRo6BZM4sRuUjbtqa3ulMn25H4y9q1\\n5v/2l1/ctwKmy3sU1Z8onvbS4pdYsW0FE26OzjtiLfMsMTN3rrkR5sILbUfiaZ7pKf75Z9i1Cy6+\\n2HYk7nHddWqhcMKMGWYVO7cVxDGkHkWJO6mHUhm8dDDPXvGs7VBE8m//fkhLsx1FXHDFSPFrr8G3\\n38LIkRajcZmff4ZLL4Vt2yDBFW9d/CE5GZ54whTGbuPykSeNOolnDf9qOF//9jWjrh8VtX26PF9B\\nOettmZlm9CaOR3CiLZycdUVR3K6daRW44QaL0bhQw4bmjULz5rYj8Yc9e8w0d9u3Q7FitqM5kctP\\nsjrBimcFAgEOph+keFLxqO3T5fkKyllv693bjIzdfLPtSHzDE0Xxvn1maqxt23RTWU7/+AcUKQKD\\nBtmOxB/GjYMPPnBvW4rLT7I6wYqEcHm+gnLW237/HSpUgKQk25H4hid6ij/91Kxip4L4RNddp/mK\\no0kznIiIiGv973+QmmqeV66sgtgC60XxjBkqVE7m0kvNLAm//mo7Eu9LT4fZs93ZSywiIsLEibBq\\nle0o4prVojgzEz75RIXKyRQubOYsnpnrqvaSH0uXwplnQvXqtiMRkVhQ64B4znPPwWWX2Y4irlkt\\nilesMC0ztWvbjMLd1EIRHTNmmJUCRcT/AoEAncZ34ptt39gORSRvTz5piiFxBatFcdacsXJyV18N\\nKSlmuXOJ3MyZ+l0TiRez1s9i7c61XFDpAtuhiOStc2eoV892FBJkvShWP3Heypc3i9hoddHIbdoE\\nO3ZocRiReJCemc4Tnz7By21fpnCClsMVF9q2DbLae5o310wDLmK1KN640cw8IXm77jr1FRfEzJlw\\nzTWQmGg7EhFx2rsr36Vi8Yp0qKt+KXGpnj1h5UrbUUguIi2KE4A3gS8wy8PWybG9A7A8uL37yXbS\\nrp25mUzy1r69GVXXfSORmTlTVyRE4sH+I/vpn9KfV9q+kjUnqZc1w5xfcwrr/CouNmUKNG5sOwrJ\\nRaRF8Q1AEaAF0AcYHLItCRgCtAUuB3oAZ+S2E/V4hqdhQ/PvmjV24/CitDRYvNi8ARMRf0s9lMrf\\nLv0bF1fzfK/Uk8AIoGiOz4d9fhUXCQRgyBDYudN8rMuWrhVpUdwSmB18vgxoGrKtPrAeSAWOAouB\\n1rnt5JprIjx6nClUyLyBUAtF/s2fD02bQpkytiMREadVK12Nv7X4m+0womE90JkTV98K+/wqLlKo\\nEJQoocu9HhBpUVwa2BvycUbIvkpjEjbLPiDXkqRixQiPHoc0NVtkNOuEiHjQZCA9l8+HfX4VFzh6\\nNPt5z55w+un2YpGwRNrRuxcoFfJxApAZfJ6aY1spYE9uOxkwYMCx58nJySQnJ0cYjv8lJ8Ott8Lu\\n3WZGCjm1QMAUxZ99ZjuS3KWkpJCiaUVEJHxhn19B51irAgGzEMe4cVCrlu1o4lIk59hI70TojGn2\\n7wY0B/oBWeNxScD3mJsE0jA3A3QAtuXYR0ArDuVPx47QtSvcdpvtSLzh22/hxhth3Tpz9crtgjcG\\nuTVS5atIiBjkay1gLHBpyOfCPb+Ccta+P/7Q6LCLhJOzkbZPTAEOAUswN9n1AroA92P6nHoDczAJ\\nO5LcE1byKWsWCglPVuuEFwpiEYnMws0L+SX1F9thOCWrqtX51StmzYLM4IVzFcSeY7Nc0LvYfNqy\\nBRo1gu3bdfNqOFq0gIEDoW1b25GERyPFIvmz/8h+6g+rz/ibxtPizNhOeu/yfAXlbOylp8MDD8Dz\\nz8MZmhTEbcLJWRXFHnPRRTB8uBY9OZWdO6FOHbOSXdGckxq5lMtPsspXcZ2+8/qyZe8WxnQaE/Nj\\nuzxfQTkrchwn2yfEErVQhGf2bLjySu8UxCKSP+t3r+ftFW/zUpuXbIci8ezwYXPDz56T3u8oHqKi\\n2GM0X3F4ZszQKnYifvb47Md5suWTVC1V1XYoEs+KFoW+faFsWduRSBSofcJjMjKgcmVYsQJq1LAd\\njTsdPWraudasgSpVbEcTPpdfjlW+imv8uPNHbpp4Eyt6rKBIYhErMbg8X0E566yNG+Gss2xHIfmg\\n9gkfSkw0KwF+8ontSNxryRLTT+ylglhEwlevYj2+6fGNtYJY4lxampkbNS3NdiQSZSqKPUir2+Vt\\n5ky1Toj4XVJiku0QJF6VKAFffmn+FV9RUexB7drBwoVw4IDtSNxJ/cQiIhJVe/fC00+baddAE+D7\\nlIpiDypbFpo0gXnzbEfiPhs2mJuAGze2HYmIiPhG8eLmRh4Vw76motij1EKRu+nTzQwdCfrNFvGV\\nP9L+sB2CxKNDh8y/hQtDjx5aOcvnVDp4VFZRrJuLjzdjBnToYDsK12oGLMjl8x2A5ZhlY7vHNCKR\\nMKQeSuWity5i7c61tkORePL779C8eXbLhPiepmTzqEAA6taF8ePVKpAlNRWqV4dt26BkSdvR5J/D\\nUzw9CdwB7AdC10NMAtYATYEDwBLgOmBHjq9Xvoo1D818iIzMDN7q8JbtUI7RlGxxIjUVypSxHYVE\\ngaZk87FChcyI6PTptiNxj7lzoVUrbxbEMbAe6MyJfxDqB7elAkeBxUDr2IYmcnJLtyxl6tqpvNjm\\nRduhSDw4eBCmTMn+WAVxXFFR7GEqio83fbpaJ/IwGcjtGmBpTEGcZR+gs4C4wpGMI/SY0YNXr36V\\ncsXK2Q5H4kFqqpneSaPscamw7QAkcq1awc8/w2+/QdU4X+k0IwNmzYJBg2xH4jmpQKmQj0sBe3J7\\n4YABA449T05OJjk52cm4RBi2fBg1y9Tk5gY32w6FlJQUUlJSYnW4BGA4cAFwGNPrvyFkey/gPiDr\\n7sOewE+xCs7XKleG//zHdhRiiXqKPa5LF7jiCnNTbDxbsgQeegi+/dZ2JJGLQY9iLWAscGnI55KA\\n7zE34aVhbrbrAGzL8bXKV4m5tCNppB1N44wSZ9gO5QQO52tnTG//vZjc/CdwQ8j2McAQYGUe+1DO\\nhmvtWjMH8cSJmnLNx9RTHAfUQmF8/DF07Gg7Ck/IOkt2Ae7H9BH3BuZgCuKRnFgQi1hRokgJVxbE\\nMdASmB18vgxzI2yoJkBfYBHQJ4Zx+VPdujBggApi0Uix1+3ZAzVrmpljihe3HY099evDe+/BxRfb\\njiRyLr+bXfkqEsLhfB0BTCK7MN4MnAVkBj/uBwzD3AMwBXgDmJljH8rZvGRkwLp1cO65tiORGAkn\\nZ9VT7HHlypnV7T77LH5HSn/6ydwb0aSJ7UhERKJiL8f3+ieQXRADDA2+Bkwx3IgTi2LdB5CXVavg\\n3/+GDz+0HYk4JJL7ADRS7AOvvgqrV8M779iOxI7Bg01h/JZ7pjCNiEaKJd5lBjI5lH6I4knuv+wV\\ng57iDkA3oDlmZLh9cFsZYBXQADO3+ARM29PsHPtQzp5KIKCWiTiinuI40bGj6SvOyLAdiR3qJxbx\\nh2HLh9FjepzfNWxMAQ5hFtMZjJltIus+gFRMH/ECYCGwmhMLYsnNd9/BiyHzXasglhw0UuwT559v\\nRkpbtDj1a/1k1y6oXdv0VBcrZjuagtFIscSzn3b9RIuRLVh631LOqXCO7XBOyeX5CsrZE+3aBcuW\\nwbXX2o5ELNBIcRy5/nozYhpvZs40U9J5vSAWiWcZmRl0m9aNZy5/xhMFsXhIIAD79pnnFSqoIJY8\\nqSj2iY5CCCsWAAAXk0lEQVQdYdo021HE3tSp0KmT7ShEpCBeXvIyRROL8sglj9gORfzmk0/g0Udt\\nRyEeofYJn8jMhOrVYcECqFfPdjSxceCAWXxo40YzAOB1Lr8cq3wVR2z6cxOXjLiEr3t8TY0yNWyH\\nEzaX5ysoZ41AAA4d0uVEUftEPElIMC0UU6fajiR2PvvMTMPmh4JYJF7VKluLFT1WeKogFpdbvx4+\\n/dQ8L1RIBbGETUWxj3TqBFOm2I4idqZOhRtuOPXrRMTdzixzpu0QxE9274ZffrEdhXiQ2id85MgR\\n007w3XdQrZrtaJyVng5VqsBXX0GtWrajiQ6XX45VvoqEcHm+QjzmrOYdljyofSLOFClibqyNhxvu\\nliwxPdR+KYhFRKQA3n8fQlbwE4mEimKfiZcWismToXNn21GISH5lBjJZt2ud7TDEbzp2hIcfth2F\\neJzaJ3wmLc20FWzaBOXL247GGZmZULMmzJkDDRrYjiZ6XH45NvBH2h9ULF7RdhzicS8veZk5G+Yw\\n7655tkMpEJfnK8TDOXb7djOzRM2atiMRD1D7RBwqUQKuusos++xXX30FJUv6qyD2grum3EVmINN2\\nGOJhS7csZfDSwYzqOMp2KOIHM2aYeYhFokRFsQ/ddBN89JHtKJyj1gk7/jz0J4O/GGw7DPGo3Qd3\\nc9uk2xjRYQQ1y2pkT6LgvvvgwQdtRyE+ovYJH0pNhTPPhK1boXRp29FEVyAA55wDEyZA48a2o4ku\\nl1+ODWz+czOXjLiEj275iFY1WtmORzwkM5DJ9eOup275ugz+iz/eWLk8X8Gv59j33jPzDt98s+1I\\nxGPUPhGnypSB1q3NlSW/WbXKTMfWqJHtSOJPjTI1ePf6d+kyqQs70nbYDkc85Ic/fuBQ+iFeaPOC\\n7VDE6xo18t+IiLhGJO9yiwHvA6cD+4C7gZ05XjMUaBncHgBuAPbmeI0/38W6xOjR8PHHptXAT55+\\n2szH/PLLtiOJPpePPB3L19H/G83VZ19N5ZKVLYckXhIIBLJ+x33B4XxNAIYDFwCHge7AhpDtHYB+\\nQDowCngnl3345xy7b5+Zc7RoUduRiIeFk7ORJHRvoCTwLHArcCnweI7XLAKuB3bnsR//JKwL7d4N\\nZ50Fv/5qbkrzg0AA6tWDDz+Epk1tRxN9XimKRcTxfO0MXAfcCzQD/okZXAJIAtYATYEDwJLga3Ne\\nvvFPzvbpY/74d+tmOxLxMKfaJ1oCs4PPZwNtctnnOcAIYDGg32ILypeHli391ULx7bemdaJJE9uR\\niIg4KvQ8uwxTAGepD6wHUoGjmPNs65hGF2uDBsE999iOQuLAqYri+4DvcjzKkN0KsS/4cajiwGvA\\n7cDVwEPA+VGKV/Lh1lth3DjbUUTPhAlwyy1axVNEfK80x7ccZpB9vi6NKYiz5HYe9r6pU2HtWvM8\\nKUl/+CUmCp9i+8jgI9QkoFTweSngzxzbD2CK4kPBj+cDF2IK6uMMCFmSMTk5meTk5DBClnDdcAM8\\n9piZjaKMx/9kBgKmKJ4wwXYk0ZOSkkJKSortMAosIzODtKNplC7qs6lOJGJvfPUGlUpWonN9zZ0Y\\nob1kn2fBFMRZk4Sn5thWCtiT2048fY49eNA8RCIUyTk20p7iUsBA4DbgMiB0bcX6wFigMZAIpGBu\\nEvghx3780+/kYjfcYJZ+vvtu25EUzIoVZuR73Tr/Dhh4tad4xIoRjP9+PLNun0VSYlKMwxK3mffz\\nPG6ffDtL71vKWeXOsh2OY2LQU9wB037YHHNTXfvgtiTge0yvcRrwRfC123Lsw3vn2MxMSNCkWOIM\\np3qK3wAaYm6m644pjgF6YRLzB+A9YCmwABjNiQWxxIhfWig+/BC6dvVvQexl9za6lyKJRXh8ds77\\nbSXerNu1jtsn387YG8f6uiCOgSmYq61LgMGY82sX4H5MH3FvYA6mIB7JiQWxN/XoAbNnn/p1Ig7R\\n4h0+t38/VKsGGzZAxYq2o4lMRoZZjGTePKhf33Y0zvHqSDFA6qFUWoxqwYNNH+SRSx6JYVjiFrsP\\n7ubSkZfyt0v/Ro8mPWyH4ziX5yt48Ry7bRuccQYkJtqORHxIi3cIJUtC+/be7sX9/HOoXNnfBbHD\\nEoA3MaNKC4A6Obb3AlYHty0A6ub3AGVOK8P0LtN5btFzfLLukwKGK17U/ePutD+nfVwUxBJFy5dD\\nWpp5XqWKCmKxSkVxHLjjDhgzxnYUkfvgA7j9dttReNoNQBGgBdAHczk2VGPgTuCK4OOnSA5Su1xt\\nJt8ymTGrPPzLJhF7pd0r/Lvtv22HIV4zfjz8oA5LcQe1T8SB9HTTQrFkCZx9tu1o8ufQIahaFb77\\nznwPfubg5djBmLlOs64XbAWqh2xfg7lxpzIwE3gxl30oX0VCqH1CxFvUPiEAFC4Mt91mRly9ZsYM\\nuOgi/xfEDstrzlMws8X0BK4EWpF9l7uISPQ98gh8/73tKEROcKp5isUn7rwTunSBZ57x1gwOo0dr\\nIaMoyGvOU4ChZBfNM4FGwX+P4+k5T0UKyC/zirtC165QJ+etDSL2qX0iTgQC0KABvPOOWf7ZC7Zt\\nMzFv3QolStiOxnkOXo7Na87TMsAqoAFm4Z0JmCmecs6LFHG+Hko/RGKhRM1h7CMLNy/khz9+oGfT\\nnrZDsUbtE/n022/mRjovjcqIr6h9Qo4pVAjuvRdGjbIdSfg++MAsPBIPBbHD8przNBVz890CYCFm\\nFoqoThT6/KLnuffje8kMZJ76xeJ6K7et5KYJN1GnvEb6JEyBANx1F/z4o+1IRPKkkeI48vvvZlqz\\nLVvMVG1uFgjA+efD8OHQurXtaGLD5SNPEefrgaMHuPr9q2l4ekOGtx+e9X2KB/3wxw9c9d5VvH7t\\n63G/hLPL8xXcdo7NyNB0a2KVRorlOJUrmwJz4kTbkZza11+bZe9btbIdiRRU8aTizOg6gxXbVvDE\\np0/gqhO1hG397vW0HdOWl9u+HPcFsYQhMxNefBFSU83HKojFA1QUx5l774WRI21HcWpvvQXdu0OC\\nfkN9oXTR0sy+YzbzNs6j77y+Kow9JhAIcMfkO+h/eX/uuOAO2+GIFyQkQJky5rKfiEeofSLOHD0K\\nNWqYJZMbNLAdTe5SU6FWLTOfe+XKtqOJHZdfjo1Kvu48sJMXFr3AS21fonCCJr/xkr2H91K6aGnb\\nYbiGy/MVbJ1jjx6FJN1UK+6j9gk5QVKSGYF9803bkZzchx9CmzbxVRDHi4rFKzL4L4NVEHuQCmI5\\npfR0aNYMtm+3HYlIRDRSHIe2bIELL4RffnHfDXeBADRqBP/+N7Rtazua2HL5yJPyVSSEy/MVbOXs\\nzp1QsWLsjytyChopllydeaa54e7DD21HcqIvv4T9++Gqq2xHIhK/ft//u+0Q4lkxYBJmisSZQG4V\\n5lDga8xUivMxq1baEQjA9OnZvcMqiMXDVBTHqQcfNNOduW3wb+hQePRR3WAXTw4cPcDAlIEcTj9s\\nOxTBLMxxwRsX8POen22HEq8eBL4FWgPvAU/n8prGQDvgCszy7HtzeU1sHDkCU6ZkzzIh4mEqPeJU\\n27Zw4AAsWmQ7kmxbtsDcudCtm+1IJJYSCyWy+o/VXP3B1aQe0onVpklrJnHThJsYe+NYaperbTuc\\neNWS7AV0ZgNtcmxPAM4BRgCLMStV2lO0qFkVqmxZq2GIRIOK4jiVkAC9e8PgwbYjyTZ8ONx5J5TW\\n/TxxpWjhooy7cRwNT29I69Gt2bp3q+2Q4tLry1/nsdmPMeeOOVxVW/1LMXIf8F2ORxmyR373BT8O\\nVRx4DbgduBp4CDg/FsEes38/tG8PaWkxPayI03SjXRw7cMBMfbZoEdSrZz+WmjVh6VI4+2y7sdji\\n8ht3HM/XQCDAK1+8wmvLX2N6l+lcVPkiR48n2V5a/BKjvx3NJ10/4axyZ9kOxxMczNdJwIvAV5iC\\neDHHF70JmMJ4f/DjlzDF9Ps59hPo37//sQ+Sk5NJTk6OXpTLlpmZJkRcKiUlhZSUlGMfDxw4EE6R\\nsyqK49wzz8COHfanaHvtNViwwLSmxat4L4qzTPx+Igs2LWB4++ExOZ7Aht0bKF+sPOWKlbMdimc4\\nmK+9gVLAQOA24DLg4ZDt9YGxmL7iRCAF6A78kGM/0c/ZDRugTp3o7lMkRsLJWRXFcW77dqhf3yyU\\nUamSnRiOHDF/ZydPhosvthODG6goFvEOB/O1GPBfoApwGOgK7AB6AeuB6ZjC+VbgaPC1I3LZT3Rz\\nds8euPZaSEkxfcQiHqOiWMLy6KPmb9wrr9g5/siRMH68uckunqkoFvEOl+crOJGzgQAUcvO3LHJy\\nmqdYwtKnj7l5eMeO2B87IwNefBGeeir2xxZvyQxk2g7B8zIyM5i6dip6gyNh2bULnn4aMoO5p4JY\\nfE5FsVCtGnTtalaRi7UxY8xyzq1bx/7Y4h2BQIB2Y9oxauUoFXQR+n3/77R7vx1Dlw3lYPpB2+GI\\nF5QqBbVrqxiWuKH2CQFg61a44AJYvRqqVo3NMQ8dgrp1Ydw4aNEiNsd0M5dfjrWer9/v+J5bP7qV\\n8844jzeve5Oyp2le1HDN+GkG90+/n/sb30//y/uTmJBoOyTPc3m+QkFy9uBBKFYsutGIWKb2CQlb\\n9erQvTv06xe7Yw4bBo0bqyCW8DQ8oyFf3f8VFYtX5MI3L2Tez/Nsh+R6B44e4KGZD/HIJ48w/qbx\\nPHvFsyqIJW8bN0JysvuWOxWJAY0UyzF//mnmK547Fy680Nlj7dljjpWSAg0aOHssr3D5yJOr8nXO\\n+jl0n96diTdPpHn15rbDca2DRw8y8POB9GnVRyPrUebyfIWC5OzevVpFSXxHs09Ivg0fDpMmwWef\\nOdtG9uCDZv/DNRXtMS4/ybouX/cd3kfJIiWz/t9EYsrl+Qr5ydl9+2D+fLj+emcjErFI7ROSbz16\\nwB9/wNixzh1j+XKYOhWee865Y4j/lSpaSgWxSDTs2QNffKGWCYl7KorlOIULm3mDe/d2Zoq29HR4\\n4AF4+WUop8WzxAFLflnCgaMHbIcRU8u2LuOWibeQdiTNdijiRTVqwEsvaZYJiXsqiuUEF18Md94J\\njz0W/X0PGgQVK8Idd0R/3yIAo/83mrr/V5d3vnmH9Mx02+E4av3u9XSZ1IXOEzpzzdnXcFrh02yH\\nJF6xcqX+EIvkoJ5iydWBA9CkCTz5JHTrFp19LloEt9wC33wDVapEZ59+4vIeRU/l67Kty+gzrw+/\\n7fuNfq37cdt5t1E4obDtsKJm85+beW7Rc0z+YTKPN3+cx5s/TskiJW2HFVdcnq9wqpxNT4d166B+\\n/dhFJGKRbrSTAlmzBi6/HD79FC66qGD7+uMPaNrU3FjXvn104vMbl59kPZevgUCABZsWMCBlAPUr\\n1uetDm/ZDilqPvv5M1I2pdCreS8qFK9gO5y45PJ8hdxy9sgRM+VavXp2IhKxSEWxFNi4cdC3r7kH\\no3LlyPaRlgZXXgnt2pn2Ccmdy0+yns3XQCBA2tE0jaRKVLk8XyG3nF2yBP77X3j7bTsRiVikolii\\n4l//MrNRpKTA6afn72uPHIEbbzR9xKNG6T6OvLj8JOvLfF3yyxIaV2lMsST3rd71066f+O///svj\\nzR/n9BL5TDxxnMvzFXyasyKRcnpKtk7AByfZdj/wFbAUsHaxPCUlxdP7d8sxnn4aOnWCNm1g8+bw\\n9/vnn3DNNbBnTwpvv+1sQeyHn7WDEoA3gS+ABUCdHNs7AMuD27vHNrRssf5dzwxk8sLiF6g6pCp3\\nTrmTyT9MLvDsDQX5HgKBAGv+WMMLi16g8VuNaf1uaw6mHyQjkBG1Y4TDDX9zvHIMh0XnHLt8OQwZ\\nEt3I8M/PUPlkf/+xOkY4Ii2KhwLPk3vFXRl4FGgB/AV4ASgS4XEKRL8o0TvGoEFmRopmzWDWrFPv\\n8+uvoWVLOO88uPLKFJKSCh5nXvzws3bQDZgcbAH0AQaHbEsChgBtgcuBHsAZsQ4QYv+7nlAogRld\\nZ7DmoTU0r9ac4V8Np/Lgytwy8Zao7D+/+i3ox9XvX82v+37llXav8GvvXxnylyFULnl835Ifftf9\\ncgwHRe8cW6OGI0uU+uVnqHyyv/9YHSMckd6OvQSYAvTMZdslwe1Hg4/1wAXA1xEeS1ygUCH4+99N\\nUXzHHWZp5qeegksvhcRE85pAAFasgLfeghkzzLSXd90FAwZYDV2gJTA7+HwZ0DRkW31MjqYGP14M\\ntAY+ill0llUpVYWHL3mYhy95mH2H97F259pcX7d9/3ZWbV9FnfJ1OLP0mSQlhvdOLxAIsPvgbjan\\nbuanXT9RoVgF2tZpe8Lr/tnqnwy6YpAWJBGI5jm2cuXIbwgRiTOnKorvAx7P8bl7gAlA8km+phTZ\\nJ1iAfUCZCGITF7rsMvjpJ3j3XbP63a+/wvnnw9Gj5nmxYnDbbfDDD1C2rO1oJag0sDfk4wzMVaLM\\n4Dbla1CpoqW4uNrFuW7b+OdGXlj8Ahv2bGDbvm2UOa0MFYtX5Pp61/NimxdPeP2sdbN4YOYD7Ejb\\nQdHEotQqW4uzy59Np3M75br/EkVKRPV7EU/QOVbEJ5KB3BYD7gAMC/l4MtA4l9etBwJ66KHHscd6\\nnDEYuDnk4y0hz88HZoZ8PATonMs+lK966HH8w6l8zZKMzrF66BHNh6M5m0zuCVsJWAUUxbx7/QFL\\nPcUiApgi993g8+YcXwQnAT8B5TB5+jWgpVVE7EtG51iRmCrIEk9ZlXeWXpgqfDrwGrAIc4m2L3Ck\\nAMcRkYKZgrmRbknw425AF6AkMALoDczB5OtIYJuFGEXkeDrHioiIiIiIiP+das7UaGkW3L8TkoAx\\nwELM3fwdHDhGIjAKMxvAIqChA8cAM/3WFqCuQ/v/BvNzWIAZhYy2f2J+l74C7nZg/3eTHf+XwEHM\\nzWnRlED2z3oh4KY1WGOVr+Bczipfw+d0voKzOat89X6+gvM5G6t8BWdz1uv5Cs7nrJvzFTD9jaOC\\nz5sBUx04xpOYnqsvHNg3mLuDs2ZDLwfkY0mLsF0PvBN8fjnO/D8lYS6tr8WZhD0Nk7ROSQY+Dj4v\\nAQx08FgAr+PM4hZXA+ODz9vgrunQYpGv4GzO3oPyNRxO5yvENmeVr97MV3A+Z2ORr+BszvotX8GZ\\nnM1XvhZkRbtI5TVnarSsx/xxcGrCz4nAM8HnCUC6A8eYRvYclbWAPQ4c49/AGzjXQ3ohUBzTrzoP\\n80c6mtoB32H+oE0nO3md0BQzmvDOqV4YgYOYG2YKBf91U39gLPIVnM1Z5Wt4nM5XiF3OKl+9m6/g\\nfM7GIl/B2Zz1U76Ccznr5nwFzI09V4d8vBlnivNamCUwnVQKmA/c5uAxRmPmpDxxtv+CuQd4Kvh8\\nAc5cUjgPMw8nwDmYP6TR/FmPwJwACmPehee+6kJ0TMaMKDihMJAC/AjsBC516DiRiFW+gvM5q3zN\\nm9P5CrHLWeWr4eV8BedzdjTO5Cs4n7N+yldwLmfdnK9A3nOmRlMtnE3YMzE9Nvc4eIwslYBNQLEo\\n7vNzzC/KAsy75C+Dx4mmIphLPFmWAdWiuP8XMDMnZPkfUDGK+89SFljtwH6z9AWeCz6vjpkizS1T\\nLMUqX8HZnFW+nprT+QqxyVnlazav5ivELmedyFdwPmf9kq/gbM7mK19ttE8sAa4NPm+O6UvymkrA\\nXExf1WiHjnEnpsEdzPB/ZvARLZdj+oWuwPyi3wVsj+L+wUz9NTj4vCqmeT6al5EWkz0qUhXT87Qr\\nivvP0hpzecopJchecW4Ppg8t0cHj5YfyNTzK1/DEImeVr4ZX8xWcz1mn8xWcz1m/5Cs4m7NuzlfA\\n9HW8gUneJTh3F3UtnLsJYCjwG9l3TC7g+Hds0VAM0xz+Oeb7cOKO+SwLcObnUJjsO4gXYv5IR9tL\\nwHLMohNOXAID+DvwmEP7BvMueQrmLugvcfbyfn7FKl/BuZxVvoYnFvkKzues8tXb+QrO52ws8xWc\\nyVm/5Cs4m7NuzlcRERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER\\nERER9/h/dFzREV+EtK0AAAAASUVORK5CYII=\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x7f3850b9ec90>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.rcParams['figure.figsize'] = (12.0, 3.0)\\n\",\n    \"fig,ax = plt.subplots(1,3)      # make a 1 x 3 grid of plots:\\n\",\n    \"ax[0].plot(x_values, y1, 'b-');   # plot y1 in the first subplot\\n\",\n    \"ax[1].plot(x_values, y2, 'g--');  #   y2 in the 2nd\\n\",\n    \"ax[2].plot(x_values, y3, 'r:');   #   and y3 in the last\\n\",\n    \"\\n\",\n    \"plt.rcParams['figure.figsize'] = (6.0, 4.0);  # restore default plot size after \"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 2\",\n   \"language\": \"python\",\n   \"name\": \"python2\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 2\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython2\",\n   \"version\": \"2.7.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 0\n}\n", "encoding": "ascii"}