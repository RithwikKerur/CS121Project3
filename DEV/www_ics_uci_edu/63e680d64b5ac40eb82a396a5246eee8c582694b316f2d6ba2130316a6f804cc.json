{"url": "https://www.ics.uci.edu/~theory/269/140425.html", "content": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>Theory Seminar, April 25, 2013</title>\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\"\n  src=\"http://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"http://www.ics.uci.edu/~theory/logo/CATOC2.jpg\"></a>\n<h2><a href=\"/~theory/269/\">CS 269S, Spring 2014: Theory Seminar</a><br>\nICS Building, Room 243, 1pm\n\n<hr />\nApril 25, 2013:</h2>\n<h1>\nNew dynamics in geometric data structures\n</h1>\n<h2>\nJoe Simons\n</h2>\n\n<p>\nWe study geometric data structures for spatio-temporal data: geometric\nobjects which change over time.  In particular, we design data\nstructures for fundamental geometric problems in the following four data\nmodels: \n<ul>\n<li>\nIn the retroactive model, we maintain a timeline for the historical\nsequence of updates to the data structure, and every update has an\nassociated time stamp.  Unlike the standard dynamic model, in which we\nonly allow query and update operations against the current state of the\ndata structure, in the retroactive model, we also allow operations to be\nperformed ``in the past''.  We describe fully retroactive dynamic data\nstructures for approximate range reporting and approximate nearest\nneighbor reporting. \n</li>\n<li>\nIn the windowed model, we take an event-based approach, where each\ngeometric object corresponds to an event that occurs at an instance in\ntime, and queries are performed with respect to an interval in the\ntimeline.  We consider time-windowed queries for skylines in\n$\\mathbf{R}^d$, convex hulls in $\\mathbf{R}^2$ and proximity based\nqueries in $\\mathbf{R}^d$.\n</li>\n<li>\nIn the set-difference model, we maintain a dynamic set (or multiple\nsets) of items such that two subsets can be efficiently compared.  We\nintroduce the problem of performing set-difference range queries, where\nanswers to queries are set-theoretic symmetric differences between sets\nof items in two geometric ranges.  We describe a general framework for\nanswering such queries based on a novel use of data-streaming sketches\nwe call <i>signed symmetric-difference</i> sketches.  \n</li>\n<li>\nIn the local-update model, we maintain a set of geometric objects such\nthat the speed of updates is parameterized by how dramatically the\nupdate changes the object. When the updated object is similar to the old\nobject in size and location, we desire to surpass known lower bounds for\nmore general updates.  We study planar point location in a collection of\ndisjoint fat regions, and investigate the complexity of local updates.\nWe design a linear size data structure that allows for insertions,\ndeletions, and queries in logarithmic time, and allows for local updates\nin sub-logarithmic time on a pointer machine. \n</li></ul>\n</p>\n\n</body>\n</html>\n\n", "encoding": "ascii"}