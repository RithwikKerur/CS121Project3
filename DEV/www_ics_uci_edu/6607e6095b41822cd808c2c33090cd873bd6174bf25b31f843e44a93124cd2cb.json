{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/hw6.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Wednesday, November 2, 2005 12:58 PM\" />\n<TITLE>Sixth Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D23C3977\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/h21/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style1 {font-size: 10pt}\n.style2 {\n\tfont-size: 10pt;\n\tfont-family: \"Courier New\", Courier, monospace;\n}\n-->\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY &bull; FALL 2009</font></P>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Sixth<font face=\"Garamond\"> Homework</font></B></FONT></P>\n<P><BR />\n  <FONT FACE=\"Garamond\" SIZE=4>This assignment is due in lab on Monday, November 2.  If you haven't already, change your language level to Intermediate Student\n  with Lambda before you begin.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(1)</B> Chapter 19 starts the book&#39;s\ndiscussion of higher-order functions (functions as arguments).  Look at exercises 19.1.1 and 19.1.2; they should be easy for you now, so you don't have to write down the answers.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(2)</B> Chapter 20 continues with higher-order\n  functions.  Do exercises 20.1.3, 20.2.1, 20.2.2, 20.2.3, and 20.2.4.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(3)  </B>Chapter 21 of the HtDP text starts\nwith an unusually clear design recipe for abstracting, or refactoring, functions.\nIt continues by introducing the predefined functions map, filter, and foldr (also known as reduce or accumulate); we'll talk about these in class on Tuesday. Do exercises 21.1.1., 21.1.2, 21.2.2 (pick just one of the three parts), 21.2.3.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(4)</B>  Chapter 22 of HtDP has a section\nthat introduces graphical user interfaces (GUIs).  We won&#39;t be doing GUIs explicitly this quarter, but\nif you&#39;re intrigued with the GUI-building tools in DrScheme, note that\nthe gui.ss teachpack  works differently from the description in section\n22.3 of the printed text.  You can look up the current gui.ss teachpack documentation\nin the Help Desk.  (DrScheme also has a full-blown set of GUI operations,\nbut they&#39;re not in the student languages.)</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(5)</B>  We&#39;re not doing Chapter 23.\n It&#39;s interesting, and functional programming is beautifully suited\nto mathematical problems, but there are only so many hours in the quarter.\n If you&#39;re interested, come back to this chapter over the winter break.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(6)  </B>Intermezzo 4 (Chapter 24) talks\nabout lambda, which you know already.  Do exercises 24.0.8 and 24.0.9.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(7)</B>  All the programs we&#39;ve written\nso far have done their work, displayed their results, and quit without leaving\na trace.  Now it&#39;s time to learn how to read data from a file and write\nresults back to a file so we can maintain information more permanently,\neven when our program isn&#39;t running.  For a programming language to\nenable file input and output, it must work with the operating system (or\nmultiple operating systems) to handle a variety of issues involving different\nuser interfaces, different ways of storing data in files, different naming\nconventions for files, and different hardware devices.  Because there are\nmany options, there are details to consider when we work with files that\nwe haven&#39;t had to worry about so far.</FONT></P>\n<P>\n  <FONT FACE=\"Garamond\" SIZE=4>There are three main approaches to reading\n    from and writing to files of text.  (Reading and writing data directly in\n    the internal form the computer uses to store it in memory is yet another\napproach, one we&#39;ll skip over for now.)</FONT></P>\n<ul>\n  <li>\n    <FONT FACE=\"Garamond\" SIZE=4>Read and write a single character\n      at a time.  If you read each character individually, you have the most precise\n      control over how you analyze the input and build up the data structures\n      in your program.  But this approach is the most painstaking and tedious.\n      You may cover some techniques for organizing this process in ICS H22, but\n    we won&#39;t use it this quarter.</FONT></li>\n  <li><FONT FACE=\"Garamond\" SIZE=4>Read each line of the file\n      into a string, perhaps collecting the strings into a list representing the\n      whole file.  Then you could process the list conventionally, processing\n      each string using Scheme&#39;s string functions.  This week we&#39;ll do\n    some of this.</FONT></li>\n  <li><FONT FACE=\"Garamond\" SIZE=4>Write all the data as Scheme\n      expressions, and read it back in the same way.  If your program&#39;s data\n      is organized into lists of structures and so on, you can preserve all of\n      that organization using this approach.  This is the easiest approach in\n      many ways, since you&#39;re maintaining the structure of the data and letting\n      Scheme do a lot of the work for you.  We&#39;ll see this approach in later\n    assignments.</FONT></li>\n</ul>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments and exams\nby David G. Kay from Fall 2001; modified by David G. Kay with material from\nInformatics 41, Fall 2004-Fall 2009.</FONT></P>\n<HR />\n<FONT FACE=\"Garamond\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Garamond\">\n<!-- #BeginDate format:fcAm1a -->Friday, October 31, 2008 1:08 PM<!-- #EndDate -->\n</font></span></BODY>\n</HTML>", "encoding": "ascii"}