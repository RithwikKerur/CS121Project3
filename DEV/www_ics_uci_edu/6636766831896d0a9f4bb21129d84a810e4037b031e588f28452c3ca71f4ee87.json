{"url": "https://www.ics.uci.edu/~arcadia/arcadia_papers/process/process_wall_abstract.html", "content": "<HTML>\n<!-- $Id: process_wall_abstract.html,v 1.1 1995/04/11 23:46:27 kari Exp $ -->\n<HEAD>\n<TITLE>Arcadia Collected Papers: ABSTRACT</TITLE>\n<META http-equiv=\"Owner\" content=\"Arcadia\">\n<META http-equiv=\"Reply-To\" content=\"arcadia-www@ics.uci.edu\">\n<LINK rev=\"made\" href=\"mailto:arcadia-www@ics.uci.edu\">\n</HEAD><BODY>\n<H1><img align=middle src=\"http://www.ics.uci.edu/~arcadia/Icons/arcadia-logo.gif\">\nArcadia Papers: ABSTRACT</H1>\n<HR>\n\n<A HREF=\"ftp://ftp.cs.colorado.edu/pub/cs/techreports/arcadia/wall/wall.ps.Z\">\n\"<B>The ProcessWall: A Process State Server Approach to Process\nProgramming</B>\"</A>, by Dennis Heimbigner, in \n<i>Proceedings of ACM SIGSOFT Fifth Symposium on Software\nDevelopment Environments,</i>\npages 159-168, Tyson's Corner, VA, December 1992.\n\n<H2> Abstract </H2>\n\nThe ProcessWall is a process state server providing storage for\nprocess states plus operations for defining and manipulating the\nstructure of those states.  It separates the state of a software\nprocess from any program for constructing that state.  Instead, client\nprograms implement the processes for operating on the process state.\nThis approach has a number of potential benefits such as support for\nprocess formalism interoperability, support for multiple process\nlanguages, low-cost retro-fitting of process into existing\nenvironments, and support for long-term execution of processes.  The\nprocess server interface provides descriptive mechanisms for\nrepresenting process state as well as product state.  A classification\nof client programs is provided to show how the state server can be\nused in a variety of ways.\n\n<P>\n\n<HR>\n<ADDRESS>\n<A HREF=\"http://www.ics.uci.edu/Arcadia/\">The Arcadia Project\n&lt;arcadia-www@ics.uci.edu&gt;</A><BR>\nLast modified: Mon Feb 27 11:36:20 1995\n</ADDRESS>\n</BODY></HTML>\n", "encoding": "ascii"}