{"url": "https://www.ics.uci.edu/~thornton/ics45c/ProjectGuide/Project0/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 45C Fall 2019, Project #0: Getting to Know the ICS 45C VM</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 45C Fall 2019 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"../../GradeCalculator\">Grade Calculator</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 45C Fall 2019<br />\r\n   Project #0: <i>Getting to Know the ICS 45C VM</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, October 11, 11:59pm</i></b></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Overview</p>\r\n\r\n<p>The goal of this project is to allow you to work through downloading and setting up the <i>ICS 45C VM</i>, which is the development environment we'll be using to do our work in this course, then using it to write a short C++ program.  Having worked through this project, you'll have set up the VM to run on your own computer, experimented with it a little bit, ensured that you know how to \"gather\" files for submission (the same way you'll do in later projects), and taken some important steps toward being productive on subsequent projects and beyond.</p>\r\n\r\n<p>Don't lose sight of the fact that there is a deliverable here; you'll need to write us a fairly short C++ program and submit it.  Having done that, you'll be sure to be ready to do the same on subsequent projects.  For your trouble, we're offering 2% of your overall course grade if you're able to do this successfully, but we won't be offering that credit to anyone who doesn't follow these directions and submit exactly what we're looking for, as described below.  You may prefer other ways to work &mdash; a different operating system, different development tools &mdash; but be aware that this course, like many workplaces and open source projects, is not offering you that choice.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Virtualization</p>\r\n\r\n<p>Traditionally, a computer is a collection of hardware &mdash; processor, memory, secondary storage, video and network adapters, and so on &mdash; on which a single operating system runs at a time.  You \"boot\" the computer into your chosen operating system, whose role is to arbitrate access to that hardware, so that applications running on top of your operating system can effectively use and share that hardware.  At any given time, a single physical computer traditionally runs one operating system at a time: Windows, macOS, some flavor of Linux, or whatever.  It wasn't that long ago that the only fancy trick to work around this was to install more than one operating system (e.g., one on each of a few hard drives; or even multiple ones on the same drive, which sometimes required some fancy footwork), then select one of them at boot time.</p>\r\n\r\n<p>Despite all of the pretty user interfaces, the fundamental role of an operating system is arbitrating access to hardware on behalf of the applications it runs.  If an application wants to establish a connection over the Internet, it asks the operating system for access to the network interface; the operating system manages data moving into and out of the network interface, and makes sure that it is directed to the right application when it arrives.  If it wants to display something on the screen, it negotiates with the operating system for the right to draw and have it be visible.  This allows many applications to run on a single operating system, while preventing them from stepping on each other's toes.</p>\r\n\r\n<p>More recently, <i>virtualization</i> has dramatically altered the way that an operating system interacts with its underlying hardware.  Operating systems are ultimately just programs; they're software.  So it makes a certain amount of sense that operating systems could run like applications do.  Instead of running them directly on the hardware, virtualization allows us to run them on top of another \"bridge\" application <i>within</i> another operating system; that bridge is sometimes called a <i>hypervisor</i> or <i>virtualizer</i>.  In this scenario, we call the \"main\" operating system (the one running directly on the hardware) the <i>host</i> and the other operating system the <i>guest</i>.  Every time a program on the guest operating system needs access to hardware, it asks the hypervisor to negotiate with the host operating system for that access; the host operating system can grant it the way it grants hardware access to any other application.  If the guest operating system needs to receive something from the Internet, that request is arbitrated by the host operating system; when the host operating system receives data, it is passed to the hypervisor, who then passes it along to the guest operating system, who then passes it to whatever application on the guest operating system needed it.  The guest operating system operates, more or less, under the illusion that it's running directly on hardware, thanks to the hypervisor.</p>\r\n\r\n<p>This is a complex trick, but a very important one.  A single computer &mdash; not just beefy, expensive servers in data centers, but relatively inexpensive personal computers like laptops, which are nowadays equipped with hardware support to make this happen more efficiently &mdash; is capable of simultaneously running a host operating system <i>and</i> one or more guest operating systems, limited only by the available amount of memory, processing power, network bandwidth, etc.  Since they must pass through the hypervisor to access hardware, the guest operating systems generally run slower than the host does; you won't necessarily find yourself playing heavy-duty 3D video games or watching high-definition video in a guest operating system.  But virtualization is a wonderful way to experiment with an operating system without fully committing yourself to it, to set up separate software installations for different tasks, to isolate different operating systems and different setups from one another, and to migrate software setups from one computer to another with relative ease.</p>\r\n\r\n<p>In this course, virtualization is important because you'll run the ICS 45C VM development environment as a guest operating system in whatever host operating system you prefer, with a hypervisor used to arbitrate between the host and the guest.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Installing VMware</p>\r\n\r\n<p>Before downloading and installing the ICS 45C VM, there's an important prerequisite you'll need first: the hypervisor!  For this purpose, you'll need to install a compatible VMware product, which can be obtained free of charge by ICS students from a service called OnTheHub, which can be accessed here:</p>\r\n\r\n<ul>\r\n  <li><a href=\"https://elms.ics.uci.edu/\">ICS OnTheHub</a></li>\r\n</ul>\r\n\r\n<p>You'll need to log in with your ICS login and password &mdash; note that this isn't your UCInetID, but is the login and password that you'd use to log into the machines in the ICS labs.  If you don't have an ICS account, your enrollment in an ICS major or an ICS course entitles you to one, but you'll need to get the account activated.  See the lab attendant in ICS 364 and ask them to help you set up your ICS account, and they should know what to do.</p>\r\n\r\n<p>Once you're logged into OnTheHub, you'll want to download one of these two products (depending on your operating system):</p>\r\n\r\n<ul>\r\n  <li>If you're running Windows or Linux, you'll want <b>VMware Workstation 15</b>.</li>\r\n  <li>If you're running macOS, you'll want <b>VMware Fusion 11</b>.</li>\r\n</ul>\r\n\r\n<p>(Note, too, that VMware Workstation is installed on the Windows machines in the ICS labs already.)</p>\r\n\r\n<p>Add the appropriate VMware product to your cart, then download and install it.  Make a note, too, of the serial number that you're provided with; you'll need that after installation, so you can license your product and use it throughout the quarter.  If you forget your serial number, you can always get it back by logging back into OnTheHub and viewing your account history, then viewing the details about your VMware download.</p>\r\n\r\n<p class=\"subtitle\">After installing VMware</p>\r\n\r\n<p>There are a few things you'll want to do after installing VMware and starting it up for the first time.</p>\r\n\r\n<ol>\r\n  <li>From the <b>Help</b> menu, select <b>Enter a license key</b>.  In the ensuing dialog, enter the serial number that you obtained previously, then click <b>OK</b>.  This should license your product for a year or so &mdash; as of this writing, mine says I'm under an evaluation period that ends in 408 days, and I just installed it a few days ago.</li>\r\n  <li>From the <b>View</b> menu, select <b>Autosize</b>, then click <b>Autofit guest</b>.  Also, make sure the setting under <b>Autosize</b> titled <b>Autofit window</b> is checked.  (I found this change necessary, so that resizing the window would also resize my VM's desktop.  I haven't tried this on VMware Fusion, as I don't have a Mac to test it on, but I needed to do this on VMware Workstation on Windows.)</li>\r\n  <li>From the <b>Help</b> menu, select <b>Check for updates</b> and install the latest.  I found that my download was older than the most current version.  As of this writing, I'm running <b>VMware Workstation Pro 15.5</b>; if I was on a Mac, I'd run <b>VMware Fusion 11.5</b> instead.</li>\r\n</ol>\r\n\r\n<p>Once you've done those things, you're ready to move on to installing the ICS 45C VM.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">What is the ICS 45C VM?</p>\r\n\r\n<p>The ICS 45C VM is a complete installation of an operating system and the necessary software that we'll be using in this course (and little else).  The operating system is Ubuntu Server 18.04 (64-bit), with a graphical user interface called XFCE, which provides a look-and-feel similar to what you might get on Windows or macOS.  You'll nonetheless spend a lot of your time at the command line within your VM's GUI.</li>\r\n\r\n<p>In addition to the operating system, the ICS 45C VM has a set of software already installed and configured for our use.  You may not find that you need all of these software packages, but some of these are going to be vital, and others are available if you do.</p>\r\n\r\n<ul>\r\n  <li>One web browser: <b>Firefox</b>, though you can certainly install others if you prefer them, which will allow you to browse the web from within your VM</li>\r\n  <li><b>OpenSSH Server</b>, which allows you to connect to the VM via <b>ssh</b>, the way you might connect to the command line of another computer outside of your own.</li>\r\n  <li>Two C++ compilers: <b>Clang</b> (which we'll be using in this course) and <b>GCC</b> (which was used to get the system set up, but will not be used in the course).</li>\r\n  <li>Two debuggers: <b>LLDB</b> and <b>GDB</b> (either of which we may use in this course).</li>\r\n  <li>Two tools used to assist in compiling and linking C++ programs: <b>CMake</b> and <b>Make</b>.</li>\r\n  <li>A program analysis tool called <b>Valgrind</b>, which we'll be using to diagnose and fix low-level issues like memory leaks.</li>\r\n  <li>A unit testing framework called <b>Google Test</b>, which we'll be using to write automated tests of (portions of) our programs.</li>\r\n  <li>A source control tool called <b>Git</b>.</li>\r\n  <li>Four text editors: <b>Vim</b>, <b>Emacs</b>, <b>Nano</b>, and <b>Visual Studio Code</b>.</li>\r\n  <li><b>Python 3</b> and <b>Java</b>, in case you'd like to experiment with them comparatively as you work through this C++ course.</li>\r\n</ul>\r\n\r\n<p>Along with this preinstalled software, the ICS 45C VM also includes an <i>environment</i> for the course, which consists of a set of commands and scripts that you can execute to perform common tasks, and templates from which you can start new project work without having to worry about detailed setup of things like makefiles.  Over the course of the quarter, we'll update the environment, and updating yours is a single command away.  (More on that later.)</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Downloading the ICS 45C VM</p>\r\n\r\n<p>You can download the ICS 45C VM at the following links.  Before you do that, please bear three things in mind:</p>\r\n\r\n<ul>\r\n  <li>This is a <b><i>large</i></b> download.  To preserve UCI and ICS network bandwidth, we would appreciate it if you would spread the load by sharing it with each other once downloaded; have one of you download it and give copies to ten others, and we'll save a lot of bandwidth that way.</li>\r\n  <li>By request of our system administrators, this download is inaccessible outside of the UCI campus network.  If you try to download it from off-campus, you will likely receive a message that you are forbidden to access it.  Your best move is to download it when you're physically on campus; you can potentially download it via the campus VPN, though you may run afoul of network usage restrictions that way.  Be warned.</li>\r\n  <li>If you do download via the campus VPN, be sure you're using the Software VPN, as opposed to the Web VPN (which, for at least some students, appears to cap the size of downloaded files to 2 GB, but the ICS 45C VM is larger than that).  More details about the Software VPN are available <a href=\"http://www.oit.uci.edu/vpn/\">here</a>.</li>\r\n</ul>\r\n\r\n<p>The ICS 45C VM is available here.</p>\r\n\r\n<ul>\r\n  <li><a href=\"http://www.ics.uci.edu/~thornton/ics45c/vm/ics45c-2019fall.ova\">ICS 45C VM &mdash; <i>only available while on the campus network (see above)</i></a></li>\r\n</ul>\r\n\r\n<p>The files are in a format called OVA, which is an Open Virtualization Archive, a single file that contains a directory consisting of several files; those files comprise something called an OVF (Open Virtualization Format), which is a standard format for distributing a preconfigured virtual machine, including the contents of its virtual hard disk, various hardware settings, and so on.  The OVF can be imported into the native format used by various hypervisors such as VMware, the hypervisor we'll be using this quarter.</p>\r\n\r\n<p>Be patient; the download may take a fair amount of time; it's a few gigabytes.  (So much the better that you get a copy from someone else who's already downloaded it!)  Once you have a complete copy, you can move on to the next step.</p>\r\n\r\n<p class=\"subtitle\">Being sure you have a complete copy of the ICS 45C VM before you proceed</p>\r\n\r\n<p>In past quarters, we've experienced a number of problems with students receiving only partial copies of the ICS 45C VM, given that it's such a large download.  Before proceeding, be sure that the size of the file you downloaded is exactly <b>2,850,934,784 bytes</b>.  (Your operating system may show you a shorthand, like <b>2,784,116 KB</b> or <b>2.65 GB</b>, but you'll want to verify it all the way to the byte.)  If not, you've got a corrupt copy of the file and will need to download it again.</p>\r\n\r\n<p>Some students have asked me in the past for an MD5 checksum for this file, as well.  This quarter's VM has the following MD5 checksum: <b>89497fec4a3a3c3b5fcd0f6eac628dad</b>.</p>\r\n\r\n<p class=\"subtitle\">What to do if you've taken the course before</p>\r\n\r\n<p>If you've taken this course before, you're still going to need to download this quarter's ICS 45C VM.  The VM changes slightly every quarter, in ways that sometimes change whether or not code will run the same way (or, in some cases, will even compile at all); furthermore, a previous quarter's VM will only support the previous quarter's assignments, notes, and so on.</p>\r\n\r\n<p>You're also going to want to upgrade VMware, if you've installed an older version during a previous iteration of this course.  You'll need to be running the same version as everyone else this quarter.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Importing the ICS 45C VM into VMware</p>\r\n\r\n<p>Once you've downloaded the OVA file containing the ICS 45C VM, you'll be ready to import it into VMware.  (Did you install VMware already?  If not, you'll need to do that before you proceed.)  Here's what you'll need to do to import the VM into VMware.</p>\r\n\r\n<p class=\"subtitle\">Prerequisites: Preparing to import a 64-bit VM</p>\r\n\r\n<p>The ICS 45C VM runs a 64-bit version of Ubuntu Linux, and VMware is only able to run 64-bit VMs when the host machine meets certain prerequisites.  In particular, there are three prerequisites that you'll need to be sure your host machine meets:</p>\r\n\r\n<ul>\r\n  <li>You must have a 64-bit processor.  Note that 32-bit processors on personal computers are exceptionally rare these days, so there's a really good chance you meet this requirement already.  Interestingly, it's not important whether you have a 32-bit or 64-bit version of your host operating system; either is fine, as long as your processor is 64-bit.</li>\r\n  <li>Your processor's virtualization support must be enabled.  Intel and AMD processors have special support for virtualization &mdash; Intel calls it VT-x, while AMD calls it AMD-v &mdash; and many machines have it turned off by default.  (According to my research, Macs will tend always to have this turned on; Windows machines are more hit-or-miss, but you're still likelier to have the support already than not.)  To turn virtualization support on, you'd need to modify your BIOS or UEFI settings.  How you do that is different depending on what machine you're running, so I can't give you specific instructions on how to do it, but the setting you're looking for is probably called <b>Virtualization</b>, <b>VT-x</b>, or <b>AMD-v</b>, and you'd want to make sure any setting like that is listed as <b>Enabled</b> or <b>On</b>.</li>\r\n  <li>If you're running Windows, the Hyper-V feature will need to be disabled.  This is pretty rare on anything but the Server versions of Windows, so you're unlikely to have it, but it's one more thing to check if you have problems further down the line.  (Apparently, a future version of VMware Workstation will be compatible with Hyper-V, but we're not quite there yet.)</li>\r\n</ul>\r\n\r\n<p>If you're not sure whether you have virtualization support turned on, one way forward is to proceed under the assumption that you do; most Windows machines (laptops and desktops) and essentially <i>all</i> Macs will meet these requirements by default.  Later in this document, I'll explain how to recognize that you've got a problem and what to do to fix it.</p>\r\n\r\n<p class=\"subtitle\">Launching VMware</p>\r\n\r\n<p>Launch the VMware application that you installed previously.  This will bring up a window titled <b>VMware Workstation</b> or <b>VMware Fusion</b>, which lists the VMs that you've installed, allowing you to do things like start them, stop them, create new ones, etc.</p>\r\n\r\n<p class=\"subtitle\">Importing the OVF into VMware</p>\r\n\r\n<p>The next step is importing the OVF &mdash; the <b>.ova</b> file you downloaded previously &mdash; into VMware, which will create your new VM.</p>\r\n\r\n<p><i>Note that you will need as many as 15 GB of free hard disk space in order to complete this process successfully.  Be sure you have that available now before proceeding.</i></p>\r\n\r\n<ul>\r\n  <li>From the <b>File</b> menu, select <b>Open...</b>.</li>\r\n  <li>Choose the <b>.ova</b> file you downloaded previously.</li>\r\n  <li>A dialog titled <b>Import Virtual Machine</b> will be shown, in which you can choose a name for your new virtual machine (which you're best off leaving as the default of <b>ics45c-2019fall</b>) and a location for it.  Click <b>Import</b> to begin the process of importation.\r\n    <ul>\r\n      <li>You may receive a warning indicating that <i>The import failed because [it] did not pass OVF specification conformance or virtual hardware compliance checks</i>.  If you do, click the <b>Retry</b> button &mdash; this warning turns out to be innocuous, as far as I can tell &mdash; and it should succeed subsequently.</li>\r\n    </ul>\r\n  </li>\r\n  <li>After waiting for a while for the import to be completed &mdash; this can take some time, as this is a large file &mdash; you should see a VM titled <b>ics45c-2019fall</b> listed in the VMware window.  This is your newly-created ICS 45C VM.</li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Ensuring you have 64-bit VM support</p>\r\n\r\n<p>It's possible that you'll need to enable virtualization support for 64-bit VMs.  How you enable virtualization support is different depending on what machine you're running, so I can't give you specific instructions on how to do it, but the setting you're looking for is probably called <b>Virtualization</b>, <b>VT-x</b>, or <b>AMD-v</b>, and you'd want to make sure any setting like that is listed as <b>Enabled</b> or <b>On</b>.</p>\r\n\r\n<p>After enabling that support, there are a couple of additional things you'll have to do:</p>\r\n\r\n<ul>\r\n  <li>Be sure that you've performed a full reboot of your machine after changing the virtualization settings in your BIOS or UEFI.  This doesn't mean hibernation, sleep, or standby; you'll want to do a full reboot.</li>\r\n</ul>\r\n\r\n<p>Don't feel like you need to do this now; just remember that you may need to come back to this a little later in the instructions.</p>\r\n\r\n<p class=\"subtitle\">A word about where the VM files are stored</p>\r\n\r\n<p>Note that VMware prefers to store the VM files in a particular directory (e.g., on Windows, VMs are stored by default in <b>C:\\Users\\<i>your_user_name</i>\\Documents\\Virtual Machines</b>).  This is a setting you can change:</p>\r\n\r\n<ul>\r\n  <li>Before importing the VM into VMware, open the <b>Edit</b> menu, then select <b>Preferences...</b>.  On the ensuing dialog, find the setting titled something like <b>Default location for virtual machines</b> and choose your desired location for VMs to be stored.  After making that change, any subsequently created or imported VM will be stored in your chosen location.</li>\r\n</ul>\r\n\r\n<p>Additionally, when you import the VM, one of the choices you'll have is where you'd like to store it &mdash; this will default to the configured default setting, but you can change it on a VM-by-VM basis.  So I suggest carefully considering where you want your VM before you import it.</p>\r\n\r\n<p>Still, if you decide you'd rather move it to a new location after you've created it, that's possible too.</p>\r\n\r\n<ul>\r\n  <li>After importing the VM, find the directory on your hard drive containing the VM's files.  Move the entire directory where you want it to be.  Then, in VMware, right-click the <b>ics45c-2019fall</b> VM, then select <b>Remove</b>, which will remove the VM from your VMware list.  Finally, from the <b>File</b> menu, select <b>Open...</b>, then browse to the directory in its new location and open the <b>.vmx</b> file within that directory.</li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Using the ICS 45C VM in the ICS labs</p>\r\n\r\n<p>If you want to use the ICS 45C VM in the ICS labs, you should use the procedure described in the previous section to move the files to a removable storage device (e.g., a USB stick).  Files stored on the ICS lab machines are deleted automatically when you log out, but you won't want to download and reinstall the VM every time you enter the lab, particularly because any files you will have stored on the VM the last time you used it will have been lost.</p>\r\n\r\n<p>Note that you'll need a fair amount of available space on your USB stick; 8GB is probably not enough, so 16GB and above is a safer bet.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Starting the ICS 45C VM and logging into it for the first time</p>\r\n\r\n<p>Once you've imported the ICS 45C VM into VMware, you're ready to start it up and log into it for the first time.  In the VMware window, select the <b>ics45c-2019fall</b> VM and click the <b>Power on this virtual machine</b> link.  You'll see another window pop up, which is the <i>console</i> of your VM.</p>\r\n\r\n<p>If your ICS 45C VM does not start up properly (e.g., it only displays a blank area, but doesn't appear to do anything else), the likeliest problem is that you need to enable virtualization support.  See the section titled <i>Ensuring you have 64-bit VM support</i> above for more details.</p>\r\n\r\n<p class=\"subtitle\">Logging into the ICS 45C VM</p>\r\n\r\n<p>Once you've booted up your VM, you'll see a dialog box asking you to specify a username and a password.  The username is selected from a dropdown list; <b>ics45c</b> will probably already be selected, but make sure it's selected if it's not already.  In the text field below that, type the password <b>ics45c</b> &mdash; which you'll want to change (see below) &mdash; and click the <b>Log In</b> button.</p>\r\n\r\n<p>Having logged in, you should eventually see a desktop, much like you would see on Windows or macOS.  In the top-left corner is a small icon that can be used to start common applications or edit operating system settings.  One of the most important of these, for us, is the Terminal application, which will give you a <i>shell prompt</i>.  Find the Terminal application (which might also be listed as Terminal Emulator) and start it.  A window should pop up and contain a prompt that looks like this:</p>\r\n\r\n<blockquote><pre>\r\nics45c@ics45c-2019fall : ~ $\r\n</pre></blockquote>\r\n\r\n<p>(Note: You might find the default font and colors not to your liking, though it's easy enough to change them.  From the <b>Edit</b> menu in your Terminal window, select <b>Preferences...</b>.  A dialog will pop up allowing you to configure whatever you'd like; when you're done, click <b>Close</b>, and subsequent uses of the Terminal application will respect the changes you made.)</p>\r\n\r\n<p class=\"subtitle\">The shell prompt</p>\r\n\r\n<p>When using the ICS 45C VM, there's a pretty good chance that you will spend a lot of your time interacting with a <i>shell prompt</i>.  It's important, first, to understand what the shell prompt itself is telling you.</p>\r\n\r\n<p>The first part, <b>ics45c@ics45c-2019fall</b>, identifies the username (ics45c) and the name of the VM (ics45c-2019fall).  The colon is meant to separate this from the next part, which lists the <i>current working directory</i> (i.e., the directory on the virtual hard drive where we currently reside); initially, that directory is the special directory <b>~</b>, which is our <i>home directory</i> &mdash; ~ is a common shorthand in Linux for our actual home directory location, <b>/home/ics45c</b>; every user has a home directory, which is quite often stored in the location <b>/home/<i>USERNAME</i></b>.</p>\r\n\r\n<p>At this point, you're logged into your VM and ready to issue it some commands.</p>\r\n\r\n<p class=\"subtitle\">Changing your password</p>\r\n\r\n<p>Before you get too much farther, it's a good idea to change your password, so that other students can't log into your VM if you don't want them to.  Changing your password is simple:</p>\r\n\r\n<ul>\r\n  <li>From the shell prompt, type the command <b>passwd</b> and press Enter.</li>\r\n  <li>When asked for the current password, type <b>ics45c</b> and press Enter.</li>\r\n  <li>When asked for a new password, type something else that you can remember and press Enter.</li>\r\n  <li>Finally, you'll be asked to re-type the new password to confirm it's the one you want.  Type your new password again and press Enter.</li>\r\n  <li>If you typed the new password the same way twice, your password is now changed.  <i>Don't lose your new password!  There's nothing we'll be able to do to help you get it back if you do!</i></li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Taking a look around using the shell prompt</p>\r\n\r\n<p>A Linux shell prompt can be intimidating if you've spent most of your time using an operating system with a graphical user interface.  However, familiarizing yourself with a shell prompt &mdash; on any operating system, not just Linux &mdash; is a worthwhile skill, because many more advanced tasks are difficult or even impossible from a typical operating system's graphical user interface; the graphical interface will usually streamline common tasks, but when it comes time to do something more involved, a shell prompt is wonderfully useful.</p>\r\n\r\n<p>At the shell prompt while within your home directory, type the command <b>ls</b> (that's a lowercase L followed by a lowercase S) and press Enter.  <b>ls</b> is a way to list the files residing in the current working directory.  You should see something sort of like this:</p>\r\n\r\n<blockquote><pre>\r\nDesktop/    Downloads/    Music/     Public/     Videos/\r\nDocuments/  environment/  Pictures/  Templates/\r\n</pre></blockquote>\r\n\r\n<p>The names listed in blue and followed by a slash are directories.  Files are listed in gray and are not followed by a slash.  Executable files (i.e., programs you can run) are listed in green and are followed by a star.  Most likely, your home directory will only contain directories initially, but we'll see files and executable files soon enough.</p>\r\n\r\n<p>Many of the directories you'll see are installed automatically with XFCE, the graphical user interface that we're using, but the <b>environment/</b> directory, which is specific to our course, is the one we're primarily interested in for now.</p>\r\n\r\n<p>You can tell that all of these are themselves directories (<i>subdirectories</i> of your home directory) because of the slashes that come after their names.  This means we can change into them and see what's inside of them.  Issue the command <b>cd environment</b>.  Notice what happens to your shell prompt:</p>\r\n\r\n<blockquote><pre>\r\nics45c@ics45c-2019fall : ~/environment $ \r\n</pre></blockquote>\r\n\r\n<p>It's now telling you that your current working directory is the <b>environment</b> directory <i>inside</i> of your home directory.  Let's take a look at what's inside the <b>environment</b> directory.  Type the command <b>ls</b> again.</p>\r\n\r\n<blockquote><pre>\r\nscripts/  templates/  updates/\r\n</pre></blockquote>\r\n\r\n<p>(This is your first important lesson about interacting with the shell prompt.  The commands you issue quite often work differently depending on where you are, i.e., what your current working directory is.  For example, <b>ls</b> lists the files in the current working directory, so it naturally gives you different output when your current working directory changes.)</p>\r\n\r\n<p>The <b>scripts</b> directory contains a small set of scripts used to automate certain tasks for our course.  The <b>templates</b> directory contains a set of templates used to create new C++ project directories to do your work in.  The <b>updates</b> directory (presently empty) may eventually contain tools and scripts used to update the ICS 45C VM, if we discover a widespread problem for which lots of you need a fix.</p>\r\n\r\n<p>(You won't actually want to modify the contents of the <b>environment</b> directory or any of its subdirectories, as it contains scripts and tools that are intended to work the same way for everyone in the course.  But you can feel free to look at what's there, if you're curious.)</p>\r\n\r\n<p>Let's leave the <b>environment</b> directory and head back to our home directory.  When you want to move to the directory that contains the current directory (usually called its <i>parent directory</i>), you issue the command <b>cd ..</b>.  (No matter where you are, <b>..</b> (two dots) always means \"The parent directory of the directory I'm in now,\" while <b>.</b> (a single dot) always means \"The directory I'm in now.\")  Try that now, and then type <b>ls</b> to see if you ended up where you thought you would.</p>\r\n\r\n<p>If you ever want to get back to your home directory, that's as simple as typing <b>cd</b> by itself, with no parameter.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">How the ICS 45C VM has been set up</p>\r\n\r\n<p>As provided, your ICS 45C VM's home directory will contain two directories of interest in this course (along with a fair number of others created by the GUI, but that are not relevant to our work):</p>\r\n\r\n<ul>\r\n  <li><b>environment</b>, which contains general tools that we'll use throughout the quarter.  Not all of the tools we need are there to begin with, but, as we'll see, a single command can be used to download the latest environment from the course web site, so you can stay up to date.\r\n    <ul>\r\n      <li>As a general rule, you'll want to leave the files in this directory alone.  You have the power on your VM to do pretty much anything you want, though these files turn out to be important for what we'll be doing.  But if you ever do cause problems in this directory, there's an easy way to get it back, as we'll see.</li>\r\n    </ul>\r\n  </li>\r\n  <li><b>projects</b>, which is initially missing, but will be created later in this project; it will ultimately contain a separate directory for each project you work on &mdash; every time you want to write a new program, you'll need a new \"project,\" even if it's one you're not going to turn in.</li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">The <i>ics45c</i> command</p>\r\n\r\n<p>From the shell prompt, you can use the command <b>ics45c</b> to perform certain common course-specific functions.  If you're curious what functions are available, type <b>ics45c</b> at a shell prompt and press Enter; you'll see a description of how to use the <b>ics45c</b> command.</p>\r\n\r\n<p class=\"subtitle\">Creating a new project and writing your first C++ program</p>\r\n\r\n<p>Creating a new project from an existing template is simple; you use the <b>ics45c</b> command to do it.  Let's create our first project:</p>\r\n\r\n<ul>\r\n  <li>From the shell prompt, type the command <b>ics45c start hello basic</b>.  In this example, <b>start</b> means we want to start a new project, <b>hello</b> is the name of our project, and <b>basic</b> is the name of the template that we want to create the project from.  (The <b>basic</b> template is already installed in the <b>~/environment/templates</b> directory.)</li>\r\n  <li>A new directory <b>~/projects/hello</b> will be created, containing all of the files you need to compile and run your first C++ program.</li>\r\n  <li>Change to the <b>~/projects/hello</b> directory by typing the command <b>cd ~/projects/hello</b>.  Use the <b>ls</b> command to take a look around.\r\n    <ul>\r\n      <li>You'll see a directory called <b>app</b>, which is where you'll store the C++ source code for your project (the \"app\" that you're building). Additionally, there are several executable scripts such as <b>build</b>, <b>clean</b>, and <b>run</b> &mdash; you can tell they're executable because their names are followed by * in the directory listing &mdash; and a file called <b>CMakeLists.txt</b>, which is a file used to configure compiler settings (a longer story for another day).</li>\r\n      <li>You'll also see a directory called <b>gtest</b>, which is where you can write <i>unit tests</i> for use with a unit testing framework called Google Test, which we'll use later this quarter.  You can safely ignore this directory for now.</li>\r\n      <li>Additionally, you'll see a directory called <b>exp</b>, which is available so you can write short programs that experiment with features of the larger program you're building.  As with <b>gtest</b>, you can safely ignore it for now.</li>\r\n    </ul>\r\n  </li>\r\n  <li>To see the contents of the <b>app</b> directory, type <b>ls app</b>.  You'll see a single file, <b>main.cpp</b>, which contains an empty C++ program.  Edit that file using a text editor.  The simplest editor to use from within the shell is <b>nano</b>; a more familiar GUI-based editor called <b>Sublime Text</b> is available and can be run using the command <b>subl</b>.  Personally, I prefer <b>vim</b>, and I've had a lot of students prefer <b>emacs</b>.  In general, it's not important which editor you choose, and you can expect any of them to have a learning curve.  Many tutorials online will explain the details of how to use these editors, so I'll leave that to you to figure out.  Using whichever editor you'd like, edit <b>main.cpp</b> so that the contents of the file look like this:\r\n<blockquote><pre>\r\n#include &lt;iostream&gt;\r\n\r\n\r\nint main()\r\n{\r\n    std::cout &lt;&lt; \"Hello Boo!\" &lt;&lt; std::endl;\r\n    return 0;\r\n}\r\n</pre></blockquote>\r\n  </li>\r\n  <li>Make sure the changes you made are to a file called <b>main.cpp</b> in the <b>~/projects/hello/app</b> directory.  If you save <b>main.cpp</b> into <b>~/projects/hello</b>, the subsequent steps will fail.  (Our projects in this course will all work under the assumption that all of your C++ code is in a subdirectory called <b>app</b>, all of your unit tests are in a subdirectory called <b>gtest</b>, and any other experimental code you write is in a subdirectory called <b>exp</b>.)</li>\r\n  <li>Once you've saved your changes to <b>app/main.cpp</b>, you're ready to build the program and run it.  From the <b>~/projects/hello</b> directory, enter the command <b>./build</b> (note the dot and the slash; that's important).  You'll see a fair amount of output, which should contain three messages like this, which means that the program was compiled and linked successfully:\r\n<blockquote><pre>\r\n...\r\n[ 33%] Built target a.out.app\r\n...\r\n[ 66%] Build target a.out.exp\r\n...\r\n[100%] Built target a.out.gtest\r\n</pre></blockquote>\r\n    Notice that three separate programs have been built:\r\n      <ul>\r\n        <li>An <b>app</b>, which has the <b>main()</b> function from your <b>app</b> directory as its entry point and is intended to be the main program you're developing for a given project</li>\r\n        <li>An <b>exp</b>, which has the <b>main()</b> function from your <b>exp</b> directory as its entry point and is intended for whatever experimentation you'd like</li>\r\n        <li>A <b>gtest</b>, which has the <b>main()</b> function from your <b>gtest</b> directory as its entry point and is intended to run a set of unit tests</li>\r\n      </ul>\r\n    You can avoid waiting for all three programs to build by specifying which of them you'd like to build, e.g., <b>./build app</b>, in which case only the specified one will be built.\r\n  </li>\r\n  <li>Finally, if building the program was successful, from the <b>~/projects/hello</b> directory, enter the command <b>./run app</b>, which should display this output:\r\n<blockquote><pre>\r\nHello Boo!\r\n</pre></blockquote>\r\n  </li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Restoring or refreshing your ICS 45C environment</p>\r\n\r\n<p>Periodically throughout the quarter, it will be necessary to refresh your ICS 45C environment, so that it contains the files necessary for you to proceed with your work.  There are three relevant commands you can use for this purpose:</p>\r\n\r\n<ul>\r\n  <li><b>ics45c version</b>, which will display the current version of the environment you have.  This will generally consist of a timestamp (the time it was published to the course web site) and a short description.</li>\r\n  <li><b>ics45c refresh</b>, which will connect to the course web site and download the latest version of the environment, installing it in your <b>~/environment</b> directory in place of your existing one.  (Note: <i>Do not</i> store your own files in the <b>~/environment</b> directory, as they will be wiped out by this process.)</li>\r\n  <li><b>ics45c restore</b>, which you can use if you ever accidentally delete or corrupt your environment to the point where you can't run the above two commands.  This will restore the original environment from when your ICS 45C VM was new; you could subsequently use the <b>ics45c refresh</b> command, then, to download the latest one.</li>\r\n</ul>\r\n\r\n<p>In general, I'll specify when the environment has changed, and let you know what version you need to proceed with a task, so there's no need to refresh it unprompted on a regular basis.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Using SSH to connect to your ICS 45C VM</p>\r\n\r\n<p>Another way to connect to your ICS 45C VM, if you prefer, is to connect to it using a protocol called SSH, which allows you to access a shell prompt, but without the XFCE GUI being visible to you.  The ICS 45C VM has been configured already so that you can connect to it this way, if you prefer.  Depending on your host operating system, you would use slightly different tools for this.  (And you might find this useful, if you'd prefer not to switch back and forth between the Linux GUI and your host operating system.)</p>\r\n\r\n<p>Even if you plan to do most of your work in the Linux GUI, <i>do</i> work through this section and make sure you can connect to your VM using SSH, because you may need this later when it comes time to submit your work.</p>\r\n\r\n<p class=\"subtitle\">Network settings</p>\r\n\r\n<p>The ICS 45C VM has been configured so that it will appear to your host operating system to have an IP address, which you can use to connect to the VM from within your host operating system.  It will be given an IP address at startup, so the best way to find out your VM's address is to ask it, by running the command <b>ip addr</b>.  This command will give you a fair amount of output, but there's only one part of it you'll be interested in.  When I ran the <b>ip addr</b> command on the ICS 45C VM, this is what I saw.</p>\r\n\r\n<blockquote><pre>\r\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\r\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n    inet 127.0.0.1/8 scope host lo\r\n       valid_lft forever preferred_lft forever\r\n    inet6 ::1/128 scope host \r\n       valid_lft forever preferred_lft forever\r\n2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\r\n    link/ether 00:0c:29:74:8a:d0 brd ff:ff:ff:ff:ff:ff\r\n    inet <b><u>192.168.65.128</u></b>/24 brd 192.168.65.255 scope global dynamic ens33\r\n       valid_lft 992sec preferred_lft 992sec\r\n    inet6 fe80::20c:29ff:fe74:8ad0/64 scope link \r\n       valid_lft forever preferred_lft forever\r\n</pre></blockquote>\r\n\r\n<p>What this is describing are the VM's two network adapters.  One is listed as <b>lo</b> and is what's called a <i>loopback adapter</i>.  Its job is to allow programs on the VM to talk to each other without using the external network.  The other is listed as <b>ens33</b> and is the one that's used to communicate with the Internet.  Within the information about <b>ens33</b>, you'll see an IP address listed &mdash; which I've boldfaced and underlined here.  Mine is listed as <b>192.168.65.128</b>, but yours may differ.  In my experience, the <b>192.168</b> is always the same, VMware chooses the third number (in my case, <b>65</b>) upon installation, and the fourth is issued when the VM starts up, which means it can vary if you reboot your VM &mdash; though, in my experience, they've been fairly stable for me, if I use the same few VMs most of the time.</p>\r\n\r\n<p>To be clear, the IP address listed is an internal address, and no other machines will be able to connect to it using that address; this is only used for host-to-guest communication, but that's all we need it for.</p>\r\n\r\n<p class=\"subtitle\">Using PuTTY on Windows</p>\r\n\r\n<p>If you run Windows, a good tool to use is PuTTY, which you can download <a href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\">here</a>.  (What you want to download from that page is <b>putty.exe</b>.  It's not an installer; it's a program you can drop pretty much anywhere, including a USB stick, if you prefer.)</p>\r\n\r\n<p>To connect to your VM using PuTTY, you would do the following:</p>\r\n\r\n<ul>\r\n  <li>Under <b>Host Name (or IP address)</b>, type the IP address for your VM</li>\r\n  <li>Under <b>Connection type</b>, select <b>SSH</b></li>\r\n  <li>Verify that <b>Port</b> is now listed as <b>22</b></li>\r\n</ul>\r\n\r\n<p>A number of other settings &mdash; such as the window size and whether the window closes automatically when you log out &mdash; are available.  To avoid setting these things up repeatedly, when you have them the way you want them, type a name (e.g., <b>ics45c-2019fall</b>) under <b>Saved Sessions</b> and click the <b>Save</b> button; this will allow you to load that session and reuse it later, so you don't have to change these settings every time you connect.  (On Windows 7 and above, you'll find that frequently-used sessions are easily accessible from the taskbar if you pin PuTTY to it.  Very handy!)</p>\r\n\r\n<p>You can run as many instances of PuTTY as you'd like, which can give you as many shell prompts as you need to do your work.  Don't limit yourself to only one shell prompt; you'll probably find multiple of them useful (as I do).</p>\r\n\r\n<p class=\"subtitle\">Using a Terminal window on macOS or various flavors of Unix</p>\r\n\r\n<p>On macOS or various flavors of Unix, your best bet will be to bring up a Terminal window, then issue the command <b>ssh ics45c@<i>VM_IP_ADDRESS</i></b>, replacing <i>VM_IP_ADDRESS</i> with the IP address of your VM.  This should display the login prompt for your ICS 45C VM and allow you to log into it.  You can do that from as many Terminal windows as you'd like, allowing you to have as many shell prompts on your VM as you'll need.  Don't limit yourself to only one shell prompt; you'll probably find multiple of them useful (as I do).</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Shutting down or rebooting your VM</p>\r\n\r\n<p>Your VM may feel somewhat like any other application running on your computer, such as a word processor or media player, so you may feel safe simply closing the VM's console window when you're done with it.  It's important to understand that your VM is not just an application; it's more akin to a separate computer, whose video output happens to be displayed in a window on the host.  Just as you don't typically shut down your computer by simply powering it off or unplugging it, it's wise to go through a safe shutdown sequence when you want to shutdown your VM.</p>\r\n\r\n<p>When you want to shut down your VM, you should do this; it's the best way to be sure that no data is lost and that you avoid problems like virtual hard drive corruption which, while rare, are not impossible when you simply power the VM down without shutting it down first.  In previous quarters, some students ended up with irreparably corrupted VMs and had to start over with a new one, and the likeliest cause was unsafe shutdowns leaving the VM in a corrupt state.  Best to be careful.</p>\r\n\r\n<p class=\"subtitle\">Shutting down or rebooting the GUI version of the VM</p>\r\n\r\n<p>Near the bottom-right corner of your VM's GUI, you'll see an icon that looks like an on/off button (one of the icons to the left of a clock that displays the current time).  Click that icon with your mouse and you'll see a menu pop up, giving you a few options.</p>\r\n\r\n<p>To shut down your VM, select <b>Shut Down...</b> from that menu.  To reboot your VM instead, select <b>Restart...</b>.  Either of these commands should warn you about closing programs first, so that you don't accidentally lose work.</p>\r\n\r\n<p>Alternatively, you can start the Terminal application and issue the same commands detailed in the next section for shutting down or rebooting your VM.</p>\r\n\r\n<p class=\"subtitle\">Shutting down or rebooting the VM from a shell prompt</p>\r\n\r\n<p>Shutting down the ICS 45C VM from a shell prompt is simple.  Log into your VM (either in the VM console window or via SSH), so that you'll have access to any shell prompt, and issue the following command: <b>sudo shutdown -h now</b>.  You may be asked for your password; once you enter it, your VM will be shutdown, the console window will eventually disappear, and any SSH connections will be severed.</p>\r\n\r\n<p>Similarly, you can reboot your VM by issuing the command <b>sudo reboot</b> instead.  Existing SSH connections will be severed and your VM will be stopped and immediately restarted.</p>\r\n\r\n<p class=\"subtitle\">What's sudo?</p>\r\n\r\n<p>On Linux, certain user accounts can be given special rights to run commands as a <i>superuser</i>.  A superuser is one that can do essentially anything &mdash; equivalent to what is called an \"administrator\" on some other operating systems.  This is not a power to be taken lightly; you really can render your VM completely useless by doing things you shouldn't, like deleting the directories that contain operating system files or other programs that your VM depends on.  But, once in a while, we'll encounter a situation where we need to execute a command as superuser (e.g., when installing new software, or in the example above of shutting down or rebooting your VM).</p>\r\n\r\n<p>When you want to issue a command as the superuser, you prefix the command with the word <b>sudo</b>.  Shutting the VM down and rebooting it are fairly harsh operations &mdash; remember, this is a server operating system, so the operating system's presumption is that the VM could potentially be in use by many users at once &mdash; so they are often available only to superusers.</p>\r\n\r\n<p>Not all users on a Linux system are allowed to operate as superusers, though your <b>ics45c</b> user account has been configured so that it can.  This is your VM, so you should be able to do what you want with it.</p>\r\n\r\n<p>Along the way, we may discover the need to run other commands as superuser &mdash; e.g., downloading and installing software &mdash; though it's not something you'll likely see often in this course.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">A note about outgoing network access from your ICS 45C VM</p>\r\n\r\n<p>Your ICS 45C VM is capable of accessing the Internet &mdash; provided that your host operating system is connected (e.g., to the UCI Mobile Access wireless network on campus).  The VM includes a web browser (Firefox), which you can use as you would use any other browser.  However, you may notice that its ability to connect to the Internet is flaky at times, particularly when your host operating system enters and exits sleep mode or hibernation.  The solution to this problem is quite simple, once you know how to do it: Restarting the network interfaces is all you need to do, which you can do by issuing this command from a shell prompt.</p>\r\n\r\n<blockquote><pre>\r\nsudo netplan apply\r\n</pre></blockquote>\r\n\r\n<p>This has solved the problem for me every time I've had it; your mileage, of course, may vary.</p>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Learning more about Linux</p>\r\n\r\n<p>It may seem uncomfortable to be pressed into using an operating system other than the one you're used to.  The idea of spending most of your time at a shell prompt, of learning to use a new text editor like <b>vim</b> or <b>emacs</b>, of having to look up how to do simple things like move files from one place to another might seem unpleasant to you.  But a university education is a great time to experiment with new things, especially new things with real-world applicability.</p>\r\n\r\n<p>The Internet is a wonderful resource for learning about Linux and the shell prompt.  Our TAs and lab tutors will be available during our discussions to help, as well.  In general, we're leaving you to learn a lot of these things on your own, because you'll usually find that the need to know one thing will lead you to find the answers to four or five other questions you didn't realize you had yet.  It won't be long before you're plenty productive, and this is knowledge that will serve you well for the rest of your technology career.  A lot of what I know about using Linux and a command prompt have their roots in things I learned when I was a student, when I also faced this same challenge.  Embrace this challenge and you <i>will</i> emerge stronger!</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The program</p>\r\n\r\n<p>As a warm-up, this project asks you to write and submit a short C++ program.  The program itself isn't actually the interesting part, though it's one that you might find takes you a little bit of time to write.  The main goal here is to be sure you're able to use the ICS 45C VM to do your work, that you learn what you need to know about one of the available text editors to write your program, and that you use the provided tools to gather your files for submission.  Even if you normally prefer a different working environment, you would be well-served to use the ICS 45C VM for this project, to be sure that you can use it for your work later in the quarter.</p>\r\n\r\n<p class=\"subtitle\">Creating a new project on the ICS 45C VM</p>\r\n\r\n<p>At a shell prompt in your VM, issue the command <b>ics45c start proj0 project0</b>.  This will create a new project in the directory <b>~/projects/proj0</b>, using the <b>project0</b> template.  Having done that successfully, change into that directory (<b>cd ~/projects/proj0</b>) and you're ready to get started!</p>\r\n\r\n<p class=\"subtitle\">Compiling and running your program</p>\r\n\r\n<p>Whatever C++ code you write should be placed into the <b>app</b> directory inside your project directory.  (You can safely ignore the <b>exp</b> and <b>gtest</b> directories in this project.)  When you're reading to compile it, change into the directory <b>~/projects/proj0</b> (if you're not already there) and issue the command <b>./build app</b>.  (Note the dot and the slash in front of the word \"build\", and the space between \"build\" and \"app\"; those are important.)  If compiling is successful, then issue the command <b>./run</b> to run your program.</p>\r\n\r\n<p class=\"subtitle\">The program's requirements</p>\r\n\r\n<p>Your program is required to read a single line of input from the user (without printing any input prompt), which is expected to be a positive integer <i>n</i>.  You can freely assume this will be a positive integer, and it's not important what you do in any other case; we'll only test your program with positive integer input.  You can also freely assume that <i>n</i> will not be greater than 999.</p>\r\n\r\n<p>After reading the input, your program will print a <i>block pyramid</i> of size <i>n</i>.  The bottom level of the pyramid will be <i>n</i> blocks wide, the level just above that will be <i>n</i> &minus; 1 blocks wide, and so on, with the top level consisting of a single block.  Each level's blocks are centered with respect to the blocks on the level below.</p>\r\n\r\n<p>The precise format is best demonstrated with an example.  If the input to the program was <b>3</b>, the output would look like this:</p>\r\n\r\n<blockquote><pre>\r\n  ***\r\n  * *\r\n *****\r\n * * *\r\n*******\r\n* * * *\r\n*******\r\n</pre></blockquote>\r\n\r\n<p>A few additional requirements apply:</p>\r\n\r\n<ul>\r\n  <li>Though I've indented the text above to set it apart from the rest of this project write-up, note that the bottom level of blocks must begin in the leftmost column of the output (i.e., it should not be indented).</li>\r\n  <li>There must be no spaces after the last <b>*</b> character on each line.</li>\r\n  <li>There must be a newline character on the end of each line, including the last one.</li>\r\n</ul>\r\n\r\n<p>We will not be answering any additional questions about the structure of a block pyramid; the description above is enough to solve the problem.  However, we do have some tools to let you experiment some more, and to let you know whether your program is ultimately correct.</p>\r\n\r\n<p class=\"subtitle\">Experimenting with the provided solution</p>\r\n\r\n<p>Your output is required to be precisely the same as what is specified here, down to the character, so some care will have to be taken in ensuring that you've got it right.  To avoid you feeling like you have to wait for us to give you assurance, an example solution has been provided in the <b>project0</b> project template; while we won't necessarily make a habit of this, it will be useful in this project to be able to see precise expected output easily.</p>\r\n\r\n<p>To run the provided solution, change into the directory <b>~/projects/proj0</b> (if you're not already there) and issue the command <b>./solution</b>.  You'll see no output initially, because the program is waiting for you to type its input.  Type <b>3</b> and press Enter.  You will then see a block pyramid that is three blocks high.</p>\r\n\r\n<p>Try other inputs, and make sure you have a clear understanding of what block pyramids of different sizes are supposed to look like.  We will not be providing you with formulas or further descriptions of the requirements; everything you need to know about it can be deduced by running the solution with various inputs and inspecting the corresponding outputs, and we're leaving it to you to figure out an appropriate algorithm to print the pyramid.</p>\r\n\r\n<p class=\"subtitle\">Comparing your program's output to the provided solution automatically</p>\r\n\r\n<p>When you think you've got the program finished, you'll want to be absolutely sure that your program's output <i>exactly</i> matches the output of the provided solution.  Rather than eyeballing it, we've provided a script that does this for you automatically.  Here's what you need to do to try it:</p>\r\n\r\n<ul>\r\n  <li>First, be sure that you've build your program with the <b>./build app</b> command.  Only if that was successful can you proceed to the next step.</li>\r\n  <li>Next, decide what input you'd like to use for the comparison.  For example, if you want to compare your three-block-high pyramid to the one generated by the example solution, you'd use the input <b>3</b>.</li>\r\n  <li>Issue the shell command <b>./compare 3</b> (replacing 3 with whatever you'd like the test input to be).  Behind the scenes, the <b>compare</b> script will run your program <i>and</i> the provided solution with the input <b>3</b>, then compare the outputs to see if they're character-for-character identical.\r\n    <ul>\r\n      <li>If the outputs were identical, you'll be told that no differences were found.</li>\r\n      <li>If there was even the slightest difference &mdash; including extra spaces, extra blank lines, etc. &mdash; you'll instead be told that there were differences found, and the differences will be shown to you in a format sometimes known as a <b>diff</b>.  (In a diff, there's a <i>left-hand side</i> and a <i>right-hand side</i>; your program's output is the left, and the provided solution's is the right.)</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p>If you are not able to successfully run the <b>compare</b> script with a variety of valid inputs (any positive integer is valid) and be told that there are no differences, your program is not done, and you will not receive the full 2% credit for it.  <i>There are no exceptions!</i></p>\r\n\r\n<p class=\"subtitle\">How to solve the problem</p>\r\n\r\n<p>You can use any C++ techniques you'd like and write the program in any way, so long as it compiles, runs, and generates the correct output for valid inputs.  We will not be grading this project for style or quality at all &mdash; something which will most definitely change going forward!  The only goal is that we're able to take the source code you submitted, run the provided <b>build</b> script to compile and link it, then run the provided <b>compare</b> script to validate it.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Gathering and retrieving files from the ICS 45C VM for submission</p>\r\n\r\n<p>When you've completed your work on this project, you'll need to submit your C++ source and header files to us.  Because we'll be using some automated tools to test your work, it's important that everyone submits their work in the same format &mdash; files arranged in the same way, in the same directories, etc. &mdash; so I've provided a script called <b>gather</b> in your project directory that will gather up the necessary files, arrange them in the way that we expect, and prepare a file called <b>project0.tar.gz</b>, which is the only file you'll need to submit.</p>\r\n\r\n<p>The <b>gather</b> script will gather all of the files in your <b>app</b>, <b>exp</b>, and <b>gtest</b> directories and no others, so be sure that anything you want to submit is in the <b>app</b>, <b>exp</b>, or <b>gtest</b> directories before running it.  Additionally, only files meeting certain characteristics will be gathered, even if they're in these directories:</p>\r\n\r\n<ul>\r\n  <li>Only files whose names end in either <b>.hpp</b> or <b>.cpp</b> are gathered.</li>\r\n  <li>Only files whose sizes are not more than 128KB are gathered.</li>\r\n</ul>\r\n\r\n<p>Files not meeting these characteristics are extremely unlikely to be things that we're interested in &mdash; they'll generally be temporary files generated by your editor or development environment, for example, which has led to students attempting to submit hundred-megabyte submissions for what are otherwise small programs.</p>\r\n\r\n<p>Make note of the list of files that the <b>gather</b> script picked up; they'll be shown to you.  It's your responsibility to ensure that nothing is missing, and \"I wanted to submit this file but <b>gather</b> didn't pick it up\" does not constitute an excuse to submit late work.</p>\r\n\r\n<p class=\"subtitle\">What's a .tar.gz?</p>\r\n\r\n<p>A <b>.tar.gz</b> file (sometimes called a \"tarball\") is a compressed archive format common on Linux and various other flavors of Unix.  (The <b>.tar</b> means that it is an archive of files; the <b>.gz</b> means that the archive has been compressed using an algorithm called gzip.)</p>\r\n\r\n<p class=\"subtitle\">Submitting your work using the ICS 45C VM's GUI</p>\r\n\r\n<p>When you're ready to submit your <b>project0.tar.gz</b> file, you'll want to submit it to our web-based system called Checkmate (described below).  The easiest way to do this is to use the web browser (Firefox) built into the ICS 45C VM, which will allow you to log into Checkmate and submit the file as you would on your host operating system.</p>\r\n\r\n<p>Alternatively, you might prefer to retrieve the file from your VM and submit it from your host operating system; if so, see the next section for instructions on how to retrieve the file.  (It's not a bad idea to learn how to do this, anyway, as it provides you a way to back up your work, by copying it off of your VM and on to something else.)</p>\r\n\r\n<p class=\"subtitle\">Retrieving the tarball from your VM</p>\r\n\r\n<p>If you'd like to retrieve the tarball from your VM &mdash; because you prefer to submit it from your host operating system, or simply because you want to keep a separate copy of it &mdash; this is one way to do it.</p>\r\n\r\n<p>The simplest method for retrieving a file is to use a protocol called SCP.  SCP is a protocol that allows you to copy files from one machine to another.  You'd connect to your VM using SCP, then copy the tarball to your host.  How you use SCP depends on your host operating system.</p>\r\n\r\n<ul>\r\n  <li>Windows has no built-in support for SCP, but there are a few well-known programs you can download and install.  The simplest is called <b>WinSCP</b>, which provides a graphical user interface for connecting to your VM using SCP.\r\n    <ul>\r\n      <li>Download WinSCP from <a href=\"http://winscp.net/eng/download.php\">winscp.net</a>.  The easiest option is to select the <b>Installation package</b>, which you would want to download and then run; it will install WinSCP and make it available like a typical Windows application (e.g., from the Start menu).</li>\r\n      <li>Launch the WinSCP application.  Click <b>New</b> to create a new session and enter the following values:\r\n        <ul>\r\n          <li>Under <b>Host name</b>, specify the IP address of your VM</li>\r\n          <li>Under <b>Port number</b>, specify <b>22</b></li>\r\n          <li>Under <b>User name</b>, specify <b>ics45c</b></li>\r\n          <li>Under <b>Password</b>, specify the password belonging to the ics45c user account on your VM &mdash; you did change it already, didn't you?  If not, do that now (see above).</li>\r\n          <li>Leave <b>Private key file</b> blank</li>\r\n          <li>Next to <b>File protocol</b>, select <b>SCP</b></li>\r\n          <li>Now that you've set these up, you can click the <b>Save...</b> button to save these settings so you don't have to enter them again, then click <b>Login</b>.</li>\r\n        </ul>\r\n      </li>\r\n      <li>Once logged in, you should see the files on your VM.  Navigate to the <b>/home/ics45c/projects/proj0</b> directory.  You should now see the <b>project0.tar.gz</b> file you created earlier, which you can drag and drop to your host machine wherever you'd like it to be stored.</li>\r\n      <li>After copying the file to your host machine, you can close WinSCP.</li>\r\n    </ul>\r\n  </li>\r\n  <li>If you use macOS, Linux, or other flavors of Unix, you're in luck!  SCP support is built into your operating system.  Your best bet is to bring up a shell prompt (e.g., a Terminal window in macOS), decide what directory on your host machine you want to copy the file to, then to issue the command <b>scp ics45c@<i>VM_IP_ADDRESS</i>:~/projects/proj0/project0.tar.gz <i>TARGET_DIRECTORY_ON_HOST</i></b> to copy the file.\r\n    <ul>\r\n      <li>So, for example, if you want to copy the tarball to the directory <b>/Users/boo/Documents</b> on your host machine, you would issue this command: <b>scp ics45c@<i>VM_IP_ADDRESS</i>:~/projects/proj0/project0.tar.gz /Users/boo/Documents</b></li>\r\n      <li>Note that whatever directory you choose on your host machine will already have to exist.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Inspecting your tarball before submitting it</p>\r\n\r\n<p>It's not a bad idea to inspect the contents of your tarball before you submit it, just to be sure that (a) all of the files you want to submit are included, and (b) the right <i>versions</i> of the files are included.  How you open the file depends on your host operating system:</p>\r\n\r\n<ul>\r\n  <li>On Windows, you will need to obtain a tool that can open a <b>.tar.gz</b> file; Windows doesn't support this ability by default.  You may have such a tool already (e.g., WinZip, WinRAR); if not, a good free choice is <a href=\"http://www.7-zip.org/\">7-Zip</a>.</li>\r\n  <li>On macOS, you'll find that you can simply navigate to the file in Finder and double-click on it, which will extract its contents.  It should create a directory called <b>app</b> and another called <b>gtest</b> inside of the directory where the <b>.tar.gz</b> file resides, containing all of the files that are included in the tarball.</li>\r\n  <li>On other flavors of Unix or Linux, you can extract the tarball most easily from a shell prompt, by changing into the directory containing the tarball and issuing the command <b>tar xvfz project0.tar.gz</b>.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>After using the <b>gather</b> script in your project directory to gather up your C++ source and header files into a single <b>project0.tar.gz</b> file, then submit that file (and only that file!) to Checkmate.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.  (It's not a bad idea to look at the contents of your tarball on your host operating system before submitting it.)</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>This project is not included in the late work policy for this course.  It needs to be completed on schedule and submitted before the due date above.  Submissions beyond that deadline will not be considered.</p>\r\n\r\n<p>The late work policy for this course &mdash; which does not apply to this project, but applies to all of the others &mdash; is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Understanding the risks of using something other than the ICS 45C VM</p>\r\n\r\n<p>You are certainly within your rights to use something other than the ICS 45C VM to do your work this quarter, but you should be aware that you are bearing some risks by doing so:</p>\r\n\r\n<ul>\r\n  <li>You'll be responsible for setting up and configuring the necessary software.  As a rule, we won't be available to help configure environments other than the ICS 45C VM; you'll be on your own.  For example, the provided project templates are specifically set up to work on the ICS 45C VM; making them work on something else will be up to you, and you might find this to be a tricky task, even if you believe you have all the same software we do.</li>\r\n  <li>We'll be using the ICS 45C VM to grade your work, so if you write a program that compiles and runs on your own setup, but does not compile and run in the ICS 45C VM, you'll be the one to bear that risk.  (This is not at all unrealistic, given differences in C++ compiler versions and the operating systems they run on, so don't discount this risk lightly.)</li>\r\n  <li>When it comes time to submit your work, we expect everyone to use the provided <b>gather</b> script to gather their files for submission, so that everyone's submission is in the same format.  We have test automation tools that depend on that.  If you work outside of the ICS 45C VM, you'll have the additional problem of making sure that your submission is in the right format &mdash; and, if it's not, risk us not being able to grade your work, or that we refuse to grade your submission because we would have to perform special workarounds to be able to grade it.</li>\r\n</ul>\r\n\r\n<p>At minimum, my suggestion is to get the ICS 45C VM set up, so that you can test your projects in it before submitting them and then run the <b>gather</b> script before submission, even if you prefer to do your day-to-day work elsewhere.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Due to VMware adoption by ICS, portions rewritten by Alex Thornton, Fall 2019.</li>\r\n  <li>Tweaks and fixes by Alex Thornton, Fall 2018.</li>\r\n  <li>Program requirements replaced with an all-new one, along with many additional tweaks by Alex Thornton, Fall 2015.</li>\r\n  <li>Tweaks throughout by Alex Thornton, Fall 2014.</li>\r\n  <li>Rewritten to include instructions for non-GUI and GUI VM versions, with the addition of deliverables, by Alex Thornton, Winter 2014.</li>\r\n  <li>Originally written by Alex Thornton, Fall 2013.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}