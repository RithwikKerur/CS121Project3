{"url": "https://www.ics.uci.edu/~wscacchi/Papers/Software_Process_Redesign/Paper-Draft.html", "content": "<HTML>\n<HEAD>\n   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n   <META NAME=\"Generator\" CONTENT=\"Microsoft Word 97\">\n   <META NAME=\"Template\" CONTENT=\"C:\\PROGRAM FILES\\MICROSOFT OFFICE\\OFFICE\\html.dot\">\n   <META NAME=\"GENERATOR\" CONTENT=\"Mozilla/4.05 [en] (X11; I; SunOS 5.5.1 sun4m) [Netscape]\">\n   <TITLE>Understanding Software Process Redesign using Modeling, Analysis and Simulation</TITLE>\n</HEAD>\n<BODY LINK=\"#0000FF\" VLINK=\"#800080\">\n\n<CENTER>\n<H1>\n<B><FONT FACE=\"Arial\"><FONT SIZE=+1>Understanding Software Process Redesign\nusing Modeling, Analysis and Simulation</FONT></FONT></B></H1></CENTER>\n\n<CENTER></CENTER>\n\n<CENTER><FONT SIZE=-1>Presented at the<I> ProSim'99 Workshop on Software\nProcess Simulation and Modeling,</I> Silver Springs, OR 27-29 June 1999</FONT></CENTER>\n\n<CENTER><FONT SIZE=-1>Revised version to appear in <I>Software Process-Improvement\nand Practice.</I></FONT></CENTER>\n\n<CENTER></CENTER>\n\n<CENTER>Walt Scacchi</CENTER>\n\n<CENTER><FONT SIZE=-1>Information and Computer Science Dept.</FONT></CENTER>\n\n<CENTER><FONT SIZE=-1>University of California</FONT></CENTER>\n\n<CENTER><FONT SIZE=-1>Irvine,&nbsp;CA 92697-3425 USA</FONT></CENTER>\n\n<CENTER><FONT SIZE=-1>Wscacchi@ics.uci.edu</FONT></CENTER>\n\n<CENTER><FONT SIZE=-1>http://www.ics.uci.edu/~wscacchi</FONT></CENTER>\n\n\n<P><B>Abstract: </B>This paper introduces the problem of understanding\nwhat software process redesign (SPR) is, and how software process modeling,\nanalysis and simulation may be used to support it. It provides an overview\nof research results from business process redesign to help draw attention\nto the importance of treating process redesign as a process of organizational\nand process transformation. This in turn requires examining and practicing\nSPR through an approach that combines organizational change management\ntogether with process management technologies. A discussion follows which\nthen identifies a number of topic areas that require further study in order\nto make SPR a subject of software process research and practice.\n\n<P><I>Keywords</I>: software process, process redesign, business process\nredesign, process modeling and simulation\n\n<P><B><FONT FACE=\"Arial\">1. Overview</FONT></B>\n\n<P>Software process improvement (SPI) has traditionally been focussed on\naddressing how to improve the capabilities of a software development organization\nthrough maturing and comparative benchmarking of its software processes.\nThe Capability Maturity Model from the Software Engineering Institute is\nthe most visible SPI initiative of its kind. However, the CMM is targeted\nto incremental improvement of existing software processes. The CMM top-most\nlevel, Optimization (Level 5), characterizes those organizations whose\nsoftware processes are incrementally improved and refined through monitoring,\nmeasurement and reflexive analysis of well-defined and well-managed processes.\nNonetheless, the CMM does not provide specific guidance or a maturity level\nthat implicitly prescribes how to fundamentally rethink how to optimize\nsoftware processes to achieve on the order of 10X improvement through radical\ntransformation. Are radical transformations of software processes the same\nas incremental evolutionary improvements? Probably not, though they appear\nto lie along a common dimension or metric that characterizes the scale\nor scope of process change that is sought. As such, <I>software process\nredesign</I> (SPR) merits investigation to determine whether and how it\nmight lead to dramatic improvements in process efficiency or effectiveness.\n\n<P>The study presented in this paper introduces the topic of SPR. It describes\nhow concepts, techniques and tools for software process modeling, analysis\nand simulation may be employed to support SPR studies. In particular, three\nresearch questions that explore and elaborate these topics can be identified\nas follows:\n<UL>\n<LI>\nwhat is software process redesign, and how does it relate to business process\nredesign?</LI>\n\n<LI>\nhow can modeling, analysis, and simulation help in redesigning software\nprocesses?</LI>\n\n<LI>\nwhat approach is needed for acquiring, checking, and applying the knowledge\nrequired to dramatically and continuously improve software processes?</LI>\n</UL>\nAccordingly, in the sections that follow, each of these questions is addressed,\nelaborated and investigated in turn.\n\n<P><B><FONT FACE=\"Arial\"><FONT SIZE=+1>2. What is software process redesign</FONT></FONT></B>\n\n<P>SPR is concerned with identification, application and refinement of\nnew ways to improve software processes. Software processes of interest\ninclude not only those associated with software development, but also those\nfor software system acquisition [SB98], use and evolution. Redesign heuristics\nserve as the main source of knowledge for how to dramatically improve the\ncycle time, defect prevention, and cost effectiveness of various kinds\nof software/business processes [VS99]. However, where do these heuristics\ncome from? What can we learn from the results of business process redesign\n(BPR) studies? Is the Web a useful source of SPR knowledge? Let us consider\neach in turn.\n\n<P><B><I><FONT FACE=\"Arial\">2.1 Where do SPR heuristics come from</FONT></I></B>\n\n<P>SPR heuristics can be derived through empirical studies of before and\nafter focal processes have been redesigned [e.g., SN97]. The results of\nthese studies are often cast in forms such as experience reports, case\nstudies, lessons learned or best practices [DP98, O98], rather than from\ncontrolled, carefully designed experiments [ZW98]. As the generalizability\nof such studies is usually limited, the story, contexts and insights they\nmay convey can be enlightening or sensitizing. Accordingly, this is why\nattention is drawn to <I>heuristic</I> knowledge to guide SPR. Nonetheless,\nSPR heuristics can also be derived from theoretical propositions that characterize\nhow to most effectively redesign complex processes, or from patterns in\nmeasurable properties of formal representations of processes for redesign.\n\n<P>SPR heuristics may be domain independent and therefore applicable to\na large set of processes. Alternatively, SPR heuristics may be domain specific,\nthus applicable to specific processes in particular settings. Both domain\nindependent and domain specific SPR heuristics are sought. In examining\nhow SPR heuristics are applied, we can learn the circumstances in which\ndifferent types of heuristics are most effective or least effective. Similarly,\nwe can learn which process redesigns are considered most effective and\ndesirable in the view of the participants working in the redesigned process,\nor which redesigns are considered undesirable by the participants [SN97,\nVS99]. However, part of the challenge in identifying SPR heuristics of\nany kind is that unless they are explicit, most of these heuristics implicit.\nThis means they are likely to be found through comparison across a diverse\nsample of redesign case studies, rather than conveniently found in a single\nrepository. This kind of comparative domain analysis can be a high-skill,\nlabor-intensive activity. Nonetheless, new technologies are creating options\nthat may make such activity more manageable.\n\n<P>Therefore, it is useful to acknowledge that finding and ferreting out\nSPR heuristics is a difficult task. However, a structured scheme for taxonomically\nclassifying SPR heuristics, or a repository populated with SPR heuristics,\nare likely to be valuable assets for research purposes or commercial applications\nof SPR. As such, there is motivation for finding more such heuristics,\nas well as for building alternative classification taxonomies and repositories\nfor SPR.\n\n<P><B><I><FONT FACE=\"Arial\">2.2 Lessons from Business Process Redesign</FONT></I></B>\n\n<P>The work of Hammer, Davenport and their colleagues brought attention\nto the problem of business process redesign (BPR) or process reengineering.\nFollowing their advice, existing or legacy software processes should be\neither (a) obliterated, not automated [H90], or else (b) understood and\nmeasured [DS90]. In turn, innovative to-be software processes should be\ndesigned and prototyped using leading-edge software engineering and other\ninformation technologies (ITs) as a new foundation for coordinating software\ndevelopment and use activities [DS90]. However, the ability to successfully\nrealize the benefits of radical IT-based changes in most business processes\nhas been elusive.\n\n<P>Reflective studies of the problems, pitfalls and best practices of BPR\nfind that certain organizational variables, rather than IT, are key to\nachieving successful BPR outcomes [BMR94, HRW93]. In many of the BPR projects\nexamined, BPR failure was reported to be the outcome about 70% of the time\n[BMR94]. How can BPR failure be avoided when redesigning software processes?\nAvailable research results from BPR studies indicate that critical conditions\nto help realize success should include the participation and commitment\nof top management executives, empowered workers, shared vision, realistic\nexpectations, changes in worker roles and responsibilities, new performance\nmeasurements, worker incentives, and the like [BMR94, HRW93]. Conversely\nif these organizational conditions are insignificant or missing, then we\nshould expect the application of BPR to software processes to fail.\n\n<P>The dilemma of how to realize the benefits of a successful BPR project,\nwhile avoiding the likelihood of failure, gave rise to a series of empirical\nfield studies and surveys to track down the source of variation and causality.\nResults from representative investigations [CJS94, ESS95, GJ+95] emphasized\nthe importance of addressing BPR implementation within the broader context\nof organizational change in a complex socio-technical environment [cf.\nKS82]. For instance, some organizations may choose to reengineer a set\nof processes (e.g., software life cycle processes) over time, in order\nto learn from what succeeds and what fails [CJS94]. Applying a lesson learned\nfrom Caron and colleagues [CJS94] to software process reveals that SPR\nefforts should be implemented within an organization bottom-up by the process\nend-users, rather than imposed top-down by senior management [cf. H90],\nto succeed. Following this, senior management should provide the strategic\nvision for an effort to redesign software processes that empowers process\nstaff to participate in directing and implementing the effort [ESS95].\nSimilarly, change management strategies and techniques, technological competence,\ntactical planning and project management, and training personnel for to-be\nprocesses, should be factors related to success when redesigning software\nprocesses [GJ+97<A HREF=\"#GJKW95\">GJKW95</A>\n\n<P>].\n\n<P>Drawing from the emerging theoretical basis of BPR [KG95], when redesigning\nsoftware processes, focus should be on the creation of an organizational\nenvironment that support change management strategies. Central among them\nare organizational commitments to foster a process learning and experimentation\nenvironment, knowledge sharing supplemented with software technologies,\ninternal and external partnering, and measurable process improvements,\nas prerequisites for BPR success. Similarly, when reengineering software\ndevelopment processes, effort should be directed at enhancing the level\nof team development, cooperative work, and collaborative learning [JW+97].\n\n<P>Finally, recent studies of BPR establish ties between process change\nand their consequence on organizational performance. For example, applying\nthe results of Guha and colleagues [GG+97], reengineering software processes\nshould require the creation of a learning organization where articulating\nthe interdependencies between the change environment, process management\nand change management is the focus. Last, when redesigning software processes,\nmanagement control of organizational resources, such as software acquisition\nand development process expenditures, must remain effective though perhaps\nin a more streamlined manner [SN97a].\n\n<P><B><I><FONT FACE=\"Arial\">2.3 Can the Web help us learn about SPR?</FONT></I></B>\n\n<P>We can all use the Web to conduct a global search and information retrieval.\nThough we may find little matching a search for \"software process redesign\",\na search for \"process redesign\" or \"process reengineering\" will return\nmuch more. Here we might find case studies, experience reports, best practices\nor lessons learned as narrative documents posted on academic, non-profit,\nor commercial sites. Clearly, the quality of the \"knowledge\" and results\ngleaned from sources on the Web may be more erratic than those found in\nsystem research studies. But in searching for SPR heuristics, when potentially\nrelevant source materials are found, hyperlinks can be used to label and\nassociate the connection between the materials and the heuristics they\ninstantiate. Subsequently, when a heuristic is potential candidate for\nuse in redesigning a software process, its source can be browsed and reexamined\nto help determine its similarity, relevancy, trajectory or outcome. Subsequently,\nas interest in SPR activities and outcomes grows, then more SPR case studies,\nexperience reports, lessons learned, best practices, counter-examples and\ncaveats may soon find their way onto the Web. Thus, SPR heuristics or SPR\nknowledge repositories should be viewed as growth areas, rather than as\na topic that can be exhaustively analyzed with limited effort.\n\n<P><B><FONT FACE=\"Arial\"><FONT SIZE=+1>3. How can modeling, analysis and\nsimulation help SPR</FONT></FONT></B>\n\n<P>There is a growing body of studies and techniques that address the modeling,\nanalysis and simulation of software processes [P98]. Yet none of the extant\nstudies address the subject of SPR as their primary focus. However, SPR\nis often implicit as a motivating factor in practical applications of software\nprocess modeling and simulation. As such, how can modeling, analysis and\nsimulation of software processes be employed to directly support SPR?\n\n<P><B><I><FONT FACE=\"Arial\">3.1 Modeling process redesign knowledge</FONT></I></B>\n\n<P>As already noted SPR knowledge is often cast as heuristics derived from\nresults of empirical or theoretical studies. These results may then be\ncoded as production rules for use in a rule-based system (i.e., a pattern-directed\ninference system) [N97], or as tuples (records of relation attribute instance\nvalues) that can be stored in a relational database [KS96]. Nonetheless,\nthese alternative representation schemes do not focus on what needs to\nbe modeled, which is the focus here.\n\n<P>From a modeling standpoint, there is need to potentially model many\nkinds and forms of SPR knowledge. These include (a) the process to be redesigned\nin its legacy, \"as-is\" form before redesign, (b) the redesign heuristics\n(or transformations) to be applied, (c) the \"to-be\" process resulting from\nredesign, and (d) the empirical sources (e.g., narrative case studies)\nfrom which the heuristics were derived. Furthermore, we might also choose\nto model (e) the sequence of steps (or the \"here-to-there\" process) through\nwhich different redesign heuristics were applied to progressively transform\nthe as-is process into its to-be outcome. Modeling the processes identified\nin (a), (c) and (e) is already within the realm of process modeling and\nsimulation capabilities. However, (b) and (d) pose challenges not previously\naddressed by software process modeling technologies. Furthermore, (b) and\n(d) must be interrelated or interlinked to the process models of (a), (c)\nand (e) to be of greatest value for external validation, traceability,\nand incremental evolution purposes [VS99, ZW98]. Finally, software process\nmodeling will play a role in (f) facilitating the continuing evolution\nand refinement of the SPR knowledge web.\n\n<P><B><I><FONT FACE=\"Arial\">3.2 Analyzing processes for redesign</FONT></I></B>\n\n<P>Software process models can be analyzed in a number of ways [MS90, SM97].\nThese analysis are generally targeted to improving the quality of the process\nmodel, as well as to detect or prevent common errors and omissions that\nappear in large models. Nonetheless, software process redesign poses additional\nchallenges when analyzing process models.\n\n<P>First, it is necessary to analyze the consistency, completeness, traceability\nand correctness of multiple, interrelated process models (as-is, here-to-there,\nand to-be). This is somewhat analogous to what happens in a software development\nproject when multiple notations (e.g., for system specification, architectural\ndesign, coding, and testing) are used, therefore requiring analysis across\nas well as within a the software notations.\n\n<P>Second, it is necessary to account for software process resources throughout\nthe redesign effort. For example, are resources that appear in an as-is\nprocess replicated, replaced, subsumed, or removed in the to-be process?\nSPR can change the flow of resources through a process, and thus we want\nto observe and measure these changes on process performance.\n\n<P>Last, one approach to determining when domain-independent process redesign\nheuristics can apply results from measuring structural attributes of the\nformal or internal representation (e.g., a semantic network or directed\nattributed graph) of a process as index for selecting process redesign\nheuristics [N97, N98, SN97]. Each of these challenges necessitates further\ndescription and refinement, as well as characterizing how they can interact\nin a simplifying or complicating manner.\n\n<P><B><I><FONT FACE=\"Arial\">3.3 Simulating processes before, during and\nafter redesign</FONT></I></B>\n\n<P>Software process models can be simulated in a number of interesting\nand insightful ways using either knowledge-based, discrete-entity or system\ndynamics systems [P98, S99]. However, is there still need for another type\nof system to simulate processes performed by process users, and under their\ncontrol?\n\n<P>When considering the role of simulation in supporting software process\nredesign a number of challenges arise. For example, how much of a performance\nimprovement does an individual redesign heuristic realize? Will different\nprocess workload or throughput characterizations lead to corresponding\nvariations in simulated performance in both as-is and to-be process models?\nHow much of a performance improvement do multiple redesign heuristics realize,\nagain when considered with different workloads or throughputs? Can simulation\nhelp reveal whether all transformations should be applied at once, or whether\nthey should be realized through small incremental redesign improvements?\nAs such, simulation in the context of SPR raises new and interesting problems\nrequiring further investigation and experimentation.\n\n<P>As suggested earlier, there is need to simulate not only as-is and to-be\nprocesses but also the here-to-there transformation processes. Following\nfrom the results in the BPR research literature, transforming an as-is\nprocess into its to-be counterpart requires organizational change management\nconsiderations. The process users who should be enacting and controlling\nthe transformation process can benefit from, and contribute to, the modeling\nand analysis of as-is processes [SM97, S99]. Similarly, users can recognize\npossible process pathologies when observing graphic animations of process\nsimulations. However, the logic of the process simulation may not be transparent\nor easy to understand in terms that process users can readily comprehend.\n\n<P>Conventional approaches to process simulation may not be empowering\nto people who primarily enact software use processes [cf. SN97]. Instead,\nanother option may be needed: one where process users can interactively\ntraverse (i.e., simulate) a new to-be process, or the here-to-there process,\nvia a computer-supported process walk-through or fly-through. In such a\nsimulation, user roles are not simply modeled as objects or procedural\nfunctions; instead, users play their own roles in order to get a first-person\nview and feel for the new process. This is analogous to how \"flight simulators\"\nare used to help train aircraft pilots. In so doing, user participation\nmay raise a shared awareness of which to-be alternatives make the most\nsense, and how the transformations needed to transition from the as-is\nto to-be process should be sequenced within the organizational setting.\nAs such, simulation for SPR raises the need for new approaches and person-in-the-loop\nsimulation environments.\n\n<P><B><FONT FACE=\"Arial\"><FONT SIZE=+1>4. Approach and Results</FONT></FONT></B>\n\n<P>Given the challenges identified in the previous section on how to modeling,\nanalysis and simulation can support SPR, this section presents the approach\nand initial results from an effort in each of these three areas.\n\n<P><B><I><FONT FACE=\"Arial\">4.1 Modeling Approach and Results</FONT></I></B>\n\n<P>In developing models of processes for SPR, we used two tools. First,\nin order to represent SPR knowledge formally and reason with it, the Loom\nknowledge representation system was selected [MB95]. Loom is a mature language\nand environment for constructing ontologies and intelligent systems that\ncan be accessed over the Web [VR+99]. By using Loom to re-implement the\nArticulator process meta-model ontology [MS90, MS96], formal models of\nsoftware (or business) processes, classification taxonomies and process\nredesign heuristics can be represented and manipulated. In turn, process\nknowledge can be analyzed, queried, and browsed, while relevant redesign\nalternatives for processes can be identified and linked to source materials\non the Web. Nonetheless, Loom does impose a discipline for formally representing\ndeclarative knowledge structures in terms of concepts (object or pattern\ntypes), relations (link types that associate concept) and instances (concept,\nlink, attribute values).\n\n<P>Loom's <I>deductive</I> <I>classifier</I> utilizes forward-chaining,\nsemantic unification and object-oriented truth maintenance technologies.\nThis enables it to compile the declarative knowledge into a network designed\nto efficiently support on-line deductive query processing [MB95]. Further,\nLoom's classifier can be used to taxonomically classify and update the\nSPR knowledge base as new SPR cases are entered and formally modeled. This\nin turn enables the SPR knowledge web to evolve with automated support\n[VS99].\n\n<P>Second, in order to support the visualization of the knowledge bases\nand process models that have been constructed, a Web browser interface\nto the Loom system called Ontosaurus is used [ON99]. Ontosaurus is a client-side\ntool in which a Loom server loaded with one or more knowledge bases replies\nto queries and produces Web pages describing several aspects of the knowledge\nbase. It is also able to provide simple facilities for producing general\nqueries and editing the contents of knowledge bases. Figure 1 shows a browser\nwindow accessing Ontosaurus. The display consists of three window panels;\nToolbar (top), Reference (left side) and Content (right side). The Toolbar\npanel consists of buttons to perform various operations such as <I>select\ndomain theory</I>, <I>display theory, save updates</I>, etc. The Reference\nand Content panels are designed to display contents of a selected ontology.\nLinks in both panels display their contents in the Content window. This\nfacilitates exploring various links associated with a word or concept in\nthe Reference window without the need to continuously go back and forth.\nThe bookmark window holds user-selected links for Web pages to Ontosaurus\npages, and is managed by the buttons in the bottom of the bookmark window.\n\n<P>We now describe how we built a knowledge-based system to represent and\ndiagnose models of SPR. The system is based on an ontology of business\nprocesses expressed in Loom. Loom provides a semantic network knowledge\nrepresentation framework based on description logics. Nodes in a Loom semantic\nnetwork define <I>concepts</I> that have roles or slots to specify their\nattributes. A key feature of description logic representations is that\nthe semantics of the representation language are very precisely specified.\nThis precise specification makes it possible for the classifier to determine\nwhether one concept <I>subsumes</I> another based solely on the formal\ndefinitions of the two concepts. The classifier is an important tool for\nevolving ontologies because it can be used to automatically organize a\nset of Loom concepts into a classification hierarchy or taxonomy based\nsolely on their definitions. This capability is particularly important\nas the ontology becomes large, since the classifier will find subsumption\nrelations that people might overlook, as well as modeling errors that could\nmake the knowledge base inconsistent.\n<CENTER></CENTER>\n\n<CENTER><IMG SRC=\"Ontosaurus.gif\" HEIGHT=997 WIDTH=1236></CENTER>\n\n<CENTER></CENTER>\n\n<CENTER><B>Figure 1</B>. Ontosaurus display with <FONT FACE=\"Courier New\">Process\n</FONT>concept definition loaded in the Reference window and a process\nredesign instance in the Contents window</CENTER>\n\n\n<P>Overall, 30 process redesign heuristics have been identified and classified\nso far. Six taxonomies have also been identified for grouping and organizing\naccess to the BPR cases found on the Web. These taxonomies classify and\nindex the cases according to:\n<UL>\n<LI>\n<I>Generic type of organization for process redesign: </I>financial, manufacturing,\nresearch, software development, etc.</LI>\n\n<LI>\n<I>As-is \"problems\" with existing process: </I>off-line information processing,\nworkflow delays, lack of information sharing, etc.</LI>\n\n<LI>\n<I>To-be \"solutions\" sought for redesigned process: </I>automate off-line\ninformation processing tasks, streamline workflow, use email and databases\nto share information, etc.</LI>\n\n<LI>\n<I>Use of intranet, extranet or Web-based process redesign solutions: </I>build\nintranet portal for project staff information, store version-controlled\nsoftware development objects on Web server, use HTML forms for data entry\nand validation process steps, etc.</LI>\n\n<LI>\n<I>SPR how-to guidelines or lessons learned: </I>explicit methods or steps\nfor how to understand and model the as-is process, identify process redesign\nalternatives, involve process users in selecting redesign alternatives,\netc.</LI>\n\n<LI>\n<I>SPR heuristics: </I>parallelize sequence of mutually exclusive tasks,\nunfold multi-stage review/approval loops, disintermediate or flatten project\nmanagement structures, move process or data quality validation checks to\nthe beginning, logically centralize information that can be shared rather\nthan routed, etc.</LI>\n</UL>\nIn turn, each of these taxonomies could be represented as hierarchically\nnested indices of Web links to the corresponding cases. Navigation through\nnested indices (\"portals\") is familiar to Web users. Typically, each taxonomy\nindexes 60-120 cases out of the total set of more than 200 that were found\non the Web and studied. This means that some cases could appear in one\ntaxonomy but not another, while other cases might appear in more than one,\nand still others might not appear in any of these taxonomies if they were\njudged to not possess the minimal information needed for characterization\nand modeling.\n\n<P>&nbsp;\n\n<P><B><I><FONT FACE=\"Arial\">4.2 Analysis Approach and Results</FONT></I></B>\n\n<P>The first challenge in analysis processes for redesign point to three\ntypes of problems that arise when modeling business processes. First, <I>consistency\nproblems</I> refer to conflicts in the specification of several properties\nof a given process. For example, a typical consistency problem is to have\na process with the same name as one of its outputs (something that occurs\nsurprisingly often in practice, perhaps because the output is often the\nmost visible characteristic of a process). Second, <I>completeness problems</I>\ncover incomplete specifications of the process. For instance, a typical\ncompleteness problem occurs when we specify a process with no inputs (a\n\"miracle\", which can produce outputs with no inputs) or no outputs (a \"black\nhole\", where inputs disappear without generating any output). Third, <I>traceability\nproblems</I> are caused by incorrect specification of the origin of the\nmodel itself: its author, the agent(s) responsible for its authoring or\nupdate, and source materials from which it was derived. Subsequently, a\nprocess model that is consistent, complete and traceable can be said to\nbe internally correct. Thus, solving these model-checking problems is required\nonce process models are to be formalized.\n\n<P>One of the main reasons Loom is interesting as a formal process representation\nlanguage is its capability to represent the abstract patterns of data that\nare the very definition of the problems discussed above. This capability\nis useful in producing simple and readable representations of model-checking\nanalyses. For example, it is possible to define incomplete process model\nin plain English as \"a process with no outputs\", or as a<FONT FACE=\"Courier New,Courier\">\nblack-hole</FONT>. This can be described in Loom as a process that provides\nexactly zero resources:\n\n<P><FONT FACE=\"Courier New,Courier\">(defconcept black-hole</FONT>\n<BR><FONT FACE=\"Courier New,Courier\">:is (:and process</FONT>\n<BR><FONT FACE=\"Courier New,Courier\">(:exactly 0 process-provide-resource)))</FONT>\n\n<P>Using the process modeling representations discussed above, the user\ndescribes a process model through Ontosaurus for processing by Loom. Then\nthe system diagnoses the model provided. One of the advantages of using\nLoom is that once we define an instance, Loom automatically applies its\nclassifier engine to find out what concepts match and apply to that instance.\nThis offers a big advantage, since there is no need to specify an algorithm\nfor the analysis process: instead, process models are analyzed automatically\nas a new model is specified. In addition, the classifier performs truth-maintenance.\nTherefore, if process model is updated to correct a problem found by the\nsystem, the classifier will immediately retract the assertion that the\nproblem applies to that process. Thus, the classifier automates this knowledge\nmaintenance activity.\n\n<P>In order to provide a more direct interface to the diagnosis system,\nthe Ontosaurus browser was extended to display two new types of pages.\nThe first displays a description of process in a less Loom-specific way\n(e.g., for reporting purposes). The second displays a list of all problems\nfound in the current process model we input. Figure 2 shows a screenshot\nof the Web page constructed by the server to describe the problems found\nin a model of a sample process.\n\n<P>The other two challenges for analyzing processes to support SPR can\nbe addressed with a common capability that builds on the one just described.\nSince a formal representation of a software process model can be viewed\nas a semantic network or directed attributed graph, it is possible to measure\nthe complexity attributes of the network/graph as a basis for graph transformation,\nsimplification or optimization. This means that measures of a richly attributed\n\"process flow chart\" could reveal attributes such as the number of process\nsteps, the length of sequential process segments, the degree of parallelism\nin process control flow, and others [N97, N98]. Subsequently, redesign\nheuristics can be coded as patterns in the structure of a process representation.\nIn turn, it then becomes possible to cast a process redesign heuristic\nas a production rule (or pattern-directed inference rule) whose antecedent\nstipulates a process complexity measure pattern, and whose consequent specifies\nthe optimization transformation to be applied to the process representation\n[N98]. For example, when analyzing a software process model, if a sequence\nof process steps has linear flow and the inputs and outputs of the steps\nare mutual exclusive, then the process steps can be performed in parallel.\nSuch a transformation reduces the time required to execute the redesigned\nprocess sequence.\n\n<P>Thus, process analysis for SPR can focus on measurement of attributes\nof a formal representation of a software process model that is internally\ncorrect. This is similar to how compilers perform code optimizations during\ncompilation, after parsing and semantic analysis while prior to code generation.\n\n<P>&nbsp;\n<CENTER></CENTER>\n\n<CENTER><IMG SRC=\"Process_Model_Diagnosis.gif\" HEIGHT=977 WIDTH=861></CENTER>\n\n<CENTER></CENTER>\n\n<CENTER><B>Figure 2</B>. Generated report from Loom analysis of a process\nredesign case</CENTER>\n\n\n<P><B><I><FONT FACE=\"Arial\">4.3 Simulation Approach and Results</FONT></I></B>\n\n<P>Questions pertaining to simulated process throughput performance or\nuser workloads before/after process redesign can already be addressed by\nprocess simulation tools and techniques [P98, S99]. No significant advances\nare required for this. Similarly, knowledge-based simulation capabilities\ncan be employed to determine process performance improvements when multiple\nredesign heuristics are used to create alternative scenarios for software\nprocess enactment [cf. CJS94, S99]. Nonetheless, the challenge of how to\nsupport the transformation of as-is software processes into to-be redesigned\nalternatives is not addressed by existing process simulation approaches;\nthus a new direction is required.\n\n<P>One key requirement for managing the organizational transformation to\na redesigned software process is the engagement, motivation and empowerment\nof process users. The goal is to enable these users to direct and control\nprocess redesign efforts, as well as to select the process redesign alternatives\nfor implementation and enactment. As the direct use of available simulation\npackages may present an obstacle to many process users, another means to\nsupport process management and change management is needed.\n\n<P>The approach we choose was to engage a process user community in a multi-site\norganizational setting and partner with them in redesigning their software\nuse processes [SN97]. In particular, we developed, provided and demonstrated\na prototype wide-area process walkthrough simulator that would enable the\nprocess redesign participants with a means to model, redesign and walkthrough\nprocesses that span multiple settings accessed over the Internet. With\nthis environment, 10 process redesign heuristics were found applicable,\nwhile the process users chose 9 to implement [SN97]. In so doing, they\neventually achieved a factor of 10X in cycle time reduction, and reductions\nin the number of process steps between 2-1 and 10-1 in the software use\nprocesses that were redesigned [SN97]. A process simulator played a central\nrole in the redesign, demonstration and prototyping of these processes.\nHow was this realized?\n<CENTER></CENTER>\n\n<CENTER><IMG SRC=\"process-figure.gif\" HEIGHT=247 WIDTH=607></CENTER>\n\n<CENTER></CENTER>\n\n<CENTER><FONT FACE=\"Arial\">4.3.1 A Process Simulator Example</FONT></CENTER>\n\n\n<P><I>Process prototyping </I>is a computer-supported technique for enabling\nsoftware process models to be enacted without integrating the tools and\nartifacts required by the modeled process [SM97]. It allows process users\nthe ability to interactively observe and browse a process model, step by\nstep, across all levels of process decomposition modeled, using a common\nWeb browser as its graphic user interface. Creating a basic process execution\nrun-time environment entails taking a prototyped process model and integrating\nthe tools as helper applications that manipulate process task artifacts\nattached to (manually or automatically) generated Web/intranet hyperlinks\n(URLs) [NS99]. Consider the following example of a simple software development\nprocess displayed in Figure 3.\n\n<P><B>Figure 3</B>: A simple software development process depicted as a\ndirected graph\n\n<P>This process can be modeled in terms of the process flow (precedence\nrelations) and decomposition. It can also be attributed with user roles,\ntools and artifacts for each process step. Further, as suggested above,\nthe directed attributed graph that constitutes the internal representation\nof the process can be viewed and browsed as a hyperlinked structure that\ncan be navigated with a Web browser. The resulting capability allows process\nusers the ability to traverse or walkthrough the modeled process, task\nby task, according to the modeled process's control flow. This in turn\nrealizes a Web-based or intranet-based process simulator system. Figure\n4 provides a view of a set of artifacts that might be associated with the\nprocess in Figure 3. Figure 5 provides a similar view of a selected task\n(\"edit\"), tool (the Emacs editor), and artifact (loaded in the Emacs edit\nbuffer) associated with a user role as a \"developer\" (not shown). In addition,\nthe lower right frame in Figure 5 displays a record of the history of process\ntask events that have transpired so far.\n<CENTER></CENTER>\n\n<CENTER><IMG SRC=\"Product-Directory.gif\" HEIGHT=560 WIDTH=718></CENTER>\n\n<CENTER></CENTER>\n\n<CENTER><B>Figure 4</B>: A set of artifacts associated with the software\nprocess in Figure 3.</CENTER>\n\n\n<P>Using this process prototyping technology, we could work with process\nusers to iteratively and incrementally model their as-is or to-be processes.\nSubsequently, modeled processes could then be interactively traversed using\na Web browser interface to the resulting process simulator. Process users,\nindependent of the time or location of their access to the process model,\ncould then provide feedback, refinement or evaluation of what they saw\nin the Web-based process simulator.\n\n<P>Simulators are successful in helping process users to learn about the\noperational sequences of problem-solving tasks that constitute a software\nprocess [cf. KG95, GG+97]. Flight simulators have already demonstrated\nthis same result many times over with flight operations process users (aircraft\npilots). Process walkthrough simulators can identify potential patterns\nof software process user behavior, as well as potential performance or\nworkflow bottlenecks in their use. This information in turn can help to\nidentify parameter values for a discrete-event simulation of the same process.\nHowever, this has not yet been attempted.\n<CENTER></CENTER>\n\n<CENTER><IMG SRC=\"main.c.gif\" HEIGHT=561 WIDTH=715></CENTER>\n\n<CENTER></CENTER>\n\n<CENTER><B>Figure 5</B>: A software process enactment step presented in\na process simulator</CENTER>\n\n\n<P>Overall, discrete-event and knowledge-based simulation systems, together\nwith process walkthrough simulators, constitute a learning, knowledge sharing,\nmeasurement and experimentation environment that can support and empower\nprocess users when redesigning their software processes [cf. BMR94, KG95,\nGG+97]. Therefore, these process simulation capabilities, together with\nother organizational change management techniques, should help minimize\nthe risk of failure when redesigning software processes used in complex\norganizational settings.\n\n<P><B><FONT FACE=\"Arial\">5. Discussion</FONT></B>\n\n<P>Given the introduction to the subject of SPR, explanation of what it\nis, explanation of how software process modeling, analysis and simulation\nfit it, and demonstrated how it can operate through examples, there is\nstill more work to be done. Thus, the purpose of this discussion is to\nidentify some of the future needs that have become apparent from this investigation.\n\n<P>First, whether dealing with a real software process in a real-world\nsetting, or when browsing one found on the Web, capturing, formalizing\nor otherwise modeling as-is processes is cumbersome. Part of the problem\nat hand is that most organizations lack explicit, well-defined or well-managed\nprocesses as the starting point for an SPR effort. Consequently, attention\nis often directed to focus only on creation of to-be alternatives, without\nestablishing an as-is baseline. Without a baseline, SPR efforts will increase\ntheir likelihood of failure [BMR94, DS90, GK95, HRW93]. Thus, there is\nneed for new ways and means for the rapid capture and codification of as-is\nsoftware processes to facilitate SPR.\n\n<P>Second, there is need for rapid generation of to-be and here-to-there\nprocesses and models. SPR heuristics, as well as the tools and techniques\nfor acquiring and applying them appear to have significant face value.\nThey can help to more rapidly produce to-be process alternatives. However,\nknowledge for how to construct or enact the here-to-there transformation\nprocess in a way that incorporates change management techniques and process\nmanagement tools is an open problem. Further study is needed here.\n\n<P>Third, SPR heuristics or transformation taxonomies may serve as a foundation\nfor developing a theoretical framework for how to best represent SPR knowledge.\nSimilarly, such a framework should stipulate what kinds of software process\nconcepts, links and instances should be represented, modeled and analyzed\nto facilitate SPR. Nonetheless, there is also a practical need to design\nand tailor SPR taxonomies to specific software process domains and organizational\nsettings. At this point, it is unclear whether heuristics for redesigning\nsoftware use processes are equally applicable to software acquisition,\ndevelopment or evolution processes. The same can be said for any other\ncombination of these types of software processes.\n\n<P>Fourth, in the preceding section, software tools supporting the modeling,\nanalysis and simulation of software processes for redesign were introduced.\nHowever, these tools were not developed from the start as a single, integrated\nenvironment. Thus their capabilities can be demonstrated to help elucidate\nwhat is possible. But what is possible is not practical for widespread\ndeployment or production usage. Thus, there is a need for new environments\nthat support the modeling, analysis and simulation of software processes\nthat can be redesigned, life cycle engineered [SM97], and continuously\nimproved from knowledge automatically captured from the Web.\n\n<P>Last, as highlighted in the results from BPR research studies, and from\nfirst-hand experience [SN97], process users need to be involved in redesigning\ntheir own processes. Accordingly, the temptation to seek fully automated\napproaches to generating alternative to-be process designs from the analysis\nof an as-is process model must be mitigated. The question here is to understand\nwhen or if fully automated SPR is desirable, and in what kinds of organizational\nsettings. For example, there can be SPR situations where automated redesign\nmay not be a suitable goal or outcome. This is in organizational settings\nwhere process users seek empowerment and involvement in redesigning and\ncontrolling their process structures and workflow. In settings such as\nthese, the ability to access, search/query, select and evaluate possible\nprocess redesign alternatives through a through the system capabilities\ndescribed above may be more desirable [cf. SN97]. Thus the ultimate purpose\nof support environment for SPR may be in <I>supporting</I> <I>and empowering</I>\nprocess users to direct the redesign of their processes, rather than in\nautomating SPR.\n\n<P>Beyond this, one of the goals of SPR should be to minimize the risk\nof a failed SPR effort. Solutions that focus exclusively on development\ntechnology-driven or technology-only approaches to SPR seemed doomed to\nfail. Thus, there remains a challenge for those that choose the technology\npath to SPR to effectively demonstrate how such an approach can succeed,\nin what kinds of organizational settings, and with what kinds of skilled\nprocess participants.\n\n<P><B><FONT FACE=\"Arial\"><FONT SIZE=+1>6. Conclusions</FONT></FONT></B>\n\n<P>This paper addresses three research questions that identify and describe\nwhat software process redesign is, how software process modeling and simulation\nfit in, and what an approach to SPR might look like. SPR is proposed as\na technique for achieving radical, order-of-magnitude improvements or reductions\nin software process attributes. SPR builds on empirical and theoretical\nresults in the area of business process reengineering. However, it also\nbuilds on knowledge that can be gathered from the Web. Though the quality\nof such knowledge is more variable, the sources from which it is derived--experience\nreports, case studies, lessons learned, best practices and similar narratives--can\nbe formally represented, hyperlinked and browsed during subsequent use\nor reuse. A central result from the knowledge collected so far is that\nSPR must combine its focus to both techniques for changing the organization\nwhere software processes are to be redesigned, as well as for identifying\nhow software engineering and information technology-based process management\ntools and concepts can be applied.\n\n<P>Software process modeling, analysis, and simulation technology can be\nsuccessfully employed to support SPR. In particular, knowledge-based tools,\ntechniques and concepts appear to offer a promising avenue for exploration\nand application in this regard. However, new process modeling, analysis\nand simulation challenges have been also identified. These give rise to\nthe need to investigate new tools and techniques for capturing, representing\nand utilizing new forms of process knowledge. Knowledge such as SPR heuristics\ncan play a central role in rapidly identifying process redesign alternatives.\nSoftware process simulation techniques in particular may require support\nfor person-driven process simulations, which enable process users to observe,\nwalk-through or fly-through process redesign alternatives. Finally, software\nprocess modeling, analysis and simulation capabilities that support SPR\nactivities, may be deployed so as to engage and facilitate the needs of\nusers who share processes across multiple organizational settings, using\nmechanisms that can be deployed on the Web.\n\n<P>Last, an approach to SPR that utilizes Web-based tools for software\nprocess modeling, analysis, and person-driven simulation has been presented.\nInitial experiences in using these tools, together with the business process\nreengineering and change management techniques they embody, indicates that\nthe objective of order-of-magnitude reductions in software process cycle\ntime and process steps can be demonstrated and achieved in complex organizational\nsettings. Whether results such as these can be replicated in all classes\nof software processes--acquisition, development, usage, and evolution--remains\nthe subject of further investigation. Similarly, other research problems\nhave been identified for how or where advances in software process modeling\nand simulation can lead to further experimental studies and theoretical\ndevelopments in the art and practice of software process redesign.\n\n<P>&nbsp;\n\n<P><B><FONT FACE=\"Arial\">Acknowledgements</FONT></B>\n\n<P>The research described in this paper benefit from collaborations with\nthe following people. Andre Valente at the USC Information Sciences Institute\ndeveloped the modeling and analysis system prototype with Loom and Ontosaurus\ndisplayed in Figures 1 and 2. John Noll, now at the Computer Science Dept.,\nUniversity of Colorado at Denver, developed the modeling and process simulation\nwalkthrough intranet shown in Figures 4 and 5. The process measurement\ntechnique and rule-based formulation used for automated process redesign\nanalysis was first developed by Mark Nissen, now at the Systems Management\nDept., Naval Postgraduate School, Monterey, CA. All of these contributions\nare gratefully acknowledged.\n\n<P><B><FONT FACE=\"Arial\">References</FONT></B>\n\n<P>[APL95] J.D. Ahrens, N. Prywes and E. Lock. Software Process Reengineering:\nToward a New Generation of CASE Technology, <I>J. Systems and Software</I>,\n30(1):71-84, 1995.\n\n<P><B>[</B>BMR94<B>]</B> B.J. Bashein, M.L. Markus and P. Riley. Preconditions\nfor BPR Success: And How to Prevent Failures. <I>Information Systems Management</I>,\n11(2):7-13, Spring 1994.\n\n<P><B>[</B>CJS94<B>]</B> J.R. Caron, S.L. Jarvenpaa and D.B. Stoddard.\nBusiness Reengineering at CIGNA Corporation: Experiences and Lessons Learned\nFrom the First Five Years<I>. MIS Quarterly</I>, 18(3):233-250, September,\n1994.\n\n<P>[DP98]<B> </B>T.H. Davenport and L. Prusak. <I>Working Knowledge: How\nOrganizations Manage What They Know</I>. Harvard Business School Press,\nBoston, MA, 1998.\n\n<P>[DS90] T.H. Davenport and J.E. Short. The New Industrial Engineering:\nInformation Technology and Business Process Redesign. <I>Sloan Management\nReview</I>, 34(4):1-27, 1990.\n\n<P>[ESS95] M.J. Earl, J.L. Sampler, and J.E. Short. Strategies for Business\nProcess Reengineering: Evidence from Field Studies, <I>J. Management Information\nSystems</I>, 12(1):31-56, 1995.\n\n<P>[GJ+95] V. Grover, S.R. Jeong, W.J. Kettinger and S. Wang. The Implementation\nof Business Process Reengineering. <I>J. Management Information Systems</I>,\n12(1):104-144. 1995.<B></B>\n\n<P>[GG+97] S. Guha, V. Grover, W.J. Kittenger and J.T.C. Teng. Business\nProcess Change and Organizational Performance: Exploring an Antecedent\nModel. <I>J. Management Information Systems</I>, 14(1):119-154, 1997.\n\n<P>[HRW93] G. Hall, J. Rosenthal and J. Wade. How to Make Reengineering\nReally Work. <I>Harvard Business Review</I>, 119-131, November-December\n1993.\n\n<P>[H90] M. Hammer. Reengineering Work: Don't Automate, Obliterate. <I>Harvard\nBusiness Review</I>. 68(4):104-112, July-August 1990.\n\n<P>[JW+97] B.D. Janz, J.C. Wetherbe, G.B. Davis, R.A. Noe. Reengineering\nthe Systems Development Process: The Link between Autonomous Teams and\nBusiness Process Outcomes, <I>J. Management Information Systems</I>, 14(1):\n41-68, 1997.\n\n<P>[KG95] W.J. Kettinger and V. Grover. Special Section: Toward a Theory\nof Business Process Change Management, <I>J. Management Information Systems</I>,\n12(1):9-30, 1995.\n\n<P>[KS82] R. Kling and W. Scacchi. The Web of Computing: Computer Technology\nas Social Organization. in A. Yovits (ed.), <I>Advances in Computers</I>,\n21:3-90, 1982.\n\n<P>[KS96] S. Ku, Y.-H. Suh, and G. Tecuci. Building an Intelligent Business\nProcess Reengineering System: A Case-Based Approach. <I>Intelligent Systems\nin Accounting, Finance, and Management</I>, 5(1):25-39, 1996.\n\n<P>[MB95] R. MacGregor and R. Bates, Inside the Loom description classifier.\n<I>SIGART Bulletin </I>2(3):88-92, 1995.\n\n<P>[MS90] P. Mi and W. Scacchi. A Knowledge-based Environment for Modeling\nand Simulating Software Engineering Processes, <I>IEEE Trans. Knowledge\nand Data Engineering</I>, 2(3): 283-294, 1990. Also appears in <I>Nikkei\nArtificial Intelligence</I>, 20(1): 176-191, 1991 (in Japanese).\n\n<P>[MS96] P. Mi and W. Scacchi. A Meta-Model for Formulating Knowledge-Based\nModels of Software Development. <I>Decision Support Systems</I>, 17(3):313-330.\n1996.\n\n<P>[N97] M.E. Nissen. Reengineering the RFP Process through Knowledge-Based\nSystems. <I>Acquisition Review Quarterly</I>, 4(1):87-100, 1997.\n\n<P>[N98] M.E. Nissen. Redesigning Reengineering through Measurement-Driven\nInference<I>. MIS Quarterly</I>, 22(4): 509-534, December, 1998.\n\n<P><A NAME=\"NS97a\"></A><A NAME=\"NS91\"></A><A NAME=\"Ni96\"></A>[NS99] J.\nNoll and W. Scacchi. Supporting Software Development Projects in Virtual\nEnterprises. <I>Journal of Digital Information</I>, 1(4), February 1999.\n\n<P>[O98] D.E. O'Leary. Enterprise Knowledge Management. <I>Computer</I>,\n31(3):54-61, 1998.\n\n<P>[ON99] Ontosaurus Web Browser home page. http://www.isi.edu/isd/ontosaurus.html\n\n<P>[P98] <I>Proceedings ProSim'98 Workshop on Software Process Simulation\nModeling</I>, Silver Falls, OR, June 1998.\n\n<P>[S98] W. Scacchi. Modeling, Simulating, and Enacting Complex Organizational\nProcesses: A Life Cycle Approach, in M. Prietula, K. Carley, and L. Gasser\n(eds.), <I>Simulating Organizations: Computational Models of Institutions\nand Groups</I>, AAAI Press/MIT Press, Menlo Park, CA, 153-168, (1998).\n\n<P>[S99] W. Scacchi. Experiences with Software Process Simulation and Modeling,\n<I>J. Systems and Software</I>, 46(2): 183-192, 1999.\n\n<P>[SB98] W. Scacchi and B.E. Boehm. Virtual System Acquisition: Approach\nand Transitions, <I>Acquisition Review Quarterly</I>, 5(2):185-216, Spring\n1998.\n\n<P>[SM97] W. Scacchi and P. Mi. Process Life Cycle Engineering: A Knowledge-Based\nApproach and Environment. <I>Intelligent Systems in Accounting, Finance,\nand Management</I>, 6:83-107, 1997.\n\n<P>[SN97] W. Scacchi and J. Noll, Process-Driven Intranets: Life Cycle\nSupport for Process Reengineering, <I>IEEE Internet Computing</I>, 1(5):42-49,\nSeptember 1997.\n\n<P>[SN97a] S.K. Sia and B.S. Neo. Reengineering Effectiveness and the Redesign\nof Organizational Control: A Case Study of the Inland Revenue Authority\nof Singapore.<I> J. Management Information Systems</I>, 14(1):69-92, Spring\n1997.\n\n<P>[VR+99] A. Valente, T. Russ, R. MacGregor, and W. Swartout. Building\nand (Re)Using an Ontology for Air Campaign Planning. <I>IEEE Intelligent\nSystems</I>, 14(1):27-36, 1999.\n\n<P>[VS99] A. Valente and W. Scacchi. Developing a Knowledge Web for Business\nProcess Redesign, <I>IJCAI-99 Workshop on Workflow and Process Management</I>,\nAugust 1999.\n\n<P>[ZW98] M. Zelkowitz and D.R. Wallace. Experimental Models for Validating\nTechnology. <I>Computer</I>, 31(5), 23-3 1, May 1998.\n</BODY>\n</HTML>\n", "encoding": "ascii"}