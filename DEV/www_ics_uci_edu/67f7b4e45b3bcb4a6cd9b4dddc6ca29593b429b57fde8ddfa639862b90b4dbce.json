{"url": "https://www.ics.uci.edu/~thornton/inf43/CourseProject/Design/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course2.css\" type=\"text/css\" />\n\n<title>Informatics 43 Spring 2009, Course Project, Phase 2: Architectural and Module Design</title>\n\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nInformatics 43 Spring 2009 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../CourseProject\">Course Project</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>Informatics 43 Spring 2009<br />\n   Course Project<br />\n   Phase 2: Architectural and Module Design</p>\n\n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, May 8, 9:00pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Background</p>\n\n<p>Since delivering your requirements specification in the previous phase, additional negotiations have taken place between the project team and the customer.  During those negotiations, some aspects of the plans made previously have been changed (as they often do):</p>\n\n<ul>\n  <li>The project now has a name: <i>Triple P Enrollment System (TPES)</i>.</li>\n  <li>Some of the requirements have been revisited and clarified, yielding an <a href=\"../Informatics43-Spring2009-OfficialRequirements.pdf\">Official Requirements Specification</a>.  Please refer to this document for the remainder of this project; it supercedes the document you submitted in Phase 1.</li>\n</ul>\n\n<p>Now that the requirements specification has been completed, it is time to turn your attention to the system's design.  As we discussed in lecture, we can think of design as being comprised of two simultaneous activities:</p>\n\n<ul>\n  <li><i>Architectural design</i>, in which we decide on the major modules of our system and the ways that they will interact with one another.</li>\n  <li><i>Module design</i>, in which we consider the individual modules and their interactions in more detail, including breaking some of the major modules in our architectural design into smaller ones, deciding on the set of methods that will be provided by our modules, and understanding how these modules are related to one another.</li>\n</ul>\n\n<p>There is not necessarily an obvious line we can draw between architectural design and module design.  The former focuses on the \"big picture,\" the latter on the \"small picture,\" but it's not exactly clear where the division between the big and small pictures are.  It's also not as though we first do architectural design, then do module design; these activities complement one another and are best approached together.</p>\n\n<p>This phase of the course project requires you to produce a <i>design specification</i>, in which you'll describe aspects of a design for TPES.  It will give you the opportunity to explore architectural and module design, as well as provide you with experience using the Unified Modeling Language (UML) to describe aspects of your design.  In the next phase, you'll implement portions of your design, so it's to your advantage to think things through carefully in this phase; work spent now discovering a clean design will reduce the time you spend in the implementation.</p>\n\n<p>Software design is a complex topic that is learned as much by experience as anything else.  That said, there are principles that are nearly universal; good designs almost always follow certain guidelines, implicitly or explicitly.  Knowing these principles helps you to find a good design, especially when you're still gaining experience.  A few of these principles are:</p>\n\n<ul>\n  <li><i>Rigor</i>.  We want to be sure that all of our requirements are met; obviously, a necessary (but certainly not sufficient) condition of a good design for a project is one that addresses the system's requirements.</li>\n  <li><i>Information hiding</i>.  Modules hide design and implementation decisions.  Its important to point out that we don't mean \"hide\" in the sense that no one can find out about them &mdash; if you have the source code, you can discover these decisions.  The point is that other modules won't depend on these decisions, so that the decisions can be revisited without affecting the other modules.</li>\n  <li><i>Separation of concerns</i>.  Modules should each solve a single problem; they should be designed in a way that allows them to be written and tested independently.</li>\n  <li><i>High cohesion</i>.  The parts of a module are closely related to one another, instead of being a disparate collection of unrelated or loosely related parts.</li>\n  <li><i>Low coupling</i>.  Modules rely on each other as little as possible.</li>\n</ul>\n\n<p>You should bear these principles in mind as you work on your design.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Your design specification</p>\n\n<p>Your design specification should focus on the design of the <i>model</i> for TPES.  In other words, consider the data that the system stores and the operations that can be performed on that data, but avoid designing the details of the user interface.  Be sure that your design addresses all of the requirements that comprise Implementation Phase 1 in the <a href=\"../Informatics43-Spring2009-OfficialRequirements.pdf\">Official Requirements Specification</a>.</p>\n\n<p>Your design specification should be comprised of the following sections, in the order listed below.</p>\n\n<ul>\n  <li><b>Table of Contents</b>, including page numbers.</li>\n  <li><b>Introduction</b>.  Describe the architecture of your system at a high level.  Where you used the architectural styles we discussed in lecture or are described in Section 11.4 of the textbook, make a note of them.</li>\n  <li><b>UML Class Diagram</b>.  Draw a UML Class Diagram detailing the classes in your system and their relationships to one another.  Include only public attributes and methods.</li>\n  <li><b>Class Interface Specifications</b>.  For each class in your design, specify its interface, including at least the following information:\n    <ul>\n      <li>Which Official Requirements are addressed by this class?  (You do not need to describe the requirements; the identifier, such as <b>ES-1</b>, will do.)</li>\n      <li>What information/decisions does this class hide?</li>\n      <li>List its set of public methods and constructors, including their names, parameters, return types, and a brief (e.g., one sentence) description.</li>\n      <li>Anything else that will help us to understand the class, such as its parent in an inheritance hierarchy.</li>\n    </ul>\n  </li>\n  <li><b>Integration Test Plan.</b>  Choose two classes that are related to one another (in some way other than inheritance) and describe a plan for testing their integration with one another.  Your plan should be broken into test cases, with individual cases focused one one way that the two classes interact.  Specify what objects will participate in the test, how they will be set up before the test, the steps that will be taken in the test, and the expected results (e.g., return values of methods, changes to the objects' internal state).</li>\n</ul>\n\n<p>There are many software packages that are capable of producing UML Class Diagrams.  In the ICS labs, you'll find Microsoft Visio, which does a reasonably good job of it; you can then copy-and-paste your entire UML Class Diagram from Visio into a Microsoft Word document.  Essentially, anything is fine with us, as long as we understand it and as long as it can be included in your document; this includes drawing the diagram by hand (neatly enough for us to be able to read it), scanning it, and copying it into your document.</p>\n\n<p>Assume that your design will be implemented in Java.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>You are required to deliver your design specification as a single document in one of the following formats: Microsoft Word (.doc or .docx), Rich Text Format (.rtf), or PDF (.pdf).</p>\n\n<p>Follow <a href=\"../SubmittingPhases.html\">this link</a> for a discussion of how to submit files via Checkmate, an ICS-built online assignment submission system.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the specification that you want graded.  We won't regrade your work simply because you submitted the wrong version accidentally.</p>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Originally written by Alex Thornton, Spring 2009, with some influence from Dan Frost.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}