{"url": "https://www.ics.uci.edu/~redmiles/ics125-WQ00/assignments/assignment2.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html>\n\n<head>\n<title>untitled</title>\n<meta HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html;CHARSET=iso-8859-1\">\n<meta NAME=\"GENERATOR\" CONTENT=\"Microsoft FrontPage 3.0\">\n</head>\n\n<body>\n\n<table BORDER=\"2\" CELLPADDING=\"2\" WIDTH=\"100%\" BGCOLOR=\"#CCCCCC\">\n  <tr>\n    <td><h1>UC IRVINE - ICS 125 PROJECT IN SYSTEM DESIGN</h1>\n    <h1>Assignment 2: Requirements </h1>\n    </td>\n  </tr>\n</table>\n\n<hr ALIGN=\"CENTER\">\n\n<h3>Due in class on Feb 1 with Presetations Feb 1, 2, 3</h3>\n\n<h4>Assignment Requirements</h4>\n\n<p>This assignment consists of two parts: 1) a requirements document\nand 2) an in-class presentation. The content of the document is\noutlined below. Make it look professional but be practical (don't\nwaste time). Requirements documents should be clear, complete,\ncorrect, and concise. Grading will be based on the content and quality\nof the requirements document and the oral presentation. The content of\nthe oral presentation is outlined at the end of this\npage.</p>\n\n<p>Note: Requirements specification documents and oral presentations will\nvary from project to project, and team to team. Use your judgement in\nselecting the beset approach for your project and team.</p>\n\n<h4>Purpose and Content</h4>\n\n<p>Requirements documents serve many purposes. They specifiy the goals and scope of the\nproject. In some cases, they are like a contract between the customer and the developers.\nThey are the basis for testing. And in this project, the requirements document will also\noutline a development schedule.</p>\n\n<p>A good requirements document desribes what the system will do, in a clear and\nunambiguous way. This can be achieved through careful wording, screen mock-ups or other\ngraphics, and requirements analysis diagrams. A good requirements document can be used to\nanswer questions such as: Is the system supposed to do X or not? How will the system\nhandle it if the user does Y? Who will use the system and for what purposes? Under what\nenvironments (machine type, operation system, etc.) will the system work?</p>\n\n<p>The requirements document will consist of<br>\n\n<ol>\n  <li><b>Title Page</b>. </li>\n  <ul>\n    <li>names of team members </li>\n    <li>date </li>\n    <li>assignment name </li>\n    <li>project name, nickname, logo </li>\n    <li>version number (use version 1.0 when you hand in the document) </li>\n  </ul>\n  <li><b>Summary</b>. A two page summary of the project: </li>\n  <ul>\n    <li>Who's the customer? </li>\n    <li>What's the project about? </li>\n    <li>What are major functional and non-functional requirements? </li>\n    <li>What is anticipated as an acceptance test? </li>\n    <li>What are your target implementation platforms? </li>\n    <li>Consider using a hierarchical organization: first a one paragraph overview emphasizing\n      goals, then more details in the following paragraphs. </li>\n    <li>Remember that the customer is going to read this. The customer's boss might read it too.\n      Be clear and to-the-point. Avoid jargon. Avoid hype. Double-check spelling and grammar. </li>\n  </ul>\n  <li><b>Glossary</b>.</li>\n  <ul>\n    <li>Define any unusual words or unusual usage of common words, e.g., application domain terms.</li>\n  </ul>\n  <li><b>Use Cases, Scenarios, Mock-up's</b>. </li>\n  <ul>\n    <li>You may choose the best way to clarify and specify your systems funtionality. I suggest Mock-up's and Scenarios followed by an text outline of requirements. You may wish to specify Use Cases as you did in ICS 121.</li>\n    <li>Some of you may choose diagrammatic presentations for complex functionality. You may use Sequence Diagrams, Activity Diagrams, etc.</li>\n    <LI>Some of you working on database functionality may choose to use entity relationship diagrams or another way to specify record designs.</li>\n  </ul>\n  <li><b>Deliverables</b>. What are you going to give to the customer? (include the items that\n    apply) </li>\n  <ul>\n    <li>Software: Executables? In what format/media? </li>\n    <li>Dococumentation: User's manual? On-line help? Web site? What will be in these documents?\n    </li>\n    <li>Development artifacts: Source code? Design docs?<b> </b>Test cases? </li>\n    <li>Supporting<b> </b>artifacts: Example documents? Templates? </li>\n    <li>Support: Warranty? Rights to bug fixes? Rights to request improvement? <br>\n    </li>\n  </ul>\n  <li><b>Delivery Platform</b>. What hardware/software/database/etc. will be needed to run the\n    system? This is usually specified by your client. </li>\n  <li><b>Development Platform.</b> What<b> </b>hardware/software/database/etc. will you need\n    to develop the system? This is usually decided by you. </li>\n  <li><b>Milestones and Effort</b>. A sequence of milestones. For each milestone: </li>\n  <ul>\n    <li>What requirements (functional or non-) are addressed. </li>\n    <li>What will be accomplished. </li>\n    <li>Date anticipated (remember there will be updates during weeks 6,7, and 8). </li>\n    <li>Estimate of your effort and cost (state assumptions, e.g., cost of man hours). </li>\n  </ul>\n  <li><b>Acceptance Test Plan</b>. Be specific as possible. If you have specific data sets\n    from your client, describe or include them. </li>\n  <li><b>Terms and Authorization</b>. Who will own the software when it is done? Who has to\n    sign before you can start billing time? </li>\n  <li><b> Conclusion</b>. What will your team members gain as\nindividuals and your\nteam gain as a whole by doing this project? Perhaps\nyou will talk about new\nskills? Tangibles? Intangibles?\n     </li>\n</ol>\n\n<h4>Comments</h4>\n\n<p>Projects often begin vaguely. Clients do not have complete ideas about the work that\nshould be done. They may not fully anticipate their needs. A requirements document starts\nto sort out the details and make them more clear for both you and the client. </p>\n\n<p>Ideally, you will write the requirements in their &quot;final&quot; form. In reality,\nthe requirements will be revised over time as you and the client learn more about the\nproject. Emphasize clarity of intent and scope over very detailed specification of\nparticular features. Try to meet with the customer to review and revise the document, if\npossible.</p>\n\n<p>Try to use document formatting that enhances clarity and will be maintainable. Use\nnumbered lists when order is important, bulleted list for unordered items. Use tables when\nthere are lots of items (rows) that must have similar parts (columns), or when computing\ntotals. Use mathematical notation, not English, to specify mathematical relationships. Use\ndigarams or pictures to specify visual or spacial requirements.Make sure you can\nunambiguously refer to a specific part of the requirements document: for example, the\ncustomer might ask you if a certain requirement is satisfied yet, you want to be sure that\nyou are both talking about the same requirement.</p>\n\n<p>Grade yourself by using your document to answer these questions: What would it be like\nto use this system? What and how much can a user do with the system? If the customer is\nunhappy with the resulting system, can you confidently say &quot;That is what you\nauthorized when you signed the requirements document&quot;? Would two people who read the\nsame requirements document imagine the same system?</p>\n\n<p>There are certain sections of the document where you need to write very precise English\ntext. Ask yourself how each sentence could be misunderstood. Avoid words with vauge\nmeanings or double meanings. Use specific amounts instead of vauge terms when possible.\nInclude units in any measurements. Ask one of your team members to come up with a\nmisinterpretation of what you wrote.</p>\n\n<p><br>\n</p>\n\n<hr>\n<h3>Requirements Presentations/Reviews.</h3>\nDates: Feb 1,2,3\n\n<P>Each team should prepare a 15 minute presentation, after which we will\nallow up to 5 minutes of questions. Your customer should be present.&nbsp;\n\n<p>\nPrepare your presentation appropriately. Your presentation should include\nthe following:\n<UL>\n<li> Title Slide (with team name, members, emails, date, etc</li>\n<LI> Overview of your system (breif summary statement)</LI>\n<LI> Highlights of your requirements specification including</LI>\n   <UL>\n   <li> Use Cases, Mock-up's, Scenarios, to communicate functionality</li>\n   <LI> Summary of required capabilities, with a diagram if available;</LI>\n      <BR>one or more detailed requirements for the most important capabilities\n      <BR>(pick the key issues to discuss in detail);\n   </UL>\n<LI>Deliverables</li>\n<LI>Delivery Platform, Development Platform</li>\n<LI> Lifecycle considerations</LI>\n<ul><li>Current state of your project milestones with dates, noting potential exporsures/risks</LI></ul>\n<BR>(how you intend to develop the system throughout the lifecycle);\n<LI> System test plan</LI>\n<BR>how you intend to both demonstrate that the system should be accepted\nas well as how you intend to convince yourselves that it is more than acceptable!).\n<LI>Technology Transfer, Maintenance, Other Considerations</li>\n</UL>\n\n<p>  Be <em> sure </em> to focus your presentation on the key issues.  Don't\nspend time with the obvious things.  If there's something in your presentation\nthat you find boring, so will your audience.  Don't gloss over problems. Your\ncustomer wants you to succeed, your instructors want you to succeed.   They can't\nhelp you unless you tell them where you think the problems are, or are likely to\nbe.\n\n<p>\nYou should also ask your customer what he would like to see presented.\n\n<p>\n<hr ALIGN=\"CENTER\">\n\n<p><a HREF=\"assignments.html\">ICS125 WQ00 Assignments<br>\n</a><a HREF=\"../ics125.html\">ICS125 WQ00<br>\n</a><a HREF=\"http://www.ics.uci.edu/~redmiles\">David F. Redmiles Home Page<br>\n</a><a HREF=\"http://www.ics.uci.edu/\">Department of Information and Computer Science<br>\n</a><a HREF=\"http://www.uci.edu/\">University of California, Irvine CA 92717-3425</a></p>\n\n<p><font SIZE=\"-1\"><script LANGUAGE=\"JavaScript\"><!--//begin script\n document.write(\"(Last Modified: \"+document.lastModified+\")\");\n// end script --></script></font></p>\n</body>\n</html>\n", "encoding": "ascii"}