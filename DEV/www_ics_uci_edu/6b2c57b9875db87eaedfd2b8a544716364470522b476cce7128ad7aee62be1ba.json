{"url": "https://www.ics.uci.edu/~ejw/authoring/collection/dt/CollSpec025.txt", "content": "WEBDAV Working Group                                     J. Slein, Xerox\nINTERNET DRAFT                                           J. Davis, Xerox\n<draft-ietf-webdav-collection-protocol-02.5>     T. Chihaya, DataChannel\n                                                      G. Clemm, Rational\n                                                         C. Fay, FileNet\n                                           E.J. Whitehead Jr., UC Irvine\n                                                      A. Babich, FileNet\n                                                       February 12, 1999\nExpires August 12, 1999\n\n\t\t\tWebDAV Advanced Collections Protocol\n\nStatus of this Memo\n\nThis document is an Internet-Draft and is in full conformance with all \nprovisions of Section 10 of RFC2026. Internet-Drafts are working \ndocuments of the Internet Engineering Task Force (IETF), its areas, and \nits working groups. Note that other groups may also distribute working \ndocuments as Internet-Drafts.\n\nInternet-Drafts are draft documents valid for a maximum of six months \nand may be updated, replaced, or obsoleted by other documents at any \ntime. It is inappropriate to use Internet-Drafts as reference material \nor to cite them other than as \"work in progress\".\n\nTo view the list Internet-Draft Shadow Directories, see \nhttp://www.ietf.org/shadow.html.\n\nDistribution of this document is unlimited. Please send comments to the \nDistributed Authoring and Versioning (WebDAV) working group at <w3c-\ndist-auth@w3.org>, which may be joined by sending a message with subject \n\"subscribe\" to <w3c-dist-auth-request@w3.org>.\n\nDiscussions of the WEBDAV working group are archived at URL: \n<http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth>.\n\nAbstract\n\nThe base WebDAV protocol [WebDAV] provides basic support for \ncollections.  It defines a MKCOL method for creating collections and \nspecifies how other HTTP and WebDAV methods interact with collections.  \nIt supports internal members of collections, which it defines as URIs \nthat are immediately relative to the URI of the collection.\n\nMany applications, however, need more powerful collections.  There are \ntwo areas in particular where more powerful functionality is often \nneeded: referential resources and ordering.\n\nThis draft specifies extensions to the base WebDAV protocol to support \nthese more powerful collections.\n\nTable of Contents\n\n1\tNotational Conventions\t3\n2\tTerminology\t3\n3\tIntroduction\t4\n4\tReferential Resources\t5\n\nSlein et al.                                                     Page 1\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n4.1\tScope\t5\n4.2\tOverview\t6\n4.3\tCreating Referential Resources\t7\n4.3.1\tThe MKREF Method\t7\n4.3.2\tStatus Codes\t8\n4.3.3\tExample\t9\n4.4\tDeleting, Copying, and Moving Referential Resources\t9\n4.5\tListing Referential Members of a Collection\t9\n4.6\tLocking Referential Resources\t15\n4.7\tOther WebDAV Operations on Redirect Referential Resources 16\n4.8\tOther WebDAV Operations on Direct Referential Resources\t16\n4.9\tHTTP Operations on Redirect Referential Resources\t17\n4.10\tHTTP Operations on Direct Referential Resources\t18\n4.11\tOperations on Targets of Referential Resources\t18\n4.12\tDiscovering a Target\u2019s References\t19\n4.13\tBehavior of Dangling Direct References\t19\n4.14\tChains of Direct References\t21\n4.15\tURIs and References\t22\n4.16\tSummary of Referencing Headers Required in Responses\t22\n5\tOrdered Collections\t23\n5.1\tOverview\t24\n5.2\tCreating an Ordered Collection\t24\n5.2.1\tOverview\t24\n5.2.2\tStatus Codes\t25\n5.2.3\tExample\t25\n5.3\tSetting the Position of a Collection Member\t25\n5.3.1\tOverview\t25\n5.3.2\tStatus Codes\t25\n5.3.3\tExamples\t26\n5.4\tChanging the Semantics of a Collection Ordering\t26\n5.5\tChanging the Position of a Collection Member\t26\n5.5.1\tThe ORDERPATCH Method\t26\n5.5.2\tStatus Codes\t27\n5.5.3\tExample\t27\n5.5.4\tDesign Rationale\t28\n6\tNew Headers\t29\n6.1\tRef-Target Entity Header\t29\n6.2\tRef-Type Entity Header\t29\n6.3\tRef-Integrity Request Header\t30\n6.4\tNo-Passthrough Request Header\t30\n6.5\tOrdered Entity Header\t31\n6.6\tPosition Request Header\t31\n7\tNew Properties\t32\n7.1\treftarget Property\t32\n7.2\trefintegrity Property\t32\n7.3\treftype Property\t32\n7.4\treferences Property\t32\n7.5\torderingtype Property\t33\n8\tNew XML Elements\t33\n8.1\treference XML Element\t33\n8.2\tdirect XML Element\t33\n8.3\tredirect XML Element\t33\n8.4\tweak XML Element\t34\n8.5\tlocation XML Element\t34\n8.6\tunordered XML Element\t34\n\nSlein et al.                                                     Page 2\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n8.7\tcustom XML Element\t34\n8.8\torder XML Element\t34\n8.9\tordermember XML Element\t35\n8.10\tposition XML Element\t35\n8.11\tfirst XML Element\t35\n8.12\tlast XML Element\t35\n8.13\tbefore XML Element\t36\n8.14\tafter XML Element\t36\n9\tExtensions to the DAV:multistatus XML Element\t36\n10\tCapability Discovery\t36\n10.1\tUsing OPTIONS\t36\n10.2\tExample\t37\n11\tDependencies on Other Specifications\t37\n12\tSecurity Considerations\t37\n12.1\tPrivacy Concerns\t38\n12.2\tRedirect Loops\t38\n12.3\tReferences and Denial of Service\t38\n12.4\tReferences May Reveal Private Locations\t38\n12.5\tDAV:references and Denial of Service\t39\n12.6\tDAV:references and Malicious Deletion of Resources\t39\n12.7\tDenial of Service and DAV:orderingtype\t39\n13\tInternationalization Considerations\t39\n14\tIANA Considerations\t40\n15\tCopyright\t40\n16\tIntellectual Property\t40\n17\tAcknowledgements\t40\n18\tReferences\t40\n19\tAuthors' Addresses\t41\n20\tAppendices\t41\n20.1\tAppendix 1 - Extensions to the WebDAV Document Type Definition42\n\n1 Notational Conventions\n\nSince this document describes a set of extensions to the HTTP/1.1 \nprotocol, the augmented BNF used here to describe protocol elements is \nexactly the same as described in Section 2.1 of [HTTP].  Since this \naugmented BNF uses the basic production rules provided in Section 2.2 of \n[HTTP], these rules apply to this document as well.\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \n\"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this \ndocument are to be interpreted as described in [RFC2119].\n\n2 Terminology\n\nThe terminology used here follows and extends that in the base WebDAV \nprotocol specification [WebDAV].\n\nCollection\n     A resource that contains a set of URIs, termed member URIs, which \n     identify member resources\n\nMember URI\n     A URI which is a member of the set of URIs contained by a \n     collection\n\nSlein et al.                                                     Page 3\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\nReferential Resource (or Reference)\n     A resource that has no body of its own (though it does have \n     properties), but rather is a reference to another resource\n\nOrdinary Resource\n     A resource that is not a reference to another resource\n\nTarget Resource\n     The resource referenced by a referential resource\n\nDirect Reference\n     A reference that is resolved by the server without any client \n     action, giving the client the illusion that it is operating \n     directly on the target resource\n\nRedirect Reference\n     A reference that requires client action before it can be resolved, \n     so that the client is aware that a reference is mediating between \n     it and the target resource\n\nStrong Reference\n     A reference whose referential integrity is enforced by the server\n\nWeak Reference\n     A reference whose referential integrity is not enforced by the \n     server\n\nReferential Integrity\n     The integrity of a reference is preserved as long as it points to \n     the same resource it pointed to when it was created.  Its \n     integrity may be destroyed if the target resource is moved without \n     updating the reference to reflect its new location, or if the \n     target resource is deleted.\n\n3 Introduction\n\nThe simple collections that the base WebDAV specification supports are \npowerful enough to be widely useful.  They provide for the hierarchical \norganization of resources, with mechanisms for creating and deleting \ncollections, copying and moving them, locking them, adding members to \nthem and removing members from them, and getting listings of their \nmembers.  Delete, copy, move, list, and lock operations can be applied \nrecursively, so that a client can operate on whole hierarchies with a \nsingle request.\n\nMany applications, however, need more powerful collections.  There are \ntwo areas in particular where more powerful functionality is often \nneeded: references and ordering.\n\nReferences make it possible for many collections, on the same or \ndifferent servers, to share the same resource.  Because the collections \nshare the resource by referencing it, only one physical copy of the \nresource need exist, and any changes made in the resource are visible \nfrom all the collections that reference it.\n\nSlein et al.                                                     Page 4\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\nIt is useful for many applications to be able to impose an ordering on a \ncollection. Orderings may be based on property values, but they may be \ncompletely independent of any properties on the resources identified by \nthe collection\u2019s member URIs.  Orderings based on properties can be \nobtained using a search protocol [DASL], but orderings not based on \nproperties need some other mechanism. \n\nSince these two areas are independent of each other, servers may elect \nto comply with the Referential Resources section of this specification \nor with the Ordered Collections section or both.  A server that supports \nreferencing MUST support redirect references, and MAY support direct \nreferences.  A server MUST advertise its compliance with particular \nparts of this specification through its response to an OPTIONS request, \nas specified in Section 10 below.\n\n4 Referential Resources\n\n4.1 Scope\n\n[CollReq] distinguishes between \"weak\" references and \"strong\" \nreferences, and also between \"redirect\" references and \"direct\" \nreferences.  This specification supports weak references, direct \nreferences, and redirect references, and is designed so that it can be \nextended to support strong references in the future.\n\nStrong references are references whose integrity is enforced by the \nserver; weak references are those whose integrity is not enforced by the \nserver.  Strong references and weak references are both useful in \ndifferent contexts.  Some applications cannot tolerate broken links.  A \nsoftware development application, for example, must be able to rely on \nthe integrity of references to component modules. Such applications must \nbe able to request strong references.  Other applications may want to \nreference target resources on multiple servers, where referential \nintegrity cannot be enforced, and may be less concerned about possible \nbroken references.  \n\nSeveral considerations led to the decision not to support strong \nreferences in the current specification.  First, there are many possible \npolicies that applications and services might use in enforcing \nreferential integrity.  Some examples are:\n\no Delete strong references when their targets are deleted.\no Decline to delete targets of strong references.\no Notify strong references when their targets have been deleted.\no Replace strong references with copies of their targets before \n  deleting the targets.\n\nThere appears to be no common practice in this area.  Moreover, some of \nthe policies have significant security risks.\n\no Moving a target of strong references could be a security risk to the \n  owner of the target by revealing secret locations on the target's \n  server.\no A strong reference could be a security risk to the owner of the \n\nSlein et al.                                                     Page 5\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n  reference by revealing secret locations on his server.\no The presence of strong references to resources on a server could make \n  it impossible to reclaim space on that server by moving or deleting \n  those target resources. \n\nThese considerations together led to the decision not to support strong \nreferences in the short term. \n\n4.2 Overview\n\nA referential resource is a resource that has no body of its own, but \ninstead references another resource.  The resource it references may \nhave a URI in the same collection as the reference, or in any other \ncollection.  This target resource may be a collection or a simple \nresource or another reference, or any other sort of resource that may be \ndefined in the future.  A resource may be the target of any number of \nreferential resources.  To make it possible to distinguish references \nfrom ordinary resources, a new value of the DAV:resourcetype property is \ndefined here.  The DAV:resourcetype property of all references MUST have \nthe value DAV:reference.  \n\nRedirect references are references that require action by the client \nbefore they can be resolved.  They are simple for servers to implement, \nstraightforward for clients to use, and have only limited security \nimplications.  Any server that complies with WebDAV referencing MUST \nprovide redirect references.\n\nIf the client is aware that it is operating on a redirect reference, it \ncan resolve the reference by retrieving the reference\u2019s DAV:reftarget \nproperty, whose value is the URI of the target resource.  It can then \nsubmit requests to the target resource.\n\nOtherwise, the client submits a request to the redirect reference.  For \nmost operations, the response is a 302 (Moved Temporarily), accompanied \nby the Ref-Type header with the value \"DAV:redirect\" and the Location \nheader with the URI of the target resource.  The client can then \nresubmit the request to the URI of the target resource.  A few \noperations, those that affect membership in a collection rather than the \nstate of the target resource, are exceptions to this general behavior.  \nAt present, the operations that fall into this category are DELETE, \nMOVE, and COPY.  These operations are applied to the reference itself \nand do not result in a 302 response.\n\nDirect references, in contrast, are resolved automatically by the \nserver.  They give the client the illusion that it is operating directly \non the target resource.  These references are more complex for the \nserver to implement, and raise additional security issues.  \nConsequently, servers are not required to provide direct references in \norder to be compliant with WebDAV referencing. \n\nThe default behavior of a direct reference is to apply most operations \ndirectly to its target, so that the client is not aware that a reference \nis mediating between it and the target resource.  The exceptions are \noperations that affect membership in a collection rather than the state \nof the target resource.  At present, the operations that fall into this \n\nSlein et al.                                                     Page 6\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\ncategory are DELETE, MOVE, and COPY.  These operations are applied to \nthe reference itself rather than to its target, so that only the \ncollection containing the reference is affected.\n\nThe No-Passthrough request header is also provided, to force an \noperation to be applied to the reference itself rather than its target.  \nIt can be used with most requests to direct or redirect references.  \nThis header is particularly useful with PROPFIND, to allow clients to \nview the reference\u2019s own properties.\n\nIdeally, non-referencing clients should be able to use both direct and \nredirect references.  This goal is more difficult to meet for redirect \nreferences, since client action is required to resolve them.  The \nstrategy of having redirect references respond to most requests with a \n302 (Moved Temporarily), accompanied by the URI of the target resource \nin the Location header, fulfills this goal in most cases.  LOCK requests \nare the most significant exception, where we have been unable to support \nnon-referencing clients.\n\nTo distinguish between direct and redirect references, a new DAV:reftype \nproperty is defined, with the values DAV:direct and DAV:redirect.  Every \nreference MUST have the DAV:reftype property.  The DAV:reftype property \nof a direct reference MUST have the value DAV:direct.  The DAV:reftype \nproperty of a redirect reference MUST have the value DAV:redirect.\n\nEvery reference MUST have the DAV:reftarget property, whose value is the \nURI of the reference\u2019s target resource.\n\nAlthough strong references are not currently supported, a new \nDAV:refintegrity property is defined in anticipation of future support \nfor strong references.  DAV:refintegrity will allow clients to \ndistinguish between weak and strong references.  All references MUST \nhave this property.  Although the only currently defined for \nDAV:refintegrity is DAV:weak, other values may be defined in the future, \nand servers MAY use extension values to identify their policy for \nenforcing referential integrity for that resource.\n\n4.3 Creating Referential Resources\n\n4.3.1 The MKREF Method\n\nReferential resources are created using the MKREF method.  The request-\nURI of the MKREF request identifies the resource to be created.  The \nrequired Ref-Target header contains the URI of the target resource.\n\nAn optional Ref-Integrity request header is defined below, primarily for \nfuture support for strong references.  The only values currently defined \nfor this header are \"do-not-enforce\" and \"enforce\", although other \nvalues may be used by private agreement.  If a server receives the value \n\"do-not-enforce\", it MUST NOT enforce referential integrity for the \nreference being created.  If a server receives the value \"enforce\", it \nMUST enforce referential integrity for the reference being created, but \nis free to follow any policy it chooses for enforcing referential \nintegrity.  If the Ref-Integrity header is not used with a MKREF \nrequest, the server MAY enforce referential integrity, but is not \n\nSlein et al.                                                     Page 7\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nrequired to do so, and if it does enforce referential integrity, it may \ndo so according to any policy it likes.  Clients and servers may use \nother values of Ref-Integrity by private agreement, but if a server \nreceives a value it does not understand, it MUST fail the request.\n\nAn optional Ref-Type general header is defined below, with values \n\"DAV:direct\" and \"DAV:redirect\". The default value is \"DAV:redirect\" if \nthe header is not present.\n\nAn optional Position request header supports ordered collections by \nallowing the client creating a reference to specify where the new member \nis to be placed in the collection's ordering.  (This header can also be \nused with any other method that adds a member to a collection, to \nspecify its position in the collection ordering.) \n\nWhen a server processes a MKREF request, it MUST set the \nDAV:resourcetype property (defined in [WebDAV]) of the new resource to \nbe DAV:reference.\n\nWhen a server processes a MKREF request, it MUST set the DAV:reftarget \nproperty to the URI of the target resource.\n        \nWhen a server processes a MKREF request, it MUST set the DAV:reftype \nproperty based on the value of the Ref-Type header.\n\nWhen a server processes a MKREF request, it MUST set the \nDAV:refintegrity property to \"DAV:weak\" if it is not enforcing \nreferential integrity for the newly-created reference.  If it is \nenforcing referential integrity for the new reference, it MAY set the \nvalue of DAV:refintegrity to an extension value identifying its \nenforcement policy. \n\nThe client MUST NOT send any content with the MKREF request, and so MUST \nNOT use the Content-Length or Transfer-Encoding headers.  (See [HTTP].)\n\nIf a MKREF request has a request-URI that identifies an existing \nresource, the request MUST fail.  This behavior is analogous to the \nbehavior of the MKCOL method [WebDAV].  \n\n4.3.2 Status Codes\n\nServers MUST use the HTTP/1.1 status codes as defined in [HTTP].  Some \nlikely client errors for MKREF include: \n\n400 (Bad Request): The client attempted to send content with the \nrequest, or set an invalid value for the Ref-Target, Ref-Integrity, Ref-\nType, or Position header.\n \n405 (Method Not Allowed): A resource already exists at the request-URI.\n\n409 (Conflict): Several conditions may produce this response.  There may \nbe no resource at the location specified in Ref-Target, on a server that \nprohibits dangling references.  The request may be attempting to create \nthe reference in a collection that does not exist.  The request may be \nattempting to position the reference before or after a resource that is \n\nSlein et al.                                                     Page 8\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nnot in the collection, or before or after itself.  The request may be \nattempting to position the reference in an unordered collection.\n\n4.3.3 Example\n\nRequest:\n\nMKREF /~whitehead/dav/spec08.ref HTTP/1.1\nHOST: www.ics.uci.edu\nRef-Target: <http://www.ics.uci.edu/i-d/draft-webdav-protocol-08.txt>\n\nResponse:\n\nHTTP/1.1 201 Created\n\nThis request resulted in the creation of a new referential resource at \nwww.ics.uci.edu/~whitehead/dav/spec08.ref, which points to the resource \nidentified by the Ref-Target header.  Its DAV:resourcetype property is \nset to DAV:reference.  Its DAV:reftarget property is set to the URI of \nits target resource.  Its DAV:refintegrity property is set to the \ndefault value of DAV:weak.  Its DAV:reftype property is set to the \ndefault value of DAV:redirect.\n\n4.4 Deleting, Copying, and Moving Referential Resources\n\nThe DELETE method should be used to delete referential resources.  For \nboth direct and redirect references, DELETE affects the reference \nitself, and not its target.\n\nA MOVE operation on a referential resource moves the referential \nresource to a different location, but has no effect on the location of \nits target. The DAV:reftarget property is unchanged after a MOVE.\n\nA COPY operation on a referential resource copies the referential \nresource, not its target resource, to another location. The \nDAV:reftarget property of the destination resource is the same as the \nDAV:reftarget of the source resource.\n\n4.5 Listing Referential Members of a Collection\n\nA URI of a reference can be a member of a collection just as the URI of \nan ordinary resource can.  A listing of members of a collection shows \nall of the URIs in the collection, whether they identify references or \nordinary resources.  That is, a WebDAV PROPFIND request on a collection \nresource with Depth = 1 or infinity MUST return a response XML element \nfor each URI in the collection, whether it identifies an ordinary \nresource or a referential resource.\n\nFor each direct reference, the properties returned by the PROPFIND are \nthe properties of the target resource unless the No-Passthrough header \nis included with the PROPFIND request.\n\nFor each redirect reference, the response element contains a 302 (Moved \nTemporarily) status code unless the No-Passthrough header is included \nwith the PROPFIND request.  The DAV:location element and the DAV:reftype \n\nSlein et al.                                                     Page 9\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nproperty are included with the 302 status code, extending the syntax of \nthe DAV:response element that was defined in [WebDAV] as described in \nSection 9 below.  A referencing client can tell from the DAV:reftype \nelement that the collection contains a redirect reference.  The \nDAV:location element contains the URI of the target resource.  A \nreferencing client can either use the DAV:location element to retrieve \nthe properties of the target resource or can submit a PROPFIND to the \nredirect reference with the No-Passthrough header to retrieve its \nproperties.  The DAV:location element is expected to be defined in a \nfuture revision of [WebDAV], at which time non-referencing clients will \nalso be able to use the response to retrieve the properties of the \ntarget resource.\n\nIf Depth = infinity in the PROPFIND request, the server MUST NOT follow \nredirect references into any collections to which they may refer.\n\nIf Depth = infinity in the PROPFIND request, the server MUST follow \ndirect references into any collections to which they may refer unless \nthe No-Passthrough header is used with the request.  That is, if the \ntarget resource is a collection, the server MUST list the members of \nthat collection.\n\nExample:\n\nhttp://www.svr.com/MyCollection/\n     (ordinary resource) diary.html\n     (direct reference) tuva\n     (redirect reference) nunavut\n\nThe target of http://www.svr.com/MyCollection/tuva is a collection:\nhttp://www.feynman.com/tuva/\n     (ordinary resource) history.html\n     (ordinary resource) music.html\n\nRequest:\n\nPROPFIND /MyCollection/ HTTP/1.1\nHost: www.svr.com\nDepth: infinity\nContent-Type: text/xml\nContent-Length: xxxx\n\n<?xml version=\"1.0\" ?>\n<D:propfind xmlns:D=\"DAV:\">\n   <D:prop xmlns:J=\"http://www.svr.com/jsprops/\">\n      <D:resourcetype/>\n      <J:keywords/>\n   </D:prop>\n</D:propfind>\n\nResponse:\n\nHTTP/1.1 207 Multi-Status\nContent-Type: text/xml\nContent-Length: xxxx\n\nSlein et al.                                                     Page 10\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\n<?xml version=\"1.0\" ?>\n<D:multistatus xmlns:D=\"DAV:\"\n               xmlns:J=\"http://www.svr.com/jsprops/\">\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype>collection</D:resourcetype>\n            <J:keywords>diary, interests, hobbies</J:keywords>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/diary.html</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype></D:resourcetype>\n            <J:keywords>diary, travel, family, history</J:keywords>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/tuva</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype>collection</D:resourcetype>\n            <J:keywords>history, music, throat-singing</J:keywords>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/tuva/history.html</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype></D:resourcetype>\n            <J:keywords>history, language, culture</J:keywords>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/tuva/music.html</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype></D:resourcetype>\n            <J:keywords>music, throat-singing</J:keywords>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n\nSlein et al.                                                     Page 11\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n      <D:href>http://www.svr.com/MyCollection/nunavut</D:href>\n      <D:status>HTTP/1.1 302 Moved Temporarily</D:status>\n      <D:location> \n         <D:href>http://www.inac.gc.ca/art/inuit/</D:href>\n      </D:location>\n      <D:reftype>redirect</D:reftype>\n   </D:response>\n</D:multistatus>\n\nIn this example, Depth = infinity and the No-Passthrough header is not \nused.  The collection contains one URI that identifies a redirect \nreference.  The response element for the redirect reference has a status \nof 302 (Moved Temporarily), and includes the DAV:location and \nDAV:reftype elements to allow clients to retrieve the properties of its \ntarget resource.  The collection also contains one URI that identifies a \ndirect reference.  The response element for the direct reference \ncontains the properties of its target collection.  There are also \nresponse elements for each member of its target collection.\n\nThe No-Passthrough header may be used with a PROPFIND request on a \ncollection.  If the No-Passthrough header is present, then the \nproperties of the references in the collection are returned.  The No-\nPassthrough header prevents any 302 (Moved Temporarily) status codes \nfrom being returned for redirect references, and it prevents direct \nreferences from passing the request through to their target resources.  \nIn addition, it prevents the server from following direct references to \ncollections into their target collections for PROPFIND requests with \nDepth = infinity. \n\nExample:\n\n/MyCollection/\n     (collection) photos/ \n\t(ordinary resource) family.gif\n\t(ordinary resource) trip.gif\n     (ordinary resource) diary.html\n     (direct reference) tuva\n     (redirect reference) nunavut\n\nRequest:\n\nPROPFIND /MyCollection/ HTTP/1.1\nHost: www.svr.com\nDepth: infinity\nNo-Passthrough:\nContent-Type: text/xml\nContent-Length: xxxx\n\n<?xml version=\"1.0\" ?>\n<D:propfind xmlns:D=\"DAV:\">\n   <D:prop>\n      <D:resourcetype/>\n      <D:reftype/>\n      <D:reftarget/>\n   </D:prop>\n\nSlein et al.                                                     Page 12\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n</D:propfind>\n\nResponse:\n\nHTTP/1.1 207 Multi-Status\nContent-Type: text/xml\nContent-Length: xxxx\n\n<?xml version=\"1.0\" ?>\n<D:multistatus xmlns:D=\"DAV:\">\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype>collection</D:resourcetype>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n      <D:propstat>\n         <D:prop> <D:reftype/> <D:reftarget/> </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/photos/</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype>collection</D:resourcetype>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n      <D:propstat>\n         <D:prop> <D:reftype/> <D:reftarget/> </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/photos/family.gif</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype></D:resourcetype>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n      <D:propstat>\n         <D:prop> <D:reftype/> <D:reftarget/> </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/photos/trip.gif</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype></D:resourcetype>\n         </D:prop>\n\nSlein et al.                                                     Page 13\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n      <D:propstat>\n         <D:prop> <D:reftype/> <D:reftarget/> </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/diary.html</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype></D:resourcetype>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n      <D:propstat>\n         <D:prop> <D:reftype/> <D:reftarget/> </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/tuva</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype>reference</D:resourcetype>\n            <D:reftype>direct</D:reftype>\n            <D:reftarget>\n               <D:href>http://www.feynman.com/tuva/</D:href>\n            </D:reftarget>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.svr.com/MyCollection/nunavut</D:href>\n      <D:propstat>\n         <D:prop>\n            <D:resourcetype>reference</D:resourcetype>\n            <D:reftype>redirect</D:reftype>\n            <D:reftarget>\n               <D:href>http://www.inac.gc.ca/art/inuit/</D:href>\n            </D:reftarget>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n   </D:response>\n</D:multistatus>\n\nSince the No-Passthrough header is present, the response shows the \nproperties of the references in the collection rather than the \nproperties of their targets.  Even though Depth = infinity, the No-\nPassthrough header prevents the server from listing the members of the \ncollection that is the target of the direct reference.  No-Passthrough \nalso prevents a 302 response from being returned for the redirect \nreference.\n\nSlein et al.                                                     Page 14\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\n4.6 Locking Referential Resources\n\nIdeally, a LOCK on a reference should lock both the reference and its \ntarget resource.  The owner of an exclusive write lock, for example, \nwould be surprised if anyone else could modify the content of the target \nresource while he held the lock.  He would also be surprised if anyone \nelse could delete the reference to it, or replace the reference with one \npointing to a different target.\n\nFor direct references, it is possible to provide this intuitive \nbehavior:\n\nA LOCK on a direct reference does lock both the reference and its target \nresource.\n\nA LOCK with Depth = infinity on a collection that contains direct \nreferences locks both the direct references and their target resources.  \nIf any of the targets of the direct references are collections, the \nserver does lock the members of those collections.\n\nIn the case of redirect references, however, it is not possible to \nobtain this intuitive LOCK behavior and also meet other goals:  \n\no Redirect references should be simple for servers to implement. In \n  particular, a server should never have to resolve a redirect \n  reference.  A server should not have to provide proxy capabilities in \n  order to implement redirect references.\no Non-referencing clients should be able to use both direct and \n  redirect references.\no There should be consistency between the behavior of LOCK on a single \n  referential resource and the behavior of LOCK on a collection that \n  contains referential resources.\n\nWe have sacrificed support for non-referencing clients and the intuitive \nlocking behavior in order to preserve the meaning of \"redirect \nreference\" and consistency between locking collections containing \nredirect references and locking redirect references.  Behavior for \nlocking redirect references was determined by what is possible for the \ncase of locking collections:\n\nA LOCK with Depth = infinity on a collection that contains redirect \nreferences locks the redirect references, but not their targets.  This \ngives part of the expected lock behavior without forcing the server to \nresolve the redirect reference or become a proxy server in cases where \nthe target resides on a different server.  The response does not include \n302 status codes for the redirect references.  This is because any 302 \nstatus for a response element would cause the entire lock operation to \nfail, and force clients to lock each collection member individually \nwhenever there are any redirect references in a collection.  The \nresponse element does include DAV:reftype and DAV:reftarget properties \nso that a referencing client can lock the targets if it wishes.  (There \nwill be no hint in any response code that there are redirect references \nwhose targets need to be locked.  The client will most likely not lock \nany targets until it attempts an operation on the target and gets a 302 \n\nSlein et al.                                                     Page 15\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nresponse.)  Non-referencing clients cannot lock the targets of the \nredirect references and may never realize that the targets have not been \nlocked.  Clearly, a LOCK with Depth = infinity on a collection will not \nfollow any redirect references whose targets are collections into the \ntarget collections; it will not cause any members of those target \ncollections to be locked.\n\nA LOCK on a redirect reference locks only the reference, not its target.  \nIt does not return a 302 response.  The response does include the Ref-\nType and Ref-Target headers, so that a referencing client can lock the \ntarget resource if it wishes.  Non-referencing clients cannot lock the \ntarget of a redirect reference. This behavior is designed to be \nconsistent with the behavior just described for collections.\n\nThe No-Passthrough header can be used with LOCK requests, and in all \ncases causes only the references, and not their targets, to be locked.\n\n4.7 Other WebDAV Operations on Redirect Referential Resources\n\nAlthough non-referencing WebDAV clients cannot create referential \nresources, they should be able to use the references created by \nreference-aware WebDAV clients.  They should be able to follow any \nreferences to their targets.  To make this possible, a server that \nreceives a PROPFIND, PROPPATCH, MKCOL, or MKREF request made via a \nredirect reference MUST return a 302 (Moved Temporarily) status code. \nThe client and server MUST follow [HTTP] Section 10.3.3 \"302 Moved \nTemporarily,\" but with these additional rules: \n\no The Location response header MUST contain the target URI of the \n  reference.  \n\no The response MUST include the Ref-Type header.  This header allows \n  reference-aware WebDAV clients to recognize the resource as a \n  reference and understand the reason for the redirection. \n\nA reference-aware WebDAV client can act on this response in one of two \nways.  It can, like a non-referencing client, resubmit the request to \nthe URI in the Location header in order to operate on the target \nresource.  Alternatively, it can resubmit the request to the URI of the \nredirect reference with the No-Passthrough header in order to operate on \nthe reference itself.  The No-Passthrough header causes the request to \nbe applied to the reference itself, and prevents a 302 response.\n\nIf a reference-aware client knows before submitting its request that the \nrequest-URI identifies a redirect reference, it can save the round trip \ncaused by the 302 response by using No-Passthrough in its initial \nrequest to the URI.\n\nSince MKCOL and MKREF fail when applied to existing resources, if the \nclient attempts to resubmit the request to the target resource, the \nrequest will fail (unless the reference is a dangling reference).  \nSimilarly, if the client attempts to resubmit the request to the \nreference with a No-Passthrough header, the request will fail.\n\n4.8 Other WebDAV Operations on Direct Referential Resources\n\nSlein et al.                                                     Page 16\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\nWith the exception of DELETE, MOVE, and COPY, which were discussed \nabove, operations on direct references affect the target resource, not \nthe reference, unless the No-Passthrough header is used.\n\nUnless the No-Passthrough header is used, a PROPPATCH on a direct \nreference modifies the properties of its target resource, not the \nproperties of the reference itself. \n\nUnless the No-Passthrough header is used, a PROPFIND on a direct \nreference returns the properties of its target resource, not the \nproperties of the reference itself.\n\nIf the No-Passthrough header is used with a PROPPATCH or PROPFIND \nrequest on a direct reference, the operation is applied to the reference \nitself rather than to its target resource.\n\nMKCOL and MKREF fail if their request-URI identifies an existing \nresource of any kind.  Consequently, when submitted to a target resource \nvia a direct reference, they fail unless the reference is a dangling \nreference.  If they are submitted to an existing direct reference with \nthe No-Passthrough header, they also fail.\n\n4.9 HTTP Operations on Redirect Referential Resources\n\nAlthough existing HTTP clients cannot create referential resources, they \nshould be able to read collections created by reference-aware WebDAV \nclients.  They should be able to follow any references identified by \nURIs in those collections to their targets.  To make this possible, a \nserver that receives a GET or HEAD on a redirect reference MUST return a \n302 (Moved Temporarily) status code.  The server MUST follow [HTTP] \nSection 10.3.3 \"302 Moved Temporarily,\" but with these additional rules: \n\no The Location header MUST contain the target URI of the reference.  \n\no The response MUST include all referencing entity headers that make \n  sense for redirect references: Ref-Type and Ref-Target. \n\no The response MUST also include those HTTP headers that make sense for \n  referential resources, at a minimum: Cache-Control, Age, ETag, \n  Expires, and Last-Modified.\n\nThe second and third of these rules preserve normal GET and HEAD \nbehavior for reference-aware WebDAV clients.\n\nTo enable existing HTTP clients to use PUT, POST, or OPTIONS via \nredirect references, a server that receives any of these requests on a \nredirect reference MUST return a 302 (Moved Temporarily).  The client \nand server MUST follow [HTTP] Section 10.3.3 \"302 Moved Temporarily,\" \nbut with these additional rules: \n\no The Location response header MUST contain the target URI of the \n  reference.  \n\no The response MUST include the Ref-Type header.  This header allows \n\nSlein et al.                                                     Page 17\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n  reference-aware WebDAV clients to recognize the resource as a \n  reference and understand the reason for the redirection. \n\nReference-aware clients can act on a 302 response in either of two ways.  \nLike plain HTTP clients, they can resubmit the request to the URI in the \nLocation header (the URI of the target resource).  They may, however, \nwant to operate on the reference rather than on its target.  In this \ncase, they may resubmit the request to the URI of the reference and \ninclude the No-Passthrough header with the request.  The No-Passthrough \nheader causes the request to be applied to the reference itself, and \nprevents a 302 response.\n\nIf a reference-aware client knows before submitting its request that the \nrequest-URI identifies a redirect reference, it can save the round trip \ncaused by the 302 response by using No-Passthrough in its initial \nrequest to the URI.\n\nThe No-Passthrough header can be used with GET or HEAD to retrieve the \nheaders of a redirect reference, although this is not necessary since \nthe headers would accompany a 302 response in any case. The No-\nPassthrough header can be used with PUT to replace the redirect \nreference with an ordinary resource or with OPTIONS to retrieve the \ncapabilities of a redirect reference.  \n\nClients MUST NOT, however, use the No-Passthrough header with POST. \nSince a reference cannot accept another entity as its subordinate, an \nattempt to POST to a reference with No-Passthrough will also fail.  If a \nserver receives a POST request with the No-Passthrough header on a \nredirect reference, it MUST fail the request with a 400 (Bad Request) \nstatus code.\n\n4.10 HTTP Operations on Direct Referential Resources\n\nGET, HEAD, PUT, POST, and OPTIONS on direct references are automatically \npassed through to their target resources.  GET returns the content and \nheaders of the target resource, HEAD returns the headers of the target \nresource, PUT replaces the content of the target resource, POST performs \nthe expected function at the target resource, and OPTIONS reports the \ncommunication options available at the target resource.\n\nThe No-Passthrough request header may be used with GET, HEAD, PUT, or \nOPTIONS to view the headers or capabilities of the reference, rather \nthan its target.  \n\nThe No-Passthrough request header MUST NOT be used with POST, which \ncannot be applied to references.  If a server receives a POST request on \na direct reference with the No-Passthrough header, it MUST fail the \nrequest with a 400 (Bad Request) status code.\n\n4.11 Operations on Targets of Referential Resources\n\nIn general, operations on targets of weak referential resources have no \neffect on the referential resource.  However, servers that choose to \nmaintain the integrity of references are free to make changes to the \nstate of references when moving or deleting their targets.\n\nSlein et al.                                                     Page 18\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\nWhen moving a target resource, a server MAY insert an optional step into \nthe semantics of MOVE as defined in [WebDAV] for the purpose of \nmaintaining referential integrity.  Between the copy step and the delete \nstep of a MOVE, the server MAY perform an update step, which changes the \nDAV:reftarget property of any references to the target to reflect its \nnew location.\n\nWhen deleting a target resource, a server MAY perform any internal \noperations necessary to implement its policy on preserving referential \nintegrity.  For example, it might delete any references to the deleted \ntarget, or it might flag them as having a deleted target, or it might \nreplace references with copies of the target.\n\n4.12 Discovering a Target\u2019s References\n\nAn optional DAV:references property on the target resource provides a \nlist of referential resources whose DAV:reftarget property points to \nthat target resource.  If present, DAV:references is a read-only \nproperty, maintained by the server.  By retrieving this property, a \nclient can discover the URIs of the references that point to the target, \nand so can also discover the collections that contain those URIs as \nmembers.  As for all DAV: properties, this specification is silent as to \nhow the DAV:references property is implemented on the server.\n\nThe DAV:references property is expected to be supported mainly by \nDocument Management Systems (DMSs) and other servers that will maintain \nthe property only for references within their own domain.  It is not in \ngeneral possible for a server to maintain the property for references on \nother servers.  If a reference on a different server points to the \ntarget, the server where the target is located is unlikely to know about \nthat reference.  This protocol provides no mechanism for one server to \nnotify another of the creation of a reference to one of its resources.  \nConsequently, the list of references in DAV:reftarget may be incomplete.\n\nRationale: A number of scenarios require clients to navigate from a \ntarget resource to the references that point to it, and to the \ncollections that contain the URIs of those references.  This capability \nis particularly important for DMSs, which may populate their collections \nentirely by reference.  Their clients may need to determine, for any \nobject in the DMS, what collections contain URIs that identify \nreferences to that object.  It is also important in other contexts.  For \nexample, some servers enforce referential integrity by refusing to \ndelete any resource that is referenced by other resources.  In such an \nenvironment, the client must be able to discover the references in order \nto delete them before attempting to delete the target.\n\nRisks: When deciding whether to support the DAV:references property, \nserver implementors / administrators should balance the benefits it \nprovides against the cost of maintaining the property and the security \nrisks enumerated in Sections 12.4 and 12.5.\n\n4.13 Behavior of Dangling Direct References\n\nWhenever the No-Passthrough header accompanies a request on a dangling \n\nSlein et al.                                                     Page 19\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\ndirect reference, the request succeeds.  Since No-Passthrough causes the \nrequest to be applied to the reference rather than to its target, it \ndoes not matter that the target resource does not exist.  The client \nwill not be informed that the reference points to a nonexistent target.\n\nIn the absence of the No-Passthrough header, the responses MUST be as \nfollows:\n\nGET, HEAD, OPTIONS, POST, PROPFIND, and PROPPATCH respond with 404 (Not \nFound), but the Ref-Type and Ref-Target headers are included in the \nresponse, so that the client can tell that it is the target, and not the \nreference, that was not found.\n\nIf LOCK or UNLOCK is submitted to a direct reference that is broken, the \nresponse is 404 (Not Found).  The Ref-Type and Ref-Target headers are \nincluded in the response, so that the client can tell that it is the \ntarget, and not the reference, that was not found.\n\nIf, however, a PROPFIND, LOCK, or UNLOCK with Depth header greater than \n0 on a collection encounters a dangling direct reference inside the \ncollection, the response is a 207 (Multi-Status).  The DAV:response \nelement for the dangling reference will have a status of 404 (Not \nFound). The DAV:reftype and DAV:reftarget properties of the references \nare included in the response.  Their presence informs the client that it \nis the target, not the reference, that was not found.  These two \nelements are extensions to the DAV:response element as defined in \n{WEBDAV].\n\nFor example,\n\nRequest:\n\nPROPFIND /collection1/ HTTP/1.1\nHost: www.somehost.com\nDepth: 1\nContent-Type: text/xml\nContent-Length: xxxx\n\n<?xml version=\"1.0\" ?>\n<D:propfind xmlns:D=\"DAV:\">\n   <D:prop xmlns:X=\"http://www.somehost.com/schemas/x\">\n      <X:author/>\n      <X:title/>\n   </D:prop>\n</D:propfind>\n\nResponse:\n\nHTTP/1.1 207 Multi-Status\nContent-Type: text/xml\nContent-Length: xxxx\n\n<?xml version=\"1.0\" ?>\n<D:multistatus xmlns:D=\"DAV:\">\n   <D:response>\n\nSlein et al.                                                     Page 20\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n      <D:href>http://www.somehost.com/collection1/</D:href>\n      <D:propstat>\n         <D:prop xmlns:X=http://www.somehost.com/schemas/x>\n            <X:author>Smith, J.H.</X:author>\n            <X:title>My Working Collection</X:title>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n      </D:propstat>\n   </D:response>\n   <D:response>\n      <D:href>http://www.somehost.com/collection1/directref7</D:href>\n      <D:status>HTTP/1.1 404 Not Found</D:status>\n      <D:reftype><D:direct/></D:reftype>\n      <D:reftarget>\n         <D:href>http://www.somehost.com/collection2/file19</D:href>\n      </D:reftarget>\n      <D:responsedescription>Target resource not found.      \n      </D:responsedescription>\n   </D:response>\n</D:multistatus>\n\nPUT succeeds, creating a new resource at the location specified by the \nreference\u2019s DAV:reftarget property.\n\nMKREF and MKCOL succeed, since there is no existing resource at the \ntarget URI.\n\nMOVE and DELETE succeed, since they always affect the reference rather \nthan its target.  For MOVE, the reference at the destination will be \nbroken, just as the reference at the source was.\n\nThe behavior of COPY is TBD.\n\n4.14 Chains of Direct References\n\nUnless a No-Passthrough header is present, any operation on a direct \nreference that is part of a chain of direct references gets passed \nthrough to the target of the last reference in the chain.\n\nWhenever a response is required to include the Ref-Target header, for a \nchain of direct references, there MUST be a Ref-Target header for each \nreference in the chain.  In order for the client to know which reference \nin the chain each Ref-Target belongs to, the value of each Ref-Target \nheader MUST include a hop-number of the reference as well as the URL of \nits target resource.  For example, \n\nRequest:\n\nHEAD /math/ref1 HTTP/1.1\nHost: www.somehost.edu\n\nResponse:\n\nHTTP/1.1 200 ok\nRef-Type: direct\n\nSlein et al.                                                     Page 21\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nRef-Target: 0; http://www.somehost.edu/logic/ref2\nRef-Target: 1; http://www.somehost.edu/library/ref3\nRef-Target: 2; http://www.somehost.edu/library/frege/grundgesetze.html\n.\n.\n\nA server cannot tell whether a dangling reference once pointed to an \nordinary resource or to another reference in a chain of direct \nreferences.  When a break occurs before the end of a chain of direct \nreferences, the server\u2019s behavior will be the same as for any other \ndangling direct reference, as described in Section 4.13.  For example, a \nPUT will create the new resource at the location specified by the \nDAV:reftarget property of the broken reference, even if that is in the \nmiddle of what was once a chain of direct references.\n\n4.15 URIs and References\n\nIn a request-URI /segment1/segment2/segment3, any of the paths \n/segment1/, /segment1/segment2/ or /segment1/segment2/segment3 may \nidentify a reference.  (See [URI], Section 3.3, for definitions of \n\"path\" and \"segment\".)  If any segment except the last segment of the \npath identifies a reference, that reference MUST have as its target a \ncollection.  Otherwise, the request will fail.  The succeeding segment \nof the path MUST identify a resource that is an internal member of that \ntarget collection.  Otherwise, the request will fail.\n\nConsider URI /x/y/z.html.  Suppose that /x/ is a reference whose target \nis collection /a/, which contains reference y whose target is collection \n/b/, which contains reference z.html whose target is /c/d.html.  \n\n/x/ -----> /a/\n           /a/y/ -----> /b/\n                        /b/z.html -----> /c/d.html\n\nIf the references are direct references, the server applies the request \nto the ultimate target, /c/d.html.  It is able to do so because each \nsegment of the URI's path satisfies the constraints stated above.  \nExcept for the final segment, each segment that is a reference has as \nits target a collection that contains the next segment as an internal \nmember.  The final segment, which is a reference, does have a target \nresource.\n\nIf the references are redirect references, the client must follow up \nthree separate 302 responses before finally reaching the target \nresource.  The server responds to the initial request with a 302 with \nLocation: /a/y/z.html, and the client resubmits the request to \n/a/y/z.html.  The server responds to this request with a 302 with \nLocation: /b/z.html, and the client resubmits the request to /b/z.html.  \nThe server responds to this request with a 302 with Location: /c/d.html, \nand the client resubmits the request to /c/d.html.  This final request \nsucceeds.\n\n4.16 Summary of Referencing Headers Required in Responses\n\nThis section summarizes the rules that determine which referencing \n\nSlein et al.                                                     Page 22\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nheaders are included in responses to requests on references.  The \nnormative statements that are summarized here can be found in Sections \n4.5 - 4.10, 4.13, 4.14, 6.1, and 6.2.\n\nReference Type | No-Passthrough | Method          | Headers Included in \n               |                |                 | Response\n-----------------------------------------------------------------------\nboth           | N/A            | All             | Ref-Type\n-----------------------------------------------------------------------\ndirect         | No             | All             | Ref-Target\n-----------------------------------------------------------------------\ndirect         | Yes            | All except GET, | Ref-Target optional\n               |                | HEAD, LOCK      |\n-----------------------------------------------------------------------\ndirect         | Yes            | GET, HEAD, LOCK | Ref-Target\n-----------------------------------------------------------------------\nredirect       | N/A            | GET, HEAD       | Ref-Target\n\no Every response to a request on a reference includes the Ref-Type \n  header, so that the client knows that it was operating on a \n  reference, and can understand the behavior of the reference.\n\no Every response to a request on a direct reference includes the Ref-\n  Target header unless the No-Passthrough header accompanies the \n  request.  This allows the client to tell what resource was affected \n  by the operation.  \n\no Since a request that includes the No-Passthrough header affects only \n  the reference, the response to such a request on a direct reference \n  is not required to include the Ref-Target header except in the case \n  of GET or HEAD.  \n\no Since [HTTP] requires responses to GET and HEAD to include all entity \n  headers, Ref-Target is included in all responses to GET and HEAD \n  requests on direct references with the No-Passthrough header.\n\no Since LOCK on a direct reference locks only the reference, and not \n  its target, the No-Passthrough header has no effect on its default \n  behavior.  Whether or not the No-Passthrough header is used with LOCK \n  on a direct reference, the Ref-Target header is included in the \n  response.  This gives the client the information it needs to lock the \n  target resource. \n\no Since [HTTP] requires responses to GET and HEAD to include all entity \n  headers, Ref-Target is included in all responses to GET and HEAD \n  requests on redirect references.\n\nRequests on collections with Depth header greater than 0 typically get \nMulti-Status responses.  Consequently, information about any references \nin the collection cannot be returned in headers.  Instead, the \ncorresponding DAV properties are returned in the DAV:response elements \nfor the references.\n\n5 Ordered Collections\n\n\nSlein et al.                                                     Page 23\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n5.1 Overview\n\nCollections on a compliant server may be ordered, but need not be.  It \nis up to the client to decide whether a given collection is ordered and, \nif so, to specify the semantics to be used for ordering its members.  If \na collection is ordered, each of its members must be in the ordering \nexactly once, and the ordering must not include any resource that is not \na member of the collection.  Only one ordering can be attached to any \ncollection.  Multiple orderings of the same resources can be achieved by \ncreating multiple collections referencing those resources, and attaching \na different ordering to each collection.\n\nThe server is responsible for enforcing these constraints on orderings.  \nThe server MUST remove a member URI from the ordering when it is removed \nfrom the collection. The server MUST add a member URI to the ordering \nwhen it is added to the collection.\n\nWhen responding to a PROPFIND on a collection, the server MUST order the \nresponse elements according to the ordering defined on the collection.\n\n5.2 Creating an Ordered Collection\n\n5.2.1 Overview \n\nWhen a collection is created, the client can request that it be ordered \nand specify the semantics of the ordering by using the new Ordered \nheader in the MKCOL request, setting its value to the URI of the \nsemantics to be used or setting its value to DAV:custom if the semantics \nare not being advertised.  If the client does not want the collection to \nbe ordered, it may omit the Ordered header, or use it with the value \n\"DAV:unordered\".\n\nEvery collection MUST have the new DAV:orderingtype property, which \nindicates whether the collection is ordered and, if so, identifies the \nsemantics of the ordering.  A value of DAV:unordered indicates that that \ncollection is not ordered.  That is, the client cannot depend on the \nrepeatability of the ordering of results from a PROPFIND request.  For \ncollections that are ordered, DAV:orderingtype SHOULD be set to an href \nthat identifies the semantics of the ordering, allowing a human user or \nsoftware package to insert new collection members into the ordering \nintelligently.  Although the href MAY point to a resource that contains \na definition of the semantics of the ordering, clients are discouraged \nfrom accessing that resource, in order to avoid overburdening its \nserver.  The DAV:orderingtype property MAY be set to DAV:custom to \nindicate that the collection is to be ordered, but the semantics of the \nordering is not being advertised. \n\nIf the Ordered header is present on a MKCOL request, the server MUST set \nthe collection's DAV:orderingtype property to the value of the Ordered \nheader.  If the Ordered header is not present, the server MUST treat the \nrequest as if it had an Ordered header with the value \"DAV:unordered\", \nmeaning that the collection is not ordered.  If the collection is \nordered, the server MUST respond to PROPFIND requests on the collection \nusing the specified ordering.\n\n\nSlein et al.                                                     Page 24\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n5.2.2 Status Codes\n\nServers MUST use the HTTP/1.1 status codes as defined in [HTTP].\n\n5.2.3 Example\n\nRequest:\n\nMKCOL /theNorth/ HTTP/1.1\nHost: www.server.org\nOrdered: <http://www.server.org/orderings/compass.html>\n\nResponse:\n\nHTTP/1.1 201 Created\n\nIn this example, a new, ordered collection was created.  Its \nDAV:orderingtype property has as its value the URI from the Ordered \nheader.  In this case, the URI identifies the semantics governing the \nordering.  As new members are added to the collection, clients or end \nusers can use the semantics to determine where to position the new \nmembers in the ordering. \n\n5.3 Setting the Position of a Collection Member\n\n5.3.1 Overview\n\nWhen a new member is added to a collection (for example, with PUT, \nMKREF, or MKCOL), its position in the ordering can be set with the new \nPosition header.  The Position header allows the client to specify that \nthe member should be first in the collection's ordering, last in the \ncollection's ordering, before some other collection member in the \ncollection's ordering, or after some other collection member in the \ncollection's ordering.\n\nThe server MUST insert the new member into the ordering at the location \nspecified in the Position header, if one is present (and if the \ncollection is ordered); otherwise, it MUST append the new member to the \nend of the ordering (if the collection is ordered).  If a PUT causes an \nexisting resource to be replaced, and if the Position header is absent, \nthe server MUST leave the member at its previous position in thee \ncollection ordering.  If the Position header is present, the server MUST \nremove the member from its previous position, and then insert it at the \nrequested position.\n\n5.3.2 Status Codes\n\nServers MUST use the HTTP/1.1 status codes as defined in [HTTP].  Some \nlikely client errors for when setting the position of a collection \nmember include: \n\n409 (Conflict): The request may be attempting to position the collection \nmember before or after a URI that is not in the collection, or before or \nafter itself, or it may be attempting to position the collection member \nin an unordered collection.\n\nSlein et al.                                                     Page 25\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\n5.3.3 Examples\n\nRequest:\n\nMKREF /~whitehead/dav/spec08.ref HTTP/1.1\nHOST: www.ics.uci.edu\nRef-Target: <http://www.ics.uci.edu/i-d/draft-webdav-protocol-08.txt>\nPosition: After <requirements.html>       \n\nResponse:\n\nHTTP/1.1 201 Created\n\nThis request resulted in the creation of a new referential resource at \nwww.ics.uci.edu/~whitehead/dav/spec08.ref, which points to the resource \nidentified by the Ref-Target header.  The Position header in this \nexample caused the server to set its position in the ordering of the \n/~whitehead/dav/ collection immediately after requirements.html.\n\nRequest:\n\nMOVE /i-d/draft-webdav-protocol-08.txt HTTP/1.1\nHost: www.ics.uci.edu\nDestination: </~whitehead/dav/draft-webdav-protocol-08.txt>\nPosition: First\n\nResponse:\n\nHTTP/1.1 409 Conflict\n\nIn this case, the server returned a 409 Conflict status code because the \n/~whitehead/dav/ collection is an unordered collection.  Consequently, \nthe server was unable to satisfy the Position header.\n\n5.4 Changing the Semantics of a Collection Ordering\n\nAfter a collection has been created, a client can change its ordering \nsemantics, or change an ordered collection to an unordered collection or \nvice versa, by using PROPPATCH to change the value of its \nDAV:orderingtype property.  The client is then responsible for updating \nthe ordering of the collection members according to the new semantics.  \nPROPPATCH is defined in [WebDAV], Section 7.2.\n\n5.5 Changing the Position of a Collection Member\n\n5.5.1 The ORDERPATCH Method\n\nTo change the positions of collection members in the collection's \nordering, the client MUST use an ORDERPATCH request with a request body \ncontaining an order XML element.  The request-URI of an ORDERPATCH \nrequest is the URI of the collection whose ordering is to be updated.  \nThe order XML element identifies the member URIs whose positions are to \nbe changed, and describes their new positions in the ordering.  Each new \nposition can be specified as first in the ordering, last in the \n\nSlein et al.                                                     Page 26\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nordering, before some other collection member in the ordering, or after \nsome other collection member in the ordering.  The server MUST apply the \nchanges in the order they appear in the order element.\n\n5.5.2 Status Codes\n\nSince multiple changes can be requested in a single ORDERPATCH request, \nthe server MUST return a 207 Multi-Status response, as defined in \n[WebDAV].\n\nWithin the 207 Multi-Status response, the following status codes are \npossible:\n\n200 (OK): The change in ordering was successfully made.\n\n409 (Conflict): An attempt was made to position the collection member \nbefore or after a URI that is not in the collection, or before or after \nitself, or an attempt was made to position the collection member in an \nunordered collection.\n\nA request to reposition a collection member to the same place in the \nordering is not an error. \n\n5.5.3 Example\n\nConsider a collection /coll-1/ with members ordered as follows:\n\nnunavut.map\nnunavut.img\nbaffin.map\nbaffin.desc\nbaffin.img\niqaluit.map\nnunavut.desc\niqaluit.img\niqaluit.desc\n\nRequest:\n\nORDERPATCH /coll-1/ HTTP/1.1\nHost: www.nunanet.com\nContent-Type: text/xml\nContent-Length: xxx\n\n<?xml version=\"1.0\" ?>\n<d:order xmlns:d=\"DAV:\">\n   <d:ordermember>\n      <d:href>nunavut.desc</d:href>\n      <d:position> \n         <d:after>\n            <d:href>nunavut.map</d:href>\n         </d:after>\n      </d:position>\n   </d:ordermember>\n   <d:ordermember>\n\nSlein et al.                                                     Page 27\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n      <d:href>iqaluit.img</d:href>\n      <d:position>\n         <d:last/>\n      </d:position>\n   </d:ordermember>\n</d:order>\n\nResponse:\n\nHTTP/1.1 207 Multi-Status\nContent-Type: text/xml\nContent-Length: xxx\n\n<?xml version=\"1.0\" ?>\n<d:multistatus xmlns:d=\"DAV:\">\n   <d:response>\n      <d:href>http://www.nunanet.com/coll-1/nunavut.desc</d:href>\n      <d:status>HTTP/1.1 200 OK</d:status>\n   </d:response>\n   <d:response>\n      <d:href>http://www.nunanet.com/coll-1/iqaluit.img</d:href>\n      <d:status>HTTP/1.1 200 OK</d:status>\n   </d:response>\n</d:multistatus>\n\nIn this example, after the request has been processed, the collection's \nordering is as follows:\n\nnunavut.map\nnunavut.desc\nnunavut.img\nbaffin.map\nbaffin.desc\nbaffin.img\niqaluit.map\niqaluit.desc\niqaluit.img\n\n5.5.4 Design Rationale\n \nThe decision to introduce the new ORDERPATCH method was made after \ninvestigating the possibility of using the existing MOVE method with a \nPosition header.  The use of MOVE initially looked appealingly simple:\n\nMOVE /root/coll-1/foo HTTP/1.1\nHost: www.somehost.com\nDestination: </root/coll-1/foo>\nPosition: First\n\nUnfortunately, several features of the semantics of MOVE make it \nunsuitable for changing the position of a collection member in the \ncollection's ordering.  First, [WebDAV] defines MOVE as logically \nequivalent to a copy followed by a delete of the source resource.  This \ndefinition makes it impossible to MOVE a resource to a destination URL \nthat is the same as the source URL.  The resource would be deleted \n\nSlein et al.                                                     Page 28\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nrather than moved.  Second, [WebDAV] states that when moving a resource \nto a destination where a resource already exists, the Overwrite header \nmust be \"T\", and in this case the server must DELETE the resource at the \ndestination before performing the MOVE.  Again, this makes it impossible \nto MOVE a resource to the same location.  Finally, [WebDAV] states that \nlocks are lost on a MOVE, an outcome that seems undesirable in this \ncase.\n\n6 New Headers\n\n6.1 Ref-Target Entity Header\n\nRef-Target = \"Ref-Target\" \":\" 1#([hop-count \";\"] Coded-url)\nhop-count = 1*DIGIT\nCoded-url is defined in [WebDAV], Section 8.4.\n\nIn general, the Ref-Target header has the simpler form:\n\nRef-Target = \"Ref-Target\" \":\" Coded-url\n\nThe more complicated syntax is provided only for use in responses \ninvolving chains of direct references.\n\nThe Ref-Target header is used with MKREF requests to identify the target \nresource of the new referential resource being created.  It is a \nrequired header in MKREF requests.   When used with a MKREF request, its \nvalue is simply a Coded-url, and only a single value is allowed.  For an \nexample, see Section 4.3.3.\n\nServers MUST include the Ref-Target header in responses to the following \ntypes of requests: \n\nReference Type  |  No-Passthrough  |  Method\n-----------------------------------------------------\ndirect          |  No              |  All\n-----------------------------------------------------\ndirect          |  Yes             |  GET, HEAD, LOCK\n-----------------------------------------------------\nredirect        |  N/A             |  GET, HEAD\n\nThe only case where multiple values of Ref-Target are allowed is when it \nis included in a response for a reference that is part of a chain of \ndirect references.  In this case, the response MUST include a value of \nRef-Target for each reference in the chain.  Each value MUST include a \nhop-count, starting with 0, indicating which reference in the chain that \nRef-Target belongs to.  For an example, see Section 4.14.\n\n6.2 Ref-Type Entity Header\n\nRef-Type = \"Ref-Type\" \":\" (\"DAV:direct\" | \"DAV:redirect\") \n\nThe Ref-Type header is defined to distinguish between direct and \nredirect references.  The possible values of this header are DAV:direct \nand DAV:redirect.  If the header is not present on a MKREF request, the \nserver MUST treat the request as if it has a Ref-Type header with the \n\nSlein et al.                                                     Page 29\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nvalue DAV:redirect. \n\nServers MUST include the Ref-Target header in every response to a \nrequest whose request-URI identifies a reference. \n\n6.3 Ref-Integrity Request Header\n\nRef-Integrity = \"Ref-Integrity\" \":\" (\"do-not-enforce\" | \"enforce\" | \nextend)\nextend = 1#CHAR\n\nThe Ref-Integrity header is defined primarily to allow future support \nfor strong references.  It specifies whether the server should enforce \nreferential integrity for a referential resource being created with \nMKREF. \n\nThe value \"do-not-enforce\" means that the server MUST NOT enforce \nreferential integrity for the newly created reference.  A client might \nuse this value if, for example, it wanted to populate a collection with \nreferences before their content was made available on the Web.\n\nThe value \"enforce\" means that the server MUST enforce referential \nintegrity for the newly created reference, but does not constrain the \nserver to use any particular policy for enforcing referential integrity.  \nIt is beyond the scope of this specification to define precisely the \nmeaning of referential integrity or to enumerate any set of policies \nthat might be considered compliant.\n\nClients and servers may use other values of the Ref-Integrity header by \nprivate agreement, to specify more precisely the desired policy for \nenforcing referential integrity.  If a server receives an extension \nvalue that it does not understand, it MUST fail the request.\n\nIf the Ref-Integrity header is not present on a MKREF request, the \nserver is free to enforce referential integrity or not, and if it does \nenforce referential integrity, it is free to follow any policy it \nchooses.\n\n6.4 No-Passthrough Request Header\n\nNo-Passthrough = \"No-Passthrough\" \":\"\n\nThe optional No-Passthrough header can be used on any request to a \nreference except POST.  For a direct reference, it forces the request to \nbe applied to the reference itself rather than to its target.  For a \nredirect reference, it prevents a 302 response and instead causes the \nrequest to be applied to the reference itself. If the No-Passthrough \nheader is used on a request to any other sort of resource besides a \nreference, the server SHOULD ignore it.  If the No-Passthrough header is \nused with a POST request, the server MUST respond with a 400 (Bad \nRequest).\n\nThe No-Passthrough header can be used with PROPFIND requests on \ncollections with Depth = infinity.  When it is used in this way, the \nserver MUST return the properties of any redirect references in the \n\nSlein et al.                                                     Page 30\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\ncollection, and not return 302 (Moved Temporarily) status codes for \nthem.  It MUST also return the properties of any direct references in \nthe collection (not the properties of their targets), and it MUST NOT \nfollow any direct references to collections into their target \ncollections.\n\nThe No-Passthrough header can be used with LOCK requests on collections \nwith Depth = infinity.  When it is used in this way, the server MUST \nlock any redirect references in the collection.  It MUST also lock any \ndirect references in the collection (not their target resources), and it \nMUST NOT follow any direct references to collections into their target \ncollections.\n\n6.5 Ordered Entity Header\n\nOrdered = \"Ordered\" \":\" (\"DAV:unordered\" | \"DAV:custom\" | Coded-url)\n\nThe Ordered header may be used with MKCOL to request that the new \ncollection be ordered and to specify its ordering semantics.  A value of \n\"DAV:unordered\" indicates that the collection is not ordered.  That is, \nthe client cannot depend on the repeatability of the ordering of results \nfrom a PROPFIND request. A Coded-url value indicates that the collection \nis ordered, and identifies the semantics of the ordering, allowing a \nhuman user or software package to insert new collection members into the \nordering intelligently.  The Coded-url MAY point to a resource that \ncontains a definition of the semantics of the ordering.  A value of \n\"DAV:custom\" indicates that the collection is to be ordered, but the \nsemantics of the ordering is not being advertised.\n\nIf the Ordered header is not present on a MKCOL request, the server MUST \ntreat the request as if it had an Ordered header with the value \n\"DAV:unordered\".\n\n6.6 Position Request Header\n\nPosition = \"Position\" \":\" (\"First\" | \"Last\" | \n                           ((\"Before\" | \"After\") Coded-url))\n\nThe Position header may be used with any method that adds a member to a \ncollection to tell the server where in the collection ordering to \nposition the new member being added to the collection.  It may be used \nfor both ordinary and referential members.\n\nIf the Coded-url is a relative URL, it is interpreted relative to the \ncollection to which the new member is being added. \n\nIf the Position request header is not used, then:\n\nIf the request is replacing an existing resource, the server MUST \npreserve the present ordering.\n\nIf the request is adding a new member to the collection, the server MUST \nappend the new member to the end of the ordering (if the collection is \nordered).\n\n\nSlein et al.                                                     Page 31\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n7 New Properties\n\n7.1 reftarget Property\n\nName:\t    reftarget\nNamespace:  DAV:\nPurpose:    A required property of referential resources that provides \n            an efficient way for clients to discover the URI of the \n            target resource.  This is a read-only property, whose value \n            can only be set by using the Ref-Target header with a MKREF \n            request.\nValue: \t    URI of the target resource.\n\n<!ELEMENT reftarget href>\n\n7.2 refintegrity Property\n \nName:\t    refintegrity\nNamespace:  DAV:\nPurpose:    A required property of a referential resource that indicates \n            whether the server enforces referential integrity for that \n            reference.  The refintegrity property is defined to allow \n            future support for strong references.  The only value \n            currently defined for refintegrity is weak, which means that \n            the server does not enforce referential integrity for the \n            reference.  Although a server may assign another value to \n            identify its policy for enforcing referential integrity for \n            the reference, it cannot count on clients understanding such \n            extension values.  This is a readonly property.\nValue:\t    weak or an extension value\n\n<!ELEMENT refintegrity (weak | ANY)>\n\n7.3 reftype Property\n\nName:       reftype\nNamespace:  DAV\nPurpose:    A required property of a referential resource that\n            identifies the reference as direct or redirect.  This is a\n            read-only property, whose value can only be set by using\n            the Ref-Type header with a MKREF request.\nValue:      direct | redirect\n\n<!ELEMENT reftype (direct | redirect)>\n\n7.4 references Property\n\nName:\t    references\nNamespace:  DAV:\nPurpose:    Enables clients to discover, for any target resource, what \n            references point to it and what collections contain it by \n            reference.  This is an optional property.  If present, it is \n            a read-only property, maintained by the server.\nValue:\t    List of the URIs of the references that point to the target \n            resource.\n\nSlein et al.                                                     Page 32\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\n<!ELEMENT references (href*)>\n\n7.5 orderingtype Property\n\nName:\t    orderingtype\nNamespace:  DAV:\nPurpose:    Indicates whether the collection is ordered and, if so, \n            uniquely identifies the semantics of the ordering being \n            used.  May also point to an explanation of the semantics in \n            human and / or machine-readable form.  At a minimum, this \n            allows human users who add members to the collection to \n            understand where to position them in the ordering.\nValue:\t    unordered for an unordered collection, or a URI that \n            uniquely identifies the semantics of the collection's \n            ordering.  The URI MAY point to a definition of the ordering \n            semantics.  The value custom may be used for a collection \n            that is to be ordered, but for which the semantics are not \n            being advertised.\n\n<!ELEMENT orderingtype (arbitrary | custom | href) >\n\n8 New XML Elements\n\n8.1 reference XML Element\n\nName: \t    reference\nNamespace:  DAV:\nPurpose:    A new value of the DAV:resourcetype property that identifies \n            its resource as a referential resource.  The \n            DAV:resourcetype \n            property of a referential resource MUST have this value.\nValue:\t    EMPTY\n\n<!ELEMENT reference EMPTY >\n\n8.2 direct XML Element\n\nName:\t    direct\nNamespace:  DAV:\nPurpose:    A value for the DAV:reftype property that identifies its \n            resource as a direct reference.\nValue:      EMPTY\n\n<!ELEMENT direct EMPTY >\n\n8.3 redirect XML Element\n\nName:\t    redirect\nNamespace:  DAV:\nPurpose:    A value for the DAV:reftype property that identifies its \n            resource as a redirect reference.\nValue:      EMPTY\n\n<!ELEMENT redirect EMPTY >\n\nSlein et al.                                                     Page 33\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\n8.4 weak XML Element\n\nName:\t    weak\nNamespace:  DAV:\nPurpose:    A value of the DAV:refintegrity property.  It means that the \n            server does not enforce referential integrity for the \n            reference to which the property belongs.\nValue: \t    EMPTY\n\n<!ELEMENT weak EMPTY >\n\n8.5 location XML Element\n\nName:       location\nNamespace:  DAV:\nPurpose:    For use with 302 (Moved Temporarily) response codes in \n            Multi-Status responses.  It contains the URL of the \n            temporary location of the resource.  In the context of \n            redirect references, this value is the URL of the target \n            resource.  It is analogous to the Location header in HTTP \n            302 responses defined in [HTTP] Section 10.3.3 \"302 Moved \n            Temporarily.\"  This is an extension to the syntax of the \n            DAV:response element defined in [WebDAV].\nValue:      href\n\n<!ELEMENT location href >\n\n8.6 unordered XML Element\n\nName:\t    unordered\nNamespace:  DAV:\nPurpose:    A value of the DAV:orderingtype property that indicates that \n            the collection is not ordered.  That is, the client cannot \n            depend on the repeatability of the ordering of results from \n            a PROPFIND request.\nValue:\t    EMPTY\n\n<!ELEMENT unordered EMPTY >\n\n8.7 custom XML Element\n\nName: \t    custom\nNamespace:  DAV:\nPurpose:    A value of the DAV:orderingtype property that indicates that \n            the collection is ordered, but the semantics of the ordering \n            are not being advertised. \nValue: \t    EMPTY\n\n<!ELEMENT custom EMPTY >\n\n8.8 order XML Element\n        \nName: \t    order\nNamespace:  DAV\n\nSlein et al.                                                     Page 34\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nPurpose:    For use with the new ORDERPATCH method.  Describes a change \n            to be made in a collection ordering.\nValue: \t    A description of the new positions of collection members in \n            the collection's ordering.\n\n<!ELEMENT order (member+) >\n\n8.9 ordermember XML Element\n \nName: \t    ordermember\nNamespace:  DAV\nPurpose:    Occurs in the order XML Element, and describes the new \n            position of a single collection member in the collection's \n            ordering.\nValue: \t    An href containing a relative URI, and a description of its \n            new position in the ordering.  The href XML element is \n            defined in [WebDAV], Section 11.3.\n\n<!ELEMENT ordermember (href, position) >\n\n8.10 position XML Element\n\nName: \t    position\nNamespace:  DAV\nPurpose:    Occurs in the member XML element.  Describes the new \n            position in a collection's ordering of one of the \n            collection's members.\nValue: \t    The new position can be described as first in the \n            collection's ordering, last in the collection's ordering, \n            before some other member of the collection, or after some \n            other member of the collection.\n\n<!ELEMENT position (first | last | before | after)>\n\n8.11 first XML Element\n\nName: \t    first\nNamespace:  DAV\nPurpose:    Occurs in the position XML element.  Describes the \n            collection member's position as first in the collection's \n            ordering.\nValue: \t    EMPTY\n\n<!ELEMENT first EMPTY >\n\n8.12 last XML Element\n\nName: \t    last\nNamespace:  DAV\nPurpose:    Occurs in the position XML element.  Describes the \n            collection member's position as last in the collection's \n            ordering.\nValue: \t    EMPTY\n\n<!ELEMENT last EMPTY >\n\nSlein et al.                                                     Page 35\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\n8.13 before XML Element\n\nName: \t    before\nNamespace:  DAV\nPurpose:    Occurs in the position XML element.  Describes the \n            collection member's position as coming before some other \n            collection member in the collection's ordering.\nValue: \t    href of the member it precedes in the ordering\n\n<!ELEMENT before href >\n\n8.14 after XML Element\n\nName: \t    after\nNamespace:  DAV\nPurpose:    Occurs in the position XML element.  Describes the \n            collection member's position as coming after some other \n            collection member in the collection's ordering.\nValue: \t    href of the member it follows in the ordering\n\n<!ELEMENT after href >\n\n9 Extensions to the DAV:multistatus XML Element\n\nAs described in Sections 4.5 and 4.6, the DAV:location element and the \nDAV:reftype property may be returned in the DAV:response element of a \n207 Multi-Status response, to allow clients to resubmit their requests \nto the target resource of a redirect reference.  \n\nAs described in Section 4.13, the DAV:reftype and DAV:reftarget \nproperties may be returned in the DAV:response element of a 207 Multi-\nStatus response, to indicate that a problem is not with a direct \nreference, but with its target resource.\n\nConsequently, the definition of the DAV:response XML element changes to \nthe following:\n\n<!ELEMENT response (href, ((href*, status, location?, reftype?, \nreftarget?) | (propstat+)), responsedescription?) >\n\n10 Capability Discovery\n\n10.1 Using OPTIONS\n\nSince referencing and ordering are independent capabilities, a resource \nMAY support either or both.  A resource that provides referencing MUST \nsupport redirect references, and MAY in addition support direct \nreferences.  A response to an OPTIONS request MUST indicate which of \nthese capabilities the resource supports.\n\nThis specification defines two new methods: MKREF in support of \nreferencing, and ORDERPATCH in support of ordering.  The response MUST \nindicate which of these methods the resource allows.  In addition, the \nresponse MUST include the DAV header, as described in Sections 9.1 and \n\nSlein et al.                                                     Page 36\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n15 of [WebDAV].  Three new compliance classes are defined here for use \nwith the DAV header: basicref, directref, and orderedcoll. The value \nbasicref indicates that the resource supports at least redirect \nreferences.  The value directref indicates that the resource supports \ndirect references.  The value orderedcoll indicates that the resource \nsupports ordering.\n\nWhen responding to an OPTIONS request, only a collection or a null \nresource can include orderedcoll in the value of the DAV header.  By \nincluding orderedcoll, the resource indicates that its immediate member \nURIs can be ordered.  It implies nothing about whether any collections \nidentified by its member URIs can be ordered.\n\nWhen responding to an OPTIONS request, any type of resource may include \nbasicref or directref in the value of the DAV header.  Including \nbasicref indicates that the server permits a redirect reference at the \nrequest URI.  Including directref indicates that the server permits a \ndirect reference at the request URI.\n\n10.2 Example\n\nRequest:\n\nOPTIONS /somecollection/ HTTP/1.1\nHOST: somehost.org\n\nResponse:\n\nHTTP/1.1 200 OK\nDate: Tue, 20 Jan 1998 20:52:29 GMT\nConnection: close\nAccept-Ranges: none\nAllow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE, MKCOL, \nPROPFIND, PROPPATCH, LOCK, UNLOCK, MKREF, ORDERPATCH\nPublic: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE, MKCOL, \nPROPFIND, PROPPATCH, LOCK, UNLOCK, MKREF, ORDERPATCH\nDAV: 1, 2, basicref, directref, orderedcoll\n\nThis response indicates that the resource /somecollection/ is level 1 \nand level 2 compliant, as defined in [WebDAV].  In addition, \n/somecollection/ supports ordering and is in a part of the server \nnamespace that allows creation of redirect and direct references.  (In \nlight of the semantics of MKREF, the resource currently at \n/somecollection/ would have to be deleted before a reference could be \ncreated at that URI.) \n\n11 Dependencies on Other Specifications\n\nTBD\n\n12 Security Considerations\n\nThis section is provided to detail issues concerning security \nimplications of which WebDAV applications need to be aware. \n\n\nSlein et al.                                                     Page 37\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nAll of the security considerations of HTTP/1.1 and the base WebDAV \nprotocol also apply to WebDAV collections.  In addition, referential \nresources and ordered collections introduce several new security \nconcerns and increase the risk of some existing threats.  These issues \nare detailed below.\n\n12.1 Privacy Concerns\n\nBy creating references on a trusted server, it is possible for a hostile \nagent to induce users to send private information to a target on a \ndifferent server.   This risk is mitigated somewhat for redirect \nreferences, since clients are required to notify the user of the \nredirection for any request other than GET or HEAD. (See [HTTP], Section \n10.3.3 Moved Temporarily.)  For direct references, clients can determine \nthe resource type, reference type, and target location before sending a \nrequest, but are not required to notify users if the target is on \nanother server. \n\n12.2 Redirect Loops\n\nAlthough redirect loops were already possible in HTTP 1.1, the \nintroduction of referential resources creates a new avenue for clients \nto create loops accidentally or maliciously.  If the referential \nresource and its target are on the same server, the server may be able \nto detect MKREF requests that would create loops. See also [HTTP], \nSection 10.3 \"Redirection 3xx.\" \n\n12.3 References and Denial of Service\n\nDenial of service attacks were already possible by posting URLs that \nwere intended for limited use at heavily used Web sites.  The \nintroduction of referential resources creates a new avenue for similar \ndenial of service attacks.  Clients can now create references at heavily \nused sites to target locations that were not designed for heavy usage.\n\n12.4 References May Reveal Private Locations\n\nThere are several ways that the referencing mechanisms described here \nmay reveal information about directory structures.  First, the \nDAV:reftarget property of every reference contains the URI of the target \nresource.  Anyone who has access to the reference can discover the \ndirectory path that leads to the target resource.   The owner of the \ntarget resource may have wanted to limit knowledge of this directory \nstructure.\n\nSufficiently powerful access control mechanisms can control this risk to \nsome extent.  Property-level access control could prevent users from \nexamining the DAV:reftarget property.  (The Ref-Target header, which is \nreturned in most responses to requests on direct references, reveals the \nsame information, however.)  In some environments, the owner of a \nresource might be able to use access control to prevent others from \ncreating references to that resource.\n\nSecond, although this specification does not require servers to maintain \nreferential integrity, it does not prevent them from doing so.  If a \n\nSlein et al.                                                     Page 38\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nserver updates a reference\u2019s DAV:reftarget property when its target \nresource is moved, there is the risk that a private location will be \nrevealed in the new value of DAV:reftarget.  Clients can avoid this risk \nby doing a COPY followed by a DELETE rather than a MOVE.\n\nFinally, if backpointers are maintained on the target resource, the \nowners of references face these same risks.  The directory structures \nwhere references are located are revealed to anyone who has access to \nthe DAV:references property on a target resource.  Moving a reference \nmay reveal its new location to anyone with access to DAV:references on \nits target resource.\n\n12.5 DAV:references and Denial of Service\n\nIf the server maintains the DAV:references property in response to \nreferences created in other administrative domains, it is exposed to \nhostile attempts to make it devote resources to adding references to the \nlist.\n\n12.6 DAV:references and Malicious Deletion of Resources\n\nServers that support the DAV:references property should insure that \nclients cannot create editable properties with the name DAV:references.  \nAn editable DAV:references property would constitute a security risk on \nservers that enforce referential integrity by deleting references when \ntheir target is deleted.  These servers could be tricked into deleting a \nresource by listing it in the DAV:references property of some target \nresource.\n\n12.7 Denial of Service and DAV:orderingtype\n\nThere may be some risk of denial of service at sites that are advertised \nin the DAV:orderingtype property of collections.  However, it is \nanticipated that widely-deployed applications will use hard-coded values \nfor frequently-used ordering semantics rather than looking up the \nsemantics at the location specified by DAV:orderingtype.\n\n13 Internationalization Considerations\n\nThis specification follows the practices of [WebDAV] in encoding all \nhuman-readable content using XML [XML] and in the treatment of names.  \nConsequently, this specification complies with the IETF Character Set \nPolicy [Alvestrand].\n\nWebDAV applications MUST support the character set tagging, character \nset encoding, and the language tagging functionality of the XML \nspecification.  This constraint ensures that the human-readable content \nof this specification complies with [Alvestrand].\n\nAs in [WebDAV}, names in this specification fall into three categories: \nnames of protocol elements such as methods and headers, names of XML \nelements, and names of properties.  Naming of protocol elements follows \nthe precedent of HTTP, using English names encoded in USASCII for \nmethods and headers.  The names of XML elements used in this \nspecification are English names encoded in UTF-8.\n\nSlein et al.                                                     Page 39\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\nFor error reporting, [WebDAV] follows the convention of HTTP/1.1 status \ncodes, including with each status code a short, English description of \nthe code (e.g., 423 Locked).  Internationalized applications will ignore \nthis message, and display an appropriate message in the user's language \nand character set.\n \nFor rationales for these decisions and advice for application \nimplementors, see [WebDAV].\n\n14 IANA Considerations\n\nThis document uses the namespaces defined by [WebDAV] for properties and \nXML elements.  All other IANA considerations mentioned in [WebDAV] also \napply to this document.\n\n15 Copyright\n\nTo be supplied.\n\n16 Intellectual Property\n\nTo be supplied.\n\n17 Acknowledgements\n\nThis draft has benefited from thoughtful discussion by Jim Amsden, Steve \nCarter, Ken Coar, Ellis Cohen, Bruce Cragun, Spencer Dawkins, Rajiv \nDulepet, David Durand, Roy Fielding, Yaron Goland, Fred Hitt, Alex \nHopmann, Marcus Jager, Chris Kaler, Manoj Kasichainula, Rohit Khare, \nDaniel LaLiberte, Steve Martin, Surendra Koduru Reddy, Sam Ruby, Bradley \nSergeant, Nick Shelness, John Stracke, John Tigue, John Turner, and \nothers. \n\n18 References\n\n[WebDAV] Y. Y. Goland, E. J. Whitehead, Jr., A. Faizi, S. R. Carter, D. \nJensen, \"HTTP Extensions for Distributed Authoring - WebDAV.\" Draft-\nietf-webdav-protocol-09. Internet Draft, work in progress.  Microsoft, \nU.C. Irvine, Netscape, Novell. November, 1998.\n\n[DASL] Saveen Reddy, D. Jensen, Surendra Reddy, R. Henderson, J. Davis, \nA. Babich, \"DAV Searching & Locating.\" Draft-reddy-dasl-protocol-03. \nInternet Draft, work in progress. Microsoft, Novell, Oracle, Netscape, \nXerox, Filenet.  November, 1998. \n\n[CollReq] J. Slein, J. Davis, \"Requirements for Advanced Collection \nFunctionality in WebDAV.\" Draft-ietf-webdav-collection-reqts-02. \nInternet Draft, work in progress.  Xerox, 1998.\n\n[HTTP] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, T. Berners-Lee, \n\"Hypertext Transfer Protocol -- HTTP/1.1.\" RFC 2068.  UC Irvine, DEC, \nMIT/LCS.  January, 1997.\n\n[RFC2119] S. Bradner, \"Key words for use in RFCs to Indicate Requirement \n\nSlein et al.                                                     Page 40\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\nLevels.\"  RFC 2119, BCP 14.  Harvard University.  March, 1997.\n\n[URI] T. Berners-Lee, R. Fielding, L. Masinter, \"Uniform Resource \nIdentifiers (URI): Generic Syntax.\" RFC 2396. MIT/LCS, U.C. Irvine, \nXerox. August, 1998.\n\n[XML] T. Bray, J. Paoli, C.M. Sperberg-McQueen, \"Extensible Markup \nLanguage (XML).\"  World Wide Web Consortium Recommendation REC-xml-\n19980210. http://www.w3.org/TR/1998/REC-xml-19980210.\n\n19 Authors' Addresses\n\nJ. Slein\nXerox Corporation\n800 Phillips Road, 105-50C\nWebster, NY 14580\nEmail: jslein@crt.xerox.com\n\nJ. Davis\nXerox Corporation\n3333 Coyote Hill Road\nPalo Alto, CA 94304\nEmail: jdavis@parc.xerox.com\n\nT. Chihaya\nDataChannel, Inc.\n155 108th Ave. N.E., Suite 400\nBellevue, WA 98004\nEmail: Tyson@DataChannel.com\n\nG. Clemm\nRational Software Corporation\n20 Maguire Road\nLexington, MA 02173-3104\nEmail: gclemm@rational.com\n\nC. Fay\nFileNet Corporation\n3565 Harbor Boulevard\nCosta Mesa, CA 92626-1420\nEmail: cfay@filenet.com\n\nE.J. Whitehead Jr.\nDept. of Information and Computer Science\nUniversity of California, Irvine\nIrvine, CA 92697-3425\nEmail: ejw@ics.uci.edu\n\nA. Babich\nFileNet Corporation\n3565 Harbor Boulevard\nCosta Mesa, CA 92626-1420\nEmail: ababich@filenet.com\n\n20 Appendices\n\nSlein et al.                                                     Page 41\n\fINTERNET-DRAFT          WebDAV Collections Protocol        February 1999\n\n\n20.1 Appendix 1 - Extensions to the WebDAV Document Type Definition\n\n<!--============= XML Elements from Section 8 =========================-\n->\n<!ELEMENT reference EMPTY >\n<!ELEMENT direct EMPTY >\n<!ELEMENT redirect EMPTY >\n<!ELEMENT weak EMPTY >\n<!ELEMENT location href>\n<!ELEMENT unordered EMPTY >\n<!ELEMENT custom EMPTY >\n<!ELEMENT order (member+) >\n<!ELEMENT ordermember (href, position) >\n<!ELEMENT position (first | last | before | after)>\n<!ELEMENT first EMPTY >\n<!ELEMENT last EMPTY >\n<!ELEMENT before href >\n<!ELEMENT after href >\n<!--============= Property Elements from Section 7 ====================-\n->\n<!ELEMENT reftarget href>\n<!ELEMENT refintegrity (weak | extension)>\n<!ELEMENT reftype (direct | redirect)>\n<!ELEMENT references (href*)>\n<!ELEMENT orderingtype (arbitrary | custom | href) >\n<!--======== Changes to the DAV:multistatus Element from Section 9 ====-\n->\n<!ELEMENT response (href, ((href*, status, location?, reftype?, \nreftarget?) | (propstat+)), responsedescription?) >\n\nExpires August 12, 1999\n\nSlein et al.                                                     Page 42\n\f", "encoding": "Windows-1252"}