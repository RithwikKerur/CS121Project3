{"url": "https://www.ics.uci.edu/~kay/courses/i42/hw/hw3.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Friday, January 20, 2006 10:54 AM\">\n<TITLE>Third Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2441013\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for Informatics 42, a second-quarter course in computer science in Information and Computer Science, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/i42/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT FACE=\"Goudy Old Style\">Informatics 42 &bull; Winter 2012 &bull; David G. Kay\n  &bull; UC Irvine</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\" SIZE=6><B>Third Homework</B></FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\">Get your work checked and signed off by a classmate, then show it to your TA in lab by Monday, January 30.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(a) </B>If you haven't already, take the time to read the whole writeup for Lab Assignment B. You'll be revisiting it many times, but it's good to get an overview up front.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(b) </B>Make a copy of your line-numbering\nprogram from last week; rename it to stats.py.  It should read a file and print\nout (to the standard output, not to another file) the total number of lines,\nthe average line length (to three decimal places), the number of empty (zero-length)\nlines, the average length of non-empty lines (again to three places), the\nlength of the longest line, the longest line itself, the length of the shortest\nnon-empty line, and the shortest non-empty line itself.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">These are some classic &quot;micro-algorithms&quot;\n  on a collection of data:  Count the items, sum the items, find the largest,\n  find the smallest. By this time, computing these should be nearly second nature for you.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c)</B></FONT> <FONT FACE=\"Goudy Old Style\">Years ago, before they built a\nbridge, you could reach the Isle of Skye in the Scottish Highlands from\ntwo points on the mainland:  Mallaig and Kyle of Lochalsh.  Each town ran\na car ferry service&mdash;a boat that takes cars (and people) to Skye and back.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(c.1)</B> Each Mallaig ferry has a single\n  automobile entrance.  The cars drive on and go as far back in the boat as\n  they can.  When the ferry reaches Skye, the cars leave the boat by the same\n  entrance, so the car at the far end of the boat is the last one off.  Is\n  the Mallaig ferry more like a list, a stack, a queue, or a tree?</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(c.2)</B> Each ferry from Kyle of Lochalsh\n  has a ramp at both ends.  The cars drive onto the boat using the ramp at\n  one end; each car drives as far down the boat as possible.  When the ferry\n  reaches Skye, it docks so that the ramp at the other end connects with the\n  dock and the cars drive straight off.  (The Balboa Island ferry works the\n  same way.)  Is the Kyle of Lochalsh ferry more like a list, a stack, a\n  queue, or a tree?</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(c.3)</B> Which ferry is more efficient\n  for loading and unloading cars, and why?</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(d)</B>   Read over (for the gist, not to memorize) the documentation at Python.org for the <a href=\"http://docs.python.org/py3k/library/datetime.html\"><code>datetime</code></a> library. You'll be using this in the current lab.  [We've given you the link, but you should be able to find the page yourself at python.org].</FONT></P>\n<P>To use a library (analogously to using a Teachpack in DrRacket), you say <code>import datetime</code> near the top of the program, after which you can use the classes and methods defined in the library, e.g., <code>finalDate = datetime.date(2012, 3, 6)</code>.  You can also import individual identifiers (class and method names) from the library by saying, e.g., <code>from datetime import date</code>, after which you can just say <code>flagDay = date(2012,6,14)</code>.</P>\n<P><FONT FACE=\"Goudy Old Style\">Write a few lines of Python code to:</FONT></P>\n<ul>\n  <li>Create the date February 1, 2012 and another date, February 18, 2012.</li>\n  <li>Print the difference between those two dates</li>\n  <li>Create a date from a string like <code>'2/14/2012'</code> (the string method <code>split</code> will help a lot; look it up)</li>\n  <li>Use the <code>strftime</code> method to print a date in a format like <code>Today is Tuesday, February 1, 2012.</code><BR>\n</li>\n</ul>\n<P>\n  <FONT FACE=\"Helvetica\" SIZE=1>Written by David G. Kay, Winter 2005.  The Skye ferry question is an exam questions\nfrom ages ago. Modified by David G. Kay, Winter 2006, by Alex Thornton, Winter 2007,  by David G. Kay, Winter 2008, and by David G. Kay for Python, WInter 2012</FONT></P>\n<BR CLEAR=ALL>\n</BODY>\n</HTML>", "encoding": "ascii"}