{"url": "https://www.ics.uci.edu/~kay/courses/i42/w12.fxrqans.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Wednesday, March 22, 2006 8:49 PM\">\n<TITLE>Final Review Key</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"9D9AF3D1\">\n</HEAD>\n<BODY>\n<P><FONT FACE=\"Palatino\">UC Irvine &bull; Information &amp; Computer Science &bull; David G.\n  Kay &bull; Informatics 42 &bull; Winter 2012</FONT></P>\n<P ALIGN=CENTER> <FONT FACE=\"Palatino\" SIZE=5>Review Questions for the Final Exam (with Answers)</FONT></P>\n<P> <FONT FACE=\"Palatino\">These questions are representative of actual exam\n  questions; most of them have appeared on exams in the past.  But this isn&#39;t\n  actually a sample exam, since the number and distribution of questions doesn&#39;t\n  match an actual exam. This document includes more than one question of\n  the same type (so you have extra practice for some of the harder concepts). Also, of course, the actual exam may cover any topic from the course, even\n  if it&#39;s not represented here; some questions about the simulator program are possible, for example.  The overall form of the exam will look\n  more or less like last quarter&#39;s final (or the quizzes, though of course\n  longer). </FONT></P>\n<P>\n  <FONT FACE=\"Palatino\">1. </FONT><FONT FACE=\"AGaramond\" SIZE=4>We can find\nanalogies to the classic data structures in the literary world:</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(a)  Some large dictionaries and encyclopedias\nhave thumb tabs for each letter, cut-outs in the edge of the volume so the\nreader can turn directly to the first page of listings for that letter.\n Is this access to the beginning of each letter&#39;s listings more like\na stack, queue, array, tree, or linked list?<A NAME=\"_14_1111\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Array:  Direct access</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(b)  When cookbooks describe complicated recipes,\nthey break them into sub-recipes, much like procedures in a programming\nlanguage.  Thus, the recipe for a cake might say, &quot;Use the chocolate\nicing recipe on page 23,&quot; and that chocolate icing recipe might say\nin turn, &quot;See page 195 for instructions on melting chocolate.&quot;\n Which data structure would you use to represent the sequence of recipes\nand sub-recipes being carried out at a given moment, to make it most convenient\nto return to the &quot;calling&quot; recipe when each sub-recipe is completed:\n a stack, queue, array, tree, or linked list?<A NAME=\"_14_1737\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Stack:  saving the\ncontext</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(c)  Is a book&#39;s table of contents, with\nchapters, sections, and sub-sections, more like a stack, queue, array, tree,\nor linked list?<A NAME=\"_14_1913\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Tree:  it&#39;s hierarchical</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d)  Most newspapers run a new crossword puzzle\nevery day.  Below the puzzle it generally says, &quot;Solution in tomorrow&#39;s\nnewspaper.&quot;  Is this sequence of puzzles and solutions more like a\nstack, queue, array, tree, or linked list?<A NAME=\"_14_2183\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Linked list:  It points\nto the next item</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(e)  Some people are very rigid about reading\nnewspapers in chronological order; they won&#39;t read one day&#39;s newspaper\nunless they&#39;ve read all the previous days&#39; papers, in order.  Even\nif days or weeks go by when they don&#39;t have time to read the paper,\nthey&#39;ll save the papers, in order, and read them in order when time\npermits.  Is this arrangement more like a stack, queue, array, tree, or\nlinked list?<A NAME=\"_14_2649\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Queue:  First in,\nfirst out.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">2.  </FONT><FONT FACE=\"AGaramond\" SIZE=4>At right\nis a binary tree.  In what order would its nodes be visited in a  </FONT><IMG SRC=\"w06_review_questions_key_files/sidebar_113.gif\" WIDTH=150 HEIGHT=155 HSPACE=6 VSPACE=6 ALIGN=RIGHT>\n<FONT FACE=\"AGaramond\" SIZE=4> </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(a)  preorder traversal? &#160;  &#160; <A NAME=\"_14_2802\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">KIEFJGCDABH</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(b)  postorder traversal? &#160; <A NAME=\"_14_2852\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">EFICABDGHJK</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(c)  inorder traversal? &#160;  &#160; <A NAME=\"_14_2901\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">EIFKCGADBJH</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d)  breadth-first traversal?</FONT><FONT FACE=\"Gill Sans Condensed Bold\">\n&#160; <A NAME=\"_14_2959\"></A><FONT COLOR=\"#FF0000\"> &#160; KIJEFGHCDAB</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">3.  Draw the binary search tree that results from\ninserting these items in this order:  31, 41, 59, 26, 53, 58, 62</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">4.  </FONT><FONT FACE=\"AGaramond\" SIZE=4>Consider\nthe following function:<A NAME=\"_14_3143\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>int DoSomething (int a, int b)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>// precondition:  assume b &gt;= 0</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>{  if ( b == 0 )</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; return (a); &#160;\n</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; else </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; return (DoSomething(a-1,\nb-1));  </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>}</TT></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(a)  What is returned by each of the following\nstatements?<A NAME=\"_14_3352\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; DoSomething(3, 1)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; DoSomething(6, 2)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; DoSomething(29, 5)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; DoSomething(25000, 23000)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(b)  In one English word (or in mathematical\nnotation), describe the value this function returns in terms of its arguments.<A NAME=\"_14_3567\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Subtraction:   a -\nb</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(c) What are recurrence relations and why do they matter?</FONT></P>\n<P><font color=\"#FF0000\" face=\"Gill Sans Condensed Bold\">A recurrence relation is a representation of the operations required by some recursive code, typically stated in terms of the base case and in terms of the recursive case. It is relatively easy to determine the recurrence relation from the code itself. It takes a little effort to &quot;solve&quot; the recurrence relation, converting it into &quot;closed form&quot; (a polynomial), but once you have the polynomial you can easily determine the O-notation.</font></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d)  Now look at this function:<A NAME=\"_14_3868\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>int DoSomethingElse (int a, int b)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>// precondition:  assume b &gt;= 0</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>{  if ( b == 0 )</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; return (a); &#160;\n</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; else </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; return (DoSomethingElse(a,\nb-1) - 1);  </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>}</TT></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d.1)  Does <A NAME=\"_14_4040\"></A></FONT><FONT FACE=\"Courier New\">DoSomethingElse</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nproduce the same results as <A NAME=\"_14_4090\"></A></FONT><FONT FACE=\"Courier New\">DoSomething</FONT><FONT FACE=\"AGaramond\" SIZE=4>?\n If not, explain how the results differ.<A NAME=\"_14_4150\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Yes, they produce\nthe same results.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d.2)  Which of these routines are tail recursive--<A NAME=\"_14_4248\"></A></FONT><FONT FACE=\"Courier New\">DoSomething</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n<A NAME=\"_14_4267\"></A></FONT><FONT FACE=\"Courier New\">DoSomethingElse</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nneither, or both?  For any non-tail-recursive routine, indicate which specific\noperation in its code makes it non-tail-recursive.<A NAME=\"_14_4420\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">DoSomethingElse is\nnot tail-recursive because of the last subtraction (which is done after\nreturning from the recursive call).</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">5.  Below is the state transition diagram for an FSA.\n This machine reads a whole word at a time (rather than a character at a\ntime, as we did in class).</FONT></P>\n<P>\n<CENTER>\n<IMG SRC=\"w06_review_questions_key_files/sidebar_255.gif\" WIDTH=511 HEIGHT=138 HSPACE=6 VSPACE=6>\n</CENTER>\n</P>\n<BR><BR><BR>\n<P>\n<FONT FACE=\"Palatino\">(a)  For each of the following strings, circle <FONT SIZE=2>ACCEPT</FONT>\nif the FSA above accepts the string and <FONT SIZE=2>REJECT</FONT> if it\ndoes not:</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">&#160;&#160; <FONT SIZE=2>ACCEPT      REJECT </FONT>&#160;\nJill eats tantrums\n<BR>\n&#160;&#160; <FONT SIZE=2>ACCEPT      REJECT </FONT>&#160; Joe eats loud\nbig bad big big apples\n<BR>\n&#160;&#160; <FONT SIZE=2>ACCEPT      REJECT </FONT>&#160; Joe throws apples\n<BR>\n&#160;&#160; <FONT SIZE=2>ACCEPT      REJECT </FONT>&#160; Jill eats\n<BR>\n&#160;&#160; <FONT SIZE=2>ACCEPT      REJECT </FONT>&#160; Joe throws loud\nloud tantrums\n<BR>\n&#160;&#160; <FONT SIZE=2>ACCEPT      REJECT </FONT>&#160; Jill throws Joe\n<BR>\n&#160;&#160; </FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">(b)  Draw a transition table for the FSA shown above.\n You may leave transitions to the error state blank rather than writing\nin &quot;<FONT SIZE=2>ERROR</FONT>.&quot;</FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT><U>&#160;   Jill   Joe   throws   eats \n big   bad   loud   tantrums   apples   OTHER</U></TT></FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><U>S1</U>_______________________________________________________________________</FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><U>S2</U>_______________________________________________________________________</FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><U>S3</U>_______________________________________________________________________</FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><U>S4</U>_______________________________________________________________________</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">(c)  Modify the FSA diagram above so that Jane may\nalso occur anywhere Joe or Jill may occur (in the language accepted by the\nFSA).</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">(d)  Draw a new FSA that accepts the language containing\nthe following six sentences (and no others):</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Joe likes plums &#160;  &#160; Joe likes big plums\n&#160; Joe likes very big plums\n<BR>\n&#160;&#160; Joe eats plums &#160;  &#160; Joe eats big plums &#160; Joe\neats very big plums</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">6.   Below is the state transition diagram for an\nFSA.</FONT></P>\n<P>\n<CENTER>\n<IMG SRC=\"w06_review_questions_key_files/sidebar_235.gif\" WIDTH=495 HEIGHT=134 HSPACE=6 VSPACE=6>\n</CENTER>\n</P>\n<BR><BR><BR><BR><BR><BR><BR><BR><BR>\n<P>\n<FONT FACE=\"Palatino\">(a)  Give three examples of strings that the machine\ndescribed above accepts.<A NAME=\"_14_6172\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">aba, aaaaaba, abaaaaa,\naaabaaa</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(b)  Give three examples of strings (using the same\nalphabet) that the machine described above rejects.<A NAME=\"_14_6317\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">a, ab, ba, aaaab,\nhello</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(c)  In one brief English sentence, describe the language\nthat this machine implements.<A NAME=\"_14_6438\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\nA b surrounded with one or more a&#39;s on each end. </FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">(d)  Describe this language using a regular expression--that\nis, using just the input symbols, parentheses, the union symbol, and asterisks<A NAME=\"_14_6638\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">.\n aa*baa*</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">(e)  Modify the FSA diagram above so that it accepts\nthe language </FONT><FONT FACE=\"Courier\"><TT>a</TT></FONT><FONT FACE=\"Palatino\">*(</FONT><FONT FACE=\"Courier\"><TT>b</TT></FONT><FONT FACE=\"Symbol\"><IMG SRC=\"w06_review_questions_key_files/symbol12_c8.gif\" WIDTH=12 HEIGHT=17 DESCENT=4 ALIGN=\"absbottom\" ALT=\"&gt;&gt;\"></FONT><FONT FACE=\"Courier\"><TT>c)a</TT></FONT><FONT FACE=\"Palatino\">*\n(that is, any string of zero or more &#39;</FONT><FONT FACE=\"Courier\"><TT>a</TT></FONT><FONT FACE=\"Palatino\">&#39;s,\nfollowed by a </FONT><FONT FACE=\"Courier\"><TT>b</TT></FONT><FONT FACE=\"Palatino\">\nor a </FONT><FONT FACE=\"Courier\"><TT>c</TT></FONT><FONT FACE=\"Palatino\">,\nfollowed by zero or more &#39;</FONT><FONT FACE=\"Courier\"><TT>a</TT></FONT><FONT FACE=\"Palatino\">&#39;s).\n You may draw your answer on the printed diagram.</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">(f)  Draw a state transition table below that reflects\nthe new machine described above in part (e). &#160; </FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">7.  One way to represent transitions in a finite-state\nmachine is in a transition table; the entries in the table show the machine&#39;s\n<I>next</I> state, given its current state and a particular input.  The\ntable at left below implements the machine shown at right below.</FONT></P>\n<P ALIGN=RIGHT>\n<IMG SRC=\"w06_review_questions_key_files/sidebar_230.gif\" WIDTH=212 HEIGHT=114 HSPACE=6 VSPACE=6 ALIGN=RIGHT>\n</P>\n<P>\n<IMG SRC=\"w06_review_questions_key_files/sidebar_224.gif\" WIDTH=276 HEIGHT=113 ALIGN=LEFT>\n</P>\n<BR><BR><BR><BR><BR><BR><BR>\n<P>\n<FONT FACE=\"Palatino\">(a)  Give four examples of strings that the machine\ndescribed above accepts.<A NAME=\"_14_7377\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">ab, abab, abab, empty</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(b)  Give four examples of strings (using the same\nalphabet) that the machine described above rejects.<A NAME=\"_14_7512\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">a, aba, abb, baa</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(c)  In one brief English sentence, describe the language\nthat this machine implements.<A NAME=\"_14_7627\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Any sequence (zero\nor more) of ab strings.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(d)  Describe this language using a regular expression--that\nis, using just the input symbols, parentheses, the union symbol, and asterisks.<A NAME=\"_14_7819\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n </FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(ab)*</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(e)  Modify the FSA diagram above so that it accepts\nthe language (</FONT><FONT FACE=\"Courier\"><TT>a</TT></FONT><FONT FACE=\"Palatino\">*</FONT><FONT FACE=\"Courier\"><TT>bc</TT></FONT><FONT FACE=\"Palatino\">)*\n(that is, any string of zero or more parts, where each part contains any\nnumber of &#39;</FONT><FONT FACE=\"Courier\"><TT>a</TT></FONT><FONT FACE=\"Palatino\">&#39;s\nfollowed by a &#39;</FONT><FONT FACE=\"Courier\"><TT>b</TT></FONT><FONT FACE=\"Palatino\">&#39;\nand a &#39;</FONT><FONT FACE=\"Courier\"><TT>c</TT></FONT><FONT FACE=\"Palatino\">&#39;).<A NAME=\"_14_8039\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n Init:  S1.    Accept:  S1.      S1:  a --&gt; S1, b --&gt; S2     S2: c--&gt;\nS1</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(f)  Modify the transition table above to reflect\nthe new machine described in part (e).<A NAME=\"_14_8210\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160;&#160; a &#160;\nb &#160; c</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">S1 &#160; S1 &#160;\nS2 &#160; xx</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">S2 &#160; xx &#160;\nxx &#160; S1</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">8.  Below is a finite-state machine that accepts telephone\nnumbers (&#39;digit&#39; means any decimal digit, 0-9):</FONT></P>\n<P>\n<IMG SRC=\"w06_review_questions_key_files/picture_161.gif\" WIDTH=452 HEIGHT=166 ALT=\"\">\n</P>\n<P>\n<FONT FACE=\"Palatino\">(a)  Draw the state transition table for this FSA.\n You may leave blank any unspecified transitions; you may omit the error\nstate.  We have supplied horizontal lines; you will supply the vertical\nlines and everything else.  (Hint:  Don&#39;t treat all digits the same.)\n<BR>\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________\n<BR>\n_______________________________________________________________</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">(b)  Following the approach shown in class, which\nof the statements shown below could be part of a program to implement an\nFSA with a transition table?  Circle the one best answer.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>&#160;&#160; A. &#160; </FONT><FONT FACE=\"Courier\"><TT>Table[state][token]\n= state;\n<BR>\n</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#160;&#160; B. &#160; </FONT><FONT FACE=\"Courier\"><TT>state\n= (Table[state][token])++;\n<BR>\n</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#160;&#160; C. &#160; </FONT><FONT FACE=\"Courier\"><TT>Table[state][token]\n= Table[state++][token];</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4><B> \n<BR>\n</B>&#160;&#160; D. &#160; </FONT><FONT FACE=\"Courier\"><TT>(Table[state][token])++;\n<BR>\n</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#160;&#160; E. &#160; </FONT><FONT FACE=\"Courier\"><TT>state\n= Table[state][token];<A NAME=\"_14_10135\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n   &lt;-- This one\n<BR>\n</FONT><FONT FACE=\"Courier\"><TT>&#160;&#160; </TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>F.\n&#160; </FONT><FONT FACE=\"Courier\"><TT>token = Table[state][token];</TT></FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Below is a BNF grammar that also describes telephone\nnumbers:\n<BR>\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>&#160;&#160; &lt;phone number&gt; &#160;\n::= &#160; &lt;local number&gt;</FONT><FONT FACE=\"Courier\"><TT> | </TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&lt;area\ncode&gt; &lt;local number&gt;\n<BR>\n&#160;&#160; &lt;area code&gt; &#160;  &#160; ::= &#160; </FONT><FONT FACE=\"Courier\"><TT><B>1\n( </B></TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&lt;digit&gt; &lt;digit&gt;\n&lt;digit&gt;</FONT><FONT FACE=\"Courier\"><TT> <B>)</B> \n<BR>\n</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#160;&#160; &lt;local number&gt;\n&#160; ::= &#160; &lt;exchange&gt; &lt;hyphen&gt; &lt;number&gt;\n<BR>\n&#160;&#160; &lt;exchange&gt; &#160;  &#160; ::= &#160; &lt;digit&gt; &lt;digit&gt;\n&lt;digit&gt;\n<BR>\n&#160;&#160; &lt;hyphen&gt;  &#160;  &#160; ::= &#160; </FONT><FONT FACE=\"Courier\"><TT><B>-\n<BR>\n</B></TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#160;&#160; &lt;number&gt;\n&#160;  &#160; ::= &#160; &lt;digit&gt; &lt;digit&gt; &lt;digit&gt; &lt;digit&gt;\n<BR>\n&#160;&#160; &lt;digit&gt; &#160;  &#160; ::= &#160; </FONT><FONT FACE=\"Courier\"><TT><B>0</B>\n| <B>1</B> | <B>2</B> | <B>3</B> | <B>4</B> | <B>5</B> | <B>6</B> | <B>7</B>\n| <B>8</B> | <B>9</B> </TT></FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(c) Unfortunately, the BNF grammar and the FSA (reproduced\nagain below for convenience) do not both specify the same &quot;language.&quot;\n For each string listed below, </FONT></P>\n<P>\n<FONT FACE=\"Palatino\">* circle</FONT><FONT FACE=\"AGaramond\" SIZE=4> <FONT SIZE=3>VALID\nIN </FONT>BNF </FONT><FONT FACE=\"Palatino\">or</FONT><FONT FACE=\"AGaramond\" SIZE=4>\n<FONT SIZE=3>INVALID IN </FONT>BNF</FONT><FONT FACE=\"Palatino\"> to indicate\nwhich strings can be generated from &lt;phone&#160;number&gt; in the grammar\ngiven above, and</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>* </FONT><FONT FACE=\"Palatino\">circle</FONT><FONT FACE=\"AGaramond\" SIZE=4>\n<FONT SIZE=3>ACCEPTED BY </FONT>FSA </FONT><FONT FACE=\"Palatino\">or</FONT><FONT FACE=\"AGaramond\" SIZE=4>\n<FONT SIZE=3>REJECTED BY </FONT>FSA</FONT><FONT FACE=\"Palatino\"> to indicate\nwhich strings would be accepted by the FSA.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><FONT SIZE=3>VALID IN </FONT>BNF &#160; <FONT SIZE=3>INVALID\nIN </FONT>BNF &#160; </FONT><FONT FACE=\"Courier\"><TT><B>824-5072</B></TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>\n&#160; <FONT SIZE=3>ACCEPTED BY </FONT>FSA &#160; <FONT SIZE=3>REJECTED\nBY </FONT>FSA</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><FONT SIZE=3>VALID IN </FONT>BNF &#160; <FONT SIZE=3>INVALID\nIN </FONT>BNF &#160; </FONT><FONT FACE=\"Courier\"><TT><B>123-4567</B></TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>\n&#160; <FONT SIZE=3>ACCEPTED BY </FONT>FSA &#160; <FONT SIZE=3>REJECTED\nBY </FONT>FSA</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><FONT SIZE=3>VALID IN </FONT>BNF &#160; <FONT SIZE=3>INVALID\nIN </FONT>BNF &#160; </FONT><FONT FACE=\"Courier\"><TT><B>411</B></TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>\n&#160; <FONT SIZE=3>ACCEPTED BY </FONT>FSA &#160; <FONT SIZE=3>REJECTED\nBY </FONT>FSA</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><FONT SIZE=3>VALID IN </FONT>BNF &#160; <FONT SIZE=3>INVALID\nIN </FONT>BNF &#160; </FONT><FONT FACE=\"Courier\"><TT><B>2-9-7689</B></TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>\n&#160; <FONT SIZE=3>ACCEPTED BY </FONT>FSA &#160; <FONT SIZE=3>REJECTED\nBY </FONT>FSA</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><FONT SIZE=3>VALID IN </FONT>BNF &#160; <FONT SIZE=3>INVALID\nIN </FONT>BNF &#160; </FONT><FONT FACE=\"Courier\"><TT><B>(310)825-2695</B></TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>\n&#160; <FONT SIZE=3>ACCEPTED BY </FONT>FSA &#160; <FONT SIZE=3>REJECTED\nBY </FONT>FSA</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><FONT SIZE=3>VALID IN </FONT>BNF &#160; <FONT SIZE=3>INVALID\nIN </FONT>BNF &#160; </FONT><FONT FACE=\"Courier\"><TT><B>1(000)000-0000</B></TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>\n&#160; <FONT SIZE=3>ACCEPTED BY </FONT>FSA &#160; <FONT SIZE=3>REJECTED\nBY </FONT>FSA</FONT></P>\n<P>\n<IMG SRC=\"w06_review_questions_key_files/picture_248.gif\" WIDTH=452 HEIGHT=166 ALT=\"\">\n</P>\n<P>\n<FONT FACE=\"Palatino\">(d)  Modify the FSA (by drawing on the diagram above)\nso that it accepts exactly the same phone numbers as the BNF grammar accepts.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">9.  Suppose you have a conventional stack with operations\npush, pop, and top. </FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(a) What is printed by the following sequence of operations?</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">push(5); push(4); print(top()); push(7); push(12);\npop; print(top()); print(top()); pop(); </FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(b) What are the contents of the stack at the end\nof the sequence of operations?  Mark clearly the top and bottom of the stack.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">10.  Give the recurrence relation that describes the\nexecution time of the second routine shown below, the </FONT><FONT FACE=\"Courier\"><TT>Print</TT></FONT><FONT FACE=\"Palatino\">\nmember function of the </FONT><FONT FACE=\"Courier\"><TT>Collection</TT></FONT><FONT FACE=\"Palatino\">\n class, counting </FONT><FONT FACE=\"Courier\"><TT>println</TT></FONT><FONT FACE=\"Palatino\">\nstatements.  Just give the recurrence; you don&#39;t have to solve it.<A NAME=\"_14_12376\"></A></FONT></P>\n<pre>\ndef print():  # member function of restaurant\n\n\u00a0\u00a0 print(\"Name: \" + name)\n\n\u00a0\u00a0 print(\"Cuisine: \" + cuisine)\n\n\u00a0\u00a0 print(\"Phone: \" + phone)\n\n\u00a0\u00a0 print(\"Best dish: \" + dish)\n\n\u00a0\u00a0 print(\"Price: \" + price)\n\n\n\ndef Print():  # method0 of a restaurant _collection_\n\n\u00a0\u00a0 if self.IsEmpty():  # if this collection is empty,\n\n\u00a0\u00a0 \u00a0 print()           # print a newline.\n\n\u00a0\u00a0 else:\t   \u00a0\u00a0   # else print the first restaurant\n\n\u00a0\u00a0 \u00a0 First().Print()    # in the collection\n\n\u00a0\u00a0 \u00a0 Rest().Print()     # and then print the rest of \t\t\t\t \t\t# collection (recursively)\n\n</pre>\n<P>\n  <FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">R(0) = 1; R(n) = 5\n+ R(n-1)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">11.  </FONT><FONT FACE=\"AGaramond\" SIZE=4>For each\nof the following code segments, give the average-case run-time polynomial\nand the O-notation.  Count each line that contains an assignment statement\n(except those controlling for-loops), a procedure call, or an input/output\nstatement.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Example:</FONT></P>\n<pre>\nprint(\"This line is executed only once.\")\n\ntotal = 0\n\nfor i in range(n):\n\n\u00a0 \u00a0   x = readAnInteger()    # count this line once\n\n\u00a0\u00a0 total += x\n\n\u00a0\u00a0 if i % 2 == 0: \n\n   \u00a0\u00a0 print(x)\n\nprint(\"Total: \")\n\nprint(total)\n\nprint(\"The end.\")\n</pre>\n<P>\n  <FONT FACE=\"AGaramond\" SIZE=4>Example answer:  Runtime polynomial:  2 +\n<I>n </I>(2 + 1/2) + 3, which is 2.5<I>n</I> + 5; O(<I>n</I>).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(a) </FONT></P>\n<Pre>\nfor i in range(n):\n\n\u00a0 for j in range(n, 1, -1):\n\n  \u00a0 for k in range(n//2):\n\n    \u00a0 Data[i][j][k] = i + j + k;\n\nprint(\"On the whole, I'd rather be in Philadelphia.\");</Pre>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\"><B>n * n * n/2 + 1\n= n^3/2 + 1 = O(n^3)</B></FONT></P>\n<BR>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(b)</FONT></P>\n<pre>print(\"With more powerful tools \")\n\nprint(\"comes the power to screw up \")\n\nprint(\"in new and more spectacular ways.\")\n\na = 1\n\nwhile a <= n:\n\n\u00a0 DanceAJig(a)\n\n\u00a0 for i in range(n):\n\n    if i % 2 == 0:\n\n \u00a0\u00a0 \u00a0  DanceAReel(a,b)\n\n\u0001      DanceAPasDeDeux(a*i)\n\n\n\u00a0 print(\"Swing your partner to and fro\")\n\n\u00a0 a += 1\n\nprint(\"People time is more expensive than computer time.\")\n</pre>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\"><B>4 + n*(1 + n *\n(1/2(1 + 1))+1+1) + 1 = n^2 + 3n + 5 = O(n^2)</B></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(c)</FONT></P>\n<pre>print(\"Now, the Star-Belly Sneetches had bellies with stars.\")\n\nprint(\"The Plain-Belly Sneetches had none upon thars.\")\n\na = 1\n\nwhile a <= n:\n\n\u00a0 DoSomethingGood(a)\n\n\u00a0 for i in range(n, 1, -1):\n\n    DoSomethingBad(a, i)\n\n  \u00a0 HandleSomethingElse(a * i)\n\u0016\n\u00a0 for i in range(1, 64000, 2):\n\n    DoSomethingBad(a, i)\n\n  \u00a0 HandleSomethingElse(a * i)\n\n\u00a0 a *= 2;\n\nprint(\"Those stars weren't so big. They were really so small \")\n\nprint(\"You might think such a thing wouldn't matter at all.\")\n</pre>\n<P>\n  <FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">3 + log n*(1 + n*(1\n+ 1) + 64000/2*(1 + 1)+ 1) + 2 = 2n log n + 64002 log n + 5 = O(n log n).</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Don&#39;t deduct more\nthan 1/2 point for simply wrong arithmetic.</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d)  Suppose that all three of the above program\nsegments were included in one function.  What would the O-notation of that\nfunction be?<A NAME=\"_14_15490\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\"><B>O(n^3)--whatever\nthe highest-order term is in any of the parts.</B></FONT></P>\n<P>\n<FONT FACE=\"Palatino\">12.  </FONT><FONT FACE=\"AGaramond\" SIZE=4>(a) </FONT><IMG SRC=\"w06_review_questions_key_files/sidebar_39.gif\" WIDTH=285 HEIGHT=102 HSPACE=6 VSPACE=6 ALIGN=RIGHT>\n<FONT FACE=\"AGaramond\" SIZE=4>One way to implement a priority queue is in\na binary search tree ordered by priority value, where each node of the tree\n(representing a distinct priority value) stores all the items with the same\npriority, in a linked list ordered by &quot;arrival time.&quot;  Shown is\na diagram of this approach, after the following [priority, item] pairs have\nbeen enqueued:  [5,A]   [8,B]   [5,D]   [2,E]   [7,F]  [7, G]</FONT><FONT FACE=\"Palatino\">.\n </FONT><FONT FACE=\"AGaramond\" SIZE=4>On the diagram above, draw the results\nof enqueueing these items:  [8,K]  [2,M]  [3,P]</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(b.1)  You are designing some web server software\nthat will handle thousands of requests for information from your web site.\n You decide that those requests should be prioritized-- perhaps system troubleshooting\nreceives top priority, full-rate-paying customers receive next priority,\ndiscount customers receive lower priority, and guests receive the lowest.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>You decide to use a priority queue for these\nrequests, and you consider three different data structures for implementing\nit:</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Structure I:  An unordered array where each\nelement contains a priority, the time the request arrived, and the other\ninformation about a request; you also have an additional field that contains\nthe number of requests currently stored.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Structure II:  A binary search tree as described\nabove.  (You may assume that priority nodes never get deleted--they just\nmay have empty item lists after all items with that priority are dequeued.)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Structure III:  A linear linked list, completely\nordered (by priority, and for equal priorities by arrival time) so that\nthe correct item to dequeue is always at the front.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>In the table below, fill in the O-notation\nfor the execution time of each specified operation on each alternative data\nstructure in the average case.  Assume that on average there are <I>r</I>\nrequests in the whole data structure, <I>i</I> different items that have\neach different priority value, and <I>p</I> different priority values; use\nwhichever of these variables are appropriate in your answers.  Also assume\nthat each operation is implemented as efficiently as possible in Java (without\nadding unspecified variables or otherwise changing the structure described).</FONT>\n<TABLE BORDER=1 CELLSPACING=1 WIDTH=100% CELLPADDING=1>\n<COL WIDTH=52%><COL WIDTH=15%><COL WIDTH=17%><COL WIDTH=17%>\n<TR>\n<TD WIDTH=52% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4><B>Operations:</B></FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4><B>Structure I</B></FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4><B>Structure II</B></FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4><B>Structure III</B></FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=52% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Front (number of comparisons)<A NAME=\"_14_17827\"></A></FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(r)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(log p)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=52% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Enqueue (number of comparisons)<A NAME=\"_14_17888\"></A></FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(log p+i)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(r)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=52% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Enqueue (number of data movements)<A NAME=\"_14_17954\"></A></FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=52% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Dequeue (number of comparisons)<A NAME=\"_14_18012\"></A></FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(r)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(log p)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=52% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Dequeue (number of data movements)<A NAME=\"_14_18076\"></A></FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=52% VALIGN=TOP>\n<FONT FACE=\"Palatino\">SizeOf (number of comp</FONT><FONT FACE=\"AGaramond\" SIZE=4>arisons)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<A NAME=\"_14_18137\"></A><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(r+p)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(r)</FONT><BR></TD>\n</TR>\n</TABLE>\n<BR>\n<FONT FACE=\"AGaramond\" SIZE=4>(b.2)  In terms of <I>r, i, </I>and<I> p</I>\nas appropriate, what is the O-notation for the storage required by each\nstructure?  Assume also that the array has a maximum size of <I>a.</I></FONT>\n<TABLE BORDER=1 CELLSPACING=1 WIDTH=100% CELLPADDING=1>\n<COL WIDTH=52%><COL WIDTH=15%><COL WIDTH=17%><COL WIDTH=17%>\n<TR>\n<TD WIDTH=52% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Storage required</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<A NAME=\"_14_18371\"></A><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(a)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(p+r)</FONT></TD>\n<TD WIDTH=17% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(r)</FONT><BR></TD>\n</TR>\n</TABLE>\n<BR>\n<FONT FACE=\"AGaramond\" SIZE=4>(c.1)  If your priority queue gets very large,\nwhich structure provides the fastest enqueueing?<A NAME=\"_14_18504\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">I--the unordered array</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(c.2)  If your priority queue gets very large,\nwhich structure provides the fastest dequeueing?<A NAME=\"_14_18635\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">III--the ordered linear\nlist</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(c.3)  If your priority queue gets very large,\nwhich structure provides the best overall performance on enqueueing and\ndequeueing?<A NAME=\"_14_18807\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">II--the BST</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d)  Give the most convincing real-world example\nyou can (not necessarily web server software) for implementing a priority\nqueue that ...</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d.1) enqueues as quickly as possible (with\nother operations&#39; performance less important), as in (c.1)<A NAME=\"_14_19071\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">This might be useful\nwhen the items to be enqueued come from some rapid source, so you don&#39;t\nwant them &quot;backing up at the entrance.&quot;  A system that takes data\nfrom real-time measurements might be like this, such as radar for aircraft.\n You don&#39;t want to miss enqueueing a sighting quickly (in case it&#39;s\nthe one that needs dequeueing/processing fastest).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d.2) dequeues as quickly as possible (with\nother operations&#39; performance less important), as in (c.2)<A NAME=\"_14_19543\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Perhaps something\nwhere the queue is very long, so it doesn&#39;t matter if it takes a while\nto get someone in line but when it&#39;s someone&#39;s time to get served,\nyou want to do it right away so the server doesn&#39;t have to wait.  A\nprinter queue might fit this, or a dispatcher for emergency services.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>(d.3) has even performance for enqueueing\nand dequeueing</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">13.  Suppose you have a conventional queue with operations\nenqueue, dequeue, and front.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(a)  What does the following sequence of operations\nprint:</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">enqueue(3); enqueue(7); enqueue(5); print(front());\ndequeue(); print(front()); enqueue(9);</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(b)  What are the contents of the queue at the end\nof this sequence of operations?  Indicate clearly the front and the end\nof the queue.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">14.  Suppose you have a priority queue with operations\nenqueue, dequeue, and front.  The priority of each item is its value; the\nfirst item to be dequeued is the item with the greatest numerical value.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(a)  What does the following sequence of operations\nprint:</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">enqueue(3); enqueue(7); enqueue(5); print(front());\ndequeue(); print(front()); enqueue(9);</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(b)  What are the contents of the queue at the end\nof this sequence of operations?  Indicate clearly the front and the end\nof the queue.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">15.  Suppose that you need to implement a &quot;collection&quot;\nof at least 50,000 items, with various operations.  Suppose further that\nyou are considering four alternative data structures, whose performance\non each operation is shown in the table below (where <I>n</I> is the number\nof items currently in the collection).</FONT>\n<TABLE BORDER=1 CELLSPACING=1 WIDTH=100% CELLPADDING=1>\n<COL WIDTH=46%><COL WIDTH=12%><COL WIDTH=12%><COL WIDTH=15%><COL WIDTH=15%>\n<TR>\n<TD WIDTH=46% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Operation:</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure I</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure II</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure III</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure IV</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=46% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Add a new item</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O (1)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(log <I>n</I>)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=46% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Search for an item</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(log <I>n</I>)</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(log <I>n</I>)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=46% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Delete an item (assuming you already know its location)</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O (1)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(log <I>n</I>)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=46% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Print all the items (in any order)</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=46% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Print all the items (in a particular order)</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT></TD>\n<TD WIDTH=12% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I> log <I>n</I>)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I>)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">O(<I>n</I> log <I>n</I>)</FONT><BR></TD>\n</TR>\n</TABLE>\n<BR>\n<FONT FACE=\"Palatino\">(a)  Suppose that you are gathering statistics about\nEmail messages.  Each item in your collection represents one message, with\nthe name of the sender, the recipient(s), the date and time sent, and other\ninformation.  The computer containing your collection will be connected\nto the &quot;network backbone&quot; so it can collect all the Email traffic,\nwhich goes by very fast.  Once you have gathered your data for a day, you\nmight convert your collection to some other representation, but for the\nmonitoring task itself, which structure (I, II, III, or IV) would be most\nefficient (and, in just a few words, why)?<A NAME=\"_14_22130\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Structure II, because\nit&#39;s the fastest to add items to the collection (at O(1)).</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(b.1)  Suppose that you are storing the telephone\ndirectory used by directory assistance operators, where each item contains\nsomeone&#39;s name, address, and telephone number.  Which of the operations\nlisted above would you expect to be the most frequent on this collection\nof data?<A NAME=\"_14_22500\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Searching is most\nfrequent; that happens a lot more often than a new customer being added.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(b.2)  Which structure (I, II, III, or IV) should\nyou choose to implement the telephone directory (and, in just a few words,\nwhy)?<A NAME=\"_14_22732\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Probably Structure\nIII.  It and Structure I have the fastest time for searching, which is the\nmost important in the phone directory, but Structure III is faster to add\nand delete.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(c)  To delete an item in practice requires both locating\nthe item and actually removing it (if it occurs in the collection).  Which\nstructure (I, II, III, or IV) is the most efficient for this entire process\nof deleting an item?<A NAME=\"_14_23152\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Structure III; the\nprocess is O(log n).  The others are O(n) for the combination.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(d)  Which structure(s), if any, should <I>never</I>\nbe used based on the above performance measures?  <A NAME=\"_14_23342\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Structure\nIV; it&#39;s the worst (or tied) on everything.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(e)  Give the best brief description you can of each\nof the structures (I, II, III, and IV) listed above.  You can describe each\nin just a couple of words (including &quot;tree,&quot; &quot;queue,&quot;\n&quot;stack,&quot; &quot;linked list,&quot; or &quot;array&quot;), but be\nsure to indicate whether or not the items are stored in order, and whether\nor not any additional data fields, such as trailing pointers or the number\nof items, are required.  You may include a clear picture if you like.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Structure I is a<A NAME=\"_14_23870\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Ordered array (O(log\nn) for binary search, but O(n) to add or remove, preserving order)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Structure II is a<A NAME=\"_14_23986\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Unordered Linked list\n(constant-time addition and deletion (by re-linking), otherwise linear)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Structure III is a<A NAME=\"_14_24109\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Binary search tree\n(log-time to add, find, delete; linear to print in order)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Structure IV is a<A NAME=\"_14_24214\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Unordered array without\na size field</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">16.  The Department of Motor Vehicles stores registration\ninformation (including license number, owner&#39;s name, and vehicle description)\non millions of vehicles. As a practical matter, the DMV can&#39;t store\n<I>all</I> the information on every vehicle in main memory (RAM); main memory\nwill contain just an index, containing perhaps the license number or the\nowner&#39;s name (the &quot;key&quot;), together with a pointer to the bulk\nof the information that remains on disk. If an item&#39;s key is found in\nthe index, the rest of its information can be retrieved with one access\nto the disk.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">The DMV is considering four different structures for\norganizing the index; you may assume that the disk-based information can\nbe traversed in linear time if necessary.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Structure I:  The index is an unordered array with\nan additional field that contains the number of vehicles currently stored.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Structure II:  The index is an array sorted by license\nnumber, with an additional field containing the number of vehicles currently\nstored.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Structure III:  The index is a binary search tree\nordered by license number.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">Structure IV:  The index consists of two binary search\ntrees, one ordered by license number and one ordered by owner&#39;s name.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(a)  In the table below, fill in the O-notation for\neach alternative data structure on each specified operation.  Assume there\nare v vehicles in the database and that each operation is implemented as\nefficiently as possible in Java.</FONT>\n<TABLE BORDER=1 CELLSPACING=1 WIDTH=100% CELLPADDING=1>\n<COL WIDTH=41%><COL WIDTH=15%><COL WIDTH=15%><COL WIDTH=15%><COL WIDTH=15%>\n<TR>\n<TD WIDTH=41% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Operations:</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure I</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure II</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure III</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure IV</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=41% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Add a new vehicle (number of comparisons)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<A NAME=\"_14_25803\"></A><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)\n</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O (log v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(log v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(log v)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=41% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Add a new vehicle (number of data movements)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<A NAME=\"_14_25892\"></A><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(1)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=41% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Search for an item, given license number</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<A NAME=\"_14_25963\"></A><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O (log v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(log v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O (log v)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=41% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Search for an item, given owner&#39;s name</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<A NAME=\"_14_26046\"></A><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O (log v)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=41% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Print all the items (in any order)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<A NAME=\"_14_26116\"></A><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=41% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Print all the items (in order by owner&#39;s name)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<A NAME=\"_14_26193\"></A><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v\nlog v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v log v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v log v)</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(v)</FONT><BR></TD>\n</TR>\n</TABLE>\n</P>\n<P>\n<FONT FACE=\"Palatino\">(b) In the table below, give the O-notation for the\nstorage (main memory) required by each structure, assuming that there are\nv vehicles in the database and a maximum of m vehicles possible and that\neach structure is designed as efficiently as possible in Pascal. &#160;\n</FONT>\n<TABLE BORDER=1 CELLSPACING=1 WIDTH=100% CELLPADDING=1>\n<COL WIDTH=41%><COL WIDTH=15%><COL WIDTH=15%><COL WIDTH=15%><COL WIDTH=15%>\n<TR>\n<TD WIDTH=41% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure I</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure II</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure III</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Structure IV</FONT><BR></TD>\n</TR>\n<TR>\n<TD WIDTH=41% VALIGN=TOP>\n<FONT FACE=\"Palatino\">Main memory required</FONT></TD>\n<TD WIDTH=15% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=15% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=15% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=15% VALIGN=TOP>\n<BR></TD>\n</TR>\n</TABLE>\n<BR>\n<FONT FACE=\"Palatino\"> &#160; <A NAME=\"_14_26594\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(m)\n&#160; O(m) &#160; O(v) &#160; O(v)</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">17.  You want to purchase a database management program.\n You&#39;re considering three different products:  FuzzyBase, OnBase, and\nHomeBase.  You read a magazine article that reviews these products, which\nincludes two graphs of their performance (on a &quot;benchmark&quot; task\ndesigned to be representative of typical database tasks).</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">The first graph shows the programs&#39; performance\non three relatively small sets of data.  The second graph (on the following\npage) shows their performance on the same task, but with three relatively\nlarge sets of data.</FONT></P>\n<P>\n<IMG SRC=\"w06_review_questions_key_files/picture_399.gif\" WIDTH=479 HEIGHT=212 ALT=\"\">\n</P>\n<P>\n<FONT FACE=\"Palatino\">(a)  Looking only at the small-files graph above,\nwhich program was the fastest in all the tests shown?<A NAME=\"_14_27272\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">HomeBase</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(b)  Which program was the slowest in most of the\ntests shown on the graph above?<A NAME=\"_14_27375\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">FuzzyBase</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(c)  The 1000-item test is 10 times larger than the\n100-item test.  How many times longer does FuzzyBase take to do the 1000-item\ntest than the 100-item test?<A NAME=\"_14_27556\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Ten times longer (15.0\nvs. 1.5)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(d)  How many times longer does HomeBase take to do\nthe 1000-item test than the 100-item test?   <A NAME=\"_14_27698\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">100 times longer (10.0\nvs. 0.1)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(e)   From the data shown above, what is the likeliest\nO-notation for the execution time of FuzzyBase on these benchmark tests?<A NAME=\"_14_27870\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(n)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(f)  From the data shown above, what is the likeliest\nO-notation for the execution time of HomeBase on these benchmark tests?<A NAME=\"_14_28013\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">O(n-squared)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(g)  Does the fastest program in the above tests have\nthe best O-notation?  If so, explain how you can estimate the execution\ntime from the O-notation.  If not, explain how a program with worse O-notation\ncan be faster in these tests than one with better O-notation.  Answer in\njust one English sentence, and don&#39;t take up more space than is left\non this page.<A NAME=\"_14_28399\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">The fastest program\n(HomeBase) does not have the best O-notation.  This can happen when the\namount of data (n) is relatively small, because low-order terms and constants\ncan overshadow the highest-order term (which determines the O-notation);\nthe O-notation is good from some starting value of n out forever, but below\nthat starting point, when n is small, all bets are off.</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Palatino\">&#160;&#160; Now consider the graph of the large-file\nbenchmarks</FONT></P>\n<P>\n<IMG SRC=\"w06_review_questions_key_files/picture_398.gif\" WIDTH=481 HEIGHT=210 ALT=\"\">\n</P>\n<P>\n<FONT FACE=\"Palatino\">(h)  Which program was the slowest in all the tests\nshown on the large-files graph above?<A NAME=\"_14_28930\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">HomeBase</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(i)  Which program was the fastest in all the tests\nshown on the large-files graph above?<A NAME=\"_14_29039\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">OnBase</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(j)  Below are five alternatives; each alternative\ngives a polynomial expression that describes the execution time of each\nprogram on the benchmark tests.  Only one alternative is consistent with\nall the data shown above; which alternative is the potentially correct set\nof expressions?<A NAME=\"_14_29342\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">HomeBase\nis n-squared, so it must be A/C/D.  Only HomeBase is n-squared, so it&#39;s\nnot A.  Between C and D, we see that FuzzyBase is always a little slower\nthan OnBase, except for the very smallest test case.  That gives us C; OnBase\nhas a fat constant that shows up in the smallest case, but as n gets bigger,\nthe larger coefficient on FuzzyBase&#39;s O(n) term dominates.</FONT><FONT FACE=\"Palatino\"><B>\n&#160; </B></FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><U>&#160;&#160; FuzzyBase &#160; OnBase &#160; HomeBase</U></FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><B>A.</B> &#160; 1500<I>n</I> + 500 &#160; <I>n</I><FONT SIZE=1><SUP>2</SUP></FONT><FONT FACE=\"Palatino\">\n+ 10 &#160; <I>n</I><FONT SIZE=1><SUP>2</SUP></FONT><FONT FACE=\"Palatino\">\n+ 3<I>n</I> + 23</FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><B>B.</B> &#160; <I>n</I><FONT SIZE=1><SUP>2</SUP></FONT><FONT FACE=\"Palatino\">\n+ 3<I>n</I> + 23 &#160; 1500<I>n</I> + 50,000 &#160; 750<I>n</I> + 45,000</FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><B>C.</B> &#160; 1500<I>n</I> + 500 &#160; 750<I>n</I>\n+ 45,000 &#160; <I>n</I><FONT SIZE=1><SUP>2</SUP></FONT><FONT FACE=\"Palatino\">\n+ 3<I>n</I> + 23</FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><B>D.</B> &#160; 1500<I>n</I> + 50,000 &#160; 750<I>n</I>\n+ 400 &#160; <I>n</I><FONT SIZE=1><SUP>2</SUP></FONT><FONT FACE=\"Palatino\">\n+ 3<I>n</I> + 23</FONT></P>\n<P>\n<FONT FACE=\"Palatino\"><B>E.</B> &#160; 750<I>n</I> + 400 &#160; <I>n</I><FONT SIZE=1><SUP>2</SUP></FONT><FONT FACE=\"Palatino\">\n+ 3<I>n</I> + 23 &#160; 1500<I>n</I> + 500</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">(k)  In one brief English sentence, explain why the\nfastest program in the small-file tests was the slowest program in the large-file\ntests.<A NAME=\"_14_30181\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">When n is small, all\nbets are off (for O-notation); the constants and lower-order terms can predominate\nwhen n is small.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">18.  Other topics to be familiar with (that might\nshow up, in most cases briefly, on the exam):</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">-- Classic data structures (lists, maps, stacks, queues,\npriority queues, trees) and the conventional operations on them (e.g., push\nor dequeue)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">-- Built-in Python data structures (lists, dictionaries, tuples, sets, strings)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">-- Formal languages, how to describe them, and how\nthey relate to natural languages.</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">-- The basic organization and functionality of the\namusement park simulator (we&#39;ll provide the code for anything detailed)</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">-- </FONT><FONT FACE=\"Palatino\">The basics of probability and expected value</FONT></P>\n<P>\n  <FONT FACE=\"Palatino\">-- Decision-making techniques:  Relevance trees, decision\ntrees, optimist/pessimist/regretist strategies</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">-- How exceptions work in Python</FONT></P>\n<P>\n<FONT FACE=\"Palatino\">-- The basic advantages and pitfalls of concurrency</FONT></P>\n<P>\n  <FONT FACE=\"Palatino\">--</FONT><FONT FACE=\"Palatino\">Programming languages and their characteristics</FONT></P>\n<P ALIGN=left>\n<FONT FACE=\"Palatino\">-- Other topics from the lectures</FONT></P>\n</BODY>\n</HTML>\n", "encoding": "utf-8"}