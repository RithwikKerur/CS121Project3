{"url": "https://www.ics.uci.edu/~alspaugh/cls/shr/java-package.html", "content": "<?xml version='1.1'?>\n<!DOCTYPE html\n     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'\n     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>\n<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>\n<head>\n  <title>Java Package</title>\n  <meta name='Author' content='Thomas A. Alspaugh'/>\n  <meta name='Description' content=\"Java Package\"/>\n  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>\n  <meta http-equiv='Content-Style-Type' content='text/css'/>\n  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>\n  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->\n  <style type='text/css'>\n    @media screen {\n      body     {  background: url(\"img/bg-java-package.png\") repeat-y;  }\n      #TMain   {  margin-left: 10.00em;  }\n    }\n  </style>\n</head>\n<body>\n\n<div id='TBg'>\n\n<div id='THeader'>\nMaking a Java Package\n<span class='newUrl'><a href='https://thomasalspaugh.org/pub/fnd/java-package.html'\n  >thomasalspaugh.org/pub/fnd/java-package.html</a></span>\n</div>\n\n<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->\n<p>  <a class='sc' href='../../index.html'>Home</a>\n</p>\n<div class='hr'> </div>\n<p>  <a href='index.html'>Foundations home</a>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='set.html'>Sets</a><br/>\n<a href='relation.html'>Relations</a><br/>\n<a href='correspondence.html'>Correspondences</a><br/>\n<a href='orderedSet.html'>Ordered Sets</a><br/>\n<a href='lattice.html'>Lattices</a><br/>\n<a href='graph.html'>Graphs</a><br/>\n<a href='powerset.html'>Powersets</a><br/>\n<a href='binaryString.html'>Binary Strings</a><br/>\n<a href='logicConcepts.html'>Logic</a><br/>\n<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->\n<a href='greek.html'>Greek</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='glossaryExternal.html'>Glossary</a><br/>\n<a href='goodAbstract.html'>Abstracts</a><br/>\n<a href='argument.html'>Argument</a><br/>\n<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>\n<a href='hohfeld.html'>Legal Relations</a><br/>\n<a href='goodPresentation.html'>Presentations</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='quickStart.html'>Elicitation</a><br/>\n<a href='ontology.html'>Glossaries</a><br/>\n<a href='goal.html'>Goals</a><br/>\n<a href='istar.html'>i*</a><br/>\n<a href='SCR.html'>SCR</a><br/>\n<a href='tracing.html'>Tracing</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='alloy.html'>Alloy</a><br/>\n<a href='msc.html'>MSCs</a><br/>\n<a href='regularExpression.html'>Regular Exprs.</a><br/>\n</p><!-- -spell MSCs Exprs -->\n<div class='hr2'> </div>\n<p>\n<a href='java-designPattern.html'>Design Patterns</a><br/>\n<a href='javadoc.html'>Javadoc</a><br/>\n<a href='java-package.html'>Java Packages</a><br/>\n<a href='java-type.html'>Java Types</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='html.html'>(X)HTML</a><br/>\n<a href='xmlSchema.html'>XML Schemas</a><br/>\n<a href='xslt.html'>XSLT</a><br/>\n</p><!-- -spell XSLT -->\n</div>\n\n\n<!-- No right column -->\n<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->\n<!--xhtml -y -->\n\n\n<!--spell classpath cp dir edu http jarfile jarfname javac pkg's pname -->\n<!--spell pname scenarioml subp subpackage -->\n\n\n<p>\nTo make a Java package named <code>pkg</code>:\n</p>\n\n<ol>\n  <li> Make a <b>directory</b> named <code>pkg</code>.&nbsp;\n  </li>\n  <li> Put all the <b><code>.java</code> files</b> for the classes and interfaces\n    in the directory <code>pkg</code>.&nbsp;\n  </li>\n  <li> Begin each of the <code>.java</code> files\n  with a <b>package declaration</b>:&nbsp;\n    <p class='display'>\n      <code>package pkg;</code>\n    </p>\n  </li>\n  <li> Compile the files by <b>running <code>javac</code>\n    from <code>pkg</code>'s parent directory</b>.&nbsp;\n    For example,\n    <p class='display'>\n      <code>javac pkg/*.java</code>\n    </p>\n  </li>\n  <li> Access the classes and interfaces of package <code>pkg</code>\n    from other packages by importing its definitions\n    with an import line in every <code>.java</code> file that uses them:&nbsp;\n    <p class='display'>\n      <code>import pkg;</code>\n    </p>\n  </li>\n  <li> Tell the Java interpreter how to find package <code>pkg</code>\n    by putting <code>pkg</code>'s parent directory\n    on the classpath,\n    or by running the interpreter from that directory.&nbsp;\n    If the full or relative pathname of <code>pkg</code>'s parent directory\n    is <code>pname</code>, then <code>java -cp pname ...</code>\n    will put <code>pname</code> on the classpath\n    and make package <code>pkg</code> accessible.&nbsp;\n    If you have several packages in different parent directories,\n    separate the names with colons:&nbsp;\n    <code>java -cp pname:name2:dir3 ...</code>.&nbsp;\n  </li>\n</ol>\n\n<p>\nHere is an <a href=\"formula/\">example package</a>.&nbsp;\nThe package is named <code>formula</code>,\nits source files are in a directory named <code>formula</code>,\nand each source file begins with\n</p>\n\n<p class='display'>\n  <code>package formula;</code>\n</p>\n\n\n<h1>Making a Java subpackage</h1>\n\n<p>\nA subpackage is just a package in a\nsubdirectory of another package's directory.&nbsp;\nJava uses dot as the package name separator,\nlike <code>/</code> is used as the directory separator\n(for civilized operating systems, at least).&nbsp;\nFor example,\nto make a subpackage <code>subp</code>\nof the package <code>pkg</code>:&nbsp;\n</p>\n\n<ol>\n  <li> Make a subdirectory named <code>subp</code>\n    in the <code>pkg</code> directory.&nbsp;\n  </li>\n  <li> Put all the <code>.java</code> files for the classes and interfaces\n    in the directory <code>pkg/subp</code>.&nbsp;\n  </li>\n  <li> Begin each <code>.java</code> file with a package declaration:&nbsp;\n    <p class='display'>\n      <code>package pkg.subp;</code>\n    </p>\n  </li>\n  <li> Compile the files by running <code>javac</code>\n    from <code>pkg</code>'s parent directory\n    (just as before).&nbsp;\n    For example,\n    <p class='display'>\n      <code>javac pkg/subp/*.java</code>\n    </p>\n  </li>\n  <li> Access the classes and interfaces of package <code>subp</code>\n    from other packages including <code>pkg</code>) by importing its definitions\n    with an import line in every <code>.java</code> file that uses them:&nbsp;\n    <p class='display'>\n      <code>import pkg.subp;</code>\n    </p>\n  </li>\n  <li> You don't need to do anything different\n    to tell the Java interpreter how to find package <code>pkg.subp</code>,\n    since you are already telling it to look in <code>pkg</code>'s\n    parent directory.&nbsp;\n  </li>\n</ol>\n\n<p>\nAlthough it may seem like <code>pkg</code> and <code>subp</code>\nshould have easier or simpler access to each other\nbecause one is a subpackage of the other,\nthis is not the case.&nbsp;\nEither package's files have to import the other package to use it,\njust like any other package's files do.\n</p>\n\n\n\n<h1>The convention for names of published packages</h1>\n\n<p>\nIt doesn't much matter what you name your own packages,\nas long as the names are unique.&nbsp;\nFor published packages,\nthere is a convention for unique names\nthat uses a URL associated with you, the package, or the project it is part of.&nbsp;\nThe components of the URL are used as package names,\nin reverse order.&nbsp;\nFor example,\nfor the ScenarioML project\nwhose associated URL is <code>http://scenarioml.ics.uci.edu</code>,\neach package would be a subpackage of\n<code>edu.uci.ics.scenarioml</code>.&nbsp;\nThe <code>scenario</code> package for that project\nwould have this as its package name:&nbsp;\n</p>\n\n<p class='display'>\n  <code>edu.uci.ics.scenarioml.scenario</code>\n</p>\n\n<p>\nand its source files would have to be in a directory named\n</p>\n\n<p class='display'>\n  <code>edu/uci/ics/scenarioml/scenario</code>\n</p>\n\n\n<h1><code>jar</code> and packages</h1>\n\n<p>\nTo produce a jarfile for one or more packages,\ngo to the parent directory from which you would compile the source files,\nand run <code>jar</code> giving it all the class file names.&nbsp;\nFor example,\nfor the <code>scenario</code> package discussed above,\nyou would go to the directory containing the <code>edu</code> directory\nand enter the command\n</p>\n\n<p class='display'>\n  <code>jar cf jarfname edu/uci/ics/scenarioml/scenario/*.class</code>\n</p>\n<p>\n\nand would obtain a jarfile named <code>jarfname.jar</code>\nwhich you could put on a classpath\nand thus gain access to the <code>scenario</code> package.\n</p>\n\n\n</div>\n\n</div><!-- #TBg -->\n\n<div id='TFooter'>\n<div class='W3C'>\n  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'\n    src='../../img/valid-xhtml10-blue.png'\n    alt='Valid XHTML 1.0 Strict'/></a>\n  <br/>\n  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'\n    src='../../img/vcss-blue.png'\n    alt='Valid CSS!'/></a>\n</div>\n<div class='timestamp'>2010Feb24We20:58</div>\n<div style='padding-top:1px;'>\n<a class='plain' href='./index.html' style='font-variant:small-caps;'\n>Thomas A. Alspaugh</a>\n<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;\n    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>\n    <!-- -spell alspaugh uci edu --> </span>\n</div>\n</div>\n\n<!-- Google Analytics code -->\n<script type=\"text/javascript\">\nvar gaJsHost = ((\"https:\" == document.location.protocol)\n  ? \"https://ssl.\" : \"http://www.\");\ndocument.write(unescape(\"%3Cscript src='\" + gaJsHost +\n  \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n<script type=\"text/javascript\">\ntry {\nvar pageTracker = _gat._getTracker(\"UA-15281497-1\");\npageTracker._trackPageview();\n} catch(err) {}\n</script>\n\n</body>\n</html>\n\n", "encoding": "ascii"}