{"url": "https://www.ics.uci.edu/~eppstein/261/s13-hw3.txt", "content": "CS 261, Spring 2013, Homework 3\nDue Thursday, May 2\n\n\n1. Suppose you have two Bloom filters FA and FB (each having the same\nnumber of cells and the same hash functions) representing the two sets A\nand B. Let FC = FA & FB be the Bloom filter formed by computing the\nbitwise Boolean and of FA and FB.\n\n(a) FC may not always be the same as the Bloom filter that would be\nconstructed by adding the elements of the set (A intersect B) one at a\ntime. Explain why not.\n\n(b) Does FC correctly represent the set (A intersect B), in the sense\nthat it gives a positive answer for membership queries of all elements\nin this set? Explain why or why not.\n\n\n2. Suppose that we want to store a set S of n = 20 elements, drawn from\na universe of U = 10000 possible keys, in a Bloom filter of exactly N =\n100 cells, and that we care only about the accuracy of the Bloom filter\nand not its speed. For this problem size, what is the best choice of the\nnumber of cells per key (the parameter k in the lecture)? (I.e., what\nvalue of k gives the smallest possible probability that a key not in S\nis a false positive?) What is the probability of a false positive for\nthis choice of k?\n\n\n3. Recall that the MinHash sketch stores the k elements of a set that\nhave the smallest hash values (for a parameter k that determines the\naccuracy of the sketch, and for a fixed hash function that is used for\nall such sketches). Suppose that we wish to compute the MinHash sketch\nfor a set S of n elements, where n is so big that S does not fit into\nmain memory, and can only be accessed as a data stream. Design an\nalgorithm for computing the sketch using only an amount of storage\nsufficient to hold O(k) set elements or their hash values, in a single\npass over the data, in total time O(n).\n\nYou may assume that each evaluation of the hash function takes time\nO(1). You may also find it helpful to recall that the xth largest\nelement of a set of y values can be computed in time O(y) (this is\ncalled \"linear time selection\"). You should not assume that k is a\nconstant that can be omitted from O-notation.", "encoding": "ascii"}