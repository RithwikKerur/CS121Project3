{"url": "https://www.ics.uci.edu/~irani/w10_23/Lab1/Dark.htm", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../course2.css\" type=\"text/css\" />\n\n<title>ICS 23 / CSE 23 - Lab #1: Dark at the End of the Tunnel</title>\n</head>\n\n<body>\n\n\n<div class=\"header\">\n\n\t<p>ICS 23 / CSE 23 -\n   Lab #1: <i>Dark at the End of the Tunnel</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, January 15, 6:59pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>When I was a little kid, I was fascinated by mazes.  Whenever I saw a maze printed on a piece of paper, I had to grab it and try to solve it.  I had soft-covered books full of them.  I even tried drawing my own, though with the undeveloped skills I had at the time -- both in terms of being able to design a challenging maze, and also the more fundamental skill of being able to draw a straight line -- it proved to be a difficult proposition.  As I got older, I discovered that software could do an excellent job of generating a challenging maze, and that it could also rather easily figure out a solution for one, though it wasn't until I was an undergraduate that I understood how.</p>\n\n<p>For this project, you'll write a Java class that generates a two-dimensional maze of arbitrary size, and another Java class that solves one.  This will give you more practice with understanding and using recursion to solve real problems.  It will also provide you with an opportunity to make heavy use of pre-existing classes for which you have no source code; this is perhaps the most valuable real-world programming skill of all.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The program</p>\n\n<p>This program displays a maze and a solution to it.  It is capable of animating the maze generation process, as well as animating the search for a solution.  Here is a screenshot of the GUI:</p>\n\n<p class=\"center\"><img src=\"screenshot.jpg\" alt=\"\" /></p>\n\n<p>The maze is displayed on the left side of the GUI.  Along the right side are the options.  You can select either your own maze generator class or the one that I've provided; similarly, you can select either your own maze solver class or mine.  (By providing you with a maze generator and a maze solver, you can test each of your classes separately.)  You can also select the size of the maze before generating it, as well as decide whether you'd like to animate the maze as it's being generated and the solution as the maze is being solved.</p>\n\n<p>Try running the program and using the provided generator and solver to create and solve a maze, including the animation.  That will show you roughly how the program should behave when you've finished your own generator and solver (though my maze generator uses a different algorithm than yours will).</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Starting point</p>\n\n<p>All of the code that you'll need to complete this project is included in this <a href=\"Dark.zip\">Zip archive</a>.  Much of the code is provided in compiled (i.e. <b>.class</b>) form.  The provided <b>.java</b> files are heavily commented.</p>\n\n<p>You'll only need to work on two classes: <b>StudentMazeGenerator</b> and <b>StudentMazeSolver</b>.  Everything else is to be left as-is.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">How to run the program</p>\n\n<p>The <b>Dark</b> class contains a main( ) method.  To run the program, execute the <b>Dark</b> class.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Generating a maze</p>\n\n<p>In the <b>StudentMazeGenerator</b> class, you'll implement a maze generation algorithm.  There are lots of ways to generate mazes, but you'll implement one (relatively simple) algorithm in particular.  Our algorithm will generate a <i>perfect maze</i>.  Viewing a maze as a two-dimensional matrix of square cells, a perfect maze is one in which any two cells are connected by a single unique path.  As a consequence of this definition, all cells in a perfect maze are reachable from the starting point by some path, meaning that perfect mazes are guaranteed to have a unique solution.</p>\n\n<p>To generate a perfect maze, you'll use a recursive algorithm that is a variant of depth-first searching.  Recall depth-first tree traversals, in which one path in a tree is followed to completion before another path is followed.  We'll generate a maze in much the same way.  We'll start with a maze in which all of the possible walls exist (i.e. a wall exists on every side of each cell), then continue removing walls until we have a perfect maze.  The algorithm goes like this:</p>\n\n<ul>\n  <li>Mark the current cell as \"visited.\"</li>\n  <li>If the current cell has any adjacent cells that have not yet been visited...\n    <ul>\n      <li>Choose one of the unvisited adjacent cells at random.  Randomness is important here, or your algorithm will always generate the same maze.</li>\n      <li>Remove the wall between the current cell and the cell you just chose.</li>\n      <li>Recursively call the algorithm, with the chosen cell becoming the current cell.</li>\n    </ul>\n  </li>\n</ul>\n\n<p>As you generate your maze, make sure that you make the appropriate calls to the given MazeGeneratorListener object.  Essentially, any time your maze is altered, you should call a method on the MazeGeneratorListener.  This notifies the GUI that a change has been made, causing the maze to be redrawn each time.  Without making the right calls to the MazeGeneratorListener, the GUI will not animate the maze generating process.</p>\n\n<p>(You may notice when watching the animated version of both your maze generator and the provided one, the provided maze generator uses a very different algorithm from the one I described above.  This is intended.  For fun, I implemented the provided maze generator using a \"smarter,\" but more complicated, maze generating algorithm that generates mazes with more branches and, as a result, more difficult solutions.)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Solving a maze</p>\n\n<p>In the <b>StudentMazeSolver</b> class, you'll implement a maze solving algorithm.  Our algorithm will be a recursive one with <i>backtracking</i>.  A backtracking algorithm is one that recursively investigates all of the possibilities by moving down a path that hopefully leads to a solution and then, if that path fails, backing up to the place where the \"mistake\" was made and trying another path.</p>\n\n<p>I'll leave the details of this algorithm as an exercise for you to figure out.  If you understand the maze generating algorithm above, it should not be a big step to design the maze solving algorithm.</p>\n\n<p>As with the maze generating process, in addition to solving the maze, your method should make the appropriate calls to the given MazeSolverListener object.  The MazeSolverListener should be notified whenever the solution has changed.  This will allow the GUI to animate the solution.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>You need only turn in your <b>StudentMazeGenerator.java</b> and <b>StudentMazeSolver.java</b> files, along with any additional classes you created, if any.  You do not need to turn in any of the other files that were provided to you.  Follow <a href=\"../SubmittingProjects.html\">this link</a> for an explanation of how to turn in your project.</p>\n\n</div>\n\n<div class=\"section\">\n<hr />\n<p class=\"title\">Additional Work for Advanced Students</p>\n\n<p>Do some research in maze building; find and implement an algorithm that produces more complicated mazes than the one we had you use here. Submit your new generator (in a file with a different name, of course) along with the required one. Don&#146;t forget to comment your work well and to cite your sources.</p>\n\n<p>Do the same with the solver; that is, use a strategy that produces a correct result but in a faster or more memory-efficient manner than the one provided. Submit your new solver along with the required one. Again,  cite your sources and comment your work well.</p>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Some additional minor rewrites by Alex Thornton, Summer 2004.</li>\n  <li>Incorporated a few phrases written by Norman Jacobson, Spring 2003.</li>\n  <li>Originally written by Alex Thornton, Fall 2002.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}