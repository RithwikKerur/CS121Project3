{"url": "https://www.ics.uci.edu/~goodrich/teach/cs260P/hw/proj1.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n      \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<HTML><HEAD>\n<title> CompSci 260P Project #1</title>\n</HEAD><BODY>\n<span style=\"color:#000000; font:16px Arial, Helvetica, sans-serif;\">\n\n<H2 align=center>CompSci 260P Project #1 &mdash; Shellsort</H2>\n\n<a href=\"https://en.wikipedia.org/wiki/Shellsort\">\nShellsort</a>, the famous,\nclassic sorting algorithm, is really a family of different \nsorting algorithms, depending on the gap sequence that it uses.\nFor this project, you need to implement five (5) different \nversions of the Shellsort algorithm. \nSpecifically, you need to implement\nShellsort with the following five (5) different gap sequences:\n\n<ol>\n<li> The original Shell sequence, n/2<sup>k</sup>, for k=1,2,...,log n.\n<li> The sequence, 2<sup>k</sup>-1, for k=log n, ..., 7, 3, 1.\n<li> The Pratt sequence, 2<sup>p</sup>3<sup>q</sup>, ordered from \nthe largest such number less than n\ndown to 1.\n<li>\nThe <a href=\"https://oeis.org/A036562\">A036562</a> sequence,\nin reverse order, starting from the largest value less than n,\ndown to 1.\n<li>\nA sequence different than any of these, which you invented.\n</ol>\n\n<p>\nPlease test out multiple\npossibilities for your invented sequence, #5,\nwith the goal of making it the best of the five.\n\n<P>\nFollowing up on this, you need to do an experimental time\nanalysis by implementing each of the \n  five above versions of Shellsort, \nas n grows, with multiple runs for random permutations for each problem size.\nThat is, you need to\nperform an empirical comparative analysis by running these five\nimplementations on a variety of test cases to experimentally determine\nthe relative efficiencies of these\nalgorithms in the worst and average cases as a function of n.\n<p>\nFor each implementation, you need to perform runtime experiments\non random permutations, with multiple\nruns for each problem size, for increasing problem sizes. \nSpecifically, you need to do a set of experiments for each of the following\ndistributions:\n<ul>\n<li> <b>Uniformly distributed permutations</b>, \nwhere all permutations are equally likely.\n<li>\n<b>Almost-sorted permutations</b>. These are generated by starting with a \nsorted array/vector of n numbers, say, the numbers 1,2,3,...,n, in this order.\nThen, independently\nchoose 2log n pairs, (i,j), where i and j are uniformly-chosen random integers\nin the range from 0 to n-1, and swap the numbers at positions i and j in \nthe array/vector.\n</ul>\n\n<p>\nYou must plot \nthe results on a log-log scale (with uniformly distrubted permuations on one\nplot and almost-sorted permutations on another)\nto empirically determine the algorithm's\nasymptotic running time for each type of distribution.\nIf the data is well-fit with a line, then the \nslope of the line can be used to determine the exponent in the running time,\nas explained in this\n<a href=\"https://en.wikipedia.org/wiki/Log%E2%80%93log_plot\">Wikipedia\narticle about log-log plots</a> (focus especially on \"Relation with monomials\").\nYou then need to rank all your sorting implementations from asymptotically slowest\nto fastest based on your experimental results.\n\n\n<P>\n<h2> Deliverables (to be submitted via EEE dropbox) include the following:</h2>\n   <UL>\n   <LI> A ZIP file that includes the following:\n<UL>\n<LI>Source code (C, C++, Java, or Python) \n    of your program that implements and experimentally\n    tests the running times of the five versions of the Shellsort algorithm\n</UL>\n   <LI> A Report (in PDF) that includes the following:\n<UL>\n   <LI> Comparative experimental analysis and conclusions drawn from\nthe experiments ranking the quality of the gap sequences you tested. \nThis portion of the report should include a pseudo-code summary\nof your algorithm, design choices implemented in the source code (such\nas data structures and representations), and visual plots showing\ncomparitive empirical performance of the different versions\nof the Shellsort algorithm.\nThe plots should be on a log-log scale and you should use the slope of \na best line fit to determine the exponent of the polynomial for a \nbest estimate of the running time in terms of n for each version.\n</UL>\n</UL>\n</span>\n</BODY></HTML>\n\n", "encoding": "ascii"}