{"url": "https://www.ics.uci.edu/~eppstein/163/s11-hw3.txt", "content": "1. (a) Draw a directed graph, with a specified starting vertex, for\n   which Dijkstra's algorithm does not produce the correct distances to\n   all other nodes.\n\n   (b) Draw a directed graph, with a specified starting vertex, that has\n   at least one negative edge but does not have any negative cycles,\n   such that Dijkstra's algorithm works correctly for your graph despite\n   the fact that it has a negative edge.\n\n2. Suppose that we have already run Dijkstra's algorithm on a graph G,\n   but G has some negative edges. How can we tell whether the distances\n   produced by Dijkstra's algorithm are correct? Describe an algorithm\n   that can test this in linear time.\n\n   Your algorithm should take as input the (weighted) graph G together\n   with the distances D computed by Dijkstra's algorithm; it should\n   produce as output a Boolean value that is True if, for every vertex\n   v, D[v] = distance(s,v). Your algorithm should return False if there\n   is any vertex for which D[v] != distance(s,v).\n\n3. Suppose that we are using Johnson's algorithm\n   (http://en.wikipedia.org/wiki/Johnson%27s_algorithm) to find the\n   distances between all pairs of vertices in the graph G, described\n   below.\n\n   (a) Draw the shortest path tree from the new artificial vertex to the\n   other vertices in G.\n\n   (b) Show in a separate drawing the new weights in G after it is\n   reweighted to have all edge weights non-negative.\n\n   For problem 3, graph G has four vertices a, b, c, and d.\n       Vertex a has an edge of weight -2 to b.\n       Vertex b has an edge of weight -1 to c, and an edge of weight -4 to d.\n       Vertex c has an edge of weight -3 to d, and an edge of weight 5 to a.\n       Vertex d has an edge of weight 9 to a.\n\n4. Suppose that we have a road network in the form of a square grid in\n   the plane, with four square blocks each 1 mile by 1 mile big. (This\n   grid has nine intersections, forming the vertices of the network, and\n   twelve line segments connecting them, forming the edges.) Suppose\n   also that we wish to find a route from the vertex at the center of\n   the network to the vertex at the bottom right corner.\n\n   (a) In what order would Dijkstra's algorithm remove vertices, and\n   what are the priorities D[v] of each vertex v at the time that it is\n   removed? If two vertices have the same priority you may break the tie\n   between them in any way you like.\n\n   (b) In what order would the A* algorithm (using the same edge lengths\n   as Dijkstra's algorithm but with the priority D[v]+E[v], where E is\n   the straight-line distance between the two vertices) remove vertices,\n   and what are the priorities D[v]+E[v] of each vertex v at the time\n   that it is removed? Again, you may break ties however you like.\n", "encoding": "ascii"}