{"url": "https://www.ics.uci.edu/~ejw/authoring/props/draft-ietf-webdav-properties-extension-00.txt", "content": "WebDAV                                                        J. Amsden \nInternet Draft                                                      IBM \nDocument: draft-ietf-webdav-properties-extension-00.txt  September 1999 \nCategory: Informational                                                 \nExpires: March, 2000 \n \n \n                Proposed Extensions to WebDAV Properties \n \n \nStatus of this Memo \n \n    \n   This document is an Internet-Draft and is in full conformance with \n      all provisions of Section 10 of RFC2026 [1].  \n    \n   Internet-Drafts are working documents of the Internet Engineering \n   Task Force (IETF), its areas, and its working groups. Note that \n   other groups may also distribute working documents as Internet-\n   Drafts. Internet-Drafts are draft documents valid for a maximum of \n   six months and may be updated, replaced, or obsoleted by other \n   documents at any time. It is inappropriate to use Internet- Drafts \n   as reference material or to cite them other than as \"work in \n   progress.\" \n     \n   The list of current Internet-Drafts can be accessed at \n   http://www.ietf.org/ietf/1id-abstracts.txt \n \n   The list of Internet-Draft Shadow Directories can be accessed at \n   http://www.ietf.org/shadow.html. \n    \n    \n1. Abstract \n    \n   The WebDAV protocol defines facilities for adding properties to Web \n   resources. These properties consist of name/value pairs interchanged \n   using XML. The protocol includes the PROPFIND method for accessing \n   properties, and the PROPPATCH method for updating and removing \n   properties. Experience building both WebDAV clients and a WebDAV \n   server indicates the need for three minor extensions to the current \n   properties protocol: 1) allow PROPPATCH to create and initialize the \n   properties of a resource that did not exist, 2) distinguish between \n   adding a new property, and setting the value of an existing property \n   of a resource, and 3) give client applications more control in \n   specifying how PROPPATCH errors should be handled. \n    \n    \n2. Conventions used in this document \n    \n   Since this document describes a set of extensions to the HTTP/1.1 \n   protocol, the augmented BNF used here to describe protocol an element \n   is exactly the same as described in Section 2.1 of [HTTP].  Since \n   this augmented BNF uses the basic production rules provided in \n   Section 2.2 of [HTTP], these rules apply to this document as well. \n  \nAmsden          Informational \u00fb Expiration March 2000               1 \n\n\n               Proposed Extensions to WebDAV Properties September 1999 \n \n \n    \n   In examples, \"C:\" and \"S:\" indicate lines sent by the client and \n   server respectively. \n    \n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in \n   this document are to be interpreted as described in RFC-2119 [2]. \n    \n    \n3. Terminology \n    \n   The terminology used here extends that defined in the WebDAV \n   Distributed Authoring Protocol specification [WebDAV]. Definitions of \n   the terms resource, Uniform Resource Identifier (URI), and Uniform \n   Resource Locator (URL) are provided in [URI]. \n    \n   Null Property - A property that responds with 404 (Not Found) to a \n   PROPFIND method. A null property MUST not appear in the list of \n   properties of a resource the PROPFIND is specified with DAV:allprop. \n    \n    \n4. Introduction \n    \n   This Internet Draft specification introduces three simple extensions \n   or modifications to the handling of WebDAV properties. All are based \n   on experience gained through building a WebDAV class 2 server, and \n   sample client applications. The extensions are all compatible with \n   existing WebDAV property semantics, and all involve property updates \n   through the PROPPATCH method. \n \n\n4.1 PROPPATCH on a Null Resource \n \n\n   HTTP and WebDAV do not specify methods for creating resources; they \n   are created as the side effect of other methods. For example, PUT on \n   a null resource (a resource that does not exist) creates the resource \n   and establishes its initial contents. LOCK on a null resource creates \n   a lock-null resource, which has properties, but no content. COPY and \n   MOVE can create resources at the destination URI. It is often \n   necessary to create resources and initialize their state before any \n   other access is allowed in order to ensure the integrity of the \n   operations. WebDAV currently has no protocol for creating and \n   initializing the properties of a resource in a single method. This \n   Internet Draft proposes that PROPPATCH on a null resource creates the \n   resource with empty contents, and initializes its properties based on \n   the propertyupdate elements in the request entity body. \n \n\n   The WebDAV spec is currently somewhat silent about PROPPATCH on a \n   null resource. It does say that PROPPATCH on a lock null resource (a \n   resource created by the LOCK method) will fail, but this is \n   inconsistent with PUT which is allowed, and changes the state of the \n   resource from lock null to resource. [HTTP] uses status 404, Not \n   Found, to indicate the server has not found anything matching the \n   Request-URI. It does not say that the server cannot create a resource \n\n  \n<Lastname>              Category - Expiration                       2 \n\n\n               Proposed Extensions to WebDAV Properties September 1999 \n \n \n   at the Request-URI. The HTTP and WebDAV PUT method on a null resource \n   is defined to create the resource and set its initial contents. \n   Allowing PROPPATCH on a null resource to create the resource and set \n   its initial properties is consistent with the PUT semantics, and \n   other resource state changing methods that create resources as a side \n   effect. \n \n\n4.2 Adding New Properties \n \n\n   Typical database management systems distinguish three kinds of \n   updates; add, remove, and change. It is often necessary to \n   distinguish between add and change in order to ensure a property is \n   added only once, and that its value is not inadvertently changed \n   after it has been initialized.  \n    \n   The WebDAV PROPPATCH method updates a resource's properties based on \n   the instructions contained in the DAV:propertyupdate element of the \n   request entity body. The propertyupdate element currently supports \n   setting and removing properties. DAV:set creates a new property if it \n   does not exist, and sets its value. If the property already exists, \n   the value is changed.  \n    \n   This Internet Draft proposes the addition of a DAV:add propertyupdate \n   that adds a new property and sets its value, but fails if the \n   property already exists. In addition, this draft proposes that \n   DAV:set on a null property (a property that does not exist) fails \n   instead of creating a new property. This may help prevent erroneous \n   client property updates resulting from setting the values of \n   properties where the property name is incorrectly specified. \n    \n4.3 Handling PROPPATCH Errors \n \n\n   Client applications currently use PROPPATCH to update the properties \n   of a resource. PROPPATCH supports the update of a number of \n   properties in a single method request in order to reduce \n   communication overhead and maintain resource state integrity with \n   atomic updates.  \n    \n   Currently, the WebDAV spec dictates that the result of a PROPPATCH is \n   an atomic transaction. That is, either all the updates succeed, or \n   none of them succeed and the updates are rolled back. This can result \n   in excessive client burden. A client application may attempt to make \n   a number of updates with PROPPATCH, and doesn't care if some of them \n   don't succeed. This is often the case when some of the properties are \n   live on the server, but the client has no way to determine which are \n   live without attempting to update their value and getting an error. \n   This situation arises when different servers support different live \n   properties. Updating the desired properties, ignoring the ones that \n   are live requires the client to attempt the update, examine the \n   DAV:multistatus response that is returned, construct a new PROPPATCH \n   entity request body removing the properties that failed, and re-\n   submitting the PROPPATCH request.  \n    \n\n  \n<Lastname>              Category - Expiration                       3 \n\n\n               Proposed Extensions to WebDAV Properties September 1999 \n \n \n   This Internet Draft proposes that a mechanism be added to the \n   DAV:propertyupdate element that gives client applications more \n   control over updating resource properties by allowing the protocol to \n   specify how to handle errors on each of the updates in the \n   DAV:propertyupdate of a PROPPATCH entity request body. This is \n   similar to the DAV:propertybehavior element of the COPY and MOVE \n   entity request body that is used to specify how properties are copied \n   to the destination resource.  \n    \n   By making this change to the PROPPATCH entity request body, it is now \n   possible to completely specify the semantics of COPY and MOVE in \n   terms of the more primitive GET, PUT, PROPFIND, and PROPPATCH \n   methods. This is not currently possible because there is no way to \n   process the DAV:propertybehavior element of the COPY or MOVE entity \n   request body with a PROPPATCH method. \n    \n    \n5. PROPPATCH Protocol Changes \n    \n   This section specifies changes to section 8.2 PROPPATCH of [WebDAV] \n   and section 12 to support the semantics described above. \n    \n   Update section 8.2 PROPPATCH to indicate that PROPPATCH on a null \n   resource creates the resource at the given Request-URI, and \n   initializes its properties as specified in the DAV:propertyupdate \n   element of the PROPPATCH entity request body. \n    \n   Change section 8.2 PROPPATCH to include simple error processing of \n   PROPPATCH method requests. Update the DAV:set and DAV:remove elements \n   to include information describing how the client wishes to handle \n   errors. Change the semantics of DAV:set to fail on a null property. \n    \n   Change section 12.13.2 set XML element to: \n    \n   12.13.2 set XML element \n    \n   Name:            set \n   Namespace:       DAV: \n   Purpose:         List the DAV property values to be set for a \n   resource. \n   Description: The set XML element MUST contain only a prop XML \n   element. The elements contained by the prop XML element inside the \n   set XML element MUST specify the name and value of properties that \n   are set on the resource identified by the Request-URI. If the \n   property does not exist then a 404 (Not Found) status is returned, \n   and the property update fails. The DAV:updatebehavior element \n   specifies how update failures are to be handled. Language tagging \n   information in the property's value (in the \"xml:lang\" attribute, if \n   present) MUST be persistently stored along with the property, and \n   MUST be subsequently retrievable using PROPFIND. \n    \n   <!ELEMENT set (prop, updatebehavior?) > \n    \n  \n<Lastname>              Category - Expiration                       4 \n\n\n               Proposed Extensions to WebDAV Properties September 1999 \n \n \n   Change section 12.13.1 remove XML element to: \n    \n   12.13.1 remove XML element \n    \n   Name:            remove \n   Namespace:       DAV: \n   Purpose:         List the DAV property values to be removed from a \n   resource. \n   Description: Remove instructs that the properties specified in the \n   prop should be removed. Specifying the removal of a null property is \n   not an error. All the XML elements in a prop XML element inside of a \n   remove XML element MUST be empty, as only the names of properties to \n   be removed are required. The DAV:updatebehavior element specifies how \n   update failures are to be handled. \n     \n   <!ELEMENT remove (prop, updatebehavior?) > \n    \n   Extend the DAV:propertyupdate element of the PROPPATCH entity request \n   body to include element DAV:add. The DAV:add element has the same \n   contents as DAV:set.  \n    \n   Adding a property fails with 403 (Forbidden) if the property already \n   exists. Setting a null property results in a 404 (Not Found) status. \n    \n   Change to section 12.13 propertyupdate XML element to: \n    \n   12.13 propertyupdate XML element \n    \n   Name:            propertyupdate \n   Namespace:       DAV: \n   Purpose:         Contains a request to alter the properties on a \n   resource \n   Description:     This XML element is a container for the information \n   required to modify the properties on the resource. This XML element \n   is multi-valued to support adding, changing, and/or removing \n   properties. \n    \n   <!ELEMENT propertyupdate (add | set | remove) > \n    \n   Add section 12.13.3, add XML element as follows: \n    \n   12.13.3 add XML element \n    \n   Name:            add \n   Namespace:       DAV: \n   Purpose:         List the DAV property values to be added to a \n   resource. \n   Description: The add XML element MUST contain only a prop XML \n   element. The elements contained by the prop XML element inside the \n   add XML element MUST specify the name and value of properties that \n   are to be added to the resource identified by the Request-URI. If a \n   property already exists then a 403 (Forbidden) status is returned, \n   and the property is not added. The DAV:updatebehavior element \n  \n<Lastname>              Category - Expiration                       5 \n\n\n               Proposed Extensions to WebDAV Properties September 1999 \n \n \n   specifies how update failures are to be handled. Language tagging \n   information in the property's value (in the \"xml:lang\" attribute, if \n   present) MUST be persistently stored along with the property, and \n   MUST be subsequently retrievable using PROPFIND. \n    \n   <!ELEMENT add (prop, propertyupdate?) > \n    \n   Add sections to section 12.13 to specify error processing on property \n   updates. \n    \n   12.13.4 updatebehavior XML element \n    \n   Name:            updatebehavior \n   Namespace:       DAV: \n   Purpose:         Specify how errors on property updates are to be \n   handled. \n   Description: An updatebehavior specifies how errors are to be handled \n   on the corresponding DAV:add, DAV:set, or DAV:remove propertyupdate. \n   The client can specify that the error should be ignored, or that it \n   must succeed. If DAV:mustsucceed is specified, then the PROPPATCH \n   method will fail if any of the updates fail. This is the default \n   behavior. \n    \n   <!ELEMENT updatebehavior (ignore | mustsucceed) > \n    \n   12.13.5 ignore XML element \n    \n   Name:            ignore \n   Namespace:       DAV: \n   Purpose:         Causes corresponding property update errors to be \n   ignored \n   Description: The default behavior for a PROPPATCH method is all \n   property updates must succeed, or none of them succeed. If an \n   updatebehavior is not included, it is equivalent to the default \n   behavior or specifying <mustsucceed>*</mustsucceed> meaning that all \n   the updates must be successful or none of them are performed. The \n   DAV:ignore element specifies that the server should make best-effort \n   property updates. Any error caused by the associated propertyupdate \n   is ignored. The error is reported in the resulting DAV:multistatus, \n   but the rest of the updates specified in the PROPPATCH entity request \n   body are processed as if this propertyupdate was not specified. \n    \n   <!ELEMENT ignore EMPTY > \n    \n   12.13.6 mustsucceed XML element \n    \n   Name:            mustsucceed \n   Namespace:       DAV: \n   Purpose:         Specifies the corresponding property update must \n   succeed. \n   Description: The default behavior for a PROPPATCH method is all \n   property updates must succeed, or none of them succeed. The \n   DAV:mustsucceed element allows the client to specify a list of named \n  \n<Lastname>              Category - Expiration                       6 \n\n\n               Proposed Extensions to WebDAV Properties September 1999 \n \n \n   properties whose property update must succeed. Any error caused by \n   the associated propertyupdate causes the PROPPATCH method to fail, \n   and all property updates are rolled back. If a value of \"*\" is given \n   for the mustsucceed XML element, this designates that all property \n   updates must succeed. \"*\" is the only PCDATA value that can be \n   specified. \n    \n   <!ELEMENT mustsucceed (#PCDATA | href+)> \n    \n   Note: element DAV:mustsucceed may not be necessary because the \n   default behavior is for the PROPPATCH to fail if any propertyupdate \n   fails. It is really only necessary to specify which errors are to be \n   ignored. I have included it here for completeness, and consistency \n   with the DAV:keepalive XML element. \n    \n    \n6. Formal Syntax \n    \n   < Commonly used grammar is BNF grammar defined in RFC-2234.  \n   Suggested wording.> \n \n   This section summarizes the changes and additions to the WebDAV DTD \n   given in section 24.1 of [WebDAV]. \n     \n   <!ELEMENT propertyupdate (add | set | remove)+> \n    \n   <!ELEMENT add (prop, updatebehavior?) > \n   <!ELEMENT set (prop, updatebehavior?) > \n   <!ELEMENT remove (prop, updatebehavior?) > \n    \n   <!ELEMENT updatebehavior (ignore | mustsucceed)> \n   <!ELEMENT ignore EMPTY> \n   <!ELEMENT mustsucceed (#PCDATA | href+)> \n    \n    \n7. Security Considerations \n \n   This section is provided to detail issues concerning security  \n   implications of which WebDAV applications need to be aware.  \n    \n   All of the security considerations of HTTP/1.1 and the WebDAV  \n   Distributed Authoring Protocol specification also apply to WebDAV  \n   collections.  \n    \n   These changes may introduce a denial of service security violation \n   through the possibility of a client application exhausting server \n   resources with PROPPATCH methods. However, the same possibility \n   exists with PUT operations, so no new security issues are introduced. \n    \n    \n8. IANA Considerations \n \n\n\n  \n<Lastname>              Category - Expiration                       7 \n\n\n               Proposed Extensions to WebDAV Properties September 1999 \n \n \n   This document uses the namespaces defined by [WebDAV] for properties \n   and  \nXML elements.  All other IANA considerations mentioned in [WebDAV] also  \napply to this document. \n \n\n9. Copyright \n \n\n   To be supplied by the RFC Editor. \n \n\n10. Intellectual Property \n \n\n   To be supplied by the RFC Editor. \n \n\n11. References \n    \n \n   1  Bradner, S., \"The Internet Standards Process -- Revision 3\", BCP \n      9, RFC 2026, October 1996. \n    \n   2  Bradner, S., \"Key words for use in RFCs to Indicate Requirement \n      Levels\", BCP 14, RFC 2119, March 1997 \n    \n    \n    \n   [RFC2119] S. Bradner, \"Key words for use in RFCs to Indicate \n   Requirement  \n   Levels.\"  RFC 2119, BCP 14.  Harvard University.  March, 1997. \n    \n   [XML] T. Bray, J. Paoli, C.M. Sperberg-McQueen, \"Extensible Markup  \n   Language (XML).\"  World Wide Web Consortium Recommendation REC-xml- \n   19980210. http://www.w3.org/TR/1998/REC-xml-19980210. \n    \n   [HTTP] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, T. Berners-Lee,  \n   \"Hypertext Transfer Protocol -- HTTP/1.1.\" RFC 2068.  UC Irvine, DEC,  \n   MIT/LCS.  January, 1997. \n    \n   [WebDAV] Y. Y. Goland, E. J. Whitehead, Jr., A. Faizi, S. R. Carter, \n   D.  \n   Jensen, \"HTTP Extensions for Distributed Authoring - WebDAV.\" RFC \n   2518.   \n   Microsoft, U.C. Irvine, Netscape, Novell.  February, 1999. \n    \n    \n11. Acknowledgments \n    \n   This draft has benefited from thoughtful discussion by Jim Whitehead, \n   Geoff Clemm, and others. \n    \n    \n12. Author's Addresses \n    \n   James Amsden \n   IBM \n\n  \n<Lastname>              Category - Expiration                       8 \n\n\n               Proposed Extensions to WebDAV Properties September 1999 \n \n \n   3039 Cornwallis Road \n   RPT, NC \n   Phone: 919-461-3919 \n   Email: jamsden@us.ibm.com \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n<Lastname>              Category - Expiration                       9 \n\n", "encoding": "ISO-8859-1"}