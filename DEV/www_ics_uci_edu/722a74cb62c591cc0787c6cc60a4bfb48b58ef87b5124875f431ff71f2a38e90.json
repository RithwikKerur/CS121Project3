{"url": "https://www.ics.uci.edu/~eppstein/263/s14-hw8.html", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n<html>\n<head>\n<title>CompSci 263, Spring 2014, Homework 8</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\"\n  src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<h1>CS 263, Spring 2014, Homework 8</h1>\n<h2>Due at the start of class, Thursday, May 29</h2>\n\n<ol>\n<li><p>A <i>dominating set</i> in a graph is a subset $D$ of the vertices such that every vertex in the graph either belongs to $D$ or is adjacent to $D$. Use backtracking to show that, in graphs with maximum degree three, a dominating set of $k$ vertices (if one exists) can be found in fixed-parameter-tractable time.</p></li>\n<li><p>A <i>complete bipartite cover</i> of a graph $G$ is a collection of complete bipartite subgraphs of $G$ that together include every edge in $G$. The <i>size</i> of a complete bipartite cover is the number of complete bipartite subgraphs in it. Use kernelization to show that finding a complete bipartite cover of size $k$ (if one exists) is fixed-parameter tractable.</p></li>\n<li><p>An algorithm is defined to be fixed-parameter tractable if its running time is $O(f(k)p(n))$ where $n$ is the input size, $k$ is the additional parameter we're using to analyze the algorithm, $p$ is a polynomial that does not depend on $k$, and $f$ is an arbitrary (computable) function. Define an algorithm to be <i>strongly fixed-parameter tractable</i> if its running time is instead $O(f(k)+p(n))$ for a (possibly different) computable function $f$ and polynomial $p$. Show that every fixed-parameter tractable algorithm is strongly fixed-parameter tractable.</p></li>\n<li><p>In class we analyzed the time for finding $k$-vertex paths, using color-coding with $k$ colors, as\n$$O(\\frac{k^k}{k!}2^k(n+m)).$$\nSuppose we use $k+1$ colors instead of $k$ colors. Would the time be slower or faster, and by how much?</p></li>\n</ol>\n</body>\n</html>\n", "encoding": "ascii"}