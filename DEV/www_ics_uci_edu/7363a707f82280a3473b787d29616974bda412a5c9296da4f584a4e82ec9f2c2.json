{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node230.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> I/O in External Predicates</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" I/O in External Predicates\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html5013 HREF=\"node231.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html5011 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html5005 HREF=\"node229.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html5015 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html5014 HREF=\"node231.html\"> Arrays</A>\r\n<B>Up:</B> <A NAME=tex2html5012 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html5006 HREF=\"node229.html\"> Strings</A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION001948000000000000000> I/O in External Predicates</A></H2>\r\n<P>\r\n<A NAME=tex2html791 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  provides the user with the ability to perform i/o on\r\nits predefined streams as well as on the dynamically opened ones.\r\n<A NAME=tex2html792 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  stream identifiers which correspond to the predefined streams are\r\n<DL ><DT>\r\n<DD> <tt> Current_Input</tt>\r\n<A NAME=3549>&#160;</A>\r\n<P>\r\n<DT>\r\n<DD> <tt> Current_Output</tt>\r\n<A NAME=3551>&#160;</A>\r\n<P>\r\n<DT>\r\n<DD> <tt> Current_Error</tt>\r\n<A NAME=3553>&#160;</A>\r\n<P>\r\n<DT>\r\n<DD> <tt> Toplevel_Input</tt>\r\n<A NAME=3555>&#160;</A>\r\n<P>\r\n<DT>\r\n<DD> <tt> Toplevel_Output</tt>\r\n<A NAME=3557>&#160;</A>\r\n<P>\r\n<DT>\r\n<DD> <tt> Answer_Output</tt>\r\n<A NAME=3559>&#160;</A>\r\n<P>\r\n<DT>\r\n<DD> <tt> Debug_Input</tt>\r\n<A NAME=3561>&#160;</A>\r\n<P>\r\n<DT>\r\n<DD> <tt> Debug_Output</tt>\r\n<A NAME=3563>&#160;</A>\r\n<P>\r\n </DL>\r\nThese are C variables of type <tt> stream_id</tt>.\r\nOther streams can be passed to the external predicates in the same way as\r\nto builtins that accept stream specifications.\r\nSuch a stream specifications must then be converted into a C variable\r\nof the type <tt> stream_id</tt> by using the macro\r\n<blockquote> <PRE>p_example(sval, stag)\r\nvalue sval;\r\ntype  stag;\r\n{\r\n    stream_id stream;\r\n    Get_Stream(sval, stag, OUTPUT, stream)\r\n    ...\r\n}\r\n</PRE>\r\n</blockquote>\r\nwhere the third parameter specifies if the stream must be open for INPUT\r\nor OUTPUT.\r\n<P>\r\nThere are two main functions to perform i/o on Prolog streams:\r\nformated printing in the usual C way is done by\r\n<blockquote> <PRE>Fprintf(stream, format, arg1, arg2, ...)\r\n</PRE></blockquote>\r\n<A NAME=3571>&#160;</A>\r\nis similar to <tt> fprintf(3)</tt> in that its first argument\r\nis a stream identifier, the second one is a string which specifies the format\r\nin the style of <tt> printf(3)</tt> and the rest is a variable number\r\nof arguments to be printed.\r\n<P>\r\nProlog terms can be output with the function\r\n<blockquote> <PRE>Write(val, tag, stream)\r\n</PRE></blockquote>\r\n<A NAME=3576>&#160;</A>\r\nwhich outputs the term with tag <tt> tag</tt> and value <tt> val</tt> on\r\nthe specified Prolog stream.\r\nFor example\r\n<blockquote> <PRE>Fprintf(Current_Output,\r\n        &quot;tag = %d, value = %d\\n&quot;, tag.kernel, val.nint);\r\nWrite(val, tag, Current_Output);\r\n</PRE>\r\n</blockquote>\r\nare two ways how to print a Prolog integer number; the output\r\nlooks like\r\n<blockquote> <PRE>tag = 5, value = 1\r\n1\r\n</PRE></blockquote>footnote\r\nBe aware that you can not rely on a specific coding of a <A NAME=tex2html790 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  tag!\r\nSimilarly, the macro\r\n<blockquote> <PRE>Writeq(val, tag, stream)\r\n</PRE></blockquote>\r\n<A NAME=3586>&#160;</A>\r\nhas the effect of <b> writeq/2</b>.\r\n<P>\r\n<BR> <HR><A NAME=tex2html5013 HREF=\"node231.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html5011 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html5005 HREF=\"node229.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html5015 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html5014 HREF=\"node231.html\"> Arrays</A>\r\n<B>Up:</B> <A NAME=tex2html5012 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html5006 HREF=\"node229.html\"> Strings</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}