{"url": "https://www.ics.uci.edu/~wscacchi/ResearchBio.html#OS", "content": "<!doctype html public \"-//w3c//dtd html 4.0 transitional//en\">\r\n<html>\r\n<head>\r\n   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r\n   <meta name=\"Template\" content=\"C:\\PROGRAM FILES\\MICROSOFT OFFICE\\OFFICE\\html.dot\">\r\n   <meta name=\"GENERATOR\" content=\"Mozilla/4.75 [en] (WinNT; U) [Netscape]\">\r\n   <title>PersonalBiography</title>\r\n</head>\r\n<body link=\"#0000FF\" vlink=\"#800080\">\r\n\r\n<h2>\r\nResearch Biography for Walt Scacchi</h2>\r\nOver the past 20 years, a substantial majority of Dr. Scacchi's research\r\ncenters about three interrelated categories:\r\n<ul>\r\n<li>\r\n<a href=\"#OS\">Organizational Studies of Computing/Software Development</a></li>\r\n\r\n<li>\r\n<a href=\"#SF\">The System Factory Project and Environments</a></li>\r\n\r\n<li>\r\n<a href=\"#SP\">Organizational and Software Processes</a></li>\r\n</ul>\r\nHe maintains an active interest and research activity in the first and\r\nthird categories, while work on the second, the System Factory Project,\r\noccurred primarily during 1981-1990. This document highlights significant\r\nand representative research problems and results he has developed, as well\r\nas the concepts, techniques, and tools that gave rise to these results.\r\nThere are also citations to 25 or so publications in each category that\r\nhe has produced to document these research efforts. His research contributions\r\nin each of the three categories have been recognized both nationally and\r\ninternationally, as is shown below. Beyond this, there are also some modest\r\ndetails regarding his <a href=\"#Teaching\">teaching</a> and <a href=\"#Service\">service</a>\r\nexperience.\r\n<p>Overall, Dr. Scacchi's research efforts have been focused on the question,\r\n<i>how\r\ndo computing/software systems come to be the way they are? </i>Such a question\r\npoints to his interest in understanding how computing/software systems\r\nare produced and consumed within different organizational settings.\r\n<p><a NAME=\"OS\"></a><b>Organizational Studies of Computing/Software Development\r\n[OS]</b>\r\n<p>Dr. Scacchi's earliest research efforts were dominated by his interest\r\nin conducting empirical studies of how computing systems are used and evolved--that\r\nis, consumed--in various organizational settings [OS1-OS5,OS7]. He observed,\r\nstudied and conducted interviews in a municipal government MIS shop, a\r\nphysics research laboratory, an insurance company, and a computer science\r\nresearch institute. These studies focused on characterizing the attributes,\r\ndescribing the processes, and identifying recurring patterns of organizational\r\nbehavior surrounding the use, maintenance or evolution of local computing\r\nenvironments. Further, these characteristics, descriptions, and patterns\r\nwere grounded in the goals, relationships and constraints that participants\r\nassociated with the computing technology at hand within its organizational\r\ncontext. Concomitant with these studies, he worked with his advisor, Rob\r\nKling, to develop new concepts that would serve as an emerging language\r\nfor analyzing and understanding instrumental computer use. Principal among\r\nthese concepts was the \"computing package\" [OS1,OS3,OS5], \"multiple perspectives\r\nfor understanding computing in organizations\" [OS4,OS5], and the \"web of\r\ncomputing\" [OS7,OS5].\r\n<p>The computing package refers to a recognition that a given computing\r\nsystem is simultaneously embedded within multiple organizational contexts\r\n(e.g., user community, developer setting, maintenance organization, administrative\r\nunit invoking policies for access/use of computing resources, etc.). This\r\ngives rise to a variety and pattern of conditions that made the instrumental\r\nuse of computing often problematic [OS3]. Therefore, to understand how\r\nsuch a system is consumed, one must understand how it is embedded within\r\neach participating context. This includes understanding what resources\r\nare in contention, how satisfied users are with computing operations, whether\r\ncomputer use is mandatory or discretionary, etc.), as well as how participants\r\nmaneuver through or around these contexts in order to get their work done.\r\nThe significance of the computing package as a contribution and new perspective\r\nfor understanding computing in organizations was highlighted at length\r\n(2 pages) in an 8 page review of the 1979 AFIPS National Computer Conference\r\nappearing in <i>IEEE Computer</i> 12(8):79-86, 1979. Such recognition was\r\nparticularly gratifying for him as this was the first research paper he\r\npresented solo at a major research conference. In later studies focused\r\non the production of new software development technologies, he employed\r\nthe computing package concept to help reveal how it could serve as a design\r\nheuristic and project management strategy. His goal was to development\r\nnew techniques to simplify the deployment, adoption and integration of\r\nthese new technologies in different organizational settings [OS8,OS9,OS12,OS20,OS21,OS24].\r\n<p>Through ongoing studies of the instrumental use of computing and computing\r\npackages in different settings, Kling and Scacchi recognized that there\r\nwere a number of alternative perspectives one could employ when trying\r\nto understand how people use and evolve computing systems within organizations.\r\nBy 1980, they had identified six distinct analytical perspectives that\r\ncould be employed for such purposes [OS4]. In hindsight, the use of multiple\r\nperspectives seems obvious, though at the time (1980), there were no other\r\nresearch publications offering or employing such an analytical regimen.\r\n<p>Rather than attempt to characterize each perspective, two noteworthy\r\npoints about their existence and usage can be made. First, there is no\r\nsingle best perspective to use to understand computing in all settings\r\nor situations. No one perspective guarantees a better truth than any other\r\ndoes. However, people who seek to characterize or explain how a computing\r\nsystems are used and evolved (whether in good or bad ways) typically choose\r\nonly one or two perspectives to situate their analysis. This means by having\r\nknowledge of other analytical perspectives, it becomes possible to discover\r\nholes or blind spots in an analysis drawn from any single perspective.\r\nSecond, the multiple perspectives can be used prescriptively to anticipate\r\nor predict characteristics, patterns or outcomes associated with the development\r\nand deployment of new computing technologies [OS2,OS6,OS10,OS13,OS16].\r\nClearly, prescriptive use is meant to provide a framework for understanding\r\nand investigating models/theories that can be empirically substantiated\r\nor refuted. Such insights might then favorably influence the production\r\nor development of new computing systems in ways that increases the likelihood\r\nof their successful use and constructive evolution. For example, Kristen\r\nNygaard (an original developer of Simula-67 programming language) was sufficiently\r\ninfluenced by the analytical power of multiple perspectives that he and\r\nhis colleagues introduced language constructs for describing perspectives\r\ninto the programming language Beta in the 1980s. This was an attempt to\r\nsupport the modeling and interpretation of different perspectives. This\r\nin turn could facilitate and encourage the work oriented design of computing\r\nsystems for their users. Thus, multiple analytical perspectives can be\r\nemployed to describe/model and analyze how computing systems fit into the\r\nwork patterns and processes of their users.\r\n<p>The web of computing was a concept developed by Kling and Scacchi to\r\ncombine the computing package and multiple analytical perspectives to more\r\nsuccinctly account for the organizational patterns and work processes that\r\nwe were observing in our respective field studies. By this time (1980-1981),\r\nthey came to find that the configuration of hardware and software resources\r\nin an organization, together with the organizational policies governing\r\ntheir use and maintenance were inextricably intertwined with the way people\r\nused computing in their work. Computing technology was thus a form of social\r\norganization at work [OS7]. Changing (or \"innovating\") the computing technology\r\nat hand within an organization would therefore precipitate change or innovation\r\nin the social organization of work for the participants [O5]. This web\r\nof computing perspective could thus act as an combination or unification\r\nof multiple perspectives for understanding how different kinds of computing\r\nsystems are consumed in different organizational settings [OS5,OS7]. Dr.\r\nScacchi would later employ this result in understanding and managing the\r\nproduction and use of new software development tools and techniques, as\r\ndescribed later. Overall, the web of computing emerged as a dominant perspective\r\nwithin an international community of researchers for analyzing and explaining\r\nempirically or theoretically derived research results for how computing\r\nfits into or shapes the tempo, place and processes of work in complex organizations.\r\nDozens of papers have employed or cited the web of computing paper [OS7].\r\nFor example, work by Curtis and others at the MCC Software Technology Program\r\nacknowledged that the web of computing played a central role in their conception\r\nof how to understand software design processes using multiple levels of\r\nanalysis (cf. B. Curtis, H. Krasner, and N. Iscoe, <i>\"</i>A Field Study\r\nof Software Design Processes for Large Systems<i>\", Comunications ACM</i>,\r\n31(11), 1268-1287, 1988). Beyond this, one can also find references to\r\nuse of the Web of Computing paper (as of 1998) listed in academic course\r\nsyllabi found on the World Wide Web through a common search engine. Last,\r\na recent paper by Wanda Orlikowski and Suzanne Iacono, \"Desperately Seeking\r\nthe \"IT\" in IT Research: A Call to Theorizing the IT Artifact\", <i>Information\r\nSystems Research, </i>12(2), June 2001, makes frequent reference to the\r\nWeb of Computing paper and analytical framework. Orlikowski and Iacono,\r\nafter reviewing the collection of papers published in the past 10 years\r\nin this prestigious journal, call for a new research agenda for the Information\r\nSystems community that explores and builds on concepts such as those attributed\r\nto the Web of Computing, as developed by Kling and Scacchi. Thus, the Web\r\nof Computing continues to be one of the most influential in the area of\r\norganizational studies of computing and information systems, some 20 years\r\nafter its original publication.\r\n<p>Part of Dr. Scacchi's collaborative contribution to the development\r\nof the web of computing as an analytical approach lie in his research into\r\nunderstanding the process of innovation in computing [OS5]. Simply stated,\r\none way to understand how computing/software systems are used, maintained\r\nor evolve is to empirically examine the processes associated with how such\r\nsystems change over time within their organizational setting. This work\r\nalso marked his initial foray into the study of the formal and informal\r\nprocesses people engage when they change or innovate their computing environment.\r\nThis focus on these processes in general, and those associated specifically\r\nwith the production of software tools and applications have since become\r\na central category of his research in the last 10 years. In addition, his\r\nfocus on innovation process later evolved to include studies of software\r\nsystem development (i.e., producing new software innovations) [OS6], software\r\nmaintenance (i.e., incremental software innovation) [OS11,OS14] and software\r\ntechnology transfer processes and barriers [OS17,OS24].\r\n<p>Other accomplishments in Dr. Scacchi's organizational studies of computing/software\r\nsystems draw upon the preceding results, but now focus primarily on examining\r\nthe different aspects of system production. This move represented his attempt\r\nto broaden the scope of organizational studies of computing/software systems\r\nto include understanding how complex systems are developed, and whether\r\nthey can be developed in a manner that constructively exploits an awareness\r\nof the computing package, multiple analytical perspectives, and the web\r\nof computing. He originated and introduced over a dozen novel strategies/heuristics\r\nfor how software development projects could be more effectively and efficiently\r\nmanaged to produce successful systems [OS8,OS9,OS12,OS20,OS21]. In general\r\nterms, these strategies focus on understanding and managing the computing\r\npackage/web, the structure and flow of work processes and teamwork [OS19],\r\ninnovation processes, and handling problems and breakdowns [SP5]. For example,\r\nhe suggested explicitly mapping/modeling the computing package associated\r\nwith a software system being developed for a local user base. Later, he\r\nsuggested how the web of computing associated with a new software system\r\ncould be described or modeled as a configuration of resources. These resources\r\n(\"objects\") and their configurations (\"resource architectures\" or webs)\r\ncan model how systems are produced, used or consumed (\"relations\") by people\r\n(\"agents\") using computing systems (\"tools\") and artifacts (\"documents\")\r\nin the course of their work (\"tasks\" and \"processes\") [SF/E12,SF/E18,SP1-SP4].\r\nFinally, through a comparative secondary analysis of more than a dozen\r\nempirical studies of what affects the productivity of software development\r\norganizations/projects, he found some independent support for his strategies,\r\nbut no contradictory evidence for their refutation [OS18,OS23].\r\n<p>Overall, Dr. Scacchi's most successful and recognized organizational\r\nstudies of computing/software development include those papers addressing\r\nthe computing package [O3], multiple analytical perspectives [O4], web\r\nof computing [O7], organizational dynamics of software maintenance work\r\n[O14], and organizational characteristics, processes and behavioral patterns\r\nthat affect software development productivity [O23]. Citations and links\r\nto selected papers in this category can be found in his <a href=\"http://www.ics.uci.edu/~wscacchi/Pubs-OrgStudies.html\">Research\r\nPublications on Organizational Studies of Computing/Software Development</a><a href=\"http://www.ics.uci.edu/C%7C/Walt%27s%20Stuff/WS/Pubs-OrgStudies.html\">.</a>\r\n<p><a NAME=\"SF\"></a><b>The System Factory Project and Environments [SF]</b>\r\n<p>After completing his early studies on the use and evolution of computing\r\nsystems, Dr. Scacchi decided to turn to look upstream to see if he could\r\napply a similar approach and concepts to understand how computer/software\r\nsystems were (or could be) developed. The System Factory Project he originated\r\nat USC in 1981 marked his first effort in this category. Given the opportunity\r\nto teach the graduate software engineering course at USC, he found on the\r\nfirst class meeting that he was facing an eager group of 50 or so M.S.\r\nand Ph.D. Computer Science students who wanted to learn about large-scale\r\nsoftware engineering. He recognized this as an opportunity to create and\r\nenact a novel, large software development organization in which every student\r\nwould have a role as contributing software engineering and project participant.\r\nSuch a project would itself be situated within a complex organization setting\r\nemploying shared access to limited resources, budget and schedule constraints,\r\nand a usual assortment of unexpected circumstances that arise in any setting\r\ngiven enough time. He also saw this as an informal experiment in the rapid\r\ndevelopment of a large software system. As such, he adopted and refined\r\na software development life cycle approach (a process) based on then current\r\nsoftware engineering techniques. He also developed a single system architecture\r\nfor a \"software engineering environment\" (SEE) which could be factored\r\ninto 6-10 separate components (stand-alone software tools) and integrated\r\nthrough some common file I/O capabilities.\r\n<p>Within 15 weeks start to finish, he had 8 teams of 4-7 students each\r\ndevelop, demonstrate, and deliver a prototype version of the tool they\r\nhad agreed to produce. Teams were organized and managed according to a\r\nset of project management strategies that were described earlier. All teams\r\nproduced a series of documents corresponding to the requirements, specification,\r\narchitecture design, detailed design, source code, test plan and selected\r\nresults, user manual and maintenance guide. The initial SEE represented\r\nsome 3000 pages of printed computer based documentation and about 30,000\r\nsource lines of Pascal code. Basically, a large majority of the Project\r\nparticipants considered this initial experiment a success, a valuable learning\r\nexperience, and something they could take with them (i.e., each student\r\ncompleting their team's project received an electronic copy of all the\r\nother teams' components and documentation). In short, this initial investigation\r\nsuggested that something interested could be observed, learned and shared\r\nthrough a large-scale participatory project with a common set of goals.\r\nDr. Scacchi then went on to repeat, refine and expand Project iterations\r\na total of 11 times through 1988, involving more than 600 M.S. and Ph.D.\r\nCS students (about 1.5% of <i>all</i> such students in the U.S. according\r\nto figures in the ACM/Taulbee survey) during this period. Five of the Project\r\ndevelopment cycle iterations were extended to 30 week schedules over nine\r\nmonth academic school year. In total more than 600K lines of source code\r\nwere delivered, and between 30K to 50K pages of online documentation were\r\nproduced through this cyclic, evolutionary approach to software system\r\ndevelopment. Though not noted earlier, one of the main results from his\r\nstudy of the process of innovation in computing [O5] was that once embedded\r\nin an organizational setting, computing innovations will continuously arise\r\nand be incorporated into local systems and their embedding organization.\r\nSaid another way, once people in an organization uses computing systems\r\nroutinely, they will continuously innovate these systems as long as the\r\norganization thrives. The SF Project repeatedly produced this kind of finding\r\nas well.\r\n<p>Much has been written about the concepts, management strategies, development\r\ntechniques and focal software components and composite environments, as\r\ncan be found in the Research Publications below. The majority of these\r\nresearch results follow from the concepts and research from his organizational\r\nstudies of computer/software development. Descriptions of the SF Project's\r\nobjectives, strategies, SEE architecture and so forth can be found in a\r\nnumber of publications [SF7,SF9,SF15,SF17,SF23]. Noteworthy among these\r\nis the Keynote Address on the SF Project he gave at the Japan Software\r\nEngineering National Conference in Tokyo in 1988 [SF15], which was also\r\ninvited for presentation at the CMU Software Engineering Institute's annual\r\nconference on Software Engineering Education [SF17]. Subsequently, the\r\ndirectors of the SEI's Graduate SE Education Division later identified\r\nthe USC SF Project as one of the top six exemplary approaches for how to\r\nexperience software engineering within graduate course work (see G.A. Ford\r\nand N.E. Gibbs, \"A Masters in Software Engineering Curriculum\", <i>Computer</i>,\r\n22(9):59-71, 1989). Finally, the last publication in this segment [SF23]\r\ndescribes the final state of organizational development (i.e., accommodate\r\nmultiple development teams geographically distributed but interlinked via\r\nthe Internet) and SEE architecture that was realized in the SF Project\r\nwhen its production was brought to an end.\r\n<p>The resulting software components and composed SEEs produced in the\r\nSF Project were also successful in their respective technical arenas. In\r\nparticular, pioneering and significant contributions were realized in the\r\ndevelopment of language based SEEs supporting hardware-software co-production\r\n[SF1-SF5], maintaining software architectural designs and source configurations\r\n[SF6,SF10,SF11,SF14,SF19,SF20,SF24], and hypertext environments for managing\r\nsoftware project documentation [SF12-SF14,SF16,SF18,SF22,SF24-SF26]. Later\r\nversions of the SF software technologies were distributed or licensed to\r\nvarious corporate research sponsors and other academic research groups\r\nas well.\r\n<p>Beyond these published results, Dr. Scacchi took the opportunity to\r\ngive more than 50 invited presentations, academic colloquia, industrial\r\nseminars, keynote addresses, and other conference presentations on the\r\nSF project in both national and international venues. Audiences throughout\r\nthe U.S., Canada, Japan, Europe (England, Finland, France, Germany, and\r\nItaly) and South America (Columbia) read about, listen to, and engaged\r\nin questions and discussions to learn more about what was accomplished\r\nin the SF Project and how.\r\n<p>Overall, the SF Project achieved its many of its objectives as a novel\r\nexperiment in applying emerging principles from organization studies of\r\ncomputing/software development to the production of software systems. The\r\nProject participants collectively produced one of the largest sets of software\r\ncomponent tools and composed environments that can be found within any\r\nacademic setting during the 1980's. It served as a venue that combined\r\neducational course work, software development and a research experience\r\nthat created or enhanced career opportunities for its participants through\r\ntheir hard work, the Project's&nbsp; publications and international visibility.\r\nIt also supported the completion of seven doctoral dissertations under\r\nhis supervision as well. In addition, companies such as AT&amp;T Bell Laboratories\r\nset up their own SF-like projects (the software factory laboratory in North\r\nCarolina). Accordingly, further details regarding this project can be found\r\nin the <a href=\"http://www.ics.uci.edu/~wscacchi/Pubs-SF.html\">Research\r\nPublications on the System Factory Project and Environments.</a>\r\n<p><a NAME=\"SP\"></a><b>Organizational and Software Processes [SP]</b>\r\n<p>The third and final category within Dr. Scacchi's research efforts concentrate\r\nand build on the results from the preceding two categories. The focus of\r\nhis research here is directed at understanding organizational processes,\r\nsoftware development/use processes, and their interplay. What is novel\r\nand unique is his use of a computationally based `web of computing' framework\r\nand support environment. As before, his research efforts were influenced\r\nby empirical and technology development studies in collaboration with external\r\norganizations that serve as field sites or testbed.\r\n<p>A good deal of Dr. Scacchi's research effort during 1985-1995 focuses\r\non developing a computational (software) environment that would support\r\nthe modeling, analyzing and simulating of organizational and software processes.\r\nThis software environment was called the Articulator [SP4]. It was developed\r\nas a vehicle for describing and understanding work processes, resource\r\nconfigurations and surrounding organizational circumstances from a web\r\nof computing perspective [SP18]. Much like the development of computer\r\nbased statistical packages enabled quantitative analyses of questionnaire\r\nand similar empirical data, the Articulator was designed to facilitate\r\nthe qualitative analysis of the structure and dynamic behaviors of complex\r\nprocesses. Emphasis within the Articulator was directed at capturing, representing\r\nand operationalizing organizational and software processes that could be\r\ndescribed primarily using normative, ordinal or interval--i.e., qualitative--data.\r\nThe Articulator was a breakthrough in that it provided a new class of analytical\r\ninstrumentation and computational testbed that enabled more robust, computationally\r\ntractable and comprehensive analysis than was previously available by the\r\nlate 1980's. Prior to this time, qualitative studies of organizational\r\nor software processes within any discipline were typically limited to describing\r\nor representing processes using (a) narrative text or semi-structured hypertext\r\nrenderings [SF18,SF22,SP15], or (b) procedural or object-oriented programming\r\nmodels or (c) quantitative data and statistical analysis. Text and hypertext\r\ndescriptions offer the potential for rich, highly contextual descriptions\r\nof processes, but \"tools\" for analysis of large narrative text data sets\r\nare usually left to the mind of the analyst/reader. Programming models,\r\nwhile well suited for specifying methodical calculations and detailed computations,\r\nare not well suited for describing the work situations or organizational\r\nsoftware ecology [OS23] in which software processes were occurring. Quantitative\r\ndata and statistical tools can be used to readily characterize the frequency,\r\ndistribution or discrete snapshots of opinions, conditions, events or other\r\ncircumstances using descriptive or inferential statistical measures. However,\r\nthe organizational context, structure (configuration of resources, control\r\nrelationships and division of work), and behavioral flow of processes (what\r\ngets done, by who, when, where, how and why, what goes wrong, etc.) over\r\ntime cannot be easily described or modeled using quantitative data or statistical\r\nanalysis [OS28]. Examples below to show this.\r\n<p>In a study he directed for Northrop-Grumman B-2 Division in 1990-1993,\r\nDr. Scacchi had the opportunity to investigate, model and analyze the software\r\ndevelopment life cycle processes responsible for producing the multi-million\r\nlines of code for the Avionics Flight Control software for the B-2 strategic\r\nbomber. This B-2 software organization had over 700 software developers\r\nand managers working in this effort. It was also said at the time to be\r\n44 months behind schedule and $150M over budget. Furthermore, new schedules\r\nslips were recurring, as were multi-million dollar/month development cost\r\noverruns. After a collaborative three month empirical study using multi-round\r\ninterviews, progress briefings, refinement and participatory validations\r\nof&nbsp; Articulator based models by B-2 software personnel, Dr. Scacchi's\r\nresearch team had discovered more than 30 systemic problems (\"black holes\")\r\nand structural conflicts (\"miracles\") in their development life cycle.\r\nThese dilemmas made following the current software development process\r\nlogically and physically impossible. Their analysis and empirical findings\r\nprovided a foundation for how to restructure the Division's web of computing\r\nand reorganize their processes, resources and workflow to resolve the dilemmas.\r\nSubsequently, they were then able to reduce their schedule slips and cost\r\noverruns leading to a multi-million dollar savings in cost avoidance. In\r\nturn, the project sponsors tripled his research funding, scope and duration\r\nof this study in acknowledge the significance of these results. Finally,\r\none publication describing how Dr. Scacchi's team modeled, represented\r\nand analyzed this software development life cycle process using the Articulator\r\nreceived (in 1997) an international \"citation for excellence with the highest\r\nquality rating\" for original research in the field of Information Systems,\r\nfrom ANBAR Management Intelligence (a European Management Research Rating\r\nService). Furthermore, this publication appears in ANBAR's number 1 rated\r\nIS research journal (in 1996) in Europe, <i>Decision Support Systems</i>.\r\n<p>In a pilot study he directed for U.S.West (the telco) in 1993-94, Dr.\r\nScacchi's research team empirically captured, modeled and refined a software\r\ndevelopment life cycle process to support 1500 software developers coordinated\r\nmore than 400 tasks. Through modeling and analysis using the Articulator\r\nenvironment, he discovered the process we captured had 18 levels of process\r\ndecomposition and project management. The findings were that such a work\r\nstructure, management coordination hierarchy, and division of labor would\r\nbe too complex, impractical and unmanageable. Though USWest choose not\r\nto heed this advice, the software project that employed this life cycle\r\nprocess eventually failed and reported a loss of over $200M [SP28].\r\n<p>In addition to these two studies, the Articulator environment has been\r\nemployed in descriptive or prescriptive studies of&nbsp; dozens of software\r\ndevelopment processes at AT&amp;T Bell Laboratories, BellCore, Hewlett-Packard\r\nand elsewhere, as well as within the System Factory Project [SP1-SP4,SP7,SP16,SP18].\r\nThe Articulator environment also possessed a unique capability (during\r\nthe early 1990's) to be able to diagnose and suggest repairs for software\r\ndevelopment processes that had broken down or failed during their enactment\r\n[SP5,SP6,SP12]. As before, this novel capability to support \"articulation\r\nwork\" was derived from empirical studies of software development work processes\r\n[cf. SP6,OS14,OS19,OS26]. More recently, the Articulator environment has\r\nbeen applied in studies of organizational and software use/evolution processes\r\nfound in other settings. These include corporate financial operations at\r\nMcKesson Corp. [SP20], supply chain management and order fulfillment for\r\nEDS [SP13,SP24], military procurement for the Naval Air Warfare Center,\r\nfeature film production for USC Entertainment Technology Center and its\r\nsponsors (e.g., LucasFilms Ltd.), Tele-medicine for the USC Advanced Biotechnology\r\nConsortium and others. Finally, recent (Internet or Web based) technologies\r\nand techniques derived from the Articulator have been, or are being used\r\nin new studies organizational and software processes. These studies address\r\norganizational and software processes associated with: research grants\r\nmanagement at the Office of Naval Research [SP19,SP22], organizational\r\ntransformation [SP22,SP29], software systems acquisition [SP23], distributed\r\nmulti-site virtual enterprises for software development [SP17,SP21,SP27],\r\nElectronic Commerce applications [SP25,SP26,OS27], and the redesign of\r\nsoftware processes [SP28].\r\n<p>How did the Articulator environment help in analyzing these organizational\r\nand software development processes? As a process is being captured via\r\ninterviews, elicitation, artifact review or participant observation, it\r\ncan be incrementally modeled and analyzed with the Articulator for its\r\nconsistency, completeness and internal correctness. An emerging \"process\r\nmodel\" can also be queried about explicit or implicit relationships within\r\nthe model that follow from the web of computing perspective [SP4]. Similarly\r\nsuch a model could be used as a testbed for experimentation or operationalization\r\nthrough knowledge-based simulation of process dynamics under different\r\nhypothetical or empirically grounded scenarios [SP4]. This use of knowledge-based\r\nsimulation techniques was unique within the software process research community\r\nfor many years [SP28]. Overall, these analytical capabilities were developed,\r\napplied and refined over a number of years through projects noted above.\r\nHowever, the development and use of the Articulator was not limited to\r\nonly the modeling, analysis and simulation of complex processes.\r\n<p>The Articulator was also designed to serve as a unifying framework to\r\nsupport and coordinate software development processes, tools, information\r\nartifacts/products, and other resources within an operational web of computing.\r\nDr. Scacchi recognized, as his early organizational studies indicate, that\r\nthe \"integration\" of computing resources with people at work in a complex\r\nsetting was a recurring source of problems with computing use [OS3,OS5,OS7].\r\nAccordingly, he directed the design the Articulator environment around\r\nits use of an extensible modeling ontology (or process meta-model) [SP18].\r\nThis way his team or others could use the Articulator to model arbitrary\r\norganizational or technological systems as process models that could then\r\nbe interlinked or webbed together. With such a capability, his research\r\nteam was among the first to successfully demonstrate the integration of\r\na legacy, pre-existing software engineering suite of tools and development\r\ntechniques so as to follow, support and enact a modeled set of software\r\ndevelopment and project management processes [SP8,SP10,SP16]. This in turn\r\nenabled his research team to integrate the Articulator with six other software\r\nenvironment architectural styles [SP11,SP20] and a dozen or so software\r\ndevelopment/process repositories [SP9,SP15,SP17]. The ability to integrate\r\ndiverse environments, repositories, and processes using a common (process\r\nmeta-model) scheme was later characterized as a new class of environment\r\ncalled, \"meta-environment\" [SP11]. Thus, the Articulator was able to demonstrate\r\nand embody the unique result for how the organizational analysis of computing/software\r\ndevelopment could be integrated into the practice of software engineering\r\nthrough a meta-environment technology based on the web of computing framework.\r\nThrough additional research effort, this capability evolved into what is\r\nnow called, \"process life cycle engineering\" [SP20,SP22,SP24].\r\n<p>Overall, Dr. Scacchi's research in this category is perhaps his most\r\nsuccessful and significant. Five of his research publications (four journals\r\narticles, one ICSE paper) in this area have been reprinted in books, which\r\nis an indicator of its significance. Furthermore, the ability to take this\r\napproach into new organizational and software processes continues to demonstrate\r\nthat the previous twenty years of his research continues to converge and\r\nbuild on prior results and empirical studies. As such, further information\r\nof this research can be found in his <a href=\"http://www.ics.uci.edu/~wscacchi/Pubs-Process.html\">Research\r\nPublications on Organizational and Software Processes.</a>\r\n<p>Finally, details for these research publications, including another\r\n15-20 not cited above, can be found in his Curriculum Vita, which is posted\r\non the Web at the location, <a href=\"http://www.ics.uci.edu/~wscacchi/vita.html\">http://www.ics.uci.edu/~wscacchi//vita.htm</a><a href=\"http://www.usc.edu/dept/ATRIUM/WS/vita.html\">l</a>.\r\n<h4>\r\n<a NAME=\"Teaching\"></a>Courses Taught</h4>\r\nIn Computer Science, Dr. Scacchi has taught graduate and undergraduate\r\nlecture and project courses in Software Engineering for eight years. He\r\nhas also taught courses in Management of Computing, Social and Organizational\r\nAnalysis of Computing,&nbsp; Introduction to Computer Science, and various\r\nresearch seminars. In Management and Information Systems area , he has\r\ntaught courses on Electronic Commerce (starting in 1994), Process Analysis\r\nand Redesign, Network/Web Information Systems, Decision Support Systems,\r\nand Management of Information Technology (Executive Education). In Spring\r\n2000, he will teach a new course on Database Management for Electronic\r\nCommerce at the UCI Graduate School of Management.\r\n<h4>\r\n<a NAME=\"Service\"></a>Other Contributions and Service</h4>\r\nDr. Scacchi has supervised nine doctoral dissertations. He has received\r\napproximately $3M in external funding as Principal or Co-Principal Investigator\r\nin 25 research projects. He has refereed or reviewed approximately 500\r\nresearch papers and 50 research proposals (NSF, UC MICRO, NSERC, etc.)\r\nin areas related to his research. He is member of editorial boards of selected\r\nresearch journals and other compendium in his areas of research interest.\r\nHe has served on more than two dozen program committees for national or\r\ninternational conferences, workshops, or symposia&nbsp; in areas related\r\nto his research. Dr. Scacchi has served on various departmental and university\r\ncommittees (admissions, computing resources, doctoral dissertations (12\r\nas secondary reader or outside member), inter-discipline planning and coordination,\r\nlibrary, recruiting, etc.). Last, he has served as an industry consultant\r\nto two dozen business firms or research institutes. Details for these service\r\ncontributions can be found in his Curriculum Vita, which is posted on the\r\nWeb at the location, <a href=\"http://www.ics.uci.edu/~wscacchi/vita.html\">http://www.ics.uci.edu/~wscacchi//vita.html.</a>\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}