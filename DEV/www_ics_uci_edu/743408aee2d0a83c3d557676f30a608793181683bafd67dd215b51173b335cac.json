{"url": "https://www.ics.uci.edu/~thornton/ics32a/Notes/Recursion/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 32A Fall 2019, Notes and Examples: Recursion</title>\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 32A Fall 2019 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"../../GradeCalculator\">Grade Calculator</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 32A Fall 2019<br />\r\n   Notes and Examples: Recursion</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The problem</p>\r\n\r\n<p class=\"subtitle\">Summing the numbers in lists of integers</p>\r\n\r\n<p>You've seen previously in this course how to iterate over the elements of a list in Python using a <b>for</b> loop.  For example, given a list of integers, you could use the following function to calculate the sum of all of the integers in the list.  (You could also use the built-in <b>sum</b> function, but let's look at the detailed pattern; the nice thing about understanding the underlying pattern is that you can use the pattern to solve similar problems for which there aren't built-in solutions like <b>sum</b>.)</p>\r\n\r\n<blockquote>\r\n<a href=\"sum_numbers1.py\">sum_numbers1.py</a>\r\n<pre>\r\ndef sum_numbers(numlist: [int]) -> int:\r\n    '''Adds up the integers in a list of integers'''\r\n    total = 0\r\n\r\n    for num in numlist:\r\n        total += num\r\n\r\n    return total\r\n</pre>\r\n</blockquote>\r\n\r\n<p>Now suppose we change the problem just slightly, so that we instead are given a list containing <i>lists</i> of integers (always two levels of depth), but maintain the same goal of summing all of the integers.  Our function changes somewhat, because we need to handle the additional level of depth; we need to loop over the sublists in the list, then loop over the integers in the sublists.</p>\r\n\r\n<blockquote>\r\n<a href=\"sum_numbers2.py\">sum_numbers2.py</a>\r\n<pre>\r\ndef sum_numbers(numlist: [[int]]) -> int:\r\n    '''Adds up the integers in a list of lists of integers'''\r\n    total = 0\r\n\r\n    for sublist in numlist:\r\n        for num in sublist:\r\n            total += num\r\n\r\n    return total\r\n</pre>\r\n</blockquote>\r\n\r\n<p>So far so good.  We can still solve the problem using tools we already have, though we did have to nest the <b>for</b> loops, so things have gotten a bit more complicated.  But one thing to notice is that the structure of the code follows the structure of the data we're dealing with &mdash; the list is two levels deep, and the loops are nested two levels deep.  (A clear correspondence between the structure of code and the structure of the data it processes is more common than you might think.)</p>\r\n\r\n<p>To add one final twist to the problem, now let's assume we want to sum the numbers in a list whose elements are <i>either</i> integers <i>or</i> lists of integers; so, in total, <i>no more</i> than two levels of depth.  We can add the appropriate condition to our function to handle this case, which requires only that we know that the function <b>type(x)</b> returns the type of the expression <b>x</b>, and that we can compare types using == to see if they're the same; that's a tool we could use to differentiate between the elements of the list that are integers and the elements that are lists.</p>\r\n\r\n<blockquote>\r\n<a href=\"sum_numbers3.py\">sum_numbers3.py</a>\r\n<pre>\r\ndef sum_numbers(numlist: [int or [int]]) -> int:\r\n    '''\r\n    Adds up the integers in a list whose elements are either integers or\r\n    lists of integers\r\n    '''\r\n    total = 0\r\n\r\n    for element in numlist:\r\n        if type(element) == list:\r\n            for num in element:\r\n                total += num\r\n        else:\r\n            total += element\r\n\r\n    return total\r\n</pre>\r\n</blockquote>\r\n\r\n<p>As in the previous two examples, the structure of the code again matches the structure of the data we're dealing with.  As before, this is not an accident.</p>\r\n\r\n<p class=\"subtitle\">Unconstraining the problem</p>\r\n\r\n<p>Imagine now what you might need to do to our function in order to be able to sum the numbers in a list like this one: <b>[[1, [2, 3], 4], [[5], 6], 7]</b>.  What's different about this list is that it is three levels deep &mdash; there is a list containing a list that contains another list.  Even the most complex of the three functions above is constrained to the problem of summing lists that might be up to two levels deep.</p>\r\n\r\n<p>Using the strategy above, supporting a third level of depth would require another level of nesting in our function; the innermost <b>for</b> loop would need to contain another <b>if</b> statement to check the type of the elements in each sublist, and yet another <b>for</b> loop inside that to loop over the elements of the third-level sublist.</p>\r\n\r\n<p>You could indeed solve the problem this way, but it wouldn't support four levels without a fourth level of nesting in the code.  And then a fifth level of nesting in the list would require a fifth level of nesting in the code.  And no matter how much patience you have in writing a function that's more deeply nested, there is a list that is potentially deeper than that.</p>\r\n\r\n<p>But what if we unconstrain the problem altogether?  Consider the following definition of a data structure:</p>\r\n\r\n<ul>\r\n  <li>A <i>nested list of integers</i> is a list in which every element is either:\r\n    <ul>\r\n      <li>an integer</li>\r\n      <li>a nested list of integers</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p>This data structure is <i>recursive</i>; it is included in its own definition.  Inside of nested lists of integers can be smaller nested lists of integers, inside of which can be smaller ones still, and so on.  Why this nesting does not continue forever is because we have a <i>base case</i>; our definition allows us to have a nested list of integers that contains only integers, but no more nested lists inside.</p>\r\n\r\n<p>A function that can sum the numbers in a nested list of integers is the broadest generalization of the three functions we wrote above.  It would handle all of the cases those three functions handle, plus any other combination of nesting that is possible.  In order to achieve that generalization, however, we need to embrace a new concept: a <i>recursive function</i>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The code</p>\r\n\r\n<p>The final code example from lecture, in which we summed the integers in a nested list of integers, is below.</p>\r\n\r\n<ul>\r\n  <li><a href=\"sum_recursive.py\">The <b>sum_recursive</b> module</a></li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The moral</p>\r\n\r\n<p>Some programming languages encourage recursion as a primary form of repetition (i.e., if you need to do something repeatedly, you tend to want to use recursion in lieu of any other technique).  Python is not one of them, however; in Python, your first inclination should be to use loops to solve problems of repetition.</p>\r\n\r\n<p>However, what you soon discover is that not all problems lead to a well-formulated solution this way.  Particularly when you find yourself needing to iterate through recursive data structures like our nested list of integers here, you find that no combination of nested loops will ever solve your entire problem.  No matter how deeply you nest your loops, you can find an input that nests more deeply than your loops do.  When you find yourself in that situation, recursion offers an approach that will lead to a general solution.</p>\r\n\r\n<p>Why this is of particular interest in the context of <a href=\"../../ProjectGuide/Project1\">Project #1</a> is because a file system <i>is</i> a recursive data structure.  Directories contain collections of files and other directories, which, in turn, contain collections of files and other directories, and so on.  You'll find the technique of using recursion very useful in traversing the file system and searching for files in directory structures that could be deeply nested.</p>\r\n\r\n<p>On the other hand, you don't want to take this new knowledge too far, using recursion in situations for which it's not an appropriate solution in Python.  For example, in <a href=\"../../ProjectGuide/Project1\">Project #1</a>, you'll need to repeatedly ask for a line of input until a valid one is given.  This kind of repetition is much better implemented in Python using a loop.  In general, your inclination should be to use loops whenever you can, and recursion when you must.  (And you should also bear in mind that this is not necessarily the same decision you would make if you were programming in a language other than Python.  But we're programming in Python, so we should use the techniques that are most appropriate for that language; we should prefer loops and use recursion only when we need it.)</p>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}