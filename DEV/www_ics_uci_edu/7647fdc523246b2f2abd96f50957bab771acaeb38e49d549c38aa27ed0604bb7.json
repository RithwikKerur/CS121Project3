{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/lab3.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Friday, October 7, 2005 12:08 PM\" />\n<TITLE>Lab Assignment 3</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2DE39A9\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/h21/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style2 {font-size: 10pt}\n-->\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY &bull; FALL 2009</font></P>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Lab Assignment 3 </B></FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>This assignment is due at the end of lab on\nFriday, October 16. </FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>Choose a partner for this assignment, someone\nyou haven&#39;t worked with already.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(a) </B>Do exercises 9.1.3, 9.3.2 (Hint:  What kind\nof operators work on two boolean values?), and 9.3.3.  Then do exercises\n9.5.3, 9.5.4, 9.5.6, and 9.5.7.  As you do them, follow the design recipe\nin Figure 26.  </FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Do exercises 10.1.2, 10.1.4, 10.1.5, and 10.1.6.\n  Then do exercises 10.2.2, 10.2.7, and 10.2.9 (you don&#39;t have to write\nname-robot, but it might help you get to substitute).  </FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Instead of doing exercises 10.3.1 through\n10.3.6, create a new version of the world-drawing code you wrote last week based\non section 7.4.  This time, your world will contain a list of shapes (based on the definitions in exercise 7.4.1); each\ntime you draw the world, you&#39;ll overlay all the shapes on the list.\n Each shape will contain a posn (a two-number structure) that indicates\nhow far (in the x and y directions) to move on each tick; each time you\ncreate the next world, you&#39;ll translate each shape </FONT><FONT FACE=\"Garamond\" SIZE=4>by the amounts specified.\n  You&#39;ll want to be sure to choose names for all these functions that\n  are different from the ones you used earlier, since they&#39;ll all be submitted\nas part of one big Scheme file.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Collect your definitions for all these exercises\ninto one Scheme file, make sure both partners&#39; names are in a comment\nat the top, and submit it via Checkmate.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b)</B>  Set your language level to Beginning\nStudent with List Abbreviations and include the image.ss teachpack (if you&#39;ve\nincluded universe.ss, that&#39;s fine).  Click Run.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Now, a color is a structure, </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">(make-color\nred green blue)</FONT></span><FONT FACE=\"Garamond\" SIZE=4>, where red, green,\nand blue are numbers from 0 to 255.  You can represent any color by some\namount of red, green, and blue; try out some combinations and see.  These\ncolors can represent pixels in an image&mdash;that is, each of the dots that\nmakes the image up.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>So evaluate </FONT><code>(image-&gt;color-list\n(rectangle 3 4 &quot;solid&quot; &quot;blue&quot;))</code><FONT FACE=\"Garamond\" SIZE=4>.\n You get a list of the 12 blue pixels that make up the 3x4 rectangle.  Likewise,\n</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">(color-list-&gt;image \n<BR />\n&#160; (list (make-color 0 0 0) (make-color 0 0 0) (make-color 0 0 0)\n<BR />\n&#160;       (make-color 0 0 0) (make-color 0 0 0) (make-color 0 0 0))\n<BR />\n&#160; 3 2 0 0) </FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>makes a 3x2 rectangle of black pixels.  (The\nlast two arguments have to do with aligning images; we&#39;ll leave them\nat zero for now.)</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Remember that you can consult the documentation\nfor the image.ss teachpack in the DrScheme Help Desk.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>There&#39;s nothing to turn in for this part.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(c)</B> You can insert images (any image\nfrom a JPEG or GIF file) into DrScheme using the Insert Image item on the\nSpecial menu.  To give the image a name to use in your program, you could\nsay </FONT><FONT FACE=\"Courier New\">(define my-pic X)</FONT><FONT FACE=\"Garamond\" SIZE=4>,\nwhere instead of the X you just insert the image. </FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Write the function </FONT><FONT FACE=\"Courier New\">remove-green</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes a color and returns a color with the same red and blue values\nbut the green value replaced by zero.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Write the function </FONT><FONT FACE=\"Courier New\">remove-color</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes a color and a string (</FONT><FONT FACE=\"Courier New\">&quot;red&quot;</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">&quot;green&quot;</FONT><FONT FACE=\"Garamond\" SIZE=4>,\nor </FONT><FONT FACE=\"Courier New\">&quot;blue&quot;</FONT><FONT FACE=\"Garamond\" SIZE=4>)\nand returns that pixel with the specified field set to zero.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Write the function </FONT><FONT FACE=\"Courier New\">remove-color-from-image</FONT><FONT FACE=\"Garamond\" SIZE=4>\nthat takes an image and a </FONT><FONT FACE=\"Garamond\" SIZE=4>string (</FONT><FONT FACE=\"Courier New\">&quot;red&quot;</FONT><FONT FACE=\"Garamond\" SIZE=4>, </FONT><FONT FACE=\"Courier New\">&quot;green&quot;</FONT><FONT FACE=\"Garamond\" SIZE=4>,\nor </FONT><FONT FACE=\"Courier New\">&quot;blue&quot;</FONT><FONT FACE=\"Garamond\" SIZE=4>)\nand returns that image with all its pixels altered as in </FONT><FONT FACE=\"Courier New\">remove-color</FONT><FONT FACE=\"Garamond\" SIZE=4>.\n Try this out on some pictures you find on the web.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Submit your definitions via Checkmate.   If\nyou have images in the file you submit, make sure they&#39;re small.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d)</B>  Do exercises 11.2.1 and\n11.2.4; then do exercise 11.3.1 and exercises 11.5.1 and 11.5.4.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(e)</B>  (extra credit) Do exercises 11.3.5 and 11.4.7.</FONT></P>\n<!--<P><font size=\"4\" face=\"Garamond\">Do  exercise 10.1.9.\n  The only catch is that the sound.ss teachpack must be <a href=\"http://www.ccs.neu.edu/home/matthias/HtDP/Sound/\">separately downloaded</a> and it doesn&#39;t work on Windows systems (it does work for Unix and MacOS\n  X).</font></P> -->\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(f)</B>  Remember that each partner must\ncomplete a partner evaluation form and submit it individually via Checkmate.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments by David\nG. Kay from Fall 2001; modified by David G. Kay, Fall 2004&ndash;Fall 2009.\n The image exercises were adapted from Matthias Felleisen&#39;s TeachScheme\n2 Workshop.</FONT></P>\n<HR />\n<FONT FACE=\"Garamond\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Garamond\">\n<!-- #BeginDate format:fcAm1a -->Wednesday, October 7, 2009 8:29 PM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "ascii"}