{"url": "https://www.ics.uci.edu/~eppstein/pubs/a-cheng.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head>\n<title>David Eppstein - Publications</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body bgcolor=\"#ffffff\" text=\"#000000\">\n<h1>David Eppstein - Publications</h1>\n<hr><p>\n<h2>\nPublications with\n<a href=\"//www.ics.uci.edu/~zhanpenc/\">\nZhanpeng (Jack) Cheng\n</a>\n</h2>\n<ul>\n<li><b>Superpatterns and universal point sets</b>.<br>\n<a href=\"//michaeljbannister.com/\">M. J. Bannister</a>,\nZ. Cheng,\n<a href=\"//www.ics.uci.edu/~wdevanny/\">W. E. Devanny</a>, and\nD. Eppstein.<br>\n<a href=\"//arxiv.org/abs/1308.0403\">arXiv:1308.0403</a>.<br>\n<i>21st Int. Symp. Graph Drawing</i>, Bordeaux, France, 2013.<br>\n<a href=\"//doi.org/10.1007/978-3-319-03841-4_19\">Springer, <i>Lecture Notes in Comp. Sci.</i> 8242, 2013, pp. 208&ndash;219</a>.<br>\nBannister's talk on this paper won the GD2013 best presentation award.<br>\n<a href=\"//doi.org/10.7155/jgaa.00318\"><i>J. Graph Algorithms & Applications</i> 18 (2): 177&ndash;209, 2014<a> (special issue for GD'13).\n<p>\nA superpattern of a set of permutations is a permutation that contains\nas a pattern every permutation in the set. Previously superpatterns had\nbeen considered for all permutations of a given length; we generalize this\nto sets of permutations defined by forbidden patterns; we show that\nthe 213-avoiding permutations have superpatterns half the length of the\nknown bound for all permutations, and that any proper permutation\nsubclass of the 213-avoiding permutations has near-linear superpatterns.\nWe apply these results to the construction of universal point sets, sets\nof points that can be used as the vertices of drawings of all n-vertex\nplanar graphs. We use our 213-avoiding superpatterns to construct\nuniversal sets of size approximately <i>n</i><sup>2</sup>/4,\nand we also construct near-linear universal sets for graphs of bounded\npathwidth.\n<p>\n<li><b>Linear-time algorithms for proportional apportionment</b>.<br>\nZ. Cheng and D. Eppstein.<br>\n<a href=\"//arxiv.org/abs/1409.2603\">arXiv:1409.2603</a>.<br>\n<i>Proc. 25th Int. Symp. Algorithms and Computation (ISAAC 2014)</i>,\nJeonju, Korea, 2014.<br>\n<a href=\"//doi.org/10.1007/978-3-319-13075-0_46\">Springer, <i>Lecture\nNotes in Comp. Sci.</i> 8889, 2014, pp. 581&ndash;592.</a><br>\n<p>\nWe consider a broad class\nof <a href=\"https://en.wikipedia.org/wiki/Highest_averages_method\">highest\naverages methods</a> for proportional allocation (the problems of\nallocating seats to parties after a parliamentary election, or of\nallocating congressmen to states based on total population).\nWe show that these methods can be simulated by an algorithm whose\nrunning time is proportional only to the number of parties or states,\nindependent of the number of seats allocated or the number of voters.\n<p>\n(<a href=\"CheEpp-IMBS-16.pdf\">Slides</a>)\n<p>\n</ul>\n\n<hr><p>\n<a href=\"auth.html\">Co-authors</a> &ndash;\n<a href=\"/~eppstein/pubs/\">Publications</a> &ndash;\n<a href=\"/~eppstein/\">David Eppstein</a> &ndash;\n<a href=\"/~theory/\">Theory Group</a> &ndash;\n<a href=\"/\">Inf. &amp; Comp. Sci.</a> &ndash;\n<a href=\"//www.uci.edu/\">UC Irvine</a>\n<p>\n<small>Semi-automatically <a href=\"filter.html\">filtered</a>\nfrom a common source file.</small>\n</body></html>\n", "encoding": "ascii"}