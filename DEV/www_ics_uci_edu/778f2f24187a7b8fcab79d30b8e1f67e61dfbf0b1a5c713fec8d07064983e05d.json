{"url": "https://www.ics.uci.edu/~wscacchi/Papers/VISTA/VISTA.html", "content": "<!DOCTYPE doctype PUBLIC \"-//w3c//dtd html 4.0 transitional//en\">\r\n<html>\r\n<head>\r\n  <meta http-equiv=\"Content-Type\"\r\n content=\"text/html; charset=iso-8859-1\">\r\n  <meta name=\"Generator\" content=\"Microsoft Word 97\">\r\n  <meta name=\"Template\"\r\n content=\"C:\\PROGRAM FILES\\MICROSOFT OFFICE\\OFFICE\\html.dot\">\r\n  <meta name=\"GENERATOR\"\r\n content=\"Mozilla/4.5 [en] (Win95; I) [Netscape]\">\r\n  <title>VISTA'97 Paper</title>\r\n</head>\r\n<body link=\"#0000ff\" vlink=\"#800080\">\r\n<center>\r\n<h1> Virtual System Acquisition:<br>\r\nApproach and Transitions</h1>\r\n</center>\r\n<center>Walt Scacchi and Barry Boehm\r\n<p>University of Southern California </p>\r\n<p>Los Angeles, CA 90089-1421 USA </p>\r\n<p>213-740-4782, 213-740-8494 (fax) </p>\r\n<p>wscacchi@rcf.usc.edu, boehm@sunset.usc.edu </p>\r\n<p>July 1997 </p>\r\n<p>&nbsp;Revised version appears in <i><a\r\n href=\"http://www.dau.mil/pubs/arq/arq98.asp\">Acquisition Review\r\nQuarterlty</a></i>, 5(2):185-216, Spring 1998</p>\r\n</center>\r\n<center>\r\n<h2> Abstract</h2>\r\n</center>\r\nIn this paper, we describe a radically new approach for the acquisition\r\nof software-intensive systems. We start by reviewing problems and\r\nopportunities for improving the acquisition of these systems. We put\r\nforward a statement of objective on the need to make the software\r\nsystem acquisition more agile and adaptive, through the evolutionary\r\nmodeling, simulation, and development of the system being acquired. We\r\ndescribe a new vision for the re-tooling and re-engineering software\r\nsystem acquisition into a form we call, <i>VISTA</i> , denoting an\r\napproach to the virtual acquisition of these systems. We then outline\r\nthe VISTA approach to software acquisition. This is followed by a\r\ndiscussion of the technical and organizational transitions that must be\r\ninvestigated and managed to ensure the eventual success of such a\r\nradical change to software system acquisition. <br>\r\n&nbsp;\r\n<p> </p>\r\n<hr>\r\n<center>\r\n<p><b>About the authors</b></p>\r\n</center>\r\n<p><i>Walt Scacchi</i> is a research professor and Director of the\r\nATRIUM Laboratory, Marshall School of Business, at USC. He has been on\r\nthe faculty at USC since 1981, and is a faculty principal at the USC\r\nCenter for Software Engineering. </p>\r\n<p><i>Barry Boehm</i> is the TRW Professor of Software Engineering and\r\nComputer Science at USC, and Director of the USC Center for Software\r\nEngineering. Between 1989 and 1992, he served within DoD as Director of\r\nthe DARPA Information Science and Technology Office and the Software\r\nand Intelligent Systems Technology Office. He also served as Director\r\nof the DDR&amp;E Software and Computer Technology Office, and as\r\nDirector of two major DoD software initiatives: the DoD Software\r\nTechnology Plan and the DDR&amp;E Software Action Plan. </p>\r\n<p> </p>\r\n<hr>\r\n<center>\r\n<p><b>Acknowledgments</b></p>\r\n</center>\r\n<p>Preparation of this article was supported by grants from the Air\r\nForce Rome Laboratory and the Deputy Assistant Secretary of the Air\r\nForce for Computers, Communications, and Support Systems, under\r\ncontract F30602-94-C-0195, and the Office of Naval Research, under\r\ncontract N00014-94-1-0889. None of the material in this report should\r\nbe construed as a statement of policy, procedure, or endorsement by\r\nONR, US Air Force, US Navy, or any other US government agency. </p>\r\n<p> </p>\r\n<hr>\r\n<h2> <a name=\"Problems\"></a>Problems and Opportunities for Improving\r\nAcquisition</h2>\r\nThe acquisition of major software-intensive systems is often\r\nproblematic. Recent reports from the US General Accounting Office\r\n(E.g., GAO 1995, GAO 1997) describe a number of problems with the way\r\ncomplex systems are acquired. The current problems in their\r\nacquisition include:\r\n<ul>\r\n  <li> difficulty in establishing viable and cost-effective system\r\nrequirements</li>\r\n  <li> overly optimistic cost, schedule, and performance estimates</li>\r\n  <li> concurrent development and production of systems</li>\r\n  <li> commitment to system production before adequate demonstration or\r\ntesting that determines system viability is completed.</li>\r\n</ul>\r\nTo no surprise, modern and future weapon systems increasingly represent\r\nsoftware-intensive systems. In addition, DoD and other government\r\nagencies rely on the acquisition and use of computer-based information\r\nsystems to manage their recurring organizational and operational\r\nactivities. Many of these management information systems are often\r\nrunning on out-dated computing platforms that must be replaced or\r\nmodernized.\r\n<p>DoD has established acquisition strategies that move it toward\r\ncommercial acquisition practices. One strategy embodies the idea that\r\nthe feasibility and ability to produce advanced technologies can often\r\nbe demonstrated before they are incorporated into acquisition programs.\r\nFor example, the use of advanced concept technology demonstrations can\r\nmore directly involve war fighters/users in demonstrating the\r\noperational feasibility of new technologies and concepts before\r\ncommitments are made to full-scale acquisition. Another strategy rooted\r\nin the Defense Acquisition Workforce Improvement Act (DAWIA)\r\nestablishes benchmarks for a more professional acquisition workforce\r\nwith defined training and education requirements, and acquisition\r\ncareer paths. The goal of this act is to provide an acquisition\r\nworkforce that is more responsible for improving program costs and\r\nschedule estimates. Finally, in 1994 OSD began pursuing a strategy to\r\nre-engineer the systems acquisition review process. This includes an\r\neffort to reduce acquisition costs (including overhead costs) through\r\nthe adoption of business processes characteristic of world-class\r\ncommercial buyers and suppliers. </p>\r\n<p>The overall way in which the federal government conducts its\r\nacquisition practices has been reviewed and redesigned in response to\r\nthe Federal Acquisition Streamlining Act (FASA) of 1994. Among other\r\nthings, the FASA requires incentives and a performance-based approach\r\nto managing acquisition programs. This emphasizes streamlining the\r\nacquisition process and proposes greater reliance on commercial\r\nproducts and processes. Also, concepts for applying commercial practices\r\nto DoD software system acquisition have been addressed in Defense\r\nScience Board reports. </p>\r\n<p>Thus, we are at a time when there is substantial opportunity to\r\nrethink how the acquisition of software-intensive systems should occur\r\nto address the recurring problems. At the same time, we should pursue\r\nnew opportunities to re-engineer the systems acquisition process&nbsp;\r\nthat can realize savings, efficiencies, increased satisfaction, and\r\ncontinuous improvement. Similarly, we should provide a strategy for\r\nmanaging the transition to these re-engineered system acquisition\r\nprocesses, as they can represent a radical departure from current\r\npractices. Subsequently, we seek to explore how these opportunities\r\ncan be pursued through use of advanced information processing tools,\r\ntechniques and concepts. Our objective is to make the acquisition of\r\nsoftware-intensive systems more agile and adaptive. Relevant\r\ninformation technologies include those for: (1) re-tooling system\r\nacquisition processes to better assess the feasibility of system\r\nacquisitions; (2) digital libraries for organizing and sharing\r\ninformation gathered during system acquisitions and program management;\r\nand (3) Internet-based electronic commerce services and capabilities for\r\nstreamlining procurement actions, lead times, and supply chain logistics\r\n(cf. Nissen 1997, Scacchi 1997). However, in this paper and in related\r\nmaterials (Boehm and Scacchi 1996), we focus our discussion to the\r\nfirst of these areas. </p>\r\n<h3></h3>\r\n<h2> <a name=\"Agile\"></a>Steps toward more agile acquisition of future\r\nsystems</h2>\r\nIn general terms, our overall goal is to address the recurring problems\r\nthat plague system acquisition efforts. Our approach suggests&nbsp;\r\nways in which new modeling and simulation techniques can help in\r\nre-engineering how software-intensive systems are acquired by the DoD\r\nand other government agencies. This means that we seek to identify new\r\nconcepts, tools, and techniques for acquiring software-intensive\r\nsystems that fulfill four goals: First, to establish viable and\r\ncost-effective system requirements. Second, to establish realistic\r\ncost, schedule, and performance estimates. Third, to mitigate against\r\nconcurrent development and production of systems. Fourth, to enable\r\nadequate demonstration and testing of system viability before a\r\ncommitment to system production must be made. Based on the results from\r\na series of workshops and Blue Ribbon Panels of leading military,\r\nindustry, and academic experts that addressed the problems of&nbsp;\r\nlarge-scale software system acquisition (Boehm and Scacchi, 1996), we\r\ncan identify five issues involved in achieving and transitioning to the\r\noverall goal:\r\n<p><i>We need to first baseline our current understanding of strengths\r\nand weaknesses of current \"as-is\" process capabilities for acquiring\r\nsoftware-intensive systems.</i> Guidelines, best practices, and lessons\r\nlearned are being collected and disseminated. The Software Technology\r\nSupport Center (STSC 1995) and the Software Program Managers Network\r\n(SPMN 1997) have assembled recent collections. Nonetheless, we also\r\nneed to understand how they are employed; as well as identify the\r\noperational problems which may inhibit their application and success. </p>\r\n<p><i>We need to develop scenarios for new \"to-be\" acquisition process\r\ncapabilities that exploit an evolutionary \"virtual\" approach to the\r\nacquisition of software-intensive systems.</i> Such an approach\r\nemphasizes <i>the incremental acquisition of virtual prototypes for a\r\nnew software-intensive system</i>. These prototypes start as models of\r\nthe intended system. These system models can be analyzed and simulated\r\nto determine which system requirements and risks have been addressed.\r\nAs familiarity and confidence with the prototypes' increases, their\r\nrealism and functionality increases with the incremental integration of\r\nsystem components. In this way, virtual prototypes of systems can be\r\nincrementally modeled and iteratively reconfigured with simulated or\r\nactual subsystem components. The development and production of a\r\ngrowing number of complex Electro-mechanical assemblies are now\r\ndesigned, tested, and refined through the use of computational models\r\nand simulations as virtual prototypes (Garcia, Gocke, and Johnson\r\n1994). Similarly, the availability of Battle Labs suggests the use of\r\nvirtual battlefields and command centers for trying out or exercising\r\ncomplex defense systems in alternative scenarios, through\r\ncomputer-based modeling and simulation test-beds operating within\r\nnetworked laboratories (Cothran 1996, Wilson 1996). Accordingly,\r\napproaches such as these may also prove to be effective in supporting\r\nthe acquisition of software systems. In this way, viability and\r\ncost-effectiveness of system requirements can be demonstrated,\r\nvalidated, and refined in an incremental manner. Similarly, estimates\r\nfor the cost, schedule, and performance of an ever-more complete actual\r\nsystem can also be developed and refined incrementally. Subsequently,\r\nwe should also consider developing methods and scenarios for how to\r\ntransition from the as-is to the to-be acquisition process we envision. </p>\r\n<p><i>We need to articulate the design and operational concept for a\r\nwide-area modeling and simulation infrastructure whose primary purpose\r\nis to serve as a test-bed/delivery platform for agile acquisition of\r\nsoftware-intensive systems.</i> Such an infrastructure may need to\r\nsupport collaboration and resource sharing between software system\r\nresearchers and developers at geographically distributed sites. It may\r\noperate as a modeling and simulation <i>collaboratory</i> (Kouzes,\r\nMeyers, and Wulf 1996) for software system acquisition. Similarly, such\r\nan infrastructure may need to support a hypermedia repository or\r\ndigital library of technical data and information that can be accessed\r\nand shared over the Internet or World Wide Web (WWW). Such a digital\r\nlibrary should store and organize access to software acquisitions\r\nassets. These may include publications, model and simulation libraries,\r\nreusable software subsystem components, system demonstration scenarios,\r\nmulti-media presentations and annotations. In addition, the digital\r\nlibrary may provide paths to super computing environments that support\r\nmassively parallel simulations, etc. </p>\r\n<p><i>We also want to understand how future acquisition processes or\r\ncapabilities might exploit the full range of technology\r\nstrategies/options at hand.</i> The goal is to minimize cost, maximize\r\ncustomer satisfaction (via system performance and quality attributes)\r\nand minimize acquisition/development cycle time. Relevant technologies\r\nthat can support this goal include the use of knowledge-based systems,\r\nmulti-media, the Internet, electronic commerce for selling and buying\r\nsoftware components, architecture-based software system development,\r\nhigh performance computing and communications, etc. Will new modes of\r\nacademic research or industrial activity be required to most\r\neffectively support agile acquisition? If so, what are they? Similarly,\r\nwhat institutional or marketplace incentives are needed to help make\r\nthem happen? </p>\r\n<p><i>We need to prioritize and estimate the relative costs and\r\nbenefits of candidate investments in modeling and simulation\r\ncapabilities that support software system acquisition.</i> We need to\r\nidentify areas in which needs can be met largely through available\r\ntechnology. We also need to identify areas in which acquisition\r\nresearch and the development of automated acquisition support\r\nenvironments promise an attractive return-on-investment. </p>\r\n<h2> <a name=\"Background\"></a>Background and Foreground</h2>\r\nWe may now be at the threshold of a new era in the acquisition and\r\ndevelopment of software-intensive systems. From this point, we can\r\nlook back to where we have been and what we have experienced. Then we\r\ncan look forward toward the horizon to see what lies ahead.\r\n<h3> Looking back: why use models and simulations to support program\r\nacquisitions</h3>\r\nIn looking back, we see that the acquisition and development of\r\nsoftware-intensive systems was guided by the classic \"waterfall\"\r\nsystem life cycle. In such an approach, DoD customers were expected to\r\nbe able to articulate their needs and requirements for new system\r\ncapabilities prior to system development. Developers or contractors\r\ncould then take these requirements as their starting point. Then they\r\nwould systematically develop, test, and deliver results to the customer\r\naccording to a sequence of development milestones and documentation\r\nstandards. While this approach has much rational appeal, its practice\r\nand outcome was often less than satisfactory. The overall experience\r\nwas that it was difficult for customers to fully articulate their\r\nsystem requirements prior to the beginning of system development.\r\nFurthermore, when system development took years, the customer (and the\r\ndeveloper) recognized their requirements were changing, sometimes very\r\nrapidly. Consequently, far too many systems developed under contract\r\nwere delivered that did not meet critical system requirements. In the\r\nworst cases, the software systems were effectively non-operational.\r\nSubsequently, more customers and developers began to recognize that\r\nperhaps these shortfalls in software acquisition and development were\r\nsystemic, rather than simply characteristic of particular programs or\r\ndevelopment organizations.\r\n<p>In response to the seemingly inevitable shortfalls with the classic\r\napproach, effort to find an alternative began. This led to an\r\nincremental \"spiral\" development approach. In the classic approach,\r\nthere is little visibility regarding operational software system\r\ncapabilities until late in the development cycle. In contrast, the\r\nspiral approach embraces a more evolutionary and iterative development\r\nmodel. Accordingly, operational software capabilities become visible in\r\nevolutionary increments, rather than all at once. Subsequent\r\ndevelopment iterations then add and integrate more increments until the\r\nfinal system is ready. Thus the spiral approach seeks to build and\r\ndeliver software-intensive systems through evolutionary development.\r\nConsequently, guidelines now put forth in military or public standards\r\nsuch as&nbsp; MIL-STD-498, ANSI J-STD-016, and US 12207 encourage use\r\nof an incremental spiral approach when acquiring and developing\r\nsoftware intensive systems. </p>\r\n<p>Why should we use models and simulations to support the incremental\r\nacquisition of complex software systems? In simplest terms, we can\r\nidentify three reasons: First, to facilitate early identification and\r\nreduction the risks associated with complex system acquisition\r\nprograms. Second, to better understand what kinds of system\r\nrequirements and architectures are feasible and affordable given\r\nvarious programmatic and technological constraints. Third, to gain\r\ninsight into how to better manage system engineering effort so as to\r\nimprove the overall likelihood of a successful, acquisition effort.\r\nHowever, the creation, use, and reliance of models and simulations to\r\nsupport incremental acquisition efforts cannot guarantee such outcomes.\r\nClearly, models and simulations of complex systems will never be more\r\nthan assumption-laden approximations of the systems being acquired.\r\nThis is the fate of all models and simulations (cf. Smith 1996).\r\nNonetheless, the <i>process </i>of building, using, and evolving such\r\nmodels and simulations in support of decision-making activities in\r\nlarge system acquisition efforts can be characterized as one of&nbsp; <i>consensus\r\nvalidation</i> (Dutton and Kraemer 1985). Thus, the value of supporting\r\nsystem acquisition through modeling and simulation will be found in the\r\nprocess of working with them, rather than in the calculations performed\r\nalong the way. Modeling and simulation can be employed to help identify\r\nwhere consensus can be established and validated, as well as to\r\nidentify where disagreements can be found, and their&nbsp; consequences\r\nexamined. </p>\r\n<p>Program managers, contractors, customers, and acquisition\r\ndirectorate staff can employ models and simulations coordinated by a\r\nnegotiation support system. Such a system can support the elicitation,\r\ncapture, and validation of points of agreement among system acquisition\r\nparticipants. In addition, such a system can help these people surface\r\nassumptions, debate their merits or implications, and negotiate\r\nalternative system configurations and functional features (cf. Boehm <i>et\r\nal.</i> 1995). In this manner, computer-based models and simulations,\r\ntogether with an information sharing and negotiation support\r\nenvironment, provide a&nbsp; more articulate medium to express opinions\r\nand stimulate alternative conceptions of system acquisition problems\r\nand challenges. Without such articulate models and simulations, system\r\nacquisition participants are left to their private intuitions and\r\nconceptions of system design, program cost drivers, and the like. This\r\nin turn can easily obscure problems in system design or performance,\r\nincrease the likelihood of miscommunication and systemic conflict, and\r\nincrease the likelihood of problematic system acquisition and costly\r\npost-deployment support of the resulting systems. Thus, we believe that\r\nmodels, simulations, and associated environments can play a significant\r\nrole in supporting the incremental acquisition of complex software\r\nsystems. </p>\r\n<h3> Looking ahead: An emerging case study</h3>\r\nWe see many opportunities for improving the effectiveness and\r\nresponsiveness of the acquisition of software-intensive systems across\r\ntheir life cycle. Many of these opportunities result from the\r\navailability of new technologies and development capabilities that\r\nmake the acquisition of software-intensive system more agile. Agility\r\ncan lead to more cost-effective, more timely, and higher quality\r\nresults in software system acquisition. Modeling and simulation\r\ntechnologies that support virtual prototyping (Garcia, Gocke, Johnson\r\n1994) and simulation-based design of complex <i>hardware </i>systems\r\nare being used to support major program acquisitions, such as that for\r\nthe SC-21 class of battleships (SC21, 1997). We believe a similar\r\neffort is appropriate for acquisition of the large software systems\r\nassociated with such hardware systems. Accordingly, by examining the\r\ncurrently proposed software systems intended to support&nbsp; SC-21\r\nclass ships, we can better motivate and articulate a vision for how new\r\nmodeling and simulation technologies can be used to help support the\r\nincremental acquisition of complex software systems. <br>\r\n&nbsp; <br>\r\n&nbsp;\r\n<p>There is no single architecture or final design envisioned for SC-21\r\nships. Instead, the SC-21 ships could be built following the commercial\r\npractice of developing a <i>product line</i> with common subsystems or\r\nreusable designs. Figure 1 helps show what this means. Here we see four\r\nalternative views of the overall architecture of SC-21 ships. The\r\nintent to enable the choice of the final architecture of each ship to\r\nbe determined by emerging need or threat. Nonetheless, any such SC-21\r\nship will still have some configuration of common sub-systems for\r\nweapons, command deck, flight operations, etc. As such, all of the\r\nalternative versions of ship architecture displayed in Figure 1 would\r\nbe members of the SC-21 product line. </p>\r\n<center>\r\n<p><img src=\"sc21pic.jpg\" height=\"276\" width=\"558\"> </p>\r\n<p>Figure 1. Alternative overall architectures for SC-21 ships (SC21,\r\n1997)</p>\r\n</center>\r\n<p>Building these ships according to different architectural\r\nconfigurations represents a fundamental change in how such ships will\r\nbe acquired, developed, and operated. The system life cycle for these\r\nships will be iterative, incremental, and ongoing. Figure 2 conveys a\r\nvision for how various computer-based modeling and simulation\r\ntechnologies, such as virtual weapon system modeling and\r\nsimulation-based design, may be employed to support the acquisition,\r\ndevelopment, and operation of SC-21 ships. <br>\r\n&nbsp; <br>\r\n&nbsp; <br>\r\n<br>\r\n</p>\r\n<center>\r\n<p><img src=\"SC21-mod-sim.gif\" height=\"391\" width=\"606\"> </p>\r\n<p>Figure 2. Vision for how modeling and simulation can support new\r\nsystem acquisition and development (SC21, 1997)</p>\r\n</center>\r\n<p><br>\r\n<br>\r\n</p>\r\n<p>SC-21 ships will be software-intensive systems. All major\r\nsub-systems and overall system capabilities supporting each ship's\r\noperations depend on software. Figure 3 proposes a suggested allocation\r\nof shipboard sub-system capabilities that will be implemented in\r\nsoftware systems. Total number of software instructions or source lines\r\nof code (SLOC) to realize the proposed capabilities is estimated at\r\ngreater than 8.4 million SLOC. However, much of this software can\r\npotentially be reused across the SC-21 line of ships. Nonetheless,\r\ndevelopment costs for software of this size and complexity is often\r\nestimated in the range of&nbsp; $100,000,000 to $1,000,000,000. Thus,\r\nwhat can be done to help (a) understand the feasibility of alternative\r\nsoftware sub-system architectures associated with the SC-21 ship\r\nfamily, and (b) manage the progress, costs, and risks associated with\r\nthe acquisition and development of this software. <br>\r\n&nbsp; <br>\r\n&nbsp; <br>\r\n<br>\r\n</p>\r\n<center>\r\n<p><a href=\"http://www.usc.edu/dept/ATRIUM/Papers/ARQ/SC21-Software.gif\"><img\r\n src=\"SC21-Software.gif\" border=\"0\" height=\"391\" width=\"664\"> </a> <br>\r\n&nbsp; <br>\r\n&nbsp; </p>\r\n<p>Figure 3. Software systems proposed for SC-21 ships (SC21, 1997)</p>\r\n</center>\r\n<p>At present, there is an emerging consensus for what&nbsp;\r\ntechnological capabilities are needed to support the acquisition and\r\ndevelopment of software-intensive systems such as the family of SC-21\r\nships (cf. Boehm and Scacchi, 1996). Much like the SC-21 family of ship\r\nhardware and major sub-systems employs recent advances in modeling and\r\nsimulation technologies, similar technologies could be brought together\r\nto support the acquisition and development of the software systems for\r\nthese ships. Accordingly, we can now outline a strategy for how this\r\nwould work. We then follow with a discussion of the technological and\r\norganizational transitions likely to be encountered in the course of\r\nadopting this strategy.&nbsp; Along the way, we describe an\r\napproach&nbsp; for how to assess the feasibility of complex software\r\nsystems through its incremental development spiral. In addition, we\r\ndescribe a road map that lays out the research, technology, and usage's\r\nneeded to support the acquisition of software systems, such as those\r\nfor the SC-21 line of ships. </p>\r\n<h2> <a name=\"VISTAVision\"></a>The VIrtual SysTem Acquisition (VISTA)\r\nVision</h2>\r\nThe <i>virtual acquisition</i> of software systems refers to a\r\nstrategic process by which an evolving series of ever more complete\r\nand operational system versions are acquired through a series of short\r\nduration acquisition life cycles. In this way, emphasis is on\r\nre-framing and reducing acquisition cycle times from years to months\r\n(or weeks!) so as to focus attention on the incremental and iterative\r\nacquisition of the evolving capability associated with the target\r\nsoftware system.\r\n<p>Reductions in acquisition cycle time enable an increase in the\r\nnumber of&nbsp; incremental acquisition cycles over time. The VISTA\r\napproach seeks to help more rapidly identify, address, and resolve the\r\nrisks associated with the acquisition and development of complex\r\nsoftware-intensive systems (Boehm and Scacchi 1996; GAO 1997; Haimes,\r\nSchooff, and Chittister 1997). Thus, we need tools that enable\r\ncustomers and developers to rapidly model, incrementally evolve, and\r\nsatisfy (sub) sets of system capability requirements in each iterative\r\nsystem version. Early acquisition cycles only need to focus on\r\nacquiring systems that only represent computational models and\r\nsimulations of the operational capability of the target software\r\nsystem. Later acquisition cycles then focus on incrementally evolving\r\nor replacing the models and simulations with fully operational system\r\nmodules. In this manner, there will always be an operational version of\r\nthe system to evaluate and demonstrate throughout the system's\r\nacquisition and development cycle. </p>\r\n<p>Models and simulations represent descriptive, formalized, and\r\nsharable understandings of a system. They can represent a system's\r\nconcept of operation, architecture, and its ability to support its\r\nintended mission. However, by focusing effort to enable such\r\npreliminary system capabilities to move through a fast acquisition life\r\ncycle, the goal is to establish and validate consensus on whether\r\ncurrent models and simulations of the software system's\r\ncomponents/architecture address specific system requirements. In\r\naddition, the goal is to determine whether other underdeveloped or\r\nunrecognized system requirements have emerged that need to be addressed\r\nin subsequent acquisition/development cycles. As such, the goal here is\r\nmore closely aligned with the idea of incrementally growing and\r\nevolving the target system in a more organic and adaptive manner. </p>\r\n<p>Our first take on the requirements for how this might work can be\r\noutlined as follows: </p>\r\n<ul>\r\n  <li> Acquisition participants should be able to architect, construct,\r\nassemble, execute, and analyze automated models of the overall\r\nsoftware system capability for acquisition.</li>\r\n  <li> Component models should represent elements of target environment\r\n(including people), information system infrastructure, informational\r\nproducts, and development, operation, and post deployment processes.</li>\r\n  <li> The initial modeling and simulation of these elements should\r\nrepresent the first pass through the system's requirements generation\r\nand development cycle.</li>\r\n  <li> Participants should be able to iteratively refine and\r\nincrementally evolve the system model test-bed from previous steps.\r\nThen they should be able to selectively replace component models with\r\nsimulated, prototype, or actual component elements.</li>\r\n  <li> Participants should be able to iteratively refine and evolve\r\nintermediate hybrid system test-beds and progressively replace\r\nremaining component models with simulations, prototypes, or actual\r\ncomponent elements. This helps to insure that a full-scale test-bed is\r\ndeveloped, operational, and ready for post R&amp;D deployment or\r\ntransition into commercial use.</li>\r\n</ul>\r\nSubsequently, we can take this outline of requirements for what we\r\nenvision and reformulate it into a first-cut prescriptive process,\r\nwhich we call the VISTA Approach.\r\n<h2> <a name=\"VISTAApproach\"></a>The VISTA Approach</h2>\r\nAt this point, we outline a series of steps that articulate how\r\nsoftware system acquisition and development become intertwined during\r\nvirtual system acquisition processes. As modeling and simulation drive\r\nmost of these steps, we first describe what types of models are\r\nnecessary. We will also characterize what these models may look like,\r\nand how they could be represented. Then we will briefly describe how\r\nthese models and simulations would be incrementally replaced when\r\nevolving the system.\r\n<h3> Modeling and simulation in VISTA</h3>\r\nFor this discussion, we assume the envisioned system is within the\r\nscope of available software system product families at hand.&nbsp; If\r\nnot, then a domain analysis leading to the construction and refinement\r\nof an appropriate <i>meta-model</i> will be needed. Product families\r\nand their associated \"smart\" product models (SC21 1997), documents,\r\ndevelopment processes, tools, and organizational agents are defined and\r\nrepresented using meta-models. Detailed examples of their use can be\r\nfound elsewhere (Mi and Scacchi 1990, Mi and Scacchi 1996, Scacchi and\r\nMi 1997). We then begin with the elicitation and modeling of a virtual\r\nsystem model (VSM) for the system to be acquired.\r\n<p>The VSM is a composite model: a model composed from other models. At\r\nleast three types of models are needed to characterize a complex\r\nsoftware system. One class of models is needed to represent the\r\nfunctional operation and data required for information processing by\r\nthe system. We will call models of this type; information element\r\nmodels (IEMs). Once an IEM is replaced with an operational system\r\ncomponent, it becomes an information element (IE). IEMs are used to\r\nmodel the structure, behavior, and performance (estimated, measured, or\r\nrequired) of the computing hardware and software that inputs,\r\nprocesses, and outputs system data. A second class of models is needed\r\nto depict the functional behavior of the IEs embedded within a\r\nman-machine system (E.g., Command and Control System, Theater Air\r\nDominance System, Mission Support System, etc. in Figure 3) to be\r\nacquired and built. We call these system element models (SEMs), and\r\nwhen replaced, system elements (SEs). The third class is needed to\r\nrepresent the \"system of systems\", sensors, and environmental context\r\nin which the embedded man-machine systems operate. These are called\r\nenvironment element models (EEMs), and when replaced, environment\r\nelements (EEs). </p>\r\n<p>Each type of model requires a computational mechanism that can\r\nsupport model entry/definition, interpretation, simulation, and\r\nanimated visualization. Commercially available discrete-event\r\nsimulation packages represent one such mechanism. These packages are\r\nwell suited for simulating models that are represented as queuing\r\nnetworks whose arrival queues and service rates are specified according\r\nto statistical or algebraic models. </p>\r\n<p>Different types of models may require different kinds of simulation;\r\nthus different tools may be needed. For example, modeling and\r\nsimulating the \"look and feel\" and event-based operation of a graphic\r\nuser interface for a Military Support Training System may employ\r\nmultimedia authoring or navigation tools. Commercially available tools\r\nsuch as Macromedia Director, Microsoft Powerpoint, or even Web browsers\r\naccessing virtual reality content across an Intranet can be used for\r\nthis purpose. Rapid application development (RAD) tools (Visual Basic,\r\nPowerBuilder, Visual Cafe for Java, etc.) and expert system shells\r\n(E.g., M.4 from Teknowledge) that support software prototyping or visual\r\nprogramming with persistent databases can enable the modeling and\r\nsimulation of complex, rule-based, state-transition software\r\napplications. These are tools for developing virtual prototypes of IEs\r\n(cf. Garcia, Gocke, Johnson 1994). With these tools, it is possible to\r\nmodel, simulate, or approximate the behavior of software applications\r\nusing stubbed, canned, or pre-calculated input/output data values as\r\nplace holders for complex calculations required of an eventual software\r\nsystem implementation. As such, modeling and simulating a VSM may\r\nbenefit from use of a computing environment where multiple types of\r\nmodels and simulations can be defined, composed, simulated, and\r\ndisplayed. Furthermore, it may be desirable for such an environment to\r\nbe accessible over the Internet to facilitate the sharing, discussion,\r\nand review of modeling and simulation efforts among the different\r\norganizational representatives participating in a program acquisition. </p>\r\n<p>IEMs can be modeled in a variety of ways. A common tactic may be to\r\ndepict IEMs as hierarchically decomposed black boxes (closed systems),\r\nwhite boxes (open systems), or gray boxes (closed systems with limited\r\ninternal visibility). These boxes are placeholders for hardware or\r\nsoftware system modules that are to be acquired and developed. Each box\r\ncan represent a computation unit that can receive inputs or event\r\nsignals, perform some calculation, then produce some outputs, state\r\ntransition, or some new event. They can be modeled and simulated using\r\nany of the tools noted above. However, depending on the kind of\r\nacquisition concern we wish to address, particular tool choices may be\r\nmost appropriate. For example, in SC-21 class ships, it may initially\r\nbe an open question as to what level of computer performance is required\r\nto satisfactorily operate Mission Support software systems. A desktop PC\r\nis probably inadequate, while a large mainframe may be too much, too\r\nlarge, or too expensive. Thus, it seems appropriate to consider\r\nmodeling the required computing hardware as a computational module with\r\nmid-range performance or processing throughput (E.g., 10-100\r\ntransactions per second) as a starting point. Further, since\r\ndetermining system performance throughput under different Mission\r\nSupport workloads or traffic volume is necessary, then a discrete-event\r\nsimulation package may be best to use. </p>\r\n<p>However, the software system modules to operate on this anticipated\r\nhardware may or may not be so readily understood. If we initially have\r\nlittle knowledge of what calculations or information is required in\r\nprocessing Mission Support data, then the software's model may simply\r\nequate to that of a module that produces a stream of input/output data\r\ntransactions, say in the range of 0-8 transactions per second.\r\nAlternatively, as knowledge increases, software modules may be\r\nidentified which perform different functions. </p>\r\n<p>It should be possible to evaluate alternative architectural\r\nconfigurations or compositions of software modules as a way to\r\nunderstand whether system performance parameters are sensitive to the\r\nalternatives. For example, in a Mission Support Combat Training System,\r\none could separate user input capture and verification, calculation and\r\ndatabase update, and output to user display as three distinct software\r\nmodules. Should these modules be configured in as a linear sequence, a\r\nfully interconnected concurrent network, or bundled together as a\r\nsingle large module? Which alternative configuration would be easiest\r\nto build and test? Which would have the best performance? Which would\r\nbe the least cost? Perhaps we could guess the best answer(s). However,\r\nif we can model, simulate, and collaboratively discuss the three\r\narchitectural alternatives, then we can begin to articulate a basis\r\nthat can lead to a consensus answer that can be backed up with\r\nevaluated alternatives and simulation results. </p>\r\n<p>Would the consensus results from such a modeling and simulation\r\nexercise be more believable than someone's best guess? In lieu of some\r\ncontrolled experiment, the answer is to that is subjective. However,\r\nthe modeling and simulation results would be explicit, repeatable, and\r\nsubject to trade-off analysis and consensus validation. In addition,\r\nthese results can be open to challenge and reformation in a manner that\r\nmay be more tractable than someone's best guess. Nonetheless, if\r\nsomeone such as a software architect experienced in the design of\r\nMission Support Combat Training Systems can argue persuasively about\r\nher best guess, then this alternative could be represented in an IEM,\r\nsimulated, compared and validated. </p>\r\n<p>SEMs provide the ability to embed software systems within\r\nman-machine systems setting. SEMs embed IEMs or IEs in a user-driven\r\ninput and output environment. Users create inputs in response to their\r\nwork assignments, and to information output from the system and\r\ndisplayed to them. For example, when using a Training System, users may\r\nselect among \"menu items\" or enter system commands. This may cause the\r\nTraining System to process their input, provide an updated user\r\ninterface display, then wait for the user's next input action. As such,\r\nSEMs must model user behavior in driving and responding to system\r\nactions or events, as well as model system behavior in response to user\r\nactions. While user behavior is open-ended, only a range of possible\r\nuser-system interactions will be modeled. For example, users can only\r\nprovide either acceptable input, acceptable but erroneous input that is\r\ndetected, or unacceptable input. SEM simulation may include the use of\r\nsoftware \"drivers\" that cause the arrival of user input or input\r\nevents, together with system responses or service time intervals that\r\nfollow statistical formulas or some other characterization function.\r\nSEM simulation can then be supported using common discrete-event\r\nsimulation tools if user behavior is being simulated. Alternatively, if\r\nthe system's behavior is being simulated for real users, then\r\nmultimedia or RAD tools may be employed to provide simulated user\r\ninterfaces for real users to evaluate. As with the IEM simulations, the\r\nplausibility and consensus validation process noted above will also\r\napply here. </p>\r\n<p>EEMs provide the ability to embed the man-machine systems in its\r\noverall environmental context. For example, weapons control systems\r\nmay be designed to utilize various sensors (radar, sonar, satellites,\r\netc.) to zero in on their targets. These sensors may themselves be\r\ncomplex systems. Similarly, weapons control systems will interact with\r\nmany other shipboard systems, including those for Mission Support,\r\nCommand and Control, etc. These systems must act in concert to realize\r\nthe overall effectiveness of a complex system of systems that a ship of\r\nthe SC-21 class represents. Therefore, EEMs must model the\r\ninteroperation and integration of multiple systems. This may entail\r\nmodeling the overall patterns of data or messaging traffic between\r\nsystems, as well as between systems and users as a group.\r\nAlternatively, in response to different scenarios for total system\r\nengagement, the EEMs may be used to model the ebb and flow of\r\ninformation across the system of systems. With this, we expect that the\r\npatterns of information flow on a SC-21 ship in response to a hostile\r\nattack scenario will be different than the flows associated with routine\r\nship operations and maintenance scenario. Subsequently, these\r\ninformation traffic or flow patterns can be modeled and simulated using\r\ndiscrete-event simulation capabilities, and the validation process\r\ndescribed earlier again applies here. </p>\r\n<p>Overall, the remaining challenge is to integrate and interoperate\r\nthe different models, simulations, and elements. This is the purpose of\r\na collaborative test-bed such as a Battle<i>ship</i> Lab for SC-21\r\nclass ships (cf. Cothran 1996, Kouzes, Meyers, and Wulf 1996, Wilson\r\n1996). It may serve to support the integration and interoperation of\r\nmultiple, mixed mode models and simulation tools, as well as of\r\nmultiple system elements with many models and simulations. At this\r\ntime, developing such a test-bed may be an expensive but nonetheless\r\nnecessary proposition. However, even if the cost of such test-beds\r\napproaches 5-10% of system development costs, such an investment may\r\nbe reasonable given that the total overall effectiveness of the system\r\nplatform is long-lived, software-intensive, and thus\r\nsoftware-dependent. </p>\r\n<p>Again, our objective is to find ways to facilitate the articulation\r\nand elaboration of requirements, risks, and cost-drivers for complex,\r\nsoftware-intensive systems. It is also to assist those involved in\r\nsystem acquisition to understand how modeling and simulation tools and\r\ntechniques can be used. As such, we now turn to provide a brief\r\ndescription of how incremental system acquisition and development\r\nwould proceed in replacing the system models with operational elements\r\nand system components. </p>\r\n<h3> Incremental replacement of system models with operational system\r\ncomponents</h3>\r\nGiven that we have outlined the overall VISTA approach for modeling and\r\nsimulation, we can describe how this approach could work in the context\r\nof acquiring a software system. We examine software systems for SC-21\r\nclass ships, although we limit our discussion to a representative\r\nsubset of software systems for these ships. We use Mission Support\r\nsystems in our discussion. Accordingly, we describe how the\r\ninformation, system, and environment elements for Mission Support are\r\nincrementally acquired and developed in a series of spiraling\r\niterations following the approach. We show how these elements can change\r\nin progressing from models to actual software system architectures.\r\nSimilarly, we identify what difference it makes to improve the\r\nacquisition of software.\r\n<p>The VISTA approach begins with the acquisition of a VSM for Mission\r\nSupport. A team of participants from the program office, acquisition\r\ndirectorate, user representatives, and prospective contractors may\r\nspecify the VSM. The team might employ a wide-area collaboratory\r\nenvironment to share and record information giving rise to the VSM.\r\nHowever, perhaps only the contractors would be tasked with the modeling\r\ndevelopment activity. </p>\r\n<p>The VSM can be subjected to analysis, simulation, redesign,\r\nvisualization, and walk-through. Figure 4 provides a concept diagram\r\nfor how this might appear if we focus on an architectural configuration\r\nof IEMs (the computer or software elements), SEMs (the physical or\r\nhuman elements), and the EEMs (the external stimuli outside the system\r\nboundary). As shown in Figures 4 through 6, multiple IEMs, SEMs, and\r\nEEMs are used. This reflects the notion that the scope and depth of\r\ndifferent models may be limited, compartmentalized, or may be divided\r\namong different organization contractors, sub-contractors, program\r\noffice, etc.). </p>\r\n<center>\r\n<p><img src=\"vista1.gif\" height=\"428\" width=\"485\"> </p>\r\n<p>Figure 4. Initial VSM Development Cycle</p>\r\n</center>\r\n<p>In acquiring an initial VSM for Mission Support systems, many kinds\r\nof models are used. For example, IEMs designate computer hardware and\r\nsoftware subsystems. SEMs denote Operational Readiness Test System,\r\nCombat Training System, and Display System. Also, EEMs are needed for\r\nother shipboard systems (E.g., Command and Control System), sensors,\r\nand environment factors (weather, combat vs. routine operations,\r\netc.). Emphasis in developing the initial VSM is on deciding what kinds\r\nof modeling and simulation tools to use for the different types of\r\nmodel elements. Also, emphasis is directed at how to integrate the\r\nmodeled elements into an architectural configuration so that the\r\nsimulated elements can interoperate. This is shown in Figure 4.\r\nSubsequently, if all VSM element models can be satisfactorily simulated\r\nat this point using a discrete-event simulation package, then the\r\nintegration and interoperation challenges are reduced or eliminated. </p>\r\n<p>Given that the VSM can be developed, we need to exercise and test it\r\nto explore the proposed system's ability to satisfy the requirements of\r\nits customers, users, development contractors, program managers, etc.\r\nSimilarly, we need to explore the trade-off among desired system\r\nfunctional capabilities, performance objectives and costs. A wide-area\r\nsoftware requirement negotiation and collaboration environment, such\r\nas the Win-Win environment developed at USC (Boehm <i>et al</i>.\r\n1995), could be used for this purpose. Collaboration environments like\r\nWin-Win enable various system acquisition and development participants\r\nto discuss the relative merits of the VSM, its ability to identify or\r\ndemonstrate system requirements, and to determine and validate where\r\nthere is consensus in these areas. For example, user representatives\r\nmay believe that response time to user input commands should not be\r\nmore than one second. The contractors may note that while such system\r\nperformance may be essential for the Combat Training System, it may not\r\nbe needed by the Operational Readiness Test System. Thus, it would be\r\nunnecessarily costly to the program to make it so. To help clarify\r\ntheir position, the contractors input the two alternative system\r\nperformance requirements into the computer hardware IEM simulation.\r\nExecuting the simulation using the two performance measures may produce\r\ninteresting comparative results. For instance, if users of the\r\nOperational Readiness Test System can accept, a four second response\r\ntime, the required computer hardware performance can be realized at an\r\nappreciably lower cost, perhaps saving millions of dollars (cf. Boehm\r\nand Scacchi 1996). With this result at hand, the team agrees to revise\r\nthe requirements for this information element. As such, the VSM is\r\nrevised and calibrated to use this information.&nbsp; This helps to\r\nillustrate the how iterative analysis, simulation,&nbsp; performance\r\nmonitoring, and benchmarking can improve understanding system\r\nrequirements, and how to identify areas where virtual system\r\nacquisition efforts can reduce costs. </p>\r\n<p>In a later acquisition and development cycle, the team decides to\r\nassemble particular element components using fully operational and\r\narchitecturally configured sub-assemblies. Here, the contractors must\r\nreplace the corresponding model or simulation elements with\r\noperational prototypes or actual operating elements. Figure 5 provides\r\na diagram for how this hybrid system and hybrid test-bed might appear.\r\nFor example, an EEM for sonar and radar sensors may be replaced with a\r\ntest-bed instrument that can generate realistic sensor input data. The\r\nDisplay System for Mission Support may now be fully operational, and\r\nthe computer hardware that supports the Display System may be\r\noperational. Accordingly, the Display System SEM can be replaced with\r\nthe operational Display System SE, and the computer hardware IEM can be\r\nreplace with its corresponding IE. Nonetheless, even with these virtual\r\nsystem elements replaced with operational components, the overall VSM\r\ntest-bed can still be accessed and evaluated using a collaborative\r\nwide-area environment for requirements negotiation and validation (cf.\r\nBoehm <i>et al</i>. 1995, Kouzes, Meyers, Wulf, 1996). </p>\r\n<p>Once operational components are integrated into the VSM, it becomes\r\npossible to more systematically walk-through, exercise, monitor,\r\nrecord, and replay the revised VSM hybrid tested. This can help to\r\nvalidate choices, explore further tradeoffs, and articulate systemic\r\nbottlenecks or processing failures in the system's architecture\r\n(Scacchi and Mi 1997). For example, while evaluating the operational\r\nperformance of the Display System that interacts with the Combat\r\nTraining System, it appears to users that important information of the\r\nuser display is being updated too fast for users to act appropriately.\r\nInstead, the rate of information display needs to be slowed, or the\r\ninformation content needs to be aggregated and summarized. Thus, from\r\nthe user standpoint, the current system operation in the VSM is risky\r\nor infeasible. As before, system element parameters need to be\r\nadjusted, otherwise alternative system architectures need to be\r\nconsidered and evaluated. </p>\r\n<center>\r\n<p><img src=\"vista2.gif\" height=\"394\" width=\"514\"> </p>\r\n<p>Figure 5. Intermediate VSM Development Cycle</p>\r\n</center>\r\n<p>With an intermediate VSM, further elaboration is needed to field a\r\ndeployable system (see Figure 2). If this is the case, then the\r\nacquisition and development team must revisit the selection of\r\nsoftware/system components to develop. Otherwise, they can perform\r\npartly-simulated operational test and evaluation, then experimentally\r\nfield the system either across a wide-area Intranet test-bed (Scacchi\r\nand Noll 1997), or in a Battleship Lab test-bed, in order to continue\r\nto calibrate and refine the VSM for further post deployment studies.\r\nThus, here we seek to illustrate how virtual system acquisition can\r\nhelp identify potential risks and attendant cost drivers that may not\r\nbe manifest until field operation stages of the system's overall life\r\ncycle. <br>\r\n&nbsp; <br>\r\n&nbsp; </p>\r\n<p>When further system capabilities are needed, the participants can\r\nexercise the VSM. This means they may adjust simulation parameters,\r\nhave users test-drive and evaluate system prototypes, etc. to\r\ndetermine tradeoffs and validate priorities through consensus.\r\nConsequently, they may choose to revisit the selection of components to\r\nacquire and develop. Jumping ahead, the acquisition and development\r\nparticipants can continue to evolve and continuously improve the\r\nemerging system architecture. This entails iterating through the\r\npreceding steps until all remaining system component simulations or\r\nprototypes are replaced by their operational counterparts. Figure 6\r\nprovides a diagram for how this late stage system architecture might\r\nnow appear. </p>\r\n<center>\r\n<p><img src=\"vista3.gif\" height=\"402\" width=\"547\"> </p>\r\n<p>Figure 6. Final VSM Development Cycle</p>\r\n</center>\r\n<p><br>\r\n<br>\r\n<br>\r\n</p>\r\n<p>Here we see that all of the system and information element models\r\nhave been replaced with their operational elements. Some EEMs however\r\nremain, since they may designate other major shipboard system\r\nundergoing concurrent development. Thus, while the sensor test-bed may\r\nbe operational and integrated to interoperate with the Mission Support\r\nSystems, the Command and Control System as well as other major systems\r\nmay not yet be operational and available for integration. However,\r\nthese other systems must still conform to their EEMs placeholders for\r\nuse with the Mission Support System. Subsequently, an additional\r\ncapability is required for characterizing or extracting an updated EEM\r\nfrom this VSM. This updated information needs to be used in other VSMs\r\ncorresponding&nbsp; to environment elements that constitute the system\r\nof systems. From a technical standpoint, this requires addressing\r\nproblems in system component interface definition, and in managing\r\nconcurrent access to different versions of these components or model\r\nplaceholders. From an organizational standpoint, failing to coordinate\r\naccess and propagation of component interface definitions or changes is\r\na common problem that precipitates difficulty in systems integration\r\nand interoperability. Knowing where problems lie, and being able to\r\nprevent or circumvent them through virtual system acquisition, provides\r\nanother capability for reducing risks and costs associated with the\r\ndevelopment of software-intensive systems. </p>\r\n<p>Finally, throughout the overall VISTA process we have just outlined,\r\ncurrent best practices in software program management (SPMN 1997), and\r\na consensus recommendation from the Blue Ribbon Panels (Boehm and\r\nScacchi 1996), point to the opportunity to track and manage software\r\nfeasibility/risk using new program management support tools. Figure 7\r\nprovides a view of the user interface \"dashboard\" to such a tool, as\r\nwell as suggesting how program management information may be conveyed. </p>\r\n<center>\r\n<p><img src=\"controlpanel2.gif\" height=\"424\" width=\"622\"> </p>\r\n<p>Figure 7. A program management dashboard for assessing software\r\ndevelopment progress (SPMN 1997)</p>\r\n</center>\r\n<p><br>\r\n<br>\r\n<br>\r\n</p>\r\n<p>Participants in a virtual system acquisition also need to track,\r\norganize, record, and store records of the steps they took.\r\nFurthermore, they may need to document what transpired, how, by whom,\r\nwhy, and with what outcomes. These records and documents represent\r\nimportant knowledge assets emerging from the acquisition effort.\r\nCapturing and organizing this information is often cumbersome and\r\nhaphazard. However, we find that these knowledge assets can be easily\r\ncaptured and linked to the virtual system models and elements using\r\nhypertext mechanisms commonly available in information sharing and\r\nrequirement negotiation support environments (Noll and Scacchi 1991,\r\nBoehm <i>et al.</i> 1995), rather than being cast as a mountain of\r\npaper. </p>\r\n<p>With this basis for VISTA approach, we can now put forward a matrix\r\nof the transitional steps for how to realize the technical basis for\r\nsupporting VISTA. This is then followed by a description of the\r\norganizational transitions for VISTA. </p>\r\n<h2> Mapping the technological transitions to VISTA</h2>\r\nAlthough the VISTA-based approach may be a radical departure from\r\ntraditional system acquisition practice, getting there may be best\r\nachieved in an evolutionary manner. To be clear, the VISTA approach is\r\nnew, but the tools, techniques, and concepts it involves--incremental\r\nacquisition and development, virtual prototyping, wide-area\r\ncollaboratories, software requirements negotiation and validation\r\nenvironments, etc.--are beginning to be used in system acquisition\r\nefforts. Thus, as VISTA implies the need to use an automated support\r\nenvironment for modeling, simulation, and program management, the\r\nrequired tools and techniques for such an environment can be\r\ninvestigated, refined, and deployed in a multi-staged manner. An\r\nintegrated information management environment to support the\r\nacquisition and development of complex software systems, such as those\r\nfor the SC-21 program, is not yet available. However, such an\r\nenvironment can be constructed and put into use following the roadmap\r\noutlined below and elsewhere (Boehm and Scacchi 1996). The resulting\r\nenvironment can then be positioned to support large system acquisition\r\nprograms.\r\n<p>We can explain the technological basis to support the transition to\r\nVISTA in terms that cover its anticipated (i) usage in acquisition,\r\n(ii) its technology, and (iii) the research needed to realize its\r\ntechnology and usage. At the same time, we can characterize how each of\r\nthese three aspects correspond to the software system development life\r\ncycle stages that include (a) system concept definition, (b)\r\narchitecture definition, and (c) on-going spiral development. Together,\r\nwe can associate each of these into a matrix that organizes the VISTA\r\nresearch, technology, and acquisition usage as shown in Table 1. <br>\r\n&nbsp; <br>\r\n&nbsp; </p>\r\n<center>\r\n<table border=\"1\" bordercolor=\"#000000\">\r\n  <tbody>\r\n    <tr>\r\n      <td valign=\"CENTER\"><br>\r\n      </td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\" colspan=\"3\">\r\n      <center><b>-- <i>Technology Maturity</i> --&nbsp;</b></center>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">\r\n      <h3> Research</h3>\r\n      </td>\r\n      <td valign=\"CENTER\">\r\n      <h3> Technology</h3>\r\n      </td>\r\n      <td valign=\"CENTER\">\r\n      <h3> Acquisition<br>\r\nUsage</h3>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n    </tr>\r\n    <tr>\r\n      <td valign=\"CENTER\" rowspan=\"3\">\r\n      <center><b><i>Software/</i></b>\r\n      <p><b><i>System</i></b> </p>\r\n      <p><b><i>Life</i></b> </p>\r\n      <p><b><i>Cycle</i></b> </p>\r\n      <p><b><i>Stages</i></b></p>\r\n      </center>\r\n      </td>\r\n      <td valign=\"CENTER\">\r\n      <h3> Concept<br>\r\nDefinition</h3>\r\n      </td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">\r\n      <center><b>Software Feasibility&nbsp;</b>\r\n      <p><b>Heuristics&nbsp;</b></p>\r\n      </center>\r\n      </td>\r\n      <td valign=\"CENTER\">\r\n      <center><b><i>VISTA-1:</i></b>\r\n      <p><b>Top-Level&nbsp;</b> </p>\r\n      <p><b>Feasibility Advisor,&nbsp;</b> </p>\r\n      <p><b>Parametric Models&nbsp;</b></p>\r\n      </center>\r\n      </td>\r\n      <td valign=\"CENTER\">\r\n      <center><b>Concept&nbsp;</b>\r\n      <p><b>Feasibility&nbsp;</b> </p>\r\n      <p><b>Determination</b></p>\r\n      </center>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td valign=\"CENTER\">\r\n      <h3> Architecture&nbsp;<br>\r\nDefinition</h3>\r\n      </td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">\r\n      <center><b>Arch. representation&nbsp;</b>\r\n      <p><b>and analysis M&amp;S,&nbsp;</b> </p>\r\n      <p><b>Advanced cost/&nbsp;</b> </p>\r\n      <p><b>schedule/quality M&amp;S.&nbsp;</b></p>\r\n      </center>\r\n      </td>\r\n      <td valign=\"CENTER\">\r\n      <center><b><i>VISTA-2:</i></b>\r\n      <p><b>Models and Simulations&nbsp;</b> </p>\r\n      <p><b>of Subsystems&nbsp;</b> </p>\r\n      <p><b>and Elements&nbsp;</b></p>\r\n      </center>\r\n      </td>\r\n      <td valign=\"CENTER\">\r\n      <center><b>Architecture&nbsp;</b>\r\n      <p><b>Feasibility&nbsp;</b> </p>\r\n      <p><b>Determination</b></p>\r\n      </center>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td valign=\"CENTER\">\r\n      <h3> Spiral<br>\r\nDevelopment</h3>\r\n      </td>\r\n      <td valign=\"CENTER\">&nbsp;</td>\r\n      <td valign=\"CENTER\">\r\n      <center><b>Integration&nbsp;</b>\r\n      <p><b>into commercial&nbsp;</b> </p>\r\n      <p><b>SDEs&nbsp;</b></p>\r\n      </center>\r\n      </td>\r\n      <td valign=\"CENTER\">\r\n      <center><b><i>VISTA-3:</i></b>\r\n      <p><b>Hybrid Measurement,&nbsp;</b> </p>\r\n      <p><b>Modeling and Simulation&nbsp;</b> </p>\r\n      <p><b>Environment&nbsp;</b></p>\r\n      </center>\r\n      </td>\r\n      <td valign=\"CENTER\">\r\n      <center><b>Virtual&nbsp;</b>\r\n      <p><b>System&nbsp;</b> </p>\r\n      <p><b>Acquisition</b></p>\r\n      </center>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n</center>\r\n<center>\r\n<h3> Table 1: VISTA Research, Technology, and Usage Context</h3>\r\n</center>\r\nMoving from top to bottom, right to left, we can outline the associated\r\noperational concepts for VISTA, thereby characterizing the\r\ntechnological transitions \"from <i>ends</i> to <i>means</i>.\" <br>\r\n&nbsp;\r\n<p><b>Concept Feasibility Determination:</b> Given a new mission or\r\nstrategic objective, determine whether appropriate technology,\r\narchitectures, and resources can be feasibly brought together into a\r\nnew software-intensive system in an affordable and timely manner. </p>\r\n<p><b>Architecture Feasibility Determination:</b> Given a proposed\r\nsoftware system architecture, determine whether it can satisfy mission\r\nor strategic objectives in an affordable and timely manner. </p>\r\n<p><b>Virtual System Acquisition:</b> Given a feasible system concept\r\nand architecture, acquire the proposed architecture as a series of\r\nmodeled, simulated, or implemented subsystems. These subsystems can be\r\nevolutionarily developed by progressively replacing or transforming the\r\nmodeled or simulated subsystems with prototyped or real\r\nimplementations. </p>\r\n<p><b><i>VISTA-1, </i>Top-Level Feasibility Advisor, Parametric Models:</b>\r\nA top-level feasibility analysis-modeling environment is needed for\r\nchecking established acquisition heuristics and parameters. Such an\r\nenvironment could be used to determine whether the candidate\r\ntechnologies, architectures, and resources can be brought together to\r\naddress a new mission or strategic objectives. This environment would\r\nrepresent the first version of the VISTA support environment (<i>VISTA-1</i>).\r\nThe environment proposed by the Software Program Managers Network (cf.\r\nFigure 7), together with software cost estimation tools, software\r\nrequirements negotiation capabilities, and access to a collection of\r\nsoftware feasibility heuristics are available today for experimentation\r\nand initial usage (Boehm<i> et al</i>. 1995, STSC 1995, SPMN 1997). </p>\r\n<p><b><i>VISTA-2,</i> Software-Intensive Models and Simulations:</b> <i>VISTA-2</i>is\r\nan enhanced <i>VISTA-1</i> environment for software-intensive modeling\r\nand simulation. It could be used to prototype, analyze, and execute\r\nsystem architectural capabilities and functionality, then reconcile\r\nthese performance characteristics against the cost, schedule, and\r\nquality trade-off among proposed architectural design alternatives. <i>VISTA-2</i>\r\nis used order to determine whether proposed application system\r\narchitectures are viable. </p>\r\n<p><b><i>VISTA-3,</i> Hybrid Measurement, Modeling and Simulation\r\nEnvironment:</b> The <i>VISTA-3</i> environment is built to expand the\r\ncapabilities of <i> VISTA-2</i>. In order to acquire incrementally\r\ndeveloped software application systems, <i>VISTA-3</i> can be used to\r\nsupport the cooperative modeling, simulation, and measurement of the\r\nperformance capabilities of an evolving application system, its\r\nsubsystems, and their collective architectural design. </p>\r\n<p><b>Software Feasibility Heuristics:</b> We need to collect, validate,\r\nand refine a knowledge base of best practice heuristics for software\r\nsystem acquisition, architecture, and overall development. This\r\nknowledge could help provide plausible advice for how to assess the\r\ntop-level feasibility of an emerging software application system. These\r\nheuristics can help determine what matters, and which technology,\r\narchitecture, or resource characteristics affect the overall\r\nfeasibility of the system (Rechtin 1991, STSC 1995, SPMN 1997). </p>\r\n<p><b>Architecture representation and analysis M&amp;S and Advanced\r\ncost/schedule/quality M&amp;S:</b> We need to research and develop new\r\narchitectural representations that support incremental building and\r\nevolving large application systems using models or simulations. These\r\nrepresentations also must be able to incorporate the architectures of\r\nits subsystems, whether as already implemented or newly development\r\ncomponents. We further need to be able to represent the cost, schedule,\r\nand quality associated with the development of different software\r\ncomponents or architectural configurations. </p>\r\n<p><b>Integration into commercial software development environments\r\n(SDEs):</b> In order for VISTA tools to be broadly applied across the\r\nspectrum of DoD or other large-scale system acquisitions, they need to\r\nbecome available as extensions (E.g., \"plug-ins\" or \"helper\r\napplications\") to commercially available software engineering\r\nenvironments. </p>\r\n<p>With this context for VISTA research, technology, and acquisition\r\nusage in mind, we can now more simply characterize the overall concept\r\nfor how the VISTA might be employed. This can be outlined in four\r\nsteps: </p>\r\n<ul>\r\n  <li> <i>Pre-proposal Requirements Analysis:</i> Use the <i>VISTA</i>\r\nenvironment to analyze feasibility of the system's concept and mission\r\nrequirements (a sanity check on the technical perspective for a new\r\nmission program to determine rough order of magnitude for cost,\r\narchitecture, other risk items, etc.) prior to the Request For Proposal.</li>\r\n  <li> <i>Proposal Analysis:</i> Upon receipt of development\r\ncontractors' proposals, use <i>VISTA</i> to analyze each proposal for\r\nfeasibility, determine which proposals are in competitive range, and\r\nwhat assistance is needed to evaluate the technical perspective (E.g.,\r\narchitecture) of those proposals within competitive range.</li>\r\n  <li> <i>Project Start-up:</i> Use <i>VISTA</i> to evaluate the\r\nfeasibility of resources (cost, people, etc.) and schedule of proposed\r\nsystem design. This could also be used for \"fly-off\" scenarios as\r\nwell, when competing designs are being evaluated.</li>\r\n  <li> <i>Ongoing Program Review:</i> Use <i>VISTA</i> to re-analyze\r\nfeasibility at progress milestones during development life cycle, as\r\nwell as when significant program or system requirements changes occur.</li>\r\n</ul>\r\nVISTA should be applicable to product-line software system\r\narchitectures, as well as to unique non-product-line software systems.\r\nIt appears that the VISTA may be more readily suited to product-line\r\nsoftware system architectures, since their recurring development can\r\naccommodate the collection, refinement, and calibration of the VISTA\r\nfor the product-line's application domain. However, it may also be\r\nuseful for (portions of) non-product-line software, especially where a\r\nwell-conceived reference model standard, such as the Air Force's\r\nHorizon Architecture defines the software. Nonetheless, within the\r\ndomains of C4I, air traffic control, MIS, and other applications, we\r\nmay expect future systems to be more likely to conform to product-line\r\narchitectures. Industry trends and corporate strategies may then lead\r\nsystem development contractors to focus their expertise and core\r\ncompetencies around the mastery of product-lines, rather than\r\nindividual products or contracts.\r\n<h2> Managing the organizational transitions to VISTA</h2>\r\nThe move to adopt, implement, routinize, and replicate the VISTA\r\napproach seems to be a radical departure from current system\r\nacquisition practices and processes. While we believe that a\r\ncompelling technical argument can be made for the VISTA approach, we\r\nmust also address the kinds of organizational situations or changes\r\nthat must be part of the transition to VISTA.\r\n<p>Personnel will be unfamiliar with VISTA and what is required to\r\nre-engineer the processes they enact during system acquisition.\r\nMutually respected, collaborative education, elicitation, and\r\ninformation sharing among the participating user, development\r\ncontractor, and program management organizations will be required.\r\nWWW-based collaborative work environments or acquisition collaboratories\r\n(cf. Kouzes, Meyers, and Wulf 1996) can help provide the information\r\ninfrastructure needed to support this. However, participation and\r\nengagement in re-engineering system acquisition, development, and\r\nprogram management must span all levels of the organization chart, and\r\nmust achieve commitment, resources, and strategic attention from\r\nexecutive and senior management in order to increase the likelihood of\r\nsuccess (Bashein, Markus, and Riley 1994). </p>\r\n<p>Our characterization of <i>as-is</i> system acquisition processes\r\nand practices, as well as <i>to-be</i> VISTA based approaches are\r\nunderstated. Clearly, there is far more detail to system acquisition or\r\nvirtual system acquisition processes and practices than can be\r\ndescribed here. Furthermore, we recognize that both as-is and to-be\r\napproaches to system acquisition are put into practice in different\r\nways, in different organizational settings, for different system\r\nacquisitions. Capturing, understanding, and describing these variations\r\nrequire systematic research, empirical investigation, and wide-area\r\ndissemination. However, experience has shown that this attention to\r\ndetail can lead to distinguishing what's common from what's\r\ncircumstantial. Such detail will help surface specific actions to take\r\nto successfully engage personnel to collaborative identify and perform\r\nthe organizational transformations needed to transition from the as-is\r\nto the to-be. </p>\r\n<p>Next, as the world moves towards a globally networked information\r\ninfrastructure based on the Internet and WWW, we recognize that the\r\ninformation systems and computer-based tools supporting the\r\nacquisition, development, and program management will increasingly\r\nbecome heterogeneous relative to one another (cf. Noll and Scacchi\r\n1991, Scacchi and Noll 1997). Interoperability will not be easily\r\nachieved without the experience and expertise needed to make it\r\nhappen. However, new information technologies are rapidly emerging that\r\nwill give rise to new ways to more rapidly configure, interconnect, and\r\nintegrate software systems in order to enable them to interoperate.\r\nFurthermore, what's likely to be critical during early VISTA-based\r\nacquisition and development cycles is <i>realizing interoperability\r\nat the organizational process level</i> , rather than only at the\r\ntraditional system function level. Experience shows that addressing\r\nand resolving interoperability between distinct organizations, such as\r\nthose participating in a system acquisition, can often lead to ways to\r\nobviate, minimize, or avoid system function interoperability\r\ndependencies (STSC 1995). This helps to refine, streamline, and focus\r\nboth system architecture and system development processes. </p>\r\n<p>Last, as indicated earlier, attention in this article is directed at\r\nemphasizing the re-tooling and re-engineering system acquisition\r\nprocesses and system feasibility assessment. However, a greater payoff\r\ncan potentially result from complementary incorporation of process\r\nreengineering concepts, techniques, and tools into VISTA approaches\r\n(cf. Nissen 1997, Scacchi and Mi 1997, Scacchi and Noll 1997, Scacchi <i>et\r\nal</i>. 1997). For example, recent efforts at redesigning acquisition\r\nand procurement processes for the Navy have identified a number of ways\r\nthese processes can be transformed and streamlined to realize\r\nsubstantial reduction in cycle times and administrative costs (Nissen\r\n1997, Scacchi <i>et al</i>. 1997). However, these capabilities have\r\nnot been used to support the acquisition of large software systems and\r\nthus require further investigation. Nonetheless, the vision of a 21st.\r\nCentury \"digital government\" raises such matters to be the subject of\r\nsystematic acquisition research and empirical investigation befitting a\r\ngrand challenge to the academic, industrial, and government research\r\ncommunity (Schorr and Stolfo 1997). Subsequently, the acquisition\r\ncommunity needs to stimulate research that can find new ways to\r\nradically streamline program operations, reduce system costs, and\r\nimprove service quality through re-engineering, reinvention, and\r\nsystematic utilization of emerging information technologies and\r\ninfrastructures. </p>\r\n<h2> Conclusions</h2>\r\nIn this article, we identified opportunities for research and\r\napplication of modeling, simulation, and evolutionary development\r\ntechnologies to re-tooling and re-engineering system acquisition\r\nprocesses. These tools and techniques can help to analyze overall\r\nfeasibility and risks at various points in the system acquisition life\r\ncycle. Such a capability offers the potential to reduce software system\r\nacquisition risks and avoidable costs, as well as explore alternative\r\nsystem options in order to develop more affordable, capable, and\r\nflexible systems. Subsequently, we use the new SC-21 battleship program\r\nas a case study to help illustrate and explain how virtual system\r\nacquisition can work.\r\n<p>We put forward a vision and approach for how to rethink the manner\r\nin which software-intensive systems can be acquired across the\r\nacquisition life cycle. Central to this vision is a new approach to\r\nvirtual system acquisition we call VISTA. We believe that VISTA offers\r\na new strategy for how to address, resolve, or mitigate the recurring\r\nproblems that accompanies complex system acquisition. Major program\r\nacquisitions such as the SC-21 class of ships, the Joint Strike Fighter\r\nand others are positioned to take advantage of timely investment and\r\nadoption of VISTA strategies and support environments. </p>\r\n<p>VISTA is a new approach to the acquisition of software-intensive\r\nsystems. It seeks to build on knowledge of best practices in as-is\r\nacquisition and development processes, as well as moving toward a\r\nre-tooled and reengineered to-be software systems acquisition and\r\ndevelopment process. The acquisition of complex systems such as the\r\nSC-21 class of ships will use virtual prototyping and manufacturing\r\ntools to acquire and build virtual ships using collaborative wide-area\r\ncomputer-based environments. However, modeling and simulation tools and\r\ntechniques have not yet been proposed to support the acquisition and\r\ndevelopment of the software systems needed to make the overall ship\r\nsystem operational and effective. Thus, we propose to fill this gap\r\nwith the VISTA approach. </p>\r\n<p>We believe that tools, techniques, and concepts embodied in the\r\nVISTA approach merit consideration and application in forthcoming\r\nlarge-scale system acquisitions. These include incremental acquisition\r\ninterleaved with development, virtual prototyping, wide-area\r\ncollaboratories, and software requirement negotiation and validation\r\nenvironments. However, it would be misleading to indicate that they are\r\nbeing used together in the manner we suggest. The VISTA approach needs\r\nto be experimentally applied and refined. Accordingly, an R&amp;D\r\ntechnology roadmap was presented that lays out a path for the\r\niterative, incremental evolution and integration of the technologies\r\nneeded to support the VISTA vision. The technologies needed to support\r\nthe VISTA approach need to be brought together and made accessible to\r\ndifferent acquisition participants. </p>\r\n<p>The VISTA approach we presented is a vision of how the acquisition\r\nof software-intensive systems can be designed and streamlined for use\r\nin the years ahead. Major system acquisition programs such as the SC-21\r\nbattleships or Joint Strike Fighter aircraft are representative\r\ncandidates for the VISTA approach. The success of programs such as\r\nthese will depend in part on the successful acquisition and development\r\nof the software systems that enable these platforms to do their job.\r\nVISTA represents a substantial department from and alternative to\r\npresent software system acquisition practices (STSC 1995, SPMN 1997).\r\nNonetheless, we have cast it in a manner that shows how to incrementally\r\ntransition from the technology and organizational practices that today\r\nsupport software system acquisition to the VISTA approach we envision. </p>\r\n<p>Finally, moving to adopt and practice VISTA-based system\r\nacquisitions is not without its risks. Accordingly, we have sought to\r\nidentify the technological and organizational transitions that must be\r\nresearched, modeled and simulated to help reduce the risks and improve\r\nour understanding of how to evolve system acquisition practices and\r\nsupport environments to help see the way to the VISTA. In this sense,\r\nthe VISTA approach could be demonstrated by applying it to the\r\nacquisition and development of a software system that incorporates the\r\nconcepts in this paper and related reports (Boehm and Scacchi 1996). </p>\r\n<p><b>References</b> </p>\r\n<p>B.J. Bashein, M.L. Markus, P. Riley. Preconditions for BPR success:\r\nand how to prevent failures, <i>Information Systems Management</i>,\r\n7-13, 1994. </p>\r\n<p>B. Boehm, P. Bose, E. Horowitz, and M. J. Lee, Software Requirements\r\nNegotiation and Renegotiation Aids: A Theory-W Based Spiral Approach, <i>Proc.\r\n17th International Conference on Software Engineering</i>, Seattle, WA,\r\nApril 1995. </p>\r\n<p>B. Boehm and W. Scacchi. Simulation and Modeling for Software\r\nAcquisition (SAMSA), Final Report, Center for Software Engineering,\r\nUniversity of Southern California, Los Angeles, CA, <a\r\n href=\"http://sunset.usc.edu/SAMSA/samcover.html\">http://sunset.usc.edu/SAMSA/samcover.html</a>\r\n, March 1996. </p>\r\n<p>J. Cothran. Battle Labs: Tools and Scope,&nbsp; <i>Acquisition\r\nReview Quarterly</i> , Winter 1996. </p>\r\n<p>W.H. Dutton and K.L. Kraemer. <i>Modeling as Negotiating: The\r\nPolitical Dynamics of Computer Models in the Policy Process,</i> Ablex,\r\nNorwood, NJ, 1985. </p>\r\n<p>Lt. Col. A.B. Garcia, Col. R.P. Gocke Jr., Col. N.P. Johnson Jr. <i>Virtual\r\nPrototyping: Concept to Production</i>, Defense Systems Management\r\nCollege Press, Fort Belvoir, March 1994. </p>\r\n<p>General Accounting Office.&nbsp; Defense Weapons Systems\r\nAcquisition, Report GAO/HR-95-4, 1995. </p>\r\n<p>General Accounting Office. Air Traffic Control--Immature Software\r\nAcquisition Processes Increase FAA System Acquisition Risks, Report\r\nGAO/AIMD-97-47, 1997. </p>\r\n<p>R.T. Kouzes, J.D. Meyers, and W.A. Wulf. Collaboratories -- Doing\r\nScience on the Internet, <i>Computer</i>, 29(8):40-48,&nbsp; August,\r\n1996. </p>\r\n<p>P. Mi and W. Scacchi. A Knowledge-Based Environment for Modeling and\r\nSimulating Software Engineering Processes. <i>IEEE Trans. Knowledge\r\nand Data Engineering</i> , 2(3):283-294, 1990. </p>\r\n<p>P. Mi and W. Scacchi. A Meta-Model for Formulating Knowledge-Based\r\nModels of Software Development. <i>Decision Support Systems</i>,\r\n17(3):313-330. 1996.&nbsp; <a\r\n href=\"http://www.usc.edu/dept/ATRIUM/Papers/Process_Meta_Model.ps\">http://www.usc.edu/dept/ATRIUM/Papers/Process_Meta_Model.ps</a> </p>\r\n<p>M.E. Nissen. Reengineering the RFP Process Through Knowledge-Based\r\nSystems. <i>Acquisition Review Quarterly</i>, 4(1):87-100, Winter\r\n1997 . </p>\r\n<p>J. Noll and W. Scacchi. Integrated Diverse Information Repositories:\r\nA Distributed Hypertext Approach, <i>Computer</i>, 24(12):38-45,\r\nDecember 1991. </p>\r\n<p>W. Rechtin. <i>System Architecting: Creating and Building Complex\r\nSystems</i> . Prentice-Hall, Englewood Cliffs, NJ. 1991. </p>\r\n<p>W. Scacchi and P. Mi. Process Life Cycle Engineering: A\r\nKnowledge-Based Approach and Environment. <i>Intern. J. Intelligent\r\nSystems in Accounting, Finance, and Management</i>, 6(1):83-107, 1997. <a\r\n href=\"http://www.usc.edu/dept/ATRIUM/Papers/Process_Life_Cycle.html\">http://www.usc.edu/dept/ATRIUM/Papers/Process_Life_Cycle.html</a> </p>\r\n<p>W. Scacchi and J. Noll. Process-Driven Intranets: Life-Cycle Support\r\nfor Process Reengineering. <i>IEEE Internet Computing</i>, 1(5):42-49,\r\nSeptember-October 1997. </p>\r\n<p>W. Scacchi, J. Noll, C. Knight, and Capt. F.J. Miller.\r\nRe)Engineering Research Grants Management: From Acquisition Reform to\r\nKnowledge Brokering at ONR, Paper presented at the NSF Workshop on\r\nResearch and Development Opportunities for Federal Information\r\nServices, Arlington, VA,&nbsp; May 1997.&nbsp; <a\r\n href=\"http://www.usc.edu/dept/ATRIUM/NSF-FIS-Workshop.html\">http://www.usc.edu/dept/ATRIUM/NSF-FIS-Workshop.html</a> </p>\r\n<p>R.M. Schooff, Y.Y. Haimes, and C.G. Chittister. A Holistic\r\nManagement Framework for Software Acquisition, <i>Acquisition Review\r\nQuarterly</i>, Winter 1997. </p>\r\n<p>H. Schorr and S. Stolfo. Towards the Digital Government of the 21st.\r\nCentury, Final Report, NSF Workshop on Research and Development\r\nOpportunities for Federal Information Services, <a\r\n href=\"http://www.isi.edu/nsf/final.html\">http://www.isi.edu/nsf/final.html</a>\r\n, June 1997. </p>\r\n<p>B.C. Smith, Limits of Correctness in Computers, in R. Kling (ed.), <i>\r\nComputerization and Controversy, </i>Academic Press, New York, NY,\r\n810-825, 1996. </p>\r\n<p>(SC21) SC-21 Information System, <a\r\n href=\"http://sc21.crane.navy.mil/\">http://sc21.crane.navy.mil</a>,\r\n1997. </p>\r\n<p>(SPMN) Software Program Managers Network. <i>The Condensed Guide to\r\nSoftware Acquisition Best Practices</i>, October 1997. Available from\r\nSPMN at <a href=\"http://www.spmn.com/products.html\">http://www.spmn.com/products.html</a>\r\n. </p>\r\n<p>(STSC) Software Technology Support Center. Guidelines for Successful\r\nAcquisition and Management of Software-Intensive Systems: Weapon\r\nSystems, Command and Control Systems, Management Information Systems.\r\nVolumes 1 &amp; 2. Dept. of the Air Force, February 1995. </p>\r\n<p>J. Wilson. Battle Labs: What Are They, Where Are They Going? <i>Acquisition\r\nReview Quarterly</i>, Fall 1996. <br>\r\n&nbsp; <br>\r\n&nbsp; </p>\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}