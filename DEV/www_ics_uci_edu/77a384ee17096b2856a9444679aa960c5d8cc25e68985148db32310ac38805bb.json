{"url": "https://www.ics.uci.edu/~thornton/ics142/LabManual/Assignment1/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course2.css\" type=\"text/css\" />\r\n\r\n<title>ICS 142 Winter 2004, Assignment #1</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 142 Winter 2004 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../LabManual\">Lab Manual</a> |\r\n<a href=\"news:ics.142\">ics.142 newsgroup</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 142 Winter 2004<br />\r\n   Assignment #1</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Monday, January 26, 11:59pm</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Introduction</p>\r\n\r\n<p>The first step of compilation is <i>scanning</i> (sometimes called <i>lexical analysis</i>).  As we discussed in class, the objective of scanning is to take the source program, which is in reality a stream of characters, and turn it into a stream of <i>lexemes</i>, or words, instead.  This raises the level of abstraction of the source program at a very low cost, since scanning can be done very efficiently.  The time spent on scanning pays off many times over, as the next step of compilation, <i>parsing</i>, has a much higher cost per symbol than scanning does.  The fewer symbols a parser deals with, the less time <i>and</i> memory is used, so a compiler is much more efficient if its parser deals with lexemes rather than characters.</p>\r\n\r\n<p>In this assignment, you'll write a scanner for a hypothetical language called Monkie2004.  You'll be using a Java-based scanner generator called JFlex for the majority of your solution to this assignment.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">JFlex: a scanner generator for Java</p>\r\n\r\n<p>JFlex is a <i>scanner generator</i>, which takes as input a script that uses regular expressions to describe a set of lexeme patterns, then generates a Java class implementing a scanner that recognizes those patterns.  Associated with each pattern is an action, which is a chunk of Java code; each time the scanner recognizes a pattern, the associated action is executed.  JFlex generates an efficient scanner, saving you the trouble of designing and implementing a DFA by hand or, worse yet, hand-coding the scanner from scratch.</p>\r\n\r\n<p>Understanding JFlex requires a rough understanding of the class that it will generate, as well as an awareness of how various settings can be modified so that the class will behave as you'd like it to.  The following sections seek to give you this understanding.</p>\r\n\r\n<p class=\"subtitle\">The general structure of a JFlex script</p>\r\n\r\n<p>JFlex scripts follow this general structure:</p>\r\n\r\n<pre>\r\n<i>User code</i>\r\n\r\n%%\r\n\r\n<i>Options and declarations</i>\r\n\r\n%%\r\n\r\n<i>Lexical rules</i>\r\n</pre>\r\n\r\n<p>The three sections of the script are separated by <b>%%</b> appearing by itself on a line.</p>\r\n\r\n<p>The <i>user code</i> section contains code that appears outside of the scanner class; most typically, this will contain import or package declarations, but could include an additional class if you'd like.  (Personally, I prefer putting additional classes into separate .java files.  Remember that <i>all</i> of the code related to your scanner doesn't have to go into the JFlex script.  The purpose of the JFlex script is just to generate the class that represents the scanner; I look at it as a replacement for the one Java class that is generated from it.)  The code in this section will appear above the generated scanner class in the .java file generated by JFlex.</p>\r\n\r\n<p>The <i>options and declarations</i> section contains three things:</p>\r\n\r\n<ul>\r\n  <li>The specification of various options, such as the name of the scanner class, the return type and name of its \"next token\" method, etc.  A full list of options is listed in the <a href=\"http://jflex.de/manual.html\">JFlex user manual</a>.  You shouldn't need any options other than the ones I've specified in the example below.</li>\r\n  <li>A declaration of additional code that is placed into the scanner class.  If you need to add fields or helper methods into the scanner class, this is where you put them.</li>\r\n  <li>Declarations of regular expression macros, which establish shorthands for commonly-appearing subexpressions, or complex subexpressions that will make more sense if given a name.</li>\r\n</ul>\r\n\r\n<p>Here's a brief example of an options and declarations section:</p>\r\n\r\n<pre>\r\n%class MyScanner        // sets the name of the scanner class to MyScanner\r\n%public                 // makes the scanner class public\r\n%type Token             // sets the return type of the scanner method to Token\r\n%function getNextToken  // sets the name of the scanner method to getNextToken\r\n\r\n%{\r\n    // This code is copied into the scanner class verbatim.  Use it to add\r\n    // additional fields and methods to the scanner class, if necessary.\r\n\r\n    private int anExtraField;\r\n    \r\n    public int aHelperMethod()\r\n    {\r\n        return anExtraField;\r\n    }\r\n%}\r\n\r\n// These are macros for regular expressions, which can be used in the next\r\n// section for building bigger regular expressions.  Why you would want to\r\n// use these is basically the same reason why you want to have named constants\r\n// in any program: for readability and writability!\r\n\r\nLineTerminator = \\r | \\n | \\r\\n\r\nWhitespace = {LineTerminator} | [ \\t\\f]\r\n</pre>\r\n\r\n<p>The example above obviously isn't precisely what you want for this assignment, but gives you an idea of what this section is used for.</p>\r\n\r\n<p>The <i>lexical rules</i> section is the heart of the scanner.  In this section, you specify a regular expression that describes a type of lexeme that you'd like to recognize, along with an action that should be executed whenever a matching lexeme is found.  Most of the time, you'll want your actions to contain a <b>return</b> statement in them; that statement will return a value from the scanner method.  (In the case of patterns that indicate text that should be ignored, such as whitespace and comments, you may want the action to be empty instead.)  It stands to reason, then, that the type of value you return in your action should be compatible with the return type you specified in the options section.</p>\r\n\r\n<p>Here are a few examples of lexical rules:</p>\r\n\r\n<pre>\r\n\"public\"               { return new Token(Token.PUBLIC, yytext()); }\r\n\"protected\"            { return new Token(Token.PROTECTED, yytext()); }\r\n\"private\"              { return new Token(Token.PRIVATE, yytext()); }\r\n[a-z]+                 { return new Token(Token.IDENTIFIER, yytext()); }\r\n</pre>\r\n\r\n<p>In the examples above, the action associated with each rule specifies the return of a Token, which is a hypothetical object that represents one token in a programming language.  One way to design a scanner is to have it return token/lexeme pairs, which is what this example does; each Token is constructed from a token type (which is assumed to be an int constant defined in the Token class, such as <b>Token.IDENTIFIER</b>) and the lexeme that was recognized.  The recognized lexeme can be accessed by calling the <b>yytext()</b> method, as above.</p>\r\n\r\n<p class=\"subtitle\">Regular expressions, JFlex-style</p>\r\n\r\n<p>The syntax for regular expressions used by JFlex is very similar to the syntax used by many other tools that support regular expressions, such as <b>lex</b>, <b>flex</b>, and <b>grep</b> on Unix and Linux, as well as the scripting language Perl, and also the regular expression package in the Java library.  A complete specification can be found in the <a href=\"http://jflex.de/manual.html\">JFlex user manual</a>, but here's a quick list of the ones you'll probably find to be most useful:</p>\r\n\r\n<ul>\r\n  <li>A single character expression, such as <b>x</b>, matches that character.</li>\r\n  <li>A <i>character class</i> specifies a range of characters in roughly the way you'd expect.  For example, <b>[a-z]</b> specifies all lowercase letters, while <b>[a-zA-Z0-9]</b> specifies all uppercase letters, lowercase letters, and digits.</li>\r\n  <li>Character classes can be negated by starting them with a <b>^</b> character, but you should be careful with this feature.  The character class <b>[^a-x]</b> specifies <i>all</i> characters in the entire character set that are not 'a'..'x', not just 'y' and 'z'.</li>\r\n  <li>A string expression, such as <b>\"Alex\"</b>, matches exactly that string.</li>\r\n  <li>The alternation (\"or\") operation is specified by the <b>|</b> character, just as we discussed in class.  So, the expression <b>a | b</b> matches either an \"a\" or a \"b\".</li>\r\n  <li>The concatenation operation is specified by juxtaposing two expressions, just as we discussed in class.  Thus, the expression <b>(a | b) [a-z]</b> matches a string that begins with \"a\" or a \"b\", followed by any lowercase letter.</li>\r\n  <li>The Kleene closure (or \"star\") operation is specified by the <b>*</b> character, just as we discussed in class.  For example, the expression <b>[a-z][a-z]*</b> specifies strings of lowercase letters with at least one letter in them.</li>\r\n  <li>As a shorthand for \"one or more\", the <b>+</b> operator can be used.  The expression <b>[a-z]+</b> is equivalent to <b>[a-z][a-z]*</b>.</li>\r\n  <li>As a shorthand for \"zero or one\", the <b>?</b> operator can be used.  The expression <b>[a-z][a-z]?</b> is equivalent to <b>[a-z] | [a-z][a-z]</b>.</li>\r\n  <li>Macros are used by surrounding them with curly braces.  So, the expression <b>{Whitespace}+</b> would match one or more characters of whitespace, assuming an appropriately-defined macro called <b>Whitespace</b>.</li>\r\n  <li>The <b>.</b> character (appearing outside of a string) matches any character in the character set <i>except</i> a newline.  So, the expression <b>a.*</b> matches all strings that begin with a lowercase \"a\".</li>\r\n</ul>\r\n\r\n<p>There are additional operators, but none that will matter too much for this assignment.</p>\r\n\r\n<p class=\"subtitle\">What JFlex does with a script</p>\r\n\r\n<p>Given an input script, JFlex generates one corresponding <b>.java</b> file that is primarily made up of a class that implements your scanner.  By default, the class has the name <b>Lexer</b>, though you can change its name to anything you want by specifying a value for the <b>%class</b> option in your script.  I also advise making the class public, by specifying the <b>%public</b> option as well.</p>\r\n\r\n<p>The heart of the scanner class is a method that returns the next token from the input stream.  You can control the specification of this method, including its name and return type, by specifying options.  Here, again, is an example of the relevant options:</p>\r\n\r\n<pre>\r\n    %type MonkieToken\r\n    %function getNextToken\r\n</pre>\r\n\r\n<p>...which will give the \"next token\" method the following signature:</p>\r\n\r\n<pre>\r\n    public MonkieToken getNextToken() throws java.io.IOException\r\n</pre>\r\n\r\n<p>You can also control other aspects of this method's signature, including what exceptions it throws and what it does when the end of the input has been reached.  If you're interested in more details about that, refer to the <a href=\"http://jflex.de/manual.html\">JFlex user manual</a>.</p>\r\n\r\n<p>The primary reason why you need this kind of control over the signature of the scanning method is that a scanner is just a small piece of a compiler.  Its central job is to return the next token in the input whenever asked.  The next stage of compilation, the parser, will continually ask the scanner for the next token as it does its work.  Making sure that the scanner and parser can integrate together correctly is vitally important, especially if you're using an automated parser generator tool (as we'll be doing later in the quarter).</p>\r\n\r\n<p>The scanning method will work its way through the input from wherever it left off previously, looking for an occurrence of one of the patterns that you specified.  It will always match the <i>longest</i> occurrence of one of your patterns that it can find.  For example, if you've specified these two patterns:</p>\r\n\r\n<pre>\r\n    for        // the \"for\" keyword\r\n    [a-z]+     // one or more lowercase letters\r\n</pre>\r\n\r\n<p>...if the remaining input begins with <b>format</b> followed by whitespace, JFlex will match <b>format</b> to the second pattern, even though it could have matched <b>for</b> to the first pattern (with <b>mat</b> left over).  The reason for this is simple: it's how we expect our programming languages to behave.  For example, if we wrote the following statement in a Java program:</p>\r\n\r\n<pre>\r\n    returnx;\r\n</pre>\r\n\r\n...we shouldn't be the slightest bit surprised when we get a compiler error that says something like \"Hey, you never declared a variable called <b>returnx</b>!\"  We would be crazy to expect that the compiler would discover that this statement could really be interpreted to mean \"return x\".  (Some older programming languages, most notably Fortran, treated whitespace as optional in this way, but such rules are now considered to cause more problems than they solve.)</p>\r\n\r\n<p>The order in which you specify your patterns also turns out to be important.  Some strings will match more than one pattern.  With the two patterns above, <b>for</b> and <b>[a-z]+</b>, the string <b>for</b> actually matches both of them.  JFlex resolves such a conflict by always choosing the first pattern you specified.  So, if you specified your patterns in this order:</p>\r\n\r\n<pre>\r\n    [a-z]+\r\n    for\r\n</pre>\r\n\r\n<p>...the string <b>for</b> would be considered an identifier, rather than the <b>for</b> keyword!  Exercise caution when you're ordering your patterns.</p>\r\n\r\n<p>Believe it or not, much of the scanning theory that we've discussed in class (and appears in Chapter 2 of your textbook) is embodied within JFlex.  A quick tour through the JFlex source code reveals classes like <b>RegExp</b>, <b>DFA</b>, and <b>NFA</b>, and implementations of algorithms for translating a regular expression to an NFA and an NFA to a DFA, including methods that do necessary jobs like adding states and transitions, as well as calculating &epsilon;-closures of NFA states.</p>\r\n\r\n<p class=\"subtitle\">Creating and using a scanner object</p>\r\n\r\n<p>JFlex creates a scanner class with two constructors, one that takes a <b>java.io.Reader</b> as a parameter, and another that takes a <b>java.io.InputStream</b> as a parameter.  So, it's easy to create a scanner that reads its input from either a file or <b>System.in</b> by calling the appropriate constructor.  Here are two examples of creating a scanner object, assuming a scanner class called MyScanner:</p>\r\n\r\n<pre>\r\n    // creates a scanner that reads its input from a file called \"filename\"\r\n    MyScanner s1 = new MyScanner(new FileReader(\"filename\"));\r\n\r\n    // creates a scanner that reads its input from System.in\r\n    MyScanner s2 = new MyScanner(System.in);\r\n</pre>\r\n\r\n<p>Once your scanner object has been created, you can repeatedly call its scanning method until the end of the input is reached.  While there are a few ways to configure your scanner to handle the end of the input, I suggest leaving the default behavior of returning null (assuming that your scanning method returns an object type, such as the class Token that I used in my example) when there is no more input.</p>\r\n\r\n<p class=\"subtitle\">I want to know more!</p>\r\n\r\n<p>Of course, there's plenty more documentation available about JFlex, if you'd like to read through it.  The complete user manual can be found at <a href=\"http://jflex.de/manual.html\">this link</a>.  A copy of it (in a file called <b>manual.html</b>) is also present in the prepared installation that I've provided.  The manual also references some academic papers and reference books, if you're really interested in the subject and want more depth.</p>\r\n\r\n<p>It can also be educational (and fun, if you like this sort of thing) to look through the code that JFlex generates for your script.  I won't claim to have gone through it with a fine-tooth comb, but I have paged through it to get its general flavor, and I've discovered that it's surprisingly clean, makes basically good sense, and <i>even includes comments</i>.  For example, I noticed that it uses techniques for table compression like the ones described in section 2.5 of your textbook, to reduce the memory requirement.  Good stuff.  Looking through it also helps you to understand where the snippets of Java code from the JFlex script actually go, which can come in handy when you're writing your JFlex script.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Using JFlex in the ICS labs</p>\r\n\r\n<p>JFlex is already installed on the Windows workstations in the ICS labs.  JFlex is primarily driven via the command line, so to use it, start by bringing up a Command Prompt window.  On the lab machines, JFlex is not configured to work by default.  Each time you start a Command Prompt, you'll need to load its settings by executing these two commands:</p>\r\n\r\n<pre>\r\ncd \\opt\\ics142\r\nstart142\r\n</pre>\r\n\r\n<p>Once this has been done, you can compile a JFlex script (e.g. <b>blah.flex</b>) with the command <b>jflex blah.flex</b>.  This will create a Java source file (e.g. <b>Lexer.java</b>).  Don't forget to compile this .java file before executing your program!</p>\r\n\r\n<p>(Note: On a few of the machines in the lab, the <b>start142.bat</b> file might be called <b>start.bat</b> instead.  This is an installation bug that hasn't been eradicated fully, since all the machines aren't always on when it's time to update them.  In that case, execute this command instead:</p>\r\n\r\n<pre>\r\n.\\start\r\n</pre>\r\n\r\n<p>The dot and the backslash are necessary because <b>start</b> is actually a Windows shell command.)</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Installing JFlex at home</p>\r\n\r\n<p>In case you'd prefer to do some or all of your work at home, I've prepared an installation of JFlex and CUP (a parser generator tool that we'll be using later in the quarter) for Windows in an easy-to-use <a href=\"../JFlex_CUP.zip\">Zip archive</a> that's basically the same as the one provided in lab, with a few minor differences.  Assuming that you've already <a href=\"../SettingUpJava.html\">installed Java on your system</a>, installation will be a snap!</p>\r\n\r\n<p>Expand the Zip archive to whatever folder you're comfortable with.  In this folder will be a batch file called <b>start142.bat</b> that (temporarily) sets up JFlex (and CUP) for your use.  You'll need to make one change to it before you can use it, though; open the file in your text editor and set the <b>JFLEX_CUP_HOME</b> environment variable to the folder where you extracted the archive.  (There's more information about this within the <b>start142.bat</b> file.)</p>\r\n\r\n<p>There's one more caveat that I should mention about my prepared installation.  It assumes the presence of an environment variable called <b>JAVA_HOME</b>, which contains the path to the base folder in which you installed the Java SDK (e.g. <b>c:\\j2sdk1.4.2_03</b>).  If you don't have this environment variable already set up on your system, you should set it up globally; many existing Java programs and tools use it for installation and configuration.  If you don't remember how to change the value of environment variables, refer to <a href=\"../SettingUpJava.html\">this document about setting up and installing Java</a>.</p>\r\n\r\n<p>Once you've got the installation finished, bring up a Command Prompt, change into the folder where you extracted the archive and type the command <b>start142</b>.  You should now be ready to use JFlex!  Be aware that, just like in the labs, you'll need to run the <b>start142</b> command every time you bring up a new Command Prompt, as its settings won't \"stick.\"</p>\r\n\r\n<p>After the settings are loaded, you can compile a JFlex script (e.g. <b>blah.flex</b>) with the command <b>jflex blah.flex</b>.  This will create a Java source file (e.g. <b>Lexer.java</b>).  Don't forget to compile this .java file before executing your program!</p>\r\n\r\n<p>Of course, if you'd prefer to install JFlex yourself, it's not especially difficult to do if you have some experience installing Java-based programs and you follow the instructions in the documentation.  If you'd like to download the normal JFlex distribution, it can be obtained free of charge from <a href=\"http://jflex.de/\">jflex.de</a>.  Stick to the current \"stable\" version 1.3.5.  Users of Linux, Mac OS X, and other operating systems: you're unfortunately on your own, as I have nothing but Windows machines at home and in my office.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Great, but what am I supposed to do with all this?</p>\r\n\r\n<p>Your assignment is to use JFlex to write a scanner for a hypothetical programming language called Monkie2004.  A scanner isn't normally a stand-alone component; it is generally integrated into a program that processes input text for some greater purpose, such as compilation or interpretation, or even the finding and replacing of text.  For the time being, however, I'd like your scanner to stand alone, meaning that it will need to be surrounded by a driver program that creates a scanner object, breaks an input file (whose name is specified as a command-line parameter) into token/lexeme pairs, and prints the token/lexeme pairs to <b>System.out</b> as it goes along.  Only lexemes that matter should be printed, not those which are evident from the token type.  This roughly means that you should print the lexeme associated with tokens like identifiers and string literals, but not keywords or operators.</p>\r\n\r\n<p>You might be tempted to place the printing of this output into the scanner itself by embedding it into the action associated with each lexical rule.  I'm requiring that your scanner return the token/lexeme pair back to the caller (the driver program) and that the caller does this printing.  The reason for this is clear from a software engineering perspective: a properly-designed scanner should be functional in many contexts, meaning that it should break the input into its tokens and lexemes, then return the token/lexeme pairs to the caller for further processing, be it parsing, printing, or whatever else.  If we were to continue with this Monkie2004 example by building a parser in a subsequent assignment, you would be able to use your scanner with your parser without any modification.</p>\r\n\r\n<p>To make it easier to grade the assignments, I have a couple of requirements about naming:</p>\r\n\r\n<ul>\r\n  <li>Your JFlex script must appear in a file called <b>monkie.flex</b>.</li>\r\n  <li>Your driver program must have its main() method in a public class called <b>Driver</b>, appearing in a file called <b>Driver.java</b>.</li>\r\n  <li>You may include as many other .java files as you'd like.</li>\r\n  <li>None of your files should use the <b>package</b> directive.</li>\r\n</ul>\r\n\r\n<p>The effect of these requirements is that we'll be able to compile and run your program using the following commands:</p>\r\n\r\n<pre>\r\n    jflex monkie.flex\r\n    javac *.java\r\n    java Driver inputfile.monkie\r\n</pre>\r\n\r\n<p>...where <b>inputfile.monkie</b> is the name of a file containing a Monkie2004 program.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The Monkie2004 language</p>\r\n\r\n<p>The Monkie2004 language is a simple imperative-style language with two basic data types (integers and strings), functions with zero or more arguments and one return type, procedures with zero or more arguments and no return type, reasonably straightforward mathematical, relational, and logical operations, and a few kinds of imperative-style statements (e.g. assignment statements, an \"if\" statement, and one kind of loop).  Of course, to build a scanner, it's not necessary to know the complete specification of a programming language (though, in some cases, it helps), so I will stick to a brief example program and a lexical specification (i.e. what each kind of token looks like, without regard for how these tokens are put together to write a Monkie2004 program).</p>\r\n\r\n<p class=\"subtitle\">An example program</p>\r\n\r\n<p>Here's an example Monkie2004 program, deliberately written with somewhat more verbosity than is necessary, in order to demonstrate more language features:</p>\r\n\r\n<pre>\r\n-- the square function returns the square of some integer\r\nfunction square(n: integer): integer\r\n[\r\n    if n == 0 then\r\n        Result &lt;- 0        -- the Result \"variable\" holds the function's\r\n                           -- return value\r\n    else\r\n    [\r\n        var x: integer;    -- declares a variable x\r\n        x &lt;- n * n;\r\n        Result &lt;- x\r\n    ]\r\n]\r\n\r\n\r\n-- the program procedure is where the program begins its execution,\r\n-- somewhat akin to the main() method in Java\r\nprocedure program()\r\n[\r\n    var a, b: integer;\r\n    a &lt;- square(3);\r\n    b &lt;- square(a);\r\n    call print(a);\r\n    var s: string;\r\n    s <- \" squared is \";\r\n    call print(s);\r\n    call print(b)\r\n]\r\n</pre>\r\n\r\n<p class=\"subtitle\">Lexical specification of Monkie2004</p>\r\n\r\n<p>A Monkie2004 program is made up of a sequence of lexemes, each of which can be classified as being of one particular token type.  Unless otherwise specified, the lexeme that should be returned by your scanner is the actual chunk of source text, such as <b>35</b> or <b>&lt;-</b>.  The types of tokens, and the rules that govern their appearance, are as follows:</p>\r\n\r\n<ul>\r\n  <li>Identifiers must begin with an uppercase or lowercase letter, followed (optionally) by any number of uppercase letters, lowercase letters, digits, or underscores ('_').  An identifier may not end with an underscore, nor may it contain two or more consecutive underscores.</li>\r\n  <li>An integer literal is a sequence of digits, optionally preceded by a '-' character (indicating a negative number).</li>\r\n  <li>A string literal is a sequence of characters within double quotes.  Unlike in languages like Java, there are no special escape sequences such as <b>\\n</b>.  There are a couple of rules that need to be specified about string literals, however:\r\n    <ul>\r\n      <li>An end of line may not occur within a string literal.  This is always an error.  (You need not handle this error in your scanner, but you may if you wish.)</li>\r\n      <li>If you want to put a double quote character into a string literal, you can do so by putting two double quotes in a row.  For example, the string literal <b>\"My favorite song is \"\"Where the Streets Have No Name\"\" today\"</b> is a legal Monkie2004 string literal, which represents the following string of text: <b>My favorite song is \"Where the Streets Have No Name\" today</b>.</li>\r\n    </ul>\r\n    It should be noted that the <i>contents</i> of a string literal should be returned as its lexeme.  So, in the example above, the lexeme should be <b>My favorite song is \"Where the Streets Have No Name\" today</b>, without the beginning and ending double quotes, and with the pairs of double quotes within compressed to one each.</li>\r\n\r\n  <li>The following keywords are reserved in Monkie2004.  Each should be recognized as a separate token type:\r\n    <ul><li>\r\n    \r\n      <b>and</b>,\r\n      <b>call</b>,\r\n      <b>do</b>,   <!-- used in while loop, e.g. while a /= 0 do [ ... ] -->\r\n      <b>else</b>,\r\n      <b>function</b>,\r\n      <b>if</b>,\r\n      <b>implies</b>,  <!-- boolean operator, e.g. in Eiffel -->\r\n      <b>not</b>,\r\n      <b>or</b>,\r\n      <b>procedure</b>,\r\n      <b>ref</b>,  <!-- for passing parameters by reference -->\r\n      <b>then</b>,\r\n      <b>var</b>,\r\n      <b>while</b>,\r\n      <b>xor</b>\r\n\r\n    </li></ul>\r\n  </li>\r\n\r\n  <li>The following are characters or character sequences with special meaning, such as operators and parentheses.  Each should be recognized as a separate token type:\r\n    <ul>\r\n      <li>Left and right parentheses: &nbsp; <b>(</b> &nbsp; <b>)</b></li>\r\n      <li>Left and right brackets: &nbsp; <b>[</b> &nbsp; <b>]</b></li>\r\n      <li>Arithmetic operators: &nbsp; <b>+</b> &nbsp; <b>-</b> &nbsp; <b>*</b> &nbsp; <b>/</b></li>\r\n      <li>Relational operators: &nbsp; <b>&lt;</b> &nbsp; <b>&lt;=</b> &nbsp; <b>&gt;</b> &nbsp; <b>&gt;=</b> &nbsp; <b>==</b> &nbsp; <b>/=</b></li>\r\n      <li>The assignment opearator: &nbsp; <b>&lt;-</b></li>\r\n      <li>String concatenation: &nbsp; <b>&amp;</b></li>\r\n      <li>Semicolon: &nbsp; <b>;</b></li>\r\n      <li>Colon: &nbsp; <b>:</b></li>\r\n      <li>Comma: &nbsp; <b>,</b></li>\r\n    </ul>\r\n  </li>\r\n\r\n  <li>Comments begin with two dashes and continue until the end of the line on which they appear.  Comments should be ignored by the scanner, meaning that they don't constitute a lexeme.</li>\r\n  <li>Whitespace in a Monkie2004 program should be ignored; it does not constitute a lexeme.</li>\r\n\r\n<p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Sample input and output</p>\r\n\r\n<p>Sample input:</p>\r\n\r\n<pre>\r\n-- the semi-infamous \"hello 9\" program\r\nprocedure program()\r\n[\r\n    var a: integer;\r\n    a &lt;- 3 * 3;\r\n    call print(\"hello \");   -- notice how comments don't show up in the output\r\n    call print(a)\r\n]\r\n</pre>\r\n\r\n<p>Sample output:</p>\r\n\r\n<pre>\r\nPROCEDURE\r\nIDENTIFIER (program)\r\nLEFT_PAREN\r\nRIGHT_PAREN\r\nLEFT_BRACKET\r\nVAR\r\nIDENTIFIER (a)\r\nCOLON\r\nIDENTIFIER (integer)\r\nSEMICOLON\r\nIDENTIFIER (a)\r\nASSIGNMENT_OP\r\nINTEGER_LITERAL (3)\r\nMULTIPLICATION_OP\r\nINTEGER_LITERAL (3)\r\nSEMICOLON\r\nCALL\r\nIDENTIFIER (print)\r\nLEFT_PAREN\r\nSTRING_LITERAL (hello )\r\nRIGHT_PAREN\r\nSEMICOLON\r\nCALL\r\nIDENTIFIER (print)\r\nLEFT_PAREN\r\nIDENTIFIER (a)\r\nRIGHT_PAREN\r\nRIGHT_BRACKET\r\n</pre>\r\n\r\n<p>Your program's output need not be exactly like mine, but it should convey the same message; on each line, it should show one token and its associated lexeme.</p>\r\n\r\n<p>Naturally, it's necessary for your program to work with more than just the sample input.  We'll be testing it with several input programs that, together, test all of the lexical specification as described in the previous section.  You need not provide error handling; you may assume that the input file consists of a legal Monkie2004 program.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>Submit your JFlex script and the .java files that comprise your driver program.  You need not submit the .java file created by JFlex; we'll be regenerating it ourselves during the grading process anyway.  Remember that the name of your JFlex script must be <b>monkie.flex</b>, and that your driver program's main() method must appear in a file called <b>Driver.java</b>!</p>\r\n\r\n<p>Follow <a href=\"../SubmittingAssignments.html\">this link</a> for a discussion of how to submit your assignment.  Remember that we do not accept paper submissions of your assignments, nor do we accept them via email <i>under any circumstances</i>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Limitations</p>\r\n\r\n<p>There are a few JFlex features that I would prefer that you didn't use in your assignment.   If you don't know what the features on this list are, there's no need for you to find out about them unless you're curious.</p>\r\n\r\n<ul>\r\n  <li>You may not use <b>yybegin</b>, <b>yystate</b>, or lexical states in your set of lexical rules.</li>\r\n  <li>You may not use <b>yypushback</b>.</li>\r\n  <li>You may not use lookahead (i.e. <i>trailing context</i>).</li>\r\n  <li>You may not use the pre-existing shorthand character classes, such as <b>[:letter:]</b>, <b>[:uppercase:]</b>, or <b>[:digit:]</b>.</li>\r\n  <li>You may use line, column, and character counting if you wish, though it does not serve any purpose in this assignment.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Originally written by Alex Thornton, Winter 2004.</li>\r\n</ul>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}