{"url": "https://www.ics.uci.edu/~ejw/authoring/proposals/metadata.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n<html>\n  <head>\n    <title>A Proposal for Web Metadata Operations</title>\n  </head>\n\n  <body>\n      <h1>A Proposal for Web Metadata Operations</h1>\n\n      <P><I>Draft v0.1, April 29, 1997</I></P>\n\n      <h2>Abstract</h2>\n      \n      <P>This document provides rationale for why metadata support for\n      Web resources is desirable, gives a model for separating\n      existing metadata into small chunk and large chunk metadata,\n      lists requirements for how to manipulate Web metadata, and\n      provides a proposal which meets these requirements for how\n      metadata can be created, deleted, and queried on Web resources\n      using a set of extensions to the HTTP (version 1.1)\n      protocol.</P>\n\n      <h2>Introduction</h2>\n\n      <P>In its most abstract form, metadata is \"information about\n      information.\"  Information on the Web, known as Web resources,\n      have many pieces of associated descriptive information which is\n      often not explicitly represented in the resource itself.\n      Examples of metadata include the creator of a resource, its\n      subject, length, publisher, creation date, etc.  Such\n      descriptive metadata can be used to make information easier to\n      locate by improving Web searches [Weibel, 1995], rate\n      information to protect children from indecent content\n      (e.g. the Platform for Internet Content Selection (PICS) [Miller\n      et al., 1996]), capture copyright information, contain a digital\n      signature, or store cataloging data.  Many other uses are also\n      possible.</P>\n\n      <P>Another type of metadata is the relationship.  A relationship\n      captures an association between two or more resources, and can\n      be one to one, one to many, or many to many.  Relationships can\n      be used to capture navigational relationships, such as \"go to\n      this resource next,\" or a table of content, and can also express\n      hierarchies (parent/child, successor/predecessor) [Maloney, 1996]\n      Relationships have many domain-specific uses, such as a piece of\n      software which has many \"implements\" relationships with a\n      requirements document.  Annotations are another use of\n      relationships in which the relationship points to commentary\n      material on the resource.  The use of relationships to capture\n      associations between data items is an old idea, stemming from\n      semantic data modeling [Abrial, 1974][Hull & King, 1987], and\n      early hypertext work on the NLS [Engelbart, 1968] and Xanadu\n      [Nelson, 1981] systems.</P>\n\n      <h2>Characteristics of Metadata</h2>\n\n      <P>To date, there have been many techniques for describing metadata\n      information.  On the Web there have been many mechanisms and\n      proposals for metadata, including PICS [Miller et al., 1996],\n      PICS-NG, the Rel/Rev draft [Maloney, 1996], Web Collections, XML\n      linking, several proposals on representing relationships within\n      HTML, digital signature manifests (DCMF), and a position paper\n      on Web metadata architecture [Berners-Lee, 1997].  Related to the\n      Web, but coming from a digital library perspective, are the\n      Dublin Core [Weibel et al., 1995] metadata set and the\n      Warwick Framework [Lagoze, 1996], a container architecture for\n      different metadata schemas.   The literature on metadata\n      includes many examples of metadata, including MARC [MARC, 1994],\n      a bibliographic metadata format, RFC 1807 [Lasher, Cohen, 1995],\n      a technical report bibliographic format employed by the Dienst\n      system, and the proceedings from the first IEEE Metadata\n      conference describe many community-specific metadata sets.</P>\n\n      <P>Participants of the 1996 Metadata II Workshop in Warwick, UK\n      [Lagoze, 1996], noted that, \"new metadata sets will develop as\n      the networked infrastructure matures\" and \"different communities\n      will propose, design, and be responsible for different types of\n      metadata.\"  These observations can be corroborated by noting that\n      many community-specific sets of metadata already exist, and\n      there is significant motivation for the development of new forms\n      of metadata as many communities increasingly make their data\n      available in digital form, requiring a metadata format to assist\n      data location and cataloging.</P>\n\n      <P>Based on an examination of many Web metadata proposals, it\n      appears that Web metadata can be broadly characterized into two\n      categories, termed small chunk and large chunk.  These are\n      described below.</P>\n      \n      <h3>Small chunk metadata</h3>\n\n      <P>Small chunk metadata includes data items such as:</P>\n\n      <UL>\n\t<LI>HTTP headers\n        <LI>short attribute-value pairs\n        <LI>typed links (e.g. HTTP links, or binary relationships)\n      </UL>\n\n      <P>While developing a stringent definition of \"small\" is most\n      likely impossible, since the definition is arbitrary, and seems\n      to be based on unstated assumptions about retrieval performance\n      (e.g., retrieval of small chunk metadata should be \"trivially\"\n      or \"unnoticeably\" fast), much metadata has a small chunk flavor\n      to it.</P>\n\n      <P>Characteristics of small chunk metadata include: fast\n      retrieval speeds, no need for content negotiation, no\n      requirements on ordering, no need for \"trust\" information (e.g.,\n      digital signature, author information, hash of contents, date of\n      creation), and relatively simple value information.</P>\n\n      <h3>Large chunk metadata</h3>\n\n      <P>Large chunk metadata includes data items such as instances\n\tof:</P>\n\n      <UL>\n\t<LI>PICS, PICS-NG collections\n\t<LI>Warwick collections\n\t<LI>MARC records\n\t<LI>Dublin Core records\n\t<LI>discipline-specific metadata records\n\t<LI>Web pages (e.g., an annotation page)\n      </UL>\n\n      <P>Like the smallness of small chunk metadata, the largeness of\n      large chunk metadata is similarly difficult to define.\n      Characteristics of large chunk metadata include: requirements on\n      the ordering of fields, encoded trust information, pointers to\n      metadata schema descriptions, complex data models, and multiple\n      levels of containment.  Large chunk metadata often contains\n      several instances of small chunk metadata.  Typically large\n      chunk metadata is larger than small chunk metadata, although it\n      is easy to develop classes of both for which this assertion does\n      not hold.  As a result, there is an assumption that large chunk\n      metadata takes longer to transmit than small chunk metadata.\n      Large chunk metadata, when stored as a separate resource, has\n      the advantage that several different representations of the\n      information can be stored, such as translations into different\n      natural languages, and then used in content negotiation.</P>\n\n      <h3>Mapping of metadata to the Web data model</h3>\n\n      <P>The mapping of metadata to the various data containers\n      (resources, headers) in the Web data model varies depending on\n      whether the metadata is stored on, in, or as a resource.</P>\n\n      <P><I>On resource.</I> In this case, the metadata is stored with\n      the resource, but is not a part of the resource itself.\n      Examples include HTTP links, HTTP headers, PICS labels (using\n      the PICS-Label header).  On resource storage is typically used\n      for small chunk metadata, and on resource metadata is\n      retrievable after 1 network request (a HEAD or GET).</P>\n\n      <P><I>Within resource.</I> The metadata is embedded within the\n      resource, and is a defined part of the document type\n      description.  Examples include HTML REL/REV links, the HTML META\n      tag, various HTML metadata proposals, Microsoft Word .DOC\n      documents, and Web Collections.  Within resource metadata is\n      retrievable in 1 network request (GET).  Within resource\n      metadata has the advantage of being independent of access\n      protocol, and is portable (when the resource moves, it does\n      too).  Within resource metadata tends to be small chunk.</P>\n\n      <P><I>Is (whole) resource.</I> The metadata is itself an entire\n      resource.  When the metadata is an entire resource, there\n      usually exists a relationship (link) between the described and\n      metadata (describing) resources.  Examples include Web\n      Collections, Warwick containers, Web pages.  Typically\n      large-chunk metadata ends up as whole resource metadata, such as\n      the MIME encoding of Warwick containers described in [Knight,\n      Hamilton, 1996].  Typically retrieval of whole resource metadata\n      requires 2 network requests (one to get the links, one to get the\n      metadata).</P>\n\n      <h3>Consistency maintenance</h3>\n\n      <P>Many sources have noted that metadata can be viewed as an\n      assertion about the described data.  In this view of metadata,\n      an author attribute is viewed as an assertion that a particular\n      person is the author of the information being described.  Since\n      the Web is a client-server system, there are two points of\n      control over these assertions.  With client controlled (or user)\n      metadata, the consistency of the assertion is maintained by the\n      user.  Typically the server is unable to perform any validation\n      of client controlled (or maintained) metadata.  Alternately, the\n      server can control the consistency of metadata assertions; one\n      example is the last modified date of a resource.</P>\n      \n      <P>When metadata can be set by many different principals, as is\n      the case on the Web, it is desirable to have some way of\n      determining whether a particular assertion should be trusted.\n      Trust information is a prominent aspect of the PICS container\n      format, which contains a digital signature, contents hash,\n      author information, and a valid date range which can be used to\n      assess the trustworthiness of the assertions contained in the\n      package.</P>\n\t\n      <h2>Requirements for Operations on Web Metadata</h2>\n\n      <P>The following are the relevant requirements for operations on\n      Web metadata as specified in \"Requirements for Distributed\n      Authoring and Versioning\" [Slein et al., 1997].\n      \n      <P>[5.1.1] It must be possible to create, modify, query, read\n      and delete arbitrary attributes on resources of any media\n      type.</P>\n\n      <P>[5.2.1] It must be possible to create, modify, query, read\n      and delete typed relationships between resources of any media\n      type.</P>\n\n      <h2>Proposal for Metadata Operations</h2>\n\n      <P>In early WebDAV proposals [Goland et. al, 1996] all metadata was\n      whole resource metadata, with the exception of the links used to\n      hold the relationship between the described resource and the\n      metadata resource.  While this approach handles large-chunk\n      metadata well, it does have significant drawbacks for\n      maintaining the referential integrity between metadata and the\n      resource(s) it describes, especially when they are controlled by\n      different principals.  To ensure that metadata could be created\n      and retrieved in one method invocation, several convenience\n      functions were proposed which created a link and the metadata\n      resource in one action.  However, this led to difficulties in\n      specifying the operations due to atomicity problems, and would\n      be difficult to implement since a partial failure (e.g. link\n      created OK, but metadata resource creation failed) would require\n      rollback capability in the server.  Another significant drawback\n      to this approach is the difficulty of providing searches on the\n      value of the metadata.  While it was easy to propose a\n      full-featured search on the type space of the links to the\n      metadata, searches of the metadata itself quickly led to a\n      consideration of the full resource searching problem, and\n      difficult issues such as handling the wide range of natural\n      languages and media types of resources being searched. </P>\n\n\n\t<P>Another early draft, the Netscape proposal [Cunningham &\n\tFaizi, 1996], gives operations for setting and retrieving\n\tattribute-value pairs stored in an attribute sheet associated\n\twith the resource. While this approach provides basic support\n\tfor small chunk metadata, it lacks an attribute search\n\tmechanism, placing the burden of attribute searching on the\n\tclient.  It also has no support for large chunk metadata,\n\talthough this could be provided in a limited way by storing a\n\tURI pointer to large chunk metadata in the value of an\n\tattribute.\n      </P>\n\n      <P>Neither a pure whole resource metadata approach, nor a pure\n      on-resource approach is able to handle the range of current and\n      proposed Web metadata.  The whole resource approach has\n      referential integrity problems, and the on-resource approach\n      cannot handle the many large chunk metadata formats.  As a\n      result, the proposal in this document uses a mixed approach for\n      handling metadata, providing support for both on-resource, small\n      chunk metadata and whole resource, large chunk metadata.  This\n      mixed proposal provides operations for creating, deleting, and\n      querying attribute-value pairs stored on Web resources.  Simple\n      binary relationships are stored in \"Link\" metadata, which can\n      point to large chunk metadata resources.</P>\n\n      <P>The mixed proposal requires a modification to the object\n      model for HTTP/1.1 resources to provide a repository for\n      metadata state information in addition to the current\n      repositories of state within an HTTP resource: the body and\n      headers.  This new state information consists of attribute-value\n      pairs, in which the attribute's name is a URI, and the\n      attribute's value is an untyped octet stream.  URIs are used for\n      attribute names to provide a distributed, extensible name space\n      for attribute names.  URIs also have the capability, if\n      dereferenced, of providing descriptive information on the\n      syntax, semantics, and use of the attribute.</P>\n\n      <P>Disadvantages of storing metadata in the existing HTTP object\n      model lead to the desire to modify it.  While HTTP headers can and are used\n      for small chunk metadata, they have drawbacks for distributed\n      authoring.  Since users may potentially create the name of an\n      attribute, this raises the possibility of name collisions with\n      existing headers.  More importantly, since there could be\n      potentially many attributes stored on a resource, it is\n      important for network efficiency that these attributes not be\n      returned with every GET or HEAD request.  There are many\n      proposals for placing metadata inside a Web resource (e.g.,\n      placing a PICS record inside a resource), however, there is no\n      general way to define metadata in the body of resources of any\n      media type.  As a consequence, placing metadata in the body\n      would reduce metadata use to just a few specific resource media\n      types, limiting the general use of metadata.  Since metadata in\n      headers leads to network inefficiency, and metadata in bodies is\n      impossible to generalize across all media types, it is necessary\n      to add new state for attribute-value metadata to the HTTP/1.1\n      object model.</P>\n\n      <P>The sections below describe in detail new HTTP methods which\n      can be used to create (ADDMETA), delete (DELMETA), search and\n      retrieve (GETMETA) attribute-value metadata, including simple\n      bidirectional links.  All of these methods may return a message\n      body that contains a listing of attribute name/value pairs,\n      however, the syntax for how to package these name/value pairs\n      has intentionally not yet been specified.  It is hoped that one\n      of the Web metadata packaging proposals currently being\n      discussed (e.g., Web Collections or PICS-NG) will be useable as\n      the return format for WebDAV metadata methods. Until these\n      specifications have settled, it is premature to use them in a\n      specification. </P>\n\n      <h3>ADDMETA</h3>\n\n      <h4>Body</h4>\n\n<PRE>Body = *Pair\nPair = Name HT *Value CRLF\nName = URI\nValue = Octet-CRLF | (CRLF HT)\nOctet-CRLF = &lt;Octet excluding CRLF&gt;</PRE>\n\n      <H4>Explanation:</H4>\n\n      <P>The ADDMETA method is used to create one or more new\n      attribute-value pairs on the resource specified by the\n      Request-URI.  The body of the message MUST be of content type\n      text/tab-separated-values, containing a sequence of attribute\n      name/value pairs.  Each name/value pair consists of a URI\n      attribute name, followed by a TAB, followed by a stream of\n      octets which specify the attribute's value.  The value of the\n      attribute may extend over several lines in the body, each\n      extension line beginning with a TAB.  The name and value\n      uniquely define a metadata item; there may be multiple instances\n      of the same attribute name with different values, but only one\n      instance of a particular name/value pair.  When used as the name\n      of an attribute, the octets which comprise the URI are used to\n      determine its uniqueness; if two (or more) URIs have different\n      octet values, but are equivalent names for the same network\n      resource (e.g., http://foo.com/bar.html and\n      ftp://foo.com/bar.html), they are still considered to be\n      different attribute names.</P>\n\n      <P>The server MUST attempt to create all the included name/value\n      pairs. The return message body (TBD) will indicate which creation attempts\n      failed.</P>\n\n      <H4>Example:</H4>\n\n      <P>ADDMETA /foo.html HTTP/1.1<BR>\nHost: ics.uci.edu<BR>\nContent-Type: text/tab-separated-values<BR>\n<BR>\nhttp://www.purl.org/W3C/Dublin/Author<I>&lt;TAB&gt;</I>Jim Whitehead<BR>\nDAV:/LINK<I>&lt;TAB&gt;</I>Type = &quot;DAV:/VERSIONING/HISTORY&quot;<BR>\n<I>&lt;TAB&gt;</I> Source = &quot;http://ics.uci.edu/foo.html&quot;<BR>\n<I>&lt;TAB&gt;</I> Dest = &quot;http://ics.uci.edu/foo.html/version_history&quot;</P>\n\n      <H4>Response Codes</H4>\n\n      <P>200 OK indicates the server successfully created all of the\n\tname/value pairs described in the request body.</P>\n      \n      <P>A server may reject entries because they are not consistent\n      with the definition of the attribute. In that case a 406 Not\n      Acceptable should be returned.</P>\n\n      <P>Error conditions: empty body? Partial success/failure\n\t-- could not create one of the name/value pairs.</P>\n\n      <P>TBD: A response message body indicating which name/value\n\tpairs the server was unable to create.</P>\n\n      <h3>DELMETA</h3>\n\n      <h4>Body</h4>\n\n      <P>The body may either be of content type\n      text/tab-separated-values, using the syntax defined for the\n      ADDMETA body, or of content type application/dav-meta-search,\n      using the syntax defined for the GETMETA body. </P>\n\n      <h4>Explanation</h4>\n\n      <P>The DELMETA method is used to remove a name/value pair from\n      the resource specified by the Request-URI.  When the message\n      body is of content type text/tab-separated-values, the server\n      MUST remove any attribute name/value pair defined on the\n      resource which exactly matches a name/value pair specified in\n      the message body.</P>\n\n      <P>When the message body is of content type\n      application/dav-meta-search, the server MUST remove any\n      attribute name/value pair defined on the resource which\n      satisfies the search specification in the message body. If a\n      server implements the GETMETA and the DELMETA methods, it MUST\n      provide support for search specifications of content type\n      application/dav-meta-search, and MAY accept search\n      specifications in other formats and/or content types for the\n      DELMETA method.  All search formats accepted by GETMETA SHOULD\n      be accepted by DELMETA.</P>\n\n      <h4>Response Codes</h4>\n\n      <P>TBD -- need to reuse the response format from ADDMETA to\n\treturn the name/value pairs which were removed.</P>\n\n      <P>Error conditions: Syntax error in search syntax.</P>\n\n      <h3>GETMETA Method</h3>\n\n      <h4>Body</h4>\n\n<PRE>Search = &quot;(&quot; &quot;OR&quot; *And-Expr&quot;)&quot;\nAnd-Expr = &quot;(&quot; &quot;AND&quot; Name Value &quot;)&quot;\nName = &quot;(&quot; &quot;name&quot; search-pattern &quot;)&quot;\nValue = &quot;(&quot; &quot;value&quot; search-pattern &quot;)&quot;\nsearch-pattern = &lt;&quot;&gt;*(&quot;*&quot; | &quot;?&quot;\n         | SpecialOctet | escaped-octet) &lt;&quot;&gt;\nSpecialOctet = &lt;OCTET without &lt;&quot;&gt; or &quot;*&quot;\n        or &quot;?&quot;  or &quot;\\&quot;&gt;\nescaped-octet  = &quot;\\&quot; OCTET\n</PRE>\n\n      <h4>Explanation</h4>\n\n      <P>The GETMETA method returns all attribute name/value pairs\n      defined on the resource specified by the Request-URI which match\n      the search syntax specified in the message body. If a server\n      implements the GETMETA method, it MUST provide support for\n      search specifications of content type\n      application/dav-meta-search, and MAY accept search\n      specifications in other formats and/or content types.</P>\n\n      <h4>application/dav-meta-search media type</h4>\n\n      <P>The application/dav-meta-search media type uses a subset of\n      the s-expression syntax to specify an attribute search syntax.\n      Searches are a logical or of limited regular expression matching\n      of attribute name/value pairs.  Each name/value pair search is a\n      logical and of regular expression matching on the name and the\n      value of the attribute.  The &quot;*&quot; operator, which\n      matches any sequence of zero or more octets, and the\n      &quot;?&quot; operator, which matches a single octet, are the\n      only regular expression operators allowed.  If a search needs to\n      specify a literal &quot;*&quot; or &quot;?&quot;, these\n      characters are escaped using the slash &quot;/&quot; convention,\n      hence literal &quot;*&quot; is represented as &quot;/*&quot; and\n      literal &quot;?&quot; is represented as &quot;/?&quot;.</P>\n\n      <h4>Examples</h4>\n\n<PRE>GETMETA /foo.html HTTP/1.1\nHost: www.ics.uci.edu\nContent-Type: application/DAV-meta-search\n\n(OR (AND (name &quot;http://ydfh&quot;) (value &quot;*&quot;))\n    (AND (name &quot;foo:blah&quot;)(value &quot;*&quot;)))\n</PRE>\n\n<PRE>GETMETA /foo.html HTTP/1.1\nHost: www.ics.uci.edu\nContent-Type: application/DAV-meta-search\n\n(OR (AND (name &quot;*y?f*&quot;)(value &quot;*&quot;))\n    (AND (name &quot;f*?h&quot;)(value &quot;*&quot;))\n</PRE>\n\n      <P>Assuming that the metadata available on\n      http://www.ics.uci.edu/foo.html did not change between the requests,\n      the response to the second GETMETA request should, at a minimum,\n      include all the responses from the first GETMETA request.</P>\n\n<PRE>GETMETA /index.html HTTP/1.1\nHost: www.ics.uci.edu\nContent-Type: application/DAV-meta-search\n\n(OR (AND (name &quot;*&quot;)(value &quot;*&quot;)))\n</PRE>\n\n      <P>The server will return a list of all attribute name/value\n\tpairs defined on the resource http://www.ics.uci.edu/index.html.</P>\n      \n<PRE>GETMETA /index.html HTTP/1.1\nHost: www.ics.uci.edu\nContent-Type: application/DAV-meta-search\n\n(OR (AND (name &quot;DAV:/LINK&quot;)(value &quot;*&quot;)))\n</PRE>\n\n      <P>The server will return a list of all links defined on the\n\tresource http://www.ics.uci.edu/index.html.</P>\n\n      <h4>Response Codes</h4>\n\n      <P>The response format for matching name/value pairs is TBD.</P>\n\n      <P>Error conditions: syntax error in search syntax.  No matching\n      name/value pairs?</P>\n\n      <h2>Link Metadata Type</H2>\n\n<PRE>Link := linkname HT linkvalue\nlinkname := &quot;DAV:/Link&quot;\nlinkvalue := Type SP Source SP Destination *(SP link-extension)\nSource := &quot;Source&quot; &quot;=&quot; &lt;&quot;&gt; URI &lt;&quot;&gt;\nDestination := &quot;Dest&quot; &quot;=&quot; &lt;&quot;&gt; URI &lt;&quot;&gt;\nType := &quot;Type&quot; &quot;=&quot; &lt;&quot;&gt; URI &lt;&quot;&gt;\n\nlink-extension = token [&quot;=&quot; (token | quoted-string)]\n</PRE>\n\n      <P>A link can be viewed as a piece of metadata stored on a\n      resource, which can be stored in an attribute name/value pair.\n      The Link predefined metadata type provides a standard syntax for\n      expressing typed links with two endpoints.  By definition, the\n      name of a link attribute is &quot;DAV:/Link&quot; and the value\n      of the attribute is a triple consisting describes the link's\n      type, source, and destination, and potentially some extra\n      descriptive information.</P>\n\t\n      <P>When recoding a DAV:/Link attribute, a server is only\n      required to record the Source, Destination, and Type. It may\n      drop all other information in the attribute value field if it so\n      chooses. In addition a server MUST not record two links which\n      have the same source, destination, and type but differ on other\n      attributes.  A link is uniquely identified by the\n      source/destination/type triple.</P>\n\n      <P>Please note the use of &quot;:=&quot; in the BNF productions\n      above.  This means that white space is never implicit,\n\tsimplifying link search specifications.</P>\n\n      <h2>References</h2>\n\n      <P>[Abrial, 1974] J. R. Abrial, \"Data Semantics\", in\n      J. W. Klimbie and K. L. Koffeman eds., Data Base Management,\n      Proceedings of the IFIP Working Conference on Data Base\n      Management, Cargese, Corsica, France, April 1-5, 1974,\n      p. 1-60.</P>\n\n      <P>[<A HREF=\"http://www.w3.org/pub/WWW/DesignIssues/Metadata.html\">Berners-Lee, 1997</A>]\n\tT. Berners-Lee, \"Metadata Architecture.\"\n        Unpublished white paper, January 1997.  http://www.w3.org/pub/WWW/DesignIssues/Metadata.html</P>\n\n      <P>[<A HREF=\"http://www.ics.uci.edu/~ejw/authoring/ns_dav.html\">Cunningham & Faizi,\n1996</A>] J. Cunningham, A. Faizi, \"Distributed Authoring and\n\tVersioning Protocol\", version 0.1, unpublished manuscript,\n\tOctober, 1996. http://www.ics.uci.edu/~ejw/authoring/ns_dav.html</P>\n      \n      <P>[Engelbart, 1968] D. C. Engelbart and W. K. English. \"A\n      Research Center for Augmenting Human Intellect\" , AFIPS\n      <I>Proceedings of the Fall Joint Computer Conference</I> ,\n      1968. Vol. 33, Part 1, p. 395-420. Thompson Book Company,\n      Washington, D.C. 1968. </P>\n\n      <P>[<A HREF=\"http://www.ics.uci.edu/~ejw/authoring/draft-jensen-webdav-ext-01.txt\">Goland et. al, 1997</A>]  Y. Y. Goland, E. J. Whitehead,Jr.,\n\tA. Faizi, S. R. Carter, D. Jensen, \"Extensions for Distributed\n\tAuthoring and Versioning on the World Wide Web\" Internet\n\tdraft, work-in-progress. draft-jensen-webdav-ext-01,  ftp://ds.internic.net/internet-drafts/draft-jensen-webdav-ext-01.txt, </P>\n\n      <P>[Hull & King, 1987] R. Hull and R. King, \"Semantic Database\n      Modeling: Survey, Applications, and Research Issues\", ACM\n      Computing Surveys, Vol. 19., No. 3, September 1987,\n      p. 201-260.</P>\n\n      <P>[<A HREF=\"http://www.dlib.org/dlib/july96/lagoze/07lagoze.html\">Lagoze, 1996</A>]\n\tC. Lagoze, \"The Warwick Framework, A\n\tContainer Architecture for Diverse Sets of Metadata.\"  D-Lib\n\tMagazine, July/August, 1996.  http://www.dlib.org/dlib/july96/lagoze/07lagoze.html</P>\n      \n      <P>[<A HREF=\"ftp://ds.internic.net/rfc/rfc1807.txt\">Lasher, Cohen, 1995</A>] R. Lasher, D. Cohen, \"A Format for\n\tBibliographic Records,\" RFC 1807.  Stanford, Myricom. June, 1995.</P>\n\n      <P>[<A HREF=\"http://www.ics.uci.edu/~ejw/authoring/draft-ietf-html-relrev-00.txt\">Maloney, 1996</A>]  M. Maloney, \"Hypertext Links in HTML.\" Internet draft (expired), work-in-progress, January, 1996.</P>\n\n      <P>[MARC, 1994] Network Development and MARC Standards, Office,\n      ed. 1994.  \"USMARC Format for Bibliographic Data\", 1994.\n      Washington, DC: Cataloging Distribution Service, Library of\n      Congress.</P>\n      \n      <P>[<A HREF=\"http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html\">Miller\n      et.al., 1996</A>] J. Miller, T. Krauskopf, P. Resnick,\n      W. Treese, \"PICS Label Distribution Label Syntax and\n      Communication Protocols\" Version 1.1, W3C Recommendation\n      REC-PICS-labels-961031. http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html</P>\n\n      <P>[Nelson, 1981]  T. Nelson, \"Literary Machines.\" Swarthmore,\n\tPA, 1981.</P>\n\n      <P>[<A HREF=\"http://www.ics.uci.edu/~ejw/authoring/webdav-req-00.html\">Slein et al., 1997</A>]\n      J. A. Slein, F. Vitali, E. J. Whitehead, Jr., D. G. Durand,\n\t\"Requirements for Distributed Authoring and Versioning on the\n\tWorld Wide Web,\" Internet-draft, work-in-progress, draft-slein-www-dist-author-00.txt</P>\n\n      <P>[<A HREF=\"http://www.cnri.reston.va.us/home/dlib/July95/07weibel.html\">Weibel, 1995</A>]\n\tS. Weibel, \"Metadata: The Foundations of\n\tResource Description.\"  D-Lib Magazine, July, 1995. http://www.cnri.reston.va.us/home/dlib/July95/07weibel.html</P>\n\n      <P>[<A HREF=\"http://purl.oclc.org/metadata/dublin_core_report\">Weibel\n      et al., 1995</A>] S. Weibel, J. Godby, E. Miller, R. Daniel,\n      \"OCLC/NCSA Metadata Workshop Report.\"\n      http://purl.oclc.org/metadata/dublin_core_report</P>\n      \n      <hr>\n      <address><a href=\"mailto:ejw@fdr.ics.uci.edu\">Jim Whitehead</a></address>\n<!-- Created: Thu Apr 24 12:38:05 PDT 1997 -->\n<!-- hhmts start -->\nLast modified: Tue Apr 29 17:19:32 PDT \n<!-- hhmts end -->\n  </body>\n</html>\n", "encoding": "ascii"}