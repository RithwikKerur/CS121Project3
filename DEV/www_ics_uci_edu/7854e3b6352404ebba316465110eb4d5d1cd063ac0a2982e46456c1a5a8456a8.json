{"url": "https://www.ics.uci.edu/~willmlam/teaching/cs175_w12/Mancala/README.md", "content": "###Changelog\n- 01/18/2012: Added a version of Kalah using the pie rule (KalahPieGameState).\nRemoved \"winner\" fields from GameState classes.\n- 01/14/2012: Initial release.\n\n###About the Mancala Game Framework\n\nThis framework was adapted for Mancala by William Lam for the Winter 2012 \noffering of CS 175, taught by Max Welling. The code was originally designed \nfor Connect Four, provided by Alex Ihler.\n\n###Classes/Interfaces\n    MancalaGameState (abstract)\n    |- KalahGameState\n    |- OwareGameState\n    |- KalahPieGameState\n\nUse one of the subclasses to decide on the Mancala variant.\n\n\n    MancalaPlayer (interface)\n    |- random_Player\n    |- interactive_Player\n\nImplement the MancalaPlayer interface to create your AI routine. The \nname of your class should be formatted as YourClassName_Player.\n\n\n    TermGame\n\nTermGame provides an example of how to use MancalaGameState and \nMancalaPlayer. It uses reflection to instantiate the state and player classes \nbased on command line parameters. We will use a similar main class to \nthis to run the tournament.\n\n    Ex: java TermGame Kalah 4 interactive random\n    Set player 0 as the interactive player and player 1 as the random player, \n    playing the Kalah variant with 4 starting stones in each bucket.\n\nNote that for Oware, repeated states are possible in the game tree. Since \nwe cannot assume that two players will make a consensus to end the game, \nwe will leave this decision up to the user interface running the game. (It \nshould detect a sequence of repeated states and end the main execution loop, \nif so.)\n", "encoding": "ascii"}