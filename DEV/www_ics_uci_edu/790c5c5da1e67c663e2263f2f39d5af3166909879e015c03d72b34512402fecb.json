{"url": "https://www.ics.uci.edu/~thornton/inf43/CourseProject/Implementation/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course2.css\" type=\"text/css\" />\n\n<title>Informatics 43 Spring 2009, Course Project, Phase 3: Implementation</title>\n\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nInformatics 43 Spring 2009 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../CourseProject\">Course Project</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>Informatics 43 Spring 2009<br />\n   Course Project<br />\n   Phase 3: Implementation</p>\n\n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Wednesday, May 27, 9:00pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Background</p>\n\n<p>Now that your design of the Triple P Enrollment System (TPES) is completed, it's now time to try to implement it.  Of course, as we've talked about in lecture, up-front designs are rarely implementable without at least some changes; as you work on your implementation, it is not uncommon to discover that there are aspects of your design that are incomplete or incorrect, that things don't fit together the way you expected, that information you need in some class is missing, and that constraints arise that you hadn't planned for.  With experience, these kinds of mistakes become less common, especially if you reflect on how your implementations diverge from your designs and why.  This phase will encourage you to do that.</p>\n\n<p>As with your design, your implementation should ultimately be guided by the <a href=\"../Informatics43-Spring2009-OfficialRequirements.pdf\">Official Requirements Specification</a>, which lists all of the known requirements for TPES.  Only some of those requirements will be required, though you can take your implementation farther, if you'd like, with a modest amount of extra credit offered as a reward for your time.</p>\n\n<p>Additionally, as you do your work, you'll be encouraged to do at least some <i>unit testing</i>, by writing unit tests in Java using JUnit.  You will not be required to unit test all of your code, but I do want you to have the experience of at least doing some of it.</p>\n\n<p>To be fair, I should warn you that this phase will be quite a bit of work.  However, if you pace yourself and work on it steadily until the due date, I expect that you'll be able to finish it.  If you put it off until a few days before it's due, you may find it difficult to complete it.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The program</p>\n\n<p>Your program is required to implement all of the requirements that comprise Implementation Phase 1 in the <a href=\"../Informatics43-Spring2009-OfficialRequirements.pdf\">Official Requirements Specification</a>.  A modest amount of extra credit will be offered for covering requirements in Implementation Phases 2 and 3, with more extra credit offered for covering more of the requirements.  We'd prefer that you avoid Implementation Phase 4, since it involves additional software (e.g., a database engine) that is well beyond the scope of the work we're requiring.</p>\n\n<p>In general, you should use your design as a starting point for your work in this phase.  However, you are permitted to make changes as you discover that they're necessary; it is unlikely that you will be able to implement your design as-is.  Don't make these changes willy-nilly; as is discussed below, you'll need to let us know what changes you've made and why.</p>\n\n<p class=\"subtitle\">A note about working incrementally</p>\n\n<p>Incomplete programs that don't run will be viewed much more harshly than incomplete programs that run and address at least some requirements, since your customer will not be able to verify that any part of a non-running program is working.  Not finishing the implementation because you ran out of time is one thing; writing a program that can't run at all is quite another.</p>\n\n<p>Because of the importance of having a program that runs, I strongly suggest working on the program one or a few requirements at a time, getting those requirements implemented, tested, and working before moving on to subsequent requirements.  Each time you reach a stable point, where some subset of the requirements are working, <i>save a backup copy of the entire program</i>, along with a list of which requirements are working.  This way, if your subsequent work leads you to a problem that seems insurmountable, you can always go back to the way things were.  If you run out of time before you can finish your implementation, you can submit your last stable copy.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The unit tests</p>\n\n<p>During an implementation, unit tests are often written.  Unit tests focus on testing individual components (e.g., single classes, single methods, single algorithms) of a program out of context, verifying that they work on their own.  Note that the ability to test components out of context &mdash; without having to worry about the effect of other, related components &mdash; has an effect on the design of your classes; some designs are more testable than others.  We'll talk about this issue at some length in lecture.</p>\n\n<p>Requiring you to write unit tests for your entire implementation would place an enormous amount of work on your shoulders; instead, you are required to write unit tests for only the following two algorithms:</p>\n\n<ul>\n  <li>Determining whether a student is allowed to enroll in a course</li>\n  <li>Determining the effective capacity of a course</li>\n</ul>\n\n<p>Be sure that you're covering all of the interesting cases involved.  Neither of these algorithms requires a huge number of tests, but neither can be sufficiently tested with only one or two test cases either.</p>\n\n<p>You are welcome to write unit tests for any other part of your implementation, if you'd like; they can be especially effective for the trickier parts, where you would otherwise have to do a lot of manual testing.  (Unit tests can seem like a lot of work, but when compared to the work of testing the program in its entirely, their difficulty is often overrated.)  However, no additional unit tests are required.</p>\n\n<p>Your unit tests must be written to be compatible with JUnit 4, as it is supported in Eclipse Classic 3.4.2, which is available at <a href=\"http://www.eclipse.org/downloads/\">this link</a>.  All of your unit test classes (i.e., classes containing JUnit unit tests) should have a name ending in the word <b>Test</b> (e.g., StudentEnrollmentTest), so that they can be easily distinguished from the other classes that comprise your program.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Reflecting on your implementation</p>\n\n<p>As you work on your implementation, maintain a list of the places where your implementation differed from your design (e.g., a method you included in your design ended up in a different class, a method needed an additional parameter than your design specified, a class in your design was split into more than one class in your implementation, etc.).</p>\n\n<p>When you've completed your implementation, write a short document that will apprise your customer of your progress.  Your document should address the following questions:</p>\n\n<ul>\n  <li>What class contains the main( ) method that we should call in order to run your program?  Does the program take any command-line arguments?  If so, what are they?  (Command-line arguments aren't required, but if you use them, we need to know about them so that we can run your program.)</li>\n  <li>What parts of the implementation did you finish?  In particular, which official requirements does your implementation address?  Did you address any requirements beyond those included in Implementation Phase 1?</li>\n  <li>What parts of the implementation did you not finish?  In particular, are there any official requirements in Implementation Phase 1 that you did not implement?  Are there any known bugs?</li>\n  <li>List the changes that you made to your design while implementing it.  For each change, give a brief justification of why the change was necessary.</li>\n</ul>\n\n<p>Be sure to save some time to write this document before you submit this phase.  Note that the document does not need to be long in order to adequately address the questions asked, so don't worry that this will become an overwhelming part of the assignment.  The more notes you keep as you work &mdash; especially regarding design elements changed, requirements addressed, and bugs found &mdash; the easier this part will be.  (You may opt to write this document piecemeal as you implement your program; that's fine, too.)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Development environment</p>\n\n<p>You are permitted to use any development environment you'd like &mdash; from a text editor and a command-line compiler at one extreme to a full-featured development environment like Eclipse or NetBeans at the other.  Whatever environment you use, you should write only standard Java, which can be compiled and run on Java SE 6; your program should not require an environment like Eclipse or non-standard libraries or extensions (other than JUnit, which you'll need for your unit tests).</p>\n\n<p>I suggest Eclipse Classic 3.4.2, which is available at <a href=\"http://www.eclipse.org/downloads/\">this link</a>.  If you choose to use Eclipse, you might find the following preconfigured workspace of use:</p>\n\n<ul>\n  <li><a href=\"43Workspace.zip\">Informatics 43 Eclipse workspace</a></li>\n</ul>\n\n<p>When we grade your work, we will be using Eclipse Classic 3.4.2 and the Informatics 43 Eclipse workspace.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>You are required to submit the following deliverables:</p>\n\n<ul>\n  <li>A zip archive containing all of the <b>.java</b> files that comprise your program and unit tests.  If you used Java packages (which are not required), the files should be arranged in a folder hierarchy that matches your package hierarchy.  Do not include <b>.class</b> files or other files generated by your development environment.  Make sure that your unit tests are all written in Java classes whose names end in the word <b>Test</b>, so that we can distinguish them from the others.</li>\n  <li>Your document reflecting on your implementation, which must be a single document in one of the following formats: Microsoft Word (.doc or .docx), Rich Text Format (.rtf), or PDF (.pdf).</li>\n</ul>\n\n<p>Follow <a href=\"../SubmittingPhases.html\">this link</a> for a discussion of how to submit files via Checkmate, an ICS-built online assignment submission system.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the specification that you want graded.  We won't regrade your work simply because you submitted the wrong version accidentally.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Originally written by Alex Thornton, Spring 2009.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}