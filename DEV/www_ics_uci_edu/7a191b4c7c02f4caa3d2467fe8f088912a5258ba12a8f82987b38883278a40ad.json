{"url": "https://www.ics.uci.edu/~eppstein/junkyard/polyomino-inclusion.html", "content": "<HR><PRE>\n<B>From:</B>           Yann DAVID &lt;<A HREF=\"mailto:100552.1400@CompuServe.COM\">100552.1400@CompuServe.COM</A>&gt;\n<B>Date:</B>           5 Jan 1997 19:20:19 GMT\n<B>Newsgroups:</B>     comp.theory,rec.puzzles,sci.logic,sci.math\n<B>Subject:</B>        Polymino inclusion problem\n</PRE><HR><PRE>\nHello.\n\nProblem: given a finite family of polyminoes (of any sizes), is the set\nof the polyminoes that do NOT contain any member of the family finite\nor infinite?\n\nNB:\n- polyminoes are those geomatrical figures obtained by sticking some\n  squares together along their sides (so as to come up with a connex\n  result);\n- a polymino A is said to contain a polymino B if one can cover an\n  instance of B with an instance of A; in other words, one can get a 'B'\n  by chopping off some squares from a 'A'.\n\nMy question is: what is the status of the above problem? That is, is there\nany general solution to it? If not, is the problem [known to be]\nundecidable? If yes, what is its complexity?\n\nThe problem was suggested by \"Winning Ways\" (Berlekamp, Conway &amp; Guy),\nvolume 2, page 684 -they exhibit a finite family of polyminoes that\nare distinguished by the fact that they do not contain any member of \nanother finite family of poliminoes.\n\nAll I have found out so far is the pretty obvious fact that the set of\nthe polyminoes which do not contain any instance of the \"target\" family\nis finite if and only if there is a generation of polyminoes (all the\npolyminoes of a given size) such that every member of the generation\ncontains at least one member of the family. All subsequent generations\nshare, of course, the same property. The problem can then be restated\nin terms of finding the order of a \"critic\" generation, given a target\nfamily (one would have \"only\" to test every member of the critic generation\n- does it contain any member of the target family? that question is NOT\ndifficult - so as to decide whether the non-containing set is finite or\nnot.\n\nNotice that the reverse problem is quite entertaining too: given a finite\nfamily of poliminoes, is there any other finite family such that the first\none is the family of all those that do not contain any member of the\nsecond one?\n\nHave fun! All suggestions, clues, hints, remarks, references &amp; solutions\nare welcome.\n\nBest regards,\n\n\tYann David\n\t<A HREF=\"mailto:100552.1400@compuserve.com\">100552.1400@compuserve.com</A>\n\tFRANCE\n\nNB: Since I am not a regular reader of this newsgroup,\nplease e-mail your answers; I'll post a summary of the interesting\nones (if any! :).\n\n\"Vous mariez pas, les filles!\" - Boris Vian\n</PRE><HR><PRE>\n<B>From:</B>           Yann DAVID &lt;<A HREF=\"mailto:100552.1400@CompuServe.COM\">100552.1400@CompuServe.COM</A>&gt;\n<B>Date:</B>           31 Jan 1997 20:09:45 GMT\n<B>Newsgroups:</B>     comp.theory,rec.puzzles,sci.logic,sci.math\n<B>Subject:</B>        POLYOMINOES EXCLUSION SET - ANSWERS\n</PRE><HR><PRE>\nHello.\n\nHere are the answers I received in response to my post about\npolyominoes excluding a finite set of polyominoes (are there\nfinitely or infinitely many of them?). We did not come up\nwith any definite solution, but there were some very interesting\nhints towards a plausible solution.\n\nHere goes:\n\nOriginal post:\n\nProblem: given a finite family of polyminoes (of any sizes), is the set\nof the polyminoes that do NOT contain any member of the family finite\nor infinite?\n\nNB:\n- polyminoes are those geomatrical figures obtained by sticking some\n  squares together along their sides (so as to come up with a connex\n  result);\n- a polymino A is said to contain a polymino B if one can cover an\n  instance of B with an instance of A; in other words, one can get a 'B'\n  by chopping off some squares from a 'A'.\n\nMy question is: what is the status of the above problem? That is, is there\nany general solution to it? If not, is the problem [known to be]\nundecidable? If yes, what is its complexity?\n\nThe problem was suggested by \"Winning Ways\" (Berlekamp, Conway &amp; Guy),\nvolume 2, page 684 -they exhibit a finite family of polyminoes that\nare distinguished by the fact that they do not contain any member of \nanother finite family of poliminoes.\n\nAll I have found out so far is the pretty obvious fact that the set of\nthe polyminoes which do not contain any instance of the \"target\" family\nis finite if and only if there is a generation of polyminoes (all the\npolyminoes of a given size) such that every member of the generation\ncontains at least one member of the family. All subsequent generations\nshare, of course, the same property. The problem can then be restated\nin terms of finding the order of a \"critic\" generation, given a target\nfamily (one would have \"only\" to test every member of the critic generation\n- does it contain any member of the target family? that question is NOT\ndifficult - so as to decide whether the non-containing set is finite or\nnot.\n\nNotice that the reverse problem is quite entertaining too: given a finite\nfamily of poliminoes, is there any other finite family such that the first\none is the family of all those that do not contain any member of the\nsecond one?\n\nWei-Hwa Huang wrote:\n\n(1st message)\n&gt;I don't know about the the problem, but if it is true, it would sound\n&gt;very similar to Sylvester's Theorem and make a darned good variation\n&gt;of Sylver Coinage. \n\n(2nd message)\n&gt;Sylvester's Theorem (in this case; he had a lot of other theorems)\n&gt;says that given any two relatively prime positive integers, only\n&gt;a finite number of positive integers cannot be expressed as a sum\n&gt;of non-negative multiples of these two integers.\n&gt;\n&gt;For instance, all integers greater than 100 can be expressed as\n&gt;some non-negative multiple of 9 plus some non-negative multiple of\n&gt;10.\n&gt;\n&gt;In Winning Ways the game Sylver Coinage is introduced; basically,\n&gt;two people alternate saying positive integers, where you cannot say any \n&gt;integers that can be expressed as a sum of non-negative multiples of\n&gt;all the integers previously said.  \n&gt;\n&gt;The person who says 1 loses.\n&gt;\n&gt;You can see the similarity between your game and Sylver Coinage, I hope.\n\nDan Hoey wrote:\t\n\n&gt;The word \"polyomino\" is the more widely-used term, or \"n-omino\" for\n&gt;what you call \"generation n\".\n&gt;\n&gt;I haven't heard of your problem before, even of it being posed.  I'll\n&gt;have a look at _Winning Ways_.  Do you know of any other references?\n\nI answered:\n\nYou won't find a clear statement of that problem in _Winning Ways_,\nit is just hinted at there. I don't know of any other reference, but\nsuch a simple problem must have been posed in some book or article\nalready.\n\nHe wrote:\n\n&gt;Now that I've looked it up, I see.  One thing I see is that the\n&gt;problem is very close to the \"unavoidable subgraph\" problem that was\n&gt;used in solving the four-color theorem.  We ask whether given a finite\n&gt;set of graphs H and an infinite set of graphs G, whether all but\n&gt;finitely many elements of G have an element of H as subgraph.  In that\n&gt;general setting, I'm almost certain it's undecidable.  I don't know if\n&gt;there's any way to make it easier by using the fact that G is a\n&gt;representation of the polyominoes.\n&gt;\n&gt;While looking it up, I ran across the Sprouts discussion, and the\n&gt;FTOZOM.  It looks surprisingly like another instance of the same\n&gt;problem.\n\nDavid Moews made, in my opinion, the most interesting contribution. He wrote:\n\n&gt;Given any polyomino P, let G(P) be the (connected) graph obtained from P\n&gt;by placing a vertex at each square of P and joining two vertices iff their\n&gt;squares are neighboring.  Call P a snake if G(P) is a path.  Now we can\n&gt;restrict our attention to snakes, in the sense that \n&gt;\n&gt;   given a family S, the set of polyominoes not containing any member of S \n&gt;   is finite iff the set of snakes not containing any snake member of S is \n&gt;   finite.\n&gt;\n&gt;The left-to-right implication is obvious, since no snake can contain a\n&gt;non-snake.  For the right-to-left implication, if there are infinitely\n&gt;many polyominoes not containing any member of S, then there must be\n&gt;polyominoes of arbitrarily large size not containing any member of S,\n&gt;and we can trim these polyominoes down to arbitrarily long snakes which\n&gt;cannot contain any snake member of S.\n&gt;\n&gt;We can code snakes by strings: e.g., given a snake\n&gt;\n&gt;                      ***\n&gt;                    *** **\n&gt;                    *\n&gt;\n&gt;we can code it as *AB*CD*CD*AB*CD*CD*BA*CD*, writing a * for each square, AB\n&gt;for a move up, BA for a move down, CD for a move right, and DC for a move\n&gt;left.  With this code each snake has exactly 2 representations which are\n&gt;reversals of each other (depending on which end you start from,) and snake \n&gt;X contains snake Y just when Y's string is a substring of X's string or the\n&gt;reversal of X's string.  Unfortunately this does not reduce the problem to \n&gt;the corresponding problem about strings (which would be decidable) because \n&gt;there are many strings which look very much like snakes but are not, owing to \n&gt;self-intersection, e.g., *AB*AB*CD*CD*BA*BA*DC*DC*.\n&gt;\n&gt;\n&gt;|...\n&gt;|Notice that the reverse problem is quite entertaining too: given a finite\n&gt;|family of poliminoes, is there any other finite family such that the first\n&gt;|one is the family of all those that do not contain any member of the\n&gt;|second one?\n&gt;\n&gt;Obviously, the first family has to be closed under downwards inclusion.\n&gt;Given that it is, and that the maximal order of polyomino present in the\n&gt;first family is N, we can let the second set contain all polyominoes of\n&gt;order &lt;=N+1 not present in the first.\n&gt;-- \n\nAs I asked why the string problem he stated was decidable, he answered:\n\n&gt;If we have a set S of strings over some alphabet, e.g., {ABC, CCC, CB}\n&gt;over the alphabet {A, B, C}, it's easy to write down a regular expression\n&gt;that recognizes all strings containing some member of S (in this case,\n&gt;\n&gt;      ((A|B|C)*ABC(A|B|C)*)|((A|B|C)*CCC(A|B|C)*)|((A|B|C)*CB(A|B|C)*).)\n&gt;\n&gt;Now it's known that the languages recognized by regular expressions are the\n&gt;same (and in fact, effectively the same) as those recognized by finite\n&gt;automata; but it's easy to complement the language recognized by a finite \n&gt;automaton (just complement the set of accepting states.)  Hence we can also \n&gt;write down a regular expression that recognizes the set of all strings not \n&gt;containing some member of S.  Then all we have to do is decide whether this \n&gt;expression recognizes infinitely many strings.  This is easy since it \n&gt;recognizes infinitely many strings iff it contains a nonempty expression \n&gt;followed by *.\n&gt;\n&gt;An alternate proof: let the maximal word length occurring in S be m.\n&gt;Start at the empty word, and begin producing a tree of words not containing \n&gt;any member of S by adding all possible characters at the end of the word.  \n&gt;If the set of words excluding S is finite, we will eventually stop and realize \n&gt;this.  If not, a node W will eventually occur in the tree such that an ancestor\n&gt;V of W has the same last m characters as V.  Then if we write W=VQ,\n&gt;{V, W=VQ, VQQ, VQQQ, VQQQQ, ...} is an infinite set of words excluding S.\n&gt;\n&gt;I am sure there are much better algorithms available. \n\nI first thought his second algorithm was transposable to polyominoes:\n\nIt looks to me like your tree algorithm for strings works just fine\nwhen applied to snakes, resorting to some string representation of\nthem - the one you introduced, or more simply we can denote the moves \nby E, N, W, S and the nodes by *. When examining whether a snake (A)\ncontains another one (B), we have to take into account several\nrepresentations of B - depending on the geometrical transformations\nthat map a snake onto an equivalent one (we may retain translations\nand/or rotations and/or reflexions), and for each position there are\ntwo descriptions, one starting at each end of the snake. The same\ntransformations should be considered while developping the snake\ntree :) Anyway, these are only details which are easily managed, my\npoint is that the key idea of the algorithm remains valid; in short:\ndevelopping the tree until it can't be developped any more - it is\nfinite - OR we run accross some node w such that w=vquq and vq is an\nancestor of w and the length of q is the same as that of the longest\nsnake in the family. Therefore we're left with yet another complexity\nproblem.\n\nWhat do you think?\n\nDavid Moews answered:\n\n&gt;I agree that congruences changing the string representation of a snake\n&gt;pose no problem (I did not mention these earlier because I was not sure\n&gt;whether you were considering a polyomino as containing congruent images\n&gt;of its subpolyominoes or not.)  Unfortunately there is a larger problem,\n&gt;because of the fact that some strings which seem to represent snakes\n&gt;in fact self-intersect.  For example, suppose we wish to find all snakes not\n&gt;containing any polyomino congruent to a member of the following set S:\n&gt;\n&gt; **    *\n&gt;**     ***     ****\n&gt;         *\n&gt;\n&gt;There are infinitely many strings not containing the string representation of\n&gt;these snakes: in fact, any initial segment of\n&gt;\n&gt;*E*E*N*N*W*W*S*S*E*E*N*N*W*W*S*S*E*E*N*N*W*W*S*S*....   (to use your notation)\n&gt;\n&gt;is OK.  However, these strings do not correspond to infinitely many snakes, \n&gt;because unless an initial segment of the above string is sufficiently short, \n&gt;it self-overlaps, so, in fact, the only snakes avoiding S are subpolyominoes of\n&gt;\n&gt;***\n&gt;* *\n&gt;***   .  For a more difficult example, take S' to be\n&gt;\n&gt; **    *      *\n&gt;**     ***    ****    *****        ;\n&gt;         *       *\n&gt;\n&gt;then any string of the form \n&gt;\n&gt;(*E)^a (*N)^b (*W)^c (*S)^d (*E)^e (*N)^f ...     (a,b,c,d,e,f,... in {2,3})\n&gt;\n&gt;would seem to be OK (where (T)^i denotes i repetitions of the string T),\n&gt;but again there are only finitely many snakes avoiding S'.\n&gt;--\n\nI answered:\n\nI think we are left with two main problems:\n\n1)  Designing an algorithm to find out whether, given a polymino P, a node n on P, and a snake S, we can attach a infinite series of instances of S to n which has got n as only intersection with P;\n\n2) Proving that, if there are infinitely many polyminos avoiding the target set, then there are two snakes V and Q such that the polyminos {V, VQ, VQQ...} are indeed snakes avoiding the target family.\n\nGiven an excluding snake W ending with the same last n moves as one of its ancestor V (W=VQ), we could check whether {VQ, VQQ, VQQQ...}, is a set of snakes, thanks to 1);\n2) would garantee that we would eventually stumble against a proper (V, Q) pair whenever the avoiding set would be infinite.\n\nNow, 1) looks pretty easy : \na) check whether {S, SS, SSS...} are valid snakes : they are iff SS is a snake;\nb) (if a) holds) consider PS, PSS, PSSS... until you obtained a intersection OR the [city block] distance of each node of the (n+1)th instance to each node of P is bigger than that of its counterpart in the nth instance to the same node of P (I hope that makes sense :) .\n\nBut 2) is just a personal guess... Maybe an infinite excluding set can have some sort of an odd \"spiral\" structure ?\n\nThat's all folks! I know it's been a bit lengthy, but if You have found\nit inspiring anyway, don't hesitate to send me your suggestions. \n\nCheers,\n\n\tYann David\n\t<A HREF=\"mailto:100552.1400@compuserve.com\">100552.1400@compuserve.com</A>\n\tFRANCE\n\nNB: Since I am not a regular reader of this newsgroup,\nplease e-mail your answers; I'll post a summary of the interesting\nones (if any! :).\n\n\"Vous mariez pas, les filles!\" - Boris Vian\n</PRE>\n", "encoding": "ascii"}