{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node71.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Compiler Pragmas</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Compiler Pragmas\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html3104 HREF=\"node72.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html3102 HREF=\"node63.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html3096 HREF=\"node70.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html3106 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html3105 HREF=\"node72.html\"> Writing Efficient Code</A>\r\n<B>Up:</B> <A NAME=tex2html3103 HREF=\"node63.html\"> The Compiler</A>\r\n<B> Previous:</B> <A NAME=tex2html3097 HREF=\"node70.html\"> Mode Declarations</A>\r\n<BR> <HR> <P>\r\n<H1><A NAME=SECTION00680000000000000000> Compiler Pragmas</A></H1>\r\n<P>\r\n<A NAME=1012>&#160;</A>\r\nCompiler pragmas are compiler directives which instruct the compiler\r\nto emit a particular code type.\r\nTheir syntax is similar to directives:\r\n<blockquote> <PRE>:- pragma(Option).\r\n</PRE>\r\n</blockquote>\r\nIt is not possible to have several pragmas grouped together and separated\r\nby commas like goals, every pragma must be specified separately.\r\n<i> Option</i> can be one of the following:\r\n<UL><LI> <b> debug</b> - generate code which can be inspected with the\r\ndebugger, similarly to setting the global flag <tt> debug_compile</tt> to <tt> on</tt>.\r\nIt also implies the <b> noexpand</b> pragma.\r\n<P>\r\n<LI> <b> nodebug</b> - generate optimized code with no debugger support,\r\nsimilarly to setting the global flag <tt> debug_compile</tt> to <tt> off</tt>.\r\nIt also implies the <b> expand</b> pragma.\r\n<P>\r\n<LI> <b> silent_debug</b> - generate code which cannot be inspected\r\nby the debugger, but which allows to debug predicates called\r\nby it.\r\nThis is similar to setting the <tt> leash</tt> flag\r\nof all subgoals in the following clauses\r\nto <tt> notrace</tt>.\r\nThis option is useful e.g. for library predicates which call other\r\nProlog predicates: the user wants to see in the debugger the\r\ncall to the library predicate and to the invoked predicate,\r\nbut no internal calls in the library predicates.\r\n<P>\r\n<LI> <b> expand</b> - do in-line expansion of some subgoals,\r\nlike <b>=</b>/2, <b> is/2</b> and others.\r\nThis code can still be inspected with the debugger but the expanded\r\nsubgoals look differently than in the normal debugged code,\r\nor their arguments cannot be seen.\r\nIn-line expansion is also done when the global flag <b> debug_compile</b>\r\nis <tt> off</tt>, or when the pragma <b> nodebug</b> is specified.\r\n<P>\r\n<LI> <b> noexpand</b> - inhibit the in-line goal expansion.\r\nThis is also done in the pragma <b> debug</b>.\r\n<P>\r\n<LI> <b> skip</b> - set the <tt> skip</tt> flag of all following\r\npredicates to <tt> on</tt>.\r\n<P>\r\n<LI> <b> noskip</b> - set the <tt> skip</tt> flag of all following\r\npredicates to <tt> off</tt>.\r\n<P>\r\n<LI> <b> system</b> - set the <tt> type</tt> flag of all following\r\npredicates to <tt> built_in</tt>.\r\nMoreover, all following predicates will have unspecified\r\n<tt> source_file</tt> and <tt> source_line</tt> flags.\r\n</UL>\r\nBy default, the compiler works as if the pragmas <b> debug</b>, <b> noexpand</b>\r\nand <b> noskip</b> were specified.\r\n<P>\r\nThe pragma is active from its specification in the file\r\nuntil the file end or until it is disabled by another pragma.\r\nRecursive compilations or calls to other compiling predicates\r\nare not affected by the pragma.\r\nPragmas which have the same effect as global flags override\r\nthe global flags if they specify more optimized code.\r\nFor instance, the pragma <b> debug</b> has no effect if the\r\nglobal flag <tt> debug_compile</tt> is <tt> off</tt>,\r\nbut the pragma <b> nodebug</b> overrides the global\r\nflag <tt> debug_compile</tt> being <tt> on</tt>.\r\n<P>\r\nThe pragmas are  useful mainly for libraries and other programs\r\nthat should be always compiled in a particular mode\r\nindependently of the global flags setting.\r\n<P>\r\n<BR> <HR><A NAME=tex2html3104 HREF=\"node72.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html3102 HREF=\"node63.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html3096 HREF=\"node70.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html3106 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html3105 HREF=\"node72.html\"> Writing Efficient Code</A>\r\n<B>Up:</B> <A NAME=tex2html3103 HREF=\"node63.html\"> The Compiler</A>\r\n<B> Previous:</B> <A NAME=tex2html3097 HREF=\"node70.html\"> Mode Declarations</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}