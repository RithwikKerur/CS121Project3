{"url": "https://www.ics.uci.edu/~pattis/common/handouts/macmingweclipse/allexperimental/mac-gdb-install.html", "content": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<title>ICS 46: GDB Installation on Mac OS X</title>\r\n<style>\r\nbody {\r\n  font: 16px/25px Charter, Georgia, serif;\r\n  color: rgb(60, 60, 60);\r\n  background-color: white;\r\n  width: 605px;\r\n  margin: 0 auto;\r\n}\r\nh1, h2, h3, h4, h5, h6 { margin: 2ex 0 -0.5ex 0; }\r\nh1 { font-size: 170%; }\r\nh2 { font-size: 130%; }\r\nh3 { font-size: 110%; }\r\np { margin: 1.5ex 0 1.5ex 0; }\r\nq { display: inline; font-style: italic; }\r\nq::before { content: \"\u201c\"; }\r\nq::after { content: \"\u201d\"; }\r\ncode, samp, pre {\r\n  white-space: nowrap;\r\n  font: 12px/18px Menlo, Consolas, monospace;\r\n  background-color: rgb(250, 250, 250);\r\n  border: 1px solid rgb(205, 205, 205);\r\n  padding: 1px 3px 1px 3px;\r\n  border-radius: 3px;\r\n}\r\nspan.menu { font: 15px/23px -apple-system, '.SFNSDisplay-Regular', 'Helvetica Neue', Helvetica, Verdana, sans-serif; }\r\nspan.menu>br { content: \"\"; }\r\nspan.menu>br::before { content: \"\\a0\u25b8 \"; }\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<h1>GDB Installation on Mac OS\u00a0X</h1>\r\n<p>\r\nIf you work on a\u00a0Mac OS\u00a0X\u00a010.9 Mavericks or later, you will run into\r\nthe problem of Eclipse refusing to interactively debug problems that\r\notherwise build and run fine:\r\nAn\u00a0attempt to start a\u00a0debugging session by selecting\r\n<span class=\"menu\">Run<br>Debug</span>\r\nfrom the menu will result in Eclipse complaining that an\r\n<q>Error with command: gdb\u00a0--version</q>\r\nhas occurred.\r\n</p><p>\r\nThe problem is caused by Apple switching away from GDB, the GNU\r\ndebugger, to LLDB, the LLVM debugger, in their Xcode toolchain (along\r\nwith the transition from GCC to Clang). Unfortunately, Eclipse is not\r\ncapable of communicating with any debugger other than GDB (yet).\r\nHere is a\u00a0step-by-step guide for installing and configuring GDB.\r\n</p>\r\n\r\n<h2 id=\"install\">Installing GDB</h2>\r\n<p>\r\nAs with GCC, the easiest way to install GDB is through Homebrew.\r\nIn\u00a0a\u00a0Terminal window, run the command\r\n<code>brew install gdb</code>,\r\nand wait for it to complete.\r\n(As usual, it may ask for your password.)\r\n</p><p>\r\nNow, we need to code-sign the GDB executable, so it will be allowed to\r\ncontrol other processes, as necessary for a\u00a0debugger.\r\nFor that, we will first create a\u00a0new certificate in Keychain.\r\n</p>\r\n\r\n<h2 id=\"cert\">Creating a Certificate</h2>\r\n<p>\r\nOpen the Keychain Access application (can be found in\r\nApplications/Utilities directory or through Spotlight).\r\nSelect <span class=\"menu\">Certificate Assistant<br>\r\nCreate a\u00a0Certificate</span> in the application menu\r\n(<span class=\"menu\">Keychain Access</span>).\r\nAn\u00a0assistant window will appear for guiding you through the process.\r\n</p>\r\n<ol>\r\n<li>\r\nFirst, you will be asked for the name and type of the certificate.\r\nYou may choose the name arbitrarily, but to simplify its future use in\r\ncommand line, prefer names without spaces or other fancy characters,\r\ne.g.,\u00a0<code>gdbcert</code>.\r\n</li><li>\r\nMake sure that <span class=\"menu\">Identity Type</span>\r\nis set to <span class=\"menu\">Self Signed Root</span>,\r\nchange <span class=\"menu\">Certificate Type</span>\r\nto\u00a0<span class=\"menu\">Code Signing</span>,\r\ncheck the <span class=\"menu\">Let me override defaults</span>\r\ncheckbox, and click <span class=\"menu\">Continue</span>.\r\nClick <span class=\"menu\">Continue</span> again in the popup\r\nprompt warning about the certificate being self-signed.\r\n</li><li>\r\nOn the next page, leave <span class=\"menu\">Security Number</span>\r\nto be\u00a01, and set <span class=\"menu\">Validity Period</span>\r\nto a\u00a0large enough number of days to cover the duration of the class\r\nor more, say,\u00a0365.\r\n(Certificates cannot last forever; the maximum validity period\r\nis 20\u00a0years.)\r\n</li><li>\r\nThen click <span class=\"menu\">Continue</span> once again, and keep\r\ndoing so to skip the next six screens until you see the one entitled\r\n<span class=\"menu\">Specify a\u00a0Location For The\u00a0Certificate</span>.\r\nFor the only property, <span class=\"menu\">Keychain</span>, choose\r\n<span class=\"menu\">System</span> from the drop-down list.\r\nLastly, click <span class=\"menu\">Create</span>, type in your\r\npassword, if prompted, and click <span class=\"menu\">Done</span>.\r\n</li><li>\r\nBack in the main window, choose the <span class=\"menu\">System</span>\r\nkeychain in the sidebar on the left, and select the newly created\r\ncertificate from the list.\r\nOpen the context menu and select\r\n<span class=\"menu\">Get\u00a0Info</span>.\r\nIn the information window that will appear, expand the\r\n<span class=\"menu\">Trust</span> section and set the\r\n<span class=\"menu\">Code\u00a0Signing</span> property to\r\n<span class=\"menu\">Always Trust</span>.\r\nClose this window (you may be asked for your password),\r\nand quit Keychain Access.\r\n</li>\r\n</ol>\r\n\r\n<h2 id=\"sign\">Signing GDB</h2>\r\n<p>\r\nOur new certificate is now ready to be used.\r\nIn order to make it immediately available for signing, we need to\r\nrestart the Taskgate access-control service.\r\nYou can use Activity Monitor to do this (also found in\r\nApplications/Utilities).\r\nOpen it and filter the list of processes by typing\r\n<code>taskgated</code> in the search field in the toolbar.\r\n(If\u00a0you cannot find it, make sure the menu item <span\r\nclass=\"menu\">View<br>All\u00a0Processes</span> is checked.)\r\n</p><p>\r\nThere should be exactly one process left in the list.\r\nHighlight it, then select\r\n<span class=\"menu\">View<br>Quit Process</span>\r\nfrom the menu, and click <span class=\"menu\">Quit</span>\r\nin the popup prompt.\r\nThe Taskgate process will be terminated and, consequently, should\r\ndisappear from the list.\r\nIn\u00a0a\u00a0few seconds, it will be restarted by the system and should\r\nreappear in the list. Please wait for this to happen (it may take up to\r\na\u00a0minute or two, at worst).\r\n</p><p>\r\nFinally, in a\u00a0Terminal window, run\r\n<code>codesign -s gdbcert /usr/local/bin/gdb</code>\r\n(if you named your certificate differently, replace\r\n<code>gdbcert</code> with its name here).\r\nOnce again, you will be prompted for you username and password.\r\nIf the command does not produce any output, then GDB is\r\nsuccessfully signed.\r\n</p>\r\n\r\n<h2 id=\"eclipse\">Configuring Eclipse</h2>\r\n<p>\r\nThe only thing left to do is to point Eclipse to the GDB executable.\r\nOpen <span class=\"menu\">Eclipse<br>Preferences</span> from the\r\nmain menu (not to be confused with\r\n<span class=\"menu\">Project Preferences</span>).\r\nIn the tree of options listed in the sidebar, navigate to\r\n<span class=\"menu\">C/C++<br>Debug<br>GDB</span>, and set\r\nthe <span class=\"menu\">GDB\u00a0debugger</span> field to\r\n<code>/usr/local/bin/gdb</code>.\r\n</p><p>\r\nIf there is no <span class=\"menu\">GDB</span> section\r\nin the <span class=\"menu\">C/C++<br>Debug</span> subtree,\r\nclose the preferences window, and try to first start a debugging\r\nsession for any project that you can already run without problems.\r\nYou can do it by either clicking the <span class=\"menu\">Debug</span>\r\nbutton on the toolbar, or selecting <span class=\"menu\">Run<br>Debug</span>\r\nfrom the main menu.\r\nThis attempt will, of course, fail with an error message about\r\nthe <code>gdb</code> command, but it will force\r\nthe said <span class=\"menu\">C/C++<br>Debug<br>GDB</span>\r\nsettings to appear in the preferences.\r\n</p><p>\r\nThis will change the GDB executable for new projects; for all existing\r\nones (that you are going to use debugging for), you will need to\r\nmanually update their debug configurations.\r\nTo do that, select\r\n<span class=\"menu\">Run<br>Debug Configurations</span>\r\nfrom the menu.\r\nIn\u00a0the\u00a0window that appears, one after another, select every project\r\nunder the <span class=\"menu\">C++\u00a0Application</span> section in\r\nthe sidebar.\r\nFor each of them, open the <span class=\"menu\">Debugger</span> tab,\r\nset the <span class=\"menu\">GDB\u00a0debugger</span> field to the same path\r\n<code>/usr/local/bin/gdb</code>, and click the\r\n<span class=\"menu\">Apply</span> button.\r\nAfter repeating this change for all listed projects, click <span\r\nclass=\"menu\">Close</span>.\r\n</p>\r\n<center>\u2766</center>\r\n<p>\r\nIf the above steps do not solve the issue on your machine, or you\r\nencounter a\u00a0problem while following them, please do not hesitate to\r\ncome to one of the upcoming common labs for help.\r\n</p>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "utf-8"}