{"url": "https://www.ics.uci.edu/~pattis/ICS-33/lectures/reviewmidterm.txt", "content": "The following is a list of all the material that we have covered this quarter.\r\nIt is very large, and with 8 questions over 110 minutes on the midterm, I will\r\nbe able to cover just a small fraction of it all. My goal is to cover the most\r\nimportant material: material important enough to have been covered on quizzes \r\nand in programs. This is not a guarantee of what will/won't be on the exam, but\r\nan indication of what is typically on midterm exams.\r\n\r\n\t\t\tMaterial Covered/Midterm\r\n\r\n\r\nWeek 1) Review/Extension\r\n  data types: list (sorting), tuple/named-tuple, set/frozenset, dict/defaultdict\r\n  iterators : iterating over sorted/reversed data; 3 ways to iterate over dicts\r\n  importing: forms and meanings\r\n  construction on iterable data\r\n  comprehensions\r\n  function calls: argument/parameter binding options; *args/**kargs\r\n  important functions: split/join, all/any, sum/min/max, zip/enumerate\r\n  lambdas\r\n  sharing vs copying\r\n  raising exceptions and exception/handling with try/except\r\n  classes (__dict__ for object name spaces)\r\n\r\nWeek 2) Text Patterns\r\n  reading files\r\n    standard iteration (and variations with readlines and read)\r\n    calling rstrip and split\r\n    a special function for parsing lines (it uses generators, covered week 4)\r\n  EBNF\r\n    Forms of rules\r\n    Meaning of sequence, option [], alternative |, and repetition\r\n    Determining whether strings match descriptions\r\n    Synthesizing descriptions from example\r\n  regular expressions\r\n    elements of the matching language (e.g., what [], {}, |, ?, +, *, etc. mean)\r\n    re functions: match, search, sub, split, compile\r\n    specifying/extracting groups (numbered and named) after matching\r\n    re methods on match objects: mostly group (by number/name) and groupdict\r\n\r\nWeek 3) Classes\r\n  how state and methods are stored in an object's namespace (using __dict__)\r\n  the Fundamental Equation of Object Oriented Programming\r\n  the meaning of _ and __ prefixes in names\r\n  operator overloading via method definition\r\n    misc: __init__, __len__, __bool__, __str__/__repr__\r\n    unary: +, -, abs\r\n    general relational and arithmetic:\r\n      how are translated, evaluated (incl. further attempts when type problems)\r\n    container: __getitem__, __setitem__, __delitem__, __contains__\r\n    function call: __call__\r\n    iterators: __iter__, __next__\r\n    attribute: __getattr__, __setattr__, __delattr__, (ignore __getattribute__)\r\n    context managers: __enter__, __exit__\r\n\r\nWeek 4) Iterators\r\n  how iterators work\r\n    translating for loops into while loops with explicit calls to iter/next\r\n  general review of use/illustrations of how to write some builtin (prange)\r\n  implementation of iterators with simple nested classes\r\n  generators\r\n    implementation of iterators with generators\r\n      space efficiency (iterating over many value without storing them all)\r\n  decorators for iterators using generators: e.g., repeat, unique, filter \r\n     decorated is an iterable; decorator produces an iterable\r\n\r\nWeek 5) Recursive and Functional Programming\r\n  recursive programming for standard Python data structures: int, string, list\r\n    recurring on multiple parameters\r\n  proof rules and their application to write/prove code correct\r\n  map/filter/reduce (+ lambdas)\r\n  accumulation and tail recursion\r\n  the minimum number of stamps problem\r\n  decorators for things called\r\n    special @ syntax\r\n    examples: Track_Calls, Memoize, Illustrate_Recursive\r\n\r\n", "encoding": "ascii"}