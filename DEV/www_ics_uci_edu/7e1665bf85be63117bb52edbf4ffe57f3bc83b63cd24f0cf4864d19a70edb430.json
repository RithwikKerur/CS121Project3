{"url": "https://www.ics.uci.edu/~eppstein/163/s15-hw3.html", "content": "<html>\n<head>\n<title>CompSci 163/265, Spring 2015, Homework 3</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<h1>CompSci 163/265, Spring 2015, Homework 3</h1>\n<ol>\n<li><p>Suppose we wish to compute shortest paths in a complete directed graph (a directed graph in which there exists an edge in each direction between every two vertices), with positive edge weights (so that Dijkstra's algorithm may be used). But rather than using a complicated priority queue data structure, we use an unsorted list $L$ of the vertices that have not yet been processed. That is, the simplified version of Dijkstra's algorithm performs the following steps:</p>\n<pre>    initialize the D and P information used by the relaxation algorithms for\n    single source shortest paths\n\n    initialize L to be a list of all the vertices in the graph\n\n    while L is not empty:\n        look at all of the vertices in L to find the vertex v with\n        the minimum value of D[v]\n\n        remove v from L\n\n        for each edge v->w\n            relax(v->w)</pre>\n<p>You may assume that looking at all vertices in $L$ takes time proportional to the number of vertices examined, and that removing $v$ from $L$ takes constant time.</p>\n<ol type=\"a\">\n<li><p>What is the running time of this algorithm, using $O$-notation, as a function of the number $n$ of vertices in the input graph?</p></li>\n<li><p>Would this algorithm be a better or worse choice than the more usual form of Dijkstra's algorithm using a binary heap, for this type of graph? Explain your answer.</p></li>\n</ol></li>\n<li><p>Suppose that a directed graph $G$ has the property that every shortest path from the starting vertex $s$ to every other vertex has at most four edges. What would this fact imply about the running time of the Bellman&ndash;Ford algorithm for finding shortest paths starting from $s$ in $G$?</p></li>\n<li><p>Let $G$ be a directed path with six vertices and five edges, each of which has length $-1$. Show the values of $h(v)$ for each vertex $v$, and of the new edge weights for each edge, that would be calculated by Johnson's algorithm on this graph.</p></li>\n<li><p>Suppose you are given a directed graph (containing cycles) in which all edges have weight $1$. Name an algorithm that can solve the single-source shortest path problem in this graph in linear time, without using a priority queue data structure.</p></li>\n</ol>\n</body>\n</html>\n", "encoding": "ascii"}