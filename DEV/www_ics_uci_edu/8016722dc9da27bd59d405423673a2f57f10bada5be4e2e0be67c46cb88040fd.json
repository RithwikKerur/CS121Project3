{"url": "https://www.ics.uci.edu/~kay/courses/31/hw/lab4.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Tuesday, November 22, 2005 9:30 AM\" />\n<TITLE>ICS 31 Lab 4</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"33CB8976\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n<link href=\"http://www.ics.uci.edu/~kay/courses/31/mainstyle.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<p><FONT size=\"2\"  >ICS 31 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2017</FONT></p>\n<p><FONT   SIZE=6><B>Lab Assignment 4 </B></FONT>\n</p>\n<P><font  >This assignment is due by 10:00 p.m.on Friday, October 27.</font></P>\n<P><font  ><strong>Preparation</strong></font> (Do this part individually, but do whatever preparation you need for the midterm first; the early parts of this assignment may help you review on Monday in lab)</P>\n<P><font  ><strong>(1)</strong> </font>View your midterm on Gradescope, review what you missed, and learn the concepts you didn't know before. Then take the midterm again for yourself: Cover up your answers and re-create them from scratch. (It's okay to skip the questions you answered correctly the first time, but it wouldn't hurt to do them again, too.) The topics on the midterm are fundamental; you'll have a hard time moving forward without mastering them. </P>\n<!--<P><strong>(2 for Zyante readers)</strong> Read sections 3.7\u20133.9, doing all the interactive activities.</P>-->\n<P><strong>(2)</strong> Read any sections of Chapter 3 that you haven't read yet, particularly section 3.4. Try the practice problems, especially 3.15 and 3.16 (before looking at the solutions). Do at least four of the parts of Exercise 3.23. <!--Go back and look at section 2.4 to remind yourself how the range function works. This is a key programming skill, to be able to read a description of a language feature and then use it correctly.--></P>\n<P><strong>(3) </strong>At <a href=\"http://www.pythontutor.com\">www.pythontutor.com</a> you can run simple Python code and see the values change in memory; if you have a question about what's going on in some code, this site may help you see step by step what's happening. Be sure to choose Python 3 and not Python 2.7.</P>\n<P><strong>(4)</strong> As you do your lab work, read the problem (the specification) carefully. For example, determine whether the problem gets its input data (a) from  arguments passed to a function, (b) from interactive user input (i.e., from a user typing on the keyboard in the Python console in &quot;real time&quot;) using the <code>input()</code> function, or (c) from a file or other source, which we haven't covered yet. In other words, don't use  <code>input()</code> unless the problem says explicitly to interact with the user. This is an important distinction generally; it's also critical to get it right for the automated testing we do on your submissions.</P>\n<P>&nbsp;</P>\n<p><font  ><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>\n<p><strong>(a)</strong> Choose a partner for this assignment and register your partnership using the <a href=\"http://ics31-partner-app.appspot.com/\">partner app</a>, ideally by Monday. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. </p>\n<p>Note that doing these problems by yourself, at home, is not pair programming and will not receive full credit (at least for participation). It's great if you want to work outside of lab, but whatever you prepare alone you must explain to your partner so that he or she understands it as well as you do. (This is to your benefit as well as your partner's: One of the most common workplace situations (and not just in science and technology) is to bring a co-worker up to speed on some project.)</p>\n<p><strong>Scary warning:</strong> There's another reason to do all your work jointly with your assigned partner: You protect yourself from getting in trouble for academic dishonesty. Something like this occasionally happens in programming classes: Partner A works alone and submits some code that Partner B didn't work on and hasn't examined. But Partner A gets that code from another student in the class, or a roommate who's a CS major, or someone who took the course before, or the GitHub posting of a former student. All of these are instances of academic dishonesty, and often they come to the notice of the TAs or instructor. Then both partners, A and B, get in trouble because the work is submitted jointly by both students. These are difficult and unhappy situations; you can avoid them by doing pair programming properly and, when you get stuck, asking the lab tutors, the TAs, the instructor, or Piazza for help. </p>\n<p><strong>(b)</strong> \nPrepare your <code>lab4.py</code> file as in previous labs, including a line like this: </p>\n<pre>\n#  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab Assignment 4.\n</pre>\n<p>All the Python code you write for this assignment should be executable (i.e., not commented out) in your <code>lab4.py</code> file and should produce the correct results when you (and the TA) run the file. We can't give you credit for code that doesn't run and produce the correct results. On lab assignments, unlike on exams,  there's rarely partial credit for partially working code because you have the ability to test it out and refine it until it does work correctly.</p>\n<p>As you work, organize and prepare this file according to part (b) of Lab 3.</p>\n<p><strong>(c)</strong> Python exercises:</p>\n<!--\nExercise 3.17\nBroad topic: Basic selection\nSpecific topic: If/else statements\nProblem domain: None; purely mechanical\n\nReplacement:-->\n<p><strong>(1) </strong>Implement the function <code>test_number</code> that takes as input a number\nand a string (one of <code>'even'</code>, <code>'odd'</code>, <code>'positive'</code>,\nor <code>'negative'</code>).  The function returns True if the number has the\nproperty indicated by the string, and False if it doesn't.  See the assertions \nbelow for examples.</p>\n<pre><code>assert test_number(14, 'even')\nassert not test_number(100, 'odd')\nassert test_number(33, 'positive')\nassert not test_number(100, 'negative')</code></pre>\n<!--\nSolution:\ndef test_number(n, predicate):\n    \"\"\" Return True if n satisfies predicate \"\"\"\n    if predicate == 'even':\n\t    return n % 2 == 0\n    elif predicate == 'odd':\n\t    return n % 2 != 0\n    elif predicate == 'positive':\n\t    return n > 0\n    elif predicate == 'negative':\n\t    return n < 0\nassert test_number(14, 'even')\nassert not test_number(100, 'odd')\nassert test_number(33, 'positive')\nassert not test_number(100, 'negative')\n-->\n\n<!--\nExercise 3.18\nBroad topic: Basic selection\nSpecific topic: If/else statements\nProblem domain: None; purely mechanical\n\nReplacement:\nThe replacement for this problem was combined into 3.17. Originally, Exercises 3.17 and 3.18 were complementary problems to each other. \n\u2014>\n\n<!--\nExercise 3.19\nBroad topic: Iteration\nSpecific topic: For each loop\nProblem domain: Months of the year\n\nReplacement:-->\n\n<p><strong>(2)</strong>\nImplement the function <code>display</code> that takes no parameters. It prompts the user to enter any word or phrase and then prints out every character in that phrase, one per line.\nUser input is indicated in <strong>bold face</strong>.</p>\n<pre><code>>>> display()\nEnter a word: <strong>Anteater</strong>\nA\nn\nt\ne\na\nt\ne\nr</code></pre>\n<!--\nExercise 3.20\nBroad topic: Iteration\nSpecific topic: For each loop\nProblem domain: Numbers\n\nReplacement:\n-->\n<p><strong>(3)</strong>\nImplement a function <code>square_list</code> that takes a list of integers and prints out each integer squared.</p>\n<pre><code>>>> square_list([2, 3, 4, 10])\n4\n9\n16\n100</code></pre>\n\n<!--\nSolution:\ndef square_list(lst):\n    for n in lst:\n\tprint(n ** 2)\n-->\n<p><strong>(4)</strong>\nImplement the function <code>match_first_letter</code> that takes a one-character string and a list of strings and prints all the strings in the list that start with the specified character.\n</p>\n<pre><code>>>> match_first_letter('I', [\u2018Iron Man\u2019, \u2018Iron Man 2\u2019, \u2018The Avengers\u2019, \u2018Superman\u2019, \u2018I am Legend\u2019])\nIron Man\nIron Man 2\nI am Legend</code></pre>\n\n<!--\nSolution:\ndef match_first_letter(lett: str, L: [str]) -> None:\n    \"\"\" Print the list items whose first letter matches the argument \"\"\"\t\n    for item in L:\n\tif item[0] == lett:\n\t    print(item)\n    return\n-->\n\n<p><strong>(5)</strong>\nImplement the function <code>match_area_code</code> that takes as a list of telephone area codes (three-digit strings) and a list of phone numbers in the form shown below.  The function will print the phone numbers whose area code is on the list of area codes.\n\n<pre><code>>>> match_area_code(['949', '714'], ['(714)824-1234', '(419)312-8732', '(949)555-1234'])\n(714)824-1234\n(949)555-1234</code></pre>\n<!--\nSolution\ndef match_area_code(codes: [str], nums: [str]) -> None:\n\t\"\"\" Print nums that match \u0001an item in codes \"\"\"\n\tfor n in nums:\n\t\tif n[1:4] in codes:\n\t\t\tprint(n)\n\treturn\n-->\n</p><strong>(6)</strong> Copy your <code>match_area_code</code> function and name the copy <code>matching_area_codes</code>.\nNow modify your new function so that instead of printing out the matching phone numbers,\nit returns a list of the matching numbers. Follow the pattern of accumuating a result that we've seen in class.\n\n<!--\nSolution:\ndef matching_area_codes(codes: [str], nums: [str]) -> [str]:\n\t\"\"\" Print nums that match \u0001an item in codes \"\"\"\n\tresult = []\n\tfor n in nums:\n\t\tif n[1:4] in codes:\n\t\t\tresult.append(n)\n\treturn result\nassert matching_area_codes(['949', '714'],\n\t['(714)824-1234', '(419)312-8732', '(949)555-1234']) == ['(714)824-1234','(949)555-1234']\n-->\n\n<p><strong>(d.1)</strong> Write a function called <code>is_vowel</code> that takes a\n  \none-character-long string and returns True if that character is a vowel and False otherwise. [A vowel, for our purposes here, is one of the letters a, e, i, o, or u (lower case or upper case).] You can do the central part of this task using the <code>in</code> operator and a string containing the vowels; your task here is to package this up into a function that returns a boolean value. [Please check that the function name is capitalized precisely as shown above; it helps your TA in the grading.]</p>\n<p>Your function definition should follow the &quot;<a href=\"http://www.ics.uci.edu/~kay/courses/31/design-recipe.html\">design recipe</a>&quot; pattern we've described before. You should do all of this <em>before</em> you write the code for the body of the function.\n  And we expect you to do this for every function you write from now on. If you ask a TA or tutor for help and you haven't done it, they'll just send you back to do it. (Of course, if you have questions about <em>how</em> to do this, they'll be glad to help.)</p>\n<p>[Novice programmers are often tempted to code the body of this task as \n<pre>if ... :  \n    return True\nelse:\n    return False</pre>\n<p>But this is rather clumsy and redundant, because the boolean expression itself (the &quot;<code>...</code>&quot; above)\n  has exactly the value you want to return; you should just say <code>return ...</code> and be done.</p>\n<p>Take a minute to re-read this and understand it fully. ]</p>\n<p>Finally, run your code (including the tests) to make sure the tests all pass.  This is the pattern you will follow for every function you design and code.</p>\n<p><strong>(d.2)</strong> Write a function called <code>print_nonvowels</code> that takes a string and prints out all the characters in the string that are <em>not</em> vowels. Use your <code>is_vowel</code> function (and one of the logical/boolean operators).  (Note that this function prints its result rather than returning it.  Whenever you define a function, the first thing to determine is whether the result should be returned or printed. When in doubt, return the value and let the program that called the function decide what to do with it. For class purposes, we'll typically just tell you which to do, as we did here.)  <!-- This task is related but not identical to the tasks described on page 67.-->\n</p>\n<p>Write some tests (also involving print statements), enough so that if they pass, you're convinced that your function works correctly. And run the tests, of course.</p>\n<p><strong>(d.3)</strong> Write a function called <code>nonvowels</code> that takes a string and <em>returns</em> a string containing all the characters in the parameter string that are <em>not</em> vowels. Since you're returning a string instead of printing a character at a time, you'll need to construct that string in your function. Start with a variable (let's call it <code>result</code>) whose value is the empty string. Each time you find a nonvowel, add it to the end of <code>result</code>. Then, once you've gone through the whole parameter, <code>result</code> is what you return. [We just gave you the algorithm; your job is to implement it in Python.]</p>\n<p>Functions that return values are somewhat more convenient to test than functions that print values. You could do it the same way, printing out the tests and the results or printing out boolean expresions that are true if the test passes. Instead of print statements, though, you should use <code>assert</code> statements as shown below. Their advantage is that if the test passes, nothing happens, so you can leave the <code>assert</code> statements in your code after you're satisfied your function works, without their cluttering up your output. (It's good to keep the <code>assert</code> statements there because later you may make changes that &quot;break&quot; your existing code, or you may need to change your existing code, and with the tests still in place you'll find any problems at the earliest possible time.)</p>\n<p>Here are some <code>assert</code> statements for <code>double</code> and for <code>is_vowel</code>; note that the the <code>assert</code> statement expects a boolean expression., and that you'll have to define <code>double</code> if you actually want to run the assertions that call <code>double</code>.</p>\n<pre>assert double(0) == 0\nassert double(17.5) == 35\nassert double(-223344) == -446688\nassert is_vowel('a') \nassert is_vowel('U')\nassert not is_vowel('X')\nassert not is_vowel('?')</pre>\n<p>To see what happens when a test fails, <code>assert</code> something false like <code>assert double(2)==5</code>. (Note that when an assertion fails, there could be  two reasons: (i) Your function may be incorrect, or (ii) your assertion\u2014what you think the right answer is\u2014may be wrong. You should consider both possibilities).</p>\n<p>Write some tests for <code>nonvowels</code> using <code>assert</code> statements.</p>\n<p><strong>(d.4)</strong> Write a function called <code>consonants</code> that takes a string and returns a string containing all the letters in the parameter string that are not vowels. (This is not the same as <code>nonvowels</code>, whose definition refers to &quot;characters,&quot; which include digits and spaces and punctuation. Did you test <code>nonvowels</code> with strings including non-letters? If not, go back and do it, changing the function's definition if necessary to make it work correctly.)</p>\n<p>Before you write the body of the function, follow the &quot;design recipe&quot; steps: specify the types of the parameter and return value; include a short purpose statement as a docstring; write examples in the form of <code>assert</code> statements.</p>\n<p><strong>(d.5)</strong> Write a function called <code>select_letters</code> that takes two parameters, both strings, and returns a string. If the first parameter is <code>'v'</code>, it returns a string containing all the vowels in the second parameter; if the first parameter is <code>'c'</code>, it returns a string containing all the consonants in the second parameter. If the first parameter is anything else, it returns the empty string. So, <code>select_letters('v', 'facetiously')</code> would return <code>aeiou</code> and <code>select_letters('c', 'facetiously')</code> would return <code>fctsly</code>. [If you count Y as a vowel, your results will be slightly different.]</p>\n<p><strong>(d.6)</strong> Write a function called <code>hide_vowels</code> that takes a string and returns a string in which every vowel in the parameter is replaced with a hyphen (&quot;<code>-</code>&quot;) and all other characters remain unchanged. After your testing shows that it's correct, try running it with a couple of sentences; you may be able to understand the sentences even with all the vowels hidden.</p>\n<p><strong>(e)</strong> Using the definition <code>Restaurant = namedtuple('Restaurant', 'name cuisine phone dish price')</code>, write the function <code>Restaurant_change_price</code> that takes two arguments, a Restaurant object and a number, and returns a Restaurant object with the same contents as the parameter except that the price has been increased by the specified number.</p>\n<p><strong>(f)</strong> You can download code from <a href=\"http://www.ics.uci.edu/~kay/python/restaurants.py\">http://www.ics.uci.edu/~kay/python/restaurants.py</a>; it defines a list called <code>RL</code> that contains 26 Restaurant objects.</p>\n<p>(In that file, each of the 26 restaurants is given an individual variable name, <code>R1</code> through <code>R26</code>. That is not necessary; we could create the list of restaurants as we did in Lab Assignment 2, by putting 26 calls to <code>Restaurant()</code> within square brackets. But having individual variable names makes constructing tests more convenient; we can say, e.g., <code>assert cheapest(RL) == R10 </code>.)</p>\n<p>Paste the code into your <code>lab4.py</code> file.</p>\n<p><strong>(f.1)</strong> Write a function called <code>alphabetical</code> that takes a list of restaurants and returns that list in alphabetical order by name. Except for making this a function, you did this task in last week's lab.</p>\n<p><strong>(f.2) </strong>Write a function called <code>alphabetical_names</code> that takes a list of restaurants and returns a list of the <em>names</em> of all the restaurants in alphabetical order by name. [One of the things you learn in this course is to read technical documents very closely. Part (f.1) asked for a list of restaurants; this part asks for a list of strings, with each string the name of a restaurant.]</p>\n<p><strong>(f.3) </strong>Write a function called <code>all_Thai</code> that takes a list of restaurants and returns a list of all the Thai restaurants (i.e., whose cuisine attribute is Thai). The body of the function follows the same pattern as your vowel-selecting function above. Recognizing these similar patterns is a programming skill you will develop.</p>\n<p><strong>(f.4) </strong>Write a function called<code> select_cuisine </code>that takes a list of restaurants and a string representing a cuisine. It should return a list of all the restaurants that serve the specified cuisine.</p>\n<p><strong>(f.5)</strong> Write a function called <code>select_cheaper</code> that takes a list of restaurants and a number (a float) and returns a list of all the restaurants whose price is less than the specified number.</p>\n<p><strong>(f.6) </strong>Write a function called <code>average_price</code> that takes a list of restaurants and returns the average price of (the best dishes at) those restaurants. (You may wish to write a separate function that takes a list of restaurants and returns the sum of the prices of (the best dishes at) those restaurants. But that's not required.)</p>\n<p><strong>(f.7) </strong>Write a print statement that calls one or more of the functions you defined above to print the average price of the Indian restaurants in the list <code>RL</code>.</p>\n<p><strong>(f.8) </strong>Write a print statement that calls one or more of the functions you defined above to print the average price at the Chinese and Thai restaurants (taken as one group) in the list <code>RL</code>. </p>\n<p><strong>(f.9) </strong>Write a print statement that calls one or more of the functions you defined above to print a list of the names of all the restaurants in RL with a price under $15.00.</p>\n<p><strong>(g)</strong> When we draw a rectangle in tkinter (and similarly for other figures), we have to specify the coordinates of its upper left and lower right corners.  But sometimes it's more convenient to specify the center point of the rectangle and its height and width.\nWrite a function <code>create_rectangle_from_center</code> that takes four  arguments:  the x-value and y-value of the point in the center of the rectangle and the height and width of the rectangle.\n</p>\n<p>We don't know yet how to make <code>create_rectangle_from_center()</code> into a method that would let us say <code>my_canvas.create_rectangle_from_center()</code>, but you can call \n<code>create_rectangle_from_center()</code> without the <code>my_canvas</code> prefix: In the body of your function, you just call <code>my_canvas.create_rectangle()</code> with the appropriate arguments (based on the parameters of <code>create_rectangle_from_center()</code>). \nNote that the body of your function should only contain a call to <code>create_rectangle</code>; all the tkinter setup should be outside your function, in the main program.\n</p>\n<!--\nimport tkinter             # Load the library; do this just once per program\n\ndef create_rectangle_from_center(xc, yc, height, width):\n    my_canvas.create_oval(xc-5, yc-5, xc+5, yc+5, fill=\"red\")  #Just to show where the center is\n    my_canvas.create_rectangle(xc-(width//2), yc-(height//2), xc+(width//2), yc+(height//2))\n\nmy_window = tkinter.Tk()\n\nmy_canvas = tkinter.Canvas(my_window, width=500, height=500)\nmy_canvas.pack()\nx1 = 100\ny1 = 100\nx2 = 400\ny2 = 400\nmy_canvas.create_rectangle(x1, y1, x2, y2)\ncreate_rectangle_from_center(200, 200, 50, 50)\n\ntkinter.mainloop()          # Combine all the elements and display the window\n-->\n<p><strong>(h)</strong><strong></strong> Remember that each partner must complete a partner evaluation form and submit it individually. Do this using the <a href=\"http://ics31-partner-app.appspot.com/\">partner app</a>. Make sure you know your partner's name, first and last, so you can evaluate the right person. <!-- Some students have been forgetting to specify their partner's name on the survey; from now on, if you forget your partner's name we won't give you credit for completing the evaluation.--> Please complete your evaluation by the end of the day on Friday, or Saturday morning at the latest. It only takes a couple of minutes and not doing it hurts your participation score.\n  \n<p><strong>What to turn in:</strong> Submit via Checkmate  your  <code>lab4.py</code> file containing your solutions to parts (c) through (g). Remember what we've said in previous labs about rereading the assignment and rerunning your Python files.</p>\n<p>Also remember that each student must complete a partner evaluation form; these evaluations contribute to your class participation score. Get in the habit of doing this every week on Friday after you've submitted your assignment; the survey closes on Saturday morning.\n<p style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; \">&nbsp;</p>\n<p style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; \"><font face=\"Helvetica\" size=\"1\">Written by David G. Kay in Fall 2012 for ICS 31, based in part on assignments from ICS H21 and Informatics 41. Modified by David G. Kay, Winter 2013, Fall 2013, Fall 2014, Winter 2015, Fall 2015, Spring 2017.</font></p>\n<br class=\"Apple-interchange-newline\">\n<HR />\n<FONT  ><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\"  >\n<!-- #BeginDate format:fcAm1a -->Friday, October 20, 2017 8:07 AM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "utf-8"}