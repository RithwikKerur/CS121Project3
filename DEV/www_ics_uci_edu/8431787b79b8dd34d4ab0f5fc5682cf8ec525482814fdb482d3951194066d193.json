{"url": "https://www.ics.uci.edu/~eppstein/261/f11-hw5-soln.txt", "content": "1. Suppose we wish to maintain a dynamic set S of real numbers (subject to insertion and deletion operations) and, after each insertion or deletion, report the closest pair of numbers in S. Insertions, deletions, and reporting the closest pair should all take time O(log n) or better, where n is the number of elements in S.\n\n(a) Explain how to solve this by augmenting a binary search tree to contain extra information within each node that allows the closest pair to be found quickly after each update. What information do you need to store? How can this information be updated after a rotation in the binary search tree?\n\nOne way to do this would be to store three values in each node x:\n- x.small is the smallest key stored at a descendant of x\n- x.large is the largest key stored at a descendant of x\n- x.pair is the pair of descendants of x with the smallest gap\n\nThese can be updated with the following formulas after a rotation involving x:\n- x.small = x.left.small\n- x.large = x.right.large\n- x.pair = min(x.left.pair, x.right.pair, (x.left.large,x.right.small))\nwhere the comparison in the min is done according to the distance of the pair.\n\nThen, the desired information would be stored at the root of the tree.\n\n\n(b) Describe a different solution to the same problem that uses an unmodified binary search tree together with a priority queue of adjacent pairs. When you perform an insertion or deletion in the binary search tree, what changes would that cause in the priority queue?\n\nWhen inserting x in S:\n - use the binary search tree to find its predecessor y and its successor z in the sorted order\n - remove the pair (y,z) from the priority queue and add the pairs (y,x) and (x,z)\n\nWhen deleting x from S:\n - again use the binary search tree to find its predecessor y and its successor z in the sorted order\n - add the pair (y,z) to the priority queue and remove the pairs (y,x) and (x,z)\n\nIn both cases there would be some additional special cases to handle the situation where x is first or last in the sorted order.\n\nThen, the desired information will be stored as the minimum pair in the priority queue.\n\n\n2. Draw a Cartesian tree for the sequence 21 94 17 45 108 121 350 290 6 33 27 104 41.\n\n- This would be tedious with ASCII art so I'll omit it from the solutions\n\n\n3. Suppose that, in a given binary tree, we wish to be able to answer queries that take as arguments two nodes x and y and return the first edge on the path from x to y in the tree. Describe how to solve this problem in constant time per query using lowest common ancestors.\n\nif LCA(x,y) == x:\n   if LCA(x.left,y) == x:\n      first edge is from x to x.right\n   else:\n      first edge is from x to x.left\nelse:\n   first edge is from x to x.parent\n", "encoding": "ascii"}