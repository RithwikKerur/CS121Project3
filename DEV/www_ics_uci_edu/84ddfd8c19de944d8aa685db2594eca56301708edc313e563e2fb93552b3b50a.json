{"url": "https://www.ics.uci.edu/~pattis/ICS-31/lectures/listprocessing/listprocessing.txt", "content": "\t\t\tFunction for List Processing\r\n\r\nExamine the list processing functions in this project. Hand simulate\r\nthem or run them (in the debugger) to understand them using the driver\r\nsupplied. The best way to learn how to write list functions is to study\r\nother list functions Here is some commentary. See the Notes, including two new\r\nways to bind multiple names to values.\r\n\r\nlist_sum:\r\n  intializes answer to 0, then iterates through all the values in the list,\r\n  adding each value to answer. When the loop has finished, this function\r\n  return the value accumulated in answer.\r\n\r\n\r\nlist_max:\r\n  intializes answer to the first value in the list, then specifies a slice \r\n  (index 1 to the end) to iterate through all the other values in the list,\r\n  updating answer if it finds a larger value. When the loop has finished, this\r\n  function return the value accumulated in answer.\r\n\r\n  Question: What happens if the list has no values? What would happen if the\r\n  for loop was: for v in alist (instead of the slice)?\r\n\r\n\r\nlist_min_max:\r\n  simlar to list_max, while also finding the miniimum\r\n\r\n  Note: (1) Python allows a = b = c = ... = expression for multiple assignment\r\n            In list_min_max, both min_answer and max_answer are intialized\r\n              to alist[0]\r\n        (2) We must return 2 values, but Python allows us to return only 1\r\n            value, so the value we return is a list of 2 values. This simple\r\n            use of returning lists termendously expands the usefulness of\r\n            functions that we can write\r\n\r\n\r\ncount_predicate: count how many values in the list for which the predicate\r\n  function p returns True. Initializes count to 0,  then iterates through all\r\n  the values in the list, incrementing count if and only if the predicate\r\n  returns True for that value. When the loop has finished, this function return\r\n  the value accumulated in count.\r\n\r\n\r\nsum_predicate: sum all the values in the list for which the predicate function\r\n  p returns True: initializes answer to 0,  then iterates through all the\r\n  values in the list, adding each to sum if and only if the predicate returns\r\n  True for that value. When the loop has finished, this function return the\r\n  value accumulated in sum.\r\n\r\n\r\nfind_value_predicate: finds the first value in the list for which the predicate\r\n  function p returns True. It iterates through all the values v in the list,\r\n  returning the first one for which p(v) is True; if the for loop returns no\r\n  values, return None after the loop.\r\n\r\n  Note: if there were no return None statement, and the function terminated the\r\n  for loop, reaching the end of this function without executing a return\r\n  statement, Python would automatically return None\r\n \r\n\r\nfind_index_predicate: find the index of the first value in the list for which\r\n  the predicate function p returns True. It iterates through all the indexes i\r\n  in the list, returning the first one for which p(v[i]) -the predicate called\r\n  on the value of the index- is True; if the for loop returns no values, return\r\n  -1 after the loop; like find for strings, -1 specifies a non-existant index\r\n  (None might be another good result to return for Python).\r\n\r\n\r\nall_true: determine whether or not predicate function p returns True for EVERY\r\n  list value. It MAY iterate through all the values v in the list, returning\r\n  False as soon as it finds even one for which p(v) is False -not p(v) is True;\r\n  if the for loop returns no values, then every p(v) must have been True, so\r\n  this function returns True after the loop -because not p(v) was NEVER True\r\n \r\nany_true: determine whether or not predicate function p returns True for ANY\r\n  list value. It MAY iterate through all the values v in the list, returning\r\n  True as soon as it finds even one for which p(v) is True; if the for loop\r\n  returns no values, then every p(v) must have been False, so this function\r\n  returns False after the loop -because p(v) was NEVER True.\r\n \r\n\r\nrank: finds value's rank in the list: 1 more than the number of bigger values \r\n  (number of higher ranks). For example rank(5, [5, 12, 4, 63]) returns 1 more\r\n  than the number of values in the list > 5: 1+2 is 3. So 5 is the third\r\n  biggest value (ranked 3rd) in the list.\r\n    \r\n  Note: calls count_predicte with a lambda checking whether the argument lambda\r\n        is called on is strictly > values. Without a lambda we would have to\r\n        write:\r\n\r\n        def rank(value,alist):\r\n            def pred(x)\r\n                return x > value # refers to value in enclosing function\r\n            \r\n            return count_predicate(alist, pred)+1\r\n\r\n  Generally a function can refer to its own local names (parameters and\r\n     other locally declared names) and the local names of any functions in\r\n     which it is enclosed. The lambda is enclosed in the rank function so it\r\n     can (and does) refer to the parameter to \"value\" of the rank function.\r\n\r\n\r\nis_sorted: determines whether values in a list are non-decreasing: each is\r\n  >= the one before it. It iterates through all the indexes of values in the\r\n  list -except the last- returning False if any are out of order (bigger than\r\n  the one following them); if the for loop doesn't return False, after it\r\n  terminates the function returns True, because no out-of-order values were\r\n  found\r\n\r\n  Note: All lists with 1 or 0 values are sorted; in such a case the loop\r\n        executes 0 times. We could write \r\n\r\n        if len(alist) <= 1:\r\n            return True\r\n\r\n        at the start of our function, but it is not necessary. If\r\n        len(alist) <= 1, range(0,len(alist)-1) produces no/0 values. It is like\r\n        range(0,0) which produces value >= 0 but < 0 of which there are none.\r\n        Likewise, for an empty list, range(0,-1) produces no values.\r\n\r\n\r\nlist_reverse: reverse the order of values in a list\r\n  iterates through the first half of the indexes in the list, switching values\r\n  at those indexes with values at that same index from the END of the list\r\n  (which is computed at -i-1: when i is 0, switches alist[0] with alist [-1],\r\n   when i is 1, switches alist[1] with alist [-2], ...)\r\n\r\n  Note we can write\r\n    name_1, name_2, ..., name_n = expresion_1, expresion_2, ..., expresion_N\r\n  Python first evaluates all the expressions on the right-hand side, and then\r\n    binds each value object to the corresponding name on the left-hand side\r\n\r\n  By changing the values stored in the list, we mutate it. Functions that mutate\r\n  a list typically return None (either explicitly, as here, or implicitly)\r\n  because their main job is mutating the list.\r\n\r\n\r\nlist_sort: sorts a list (not allowing the key/reverse options in Python's sort\r\n  (just to give you an idea of how simple sorting can be accomplished) in\r\n  Python.\r\n\r\n  min_index is a local function that computes the index of the minimum value,\r\n  looking in alist (the parameter in the list_sort function) from the start\r\n  index to the end.\r\n\r\n  The for loop (after min_index is defined) finds the index of the minimum\r\n  value, and swaps it (x,y = y,x swaps x and y) with the current index of i.\r\n  So when i is 0, it puts the minimum value from the entire list into index 0;\r\n  when i is 1, it puts the minimum value from the remaining values in the list\r\n  (the 2nd smallest value in the entire list) into index 1; etc.\r\n  \r\n\r\n  Here the function returns None specifically: we can omit this return and\r\n  Python would automatically return None.\r\n\r\n\r\nThe if __name__... contains a small driver that we can use. We can also put\r\nPython statements into this script (which is really a module that contains a\r\nlibrary of functions).\r\n\r\nFinally, many of these functions are built into Python (with different names).\r\nBut it is very instructive to see how to write such functions using for loops.\r\nHere are the builtin names:\r\n\r\nlist_sum: sum\r\nlist_max: max (min also available)\r\nall_true: all\r\nany_true: any\r\nlist_reverse: calling list_reverse(x) is the same as x.reverse()\r\nlist_sort   : calling list_sort(x) is the same as x.sort()\r\n              the sort method allows us to further specify how to sort\r\n", "encoding": "ascii"}