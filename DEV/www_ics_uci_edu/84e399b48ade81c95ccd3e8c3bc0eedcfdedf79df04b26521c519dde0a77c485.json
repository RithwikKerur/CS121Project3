{"url": "https://www.ics.uci.edu/~ejw/versioning/arch/0096.html", "content": "<!-- received=\"Mon Jul  1 08:11:00 1996 PDT\" -->\n<!-- sent=\"Mon, 1 Jul 1996 11:10:59 -0400\" -->\n<!-- name=\"David Durand\" -->\n<!-- email=\"dgd@cs.bu.edu\" -->\n<!-- subject=\"Draft functional requirements (strawman or woodman, you decide!)\" -->\n<!-- id=\"199607011510.LAA28335@csb.bu.edu\" -->\n<!-- inreplyto=\"\" -->\n<title>Archive of Working Group on Versioning and Configuration Management of World Wide Web Content: Draft functional requirements (strawman or woodman, you decide!)</title>\n<h1>Draft functional requirements (strawman or woodman, you decide!)</h1>\n<b>David Durand</b> (<a href=\"mailto:dgd@cs.bu.edu\"><i>dgd@cs.bu.edu</i></a>)<br>\n<i>Mon, 1 Jul 1996 11:10:59 -0400</i>\n<p>\n<ul>\n<li> <b>Messages sorted by:</b> <a href=\"index.html#96\">[ date ]</a><a href=\"thread.html#96\">[ thread ]</a><a href=\"subject.html#96\">[ subject ]</a><a href=\"author.html#96\">[ author ]</a>\n<!-- next=\"start\" -->\n<li> <b>Next message:</b> <a href=\"0097.html\">Larry Masinter: \"Re: Draft functional requirements (strawman or woodman, you decide!)\"</a>\n<li> <b>Previous message:</b> <a href=\"0095.html\">Jim Whitehead: \"Proposed agenda for San Mateo Meeting\"</a>\n<!-- nextthread=\"start\" -->\n<li> <b>Next in thread:</b> <a href=\"0097.html\">Larry Masinter: \"Re: Draft functional requirements (strawman or woodman, you decide!)\"</a>\n<li> <b>Maybe reply:</b> <a href=\"0097.html\">Larry Masinter: \"Re: Draft functional requirements (strawman or woodman, you decide!)\"</a>\n<!-- reply=\"end\" -->\n</ul>\n<hr>\n<!-- body=\"start\" -->\n<pre>\n</pre>\n<HTML>\n<HEAD>\n<TITLE>Functional Requirements and Framework for Versioning on the WWW</TITLE>\n</HEAD>\n<BODY>\n\n<h2>Preamble</h2>\nDear all,<br>\n\n\n<BLOCKQUOTE> <p>During Fabio's pleasant visit to David's house, the two of\nus have decided to have a try at another draft of the functional\nrequirement document, to include some new requirements and to make\nexplicit some that we think have been implicit in the discussion so far.\nThe  requirements in this document are proposed as an additional step after\nDavid Fiander's; we do not claim that they are complete.\n\n<p>We have divided the requirements in three sections. A first short\nsection describes the rationale for versioning on the web. This rationale\nenumerates the goals as we see them for the whole project. All specific\nrequirements should support (and certainly should not hinder) the\nrealization of the goals. The Second section\ncontains global requirements for protocol development. These are things we\nthink are technically justified and that fulfil the rationale. They are\nseparated from the other requirements because their acceptance creates\nfurther constraints on other technical requirements. Finally we list some\nspecific requirements and that reflect our own analysis of the problem.\n\n<p>Also, we strongly agree with David Fiander's separation of versioning\nand configuration requirements, and propose a two-layer architecture for\nversioning on the web.  The first layer will address the simple problem of\n<EM>handling multiple versions of single resources.</EM> The second layer\nwill address the thornier problems of configuration management for multiple\nresources.  This layering separates concerns nicely, and also leads to an\nefficient work plan.  We can create a basic architecture for versioning,\nand maybe even have it on the standards track, while we're still arguing\nabout how to approach the more differentiated and ticklish problems of\nconfiguration management.\n\n<p>In practice this means that, while we should still take our own\nknowledge of configuration management into consideration insofar as it has an\nimpact on the lower-level versioning issues, we shouldn't spend time,\nefforts and flames on configuration problems until we are ready to solve\nthem.\n\n<p>Therefore we have decided to write down our view of the functional\nrequirements for versioning support on the WWW, with an emphasis on\nresource versioning only. We invite people to contribute any configuration\nmanagement requirements that may affect the development of the resource\nversioning layer.\n\n<p>At the end of specific requirements, you will find <em>[emphasized]</em>\nnotes comparing this note and David Fiander's one, noting and justifying\nchanges in wording, structure and issues.\n\n</BLOCKQUOTE>\n\n<H1>Functional Requirements and Framework for Versioning on the WWW</H1>\n\n<P>This document gives a brief rationale for versioning on the WWW,\nand presents some functional requirements based on the rationale.\n</P>\n\n<H2>Rationale</H2>\n\n<P>Versioning in the context of the world-wide web offers a variety of\nbenefits:</P>\n\n<UL>\n<LI>It allows more efficient management of large web sites.\n<LI>It allows concurrent and controlled access to resources by\nauthors and editors</LI>\n<LI>It can enhance the quality of annotation support\n(and other externally stored references) by preserving the\nhistorical record of changes to WWW resources</LI>\n<LI>It allows explicit semantic representation of\nsingle resources with multiple states</LI>\n<LI><EM>[Other rationale items to follow?]</EM></LI>\n</UL>\n\n<P>This document gives requirements for extending WWW standards and\nprotocols to obtain these benefits.</P>\n\n<H2>Global requirements</H2>\n\n\n<P>This section covers the overarching contraints that must\ninform and direct all the detailed requirements for specific features.\nThese encompass compatibility across different implementations, as well as\nwith current practice.\nTherefore, we believe the following to be the general requirements for\nversioning extensions:</P>\n\n<UL>\n<LI><EM>Stableness of versions.</EM> Any successful attempt to retrieve a\nnamed version of a resource will always retrieve exactly the same content.\nTo put it in another way, the content of a named version of a resource is\nimmutable (it is reliably either frozen or not available).\n\n<br><strong>[No one has made this explicit, yet this is the\n distinctive feature essential to versioning systems]</strong></li>\n\n<LI><EM>User Agent Interoperability.</EM>All\nversioning-aware user agents should be able to work with any\nversioning-aware HTTP server. It is acceptable for some user\nagent/server combinations to provide special features that are not\nuniversally available.\n\n<br><strong>[This has also been implicit, yet somehow\nforgotten. Better to\nspecify it]</strong></li>\n\n<LI><EM>Legacy User Agent Support.</EM> Servers should make versioned\nresources accessible to versioning-unaware user-agents\nin a format acceptable to them.\n<br><strong>[This is our justification for endorsing\nFiander's proposal that\nURLs must be able to specify version information.]</strong></LI>\n\n<LI><EM>Legacy Resource Support.</EM> The protocol must enable a versioning\naware server to work with existing resources and URLs. Special versioning\ninformation should not become a mandatory part of the protocol except where\nit is absolutely required. Version information cannot therefore be required\nin a URL for simple GET operations (and possibly also for POST).</LI>\n\n<LI><em>Separation of access to resources and access control</em> The protocol\nmust provide ways to reserve or release versioned resources that are separated\nfrom the ways to get to these resources. Provided that the required set of\nconsistency constraints are met before, during and after the modification of a\nversioned resource, no \"right way\" to access to a resource is enforced by the\nprotocol. For instance, a user may request a lock *after* a GET, may POST a\nresource without releasing the lock, and may request a lock within the means of\nthe protocol (HTTP connection) while getting the resource outside of it (FTP\naccess, direct file access, or simply because the right copy hung around her\ndisk after a previous access). This also provides a better policy for handling\nversioning through proxies. </LI>\n\n</UL>\n\n<H2>Functional requirements</H2>\n\n<P>The protocol should provide:</P>\n<UL>\n\n<LI>Access to specific named versions via a URL\n<br><strong>[Again, a part of one of David F.'s\nrequirements]</strong></li>\n\n<li>Specific named version URLs that are constructed from an opaque URL and an\nopaque version string.\n\n<br><strong>[Because the notation will be required to\noperate in the version control\nenvironment preferred by the website maintainer, it must be able to properly\ncontain arbitrary strings, which may be used by the VCS as version\nidentifiers.  While version information may be intelligible to the human\noperator, and perhaps to special-purpose clients, in the general case, we\nmust assume that the client treats the version as a black box.\n<br>This is David Fiander's justification copied in with a few minor\nchanges (we can't guarantee that version strings will be meaningful to a\nhuman).]</strong></li>\n\n\n<LI>Direct access to a server-defined \"default\", \"current\" or \"tip\" version\nof a resource.\n<br><strong>[This provides one of the simplest ways to\nguarantee legacy\nuser-agent compatibility, and legacy file compatibility. If no special\nversion URLs are used, the server can provide an intelligent default. This\ndoes not rule out the possibility of a server returning an error in case\nit believes that no such default exists.]</FONT></LI>\n\n<LI>A way to access common related URLs from a versioned URL, whether by\nserver query, URL computation, or some other way:\n<UL>\n<LI>root version(s) of this document</LI>\n<LI>predecessor version(s) of this document</LI>\n<LI>successor version(s) of this document</LI>\n<LI>default version of this document</LI>\n<LI>complete version topology for this document</LI>\n</UL>\n<strong>[This is a new one: *some* versions of a resource\nare special. It\nmust be possible in some way for a versioning-aware client to access\ncommon related versions to the one it currently is displaying. Possible\nsolutions include, but are not limited to: the server automatic adding\nheader fields to a versioned URL specifying the URL of the common\nrelated versions, the server providing a query method (\"who is the\nprevious version to this URL?\"), or a standardized way to compute\nrelated URL given a versioned URL. ]</strong></LI>\n\n\n<LI>Some way (e.g.  by URL inspection or server query) to determine that a\nURL points to a named version of a resource, and to tell the version\nidentification part from the resource identification part.\n<br>Note that the requirement that a user agent can determine a resource\nname (URL) and a version identifier supports only some comparison\noperations: It enables the determination that two version-containing URLs\ndesignate versions of the same resource. However, given the phenomenon of\nURL aliasing, it is insufficient to determine that they are <EM>not</EM>\nversions of the same resource.\n<br><strong>[This is a direct contradiction of one of David\nF.'s requirements. We\nfeel that access to the \"default\" version of a resource is an extremely\nimportant operation, that a browser should be able to perform at any time\nthat a versioned URL is seen. This is sort of a minimal \"browsing through\ntime\" requirement. Even if this kind of default access is not allowed for\nencapsulation reasons,\nthis requirement allows a browser to tell that a versioned resource has been\naccessed and then to invoke special versioning or configuration management\noperations on the resource. We also don't see that determining this information\nis any more pernicious that being able to determine that a URL contains a\nquery string -- indeed it's potentially more useful, as it tells you\nabout the identity of the referenced item, not one of its\nproperties.]</strong></LI>\n\n<LI>a way to request exclusive access to a version of a resource (LOCK).</LI>\n\n<LI>a way to release exclusive acccess to a resource (UNLOCK),</LI>\n\n<LI>A way for a user-agent to request a version identifier for a checked\nout version, with the understanding that it will not be used by any other\nuser-agent in the meantime. The server may refuse the service.</LI>\n\n<LI>a way to submit a resource as a version of an existing version of a\nresource (POST or PUT), and have the server attach it to the correct part of\nthe version tree. The client may propose a version identifier upon\nsubmitting the\nresource. The server may refuse to use it. </LI>\n\n<BR><strong>[ The last four functional requirements take\ncare of the last\nglobal requirements: version access is now logically separated from\naccess control (LOCK/UNLOCK) and updating. In terms of traditional CM, a\nCHECKOUT is a LOCK followed by a GET and a CHECKIN is a POST followed by\nan UNLOCK.\n<br> In this way, we get the advantage of separating access control (locking\nand unlocking of resources) from modification of resources. We also have\nmany more options for the assigment of version numbers depending on\nserver policy. The version identifier of a new resource can be\nnegotiated between the user-agent and the server at 3 points in time:\nwhen a lock is taken, when the lock is released, or when the resource is\nPOSTed. We also offer options (such as locking a resource without\nmodifying it) that will be useful in creating the configuration\nmanagement layer.\n<br>The hardest thing will be assuring that clients can work with servers\nvarying in locking policy from those that spawn versions rather than\nimplement locks, to those that allow optional locking, to those that\n<em>require</em> locking (and possibly explicit control of version\nbranching at the same time). Even without getting into config\nmanagement, server policy on these issues varies a lot: we want a\nprotocol that will allow user-agents to work with all servers,\nregardless of strategy.]</strong>\n\n</BODY></HTML>\n</pre>\n<!-- body=\"end\" -->\n<hr>\n<p>\n<ul>\n<!-- next=\"start\" -->\n<li> <b>Next message:</b> <a href=\"0097.html\">Larry Masinter: \"Re: Draft functional requirements (strawman or woodman, you decide!)\"</a>\n<li> <b>Previous message:</b> <a href=\"0095.html\">Jim Whitehead: \"Proposed agenda for San Mateo Meeting\"</a>\n<!-- nextthread=\"start\" -->\n<li> <b>Next in thread:</b> <a href=\"0097.html\">Larry Masinter: \"Re: Draft functional requirements (strawman or woodman, you decide!)\"</a>\n<li> <b>Maybe reply:</b> <a href=\"0097.html\">Larry Masinter: \"Re: Draft functional requirements (strawman or woodman, you decide!)\"</a>\n<!-- reply=\"end\" -->\n</ul>\n", "encoding": "ascii"}