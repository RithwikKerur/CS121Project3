{"url": "https://www.ics.uci.edu/~jacobson/ics23/LabManual/00a-LabGrading.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\r    \"http://www.w3.org/TR/html4/loose.dtd\">\r<html>\r<head>\r   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r   <meta name=\"GENERATOR\" content=\"Mozilla/4.79 (Macintosh; U; PPC) [Netscape]\">\r   <title>Lab Assignment Guidelines and Grading</title>\r<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\">\r</head>\r\r<body>\r\r<div class=\"title\">\r<center>\r<h2>Lab Assignment Guidelines, Grading and Due Dates</h2>\r</center>\r</div>\r\r<div class=\"section\">\r<hr>\r<h3>Preparation</h3>\r</div>\r\r<p> To be ready for each lab assignment, be sure to read it thoroughly before you come to the Help Center, and to review any material the lab assumes you know.  Coming prepared lets you spend your time at the Center working on the assignment instead of getting ready to work on it. </p>\r\r<p>For each lab, you will need the lab assignment. You will also need a way to back up your work. If additional items are needed for a particular lab, we will list them in that lab assignment.</p>\r\r<div class=\"section\">\r<hr>\r<h3>Working on and turning in labs</h3>\r</div>\r\r<p>You have more time to complete some assignments than others; the due dates appear below. Take the length of time allotted for an assignment as an indication of how long it will take you to do the work; don&#146;t waste the first week of a two-week assignment! As you work on your assignments, we encourage you to seek assistance and advice from the TAs and the instructor about the best way to do them. </p>\r\r<p>You turn in your assignments via Checkmate, a Web application. To use Checkmate, simply go to <font class = \"codefacesmall\">checkmate.ics.uci.edu</font>, log in using your UCInetID, and follow the instructions there. If you get a message about security certificates, just click \"Continue.\" (You must have a UCInetID to use Checkmate. If you have not yet activated your UCInetID, do so right away; instructions for doing so are on the <a href=\"https://ucinetid2.nacs.uci.edu/activate/menu.html\">UCInetID Activation</a> page.\r\rWhile Checkmate has proved to be reliable, if you think it is not working correctly, read the instructions carefully and try your action again. If you are then still having problems, <a href=\"mailto:jacobson@ics.uci.edu\">send email to the instructor</a> describing the problem as precisely as possible. We can only fix problems we know about!\r\r<div class=\"section\">\r<hr>\r<h3>Backups</h3>\r</div>\r\r<p>We require that you keep your own backup, a computer copy of each assignment, just in case something happens to the copy you turn in. For example, if the Checkmate database gets hopelessly corrupted (which has yet to happen) we may need you to provide us with another copy of your work. If you do not have work we can grade, you will receive no grade for it.</p>\r\r<div class=\"section\">\r<hr>\r<h3>Lab room availability</h3>\r</div>\r\r<p>You may work in Help Center any time it is open, and in ICS 189 and ICS 192 labs at any time they are open except when a non-ICS23 class is in session.  Additional information about when you can use a lab room is given in the  <a href=\"//www.ics.uci.edu/~jacobson/ics23/CourseReference.html\">Course Reference</a>).</p>\r\r<p>The scheduled and open hours for all lab rooms are on the <a href=\"http://www.ics.uci.edu/~lab/lab_schedule/index.php\">ICS Lab hours</a> Web page and often on the labs&#146; doors. </p>\r\r<div class=\"section\">\r<hr>\r<h3>Allowed programming environments</h3>\r</div>\r\r<p>We use Java as the language of practice in this course, as implemented in Sun&#146;s Java Standard Edition SDK version 1.7 (also called Java 7.0). We also provide, and take as the course standard, the Eclipse Java programming environment; for labs where we provide some existing code, it will be given as class files that are part of a provided Eclipse project</p>\r\r<p>You may complete your lab work anywhere, using any Java environment to which you have legitimate access; in particular, you can work at home and you don&#146;t have to use Sun&#146;s version of Java. However, to be fair, and to be sure we can check your running program, to obtain full credit for an assignment <i>your work must compile and run correctly under Sun&#146;s Java Standard Edition SDK version 7 in the Eclipse environment on the ICS Lab network</i>. In particular, it is irrelevant whether your program runs perfectly on some other system: if it does not run on the ICS Lab network in Eclipse, using Java 7, you will not receive full (and may not receive any) credit for it.</p>\r\r<p>If you have not used Sun&#146;s Java or not used Eclipse, you can quickly become familiar with them by reading and doing the exercises in the <i>Using Eclipse</i> section of the <a href=\"http://www.ics.uci.edu/~jacobson/ics21/LabManual/02-OrientationToLab.html\">Orientation to the Lab</a> chapter of the <a href=\"//http:www.ics.uci.edu/~jacobson/ics21/LabManual/00-LabManual.html\">ICS 21 Lab Manual</a>.</p>\r\r\r<div class=\"section\">\r<hr>\r<h3>Grading and due dates</h3>\r</div>\r\r<p>Every lab assignment in this manual describes the assignment itself and what needs to be turned in. Here are the labs, the percentage they count towards your total lab grade, and their due dates:</p>\r\r<center>\r<table border=\"0\" cellspacing=\"2\" cellpadding=\"3\">\r<tr align=\"left\">\r\t<td><font class = \"normal\">Unearthing the Past</font></td>\r\t<td><font class = \"normal\">20%</font></td>\r\t<td><font class = \"normal\">April 18, 2012</font></td>\r</tr>\r<tr align=\"left\">\r\t<td><font class = \"normal\">Black and White</font></td>\r\t<td><font class = \"normal\">25%</font></td>\r\t<td><font class = \"normal\">May 4, 2012</font></td>\r</tr>\r<tr align=\"left\">\r\t<td><font class = \"normal\">Rock and Roll Stops the Traffic</font></td>\r\t<td><font class = \"normal\">25%</font></td>\r\t<td><font class = \"normal\">May 23, 2012</font></td>\r</tr>\r<tr align=\"left\">\r\t<td><font class = \"normal\">Searching for a Better Way</font></td>\r\t<td><font class = \"normal\">30%</font></td>\r\t<td><font class = \"normal\">June 8, 2012</font></td>\r</tr>\r</table>\r</center>\r\r<p>All labs are due by 11 pm <i>sharp</i> on the dates given. If a lab is turned in later than due, it incurs a late penalty, as discussed below. </p>\r\r<p>Some of the exercises have optional work included.  You may earn up to one additional assignment point by doing optional work, depending upon how much of the extra work you do and how well you do it, or for doing an amazing job on a lab (see below). This point is added to your total, but not to the total possible number of points; thus, not undertaking this work will not hurt the lab portion of your course grade.  (Note that lab assignment points do not &#147;spill over&#148; into exam points; even if optional points put you over 100% of the lab points, only 100% of the lab points will be counted when computing your course grade.) <i>You cannot get points for optional work unless <span style=\"text-decoration: underline;\">all</span> the required work is complete and correct.</i></p>\r\r<p>We will grade your programs using the following five-point scale. Note that if you get four points, we consider that full credit for the lab&#151;if you get four points on every assignment, you will have 100% of the possible lab points. Note that your grade depends on issues of programming design and style as well as those of correctness (Does the program function as it should?) and completeness (Does the program contain exactly the features required?): </p>\r\r<blockquote>\r<p><b>0 points</b>\tYou did not turn in any work.</p>\r<p><b>1 point</b> Work that it is meager and poorly done. It would not be considered at all acceptable in academic or professional circles.</p>\r<p><b>2 points</b>\tWork of reasonable quality and completeness&#151;a program that runs and implements at least the main requirements of the assignmentand shows at least a basic understanding of the material. Presentation may be lacking (e.g., written work shows poor composition, a spreadsheet is hard to read, a database is poorly organized, a program& is hard to follow or has a design that is cumbersome).</p>\r<p><b>3 points</b>\tWork of high quality that is complete and well presented&#151;with perhaps a few minor errors and/or design or style problems. The grade for good, solid&#151;but not extraordinary&#151;work.</p>\r<p><b>4 points</b>\tWork of very high quality that demonstrates a full and complete understanding of the material the lab covers with a very polished presentation; any programming component of the assignment is complete (contains exactly the features specified) and correct (functions as it should, with no errors). Normally the highest grade awarded.</p>\r<p><b>5 points</b>\tWork of the highest professional or academic quality; it would earn highest praise from a professional or professor.  Expect this grade to be very rarely awarded.</p>\r</blockquote>\r\r<p>If it is difficult to determine whether your work is best represented by a score of x or x + 1 points (x ranging from 0 to 4), we may award a grade of x + 0.5 (that is, half points may be awarded).  Expect this to be an unusual event. </p>\r\r<p>Your programs will be graded mostly on their correctness and completeness, but will also depend on other qualities of your program, such as efficiency, ease of use, reliability, modifiability, clarity, how quickly and easily your code can be understood, the reasonableness of your design and how well the programs follow the class style standards. A professional-quality program must score highly in all these categories&#151;and part of what this class is all about is to help you learn how to write professional programs. In particular, <i>you can lose points for poor design or bad programming style, even if your program correctly and completely implements the functional requreiments</i>. </p>\r\r<p>If an assignment has specific grading criteria that add to or extend the criteria given here, the assignment will describe them.</p>\r\r<div class=\"section\">\r<hr>\r<h3>Reviewing graded assignments</h3>\r</div>\r\r<p>If you want to review your graded assignment, you can do so; just go the the Help Center and ask the TA on duty to review your assignment with you. If you have specific questions or concerns about the grade you received, go the Help Center when the TA who grades your work is on duty and review the assignment with her or him.</p>\r\r<div class=\"section\">\r<hr>\r<h3>Partial and late assignments</h3>\r</div>\r\r<p>For a lab to be on time, your assignment must be submitted to Checkmate by the due date and time. Any assignment submitted after that time will incur a penalty of one point for each day or part of a day it is late. For example, if you earn three points and the assignment is two days late, your score will be one point (out of four).</p>\r\r<p> We grade the latest version of an assignment submitted. For instance, if you turn in an assignment on May 5 and again on May 6, we will grade the assignment submitted on May 6. In particular, you cannot submit a partially complete assignment for a partial grade. For instance, suppose you submit part of an assignment on May 2 and the rest on May 3. We will only grade the May 3 submission and treat it as your entire assignment.</p>\r\r<p>We will not penalize you for a late assignment if it is late because of significant circumstances beyond your control, such as an incapacitating illness or injury or a major emergency.  <i>Conflicts with due dates for your other classes or your job are not sufficient cause to waive the penalty</i>. Should you be unable to turn in an assignment when due, it is best to notify the instructor ahead of time and make arrangements for an alternative due date. If you cannot provide advance notice, turn in the assignment as soon after the due date as possible, and, if you think the penalty should be waived, email the instructor and ask for a penalty waiver; include with it an explanation of the unavoidable circumstance that prevented you from turning in the assignment when it was due.</p>\r\r<div class=\"section\">\r<hr>\r<h3>Lab assignments and academic honesty</h3>\r</div>\r\r<p> We take &#147;cheating&#148;&#151;academic dishonesty&#151;very seriously. Your work in this class, including your lab assignments, is subject to UCI&#146;s and ICS&#146; academic honesty policies, as well as the policies for this course. See the <a href=\"//www.ics.uci.edu/~jacobson/ics23/CourseReference\">Course Reference</a> for links to the ICS and UCI policies, and for the general policies for this course. </p>\r\r<p>There are also some course academic honesty policies specific to lab assignments: </p>\r\r<ol>\r<li><p>Some of you have written code, for some other class or an employer, similar to what you would write to complete our lab exercises. It&#146;s quite all right to adapt your own previous class work for use in this class, if you wish. You also may reuse work you did for your employer, provided you have that employer&#146;s permission and our permission to do so. It is <i>not</i> all right to adapt someone else&#146;s work without our explicit permission and, often, theirs&#151;doing so would be a violation of academic honesty policies and potentially a violation of copyright laws.  </p></li>\r\r<li><p>You can adapt any code course staff gives to you, provided you note in your program from whom you received the information. (Not giving others credit for work they did makes it appear as if that work was your own, and that, too, is a violation of academic honesty policies.) You may not use code others give you, such as code you received in some other class or during LARC or CODE tutorial sessions, unless you have our explicit permission to do so.</p></li>\r\r<li><p>You may adapt code from a text or other source only if we have given you explicit permission to do so, such as by a statement to that effect in a lab exercise, an announcement in lecture or lab, or an agreement you reach with the instructor. In any event, you must document that your work is based upon another&#146;s, what work it is, and who gave you permission to use it; anything less is a major violation of academic integrity.</p></li>\r\r<li><p>Your work may not contain work done, in whole or in part, by another person, except as described above. </p></li>\r\r<li><p>Your assignment cannot be the result of joint work with another person. In particular, a person cannot work on an assignment with another person and then turn all or a part of it in as if it was her or his individual work. Turning in the work of another student who completed an assignment during a previous quarter of ICS 23 as if it were your own work is a particularly serious infraction of academic honesty policies.</p></li>\r</ol>\r\r<p><i>We compare your work, both by hand and electronically, with assignments submitted by students in this and other classes</i> and sometimes to other sources, such as code from a book or the Internet. If we find similarities that appear to indicate that your assignment contains work that is not your own, except as allowed above, we will investigate to see if academic honesty polices were violated. If they were, you could receive a zero for the assignment, a lower couse grade than you otherwise would have received&#151;including an F&#151;and, in egregious or repeated cases of academic dishonesty, expulsion from the ICS major or even from UCI. </p>\r\r<div class = \"history\">\rRevision history for text to this point:\r<br><br>Prepared by Norman Jacobson, September 1996, from similar ICS 23 materials\r<br>Revised for the Spring 1997 offering of ICS 23, March 1997\r<br>Revised for the Spring 1998 offering of ICS 23, March 1998\r<br>Revised for the Fall 1998 offering of ICS 23, September 1998\r<br>Revised for the Winter 1999 offering of ICS 23, December 1998\r<br>Minor revisions  for the Fall 2001 offering of ICS 23, September 2001\r<br>Minor revisions  for the Winter 2002 offering of ICS 23, December 2001\r<br>Revised for the Spring 2002 offering of ICS 23, March, 2002\r<br>Revised to be more explicit about academic dishonesty, to state the penalty for\r<br>&nbsp;&nbsp;mislabeling folders and to describe LARS more fully, by Norman Jacobson, March 2002\r<br>Minor revisions  for the Winter 2003 offering of ICS 23, December 2002\r<br>Minor revisions for the Winter 2004 offering of ICS 23 to clarify some text and to reflect the use of Checkmate, January 2004\r<br>Minor revisions for the Fall 2005 offering of ICS 23, June 2005, the Spring 2006 offering of ICS23, March 2006 & the Fall 2006 offering, August 2006\r<br>Revision to reflect late policy for last lab is the same as other labs and other, minor, revisions for clarity, December 2006\r<br>Minor revisions for clarity, by Norman Jacobson, December 2008 and March 2009\r<br>Minor updates to reflect use of the Help Center and to update due dates  for Spring 2010, by Norman Jacobson, March 2010\r<br>Made minor copy edits, and updated due dates for Spring 2011, by Norman Jacobson, March 2011\r<br>Made minor copy edits, and updated due dates for Spring 2012, by Norman Jacobson, March 2012\r</div>\r\r<div class=\"section\">\r<hr>\r<h3>Writing Professional Programs</h3>\r</div>\r<p>Using a good coding style is important, for many reasons.  Professional\rprogrammers need not only to be able to read and understand their own code,\rmonths or even years after originally writing it, but also to read\rand understand code written by others, often in the absence of the\roriginal programmer.  There is nothing more\rfrustrating to a programmer than inheriting responsibility for someone else's\rcode, only to find that the code is designed poorly, written cryptically,\rand documented shabbily (or not at all). In professional circles, it is critical that programmers write code in a clear style with\radequate documentation; in this course, a consistent style makes assignments easier to understand, and thus for us to grade accurately.</p>\r\r<p>The Java code that you write for this course should follow the style and documentation conventions discussed below. For any areas of style not addressed, use the style of code given to you for the particular assignment. If there is no provided code for the assignment, or that code does not address the style issue, follow the style used in the course textbook. And if that does not address the issue, ask the course staff member grading your work what style to employ.</p>\r\r <p>If the staff member grading your work has specific style requirements that differ from those here, s/he will let you know. Do follow them!</p>\r\r<font class=\"Normal\">\r<ul>\r\t<li><p>Do not change the names we give to, or functioning of, code we provide to you. In particular, leave the names of classes, interfaces, methods and any other public items alone. Modifying the names or actions of provided code could easily break the system, as other components of the system on which you are working rely upon those names and actions.</p></li>\r\t\r\t<li> <p>About comments:</p></li>\r\t<ul>\r\t\t<li><p>It is crucial that you include comments at the top of each .java file that you write or modify that include your name, your student ID number and your UCInetID. (There is no need to include comments in files we give you that you do not change.)</p></li>\r\r\t\t<li><p>Every class, method and field should have a comment which briefly\rexplains its purpose.  For each method, include a high-level description of the algorithm it uses, if that algorithm isn&#146;t obvious from reading the code. Also document the purpose of the method&#146;s parameters and any assumptions about them. Describe what the method returns (if it is not <font class = \"codeFaceSmall\">void</font>). </p></li>\r\r\t\t<li><p>Within the body of your methods, comment code whose purpose is not\robvious.  It is <i>not</i> necessary to include\ra comment on every line.  It is appropriate, instead, to have one\rcomment which explains the purpose of a group of several related lines of\rcode.</p></li>\r\t</ul>\r\t<li><p>All constants, except obvious uses of 0 or 1, should be defined and named meaningfully.\rFor example, if you were writing an array implementation of a stack with\ra hard-coded maximum size of 256 elements, define a static final\rfield such as MAXIMUM_ELEMENTS, and use that field in your code, rather\rthan the literal integer 256.</p></li>\r\r\t<li><p>Naming conventions for classes, members, and constants:</p>\r      <ul>\r\t \t<li><p>Class names should be capitalized.  Class names with multiple words\r            should have each subsequent word capitalized, with no underscore\r            separating the words (e.g. Tunes, IrishFolkTunes).</p></li>\r\r\t\t<li><p>Names of class members (methods and fields) should begin with a\r            lowercase letter.  Subsequent words should be capitalized, with no\r            underscore separating the words (e.g. playSong(), songTitle).</p></li>\r\r\t\t<li><p>Named constants should be named using all capital letters, with\r            underscores separating the words (e.g. EULER, MAXIMUM_ELEMENTS).</p></li>\r\r\t\t<li><p>Variable, parameter, method, and class names&#151;in fact, all program names&#151; should be meaningful, except that counters or other loop control\rvariables may have simple names such as <font class = \"codeFaceSmall\">i</font> or <font class = \"codeFaceSmall\">j</font>, as tradition imparts meaning to these names.</p></li>\r  \t</ul>\r\t<li><p>Each method should do one task, well; in particular, <font class = \"codefacesmall\">main()</font> should just get the ball rolling, with the bulk of work done indirectly via a method call or two. If a method is longer than about 10 to 20 lines, think carefully about whether it is undertaking too many chores or directly executing details that should instead be done by other, called-upon methods; if so, rewrite the method so that it calls other methods to handle the additioal chores or details.</p></li>\t\r\t\r\t<li><p>Every field and method within a class should be declared using an access control modifier (i.e., <font class = \"codeFaceSmall\">public</font>, <font class = \"codeFaceSmall\">private</font>, or <font class = \"codeFaceSmall\"> protected</font>). Protected access should be used only when truly necessary.</p></li>\r\r\t<li><p>Whitespace should appear between each method argument and around each\r      binary operator.  For example, <font class = \"codeFaceSmall\">createFile(\"alex.out\", WRITE)</font>\r      instead of <font class = \"codeFaceSmall\">createFile(\"alex.out\",WRITE)</font>; <font class = \"codeFaceSmall\">a + b</font> instead\r      of <font class = \"codeFaceSmall\">a+b</font>.</p></li>\r\r\t<li><p>One single line of code should typically not be longer\r      than 70 to 80 characters.  Don&#146;t be afraid to break up long lines into\r      multiple lines.  For example, if you have a method call with a large number of\r      parameters, put some on one line, some on the next, etc., such that\r      each line is no longer than 80 characters.</p></li>\r\r\t<li><p>Matching opening and closing curly braces should be aligned in the\r      same column.  This means that the opening curly brace which follows\r      an  <font class = \"codeFaceSmall\">if </font> statement should appear directly below the letter <font class = \"codeFaceSmall\">i </font>\r      in <font class = \"codeFaceSmall\">if </font> and <i>not</i> on the same line as the conditional expression.</p></li>\r\r\t<li><p>All statements within curly braces should be indented about four spaces\r      (or one tab) relative to the brace.  A statement should not\r      appear on the same line as the opening curly brace.</p></li>\r\r\t<li><p>There are two style rules we enforce with particular rigor in this class because violating them indicates either a very poor program design or often causes major, difficult-to-catch errors:</p>\r\t<ol>\r\t\t<li><p>You may not use a <font class = \"codeFaceSmall\">break</font> except to break out of a <font class = \"codeFaceSmall\">case</font> of a <font class = \"codeFaceSmall\">switch</font> statement.</p></li>\r\r\t\t<li><p>You may not combine the <font class = \"codeFaceSmall\">++</font> and <font class = \"codeFaceSmall\">--</font> shortcut operators with any other expression. For example <font class = \"codeFaceSmall\">A[++i] = i;</font> is not allowed (it should be <font class = \"codeFaceSmall\">++i; A[i] = i;</font>).</p></li>\r</ol>\r</li>\r</ul>\r</font>\r\r<p><i>Remember that a significant violation of style standards could result in a lower score on your lab.</i></p>\r\r<div class=\"history\">\rWritten by David G. Kay (1990), including much material adapted with permission from Appendix E of\r<br>&nbsp;&nbsp;<i>Programming for People/Pascal</i> by David G. Kay (Mayfield, 1985)\r<br>Revisions made to reflect THINK Pascal by Joe Hummel and Norman Jacobson, January, 1992\r<br>Revised by Norman Jacobson, Fall, 1992; Grading Form by David G. Kay, Winter, 1991\r<br>Revised by Norman Jacobson, Fall 1993 and Fall 1994\r<br>Revisions made to reflect CodeWarrior C++ by Norman Jacobson, April 1996\r<br>Revised by Norman Jacobson for ICS 23E, September 1996\r<br>Major revisions for the ICS23 Spring 1997 by Norman Jacobson, March 1997;\r<br>&nbsp;&nbsp;ICS 23 Spring 1998, March 1998; ICS23 Fall 1998, September 1998;\r<br>&nbsp;&nbsp;ICS23 Winter 1999, December 1998\r<br>Revised to reflect the use of Java by Norman Jacobson, September 2001\r<br>Minor revisions for the Winter 2002 offering of ICS 23 by Norman Jacobson, December 2001\r<br>Revised to clarify some aspects of style standards by Norman Jacobson, March 2002\r<br>Revised  by Norman Jacobson in December 2002 to include more details about proper <br>&nbsp;&nbsp;style taken from the Winter 2002  version of similar document by Alex Thornton;\r<br>&nbsp;&nbsp;Thornton&#146;s document was adapted from Ray Klefstad&#146;s coding standards.\r<br>Minor revisions for ICS 23 Winter 2004 by Norman Jacobson, January 2004; \r<br>&nbsp;&nbsp;for ICS 23 Spring 2004, January 2004; ICS 23 Fall 2004, September 2004;\r<br>&nbsp;&nbsp;ICS23 Spring 2006, March 2006 and May 2006; ICS23 Fall 2007,\r<br>&nbsp;&nbsp;December 2006; ICS23 Winter 2008, December 2007\r<br>Revised to make explicit that methods should usually be short and that \r<br>&nbsp;&nbsp;names and functioning of provided code must not be changed, by \r<br>&nbsp;&nbsp;Norman Jacobson, Ianaury 2009 \r<br>Cleaned up a bit by Norman Jacobson, March 2010 & March 2011\r</div>\r\r</body>\r</html>\r\r", "encoding": "ascii"}