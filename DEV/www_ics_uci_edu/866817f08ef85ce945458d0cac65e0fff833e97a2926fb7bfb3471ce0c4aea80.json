{"url": "https://www.ics.uci.edu/~ejw/authoring/props/draft-hopmann-collection-props-00.txt", "content": "WebDAV Working Group                Alex Hopmann, Microsoft Corporation \nInternet Draft                      Lisa Lippert, Microsoft Corporation            \nDocument: draft-hopmann-collection-props-00.txt              Dec, 1998 \n \n                  Additional WebDAV Collection Properties \n \n \nStatus of this Memo \n    \n   This document is an Internet-Draft.  Internet-Drafts are working \n   documents of the Internet Engineering Task Force (IETF), its areas, \n   and its working groups.  Note that other groups may also distribute \n   working documents as Internet-Drafts. \n    \n   Internet-Drafts are draft documents valid for a maximum of six \n   months and may be updated, replaced, or obsoleted by other documents \n   at any time.  It is inappropriate to use Internet-Drafts as \n   reference material or to cite them other than as \"work in progress.\" \n    \n   To view the entire list of current Internet-Drafts, please check the \n   \"1id-abstracts.txt\" listing contained in the Internet-Drafts Shadow \n   Directories on ftp.is.co.za (Africa), ftp.nordu.net (Northern \n   Europe), ftp.nic.it (Southern Europe), munnari.oz.au (Pacific Rim), \n   ftp.ietf.org (US East Coast), or ftp.isi.edu (US West Coast). \n    \n   A revised version of this draft document may be submitted to the RFC \n   editor as a Proposed Standard for the Internet Community.  \n   Discussion and suggestions for improvement are requested.  This \n   document will expire before June, 1999. Distribution of this draft \n   is unlimited. \n    \n    \nAbstract \n    \n   The WebDAV protocol defines a basic set of properties that should be \n   understood by all DAV servers. This document defines a small set of \n   additional properties that are very useful for displaying navigation \n   interfaces for WebDAV enabled web sites. \n    \nTable of Contents \n    \n1.   Introduction .....................................................2 \n1.1.      Notational Conventions ......................................2 \n2.   The Collection Properties ........................................2 \n1.2.      The childcount Property .....................................2 \n1.3.      The defaultdocument Property ................................3 \n1.4.      The id Property .............................................3 \n1.5.      The iscollection Property ...................................3 \n1.6.      The ishidden Property .......................................4 \n1.7.      The isstructureddocument Property ...........................4 \n1.8.      The hassubs Property ........................................5 \n1.9.      The nosubs Property .........................................5 \n1.10.       The objectcount property ..................................6 \n1.11.       The reserved Property .....................................6 \n1.12.       The visiblecount Property .................................6 \n3.   Security Considerations ..........................................6 \n4.   References .......................................................7 \n5.   Author's Addresses ...............................................7 \n    \n    \n    \n1.   Introduction \n    \n   Collections are a type of resource supported by DAV that may have \n   special properties.  The DAV draft [DAV] defines how to interact \n   with collections using methods such as MKCOL and PROPFIND, and \n   defines a number of properties which were essential to the proper \n   use of collections.   \n    \n   The properties in this draft are not as essential to using \n   collections, therefore they are optional.  However, the authors find \n   these to be useful properties to clients, especially to save time \n   and processing and to know how to display collections. \n    \n   Many of these properties are merely hints to a client user interface \n   to help it display collections and options on collections in a \n   manner that is most helpful to the user. \n\n1.1. Notational Conventions \n    \n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \n   \"SHOULD\", SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this \n   document are to be interpreted as described in RFC 2119 [KEYWORDS]. \n\n2.   The Collection Properties \n    \n   This document defines an additional set of properties for use by the \n   WebDAV [1] protocol. These properties provide hints that make it \n   easier to provide efficient user interfaces that provide navigation \n   for WebDAV enabled web sites. \n    \n   If this set of properties is supported, then ALL the properties \n   listed in this draft MUST be supported. \n    \n   This document follows the same collections as the WebDAV protocol \n   specification [1] for defining these properties. \n\n1.2. The childcount Property \n    \nName:          childcount \nNamespace:     DAV: \nPurpose:       Specifies the number of contained resources. \nDescription:   This property identifies the number of resources \n               contained in a given collection. It contains a single \n               integer value with the count of contained resources. \n               This property includes child collections in the count. \nDefinition:    <!ELEMENT childcount (#PCDATA) > \n    \n1.3. The defaultdocument Property  \n    \nName:          defaultdocument \nNamespace:     DAV: \nPurpose:       Specifies the default document for a collection. \nDescription:   This property contains a URL that identifies the default \n               document for a collection.  This is intended for \n               collection owners to be able to set a default document, \n               for example index.html or default.html.  If this \n               property is absent, other means must be found to \n               determine the default document.   \n               If this property is present but null, the collection \n               does not have a default document and the collection \n               member listing should be used (or nothing). \nNotes:         The server implementation does not need to store this \n               property in the normal property store (the property \n               could well be live). \n    \n   <!ELEMENT defaultdocument (#PCDATA) > \n    \n1.4. The id Property  \n    \nName:          id \nNamespace:     DAV: \nPurpose:       Specifies a unique identifier for this resource. \nDescription:   This property contains a globally unique string that \n               identifies this resource.  This property MUST be unique \n               across the entire Internet.  The id property does not \n               change if the resource changes.  This property is \n               intended to aid in recognition of a resource even when \n               moved, updated or renamed.  The value of this property \n               is a URI.  The URI could contain a string UUID as \n               defined by ISO for RPC [RPC] but any unique URI is \n               sufficient. \nDefinition:    <!ELEMENT id (#PCDATA) > \n\n1.5. The isfolder Property  \n    \nName:          isfolder \nNamespace:     DAV: \nPurpose:       Specifies whether or not a collection should appear as a \n               folder. \nDescription:   This property identifies whether or not a collection \n               should appear as a folder. It contains either the values \n               \"1\" or \"0\".  If \"1\" or absent, the collection should be \n               displayed as a folder.  If \"0\", the collection should \n               NOT be displayed as a folder.  For example, a structured \n               document (see below) should have \"isfolder\" set to \"0\". \nDefinition:    <!ELEMENT ishidden (#PCDATA) > \n    \n1.6. The ishidden Property  \n    \nName:          ishidden \nNamespace:     DAV: \nPurpose:       Specifies whether or not a resource is hidden. \nDescription:   This property identifies whether or not a resource is \n               hidden. It contains either the values \"1\" or \"0\". This \n               can be considered a hint to the client UI: under normal \n               conditions, for non-expert users, hidden files should \n               not be exposed to users.  The server may omit the hidden \n               resource from some presentational listings, otherwise \n               the client is responsible for removing hidden resources \n               when displaying to the user.  If this property is \n               absent, the collection is not hidden. Since this \n               property provides no actual form of protection to the \n               resources, this MUST NOT be used as a form of access \n               control and should only be used for presentation \n               purposes. \nUsage example: Many file systems have the option to hide files from the \n               user, but the user can, with special commands, override \n               the hiding.\nDefinition:    <!ELEMENT ishidden (#PCDATA) >\n\n1.7. The isstructureddocument Property  \n    \nName:          isstructureddocument \nNamespace:     DAV: \nPurpose:       Specifies whether the resource is a structured document. \nDescription:   A structured document is a collection (iscollection \n               should also be true), so COPY, MOVE and DELETE work as \n               for a collection.  The structured document may behave at \n               times like a document.  For example, clients may wish to \n               display the resource as a document rather than as a \n               collection. This contains either \"1\" (true) or \"0\".  If \n               this property is absent, the collection is not a \n               structured document. \n               This property can also be considered a hint for the \n               client UI: if the value of \"isstructureddocument\" is \n               \"1\", then the client UI may display this to the user as \n               if it were single document.  This can be very useful \n               when the default document of a collection is an HTML \n               page with a bunch of images which are the other \n               resources in the collection:  only the default document \n               is intended to be viewed as a document, so the entire \n               structure can appear as one document. \n               A Structured document may contain collections.  A \n               structured document must have a default document (if the \n               \"defaultdocument\" property is absent, the default \n               document is assumed by the client to be index.html).\nDefinition:    <!ELEMENT isstructureddocument (#PCDATA) > \n    \n1.8. The hassubs Property \n    \nName:          hassubs \nNamespace:     DAV: \nPurpose:       Identifies whether this collection contains any \n               collections which are folders (see \"isfolder\"). \nDescription:   This property identifies whether or not a folder \n               contains sub-folders, from the point of view of client \n               display. Sub-folders are child collections for which \n               \"isfolder\" = \"1\".   \n               The \"hassubs\" property contains either the values \"1\" \n               (yes) or \"0\" (zero=no).  If absent, nothing can be \n               guessed about whether the collection has sub-folders. \n               This property is useful for the efficient display of \n               hierarchy user interfaces. \n               If \"hassubs\" = \"1\", then \"isfolder\" should also be \"1\" \n               so that clients understand that the folder can be \n               expanded to view its children. \nDefinition:    <!ELEMENT hassubs (#PCDATA) > \n    \n1.9. The nosubs Property \n                  \nName:          nosubs \nNamespace:     DAV: \nPurpose:       Identifies whether this collection allows child \n               collections to be created. \nDescription:   This property identifies whether or not a collection \n               allows child collections to be created. It contains \n               either the values \"1\" or \"0\" (\"1\" indicates that the \n               collection does not allow child collections). While this \n               data is redundant with that returned by the OPTIONS \n               method, providing this information as a property allows \n               better performance since the client can verify the \n               behavior ahead of time without having to issue an \n               individual OPTIONS request on every collection it \n               encounters.  If absent, nothing can be guessed about \n               whether the collection allows sub-collections. \n               This property can also be considered to be a hint to the \n               UI about displaying options to the user (the UI might \n               eliminate the option to create a child collection).   It \n               is different from a \"create child\" access right, because \n               the client UI may want to display a \"create child \n               collection\" option without trying to find out if the \n               user has permissions.  This property can be used to \n               suggest that creating child collections just doesn't \n               make sense on this collection no matter what rights the \n               user has.  It is most useful on special-purpose \n               collections, such as a deleted files collection or a \n               collection which represents a device such as a printer. \n               This property should not be construed as meaning that \n               sub-collections do not already exist on the collection - \n               it simply prevents new collections from being created by \n               the client. \nDefinition:    <!ELEMENT nosubs (#PCDATA) >  \n    \n1.10.      The objectcount property \n    \nName:          objectcount \nNamespace:     DAV: \nPurpose:       To count the number of non-folder resources in the \n               collection. \nDescription:   This is different from childcount in that it omits \n               counting child collections for which \"isfolder\" = \"1\".   \nDefinition:    <!ELEMENT objectcount (#PCDATA) > \n    \n1.11.      The reserved Property \n    \nName:          reserved \nNamespace:     DAV: \nPurpose:       Specifies whether or not the collection is reserved. \nDescription:   A reserved collection is one that is specially managed \n               by the server and cannot be deleted, renamed, or moved \n               by the client. It contains either the values \"1\" or \"0\". \n               Attempts to MOVE or DELETE a reserved collection will \n               fail, and this SHOULD be reflected in the client UI.  If \n               absent, the collection should NOT be reserved.  The \n               server may allow clients to set this property. \n               It may make sense to also specify that this collection \n               is reserved in the resourcetype; however, in most ways \n               this behaves like a normal collection. \nDefinition:    <!ELEMENT reserved (#PCDATA) > \n    \n1.12.      The visiblecount Property \n    \nName:          visiblecount \nNamespace:     DAV: \nPurpose:       Counts the number of visible non-folder resources in the \n               collection. \nDescription:   This is the most immediately useful property for the \n               client UI to use to display the sizes of collections for \n               users.  The client UI could also display progess when \n               downloading a long list of children in a collection if \n               it knows the total number in advance.  This counts all \n               children for which \"ishidden\" = \"0\" and \"isfolder\" = \n               \"0\".   \nDefinition:    <!ELEMENT reserved (#PCDATA) > \n    \n3.   Security Considerations \n\n   The ability to hide resources should not be considered a security \n   feature.  With the current described behavior, there is a danger \n   that users will be able to discover the hidden resource by trying to \n   write a file of the same name as the hidden resource. In addition, \n   since hidden resources will be exposed via PROPFIND, there is no \n   actual security for them, the hidden nature MUST simply be for \n   presentation (user interface) purposes. This is because the hidden \n   resource feature described here is not intended to be a security \n   feature but a client display feature. \n    \n   Solving the problem of having resources which are undetectable under \n   certain conditions is beyond the scope of this draft. \n    \n4.   References \n    \n   [HTTP] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and T. \n   Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2068, \n   U.C. Irvine, DEC, MIT/LCS, January 1997. \n    \n   [DAV] Y. Goland, E.J. Whitehead, A. Faizi, S.R. Carter, D. Jenson, \n   \"Extensions for Distributed Authoring on the World Wide Web\", April. \n   1998, internet-draft, work-in-progress, draft-ietf-webdav-protocol-\n   08. \n    \n   [KEYWORDS] S. Bradner, \"Key words for use in RFCs to Indicate \n   Requirement Levels.\" RFC 2119, BCP 14. Harvard University. March, \n   1997. \n    \n   [RPC] ISO/IEC 11578:1996(E) International Standard: \"Information \n   Technology -- Open Systems Interconnection -- Remote Procedure Call\", \n   December, 1996 (see Annex A) \n    \n    \n5.   Author's Addresses \n    \n   Alex Hopmann \n   Microsoft Corporation \n   One Microsoft Way \n   Redmond, WA 98052 \n   Email: alexhop@micrososft.com \n    \n   Lisa Lippert \n   Microsoft Corporation \n   One Microsoft Way \n   Redmond, WA 98052 \n   Email: lisal@microsoft.com \n\n\n", "encoding": "ascii"}