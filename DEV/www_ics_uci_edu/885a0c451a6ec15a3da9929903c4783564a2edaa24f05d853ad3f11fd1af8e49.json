{"url": "https://www.ics.uci.edu/~pattis/ICS-21/assignments/program5/program.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 5</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 5</h1>\r\n<h1>Writing Classes</h1>\r\n<p>\r\n<h2>Introduction to Computer Science I\r\n<br>\r\nICS-21<br>\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\n  This programming assignment is designed to ensure that you know how to write\r\n    simple classes: both classes filled with static methods (referenced by the\r\n    class name) and \"normal\" classes (from which one can construct objects\r\n    storing state in instance variables and call their methods on these\r\n    objects).\r\n  Primarily, you will be writing methods (either static or not) and write a few\r\n    constructors and specify/use a few fields (mostly instance variables).\r\n  Of course, you will continue gaining experience with the standard control\r\n    structures in Java (blocks, ifs, loops/breaks) as well as the more basic\r\n    Java features (declarations and expression statements using arithmetic,\r\n    state-change, relational and logical operators).\r\n  <p>\r\n  To write a class using iterative enhancement, we use the following process.\r\n  <ol>\r\n    <li>Write a driver for testing the class, typically a console program\r\n          that allows us to call every method in the class.\r\n        I will often provide these; later we will examine writing a\r\n         different kind of driver using JUnit.\r\n    <li>Decide on the needed instance variables for the class and declare\r\n          (and if possible initialize) them.\r\n    <li>Write the required constructors.\r\n    <li>Write the header of each method, filled in with a minimal\r\n           body.\r\n        This is called <b>stubbing</b> methods in a class.\r\n        <ul>\r\n          <li> for a <b>void</b> method, the body can be just <b>{}</b>\r\n          <li> for a method returning a reference type, the body should be\r\n                 <b>{return null;}</b>\r\n          <li> for a method returning a primitive type, the body should just\r\n                 return some literal of that type (e.g., <b>{return false;}</b>\r\n                 or <b>{return 0;}</b> etc.)\r\n        </ul>\r\n     <li>Once this class and its driver compiles, fill in the body of each\r\n            method, then test it in the driver, then continue by filling in the\r\n            body of the next method, etc.\r\n         There is a bit of an art to determine which methods to implement/test\r\n            first.\r\n         A good heuristic is to implement/test <b>toString</b> first (to\r\n           help debug the others), then implement/test the simplest methods\r\n           first -the ones that do not call other methods defined in the class.\r\n         Often (in the case of collection classes) the method for adding a\r\n           value to a collection will have to be written early on, to test the\r\n           accessors and the method to remove a value.\r\n  </ol>\r\n  <p>\r\n  You will write three classes in this assignment.\r\n  In all cases I will provide driver programs that you will use to test your\r\n    classes.\r\n  As always, you can check the behavior of your programs against mine by\r\n    downloading, unzipping, and then running the file\r\n     <a href=\"executable.zip\">Program #5 Executables</a>,\r\n    to help you understand the specification of the problem and observe the\r\n    programmer/user interaction that you are to implement.\r\n  See <a href=\"../program1/program.html\">Program #1</a> for details on how\r\n    to run these executables on both PCs and in Eclipse (PCs and Macs).\r\n  Remember, you can run these programs, but not examine their source (Java)\r\n    code.\r\n  <p>\r\n  Note how packages are used in this assignment.\r\n  In each package the driver program is complete, and you must write only\r\n    <b>one class</b> that it drives: these classes are either empty or need\r\n     to be revised.\r\n  All other classes provided are complete.\r\n  <b>Please be careful when deciding whether variables are instance variables,\r\n       parameter variables, or local variables, and using each of these.</b>\r\n  <p>\r\n  To start working on this assignment, download\r\n    <a href=\"start.zip\">Program #5 Project Folder</a>\r\n    which contains the outlines of classes you should write for this assignment\r\n    and the driver programs that you should use to test these classes .\r\n  Write, run, and debug each class/program.\r\n  When you finish each part, submit its <b>.java</b> file.\r\n  <p>\r\n  <b>Only one programmer of the pair should dropoff the programs: the same one\r\n       for each part.\r\n     It doesn't matter which of the pair submits, but that person should\r\n       submit all the parts.\r\n     Of course, each program should contain both student names (in the\r\n        comment: the same one you cut, pasted, ane filled in at the top of\r\n        each program in <a href=\"../program1/program.html\">Program #1</a>).</b>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Static Library -->\r\n\r\n<a name=\"StaticLibrary\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Static Library</b></td>\r\n<td width =\"80%\">\r\n  Write the methods in a class named <b>SUM</b> (abbreviating Static Utility \r\n    Methods) that contains the four methods described below.\r\n  The <b>Driver</b> class prompts the user for information to use when calling\r\n    these methods and prints the results that they return (so you can more\r\n    easily debug them).\r\n  <p>\r\n  First, change the <b>SUM</b> class to be in a different package: one using\r\n    your UCI user ID (something like <b>edu.uci.pattis</b>) and \r\n    use this package name when you import it into the <b>Driver</b> class.\r\n  To do this, change the name of the package in the <b>SUM</b> class, then let\r\n    Eclipse fix the problem (click the red X and select the first option:\r\n    <b>Move SUM.java to package (your package name)</b>).\r\n  <p>\r\n  Please write the following methods to meet the specification stated.\r\n  Throw no exceptions except for the ones mentioned below.\r\n  As is normally the case, none of these methods do any input/output\r\n    other than through parameters and returned values.\r\n  <ol>\r\n    <li><b>majority</b> takes three <b>boolean</b> parameters and returns a\r\n          <b>boolean</b> result whose value is the one that is in the majority.\r\n        <b>majority(true,true,false)</b> returns <b>true</b>.\r\n        With three <b>boolean</b> arguments and only two possible\r\n          <b>boolean</b> values, one values is always in the majority (either\r\n            2o f 3 or 3 of 3).\r\n        Try to find a compact method body, NOT enumerating all eight\r\n          possibilities.\r\n        Run my executable for further information.\r\n    <p>\r\n    <li><b>isPrime</b> takes one <b>int</b> parameter and returns a\r\n        <b>boolean</b> whose value is <b>true</b> if the parameter is a prime\r\n          number.\r\n        If the parameter is negative, this method should throw an\r\n           <b>IllegalArgumentException</b> with an appropriate message.\r\n        Next is the defintion of \"prime\" we will use in this method's body.\r\n        If the parameter is 0 or 1, it should return <b>false</b> (technically\r\n           neither 0 nor 1 are prime); if the parameter is any larger value,\r\n           it should return <b>false</b> if some number, between 2 and the\r\n           parameter-1, exactly divides the parameter: for example, if the\r\n            parameter is <b>15</b>, try divisors between 2 and 14 (inclusive,\r\n           using a general <b>for</b> loop.\r\n        If any of thess values is a divisor, IMMEDIATELY return <b>false</b>;\r\n        if none of these values exactly divides the parameter, then the method\r\n          should finally return <b>true</b>.\r\n        Run my executable for further information.\r\n    <p>\r\n    <li><b>constrain</b> takes three <b>int</b> parameters and returns an\r\n          <b>int</b> result whose value is constrained to lie within the 1st\r\n          and 3rd parameter values.\r\n        It returns the 2nd parameter, if it lies between the 1st and 3rd \r\n          inclusive; it returns the 1st if the 2nd parameter is less than the\r\n          1st; it returns the 3rd if the 2nd parameter is greater than the 3rd.\r\n        For example <b>constrain(0,5,10)</b> returns <b>5</b> because the value\r\n          of the 2nd parameter is between the 1st and 3rd.\r\n        But <b>constrain(0,-5,10)</b> returns <b>0</b> because the value of the\r\n          2nd parameter is smaller than the 1st parameter.\r\n        And <b>constrain(0,15,10)</b> returns <b>10</b> because the value of\r\n          the 2nd parameter is larger than the 3rd parameter.\r\n        Run my executable for further information.\r\n    <p>\r\n    <li><b>digits</b> takes one <b>int</b> parameter and returns an <b>int</b>\r\n          result whose value is the number of digits in the first parameter.\r\n        This method works for any parameter, and returns a positive value 1 or\r\n           greater.\r\n        For example <b>digits(0)</b> returns <b>1</b>;\r\n        <b>digits(1245)</b> returns <b>4</b>;\r\n        <b>digits(-10)</b> returns <b>2</b>.\r\n        This method computes its result by counting how many times it can\r\n          divide the parameter by 10 before reaching a single digit number;\r\n          each division represents \"chopping off\" a digit in the parameter.\r\n        Run my executable for further information.\r\n  </ol>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- BigRational -->\r\n\r\n<a name=\"BigRational\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>BigRational: Infinite Precision Rationals</b></td>\r\n<td width =\"80%\">\r\n  Write a class named <b>BigRational</b> by updating the class named\r\n     <b>Rational</b>.\r\n  This assignment is actually a bridge between using/writing classes, because\r\n    you are actually just <b>translating</b> the <b>Rational</b> class\r\n    into <b>BigRational</b>, which contains all same the methods, but with\r\n    translated instance variables and bodies.\r\n  In <b>BigRational</b> instead of using two <b>int</b> instance variables for\r\n    storing the <b>numerator</b> and <b>denominator</b> (as <b>Rational</b>\r\n    does), use two <b>BigInteger</b> instance variables, by importing and using\r\n    the <b>java.math.BigInteger</b> class.\r\n  In <b>BigRational</b>, these instance variables can store integers with any\r\n    number of digits (tens, hundreds, thousands, etc.)\r\n  Refer to the Javadoc of <b>BigInteger</b> throughout this assignment (you\r\n     might even want to print a copy for quicker reference).\r\n  <p>\r\n  What you must do is translate the <b>Rational</b> class so that instead of\r\n    using <b>int</b>s it becomes the <b>BigRational</b> class and uses\r\n    <b>BigInteger</b>.\r\n  Operators applied to <b>int</b> variables must be translated into method\r\n    calls on <b>BigInteger</b> variables.\r\n  Most operators on <b>int</b>s are available as equivalent methods on\r\n    <b>BigInteger</b>s.\r\n  Use the <b>BigRational.java</b> file provided; mostly it is a copy of the\r\n    <b>Rational.java</b> file); you must translate all the <b>Rational</b>\r\n    constructors and methods.\r\n  The project file also contains a <b>Driver</b> class, which compiles\r\n    correctly when the the <b>BigRational</b> class compiles correctly.\r\n  <p>\r\n  Here are some general hints for translation.\r\n  <ul>\r\n    <li>Wherever you see <b>Rational</b> or <b>int</b> in the class, change\r\n          them to <b>BigRational</b> or <b>BigInteger</b> (except for the\r\n          return type of the <b>compareTo</b> method, which should remain\r\n          <b>int</b>, and the parameter to <b>toDecimalString</b> which\r\n          should remain <b>int</b>).\r\n    <p>\r\n    <li>The <b>BigInteger</b> class has static fields <b>ZERO</b> and\r\n          <b>ONE</b>; if you need any other <b>BigInteger</b> values (say, \r\n          <b>10</b>) use a constructor to create one (e.g.,\r\n          <b>BigInteger ten = new BigInteger(\"10\");</b>).\r\n    <p>\r\n    <li>If <b>int a,b,c;</b> we write <b>a + b * c</b> but with\r\n          <b>BigInteger a,b,c;</b> we write <b>a.add( b.multiply(c) )</b>; we\r\n          can also write this expression as the cascaded method call\r\n          <b>b.multiply(c).add(a)</b>, although this looks a bit strange\r\n          because the order of the operands has changed.\r\n    <p>\r\n    <li>There is a <b>gcd</b> method in the <b>BigInteger</b> class (so you\r\n          should use this method directly in the constructor: DO NOT define a\r\n          <b>private static</b> method for this operation in the\r\n          <b>BigRational</b> class; remove this method from your code).\r\n    <p>\r\n    <li>When writing the <b>compareTo</b> method for <b>BigRational</b> make\r\n          use of the the <b>compareTo</b> method for <b>BigInteger</b> (and\r\n          remember, it should still return an <b>int</b> not a\r\n          <b>BigInteger</b>).\r\n    <p>\r\n    <li>Finally, I have already completely translated the\r\n          <b>toDecimalString</b> method, which appears in both the original\r\n          form and updated form (commented out). \r\n        You can study the differences and use these methods as an guide to how\r\n          to translate the other methods.\r\n        Put the orignal code in comment (or remove it), and uncomment\r\n          the translated code, which will work for <b>BigInteger</b> instance\r\n          variables.\r\n  </ul>\r\n  Run my executable for further information.\r\n  After you program compiles and runs, intially test its methods by using the\r\n    driver and  entering small values that you can compute the result for\r\n    (e.g., 1/2 + 1/3 = 5/6).\r\n  Eventually try running the <b>harmonic sum</b> option with 100 or 200 for\r\n    <b>n</b> and comparing its output to my executable.\r\n  You DO NOT need to write/update the Javadoc for this class; just focus on\r\n    translating the instance variables and methods.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Bouncing Balls -->\r\n\r\n<a name=\"Bouncing Balls\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Ball: For Bouncing Ball Simulations</b></td>\r\n<td width =\"80%\">\r\n  Write a simple class named <b>Ball</b>, which we can use to simulate a\r\n    bouncing ball (there are two drivers for simulation: one textual\r\n    -in the <b>Ball</b> class- and one graphical).\r\n  We characterize a ball's state by five values; its\r\n  <ul>\r\n    <li>color (a <b>Color</b> which doesn't change)\r\n    <li>size  (an <b>int</b> (radius of ball in <b>pixels</b>) which doesn't\r\n        change)\r\n    <li>height (a <b>double</b> (feet) which changes during in the simulation)\r\n    <li>elasticity (a <b>double</b> which doesn't change and determines how\r\n        much the ball bounces)\r\n    <li>velocity (a <b>double</b> (feet per second) which changes during in\r\n          the simulation)\r\n  </ul>\r\nHere, some states are intrinsic ball properties independent of the\r\n  simulation: its color, size, and elasticity (what percentage of its\r\n  downward velocity is converted into upward velocity when it bounces);\r\nother states are a result of the simulation: its height and velocity.\r\n<p>\r\nFill in the fields (instance variables), constructor, and methods in the\r\n    <b>Ball</b> class.\r\n  <ul>\r\n    <li>The fields represent all the ball's states, using the types\r\n          <b>Color</b>, <b>int</b>, and <b>double</b>.\r\n    <p>\r\n    <li>The constructor's parameters specify all the ball's state, except the\r\n          velocity, which should always start at <b>0.</b> when\r\n         <b>new</b> constructs a new <b>Ball</b> object.\r\n    <p>\r\n    <li>The methods are mostly accessors that return information about the\r\n          ball's state to the simulation so it can display a ball:\r\n           <b>getColor</b>, <b>getSize</b>, <b>getHeight</b>.\r\n        Note that the <b>toString</b> method should return a large\r\n          <b>String</b> containing the name of ALL instance variables and\r\n          their current values.\r\n        It might return a values that prints like<br>\r\n        <b>Ball[color=java.awt.Color[r=255,g=0,b=0],size=15,height=10.0,elasticity=0.9,velocity=0.0]</b>\r\n        Note that the <b>Color</b> class has its own <b>toString</b> method,\r\n          which you can call.\r\n    <p>\r\n    <li>The <b>update</b> method computes the new height and velocity of\r\n          the ball after the specified amount of time passes.\r\n        This is similar to the rocket calculation, but much simpler.\r\n        <ul>\r\n          <li>Compute the velocity at the end of the time interval:\r\n              the velocity at the start of the time interval - gravity*dT.\r\n          <li>Compute the average velocity over the interval: the average\r\n                between the velocity at the start and end of the interval.\r\n          <li>Compute the height at the end of the time interval:\r\n              the height at the start of the time interval +\r\n              the average velocity during the interval times dT.\r\n          <li>If the height IS NOT negative, store the velocity\r\n                at the end of the time interval into the velocity\r\n                for the start of the next time interval;\r\n              if the height IS negative, make it 0. and then store\r\n                the opposite of the average velocity (times the elasticity)\r\n                into the velocity for the start of the next time interval.\r\n        </ul>\r\n    </ul>\r\nFirst test your <b>Ball</b> class using the <b>main</b> method in the\r\n  <b>Ball</b> class itself; remember to rewrite the <b>toString</b> method\r\n  correctly or it won't print anything; check your results against my\r\n  executable.\r\n<p>\r\nThen test your <b>Ball</b> class using the graphic driver.\r\nFor the colors, use only positive <b>int</b> values 0 to 255;\r\n  for the size use a reasonable-sized positive integer (e.g., 15 pixels);\r\n  for the height, don't exceed 10.\r\n  for the elasticity, generally use a <b>double</b> value 0 to 1.; note that\r\n    even with a perfect bounce (elasticity = 1.), because of the way the\r\n    equations are simplified (not exact in terms of bouncing) some ball(s)\r\n    may eventually come to rest and some not; try an elasticity > 1.\r\n<p>\r\nActuallly, if you specify <b>-1</b> for any value, a random number in\r\n  the appropriate range will be use; the default values are <b>-1</b>\r\n  for everything except elasticity.\r\nExperiment by running the program with <b>-1</b> and other values.\r\n<p>\r\nNote that I have written all the correct header methods in<b>Ball</b>, so\r\n  this part compiles correctly.\r\n<b>Ball</b> is the the only class that you must change, by filling\r\n  in the instance variables, and bodies of the constructors and methods.\r\nTry debugging your ball using the <b>Construct One</b> button first, then\r\n  test it later with <b>Construct Many</b>.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<!-- \r\n\r\n<a name=\"VendingMachine\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Vending Machine</b></td>\r\n<td width =\"80%\">\r\n  Write a class named <b>Model</b> for the <b>vendingMachine</b> package.\r\n  This class implements the actions of a vending machine which allows coins to\r\n    be deposited and products to be bought (or transactions to be cancelled).\r\n  It consists of some fields (you will have to infer most of these; plan on\r\n    adding/removing fields as you implement/debug this class), methods, and a \r\n    constructor with no parameters.\r\n  It must implement the following <b>public</b> methods (see their headers\r\n    below), which are called by the <b>Controller</b> and <b>View</b> classes\r\n    to simulate a vending machine.\r\n  The program will not compile without these methods; you can write other\r\n    <b>private</b> helper methods for this class as well, to avoid duplicating\r\n    code.\r\n  <ul>\r\n    <li><b>void cancel()</b> is called when the cancel button is pressed.\r\n        It should terminate any pending sale return whatever coins the user\r\n          has deposited.\r\n        When the view is updated, it should explain this action in the message\r\n          window at the bottom.\r\n    <li><b>void deposit(int amount)</b> is called when any of the money buttons\r\n          are pressed (its parameter indicates how much money was deposited: it\r\n          is always 5, 10, or 25 cents).\r\n        When the view is updated, it should explain this action in the message\r\n          window at the bottom.\r\n    <li><b>void buy (String product)</b> is called when any of the buy buttons\r\n          are pressed (its parameter indicates which product is bought: it is\r\n          either <b>\"Pepsi\"</b> or <b>\"Coke\"</b>).\r\n        When the view is updated, it should explain this action in the message\r\n          window at the bottom, including how much change is returned.\r\n        Note that when an item runs out, the button to buy that item become\r\n          un-pressable.\r\n    <li>There are six accessors, each of which the view calls when it needs to\r\n          display information about the state of the vending machine (for\r\n          example, to determine whether or not a buy button is pressable).\r\n    <ul>\r\n      <li><b>String getDeposited()</b> returns the total amount of money\r\n          deposited since the transaction started.\r\n      <li><b>String getMessage()</b> returns the message to display\r\n          (at the bottom, in blue).\r\n      <li><b>int getCokeLeft()</b> returns the number of coke bottles in the\r\n          machine.\r\n      <li><b>int getPepsiLeft()</b> returns the number of pepsi bottles in the\r\n          machine.\r\n      <li><b>String getCokePrice()</b> returns the price of a coke.\r\n      <li><b>String getPepsiPrice()</b> returns the price of a pepsi.\r\n    </ul>\r\n  </ul>\r\n  Run my executable for further information\r\n  Deposit coins, make purchases (or cancel the purchases; try to make\r\n    purchases with too little money) and observe the information that the\r\n    view displays; it should work according to your expectations of how a \r\n    vending machine should work.\r\n  Pay particularly close attention to...\r\n  <ul>\r\n    <li>..what happens when you cancel a purchase; you get back exactly the\r\n            coins you deposited (e.g., if you put in 3 dimes, you get three\r\n            dimes back, not a quarter and a nickel).\r\n          Note that the result must read correctly: e.g.,\r\n            <b>1 dime</b> but <b>2 dimes</b>.\r\n    <li>..what happens when there is not enough (or not the right kind of)\r\n          change left to make a purchase (the purchase should be disallowed).\r\n    <li>..what happens when there is enough change to make a purchase.\r\n         It should return the fewest number of coins possible.\r\n         Be careful, though: the change might be 25 cents, but it could be\r\n           returned as 1 dime and 3 nickels because there are\r\n           no quarters and only one dime.\r\n  </ul>\r\n  For debugging purposes, each pressed button prints some information in the \r\n    console window.\r\n  Notice that the information returned from the <b>toString</b> method in\r\n    the <b>Model</b> class is displayed in the console window too, for\r\n    debugging purposes.\r\n  <p>\r\n  Finally, remember to call <b>view.update()</b> whenever the state of the\r\n    model has changed; this tells the view to recollect all the information\r\n    that it needs to redisplay itself: in this case it will call all the tiny\r\n    accessors to determine what to display.\r\n  <p>\r\n  The constructor for the model should prompt the user to enter the starting\r\n    number of quarters, dimes, nickels, coke bottles, pepsi bottles, coke cost,\r\n    and pepsi cost\r\n   (if you declare any other instance  variables, initialize them\r\n    appropriately without prompting).\r\n  You do not need to examine/alter code in the other classes in this package.\r\n  You do not need to write/update the Javadoc for this class.\r\n</td>\r\n</tbody>\r\n</table>\r\n--->\r\n\r\n\r\n</table>\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}