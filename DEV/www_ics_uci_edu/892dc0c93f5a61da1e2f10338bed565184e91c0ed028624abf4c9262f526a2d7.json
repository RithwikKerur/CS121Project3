{"url": "https://www.ics.uci.edu/~kay/courses/h22/hw/hw3.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Saturday, January 18, 2003 11:01 AM\">\n<TITLE>Third Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D7FCEB3E\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 2, CS2, assignment, performance measurement\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment involving measuring and analyzing the performance of alternative search algorithms for ICS H22, an honors second-quarter course in computer science in Information and Computer Science, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2000, 2003 by David G. Kay.  All rights reserved.\">\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<A NAME=\"_top\"></A>\n<P>\n<IMG SRC=\"Third_Homework_files/Sidebar_123.gif\" WIDTH=575 HEIGHT=77>\n<BR>\n<FONT FACE=\"AGaramond\" SIZE=4> &#160; <A NAME=\"_14_26\"></A></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>We&#39;re all back together this week; everyone\nwill do the same thing.  This assignment is due on Friday, January 24. </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a)</B> In Chapter 3 of the Goodrich and\nTamassia book, do these problems: </FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>R-3.8.  Unless you have already completed\nthis by hand, use a spreadsheet to help with the calculations; Excel is\navailable on the machines in the lab.  Every computer scientist should have\nsome spreadsheet experience, so take this opportunity.</FONT></LI>\n<BR><BR>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>C-3.1.  A sentence or two is all that&#39;s\nrequired here; numerical examples or pictures are also welcome.</FONT></LI>\n<BR><BR>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>P-3.1.  Treat the linear-log scale as extra\ncredit.  Also for some extra credit, plot your results as a chart in Excel\n(which does allow log scales if you poke around the various options).</FONT></LI>\n</UL>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b)</B>  Look at Alex Thornton&#39;s Project\n#1 from ICS 22, available on the web at </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.ics.uci.edu/~thornton/ics22/LabManual/Money/\">http://www.ics.uci.edu/~thornton/ics22/LabManual/Money/</A></FONT><FONT FACE=\"AGaramond\" SIZE=4>\n. </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.1)</B>  Code the problem as specified.\n The coding here should be pretty easy, but pay particular attention to\nthe discussion about testing and to designing and carrying out a thorough\ntest plan.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.2)  </B>Change the program to handle\ndollars and cents rather than just integer dollars.  As the write-up points\nout, this is tricky because floating-point numbers (floats and doubles in\nJava) aren&#39;t exact (think of 1/3 or 2/7) and that inexactness can be\ncompounded in repeated calculations.  </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>The right way to handle this is to treat each\nbalance as an integer number of cents.  You then have two problems:  How\nto print the quantities with a decimal point and two digits to the right,\nand how to let the user specify dollar-and-cents quantities.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>For the output, you&#39;ll want to write a\nmethod called </FONT><FONT FACE=\"Courier New\">toCurrencyString</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat takes an integer and returns a string including a decimal point, so\nthat </FONT><FONT FACE=\"Courier New\">toCurrencyString(12345)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nwould return </FONT><FONT FACE=\"Courier New\">&quot;123.45&quot;</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n The algorithm for this isn&#39;t hard if you use both division and the\nmod (remainder) operator (</FONT><FONT FACE=\"Courier New\">%</FONT><FONT FACE=\"AGaramond\" SIZE=4>--so\nthat </FONT><FONT FACE=\"Courier New\">12345 % 100</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis </FONT><FONT FACE=\"Courier New\">45</FONT><FONT FACE=\"AGaramond\" SIZE=4>)\nto extract the dollars, dimes and cents.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>For the input, you may do it the easy but\nclumsy way:  Prompt the user separately for the dollars and for the cents,\ncombining them in your program.  For a little extra credit, parse the input\nstring containing a decimal point.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Redraft (and re-apply) your test plan to include\ntests of dollars-and-cents amounts (thinking carefully about what those\namounts can look like).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.3)</B>  For some extra credit, try one\nor more of these:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>Allow each person to have a collection of\naccounts (creating an AccountCollection class that you could implement as\nan array, or even as a linked list).  You&#39;d probably want to give each\naccount a number and think about what interface changes you&#39;d need.</FONT></LI>\n<BR><BR>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>Have (at least) two subclasses of accounts,\nChecking and Savings; each class could have a different associated interest\nrate (that applies to every account of that class, not one for each instance),\nand allow each person&#39;s account collection to include any combination\nof accounts.  (A clever thing to do would be to use a static field in the\nAccount class so that every new account, of whatever type, gets a unique\naccount number.)</FONT></LI>\n<BR><BR>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>The &quot;Additional Challenges&quot; listed\nin Alex Thornton&#39;s write-up.</FONT></LI>\n</UL>\n<BR>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>What to turn in:</B>  </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>For part <B>(a)</B>, paste all your answers\ninto a single Word document and submit it via Checkmate.  (If you&#39;d\nprefer another format besides Word, let us know and we&#39;ll see about\nalternate arrangements.  Likewise, if you already completed this part before\nreading about the Excel requirement, you may turn in a paper version in\nclass on Tuesday.)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>For part <B>(b)</B>, turn in via Checkmate\na Word document containing your test plan and a Java file for each class\nfrom part <B>(b.2)</B>.  As indicated by Checkmate, turn in the main, required\npart separately from any enhanced, extra credit version from <B>(b.3)</B>.\n</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Written by David G. Kay, Winter 2003 to build\non &quot;Money (That&#39;s What I Want),&quot; an ICS 22 lab by Alex Thornton.</FONT></P>\n<BR CLEAR=ALL>\n<P>\n</P>\n<HR>\n<P>\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,\n<I>406B Computer Science\n<BR>\n</I><A HREF=\"http://www.uci.edu/\">University of California, Irvine</A>\n<BR>\n</FONT><FONT FACE=\"AGaramond\">Irvine, CA  92697-3425</FONT><FONT FACE=\"Palatino\">\n --  </FONT><FONT FACE=\"AGaramond\"><B>(949) 824-5072</B></FONT><FONT FACE=\"Palatino\">\n --  Fax </FONT><FONT FACE=\"AGaramond\"><B>(949) 824-4056</B></FONT><FONT FACE=\"Palatino\">\n --  Email  <a href=mailto:kay@uci.edu>\n</FONT><FONT FACE=\"Courier\"><TT><A HREF=\"mailto:kay@uci.edu\">kay@uci.edu</A></a>\n<BR>\n</address>\n</TT></FONT></P>\n<P>\n<FONT FACE=\"Palatino\" SIZE=1>Saturday, January 18, 2003 -- 11:01 AM</FONT></P>\n</BODY>\n</HTML>\n", "encoding": "ascii"}