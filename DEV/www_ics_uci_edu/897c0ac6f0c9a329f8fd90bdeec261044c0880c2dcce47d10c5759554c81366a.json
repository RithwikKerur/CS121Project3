{"url": "https://www.ics.uci.edu/~kay/courses/h22/hw/hw2.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Friday, January 17, 2003 12:46 PM\">\n<TITLE>Second Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D7FE55FB\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 2, CS2, assignment, performance measurement\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment involving measuring and analyzing the performance of alternative search algorithms for ICS H22, an honors second-quarter course in computer science in Information and Computer Science, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2000, 2003 by David G. Kay.  All rights reserved.\">\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<A NAME=\"_top\"></A>\n<P>\n<IMG SRC=\"Second_Homework_files/Sidebar_123.gif\" WIDTH=575 HEIGHT=77>\n<BR>\n<FONT FACE=\"AGaramond\" SIZE=4> &#160; <A NAME=\"_14_27\"></A></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>This assignment is due at the start of your\ndiscussion section on Friday, January 17. </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a)</B>  <I>[only for students who did\nnot take ICS H21]</I>  Now it&#39;s time to play with the Restaurants program\nwe passed out in class.  The code is available on the web at </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.ics.uci.edu/~kay/courses/h21/restaurants.txt\">http://www.ics.uci.edu/~kay/courses/h21/restaurants.txt</A></FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n You won&#39;t be able to do all of this part until after Tuesday&#39;s\nlecture, but the first few subparts are accessible now.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.1)  </B>Make your own copy of this file\nand open it in DrScheme.  Evaluate it by clicking the green arrow.  Remember\nthat you&#39;ll need to use at least the Pretty Big version of Scheme. \nThen, in the interactions (lower) window, type <A NAME=\"_14_708\"></A></FONT><FONT FACE=\"Courier\"><TT>(Restaurants)</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>\nto run the program, typing commands to add, remove, print, and search for\nrestaurants.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>[For simplicity, the Restaurants program asks\nusers to enter nonnumeric information as Lisp lists (i.e., in parentheses).\n Scheme does have strings; it makes better sense enter non-numeric information\nenclosed in double-quotes instead of parentheses.  This doesn&#39;t require\nany change in the code, other perhaps than changing the prompt to the user.]</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.2)</B>  Modify the code so that the\ncommand for adding a new restaurant is &#39;<A NAME=\"_14_1246\"></A></FONT><FONT FACE=\"Courier\"><TT>n</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#39;\ninstead of &#39;<A NAME=\"_14_1267\"></A></FONT><FONT FACE=\"Courier\"><TT>a</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#39;.\n (This should require a change in two places.)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.3)</B>  When you print the collection\nof restaurants, it would be nice to have a blank line separating the information\non each restaurant.  Modify the program to achieve this.  (You only need\nto add one procedure call--<A NAME=\"_14_1543\"></A></FONT><FONT FACE=\"Courier\"><TT>(newline)</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>--in\none place.)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.4)</B>  Modify the program code so that\nit gives the user an additional menu choice:<A NAME=\"_14_1661\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\"><TT>e:  Remove (erase) all the restaurants from the\ncollection</TT></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>When the user types &#39;<A NAME=\"_14_1748\"></A></FONT><FONT FACE=\"Courier\"><TT>e</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#39;,\nthe program should remove all the restaurants from the collection (so that,\nfor example, if the next command were &#39;<A NAME=\"_14_1873\"></A></FONT><FONT FACE=\"Courier\"><TT>p</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#39;,\nnothing would be printed).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>[This will require modifications or additions\nin a few places.  You can do the main part of the work very easily indeed,\nwith a single procedure call.  The key is to think functionally, not of\nchanging values but of describing or creating the new value.]</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.5)</B>  Modify the program so that it\nadds another menu item:<A NAME=\"_14_2232\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\"><TT>a:  Adjust prices for the dishes served</TT></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>When the user types &#39;<A NAME=\"_14_2300\"></A></FONT><FONT FACE=\"Courier\"><TT>a</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>&#39;,\nthe program should ask the user for an amount (positive or negative) representing\na percentage change in price (so that 100 would double a price and -50 would\ncut it in half).  Then it should apply that price change to the prices for\nall the restaurants in the collection.  </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>[Here are some hints on how to approach this.\n If you want to be cool, you can postpone looking at them.  You might approach\nthis first by writing a </FONT><FONT FACE=\"Courier New\">change-price</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nprocedure that takes a restaurant and a percentage change number, as above,\nand returns a restaurant that has all the same information, except that\nthe price is changed appropriately.  Next you might write a call to </FONT><FONT FACE=\"Courier New\">collection-change</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat uses </FONT><FONT FACE=\"Courier New\">change-price</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand changes the prices in all the restaurants in the collection.  Finally,\nyou can incorporate these calls into the main program, adding the appropriate\ncommand handling and so on.]</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.6)</B>  (extra credit; this is rather\ntough at this point)  The search command currently allows the user to search\nonly for restaurants by name.  We can see that <A NAME=\"_14_3372\"></A></FONT><FONT FACE=\"Courier\"><TT>collection-select</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>\nallows much more flexible searching, however.  </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Modify the <A NAME=\"_14_3455\"></A></FONT><FONT FACE=\"Courier\"><TT>search-collection</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>\nroutine in the main program to give the user a choice of searching by name\nor by cuisine.  If the user chooses to search by cuisine, prompt for the\ntype of cuisine and perform the requested search with appropriate calls\nto <A NAME=\"_14_3702\"></A></FONT><FONT FACE=\"Courier\"><TT>collection-select</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n  [Hint:  Consider using some of the code on the second page of the &quot;Notes\non Scheme&quot; handout.]</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Be sure you&#39;re comfortable with the overall\norganization and operation of this program; some day you might be asked\nabout it.<A NAME=\"_14_3948\"></A></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b)</B> <I>[only for students who took\nICS H21]<A NAME=\"_14_3996\"></A></I><B> </B>We&#39;ll build a rudimentary\ntelephone book.  From now on, you should follow the conventional Java practice\nof writing each class in its own file whose file name is the same as the\nclass name (so your Person class would be in the file </FONT><FONT FACE=\"Courier New\">Person.java</FONT><FONT FACE=\"AGaramond\" SIZE=4>--be\nsure the spelling and capitalization are identical).  To compile all the\nclasses in a given directory, say &quot;</FONT><FONT FACE=\"Courier New\">javac\n*.java</FONT><FONT FACE=\"AGaramond\" SIZE=4>&quot; and to run the code, say\n&quot;</FONT><FONT FACE=\"Courier New\">java X</FONT><FONT FACE=\"AGaramond\" SIZE=4>&quot;\nwhere X is the name of the class containing the main function.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.1)</B>  First, create a class PhoneNumber\nthat has four integer fields:  areaCode, exchange, number, and extension,\nso that for the phone number (949) 824-5072 ext. 1000, 949 is the areaCode,\n824 is the exchange, 5072 is the number, and 1000 is the extension.  (The\nextension field may be zero for numbers without an extension.)  Of course\nyou need a constructor and getter methods; you should also have a toString\nmethod that produces the number in the format given above and a promptUser\nmethod that takes a BufferedReader as a parameter and returns a newly constructed\nPhoneNumber, asking the user to enter the number&#39;s components one by\none. </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.2)</B>  Modify your Person class from\nlast week&#39;s assignment to include, along with the name and age fields,\na phone field that contains a PhoneNumber object.  </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.3)  </B>Create a class called Phonebook;\nit should contain zero or more objects of the Person class.  You should\nimplement the Phonebook in an array whose maximum size (defined as a constant,\ni.e., a </FONT><FONT FACE=\"Courier New\">static final int</FONT><FONT FACE=\"AGaramond\" SIZE=4>)\nis 1000.  </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Aside from a constructor to create an empty\nPeople class, your class should have these methods:</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">int size()</FONT><FONT FACE=\"AGaramond\" SIZE=4><SUB>--returns\nthe number of Person objects in the class (initially, zero)</SUB></FONT></P>\n<P>\n<FONT FACE=\"Courier New\">void add(Person P)</FONT><FONT FACE=\"AGaramond\" SIZE=4>--adds\nthe specified person to the class (in no particular order).  If the Phonebook\nis already full, you should print an error message and not add the Person.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">Person lookup(String n)</FONT><FONT FACE=\"AGaramond\" SIZE=4>--returns\nthe Person object whose name matches the parameter.  You may return the\nfirst Person who matches (so you don&#39;t have to check for multiple entries\nof the same name).  If the name isn&#39;t found, return null.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">void remove(String n)</FONT><FONT FACE=\"AGaramond\" SIZE=4>--removes\nfrom the Phonebook the Person whose name matches the parameter.  Again,\nyou don&#39;t have to check for duplicate names.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">void print()</FONT><FONT FACE=\"AGaramond\" SIZE=4>--prints\nall the Persons in the class, in some compact format.  You should rely on\nthe toString method of the Person class.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">double averageAge()</FONT><FONT FACE=\"AGaramond\" SIZE=4>--returns\nthe average age of all the Persons in the Phonebook (or zero, if the Phonebook\nis empty)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.4)</B>  Create a PhonebookTest class\nthat contains statements to exercise all the operations of your class and\ndemonstrate to a critical reader that they work properly.  For some good\nadvice about testing, read the two sections on testing in Alex Thornton&#39;s\n<A HREF=\"http://www.ics.uci.edu/~thornton/ics22/LabManual/Money/\">first ICS 22 lab</A>\nat (</FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.ics.uci.edu/~thornton/ics22/LabManual/Money/\">http://www.ics.uci.edu/~thornton/ics22/LabManual/Money/</A></FONT><FONT FACE=\"AGaramond\" SIZE=4>).\n One thing to think about his how to test your program&#39;s behavior when\nthe array is full.  Typing 1001 names isn&#39;t feasible; what other approach\ncould you take?</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.5)  </B>For extra credit, you may enhance\nyour program in one or more of the following ways, but remember that you\nshould never start on extra credit until all the required parts are working\nperfectly.</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>Enhance the promptUser method of the PhoneNumber\nclass to allow the user to type in a whole phone number in some form, parsing\nthat string to extract its components.  (This is not so easy; this probably\nshouldn&#39;t be the first extra credit you attempt.)</FONT></LI>\n<BR><BR>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>Check for duplicate names and prohibit them\n(or treat the attempt to add a duplicate name as an update of the name&#39;s\nother field values).  Or, return not a single Person but a new Phonebook\ncontaining all the matching people.</FONT></LI>\n<BR><BR>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>Add a reverseLookup method that takes a PhoneNumber\nand returns the Person in the Phonebook whose PhoneNumber matches.</FONT></LI>\n<BR><BR>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>Add a partialLookup method that takes a string\nand returns (in a new Phonebook) all the Persons whose name starts with\nthat string.  (You&#39;ll need to look up the methods on the String class\nto find one to help you with this comparison.)</FONT></LI>\n</UL>\n<BR>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>What to turn in:</B>  </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>The Checkmate system (checkmate.ics.uci.edu)\nis now up and running.  Go to that site and follow the instructions to associate\nyourself with ICS H22.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>For part <B>(a)</B>, turn in one file via\nCheckmate containing all your modified Restaurants code.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>For part <B>(b)</B>, turn in a Java file for\neach class; Checkmate guides you through this.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>We don&#39;t anticipate any problems with\nthe Checkmate system, which has been used successfully for three quarters.\n But if some trouble or confusion should arise, follow this procedure: \nFirst, wait an hour and try again.  Then, if the issue isn&#39;t resolved,\nsend us Email.  Nobody&#39;s grade will suffer because of Checkmate problems,\nso long as you have done everything you can do.</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H22 assignments by David\nG. Kay from Winter 2000 and earlier; modified by David G. Kay, Winter 2001.</FONT></P>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21 assignments by David\nG. Kay from Fall 2002 and earlier.</FONT></P>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Modified by David G. Kay, Winter 2003, including\nsome logistical information from the ICS 22 Lab Manual by Alex Thornton.</FONT></P>\n<BR CLEAR=ALL>\n<P>\n</P>\n<HR>\n<P>\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,\n<I>406B Computer Science\n<BR>\n</I><A HREF=\"http://www.uci.edu/\">University of California, Irvine</A>\n<BR>\n</FONT><FONT FACE=\"AGaramond\">Irvine, CA  92697-3425</FONT><FONT FACE=\"Palatino\">\n --  </FONT><FONT FACE=\"AGaramond\"><B>(949) 824-5072</B></FONT><FONT FACE=\"Palatino\">\n --  Fax </FONT><FONT FACE=\"AGaramond\"><B>(949) 824-4056</B></FONT><FONT FACE=\"Palatino\">\n --  Email  <a href=mailto:kay@uci.edu>\n</FONT><FONT FACE=\"Courier\"><TT><A HREF=\"mailto:kay@uci.edu\">kay@uci.edu</A></a>\n<BR>\n</address>\n</TT></FONT></P>\n<P>\n<FONT FACE=\"Palatino\" SIZE=1>Friday, January 17, 2003 -- 12:46 PM</FONT></P>\n</BODY>\n</HTML>\n", "encoding": "ascii"}