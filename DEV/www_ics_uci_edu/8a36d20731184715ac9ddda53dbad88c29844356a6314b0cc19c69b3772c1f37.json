{"url": "https://www.ics.uci.edu/~kay/courses/i41/hw/lab0.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\" />\n<title>Lab Assignment 0</title>\n<link href=\"/~kay/courses/i41/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style1 {\tfont-size: x-small;\n\tfont-family: \"Goudy Old Style\";\n}\n.style2 {font-family: \"Goudy Old Style\"}\n.style3 {font-family: \"Courier New\", Courier, monospace}\n-->\n</style>\n</head>\n\n<body>\n<p><font size=\"2\" face=\"Goudy Old Style\">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</font></p>\n<p> <font face=\"Goudy Old Style\" size=\"6\"><b>Lab Assignment 0 </b></font></p>\n<p> <font face=\"Goudy Old Style\">This lab assignment is due at the end of lab on\n  Friday, September 23. </font></p>\n<p> <font face=\"Goudy Old Style\">The next lab assignment (Lab Assignment 1) will be available on\n  the web by Friday and will be due the following Friday at the end of lab; we&#39;ll follow\n  that pattern all quarter.  </font></p>\n<p> <font face=\"Goudy Old Style\"><b>(a) </b>Choose a partner for this assignment and make sure the TA knows who your partner is. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this Friday. All your computer-based work on this (and every) lab assignment must follow the <a href=\"http://www.ics.uci.edu/~kay/courses/i41/hw/pair.html\">pair programming guidelines</a>.</font></p>\n<p> <font face=\"Goudy Old Style\"><b>(b)</b> It&#39;s especially important that\n  you be able to receive electronic mail sent to your UCInet ID (</font></font><code>you@uci.edu</code><font face=\"Goudy Old Style\">).\n    You may redirect this mail to another account of your choosing (see the\n    course reference sheet), but don&#39;t let that mail go unread.  Also, be\n    sure your UCInet account doesn&#39;t exceed its disk quota.  When it does, you\n    won&#39;t receive official Email.</font></p>\n<p> <font face=\"Goudy Old Style\">With your partner, test this out by sending\n  each other Email at your UCI addresses. There's nothing to turn in for this part. </font></p>\n<p> <font face=\"Goudy Old Style\"><b>(c)</b> Locate and launch the DrRacket\n  software. </font></p>\n<p> <font face=\"Goudy Old Style\">Each DrRacket window has two panes:  The bottom\n  half is the interactions (or transcript) window, where you can type Scheme\n  expressions and see the interpreter evaluate them immediately.  To type expressions or programs you\n  wish to save, you will use the top pane (the definitions window) and click &quot;Run&quot; (at the top right) to evaluate the code (this makes the code\n  available for use in the interactions window below).</font></p>\n<p> <font face=\"Goudy Old Style\">The DrRacket system actually includes many\n  different versions of Scheme.  We&#39;ll be using  a graduated series of languages that build up to full\n  Scheme step by step; in DrRacket, this series is called the &quot;<em>How to Design Programs</em> teaching languages.&quot; </font><font face=\"Goudy Old Style\"> (One might wonder why it&#39;s necessary to take these\n  &quot;baby steps&quot;; the answer is that by restricting the language features\n  to those that a student needs at the moment, DrRacket can provide error\n  messages that describe the actual problem more clearly.  Programming language\n  error messages are notoriously inaccurate. The compiler is just a computer\n  program, so it can&#39;t know for sure what the programmer intended when\n  it finds something wrong. But with these different language levels, DrRacket\n  does better than most.)  We will start with the &quot;Beginning Student&quot;\n  language; if it&#39;s not the level currently installed (look for &quot;Programming language&quot;\n  in the lower pane), change it in the Language menu and click Run again.</font></p>\n<p><font face=\"Goudy Old Style\">Most modern programming languages provide some basic features and allow the programmer to select specific, specialized features for the task at hand (e.g., network programming or animations or cryptography). We call these specialized collections <strong>libraries</strong> (or &quot;teachpacks&quot; in DrRacket). For much of the course, we will use a teachpack called <span class=\"Code-in-Body\">picturing-programs.rkt</span>; this supports the image processing and animation described in the textbook.</font></p>\n<p><font face=\"Goudy Old Style\">The ICS lab machines should already be set up with DrRacket, Beginning Student Language, and the <span class=\"Code-in-Body\">picturing-programs.rkt</span> teachpack. Chapter 0 of the textbook describes how to install the <span class=\"Code-in-Body\">picturing-programs.rkt</span> teachpack on your own machine. There's nothing to turn in for this part.</font></p>\n<p> <font face=\"Goudy Old Style\"><b>(d)</b> Experiment with DrRacket to get\n  familiar with it, following the suggestions below. One person &quot;drives&quot; (types); the other &quot;navigates&quot; (observes, questions, suggests); if you don't know what this is about, go back and read the <a href=\"http://www.ics.uci.edu/~kay/courses/i41/hw/pair.html\">pair programming guidelines</a>. The point of this assignment is to get you familiar with the mechanics of DrRacket, Scheme, and pair programming.</font></p>\n<p> <font face=\"Goudy Old Style\">Try evaluating some expressions, like </font>\n<code>(* 3 4 5)</code>\n  <font face=\"Goudy Old Style\"> and </font>\n  <code>(expt&#160;2\n    5)\n  </code>\n    <font face=\"Goudy Old Style\"> and </font>\n    <code>(gcd 15 230)</code><font face=\"Goudy Old Style\">.  (In DrScheme, calculating\n        greatest common divisors is predefined (built in)). </font></p>\n<p> <font face=\"Goudy Old Style\">Type in some definitions of symbols in the\n  interactions window, like </font>\n  <code>(define\n    number-of-students 54)</code>\n    <font face=\"Goudy Old Style\"> and </font>\n    <code>(define number-of-staff 7)</code>\n  <font face=\"Goudy Old Style\"> and then try </font>\n    <code>(+  number-of-students number-of-staff)</code><font face=\"Goudy Old Style\">.  There's nothing to turn in for this part.</font></p>\n<p> <font face=\"Goudy Old Style\"><b>(e)</b> The &quot;driver&quot; and &quot;navigator&quot; should switch roles now. Even though you haven't typed anything in the definitions window, click the Run button before doing these image-processing exercises; that activates the <span class=\"Code-in-Body\">picturing-programs.rkt</span> teachpack.  (But don't click Run again while you're working on this part.  You're working in the \ninteractions window and clicking Run clears it out before you can save it.)</font></p>\n<p><font face=\"Goudy Old Style\">Do exercise 1.2.1 in the <em>Picturing Programs</em> textbook; you can find it on line at <a href=\"http://www.picturingprograms.com\"><code>www.picturingprograms.com</code></a>.  (As the book suggests, pick smallish images.  DrRacket can handle a 12-megapixel image from a digital camera, but when the time comes to submit your work, huge images will clog up Checkmate.)</font></p>\n<p><font face=\"Goudy Old Style\">Switch roles, then do exercise 1.2.2. Switch again and do exercise 1.2.3. Do exercises 1.2,4, 1.2.5, and 1.2.6, switching roles after each one.</font></p>\n<p><font face=\"Goudy Old Style\">Save a copy of the interactions window that shows\n  your work for this part (using Save Other and Save Interactions As from the File menu).  A\n  good name for the file would be <code>lab0e.rkt</code>; stick with a naming pattern like this for the rest of the quarter.\n  It&#39;s fine if your interactions show false starts and mistakes; it&#39;s also fine\n  if you just produce a short, clean copy.  Edit the file to make sure it\nincludes your name and your partner&#39;s; submit this file via Checkmate. (Don't know what Checkmate is? Look at the &quot;What to do this week&quot; section of the <a href=\"http://www.ics.uci.edu/~kay/courses/i41/\">course syllabus</a>).</font></p>\n<p><font face=\"Goudy Old Style\"><b>(f)</b> The &quot;driver&quot; and &quot;navigator&quot; should switch roles again. The factorial function (written\n  in mathematical notation with an exclamation point, so &quot;<i>n</i> factorial&quot; would be <i>n</i>!)\n  is used in calculating how many ways there are to arrange things (like the number of different ways to arrange five students in a row).  The value\n  of <i>n</i>! is <i>n</i> &middot; (<i>n</i>-1) &middot; (<i>n</i>-2) &middot; ... &middot; 1, so 5!\n  = 5 &middot; 4 &middot; 3 &middot; 2 &middot; 1 = 120.</font></p>\n<p> <font face=\"Goudy Old Style\">Type the following function definition into\n  the definitions window.  Actually do the typing so you can get used to the\n  way it works; don&#39;t just copy and paste.  (We&#39;ll go over the details\n  of this code in class some time soon; for now, this is just a typing exercise\nand you shouldn&#39;t try too hard to figure out how it works. If you're not used to typing programs, be careful to type accurately.) Watch what happens every time you type a right-parenthesis.</font></p>\n\n<pre><code>\n;; fact: number -&gt; number\n;; Compute n! (n factorial).\n(check-expect (fact 0) 1)\n(check-expect (fact 5) 120)\n\n(define fact\n  (lambda (n)\n    (cond\n      ((&lt;= n 0)  1 )                 ; 0! is 1 by definition\n      (else (* n (fact (- n 1)))))))</code></pre>\n<font face=\"Goudy Old Style\">Notice how DrRacket indents and highlights\n  blocks of code so you don&#39;t lose your place.</font>\n<p> <font face=\"Goudy Old Style\">Don&#39;t forget to click Run.  Now try evaluating\n  expressions like </font>\n  <code>(fact 5)</code><font face=\"Goudy Old Style\">, </font><code>(fact 50)</code><font face=\"Goudy Old Style\">, </font><code>(fact 120)</code><font face=\"Goudy Old Style\">, and </font><code>(fact 500)</code><font face=\"Goudy Old Style\">.\n      Next, evaluate</font>\n      <code>(fact (fact 5))</code><font face=\"Goudy Old Style\">.  Scheme can handle long numbers\n          effortlessly, but any computer is finite; what do you think might happen\n          if you evaluate</font>\n          <code>(fact (fact 50))</code><font face=\"Goudy Old Style\">?  You can try it, but you&#39;ll\n              have to stop the evaluation (click the stop sign) if you don&#39;t want to wait until the machine\n              finally runs out of memory.</font></p>\n<p> <font face=\"Goudy Old Style\">Save a copy of the interactions window that shows\n  your work for this part, as described in part<strong> (e)</strong>.  Make sure both partners' names are in the saved file.</font></p>\n<p> <font face=\"Goudy Old Style\"><b>(g)</b> Switch roles again. Follow this role-switching pattern in all your lab work this quarter; we won't keep mentioning it.</font></p>\n<p><font face=\"Goudy Old Style\">Scheme represents and manipulates numbers more flexibly than most programming languages, in part because it doesn't tie what the user sees to the way the hardware stores the number.</font></p>\n<p><font face=\"Goudy Old Style\">What is the value produced by </font>\n<code>(/ pi 2)</code><font face=\"Goudy Old Style\">?  The result is prefixed by </font><code>#i</code><font face=\"Goudy Old Style\">,\n    which signals &quot;inexact representation&quot;; this means that the decimal\n    number may be rounded off (as the value of pi would have to be).</font></p>\n<p> <font face=\"Goudy Old Style\">Enter this definition (you can copy and paste\n  it into the definitions window): <br />\n  </font></p>\n\n<pre><code>\n(define decimal-format\n  (lambda (num)\n    (string-&gt;number (number-&gt;string (exact-&gt;inexact num)))))</code></pre>\n<p> <font face=\"Goudy Old Style\">Then evaluate</font> <code>(decimal-format (/ pi 2)).</code><font face=\"Goudy Old Style\"> Type it at the bottom of the definitions window and click Run; that will save you from retyping it later.</font></p>\n<p><font face=\"Goudy Old Style\">Using <code>decimal-format</code>  gives you a more human-readable number, in case you need\n  to produce polished results.  (There are also ways to specify the precise\n  number of digits, but that&#39;s for another time.) Next, evaluate </font>\n  <code>(/ 4 3)</code><font face=\"Goudy Old Style\">and </font>\n  <code>(+ 125 (/ 22 7))</code><font face=\"Goudy Old Style\">;\n    DrScheme indicates that the results are repeating decimals with a bar over the repeating digits. Evaluate </font><code>(/ (fact 5) (expt 7 2))</code><font face=\"Goudy Old Style\">; this result repeats, too, but not in a discernible pattern. Save a copy of the interactions window that shows your work for this part so far.</font></p>\n<p> <font face=\"Goudy Old Style\">Now, go to the Language menu, select Choose\n  Language, and click Show Details.  Then select Mixed Fractions.</font></p>\n<p> <font face=\"Goudy Old Style\">Next, evaluate again the four expressions above. (See why it's convenient to have them in the definitions window?) These results, in fractional form, are not what we expect to see on a computer, but they're useful in further calculations because nothing is lost by rounding off to a decimal representation. Try some other divisions.</font></p>\n<p><font face=\"Goudy Old Style\">Save a copy of the interactions window that shows your work for this second part, following the instructions in part <strong>(e)</strong> above. Notice that the fractions in the file are saved in a slightly different form than the one DrScheme uses in the interactions window. Combine both files for this part into one, remembering to include both partners' names, and submit the file via Checkmate.</font></p>\n<p> <font face=\"Goudy Old Style\"><b>(h)</b> Remember that each partner must\n  complete a partner evaluation form and submit it individually.\n  Do this by connecting to </font><code><a href=\"http://eee.uci.edu/\">eee.uci.edu</a></code><font face=\"Goudy Old Style\"> and choosing the Survey tool for Informatics 41.   Make sure you know your partner's name, first and last, so you can evaluate the right person. Please complete your evaluation\n    by the end of the day on Friday, or Saturday morning at the latest.  It\nonly takes a couple of minutes and not doing it hurts your participation score.</font></p>\n<p><font face=\"Goudy Old Style\"><strong>What to turn in:</strong> Submit via <a href=\"http://checkmate.ics.uci.edu/\">Checkmate</a> the interactions (transcripts) for parts <strong>(e)</strong>, <strong>(f)</strong>, and <strong>(g)</strong> above. It would be an excellent idea to go back and re-read parts<strong> (e)</strong>, <strong>(f)</strong>, and <strong>(g)</strong> carefully now, to make sure you've completed all the steps specified. Also </font><font face=\"Goudy Old Style\">remember that each student must complete a partner evaluation form by logging in to <code><a href=\"http://eee.uci.edu/\">eee.uci.edu</a></code> and selecting the Survey tool; these evaluations contribute to your class participation score. Get in the habit of doing this every week.</font> </p>\n<p> <font face=\"Helvetica\" size=\"1\">Based in part on ICS H21 and H22 assignments\n  by David G. Kay from Fall 2003 and earlier; modified by David G. Kay for\n  the Informatics Core Course, Fall 2004&ndash;Fall 2007 (with Alex Thornton in Fall 2006 and Rich Pattis in Fall 2008. Modified by David G. Kay to reflect <em>Picturing Programs</em> by Stephen Bloch, Fall 2010.</font></p>\n<hr />\n<span class=\"style2\"><a href=\"http://www.ics.uci.edu/~kay/\">David G. Kay</a>, <a href=\"mailto:kay@uci.edu\">kay@uci.edu</a></span><a href=\"mailto:kay@uci.edu\"><span class=\"style2\"><br />\n</span></a><span class=\"style1\">\n<!-- #BeginDate format:fcAm1a -->Tuesday, September 27, 2011 9:08 AM<!-- #EndDate -->\n</span>\n<p>&nbsp;</p>\n</body>\n</html>\n", "encoding": "ascii"}