{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node226.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Unification and Binding</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Unification and Binding\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html4969 HREF=\"node227.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html4967 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html4961 HREF=\"node225.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html4971 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html4970 HREF=\"node227.html\"> Creating Compound Terms</A>\r\n<B>Up:</B> <A NAME=tex2html4968 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html4962 HREF=\"node225.html\"> Type Testing</A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION001944000000000000000> Unification and Binding</A></H2>\r\n<P>\r\nExternal predicates are either tests, which only take input arguments\r\nand succeed or fail, or they yield a result\r\nby unifying one or more arguments with some terms.\r\nIn <A NAME=tex2html779 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  externals, the unification is always performed\r\noutside of the external predicate, after returning to the system.\r\nDepending on its result, the external\r\npredicate either succeeds or fails.\r\n<P>\r\nIf the external predicate unifies only one pair of terms,\r\nwhich is the most common case, the <tt> Return_Unify</tt> macro family \r\n<A NAME=3491>&#160;</A>\r\nis used, e.g. <blockquote> <PRE>Return_Unify_Atom(val, tag, atom)\r\n</PRE></blockquote>\r\nwhich requests that the Prolog term with value <tt> val</tt> and tag <tt> tag</tt>\r\nis unified with the atom <tt> atom</tt>.\r\nThis macro causes as well the return from the external predicate.\r\n<P>\r\nWhen there are several terms to be unified in the external predicate,\r\nthe <tt> Request_Unify</tt> macro family is to be used,\r\n<A NAME=3498>&#160;</A>\r\ne.g. <blockquote> <PRE>Request_Unify_List(val, tag, list_ptr)\r\n</PRE></blockquote>\r\nEach of them remembers which term pair has to be unified,\r\nand after the return to the system using the <tt> Return_Unify</tt> macro,\r\nall of them are subsequently unified.\r\nIf all these unifications succeed, so does the external predicate,\r\notherwise it fails.\r\nAt the beginning of the external predicate, after the declarations,\r\nthe macro <blockquote> <PRE>Prepare_Requests\r\n</PRE></blockquote> must appear, which sets up\r\na variable that counts how many requests there will be.\r\nIt must appear at the beginning of a block since it contains a\r\nC declaration.\r\n<P>\r\nThe concepts introduced so far can be illustrated in the following example.\r\n<blockquote> <PRE>int\r\np_sincos(val_arg, tag_arg, val_sin, tag_sin, val_cos, tag_cos)\r\nvalue   val_arg, val_sin, val_cos;\r\ntype    tag_arg, tag_sin, tag_cos;\r\n{\r\n        extern void sincos();       /* from the math library */\r\n        double s, c;\r\n        Prepare_Requests;\r\n \r\n        Error_If_Ref(tag_arg);\r\n        Check_Output_Float(tag_sin);\r\n        Check_Output_Float(tag_cos);\r\n \r\n        if (IsFloat(tag_arg) || IsDouble(tag_arg))\r\n            sincos(FloatVal(val_arg), &amp;s, &amp;c);\r\n        else if (IsInteger(tag_arg))\r\n            sincos((double) val_arg.nint, &amp;s, &amp;c);\r\n        else\r\n        {\r\n            Error(TYPE_ERROR);\r\n        }\r\n        Request_Unify_Float(val_sin, tag_sin, s);\r\n        Request_Unify_Float(val_cos, tag_cos, c);\r\n        Return_Unify;\r\n}\r\n</PRE>\r\n</blockquote>\r\n<P>\r\nThis external implements the Prolog procedure <b> sincos/2</b>, whose\r\nfirst argument is an integer or a float and which computes simultaneously\r\nthe sine and cosine of a given number.\r\nThe second and third arguments are the result arguments.\r\nThey may be variables or floating point numbers.\r\n<P>\r\nThe first argument must be instantiated; hence the first statement is a\r\ncall of <tt> Error_If_Ref</tt>.\r\nThe next two lines check the other arguments for being variables or\r\nfloats.\r\nThen it must be checked if the argument is an integer or a float, since\r\nthey have different representations. In the integer case, a type conversion\r\nis necessary before calling the library function <tt> sincos()</tt>.\r\nIf the argument is not a number, the external is exited with a type error.\r\nThe last statements illustrate how unification is done:\r\nwithout any further testing of the second argument\r\nwe just request its unification with a given value and the rest\r\nis done by the system.\r\nNote that if the <tt> Check_Output_Float()</tt> statements at the beginning are\r\nomitted, the result unification would just fail when the external is\r\ncalled with the second or third argument instantiated to non-floats.\r\n<P>\r\n<BR> <HR><A NAME=tex2html4969 HREF=\"node227.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html4967 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html4961 HREF=\"node225.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html4971 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html4970 HREF=\"node227.html\"> Creating Compound Terms</A>\r\n<B>Up:</B> <A NAME=tex2html4968 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html4962 HREF=\"node225.html\"> Type Testing</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}