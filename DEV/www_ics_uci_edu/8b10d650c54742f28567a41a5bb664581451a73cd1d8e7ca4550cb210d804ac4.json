{"url": "https://www.ics.uci.edu/~pattis/ICS-33/assignments/program0/program.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 0</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 0</h1>\r\n<h1>Computing Infrastructure</h1>\r\n<p>\r\n<h2>ICS-33: Intermediate Programming</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\nThis first \"programming\" assignment is not a \"programming\" assignment at all;\r\n  it is designed to ensure that you know the fundamentals of using the\r\n  computing infrastructure for this course, both on your own machine (if you\r\n  have one) and the computers in our labs.\r\nPrimarily it concerns starting to learn to use the Eclipse Integrated\r\n  Development Environment (IDE) for Python programming.\r\n<p>\r\nTo do this assignment, you must have already downloaded and installed Java,\r\n  Python, and the Eclipse IDE on your own computer (or be using one of the UCI\r\n  Lab machines, where it has already been downloaded/installed).\r\nFollow the <a href=\"../../../common/online33.html\" targe=\"main\">\r\n  Download/Installation Instructions</a> for your machine, if you need to.\r\nEnsure that you have correctly\r\n <a href=\"../../../common/handouts/pythoneclipsejava/courselib.html\">setup\r\n    the <b>courselib</b> folder</a>\r\n  and populated it with the required Python modules: otherwise some of your\r\n  <b>import</b> statements (in parts B, C, and D) will produce errors.\r\n<p>\r\n<b>Carefully</b> read and follow the instructions below.\r\nIt would be an excellent idea to print a copy of this web page, read through\r\n  it, and highlight any details that you think are important (and might\r\n  forget as you are working on the assignment) or that you are confused about.\r\nSome students lose points for failing to follow directions properly; this is\r\n  a problem that gets worse during the quarter, so starting out by doing the\r\n  \"right thing\" in this assignment is an excellent idea.\r\nIf you have any questions about these instructions, for example, if you\r\n  think they are in error, or just confusing, please post on the appropriate\r\n  MessageBoard Forum; and make sure you examine the posts from other students.\r\n<p>\r\n<b>IMPORTANT: Ensure that your Checkmate submission is for the current/correct\r\n     Quarter, not the previous one.</b>\r\n<p>\r\nFinally, carefully read the last two sections, on <b>Extra Credit</b> and\r\n  <b>Time Management</b> at the end of this assignment.\r\nThese important sections are relevant to all programming assignments, but\r\n  appear only in this one.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Eclipse A -->\r\n\r\n<a name=\"Eclipse\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Part A:<br>Create a New Project<br>and Script</b></td>\r\n<td width =\"80%\">\r\nRead the\r\n <a href=\"../../../common/handouts/introtopythonineclipse/index.html\"\r\n   target=\"_top\">\r\n Python Programming in the Eclipse IDE</a>\r\n  web page (which is also accessible on the\r\n <a href=\"../../handouts.html\" target=\"_top\">Handouts</a>\r\n web page).\r\nIt includes all the information that you initially need to know about using\r\n  Python in the Eclipse IDE.\r\nThis includes\r\n<ul>\r\n  <li>Starting/Stopping Eclipse\r\n  <li>Running the Python Interpreter\r\n  <li>Creating Projects in the Eclipse Workbench: new ones and existing ones\r\n  <li>Editing scripts\r\n  <li>Correcting syntax errors\r\n  <li>Running scripts\r\n  <li>Correcting execution errors\r\n</ul>\r\nWork through that document to understand Eclipse and gain some experience using\r\n  it before starting to work on this assignment.\r\nAsk your TAs/Lab Tutors questions; please cross the \"question answering\r\n  threshold\" quickly; get into the habit of being able to ask ICS-33 staff\r\n  members questions, especially in lab.\r\n<p>\r\nIn Part A you will run the Python interpreter to compute an answer, create a\r\n  new project in the Eclipse workbench, create a new (trivial) script (using\r\n  the answer computed by the interpreter) without syntax errors, run it to\r\n  ensure that it executes correctly, and finally submit the script on the\r\n  Checkmate Homework Dropoff system.\r\n  <!-- <a href=\"http://checkmate.ics.uci.edu\" target=\"main\">\r\n    Checkmate Homework Dropoff</a> system.-->\r\nHere is a checklist of things to do.\r\nIf you are confused or run into problems with any one, ask for help as soon as\r\n  possible.\r\n<ul>\r\n<li>Start Eclipse.\r\n<li>Start the Python interpreter in the <b>Console</b> view.\r\n<li>Type the following expression into the interpreter; avoid the temptation to\r\n       cut and paste this expression.\r\n      <b><pre>'{0:,}'.format(2**100)</pre></b>\r\n<li>Create a new Python project in the workbench (and thus the workspace) named\r\n       <b>project0a</b>.\r\n<li>Create a new module in this project named <b>demo</b>: the module and file\r\n      will actually be named <b>demo.py</b>; Eclipse automatically adds the\r\n      <b>.py</b>.\r\n<li>Delete the comment Eclipse puts at the top of your module and replace it\r\n      by your UCInetID and name in exactly the exact form below (last name\r\n      before first name), including the correct case (lower and upper),\r\n      punctuation, spaces, parentheses, and text: e.g.,\r\n    <b><pre># Submitter: antpeter(Anteater, Peter)</pre></b>\r\n<li>After leaving a blank line, type the following Python script into the\r\n      module: practice with the editor; avoid the temptation to cut and paste\r\n      this code.\r\n    Actually, for the big number in single-quotes, it is OK to copy/paste the\r\n      value that you computed in the interpreter; put it after the comma but\r\n      before the closing parenthesis.\r\n\r\n      <b><pre>print('My first program: a hybrid')\r\nprint('Answer (from Inteprxter) =', '1,267,650,600,228,229,401,496,703,205,376')</pre></b>\r\n\r\n<li>Fix any syntax errors that Eclipse shows (you might have introduced one by\r\n       not entering the script correctly).\r\n    A syntax error is an error, which if not fixed, will stop the programming\r\n      from executing: it will raise an exception.\r\n<li>Run this script to ensure that it produces the correct output in the\r\n      <b>Console</b> view (once it is executing).\r\n<li>Finish the project by closing it in the Eclipse workbench, but <b>do not\r\n       delete</b> it.\r\n<p>\r\n<li>Find the <b>Checkmate Homework Dropoff</b> link in the index of the course\r\n      web and submit your work (the <b>demo.py</b> file in the <b>project0a</b>\r\n        folder in the workspace for Eclipse) for grading via Checkmate.\r\n    If you need to, review the\r\n       <a href=\"../../../common/handouts/checkmate/index.html\" targe=\"main\">\r\n       Checkmate Tutorial</a> (which is also accessible on the\r\n       <a href=\"../../handouts.html\" target=\"_top\">Handouts</a>\r\n       web page).\r\n<p>\r\n<li>Reopen the project and ensure that you can still (re)run it.\r\n<li>Finish the project by deleting it and delete all its resources; it is now\r\n      no longer in the workbench or workspace.\r\n<li>Redo all these instructions, until you can do them quickly and easily; it\r\n      would even be useful to practice removing this submission and\r\n      resubmitting it, so you practice doing that in Checkmate.\r\n<li>Terminate Eclipse.\r\n</ul>\r\nThis part of the programming assignment is very cookbook, but by the end you\r\n  should have mastered the steps needed in creating and manipulating project\r\n  folders and script files\r\n  with Eclipse and Checkmate -something you will do over and over again during\r\n  the quarter.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Eclipse B -->\r\n\r\n<a name=\"Eclipse\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Part B:<br>Debug an Old Project's<br>Script</b></td>\r\n<td width =\"80%\">\r\nIn Part B you will download and unzip a project and put it into the Eclipse\r\n  workspace, create a project for it in the Eclipse workbench, correct the\r\n  syntax errors in the script, run it, correct the execution errors in the\r\n  script, and finally submit the script on the Checkmate Homework Dropoff sytem.\r\n  <!-- <a href=\"http://checkmate.ics.uci.edu\" target=\"main\">\r\n    Checkmate Homework Dropoff</a> sytem.-->\r\nBefore beginning this part of the programming assignment, read the short\r\n  handout on\r\n  <a href=\"../../../common/handouts/bugs.html\" targe=\"main\">\r\n  Bugs</a>.\r\nHere is a checklist of things to do.\r\nIf you are confused or run into problems with any one, ask for help as soon as\r\n  possible.\r\n<ul>\r\n<li>Start Eclipse (terminate it first, if it is currently running); notice the\r\n      Workspace folder name in the <b>Workspace Launcher</b> pop-up window\r\n      before you click its OK button.\r\n<p>\r\n<li>Download the <a href=\"project0b.zip\">project0b</a> project folder, unzip it\r\n      to a folder on your desktop.\r\n    It should contain one module, a file named <b>collatz.py</b>.\r\n    Move this folder into the workspace.\r\n<p>\r\n<li>Create a new Python project in the workbench named <b>project0b</b> (using\r\n      the <b>project0b</b> folder just downloaded and moved into the workspace).\r\n<li>Disclose this project in the <b>PyDev Package Explorer</b> view and double\r\n      click the <b>collatz.py</b> module so that it is visible in an\r\n      <b>Editor</b> view.\r\n<li>Notice the two syntax errors marked in red on line 68 and 76.\r\n    <ol>\r\n    <li>If the line numbers do not appear in the <b>Editor</b> view, turn them\r\n          on.\r\n    <li>If there are syntax errors on lines 55 or 56, you have not\r\n          set up the course library correctly.\r\n        Read the\r\n<a href=\"../../../common/handouts/pythoneclipsejava/courselib.html\" targe=\"main\">Course Library</a> installation instructions before proceding.\r\n    </ol>\r\n    Fix the errors as specified below.\r\n    <!--- 31\r\n    You do not yet need to understand these errors or how to fix them, but\r\n      we will cover the necessary material soon.\r\n    --->\r\n<li>Fix the syntax eror on line 68 by placing a comma right after the token\r\n      <b>cycle_count</b> and before the token <b>': test number is now'</b>.\r\n    If the red syntax error on this line doesn't quickly disappear, issue\r\n      the right-click | Save command.\r\n<li>Notice that a new syntax error appears on line 71; it sometimes happens\r\n      that one syntax error (line 71) is masked by another (line 68); when\r\n      we fix one line, a new one shows an error.\r\n<li>Hover over the red syntax error icon on line 71 (or the red-underlined\r\n      token <b>test_number</b>.\r\n    It says <b>Expected::</b> which really is <b>Expected:</b> followed by\r\n      <b>:</b> (the colon it expects).\r\n<li>Fix the syntax eror on line 71 by placing an equal sign right after the\r\n      equal sign on this line (no separating spaces): here we must have\r\n      the <b>==</b> token.\r\n    If the red syntax error on this line doesn't quickly disappear, issue\r\n      the right-click | Save command.\r\n<li>Hover over the red syntax error icon on line 76 (or the red-underlined\r\n      token <b>test_numer</b>.\r\n    It says <b>Undefined variable: test_numer</b>, because we misspelled this\r\n      name (forgetting the letter <b>b</b>).\r\n<li>Fix the syntax eror on line 76 by adding a <b>b</b> in the name: it is now\r\n      spelled correctly as  <b>test_number</b>\r\n    If the red syntax error on this line doesn't quickly disappear, issue\r\n      the right-click | Save command.\r\n<p>\r\n<li>Now the script has no syntax errors, so we can run it.\r\n    Enter <b>3</b> to the first prompt and just press enter for the second.\r\n    It will use the default value of <b>True</b>: with my <b>prompt</b>\r\n      module, pressing enter is just like typing the default value that\r\n      appears in square brackets.\r\n<li>Python will report show the script starting to run in the <b>Console</b>\r\n       view and then report an execution error.\r\n<b><pre>Enter a positive number: 3\r\nDisplay intermediate results[True]:\r\nCycle 1 : test number is now 3\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Pattis\\workspace\\project0b\\collatz.py\", line 75, in <module>\r\n    cycle_count += '2'\r\nTypeError: unsupported operand type(s) for +=: 'int' and 'str'</pre></b>\r\n    It identifies an error on line 75, then shows the line, then reports the\r\n      error, which relates to the fact that the <b>+=</b> operator cannot be\r\n      applied to an <b>int</b>eger and a <b>str</b>ing.\r\n<li>Click the underlined line in the console:\r\n    <b>File \"C:\\Users\\Pattis\\workspace\\project0b\\collatz.py\", line 75, in &lt;module&gt;</b>.\r\n   Python will position your cursor to line 75 in the <b>Editor</b> view.\r\n   Fix the error there by changing the string literal <b>'2'</b> into\r\n      the integer literal <b>2</b>; now the <b>+=</b> operator is adding two\r\n      integers.\r\n<p>\r\n<li>Run the script, and again\r\n    enter <b>3</b> to the first prompt and just press enter for the second.\r\n<li>This time the script runs to completion, but it has an intent error.\r\n    Notice that the cycle counts increment by two, not one; so our answer\r\n      says it requires 15 cycles, but it only requires 8.\r\n<li>Fix this error in line 75 by changing the integer literal <b>2</b> into\r\n      the integer literal <b>1</b>.\r\n<p>\r\n<li>Run the script, and again\r\n    enter <b>3</b> to the first prompt and just press enter for the second.\r\n    This time the script runs to completion with the correct answer.\r\n<li>Finish the project by closing it in the Eclipse workbench, but do not\r\n       delete it.\r\n<li>Find the <b>Checkmate Homework Dropoff</b> link in the index of the course\r\n      web and use it to submit the <b>collatz.py</b> file in the\r\n      <b>project0b</b> folder in the workspace for Eclipse.\r\n<li>Terminate Eclipse\r\n</ul>\r\nAgain, this part of the programming assignment is very cookbook, but by the\r\n  end you should have mastered the steps needed in creating and manipulating\r\n  project folders and script files with Eclipse and Checkmate -something you\r\n  will do over and over again during the quarter.\r\n\r\n\r\n<h3>Bottom Line</h3>\r\nYou will be writing many programming assignments during the quarter, requiring\r\n  you to create new projects or modify existing ones.\r\nYou should be able to manipulate both kinds of projects easily in Eclipse,\r\n  and submit them for grading in Checkmate.\r\n<p>\r\nFinally, whenever you want to check on a feature in Python or a library module,\r\n  you should have a very low threshold for quickly starting Eclipse and using\r\n  its Python Interpeter, or writing a small script, to experiment.\r\nIt is imperative that you get comfortable with this process immediately.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Debugger C -->\r\n\r\n<a name=\"Eclipse\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Part C:<br>Using the Debug Perspective</b></td>\r\n<td width =\"80%\">\r\nIn Part C you will read the document that is a tutorial about the\r\n  <a href=\"../../../common/handouts/debugger/debugger.pdf\" target=\"_new\">\r\n Eclipse Debug Perspective</a> and use the debugger to answer a series of\r\n  seven questions about a program that plays the dice game craps.\r\nSo, you are not using the debugger to fix a incorrect program, but instead are\r\n  using it to monitor a correct program and get information about when\r\n  certain events happen in the program.\r\nThe debugger is a program that controls your program.\r\n<p>\r\n<ul>\r\n<li>Read pages 1-11 and then practice using the debugger by solving all the\r\n  problems at the bottom of page 11.\r\nThe solutions are given on page 12...but answer each question before you check\r\n  its solution, otherwise you will not have exercised your debugging muscles in\r\n  preparation for solving the problems in the craps program\r\n<p>\r\n<li>Solve the problem stated on page 13. Solve each more than once: if you\r\n      aren't getting the same answers every time, you did not correctly follow\r\n      the directions on how to setup the <b>craps.py</b> script; re-read those\r\n      instructions.\r\n<p>\r\n<li>Download the <a href=\"debugger.zip\">debugger.zip</a> zip file; unzip it\r\n      into the <b>debugger.txt</b> text file; write your answers in this text\r\n      file.\r\n<b>IMPORTANT:</b> Use the Eclipse editor to create/modify data files too,\r\n   like the <b>debugger.txt</b> file.\r\nThis is especially true if you are on a Mac.\r\n<b>Do not use a Mac editor for data files</b>.\r\n<p>\r\n<li>Find the <b>Checkmate Homework Dropoff</b> link in the index of the course\r\n      web and use it to submit the <b>debugger.txt</b> file.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Driver D-->\r\n\r\n<a name=\"Eclipse\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Part D:<br>Test a Module/Class</b></td>\r\n<td width =\"80%\">\r\nIn Part D you will learn various ways to test Python code with the\r\n  <b>driver.py</b> module (which is in the <b>courslib</b>), concentrating on\r\n  how to write a testing file for use with this module's\r\n  <b>batch_self_check</b> function.\r\nYou will write such a file to test various factorial functions, and finally\r\n  submit this file on the Checkmate Homework Dropoff sytem.\r\n  <!-- <a href=\"http://checkmate.ics.uci.edu\" target=\"main\">\r\n    Checkmate Homework Dropoff</a> sytem.-->\r\nHere is a checklist of things to do.\r\nIf you are confused or run into problems with any one, ask for help as soon as\r\n  possible.\r\n<ul>\r\n<li>Start Eclipse (terminate it first, if it is currently running); notice the\r\n      Workspace folder name in the <b>Workspace Launcher</b> pop-up window\r\n      before you click its OK button.\r\n<p>\r\n<li>Download the <a href=\"project0d.zip\">project0d</a> project folder, unzip it\r\n      to a folder on your desktop (it should contain one file named\r\n      <b>facts.py</b>), and move this folder into the workspace.\r\n<p>\r\n<li>Create a new Python project in the workbench named <b>project0d</b> (using\r\n      the <b>project0d</b> folder just downloaded and moved into the workspace).\r\n<li>Disclose this project in the <b>PyDev Package Explorer</b> view and double\r\n      click the <b>facts.py</b> module so that it is visible in an\r\n      <b>Editor</b> view.\r\n<li>Run this script and enter the information below to verify its behavior on\r\n      these inputs.\r\n    Basically when <b>driver.driver()</b> is executed, we are simulating a\r\n      simplified \"interpreter\" that prompts for and executes the commands that\r\n      we type (shown below in italics; they appear green in the <b>Console</b>\r\n      view).\r\n    In this interaction we first import the <b>fact2</b> function and then call\r\n      it with different arguments, printing each result (although some calls\r\n      raise exceptions).\r\n<p>\r\nWe can enter a command at the prompt <b>Command[default]:</b> or just press\r\n  return in which case <b>default</b> is the command; the default is always\r\n  the command typed previously.\r\nWe will discuss the <b>!</b> and <b>?</b> commands a bit later.\r\n<b><pre>Driver started\r\nCommand[!]: <i>from facts import fact2</i>\r\n\r\nCommand[from facts import fact2]: <i>print(fact2(0))</i>\r\n1\r\n\r\nCommand[print(fact2(0))]: <i>print(fact2(5))</i>\r\n120\r\n\r\nCommand[print(fact2(5))]:\r\n120\r\n\r\nCommand[print(fact2(5))]: <i>print(fact2(-1))</i>\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Pattis\\workspace\\courselib\\driver.py\", line 234, in driver\r\n    exec(old,local,globl)\r\n  File \"<string>\", line 1, in <module>\r\n  File \"C:\\Users\\Pattis\\workspace\\project0d\\facts.py\", line 11, in fact2\r\n    raise ValueError('factorial('+str(n)+') not defined for negative values')\r\nValueError: factorial(-1) not defined for negative values\r\n\r\nCommand[print(fact2(-1))]: <i>print(fact2('a'))</i>\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Pattis\\workspace\\courselib\\driver.py\", line 234, in driver\r\n    exec(old,local,globl)\r\n  File \"<string>\", line 1, in <module>\r\n  File \"C:\\Users\\Pattis\\workspace\\project0d\\facts.py\", line 9, in fact2\r\n    raise TypeError('factorial('+str(n)+') must be called with an int argument')\r\nTypeError: factorial(a) must be called with an int argument\r\n\r\nCommand[print(fact2('a'))]: <i>quit</i>\r\nDriver stopped</pre></b>\r\n</ul>\r\nThe most interesting aspect of the <b>driver</b> module is its\r\n  <b>batch_self_check</b> function, which automatically reads, decodes, and\r\n  executes testing commands from a file (specified by the first two arguments),\r\n  summarizing the results (how each result is printed is based on the final\r\n  arguments to the function).\r\nEach parameter has a default argument, and all of them are set at the top of the\r\n  <b>driver.py</b> module.\r\nYou can explore different argument values, but the default values are the most\r\n  useful.\r\n\r\n<p>\r\nWe can call this function explicitly in the \"interpreter\", supplying it with\r\n  the necessary arguments, but mostly we call it via the <b>!</b>  command\r\n  (calling it with all default arguments) or the <b>?</b> command (calling it\r\n  with arguments entered by prompts to the user).\r\nThe following paragraphs briefly describe how to write commands in a testing\r\n  file; then you will be asked to write a testing file for the functions in\r\n  the <b>facts.py</b> module.\r\n<p>\r\nA testing file is a sequence of lines, each of which contains one testing\r\n  command.\r\nThe character(s) starting each testing command determines what is tested.\r\nLines starting with <b>#</b> are special; they are comment lines; all other\r\n  (non-blank) lines should start with a <b>c</b>, <b>e</b>, <b>^</b>,\r\n  or relational operator (<b>==</b>, <b>!=</b>, <b>&lt;</b>, <b>&lt;=</b>,\r\n  <b>&gt;</b>, <b>&gt;=</b>, <b>in</b>, or <b>not in</b>).\r\nEach <b>c</b> command is followed by one operand; each <b>e</b>, <b>^</b>, or\r\n  relational operator is followed by two operands (which are each prefaced by\r\n  a special separator string: the default separator value is <b>--&gt;</b>).\r\n<p>\r\n<ul>\r\n<li>Command: <b>c-->operand</b><br>\r\n    Execute <b>operand</b> as a Python statement; it is an Error if the\r\n      statement raises any exception.\r\n    An example might be <b>c-->from math import factorial</b> or\r\n      <b>c-->x = [1,2,3,4,5]</b>.\r\n<p>\r\n<li>Evaluate: <b>e-->operand1-->operand2</b><br>\r\n    Evaluates <b>operand1</b> as a Python expression, converts it to a string,\r\n      and determines whether or not it is the same string as <b>operand2</b>;\r\n      it is an Error if the strings are not equal or evaluating <b>operand1</b>\r\n      raises an exception (<b>operand2</b> must be present, and its characters\r\n      are treated as a string, therefore it is not evaluated).\r\n    An example might be <b>e-->factorial(5)-->120</b>, which would not be an\r\n      Error; but <b>e-->factorial(2,5)-->120</b> and\r\n      <b>e-->factorial(5)-->110</b> would both be Errors: the first raises a\r\n      <b>TypeError</b> exception (because the function define only one\r\n      parameter although this calls supplies two) and the second compares\r\n      <b>'120' != '110'</b>, which are not equal.\r\n<p>\r\n<li>Exception: <b>^-->operand1-->operand2</b><br>\r\n    Executes <b>operand1</b> as a Python statement and determines whether or not\r\n      an exception is raised matching <b>operand2</b> (either a single\r\n      exception name, a list of exception names separated by commas, or\r\n      <b>*</b> which means any exception name); there is an Error if no\r\n      exception is raised or an exception not named by <b>operand2</b> is\r\n      raised.\r\n    An example might be <b>^-->factorial(-1)-->ValueError</b>, which would\r\n      not be an Error; but <b>^-->factorial(2)-->*</b> and\r\n      <b>^-->factorial(-1)-->TypeError,ZeroDivisionError</b> would both be\r\n      Errors: the first raises no exception and the second raises a\r\n      <b>ValueError</b> exception, which is neither <b>TypeError</b> nor\r\n      <b>ZeroDivisionError</b>.\r\n<p>\r\n<li>Relational Operator: <b>relop-->operand1-->operand2</b><br>\r\n    Evaluates <b>operand1</b> and <b>operand2</b> as Python expressions,\r\n      and determines whether the <b>relop</b> holds between them; it is\r\n      an Error if <b>relop</b> does not hold or evaluating either operand\r\n      raises an exception.\r\n    An example might be <b>==-->2*3-->3*2</b>, which would not be an\r\n      Error; but <b>in-->'a'-->['b','c','d']</b> would be an Error: the\r\n      character <b>'a'</b> is not in the list <b>['b','c','d']</b>.\r\n    <p>\r\n    Can you explain why <b>e-->2*3-->3*2</b> would be an Error?\r\n    Can you explain why <b>in-->a-->['a','b','c']</b> would be an Error?\r\n<p>\r\n<li>Comment: <b>#any text</b><br>\r\n    Prints the line number and <b>#any text</b> on the console.\r\n    Nothing is tested.\r\n    So lines that begin with # are treated like comments.\r\n</ul>\r\nGiven these formats write a test file and run the <b>batch_self_check</b>\r\n   function (with the standard default arguments) on it.\r\n<p>\r\n<b>IMPORTANT:</b> Use the Eclipse editor to create/modify data files too,\r\n   like the <b>bsc.txt</b> file.\r\nThis is especially true if you are on a Mac.\r\n<b>Do not use a Mac editor for data files</b>.\r\n<p>\r\n<ul>\r\n<li>Write a test file named <b>bsc.txt</b> (the default file name) that does\r\n      the following (each requirement translates into one line in the file, so\r\n      the file should contain 22 lines total).\r\n    I suggest that you incrementally write and test this file: it requires\r\n      running the <b>facts.py</b> module only once: each time you update\r\n      the <b>bsc.txt</b> file with another test, just reissue the <b>!</b>\r\n      command (the original default) in the <b>Console</b> view, without\r\n      stopping/rerunning the <b>driver</b> function.\r\n<ol>\r\n<li>Imports the <b>factorial</b> function from the <b>math</b> module.\r\n<li>Imports the <b>fact1</b> and <b>fact2</b> functions from the <b>facts</b>\r\n       module.\r\n<li>Comments that <b>fact1</b> is now being tested.\r\n<li>Checks whether the call <b>fact1('a')</b> raises the <b>TypeError</b>\r\n      exception (it doesn't).\r\n<li>Checks whether the call <b>fact1(-1)</b> raises the <b>ValueError</b>\r\n      exception (it doesn't).\r\n<li>Checks whether the call <b>fact1(0)</b> returns the value <b>1</b>\r\n       (it doesn't).\r\n<li>Checks whether the call <b>fact1(5)</b> returns the value <b>120</b>\r\n       (it doesn't).\r\n<li>Checks whether the call <b>fact1(10)</b> returns the same value as\r\n       <b>factorial(10)</b> (it doesn't).\r\n<li>Checks whether the call <b>fact1(10)</b> returns the same value as\r\n       <b>10*9*8*7*6*5*4*3*2*1</b> (it doesn't).\r\n<li>Checks whether the call <b>fact1(100)</b> returns the same value as\r\n       <b>100*fact1(99)</b> (it does, because both are 0).\r\n<li>Comments that <b>fact2</b> is now being tested.\r\n<li>Checks whether the call <b>fact2('a')</b> raises the <b>TypeError</b>\r\n      exception (it does).\r\n<li>Checks whether the call <b>fact2(-1)</b> raises the <b>ValueError</b>\r\n      exception (it does).\r\n<li>Checks whether the call <b>fact2(0)</b> returns the value <b>1</b>\r\n       (it does).\r\n<li>Checks whether the call <b>fact2(5)</b> returns the value <b>120</b>\r\n       (it does).\r\n<li>Checks whether the call <b>fact2(10)</b> returns the same value as\r\n       <b>factorial(10)</b> (it does).\r\n<li>Checks whether the call <b>fact2(10)</b> returns the same value as\r\n       <b>10*9*8*7*6*5*4*3*2*1</b> (it does).\r\n<li>Checks whether the call <b>fact2(100)</b> returns the same value as\r\n       <b>100*fact2(99)</b> (it does).\r\n<li>Comments that <b>sets</b> are now being tested.\r\n<li>Binds name <b>x</b> to a set containing an <b>'a'</b>, <b>'b'</b>,\r\n      <b>'c'</b>, and <b>'d'</b>.\r\n<li>Removes the value <b>'b'</b> from set <b>x</b>.\r\n<li>Checks whether set <b>x</b> is the same as a set containing an <b>'a'</b>,\r\n       <b>'c'</b>, and <b>'d'</b>.\r\n\r\n</ol>\r\n<p>\r\n<li>Run the <b>facts.py</b> script, using the <b>!</b> command to perform all\r\n      the batch self tests specified in the file you constructed above, and\r\n      verify it is producing the correct results when testing these functions.\r\n    <p>\r\n    When I ran my <b>bsc.txt</b> file with these 22 lines, the results look as\r\n      follows (except I had to elide some lines that the <b>driver</b> prints,\r\n      because it would show the exact lines that need to be entered in the\r\n      file, so the lines containing <b>.....</b> are elided):\r\n<b><pre>\r\nStarting batch_self_check\r\n    3 # Testing fact1\r\n    4 ....\r\n      *Error: ^--> failed to raise any exception\r\n    5 ....\r\n      *Error: ^--> failed to raise any exception\r\n    6 ....\r\n      *Error: e--> failed\r\n         left  value: '0'\r\n         right value: '1'\r\n    7 ....\r\n      *Error: e--> failed\r\n         left  value: '0'\r\n         right value: '120'\r\n    8 ....\r\n      *Error: == operator failed to evaluate to True\r\n         left  value: 0\r\n         right value: 3628800\r\n    9 ....\r\n      *Error: == operator failed to evaluate to True\r\n         left  value: 0\r\n         right value: 3628800\r\n   11 # Testing fact2\r\n   19 # Testing sets\r\nDone batch_self_check: 9 correct; 6 incorrect\r\nFailed checks: [4, 5, 6, 7, 8, 9]</pre></b>\r\nNote that of the 22 lines, 3 are comments (starting with <b>#</b>),\r\n  15 are tests (starting with <b>e--&gt;</b>, <b>^--&gt;</b>, or\r\n  <b>==--&gt;</b>), and 4 are \"setup\" (starting with <b>c--&gt;</b>).\r\n<li>Find the <b>Checkmate Homework Dropoff</b> link in the index of the course\r\n      web and use it to submit the <b>bsc.txt</b> file in the <b>project0d</b>\r\n        folder in the workspace for Eclipse.\r\n    If you need to, review the\r\n       <a href=\"../../../common/handouts/checkmate/index.html\" targe=\"main\">\r\n       Checkmate Tutorial</a> (which is also accessible on the\r\n       <a href=\"../../handouts.html\" target=\"_top\">Handouts</a>\r\n       web page).\r\n</ul>\r\nGenerally feel free to examine how the entire <b>driver.py</b> module (and\r\n   especially the <b>batch_self_test</b> function) works, by reading its code.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Extra Credit -->\r\n\r\n<a name=\"ExtraCredit\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Extra Credit</b></td>\r\n<td width =\"80%\">\r\nProgramming assignments must be turned in on time: you can get partial credit\r\n  for a partially completed assignment, but it must be turned in on time; I\r\n  will accept no late homework unless you have an official excuse pre-arranged\r\n  with me (and even then I will always want you to turn in whatever work you\r\n  have completed by the due date/time).\r\nIn fact, there is another incentive to finish not only on time, but to\r\n  <b>finish early</b>.\r\n<p>\r\nIn all programming assignments, if you turn in everything at least 24 hours\r\n  before it is officialy due, you will receive 1 point of extra credit.\r\nIf you turn it in 48 hours (or earlier), you will receive 2 points of extra\r\n  credit.\r\n(There is no more extra credit for early turn-ins; I recommend NOT turning it\r\n  in more than 48 hours early.)\r\nThis is equivalent to almost half a grade improvement (e.g., C+ to B, or B to\r\n  B+, or B+ to A-) on a 50 point assignment.\r\nI expect most of the students to complete their assignments and submit them\r\n  early, so they will receive some amount of extra credit; it adds up.\r\n<p>\r\nThere are two main advantages to planning on finishing early.\r\nFirst, if you run into a major problem, you will have extra time to solve it\r\n  before the actual due date: and even experienced programmers frequently run\r\n  into such problems.\r\nYes, this means you!\r\nSecond, and more importantly, if you are racing to finish before a deadline,\r\n  stress levels can go through the roof, and you become less interested in\r\n  learning the material (and the whole purpose of these programming assignments\r\n  is to learn the material) and more interested in just getting finished before\r\n  the deadline.\r\nIf you do not learn the material, then you will be at a major disadvantage for\r\n  subsequent programming assignments and tests, because of the cumulative\r\n  nature of the material in this course.\r\nTherefore, work on an aggressive schedule and plan to finish <b>every</b>\r\n  assignment by Sunday or Monday evening (or even earlier).\r\n<p>\r\nProgramming assignments sometimes also include an extra credit section worth\r\n  1 point.\r\nThese are designed for students who finish early and want to continue exploring\r\n  programming within the context of the assignment.\r\nThe single point is to acknowledge, in a very small way, their extra effort.\r\n<p>\r\nThis assignment has no special extra-credit section.\r\nYou can get extra credit on it only for an early dropoff.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Time Management -->\r\n\r\n<a name=\"TimeManagement\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Time Management</b></td>\r\n<td width =\"80%\">\r\nOne of the hardest parts of being in college is learning how to manage your\r\n  time.\r\nTime management is especially important in programming courses (and in the real\r\n  world, when you are working on complicated projects with hard deadlines).\r\nThe difference between good and bad time management can have a profound impact\r\n  on how much you learn in this course, how well you perform in it, how\r\n  much effort you actually need to expend to do well, and how you feel about\r\n  the course..\r\n<p>\r\nMost programming assignments can be broken into a series of smaller tasks, each\r\n  that can serve as a milestone; when solved in sequence, these tasks will\r\n  complete the entire assignment.\r\n<p>\r\nGenerally, it is best to spread out the work on a two-week assignment.\r\nMost assignmnts become available on Tuesday morning; I recommend reading the\r\n  assignment before/during lab, so that if you are unsure about any parts of\r\n  it, you can ask relevant questions about them on the Forum; this reading\r\n  might include examining and understanding code provided in the writeup.\r\nYou should start working on it during lab, and should plan to complete at\r\n  least half the programming assignment by the next Tuesday lab.\r\nYou should try to finish it by late the following the week: if not by Friday,\r\n  you can work over the weekend to finish it.\r\nIn a worst-case scenario you can use the lab on Tuesday to finish, asking\r\n  final questions of the staff during that lab.\r\n<p>\r\nSome students look at an assignment and think that it is best done in one\r\n  sitting.\r\nIf you can do so, great; but, if you plan to work this way, do the one sitting\r\n  early, not the weekend before it is due.\r\nIn this way, if you are wrong about the amount of time that it will take, you\r\n  will still have adequate time to complete the assignment.\r\n<p>\r\nLikewise, I have seen students who always spend Tuesday finishing the previous\r\n  assignment, and not get around to looking at and starting the next one.\r\nThis starts them on a bad path for finishing the next assignment.\r\n<p>\r\nBy meeting these time goals, you will both maximize what you learn and minimize\r\n  your anxiety and the time that it takes for you to do the learning.\r\n<p>\r\nRemember that assignments must be turned in on time: you can get partial credit\r\n  for a partially completed assignment, but it must be turned in on time; I\r\n  will accept no late homework unless you have an official excuse pre-arranged\r\n  with me (and even then I will always want you to turn in whatever work you\r\n  have completed by the due date/time).\r\n<p>\r\nFinally, if you find yourself falling behind, seek help immediately (from me,\r\n  the TA, the Lab Tutor, or even other students in the course - but only in\r\n  ways that preserve academic integrity).\r\nWhen the real programs start, we will discuss in more detail what kind of help\r\n  you can get legitimately, and what kind of help constitutes academic\r\n  misconduct (cheating).\r\n</td>\r\n</tbody>\r\n</table>\r\n</body>\r\n</html>\r\n\r\n\r\n\r\n", "encoding": "ascii"}