{"url": "https://www.ics.uci.edu/~taylor/ICS125_FQ04/design.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r<HTML>\r<HEAD>\r   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\r   <META NAME=\"GENERATOR\" CONTENT=\"Mozilla/4.07 (Macintosh; I; PPC) [Netscape]\">\r   <TITLE>Deliverable 3: Design</TITLE>\r</HEAD>\r<BODY BGCOLOR=\"#FFFFF0\">\r\r<CENTER>\r<H2> ICS 125: Project in Software System Design</H2></CENTER>\r\r<CENTER>\r<H3> Fall Quarter 2003</H3>\r</CENTER>\r\r<CENTER>\r<H1> Architecture and Module Specifications</H1></CENTER>\r\r<H3>\rDue Date</H3>\rAs described in the course syllabus.\r\r<HR>\r<h3>Overview</h3>\r<P>After finalizing your requirements, your team shall develop a\rdesign that fully satisfies the requirements for your\rapplication. This deliverable will consist of two primary components:\ra design specification (consisting of a high-level architectural design\rand module specifications) and an integration test plan. \r\r<P>You may wish to do an object-oriented design and adhere to the Object\rModeling Technique. In this case, your design specification should\rinclude the following three models: the object model, which consists of\robject diagrams; the dynamic model, which consists of event traces and\rstate diagrams; and the functional model, which consists of data flow diagrams.\rThe design should describe all system level objects/tasks, operations,\rthe relationships between those objects/tasks, and external interaction\rwith the environment as well as object class specifications that further\rdetail the object design.\r\r<P>In conjunction with this object-oriented design, your team must develop\ran integration test plan covering the\rinterfaces between specified modules and/or objects. The integration\rtest plan must cover all interactions between modules/objects by applying\rfunctional test heuristics (black box) to each module/class interface in\rthe design specification and developing a test plan for each interaction\rbetween modules and/or objects.\r\r<P>Your document must specify the correspondence between the\rrequirements specification and your design. You may show this\rcorrespondence any way you feel is appropriate (e.g., make notations\rthroughout your document or using a table that cross-references\rparagraph numbers).\r\r<P>Developing the software design will undoubtedly reveal inadequacies\rin previous documents. Please note these problems and what was done to\rsolve them.\r\r<P>Don't forget to include your meeting minutes and performance appraisals\rwith your document; refer to the syllabus for the complete check-list of\rwhat has to be turned in. As before, make sure that you post your design\rdocument and your meeting minutes to your team web page.\r\r<HR>\r<H3> Deliverable Objectives/Quality</H3>\rKeep in mind that key objectives of a design document are to:\r<UL>\r<LI> Develop a coherent representation of software that will satisfy requirements</LI>\r<LI> Identify inadequacies in requirements</LI>\r<LI> Decompose the system into sub-systems that provide related sets of services</LI>\r<LI> Establish a framework for sub-system control and communication</LI>\r<LI> Specify modules that can be assigned as coding responsibilities</LI>\r<LI> Document design decisions and rationale</LI>\r<LI> Provide a reference tool readable by developers, testers, and maintainers</LI>\r<LI> Provide a basis for integration and testing</LI>\r</UL>\r\rIn addition, keep in mind that a design document should exhibit the\rfollowing qualities:\r<UL>\r<LI> Complete: everything that is essential is described</LI>\r<LI> Rigorous: expressed in a well-defined notation</LI>\r<LI> Consistent: no mismatched interfaces</LI>\r<LI> Uniform: the entire document is at same level of detail</LI>\r<LI> Modifiable: this document will change just like all the others</LI>\r<LI> Desensitized to change: hides implementation details and secrets</LI>\r<LI> Confirmable, verifiable and testable: you can tell when you've met the\rdesign</LI>\r</UL>\r\r<HR>\r<H3> Document Contents</H3>\r\r<H4> Introduction</H4>\rExpand your introduction to discuss your specific approaches to the\rdesign of the system and the organization of this document. This\rdescription is essentially just an updated version of the introduction\ryou included in your previous deliverable.\r\r<H4> Understanding</H4>\rExpand the understanding section of your previous document. Make sure\rto add descriptions of what steps or actions you took to understand\reach technology studied during this phase. If you make changes to this\rsection, add text describing why the change was necessary, and why it\rmore accurately reflects your new understanding. This section need not\rbe different if your understanding hasn't changed.\r\r<H4> Project Plan</H4>\rThis will be an iterative expansion of your previous submission. Expand\ryour project plan to represent how you have accomplished the work so\rfar.  Reassess the project risks. Expand your task network or work\rbreakdown structure to include the effort expended to complete this\rtask. Based on the work you have done, revise your estimates on how\rmuch your team can accomplish and deliver.\r\r<P>If you make changes, add text describing why the change was\rnecessary or why it will improve the ability of your team to accomplish\rthe work you have proposed.\r\r<H4> Design Specification</H4>\r\r<UL>\r<LI> Architecture Overview</LI>\r   <UL>\r   <LI> Architectural Style</LI>\r   <BR>What style of architecture did you adopt? Provide a reference to a\r   defining document.\r   \r   <LI> System Architecture Overview</LI>\r   <BR>This is the place for your \"one great diagram\" that shows how your\r   system is built. You might want to use more than one diagram, to show,\r   e.g., some different abstractions of the design (such as a data flow view,\r   a layers of abstraction view, an object view, or an OS process view)\r   \r   <LI> Subsystem Narrative</LI>\r   <BR>What each subsystem means\r   \r   <LI> Major limitations on the current design</LI>\r   </UL>\r\r<LI>\rModules/Objects Specification</LI>\r<BR>If you would like to use the Object Modelling Technique (OMT), see\rthe associated <A HREF=\"http://www.ics.uci.edu/~djr/ics125/OMT.html\">OMT\rformat</A> as a suggestion.\r   <UL>\r   <LI> List of Modules/Objects within your system</LI>\r   <LI> For each module/object, provide a Module Specification</LI>\r      <UL>\r      <LI> Name</LI>\r      <LI> Definition/Purpose - what it is/does</LI>\r      <LI> Narrative/Comment - how it works</LI>\r      <LI> What are the interfaces or APIs? E.g., using Java terminology</LI>\r        <BR>public\r        <BR>private\r        <BR>protected\r      <LI> Data - What state does it keep, what variables?</LI>\r      <LI> Access - Who has access to the module/object/data?</LI>\r      <LI> How does it fit into the inheritance/with/uses heirarchy?</LI>\r      <LI> Constraints - what constraints are there for this object/module?</LI>\r      <LI> Cardinality - How many will there be?</LI>\r      </UL>\r   <LI> Other useful diagrams : Uses, is-Composed-of, Design class diagrams, State\r   transition diagrams, API's Class-category diagrams, or other useful diagrams</LI>\r   </UL>\r</UL>\r\r<H4> Integration Test Plan</H4>\r<p>\rIncludes an integration test plan capable of demonstrating that the\rdesign meets the functionality specified in the requirements. Test\rcases should cover each module/object and module/object interaction\rspecified in the design. You should consider each module/object as a\rsubsystem and apply functional (black box) test heuristics (such as\rinput/output coverage and error/exception coverage) to the parameters\ridentified in each operation in the interface. In addition, you should\rdevelop a test case for each module/object interaction.\r\r<P>NOTE: if desired, the test cases can be grouped with the design\rentity to which they apply, otherwise a cross reference listing of some\rsort should be provided.\r\r<UL>\r   <LI> For each test</LI>\r      <UL>\r      <LI> Test ID</LI>\r      <LI> Purpose of Test</LI>\r      <LI> Item(s) being tested</LI>\r      <LI> Input specification</LI>\r      <LI> Output specification</LI>\r         <UL>\r         <LI> Expected Results or Test Oracle Mechanism</LI>\r         </UL>\r      <LI> Test environmental needs or special test procedures</LI>\r      </UL>\r</UL>\r\r<H4> Initial Demonstration Plan</H4>\rWhat and how will you demonstrate? \r\r<H4> Tracking and Control Mechanisms</H4>\r<p>\rConfiguration Management: how will your modules/objects be managed?\r<UL>\r   <LI> file structure, sub-directories, Makefiles, etc.</LI>\r   <LI> persistent data</LI>\r</UL>\r\r<p>\rRequirements Cross Reference: what modules/objects satisfy what requirements?\r<UL>\r   <LI> a table mapping requirement to module/object</LI>\r   <BR>make sure it is complete and consistent.\r</UL>\r\r<H4> Modifications to Prior Documents</H4>\r\r<H5> Requirements</H5>\rIf any requirements changed, were added or deleted, this is the place\rto make this explicit. Highlight why the requirement was\rchanged/added/deleted and by whom (customer, developer, etc.). Make\rsure your requirements meet the objectives of completeness,\runderstandability, utility, unambiguity, and consistency. If your\rrequirements have not changed, then this section should be identical to\rwhat you submitted earlier.\r\r<H4> Glossary</H4>\rDefines any terms used in the specifications above.  This portion of\rthe document may be written as an extension to the glossary submitted\rwith the requirements, or may be a separate document that only defines\rterms local to the design phase.\r\r<H4> Additional Documentation</H4>\r\rThis section is reserved for any additional documentation developed\rduring this phase of the project. Specifically, if during the course of\rdeveloping the architecture your understanding of the various\rtechnologies involved in the project changed, or you discovered items\rthat were not documented but which are important, include that\rinformation here.\r\r<P>Also list here the major background sources that you used during\rthis phase or any that you plan to use during the remainder of the\rproject. This includes references to similar systems and/or\rprocedures.\r\r<hr>\r<h3>Design Presentations/Reviews.</h3>\rSee the syllabus for dates.\r\r<P>Each team should prepare a 15 minute presentation, after which we will\rallow up to 5 minutes of questions. \r\r<p>\rPrepare your presentation appropriately. Your presentation should include\rthe following:\r<UL>\r   <LI> Some context for your project (brief!);</LI>\r   <LI> Current state of your project plan;</LI>\r   <LI> Highlights of your design including</LI>\r      <UL>\r      <LI> an overview of your architecture (this should comprise the bulk\r\t of your presentation)</LI>\r      <LI> one or more key module/object specifications;</LI>\r      </UL>\r   <LI> Modifications to your requirements that arose as a result of your design\r   process;</LI>\r   <LI> Overview of your integration test plan.</LI>\r</UL>\r\r</BODY>\r</HTML>\r", "encoding": "ascii"}