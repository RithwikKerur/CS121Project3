{"url": "https://www.ics.uci.edu/~kay/courses/i41/vectors.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Monday, December 6, 2004 6:57 AM\">\n<TITLE>Vectors of Vectors</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D06B02B3\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"Scheme, two-dimensional arrays, images\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Narrative example of creating two-dimensional arrays (vectors of vectors) in Scheme, using a rectangular array of pixels as the problem domain.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2004 by David G. Kay.  All rights reserved.\">\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<FONT FACE=\"Goudy Old Style\">Informatics 41 * Fall 2010 * David G. Kay *\nUC Irvine</FONT>\n<P><b><font size=\"6\" face=\"Goudy Old Style\">Vectors Containing Vectors</font></b></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>Nested data structures:  </B>By now, everyone\nshould be comfortable with the idea that an expression in Scheme can be\nany type&mdash;a number, a string, a list, a vector, a function&mdash;and that if\nyou can have a list of numbers, you can also have a list of structures,\na list of lists, a list of vectors, and so on.  Of course, you can also\ndo the same with vectors:  You can have a vector of numbers, a vector of\nstructures, a vector of lists, and a vector of vectors.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>Two-dimensional tables:</B>  A vector of\nvectors forms a two-dimensional table, with rows and columns.  This organization\nmodels many real-world situations, such as enrollment statistics (a row\nfor each major, with columns for the number of freshman, sophomore, junior,\nand senior students in the major), a weekly schedule (a row for each hour-long\nblock of time and a column for each day of the week), or a gradebook (a\nrow for each student and a column for each assignment).  The score arrays\nwe handled in the homework were arranged differently:  We had a vector for\neach assignment, containing all the students&#39; scores on that assignment,\nand then a list of assignment vectors.  But we could have had a vector of\nassignment vectors, which would have been a two-dimensional structure with\na row for each assignment and a column for each student, just a rotated\nversion of the gradebook described above.  Try drawing pictures of these\nif you&#39;re having trouble visualizing them.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>Processing nested data structures:  </B>When\nwe process a complex structure (a list of structures, a vector of lists),\nwe handle it one layer at a time.  With a list of restaurants, we have functions\nthat manipulate a single restaurants and other functions that manipulate\nthe list.  (If each restaurant contains a menu, a list of dishes, we would\nhave a third, lower layer for manipulating the list and possibly a fourth\nfor manipulating a single dish.)  We should approach two-dimensional tables\nthe same way:  Consider operations on the vector representing a row, and\nthen consider operations on the vector of rows.  We&#39;ll see that in the\nexample below.  We&#39;ll also see that the two-dimensional structure allows\nus to operate vertically on a single column.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>The fixed structure of vectors:</B>  One\nof the characteristics of vectors, including two-dimensional vectors, is\nthat their structure exists independently of the data.  We wouldn&#39;t\nnormally think of setting up a list of 20 restaurants without having the\nrestaurants to fill the list, but with vectors, we might create those 20\nslots and fill them later; the same might go for a two-dimensional table.\n In fact, we know this is true down at the memory level of the machine:\n The system allocates space for a vector all at once, contiguously in memory;\nthe space is there whether we fill it or not.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>An example:</B>  A color is </FONT><FONT FACE=\"Courier New\" SIZE=2>(define-struct\ncolor (red green blue))</FONT><FONT FACE=\"Goudy Old Style\">, where each\nfield is a number from 0 to 255.  We can define the function </FONT><FONT FACE=\"Courier New\" SIZE=2>create-line</FONT><FONT FACE=\"Goudy Old Style\">\nthat builds a vector of colors; that vector could represent one line of\npixels; stacking similar lines on top of each other could create a rectangular image. [Note that in this set of examples, we're producing graphics pixel by pixel. This is at a lower level than the graphics we produced using the Picturing Programs library\u00e2\u20ac\u201dthat library let us build rectangles and other shapes directly, but underneath, it's doing the kind of thing described here.]  </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; create-line: number color -&gt; vector-of-color<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; Return a vector with the specified number\nof elements; each element is a color<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>(define create-line<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160; (lambda (width color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;   (build-vector width (lambda(i)\ncolor))))</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">If we say </FONT><FONT FACE=\"Courier New\" SIZE=2>(define\nmy-line (create-line 500 (make-color 0 0 0)))</FONT><FONT FACE=\"Goudy Old Style\">,\ngiving us a line of 500 black pixels, we can write a Scheme expression that\nreturns the 17th color in </FONT><FONT FACE=\"Courier New\" SIZE=2>my-line</FONT><FONT FACE=\"Goudy Old Style\">:\n </FONT><FONT FACE=\"Courier New\" SIZE=2>(vector-ref my-line 16)</FONT><FONT FACE=\"Goudy Old Style\">.\n (Remember that vectors start counting from zero.  We need to keep this\nfact in mind whenever we code with vectors (in Java as well as Scheme);\na vector whose length is <I>n</I> has elements numbered 0 through <I>n</I>&ndash;1.)\n We could set the first pixel on the line to white with </FONT><FONT FACE=\"Courier New\" SIZE=2>(vector-set!\nmy-line 0 (make-color 255 255 255))</FONT><FONT FACE=\"Goudy Old Style\">.\n [Exercise:  Write a function to take a line, a number n, and a color, and\nset the first n pixels on the line to the specified color.  <A HREF=\"Vectors_of_Vectors_files/vectors.html\">Solution</A>]</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Next, we can define the function </FONT><FONT FACE=\"Courier New\" SIZE=2>create-image</FONT><FONT FACE=\"Goudy Old Style\">\nthat builds a vector of lines (as defined above), representing a rectangular\nimage.<A NAME=\"_14_4197\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; create-image: number number color -&gt;\nvector-of-lines<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; Return a vector; the first argument is\nits size.  The remaining arguments<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; are used to create each element of the\nvector (i.e., a line from create-line)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>(define create-image<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (height width color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (build-vector height\n(lambda (i) (create-line width color)))))</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">If we say </FONT><FONT FACE=\"Courier New\" SIZE=2>(define\nmy-image (create-image 300 500 (make-color 0 0 0)))</FONT><FONT FACE=\"Goudy Old Style\">,\nwe get an image that&#39;s 300 pixels tall and 500 pixels wide, all black.\n The expression </FONT><FONT FACE=\"Courier New\" SIZE=2>(vector-ref my-image\n22)</FONT><FONT FACE=\"Goudy Old Style\"> returns the 23rd line in </FONT><FONT FACE=\"Courier New\" SIZE=2>my-image</FONT><FONT FACE=\"Goudy Old Style\">.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">The pixel in the upper left corner of the image\nis </FONT><FONT FACE=\"Courier New\" SIZE=2>(vector-ref (vector-ref my-image\n0) 0)</FONT><FONT FACE=\"Goudy Old Style\">; the inner </FONT><FONT FACE=\"Courier New\" SIZE=2>vector-ref</FONT><FONT FACE=\"Goudy Old Style\">\ngives us the first line, and the outer one takes the first pixel from that\nline.  [Exercise:  Write a function </FONT><FONT FACE=\"Courier New\" SIZE=2>image-ref</FONT><FONT FACE=\"Goudy Old Style\">\nthat takes an image and two numbers, representing a row and column, and\nreturns the corresponding pixel from an image, so that </FONT><FONT FACE=\"Courier New\" SIZE=2>(image-ref\nmy-image 0 0)</FONT><FONT FACE=\"Goudy Old Style\"> would be the upper left\npixel and </FONT><FONT FACE=\"Courier New\" SIZE=2>(image-ref my-image 0 499)</FONT><FONT FACE=\"Goudy Old Style\">\nwould be the pixel in the upper right.  Then, write </FONT><FONT FACE=\"Courier New\" SIZE=2>image-set!</FONT><FONT FACE=\"Goudy Old Style\">\nthat takes an image, a row number, a column number, and a color, and sets\nthe specified pixel to that color.  <A HREF=\"Vectors_of_Vectors_files/_image-ref_vector_numbe.html\">Solution</A>]</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">With </FONT><FONT FACE=\"Courier New\" SIZE=2>image-ref</FONT><FONT FACE=\"Goudy Old Style\">\nand </FONT><FONT FACE=\"Courier New\" SIZE=2>image-set!</FONT><FONT FACE=\"Goudy Old Style\">,\nwe can manipulate our pixels in many ways.  The point here is less about\nthe graphics than it is to illustrate the techniques for processing vectors,\nso try to understand how the code does what it does.</FONT><BR>\n</P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; draw-vertical: image number color -&gt;\nside effect, changing image<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; Draw a vertical line in the image, along\nthe specified column, <br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; using the specified color.<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>(define draw-vertical<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (image column color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (local ((define draw-vertical-aux <br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160; (lambda (image row column color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160;  &#160; (cond<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160;  &#160;  &#160; ((&lt; row 0) image)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160;  &#160;  &#160; (else (begin<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (image-set!\nimage row column color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (draw-vertical-aux\nimage (sub1 row) column color)))))))<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; (draw-vertical-aux\nimage (sub1 (vector-length image)) column color))))</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Here in </FONT><FONT FACE=\"Courier New\" SIZE=2>draw-vertical</FONT><FONT FACE=\"Goudy Old Style\">,\nwe start at the last row, which is </FONT><FONT FACE=\"Courier New\" SIZE=2>(sub1\n(vector-length image))</FONT><FONT FACE=\"Goudy Old Style\">, and count down\nto the first row (row 0).</FONT><BR>\n</P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; draw-horizontal: image number color -&gt;\nside effect, changing image<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; Draw a horizontal line in the image,\nalong the specified row,<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; using the specified color.<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>(define draw-horizontal<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (image row color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (local ((define draw-horizontal-aux<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160; (lambda (image row column color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160;  &#160; (cond<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160;  &#160;  &#160; ((&lt; column 0) image)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160;  &#160;  &#160; (else (begin<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (image-set!\nimage row column color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (draw-horizontal-aux <br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\nimage row (sub1 column) color)))))))<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; (draw-horizontal-aux <br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160; image <br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160; row <br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160; (sub1\n(vector-length (vector-ref image 0))) ; length of first row<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160; color))))</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">In </FONT><FONT FACE=\"Courier New\" SIZE=2>draw-horizontal</FONT><FONT FACE=\"Goudy Old Style\">,\nwe follow the same approach, starting at the right edge (which we find by\ntaking the length of one of the rows in </FONT><FONT FACE=\"Courier New\" SIZE=2>(sub1\n(vector-length (vector-ref image 0)))</FONT><FONT FACE=\"Goudy Old Style\">)\nand counting down to the first column (column 0).</FONT><BR>\n</P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>;; draw-diagonal: image color -&gt; side\neffect, changing image<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; Draw a diagonal line starting in the\nupper left corner of the image,<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; using the specified color.<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>(define draw-diagonal<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (image color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (local ((define limit <br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (sub1 (min (vector-length image)                   ; number\nof rows<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  (vector-length\n(vector-ref image 0))))) ; num of columns<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160; (define draw-diagonal-aux<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160; (lambda (image color current-row-col)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160; (cond                           ; The drawing actually\nENDS at<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160; ((&lt; current-row-col 0) image) ; the upper\nleft corner.<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160;  &#160;  &#160; (else (begin<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (image-set!\nimage current-row-col current-row-col color)<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n&#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (draw-diagonal-aux <br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\nimage color (sub1 current-row-col))))))))<br>\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; (draw-diagonal-aux\nimage color limit))))</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">In </FONT><FONT FACE=\"Courier New\" SIZE=2>draw-diagonal</FONT><FONT FACE=\"Goudy Old Style\">,\nwe also count backwards from the end of the diagonal to the upper left corner\n(row 0, column 0).  Because our image may not be square, we have to find\nthe endpoint by finding the lesser of the number of rows and the number\nof columns.  Then we use the same subscript (</FONT><FONT FACE=\"Courier New\" SIZE=2>current-row-col</FONT><FONT FACE=\"Goudy Old Style\">)\nfor both the row and column number, giving us the diagonal.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">You can contemplate a wide range of enhancements\nhere:  Draw lines wider than one pixel; draw lines that start or end at\na specified row or column; draw a border around the edge of the image; instead\nof passing a color, pass a function that takes the original color and changes\nit somehow; draw rectangles, triangles, or circles.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">We can manipulate images like this using the</FONT><FONT FACE=\"Courier New\" SIZE=2>image.ss</FONT><FONT FACE=\"Goudy Old Style\"> or the </FONT><FONT FACE=\"Courier New\" SIZE=2>picturingprograms.rkt</FONT><FONT FACE=\"Goudy Old Style\"> </FONT><FONT FACE=\"Goudy Old Style\">teachpack; refer  to the  documentation for more details.  That package gives us access\nto pixels stored in lists, however, not in vectors.  [Exercise:  Write the\nfunction </FONT><FONT FACE=\"Courier New\" SIZE=2>color-list-&gt;image-vector</FONT><FONT FACE=\"Goudy Old Style\">\nthat takes a list of colors, a number of rows, and a number of columns,\nand converts the list into one of our two-dimensional image vectors.  Then\nwrite </FONT><FONT FACE=\"Courier New\" SIZE=2>image-vector-&gt;color-list</FONT><FONT FACE=\"Goudy Old Style\">\nthat goes the other way.  <A HREF=\"Vectors_of_Vectors_files/_color-list-_image-vecto.html\">Solution</A>]</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">All the code in this example is available in\none file, </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/scheme/imagevectors.scm\">http://www.ics.uci.edu/~kay/scheme/imagevectors.scm</A></FONT><FONT FACE=\"Goudy Old Style\">\n.</FONT><BR CLEAR=ALL>\n</P>\n<HR>\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,</FONT><a href=mailto:kay@uci.edu><font face=\"Goudy Old Style\"> </font>kay@uci.edu</A>\n</address>\n<P>\n<FONT FACE=\"Palatino\" SIZE=1>Monday, December 6, 2004 -- 6:57 AM</FONT></P>\n</BODY>\n</HTML>\n", "encoding": "Windows-1252"}