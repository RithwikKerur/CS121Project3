{"url": "https://www.ics.uci.edu/~emilyo/teaching/info43f2015/homeworks/Homework3.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n  <meta http-equiv=\"Content-Style-Type\" content=\"text/css\">\n  <title></title>\n  <meta name=\"Generator\" content=\"Cocoa HTML Writer\">\n  <meta name=\"CocoaVersion\" content=\"1348.17\">\n  <style type=\"text/css\">\n    p.p1 {margin: 0.0px 0.0px 14.0px 0.0px; text-align: center; font: 18.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p2 {margin: 0.0px 0.0px 15.0px 0.0px; text-align: center; font: 12.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p3 {margin: 0.0px 0.0px 6.0px 0.0px; font: 12.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p5 {margin: 0.0px 0.0px 12.0px 0.0px; font: 12.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p6 {margin: 0.0px 0.0px 15.0px 0.0px; font: 12.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    p.p8 {margin: 0.0px 0.0px 9.0px 0.0px; font: 12.0px Georgia; color: #000000; -webkit-text-stroke: #000000}\n    li.li7 {margin: 0.0px 0.0px 9.0px 0.0px; font: 12.0px Times; color: #000000; -webkit-text-stroke: #000000}\n    li.li8 {margin: 0.0px 0.0px 9.0px 0.0px; font: 12.0px Georgia; color: #000000; -webkit-text-stroke: #000000}\n    span.s1 {font-kerning: none}\n    span.s2 {font: 12.0px Georgia; font-kerning: none}\n    span.s3 {-webkit-text-stroke: 0px #000000}\n    span.s4 {font: 12.0px Times; text-decoration: underline ; font-kerning: none; color: #042eee; -webkit-text-stroke: 0px #042eee}\n    span.s5 {font: 12.0px Georgia; -webkit-text-stroke: 0px #000000}\n    span.s6 {font: 12.0px Courier; font-kerning: none}\n    span.s7 {font: 12.0px Times; text-decoration: underline ; font-kerning: none; color: #053bee; -webkit-text-stroke: 0px #053bee}\n    span.s8 {font: 12.0px Times; -webkit-text-stroke: 0px #000000}\n    span.s9 {font: 12.0px Times; font-kerning: none}\n    span.Apple-tab-span {white-space:pre}\n    ol.ol1 {list-style-type: decimal}\n    ul.ul1 {list-style-type: circle}\n  </style>\n</head>\n<body>\n<p class=\"p1\"><span class=\"s1\"><b>Inf 43: Introduction to Software Engineering</b></span></p>\n<p class=\"p2\"><span class=\"s1\"><b>Fall, 2015<br>\nHomework 3: Version Control with Git<br>\nPart A due Tuesday, November 24, 11:55pm <br>\nPart B due Tuesday, December 1, 11:55pm <br>\nPart C due Thursday, December 3, 11:55pm</b></span></p>\n<p class=\"p3\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p4\"><span class=\"s1\">Homework 3 will introduce you to the concepts and software behind version control, using the example of Git.</span></p>\n<p class=\"p5\"><span class=\"s1\">The assignment consists of several parts.</span><span class=\"s2\"><span class=\"Apple-converted-space\">\u00a0</span></span></p>\n<p class=\"p5\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p6\"><span class=\"s1\"><b>Part A</b></span></p>\n<p class=\"p4\"><span class=\"s1\">Part A focuses on installing Git and becoming familiar with its basic concepts and commands.</span></p>\n<p class=\"p5\"><span class=\"s1\"><i>There's no question that installing software can be tricky. If you run into problems, first Google them. If that doesn\u2019t help, post them on Piazza with as much detail as possible, and help will soon be on the way.</i></span></p>\n<ol class=\"ol1\">\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Read <a href=\"http://www.git-scm.com/book/en/\"><span class=\"s4\">Pro Git</span></a>, by Scott Chacon. Read all of chapter 1 except 1.5 and 1.6. Read sections 2.1-2.4 of chapter 2.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Choose how you will use Git:</span></li>\n  <ul class=\"ul1\">\n    <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Install Git on your Windows computer. Download the installer from <a href=\"http://git-scm.com/downloads\"><span class=\"s4\">http://git-scm.com/downloads</span></a> and run it. For the rest of the homework, use the Git Bash option (aka the Git Bash shell), not the Git GUI option. All your Git commands are entered in the \"Git Bash\" window, and all output will appear there.</span></li>\n    <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Install Git on your Mac computer. Download the installer from <a href=\"http://git-scm.com/downloads\"><span class=\"s4\">http://git-scm.com/downloads</span></a> and run it. For the rest of the homework, access git through Terminal.</span></li>\n    <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">SSH (for example, using <a href=\"http://www.putty.org/\"><span class=\"s4\">PuTTY</span></a>) to openlab.ics.uci.edu to remotely access Git on the computer lab's Linux environment.</span></li>\n    <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Go to the ICS computer lab. The Linux machines should have Git installed.</span></li>\n  </ul>\n  <li class=\"li8\"><span class=\"s3\"></span><span class=\"s1\">Note: Bash and Terminal (on a Mac) are examples of a \"shell\", a Unix concept that has proved quite durable. In a shell (or command prompt window) you can enter commands which cause actions, such as listing, creating, and deleting files. Some useful commands that work in the Git Bash shell and in Terminal:</span></li>\n  <ul class=\"ul1\">\n    <li class=\"li8\"><span class=\"s3\"></span><span class=\"s1\">cd<span class=\"Apple-tab-span\">\t</span><span class=\"Apple-tab-span\">\t</span><i>(change directory)</i></span></li>\n    <li class=\"li8\"><span class=\"s3\"></span><span class=\"s1\">pwd<span class=\"Apple-tab-span\">\t</span><span class=\"Apple-tab-span\">\t</span><i>(print working directory)</i></span></li>\n    <li class=\"li8\"><span class=\"s3\"></span><span class=\"s1\">ls -al<span class=\"Apple-tab-span\">\t</span><span class=\"Apple-tab-span\">\t</span><i>(list all, one per line)</i></span></li>\n  </ul>\n  <li class=\"li7\"><span class=\"s5\"></span><span class=\"s2\">Run</span><span class=\"s1\"> the command </span><span class=\"s6\">git help</span><span class=\"s1\">, and take a screen print showing the results. (On a Windows machine, use Alt-PrintScreen to put the active window image in the clip board. On a Mac, see <a href=\"http://graphicssoft.about.com/od/screencapturemac/ht/macscreenshot.htm\"><span class=\"s7\">this page</span></a>.) Paste the screen print into a Word file</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">GitHub is a widely used location to store git repositories. You'll probably need a GitHub login name in your later courses or in your software engineering career. If you don't have an account on GitHub.com, create one at <a href=\"https://github.com/\"><span class=\"s7\">https://github.com/</span></a>. Put your GitHub username at the top of the Word file from the previous step.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Upload your Word file to the EEE Drop Box \"Homework3A\u201d by the deadline</span></li>\n</ol>\n<p class=\"p6\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p6\"><span class=\"s1\"><b>Part B</b></span></p>\n<p class=\"p4\"><span class=\"s1\">In Part B you will create a local repository and perform basic operations on it.</span></p>\n<p class=\"p8\"><span class=\"s1\"><br>\n</span></p>\n<ol class=\"ol1\">\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Create (somewhere on your computer) a new empty folder named Inf43Hw3. In that folder, create a plain text file with your name and student ID # on a single line. Don't use MS Word for this, use a text editor, for example Notepad or TextEdit (you may need to choose Plain Text under Format or Preferences). Save the file as file1.txt.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">In your Git shell, navigate to Inf43Hw3. Use the <a href=\"http://frost.ics.uci.edu/inf43/cd-info.html\"><span class=\"s4\"><b>cd</b> command</span></a> to change your current folder/directory. Note that the Windows Git Bash shell follows Unix/Linux shell conventions so if you're on Windows, you still need to use Linux-style paths with forward slashes (e.g., c:\\my_folder\\my_subfolder would be /c/my_folder/my_subfolder). Linux commands like ls, pwd, and grep should all work in the Git Bash shell.</span></li>\n  <li class=\"li8\"><span class=\"s8\"></span><span class=\"s9\">Note: At this point </span><span class=\"s1\">you may find that Git wants you to tell it your name and email address. You can do this with two commands like these:<span class=\"Apple-converted-space\">\u00a0</span></span></li>\n  <ul class=\"ul1\">\n    <li class=\"li7\"><span class=\"s3\"><b></b></span><span class=\"s1\"><b>git config --global user.name \"Peter Anteater\"</b></span></li>\n    <li class=\"li7\"><span class=\"s3\"><b></b></span><span class=\"s1\"><b>git config --global user.email \"panteat@uci.edu\"</b></span></li>\n    <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">To look at all your configuration information: <b>git config --global -1</b></span></li>\n  </ul>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Create a local Git repo by running the command <b>git init</b>.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git status</b>. Note that file1.txt is listed as untracked. We want Git to track it, so run <b>git add file1.txt</b>. When you \"add\" a file you are telling Git to keep track of it. \"add\" also tells Git to <i>stage</i> the file, which means put it in the stage of being ready to be committed.<span class=\"Apple-converted-space\">\u00a0</span></span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git status</b> again. Note that file1.txt is now listed as a file to be committed (i.e., it's staged).</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Let's commit file1.txt to our repository. Run <b>git commit -m \"Committing a new file with my name\"</b>. When you \"commit,\", you in effect copy all staged files to the repository. The \"-m\" is a flag (that's what the hyphen indicates) which tells Git that the following string is a message to record with the commit.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git log</b>. This will display the history of changes made to the repository. The one and only entry will be for the commit of file1.txt you just did.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Edit file1.txt and change the spelling of your name to something incorrect. Save file1.txt with the error. (This small error stands in for a long complex series of edits that you want to undo.)</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git reset --hard</b>. \"reset --hard\" removes all uncommitted changes, so all files in the repo will return to their contents as of the latest commit. There are many ways to undo changes in git, and \"reset --hard\" is generally considered to be dangerous. Look at file1.txt and observe the effect of reset --hard.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Edit file1.txt to <i>remove</i> your student ID# and <i>include</i> the name of your major, and save the file.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Commit with <b>git commit -m \"Now has my major\"</b>. This doesn't work. Git tells you there are \"changes not staged for commit\".</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Try again with <b>git commit -a -m \"Now has my major\"</b>. The power of the \"-a\" flag is that it tells git to automatically stage all tracked, modified files before the commit.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">You can also explicitly stage a file. Add the name of your favorite restaurant and favorite movie to to file1.txt, save it, and run <b>git stage file1.txt</b>. Now run <b>git commit -m \"Added favorite restaurant\"</b> to commit. \"git stage\" is really just another name for \"git add\".</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">You set the commit message to \"Added favorite restaurant\", but the file also includes your favorite movie, so maybe we should have included that in our commit message. Amend your commit message with <b>git commit --amend -m \"Added favorite restaurant and movie\"</b>.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git log</b> to make sure you have successfully changed history.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">You removed your student ID# a few steps back. Let that edit stand in for deleting, a few months ago, a block of code that you now want to examine. git will help you go back in time. Note that each commit has long, seemingly random, string of hexadecimal digits associated with it. This is called a \"hash\" and is a unique identifier for the commit. Find the hash associated with the \u201cCommitting a new file with my name\u201c commit. Run <b>git checkout xxxx</b>, replacing <b>xxxx</b> with the first four digits/characters from that hash (thankfully typing in the entire hash is not required). You will see a frightening message about a detached HEAD.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">git can keep track of separate, parallel, streams of edits to a project. Each stream of edits is called a branch, and a branch can have a name. For instance, multiple programmers who are working on and commiting changes to the same file will probably establish different branches. HEAD is git-ese for the current (not necessarily the last) commit in the current branch. Since we've gone back in time and are potentially (but haven't yet) starting a new branch, HEAD is \"detached\" (from any established, named branch). Ouch!</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Take a look at file1.txt and note the later-deleted Student ID#. Now to return to the present: <b>git checkout master</b>. \"master\" is the name of the default branch created when the repository was made. Look at file1.txt again. Run <b>git log</b> again and you'll see it has the same three commits.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Create a new text file called file2.txt that contains your expected graduation year and first job title on a single line.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Stage file2.txt, and then commit it with a useful message.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git log</b>. Notice that you see log entries for both commits that you've performed.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git log file2.txt</b>. Notice that you only see the log entry involving file2.txt.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Modify file1.txt to have the name of your favorite color on a new line.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Delete file2.txt.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git status</b>. Note that file2.txt is listed as deleted. Also note that the status information helpfully says \"git add/rm ...\" to update what will be committed.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">You use the <b>git add</b> command to stage a new or modified file. However, to stage the deletion of a file, you need to use the <b>git rm</b> command. So run the commands <b>git add file1.txt</b> and <b>git rm file2.txt</b> to set the stage.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Commit the changes with the commit message \"Deleting file2.txt\".<span class=\"Apple-converted-space\">\u00a0<span class=\"Apple-tab-span\">\t</span></span></span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run the command <b>git log -p -3</b>. The -p flag will show you the diffs for each change. The -3 will limit what's displayed to the last 3 log entries. Take a few minutes to look carefully at the output log and see if you can figure out how to interpret it.</span></li>\n  <ul class=\"ul1\">\n    <li class=\"li8\"><span class=\"s8\"></span><span class=\"s9\">Note: </span><span class=\"s1\">A command such as <b>git log</b> sends text output to the shell using a bash command named \"less\" to display one windowfull of output at a time (\"less\" is named after a similar, earlier utility named \"more\", in a classic example of hilarious techie humor). At the <b>:</b> prompt, you can press <b>h</b> for help, <b>q</b> to exit, <b>Enter</b> to advance one line, or <b>Space</b> to advance one screenfull.</span></li>\n  </ul>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Now you decide you actually wanted to keep file2.txt, but you deleted it! Fortunately, you had added it to git, so you can still get it back. There are several ways to do this. The simplest is probably to use the command <b>git checkout HEAD~1 file2.txt</b>. What does this do? HEAD represents the most recent commit or snapshot. ~1 tells Git to go back one version from the most recent snapshot (i.e., HEAD). In this older snapshot, file2.txt still existed, and checkout tells Git to retrieve it. If you now look in your folder, you'll see file2.txt. And is file1.txt changed?</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git add file2.txt</b> to stage file2.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run <b>git status</b>. Note that file2.txt is staged. Commit it with the commit message \"Re-adding file2.txt\".</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run the command <b>git log -p</b> to see all of the log entries.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Now run the command <b>git log -p &gt; git_log_partB.txt</b>. (The <b>&gt;</b> is a shell command that redirects the output of the program on <b>&gt;</b>'s left to the file named on <b>&gt;</b>'s right.)</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Open git_log_partB.txt. It should like just like the output you saw for step 33. If you're on Windows and viewing it in Notepad, the spacing will probably look wrong, so try opening it in a different text editor (like Wordpad or Notepad++).</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Upload git_log_partB.txt to the EEE Drop Box \"Homework3B\" before the deadline.</span></li>\n</ol>\n<p class=\"p5\"><span class=\"s1\"><br>\n</span></p>\n<p class=\"p6\"><span class=\"s1\"><b>Part C</b></span></p>\n<p class=\"p4\"><span class=\"s1\">Much of Git's power comes from the interaction between your local repository and remote repositories. Remote Git repositories help you collaborate with others on a software project.</span></p>\n<p class=\"p5\"><span class=\"s1\">There are several services out there that will host a remote git repository for you for free, the most popular of which is GitHub.com. GitHub.com is particularly popular among the open source community, and there are pieces of software you probably use every day that are hosted on GitHub.com. <a href=\"http://reddit.com/\"><span class=\"s4\">Reddit</span></a> is one such software (web application) that is maintained on Github</span></p>\n<ol class=\"ol1\">\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Let's use git to view the Reddit source code repository hosted on GitHub. Start git, use cd to navigate to an empty folder, and run the command <b>git clone https://github.com/reddit/reddit.git</b>.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">You now have a local copy (on your computer) of the remote repository. It's important to understand that this is not only a copy of the source code, but also a copy of the history of changes stored by git. And since it's a local repository, all the commands you used in the previous part of the assignment will work. To try this out, run the command <b>cd reddit</b> to go inside the reddit project folder, then run <b>git log</b>. This shows you the most recent log messages for changes made to the Reddit source code.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Here's another variation on the git log command to try: <b>git log -1 -p --before='2014-03-31 11:52:45'</b>. This is nothing new except for the --before='2014-03-31 11:52:45' part. That tells git you only want to see log entries for changes made before March 31, 2014 at 11:52:45am. As you saw in part B, the -1 means you only want to see one entry, and the -p means you want to see a diff of the changes. As you can see, a contributor named \"Andre D\" changed the mouseover property to \"cancelTimeout\" from \"queueShow\" in the file r2/r2/public/static/js/saved.js.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Since we have a complete copy of the Reddit project's repository, we also have a copy of every snapshot going all the way back to the beginning of the project. To see the log entries for the earliest commits, run the command <b>git log --reverse</b>.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Recall that each commit is given a unique hash (aka SHA1). Many commands in Git can take a hash as input. For example, try <b>git log -1 4778b17e939e119417cc5ec25b82c4e9a65621b2</b> and <b>git show 4778b17e939e119417cc5ec25b82c4e9a65621b2</b>. (Don't forget that you can use only the first four digits/characters of the hash. If git complains that the short SHA1 is ambiguous (because more than one commit has the same first four digits), try adding a few more digits from the long hash.)</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">One more git log option to know about is <b>--skip=<i>N</i></b>, where <b><i>N</i></b> is a non-negative integer. This means to skip <b><i>N</i></b> commits before starting to show the commit output. Try <b>git log --skip=100 -5</b>.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">Run a log showing five commits to Reddit, skipping the first <i>N</i> commits, where <i>N</i> is the first three digits of your UCI student id number. For instance, if your id is 12345678, then <i>N</i> is 123. Leading zeros are no problem. Redirect the log output to a text file and upload it to the EEE Drop Box \u201cHomework3C\u201d before the deadline.</span></li>\n  <li class=\"li7\"><span class=\"s3\"></span><span class=\"s1\">If you wanted (and had the permissions), you could modify part of the Reddit source, commit your changes (on your local repo), and then use <b>git push</b> to copy your local branch back to the GitHub repository. That's beyond the scope of Informatics 43, but it's good to know that git is a sophisticated tool that facilitates multiple people updating shared files, logging their updates, and assisting with the resolution of updates that conflict.</span></li>\n</ol>\n<p class=\"p5\"><span class=\"s1\"><br>\n</span></p>\n</body>\n</html>\n", "encoding": "utf-8"}