{"url": "https://www.ics.uci.edu/~pattis/ICS-21/announcements.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Announcements</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Announcements</h1>\r\n<p>\r\n<h2>Introduction to Computer Science I<br>\r\nICS-21: Lecture A/Labs 1-3<br>\r\nSpring 2012\r\n</h2><p>\r\n</center>\r\n\r\n<hr align=\"left\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #24: 6/11/12<br>\r\n  Program #6\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Program #6.\r\nThe class average was about 42 (or about 93%) and the the median was about\r\n  44 (or about 98%).\r\nThe last time I taught this course the average was about 37 (or 83%) and the\r\n  median was about 44 (or 98%).\r\nThe average over all programming assignments this quarter was 92%; the last\r\n  time I taught this course it was 97%.\r\n<p>\r\nAfter I return your graded work in my special office hours on Monday, please\r\n  download the <b>Grades(zipped .xls file)</b> from the course web and ensure\r\n  that I have computed and entered your grade correctly (I'll be entering\r\n  thousands of grades for students in my course this quarter, so even if I'm\r\n  99% accurate, I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an programming score of 36.5 is recorded as 37).\r\n<p>\r\nGenerally, very good work by most students.\r\nStudents who missed more than 3 methods tended to miss a lot more than 3.\r\nThere is still a lot of conufsion about when in loops to use <b>used</b> vs.\r\n  <b>sequence.length</b>: you almost always want to use <b>used</b> so as to\r\n  not process any <b>null</b> values at the end of the array.\r\n<b>Please check my solution methods and learn something before the final\r\n  exam.</b>\r\n<p>\r\nThere were a few methods that seem to give many students trouble, often the\r\n  advanced ones: <b>countTrue</b> and <b>filterTrue</b>.\r\nSurprisingly, many students missed <b>insertAt</b> and <b>remove</b>.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #23: 6/9/12<br>\r\n  In-Class Programming Exam #4\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) In-Class Programming Exam #4.\r\nThe class average was about 32(or about 64%) and the median was about 34\r\n  (or about 68%).\r\nThe last time I taught this calsse the average was about 31 (or about 61%)\r\n  and the median was about the same.\r\nAgain, because the average was below 75%, everyone has been automatically\r\n  awarded about 6 extra points (whose result is reflected in the % and grade\r\n  columns on the spreadsheet).\r\nSo, if your actual grade was 34 (68%), your normalized grade is about 40 (80%).\r\nAfter normalization, about 50% of the students scored an A; another 11% scored\r\n  a B (so almost 60% passed at the B or above level).\r\nI have posted a download with everyone's submitted programs, so you can\r\n  download your work and better interpret my gradesheets, which I will return\r\n  during special office hours on Monday.\r\n<p>\r\nNote that as I promised, I have updated the grade files so that the column that\r\n  adds up the Programming Exams (Sigma PE) uses the highest score from In-Class\r\n  Programming Exam #3 and #4 for Exam #3.\r\n<p>\r\nThere were many different mistakes made by students writing this class.\r\nHere were some of the most common problems.\r\n<ul>\r\n  <li>In the declarations: not initializing <b>used</b> to 0 (or instead\r\n        initializing it in the constructor).\r\n  <li>In the constructor: not initalizing the <b>set</b> instannce variable by\r\n        making it refer to a constructed object:\r\n        <b>set = new Object[<i>parameter</i>];</b> Even\r\n        worse, some students initialized <b>used</b> to the non-zero\r\n        <b><i>parameter</i></b>; while still other students declared a local\r\n        variable named <b>set</b> in the constructor and set it (not the\r\n        instance variable) to the allocated array.\r\n      Finally some student did not check/throw the exception (and some left\r\n        the parameter's value out of the message).\r\n  <li>In the <b>lookupIndex</b> method: using <b>set.length</b> as an upper\r\n        loop bound (instead of <b>used</b>), comparing with <b>==</b> instead\r\n        of <b>.equals</b>. A small (but to me surprisingly large) number of\r\n        students did not show <b>int</b> as the return type of this method,\r\n        and returned a reference to the object found.\r\n      This method had uses in the <b>add</b> and <b>contains</b> method, both\r\n        which try to see if a value is in the <b>SimpleSet</b>: this is the\r\n        same as a result returned from <b>lookupIndex</b> that is not\r\n        <b>-1</b>. Many students rewrote looping code in these two methods.\r\n  <li>In the <b>add</b> method: not checking for a value in the\r\n        <b>SimpleSet</b> BEFORE checking whether to <b>doubleLength</b>\r\n        (some students NEVER checked whether the value was there; others\r\n         ALWAY doubled the length or NEVER did), not storing the new value in\r\n         the appropriate index (<b>used</b>) or not incrementing <b>used</b>\r\n         after a new values was added.\r\n      A suprisingly large number of students used an <b>if/else</b> to test\r\n        whether a value was at some index in the array, and if not immediately\r\n        added it: but the result was that it added the value if it wasn't\r\n        stored in the first index.\r\n  <li>In the <b>getSize</b> method: not returning <b>used</b> and instead\r\n        couting non-<b>null</b> values in the array. Students who counted \r\n        sometimes had the wrong loop indexes or counted the wrong thing.\r\n  <li>In the <b>makeEmpty</b> method: either not putting <b>null</b> in all\r\n        the non-<b>null</b> array indexes (<b>0</b> to <b>used-1</b>) or not\r\n        resetting <b>used</b> to be <b>0</b>.\r\n      Note that allocating a new object array is legal, but requires much more\r\n        work (although less code) than just storing null everywhere.\r\n  <li>In the <b>contains</b> method: not using <b>lookupIndex</b> or not\r\n        looping correctly to check: e.g., using <b>set.length</b> as the\r\n        upper loop bound instead of <b>used</b>.\r\n  <li>In the <b>removeRandom</b> method: not checking/throwing the exception,\r\n        not returning a result from the array (some students returned an \r\n        index), not saving the the result to return before shifting the array,\r\n        not shifting the array or not shifting it correctly (e.g., shifting\r\n        lower to higher indexes, shifting a value beyond the array's upper\r\n        bound), not decrementing <b>used</b> and/or not storing <b>null</b>\r\n        where it belongs after shifting.\r\n  <li>For simple solution: some students declared extra variables that were\r\n        not needed (often in <b>lookupIndex</b>, see my solution) some students\r\n        used an <b>if</b> in <b>contains</b> after calling <b>lookupIndex</b>\r\n        when the <b>if</b> is not needed (see my solution).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #22: 6/6/12<br>\r\n  Quiz #9\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Quiz #9.\r\nThe class average was about 17 (or about 70%) and the median was about\r\n  19 (or about 76%).\r\nThe last time I taught this class the average was about 18 (or about 70%) and\r\n  the median was about 20 (or about 80%).\r\nThese were the 3rd highest scores for a quiz the quarter; most students\r\n  seemed to demonstrate an understanding of the major concepts, which\r\n  covered all sorts of material learned during the quarter.\r\nLook at your returned work carefully; if your score was below 20\r\n  you might want to review this quiz with me or a TA.\r\nMaterial similar to this will be on the final written exam.\r\n<p>\r\nAfter I return your graded work in class on Wednesday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 22.5 is recorded as 23).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the quiz.\r\n<p>\r\nI would strongly recommend that you review the code in my solution to gain\r\n  a better understanding of the programming involved.\r\n<p>\r\nFor problem 1, the mistakes mostly related to the type of parameter for the\r\n  constructor (and type of instance variable it was stored into).\r\n<b>LengthLess</b> is too specific (and you cannot generalize the class for\r\n  problem 2)and <b>Object</b> is too general (although you can use casting,\r\n  but to <b>Decision</b> to include problem 2): <b>Decision</b> is just right.\r\nIt ensures at compile-time that the object passed to the constructor will have\r\n  an <b>isOK</b> method and requires no casting.\r\n<p>\r\nFor problem 2, students also did well.\r\nThe only reoccuring problem was calling <b>.toString</b> instead of casting\r\n  the parameter to a <b>String</b>.\r\nWhile calling <b>.toString</b> worked here, generally classes that implement\r\n  <b>Decision</b> require casting, and it is a \"more correct\" (and faster)\r\n  solution.\r\n<p>\r\nFor problem 3, there was more variation. \r\nThe whole point of this problem was to construct and use and object from the\r\n  <b>Catenate</b> class (passing its constructor an object constructed from\r\n  the <b>Prefix</b> class).\r\nWorking solutions that did not use <b>Catenate</b> were not awarded many\r\n  points.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #21: 6/4/12<br>\r\n  Upcoming Programming and Final Exams\r\n</b></td>\r\n<td width =\"80%\">\r\nWe will have our last (of four) <b>in-class programming exam</b> on Thursday,\r\n  June 5, in <b>Lab</b>.\r\nThe program will require you to write a collection class that has about a half\r\n  dozen methods that manipulate an array of <b>Object</b> in a manner similar\r\n  to the <b>SimpleQueue</b>, <b>SimpleStack</b>, and\r\n  <b>Sequence</b>.\r\nStudy these classes and general operations on searching/updating arrays.\r\nIt might be also useful to look at the <b>Portfolio</b> class, although that\r\n  uses an array of <b>Stock</b>\r\n<p>\r\nWe will also have a <b>final written exam</b> on Tuesday, June 12th, \r\n  1:30pm - 3:30pm in SSPA 1100 (our lecture classroom).\r\nThis exam will be comprehensive, but it will heavily focus on the material\r\n  covered near or after the midterm exam; of course, when writing these\r\n  advanced programming features you will also be making use of the simpler\r\n  features covered early in the quarter.\r\nIt will cover the lectures up to and including interfaces, but nothing after,\r\n  from Quiz #1 to Quiz #9; from Programming Assignment #1 to Programming\r\n  Assignment #6.\r\nFor more information, click the following <a href=\"handouts/writtenexam2.html\">\r\n  Topics for Written Final Exam</a> link.\r\nThe best way to study for this exam is to review your quizzes (the most\r\n  important, but we had only 3 the second half of the quarter), programming\r\n  assignments, the in-class programming exams, and the daily problems from the\r\n  readings.\r\nObviously we have covered a large amount of material in the quarter, and with\r\n  with only a dozen or so questions on the exams, I'll have to be selective;\r\n  but the coverage will be broad.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #20: 6/4/12<br>\r\n  Quiz #8\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Quiz #8.\r\nThe class average was about 16 (or about 64%) and the median was about 16\r\n  (or about 66%); the last time I taught this class the average was about 16\r\n  (or about 65%) and the median was about 18 (or about 70%).\r\nLook at your returned work carefully; if your score was below 20\r\n  you might want to review this quiz with me or a TA.\r\nMaterial similar to this will be on the final written exam.\r\n<p>\r\nAfter I return your graded work in class on Thursday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 22.5 is recorded as 23).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the quiz.\r\n<p>\r\nOn the first page, students mostly either got a full credit or none.\r\nOn the second page the distribution was much wider.\r\nCommon general mistakes included\r\n<ul>\r\n  <li>Using <b>stocks.length</b> as the upper bound of an array instead of\r\n       <b>used</b>.\r\n  <li>Not calling <b>indexOfSymbol</b> when appropriate; and if calling it,\r\n        not checking for <b>-1</b> as the returned value before using its\r\n        value to access the <b>stocks</b> array.\r\n      Often it was used more than once in a method, so its value should be\r\n        saved.\r\n</ul>\r\nFor specific methods\r\n<ul>\r\n  <li>In <b>sharesOwned</b>, not using the parameter's value, and instead\r\n        returning the number of stocks or <b>0</b> (if the symbol wasn't in the\r\n        array) or <b>1</b> (if the symbol was in the array).\r\n  <li>In <b>worth</b>, calculating <b>.getPrice</b> times <b>.getShares</b> of\r\n        a stock, instead  of calling its <b>.getWorth</b> method.\r\n  <li>In <b>active</b>, not calling <b>.isActive</b> on a stock, or not\r\n        catenating values (with spaces between).\r\n  <li>In <b>withdraw</b>, not checking for a bad parameter or not reducing\r\n        the <b>cash</b> instance variable.\r\n  <li>In <b>sell</b>, there were many errors (few students received close to\r\n        full credit for this part).\r\n      See my solution and try to understand why each part was there.\r\n  <li>In <b>updatePrice</b>, not calling the stock's <b>updateMethod</b>.\r\n  </ul>\r\nAgain, see my code for what I consider a correct solution.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #19: 6/2/12<br>\r\n  In-Lab Programming Exam #3\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) In-Lab Programming Exam #3.\r\nThe class average was about 37 (or about 73%); the median was higher, about 39\r\n  (or about 78%); the last time I taught this class the class average was about\r\n  36 (or about 72%) and the median was about 40 (or about 79%).\r\nBecause the average was below 75%, everyone has been automatically awarded\r\n  about 1 extra point (whose result is reflected in the % and grade columns\r\n  on the spreadsheet).\r\nSo, if your actual grade was 38 (76%), your normalized grade is about 39 (78%).\r\nAfter normalization, about 34% of the students scored an A; another 20% scored\r\n  a B (so 54% passed at the B or above level).\r\nI have posted a download with everyone's submitted programs, so you can\r\n  download your work and better interpret my gradesheets, which I will return\r\n  in class on Monday.\r\n<p>\r\nNote that as I promised, I have updated the grade files so that the column that\r\n  adds up the Programming Exams (Sigma PE) uses the highest score from In-Lab\r\n  Programming Exam #2 and #3 for Exam #2.\r\n<p>\r\nThere were many different mistakes made by students writing this class.\r\nHere were some of the most common problems.\r\n<ul>\r\n  <li>In the declarations: not declaring all instance variables private; not\r\n        initializing some instance variables in their declarations; not\r\n        initializing the status of the lock to \"locked\" (<b>true</b>).\r\n  <li>In the constructor: not copying parameters to instance variables;\r\n        re-initializing instance variables that should be/were initialized in\r\n        their declarations.\r\n  <li>In the <b>lock</b> method: checking some condition (this method can\r\n        always just change  the state to \"locked\"); some student wrote code\r\n        that returned a value instead of being <b>void</b>.\r\n  <li>In the <b>unlock</b> method: comparing the wrong variables. Calling\r\n        <b>.equals</b> between a <b>ModularCounter</b> and something that\r\n        is not from the <b>ModularCounter</b> class (which unfortunately\r\n        is syntactically correct but alwasy false); some student wrote code\r\n        that returned a value instead of being <b>void</b>.\r\n  <li>In the <b>changeDial</b> method: not using the correct dial numbers;\r\n        not comparing the <b>String</b> to <b>\"Up\"</b>/<b>\"Down\"</b> with\r\n        the <b>.equals</b> method (students used many \"close\" variants that\r\n        did not work); updating local state, not instance variables.\r\n  <li>In the <b>getDialStatus</b> method: not returning a <b>String</b> with\r\n        just a number 0-9: some students executed <b>.toString</b> on the\r\n        <b>ModularCounter</b> which returned a longer <b>String</b> like\r\n        <b>1 (mod 9)</b>.\r\n  <li>In the <b>getLockStatus</b> method: not returning the exact <b>String</b>\r\n        values required.\r\n  <li>For using the <b>ModularCounter</b> using a modulus of <b>9</b> instead\r\n        of <b>10</b>; many students used the <b>ModularCounter</b> class in\r\n        their solution and most did so correctly.\r\n  <li>For simple solution, not writing <b>if/else</b> in <b>getDialStatus</b>\r\n        and <b>getLockStatus</b> (in fact, these methods are ideal places to\r\n        use conditional expressions); testing the lock status in <b>unlock</b>;\r\n        writing something like <b>locked == true</b> or <b>locked == false</b>\r\n        instead of just <b>locked</b> or <b>!locked</b> (the instance variable\r\n        should be something like <b>locked</b>, not <b>lockStatus</b> so\r\n        <b>true</b> and <b>false</b> values are easier to understand).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #18: 5/29/12<br>\r\n  Program #5\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Program #5.\r\nThe class average was about 37 (or about 83%) and the the median was about\r\n  39 (or about 84%).\r\nThe last time I taught this class the average was about 39 (or about 87%) and\r\n  the median was about 42 (or about 93%).\r\n<p>\r\nAfter I return your graded work in class on Tuesday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an programming score of 36.5 is recorded as 37).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student programs: it makes my\r\n  office messier, and you don't get the benefit of the feedback I wrote.\r\n<p>\r\nGenerally, very good work by most students.\r\nThere were a few <b>static</b> methods that performed poorly on boundary\r\n  cases (e.g., <b>constrain</b> when the value to constrain was equal to the\r\n  minimum or maximum); a few <b>compareTo/equals</b> methods in\r\n  <b>BigRational</b> that did not compute correct results (<b>compareTo</b>\r\n  should return an <b>int</b> and neither should use <b>==</b>); a few\r\n   <b>update</b> methods in <b>Ball</b> that did not perform the simulation\r\n  correctly (mostly having to do with forgetting to multiply the average\r\n  velocity by <b>dT</b>) or using <b>static</b> fields: they created jerky\r\n  simulations, not at all like my executable.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #17: 5/23/11<br>\r\n  Quiz #7\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Quiz #7.\r\nThe class average was about 16 (or about 64%) and the median was about 18 (or\r\n  about 72%); the last time I taught this class the average was about 16 (or\r\n  about 65%) and the median was about 19 (or about 76%).\r\nLook at your returned work carefully; if your score was below 20\r\n  you might want to review this quiz with me or a TA.\r\nMaterial similar to this will be on the final written exam.\r\n<p>\r\nAfter I return your graded work in class on Wednesday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 22.5 is recorded as 23).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the quiz.\r\n<p>\r\nGenerally students made lots of small mistakes that one makes when writing\r\n  classes for the first time.\r\nI hope between seeing my comments on your quizzes and reading my solutions\r\n  that you get a solid understanding of all the parts of a simple class.\r\nHere were some common mistakes for Question #1. Problems with Question #2 were\r\n  similar.\r\nIn fact, there is a strong correlation between student scores on problems #1\r\n  and #2\r\n<ul>\r\n  <li>Not writing the whole class, starting with <b>public class ...</b>\r\n  <li>Using <b>static</b> fields and methods.\r\n      Yes, you can get this to work in Eclipse if you always construct just\r\n        one object; but if you construct more than one, then the different\r\n        objects would not have their own state, and therefore not work\r\n        correctly.\r\n  <li>Not checking for illegal arguments/parameters in the constructor and\r\n        throwing an exception (with some useful <b>String</b> that included\r\n        the \"bad\" values).\r\n  <li>Not copying the parameters to the instance variables in the constructor\r\n        (once they are found to be OK).\r\n      Some students are confused about using parameters and instance variables\r\n        together in constructors.\r\n  <li>Not writing the header or body correct for <b>getCatenation</b> and\r\n        <b>getCount</b>; both are parameterless, returning a <b>String</b>\r\n        and <b>int</b> instance variables respectively.\r\n  <li>Not writing the header or body correct for <b>seeIt</b>: a <b>void</b>\r\n        method that often (but not always) changes the state of some instance\r\n        variables (some students didn't change the state correctly).\r\n  <li>Not declaring instance variables.\r\n  <li>Not declaring instance variables to be <b>private</b>.\r\n  <li>Not specifying correct initializations for the instance variables.\r\n      Those variables receiving values in the constructor should use\r\n         default intialization;\r\n      the other variables should be initialized explicitly.\r\n  </ul>\r\nAgain, see my code for what I consider a correct solution.\r\n<p>\r\nFor Question #3, most answers had something reasonably generic to say, but\r\n  few expressed things as I wanted them.\r\nThis shows that students are either a bit confused about what is\r\n  happening during object construction or just don't quite know how\r\n  to use the technical terms necessary to describe this process (or both).\r\nIt isn't enough to say \"The <b>new</b> operator constructs the object and\r\n  the constructor finishes the construction.\"\r\nWhile \"correct\", this answer doesn't explain in detail what happens during\r\n  construction (instance variables are declared, initialized by <b>new</b>,\r\n  and sometimes reinitialized from parameters storing values supplied by \r\n  arguments to the constructor, after the constructor checks their values for\r\n  \"reasonableness\").\r\nAgain, see my complete answer.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #17: 5/21/12<br>\r\n  Program #4\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Program #4.\r\nThe class average was about 36 (or about 75%) and median grade was about\r\n  38 (or about 79%).\r\n<p>\r\nAfter I return your graded work in class on Monday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an programming score of 36.5 is recorded as 37).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student programs: it makes my\r\n  office messier, and you don't get the benefit of the feedback I wrote.\r\n<p>\r\n<ul>\r\n  <li><b>Collatz</b>: Almost everyone got the program working correctly.\r\n      If there were problems, they mostly related to not using a correct\r\n        constructor for <b>BigInteger</b>; a few students prompted only\r\n        for an <b>int</b> not a <b>BigInteger</b> (there were a few\r\n        different ways to do this correctly).\r\n      FYI, there is a <b>static</b> method named <b>valueOf</b> that\r\n        also constructs and returns a <b>BigInteger</b>.\r\n      It takes a bit longer to run, but ensures no duplication of objects\r\n        from this immutable class: so, <b>BigInteger.valueOf(3)</b> can be used\r\n        in place of <b>new BigInteger(\"3\")</b> and vice-versa.\r\n      I would stil recommend using the contructor.\r\n  <p>\r\n  <li><b>DiceWar</b>: Most students got most parts correct, but there were\r\n        very many small erors.\r\n      Beside correctness issues, I did take a point off for each of the\r\n        following:\r\n        (a) not constructing a <b>DiceEnsemble</b> for each player,\r\n        (b) not calling <b>getRollCount</b> to help compute some\r\n              statistic (using an extra counter for that job), and\r\n        (c) declaring no variables in local blocks inside the <b>main</b>\r\n              method: you should work on declaring variables in the\r\n              most restricted scope that you can..\r\n  <p>\r\n  <li><b>PhoneDatabase</b>: This program caused the most problems.\r\n      Some students did not use case-insenstive comparisons: e.g., \r\n        <b>equalsIgnoreCase</b>.\r\n      Many students did not call <b>nextToken</b> in pairs; the result\r\n        was that if you looked up a \"telephone\" number, the program\r\n        would print the name of the next person in the <b>String</b>\r\n        (not the previous person, who actually had that phone number).\r\n  <p>\r\n  <li><b>ICD</b>: Many students didn't finish this code in  this long\r\n        assignment: long in both in what you had to do and in how long you\r\n        were given.\r\n      Possibly I should have made the first two parts due in one week and\r\n        the second two due the second week to keep students on schedule.\r\n      Many students did not know how to terminate the program if a bad\r\n        configuration file was encountered (a big <b>try/catch</b> around\r\n        all the code, including a nested <b>try/catch</b> for reading the\r\n        input file if the configuration succeeded).\r\n      Some students hard-wired in various pieces of information instead\r\n        of reading them from the configuration file.\r\n      Finally, some students did not compute the zero-crossing count\r\n        correctly: two ways to do this appeared in the simplification\r\n        lecture.\r\n</ul>\r\nPlease always run my executable and compare it to your program's\r\n  behavior and output for various inputs.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #16: 5/21/12<br>\r\n  In-Lab Programming Exam #2\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) In-Lab Programming Exam #2.\r\nThe class average was about 36 (or about 71%) and the median was higher, about\r\n  38 (or about 76%); the last time I taught thisl class the average was about\r\n  32 (or about 63%) and the median about 34 (or about 68%).\r\nBecause the average was below 75%, everyone has been automatically awarded\r\n  about 2 extra points (whose result is reflected in the % and grade columns\r\n  on the spreadsheet).\r\nSo, if your actual grade was 35 (70%), your normalized grade is about 41 (82%).\r\nAfter normalization, about 35% of the students scored an A; another 15% scored\r\n  a B (so 50% passed at the B or above level).\r\nI have posted a download with everyone's submitted programs, so you can\r\n  download your work and better interpret my gradesheets, which I will return\r\n  in class on Monday.\r\n<p>\r\nA good metric for your midterm performance is the average of the midterm \r\n  written exam and your first two in-class programming exams (with\r\n  normalization points added).\r\nThe average for all students in the class on these in-class testing instruments\r\n  is about 76% and the median is about 79%.\r\nIf we switch to discussing midterm grades (including these instruments as well\r\n  as quizzes and programming assignments), the average for all students in the\r\n  class is 81% (and the median is 84%).\r\nYour overall grade at this time is the best estimator of your final grade.\r\n<p>\r\nFinally, recall that I said that typically final grade distribution in this\r\n  class is 25% As, 25% Bs, 25% Cs, and   25% Ds and Fs.\r\nAt present, students are doing a bit better than that, with 30% As, 24% Bs,\r\n  26% Cs, and 20% Ds and Fs.\r\n<p>\r\nNote that as I promised, I have updated the grade files so that the column that\r\n  adds up the Programming Exams (Sigma PE) uses the highest score from In-Lab\r\n  Programming Exam #1 and #2 for Exam #1.\r\n<p>\r\nIn the <b>DiceEnsemble</b> problem students needed to (a) check for and throw\r\n  the exception with a good message, (b) declare/initialize some variables,\r\n  including the dice ensembles and counters, (c) loop through the number\r\n  of rolls indicated by <b>toRoll</b>, (c) change the state of the dice \r\n  variables by rolling them once in the loop and then, (d) check the pip \r\n  sums to decide which counter to increment (if any), and finally (e) return\r\n  the win/lose ratio as a <b>double</b> via casting.\r\n<p>\r\nIn the <b>StringTokenizer</b> problem students needed to (a) construct the\r\n  string tokenizer from the <b>words</b> parameter, (b) include a special check\r\n  for <b>no tokens</b>, (c) get and store the first token (if there were any)\r\n  and initialize the answer string, (d) loop through all the other tokens by\r\n  (e) storing each new token into a variable local to the loop, (f) checking\r\n  how it compared with the first token,(g) catenating it to the answer if it\r\n  was greater, (h) maintining correct spacing in the answer, and (i) returning\r\n  the catenated answer.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #15: 5/16/12<br>\r\n  Quiz #6\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Quiz #6.\r\nThe class average was about 16 (or about 63%); the median was about 17\r\n  (or about 68%).\r\nI'll remind everyone that because the average was below 75%, students will\r\n  receive about 3 normalization points to bring the class average to 75%\r\n  (these points are not given to students individually -your score is still\r\n  your score- but are added to the totals of every student when computing their\r\n  grade); it is effectively as if you scored about 4 more points on this quiz.\r\nLook at your returned work carefully; if your score was below 20 (most were)\r\n  you might want to review this quiz with me or a TA.\r\nMaterial similar to this will be on the first written exam.\r\n<p>\r\nAfter I return your graded work in class on Wednesday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 22.5 is recorded as 23).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the quiz.\r\n<p>\r\nHere were some common mistakes:\r\n<ul>\r\n  <li>Problem 1: Most students got full or close to full credit here.\r\n      I was looking for a correctly written header and body.\r\n      Some students called <b>Math.min</b> others used multiple\r\n        <b>if</b> statements.\r\n      I took for for solutions that seemed overly complex (declaring\r\n        extra/unneeded variables).\r\n\r\n  <p>\r\n  <li>Problem 2: Scores here were a bit more spread out.\r\n      Students needed to write a loop that counted the primes,\r\n        calling the <b>Utility.isPrime</b> method using the correct\r\n        syntax; a suprising number of students omitted <b>Utility.</b>\r\n\r\n  <p>\r\n  <li>Problem 3: Most students had the right idea here, but there was some\r\n        confusion on what were parameters and local variables.\r\n      Also, some students didn't put the initial values for variables in\r\n        boxes.\r\n      Many students write a loop bounds check like <b>i<=5</b> but did\r\n        not show <b>i</b> going to <b>6</b> to make this continuation test\r\n        <b>false</b>.\r\n\r\n  <p>\r\n  <li>Problem 4: There was a big split among students on this problem: many\r\n        received very many and others received very few points; there were not\r\n        many students in the middle.\r\n      Many students wrote code only, and didn't indicate parameter and local\r\n        variables, or arguments.\r\n      I did not grade the part about which variables could be declared\r\n       <b>final</b>; in my solution all the parameters could be final\r\n       (none was assigned a new value, although the <b>DiceEnsemble</b>\r\n       parameters had the state of their objects changed) but none of the\r\n       local variables could (since they were all incremented various times).\r\n  \r\n  <p>\r\n  <li>Problem 5: A lot like Problem #4, with a big split among students.\r\n      I graded this problem \"lightly\" relating to construction two\r\n        <b>StringTokenizer</b>s, checking/throwing the exception correctly\r\n        based on <b>.countTokens</b>, declaring a variable to contain the\r\n        result, iterating though the <b>StringTokenizer</b>s, updating the\r\n        variable (including spaced between tokens) and returning th result.\r\n      I did not take off points for incorrect placement of spaces, but see\r\n        my solution for one way to do this correctly; there are many others.  \r\n   </ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #14: 5/14/12<br>\r\n  In-Lab Written Exam #1\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) In-Lab Written Exam #1.\r\nThe class average was about 65% (the median was 65%); the last time I taught\r\n  this class the average was about 68% (the median was 69%).\r\nBecuase the average was below 75%, everyone has been automatically awarded\r\n  about 10 extra points (whose result is reflected in the % and grade columns\r\n  on the spreadsheet).\r\nSo, if your actual grade was 75, your normalized grade is about 85.\r\nLook at your returned work carefully; if your score was below 60 (after\r\n  normalization, a C), you might want to review this exam with me or the TA.\r\n<p>\r\nRecall that the exam was 105 points out of 100, so you could have skipped\r\n  any small question (or lost partial credit on any large one) and still\r\n  scored 100% on the exam.\r\nThe highest score was in fact 100.\r\nSee the <b>Exams</b> tab in the spreadsheet for a histogram of the scores \r\n  (before normalization).\r\nAfter normalization, about 26% of the students scored 90% or above; about\r\n   41% score 80% or above.\r\nGenerally, students scored well on problems 1-6, but performance dropped\r\n  off after that: the code synthesis problems were at the end of the exam.\r\n<p>\r\nPlease look at this instrument's grade as part of the entire grade in the\r\n  course; especially look at your percentage on the midterm exam and\r\n  first two in-class programming exam (when we have the second).\r\n<p>\r\nAfter I return your graded work on Monday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering about 2,000\r\n  grades for students in my course this semester, so even if I'm 99% accurate,\r\n  I'll incorrectly compute/record 20 grades).\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 68.5 is recorded as 69).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the exam.\r\n<p>\r\nHere were some common mistakes:\r\n<ul>\r\n  <li>Problem 1: Twelved students (11%) solved this problem perfectly; the\r\n        average was 70%.\r\n      The most common mistakes were:\r\n      <b>int</b> as a literal instead of a keyword (it is just an identifier\r\n         that is a keyword); not treating things like \"Prompt.forInt\"\r\n         as identifiers and seperators; not recognizing comments correctly\r\n         (the first comment stops at <b>*/</b>) or <b>String</b> literals as\r\n         one token, not recognizing <b>-1</b> as an operator followed by a\r\n         literal.\r\n\r\n  <p>\r\n  <li>Problem 2: No students solved this problem perfectly; the\r\n        average was 60%.\r\n      Most students made a small number of mistakes here:\r\n        specifying a wrong return type (or no return type) or parameter type\r\n        (or having the wrong number of types in the parentheses).\r\n      A few students had no idea what I was asking for and tried writing code\r\n        for these operations.\r\n\r\n  <p>\r\n  <li>Problem 3: Eighteen students (16%) solved this problem perfectly;\r\n        the average was 66%.\r\n      Most students still had a few mistakes here. Common ones\r\n        include: writing <b>double</b> for methods (that occurs only in the\r\n        prototype); redundant parentheses or omitted (necessary) parentheses\r\n        (especial in the product for denominator); writing <b>2/5</b> (integer\r\n        division truncates); forgetting <b>*</b> operators.\r\n      A good number of students solved part <b>3</b> correctly.\r\n\r\n  <p>\r\n  <li>Problem 4: Forty-two students (37%) solved this problem perfectly; the\r\n        average was 82%.\r\n      <p>\r\n      Most students scored highly on this problem.\r\n      Too many students still did not indicate that all literals and variables\r\n        are considered Java expressions.\r\n      Some students did not show all subexpressions (especially the unary\r\n        <b>-</b> operator) or the method calls.\r\n      Some students evaluated the the <b>+</b> before the <b>*</b> (others\r\n        put one oval around this subexpression which contains two operators. \r\n      Other students did not oval the first <b>&&</b> (and its operands),\r\n        which becomes the left operand of the second <b>&&</b>.\r\n\r\n  <p>\r\n  <li>Problem 5: Forty-four students (39%) solved this problem perfectly;\r\n        the average was 71%.\r\n      A big improvment over the quizzes, but a few students still do not\r\n        seem to understand the interaction between looping, the\r\n        <b>try/catch</b> statement, and exceptions thrown by the file I/O\r\n        class methods.\r\n\r\n  <p>\r\n  <li>Problem 6: Only two students (2%) solved this problem perfectly\r\n        (Kevin Pham and Samantha Helstrom); the average was 70%.\r\n      Problem 6a: Mediocre scores here.\r\n      Most students are still having problems doing this correctly, especially\r\n        regarding <b>if</b> statements.\r\n      This task should be straightforward if you understand statements (and\r\n        is analogous to oval diagrams for expressions, which students did much\r\n        better on).\r\n      <p>\r\n      Problem 6b: Generally students did better on this part (and better\r\n        than on the quiz), both in form and content.\r\n      This problem with long, with lots of input, but most students\r\n        seemed to make good progress even if they did not finish it correctly:\r\n        some students terminate the loop too soon, but even more students\r\n        did not terminate the loop at the right time, reading the data all the\r\n        way until the sentinel.\r\n\r\n  <p>\r\n  <li>Problem 7: Only four students (4%) solved this problem perfectly\r\n        (Andrew Angeles, Yun Chen, Gevorg Hovakimyan, and Eric Whitescarver);\r\n        the average was 62%.\r\n      Generally students still did poorly on this part (not much better\r\n        than on the quiz).\r\n      There are still too many students who don't know the material: they\r\n        indicated constructors at the top (as in the quiz), but not in this\r\n        form of the class.\r\n      Here I wrote the fields first - another common way of writing classes.\r\n      <p>\r\n      Most students still did poorly on part b, although the problems were very\r\n        similar to those on the quiz.\r\n      Too many student did not correctly write all parts of the constructor,\r\n        and in later parts they did not use this variable when referring to\r\n        the constructed object.\r\n      I was surprised that many students did not know how to declare and\r\n        initialize this reference variable, which typically follow the form\r\n        <b>class-name variable = new class-name(initializations)</b>; this\r\n        confusion got wors in problems 9 and 10, which also required\r\n        constructors.\r\n      And, there is still lots of confusion about what to write, especially the\r\n        use of variables refering to objects for non-<b>static</b> methods\r\n        and the use of the class name in <b>static</b> methods.\r\n\r\n  <p>\r\n  <li>Problem 8: Seveenteen students (15%) solved this problem perfectly; the\r\n        average was 68%.\r\n      This problem used no classes.\r\n      The first loop was optimally a <b>do</b> loop although many students\r\n        are still using <b>for(;;)</b> loops and <b>if/break</b>: note that\r\n        the variable used <b>after</b> the loop <b>CANNOT</b> be declared\r\n        inside the loop.\r\n      The biggest mistake in the second loop was not updating the state of\r\n        the variable storing the number: the code needed to include something\r\n        like <b>number = number/10;</b> or just <b>number /= 10;</b>;\r\n        it also needed an counter variable that was incremented the correct\r\n        number of times (some students incremented one too few or too many\r\n        times.\r\n\r\n  <p>\r\n  <li>Problem 9: Six students (5%) solved this problem perfectly; the\r\n        average was 47%.\r\n      Many students got a close answer (missing a variety of small things),\r\n        while other had major conceptual problems.\r\n      To get full credit you needed to construct a <b>DiceEnsemble</b> (which\r\n        very many students did not do), have a simple (counting) and correctly\r\n        terminating loop -ensuring that you rolled the dice the correct number\r\n        of times, correctly calling the <b>.roll</b> and <b>.getPipSum</b>\r\n        methods (using the constructed object), and computed and printed the\r\n        right value.\r\n\r\n  <p>\r\n  <li>Problem 10: Seven students (6%) solved this problem perfectly; the\r\n        average was 45% (the lowest on the exam).\r\n      Many students got a close answer (missing a variety of small things),\r\n        while others had major conceptual problems.\r\n      To get full credit you needed to construct a <b>StringTokenizer</b>,\r\n        have a simple (<b>while (...hasMoreTokens())</b>) correctly terminating\r\n        loop, get/store the next token and perform the right test on it\r\n        (<b>.compareTo</b> with <b>maxSoFar</b>), and update <b>maxSoFar</b>\r\n        when indicated with the stored token, and print it after the loop.\r\n\r\n  <p>\r\n  <li>Problem 11: Ten students (9%) solved this problem perfectly; the\r\n        average was 46%.\r\n      Of those students who answered the first part, most did not know what\r\n        DeMorgan's law was (but I awarded 1 point for filling in the left-hand\r\n        side of the table correctly according to what boolean expressions you \r\n        would write).\r\n      There was some confusion about what I wanted on the second part,\r\n        which involved writing a <b>for(;;)</b> loop with an <b>if/break</b>\r\n        whose test was the negated version of the continuation test given\r\n        in the loop.\r\n  </ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #13: 5/9/12<br>\r\n  Quiz #5\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Quiz #5.\r\nThe class average was about 14 (or about 58%); the median was about 14\r\n  (or about 56%); the last time I taught this class the average was about\r\n  14 (or about 57%); the median was about 13 (or about 52%).\r\nI'll remind everyone that because the average was below 75%, students will\r\n  receive about 4 normalization points to bring the class average to 75%\r\n  (these points are not given to students individually -your score is still\r\n  your score- but are added to the totals of every student when computing their\r\n  grade); it is effectively as if you scored about 4 more points on this quiz.\r\nLook at your returned work carefully; if your score was below 20 (most were)\r\n  you might want to review this quiz with me or a TA.\r\nMaterial similar to this will be on the first written exam.\r\n<p>\r\nAfter I return your graded work in class on Wednesday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 22.5 is recorded as 23).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the quiz.\r\n<p>\r\nHere were some common mistakes:\r\n<ul>\r\n  <li>Problem 1: Most students got full or close to full credit here.\r\n      Some pictures did not show correct references; others showed two\r\n        declared variables with the same name; a few had arrows whose\r\n        tails were not INSIDE the center of the box, or arrows that had\r\n        no heads.\r\n      Remember, arrows point at ovals, NOT at other variable boxes\r\n        (e.g., what does <b>s2 = s1</b> do?).\r\n      Note that the <b>compareTo</b> method returns an <b>int</b> not a \r\n        <b>boolean</b>: I wasn't looking for an exact number, but just\r\n        and indication of whether the values was &lt;0, =0, or &gt;0.\r\n\r\n  <p>\r\n  <li>Problem 2: There were some totally correct or close to correct\r\n        solutions, but the ones that were not were often very wrong.\r\n      The semantics of the methods in the <b>StringTokenizer</b> class\r\n        take some getting used to (which I hope you will, in this quiz\r\n        and in Programming Assignment #4).\r\n      Points were given for the construction a <b>StringTokenizer</b>,\r\n        writing a loop, terminating the loop when there were no more tokens,\r\n        getting a token and checking to see if it was <b>.equals(word)</b>,\r\n        printing the previous value and <b>break</b>ing, and updating\r\n        the <b>previous</b> value if the loop continues.\r\n\r\n  <p>\r\n  <li>Problem 3a: Very poor performance.\r\n      There are simple rules that you can use to answer these questions,\r\n        but most students seemed very confused and did not know which rules\r\n        to apply.\r\n      I discussed these in class. You can look at my solutions online.\r\n      If you have questions, please ask them in class, or post information\r\n        on the appropriate forum.\r\n\r\n  <p>\r\n  <li>Problem 3b: Much like 3a only worse.\r\n      These questions were harder because they\r\n        asked you to synthesize, not just analyze code (but really you were\r\n        analyzing access modifiers).\r\n      You need to understand the rules for understanding access modifiers\r\n        to effective use classes that are in libraries (like mine and Java's).\r\n      Again, I suggest that you look at my solutions online.\r\n  </ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #12: 5/7/12<br>\r\n  Program #3\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Program #3.\r\nThe class average was about 40 (or about 89%) and median grade was about\r\n  43 (or about 96%); the last time I taught this class the average was about\r\n  40 (or about 90%) and median grade was about 42 (or about 93%).\r\n<p>\r\nAfter I return your graded work in class on Monday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an programming score of 36.5 is recorded as 37).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student programs: it makes my\r\n  office messier, and you don't get the benefit of the feedback I wrote.\r\n<p>\r\nBesides a few students submitting programs that weren't immediately\r\n  runnable (because the class name did not match the file name or because\r\n  they put their code in a package, each a 1 point deduction), the typical\r\n  mistakes were\r\n<ul>\r\n  <li>In Part 1, some students did not get the outer loop working\r\n        correctly; some students forgot to reset <b>t</b>, <b>x</b>,\r\n        and <b>y</b> back to 0 when retrying the next angle.\r\n      It is important to be able to treat what used to be the entire\r\n        program (computing the trajectory) as a part of a bigger program.\r\n      We will learn another way to do this by writing methods soon.\r\n  <p>\r\n  <li>In Part 2, many students got everything completely correct.\r\n      Some students had small differences in the answers, other\r\n        students had larger differences (some just in the height).\r\n      Some students had infinite loops.\r\n  <p>\r\n  <li>Part 3, caused more problem than the other parts.\r\n      I got the impression some students didn't fully understand\r\n        the form of the input files (nor run my executable on them).\r\n      I used two other test files when grading.\r\n      The first contained.\r\n<pre><b>     1000 -100 250 500 1001 750 100 -1</b></pre>\r\n      and the second\r\n<pre><b>     100 90 -10 -10 -10 -10 90  -1</b></pre>\r\n      Both follow the exact form of the other test files.\r\n  <p>\r\n  <li>In the style part, I took off 1 point for sometimes and 2 points\r\n        for rarely.\r\n  </ul>\r\nPlease always run my executable and compare it to your program's\r\n  behavior and output for various inputs.\r\n<p>\r\nFinally, a few students forgot to use the form of <b>Prompt.forDouble</b>\r\n  and <b>Prompt.forBoolean</b> that specified a default value.\r\nPlease check the Javadoc for this version is you did not use it correctly.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #11: 5/7/12<br>\r\n  Programming Exam #1\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) In-Lab Programming Exam #1.\r\nThe class average was about 41 (or about 81%) and  the class median\r\n  was about 46 (or about 92%).\r\nThe big difference in these numbers results from many students\r\n  scoring high (half got 92% or above) and some students scoring\r\n  very low (below 50%), dragging down the average but not the median.\r\nThe last time I taught this class the average was about 40 (or about 80%) and \r\n  the class median was about 45 (or about 90%).\r\n<p>\r\nAfter I return your graded work in class on Monday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an programming score of 36.5 is recorded as 37).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student programs: it makes my\r\n  office messier, and you don't get the benefit of the feedback I wrote.\r\n<p>\r\nGenerally, many students wrote correct programs (over half the class) but there\r\n  wre lots deductions for Java use (again, at most 5 points/10% per student).\r\nCommon mistakes were not using the correct <b>Prompt</b> methods (or prompting\r\n  inside the loop), not computing whether Player A won or not correctly with a\r\n  random number, not always tracing points when appropriate, not using the\r\n  \"rules of tennis\" criteria to correctly terminate loop/print winner:\r\n  ignoring/misinterpretting the <b>must have 4 points</b> rule or the\r\n  <b>must be at least two points more than your opponent</b> rule.\r\n<p>\r\nI took off up to 5 points at most for Java use.\r\nThere were about a dozen items in this category, typically 1-2 point per item.\r\nThe most frequent deductions were for ...\r\n<ul>\r\n  <li>...not declaring/initializing prompted-for variables in one statement\r\n  <li>...not declaring/initializing variables in the loop, if they were used\r\n           only in the loop\r\n  <li>...declaring extra/duplicate/unneeded variables\r\n  <li>...not using <b>if/else</b> when appropriate (often duplicating tests)\r\n  <li>...using <b>else</b> after <b>if</b> with a <b>break</b> when true\r\n  <li>...using nested <b>ifs</b> instead of the <b>&&</b> operator in one\r\n           <b>if</b>\r\n  <li>...using <b>== true</b> or <b>!= false</b>, etc.\r\n  <li>...poor use of locality: few blank lines separating grouped code\r\n</ul>\r\n<b>Important</b>: I will mentioned in class, students who score better on the\r\n  second In-Lab Exam will have that score count for both In-Lab #1 and #2.\r\nSo if you scored poorly because you didn't know what to expect, paniced, were\r\n  sick, or for any other reason, you can wipe out that score by performing\r\n  better on the next exam.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #10: 5/3/12<br>\r\n  Quiz #4\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Quiz #4.\r\nThe class average was about 16 (or about 63%) and the median was about 16\r\n  (or 64%); the last time I taught this class the average was about 16\r\n  (or about 65%); the median was about 17 (or 68%).\r\nLook at your returned work carefully; if your score was below 20 (most were)\r\n  you might want to review this quiz with me or a TA.\r\nMaterial similar to this will be on the first written exam.\r\n<p>\r\nAfter I return your graded work in class on Wednesday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 22.5 is recorded as 23).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the quiz.\r\n<p>\r\nHere were some common mistakes:\r\n<ul>\r\n  <li>Problem 1: Many students did much better on this problem than the\r\n        equivalent one on the previoius quiz (although some did just as\r\n        poorly and are still confused on exception handling, or just\r\n        understanding Java code).\r\n      Note that the value after one that raises the\r\n        <b>NumberFormatException</b> is read and ignored.\r\n\r\n  <p>\r\n  <li>Problem 2: Student scores spanned a wide range.\r\n      In part (a) I was looking for <b>do/while</b> loop (the body must be\r\n        executed at least once) that negated the termination condition in its\r\n        continuation condition.\r\n      This was the most natural translation.\r\n      Some students wrote loops that were not equivalent in execution\r\n        to the loop shown, or were more complicated, not less complicated.\r\n      For part (b) I wanted comments about the if/break being first in the\r\n         loop, last in the loop, and in-between other statements in the loop.\r\n  <p>\r\n  <li>Problem 3: Many students received full credit on this.\r\n      Remember, the online notes are easily searchable; some students\r\n        just guessed at the second/third part of this question instead\r\n        of searching the notes.\r\n      I wouldn't expect you to remember these terms just from reading the\r\n        notes, but if you didn't read the notes there are other things you\r\n        missed.\r\n      Oh, and if you are going to directly quote the notes, instead of reading\r\n        them and putting things in your own words (which I would prefer), then\r\n        put quotes around what you wrote and cite the source.\r\n  <p>\r\n  <li>Problem 4: Most students received 1.5-2 points.\r\n      Some didn't know what I meant by <b>conditional expression</b> and\r\n        rewrote <b>if</b> statements (or a <b>while</b> loop!).\r\n      Many did not put <b>currentValue = </b> in front of the conditional\r\n        expression (and instead put these tokens twice into the conditional\r\n        expression, twice).\r\n      If you didn't use the right test (some used <b>=</b> instead of\r\n        <b>==</b>) I deducted points.\r\n\r\n  <p>\r\n  <li>Problem 5: Students did well on this open question, but few received\r\n        full credit.\r\n      I wanted some discussion of <b>observing variables</b> and <b>executing\r\n        code</b> with the single statement stepper or conditional/unconditional\r\n        breakpoints.\r\n      I wanted all four of these terms mentioned for full credit.\r\n         \r\n  <p>\r\n  <li>Problem 6: Most students had a good idea of what I wanted here.\r\n      The first column represents the possible values for <b>traceInDetail</b>\r\n        while the second and third column were the expressions to be proven\r\n        identical (that confused some students, because the first and second\r\n        columns were identical).\r\n      Because these expressions are equivalent, the last two columns should\r\n        list the same values.\r\n      In the final part, I just wanted you to negate <b>traceInDetail</b>,\r\n        not using the literals <b>true</b> or <b>false</b>\r\n        \r\n  <p>\r\n  <li>Problem 7: Few student got this problem completely correct; I admit it is\r\n         a strange problem.\r\n      It is possible to use the initialization, testing, and increment part of\r\n        the general <b>for</b> loop.\r\n      Mainly I wanted a general <b>for</b> loop with an initialization, \r\n         test, and update; and I wanted a negated/simplified version of the\r\n         test in the <b>if/break</b>.\r\n      Note that we cannot declare <b>int c = 0</b> in the parentheses because\r\n        then that variable can be used only in the loop body (see the next\r\n        problem) and therefore not printed after the loop terminates.\r\n      Also, the termination condition in the <b>if</b> needed to be negated to\r\n        a continuation condition, and I wanted you to use DeMorgan's laws\r\n        to change <b>||</b> to <b>&&</b> as well as correctly negate the\r\n        relational operators: some students negated <b>x &gt; 0</b> to \r\n        <b>x &lt; 0</b> when it should have been negated to <b>x &lt;= 0</b>.\r\n\r\n  <p>\r\n  <li>Problem 8: This problem caused lots of grading issues because students\r\n        seemed not to have a good idea of what I was looking for.\r\n      In (a) I wanted you to talk about an empty expression statement and an\r\n        infinite loop.\r\n      In (b) I wanted you to talk about an empty expression statement and\r\n        a variable (<b>i</b>) not existing (not declard) in the block\r\n        following the <b>for</b> loop (the scope of the variable declaration\r\n        was ended after the loop ended).\r\n      In (c) I wanted you to talk about how using the \"right\" control structure\r\n        (the <b>for</b> loop is the right one) might allow the Java compiler to\r\n        help you debug strange problems by detecting and reporting a compiler\r\n        error instead of a runtime error.\r\n      You had to be very explicit in your answer to get over full credit.\r\n      Many students lost 2 points here.\r\n  </ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #9: 4/30/12<br>\r\n  Program #2\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Program #2.\r\nThe class average was about 40 (or about 90%) and the median was about 43 (or\r\n   96%); the last time I taught this class the average was about 42 (or about\r\n   93%); the median was about 43 (or 96%).\r\n<p>\r\nAfter I return your graded work in class on Monday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an programming score of 36.5 is recorded as 37).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student programs: it makes my\r\n  office messier, and you don't get the benefit of the feedback I wrote.\r\n<p>\r\nBesides a few students submitting programs that weren't immediately\r\n  runnable (because the class name did not match the file name or because\r\n  they put their code in a package, or incorrectly commented-out some line,\r\n  each a 1 point deduction), the common mistakes were\r\n<ul>\r\n  <li>In Part 1, some students generated random numbers in an incorrect\r\n        range; others forgot to multiply the ratio by 4; some students did\r\n        not cast the <b>int</b>s to <b>double</b>s or hand other calculation\r\n        errors, others did not repreated prompt for a positive number; many\r\n        students did not follow directions and left in statements that printed\r\n        information.\r\n  <p>\r\n  <li>In Part 2, some students wrote code incorrectly for the case where\r\n        the sentinel was the first value (or didn't comment-out the\r\n        print statements, but instead removed them); many\r\n        students did not follow directions and left in statements that printed.\r\n      Some students computed statistics wrong or neglected to compute them.\r\n  <p>\r\n  <li>In Part 3, some students did not trace outputs in the form of\r\n        my executable; while it is possible to compute the door to expose\r\n        without using a loop with random numbers, I wanted you to get more\r\n        experience writing loops. \r\n      Other students computed a 50%/50% win ratio, instead of the 66%/33%\r\n        switch vs. stay ratio, so their logic was somehow wrong.\r\n  </ul>\r\nPlease always run my executable and compare it to your program's\r\n  behavior and output for various inputs.\r\n<p>\r\nFinally, some students declared \"counter\" variables to be <b>double</b>\r\n  instead of <b>int</b> and some required two <b>Prompt.forInt</b> calls in\r\n  their loops (for getting a positive value) when one sufficed with the \"right\"\r\n  kind of loop.\r\n<p>\r\nNote the back page: we did not deduct points for style, but we indicated where\r\n  you need help.\r\nWe will grade on style (deducting points) for Programming Assignment #3.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #8: 4/30/12<br>\r\n  Upcoming Programming Exam\r\n</b></td>\r\n<td width =\"80%\">\r\nWe will have our first (of four) <b>in-class programming exam</b> on Thursday,\r\n  May 3, in <b>Lab</b>.\r\nYou will be asked to login on and use one of the lab computers (not your own!),\r\n  start Eclipse (setting up the <b>introlib.jar</b> file), and work on a\r\n  project folder that you will download.\r\nI will supply a written description of what your program should do, along\r\n  with a few examples of input and output, and some iterative enhancements.\r\nThe program will involve declaration statements, expressions statements\r\n  (including input and output), and <b>if</b> and looping statements (but\r\n   not <b>try/catch</b> and not classes).\r\n<p>\r\nThe program is worth 50 points and you will have approximately 90 minutes to\r\n  work on it.\r\nThe program will require about a two dozen lines of code.\r\nSome students will finish, some will not.\r\nI will award partial credit for partially working programs.\r\nThis is a closed notes/book/internet exam; you will have access\r\n  to Javadoc for the Introlib and Java classes.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #7: 4/25/12<br>\r\n  Quiz #3\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Quiz #3.\r\nThe class average was about 18 (or about 70%); the median was about 18 (or\r\n  about 72%); the last time I taught this class the class average was about 17\r\n  (or about 68%); the median was about 19 (or about 72%).\r\nLook at your returned work carefully; if your score was below 20 (most were)\r\n  you might want to review this quiz with me or a TA.\r\nMaterial similar to this will be on the first written exam.\r\n<p>\r\nAfter I return your graded work in class on Wednesday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 22.5 is recorded as 23).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the quiz.\r\n<p>\r\nHere were some common mistakes:\r\n<ul>\r\n  <li>Problem 1: Most students did well on this problem.\r\n      The most \"missed\" statement was the declaration statement.\r\n      Other students listed two or three different kinds of <b>if</b>\r\n        statements separately (there is just one EBNF rule for ifs).\r\n      Some students put * after every statement or after no statements;\r\n        other students did not put a * after blocks (which are the\r\n        simplest form of control structure) or breaks (which technically\r\n        are a control structure -they affect what statement is executed\r\n        next, but different than the other control structures because\r\n        we don't see <b>statement</b> mentioned in their EBNF).\r\n\r\n  <p>\r\n  <li>Problem 2: Few students got full credit on this problem.\r\n      Part 1 had no state-change operator evaluated last (or at all).\r\n      Part 2 incremented <b>y</b> to 4, and then stored that value into\r\n        <b>x</b> as well.\r\n      Part 3 had an illegal operand for a state change operator.\r\n      Part 4 incremented <b>x</b>, but then the <b>=</b> operator took\r\n        <b>x</b>'s <b>old</b>value (it is a postfix <b>++</b>) and stored it\r\n        back into <b>x</b>; so, the expression statement <b>x++;</b> or\r\n        <b>++x;</b> increments <b>x</b>; for that matter even\r\n        <b>x = ++x;</b> works (although it is overly complex), but NOT\r\n        <b>x = x++;</b>.\r\n      In Part 5, many students got full credit, although this expression\r\n        statement is complicated, it is syntactically correct.\r\n\r\n  <p>\r\n  <li>Problem 3: Most students missed at least one part of this problem.\r\n      Most got part (a) correct.\r\n      Many got tricked by part (b): any method call is a legal expression\r\n        statement, even if it returns a value that is not stored or printed\r\n        somewhere (unlike operators, where the last operator must be a\r\n        state-change operator).\r\n      This is certainly strange, but this is what Java allows, and can be\r\n        useful: by putting a\r\n        <b>Prompt.forString(\"Press enter to continue\");</b> statement in a\r\n        program, Java executes it by displaying the message, waiting for\r\n        the user to press <b>enter</b> and it discards whatever text the\r\n        user entered before pressing <b>enter</b>: so its net effect is\r\n        pausing the program until the user says \"go ahead and execute the\r\n        rest\".\r\n      Part (c) is the standard story about <b>void</b> methods; to get\r\n        full credit on this part you should have used the word <b>void</b>.\r\n\r\n  <p>\r\n  <li>Problem 4: Many students got 4-5 points for writing this code.\r\n      There were VERY VERY many different ways to write this code correctly.\r\n      Common problems were failure to print the extreme values (1 and 100);\r\n        failure to put spaces between values; failure to increment (in any\r\n        form) the counting variable; failure to go to the next line after\r\n        printing multiples of 10s (some students don't know the semantics of\r\n        the <b>System.out.println</b> method); printing some values twice.\r\n\r\n  <p>\r\n  <li>Problem 5: Generally syntax errors are considered better to have,\r\n        as the Java compiler points them out to us for fixing; for execution\r\n        errors, we get no such help.\r\n         \r\n  <p>\r\n  <li>Problem 6: On part a, very few students got full credit: there were lots\r\n        of different errors so compare your solution to mine if you did not\r\n        get this one perfect.\r\n      On part b, more students got full credit, but still not a lot: some did \r\n        not write <b>compact</b> trace tables; others forgot to show the prompt\r\n        or the input that followed it -in the <b>Console</b> column; others\r\n        just performed the hand simulation incorrectly.\r\n      The algorithm implemented called \"Russian Peasants Multiplication\":\r\n        for any two values for <b>x</b> and <b>y</b>, the result is the\r\n        product of these two numbers (using doubling, halving, and adding:\r\n        you don't need to know any \"multiplication tables\").\r\n  <p>\r\n  <li>Problem 7: Mostly a disaster. Some students got it completely correct,\r\n        but most had no idea what to do: a loop with a <b>try/catch</b> that\r\n        printed lots of interesting things.\r\n      If you didn't get this correct, figure out exactly why, to the point\r\n        that you could solve other similar problems that might appear on\r\n        later testing instruments (hint hint).\r\n  </ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #6: 4/23/12<br>\r\n  Program #1\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Program #1.\r\nThe class average was about 43 (or about 96%) and the median was about 44 (or\r\n  about 98%); the last time I taught this class the average and median were\r\n  both about 44 (or about 98%).\r\n<p>\r\nAfter I return your graded work in class on Monday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an programming score of 36.5 is recorded as 37).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student programs: it makes my\r\n  office messier, and you don't get the benefit of the feedback I wrote.\r\n<p>\r\nFirst, a few students submitted programs that weren't immediately runnable.\r\nIn a few cases, the class name did not match the file name; in others it looked\r\n  like students changed something at the last minute (like a comment or brace)\r\n and didn't check that the program was still runable.\r\nThis was just a 1 point deduction this time, but it will increase in later\r\n  programs.\r\n<ul>\r\n  <li>In <b>EscapeVelocity</b> a few students prompting for the mass and\r\n        gravity in the wrong order (or prompted for the gravitational constant,\r\n        which should be a variable that is intialized by that value without\r\n        prompting the user: it is always the same); please make sure your\r\n        program's behavior matches my executable.\r\n  <p>\r\n  <li>In <b>ExpressionTest</b>, while some students had incorrect expressions\r\n        (each was a 1 point deduction), many students had expressions\r\n        with redundant parentheses (each pair was a .5 deduction).\r\n      A few students wrote .../2*a which is incorrect, but because the\r\n        test had a = 1, students did not detected this as an error.\r\n  <p>\r\n  <li>In <b>ChangeMaker</b>, some programs computed wrong results: either the\r\n        coins did not add up to the required amount, or the change was not the\r\n        minimum amount of coins (e.g., returning 15 cents as 3 nickels instead\r\n        of a dime and nickel). \r\n  <p>\r\n  <li>In <b>PizzaPricer</b>\r\n  <ol>\r\n  <li>Some students did not declare the right <b>types</b> for the different\r\n        variables (<b>int</b> vs. <b>double</b>), or did not prompt using\r\n        the correct method (relying on Java to implicitly convert the value).\r\n  <p>\r\n  <li>A few students computed the cost/person incorrectly; some printed the\r\n        the price as $ per sequare inch instead of cents per square inch.\r\n  <p>\r\n  <li>Many students declared the <b>diameter</b> as an <b>int</b>, as they \r\n        should have, but then wrote <b>diameter/2</b> which truncates the\r\n        result for an odd size diameter.\r\n      See the bottom of the required grade sheet for ways to have avoided\r\n        this problem: my favorite is explicit casting.\r\n  </ol>\r\n  </ul>\r\n<b>\r\nPlease remember to run my executable, on various inputs, and compare its\r\n   results to your program's behavior and output.\r\nMany students would have been alerted to errors in their programs by doing so,\r\n  and most of the errors would have been fairly easy to fix, once they were\r\n  identified as errors.\r\nThe input/output (prompting and printing) of the executable's behavior and your\r\n  program's behavior should match.\r\n</b>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #5: 4/18/12<br>\r\n  Quiz #2\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Quiz #2.\r\nThe class average was about 17 (or about 67%); the mean was also about\r\n  17 (or about 68%); the last time I taught this class the average and\r\n  mean were exactly the same.\r\nBecause the average was below 75%, students will receive about 2 normalization\r\n  points to bring the class average to 75% (these points are not given to \r\n  students individually -your entered score is still what is on your returned\r\n  quiz- but all the normalization points are added to the totals of every\r\n  student when computing their grade); it is effectively as if you scored about\r\n  2 more points on this quiz (about 8% points).\r\nLook at your returned work carefully; if your score was below 20 (most were)\r\n  you might want to review this quiz with me or a TA.\r\nMaterial similar to this will be on the first written exam.\r\n<p>\r\nAfter I return your graded work in class on Wednesday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 22.5 is recorded as 23).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the quiz.\r\n<p>\r\nHere were some common mistakes:\r\n<ul>\r\n  <p>\r\n  <li>Problem 1: Part 1's syntax was legal, but initializes only one variable;\r\n        in real code, the other might be set later in an expression statement.\r\n      Many students said it was illegal because it didn't initialize\r\n        <b>x</b>; fewer showed <b>x</b> being initialzed by <b>3</b>.\r\n      Both are wrong.\r\n      Please note the correct terminology (which many students did not get\r\n        correct): this declaration <b>declares</b> the variables <b>x</b> and\r\n        <b>x</b> but <b>initializes</b> only <b>y</b>.\r\n      Part 2 was illegal because it tried to use a <b>double</b> to initialize\r\n        an <b>int</b> variable (there is no implicit conversion this way).\r\n      Part 3, both declarations are legal; the second stored <b>3</b> into\r\n        <b>y</b> (declared in first declaration) and then it was implicitly\r\n        converted into <b>3.</b> and stored into the newly declared\r\n        <b>double</b> variable <b>x</b>.\r\n      The declarator for <b>x</b> included the expression <b>y=3</b>.\r\n\r\n  <p>\r\n  <li>Problem 2: Some students didn't know the form in which to write\r\n        prototypes; some did not correctly determine the return type or the \r\n        type of (one or more of its) operands; many wrote too few operands;\r\n        a few students tried writing code to perform the calculations, which is\r\n        unnecessary in a prototype.\r\n      Students generally did badly on this synthesis task: you need to be able\r\n        to determine the prototype of a function from its description.\r\n\r\n  <p>\r\n  <li>Problem 3: \r\n        Part 1: Many student got this part completely correct: you needed to\r\n          refer to the word prototype and actually write two operators, one\r\n          overloaded and one not (some students just said something like\r\n          \"logical operators\" but I wanted you to show the symbol for one).\r\n        Part 2: I really wanted an answer that was general for all state-change\r\n          operators (saying that some operand must be the name of a variable)\r\n          but I gave full credit even if you just wrote about the <b>=</b>\r\n          state change operator and referred to the \"first operand\": note that\r\n          the <b>++</b> operator has just one operand.\r\n        Part 3: Here too I wanted a general answer.\r\n          But here, if you wrote about just the <b>=</b> operator (specifying\r\n            how the state of the variable changed and what the result of the\r\n            expression was) I deducted .5 points.\r\n   \r\n  <p>\r\n  <li>Problem 4: Lots of small problems here (especially related to implicit\r\n        conversion and casting, and writing values of the correct type).\r\n      Probably the most missed parts were <b>e</b>, <b>g</b>, <b>i</b>,\r\n         and <b>j</b> (including writing <b>611</b> vs. the right answer\r\n         <b>\"611\"</b>.\r\n      Ensure you know the difference between <b>e</b> and <b>f</b>.\r\n      See my solutions; if you still don't understand them, see me.\r\n         \r\n  <p>\r\n  <li>Problem 5: Many students didn't fully circle or label literals; some\r\n        didn't fully circle or label variables.\r\n      Many students didn't correctly circle the negate unary operator\r\n        <b>and</b> its literal subexpression.\r\n      Some students applied the <b>+</b> operator before the <b>*</b>\r\n        operator (ignoring operator precedence).\r\n      Some students didn't circle the <b>y - 2</b> expression or circled it\r\n        but not its subexpressions: <b>y</b> and <b>2</b>.\r\n      In a few cases, types/values were missing or mislabelled/miscalculated.\r\n         \r\n  <p>\r\n  <li>Problem 6: A huge number of students wrote 5/9*... which results in\r\n        0 (then converted to the double 0.; same for 3/2 in a later part:\r\n        write it as 3./2. or more simply as just 1.5).\r\n      Many students forget to parenthesize denominators that involved\r\n        multiplication: .../(2*(A+B))\r\n      Many students used redundant parentheses: when removed, the expression's\r\n        operators were still evaluated in the same order.\r\n      Many students either left part <b>e</b> blank or used <b>=</b> (instead\r\n        of <b>==</b>) operators or wrote just <b>x+y+z==10</b>, not stating\r\n        the condition for these values being in increasing order, or wrote it\r\n        as <b>x < y < z</b> which uses incorrect Java syntax to express this\r\n        condition (as we discssed in class).\r\n  </ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #4: 4/15/12<br>\r\n  Program #0\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Program #0.\r\nThe class average was a bit below 21 (or about 103%); the median was about 21\r\n  (or about 105%); the class average the last time I taught this class was a\r\n  bit above 20 (or about 102%); the median was about 21 (or about 105%)\r\nThere were a few students who scored much lower because of forgetting to turn \r\n in or completely fill out their questionnaire, or one of the programs; if you\r\n  lost a large number of points you should contact me an explain what happened.\r\n<p>\r\nAfter I return your graded work in class on Monday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an programming score of 18.5 is recorded as 19).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student programs: it makes my\r\n  office messier, and you don't get the benefit of the feedback I wrote.\r\n<p>\r\nThe purpose of this assignment, besides the obvious -to get you acquainted\r\n  with the tools we will use while programming in this course- is to also\r\n  give you some opportunity to read and follow instructions (and ask questions\r\n  if things seem confusing).\r\nHere were some common mistakes (although I arranged the grading rubric so that\r\n  most students could get close to 100%, especially if they turned in their\r\n  work early):\r\n<ul>\r\n  <li>Some students did not fill in the second page of the questionnaire.\r\n  <p>\r\n  <li>Some students did not remove all the italicized comments from the\r\n        questionnaire.\r\n  <p>\r\n  <li>Some students, in answer to the question \"...how many scheduled office\r\n        hours do I have each week\" cut and paste my office hours, but did not\r\n        supply the answer: 4.5 hours (or 3.5 if you discount the times I might\r\n        not be there).\r\n      Answer questions explicitly: if I asked a question about the history of\r\n        the Suez Canal, supplying me a URL to Wikipedia doesn't really answer\r\n        the question.\r\n  <p>\r\n  <li>Some students did not have a class name compatible with their file\r\n        name, and so a project created from the file did not run immediately.\r\n      Ensure any file name you submit, when put in a project file and loaded\r\n        into Eclipse, compiles and runs.\r\n  <p>\r\n  <li>Some students corrected the spelling of \"scceeded\" to \"succeeded\".\r\n      Please, if you think you see any mistakes in the assignment, ask me\r\n        what to do.\r\n      A few students did in this case, and I told them to keep the incorrect\r\n        spelling.\r\n      Programmers are often supplied what might appear to be weird\r\n        specifications for the programs they are to write; it is up to them\r\n        to understand these specifications, and question the specifier as to\r\n        their intended and actual meanings.\r\n      Please don't make assumptions about what you are suppose to do; this is\r\n        a Mr. Lil moment.\r\n      As a class member and part of the ICS-21 community, if you think you have\r\n        spotted an error in an assignment, or something is just confusing,\r\n        please contact me, perferably via the forum, so that I can correct or\r\n        clarify the problem for everyone in the class.\r\n  </ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #3: 4/11/12<br>\r\n  Quiz #1\r\n</b></td>\r\n<td width =\"80%\">\r\nI have graded (and recorded the grades for) Quiz #1.\r\nThe class average was about 20 (or about 80%); the median was 21 (or about\r\n  84%); the last time I taught this class the average was about 18 (or about\r\n  74%); the median was 19 (or about 76%).\r\nLook at your returned work carefully; if your score was below 20 (many were)\r\n  you might want to review this quiz with me or the TA.\r\nMaterial similar to this will be on the first written exam.\r\n<p>\r\nAfter I return your graded work in class on Wednesday, please download the \r\n  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have\r\n  computed and entered your grade correctly (I'll be entering thousands of\r\n  grades for students in my course this quarter, so even if I'm 99% accurate,\r\n  I'm likely to record some incorrect grades.\r\nNote that all grades are recorded as integral values: I always round up\r\n  (e.g., an exam score of 22.5 is recorded as 23).\r\n<p>\r\nIf you do not pick up your returned work in class, you should pick it up during\r\n  my office hours ASAP; I don't like keeping student exams: it makes my office\r\n  messier, and you don't get the benefit of the feedback I wrote on the quiz.\r\n<p>\r\nHere were some common mistakes:\r\n<ul>\r\n  <li>Problem 1: Most students did will on this problem.\r\n      Most students just copied this out of my notes, or paraphrased them:\r\n          if you cut/pasted, you should have cited the notes.\r\n      There will be few (if any) problems that allow this kind of \"copying\"\r\n         later in the quarter.\r\n      A few answer were a bit short, or addressed either computers or software\r\n        but not both.\r\n  <p> \r\n  <li>Problem 2: Again, most students did well.\r\n      I think almost everyone got the percentages correct, but some\r\n        students did not compute the coorect lifetime cost.\r\n  <p>  \r\n  <li>Problem 2: Again, most students did well.\r\n      Some students didn't multiply 50 million by the right $/line of code from\r\n        the table; others computed an incorrect answer from correct number.\r\n      Note that the $21/line of code is what the build cost was.\r\n  <p>\r\n  <li>Problem 3: Many students either left out one or two lines needed in the\r\n        syntax chart (some omitted it altogether) or incorrectly computed\r\n        whether a few words were <b>Legal</b> or <b>Illegal</b> according the\r\n        EBNF.\r\n  <p>    \r\n  <li>Problem 4: Some students got this completely correct while others had\r\n        close sol;utions.\r\n      Some had \"useless rules\" (e.g., comma <= ,) or minor or major bugs in\r\n        their EBNF rules: <b>name-sequence <= name{, name} and name</b> was\r\n        common, but that  doesn't allow just one <b>name</b>\r\n      Some students wrote only the Right Hand Side of the rule, not the\r\n        Left Hand Side nor \"is defined as\" arrow.\r\n      There were a few students who specified a Right Hand Side without using\r\n        <b>name</b>, some didn't include commas nor the word \"and\"; these\r\n        students appear lost.\r\n  <p>    \r\n  <li>Problem 5: Some students did get this completely correct, while others\r\n        had lots of small mistakes; most are covered in the \"Common Errors\"\r\n        section in the Tokens lecture.\r\n      Quite a few students specified <b>forInt</b> as two keywords or as\r\n        a keyword followed by an identifier (it is one long identifier).\r\n      A few others didn't tokenize <b>int</b>, <b>x</b>, or <b>=</b>\r\n        (the first three tokens), tokenized <b>++</b> as two tokens (it is\r\n        one big operator token), tokenized the white space appearing between\r\n        tokens (white space isn't a token; it comes between tokens), tokenized\r\n        <b>};</b> as one separator token (it is two), or finally, tokenized\r\n        things \"inside\" comments (they are all part of one big comment token).\r\n      Some students did not write the types of the literals.\r\n  <p>\r\n  <li>Problem 6: Few students got this completely correct.\r\n        In part (a) some student didn't tokenize <b>\"ans=\"</b> as one\r\n          <b>String</b> literal, or didn't tokenize <b>+++</b> as the\r\n          <b>++</b> token followed by the <b>+</b>token.\r\n        In part (b) some student used their intuition (I think) instead of\r\n          following the EBNF rules to determine their answer.\r\n        In part (c) most students had the right idea about comments, but\r\n          technicall they aren't \"ignored\" but are treated as white space. \r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #2: 4/2/12<br>\r\n  Install Course Software\r\n</b></td>\r\n<td width =\"80%\">\r\n  All students with computers should download and install Java (latest version\r\n      is JDK 6 Update 31) and\r\n    Eclipse (latest version is Eclipse 3.7.2 - named Indigo).\r\n  Both these products are available for free.\r\n  Students can download and install this software (and other useful material)\r\n    from the web by exploring the\r\n    <a href=\"../common/online.html\" target=\"main\">Online Resources</a>\r\n    link (see <b>Course Software</b>, near the top of that page).\r\n  <p>\r\n  Specifically, read the handout on\r\n    <a href=\"../common/handouts/javaeclipseinstallation.html\">\r\n    Java and Eclipse</a> (Download/Installation Instructions) for details.\r\n  Please contact me if you are having trouble, as I will assume every has\r\n    successfully downloaded and installed this software by the end of the\r\n    first week of classes.\r\n  If you have a portable machine, bring it to lab if you need help\r\n    downloading or installing this software.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>\r\n  #1: 4/2/12<br>\r\n  First Message\r\n</b></td>\r\n<td width =\"80%\">\r\n  Welcome to ICS-21\r\n  I am going to post and archive important messages about the class in this\r\n    announcements web page: each entry will be numbered, dated, and labeled.\r\n  The entries will appear in reverse chronological order.\r\n  Whenever you follow the link to this page (and you should do so daily), scan\r\n    its top for new announcements; scan downward for older announcements.\r\n  This message will always appear at the bottom of this file. \r\n  <p>\r\n  I will never remove a message from this page, although a subsequent message\r\n    may \"cancel\" a previous one; in such a case, I'll refer to the number of a \r\n    canceled message in the message that cancels it.\r\n  <p>\r\n  Expect a few new messages to be posted here each week.\r\n  <p>\r\n  Check this page, along with the the course email discussions, daily.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<hr align=\"left\">\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}