{"url": "https://www.ics.uci.edu/~stasio/winter06/lab3/lab3.html", "content": "<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\n\txmlns:w=\"urn:schemas-microsoft-com:office:word\" xmlns=\"http://www.w3.org/TR/REC-html40\"\r\n\txml:lang=\"en\">\r\n\t<head>\r\n\t\t<title>ICS H22 Winter 2006, Lab 3: The Company Payroll</title>\r\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r\n\t\t<meta name=\"ProgId\" content=\"Word.Document\">\r\n\t\t<meta name=\"Generator\" content=\"Microsoft Word 11\">\r\n\t\t<meta name=\"Originator\" content=\"Microsoft Word 11\">\r\n\t\t<link rel=\"File-List\" href=\"http://www.ics.uci.edu/%7Exiaominl/H22/win06/Lab3_files/filelist.xml\">\r\n\t\t\t<link rel=\"Edit-Time-Data\" href=\"http://www.ics.uci.edu/%7Exiaominl/H22/win06/Lab3_files/editdata.mso\"> <!--[if !mso]>\r\n<STYLE>\r\nv\\:* {behavior:url(#default#VML);}\r\no\\:* {behavior:url(#default#VML);}\r\nw\\:* {behavior:url(#default#VML);}\r\n.shape {behavior:url(#default#VML);}\r\n</STYLE>\r\n<![endif]-->  <!--[if gte mso 9]><xml>\r\n <o:DocumentProperties>\r\n  <o:Author>xiaominl</o:Author>\r\n  <o:LastAuthor>xiaominl</o:LastAuthor>\r\n  <o:Revision>23</o:Revision>\r\n  <o:TotalTime>21</o:TotalTime>\r\n  <o:Created>2005-10-06T23:45:00Z</o:Created>\r\n  <o:LastSaved>2006-01-27T19:15:00Z</o:LastSaved>\r\n  <o:Pages>1</o:Pages>\r\n  <o:Words>4316</o:Words>\r\n  <o:Characters>24605</o:Characters>\r\n  <o:Company>University of California, Irvine</o:Company>\r\n  <o:Lines>205</o:Lines>\r\n  <o:Paragraphs>57</o:Paragraphs>\r\n  <o:CharactersWithSpaces>28864</o:CharactersWithSpaces>\r\n  <o:Version>11.6360</o:Version>\r\n </o:DocumentProperties>\r\n</xml><![endif]-->  <!--[if gte mso 9]><xml>\r\n <w:WordDocument>\r\n  <w:Zoom>120</w:Zoom>\r\n  <w:SpellingState>Clean</w:SpellingState>\r\n  <w:GrammarState>Clean</w:GrammarState>\r\n  <w:ValidateAgainstSchemas/>\r\n  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n  <w:Compatibility>\r\n   <w:UseFELayout/>\r\n  </w:Compatibility>\r\n  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n </w:WordDocument>\r\n</xml><![endif]-->  <!--[if gte mso 9]><xml>\r\n <w:LatentStyles DefLockedState=\"false\" LatentStyleCount=\"156\">\r\n </w:LatentStyles>\r\n</xml><![endif]-->\r\n\t\t\t\t<style> <!-- /* Font Definitions */ @font-face {font-family:Courier; panose-1:2 7 4 9 2 2 5 2 4 4; mso-font-charset:0; mso-generic-font-family:modern; mso-font-format:other; mso-font-pitch:fixed; mso-font-signature:3 0 0 0 1 0;}\r\n\t@font-face {font-family:SimSun; panose-1:2 1 6 0 3 1 1 1 1 1; mso-font-alt:SimSun; mso-font-charset:134; mso-generic-font-family:auto; mso-font-pitch:variable; mso-font-signature:3 135135232 16 0 262145 0;}\r\n\t@font-face {font-family:SimSun; panose-1:2 1 6 0 3 1 1 1 1 1; mso-font-charset:134; mso-generic-font-family:auto; mso-font-pitch:variable; mso-font-signature:3 135135232 16 0 262145 0;}\r\n\t/* Style Definitions */ p.MsoNormal, li.MsoNormal, div.MsoNormal {mso-style-parent:\"\"; margin:0in; margin-bottom:.0001pt; mso-pagination:widow-orphan; font-size:12.0pt; font-family:\"Times New Roman\"; mso-fareast-font-family:SimSun;}\r\n\th2 {mso-margin-top-alt:auto; margin-right:0in; mso-margin-bottom-alt:auto; margin-left:0in; mso-pagination:widow-orphan; mso-outline-level:2; font-size:18.0pt; font-family:\"Times New Roman\"; font-weight:bold;}\r\n\ta:link, span.MsoHyperlink {color:blue; text-decoration:underline; text-underline:single;}\r\n\ta:visited, span.MsoHyperlinkFollowed {color:blue; text-decoration:underline; text-underline:single;}\r\n\tp {mso-margin-top-alt:auto; margin-right:0in; mso-margin-bottom-alt:auto; margin-left:0in; mso-pagination:widow-orphan; font-size:12.0pt; font-family:\"Times New Roman\"; mso-fareast-font-family:SimSun;}\r\n\tpre {margin:0in; margin-bottom:.0001pt; mso-pagination:widow-orphan; tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-size:10.0pt; font-family:\"Courier New\"; mso-fareast-font-family:SimSun;}\r\n\tspan.SpellE {mso-style-name:\"\"; mso-spl-e:yes;}\r\n\tspan.GramE {mso-style-name:\"\"; mso-gram-e:yes;}\r\n\t@page Section1 {size:8.5in 11.0in; margin:1.0in 1.25in 1.0in 1.25in; mso-header-margin:.5in; mso-footer-margin:.5in; mso-paper-source:0;}\r\n\tdiv.Section1 {page:Section1;}\r\n\t/* List Definitions */ @list l0 {mso-list-id:459154777; mso-list-template-ids:178792362;}\r\n\t@list l0:level1 {mso-level-number-format:bullet; mso-level-text:\\F0B7; mso-level-tab-stop:.5in; mso-level-number-position:left; text-indent:-.25in; mso-ansi-font-size:10.0pt; font-family:Symbol;}\r\n\t@list l0:level2 {mso-level-tab-stop:1.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l0:level3 {mso-level-tab-stop:1.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l0:level4 {mso-level-tab-stop:2.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l0:level5 {mso-level-tab-stop:2.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l0:level6 {mso-level-tab-stop:3.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l0:level7 {mso-level-tab-stop:3.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l0:level8 {mso-level-tab-stop:4.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l0:level9 {mso-level-tab-stop:4.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l1 {mso-list-id:1642033500; mso-list-template-ids:1160523322;}\r\n\t@list l1:level1 {mso-level-number-format:bullet; mso-level-text:\\F0B7; mso-level-tab-stop:.5in; mso-level-number-position:left; text-indent:-.25in; mso-ansi-font-size:10.0pt; font-family:Symbol;}\r\n\t@list l1:level2 {mso-level-tab-stop:1.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l1:level3 {mso-level-tab-stop:1.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l1:level4 {mso-level-tab-stop:2.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l1:level5 {mso-level-tab-stop:2.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l1:level6 {mso-level-tab-stop:3.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l1:level7 {mso-level-tab-stop:3.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l1:level8 {mso-level-tab-stop:4.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l1:level9 {mso-level-tab-stop:4.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l2 {mso-list-id:1677615315; mso-list-template-ids:-2114264142;}\r\n\t@list l2:level1 {mso-level-number-format:bullet; mso-level-text:\\F0B7; mso-level-tab-stop:.5in; mso-level-number-position:left; text-indent:-.25in; mso-ansi-font-size:10.0pt; font-family:Symbol;}\r\n\t@list l2:level2 {mso-level-tab-stop:1.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l2:level3 {mso-level-tab-stop:1.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l2:level4 {mso-level-tab-stop:2.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l2:level5 {mso-level-tab-stop:2.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l2:level6 {mso-level-tab-stop:3.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l2:level7 {mso-level-tab-stop:3.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l2:level8 {mso-level-tab-stop:4.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l2:level9 {mso-level-tab-stop:4.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l3 {mso-list-id:1740395633; mso-list-template-ids:2037706566;}\r\n\t@list l3:level1 {mso-level-number-format:bullet; mso-level-text:\\F0B7; mso-level-tab-stop:.5in; mso-level-number-position:left; text-indent:-.25in; mso-ansi-font-size:10.0pt; font-family:Symbol;}\r\n\t@list l3:level2 {mso-level-tab-stop:1.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l3:level3 {mso-level-tab-stop:1.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l3:level4 {mso-level-tab-stop:2.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l3:level5 {mso-level-tab-stop:2.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l3:level6 {mso-level-tab-stop:3.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l3:level7 {mso-level-tab-stop:3.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l3:level8 {mso-level-tab-stop:4.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l3:level9 {mso-level-tab-stop:4.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l4 {mso-list-id:1853836933; mso-list-template-ids:515671772;}\r\n\t@list l4:level1 {mso-level-number-format:bullet; mso-level-text:\\F0B7; mso-level-tab-stop:.5in; mso-level-number-position:left; text-indent:-.25in; mso-ansi-font-size:10.0pt; font-family:Symbol;}\r\n\t@list l4:level2 {mso-level-tab-stop:1.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l4:level3 {mso-level-tab-stop:1.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l4:level4 {mso-level-tab-stop:2.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l4:level5 {mso-level-tab-stop:2.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l4:level6 {mso-level-tab-stop:3.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l4:level7 {mso-level-tab-stop:3.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l4:level8 {mso-level-tab-stop:4.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l4:level9 {mso-level-tab-stop:4.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l5 {mso-list-id:1943341572; mso-list-template-ids:-291056330;}\r\n\t@list l5:level1 {mso-level-number-format:bullet; mso-level-text:\\F0B7; mso-level-tab-stop:.5in; mso-level-number-position:left; text-indent:-.25in; mso-ansi-font-size:10.0pt; font-family:Symbol;}\r\n\t@list l5:level2 {mso-level-tab-stop:1.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l5:level3 {mso-level-tab-stop:1.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l5:level4 {mso-level-tab-stop:2.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l5:level5 {mso-level-tab-stop:2.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l5:level6 {mso-level-tab-stop:3.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l5:level7 {mso-level-tab-stop:3.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l5:level8 {mso-level-tab-stop:4.0in; mso-level-number-position:left; text-indent:-.25in;}\r\n\t@list l5:level9 {mso-level-tab-stop:4.5in; mso-level-number-position:left; text-indent:-.25in;}\r\n\tol {margin-bottom:0in;}\r\n\tul {margin-bottom:0in;}\r\n\t--></style>\r\n\t\t<!--[if gte mso 10]>\r\n<style>\r\n /* Style Definitions */\r\n table.MsoNormalTable\r\n\t{mso-style-name:\"Table Normal\";\r\n\tmso-tstyle-rowband-size:0;\r\n\tmso-tstyle-colband-size:0;\r\n\tmso-style-noshow:yes;\r\n\tmso-style-parent:\"\";\r\n\tmso-padding-alt:0in 5.4pt 0in 5.4pt;\r\n\tmso-para-margin:0in;\r\n\tmso-para-margin-bottom:.0001pt;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:10.0pt;\r\n\tfont-family:\"Times New Roman\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-ansi-language:#0400;\r\n\tmso-fareast-language:#0400;\r\n\tmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]-->  <!--[if gte mso 9]><xml>\r\n <o:shapedefaults v:ext=\"edit\" spidmax=\"9218\"/>\r\n</xml><![endif]-->  <!--[if gte mso 9]><xml>\r\n <o:shapelayout v:ext=\"edit\">\r\n  <o:idmap v:ext=\"edit\" data=\"1\"/>\r\n </o:shapelayout></xml><![endif]--></head>\r\n\t<body bgcolor=\"#ddddff\" lang=\"EN-US\" link=\"blue\" vlink=\"blue\">\r\n\t\t<div class=\"Section1\">\r\n\t\t\t<p><b>Lab3: The Company Payroll</b></p>\r\n\t\t\t<p><b>Due Feb 3 (Friday) 11:59pm<o:p></o:p></b></p>\r\n\t\t\t<p><b><span style=\"COLOR: rgb(153,51,102)\">Zip all the </span>\r\n\t\t\t\t\t<i>\r\n\t\t\t\t\t\t<span style=\"COLOR: rgb(153,0,102)\">.</span>\r\n\t\t\t\t\t\t<span style=\"COLOR: red\">java</span></i>\r\n\t\t\t\t\t<span style=\"COLOR: rgb(153,51,102)\"> \r\n\t\t\tfile and a readme.txt file if necessary and submit the\r\n\t\t\tzip to EEE under folder Lab3!<o:p></o:p></span></b></p>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">Introduction</span></i></h2>\r\n\t\t\t\t<p>For this project, you will write a program that handles some relatively simple \r\n\t\t\t\t\tpayroll-processing tasks for a small business. While working on this project, \r\n\t\t\t\t\tyou will gain experience with inheritance and polymorphism, the use of the \r\n\t\t\t\t\tgeneric\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>\r\n\t\t\t\t\tclass in the Java library, enumerations, and using the console as well as files \r\n\t\t\t\t\tto read input and write formatted output. These skills will be relied upon \r\n\t\t\t\t\tthroughout the quarter in future projects, so it is very important to start \r\n\t\t\t\t\tearly and leave yourself plenty of time to get your questions answered and \r\n\t\t\t\t\tfinish the project.</p>\r\n\t\t\t\t<P>For this lab, you'll need to read the section 2.5.2 of chapter 2 which deals \r\n\t\t\t\t\twith generics.</P>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">The program</span></i></h2>\r\n\t\t\t\t<p>You should write a program which allows the user to manage payroll for a small \r\n\t\t\t\t\tcompany. In the <STRONG>first part</STRONG> of the assignment (which, however, \r\n\t\t\t\t\twe will not test), your program&nbsp;will presents a console-mode user \r\n\t\t\t\t\tinterface that will allow the user to enter and remove individual employees, \r\n\t\t\t\t\tlist them, and do a weekly payroll.&nbsp; In the <STRONG>second part</STRONG> of \r\n\t\t\t\t\tthe assignment (the only one we will test), your program will take the user's \r\n\t\t\t\t\tinput from a file instead of the console.</p>\r\n\t\t\t\t<P>\r\n\t\t\t\t\tThe payroll data consists of a list of employees. There are three kinds of \r\n\t\t\t\t\temployees: <i>hourly employees</i>, <i>salaried employees</i>, and <i>contract \r\n\t\t\t\t\t\temployees</i>. Each kind of employee has different characteristics, as \r\n\t\t\t\t\tdescribed a bit later in the write-up. At the end of each week, the program \r\n\t\t\t\t\twill be used to generate and display nicely-formatted paychecks for all of the \r\n\t\t\t\t\temployees of the company.</P>\r\n\t\t\t\t<P><STRONG>First version of your program (not graded):</STRONG></P>\r\n\t\t\t\t<p>The first version of your program should provide a console interface that \r\n\t\t\t\t\thandles the following commands from the user:</p>\r\n\t\t\t\t<ul type=\"disc\">\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<b>Add Employee</b>. Asks the user to specify the type of employee (hourly, \r\n\t\t\t\t\tsalaried, or contract) and all of the information that describes the employee. \r\n\t\t\t\t\t(Note that different kinds of employees are described by different information, \r\n\t\t\t\t\tsee below.)&nbsp; If the employee of that name already exists on the list, warn \r\n\t\t\t\t\tthe user and do not add the new employee (they better ask for the new person's \r\n\t\t\t\t\tmiddle name).&nbsp; If no employee with the matching name exists,&nbsp;the \r\n\t\t\t\t\tnewly-described employee is added to end of the employee list.\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<b>Remove Employee</b>\r\n\t\t\t\t\t. Asks the user to specify the name of the employee to remove. Goes through the \r\n\t\t\t\t\tlist of employees and removes an employee with a matching name.&nbsp; If no \r\n\t\t\t\t\tsuch employee exists, the user should be warned but the list of the employees \r\n\t\t\t\t\tstays unchanged.\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<b>Show Employees</b>. Prints the entire list of employees to the console, \r\n\t\t\t\t\tone employee per line. All relevant information about each employee is shown \r\n\t\t\t\t\t(i.e. name, type of employee, wage or salary).\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<b>Do Weekly Payroll</b>. For each employee in the list of employees, including \r\n\t\t\t\t\t\tthose who are not paid by the hour, the program asks the user to specify the \r\n\t\t\t\t\t\tnumber of hours worked this week. (It is necessary to include, on each \r\n\t\t\t\t\t\tpaycheck, an indication of the number of hours worked for all employees, \r\n\t\t\t\t\t\tregardless of whether their pay is determined by the number of hours they \r\n\t\t\t\t\t\tworked.) <i>After asking about all the employees,</i>\r\n\t\t\t\t\tthe program prints paychecks for each employee to the console, one after \r\n\t\t\t\t\tanother. Finally, the program prints the total gross pay and total tax for all \r\n\t\t\t\t\tof the employees.\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<b>Quit</b>. Exits the program.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<p>A message should be printed on the console regarding whether or not the command \r\n\t\t\t\t\tis executed successfully if necessary to make a friendly user interface. Such \r\n\t\t\t\t\tmessage could be \"The employee is successfully added!\" or \"file successfully \r\n\t\t\t\t\tread\".&nbsp; We provide a lot of code that helps you process this console input \r\n\t\t\t\t\t(see the link to the Zip file below), so almost all the code that you really \r\n\t\t\t\t\tneed to write to get this initial version of your program to run will be \r\n\t\t\t\t\treusable in the second version described&nbsp;below.\r\n\t\t\t\t</p>\r\n\t\t\t\t<P><STRONG>Second version of your program (this will be&nbsp;graded):</STRONG></P>\r\n\t\t\t\t<P>The second version of your program will not handle any user's commands from the \r\n\t\t\t\t\tconsole.&nbsp; Instead, one will call your program with a command like this:</P>\r\n\t\t\t\t<P><FONT face=\"Courier New\"><FONT size=\"2\"><SPAN class=\"GramE\">java</SPAN>&nbsp;Company \r\n\t\t\t\t\t\t\tinputfile.txt</FONT></FONT></P>\r\n\t\t\t\t<P><FONT face=\"Courier New\" size=\"2\">Y</FONT>our program should take all the input \r\n\t\t\t\t\tfrom the inputfile.txt file and process it from top to bottom as follows:&nbsp; \r\n\t\t\t\t\tThe file can specify exactly the same instructions (except of <STRONG>Quit</STRONG>) \r\n\t\t\t\t\twhich the user can specify above.&nbsp; In each case, the first line of the \r\n\t\t\t\t\tinput file specifies the command name, and the few subsequent lines specify all \r\n\t\t\t\t\tthe data that the user would input for such command.&nbsp; (The number of these \r\n\t\t\t\t\tlines differs for different commands.)&nbsp; For example, the inputfile.txt can \r\n\t\t\t\t\tinclude a block of lines as follows:</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">AddEmployee</SPAN></P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&lt;Employee_Name (string, \r\nwhich can include spaces)&gt;</SPAN></P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&lt;Employee_Type \r\n(string)&gt;</SPAN></P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&lt;Employee_<SPAN class=\"GramE\">HourlyPayment (</SPAN>if is hourly employee or Contract <SPAN class=\"SpellE\">emplyee</SPAN>) or <SPAN class=\"SpellE\">AnnualPayment</SPAN>(if is \r\nsalaried employee)(in dollars)&gt;</SPAN></P>\r\n\t\t\t\t<P>Your program, seeing such line in the inputfile.txt file, should trigger the \r\n\t\t\t\t\tsame procedure as the <STRONG>Add Employee</STRONG> command does above, and it \r\n\t\t\t\t\ttreats the data on the next three lines in the same way as this command \r\n\t\t\t\t\tdoes.&nbsp;\r\n\t\t\t\t</P>\r\n\t\t\t\t<P>The file can also specify that some employee should be removed from the list if \r\n\t\t\t\t\tit includes the following block of two lines:</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">RemoveEmployee</SPAN></P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&lt;Name_of_Employee_To_Be_Removed&gt;</SPAN></P>\r\n\t\t\t\t<P>Your program, on encountering such group of lines in the inputfile.txt should \r\n\t\t\t\t\tprocess it the same way as it processed the <B>Remove Employee</B> command \r\n\t\t\t\t\tabove.</P>\r\n\t\t\t\t<P>Also, the program can have a group of lines as follows:</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">WeeklyPayroll</SPAN></P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&lt;Name_of_1st_Employee&gt;</SPAN></P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&lt;Hour_worked_for_1st_Employee&gt;</SPAN></P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">...</SPAN></P>\r\n\t\t\t\t<SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">\r\n\t\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&lt;Name_of_<EM>n</EM>th_Employee&gt;</SPAN></P>\r\n\t\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&lt;Hour_worked_for_<EM><U>n</U></EM>th_Employee&gt;</SPAN></P>\r\n\t\t\t\t</SPAN>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">&nbsp;</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">Your program should handle it the way the first \r\n\t\t\t\t\tversion handled the <STRONG>Do Weekly Payroll </STRONG>command above.&nbsp; The \r\n\t\t\t\t\tline with the WeeklyPayroll string is assumed to be followed by n pairs of \r\n\t\t\t\t\tlines with names and hours of all the current employees in your list.&nbsp; In \r\n\t\t\t\t\tother words, if the current number of employees in your list is n, your program \r\n\t\t\t\t\tcan assume that there are n pairs of (name,hours) lines that follow.&nbsp; \r\n\t\t\t\t\tNote, however, that the <EM>order</EM> in which these employees are listed \r\n\t\t\t\t\tabove is <EM>not</EM> assumed to be the same as the order in which your \r\n\t\t\t\t\tapplication stores these employees.&nbsp; It might be convenient for you, \r\n\t\t\t\t\ttherefore, to create a temporary array storing these n (name,hour) pairs, and \r\n\t\t\t\t\tthen execute the <STRONG>Do Weekly Payroll</STRONG> procedure using the data in \r\n\t\t\t\t\tthis temporary array.</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">&nbsp;</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">Finally, if the inputfile.txt has the following \r\n\t\t\t\t\tline:</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">&nbsp;</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">ShowEmployees</SPAN><SPAN style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\"></P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\"></SPAN>&nbsp;</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">Your program should handle it the way the first \r\n\t\t\t\t\tversion handled the <STRONG>Show Employees </STRONG>\r\n\t\t\t\tcommand above.&nbsp;\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">An example of such file is given here:\r\n\t\t\t\t<a href=\"http://www.ics.uci.edu/~stasio/winter06/lab3/inputfile.txt\">\r\n\t\t\t\t\t\tinputfile.txt</a>\r\n\t\t\t\t.&nbsp; For simplicity, you can assume the input file is well written, i.e. you \r\n\t\t\t\tdon't need to worry about the exception handling for reading in file \r\n\t\t\t\tcontents.&nbsp; However, it'd be probably a smart thing if you choose to deal \r\n\t\t\t\twith (perhaps certain kinds of) errors in either the console input or the file \r\n\t\t\t\tinput anyway, just so that it might simplify debugging of your own code.\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">&nbsp;</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">The&nbsp;\r\n\t\t\t\t\t<span class=\"GramE\">main(</span>\r\n\t\t\t\t\t) method for the second version of your program (the only one we will grade) is \r\n\t\t\t\t\tdefined in a class called <b>Company</b> (which we provided in the zip file \r\n\t\t\t\t\tlinked below).&nbsp; You should not modify this Company class.&nbsp; As a \r\n\t\t\t\t\tresult, we should be able to compile and execute your program on amy input file \r\n\t\t\t\t\tinputfile.txt we choose with the following commands at the command prompt:</P>\r\n\t\t\t\t<P style=\"MARGIN: 0in 0in 0pt\">&nbsp;</P>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">javac</span></span> &lt;your_classes&gt;.java</pre>\r\n\t\t\t\t<PRE><span class=\"GramE\">java</span> Company inputfile.txt</PRE>\r\n\t\t\t\t<PRE style=\"TEXT-INDENT: 24pt\">&nbsp;</PRE>\r\n\t\t\t\t<PRE><DIV class=MsoNormal style=\"TEXT-ALIGN: center\" align=center><HR align=center width=\"100%\" SIZE=2></DIV></PRE>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">Kinds of employees</span></i></h2>\r\n\t\t\t\t<p>There are three kinds of employees that your program will be required to \r\n\t\t\t\t\tprocess: <i>hourly employees</i>, <i>salaried employees</i>, and <i>contract \r\n\t\t\t\t\t\temployees</i>. For our purposes, they differ in the following ways:</p>\r\n\t\t\t\t<ul type=\"disc\">\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\tHourly employees are paid an hourly wage (e.g. $9.50 per hour). They are paid \r\n\t\t\t\t\tthis wage for each of their first 40 hours worked in a week. If an hourly \r\n\t\t\t\t\temployee works more than 40 hours per week, the hours above 40 are paid at \r\n\t\t\t\t\t\"time and a half\" (i.e. 1.5 times their hourly wage). So, for example, at \r\n\t\t\t\t\t$10.00 per hour, if an hourly employee works 60 hours in a week, they are paid \r\n\t\t\t\t\t$10.00 per hour for each of the first 40 hours, plus $15.00 per hour for the 20 \r\n\t\t\t\t\tadditional hours, for a total of $700.00.\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\tSalaried employees are paid a fixed yearly salary (e.g. $75,000 per year)<span class=\"GramE\">,</span>\r\n\t\t\t\t\tregardless of the number of hours they work. Each week, they are paid 1/52 of \r\n\t\t\t\t\ttheir yearly salary. As an example, a salaried employee with an annual salary \r\n\t\t\t\t\tof $52,000 will be paid $1,000 per week.\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\tContract employees are paid an hourly rate (e.g. $30.00 per hour), but differ \r\n\t\t\t\t\t\tfrom hourly employees in that they are ineligible for overtime pay; all of \r\n\t\t\t\t\t\ttheir hours are paid at the same rate, regardless of how many hours they work \r\n\t\t\t\t\t\tin a week.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<p>One other way that the employees differ is how they are taxed: hourly and \r\n\t\t\t\t\tsalaried employees are assessed a 20% income tax, while contract employees are \r\n\t\t\t\t\tnot assessed any tax at all. The assumption here is somewhat like in the real \r\n\t\t\t\t\tworld: contract employees are not full-fledged employees of the company, so \r\n\t\t\t\t\tthey are required to handle their own taxes.</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">Starting point</span></i></h2>\r\n\t\t\t\t<p>I have provided quite a bit of code to get you started with this program, \r\n\t\t\t\t\tincluding some parts that I've provided in their entirety. The code is \r\n\t\t\t\t\tavailable in a<a href=\"http://www.ics.uci.edu/~stasio/winter06/lab3/Code.zip\"> Zip \r\n\t\t\t\t\t\tarchive</a>. Be sure you look through all of the code - and read all of the \r\n\t\t\t\t\tcomments! -\r\n\t\t\t\t\t<span class=\"GramE\">before</span>\r\n\t\t\t\t\tyou get started, so that you don't wind up having to duplicate work that I've \r\n\t\t\t\t\talready done for you.</p>\r\n\t\t\t\t<p>In general, you are required to build from what's been provided, rather than \r\n\t\t\t\t\tstarting from scratch. This gives you the advantage of having some of the more \r\n\t\t\t\t\ttedious portions done for you, so that you can focus your energies on the \r\n\t\t\t\t\tportions you'll learn the most from, while giving us the advantage of assuming \r\n\t\t\t\t\tthat all of the programs are built from a common base.</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">Using inheritance and polymorphism in your program</span></i></h2>\r\n\t\t\t\t<p>One of the most important programming habits you can adopt, if you haven't \r\n\t\t\t\t\talready, is the avoidance of duplicate code. By \"duplicate code,\" I mean having \r\n\t\t\t\t\tthe same code that does the same job for the same reason in more than one place \r\n\t\t\t\t\tin your program. Duplicate code is not only wasteful; it's also a recipe for \r\n\t\t\t\t\tdisaster. Suppose that, as you're developing a program, you copy and paste the \r\n\t\t\t\t\tsame code into ten different methods scattered throughout the program. Now \r\n\t\t\t\t\tsuppose that you find a bug in one of those ten methods, and that the bug \r\n\t\t\t\t\thappens to be in the part of the code that you copied. If you're fortunate, \r\n\t\t\t\t\tyou'll remember that you copied the code elsewhere. However, it's doubtful that \r\n\t\t\t\t\tyou'll remember not only that you copied the code, but also precisely how many \r\n\t\t\t\t\ttimes and where! If you're lucky, you'll find and fix the code in nine of the \r\n\t\t\t\t\tten places, but it's very likely that you'll miss at least one of them. It \r\n\t\t\t\t\tcould be months before you find out about the bug in the tenth place. By the \r\n\t\t\t\t\ttime you do, your understanding of the bug and how to fix it will be long since \r\n\t\t\t\t\tforgotten. Now imagine that this same scenario has played out over and over \r\n\t\t\t\t\tagain in the development of a very large program. Not surprisingly, one can \r\n\t\t\t\t\treasonably expect that the program will <i>never</i> be free from bugs.</p>\r\n\t\t\t\t<p>The moral of this story is that whenever you feel the urge to copy and paste a \r\n\t\t\t\t\tchunk of code, you should stop and think of a better way to solve the problem. \r\n\t\t\t\t\tIf you want to copy the same chunk of code into two methods within the same \r\n\t\t\t\t\tclass, put the code into a third method instead, then call that third method \r\n\t\t\t\t\tfrom the other two. If you want to copy the same chunk of code into more than \r\n\t\t\t\t\tone class, think about creating a third class to house the duplicate code. If \r\n\t\t\t\t\tsubstantial portions of two classes are similar, it might be time to think \r\n\t\t\t\t\tabout inheritance, with the third class being the\r\n\t\t\t\t\t<span class=\"SpellE\">superclass</span>\r\n\t\t\t\t\tof the other two.</p>\r\n\t\t\t\t<p>You will face this problem more than once while working on this program, as you \r\n\t\t\t\t\twould face it in virtually all programs of more than a few lines. One time you \r\n\t\t\t\t\twill face this problem is in your development of classes to represent each kind \r\n\t\t\t\t\tof employee. There are three kinds of employees in the program - hourly, \r\n\t\t\t\t\tsalaried, and contract - with some similarities and differences between them. \r\n\t\t\t\t\tThe similarities are:</p>\r\n\t\t\t\t<ul type=\"disc\">\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\tEach employee has a name.\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\tA paycheck can be calculated for each employee (though it will be calculated \r\n\t\t\t\t\tdifferently for each kind of employee).\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\tEach employee can be turned into a String, for the purposes of printing the \r\n\t\t\t\t\t\temployee's information to the console. Again, how an employee will be turned \r\n\t\t\t\t\t\tinto a String will depend on the kind of employee.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<p>The presence of these similarities argues very strongly for a\r\n\t\t\t\t\t<span class=\"SpellE\">superclass</span>\r\n\t\t\t\t\tcalled Employee, with subclasses for each specific kind of employee (hourly, \r\n\t\t\t\t\tsalaried, and contract). I've provided the Employee class for you (<i>which you are \r\n\t\t\t\t\t\tnot permitted to modify</i>), but you'll need to write the three \r\n\t\t\t\t\tsubclasses. The good news is that, in each subclass, you'll only need to write \r\n\t\t\t\t\tthe code that distinguishes a particular kind of employee from the others; the \r\n\t\t\t\t\tcode that describes the similarities between all employees will appear only \r\n\t\t\t\t\tonce, in the Employee class.</p>\r\n\t\t\t\t<p>There is much to be gained by using this approach other than just the obvious \r\n\t\t\t\t\tbenefit of code reuse. Additionally, it will simplify portions of the user \r\n\t\t\t\t\tinterface. Rather than maintaining a separate data structure for each kind of \r\n\t\t\t\t\temployee - one for all the hourly employees, one for all the salaried \r\n\t\t\t\t\temployees, and one for all the contract employees - we can have just one \r\n\t\t\t\t\tinstead, which stores all of the employees, regardless of their type. Then, \r\n\t\t\t\t\tthanks to polymorphism, when we print an employee's information or ask for a \r\n\t\t\t\t\tpaycheck to be calculated for an employee, the \"right thing\" will automatically \r\n\t\t\t\t\thappen, depending on what kind of employee it is.</p>\r\n\t\t\t\t<p>Inheritance and polymorphism are important techniques to use in a situation like \r\n\t\t\t\t\tthis one. You are required to define a separate class for each kind of \r\n\t\t\t\t\temployee, relate them together by extending them all from the provided Employee \r\n\t\t\t\t\tclass, and make use of polymorphism whenever it makes sense.</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">Using the generic <span class=\"SpellE\">ArrayList</span>\r\nclass</span></i></h2>\r\n\t\t\t\t<p>One of the key improvements in the latest version of Java is the inclusion of <i>generic \r\n\t\t\t\t\t\tclasses</i>. What makes a class \"generic\" is its ability to deal with \r\n\t\t\t\t\tdifferent kinds of objects in different parts of a program, but in each case to \r\n\t\t\t\t\tdeal with one kind of object specifically. For example, the\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>\r\n\t\t\t\t\tclass is generic. When using the generic version of\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>, you can specify the type of objects that \r\n\t\t\t\t\teach of your\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayLists</span>\r\n\t\t\t\t\twill be allowed to hold. For example, if you want to create an\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>\r\n\t\t\t\t\tof Strings, you would write the following code:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\">ArrayList</span>&lt;String&gt; a = new <span class=\"SpellE\">ArrayList</span>&lt;String<span class=\"GramE\">&gt;(</span>);</pre>\r\n\t\t\t\t<p>Two important benefits arise when you can specifically tell Java that you want \r\n\t\t\t\t\tan\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>&lt;String&gt;. First, whenever you \r\n\t\t\t\t\tattempt to add an object into an\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>&lt;String&gt;, the compiler will give an \r\n\t\t\t\t\terror message if you try to add one that isn't a String. In other words, an\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>&lt;String&gt; is guaranteed to have only \r\n\t\t\t\t\tStrings in it. Second, since an\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>&lt;String&gt; will only ever have Strings \r\n\t\t\t\t\tin it, Java will happily assume that any object you pull back out of the\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>\r\n\t\t\t\t\tis a String. (If you've used\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>\r\n\t\t\t\t\tbefore in a previous version of Java, you might remember needing to use casting \r\n\t\t\t\t\twhenever you accessed individual objects in the list. This is no longer \r\n\t\t\t\t\tnecessary and is, in fact, frowned upon in most situations.)</p>\r\n\t\t\t\t<p>Here's a quick example, following on from the one above:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// each call to <span class=\"GramE\">add(</span>) will add a String to the end of the list a</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">a.add</span></span><span class=\"GramE\">(</span>\"Mary\");</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">a.add</span></span><span class=\"GramE\">(</span>\"is\");</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">a.add</span></span><span class=\"GramE\">(</span>\"happy\");</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>String s = \"\";</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">for</span> (<span class=\"SpellE\">int</span> <span class=\"SpellE\">i</span> = 0; <span class=\"SpellE\">i</span> &lt; <span class=\"SpellE\">a.size</span>(); <span class=\"SpellE\">i</span>++)</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>{</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// retrieve the <span class=\"SpellE\">i-th</span> element from the list and append it to s</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>s += <span class=\"SpellE\"><span class=\"GramE\">a.get</span></span><span class=\"GramE\">(</span><span class=\"SpellE\">i</span>);</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>}</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// this will print \"<span class=\"SpellE\">Maryishappy</span>\" to the console</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\">System.out.println</span>(s);</pre>\r\n\t\t\t\t<p>The only\r\n\t\t\t\t\t<span class=\"SpellE\">ArrayList</span>\r\n\t\t\t\t\tmethods I used in my solution to this project were:</p>\r\n\t\t\t\t<ul type=\"disc\">\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<b>add(x)</b>: adds the object <i>x</i>\r\n\t\t\t\t\tto the end of the list\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<b>get(<span class=\"SpellE\">i</span>)</b>: returns the object in the list with \r\n\t\t\t\t\t\tindex\r\n\t\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t\t<i>i</i></span>; indices are consecutive, with the first object having \r\n\t\t\t\t\tthe index 0, just like in an array\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<b>remove(<span class=\"SpellE\">i</span>)</b>: removes the object from the list \r\n\t\t\t\t\t\twith index\r\n\t\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t\t<i>i</i></span>; subsequent objects are \"slid back\" one cell to fill \r\n\t\t\t\t\tthe empty space\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<b>size( )</b>: returns the number of objects in the list\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<p>You may wish to use others, though. If so, I recommend looking at the <a href=\"http://java.sun.com/j2se/5.0/docs/api/index.html\">\r\n\t\t\t\t\t\tJava library documentation</a> for more information. (It's best for you to \r\n\t\t\t\t\tbecome acquainted with the library documentation as soon as you can; you'll \r\n\t\t\t\t\tneed it more often as we move forward in this course, and especially after you \r\n\t\t\t\t\tmove on to later courses.)</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">Console/file input using the Scanner class</span></i></h2>\r\n\t\t\t\t<p>The Java library includes a class called Scanner that makes reading input from \r\n\t\t\t\t\tthe console (or other sources) a snap. A Scanner \"wraps around\" an input \r\n\t\t\t\t\tsource, such as the console or an input file. It can then read either one line \r\n\t\t\t\t\tor one value at a time from that input source.</p>\r\n\t\t\t\t<p>In this program, you'll want to read your input from the console. So, to set up \r\n\t\t\t\t\tyour Scanner, you'd write a line of code like this one:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// <span class=\"GramE\">Creates</span> a new Scanner wrapped around the console (<span class=\"SpellE\">System.in</span>).</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>Scanner s = new <span class=\"GramE\">Scanner(</span><span class=\"SpellE\">System.in</span>);</pre>\r\n\t\t\t\t<p>(It should be noted that I've already provided this line of code in the Payroll \r\n\t\t\t\t\tclass.) Once you've created your Scanner, there are many methods you can call \r\n\t\t\t\t\ton it, to read input of different types. I used these two in my solution:</p>\r\n\t\t\t\t<ul type=\"disc\">\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t\t<b>nextLine</b></span><b>( )</b>: reads the next line of input and \r\n\t\t\t\t\treturns it as a String\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t\t<b>nextInt</b></span><b>( )</b>: reads the next word of input (up to the \r\n\t\t\t\t\t\tnext space) and returns it as an\r\n\t\t\t\t\t\t<span class=\"SpellE\">int</span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<p>As an example, here's a fragment of Java code (following on from the one above) \r\n\t\t\t\t\tthat reads two integers (one per line) from the console, then prints their sum.</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">System.out.print</span></span><span class=\"GramE\">(</span>\"Enter first integer: \");</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// Read the next integer from the console.</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">int</span></span> i1 = <span class=\"SpellE\">s.nextInt</span>();</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><b>// Since <span class=\"SpellE\"><span class=\"GramE\">nextInt</span></span><span class=\"GramE\">(</span>) reads only up to the next space, not to the end of<o:p></o:p></b></pre>\r\n\t\t\t\t<pre><b><span >&nbsp;&nbsp;&nbsp; </span>// the line, adding a call to <span class=\"SpellE\"><span class=\"GramE\">nextLine</span></span><span class=\"GramE\">(</span>) after each call to <span class=\"SpellE\">nextInt</span>()<o:p></o:p></b></pre>\r\n\t\t\t\t<pre><b><span >&nbsp;&nbsp;&nbsp; </span>// is a good idea, to consume any leftover input on the line.</b></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">s.nextLine</span></span><span class=\"GramE\">(</span>);</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">System.out.print</span></span><span class=\"GramE\">(</span>\"Enter second integer: \");</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">int</span></span> i2 = <span class=\"SpellE\">s.nextInt</span>();</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">s.nextLine</span></span><span class=\"GramE\">(</span>);</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">int</span></span> sum = i1 + i2;</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">System.out.println</span></span><span class=\"GramE\">(</span>\"The sum is \" + sum);</pre>\r\n\t\t\t\t<p>As I did in the example, it's always a good idea to prompt the user and explain \r\n\t\t\t\t\twhat kind of input you're interested in. For this project, you will have to \r\n\t\t\t\t\tdeal with exceptions here.\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<span class=\"GramE\">nextInt</span>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t() throws an Input\r\n\t\t\t\t\t<span class=\"SpellE\">MismatchException</span>\r\n\t\t\t\t\twhen it tries to consume input that is not a number. If the exception is not \r\n\t\t\t\t\tcaught in the code, the compiler won't give\r\n\t\t\t\t\t<span class=\"GramE\">a</span>\r\n\t\t\t\t\terror saying there is an exception that should be caught. However, when you run \r\n\t\t\t\t\tthe program, and when the user types a string instead, the program will end \r\n\t\t\t\t\tunexpectedly. We <em>require</em> you to avoid this unexpectedness and handle \r\n\t\t\t\t\tit by \"try\" and \"catch\" somewhere.</p>\r\n\t\t\t\t<p>File input will be\r\n\t\t\t\t\t<span class=\"SpellE\">similiar</span>\r\n\t\t\t\t\tto the console input. The difference lies in when you initialize the Scanner. \r\n\t\t\t\t\tConsole input initializes the Scanner class using (<span class=\"SpellE\">System.in</span>) \r\n\t\t\t\t\tas parameter. However, for file input, we use a <em>File</em> type parameter. \r\n\t\t\t\t\tClass File is&nbsp;an abstract representation of file and directory pathnames. \r\n\t\t\t\t\tOne of the constructors of the File class is as follows:&nbsp;\r\n\t\t\t\t\t<span class=\"GramE\">File(</span><span style=\"COLOR: blue\">String</span>\r\n\t\t\t\t\tpathname). So we can create a File object using the following \r\n\t\t\t\t\tstatement&nbsp;for example:</p>\r\n\t\t\t\t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">File <span class=\"SpellE\">inputFile</span>\r\n= new <span class=\"GramE\">File(</span>\"input.txt\");</span></p>\r\n\t\t\t\t<p><span class=\"GramE\">This create</span>\r\n\t\t\t\t\ta new&nbsp;File object which opens a file&nbsp;in the working directory where \r\n\t\t\t\t\tyour java program runs, named \"input.txt\". Then we can use this as an input.</p>\r\n\t\t\t\t<p><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&nbsp;&nbsp;&nbsp; Scanner\r\nread = new Scanner (<span class=\"SpellE\">inputFile</span>);</span></p>\r\n\t\t\t\t<p>This statement initializes the scanner just as how the Scanner object is created \r\n\t\t\t\t\tfor the console input. We can combine the two statements together as follows \r\n\t\t\t\t\twhich what we did in the\r\n\t\t\t\t\t<span class=\"SpellE\">SavingCalculateTester</span>.</p>\r\n\t\t\t\t<p><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'\">&nbsp;&nbsp;&nbsp; Scanner\r\nread = new Scanner (new <span class=\"GramE\">File(</span>\"input.txt\"));</span><!--StartFragment --></p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">Formatted console output</span></i></h2>\r\n\t\t\t\t<p>In this program, you won't just be printing unformatted text to the console; \r\n\t\t\t\t\tyou'll also need to print integer values, right-justify monetary amounts, and \r\n\t\t\t\t\tso on. For example, when you want to print a paycheck to the console, you'll \r\n\t\t\t\t\tneed, first, to format it so that it looks nice. As an example, you might print \r\n\t\t\t\t\ta paycheck this way:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp; </span>Paycheck for John Doe (hourly, $26.50/hr)</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Hours Worked:<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>40</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Gross Pay:<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>$1,060.00</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Tax:<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>$212.00</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Net Pay:<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>$848.00</pre>\r\n\t\t\t\t<p>A clean way to do this is to first teach Paycheck objects how to format \r\n\t\t\t\t\tthemselves as Strings, then to print these Strings to the console using\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>System.out.print</b></span>\r\n\t\t\t\t\tor\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>System.out.println</b></span>. Java is set up to make this relatively \r\n\t\t\t\t\teasy. First, you must write the following method in the Paycheck class:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> String <span class=\"SpellE\">toString</span>()</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>{</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>}</pre>\r\n\t\t\t\t<p>Of course, the comment would need to be replaced with code that builds and \r\n\t\t\t\t\treturns a String representation of the Paycheck. Once that code is in place, if \r\n\t\t\t\t\tyou have a Paycheck object, you can print it directly to the console using\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>System.out.println</b></span>:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// <span class=\"GramE\">Assume</span> that p is created appropriately.</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>Paycheck p = ...;</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// <span class=\"GramE\">Whenever</span> you try to print an object to the console, Java</pre>\r\n\t\t\t\t<pre><span >&nbsp; </span><span >&nbsp;&nbsp;</span>// automatically calls <span class=\"SpellE\"><span class=\"GramE\">toString</span></span><span class=\"GramE\">(</span>) on it, then prints the result</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// to the console for you.</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">System.out.println</span></span><span class=\"GramE\">(</span>p);</pre>\r\n\t\t\t\t<p>What we need to be able to do, then, is to write the appropriate code in the\r\n\t\t\t\t\t<span class=\"SpellE\">toString</span>\r\n\t\t\t\t\t( ) method.</p>\r\n\t\t\t\t<p>Suppose that, instead of a paycheck, we want to print identifying information \r\n\t\t\t\t\tabout a person, formatted nicely. The\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>String.format</b></span>\r\n\t\t\t\t\t<b>( )</b> method helps; it knows how to take data of various types, format it \r\n\t\t\t\t\taccording to your specifications, and return it to you as a String. The first \r\n\t\t\t\t\tparameter you pass to it is called a <i>format string</i>, which is used to \r\n\t\t\t\t\ttell it how you'd like the data to be formatted, with placeholders for the \r\n\t\t\t\t\tdata. Subsequent parameters specify the data that will replace the \r\n\t\t\t\t\tplaceholders. Here's an example from a hypothetical Person class:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> String <span class=\"SpellE\">toString</span>()</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>{</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>String s = \"\";</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>s += <span class=\"SpellE\"><span class=\"GramE\">String.format</span></span><span class=\"GramE\">(</span>\"%-10s: %s\\n\", \"Name\", name);</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>s += <span class=\"SpellE\"><span class=\"GramE\">String.format</span></span><span class=\"GramE\">(</span>\"%-10s: %s\\n\", \"Title\", title);</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>s += <span class=\"SpellE\"><span class=\"GramE\">String.format</span></span><span class=\"GramE\">(</span>\"%-10s: %4d\\n\", \"Height\", height);</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>s += <span class=\"SpellE\"><span class=\"GramE\">String.format</span></span><span class=\"GramE\">(</span>\"%-10s: %4d\\n\", \"Weight\", weight);</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">return</span> s;</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>}</pre>\r\n\t\t\t\t<p>This code might generate the following output for a hypothetical person:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>Name<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>: John Doe</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>Title<span >&nbsp;&nbsp;&nbsp;&nbsp; </span>: CEO</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>Height<span >&nbsp;&nbsp;&nbsp; </span>:<span >&nbsp;&nbsp; </span>71</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>Weight<span >&nbsp;&nbsp;&nbsp; </span>:<span >&nbsp; </span>190</pre>\r\n\t\t\t\t<p>In the format string, each occurrence of the <b>%</b> character indicates a \r\n\t\t\t\t\tplaceholder for a piece of data. It is followed by a letter such as <b>s</b> (for \r\n\t\t\t\t\ta String) or <b>d</b> (for an integer), with an optional number in front of it \r\n\t\t\t\t\tthat indicates justification (a positive number means to right-justify, while a \r\n\t\t\t\t\tnegative number means to left-justify). In the example code above, you can see \r\n\t\t\t\t\tthe placeholder <b>%-10s</b>, which means to print a String left-justified \r\n\t\t\t\t\twithin 10 characters (i.e. with extra space added after it so that it fills up \r\n\t\t\t\t\tat least 10 characters). The placeholder <b>%4d</b> means to print an integer \r\n\t\t\t\t\tright-justified within 4 characters (i.e. with extra space added before it, if \r\n\t\t\t\t\tneeded). The placeholder <b>%s</b> simply means to print a String, with no \r\n\t\t\t\t\textra spaces added before or after it.</p>\r\n\t\t\t\t<p>If the format string has two placeholders in it, as in the example code above, \r\n\t\t\t\t\tyou'll need to supply it with two parameters that supply the data. For example, \r\n\t\t\t\t\tthis line:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>s += <span class=\"SpellE\"><span class=\"GramE\">String.format</span></span><span class=\"GramE\">(</span>\"%-10s: %4d\\n\", \"Height\", height);</pre>\r\n\t\t\t\t<p>...tells the method to left-justify the text \"Height\" within 10 characters, \r\n\t\t\t\t\tfollow that by a colon and a space, and follow that with the integer height \r\n\t\t\t\t\tright-justified within 4 characters. The <b>\\n</b> you see at the end of the \r\n\t\t\t\t\tformat string says to insert a\r\n\t\t\t\t\t<span class=\"SpellE\">newline</span>\r\n\t\t\t\t\tcharacter, so that subsequent characters will appear on the next line when the \r\n\t\t\t\t\tString is printed.</p>\r\n\t\t\t\t<p>This is a great tool that you can use to format your output to make it look \r\n\t\t\t\t\tnice; I expect you to use it. If you want to make your paychecks look just like \r\n\t\t\t\t\tthe example paycheck I showed, feel free; if not, that's okay, too, but you are \r\n\t\t\t\t\trequired to justify your output so that it can be read easily. A good rule of \r\n\t\t\t\t\tthumb is to right-justify the numbers so that they can easily be read from top \r\n\t\t\t\t\tto bottom.</p>\r\n\t\t\t\t<p>I provided a method\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>CurrencyFormat.format</b></span>\r\n\t\t\t\t\t<b>( )</b> that you can use to format an integer number of cents into a \r\n\t\t\t\t\tdollars-and-cents form with a dollar sign and decimal point. You'll be writing\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>toString</b></span>\r\n\t\t\t\t\t<b>( )</b> methods in the employee subclasses and Paycheck.</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">Enumerations</span></i></h2>\r\n\t\t\t\t<p>You may have encountered a situation in a prior Java course in which you needed \r\n\t\t\t\t\ta set of constants that were related to one another, such as the days of the \r\n\t\t\t\t\tweek. It's possible that you would have solved the problem by declaring a set \r\n\t\t\t\t\tof integer constants with unique values:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> static final <span class=\"SpellE\">int</span> SUNDAY = 1;</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> static final <span class=\"SpellE\">int</span> MONDAY = 2;</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> static final <span class=\"SpellE\">int</span> TUESDAY = 3;</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> static final <span class=\"SpellE\">int</span> WEDNESDAY = 4;</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> static final <span class=\"SpellE\">int</span> THURSDAY = 5;</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> static final <span class=\"SpellE\">int</span> FRIDAY = 6;</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> static final <span class=\"SpellE\">int</span> SATURDAY = 7;</pre>\r\n\t\t\t\t<p>There are two problems with this approach. One is that the numeric values often \r\n\t\t\t\t\thave no actual relevance in the program, other than the fact that they need to \r\n\t\t\t\t\tbe unique; there's no good reason that SUNDAY couldn't be 0 (or 4,000) instead. \r\n\t\t\t\t\tAnother - and this one is a lot more important! - is that any time you want to \r\n\t\t\t\t\tdeclare a variable or parameter to store a \"day of week\" value, you have to \r\n\t\t\t\t\tdeclare it to be of type <b>int</b>. This is not only counterintuitive, but \r\n\t\t\t\t\talso opens up the very real possibility that the variable might eventually wind \r\n\t\t\t\t\tup with a value other than one in the range 1..7, which could grind the program \r\n\t\t\t\t\tto a halt if there isn't a lot of tedious error-checking code throughout.</p>\r\n\t\t\t\t<p>A better way to solve this problem that is available in Java 5.0 is to use an <i>enumeration</i>. \r\n\t\t\t\t\tIn its simplest form, an enumeration can be thought of as precisely a solution \r\n\t\t\t\t\tto this problem: a way of expressing that a set of named constants is related \r\n\t\t\t\t\tto one another. Rather than declaring them as separate constants of some \r\n\t\t\t\t\texisting data type such as\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>int</b></span>, they can be put together in an enumeration and become a \r\n\t\t\t\t\tnew type of data. For example:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">public</span> <span class=\"SpellE\">enum</span> <span class=\"SpellE\">DayOfWeek</span></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>{</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>SUNDAY,</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>MONDAY,</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TUESDAY,</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>WEDNESDAY,</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>THURSDAY,</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>FRIDAY,</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>SATURDAY</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>}</pre>\r\n\t\t\t\t<p>(If you think that the numeric values from before are necessary for some reason, \r\n\t\t\t\t\tthat's no problem; they can be included if you wish. In fact, the values don't \r\n\t\t\t\t\teven necessarily have to be integers. But when they are only used to \r\n\t\t\t\t\tdifferentiate between the constants, they should not be included.)</p>\r\n\t\t\t\t<p>Once you've declared this enumeration, it becomes possible to have variables of \r\n\t\t\t\t\ttype\r\n\t\t\t\t\t<span class=\"SpellE\">DayOfWeek</span>, which will only be allowed to have one \r\n\t\t\t\t\tof the seven constant values listed above (or null). For example:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// One of the constants can be directly assigned into a <span class=\"SpellE\">DayOfWeek</span>.</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\">DayOfWeek</span> d = <span class=\"SpellE\">DayOfWeek.SUNDAY</span>;</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// A <span class=\"SpellE\">DayOfWeek</span> can be a return value from a method.</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\">DayOfWeek</span> d2 = <span class=\"SpellE\"><span class=\"GramE\">getCurrentDayOfWeek</span></span><span class=\"GramE\">(</span>);</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// <span class=\"GramE\">We</span> can use <span class=\"SpellE\">DayOfWeek</span> constants in comparisons, too!</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">if</span> (d2 == <span class=\"SpellE\">DayOfWeek.MONDAY</span>)</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>{</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">System.out.println</span></span><span class=\"GramE\">(</span>\"Just another manic Monday.\");</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>}</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// <span class=\"GramE\">We</span> can even use them in switch statements.<span >&nbsp; </span>It's important to note that</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// when used in a switch statement, you aren't supposed to qualify the</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// names of the constants by putting \"<span class=\"SpellE\">DayOfWeek</span>.\" in front of them.<span >&nbsp; </span>Go</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>// figure.</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">switch</span> (d2)</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>{</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">case</span> MONDAY:</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">System.out.println</span></span><span class=\"GramE\">(</span>\"Just another manic Monday.\");</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">break</span>;</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">case</span> FRIDAY:</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">System.out.println</span></span><span class=\"GramE\">(</span>\"Everybody's <span class=\"SpellE\">workin</span>' for the weekend.\");</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">break</span>;</pre>\r\n\t\t\t\t<pre><o:p>&nbsp;</o:p></pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">default</span>:</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">System.out.println</span></span><span class=\"GramE\">(</span>\"Some days are better than others.\");</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=\"GramE\">break</span>;</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>}</pre>\r\n\t\t\t\t<p>I've provided you with an enumeration called\r\n\t\t\t\t\t<span class=\"SpellE\">PayrollCommand</span>, which is a set of all of the \r\n\t\t\t\t\tcommands that can be executed by the user. You won't need to define an \r\n\t\t\t\t\tenumeration in this assignment, but you will need to manipulate\r\n\t\t\t\t\t<span class=\"SpellE\">PayrollCommand</span>\r\n\t\t\t\t\tvariables from time to time. The examples above, as well as the code I provided \r\n\t\t\t\t\tin the starting point, demonstrate everything you'll need to know.</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">Dealing with money properly</span></i></h2>\r\n\t\t\t\t<p>You'll probably notice that the methods that manipulate monetary amounts (e.g. \r\n\t\t\t\t\tthe\r\n\t\t\t\t\t<span class=\"GramE\">format(</span>\r\n\t\t\t\t\t) method in the\r\n\t\t\t\t\t<span class=\"SpellE\">CurrencyFormat</span>\r\n\t\t\t\t\tclass) expect them to be stored as\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>int</b></span>\r\n\t\t\t\t\tvalues. Your program is expected to be capable of dealing with money accurately \r\n\t\t\t\t\tto the cent, which might make you wonder why I haven't used <b>double</b> values \r\n\t\t\t\t\tinstead.</p>\r\n\t\t\t\t<p>As far as our payroll program is concerned, cents are indivisible. In other \r\n\t\t\t\t\twords, an employee will never be paid or taxed a fraction of a cent. The \r\n\t\t\t\t\tprimary problem with <b>double</b> values is that they may be\r\n\t\t\t\t\t<span class=\"GramE\">inaccurate,</span>\r\n\t\t\t\t\tbecause of the way computers store floating-point numbers (i.e. numbers with \r\n\t\t\t\t\tfractional parts). Through simple arithmetic, a small amount of error, such as \r\n\t\t\t\t\t0.0000001, can easily be introduced into a calculation, which becomes a \r\n\t\t\t\t\tnightmare to deal with when cents are meant to be indivisible.</p>\r\n\t\t\t\t<p><span class=\"GramE\">So, rather than representing money using <b>double</b> values, your\r\nprogram should use <span class=\"SpellE\"><b>int</b></span> values, representing\r\nnumbers of cents.</span>\r\n\t\t\t\t\tFor example, if an employee's hourly wage is $17.54, it should be stored as the\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>int</b></span>\r\n\t\t\t\t\tvalue 1754. The\r\n\t\t\t\t\t<span class=\"SpellE\">CurrencyFormat</span>\r\n\t\t\t\t\tclass that I provided can be used to take care of formatting this value so that \r\n\t\t\t\t\tit will appear as $17.54 when it's time to print it out to the console.</p>\r\n\t\t\t\t<p><STRONG><EM>[paragraph corrected 2/1/06:]</EM>&nbsp; </STRONG>It's up to you to \r\n\t\t\t\t\tdecide in what format the user will input the salary amount of the added \r\n\t\t\t\t\temployee <EM>in the console-input version of your program</EM>.&nbsp; E.g. the \r\n\t\t\t\t\tuser can enter the salary in cents (an integer value) or dollars (a float or \r\n\t\t\t\t\tdouble).&nbsp; However, <EM>in the file-input version of the program</EM>, i.e. \r\n\t\t\t\t\twhere all inputs are taken from the file input, we expect that the salary \r\n\t\t\t\t\tamounts of the added employees are expressed in dollars, i.e. they can have a \r\n\t\t\t\t\tdecimal point.&nbsp; See the specification above of the input format in the \r\n\t\t\t\t\t\"AddEmployee\" part of the description of how the input file should be handled, \r\n\t\t\t\t\tand the inputfile.txt file attached there as an example.&nbsp; In particular, \r\n\t\t\t\t\tthe input salary is expected to look like 20.50, 20, or 20.00, without any \r\n\t\t\t\t\tdollar signs.&nbsp; Note that you can read the input as a double value first, \r\n\t\t\t\t\tand then use appropriate arithmetic manipulation, including rounding (because \r\n\t\t\t\t\te.g. value .01 when read as a double can be represented as .0999999...9 or \r\n\t\t\t\t\t.01000...01, and you do not know which one it will be...), and casting to \r\n\t\t\t\t\tconvert this value read from the input to the integer representing the salary \r\n\t\t\t\t\tin cents, which is the representation we suggest you should use throughout your \r\n\t\t\t\t\tprogram. Check the <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Double.html\">\r\n\t\t\t\t\tDouble Class</a> description for some helpful methods for converting a string to a double.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t<P>When calculating tax amounts and payment amounts, use integer division whenever \r\n\t\t\t\t\tdivision is required,\r\n\t\t\t\t\t<span class=\"GramE\">which will always round the amount down\r\nwhen the result has a fraction of a cent.</span></P>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2><i><span style=\"COLOR: purple\">What to do about compiler warnings</span></i></h2>\r\n\t\t\t\t<p>When you compile your program from the command line, you may see the following \r\n\t\t\t\t\toutput:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>Note: <span class=\"SpellE\">Blah.java</span> uses unchecked or unsafe operations.</pre>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span>Note: Recompile with -<span class=\"SpellE\">Xlint<span class=\"GramE\">:unchecked</span></span> for details.</pre>\r\n\t\t\t\t<p>This is not something that you should ignore. It usually means that you're not \r\n\t\t\t\t\tusing generics appropriately. Most often, it means that at least one use of a \r\n\t\t\t\t\tgeneric class hasn't been given a type parameter (e.g. somewhere, you've said\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>ArrayList</b></span>\r\n\t\t\t\t\tinstead of\r\n\t\t\t\t\t<span class=\"SpellE\">\r\n\t\t\t\t\t\t<b>ArrayList</b></span><b>&lt;String&gt;</b>). As far as we're concerned in \r\n\t\t\t\t\tthis course, this is as serious as a compile-time error and needs to be fixed. \r\n\t\t\t\t\tTo find out more about what the specific problems are, recompile your program \r\n\t\t\t\t\twith this command:</p>\r\n\t\t\t\t<pre><span >&nbsp;&nbsp;&nbsp; </span><span class=\"SpellE\"><span class=\"GramE\">javac</span></span> -<span class=\"SpellE\">Xlint:unchecked</span> *.java</pre>\r\n\t\t\t\t<p>If you're still not sure what do to after seeing the warnings, feel free to ask \r\n\t\t\t\t\tus.</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"MsoNormal\" style=\"TEXT-ALIGN: center\" align=\"center\">\r\n\t\t\t\t\t<hr align=\"center\" size=\"2\" width=\"100%\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<ul type=\"disc\">\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\tChanges are made to handle input from a file, by Xiaomin Liu and Stanislaw \r\n\t\t\t\t\tJarecki, Winter 2006.&nbsp;\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\tA couple of changes introduced and some rewording done by Alex Thornton, Fall \r\n\t\t\t\t\t2005.\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\tA few very minor changes introduced by Alex Thornton,\r\n\t\t\t\t\t\t<span class=\"GramE\">Spring</span>\r\n\t\t\t\t\t2005.\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\tBrief section about compile-time warnings added by Alex Thornton,\r\n\t\t\t\t\t\t<span class=\"GramE\">Winter</span>\r\n\t\t\t\t\t2005.\r\n\t\t\t\t\t<li class=\"MsoNormal\">\r\n\t\t\t\t\t\tOriginally written by Alex Thornton, with a few portions adapted from \"Running \r\n\t\t\t\t\t\ton Empty\" and \"Scenes from an Italian Restaurant\" (also written by Alex \r\n\t\t\t\t\t\tThornton), Fall 2004.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</body>\r\n</html>\r\n", "encoding": "ascii"}