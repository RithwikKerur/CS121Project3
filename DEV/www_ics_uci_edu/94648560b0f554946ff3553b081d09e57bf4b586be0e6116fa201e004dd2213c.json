{"url": "https://www.ics.uci.edu/~eppstein/projects/pairs/Methods/", "content": "<HTML><HEAD><TITLE>Closest Pair Methods</TITLE>\n<!--#config timefmt=\"%d %h %Y, %T %Z\" -->\n</HEAD><BODY FGCOLOR=#000000 BGCOLOR=#FFFFFF>\n<H1><A HREF=\"../\">Closest Pair Data Structures</A>:\nMethods</H1>\n\nWe have designed, analyzed, and implemented several different closest\npair data structures.  See the <A HREF=\"../Papers/\">papers</A>\nor <A HREF=\"../Source/\">source code</A> for more detail.\nWe analyze the times in terms of two parameters:\n<I>n</I>, the number of objects in the set, and\nQ, the time per operation to perform insertions,\ndeletions, and nearest neighbor queries in a dynamic set of objects.\nOur implementations use trivial nearest neighbor searching\n(just examine the distances to each objects), for which Q=O(<I>n</I>).\n\n<P>Previously known were:\n\n<UL>\n<P><LI><B>Brute force</B>. This simply maintains a list of objects,\nand finds closest pairs by examining all pairs of objects.\nInsertions and deletions are easy, and space is linear, but queries take\ntime O(<I>n</I>Q) each.\n\n<P><LI><B>Neighbor heuristic</B>. We store the nearest neighbor to each object.\nEach insertion takes linear time, but deletions require recomputing neighbors\nfor any object having the deleted object as its neighbor, and may take\nas much as O(<I>n</I>Q) time.\nSpace is linear.  In many <A HREF=\"../Applications/\">applications</A>,\ndeleted objects are unlikely to have high degree, and the empirically\nobserved time per operation is linear or close to linear.\n\n<P><LI><B>Priority queue</B> (not implemented).\nWe store a priority queue data structure (such as a binary heap)\ncontaining all the entries in the distance matrix.\nSpace is quadratic, but worst case time per update is\nO(<I>n</I>&nbsp;log&nbsp;<I>n</I>).\n</UL>\n\nNew closest pair data structures:\n\n<UL>\n<P><LI><B>Quadtree</B>.  We group the entries of the adjacency matrix\ninto 2x2 squares, compute the maximum in each square, interpret these\nmaxima as the distances for a smaller set of <I>n</I>/2 objects,\nand continue recursively.  Space is quadratic, but the worst-case time\nper operation is linear (optimal unless one assumes some further knowledge\nabout the distance function).  This would be the likely method of choice\nfor relatively few objects with very expensive distance computations.\n\n<P><LI><B>Conga line</B>. We partition the objects into\nO(log&nbsp;<I>n</I>) subsets and maintain a graph in each subset,\nsuch that the closest pair is guaranteed to correspond to an edge in the\ngraph.  Each insertion creates a new subset for the new object;\neach deletion may move an object from each existing subset to a new subset.\nIn each case, if necessary some pair of subsets is merged\nto maintain the desired number of subsets.\nAmortized time per insertion is O(Q&nbsp;log&nbsp;<I>n</I>);\namortized time per deletion is O(Q&nbsp;log<sup>2</sup>&nbsp;<I>n</I>).\nSpace is linear.\n\n<P><LI><B>MultiConga</B>.  This is a simplification of the conga line\ndata structure in which we allow the number of subsets to grow\narbitrarily, and never merge pairs of subsets.\nThe time per insertion is O(Q); amortized time per deletion is\nO(Q&nbsp;sqrt&nbsp;<I>n</I>). In practice this is faster than conga lines\nby a factor of three or more, usually roughly comparible to the neighbor\nheuristic, and fast even for problems that cause the neighbor heuristic\nto blow up.\n\n<P><LI><B>FastPair</B>.  We further simplify conga lines by\nmaking separate singleton subsets for the objects moved to new subsets\nby a deletion.  This can alternately be viewed as a modification to the\nneighbor heuristic, in which the initial construction of all nearest\nneighbors is replaced by a conga line computation, and in which each insertion\ndoes not update previously computed neighbors.\nIts time both theoretically and in practice is qualitatively similar\nto the neighbor heuristic, but it typically runs 30% or so faster.\n</UL>\n\n<P><HR>\n<A HREF=\"/~eppstein/\">David Eppstein,\n<A HREF=\"/\">Information & Computer Science</A>,\n<A HREF=\"http://www.uci.edu/\">UC Irvine</A>,\n<!--#flastmod file=\"index.html\" -->.\n</BODY></HTML>\n", "encoding": "ascii"}