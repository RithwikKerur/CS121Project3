{"url": "https://www.ics.uci.edu/~thornton/inf102/LabManual/Assignment3/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>Informatics 102 Spring 2012, Assignment #3: Concurrent Programming in Erlang</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nInformatics 102 Spring 2012 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../LabManual\">Lab Manual</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>Informatics 102 Spring 2012<br />\n   Assignment #3: <i>Concurrent Programming in Erlang</i></p>\n   \n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Wednesday, May 16, 11:59pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>Erlang is a functional programming language that has direct, built-in support for <i>concurrency</i> &mdash; the ability to perform more than one task simultaneously on a machine &mdash; and <i>distribution</i> &mdash; the ability to perform cooperating tasks on multiple machines.  In an era of networked, multicore computers, concurrency and distribution are becoming increasingly important.  While Erlang doesn't do anything so special that it can't be done in other languages, it clearly demonstrates the difference between a language that allows you to build infrastructure that supports concurrency and distribution (like Java) and one that has this infrastructure built in.</p>\n\n<p>This assignment gives you experience with both sequential and concurrent programming in Erlang, though it will focus on the concurrent aspects, using the sequential problems as a warm up to familiarize you with Erlang syntax and semantics.  Whether you've previously written concurrent programs in other languages, such as Java, it's likely that your experience with Erlang will feel different than anything you've done before.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">How do I learn Erlang?</p>\n\n<p>I presume that most of you are new to the Erlang programming language.  As with any new programming language, there are two hurdles to cross: the syntax hurdle &mdash; how do I say what I want to say? &mdash; and the semantic hurdle &mdash; what should I want to say in the first place?  Erlang encourages (and, in fact, requires) you to think differently about programming than Java does, so the semantic hurdle will actually be a little bit tougher, though you will be able to rely on your previous experience with functional languages like Scheme and Haskell, as Erlang has features familiar from each.  Our goal here is not to become immediate experts, but to experience the aspects of Erlang that are new and interesting, relative to the things we've done before; this new experience will make us better software writers than we were, even if we never see Erlang again.</p>\n\n<p>To get you started, I've written up a <a href=\"../ErlangTutorial.html\">tutorial</a> that describes the subset of Erlang that we discussed in lecture, along with instructions on using Erlang in the ICS labs and installing Erlang on your computer.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Part 1: Sequential Erlang programming (30 points)</p>\n\n<p>In a module named <b>part1</b>, in a file named <b>part1.erl</b>, write and export the following six functions.  You will likely need to write helper functions for some of these, but you should not export any of them.</p>\n\n<p>You are not permitted to use the <b>if</b> or <b>case</b> expressions (which we didn't cover in lecture).  Use pattern matching instead.  It's important, when learning a new language, not to write only using the idioms you know from other languages; to get the most out of the experience, you'll want use the idioms, like pattern matching, that are appropriate in the new language.</p>\n\n<ul>\n  <li><b>fib(N)</b>, which calculates the Nth Fibonacci number.  Use tail recursion, rather than the non-tail-recursive form shown in the <b>mymath</b> module in the <a href=\"../ErlangTutorial.html\">Erlang tutorial</a>.  Your solution should run in <i>O</i>(N) time, given the parameter N.  Examples:\n    <ul>\n      <li>fib(0) &rarr; 0</li>\n      <li>fib(6) &rarr; 8</li>\n      <li>fib(40) &rarr; 102334155</li>\n    </ul>\n  </li>\n  <li><b>adjacent_duplicates(L)</b>, which takes a list and returns a list containing only the elements that have an <i>adjacent duplicate</i> (i.e., all elements E such that the element following E is identical to E).  Do not use any of the functions in the predefined <b>lists</b> module.  Examples:\n    <ul>\n      <li>adjacent_duplicates([1, 1, 2, 2, 3, 3]) &rarr; [1, 2, 3]</li>\n      <li>adjacent_duplicates([1, 2, 2, 2, 3]) &rarr; [2, 2]</li>\n      <li>adjacent_duplicates([1, 2, 3, 4]) &rarr; []</li>\n      <li>adjacent_duplicates([1, 2, 3, 2, 1]) &rarr; []</li>\n    </ul>\n  </li>\n  <li><b>deep_sum(L)</b>, which takes a possibly nested list of tuples, each containing two numbers, and returns the sum of all the numbers in the list.  Use any of the functions in the predefined <b>lists</b> module that you find useful.  Examples:\n    <ul>\n      <li>deep_sum([{1, 2}, {3, 4}]) &rarr; 10</li>\n      <li>deep_sum([{1, 2}, [{2, 3}, {3, 4}], {4, 5}]) &rarr; 24</li>\n      <li>deep_sum([[[{1, 2}, {3, 4}], {3, 4}], {4, 5}, [{5, 6}, {6, 7}]]) &rarr; 50</li>\n      <li>deep_sum([]) &rarr; 0</li>\n    </ul>\n  </li>\n  <li><b>concatenate_all(L)</b>, which takes a list of strings and \"flattens\" them into one long string.  Use any of the functions in the predefined <b>lists</b> module that you find useful.  Examples:\n    <ul>\n      <li>concatenate_all([\"Alex\", \"is\", \"happy\"]) &rarr; \"Alexishappy\"</li>\n      <li>concatenate_all([\"Time\", \"\", \" \", \"the \", \"Conquerer\"]) &rarr; \"Time the Conquerer\"</li>\n    </ul>\n  </li>\n  <li><b>perimeter(Shape)</b>, which takes a tuple describing a shape and returns the perimeter of that shape.  The tuple will be in one of the following forms:\n    <ul>\n      <li><b>{circle, Radius}</b></li>\n      <li><b>{rectangle, Width, Height}</b></li>\n      <li><b>{right_triangle, Width, Height, Hypot}</b></li>\n    </ul>\n    If the given argument is not a tuple in one of these forms, the function should fail.  Examples:\n    <ul>\n      <li>perimeter({circle, 3}) &rarr; 18.8495592153876</li>\n      <li>perimeter({rectangle, 5, 7}) &rarr; 24</li>\n      <li>perimeter({right_triangle, 3, 4, 5}) &rarr; 12</li>\n    </ul>\n  </li>\n  <li><b>permutations(L)</b>, which takes a list L and returns a list containing all of the permutations of L.  Use any of the functions in the predefined <b>lists</b> module that you find useful.  It's fine for your output to be in a different order from ours, so long as all of the permutations are included.  Examples:\n    <ul>\n      <li>permutations([1, 2, 3]) &rarr; [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</li>\n      <li>permutations([1]) &rarr; [[1]]</li>\n      <li>permutations([]) &rarr; []</li>\n    </ul>\n  </li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Part 2: Processes and message passing (40 points)</p>\n\n<p>Write a module named <b>dictionary_server</b>, whose job is to implement a process that maintains a <i>dictionary</i> (i.e., a collection of <i>key/value</i> pairs).  Keys should remain unique in the dictionary, though the values are not required to be.  It should export only the following functions.</p>\n\n<ul>\n  <li><b>start/0</b>.  Starts the dictionary server process.  If there is already a dictionary server running, this function should fail, but it's not important what error it returns.</li>\n  <li><b>stop/0</b>.  Stops the dictionary server process, if it's running.  If there is no dictionary server process running, this function has no effect.</li>\n  <li><b>insert/2</b>.  Takes two parameters, a key and a value, and adds the given key and its value to the dictionary.  If the given key is already in the dictionary, the new value should replace the old value in the dictionary.  This function returns <b>ok</b> after its work is done.</li>\n  <li><b>remove/1</b>.  Takes one parameter, a key, and removes the given key from the dictionary if it's present.  This function returns <b>ok</b> if the key was removed successfully, or <b>notfound</b> if the key was not in the dictionary.</li>\n  <li><b>lookup/1</b>.  Takes one parameter, a key, and finds the corresponding value in the dictionary.  If the key is in the dictionary, this function returns the tuple <b>{ok, Value}</b>, where <b>Value</b> is the value associated with the key.  If the key is not in the dictionary, this function returns <b>notfound</b>.</li>\n  <li><b>clear/0</b>.  Clears all keys and values out of the dictionary.</li>\n  <li><b>size/0</b>.  Returns an integer specifying the number of keys in the dictionary.</li>\n</ul>\n\n<p>You're permitted to write any additional non-exported functions that you need, though you are required to export all, and only, the functions described above.</p>\n\n<p>You will need to use message passing to make this work, though users of the dictionary server will never need to send or receive messages explicitly and, thus, won't need to know the format of those messages; instead, all message passing will take place within your module.  The reason that you'll need to send and receive messages is that the caller of, say, the <b>insert/2</b> function will be a different process than the dictionary server process; the only way for these processes to exchange information is to pass messages back and forth.  You'll need to decide what the messages should look like, what information is important to carry in them, and how they should be handled.</p>\n\n<p>An important consequence of our design is that we're not requiring users of our dictionary server to know its pid.  (This is actually a good thing, in the sense that it makes our dictionary server easier to use; the downside of this design approach is that we can't have more than one dictionary server running at a time.  Still, there are lots of practical systems where you only want one of a particular server to be running, so this is a surprisingly common practice in Erlang.)  This means that you'll need to use process registration to give the process a name, so that this name can be used throughout your module and the pid will never need to be used once registered.</p>\n\n<p>One thing to remember is that you'll need to process messages recursively, one at a time, since Erlang has no looping construct.  Remember, too, that it's important that you process messages <i>tail recursively</i>, so that the dictionary server could potentially run forever without running out of stack space.  Tail recursion in server processes isn't just a nice performance optimization; it's absolutely critical.</p>\n\n<p>When you're done with this part, you'll have what we called, in lecture, an <i>actor</i>.  Actors are a lot like objects in object-oriented languages like Java, except that they run concurrently with other actors (and other Erlang processes), but can only themselves do one thing at a time.  This is one model of concurrent programming that's gaining at least some traction in software design circles; it's not a panacea, but it's a nice solution to some kinds of problems.</p>\n\n<p class=\"subtitle\">An extra efficiency challenge (optional)</p>\n\n<p>You are not required to build your dictionary using an efficient data structure &mdash; a list is fine &mdash; but you're welcome to build something better, like a binary search tree, if you'd like.</p>\n\n<p>If you want to try building a binary search tree, one way to do it is to represent it as a tuple whose first element is the atom <b>bst</b>.  The second element can be either the atom <b>empty</b>, if the tree is empty, or a three-element tuple containing the root of the tree (a two-element tuple containing a key and a value), the left subtree, and the right subtree.  So an example binary search tree, whose root contains the key 20 and the value \"X\" and has a right subtree containing only a node with the key 30 and the value \"Y\" and no children, might look like this:</p>\n\n<pre>\n    <b>{bst, {{20, \"X\"}, {bst, empty}, {bst, {{30, \"Y\"}, {bst, empty}, {bst, empty}}}}}.</b>\n</pre>\n\n<p>Additionally, I'd suggest building your binary search tree in a separate module called <b>bst</b>, separating that concern from the concern of building your dictionary server.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Part 3: Using the MapReduce algorithm (30 points)</p>\n\n<p>In lecture, we implemented the MapReduce algorithm in Erlang.  MapReduce is an algorithm that asks concurrent or distributed tasks &mdash; in Erlang, these tasks are Erlang processes &mdash; to perform some portion of a large job, then collects and combines the intermediate results into one final result.  MapReduce can be very efficient if the processes can genuinely run\nconcurrently (e.g., there are enough processors to run all of the processes,\nor the processes are distributed on different machines, a scenario that\nErlang supports natively), so long as the time spent sending the messages and\ncombining the results is not prohibitive, relative to the time that the individual processes spend doing their work.</p>\n\n<p>In this part of the assignment, you are required to take the MapReduce implementation from lecture, which you'll find (along with an deeper explanation of the algorithm) in the <a href=\"../../CodeExamples\">Code Examples</a> section of the course web site, and apply it to a new problem.  Do not make modifications to the MapReduce algorithm that was provided; the only goal here is to learn how to apply MapReduce to a different kind of problem than was demonstrated in the example.</p>\n\n<p>For this part of the assignment, you'll write two modules:</p>\n\n<ul>\n  <li>A module named <b>integers_list</b>, which implements a server process similar to the <b>counterprocess</b> server in the MapReduce code example, except that its job is to remember a list of integers provided to it when it starts up, and to provide the ability to filter those integers using a \"filter fun.\"  As in the <b>counterprocess</b> module, the <b>integers_list</b> module should export two functions:\n    <ul>\n      <li><b>start/1</b>, which spawns a new integers_list server process and returns its pid.  The argument is the list of integers that it should remember while it runs.  (Note that there is no way to change the list of integers once the process is spawned.)</li>\n      <li><b>stop/1</b>, which takes the pid of an integers_list server process and tells it to stop, waiting for a response to confirm it really did stop.</li>\n    </ul>\n  and otherwise should contain a <b>run</b> function that comprises the server's tail-recursive server loop.</li>\n  <li>A module named <b>integer_finder</b>, which exports the following function:\n    <ul>\n      <li><b>find_integers/2</b>, which takes two parameters:\n        <ol>\n          <li>A list of pids corresponding to integers_list processes.</li>\n          <li>A \"filter fun\" that takes an integer and returns either true or false.  This could be a fun answering any arbitrary yes/no question about an integer (e.g., return whether the integer is positive, return whether the integer is odd, return whether the integer ends in the digit 9, and so on).</li>\n        </ol>\n        The find_integers function should use the provided MapReduce implementation to find and return a list of all the integers in all the integers_lists for which the filter fun returns true.  The returned integers should be sorted in ascending order, as opposed to just returned in whatever order the integers_lists return them.</li>\n    </ul>\n  </li>\n</ul>\n\n<p>The <b>integer_finder</b> module should hide all of the details of how the MapReduce algorithm is being used (e.g., what message should be sent to the <b>integers_list</b> processes, what the response messages will look like, what the initial result should be, etc.).</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>Submit all of the <b>.erl</b> files that comprise each part of the assignment.  Do not submit <b>.beam</b> files or any other files.</p>\n\n<p>Follow <a href=\"../SubmittingAssignments.html\">this link</a> for a discussion of how to submit your assignment via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the assignment that you want graded.  We won't regrade an assignment simply because you submitted the wrong version by accident.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Some commentary, a few miscellaneous tweaks, and a slight reorienting of Part 3 by Alex Thornton, Spring 2012.</li>\n  <li>Originally written by Alex Thornton, Winter 2009.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}