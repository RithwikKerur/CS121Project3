{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node33.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Terminology</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Terminology\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html2641 HREF=\"node34.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html2639 HREF=\"umsroot.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html2633 HREF=\"node32.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html2643 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html2642 HREF=\"node34.html\"> Getting started with  </A>\r\n<B>Up:</B> <A NAME=tex2html2640 HREF=\"umsroot.html\">No Title</A>\r\n<B> Previous:</B> <A NAME=tex2html2634 HREF=\"node32.html\"> Reporting Problems</A>\r\n<BR> <HR> <P>\r\n<H1><A NAME=SECTION00300000000000000000> Terminology</A></H1>\r\n<P>\r\n<A NAME=terminology>&#160;</A>\r\n<A NAME=chapterm>&#160;</A>\r\n<P>\r\nThis chapter defines the terminology which is used throughout the manual and\r\nin related documentation.\r\n<P>\r\n<DL >\r\n<DT><b> +X</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=230>&#160;</A>\r\nThis denotes an input argument. Such an argument must be instantiated before \r\na built-in is called.\r\n<P>\r\n\r\n<DT><b> <b>-</b>X</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=232>&#160;</A>\r\nThis denotes an output argument. Such an argument must be not \r\ninstantiated before a built-in is called.\r\n<P>\r\n\r\n<DT><b> ?X</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=234>&#160;</A>\r\nThis denotes an input or an output argument. Such an argument may be either \r\ninstantiated or not  when a built-in is called.\r\n<P>\r\n\r\n<DT><b> Array</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=236>&#160;</A>\r\nAn array specification is a compound term the form Name(Dim_1,...,Dim_n),\r\nwhere Name is the array name, the arity denotes the number of dimensions and \r\nthe arguments are integers indicating the size in each dimension.\r\nAn array element is selected with a similar term.\r\n<P>\r\n\r\n<DT><b> Arity</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=238>&#160;</A>\r\nArity is the number of arguments to a term.\r\nAtoms are considered as functors with zero arity.\r\nThe notation <i> Name/Arity</i> is used to specify a functor of name \r\n<i> Name</i> with arity <i> Arity</i>.\r\n<A NAME=242>&#160;</A>\r\n<P>\r\n\r\n<DT><b> Atom</b>\r\n<DD> <BR>\r\n<P>\r\nAn arbitrary name chosen by the user to represent objects from the \r\nproblem domain.\r\nA Prolog <i> atom</i> corresponds to an identifier in other languages.\r\n<A NAME=245>&#160;</A>\r\n<P>\r\n\r\n<DT><b> Atomic</b>\r\n<DD> <BR>\r\n<P>\r\nAn atom, string or a number. A terms which does not contain other terms.\r\n<A NAME=247>&#160;</A>\r\n<P>\r\n\r\n<DT><b> Body</b>\r\n<DD> <BR>\r\n<P>\r\nA clause <i> body</i> can either be of the form\r\n<PRE>Goal_1, Goal_2, ..., Goal_k\r\n</PRE>\r\nand the clause is called a <i> regular clause</i>, or only\r\n<A NAME=251>&#160;</A>\r\n<PRE>Goal\r\n</PRE>\r\nand then the clause is an <i> iterative clause</i>;\r\n<A NAME=253>&#160;</A>\r\neach <i> Goal_i</i> must be  a callable term.\r\n<P>\r\n\r\n<DT><b> Built-in Procedures</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=256>&#160;</A>\r\nThese are predicates provided for the user by the\r\n<A NAME=tex2html81 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  system, they are either written in Prolog or in the implementation\r\nlanguage (usually ``C'').\r\n<P>\r\n\r\n<DT><b> Clause</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=258>&#160;</A>\r\nSee program clause or goal.\r\n<P>\r\n\r\n<DT><b> Callable Term</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=260>&#160;</A>\r\nA <i> callable term</i> is either a compound term or an atom.\r\n<P>\r\n\r\n<DT><b> Compound Term</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=263>&#160;</A>\r\nCompound terms are of the form\r\n<PRE>f(t_1, t_2, ..., t_n)\r\n</PRE>\r\nwhere <i> f</i> is the <i> functor</i> of the compound term\r\n<A NAME=266>&#160;</A>\r\nand <i> t_i</i> are terms, n is its arity. Lists and Pairs are also \r\ncompound terms.\r\n<P>\r\n\r\n<DT><b> DID</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=269>&#160;</A>\r\nEach atom created within <A NAME=tex2html87 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  is assigned a unique\r\nidentifier called the <i> dictionary identifier</i> or <i> DID</i>.\r\n<P>\r\n\r\n<DT><b> Difference List</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=273>&#160;</A>\r\nA difference list is a special kind of a list.\r\nInstead of being ended by <i> nil</i>, a difference list\r\nhas an uninstantiated tail so that new elements\r\ncan be appended to it in constant time.\r\nA difference list is written as <i> List - Tail</i>\r\nwhere <i> List</i> is the beginning of the list and <i> Tail</i>\r\nis its uninstantiated tail.\r\nPrograms that use difference lists are usually more efficient\r\nand always much less readable than programs without them.\r\n<P>\r\n\r\n<DT><b> Dynamic Procedures</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=279>&#160;</A>\r\nThese are procedures which can be modified clause-wise, by adding or removing \r\none clause at a time. Note that this class of procedure is equivalent to \r\ninterpreted procedures in other Prolog systems. See also <i> static \r\nprocedures</i>.\r\n<P>\r\n\r\n<DT><b> ElemSpec</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=282>&#160;</A>\r\nAn <i> ElemSpec</i> specifies a global variable (an atom) or an array\r\nelement (a ground compound term with as much arguments (integers) as\r\nthe number of dimensions of the array).\r\n<P>\r\n\r\n<DT><b> External Procedures</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=285>&#160;</A>\r\nThese are procedures which are defined in a language\r\nother than Prolog, and explicitly connected to Prolog predicates by the user.\r\n<P>\r\n\r\n<DT><b> Fact</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=287>&#160;</A>\r\n<A NAME=288>&#160;</A>\r\nA fact or <i> unit clause</i> is a term of the form:\r\n<PRE>Head.\r\n</PRE>\r\n<A NAME=290>&#160;</A>\r\nwhere <i> Head</i> is a structure or an atom.\r\n<A NAME=292>&#160;</A>\r\nA fact may be considered to be a rule whose body is always <i> true</i>.\r\n<P>\r\n\r\n<DT><b> Functor</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=295>&#160;</A>\r\nA functor is characterised by its name which is an atom, and its arity\r\nwhich is its number of arguments.\r\n<P>\r\n\r\n<DT><b> Goal Clause</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=297>&#160;</A>\r\n<A NAME=298>&#160;</A>\r\nSee <i> query</i>.\r\n<P>\r\n\r\n<DT><b> Ground</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=301>&#160;</A>\r\nA term is ground when it does not contain any uninstantiated variables.\r\n<P>\r\n\r\n<DT><b> Head</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=303>&#160;</A>\r\nA head is a structure or an atom.\r\n<P>\r\n\r\n<DT><b> Instantiated</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=305>&#160;</A>\r\nA variable is instantiated when it has been bound to an atomic or a \r\ncompound term as opposed to \r\nbeing <i> uninstantiated</i> or <i> free</i>.  See also <i> ground</i>.\r\n<P>\r\n\r\n<DT><b> List</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=310>&#160;</A>\r\nA list is a special type of term within Prolog. It is a \r\nrecursive data structure consisting of <i> pairs</i> (whose tails are lists).\r\nA <tt> list</tt> is either the atom <tt> []</tt> called <tt> nil</tt> as in LISP,\r\nor a pair whose tail is a list.\r\nThe notation :\r\n<PRE>[a , b , c]\r\n</PRE>\r\nis shorthand for:\r\n<PRE>[a | [b | [c | []]]]\r\n</PRE>\r\n<A NAME=315>&#160;</A>\r\n<A NAME=316>&#160;</A>\r\n<P>\r\n\r\n<DT><b> Name/Arity</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=318>&#160;</A>\r\nThe notation <tt> Name/Arity</tt> is used to specify a functor of name \r\n<b> Name</b> with arity <b> Arity</b>.\r\n<P>\r\n\r\n<DT><b> Pair</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=323>&#160;</A>\r\nA pair is a compound term with the functor <tt> ./2</tt> (<tt> dot</tt>)\r\nwhich is written as :\r\n<PRE>[H|T]\r\n</PRE>\r\n<tt> H</tt> is the <tt> head</tt> of the pair and <tt> T</tt> its <tt> tail</tt>.\r\n<A NAME=330>&#160;</A>\r\n<A NAME=331>&#160;</A>\r\n<P>\r\n\r\n<P>\r\n<DT><b> Predicate</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=333>&#160;</A>\r\nA predicate is another term for a <i> procedure</i>.\r\n<P>\r\n\r\n<DT><b> PredSpec</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=336>&#160;</A>\r\nThis is similar to the notation <tt> Name/Arity</tt>.\r\nSome built-ins allow the arity to be omitted and to specify\r\n<tt> Name</tt> only.\r\nThis stands for all (visible) predicates with that name and any arity.\r\n<P>\r\n\r\n<DT><b> Program Clause</b>\r\n<DD> <BR>\r\n<P>\r\nA <i> program clause</i> or <i> clause</i> is either the term\r\n<A NAME=342>&#160;</A>\r\n<A NAME=343>&#160;</A>\r\n<A NAME=344>&#160;</A>\r\n<PRE>Head :- Body.\r\n</PRE>\r\n<A NAME=345>&#160;</A>\r\ni.e. a compound term with the functor <i> :-/2</i>, or only a fact.\r\n<P>\r\n\r\n<DT><b> Query</b>\r\n<DD> <BR>\r\n<P>\r\nA query  has the same form as <i> Body</i> \t\r\nand is also called a <i> goal</i>.\r\n<A NAME=350>&#160;</A>\r\nSuch clauses occur mainly as input to the top level Prolog loop\r\nand in files being compiled, then they have the form\r\n<PRE>:- Goal_1, ..., Goal_k.\r\n</PRE>\r\nor\r\n<PRE>?- Goal_1, ..., Goal_k.\r\n</PRE>\r\n<P>\r\n\r\n<DT><b> Regular Prolog Procedure</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=352>&#160;</A>\r\nA <i> regular (Prolog) procedure</i> is a sequence of user clauses whose heads\r\nhave the same functor, which then identifies the user procedure.\r\n<P>\r\n\r\n<DT><b> Simple Procedures</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=355>&#160;</A>\r\nApart from regular procedures <A NAME=tex2html118 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  recognises <i> simple procedures</i>\r\nwhich are written not in Prolog but in the implementation language, i.e. C\r\nand which are deterministic.\r\nThere is a functor associated with each\r\nsimple procedure, so that\r\nany procedure recognisable by <A NAME=tex2html119 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  is identified by a functor,\r\n<A NAME=357>&#160;</A>\r\nor a compound term with this functor (or atom).\r\n<P>\r\n\r\n<DT><b> SpecList</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=359>&#160;</A>\r\nThe SpecList notation means a sequence of terms of the form:\r\n<PRE>name_1/a_1, name_2/a_2, ..., name_k/a_k.\r\n</PRE>\r\nThe SpecList notation is used in many built-ins, for example, \r\nto specify a list of procedures in the <b> global/1</b> predicate.\r\n<P>\r\n\r\n<DT><b> Static Procedures</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=362>&#160;</A>\r\nThese are procedures which can only be changed as a whole unit, i.e. removed or \r\nreplaced.\r\n<P>\r\n\r\n<DT><b> Stream</b>\r\n<DD> <BR>\r\n<P>\r\n<A NAME=364>&#160;</A>\r\nThis is an I/O channel identifier and can be a physical stream number, one of \r\nthe reserved stream identifiers or a user defined stream name (defined using\r\n<b> set_stream/2</b> or <b> open/3</b>). \r\n<A NAME=367>&#160;</A>\r\n<A NAME=368>&#160;</A> \r\nThe reserved stream identifiers are:\r\n<PRE>input, output, error, toplevel_input, toplevel_output, \r\nanswer_output, debug_input, debug_output, user, null,\r\nstdin, stdout, stderr.\r\n</PRE>\r\n<P>\r\n\r\n<DT><b> Structures</b>\r\n<DD> <BR>\r\n<P>\r\nCompound terms which are not pairs are also called <i> structures</i>.\r\n<A NAME=371>&#160;</A>\r\n<P>\r\n\r\n<DT><b> Term</b>\r\n<DD> <BR>\r\n<P>\r\nA <i> term</i> is the basic data type in Prolog.\r\n<A NAME=374>&#160;</A>\r\nIt is either a <i> variable</i>, a <i> constant</i>,\r\ni.e. an <i> atom</i>, a <i> number</i> or a <i> string</i>,\r\n<A NAME=380>&#160;</A>\r\n<A NAME=381>&#160;</A>\r\nor a <i> compound term</i>.\r\n<P>\r\n\r\n<P>\r\n </DL>\r\n<P>\r\nThe notation <b> Pred/N1, N2</b> is often used in this documentation\r\nas a shorthand for <b> Pred/N1, Pred/N2</b>.\r\n<P>\r\n<BR> <HR><A NAME=tex2html2641 HREF=\"node34.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html2639 HREF=\"umsroot.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html2633 HREF=\"node32.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html2643 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html2642 HREF=\"node34.html\"> Getting started with  </A>\r\n<B>Up:</B> <A NAME=tex2html2640 HREF=\"umsroot.html\">No Title</A>\r\n<B> Previous:</B> <A NAME=tex2html2634 HREF=\"node32.html\"> Reporting Problems</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}