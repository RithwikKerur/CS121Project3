{"url": "https://www.ics.uci.edu/~theory/269/100212.html", "content": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>Theory Seminar, February 12, 2010</title>\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"/~theory/logo/shortTheory.gif\" width=\"\n521\" height=\"82\" border=\"0\" alt=\"ICS Theory Group\"></a>\n<h2> February 12, Winter Quarter 2010: Theory Seminar </h2>\n<h3>1:00pm in 1423 Bren Hall</h3>\n<h1> \nDeletion Without Rebalancing in Balanced Binary Trees\n</h1>\n<h2> Kiran Shivaram, UC Irvine </h2>\n\n<p>\nPresenting results in a paper by Siddhartha Sen and Robert E.\nTarjan from SODA10.\n\n<p>\nAbstract: \nWe address the vexing issue of deletions in balanced trees.\nRebalancing after a deletion is generally more complicated than\nrebalancing after an insertion. Textbooks neglect deletion\nrebalancing, and many database systems do not do it. We describe a\nrelaxation of AVL trees in which rebalancing is done after insertions\nbut not after deletions, yet access time remains logarithmic in the\nnumber of insertions. For many applications of balanced trees, our\nstructure offers performance competitive with that of classical\nbalanced trees. With the addition of periodic rebuilding, the\nperformance of our structure is theoretically superior to that of\nmany if not all classic balanced tree structures. Our structure needs\nO(log log m) bits of balance information per node, where m\nis the number of insertions, or O(log log n) with periodic\nrebuilding, where n is the number of nodes. An insertion takes up to\ntwo rotations and O(1) amortized time. Using an analysis that relies\non an exponential potential function, we show that rebalancing steps\noccur with a frequency that is exponentially small in the height of\nthe affected node.\n</body>\n</html>\n", "encoding": "ascii"}