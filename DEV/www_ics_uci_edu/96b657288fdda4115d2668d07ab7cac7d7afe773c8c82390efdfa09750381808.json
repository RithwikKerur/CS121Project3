{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/doc/overview/sift.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n <head>\n  <!-- IE Standards Mode -->\n  <meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"></meta>\n\n  <!-- Favicon -->\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"icon\"></link>\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"shortcut icon\"></link>\n\n  <!-- Page title -->\n  <title>VLFeat - Tutorials > SIFT detector and descriptor</title>\n\n  <!-- Stylesheets -->\n  <link href=\"../vlfeat.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <link href=\"../pygmentize.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <style xml:space=\"preserve\">\n    /* fixes a conflict between Pygmentize and MathJax */\n    .MathJax .mo, .MathJax .mi {color: inherit ! important}\n  </style>\n  \n\n  <!-- Scripts-->\n  \n\n  <!-- MathJax -->\n  <script xml:space=\"preserve\" type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true,\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n        by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers: { autoNumber: 'AMS' }\n      }\n    });\n  </script>\n  <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" xml:space=\"preserve\" type=\"text/javascript\"></script>\n\n  <!-- Google Custom Search -->\n  <script xml:space=\"preserve\">\n    (function() {\n    var cx = '003215582122030917471:oq23albfeam';\n    var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n    gcse.src = (document.location.protocol == 'https' ? 'https:' : 'http:') +\n    '//www.google.com/cse/cse.js?cx=' + cx;\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n    })();\n  </script>\n\n  <!-- Google Analytics -->\n  <script xml:space=\"preserve\" type=\"text/javascript\">\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-4936091-2']);\n    _gaq.push(['_trackPageview']);\n    (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    })();\n  </script>\n </head>\n\n <!-- Body Start -->\n <body>\n  <div id=\"header-section\">\n    <div id=\"header\">\n      <!-- Google CSE Search Box -->\n      <div class=\"searchbox\">\n        <gcse:searchbox-only autoCompleteMaxCompletions=\"5\" autoCompleteMatchType=\"any\" resultsUrl=\"http://www.vlfeat.org/search.html\"></gcse:searchbox-only>\n      </div>\n      <h1 id=\"id-16\"><a shape=\"rect\" href=\"../index.html\" class=\"plain\"><span id=\"vlfeat\">VLFeat</span><span id=\"dotorg\">.org</span></a></h1>\n    </div>\n    <div id=\"sidebar\"> <!-- Navigation Start -->\n      <ul>\n<li><a href=\"../index.html\">Home</a>\n<ul>\n<li><a href=\"../about.html\">About</a>\n</li>\n<li><a href=\"../license.html\">License</a>\n</li>\n</ul></li>\n<li><a href=\"../download.html\">Download</a>\n<ul>\n<li><a href=\"../install-matlab.html\">Using from MATLAB</a>\n</li>\n<li><a href=\"../install-octave.html\">Using from Octave</a>\n</li>\n<li><a href=\"../install-shell.html\">Using from the command line</a>\n</li>\n<li><a href=\"../install-c.html\">Using from C</a>\n<ul>\n<li><a href=\"../xcode.html\">Xcode</a>\n</li>\n<li><a href=\"../vsexpress.html\">Visual C++</a>\n</li>\n<li><a href=\"../gcc.html\">g++</a>\n</li>\n</ul></li>\n<li><a href=\"../compiling.html\">Compiling</a>\n<ul>\n<li><a href=\"../compiling-unix.html\">Compiling on UNIX-like platforms</a>\n</li>\n<li><a href=\"../compiling-windows.html\">Compiling on Windows</a>\n</li>\n</ul></li>\n</ul></li>\n<li class='active'><a href=\"tut.html\">Tutorials</a>\n<ul>\n<li><a href=\"frame.html\">Local feature frames</a>\n</li>\n<li><a href=\"covdet.html\">Covariant feature detectors</a>\n</li>\n<li><a href=\"hog.html\">HOG features</a>\n</li>\n<li class='active' class='activeLeaf'><a href=\"sift.html\">SIFT detector and descriptor</a>\n</li>\n<li><a href=\"dsift.html\">Dense SIFT</a>\n</li>\n<li><a href=\"liop.html\">LIOP local descriptor</a>\n</li>\n<li><a href=\"mser.html\">MSER feature detector</a>\n</li>\n<li><a href=\"imdisttf.html\">Distance transform</a>\n</li>\n<li><a href=\"encodings.html\">Fisher Vector and VLAD</a>\n</li>\n<li><a href=\"gmm.html\">Gaussian Mixture Models</a>\n</li>\n<li><a href=\"kmeans.html\">K-means clustering</a>\n</li>\n<li><a href=\"aib.html\">Agglomerative Infromation Bottleneck</a>\n</li>\n<li><a href=\"quickshift.html\">Quick shift superpixels</a>\n</li>\n<li><a href=\"slic.html\">SLIC superpixels</a>\n</li>\n<li><a href=\"svm.html#tut.svm\">Support Vector Machines (SVMs)</a>\n</li>\n<li><a href=\"kdtree.html\">KD-trees and forests</a>\n</li>\n<li><a href=\"plots-rank.html\">Plotting AP and ROC curves</a>\n</li>\n<li><a href=\"utils.html\">Miscellaneous utilities</a>\n</li>\n<li><a href=\"ikm.html\">Integer K-means</a>\n</li>\n<li><a href=\"hikm.html\">Hierarchical integer k-means</a>\n</li>\n</ul></li>\n<li><a href=\"../applications/apps.html\">Applications</a>\n</li>\n<li><a href=\"../doc.html\">Documentation</a>\n<ul>\n<li><a href=\"../matlab/matlab.html\">MATLAB API</a>\n</li>\n<li><a href=\"../api/index.html\">C API</a>\n</li>\n<li><a href=\"../man/man.html\">Man pages</a>\n<ul>\n<li><a href=\"../man/mser.html\">mser</a>\n</li>\n<li><a href=\"../man/sift.html\">sift</a>\n</li>\n<li><a href=\"../man/vlfeat.html\">vlfeat</a>\n</li>\n</ul></li>\n</ul></li>\n</ul>\n\n    </div> <!-- sidebar -->\n  </div>\n  <div id=\"headbanner-section\">\n    <div id=\"headbanner\">\n      <span class='page'><a href=\"tut.html\">Tutorials</a></span><span class='separator'>></span><span class='page'><a href=\"sift.html\">SIFT detector and descriptor</a></span>\n    </div>\n  </div>\n  <div id=\"content-section\">\n    <div id=\"content-wrapper\">\n      <div id=\"content\">\n        \n    \n\n<div class='toc'>\n<h3>Table of Contents</h3><ul><li class=\"level1\"><a href=\"#tut.sift.extract\">Extracting frames and descriptors</a></li>\n<li class=\"level1\"><a href=\"#tut.sift.match\">Basic matching</a></li>\n<li class=\"level1\"><a href=\"#tut.sift.param\">Detector parameters</a></li>\n<li class=\"level1\"><a href=\"#tut.sift.custom\">Custom frames</a></li>\n<li class=\"level1\"><a href=\"#tut.sift.conventions\">Conventions</a></li>\n<li class=\"level1\"><a href=\"#tut.sift.ubc\">Comparison with D. Lowe's SIFT</a></li>\n</ul>\n</div><!-- Table of contents -->\n\n\n<p>The <a shape=\"rect\" href=\"dox:sift;\"><em>Scale-Invariant Feature Transform\n(SIFT)</em></a> bundles a feature detector and a feature\ndescriptor. The detector extracts from an image a number of frames\n(attributed regions) in a way which is consistent with (some)\nvariations of the illumination, viewpoint and other viewing\nconditions. The descriptor associates to the regions a signature which\nidentifies their appearance compactly and robustly. For a more\nin-depth description of the algorithm, see our\n<a shape=\"rect\" href=\"../api/sift_8h.html\">API reference for SIFT</a>.</p>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.sift.extract\">Extracting frames and descriptors</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>Both the detector and descriptor are accessible by\nthe <code/><a href=../matlab/vl_sift.html>vl_sift</a></code> MATLAB command (there is a similar command\nline utility). Open MATLAB and load a test image</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">I</span> <span class=\"p\">=</span> <span class=\"n\">vl_impattern</span><span class=\"p\">(</span><span class=\"s\">&#39;roofs1&#39;</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">image</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"figure\">\n <img src=\"../demo/sift_basic_0.jpg\"></img>\n <div class=\"caption\">\n  <span class=\"content\">\n   Input image.\n  </span>\n </div>\n</div>\n\n<p>The <code/><a href=../matlab/vl_sift.html>vl_sift</a></code> command requires a single precision gray\nscale image. It also expects the range to be normalized in the [0,255]\ninterval (while this is not strictly required, the default values of\nsome internal thresholds are tuned for this case). The image\n<code/>I</code> is converted in the appropriate format by</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">I</span> <span class=\"p\">=</span> <span class=\"n\">single</span><span class=\"p\">(</span><span class=\"n\">rgb2gray</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">))</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>We compute the SIFT frames (keypoints) and descriptors by</p>\n\n<div class=\"highlight\"><pre><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_sift</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>The matrix <code/>f</code> has a column for each frame. A frame is a\ndisk of center <code/>f(1:2)</code>, scale <code/>f(3)</code> and\norientation <code/>f(4)</code> . We visualize a random selection of 50\nfeatures by:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">perm</span> <span class=\"p\">=</span> <span class=\"n\">randperm</span><span class=\"p\">(</span><span class=\"nb\">size</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">;</span>\n<span class=\"n\">sel</span> <span class=\"p\">=</span> <span class=\"n\">perm</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">h1</span> <span class=\"p\">=</span> <span class=\"n\">vl_plotframe</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(:,</span><span class=\"n\">sel</span><span class=\"p\">))</span> <span class=\"p\">;</span>\n<span class=\"n\">h2</span> <span class=\"p\">=</span> <span class=\"n\">vl_plotframe</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(:,</span><span class=\"n\">sel</span><span class=\"p\">))</span> <span class=\"p\">;</span>\n<span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"p\">,</span><span class=\"s\">&#39;color&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;k&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;linewidth&#39;</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">h2</span><span class=\"p\">,</span><span class=\"s\">&#39;color&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;y&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;linewidth&#39;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"figure\">\n <img src=\"../demo/sift_basic_2.jpg\"></img>\n <div class=\"caption\">\n  Some of the detected SIFT frames.\n </div>\n</div>\n\n<p>We can also overlay the descriptors by</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">h3</span> <span class=\"p\">=</span> <span class=\"n\">vl_plotsiftdescriptor</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">(:,</span><span class=\"n\">sel</span><span class=\"p\">),</span><span class=\"n\">f</span><span class=\"p\">(:,</span><span class=\"n\">sel</span><span class=\"p\">))</span> <span class=\"p\">;</span>\n<span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">h3</span><span class=\"p\">,</span><span class=\"s\">&#39;color&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;g&#39;</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"figure\">\n <img src=\"../demo/sift_basic_3.jpg\"></img>\n <div class=\"caption\">\n  A test image for the peak threshold parameter.\n </div>\n</div>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.sift.match\">Basic matching</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>SIFT descriptors are often used find similar regions in two\nimages. <code/><a href=../matlab/vl_ubcmatch.html>vl_ubcmatch</a></code> implements a basic matching\nalgorithm. Let <code/>Ia</code> and <code/>Ib</code> be images of the\nsame object or scene. We extract and match the descriptors by:\n</p>\n\n<div class=\"highlight\"><pre><span class=\"p\">[</span><span class=\"n\">fa</span><span class=\"p\">,</span> <span class=\"n\">da</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_sift</span><span class=\"p\">(</span><span class=\"n\">Ia</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"p\">[</span><span class=\"n\">fb</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_sift</span><span class=\"p\">(</span><span class=\"n\">Ib</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"p\">[</span><span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">scores</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_ubcmatch</span><span class=\"p\">(</span><span class=\"n\">da</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"figure\">\n <img src=\"../demo/sift_match_1.jpg\"></img>\n <img src=\"../demo/sift_match_2.jpg\"></img>\n <div class=\"caption\">\n  Top: A pair of images of the same scene. Bottom: Matching of SIFT\n  descriptors with <code/><a href=../matlab/vl_ubcmatch.html>vl_ubcmatch</a></code>.\n </div>\n</div>\n\n<p>\nFor each descriptor in <code/>da</code>, <code/><a href=../matlab/vl_ubcmatch.html>vl_ubcmatch</a></code> finds\nthe closest descriptor in <code/>db</code> (as measured by the L2 norm\nof the difference between them). The index of the original match and\nthe closest descriptor is stored in each column of\n<code/>matches</code> and the distance between the pair is stored in\n<code/>scores</code>.\n</p>\n\n<p>\nMatches also can be filtered for uniqueness by passing a third\nparameter to <code/><a href=../matlab/vl_ubcmatch.html>vl_ubcmatch</a></code> which specifies a threshold.\nHere, the uniqueness of a pair is measured as the ratio of the\ndistance between the best matching keypoint and the distance to the\nsecond best one (see <code/><a href=../matlab/vl_ubcmatch.html>vl_ubcmatch</a></code> for further details).\n</p>\n\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.sift.param\">Detector parameters</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>The SIFT detector is controlled mainly by two parameters: the peak\n threshold and the (non) edge threshold.</p>\n\n\n<p>The <em>peak threshold</em> filters peaks of the DoG scale space\n  that are too small (in absolute value). For instance, consider a\n  test image of 2D Gaussian blobs:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">I</span> <span class=\"p\">=</span> <span class=\"n\">double</span><span class=\"p\">(</span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">500</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span><span class=\"p\">=</span> <span class=\"p\">.</span><span class=\"mi\">005</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">I</span> <span class=\"p\">=</span> <span class=\"p\">(</span><span class=\"nb\">ones</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nb\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">500</span><span class=\"p\">))</span> <span class=\"o\">.*</span> <span class=\"n\">I</span> <span class=\"p\">;</span>\n<span class=\"n\">I</span><span class=\"p\">(:,</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"mi\">0</span> <span class=\"p\">;</span> <span class=\"n\">I</span><span class=\"p\">(:,</span><span class=\"k\">end</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"mi\">0</span> <span class=\"p\">;</span>\n<span class=\"n\">I</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,:)</span> <span class=\"p\">=</span> <span class=\"mi\">0</span> <span class=\"p\">;</span> <span class=\"n\">I</span><span class=\"p\">(</span><span class=\"k\">end</span><span class=\"p\">,:)</span> <span class=\"p\">=</span> <span class=\"mi\">0</span> <span class=\"p\">;</span>\n<span class=\"n\">I</span> <span class=\"p\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"nb\">pi</span><span class=\"o\">*</span><span class=\"mi\">4</span>^<span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">vl_imsmooth</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">I</span> <span class=\"p\">=</span> <span class=\"n\">single</span><span class=\"p\">(</span><span class=\"mi\">255</span> <span class=\"o\">*</span> <span class=\"n\">I</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"figure\">\n <img src=\"../demo/sift_peak_0.jpg\"></img>\n  <div class=\"caption\">\n   A test image for the peak threshold parameter.\n  </div>\n</div>\n\n<p>We run the detector with peak threshold <code/>peak_thresh</code> by</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">f</span> <span class=\"p\">=</span> <span class=\"n\">vl_sift</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"s\">&#39;PeakThresh&#39;</span><span class=\"p\">,</span> <span class=\"n\">peak_thresh</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>obtaining fewer features as <code/>peak_thresh</code> is increased.</p>\n\n<div class=\"figure\">\n <img src=\"../demo/sift_peak_1.jpg\"></img>\n <img src=\"../demo/sift_peak_2.jpg\"></img>\n <img src=\"../demo/sift_peak_3.jpg\"></img>\n <img src=\"../demo/sift_peak_4.jpg\"></img>\n <div class=\"caption\">\n   <span class=\"content\">\n     Detected frames for increasing peak threshold.<br clear=\"none\"/>\n     From top: <code/>peak_thresh = {0, 10, 20, 30}</code>.\n  </span>\n </div>\n</div>\n\n<p>The <em>edge threshold</em> eliminates peaks of\nthe DoG scale space whose curvature is too small (such peaks yield\nbadly localized frames). For instance, consider the test image</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">I</span> <span class=\"p\">=</span> <span class=\"nb\">zeros</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">500</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"nb\">i</span><span class=\"p\">=[</span><span class=\"mi\">10</span> <span class=\"mi\">20</span> <span class=\"mi\">30</span> <span class=\"mi\">40</span> <span class=\"mi\">50</span> <span class=\"mi\">60</span> <span class=\"mi\">70</span> <span class=\"mi\">80</span> <span class=\"mi\">90</span><span class=\"p\">]</span>\n<span class=\"n\">I</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"o\">-</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"nb\">i</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">):</span><span class=\"mi\">50</span><span class=\"o\">+</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"nb\">i</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">),</span><span class=\"nb\">i</span><span class=\"o\">*</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"mi\">1</span> <span class=\"p\">;</span>\n<span class=\"k\">end</span>\n<span class=\"n\">I</span> <span class=\"p\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"nb\">pi</span><span class=\"o\">*</span><span class=\"mi\">8</span>^<span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">vl_imsmooth</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">I</span> <span class=\"p\">=</span> <span class=\"n\">single</span><span class=\"p\">(</span><span class=\"mi\">255</span> <span class=\"o\">*</span> <span class=\"n\">I</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"figure\">\n<img src=\"../demo/sift_edge_0.jpg\"></img>\n<div class=\"caption\">\n<span class=\"content\">\nA test image for the edge threshold parameter.\n</span>\n</div>\n</div>\n\n<p>We run the detector with edge threshold <code/>edge_thresh</code> by</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">f</span> <span class=\"p\">=</span> <span class=\"n\">vl_sift</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"s\">&#39;edgethresh&#39;</span><span class=\"p\">,</span> <span class=\"n\">edge_thresh</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>obtaining more features as <code/>edge_thresh</code> is increased:</p>\n\n<div class=\"figure\">\n<img src=\"../demo/sift_edge_1.jpg\"></img>\n<img src=\"../demo/sift_edge_2.jpg\"></img>\n<img src=\"../demo/sift_edge_3.jpg\"></img>\n<img src=\"../demo/sift_edge_4.jpg\"></img>\n<div class=\"caption\">\n<span class=\"content\">\n  Detected frames for increasing edge threshold.<br clear=\"none\"/>\n  From top: <code/>edge_thresh = {3.5, 5, 7.5, 10}</code>\n</span>\n</div>\n</div>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.sift.custom\">Custom frames</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>The MATLAB command <code/><a href=../matlab/vl_sift.html>vl_sift</a></code> (and the command line utility)\ncan bypass the detector and compute the descriptor on custom frames using\nthe <code/>Frames</code> option.</p>\n\n<p>For instance, we can compute the descriptor of a SIFT frame\ncentered at position <code/>(100,100)</code>, of scale <code/>10</code>\nand orientation <code/>-pi/8</code> by</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">fc</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"o\">-</span><span class=\"nb\">pi</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"p\">;</span>\n<span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_sift</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"s\">&#39;frames&#39;</span><span class=\"p\">,</span><span class=\"n\">fc</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"figure\">\n<img src=\"../demo/sift_basic_4.jpg\"></img>\n<div class=\"caption\">\n<span class=\"content\">\n  Custom frame at with fixed orientation.\n</span>\n</div>\n</div>\n\n <p>Multiple frames <code/>fc</code> may be specified as well. In this\n  case they are re-ordered by increasing\n  scale. The <code/>Orientations</code> option instructs the program to\n  use the custom position and scale but to compute the keypoint\n  orientations, as in</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">fc</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">;</span>\n<span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_sift</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"s\">&#39;frames&#39;</span><span class=\"p\">,</span><span class=\"n\">fc</span><span class=\"p\">,</span><span class=\"s\">&#39;orientations&#39;</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n <div class=\"figure\">\n<img src=\"../demo/sift_basic_5.jpg\"></img>\n<div class=\"caption\">\n<span class=\"content\">\nCustom frame with computed orientations.\n</span>\n</div>\n</div>\n\n<p>Notice that, depending on the local appearance, a keypoint may\nhave <em>multiple</em> orientations.  Moreover, a keypoint computed on\na constant image region (such as a one pixel region) has no\norientations!</p>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.sift.conventions\">Conventions</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>In our implementation SIFT frames are expressed in the standard\nimage reference.  The only difference between the command line and\nMATLAB drivers is that the latter assumes that the image origin\n(top-left corner) has coordinate (1,1) as opposed to (0,0). Lowe's\noriginal implementation uses a different reference system, illustrated\nnext:</p>\n\n<div class=\"figure\">\n<img src=\"../figures/sift-conv-vlfeat.png\"></img> <br clear=\"none\"/>\n<img src=\"../figures/sift-conv.png\"></img>\n<div class=\"caption\">\n<span class=\"content\">\nOur conventions (top) compared to Lowe's (bottom).\n</span>\n</div>\n</div>\n\n <p>Our implementation uses the standard image reference system, with\n  the <code/>y</code> axis pointing downward. The frame\n  orientation <code/>&theta;</code> and descriptor use the same reference\n  system (i.e. a small positive rotation of the <code/>x</code> moves it\n  towards the <code/>y</code> axis). Recall that each descriptor element\n  is a bin indexed by <code/>(&theta;,x,y)</code>; the histogram is\n  vectorized in such a way that <code/>&theta;</code> is the fastest\n  varying index and <code/>y</code> the slowest.</p>\n\n <p>By comparison, D. Lowe's implementation (see bottom half of the\n  figure) uses a slightly different convention: Frame centers are\n  expressed relatively to the standard image reference system, but the\n  frame orientation and the descriptor assume that the <em> y </em>\n  axis points upward. Consequently, to map from our to D. Lowe's\n  convention, frames orientations need to be negated and the descriptor\n  elements must be re-arranged.</p>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.sift.ubc\">Comparison with D. Lowe's SIFT</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>VLFeat SIFT implementation is largely compatible with\n<a shape=\"rect\" href=\"http://www.cs.ubc.ca/~lowe/keypoints/\">UBC (D. Lowe's)\nimplementation</a> (note however that the keypoints are stored in a\nslightly different format, see <code/><a href=../matlab/vl_ubcread.html>vl_ubcread</a></code>). The following\nfigure compares SIFT keypoints computed by the VLFeat (blue) and UBC\n(red) implementations.</p>\n\n<div class=\"figure\">\n<img src=\"../demo/sift_vs_ubc_1.jpg\"></img>\n<div class=\"caption\">\n<span class=\"content\">\nVLFeat keypoints (blue) superimposed to D. Lowe's keypoints\n(red). Most keypoints match nearly exactly.\n</span>\n</div>\n</div>\n\n<p>The large majority of keypoints correspond nearly exactly. The\nfollowing figure shows the percentage of keypoints computed by the two\nimplementations whose center matches with a precision of at least 0.01\npixels and 0.05 pixels respectively.</p>\n\n<div class=\"figure\">\n<img src=\"../demo/sift_vs_ubc_2.jpg\"></img>\n<div class=\"caption\">\n<span class=\"content\">\nPercentage of keypoints obtained from the VLFeat and UBC implementations\nthat match up to 0.01 pixels and 0.05 pixels.\n</span>\n</div>\n</div>\n\n<p>Descriptors are also very similar. The following figure shows the\npercentage of descriptors computed by the two implementations whose\ndistance is less than 5%, 10% and 20% of the average descriptor\ndistance.</p>\n\n<div class=\"figure\">\n<img src=\"../demo/sift_vs_ubc_3.jpg\"></img>\n<div class=\"caption\">\n<span class=\"content\">\nPercentage of descriptors obtained from the VLFeat and UBC\nimplementations whose distance is within 10% and 20% of the average\ndescriptor distance.\n</span>\n</div>\n</div>\n\n\n  \n      </div>\n      <div class=\"clear\">&nbsp;</div>\n    </div>\n  </div> <!-- content-section -->\n  <div id=\"footer-section\">\n    <div id=\"footer\">\n      &copy; 2007-13 The authors of VLFeat\n    </div> <!-- footer -->\n  </div> <!-- footer section -->\n </body>\n <!-- Body ends -->\n</html>\n ", "encoding": "ascii"}