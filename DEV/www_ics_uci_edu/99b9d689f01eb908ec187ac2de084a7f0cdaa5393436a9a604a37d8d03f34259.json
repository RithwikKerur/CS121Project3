{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/hw9.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, November 17, 2005 5:48 PM\" />\n<TITLE>Ninth Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D210014B\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/h21/code.css\" rel=\"stylesheet\" type=\"text/css\" /></HEAD>\n</HTML>\n<HTML>\n<HEAD>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY &bull; FALL 2009</font></P>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Ninth<font face=\"Garamond\"> Homework </font></B></FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>This assignment is due at the start of lab on\n  Monday, November 23. </FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(1) </B> We&#39;re not going to make completing\n  the second midterm a part of the homework this time.  That doesn&#39;t mean\n  you don&#39;t need to know how to do all the problems, though, because similar\n  problems will turn up on the final exam (and, more importantly, because\n  solving these problems represents the material you should be learning).\n  Especially for those of you who received lower scores, it&#39;s important\n  for you to determine for yourself that you can produce the answer to each\nmidterm question without referring to notes or an existing solution.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(2)</B> Just as lists can contain other lists, vectors can contain lists, or even other vectors. That's how we can represent two-dimensional tables, still with constant-time access by row and column. Read <a href=\"http://www.ics.uci.edu/~kay/courses/i41/vectors.html\">this coverage of vectors containing vectors</a>; it's also a good example of processing complex data structures layer by layer, which has been one of our main themes this quarter.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(3) </B>Chapter 34 of the HtDP text begins\n  the discussion of programs that have &quot;state&quot;&mdash;that is, programs\n  that save values from one invocation to the next.  (This meaning of &quot;state&quot;\n  is the same one we use when we talk about some system being in a &quot;dormant\n  state&quot; or an &quot;overloaded state.&quot;  A system&#39;s &quot;state&quot;\n  is its status, and we often implement that with saved values which we can\n  change with assignment statements.)  There aren&#39;t exercises in this chapter,\n  but read it anyway.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(4)</B> Chapter 35 introduces </FONT><FONT FACE=\"Courier New\">set!</FONT><FONT FACE=\"Garamond\" SIZE=4>.\n  You should be able to do exercise 35.2.1. But please note that using </FONT><FONT FACE=\"Courier New\">set!</FONT><FONT FACE=\"Garamond\" SIZE=4> means your program isn't following the functional style any more; assignment statments have their uses, but in Scheme programs those uses are very limited. You should know about them, but don't start writing all your Scheme programs in the imperative style.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(5)</B> Chapter 36 talks about the situations\n  in which you&#39;d choose to use &quot;stateful&quot; programs.  Note, though,\n  that their examples can still be accomplished in a functional style, simply\n  by keeping the state as part of the data (having a separate field in the\n  traffic light, for example, to say what its current color is) and passing\n  the whole object back and forth as usual.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(6)</B> Chapter 37 gives further examples\n  of programs with state.  The rest of the book is interesting, too, but we\n  just don&#39;t have the time for all of it.  You might note, though, the\n  examples in Section 43.2; one use of mutation is to create data structures\n  with cycles&mdash;that is, with interconnecting links.</FONT><BR />\n</P>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments by David\nG. Kay from Fall 2003; modified by David G. Kay, Fall 2004, Fall 2007, Fall 2008.</FONT></P>\n<HR />\n<FONT FACE=\"Garamond\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Garamond\">\n<!-- #BeginDate format:fcAm1a -->Saturday, November 21, 2009 10:10 AM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "ascii"}