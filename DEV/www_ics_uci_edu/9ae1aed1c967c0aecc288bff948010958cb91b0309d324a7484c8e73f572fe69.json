{"url": "https://www.ics.uci.edu/~ejw/authoring/versioning/draft-kaler-webdav-versioning-00.txt", "content": "INTERNET DRAFT\r\n\t\t\t\t\t\t\t\r\n<draft-kaler-webdav-versioning-00>\t  Christopher Kaler, Microsoft\r\nExpires January 31, 1999\t\t\t\t      08/06/98\r\n\r\n                      Versioning Extensions to WebDAV\r\n\r\nStatus of this Memo\r\n\r\n  This document is an Internet-Draft. Internet-Drafts are working \r\n  documents of the Internet Engineering Task Force (IETF), its areas,\r\n  and its working groups. Note that other groups may also distribute\r\n  working documents as Internet-Drafts.\r\n\r\n  Internet-Drafts are draft documents valid for a maximum of six months\r\n  and may be updated, replaced, or made obsolete by other documents at\r\n  any time. It is inappropriate to use Internet-Drafts as reference\r\n  material or to cite them other than as \"work in progress\".\r\n\r\n  To learn the current status of any Internet-Draft, please check the \r\n  \"1id-abstracts.txt\" listing contained in the Internet-Drafts Shadow \r\n  Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe), \r\n  munnari.oz.au (Pacific Rim), ftp.ietf.org (US East Coast), or \r\n  ftp.isi.edu (US West Coast).\r\n\r\n  Distribution of this document is unlimited. Please send comments to \r\n  the Distributed Authoring and Versioning (WEBDAV) working group at \r\n  <w3c-dist-auth@w3.org>, which may be joined by sending a message with\r\n  subject \"subscribe\" to <w3c-dist-auth-request@w3.org>.\r\n\r\n  Discussions of the WEBDAV working group are archived at   \r\n  <URL:http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth>.\r\n\r\nCopyright Notice\r\n\r\n  Copyright (C) The Internet Society (1998). All Rights Reserved.\r\n\r\nAbstract\r\n\r\n  This document describes a set of methods, headers, and properties that\r\n  extend the HTTP and WebDAV protocols to support versioning and variant\r\n  authoring of Web resources. Operations are provided to perform both \r\n  basic versioning and parallel versioning.\r\n\r\n  This document is a stawman proposal and does not have the endorsement \r\n  of the WebDAV working group authors. \r\n\r\nContents\r\n\r\n  1\t\tIntroduction\t\t\t\t\t 4\r\n  1.1\t\tRelationship to DAV\t\t\t\t 4\r\n  1.2\t\tTerms\t\t\t\t\t\t 4\r\n  1.3\t\tNotational Conventions\t\t\t\t 4\r\n  1.4\t\tDefinitions\t\t\t\t\t 4\r\n  1.4.1\t\tResource\t\t\t\t\t 4\r\n  1.4.2\t\tResource Version\t\t\t\t 4\r\n  1.4.3\t\tProject\t\t\t\t\t\t 4\r\n  1.4.4\t\tLine of effort\t\t\t\t\t 5\r\n  1.4.5\t\tExcluded Areas\t\t\t\t\t 5\r\n  2\t\tScenarios\t\t\t\t\t 5\r\n  2.1\t\tDocument Versioning\t\t\t\t 5\r\n  2.2\t\tCollection Versioning\t\t\t\t 5\r\n  2.3\t\tParallel Versioning\t\t\t\t 5\r\n  2.4\t\tIsolated Authoring\t\t\t\t 5\r\n  2.5\t\tMulti-Language Authoring\t\t\t 5\r\n  3\t\tRequirements\t\t\t\t\t 6\r\n  3.1\t\tFunctional\t\t\t\t\t 6\r\n  3.2\t\tPerformance\t\t\t\t\t 6\r\n  3.3\t\tEasy\t\t\t\t\t\t 6\r\n  3.4\t\tPortable\t\t\t\t\t 6\r\n  3.5\t\tAtomic\t\t\t\t\t\t 6\r\n  3.6\t\tExtensible\t\t\t\t\t 6\r\n  3.7\t\tVersioning Granularity\t\t\t\t 6\r\n  3.8\t\tLanguage Variants\t\t\t\t 6\r\n  4\t\tVersioning Overview\t\t\t\t 6\r\n  4.1\t\tBasic Versioning Operations\t\t\t 7\r\n  4.2\t\tConfiguration Management\t\t\t 7\r\n  4.3\t\tSharing\t\t\t\t\t\t 8\r\n  4.4\t\tResolution Queues\t\t\t\t 8\r\n  4.5\t\tGraphs\t\t\t\t\t\t 9\r\n  5\t\tLanguage Variants Overview\t\t\t 9\r\n  6\t\tVersioning Extensions\t\t\t\t 9\r\n  6.1\t\tDiscovery of Versioning Support\t\t\t 9\r\n  6.2\t\tBasic Operations\t\t\t\t10\r\n  6.2.1\t\tSimple Check-Out and Check-In\t\t\t10\r\n  6.2.2\t\tUndo Check-Out\t\t\t\t\t14\r\n  6.2.3\t\tEnumeration of Check-Outs\t\t\t14\r\n  6.2.4\t\tGrouped Changes\t\t\t\t\t14\r\n  6.3\t\tBranching\t\t\t\t\t15\r\n  6.4\t\tDiscovering the Branch Namespace\t\t15\r\n  6.4.1\t\tCreating Branches\t\t\t\t16\r\n  6.4.2\t\tBranch Properties\t\t\t\t17\r\n  6.4.3\t\tDeleting Branches\t\t\t\t17\r\n  6.4.4\t\tDefault Branch\t\t\t\t\t17\r\n  6.4.5\t\tDerivation\t\t\t\t\t17\r\n  6.4.6\t\tBranch and resource Graphs\t\t\t18\r\n  6.4.7\t\tModifying Branches\t\t\t\t20\r\n  6.4.8\t\tSynchronizing Branches\t\t\t\t21\r\n  6.4.9\t\tSetting Current Versions\t\t\t21\r\n  6.4.10\tMerging Branches\t\t\t\t22\r\n  6.4.11\tPurging Branches\t\t\t\t22\r\n  6.5\t\tBranch Discovery\t\t\t\t23\r\n  6.6\t\tBranch Check-Ins\t\t\t\t23\r\n  6.7\t\tSharing\t\t\t\t\t\t24\r\n  6.8\t\tResolution Queues\t\t\t\t24\r\n  6.8.1\t\tDiscovering Resolution Items\t\t\t24\r\n  6.8.2\t\tDeleting Resolution Items\t\t\t25\r\n  6.9\t\tMiscellaneous\t\t\t\t\t26\r\n  6.9.1\t\tDestroy\t\t\t\t\t\t26\r\n  6.9.2\t\tKeyword Expansion\t\t\t\t26\r\n  7\t\tLanguage Variant Extensions\t\t\t27\r\n  7.1\t\tResource Properties\t\t\t\t27\r\n  7.2\t\tHeader Extensions\t\t\t\t27\r\n  7.3\t\tDefault Variant\t\t\t\t\t27\r\n  8\t\tInternationalization Considerations\t\t28\r\n  9\t\tIANA Considerations\t\t\t\t28\r\n  10\t\tSecurity Considerations\t\t\t\t28\r\n  11\t\tXML Element Definitions\t\t\t\t28\r\n  12\t\tReferences\t\t\t\t\t28\r\n  13\t\tAuthor\u2019s Address\t\t\t\t28\r\n\r\n1 Introduction\r\n\r\n  The development of Web applications and content is stronger than ever.\r\n  As this arena has grown, so has the need for tools and technologies \r\n  that are commonplace in non-Web environments.  This includes tracking \r\n  and retrieving change history, supporting both collaborative and \r\n  parallel efforts.\r\n\r\n  This document describes extensions to the WebDAV distributed authoring\r\n  protocol [WebDAV], which is itself an extension of the HTTP 1.1 \r\n  protocol [RFC2068], for manipulating versioned resources and parallel \r\n  versioning efforts.  This document represents a similar but \r\n  alternative model to that proposed in [White].  Note that this \r\n  document does not address the variant notion proposed in [White] for \r\n  handling international versioning.\r\n\r\n1.1 Relationship to DAV\r\n\r\n  This document describes a set of extensions to the currently proposed \r\n  [WebDAV] specification to enable version management.\r\n\r\n1.2 Terms\r\n\r\n  This draft uses the terms defined in [RFC2068] and [WebDAV].\r\n\r\n1.3 Notational Conventions\r\n\r\n  Since this document describes a set of extensions to the HTTP/1.1  \r\n  protocol, the augmented BNF used herein to describe protocol elements \r\n  is exactly the same as described in section 2.1 of [RFC2068].  Since \r\n  this augmented BNF uses the basic production rules provided in section\r\n  2.2 of [RFC2068], these rules apply to this document as well.\r\n\r\n  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \r\n  \"SHOULD\", SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this \r\n  document are to be interpreted as described in [RFC2119].\r\n\r\n1.4 Definitions\r\n\r\n  To ensure that terminology is consistent, this section describes \r\n  several key objects referenced in this document.\r\n\r\n1.4.1 Resource\r\n\r\n  A resource is an object in the namespace that is referred to by a URI\r\n  as defined in [WebDAV].  Resources include documents, collections, \r\n  etc.\r\n\r\n1.4.2 Resource Version\r\n\r\n  A resource version refers to a specific version of a resource.  All \r\n  resource versions can be referred to by a URI and are therefore \r\n  resources themselves.\r\n\r\n1.4.3 Project\r\n\r\n  A project refers to a collection of resources that have a common \r\n  theme.  Projects are really just containers so they are synonymous \r\n  with collection resources.  The project term is defined here because \r\n  it is often used when discussing versioning. Example projects include \r\n  my application manuals and my application sources.\r\n\r\n1.4.4 Line of effort\r\n\r\n  A line of effort refers to a sequence of changes towards a specific \r\n  goal.  For example, Beta1, or V2 or V3.1a.  Lines of effort may have \r\n  special relationships.  For example, V2 is typically based on V1.  \r\n  It is also possible that lines of effort are unrelated.\r\n\r\n1.4.5 Excluded Areas\r\n\r\n  The following areas are omitted from this document as other drafts \r\n  are addressing them:\r\n  - Searching\r\n  - Security\r\n\r\n2 Scenarios\r\n\r\n  This section describes several key scenarios driving versioning \r\n  requirements.\r\n\r\n2.1 Document Versioning\r\n\r\n  Dick is working on several new chapters for a document.  He reserves \r\n  the files and obtains versions to make edits.  When he is done, he \r\n  initiates a check-in of all files in a transacted context so that he \r\n  maintains consistency in his archive.\r\n\r\n2.2 Collection Versioning\r\n\r\n  While Dick is making changes he decides to re-organize the project \r\n  and renames collections, creates new collections, and moves documents \r\n  around between collections.  This is all versioned so that Dick can \r\n  revert back to a previous version of the project and have the correct \r\n  collections and collection members.  Note that namespace versioning \r\n  allows namespace restoration.  This is important because documents \r\n  often have links to each other which, if not restored properly, could \r\n  result in broken links.\r\n\r\n2.3 Parallel Versioning\r\n\r\n  Jane works with Dick, however, she works on the next version of Dick\u2019s\r\n  product.  A separate version has been created for Jane\u2019s work, which \r\n  is based on Dick\u2019s current work.  This means that while Jane is \r\n  changing files in one area, she can automatically see the changes \r\n  Dick is making in his version of the document.\r\n\r\n2.4 Isolated Authoring\r\n\r\n  Ted and Alice work on different areas of the same project.  Ted has a\r\n  large task and wants to make changes without anyone else being \r\n  affected until he is done.  Ted makes his changes in isolation from \r\n  the rest of the team and publishes them when he is done.  Alice tends \r\n  to work on small changes in an isolated area of the project, but likes\r\n  to keep track of what everyone else in her team is doing.  So she \r\n  keeps herself isolated from the team, but synchronizes herself with \r\n  the current team versions every other day.\r\n\r\n2.5 Multi-Language Authoring\r\n\r\n  Jack and Jill are writing a set of Web pages that describe their \r\n  company\u2019s products.  Jack is responsible for the English version of \r\n  the documents and Jill is responsible for the German version. Jill \r\n  creates the initial version of the pages in German and Jack translates\r\n  them one-by-one to English.  Clients browsing their Web site can \r\n  request either language variant.\r\n\r\n3 Requirements\r\n\r\n  This section identifies key requirements for WebDAV versioning \r\n  extensions.\r\n\r\n3.1 Functional\r\n\r\n  The protocol MUST provide support for standard versioning functions \r\n  such as check-out, check-in, etc.\r\n\r\n3.2 Performance\r\n\r\n  The protocol MUST be implementable in a performant manner.  That is, \r\n  the protocol SHOULD be defined with implementation performance as a \r\n  consideration and SHOULDN\u2019T require multiple round-trips for common \r\n  operations.\r\n\r\n3.3 Easy\r\n\r\n  The protocol SHOULD make it easy for clients to add versioning \r\n  support.\r\n\r\n3.4 Portable\r\n\r\n  The protocol MUST be implementable by different companies, on \r\n  different platforms, with different versioning styles (e.g., document\r\n  vs source management) and targets (e.g., text vs media).\r\n\r\n3.5 Atomic\r\n\r\n  The protocol MUST provide the ability to request version-related \r\n  operations in a transactional context.  However, it is NOT required \r\n  for every server to support transactions.\r\n\r\n3.6 Extensible\r\n\r\n  The versioning specification MUST allow for protocol extensions where\r\n  it makes sense.  \r\n\r\n3.7 Versioning Granularity\r\n\r\n  The versioning specification MUST allow for all resources (including \r\n  collections) to be versioned.  As well, clients SHOULD be allowed to \r\n  edit a resource without implicitly creating a new version.\r\n\r\n3.8 Language Variants\r\n\r\n  The versioning specification MUST allow for language variants of \r\n  resources.  Access to these variants MUST be easy.\r\n\r\n4 Versioning Overview\r\n\r\n  This section presents an overview of traditional versioning concepts \r\n  as well as some new concepts that are introduced in this \r\n  specification.\r\n\r\n4.1 Basic Versioning Operations\r\n\r\n  There are several operations that are considered basic to versioning: \r\n  check-out, check-in, undo check-in or check-out, enumeration of \r\n  check-outs, and enumeration of check-ins (history).\r\n\r\n  Although the semantics can vary, most versioning systems support the \r\n  notion of indicating intent to modify a document and then submission \r\n  of the modified version.  Typically this involves some form of locking\r\n  (either shared or exclusive).\r\n\r\n  As well, many systems support the ability to cancel a check-out or \r\n  undo a recent check-in.  These options are available to the owner or \r\n  to the Administrator.\r\n\r\n  Users can generally enumerate the current check-outs although they may\r\n  not be able to determine the user in all cases.  Likewise, users can \r\n  review check-ins to see the change history.  Most systems allow users \r\n  to select different versions from the change history and present a \r\n  comparison of the versions.\r\n\r\n  It is important to note that everything is versioned.  For example, \r\n  when a property on a resource is changed, a new version of the \r\n  resource is created.  Likewise, when the contents of a collection \r\n  change, a new version of the collection is created.\r\n\r\n  However, some clients may not wish to have new versions automatically \r\n  created.  For example, they are working on a version and want to write\r\n  the changes to the store and update them.  New versions are created on\r\n  request, not automatically (note that the default behavior is \r\n  actually up to the store).\r\n\r\n  It may be the case that down-level clients want to version resources \r\n  they update, but have limited knowledge of versioning.  These clients \r\n  want to be able to update the resource and have it automatically \r\n  versioned.\r\n\r\n4.2 Configuration Management\r\n\r\n  Many versioning systems provide branching and merging as a mechanism \r\n  for creating variations of a document or for making changes in \r\n  parallel.  This specification introduces   the notion of a Branch.  A\r\n  Branch is a branch at a project level and can contain variations \r\n  of multiple documents.  For example, if your project is a set of \r\n  manuals for a product, you may have a V1 Branch, a V1.1 Branch, and a \r\n  V2 Branch.  Branches represent lines of effort or what is often \r\n  referred to as configuration management.\r\n\r\n  So how are Branches different from versioned resources? Branches \r\n  differ in several key ways: (a) they are not part of the namespace, \r\n  (b) they can include inheritance relationships, and (c) they \r\n  distinguish versioning at all levels.  \r\n\r\n  For many Web projects, links must remain constant even when working \r\n  on multiple versions of the project.  By factoring the current Branch\r\n  out of the URI, the need to fix-up links in multi-version environments\r\n  is eliminated.  \r\n\r\n  Branches are derived from other Branches.  In the example above, V2 is\r\n  derived from V1.1, which is derived from V1.  This relationship allows\r\n  users to control the flow of changes down the chain.  For example, \r\n  V1.1 was created late in the cycle for V1.  Consequently, they \r\n  established the V1.1 Branch so that any changes to V1 would be \r\n  automatically added to V1.1.  Later, V2 was created for a new revision\r\n  of the product.  In this case V2 conditionally inherits from V1.1.  \r\n  That is, the owner of V2 is notified of changes to V1.1 and may choose\r\n  to accept or decline the changes.\r\n\r\n  The set of Branch derivation relationships includes:\r\n  - Inherit changes automatically\r\n  - Notify of changes\r\n  - Based on current version\r\n  - Based on current version when Branch was created\r\n  - Based on latest version as of a specific time\r\n\r\n  In some ways Branches are similar to a versioned collection.  However,\r\n  the scope of change is a key difference.  In a versioned collection, \r\n  if you change the collection, it is versioned.  However, if the \r\n  collection contains a collection and you change something in the \r\n  contained collection, the outer collection is not versioned.  Branches\r\n  represent an alternate view of the namespace.\r\n\r\n  There are several key operations that are performed on Branches:\r\n  - Rename (Move) - change the name of the Branch\r\n  - Delete - eliminate the Branch\r\n  - Branch - create a new Branch based on the Branch\r\n  - Synchronize - synchronize updates from derived-from Branches into \r\n    this Branch\r\n  - Set Default - set the default version of a document within the \r\n    Branch\r\n\r\n  Many systems have the notion of a label.  This is a mechanism for \r\n  marking a document at a specific version.  Branches provide this \r\n  functionality by allowing users to create a derived Branch that will \r\n  never change.\r\n\r\n  It is important to note that there can be namespace changes between \r\n  Branches. For example, V2 may be based on V1, but the organization of \r\n  the information may be changed.  Branches need to track the resources \r\n  even if the namespace changes.\r\n\r\n4.3 Sharing\r\n\r\n  It is common to share documents across projects.  For example, you \r\n  might have a Trademark page that is common to all of your manuals.\r\n\r\n  Sharing can take two forms: full and regulated.  Full sharing means \r\n  that the same document exists in multiple places.  Regulated sharing \r\n  means that specific versions of a document are shared to multiple \r\n  places.  Regulated sharing can be performed using branches.\r\n\r\n4.4 Resolution Queues\r\n\r\n  There are times when an operation on the server creates a situation \r\n  that requires manual intervention for resolution.  For example, Dick  \r\n  checks in a change to his Branch.  Jane\u2019s Branch inherits from Dick\u2019s \r\n  Branch.  However, Dick\u2019s change conflicts with a change Jane made in \r\n  here Branch.\r\n\r\n  For these situations, the server maintains a queue of actions that \r\n  need to be resolved.  Clients can query and resolve the actions.\r\n\r\n  The identified actions are:\r\n  - Change occurred in derived-from Branch, do you want the change?\r\n  - Conflicting change occurred in derived-from Branch, you must merge \r\n    the changes.\r\n  - Update has been made to a shared object, do you want the change?\r\n\r\n4.5 Graphs\r\n\r\n  When versions of documents are created, there is an implicit graph \r\n  representing the history of the document.  In systems that allow \r\n  branching and merging, this graph can be an arbitrary directed \r\n  acyclic graph.\r\n\r\n  With the introduction of Branches, there are actually several graphs: \r\n  the document versions, the branch derivations, the document \r\n  derivations, and the Branch merge points.   \r\n\r\n  Because Branches are where deviations and merges take place, document\r\n  version graphs are simple linear (history) lists.  This facilitates \r\n  many UI optimizations for clients as well as a simpler model for \r\n  end-users.\r\n\r\n  Branches on the other hand are directed acyclic graphs.  Each arc in \r\n  the graph indicates \"is derived from\" and has an associated property \r\n  indicating the type of derivation (static, dynamic, conditional, \r\n  etc.).\r\n\r\n  Document derivation graphs represent the history of a document across\r\n  all Branches. This too is a directed acyclic graph.\r\n\r\n  The Branch merge graph is a directed acyclic graph representing not \r\n  only the derivations of Branches, but also the merge points for \r\n  Branches.\r\n\r\n5 Language Variants Overview\r\n\r\n  Branches can provide the ability to have alternate variants of the \r\n  branch.  This means that a branch can have multiple instances of any \r\n  resource where each instance is associated with a variant.  The \r\n  typical use of variants is to support languages.\r\n\r\n  For example, the Beta1 branch contains the documentation for Beta1.  \r\n  The Branch has English and German variants.  Functionally they are \r\n  exactly the same; however, the content of a document resource may \r\n  vary.  If a resource is renamed or the namespace is altered in any \r\n  way, the change is reflected in all variants.  The server maintains \r\n  variants of the contents of a document resource.\r\n\r\n  There is no requirement that different variants be synchronized.  \r\n  That is, if the English variant is edited, its content may be out of \r\n  sync with the German variant.  The server is not responsible for \r\n  correlating this information, simply tracking the relationship.\r\n\r\n6 Versioning Extensions\r\n\r\n  The following sections describe the proposed enhancements to [WebDAV] \r\n  to support versioning.\r\n\r\n6.1 Discovery of Versioning Support\r\n\r\n  Clients can use the OPTIONS verb to discover if servers support \r\n  versioning semantics.\r\n\r\n  OPTIONS * HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Length: 0\r\n\r\n  HTTP/1.1 200 OK\r\n  Date: Wed, 05 Aug 1998 00:39:27 GMT\r\n  Accept-Ranges: none\r\n  Cache-Control: private\r\n  Dav: 1, 2\r\n  Allow: OPTIONS, TRACE, GET, HEAD, DELETE, COPY, MOVE, PROPFIND, \r\n  PROPPATCH, MKCOL, LOCK, UNLOCK\r\n  Content-Length: 0\r\n  Public: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, \r\n  MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK\r\n  Allow-Extension: DAV:versioning\r\n  Public-Extension: DAV:versioning\r\n\r\n6.2 Basic Operations\r\n\r\n  This section describes the enhancements to support basic version \r\n  control functions.\r\n\r\n6.2.1 Simple Check-Out and Check-In\r\n\r\n  In most version control systems the flow of changes is \r\n  essentially the following:\r\n\r\n  1. Mark intent to modify the resource\r\n  2. Get the resource\r\n  3. Change it\r\n  4. Replace the resource\r\n  5. Remove intent marker\r\n\r\n  The [WebDAV] protocol already provides mechanisms for doing this, so \r\n  versioning should  tightly integrate with these mechanisms:\r\n\r\n  1. LOCK resource\r\n  2. GET resource\r\n  3. Change it\r\n  4. PUT resource\r\n  5. UNLOCK resource\r\n\r\n  In order to make this simple process work for versioning, there are \r\n  several small extensions that must be added to [WebDAV].\r\n\r\n6.2.1.1 LOCK/UNLOCK Extensions\r\n\r\n  The following sections detail extensions to the LOCK method.\r\n\r\n6.2.1.1.1 Lock Comment\r\n\r\n  The LOCK/UNLOCK are serving two purposes: to establish protection on \r\n  the resource and to mark the intent of changes.  This draft proposes \r\n  to merge the two actions by allowing a comment to be added to the \r\n  LOCK/UNLOCK methods.  The check-out/check-in comment would be \r\n  indicated as part of the lock/unlock request by having an optional \r\n  XML tag. The DAV:lockcomment tag is added to the existing DAV: DTDs.\r\n  Support for this tag MUST be provided.\r\n\r\n  ...\r\n  <D:lockinfo>\r\n   \t<D:lockscope><D:exclusive/></D:lockscope>\r\n\t<D:locktype><D:write/><D:locktype>\r\n\t<D:lockcomment>Update the Foo algorithm</D:lockcomment>\r\n\t<D:owner>\r\n\t\t<D:href>http://www.microsoft.com/ckaler</D:href>\r\n\t</D:owner>\r\n  </D:lockinfo>\r\n\r\n  To support versioning, the server MUST support locking.  As well, the\r\n  server MUST support advisory locks (i.e., Shared).  The value of \r\n  DAV:lockcomment is a string.\r\n\r\n6.2.1.1.2 Check-Out Attributes\r\n\r\n  Some systems also track the local destination of checkout requests.  \r\n  To enable this tracking, the client can advise this information (if \r\n  known) by including another tag in the lock request.  The DAV:user \r\n  and DAV:localresource tags are optional and their value is opaque and\r\n  only understood by the client.  Support for these tags is optional.\r\n\r\n  ...\r\n  <D:lockinfo>\r\n\t<D:lockscope><D:exclusive/></D:lockscope>\r\n\t<D:locktype><D:write/><D:locktype>\r\n\t<D:lockcomment>Update the Foo algorithm</D:lockcomment>\r\n\t<D:user>ckaler</D:user>\r\n\t<D:localresource>file:c:\\foo\\working</D:localresource>\r\n\t<D:owner>\r\n\t\t<D:href>http://www.microsoft.com/ckaler</D:href>\r\n\t</D:owner>\r\n  </D:lockinfo>\r\n\r\n6.2.1.1.3 Discovery\r\n\r\n  Locks MUST be discoverable using DAV:lockdiscovery via PROPFIND.\r\n  As well, this SHOULD support the following qualifier tags (possibly \r\n  combined) within DAV:lockdiscovery to refine the lock space that is \r\n  enumerated:\r\n  - DAV:since and DAV:before tags to allow clients to limit discovery \r\n    to locks taken during the specified time range\r\n  - DAV:user to allow discovery based on the owner of the lock. The \r\n    value is any legal URI.\r\n  - DAV:localresource to allow discovery based on the output working \r\n    folder\r\n  - DAV:branch to allow discovery by branch\r\n  - DAV:resource to allow discovery by resource\r\n\r\n6.2.1.2 Identifying Specific Versions\r\n\r\n  To identify a specific version of a resource, the Base-Version and \r\n  Base-Branch header tags can be specified in the header.\r\n\r\n  GET /foo/bar.htm HTTP/1.1\r\n  Host: www.foobar.com\r\n  Base-Branch: http://www.foobar.com/XEEUS44932\r\n  Base-Version: <DAV:FJEIOEJW9349>\r\n\r\n  The Base-Branch header tag identifies a specific branch (explained \r\n  later) to scope the request.  The Base-Version header tag can be any \r\n  of the following:\r\n  - A specific version identifier\r\n  - Default to indicate the default version of the resource\r\n  - Default-# to indicate a previous version from the default version\r\n\r\n  Sometimes clients need to identify a specific version by time.  For \r\n  example, the current version as of Monday at 11:00 am.  To do this, \r\n  the Base-Version tag can use the ISO 8601 date format.\r\n\r\n6.2.1.3 Versioning Collections\r\n\r\n  Collections are treated the same as all other resources: when it is \r\n  modified, a new version is created.  This includes changes via PUT \r\n  or PROPPATCH.  Like operations on non-collection resources, clients \r\n  can request to overwrite the existing resource using New-Version:F \r\n  (see below), but servers reserve the right to force versioning.\r\n\r\n6.2.1.4 Versioning Headers\r\n\r\n  To better aid clients, the Base-Branch and Base-Version header tags \r\n  MUST be returned from the GET and PUT methods if the headers were \r\n  usedin the GET or PUT request.  For GET, this allows clients to \r\n  understand exactly which branch/version was returned.  For PUT, this\r\n  allows clients to understand what branch/version was associated with \r\n  the PUT.\r\n\r\n  GET /foo/bar.htm HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  HTTP/1.1 \r\n  Base-Branch: http://www.foobar.com/XEEUS44932\r\n  Base-Version: <DAV:FJEIOEJW9349>\r\n  Content-Length: xxx\r\n  Content-Type: ...\r\n\r\n6.2.1.5 Resource Property Extensions\r\n\r\n  The following properties are added to all resources using the \"DAV:\" \r\n  namespace and MUST be supported:\r\n  - DAV:isversioned - 0/1 to indicate if the resource is versionable.  \r\n    Note that servers can implement this as a read-only property.\r\n  - DAV:autoversion - 0/1 to indicate if the resource is automatically \r\n    versioned when modified.  Note that servers can implement this as a\r\n    read-only property.\r\n  - DAV:baseversion - This is a read-only property that identifies the \r\n    version of a resource.\r\n  - DAV:versionguid - This is a read-only property that returns a \r\n    globally unique identifier for this specific version of the \r\n    resource.  Every version of a resource will have a separate \r\n    versionguid.\r\n  - DAV:resourceguid - This is a read-only property that returns a \r\n    globally unique identifier for every unique resource independent of\r\n    versions.  That is, all versions of the resource have the same \r\n    DAV:resourceguid.\r\n  - DAV:previousversion - This is a read-only property that returns the\r\n    URI for the previous version of the resource.  An empty value \r\n    indicates that there are no previous versions.  Note that this \r\n    could be a multi-valued property.  If there are multiple versions, \r\n    each is returned in a separate DAV:previousversion tag.\r\n  - DAV:nextversion - This is a read-only property that returns the URI\r\n    for the next version of the resource.  An empty value indicates \r\n    that there is no next version.  \r\n\r\n6.2.1.6 Handling Intermediate Changes\r\n\r\n  It is possible for two different clients to PUT changes to the same \r\n  resource when exclusive locking is not used.  There are two \r\n  approaches to resolving this issue: define that last one wins, or \r\n  require the last change to merge with the earlier change.  For the \r\n  first outcome, no changes are required.  When the resource is PUT, \r\n  the previous version  is replaced with the new version.  To enable \r\n  clients to support the merge requirement, the client can include a \r\n  base-version qualifier in the header.  This indicates the version \r\n  the changes are based on and the server can refuse the PUT if that \r\n  is not the current version (and it cannot automatically merge).  \r\n  Servers SHOULD support base-version on PUT requests.\r\n\r\n  PUT /foo/bar.htm HTTP/1.1\r\n  Host: www.foobar.com\r\n  Base-Version: <DAV:FJEIOEJW9349>\r\n  ...\r\n\r\n6.2.1.7 PUT Extensions\r\n\r\n  The following sections detail extensions to the PUT method.\r\n\r\n6.2.1.7.1 The New-Version Header\r\n\r\n  It is possible that clients may wish to modify a resource several \r\n  times before creating a new resource.  To do this, they request that \r\n  the server overwrite the resource rather than versioning it by \r\n  including the New-Version header tag in the header.  The example \r\n  below illustrates a PUT request to overwrite rather than version.\r\n\r\n  PUT /foo/bar.htm HTTP/1.1\r\n  Host: www.microsoft.com\r\n  New-Version: F\r\n  ...\r\n\r\n  The New-Version qualifier can be used to request a new version be \r\n  created (T), or to overwrite an existing version (F).  \r\n  If a server does not honor the New-Version header, then it MUST not \r\n  succeed with a 200 level status code.\r\n\r\n  Note that once a newer version of a resource is created, earlier \r\n  version CANNOT be overwritten.\r\n\r\n6.2.1.8 COPY Extensions\r\n\r\n  Clients may need to copy resources from one branch to another.  This \r\n  is done using the Base-Branch, Base-Version, and Target-Branch header\r\n  tags.  Copying of both branches and contains is supported.  Servers \r\n  SHOULD support these COPY extensions.\r\n\r\n  COPY /foo/bar.cpp HTTP/1.1\r\n  Host: www.foo.bar\r\n  Destination: /foo/bar.cpp\r\n  Depth: infinity\r\n  Base-Branch: http://www.foobar.com/XEEUS44932\r\n  Target-Branch: http://www.foobar.com/XJ5F99934\r\n  Content-Type: text/xml\r\n  Content-Length: xxx\r\n\r\n6.2.1.9 Summary\r\n\r\n  This approach to basic check-out and check-in greatly simplifies the\r\n  client processing for versioning resources.  This also has the added \r\n  benefit of allowing down-level clients to create and modify resources\r\n  without any implicit knowledge of versioning.\r\n\r\n  Downlevel clients and use GET/PUT to operate against a version store\r\n  and implicitly have new versions created.  Smarter clients can use \r\n  LOCK/UNLOCK to reserve resources.\r\n\r\n  Another implication is that all changes to a resource, including \r\n  PROPPATCH can cause a new version to be created unless the client \r\n  requests an overwrite (and the server accepts it).  This is \r\n  desirable because the resource is being changed.  Servers MUST \r\n  associate the lock information with the version history if the \r\n  resource is locked.\r\n\r\n6.2.2 Undo Check-Out\r\n\r\n  It is often desirable to cancel a check-out without updating the \r\n  resource.  To cancel a check-out, clients need only remove their \r\n  LOCK with an UNLOCK request.  Servers MUST provide this support.  \r\n  Note that this does not rollback changes, it simply releases the \r\n  lock.\r\n\r\n6.2.3 Enumeration of Check-Outs\r\n\r\n  Clients can enumerate the active check-outs on a resource by \r\n  discovering its active locks via DAV:lockdiscovery.  Note that \r\n  security restrictions may prevent clients from being able to \r\n  identify the owner of a lock, however, the client must be able to \r\n  discover that existing locks exist.\r\n\r\n6.2.4 Grouped Changes\r\n\r\n  Clients may desire the ability to track a set of changes as a unit.  \r\n  This allows semantic grouping changes as well as the ability operate \r\n  on the entire collection of changes.  When a client versions a \r\n  resource (e.g. PROPPATCH, PUT, COPY, MOVE, ...), the return header \r\n  includes a resource for the change.  Clients can use this identifier \r\n  on subsequent changes (e.g. PROPPATCH, PUT, COPY, MOVE, ...) to allow\r\n  the server to correlate the changes.\r\n\r\n  If a client specifies a correlation identifier using Checkin-Token \r\n  that was not returned by the server, the server may fail with 412.\r\n  The correlation resource can then be used with PROPFIND, PROPPATCH, \r\n  DELETE, and COPY.\r\n\r\n  PUT /foo/bar.htm HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/html\r\n  Content-Length: xxxx\r\n\r\n  ...\r\n\r\n  HTTP/1.1 200 OK\r\n  Checkin-Token: http://www.foobar.com/ci/DFDF3293289\r\n  Content-Length: 0\r\n\r\n  PUT /foo/bing.htm HTTP/1.1\r\n  Host: www.foobar.com\r\n  Checkin-Token: http://www.foobar.com/ci/DFDF3293289\r\n  Content-Type: text/html\r\n  Content-Length: xxxx\r\n\r\n  ...\r\n\r\n  HTTP/1.1 200 OK\r\n  Checkin-Token: http://www.foobar.com/ci/DFDF3293289\r\n\r\n  Servers SHOULD support the Checkin-Token, but are not required to do\r\n  so.\r\n\r\n6.3 Branching\r\n\r\n  To satisfy the requirements of parallel development, branches are \r\n  introduced.  Using branches, clients can manipulate resources at a \r\n  project level.\r\n\r\n6.4 Discovering the Branch Namespace\r\n\r\n  Clients can discover the branching namespace of a server by \r\n  examining the DAV:branchnamespace property. The value off this \r\n  property is a URI that identifies a namespace against which the \r\n  branch operations are performed. The value is defined by the server\r\n  and is read-only.\r\n\r\n  The examples below assume a branch namespace of \"/bn/\"\r\n\r\n6.4.1 Creating Branches\r\n\r\n  Clients can create new branches by using the MKCOL method against the\r\n  branch namespace.  This requests the server to create a new branch \r\n  and the id is returned if the creation is successful.\r\n\r\n  When a branch is created, special tags can be used to define the \r\n  characteristics and relationships (which branches it is derived from)\r\n  for the branch.  The following table enumerates these tags.\r\n\r\n\tTag\t\t\t\t\tDescription\r\n\r\n  <DAV:derivedfrom>xxx\t\tThis tag allows the client to specify\r\n  </DAV:derivedfrom>\t\tan href to identify another branch   \r\n\t\t\t\tfrom which thisnew branch is to be \r\n\t\t\t\tderived.  \r\n\r\n  <DAV:inherit>Auto\t\tThe branch automatically inherits  \r\n  </DAV:inherit>\t\tchanges from its derived-from branch.\r\n\r\n  <DAV:inherit/>Manual\t\tThe branch inherits changes from its \r\n  </DAV:inherit>\t\tderived-from branch, but they are not \r\n\t\t\t\tautomatically inserted into the branch.\r\n\r\n  <DAV:inherit/>None\t\tThe branch is a snapshot of the current \r\n  </DAV:inherit>\t\tversions in the derived-from branch.\r\n\t\t\t\tThere is no inheritance of changes. \r\n\r\n  <DAV:basetime>xxx\t\tThe branch is based on the current \r\n  </DAV:basetime>\t\tversions in the derived-from branch at\r\n\t\t\t\tthe indicated time.  \r\n\r\n  MKCOL /bn/x HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:createbranch>\r\n  \t<D:derivedfrom>http://www.foobar.com/DDEJRJ445</D:derivedfrom>\r\n\t<D:inherit>Auto</D:inherit>\r\n  </D:createbranch>\r\n\r\n  HTTP/1.1 201 Created\r\n  Location: http://www.foobar.com/bn/RYURUS99009\r\n  Content-Length: 0\r\n\r\n  It should be noted that a branch is not required to be derived from \r\n  another branch.  In this case, the new branch is empty.  This support\r\n  MUST be provided if branches are supported.\r\n\r\n6.4.2 Branch Properties\r\n\r\n  The standard PROPFIND and PROPPATCH methods can be used with the \r\n  branch id to get and set properties on a branch.  Servers MUST \r\n  provide branch properties if branches are supported.\r\n\r\n6.4.3 Deleting Branches\r\n\r\n  Branches are deleted by issuing DELETE requests and specifying the \r\n  branch identifier. This support MUST be provided if branches are \r\n  supported.\r\n\r\n  DELETE /bn/RYURUS99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n\r\n6.4.4 Default Branch\r\n\r\n  Clients can establish the default Branch the server uses (the Branch\r\n  to use if a client doesn\u2019t request one) using the DAV:defbranch tag \r\n  with the PROPPATCH method.  This support MUST be provided if branches\r\n  are supported.\r\n\r\n  PROPPATCH /bn/ HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propertyupdate>\r\n\t<D:set>\r\n\t\t<D:prop>\r\n\t\t\t<D:defbranch>/bn/RYURUS99009</D:defbranch>\r\n\t\t</D:prop>\r\n\t</D:set>\r\n  </D:propertyupdate>\r\n\r\n6.4.5 Derivation\r\n\r\n  Clients are generally responsible for handling merges of sources \r\n  from one Branch to another.  If the client desires the server to \r\n  track this information, it must be passed in a Derived-From header \r\n  tag specified with PUTs.  This header tag allows the client to \r\n  indicate the Branch (or Branches) that the current put is derived \r\n  from. \r\n\r\n  PUT /foo/bar.htm HTTP/1.1\r\n  Host: www.microsoft.com\r\n  Derived-From: http://www.foobar.com/DIRI343445,DAV:DFSFE334492\r\n  ...\r\n\r\n  The value of Derived-From is a list of Branch,Version pairs that \r\n  represent previous versions.\r\n\r\n  Clients are not required to use the Derived-From header tag.  Servers\r\n  SHOULD support  Derived-From.\r\n\r\n  Servers SHOULD implement this support, but it is not required.\r\n\r\n6.4.6 Branch and resource Graphs\r\n\r\n  Clients often desire the ability to obtain history information about\r\n  branches and resources.  This protocol defines a method for obtaining\r\n  this information by using the PROPFIND method.\r\n\r\n6.4.6.1 Graph Discovery\r\n\r\n  The DAV:enumgraphs tag is used to discover the types of graphs that\r\n  are supported by a server on a given branch.  Clients should obtain\r\n  this property from the branch.\r\n\r\n  PROPFIND /bn/FHJRH3994 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propfind>\r\n  \t<D:enumgraphs/>\r\n  </D:propfind>\r\n\r\n  TBD - show results\r\n\r\n  This support MUST be provided if branches are supported.\r\n\r\n6.4.6.2 Version History\r\n\r\n  Clients can enumerate the history (check-ins) of a resource by \r\n  requesting its version history graph.  This returns an XML \r\n  document representing the history of the object.  Clients can also \r\n  request that specific properties for each version be returned.\r\n\r\n  PROPFIND /foo/bar.doc HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propfind>\r\n\t<D:graphversionhistory/>\r\n\t...\r\n  </D:propfind>\r\n\r\n  This returns the version history for the specified resource.  For \r\n  each version, the properties identified by \"...\" are returned.\r\n\r\n  Note that a single server may not have all of the version history for\r\n  a document.  In this case, the server should insert the <DAV:seealso \r\n  href=.../> tag.  Clients can then request additional history from the\r\n  identified server.\r\n\r\n  This support MUST be provided if branches are supported.\r\n\r\n6.4.6.3 Branch Derivation Graph\r\n\r\n  Clients can easily obtain the derivation graph for a branch using \r\n  PROPFIND.  The graph is returned as a set of structured XML tags for\r\n  easy parsing. Clients can also request that specific properties for \r\n  each version be returned.\r\n\r\n  PROPFIND /bn/RYURUS99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propfind>\r\n  \t<D:graphbranchderivation/>\r\n\t...\r\n  </D:propfind>\r\n\r\n  TBD - show the XML that is returned\r\n\r\n  This returns the derivation for the specified branch.  For each \r\n  branch, the properties identified by \"...\" are returned.\r\n\r\n  This support MUST be provided if branches are supported.\r\n\r\n6.4.6.4 Branch Merge Graph\r\n\r\n  Clients can easily obtain the merge graph for a branch using \r\n  PROPFIND. The graph is returned as a set of structured XML tags for \r\n  easy parsing. Clients can also request that specific properties for \r\n  each version be returned.\r\n\r\n  PROPFIND /bn/RYURUS99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propfind>\r\n\t<D:graphbranchmerge/>\r\n\t...\r\n  </D:propfind>\r\n\r\n  TBD - show the XML that is returned\r\n\r\n  This returns the merge graph for the specified branch.  For each \r\n  branch, the properties identified by \"...\" are returned.\r\n\r\n  Servers SHOULD support this property, but it is not required.\r\n\r\n6.4.6.5 Resource Version Graph\r\n\r\n  Clients can easily obtain the version graph (history of a resource \r\n  across all branches) for a resource using PROPFIND.  The graph is \r\n  returned as a set of structured XML tags for easy parsing. Clients \r\n  can also request that specific properties for each version be \r\n  returned.\r\n\r\n  PROPFIND /foo/bar.doc HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propfind>\r\n\t<D:graphversiongraph/>\r\n\t...\r\n  </D:propfind>\r\n\r\n  TBD - show the XML that is returned (note that each version indicates\r\n  the branch in which it was changed).\r\n\r\n  This returns the resource version graph for the specified resource.  \r\n  For each resource, the properties identified by \"...\" are returned.\r\n  Servers SHOULD support this property, but it is not required.\r\n\r\n6.4.7 Modifying Branches\r\n\r\n  There are times when the attributes and relationships of a branch \r\n  must be changed.  These properties are changed via PROPPATCH.  \r\n  Servers SHOULD support this operation, but are not required to do so.\r\n\r\n  PROPPATCH  /bn/RYURUS99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propertyupdate>\r\n     <D:set>\r\n      <D:derivedfrom>http://www.foobar.com/bn/DDEJRJ445</D:derivedfrom>\r\n      <D:inherit>Manual</D:inherit>\r\n     </D:set>\r\n  </D:propertyupdate>\r\n\r\n6.4.8 Synchronizing Branches\r\n\r\n  In some scenarios, clients are working on separate branches to keep\r\n  themselves isolated from other team members.  However, they \r\n  occasionally need to synchronize their branch with the derived-from\r\n  branches so that they don\u2019t get too far out of synchronization.  This\r\n  is done by using the DAV:syncbranch tag in a COPY request.  Note that\r\n  synchronization may result in merge conflicts that need to be \r\n  resolved.  These conflicts are recorded in the resolution queue for\r\n  the branch.\r\n\r\n  COPY /bn/ZZURTU99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Destination: /bn/RYURUS99009\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:syncbranch/>\r\n\r\n  TBD - show resultant XML\r\n\r\n  Servers SHOULD support this operation, but are not required to do so.\r\n\r\n6.4.9 Setting Current Versions\r\n\r\n  Each branch maintains the notion of a current version of every \r\n  resource.  This version is used if the client doesn\u2019t specify a \r\n  specific version.  This operation is performed using the \r\n  DAV:setcurrent tag with the PROPPATCH method.  Clients set this \r\n  property on a resource specifying the branch.  The result is that the\r\n  version is made the current version in the specified branch.\r\n\r\n  It should be noted that the current version is the latest version. If\r\n  a client desires to work on a new version, possibly creating multiple\r\n  versions that are not accessed by default, they should utilize a \r\n  branch.  When new versions are added, they automatically become the \r\n  current version.  However, there are times when a client wants to \r\n  make an older version the current version.  To do this, the client \r\n  issues a DAV:setcurrent tag on the branch root.\r\n\r\n  The DAV:setcurrent tag is also used to undelete and item if the \r\n  server doesn\u2019t permanently destroy items when they are deleted.\r\n\r\n  PROPPATCH  /bn/FISIE99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propertyupdate>\r\n\t<D:set>\r\n\t<D:setcurrent>DAV:FHFH4593</D:setcurrent>\r\n\t</D:set>\r\n  </D:propertyupdate>\r\n\r\n  If a server supports branches, then it MUST support this operation.\r\n\r\n6.4.10 Merging Branches\r\n\r\n  Branches are often used to isolate team members while they are \r\n  working.  When they complete their tasks, they often want to merge \r\n  their changes from their isolated Branch to a shared Branch.  This is\r\n  often referred to as promoting a change.  This operation is performed\r\n  using the DAV:merge tag with the COPY method.\r\n\r\n  Clients can request that a single resource be merged or that all \r\n  changed resources in the branch be merged.  Merging Branches may \r\n  result in merge conflicts.  Clients can choose whether or not to fail\r\n  the operation if there is a conflict.  If the client requests not to\r\n  fail, then the server will create an entry in the target Branch\u2019s \r\n  resolution queue.  Note that this is only a request and servers can \r\n  choose to fail merges if there are conflicts.\r\n\r\n  COPY /bn/RYURUS99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Desitnation: http://www.foobar.com/bn/DFKE34934\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:branchmerge>\r\n\t<D:resource>/foo/bar.htm</D:resource>\r\n  </D:branchmerge>\r\n\r\n  Servers SHOULD support this operation, but are not required to do so.\r\n\r\n6.4.11 Purging Branches\r\n\r\n  Within a Branch, all versions of resources are maintained.  However, \r\n  there are times when the owner of a Branch wants to eliminate all of \r\n  the intermediate versions of a resource or set of resources.  That \r\n  is, only keep the latest version or latest n versions.  This \r\n  operation is performed using the purge tag with the DELETE method.\r\n\r\n  The DAV:purge tag can be specified at the branch level to effect all\r\n  resources or at the resource level to effect a single resource.  The\r\n  keep parameter can be specified to indicate the number of versions to\r\n  keep.  The default value for keep is one.\r\n\r\n  DELETE /bn/RYURUS99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:purgeset>\r\n\t<D:purge>\r\n\t\t<D:resource>/foo/bar.htm<keep>3</keep></D:resource>\r\n\t</D:purge>\r\n  </D:purgeset>\r\n\r\n  Servers SHOULD support this operation, but are not required to do so.\r\n\r\n6.5 Branch Discovery\r\n\r\n  Clients can discover the known Branches using the DAV:enumbranches.  \r\n  The basebranch, before, and after tags can be used to qualify the \r\n  discovery based on parent branch and creation date.  This is defined\r\n  using the PROPFIND method.\r\n\r\n  PROPFIND /bn/RYURUS99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version= 1.0 ?>\r\n  <?xml:namespace ns=DAV: prefix= D ?>\r\n  <propfind>\r\n\t<D:enumnbranches/>\r\n  </propfind>\r\n\r\n  TBD - show resultant XML\r\n\r\n  If a server supports branches, then it MUST support this operation.\r\n\r\n6.6 Branch Check-Ins\r\n\r\n  Clients can discover the check-ins to a branch using the \r\n  DAV:checkins.  The before and after parameters can be used to \r\n  qualify the discovery based on creation date.  \r\n\r\n  PROPFIND  /bn/ci/RYURUS99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propfind>\r\n\t<D:checkins/>\r\n  </D:propfind>\r\n\r\n  TBD - show resultant XML\r\n\r\n  Servers SHOULD support this operation, but are not required to do so.\r\n\r\n6.7 Sharing\r\n\r\n  Some version control systems allow resources to be shared across \r\n  different portions of the namespace.  This sharing can take two \r\n  forms: (a) all references refer to the exact same object and changes \r\n  are seen everywhere, (b) references to an object are qualified \r\n  by a specific version and new versions are not automatically seen.\r\n\r\n  This functionality is supported via the proposed referential members \r\n  and an additional resource property.  The property DAV:shareversion \r\n  and can be set only on referential members.  When the property \r\n  doesn\u2019t exist, the reference is to the default version and all \r\n  changes are shared.  When the property is defined, the reference is \r\n  to the indicated version only.\r\n\r\n  TBD - give example\r\n\r\n  Servers SHOULD support sharing.\r\n\r\n6.8 Resolution Queues\r\n\r\n  There are times when the version store is in a transitory state \r\n  because of actions that have occurred.  The server tracks and \r\n  maintains lists of issues that need to be resolved as a result of \r\n  these actions.  These lists are referred to as resolution queues.\r\n  Clients can request the resolution issues and react accordingly.  \r\n  Note that the server only manages the list.  That is, the client is\r\n  responsible for resolving the issue (or deciding not to) and \r\n  then removing the resolution item.\r\n\r\n  Servers may choose to block operations on a branch or resource until \r\n  resolutions have been resolved.  In this case, an error is returned \r\n  on any operations against the branch/resource indicating that pending\r\n   resolution items are present.\r\n\r\n  Servers SHOULD support resolution queues.  If a server supports \r\n  branches, it MUST support resolution queues.\r\n\r\n6.8.1 Discovering Resolution Items\r\n\r\n  Conceptually, every object can have associated resolution items.  \r\n  This information is managed on a per-branch basis.  Clients request \r\n  resolution queue information for either a resource or a branch.  The \r\n  reply includes an enumeration of all the resolution items for \r\n  the requested resources/branch.  This is done by issuing a PROPFIND \r\n  for the <DAV:resupdate> property on a branch or a resource.\r\n\r\n  PROPFIND  /bn/RYURUS99009 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propfind>\r\n\t<D:resupdate/>\r\n  </D:propfind>\r\n\r\n  HTTP/1.1\r\n  Content-Length: xxx\r\n  Content-Type: text/xml\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:resset>\r\n  \t<D:resstatus>\r\n\t\t<D:resolutionid>DAV:ZZZZ3493</D:resolutionid>\r\n\t\t<D:resource>http:/foo/bar.htm</D:resource>\r\n\t\t<D:newversion>DAV:FDFEE55544</D:newversion>\r\n\t</D:resstatus>\r\n  </D:resset>\r\n\r\n  Note that if a server doesn\u2019t support resolution queues.  In this \r\n  case, RESQUEUE method calls will see a NOT IMPLEMENTED result.\r\n\r\n  TBD - define valid reasons: upstream changes, merge conflicts, pinned\r\n  share updates, ...\r\n\r\n6.8.2 Deleting Resolution Items\r\n\r\n  Once a client has resolved an issue, they are responsible for \r\n  removing it from the queue.  This is done by tagging a change or by \r\n  resolving the resolution item.\r\n\r\n  In the example below, the client updates a document and specifies the\r\n  resolution item.  This item is deleted if the operation is \r\n  successful.\r\n\r\n  PUT /foo/bar.cpp HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n  Resolution-Id: DAV:DDHRH4955\r\n  ...\r\n\r\n  In the example below, the client deletes the resolution item.  This \r\n  operation is not guaranteed to succeed as the server may require the \r\n  action to be resolved.  \r\n\r\n  PROPPATCH  /bn/DDHRH4955 HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propertyupdate>\r\n\t<D:set>\r\n\t\t<D:resolved/>\r\n\t</D:set>\r\n  </D:propertyupdate>\r\n\r\n6.9 Miscellaneous\r\n\r\n  The following sub-sections detail miscellaneous versioning \r\n  requirements.\r\n\r\n6.9.1 Destroy\r\n\r\n  Many version management systems support the ability to permanently \r\n  destroy tombstones for an object.\r\n  The DESTROY method provides this functionality and servers SHOULD \r\n  support it, but servers are not required to implement it.\r\n\r\n  DESTROY /foo/bar/x.cpp HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  Clients may chose to display deleted but not destroyed objects \r\n  however they choose.  The header keyword Show-Deleted is used to \r\n  indicate if deleted items should be included in the GET request.  By \r\n  default, this is no.  Inclusion of \"Show-Deleted: Y\" indicates that \r\n  deleted resources should be included.  Using \"Show-Deleted: O\" \r\n  indicates that only resources that have been deleted should be \r\n  returned.\r\n\r\n  If the server does not support the notion of DESTROY, then the \r\n  operation will return a failure status.\r\n\r\n6.9.2 Keyword Expansion\r\n\r\n  A common feature of version control systems is to allow keyword \r\n  expansion.  That is, the resource is automatically annotated with \r\n  specific information by the server.  Servers SHOULD implement this \r\n  functionality, but are not required to implement this \r\n  functionality.  To support this functionality, several small changes\r\n  are required.\r\n\r\n  The property Expand-Keywords is available on every resource.  This \r\n  0/1 resource determines if keywords are to be expanded.\r\n\r\n  There currently exist a number of version control systems that \r\n  support keyword expansion in a unique fashion.  Consequently it is \r\n  unlikely that a unified definition of the expansions and expansion \r\n  symbols can be defined.  This protocol provides a mechanism \r\n  for discovering the expansions for a resource that a server supports\r\n  and the associated expansion symbols.  This information is obtained \r\n  by accessing the read-only property expansionsymbols on any resource.\r\n  The read-only property expansionsused returns the keyword expansions \r\n  in use by a specific resource.  As well, the property expansiontypes \r\n  from a branch indicates the file types (based on suffix) for which \r\n  keyword expansion is enabled.\r\n\r\n  Keyword expansion is on a per-branch basis.  However, the branch name\r\n  \"*ALL*\" can be specified when setting expansion types to effect the \r\n  default setting for all branches.  This protocol does not specify if \r\n  keyword expansion occurs on GET or PUT - that is up to each server.  \r\n  Nor is there a requirement for the keywords that must be supported.  \r\n  This is a per-server list.\r\n\r\n  TBD - give example\r\n\r\n7 Language Variant Extensions\r\n\r\n  For sites that maintain multi-language variations of resources, the \r\n  following extensions facilitate this functionality.  Note that \r\n  servers SHOULD support language variants, but are not required to do \r\n  so.\r\n\r\n7.1 Resource Properties\r\n\r\n  Every resource has the read-only property DAV:language-variant.  If a\r\n  server doesn\u2019t support variants, a PROPFIND for this property will \r\n  return empty or NOT IMPLEMENTED.  If the property exists, it returns \r\n  the language variant associated with the resource.\r\n\r\n7.2 Header Extensions\r\n\r\n  The header qualifier Accept-Language allows clients to specify \r\n  language variants they desire.  When this qualifier is present on a \r\n  GET request, the client specifies the desired variants.  Servers take\r\n  this under advisement, but are not required to return a variant of \r\n  the requested type.\r\n\r\n  GET /foo.htm HTTP/1.1\r\n  Host: www.foobar.com\r\n  Accept-Language: German, English\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  When resources are sent to the server in a PUT request, the client\r\n  specifies the language variant of the resource using the header tag \r\n  Content-Language.  \r\n\r\n  PUT /foo.htm HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Language: German\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n  ...\r\n\r\n7.3 Default Variant\r\n\r\n  For a given Branch (or for all branches), clients can establish the\r\n  default language variant that is to be used if clients do not request\r\n  a specific language variant. In the example below, the default \r\n  variant for all Branches is set to German.\r\n\r\n  PROPPATCH /bn/* HTTP/1.1\r\n  Host: www.foobar.com\r\n  Content-Type: text/xml\r\n  Content-Length: xxxx\r\n\r\n  <?xml version=\"1.0\" ?>\r\n  <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\r\n  <D:propertyset>\r\n\t<D:set>\r\n\t\t<D:deflanguage>German</D:defaultlanguage>\r\n\t</D:set>\r\n  </D:propertyset>\r\n\r\n8 Internationalization Considerations\r\n\r\n  TBD\r\n\r\n9 IANA Considerations\r\n\r\n  This protocol defines several new URI schemes:\r\n  - DAV:, for version-specific references\r\n\r\n10 Security Considerations\r\n\r\n  TBD\r\n\r\n11 XML Element Definitions\r\n\r\n  Some element definitions are reused from the WebDAV Distributed \r\n  Authoring Protocol specfication  [WebDAV], however, this \r\n  specification does introduce new DAV: DTD.\r\n\r\n  TBD - define the new DAV: DTD\r\n\r\n12 References\r\n\r\n  [RFC2068] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, \r\n  T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1.\" RFC 2068. \r\n  U.C. Irvine, DEC, MIT/LCS. January, 1997.\r\n\r\n  [RFC2119] S. Bradner, \"Key Words for use in RFCs to Indicate  \r\n  Requirement Levels.\" RFC 2119, BCP 14.  Harvard University. \r\n  March,    1997.\r\n\r\n  [WebDAV] Y. Y. Goland, E. J. Whitehead, Jr., A. Faizi, S. R. Carter, \r\n  D. Jensen, \"Extensions for Distributed Authoring on the World Wide \r\n  Web -- WEBDAV\".  Microsoft, U.C. Irvine, Netscape, Novell. \r\n  Internet-draft, work-in-progress.  <draft-ietf-webdav-protocol-08>\r\n\r\n  [White] E. J. Whitehead, \"A Web Versioning Protocol\".  \r\n  Work-in-progress.  <draft-whitehead-webdav-versioning-00.txt>\r\n\r\n13 Author\u2019s Address\r\n\r\n  Christopher Kaler\r\n  Microsoft\r\n  One Microsoft Way\r\n  Redmond, WA 98053\r\n  Email: ckaler@microsoft.com\r\n", "encoding": "Windows-1252"}