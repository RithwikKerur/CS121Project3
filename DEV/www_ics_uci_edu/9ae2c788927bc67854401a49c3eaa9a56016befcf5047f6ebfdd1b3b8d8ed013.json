{"url": "https://www.ics.uci.edu/~stasio/winter06/lab2/lab2.html", "content": "<html>\r\n\t<head>\r\n\t\t<title>Winter 2005 ICS H22</title></head><body bgcolor=\"#ffcc99\">\r\n\t\t<h2>H22 Lab&nbsp;2 - Savings Calculator</h2>\r\n\t\t<h3>Due Date: Wednesday, January 25, 23:59PM</h3>\r\n\t\t<h3>I. Overview</h3>\r\n\t\t<P>\r\n\t\t\tThis lab is written to accomplish several objectives: The first objective is \r\n\t\t\tfor you to write an implementation of a\r\n\t\t\t<it>binary search</it>\r\n\t\t\talgorithm, which is a very common and useful algorithm in computer science. \r\n\t\t\tWriting a binary search algorithm is all the more useful because binary search \r\n\t\t\tis a non-trivial example of a\r\n\t\t\t<it>recursive algorithm</it>, which is a fundamental algorithmtic concept. \r\n\t\t\tSecondly, this programming exercise asks you to write a\r\n\t\t\t<it>robust</it>\r\n\t\t\tcode, which reacts well to incorrect inputs given by the user, inputs out of \r\n\t\t\trange for the algorithm to meaningfully handle, display, etc.\r\n\t\t</P>\r\n\t\t<P>Optionally (a bonus part), you can experiment with a graphical interface.&nbsp; \r\n\t\t\tThis is a good exercise for you (once you are done with the basic part), \r\n\t\t\tbecause the way the graphical intefaces are implemented utilizes several java \r\n\t\t\tAPI classes, and hence this exercise will give you some practice with the way \r\n\t\t\tjava implements class hierarchy. In particular, you will see how to deal with \r\n\t\t\texceptions thrown by some of the methods you will use.&nbsp;</P>\r\n\t\t<P></P>\r\n\t\t<P><EM>Hint:&nbsp; Before you start, read the whole lab, and take note of the paragraph \r\n\t\t\t\ton grading at the end...</EM></P>\r\n\t\t<h3>II. The Binary Search Algorithm</h3>\r\n\t\tSuppose that you are planning an expensive purchase some time in the future. \r\n\t\tFor example, you may be planning for the down-payment of a house or saving for \r\n\t\tcollege tuition. You would like to set aside a fixed amount of cash each month \r\n\t\tand put it in an interest-bearing account so that you have the desired amount \r\n\t\tof money at the desired time. You will write a program this week that \r\n\t\tcalculates the amount of money required each month.\r\n\t\t<p>\r\n\t\t\tThere are three input numbers that are required from the user. The first is the \r\n\t\t\ttarget savings amount which will be expressed as an integer representing the \r\n\t\t\ttarget number of <EM>dollars</EM> to be saved. We will call this <strong>targetSavings</strong>. \r\n\t\t\tThe second piece of input is a positive integer with the number of <EM>months</EM>\r\n\t\t\tuntil the savings must be achieved. We will call this <strong>numberOfMonths</strong>.&nbsp; \r\n\t\t\tThe final piece of input is a double with the annual interest rate (i.e. the \r\n\t\t\tnumber 5.3 would be an annual interest rate of 5.3%). We will call this <strong>interestRate</strong>.&nbsp; \r\n\t\t\tYou will then use these three numbers to calculate the amount that must be \r\n\t\t\tsaved each month. You will need at least two Java methods to calculate this \r\n\t\t\tamount. You may choose to have more in order to break up your code into \r\n\t\t\tmanageable sized tasks.\r\n\t\t</p>\r\n\t\t<P>Notice that the input is&nbsp;a triple of types (int,int,double).&nbsp; These \r\n\t\t\tare the types of the input values, but we recommend that internally your \r\n\t\t\talgorithms should use a different representation of all amounts of money.&nbsp; \r\n\t\t\tNamely, we recommend that you denote monetary values as integers <EM>denoting the \r\n\t\t\t\tnumber of cents.&nbsp; </EM>This is because a cent is the smallest money \r\n\t\t\tunit, and because an alternative representation as a pair of two integers, one \r\n\t\t\trepresenting dollars and the other&nbsp;representing cents, is less convenient \r\n\t\t\tto work with.&nbsp;\r\n\t\t</P>\r\n\t\t<P>\r\n\t\t\tThe first Java method is a method called <strong>amountSaved</strong> that \r\n\t\t\ttakes in a candidate monthly payment in cents <strong>candidatePayment</strong> \r\n\t\t\tand then calculates the amount that would be saved if the person sets aside <strong>\r\n\t\t\t\tcandidatePayment</strong> cents each month for <strong>numberOfMonths</strong>\r\n\t\t\tmonths. The interest will be compounded monthly. That is, starting with the \r\n\t\t\tinitial value of zero, you will iterate for <strong>numberOfMonths </strong>months, \r\n\t\t\tand each month you will add in <strong>candidatePayment </strong>and multiply \r\n\t\t\tthe amount saved by <strong>(1 + (interestRate/(12*100)))</strong>.&nbsp; At \r\n\t\t\teach point, the amount saved should be rounded down to an integer since we will \r\n\t\t\tassume that the bank does not keep track of fractions of cents. For \r\n\t\t\tconsistency, it is best for every one to round downwards instead of using the \r\n\t\t\tround method in class Math. (I bet that this is what real banks do too.)&nbsp; \r\n\t\t\t[[As a bonus you can experiment with your code to find out the effects of such \r\n\t\t\trounding \"error\" for some realistic interest rates:&nbsp; What's the \r\n\t\t\taccumulative effect of the way the bank rounds the cent fractions?]]</P>\r\n\t\t<p>\r\n\t\t\tOnce you have your method <strong>amountSaved </strong>working you need to \r\n\t\t\twrite a method that calculates the correct amount <strong>monthlyPayment </strong>\r\n\t\t\tto set aside. This method should be called <STRONG>calculateMonthlyPayment</STRONG>, \r\n\t\t\t(for purpose of simplifying our testing of your code, all these methods should \r\n\t\t\tbe methods of a <A href=\"http://www.ics.uci.edu/~stasio/winter06/lab2/SavingsCalculator.java\">\r\n\t\t\t\tSavingsCalculator</A> class, and it should take a triple (int,int,double) \r\n\t\t\tas an input, as discussed above. The output of this method should be the \r\n\t\t\tsmallest value of <strong>X </strong>such that <strong>amountSaved( X ) </strong>\r\n\t\t\tis at least <strong>targetSavings</strong>.&nbsp; This is the minimal monthly \r\n\t\t\tpayment (in cents) required to achieve the input target savings given the input \r\n\t\t\tnumber of months and the interest rate.&nbsp; To find this value, your method \r\n\t\t\tshould do a <EM>binary search </EM>for the desired <strong>monthlyPayment</strong>.&nbsp; \r\n\t\t\t(You can read more about a binary search algorithm is in chapter 9.3.3.)&nbsp; \r\n\t\t\tIn order to do a proper binary search, you will need an upper bound and a lower \r\n\t\t\tbound for the correct <strong>monthlyPayment</strong>. You should take 0 as a \r\n\t\t\tlower bound, while a reasonable upper bound could be <strong>targetSavings/numberOfMonths</strong>. \r\n\t\t\tNote that this is the amount you would have to set aside if the interest rate \r\n\t\t\twere 0. The binary search algorithm preceeds as follows:&nbsp; Given the \r\n\t\t\tcurrent <STRONG>(min,max)</STRONG> values and the target value <STRONG>t</STRONG>, \r\n\t\t\tat each iteration the binary search tests if the value for the monthly payment \r\n\t\t\tgiven by median <STRONG>med=(min+max)/2</STRONG>, is greater or less than the \r\n\t\t\tdesired value <STRONG>t</STRONG> . This test will require the <strong>amountSaved </strong>\r\n\t\t\tmethod which you have written.&nbsp; If the <STRONG>amountSaved(med)</STRONG> is \r\n\t\t\tgreater than <STRONG>t</STRONG>, you should recurse the binary search algorithm \r\n\t\t\ton interval <STRONG>(min,med)</STRONG>, and if it is smaller than <STRONG>t</STRONG>, \r\n\t\t\tthen you should recurse the binary search algorithm on interval <STRONG>(med,max).</STRONG>&nbsp; \r\n\t\t\tThis way, the algorithm can zoom down on the smallest value <STRONG>m</STRONG> s.t.\r\n\t\t\t<STRONG>amountSaved(m)</STRONG> is greater or equal to <STRONG>t</STRONG>.\r\n\t\t</p>\r\n\t\t<P><EM>Hint: A good way to keep a sanity check and see if your algorithm does what you \r\n\t\t\t\texpect it to do, is to embed in your code commands that print out all sort of \r\n\t\t\t\tintermediary values your algorithm deals with.&nbsp; Once you are satisfied \r\n\t\t\t\tthat the code does what it's supposed to, you can remove these printing \r\n\t\t\t\tcommands.</EM></P>\r\n\t\t<p>\r\n\t\t\t<H3>III. Interface, Robust Code, Exception Handling</H3>\r\n\t\t<P>\r\n\t\tIn your program you should only assume that the user inputs some strings as the \r\n\t\tvalues of the three input fields. The inputs should be taken from a console. \r\n\t\t(See examples how to do this in the book and in the lecture notes.) The correct \r\n\t\tinputs should be two non-negative integer values for the target savings and the \r\n\t\tnumber of months, and a non-negative real value between 0 and 100, for the \r\n\t\tinterest rate. Therefore, you must check for the unreasonable input values \r\n\t\t(like non-numerical values, negative values, out of range, etc.) You also need \r\n\t\tto check for more subtle problems, like if the number of months is so large \r\n\t\tthat even setting aside a single penny a month will result in too much savings. \r\n\t\tIn each case, you need to print out a reasonable and polite error message to \r\n\t\tthe user. If there are no errors, you should output the monthly value to be \r\n\t\tsaved in dollars and cents, e.g. $45.27.\r\n\t\t<P></P>\r\n\t\t<P>\r\n\t\t\tThe best way to handle certain type of incorrect inputs is by using\r\n\t\t\t<it>exceptions</it>. In general, from any input (console, file, graphics), you \r\n\t\t\tshould assume that the inputs given by the user can be extracted only as \r\n\t\t\tstrings. To extract integer (or double, float, etc) values from such input \r\n\t\t\tstring <strong>s</strong>, you can use a method like <strong>Integer.valueOf(s).intValue()</strong>\r\n\t\t\t, (see examples in ch.1 in the textbook), or, a simpler method <strong>Integer.parseInt(s)</strong>. \r\n\t\t\tThen, to handle the case when <strong>s</strong> cannot be parsed as an integer \r\n\t\t\t(or double, float, etc) value, you should catch and appropriately handle the \r\n\t\t\texception(s) thrown by these methods. One way to find what exceptions these \r\n\t\t\tmethods throw is to program it first without handling the exception, and see \r\n\t\t\twhat the java interpreter reports when the input string is wrong. Another (and \r\n\t\t\tbetter) way is to check a java reference for all exceptions thrown by the \r\n\t\t\tinput-parsing method you use. For example, for the exceptions thrown by the \r\n\t\t\tabove method, see <A href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Integer.html\">\r\n\t\t\t\thttp://java.sun.com/j2se/1.4.2/docs/api/java/lang/Integer.html</A>. You can \r\n\t\t\tfind appropriate classes, methods, and their exceptions to handle \r\n\t\t\tstring-to-integer (string-to-float, string-to-double, etc) conversion starting \r\n\t\t\tfrom the link above which describes the <strong>Integer</strong> class, and \r\n\t\t\texploring the related classes (<strong>Float</strong>, <strong>Double</strong>, \r\n\t\t\tetc).\r\n\t\t</P>\r\n\t\t<P>To facilitate easy testing of your code (both for us and for you), we have \r\n\t\t\timplemented a class <A href=\"http://www.ics.uci.edu/~stasio/winter06/lab2/SavingsCalculatorTester.java\">\r\n\t\t\t\tSavingsCalculatorTester.java </A>, which enables you to write a series of \r\n\t\t\ttest cases, in a file like <A href=\"http://www.ics.uci.edu/~stasio/winter06/lab2/input.in\">\r\n\t\t\t\tinput.in</A>.&nbsp; The SavingsCalculatorTester.test method creates on \r\n\t\t\tobject of class Input, and here is the definition of the java class <A href=\"http://www.ics.uci.edu/~stasio/winter06/lab2/Input.java\">\r\n\t\t\t\tInput.java</A>. The SavingsCalculatorTester reads each line of the input.in \r\n\t\t\tfile, interprets each of these lines as triples of inputs, and calls the <strong>SavingsCalculator.calculateMonthlyPayment</strong>\r\n\t\t\tmethod on each of these inputs. You should modify the code of the \r\n\t\t\tSavingsCalculatorTester (where specified) so that it handles all the input \r\n\t\t\terrors as explained above, because as it is right now this code assumes the <STRONG>\r\n\t\t\t\tinput.in</STRONG> file contains correctly formed inputs.\r\n\t\t</P>\r\n\t\t<P></P>\r\n\t\t<H3>Turning in Your Code</H3>\r\n\t\t<P>\r\n\t\t\tSee the <A href=\"http://www.ics.uci.edu/~stasio/winter06/lab_intro.html\">introduction \r\n\t\t\t\tto the lab</A> to find out how to turn in your files.\r\n\t\t</P>\r\n\t\t<H3>Grading</H3>\r\n\t\t<P>You will be graded on correctness of your binary search algorithm (70%), and on \r\n\t\t\thow robust your code is to input errorrs (30%).</P>\r\n\t\t<H3>Bonus (Optional Part): &nbsp;Graphical user interface (and learning about class \r\n\t\t\thierarchy)</H3>\r\n\t\t<P>Here is a sample code which you can use to experiment with a graphical user \r\n\t\t\tinterface for a program you have written:\r\n\t\t</P>\r\n\t\t<P><A href=\"http://www.ics.uci.edu/~stasio/winter06/lab2/GraphicalSavingsCalculator.java\">GraphicalSavingsCalculator.java</A>\r\n\t\t</P>\r\n\t\t<P>In this code, the action starts when the user presses the <STRONG>Calculate </STRONG>\r\n\t\t\tbutton. Your code will start out in the <STRONG>paint </STRONG>method, but you \r\n\t\t\twill need to call other methods from there to do your calculations. You may \r\n\t\t\talso decide to have some data that is global to the entire class, although you \r\n\t\t\tshould only need to keep the three input variables global. You will notice that \r\n\t\t\tthis GUI implementation uses the <STRONG>JFrame</STRONG> JAVA API class, which \r\n\t\t\tis a part of the <STRONG>java.awt</STRONG> package. As you understand how this \r\n\t\t\tGUI works, you will see the <STRONG>paint</STRONG> method taking the <STRONG>Graphics</STRONG>\r\n\t\t\tobject as an argument. This <STRONG>Graphics</STRONG> class admits methods like <STRONG>\r\n\t\t\t\tdrawString</STRONG> which the code above uses to display outputs of the \r\n\t\t\tcalculations. (For now this code only basically copies the inputs provided by \r\n\t\t\tthe user, but you will re-write to make these outputs meaningful.) As you try \r\n\t\t\tto use this code you will notice that the <STRONG>drawString</STRONG> method \r\n\t\t\twrites out the output without clearing first the previous output written on the \r\n\t\t\tsame spot. Examine the methods provided by this API class and find one that \r\n\t\t\tallows you to print the output cleanly, with the outputs of the previous \r\n\t\t\tcomputations erased first. You can examine the documentation of these classes \r\n\t\t\ton-line. For example, the JFrame class is described here: <A href=\"http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/JFrame.html\">\r\n\t\t\t\thttp://java.sun.com/j2se/1.4.2/docs/api/javax/swing/JFrame.html</A>, and \r\n\t\t\tthe Graphics class is described here: <A href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Graphics.html\">\r\n\t\t\t\thttp://java.sun.com/j2se/1.4.2/docs/api/java/awt/Graphics.html</A>.\r\n\t\t</P>\r\n\t</body>\r\n</html>\r\n", "encoding": "ascii"}