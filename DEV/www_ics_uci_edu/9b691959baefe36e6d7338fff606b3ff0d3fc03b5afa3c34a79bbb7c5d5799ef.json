{"url": "https://www.ics.uci.edu/~theory/269/150220.html", "content": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>Theory Seminar, February 20, 2015</title>\n    <link rel=\"stylesheet\" href=\"../stylesheet.css\" type=\"text/css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"http://www.ics.uci.edu/~theory/logo/CATOC2.jpg\"></a>\n<h2><a href=\"/~theory/269/\">Winter 2015: Theory Seminar</a><br>\nICS, Room 243, 1:00pm\n\n<hr />\nFebruary 20, 2015:</h2>\n<h1>\nThe Simplex Algorithm is NP-Mighty\n</h1>\n<h2>\nWill Devanny\n</h2>\n\n<p>\nWe propose to classify the power of algorithms by the complexity of the\nproblems that they can be used to solve. Instead of restricting to the\nproblem a particular algorithm was designed to solve explicitly, however, we\ninclude problems that, with polynomial overhead, can be solved \u2018implicitly\u2019\nduring the algorithm\u2019s execution. For example, we allow to solve a decision\nproblem by suitably transforming the input, executing the algorithm, and\nobserving whether a specific bit in its internal configuration ever switches\nduring the execution.\n  We show that the Simplex Method, the Network Simplex Method (both with\n  Dantzig\u2019s original pivot rule), and the Successive Shortest Path Algorithm\n  are NP-mighty, that is, each of these algorithms can be used to solve any\n  problem in NP. This result casts a more favorable light on these\n  algorithms\u2019 exponential worst-case running times. Furthermore, as a\n  consequence of our approach, we obtain several novel hardness results. For\n  example, for a given input to the Simplex Algorithm, deciding whether a\n  given variable ever enters the basis during the algorithm\u2019s execution and\n  determining the number of iterations needed are both NP-hard problems.\n  Finally, we close a long-standing open problem in the area of network flows\n  over time by showing that earliest arrival flows are NP-hard to obtain.\n\n<p>\n  This paper was presented at SODA 2015.\n\n</body>\n</html>\n\n", "encoding": "utf-8"}