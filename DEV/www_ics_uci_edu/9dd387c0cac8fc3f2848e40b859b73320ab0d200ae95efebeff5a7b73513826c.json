{"url": "https://www.ics.uci.edu/~thornton/ics33/ProjectGuide/Project1/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 33 Summer 2013, Project #1: Easy Money</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 33 Summer 2013 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../ProjectGuide\">Project Guide</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 33 Summer 2013<br />\n   Project #1: <i>Easy Money</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Wednesday, July 10, 11:59pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>Like many aspects of our lives that we view transparently, when we make many purchases in stores, we often simply hand a piece of plastic to a cashier and &mdash; voila! &mdash; all of the details are taken care of automatically; the purchase is charged to the card and, if it's a credit card, we'll need to pay for it later.  For us, it seems that nothing could be more convenient.  Behind the scenes, though, there is a fair amount of technology that plays a role in the transaction:</p>\n\n<ul>\n  <li>The cash register contacts a clearinghouse via the Internet to check whether the card is legitimate and has a sufficient available balance to pay for the transaction.</li>\n  <li>The clearinghouse contacts the card issuer (e.g., a bank) via the Internet (or, more likely, a private network) and asks for the transaction to be performed.  If it's a credit card, the purchase amount is added to the balance; if it's a debit card, the purchase amount is deducted from the balance of the underlying account.</li>\n  <li>The card issuer does a variety of things behind the scenes, including fraud detection, currency conversions (if, for example, the purchase is being made in Euros but the card is issued in US Dollars), updating its own internal records, and so on.</li>\n</ul>\n\n<p>This project explores a couple of aspects of this problem, by asking you to write a program that runs on behalf of an international credit union that, among other things, issues credit cards.  Your program will track information about all of the cards that have been issued, and change that information as transactions are processed.  Cards are issued in different currencies (e.g., US Dollars, Japanese Yen), but purchases can be made in currencies other than the one that the card was issued in, with appropriate conversions being done by your program.  The information managed by your program will also need to have some level of <i>persistence</i>; when the program is stopped, the current set of card information will need to be saved to a file, and then loaded when the program is started again.</p>\n\n<p>As you work through this project, you'll have the opportunity to learn more about Python classes and, specifically, how to create classes whose objects are more than just holders of data; your objects will be able to <i>do</i> things, as opposed to just <i>storing</i> things.  You'll also get a chance to write special methods that overload operators like +, -, &lt;, and so on, and to explore parts of the Python standard library that may be new to you.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The program</p>\n\n<p>Your program manages information about a collection of credit cards.  For each card that has been issued, the following information is kept:</p>\n\n<ul>\n  <li>The <i>card number</i>, which is a sequence of digits that uniquely identifies the card &mdash; no two cards can ever have the same card number</li>\n  <li>The <i>currency</i> in which the card's balance is being maintained.  Different cards will be issued in different currencies &mdash; some in US Dollars, others in Euros, and so on.  (See the section titled <i>Currencies</i> below for more explanation about currencies and how they affect your program.)</li>\n  <li>The <i>balance</i>, which is the total amount of money that has spent using the card and has not yet been paid back.  The balance of a newly-issued card is always zero; the balance increases as purchases are made and decreases as payments are received.</li>\n  <li>The <i>limit</i>, which is the maximum amount of money that can be spent using the card without paying it back.  No purchase will be permitted if it would cause the card's balance to exceed its limit.</li>\n  <li>(In a more complete system, identifying information about the card owner would also be necessary, but we'll leave these details out in this project in the interest of simplicity.)</li>\n</ul>\n\n<p>At startup, your program will read a <i>currency file</i> called <b>currency.txt</b>, which describes the currencies to be used by the program.  The contents of that file are described in the section titled <i>Currencies</i> below.  If that file can't be opened, the program should simply print an error message and end.</p>\n\n<p>Also, your program will read the file that contains the saved data from the last execution of the program (if any).  This is described in the section titled <i>Persistence</i> below.  If this file cannot be opened and read, the program should simply proceed with an empty collection of credit cards.</p>\n\n<p>Once this data has been loaded, it's now time for your program to process commands.  Your program should read a sequence of commands from the console and write the output from each command to the console.  It should print no prompts or other output (e.g., no user-friendly menus or prompts that say \"Enter a command: \"), other than the output required in response to each command.</p>\n\n<p>When the <b>EXIT</b> command is entered, the program saves information about all of the credit cards currently issued, so it can be loaded again the next time the program starts.  See the section titled <i>Persistence</i> below for more details.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Currencies</p>\n\n<p>While residents of the United States transact most of their business using US Dollars, it's certainly not the case that all financial business across the world is transacted that way.  There are almost as many currencies in the world as there are countries, and the relative values of those currencies (as well as the real value of those currencies, in terms of their purchasing power) fluctuate over time.  Since your program will be able to handle transactions in any of a number of different currencies, it will be necessary for your program to know those relative values.</p>\n\n<p>When your program starts up, it will expect to read a text file called <b>currency.txt</b> that defines which currencies will be supported and what their relative values are.  The format of that file will be as follows:</p>\n\n<ul>\n  <li>On each line is the specification of a single currency supported by the program.  The first currency in the file is the <i>baseline currency</i>; all relative values are quoted in terms of the baseline currency.</li>\n  <li>Each line begins with a three-letter code denoting the kind of currency.  Your program need only read the codes from this file and trust that they're correct, but if you're curious about where the codes come from, a pretty complete list is available on <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">Wikipedia</a>.</li>\n  <li>The code is followed by a space, which is then followed by a non-negative integer that represents the maximum number of decimal places that the currency can be represented in.  For example, USD (US Dollars) would have a maximum number of two decimal places, because the smallest coin is a penny, which is worth one-hundredth of a dollar.</li>\n  <li>The maximum number of decimal places is followed by a space, which is then followed by the value of the currency relative to the baseline currency.  For example, if the baseline currency is <b>USD</b> and another currency's code is <b>EUR</b> with a value of <b>1.3024</b>, that means that one USD buys 1.3024 EUR.  (Make sure you get the direction of that relationship correct; it's easy to get confused.)</li>\n  <li>The currency's value is followed by another space and the rest of the line contains a descriptive name for the currency (e.g., <b>Hungarian Forint</b>), which your program won't use, but helps the currency file to make more sense to a human reader.</li>\n</ul>\n\n<p>An example currency file is linked below, with data I derived from the <a href=\"http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml\">European Central Bank</a> on June 26, 2013 (and converted the baseline currency from Euros to US Dollars).  (Note that I made up the number of decimal places for most currencies, so feel free to adjust them if you know the truth is different from my guess; I didn't take the time to research all of them.)</p>\n\n<ul>\n  <li><a href=\"currency.txt\">currency.txt</a></li>\n</ul>\n\n<p>Having read this information at startup, your program will be expected to make the appropriate conversions for all of the currencies specified.  Amounts should always be calculated to no more than the maximum number of decimal places for a particular currency (e.g., given my example currency file, you'll never have 1.0562 US Dollars or 75.56 Yen).</p>\n\n<p>In general, you can assume that the file's format will be as described here, but you shouldn't assume that the file will always be precisely the example linked here.  There might be more or fewer currencies, and US Dollars will not always be the baseline currency.</p>\n\n</div>\n\n<div class=\"section\">\n\t\n<hr />\n\n<p class=\"title\">Commands</p>\n\n<p>The commands your program should support are listed in the table below.  For each command, the <b>Format</b> column specifies what the user would input, and the <b>Output</b> column specifies a list of the possible outputs, but any given instance of a command will only ever generate one line of output.</p>\n\n<table class=\"normal\">\n  <tr class=\"top\">\n    <td>Command</td>\n    <td>Format</td>\n    <td>Description</td>\n    <td>Output</td>\n  </tr>\n  <tr>\n    <td>ISSUE</td>\n    <td>ISSUE&nbsp;<i>currency_code</i>&nbsp;<i>limit</i></td>\n    <td>Issues a new credit card, denominated in the currency specified.  For example, given the example currency file, <b>ISSUE USD 5000</b> would issue a new credit card denominated in US Dollars with a credit limit of $5,000.  The given currency must exist and the credit limit must be positive.  Your program must give the card a unique card number, different from all of the others that have ever been issued; you can solve that problem any way you'd like.</td>\n    <td>ISSUED&nbsp<i>new_card_number</i><br />\n    \tNO_SUCH_CURRENCY<br />\n    \tNEGATIVE_LIMIT</td>\n  </tr>\n  <tr>\n    <td>CANCEL</td>\n    <td>CANCEL&nbsp;<i>card_number</i></td>\n    <td>Cancels an existing credit card, given its card number.  The card must exist already and it must have a zero balance in order to be canceled (i.e., the card must be paid off before it can be canceled).</td>\n    <td>CANCELED&nbsp;<i>card_number</i><br />\n    \tNO_SUCH_CARD<br />\n    \tNONZERO_BALANCE</td>\n  </tr>\n  <tr>\n    <td>PURCHASE</td>\n    <td>PURCHASE&nbsp;<i>card_number</i>&nbsp;<i>currency_code</i>&nbsp;<i>amount</i></td>\n    <td>Makes a purchase against an existing credit card.  The card must exist.  The purchase can be in any known currency.  The amount must be positive.  If the card's balance <i>plus</i> the new amount (converted to the card's currency) is not above the card's limit, the balance is increased accordingly and the purchase is authorized; if the new amount would be above the card's limit, the charge is denied.</td>\n    <td>AUTHORIZED&nbsp;<i>card_currency_code</i>&nbsp;<i>new_balance</i><br />\n    \tOVER_LIMIT<br />\n    \tNO_SUCH_CARD<br />\n    \tNO_SUCH_CURRENCY<br />\n        NONPOSITIVE_AMOUNT</td>\n  </tr>\n  <tr>\n    <td>PAYMENT</td>\n    <td>PAYMENT&nbsp;<i>card_number</i>&nbsp;<i>currency_code</i>&nbsp;<i>amount</i></td>\n    <td>Makes a payment toward the balance of an existing credit card.  The card must exist.  The payment can be in any known currency.  The amount must be positive.  The card's balance is reduced by the amount of the payment (converted to the card's currency); if the amount paid exceeds the card's balance, the balance is only reduced to zero.</td>\n    <td>PAID&nbsp;<i>card_currency_code</i>&nbsp;<i>new_balance</i><br />\n    \tNO_SUCH_CARD<br />\n        NO_SUCH_CURRENCY<br />\n        NONPOSITIVE_AMOUNT</td>\n  </tr>\n  <tr>\n    <td>EXIT</td>\n    <td>EXIT</td>\n    <td>Exits the program.  Note the persistence requirement in the section titled <i>Persistence</i> below.</td>\n    <td>GOODBYE</td>\n  </tr>\n</table>\n\n<p>(If you've ever had a credit card, you may notice that there is no notion of interest here; you only have to pay back exactly what you spend.  While this lacks some realism, it's one detail that I've left out to keep things simpler.)</p>\n\n<p class=\"subtitle\">An example of the program's execution</p>\n\n<p>The following is an example of the program's execution, as it should be.  Boldfaced, italicized text indicates input, while normal text indicates output.  This example assumes the use of the example currency file linked above.  The card numbers issued by my program might be different from the card numbers issued by yours, and that's fine; the only requirement is that they're unique.</p>\n\n<blockquote><pre>\n<b>ISSUE USD 5000</b>\nISSUED 11111\n<b>ISSUE JPY 150000</b>\nISSUED 11112\n<b>ISSUE XYZ 25</b>\nNO_SUCH_CURRENCY\n<b>PURCHASE 11111 USD 1000</b>\nAUTHORIZED USD 1000.00\n<b>PURCHASE 11112 JPY 10000</b>\nAUTHORIZED JPY 10000\n<b>PURCHASE 11111 JPY 10000</b>\nAUTHORIZED USD 1102.29\n<b>PAYMENT 11112 JPY 7000</b>\nPAID JPY 3000\n<b>PAYMENT 11111 USD 1102.29</b>\nPAID USD 0.00\n<b>CANCEL 11111</b>\nCANCELED 11111\n<b>PURCHASE 11111 USD 50</b>\nNO_SUCH_CARD\n<b>EXIT</b>\nGOODBYE\n</pre></blockquote>\n\n<p>Notice, again, that there are no prompts or other output, other than the output that is required as a response to each command.  This may seem strange, but there's a good reason for it, which is described a bit later in the write-up.</p>\n\n<p>The example does not represent a complete test of all the necessary functionality, but it's a good starting point to understand how the program is supposed to work.</p>\n\n<p class=\"subtitle\">Fair assumptions</p>\n\n<p>It's fair to assume that your program will only receive valid input.  We will not test your program with non-existent commands, nor with existing commands in the wrong format.  This is not to say, of course, that error handling is unimportant in real programs, but it adds a level of complexity to this program that doesn't make it any more interesting.  (You're free to implement error checking if you'd like, but it's not something that we'll offer extra credit for.)  In the event that your program receives input that doesn't follow the specifications above, it's fine for your program to ignore it, print an error message, misbehave, or even crash; we won't be testing your program in these circumstances.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Persistence</p>\n\n<p>When the <b>EXIT</b> command is entered and the program is getting ready to shut down, save information about all of the credit cards into a file.  You can call the file anything you'd like, and you can write the file in any format you'd like; it's up to you.  The requirement is that the program must be able to automatically find this file and reload the information the next time it starts up, so that any credit cards that were known previously will be reset to their previous state.</p>\n\n<p>You have a fair amount of latitude here about how to implement this feature, but there are two rules that apply:</p>\n\n<ul>\n  <li>Do not require the user to specify the name of this file, either at shutdown or at startup</li>\n  <li>Do not display the file to the user; this is something that your program should be doing behind the scenes and automatically</li>\n</ul>\n\n<p>You may want to implement this feature near the end of your development, since it will likely be affected by a lot of the other work you're doing, but, in general, the order in which you implement features is up to you.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Wait... what kind of crazy user interface is this?</p>\n\n<p>Unlike programs you may have written in the past, this program has no graphical user interface, or even an attempt at a \"user-friendly\" console interface.  There are no prompts asking for particular input; we just assume that the program's user knows precisely what to do.  It's a fair question to wonder why there isn't any kind of user interface.  Not all programs require the user-friendly interfaces that are important in application software like Microsoft Word or iTunes, for the simple reason that humans aren't the primary users of all software.  For example, consider what happens when you used your web browser to load this page:</p>\n\n<ul>\n  <li>You clicked a link or typed the address of this page into your browser.  That part required a user interface.</li>\n  <li>Your browser connected, via the Internet, to a machine located in the ICS building on campus, asking to converse with a program called a <i>web server</i>.  A web server's job is to listen for requests for web pages, responding with the requested pages (or an error message if no such page exists).  There's no user interface activity during this process, except that the browser may display some kind of icon that provides the user with the feeling that something is happening; otherwise, all of this activity is invisible until the page has been downloaded and can be displayed.</li>\n  <li>Your browser created a request in the format expected by the web server.  Web servers expect requests to be formatted using a standardized format called an <i>HTTP request</i>, which looks something like this:\n<pre>\nGET /~thornton/ics33/ProjectGuide/Project1 HTTP/1.1\nAccept: */*\nAccept-Language: en-us\nUser-Agent: Mozilla/4.0\nHost: www.ics.uci.edu\nConnection: Keep-Alive\n</pre>\nIt's important to point out that, though there's a <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616.html\">complex, detailed standard</a> that specifies what HTTP requests are supposed to look like, it's not necessary for the vast majority of human users of the web to know anything about them.  The requests are composed by browsers and consumed by web servers, with people uninvolved in the process.</li>\n  <li>The web server responds by sending the browser an <i>HTTP response</i>, in another standardized format.  Again, the format is carefully defined in a standard, the details of which are unimportant to almost everyone who uses the web; the responses are composed by a web server and consumed by a browser, with people again uninvolved.</li>\n  <li>The browser, given the information in the response, draws the web page for you to see.</li>\n</ul>\n\n<p>The details of how the web works are not the point of this assignment, but this example serves to suggest that not all software needs a clean, \"user-friendly\" interface.  A web server is intended to simply run quietly for months at a time with no human intervention required.  It may write some information into a log once in a while, especially when something goes wrong, but otherwise it does nothing but listen for requests (which are generated and formatted by browsers, in response to user activity) and respond to them appropriately.</p>\n\n<p>Now consider again the requirements of the program you're being asked to write for this project.  It waits for requests to be sent in via the console &mdash; though they could almost as easily be sent across the Internet, if we preferred &mdash; in a predefined format, then responds using another predefined format.  Our program, in essence, can be thought of in the same way as a web server; it's the engine on top of which lots of other interesting software could be built.  When an attempt in being made to charge to a card, that could be coming from a web form filled out by a user.  When a card's balance is queried, that could be a result of a user logging into the card issuer's web site and asking for it, or dialing into a phone-based system instead.</p>\n\n<p>While we won't be building these other interesting parts, suffice it to say that there's a place for software with no meaningful user interface; it can serve as the foundation upon which other software can be built.  You can think of your program as that foundation.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Raising the level of abstraction using classes</p>\n\n<p>One of the important skills you'll need to develop as you work on gradually larger programs is the ability to find the important <i>abstractions</i> that arise in the problem you're trying to solve, then to find good ways to implement those abstractions.  In Python, implementing an abstraction is most often done using a class, providing you the ability to create objects that hide the details of their implementation.</p>\n\n<p>One of the important abstractions in this project is the ability to represent an amount of money.  You might be tempted to simply use a <b>float</b> object to store it, because you might think of an amount of money as being a number with a fractional part (e.g., 50.75 for fifty dollars and seventy-five cents).  However, there are at least two problems with such a solution:</p>\n\n<ul>\n  <li><b>float</b> values imprecisely repesent base-10 numbers because of their underlying implementation as binary (base-2) numbers.  Surprisingly, there is no exact representation of the numbers 0.01 or 0.1; there are only approximations, which become increasingly imprecise as you combine them using addition, subtraction, multiplication, and division.  You'll find fractions of cents showing up in seemingly simple calculations, and even entire cents appearing and disappearing over time.</li>\n  <li>Our program deals in different currencies &mdash; US Dollars aren't Swiss Francs &mdash; and a <b>float</b> value won't give you any way to distinguish between them.</li>\n</ul>\n\n<p>To solve these problems, you're required to create a class whose objects represent an amount of money in some currency (e.g., an object could represent 50 US Dollars or 125 Yen).  In addition to being possible to ask these objects for the amount (e.g., 50) or the currency (e.g., US Dollars), it should also be possible to combine amounts of money using operators like + or -, compare them using operators like &lt; or ==, display them in the Python interpreter in a reasonable way (by writing a <b>__repr__</b> method), and so on.  The amount itself should be stored using <b>Decimal</b> values instead of <b>float</b> values.  Represent failures using exceptions whenever appropriate, and define your own kinds of exceptions that are specific to the problem at hand.  Objects of your money class should be <i>immutable</i> (like <b>int</b> objects in Python).</p>\n\n<p>In general, your class should automate as many of the details of how money works as possible; this will raise the level of abstraction of the rest of your program, which will be able to rely on your class to handle money correctly.  The benefit of object-oriented programming isn't just in being able to cluster related data (the amount and the currency) together into a single object; it's giving that object the ability to <i>do</i> things relevant to the problem domain.</p>\n\n<p>I would also suggest implementing a function or a class that can perform conversions between currencies, using the information read from the currency file.  Given an amount, a source currency, and a target currency, it will be able to tell you the appropriate amount in the target currency.</p>\n\n<p class=\"subtitle\">The standard \"decimal\" module</p>\n\n<p>The Python standard library includes a module called <b>decimal</b>, which provides (among other things) a class called <b>Decimal</b>.  A Decimal object represents a decimal amount that is not implemented as a binary approximation; 0.01 is really 0.01, 0.1 is really 0.1, and so on.  Have a look through the <a href=\"http://docs.python.org/3.3/library/decimal.html\">Python documentation for the <b>decimal</b> library</a> and experiment in the interpreter so you can understand how it works before you start to use it.  There are a lot more features in this library than you'll need, and one of the skills you're looking to hone here &mdash; which you built some experience with in ICS 32 &mdash; is the ability to find what you need in a library and leave behind what you don't, so I'll leave it as an exercise for you to determine how the <b>decimal</b> module can assist you.  Don't let the details overwhelm you; try a little bit of it at a time until you get a feel for what's there and what might be useful.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Limitations</p>\n\n<p>Third-party libraries &mdash; i.e., anything not included in a standard Python 3.3.2 installation &mdash; are strictly off-limits in this project.  Other than the standard Python library, all of the code should be written solely by you.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>Put your names and student ID in a comment at the top of each of your <b>.py</b> files, then submit all of the files to Checkmate.  Take a moment to be sure you've submitted all of your files and be sure you submit the right version; we will only be able to accept the files you submit before the deadline, so forgetting to submit one (or submitting the wrong version) can have a significant impact on the score you receive for this project.</p>\n\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.</p>\n\n<p class=\"subtitle\">Can I submit after the deadline?</p>\n\n<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Originally written by Alex Thornton, Summer 2013.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}