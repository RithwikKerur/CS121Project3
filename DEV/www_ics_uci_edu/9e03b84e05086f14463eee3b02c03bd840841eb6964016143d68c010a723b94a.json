{"url": "https://www.ics.uci.edu/~thornton/ics23/LabManual/Dark/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 23 / CSE 23 Summer 2012, Project #1: Dark at the End of the Tunnel</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 23 / CSE 23 Summer 2012 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../LabManual\">Lab Manual</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 23 / CSE 23 Summer 2012<br />\n   Project #1: <i>Dark at the End of the Tunnel</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, July 6, 11:59pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>When I was a little kid, I was fascinated by mazes.  Whenever I saw a maze printed on a piece of paper, I had to grab it and try to solve it.  I had soft-covered books full of them and, when those weren't satisfying enough, I even tried drawing my own, though with the undeveloped skills I had at the time &mdash; both in terms of being able to design a challenging maze, and also the more fundamental skill of being able to draw a straight line &mdash; it proved to be a difficult proposition.</p>\n\n<p>While I became less enamored with mazes as I got older, I became more interested in computer science, which provided a fresh reason to consider mazes again; in particular, I considered how software could generate a challenging maze and also solve one.  As I learned more about computer science, the solutions became evident.</p>\n\n<p>For this project, you'll write a Java class that generates a two-dimensional maze of arbitrary size, and another Java class that solves one.  This will give you more practice with understanding and using recursion to solve real problems.  It will also provide you with an opportunity to make heavy use of pre-existing classes for which you have no source code; this is perhaps the most valuable real-world programming skill of all.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The program</p>\n\n<p>This program displays a maze along with its solution.  It is capable of animating the maze generation process step by step, so you can see a maze come to life; similarly, it can animate the search for a solution.  This functionality is contained within a graphical user interface (GUI) that looks like this:</p>\n\n<p class=\"center\"><img src=\"screenshot.png\" alt=\"Screenshot of Project #1 GUI\" /></p>\n\n<p>The maze is displayed along the left side of the GUI and takes up the lion's share of the screen real estate.  Along the right side are options that you can set.  You can select either your own maze generator class or the one that I've provided; similarly, you can select either your own maze solver class or mine.  (By providing you with a maze generator and a maze solver, you can test each of your classes separately &mdash; your generator with my solver, your solver with my generator.)  You can also select the size of the maze before generating it, as well as decide whether you'd like to animate the maze as it's being generated and the solution as the maze is being solved.</p>\n\n<p>Try running the program, using the provided generator to create a maze and the provided solver to solve it, including the animation.  That will show you roughly how the program should behave when you've finished your own generator and solver, though you should be aware that my provided generator and solver use different algorithms than yours will, so don't be surprised when you're finished if your versions and my versions appear very different when you animate them.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Starting point</p>\n\n<p>All of the code that you'll need to complete this project is included in this <a href=\"Dark.zip\">zip archive</a>.  Some of that code is provided as <b>.java</b> files in a directory called <b>src</b>, along with comments that will help you to understand it; this is the code that you'll need to understand in order to finish the project.  Most of it, however, is provided in compiled form as a file called <b>Dark.jar</b> in a directory called <b>lib</b>.  Dark.jar is what is called a <b>JAR</b>.</p>\n\n<p class=\"subtitle\">What is a JAR?</b>\n\n<p>JAR is short for Java ARchive, which is a format for distributing a collection of compiled Java classes as a single file.  JAR files typically have names that end in <b>.jar</b>.  The file format itself is actually nothing special: it's actually just a zip file containing <b>.class</b> files (i.e., compiled Java classes).  (If you don't believe me, try to unzip it using whatever tool you typically use to unzip files.  You might first need to change its name to end in <b>.zip</b>, depending on how your tool is configured.)</p>\n\n<p>There are other things you can put into JARs (such as manifest files), but we didn't end up needing them here.  Ours is just a collection of compiled Java classes.</p>\n\n<p class=\"subtitle\">Setting up an Eclipse project to use a JAR</p>\n\n<p>If you're using Eclipse, setting up an Eclipse project for your work here will require a couple of unfamiliar steps.  Here's what you should do to get started:</p>\n\n<ul>\n  <li>Extract the provided <b>Dark.zip</b> starting point somewhere temporarily.  You should see two directories: <b>src</b> and <b>lib</b>.</li>\n  <li>Create an Eclipse project, as you normally would.</li>\n  <li>Copy the <b>.java</b> files from the <b>src</b> directory in your temporary area into the <b>src</b> directory of your Eclipse project.</li>\n  <li>Create a <b>lib</b> directory in your Eclipse project.</li>\n  <li>Copy the <b>Dark.jar</b> file in the <b>lib</b> directory in your temporary area into the <b>lib</b> directory of your Eclipse project.</li>\n  <li>Right-click on your project in Package Explorer within Eclipse and select <b>Refresh</b>.  You should now see the <b>.java</b> files and the <b>lib</b> directory listed within your Eclipse project.  Notice, too, that you'll see a handful of errors in the Problems window in Eclipse; the program won't compile until we add <b>Dark.jar</b> to the \"build path\" (i.e., the things that Eclipse includes in the program when it compiles it and prepares it to be executed).</li>\n  <li>In Package Explorer within Eclipse, expand the <b>lib</b> directory in your Eclipse project so you can see <b>Dark.jar</b> within it.  Right-click <b>Dark.jar</b>, select <b>Build Path</b> from the menu, then <b>Add to Build Path</b>.</li>\n  <li>You should no longer see errors in the Problems window.  The program now compiles and is ready to run.</li>\n</ul>\n\n<p class=\"subtitle\">How to run the program</p>\n\n<p>The provided <b>Dark.java</b> file contains a main() method that launches the user interface.  To run the program, execute the <b>Dark</b> class.</p>\n\n<p class=\"subtitle\">What you need to work on</p>\n\n<p>You'll only need to work on two classes: <b>StudentMazeGenerator</b> and <b>StudentMazeSolver</b>, though you can feel free to write additional classes if you want.  Everything else is to be left as-is.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Generating a maze</p>\n\n<p>In the <b>StudentMazeGenerator</b> class, you'll implement a maze generation algorithm.  There are lots of ways to generate mazes, but you'll implement one (relatively simple) algorithm in particular.  Our algorithm will generate a <i>perfect maze</i>.  Viewing a maze as a two-dimensional matrix of square cells, a perfect maze is one in which any two cells are connected by a single unique path.  An important consequence of a maze being perfect is that all cells in a perfect maze are reachable from the starting point by some unique path, meaning that perfect mazes are guaranteed to have a unique solution, which makes them more interesting to solve.</p>\n\n<p>To generate a perfect maze, you'll use a recursive algorithm that appears to \"dig tunnels\" of various lengths.  It starts with a maze in which all of the possible walls exist (i.e., a wall exists on every side of each cell), then continues removing walls until a perfect maze has been constructed.  Naturally, it requires some care not to remove walls that would cause the maze to be imperfect; in our tunnel-digging algorithm, we have to be sure we stop digging before we knock out walls that would make our maze imperfect.</p>\n\n<p>The algorithm works by starting at a particular cell (and it doesn't end up mattering which cell you start from) and does the following:</p>\n\n<ul>\n  <li>Mark the current cell as \"visited.\"</li>\n  <li>While the current cell has any adjacent cells that have not yet been visited...\n    <ul>\n      <li>Choose one of the unvisited adjacent cells at random.  Randomness is important here, or your algorithm will always generate the same maze.</li>\n      <li>Remove the wall between the current cell and the cell you just chose.</li>\n      <li>Recursively call the algorithm, with the chosen cell becoming the current cell.</li>\n    </ul>\n  </li>\n</ul>\n\n<p>As you generate your maze, make sure that you make the appropriate calls to the given MazeGeneratorListener object along the way.  Any time your maze is altered, you should call a method on the MazeGeneratorListener.  This notifies the GUI that a change has been made, causing the maze to be redrawn each time.  Without making the right calls to the MazeGeneratorListener, the GUI will not animate the maze generating process.</p>\n\n<p>(When watching the animated version of both your maze generator and the provided one, you may notice that the provided maze generator uses a very different algorithm from the one I described above.  This is intentional; don't feel like yours has to work like mine.  For fun, I implemented the provided maze generator using a \"smarter,\" but more complicated, maze generating algorithm that generates mazes with more branches and, as a result, more difficult solutions.  Toward the end of this quarter, time permitting, we'll talk in lecture about how this algorithm works.)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Solving a maze</p>\n\n<p>In the <b>StudentMazeSolver</b> class, you'll implement a maze solving algorithm.  Our algorithm will be a recursive one with <i>backtracking</i>.  A backtracking algorithm is one that recursively investigates all of the possibilities by moving down a path that hopefully leads to a solution and then, if that path fails, backing up to the place where the \"mistake\" was made and trying another path.  While you could potentially implement an algorithm like this iteratively, it turns out to be a lot less work to do so recursively, as the process of recursion will naturally and automatically manage details that you would otherwise have to manage yourself.</p>\n\n<p>I'll leave the details of this algorithm as an exercise for you to figure out.  If you understand the maze generating algorithm above, it should not be a big step to design the maze solving algorithm.  (Note that the provided maze solver, again, uses a very different algorithm than the one you'll be aiming for here.  Later this quarter, when we talk about tree traversals, we'll characterize the difference between your approach and mine more concretely.)</p>\n\n<p>As with the maze generating process, in addition to solving the maze, your method should make the appropriate calls to the given MazeSolverListener object as your potential solutoin changes, so that the GUI will animate the process.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>You need only turn in your <b>StudentMazeGenerator.java</b> and <b>StudentMazeSolver.java</b> files, along with any additional classes you created, if any.  You do not need to turn in any of the other files that were provided to you.  Follow <a href=\"../SubmittingProjects.html\">this link</a> for an explanation of how to turn in your project.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Clarifications to the algorithm and the introduction of a JAR file by Alex Thornton, Summer 2012.</li>\n  <li>Some explanation of the algorithm rewritten by Alex Thornton, Fall 2007.</li>\n  <li>A couple of very minor tweaks by Alex Thornton, Summer 2006.</li>\n  <li>More minor rewrites and additions by Alex Thornton, Summer 2005.</li>\n  <li>Some additional minor rewrites by Alex Thornton, Summer 2004.</li>\n  <li>Incorporated a few phrases written by Norman Jacobson, Spring 2003.</li>\n  <li>Originally written by Alex Thornton, Fall 2002.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}