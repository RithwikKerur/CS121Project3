{"url": "https://www.ics.uci.edu/~ejw/authoring/minneapolis01/minutes.txt", "content": "                            WEBDAV WORKING GROUP\r\n\r\n                              Meeting Minutes\r\n                          IETF-50, Minneapolis, MN\r\n                               March 22, 2001\r\n\r\nThe WebDAV WG met on Thursday, March 22, 2001, from 0900-1130, with\r\napproximately 25 people in attendance. The meeting was chaired by Jim\r\nWhitehead, and meeting notes were recorded by John Stracke. Final minutes\r\nwere prepared by Jim Whitehead. Note that throughout the meeting, brief\r\nnotes and observations on the sense of the room on various issues were\r\nrecorded in a slide presentation that was on-screen during the entire\r\nmeeting. The final state of these slides can be found at URL:\r\n\r\nhttp://www.ics.uci.edu/pub/ietf/webdav/minneapolis01/meeting.htm\r\n\r\nThe meeting began with a brief discussion of the agenda:\r\n\r\n   * Open issues in the ACL specification\r\n   * Reviving DASL\r\n   * Improved status reporting\r\n   * Moving 2518 to Draft status\r\n        o Process for moving forward\r\n        o Discussion of issues list items\r\n\r\nACL Spec open issues\r\n\r\nDoes a null resource have an ACL?\r\n\r\nGeoff Clemm: does this mean null or lock-null (two separate questions). He\r\npointed out that, if null resources exist and can be PROPFOUND, then Depth:\r\ninfinity becomes ridiculous. He also believes that, for lock-null, it's\r\ncheap to add ACLs, but not necessarily useful. John Stracke pointed out\r\nthat it would be nice to be able to take out a lock, set the ACL for\r\nnon-world-readable, then create, so that there's no window where the\r\nresource may be world-writable. Geoff noted that her concerned about the\r\ncomplexity tradeoff. John pointed out that, in his scenario, one could\r\nlock, create with an empty body, set ACL, then write the real content. At\r\nthis point, Geoff, Jim Whitehead, and Eric Sedlar started talking about\r\neliminating lock-null resources altogether at Draft Standard; nobody\r\nobjects.\r\n\r\nThe consensus of the room was that lock-null resources do not have an ACL.\r\n\r\nCan an ldap: scheme URL be used for principal identifiers?\r\n\r\nIn past revisions of the ACL specification, principal identifiers have\r\nalways been http: scheme URLs; in San Diego, it was suggested that ldap:\r\nscheme URLs could make sense, since they refer to people. Jim Whitehead\r\nstated that this is a tradeoff between functionality on client and on\r\nserver; the current system requires the DAV server to sync with LDAP server\r\n(if using LDAP), while the ldap: scheme URLs require the client to access\r\nthe LDAP server directly. A compromise suggested on the list was to define\r\nthe ldap-URL property, which points to the principal's LDAP entry.\r\n\r\nLarry Masinter asked: are we permitting https:? Why are we using URLs, but\r\nnot permitting all schemes?\r\nLisa Dusseault: if we don't support ldap: at all, are we going to need to\r\nduplicate LDAP functionality in DAV?\r\nGeoff: by having the DAV server do the mapping, we're exposing what we need\r\n(not much) without requiring the client to know LDAP.\r\nLisa: \"what we need\" will probably grow, so we should support ldap-URL, to\r\nmake sure we have an escape hatch.\r\n\r\nLarry: what are these URLs actually used for?\r\nEric: accessing data about principals via PROPFIND; e.g., making a picklist\r\nfor composing an ACL.\r\nLarry: OK, and you can't do PROPFIND on an ldap: URL, so clients would have\r\nto support LDAP.\r\nGeoff: all we want from the principal is grouping, display name, and\r\nusername (for, e.g., Digest-Auth).\r\nJohn: can we require the DAV server to proxy for the ldap: URLs?\r\nGeoff: but then we get about the same functionality as the ldap-URL\r\nproperty.\r\nEric: we should get some implementation experience first; nobody's done\r\nthis yet.\r\nLarry: maybe implementations should make it a config option? Different\r\npeople will care differently about LDAP integration.\r\n\r\nGeoff: the person who proposed the ldap: property has agreed that the\r\nldap-URL property would meet his needs.\r\nLarry: This sounds odd -- what about other URL schemes with similar uses?\r\nEric: I don't really see other such schemes being commonly used; there's no\r\ngood way to map between them.\r\nBabu S*: two issues; one is permitting LDAP integration, and the other is\r\npermitting everything-under-the-sun integration.\r\nJim Whitehead stated that he doesn't like the property idea; permitting\r\nldap: URLs would be good enough.\r\nJohn: but what about LDAP schemas?\r\nLarry: so require that the schema contain certain properties.\r\nJohn: but, if we want to integrate with existing directories, that won't\r\nwork.\r\nWalter Houser: tarpit. [missed some bits]\r\nGeoff: ldap: URLs have interop problems (require clients to implement too\r\nmuch); the ldap-URL property lets clients get at LDAP data, but does not\r\nrequire them to do so.\r\nJimW: so that would let the DAV server be a gateway for just the DAV\r\nproperties, but not block the other information. How about alt-URL, with an\r\nalternate URL, which may be ldap:?\r\nGeoff: OK; but how about a list?\r\nEric: does 2518 permit non-http: URLs?\r\nGeoff: yes, but we should strike that.\r\nEric: Why do we want to limit it like that?\r\nGeoff: for interop; we put constraints on the protocol to improve interop\r\nby keeping it simpler.\r\nEric: but the client treats the principal URL as non-dereferenceable; why\r\ndoes it care what the scheme is?\r\n\r\nWalter: what are we trying to answer here?\r\nJimW put up two questions: \"should the URIs identifying principals be\r\nlimited to just http(s)?\" and \"should principal resources have an optional\r\nproperty 'alternateURL' that can point off to, e.g., an LDAP accessible\r\nnetwork resource?\".\r\nLarry: wait a minute; 2518 says that the principal must be an HTTP\r\nresource. So, OK, the \"any scheme\" bit is a hole.\r\nGeoff: server-side, non-HTTP resources is more expensive.\r\nEric: client-side, exposing it as an HTTP resource is supposed to make it\r\neasier for the client; but it doesn't, because it requires the client to\r\nuse the DAV server as an LDAP gateway.\r\nGeoff: if we support non-HTTP, then the client may well not be able to get\r\nthose principals' data.\r\nEric: but the server isn't required to make the principal resources respond\r\nto PROPFIND at all.\r\nGeoff: but, if it does expose the data, it's supposed to do it via\r\nPROPFIND.\r\nJimW: The worst-case with HTTP-only is not worse than the worst-case\r\nwithout; but the best-case with is significantly better than best-case\r\nwithout. [dropped some bits]\r\nEric: we should note this as an open issue.\r\nGeoff: at a minimum, we need to fix the inconsistency in 2518 (\"it's an\r\nHTTP resource\" and \"it may be any scheme\").\r\n\r\nJimW next tries to get a sense of the room on these two questions. Larry\r\nsays the first one strongly depends on context, on how the spec gets\r\nwritten. JimW rewrites the question for clarity: \"What URI schemes should\r\nbe allowed for identifying principals?\" Options listed:\r\n\r\n   * http(s) only, or a URL that identifies a WebDAV principal resource\r\n   * limited set (http(s), ldap(s))\r\n   * http(s) and others explicitly defined by additional specs (the first\r\n     option was eventually merged into this one, since additional specs can\r\n     always be written)\r\n   * anything\r\n\r\nChris Kaler: how about making it an opaque URL, and publishing\r\nInformational RFCs for how to work with different schemes?\r\nJohn: but we should really have some minimal set, that clients can use.\r\nLisa: There must be some base level of capability that clients can rely on,\r\nwithout having to implement various approaches for various servers.\r\nEric: how about this: use anything, but servers SHOULD use http(s), which\r\nis a privileged scheme that points to resources that SHOULD have additional\r\nproperties (JimW added this to the list of options for the current\r\nquestion).\r\nEric states that he does not want to make the DAV server replicate data\r\nfrom the LDAP server.\r\nJohn: but, if you're using LDAP for authentication, then you're doing that\r\nto some extent anyway.\r\nLarry: what if you're using mailto: for principal URLs?\r\nEric: why would you do that?\r\nLisa: mailto: URLs are commonly used for Web services, so that you have a\r\nsingle, verifiable, user ID across services.\r\nChris: what about privacy issues of exposing the user's real name?\r\nGeoff: well, but you can use access control (or just not expose the data).\r\nEric: if you don't have the properties, then there's not much point in\r\nmaking it an http: URL.\r\nGeoff: agreed, so the second SHOULD is OK.\r\n\r\nLarry: so what are these properties used for, anyway? Geoff: well, they're\r\nused for display in the GUI; they might be useful.\r\nLarry: what about auth ID, though? How is it tied to auth schemes?\r\nNobody can really remember a good reason to have it.\r\nJimW: OK, so it seems like we have provisional sentiment to strike it.\r\nEric: but what harm does it do? Nice for something like Unix's ls -l.\r\nGeoff: it's a potential security weakness (makes it easier to mount a\r\ndictionary attack), recorded as such in our security considerations;\r\nremoving it would solve that.\r\nJohn: maybe we did want it for something like ls -l, where the username is\r\nthe only way to find a user in the directory; if we have the alternateURL\r\nproperty, then we've got that.\r\nGeoff and JimW: agree.\r\nLarry: doesn't want to reach conclusion yet; we should go back and look at\r\nhow clients actually use this stuff.\r\n\r\nJimW recording: provisionally (subject to the consensus of the list), we\r\ncan eliminate the authentication-id property. The alternateURL property can\r\ncover many of the use cases envisioned for authentication-id, and is safer.\r\nHowever, we should look for more use cases.\r\n\r\nJimW recording: provisionally, the answer to the \"what URL schemes are\r\npermitted\" is \"use anything, but servers SHOULD use http(s), which is a\r\nprivileged scheme that points to resources that SHOULD have additional\r\nproperties\".\r\n\r\nJimW recording: sense of the room: we should have an alternateURL property.\r\nBabu: we seem to be using the terms interoperability and dependencies, and\r\nthey're probably interchangeable (inversely).\r\n\r\nLarry raised a general plea: he was sent with the mission to ask that\r\nWebDAV and DeltaV and other specs do a better job than they do now of\r\ndealing with interactions and failure cases. There are too many cases where\r\nthere are options whose purposes aren't well specified, and people who\r\nguess differently run into trouble. The alternateURL property is an\r\nexample; what alternate information does it point to? Eric replied that we\r\ncould put in better use cases; some were removed to keep the text pure, but\r\nthe result is less clarity. Maybe there should be a companion document\r\ndescribing these use cases. Geoff added that there were problems with use\r\ncases in 2518, with people reading use-case text as normative. Putting it\r\nin a clearly non-normative companion document would help with this problem.\r\nLarry stated that explanatory text is not as good as making the normative\r\ntext more precise, and Geoff agreed.\r\n\r\nJimW recorded the need to provide information in the specification on how a\r\nclient might use the alternateURL, and what kind of schemes might be used.\r\n\r\nMAY/SHOULD/MUST ACL properties be returned by an allprop PROPIND? (None,\r\nsome, all?)\r\n\r\nThe view on list is that PROPFIND allprop MUST NOT return any ACL\r\nproperties, since PROPFIND allprop is already too expensive, since the\r\nserver has to compute all the live properties, and \"current user privs\" is\r\nvery expensive to compute. No one in the room disagreed.\r\n\r\nChris asked, how about striking allprop altogether? Lisa replied that it is\r\ntoo late, since there is at least one client that depends on it. Eric noted\r\nthat it is useful for copying resources from server to server. Geoff\r\nreplied that a client can use propname to list all the names, then retrieve\r\nall properties explicitly by name. JimW noted that it might be possible to\r\ndeprecate it in going to Draft Standard, then strike it when going from\r\nDraft Standard to Standard; but we need to look into it better. Didn't\r\nsomeone on the list give a rousing defense of allprop? Geoff replied, yes,\r\nbut it was because he used it, not because it was the only way; a slow\r\ntransition wouldn't be so hard on him. At a minimum, we can make sure that\r\nnew specifications state that their new live properties do not come back\r\nfrom allprop. Larry warned the group to be wary about transitions. Geoff\r\nadded that, maybe, when deprecated, it can go down to \"all dead\r\nproperties\". There was some discussion on performance reasons not to have\r\nPROPFIND return live properties. Larry notes that the performance hit only\r\noccurs when PROPFIND allprop is used, and, if it's used, it's because\r\npeople want the functionality, and workarounds may be less efficient. Room\r\nseems tentatively pleased with limiting PROPFIND allprop to return only\r\ndead properties.\r\n\r\nWhat is the purpose of the DAV:isprincipal property?\r\n\r\nThis issue was raised by Larry Masinter. JimW noted that this is a\r\nworkaround for the preferred way of expressing this information, which is\r\nin the DAV:resourcetype property. However, one early implementation (MS\r\nWebFolders) considers anything with a non-empty resourcetype to be a\r\ncollection, and displays them as collections in the Web Folders UI. Geoff\r\nClemm noted that a principal collection (a group?) is both a collection and\r\na principal. Larry then noted that WebFolders won't display the correct\r\nicon anyway, since at present it will make a principal look like a\r\ndocument. Geoff replied that if a principal looks like a folder in the UI\r\nusers will think they can add members to it. There was a brief discussion\r\nover what a GET to a principal URL returns; conclusion seems to be that we\r\ndon't have any particular reason to define it. There was agreement to\r\nexplicitly note in the ACL specification that GET on a principal resource\r\nis intentionally undefined.\r\n\r\nEric: since we have different types that can be mixed together (e.g.,\r\ncollection, principal, versioned), maybe we should be using properties like\r\nDAV:isprincipal. These types aren't unitary types; they're interfaces\r\nimplemented by the resources. Discussion on which way is best. Larry stated\r\nthat it's a moral argument; either punish the bad implementation or write\r\nthe specification around it. Geoff noted that what they did wasn't so\r\nterrible, after all. JimW recorded the (weak) sense of the room to leave\r\nthe DAV:isprincipal property in place.\r\n\r\nReviving DASL\r\n\r\nThere was a brief discussion on reviving the DAV Searching and Locating\r\n(DASL) protocol specification, which currently is in Internet-Draft form,\r\nand is not currently being worked on.\r\n\r\nJimW asked:\r\n\r\n   * Who is interested in seeing it completed? Couple of people raised\r\n     hands.\r\n   * When should it be completed?\r\n     Larry noted that the people who want it are some of the same people\r\n     who are working on ACLs and improved status reporting; let's not delay\r\n     those. Eric added that there might be synergy with XML Query (XML\r\n     Query does searching; DASL would limit it to particular directories,\r\n     for example), so we should at least let XML Query people know DASL is\r\n     coming. Lisa stated that XML Query isn't so great for searching\r\n     properties (as DASL was focused on). Xythos has implemented it; what\r\n     were the problems that held back the spec? JimW said that the biggest\r\n     one was I18N (e.g., sorting, string matching); somebody needs to look\r\n     at it in that light. Might be able to refer to Unicode docs. Larry\r\n     suggested that one path forward is to publish the existing DASL\r\n     protocol specification as Experimental (with the added note that\r\n     Xythos has implemented), so that people can try it; when we get time\r\n     to work on it, then there'll be more experience with it. The sense of\r\n     the room agreed that this was a good approach.\r\n   * Who is willing to work on it? This question was not asked after all.\r\n\r\nMoving 2518 to Draft status\r\n\r\nFour-part process:\r\n\r\n   * Resolve issue list items on mailing list\r\n        o Goal: handle 2/week\r\n        o Document solutions with pros/cons\r\n   * Hold face-to-face interoperability b*ke-off\r\n        o Flush out new issues\r\n        o Develop test plan doc on mailing list\r\n        o Aim for late May/early June.\r\n   * Develop an online form to gather initial implementation and testing\r\n     data\r\n        o Used successfully for HTTP/1.1\r\n        o Can be done before the b*ke-off\r\n   * Create a farm of significant server implementations for ongoing\r\n     interop testing\r\n        o JimW can host and administer machines at UC Santa Cruz, but\r\n          cannot afford the machines/software. (Easier to put machines on\r\n          open Internet at university than in most companies.) Probably not\r\n          beta software, though.\r\n        o Donations needed.\r\n\r\nWalter asked whether it would it be useful for potential customers to get\r\nthe results of this testing? Larry noted that there are two types of\r\ninterop events. The first kind is closed, usually with prerelease products,\r\nto get the products enhanced to be interoperable; the second is\r\ninteroperability demos at trade shows, once the vendors know the results\r\nare good. We need the first before we can do the second. Survey of the\r\nroom: 4-5 people interested in attending the b*ke-off.\r\n\r\nAdvanced Status Reporting (ASR)\r\n\r\nLisa Dusseault next led a discussion on advanced status reporting within\r\nWebDAV. Lisa asked who has read the advanced status reporting I-D? No hand\r\nraised. Lisa then stated, \"Don't worry about it; it hasn't changed\r\nsignificantly from the proposal, which people liked.\" Larry noted (looking\r\nat the draft on his laptop) that the Accept-Error: header looks like a\r\ngeneral HTTP extension, and Lisa agreed. Larry then stated that\r\n\"Accept-Error: text/xml\" isn't actually generic XML; it implies this\r\nspecification's XML DTD. Maybe it should be text/xml-rfcXXXX, or some such,\r\nso that some future Even More Advanced Status Reporting can define its own\r\nformat. Lisa replied that, really, the spec is open, it just has to have a\r\nparticular root element. Geoff added that it would be pretty nasty to wind\r\nup creating a new namespace of error type specs. Eric suggested that we\r\ndefine an XML namespace URI for this version.\r\n\r\nJimW: why not just always send the ASR?\r\nJohn: but then the existing clients don't have HTML to show to the user.\r\nJimW: how about putting it in a header?\r\nLisa: not enough information.\r\nJimW: what is the goal? Improve the message to the user, or enable better\r\nmachine-comprehensible error handling? He says it's more for the user;\r\ne.g., 423 Locked can give more information on what was locked and how.\r\nGeoff: machine-comprehensible error handling does improve the message to\r\nthe user.\r\nLisa: the server could already send a more detailed HTML message to the\r\nuser; structuring it makes it possible for the UI to assist the user in\r\ndealing with the error.\r\nLarry: how about embedding XML in HTML?\r\nLisa: lots of people said that was too messy.\r\nLarry: how about multipart/alternative?\r\nLisa: was considered, but bandwidth costs.\r\nLarry: servers also have to worry about CPU cost of computing the response.\r\nLisa: but servers aren't likely to implement ASR at all unless they know\r\nthe clients are asking for it. More discussion.\r\nJimW: Accept-Error: means bandwidth costs, too, on every request.\r\nLarry: investigate: can browsers accept multipart/alternative anyway?\r\n\r\nJimW: maybe we should narrow this down; add it to base WebDAV (for better\r\ninteroperability), but not expose it for general HTTP. Or even just improve\r\nthe specification of error cases, not necessarily bundle up all the data\r\ninto XML.\r\n\r\n*** Meeting adjourned ***\r\n", "encoding": "ascii"}