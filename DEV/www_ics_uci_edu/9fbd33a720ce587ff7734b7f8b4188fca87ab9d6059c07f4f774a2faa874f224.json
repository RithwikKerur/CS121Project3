{"url": "https://www.ics.uci.edu/~eppstein/pubs/2016.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head>\n<title>David Eppstein - Publications</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body bgcolor=\"#ffffff\" text=\"#000000\">\n<h1>David Eppstein - Publications</h1>\n<hr><p>\n<h2>\n2016\n</h2>\n<ul>\n<li><b>Adjacency-preserving spatial treemaps</b>.<br>\n<a href=\"//www.win.tue.nl/~kbuchin/\">K. Buchin</a>,\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~mloffler/\">M. L&ouml;ffler</a>,\n<a\nhref=\"//www.ac.tuwien.ac.at/people/noellenburg/\">M. N&ouml;llenburg</a>, and\n<a href=\"//www-ma2.upc.edu/rsilveira/\">R. I. Silveira</a>.<br>\n<a href=\"//arxiv.org/abs/1105.0398\">arXiv:1105.0398</a>.<br>\n<i>12th International Symposium on Algorithms and Data Structures (WADS 2011)</i>, New York,\n2011.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 6844, 2011, pp. 159&ndash;170.<br>\n<a href=\"//doi.org/10.20382/jocg.v7i1a6\"><i>J. Computational Geometry</i> 7 (1): 100&ndash;122, 2016</a>.\n<p>\nWe study the recursive partitions of rectangles into sets of rectangles,\nand partitions of those rectangles into smaller rectangles, to form\nstylized visualizations of hierarchically subdivided geographic regions.\nThere are several variations of varying difficulty depending on how much\nof the geographic information from the input we require the output to preserve.\n<p>\n<li><b>Strict confluent drawing</b>.<br>\nD. Eppstein,\n<a href=\"//www.win.tue.nl/~dholten/\">D. Holten</a>,\n<a href=\"//www.ics.uci.edu/~mloffler/\">M. L&ouml;ffler</a>,\n<a\nhref=\"//www.ac.tuwien.ac.at/people/noellenburg/\">M. N&ouml;llenburg</a>, and\n<a href=\"//www.win.tue.nl/~speckman/\">B. Speckmann</a>, and\n<a href=\"//www.tue.nl/staff/k.a.b.verbeek\">K. Verbeek</a>.<br>\n<a href=\"//arxiv.org/abs/1308.6824\">arXiv:1308.6824</a>.<br>\n<i>21st Int. Symp. Graph Drawing</i>, Bordeaux, France, 2013.<br>\n<a href=\"//doi.org/10.1007/978-3-319-03841-4_31\">Springer, <i>Lecture Notes in Comp. Sci.</i> 8242, 2013, pp. 352&ndash;363</a>.<br>\n<a href=\"//doi.org/10.20382/jocg.v7i1a2\"><i>J. Computational Geometry</i> 7 (1): 22&ndash;46, 2016</a>.\n<p>\nA confluent drawing of a graph is a set of points and curves in the\nplane with the property that two vertices are adjacent in the graph if\nand only if the corresponding points can be connected to each other by\nsmooth paths in the drawing. We define a variant of\nconfluent drawing, strict confluent drawing, in which a smooth path\nbetween two vertices (if it exists) must be unique.\nWe show that it is NP-complete to test whether such drawings exist,\nin contrast to unrestricted confluence for which the complexity remains open.\nAdditionally, we show that finding outerplanar drawings (in which the points\nare on the boundary of a disk and the curves are interior to it) with a fixed\ncyclic vertex ordering can be performed in polynomial time.\nWe use circle packings to find nice versions of these drawings in which\nall tracks are represented by piecewise-circular curves.\n<p>\n<li><b>Convex-arc drawings of pseudolines</b>.<br>\nD. Eppstein,\nM. van Garderen,\n<a href=\"//www.win.tue.nl/~speckman/\">B. Speckmann</a>, and\n<a href=\"//www.math.kit.edu/iag6/~ueckerdt/en\">T. Ueckerdt</a>.<br>\n<i>21st Int. Symp. Graph Drawing</i> (poster), Bordeaux, France, 2013.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 8242, 2013, pp. 522&ndash;523.<br>\n<a href=\"//arxiv.org/abs/1601.06865\">arXiv:1601.06865</a>.<br>\n<p>\nWe show that every outerplanar weak pseudoline arrangement (a collection\nof curves topologically equivalent to lines, each crossing at most once\nbut possibly zero times, with all crossings belonging to an infinite\nface) can be straightened to a hyperbolic line arrangement. As a\nconsequence such an arrangement can also be drawn in the Euclidean plane\nwith each pseudoline represented as a convex piecewise-linear curve with\nat most two bends. In contrast, for arbitrary pseudoline arrangements, a\nlinear number of bends is sufficient and sometimes necessary.\n<p>\n<li><b>Distance-sensitive point location made easy</b>.<br>\n<a href=\"//cis.poly.edu/~aronov/\">B. Aronov</a>,\n<a href=\"//www.win.tue.nl/~mdberg/\">M. De Berg</a>,\nD. Eppstein,\n<a href=\"//www.win.tue.nl/~mroeloff/\">M. Roeloffzen</a>, and\n<a href=\"//www.win.tue.nl/~speckman/\">B. Speckmann</a>.<br>\n30th European Workshop on Computational Geometry (EuroCG 2014), Dead\nSea, Israel, March 2014.<br>\n<a href=\"//arxiv.org/abs/1602.00767\">arXiv:1602.00767</a><br>\n<a href=\"//doi.org/10.1016/j.comgeo.2016.02.001\"><i>Comp. Geom. Theory\n&amp; Applications</i> 54: 17&ndash;31, 2016</a>.\n<p>\nWe use quadtrees to handle point location queries in an amount of time\nthat depends on the distance of the query point to the nearest region\nboundary.\n<p>\n<li><b>Folding a paper strip to minimize thickness</b>.<br>\n<a href=\"//erikdemaine.org/\">E. Demaine</a>,\nD. Eppstein,\n<a href=\"//math.mit.edu/directory/profile.php?pid=1468\">A. Hesterberg</a>,\n<a href=\"//www.alg.cei.uec.ac.jp/itohiro/\">H. Ito</a>,\n<a href=\"//cs.uwaterloo.ca/~alubiw/Site/Anna_Lubiw.html\">A. Lubiw</a>,\n<a href=\"//www.jaist.ac.jp/~uehara/index-e.html\">R. Uehara</a>, and\n<a href=\"//jazz.cias.osakafu-u.ac.jp/~uno/index-e.htm\">Y. Uno</a>.<br>\n<a href=\"//arxiv.org/abs/1411.6371\"> arXiv:1411.6371</a>.<br>\n<i>9th International Workshop on Algorithms and Computation (WALCOM\n2015)</i>, Dhaka, Bangladesh.<br>\n<a href=\"//doi.org/10.1007/978-3-319-15612-5_11\">Springer, <i>Lecture Notes in Comp. Sci.</i> 8973 (2015), pp. 113&ndash;124</a>.<br>\n<a href=\"//doi.org/10.1016/j.jda.2015.09.003\"><i>Journal of Discrete\nAlgorithms</i> 36: 18&ndash;26, 2016</a>.<br>\n<p>\nIf a folding pattern for a flat origami is given, together with a\nmountain-valley assignment, there might still be multiple ways of\nfolding it, depending on how some flaps of the pattern are arranged\nwithin pockets formed by folds elsewhere in the pattern. It turns out to\nbe hard (but fixed-parameter tractable) to determine which of these ways\nis best with respect to minimizing the thickness of the folded pattern.\n<p>\n<li><b>All-pairs minimum cuts in near-linear time for surface-embedded graphs</b>.<br>\n<a href=\"//blogs.oregonstate.edu/glencora/\">G. Borradaile</a>,\nD. Eppstein,\n<a href=\"//web.engr.oregonstate.edu/~nayyeria/\">A. Nayyeri</a>,\nand <a href=\"//www.diku.dk/~koolooz/\">C. Wulff-Nilsen</a>.<br>\n<a href=\"//arxiv.org/abs/1411.7055\">arXiv:1411.7055</a>.<br>\n<i>Proc. 32nd Int. Symp. Computational Geometry</i>, Boston, 2016.<br>\n<a href=\"//doi.org/10.4230/LIPIcs.SoCG.2016.22\">Leibniz International Proceedings in Informatics (LIPIcs) 51, pp. 22:1&ndash;22:16</a>.<br>\n<p>\nWe give the first known near-linear algorithms for constructing\nGomory&ndash;Hu trees of bounded-genus graphs, and we shave a log off\nthe time for the same problem on planar graphs.\n<p>\n<li><b>Simple recognition of Halin graphs and their generalizations</b>.<br>\nD. Eppstein.<br>\n<a href=\"//arxiv.org/abs/1502.05334\">arXiv:1502.05334</a>.<br>\n<a href=\"//doi.org/10.7155/jgaa.00395\"><i>J. Graph Algorithms &\nApplications</i> 20 (2): 323&ndash;346, 2016</a>.\n<p>\nWe describe and implement a simple linear time algorithm for recognizing\nHalin graphs based on two simplifications of triples of degree-three\nvertices in such graphs. Removing some auxiliary data from the algorithm\ncauses it to recognize a broader class of graphs that we call the\nD3-reducible graphs. We study the properties of these graphs, showing\nthat they share many properties with the Halin graphs.\n<p>\n<li><b>Track layouts, layered path decompositions, and leveled\nplanarity</b>.<br>\n<a href=\"//michaeljbannister.com/\">M. J. Bannister</a>,\n<a href=\"//www.ics.uci.edu/~wdevanny/\">W. E. Devanny</a>, and\n<a href=\"//engineering.uottawa.ca/eecs/people/dujmovic-vida\">V. Dujmovi&#263;</a>,\nD. Eppstein, and\n<a href=\"//users.monash.edu.au/~davidwo/\">D. R. Wood</a>.<br>\n<a href=\"//arxiv.org/abs/1506.09145\">arXiv:1506.09145</a>.<br>\n<i>24th Int. Symp. Graph Drawing</i>, Athens, Greece, 2016.<br>\n<a href=\"//doi.org/10.1007/978-3-319-50106-2_38\">Springer, <i>Lecture Notes in Comp. Sci.</i> 9801 (2016), pp. 499&ndash;510</a>.<br>\n<a href=\"//doi.org/10.1007/s00453-018-0487-5\"><i>Algorithmica</i> 81 (4): 1561&ndash;1583, 2019</a>.\n<p>\nWe introduce the concept of a layered path decomposition, and show that\nthe layered pathwidth can be used to characterize the leveled planar\ngraphs. As a consequence we show that finding the minimum number of\ntracks in a track layout of a given graph is NP-complete.\nThe GD version includes only the parts concerning track layout,\nand uses the title \"Track Layout is Hard\".\n<p>\n<li><b>Rigid origami vertices: Conditions and forcing sets</b>.<br>\n<a href=\"//zacharyabel.com/\">Z. Abel</a>,\n<a href=\"//www.jasoncantarella.com/\">J. Cantarella</a>,\n<a href=\"//erikdemaine.org/\">E. Demaine</a>,\nD. Eppstein,\n<a href=\"//mars.wne.edu/~thull/\">T. Hull</a>,\n<a href=\"//scripts.mit.edu/~jasonku/\">J. Ku</a>,\n<a href=\"//www.langorigami.com/\">R. Lang</a>, and\n<a href=\"//www.tsg.ne.jp/TT/\">T. Tachi</a>.<br>\n<a href=\"//arxiv.org/abs/1507.01644\">arXiv:1507.01644</a>.<br>\n<a href=\"//doi.org/10.20382/jocg.v7i1a9\"><i>J. Computational Geometry</i> 7 (1): 171&ndash;184, 2016</a>.\n<p>\nWe give an exact characterization of the one-vertex origami folding\npatterns that can be folded rigidly, without bending the parts of the\npaper between the folds.\n<p>\n<li><b>Treetopes and their graphs</b>.<br>\nD. Eppstein.<br>\n<a href=\"//arxiv.org/abs/1510.03152\">arXiv:1510.03152</a>.<br>\n<a href=\"//doi.org/10.1137/1.9781611974331.ch69\"><i>27th ACM-SIAM\nSymp. on Discrete Algorithms</i>, Arlington, 2016, pp. 969&ndash;984</a>.<br>\n<p>\nWe describe a class of polytopes of varying dimensions, whose\nrestriction to three dimensions is the class of\nroofless polyhedra (Halin graphs). We call these polytopes treetopes. We\nshow that the four-dimensional treetopes are closely related to\nclustered planar graph drawings, and we use this connection to recognize\nthe graphs of four-dimensional treetopes in polynomial time.\n<p>\n(<a href=\"Epp-SODA-16-slides.pdf\">Slides</a>)\n<p>\n<li><b>On the planar split thickness of graphs</b>.<br>\nD. Eppstein,\n<a href=\"//www1.informatik.uni-wuerzburg.de/en/staff/kindermann_philipp/\">P. Kindermann</a>,\n<a href=\"//www.cs.arizona.edu/~kobourov/\">S. G. Kobourov</a>,\n<a href=\"//www.diei.unipg.it/STAFF/liotta.htm\">G. Liotta</a>,\n<a href=\"//cs.uwaterloo.ca/~alubiw/Site/Anna_Lubiw.html\">A. Lubiw</a>,\n<a href=\"//www-ljk.imag.fr/membres/Aude.Maignan/\">A. Maignan</a>,\n<a href=\"//www.cs.umanitoba.ca/~jyoti/research.html\">D. Mondal</a>,\n<a href=\"//cs.uwaterloo.ca/~hvosough/\">H. Vosoughpour</a>,\nS. Whitesides, and\n<a href=\"//www.cs.uleth.ca/~wismath/\">S. Wismath</a>.<br>\n<a href=\"//arxiv.org/abs/1512.04839\">arXiv:1512.04839</a>.<br>\n<i>Proc. 12th Latin American Theoretical Informatics Symposium (LATIN\n2016)</i>, Ensenada, Mexico</i>.<br>\n<a href=\"//doi.org/10.1007/978-3-662-49529-2_30\">Springer, <i>Lecture Notes in Comp. Sci.</i> 9644 (2016), pp. 403&ndash;415</a>.<br>\n<a href=\"//doi.org/10.1007/s00453-017-0328-y\"><i>Algorithmica</i> 80\n(3): 977&ndash;994 (special issue for LATIN), 2018</a>.\n<p>\nWe study the problem of splitting the vertices of a given graph into a\nbounded number of sub-vertices (with each edge attaching to one of the\nsub-vertices) in order to make the resulting graph planar.\nIt is NP-complete, but can be approximated to within a constant factor,\nand is fixed-parameter tractable in the treewidth.\n<p>\n(<a href=\"EppKinKob-LATIN-16-slides.pdf\">Slides</a>)\n<p>\n<li><b>From discrepancy to majority</b>.<br>\nD. Eppstein\nand <a href=\"//www.ics.uci.edu/~dan/\">D. S. Hirschberg</a>.<br>\n<a href=\"//arxiv.org/abs/1512.06488\">arXiv:1512.06488</a>.<br>\n<i>Proc. 12th Latin American Theoretical Informatics Symposium (LATIN\n2016)</i>, Ensenada, Mexico.<br>\n<a href=\"//doi.org/10.1007/978-3-662-49529-2_29\">Springer, <i>Lecture Notes in Comp. Sci.</i> 9644 (2016), pp. 390&ndash;402</a>.<br>\n<a href=\"//doi.org/10.1007/s00453-017-0303-7\"><i>Algorithmica</i> 80\n(4): 1278&ndash;1297, 2018</a>.\n<p>\nWe provide upper and lower bounds on the query complexity of a problem\nin which the input is a collection\nof two-colored items, and the problem is to either find an item of the\nmajority color or to determine that there is no majority,\nby performing queries that determine the discrepancy of fixed-size\nsubsets of the items.\n<p>\n(<a href=\"EppHir-LATIN-16-slides.pdf\">Slides</a>)\n<p>\n<li><b>Cuckoo filter: simplification and analysis</b>.<br>\nD. Eppstein.<br>\n<a href=\"//arxiv.org/abs/1604.06067\">arXiv:1604.06067</a>.<br>\n<i>Proc. 15th Scandinavian Symposium and Workshops on Algorithm\nTheory (SWAT 2016)</i>, Reykjavik, Iceland.<br>\n<a href=\"//doi.org/10.4230/LIPIcs.SWAT.2016.8\">Leibniz International\nProceedings in Informatics (LIPIcs) 53, pp. 8.1&ndash;8.12</a>.\n<p>\nA cuckoo filter is an approximate set data structure that can be used in\nplace of a Bloom filter, but with several practical advantages: it uses\nless space, has better locality of reference, and can handle element\ndeletions. We provide the first theoretical analysis of a simplified\nvariation of cuckoo filters, showing that these advantages can be\nguaranteed to hold theoretically and not just experimentally.\n<p>\n(<a href=\"Epp-SWAT-16-slides.pdf\">Slides</a>)\n<p>\n<li><b>The computational hardness of <i>d</i>K-series</b>.<br>\n<a href=\"//www.ics.uci.edu/~wdevanny/\">W. E. Devanny</a>,\nD. Eppstein, and\nB. Tillman.<br>\n<i>NetSci2016</i> poster session, Seoul, Korea.\n<p>\nThe <i>d</i>K-series is an extension of the degree sequence of a graph to a \n<i>d</i>-dimensional tensor, describing the number of <i>d</i>-tuples of\nvertices with\neach possible combination of degrees and adjacencies. As we show, it is\nNP-hard to determine whether such a tensor represents a valid graph, for\nany <i>d</i>&nbsp;&ge;&nbsp;3, or for <i>d</i>&nbsp;=&nbsp;2 if the\nnumber of triangles in the graph is also specified (or constrained to be\nzero).\n<p>\n<li><b>Models and algorithms for graph watermarking</b>.<br>\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>,\n<a href=\"//www.ics.uci.edu/~jlam2/\">J. Lam</a>,\nN. Mamano,\n<a href=\"//www.eecs.harvard.edu/~michaelm/\">M. Mitzenmacher</a>, and\nM. Torres.<br>\n<a href=\"//arxiv.org/abs/1605.09425\">arXiv:1605.09425</a>.<br>\n<i>Proc. 19th Information Security Conference (ISC 2016)</i>, Honolulu,\nHawaii.<br>\n<a href=\"//doi.org/10.1007/978-3-319-45871-7_18\">Springer, <i>Lecture Notes in\nComp. Sci.</i> 9866 (2016), pp. 283&ndash;301</a>.\n<p>\nWe show how to modify a small number of edges in a large social network\nin order to make the modified copy easy to identify, even if an\nadversary tries to hide the modification by permuting the vertices and\nflipping a much larger number of edges. The result depends on the random\nfluctuation of vertex degrees in such networks, and the ability to\nuniquely identify vertices by their adjacencies to a small number of\nhigh-degree landmark vertices. This paper won the best student paper\naward at ISC for its student co-authors Lam, Mamano, and Torres.\n<p>\n<li><b>Maximizing the sum of radii of disjoint balls or disks</b>.<br>\nD. Eppstein.<br>\n<a href=\"//arxiv.org/abs/1607.02184\">arXiv:1607.02184</a>.<br>\n<i>Proc. 28th Canadian Conference on Computational Geometry</i>, Vancouver, BC,\nCanada, 2016, pp. 260&ndash;265.<br>\n<a href=\"//doi.org/10.20382/jocg.v8i1a12\"><i>J. Computational Geometry</i> 8 (1): 316&ndash;339, 2017</a>.<br>\n<p>\nWe show how to find a system of disjoint balls with given centers,\nmaximizing the sum of radius of the balls. Our algorithm takes cubic\ntime in arbitrary metric spaces and can be sped up to subquadratic time\nin Euclidean spaces of any bounded dimension.\n<p>\n(<a href=\"Epp-CCCG-16-slides.pdf\">Slides</a>)\n<p>\n<li><b>Scheduling autonomous vehicle platoons through an unregulated\nintersection</b>.<br>\nJ. Besa,\n<a href=\"//www.ics.uci.edu/~wdevanny/\">W. E. Devanny</a>,\nD. Eppstein, and\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>.<br>\n<i>Proc. 16th Worksh. Algorithmic Approaches for Transportation\nModelling, Optimization and Systems (ATMOS 2016)</i>, Aarhus, Denmark,\n2016.<br>\n<a href=\"//doi.org/10.4230/OASIcs.ATMOS.2016.5\">OpenAccess Series in Informatics (OASIcs) 54, Schloss\nDagstuhl (2016), pp. 5:1&ndash;5.16</a>.<br>\n<a href=\"//arxiv.org/abs/1609.04512\">arXiv:1609.04512</a>.<br>\n<p>\nWe consider a model of vehicle scheduling in which vehicles arrive at an\nintersection in indivisible platoons (or individual vehicles of variable\nlength) and the goal is to find a schedule for them to all cross the\nintersection without collisions, minimizing the maximimum delay incurred\nby any platoon. We show that for many types of intersections, an optimal\nschedule can be found in polynomial time by a combination of dynamic\nprogramming and parametric search.\n<p>\n<li><b>Spanning trees in multipartite geometric graphs</b>.<br>\n<a href=\"//cglab.ca/~biniaz/\">A. Biniaz</a>,\n<a href=\"//jitbose.ca/\">P. Bose</a>,\nD. Eppstein,\n<a href=\"//people.scs.carleton.ca/~maheshwa/\">A. Maheshwari</a>,\n<a href=\"//cglab.ca/~morin/\">P. Morin</a>, and\n<a href=\"//people.scs.carleton.ca/~michiel/\">M. Smid</a>.<br>\n<a href=\"//arxiv.org/abs/1611.01661\">arXiv:1611.01661</a>.<br>\n<a href=\"//doi.org/10.1007/s00453-017-0375-4\"><i>Algorithmica</i> 80\n(11): 3177&ndash;3191, 2018</a>.\n<p>\nWe provide near-linear-time algorithms for minimum and maximum spanning\ntrees on Euclidean graphs given by multicolored point sets, where each\npoint forms a vertex, and each bichromatic pair of points forms an edge\nwith length equal to their Euclidean distance.\n<p>\n<li><b>Covering many points with a small-area box</b>.<br>\n<a href=\"//www.win.tue.nl/~mdberg/\">M. De Berg</a>,\n<a href=\"//www.fmf.uni-lj.si/~cabello/\">S. Cabello</a>,\n<a href=\"//otfried.org/index.html\">O. Cheong</a>,\nD. Eppstein, and\n<a href=\"//www.ai6.uni-bayreuth.de/en/members/christian-knauer-en.html\">C. Knauer</a>.<br>\n<a href=\"//arxiv.org/abs/1612.02149\">arXiv:1612.02149</a>.<br>\n<a href=\"//doi.org/10.20382/jocg.v10i1a8\"><i>J. Computational\nGeometry</i> 10 (1): 207&ndash;222, 2019</a>.<br>\n<p>\nWe give an efficient algorithm for finding the smallest axis-parallel\nrectangle covering a given number of points out of a larger set of\npoints in the plane.\n<p>\n<li><b>Maximum plane trees in multipartite geometric graphs</b>.<br>\n<a href=\"//cglab.ca/~biniaz/\">A. Biniaz</a>,\n<a href=\"//jitbose.ca/\">P. Bose</a>,\n<a href=\"//cglab.ca/~jdecaruf/\">J.-L. De Carufel</a>,\nK. Crosbie,\nD. Eppstein,\n<a href=\"//people.scs.carleton.ca/~maheshwa/\">A. Maheshwari</a>,\n<a href=\"//people.scs.carleton.ca/~michiel/\">M. Smid</a>.<br>\n15th Algorithms and Data Structures Symp. (WADS 2017), St. John's, Newfoundland.<br>\n<a href=\"//doi.org/10.1007/978-3-319-62127-2_17\">Springer, <i>Lecture\nNotes in Comp. Sci.</i> (2017), pp. 193&ndash;204</a>.<br>\n<a href=\"//doi.org/10.1007/s00453-018-0482-x\"><i>Algorithmica</i> 81 (4): 1512&ndash;1534, 2019</a>.\n<p>\nWe consider problems of constructing the maximum-length plane (non-self-crossing) spanning\ntree on Euclidean graphs given by multicolored point sets, where each\npoint forms a vertex, and each bichromatic pair of points forms an edge\nwith length equal to their Euclidean distance.\nWe show that several such problems can be efficiently approximated.\n<p>\n</ul>\n\n<hr><p>\n<a href=\"year.html\">Years</a> &ndash;\n<a href=\"/~eppstein/pubs/\">Publications</a> &ndash;\n<a href=\"/~eppstein/\">David Eppstein</a> &ndash;\n<a href=\"/~theory/\">Theory Group</a> &ndash;\n<a href=\"/\">Inf. &amp; Comp. Sci.</a> &ndash;\n<a href=\"//www.uci.edu/\">UC Irvine</a>\n<p>\n<small>Semi-automatically <a href=\"filter.html\">filtered</a>\nfrom a common source file.</small>\n</body></html>\n", "encoding": "ascii"}