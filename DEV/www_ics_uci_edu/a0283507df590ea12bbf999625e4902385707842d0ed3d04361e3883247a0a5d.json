{"url": "https://www.ics.uci.edu/~thornton/ics46/Notes/MoveSemantics/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 46 Spring 2018, Notes and Examples: Move Semantics</title>\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 46 Spring 2018 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 46 Spring 2018<br />\r\n   Notes and Examples: Move Semantics</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Background</p>\r\n\r\n<p>If you've learned very much C++ before, you've no doubt worked your way through the details of how memory is managed.  When you've written classes, you've striven to make them what you might call \"well-behaved,\" which means that they manage memory properly &mdash; including when their objects are created, copied, assigned, and destroyed &mdash; and follow various other reasonable semantic rules that C++ is built around.  If you're not entirely familiar with things like copy constructors, assignment operators, or the use of <b>const</b> in the signature of a member function, it might be worth taking a look at the following set of notes from the most recent offering of my ICS 45C course.</p>\r\n\r\n<ul>\r\n  <li><a href=\"http://www.ics.uci.edu/~thornton/ics45c/Notes/WellBehavedClasses/\">ICS 45C Notes and Examples: Well-Behaved Classes</a></li>\r\n</ul>\r\n\r\n<p>I'll assume familiarity with those concepts throughout the discussion of the present topic.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Copying and assigning objects in C++</p>\r\n\r\n<p>As you've seen previously, there are a number of ways to trigger <i>copying</i> or <i>assigning</i> of objects in C++.</p>\r\n\r\n<ul>\r\n  <li>Declare a new variable and initialize it as a copy of an existing one.\r\n    <blockquote><pre>\r\nstd::string s = \"Alex\";\r\nstd::string t = s;        // copies the contents of s into t</pre></blockquote>\r\n    Afterward, anything done to <b>t</b> will have no effect on <b>s</b>, or vice versa, so the contents of <b>s</b> will need to be copied into <b>t</b> when <b>t</b> is constructed.\r\n  </li>\r\n  <li>Passing an object as a pass-by-value parameter to a function.  The expected guarantee is that anything that's done to a pass-by-value parameter in a function will have no effect on the original, so we'll need to make a copy into the parameter.</li>\r\n  <li>Assigning the value of one variable into another already-existing variable.\r\n    <blockquote><pre>\r\nt += \" Thornton\";\r\ns = t;                    // copies the contents of t into s, replacing existing contents of s</pre></blockquote>\r\n    Afterward, anything done to <b>s</b> will have no effect on <b>t</b>, or vice versa, so the contents of <b>s</b> will need to be replaced with a copy of the contents of <b>t</b>.\r\n  </li>\r\n</ul>\r\n\r\n<p>In every one of these cases, there is a common outcome: Once the contents of one object are copied into another, the two copies are separate, so any subsequent modification made to one will not affect the other.  The only time this isn't true is when you have a class that hasn't been implemented properly; a well-designed C++ class will always do one of two things:</p>\r\n\r\n<ol>\r\n  <li>Support copying and/or assigning properly, in the way described.  For classes with only well-behaved member variables, this will be the default; for others (e.g., when there are member variables that are pointers to dynamically-allocated storage owned by the object), we generally need copy constructors and assignment operators to make this work properly.</li>\r\n  <li>Disallow copying and/or assigning altogether, so that it is a compile-time error to even attempt to do it.  Some objects can't be copied in a natural way &mdash; the standard output object, <b>std::cout</b>, is an example.  Others are unsafe to copy, such as <b>std::unique_ptr</b>.  In these cases, the copying is made illegal.</li>\r\n</ol>\r\n\r\n<p>The ideas here are the same whether we're talking about tiny objects like <b>int</b>s or larger, more complex objects like <b>std::vector</b> or <b>std::map</b>.  Either way, the semantics of copying are expected to be the same in C++; a copy is a copy.  The only difference is that the more complex types require custom behavior &mdash; because the default of simply copying or assigning all of the member variables leads to problematic behavior, like copied linked lists that share the same nodes &mdash; which leads us to have to write copy constructors and assignment operators.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Swapping, revisited</p>\r\n\r\n<p>In the <a href=\"../Templates\">Templates</a> notes, we saw a function template called <b>myswap</b>, which was intended to be able to swap values between two variables of the same type.  That function template is duplicated below:</p>\r\n\r\n<blockquote><pre>\r\ntemplate &lt;typename T&gt;\r\nvoid myswap(T&amp; a, T&amp; b)\r\n{\r\n    T temp = a;\r\n    a = b;\r\n    b = temp;\r\n}\r\n</pre></blockquote>\r\n\r\n<p>We implemented <b>myswap</b> using a fairly standard three-line approach based around copying the values of <b>a</b> and <b>b</b>:</p>\r\n\r\n<ul>\r\n  <li>Copy the value of <b>a</b> into a temporary variable, so we can safely change it without losing its original value.  (A temporary variable turns out to be unavoidable here, since we have to change one variable at a time.)</li>\r\n  <li>Next, copy the value of <b>b</b> into <b>a</b>.  At this point, <b>a</b> and <b>b</b> are separate copies of the same value, the original value of <b>b</b>.</li>\r\n  <li>Finally, copy the original value of <b>a</b> from the temporary variable into <b>b</b>.  At this point, <b>a</b>'s value is the original value of <b>b</b> and <b>b</b>'s value is the original value of <b>a</b>; the values have been swapped.</li>\r\n</ul>\r\n\r\n<p>It's easy to see why this strategy works; writing out some integer values on a piece of paper and tracing the execution line by line should be enough to convince yourself that this approach is correct.  But is this actually a good way to solve the problem?  The answer depends very much on what kinds of objects you're swapping.  If you're swapping <b>int</b> values, this is a perfectly reasonable approach, because the copies &mdash; one copy constructor call (<b>a</b> copy-constructed into <b>temp</b>) and two assignment operators calls (<b>b</b> into <b>a</b>, then <b>temp</b> into <b>b</b>) &mdash; are relatively inexpensive, and anything fancier (using pointers or references or some other approach to try to avoid the copies) would be at least as expensive as just copying the integers.  But imagine, instead, that you're swapping <b>std::vector&lt;int&gt;</b> values.  That's a very different story indeed.</p>\r\n\r\n<p>Let's suppose that each vector contains three member variables: <b>data</b> (a pointer to a dynamically-allocated array), <b>size</b>, and <b>capacity</b>.  Watch what happens when we swap them using the <b>myswap</b> function template above, starting with our two vectors, <b>a</b> and <b>b</b>.</p>\r\n\r\n<p class=\"center\"><img src=\"VectorNaiveSwap_Step1.png\" alt=\"Naive swapping of vectors, step 1\" /></p>\r\n\r\n<p>First, we copy <b>a</b> into <b>temp</b>, which allocates a brand-new array and copies the contents of <b>a</b>'s array into it.</p>\r\n\r\n<p class=\"center\"><img src=\"VectorNaiveSwap_Step2.png\" alt=\"Naive swapping of vectors, step 2\" /></p>\r\n\r\n<p>Next, we copy <b>b</b> into <b>a</b>.  The most straightforward implementation would allocate a new array for <b>a</b>, then destroy the old one &mdash; that's what's pictured here &mdash; though a smarter one could certainly note that the capacities are the same as reuse the existing one.</p>\r\n\r\n<p class=\"center\"><img src=\"VectorNaiveSwap_Step3.png\" alt=\"Naive swapping of vectors, step 3\" /></p>\r\n\r\n<p>Next, we copy <b>temp</b> into <b>b</b>, again triggering a new array allocation, along with the deletion of an existing one.  Again, this could have been avoided since the capacities are the same, but would not be avoidable if they were substantially different from one another.</p>\r\n\r\n<p class=\"center\"><img src=\"VectorNaiveSwap_Step4.png\" alt=\"Naive swapping of vectors, step 4\" /></p>\r\n\r\n<p>Finally, the function ends, <b>temp</b> is destroyed, and we're left with the following final outcome.</p>\r\n\r\n<p class=\"center\"><img src=\"VectorNaiveSwap_Step5.png\" alt=\"Naive swapping of vectors, step 5\" /></p>\r\n\r\n<p>This is what we wanted, but at what cost?  When you consider the actual behavior &mdash; and C++ requires that you think about things this way, because how you do things has such a profound impact on performance &mdash; you realize how much waste there is.  The original contents of <b>a</b> have been copied twice, which means we've dynamically allocated two arrays <i>and</i> copied every element from one to the other both times.  (Imagine these were <b>std::vector&lt;std::string&gt;</b> values instead!  It's even worse then, because copying the strings will add even more cost!)  Additionally, the original contents of <b>b</b> have been copied once.  While it might be possible for the copy constructor and assignment operator to do some fancy footwork to eliminate at least some of the allocation (e.g., by reusing exsting arrays instead of allocating new ones), the basic problem remains: We're making copies of things that, when you think about it, don't really need to be copied at all.</p>\r\n\r\n<p>By way of analogy, suppose that we're instead talking about sequences of numbers written on pieces of paper.  I'm holding one piece of paper that we'll call <b>a</b> and you're holding the other that we'll call <b>b</b>, each with a different sequence of numbers.  Now suppose we wanted to swap sequences, so each was holding the other person's sequence.  In this analogy, our <b>myswap</b> implementation would be the equivalent of doing this:</p>\r\n\r\n<ul>\r\n  <li>Obtaining an additional piece of paper that we'll call <b>temp</b>, then writing the sequence from <b>a</b> on to <b>temp</b>.</li>\r\n  <li>Obtaining another additional piece of paper, then writing the contents of <b>b</b> on that paper.  We'll call this new piece of paper <b>a</b> and then throw away the paper we used to call <b>a</b>.</li>\r\n  <li>Obtaining yet another additional piece of paper, then writing the contents of <b>temp</b> on that paper.  We'll call this new piece of paper <b>b</b> and then throw away the paper we used to call <b>b</b>.</li>\r\n  <li>Finally, we'll throw away the paper we call <b>temp</b>, because we no longer need it.</li>\r\n</ul>\r\n\r\n<p>Maybe we could avoid some of this work by, for example, erasing the numbers and rewriting new sequences on the same paper, but the fact remains that we'd spend a lot of time rewriting the sequences, one way or another.  And, when you think about it, this all seems very silly.  If all we want is for me to have your sequence instead of mine, and for you to have my sequence instead of yours, why don't we just exchange papers and be done with it?  I'll hand you my paper, you hand me your paper, and that's it; we're done!  (Even if you stretch the analogy to be a bit more like C++ and say we can each only hold one paper at a time, I could put my paper on a desk, you could hand me your paper, and then you could pick up my paper.  Simple!)</p>\r\n\r\n<p>This idea wasn't lost on the designers of C++, and, in the case of swapping, it's long been possible to work around the problem.</p>\r\n\r\n<p class=\"subtitle\">Specializing the swap operation for std::vector</p>\r\n\r\n<p>For a long time, it's been possible in C++ to implement <i>specializations</i> of templates, which is to say that we can supply a special version of a template for a particular set of template parameters.  This allows us to have the basic, generic behavior that's used most of the time, while still being able to specify something better in cases where we know we could do better.  A specialization of our <b>myswap</b> function for <b>std::vector</b> might look something like this:</p>\r\n\r\n<blockquote><pre>\r\ntemplate &lt;typename T&gt;\r\nvoid myswap(std::vector&lt;T&gt;&amp; a, std::vector&lt;T&gt;&amp; b)\r\n{\r\n    a.swap(b);\r\n}\r\n</pre></blockquote>\r\n\r\n<p>As luck would have it, <b>std::vector</b> has a <b>swap</b> member function, so this turns out to be quite easy to implement.  Given that it's a member function, it has full knowledge of how <b>std::vector</b> is implemented, so it's smart enough to realize something important: If you want to swap the contents of two vectors, all you have to do is swap the <i>pointers</i> to the dynamically-allocated arrays, as well as the size and capacity values.  There's no need to make any copies of the arrays themselves, or to touch any of the individual elements.  So this swap will actually be quite cheap, even if the vectors are large.  Suppose we started with this scenario:</p>\r\n\r\n<p class=\"center\"><img src=\"VectorInternalSwap_Step1.png\" alt=\"Specialized swap for vector, step 1\" /></p>\r\n\r\n<p>After running our specialized version of <b>myswap</b> on these two vectors, here's what we would get:</p>\r\n\r\n<p class=\"center\"><img src=\"VectorInternalSwap_Step2.png\" alt=\"Specialized swap for vector, step 2\" /></p>\r\n\r\n<p>Particularly when you're talking about objects for which copying is expensive &mdash; and data structures are a great example of this, since they can often grow arbitrarily large &mdash; the name of the game is avoiding copies at all costs.  We can partly win this battle by passing them by reference instead of by value, or by using smart pointers to \"share\" them.  But, as we've seen with <b>myswap</b>, there are still times where we'll need to give some thought to the details; if we write code without thinking carefully enough about its impact, there can be an awful lot of work going on behind the scenes to implement something that could ultimately be done with a lot less work if we were more careful.</p>\r\n\r\n<p>Compilers, too, can help.  They've gotten better over the years at eliminating at least some unnecessary copying, using a technique called <i>copy elision</i>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">How copy elision helps</p>\r\n\r\n<p>Compilers can be more clever than we sometimes give them credit for.  Generally, the goal of a C++ compiler is to emit code that is <i>observably equivalent</i> to the code that we wrote; in other words, a compiler is permitted to generate any code it likes, so long as the observable effect of that code &mdash; what it looks like the code does, ultimately &mdash; is the same as what we wrote.  This means that the code that's generated is often quite different than a naive reading of our code might make us believe.</p>\r\n\r\n<p>For example, consider this C++ statement:</p>\r\n\r\n<blockquote><pre>\r\nstd::vector&lt;int&gt; v = std::vector&lt;int&gt;{1, 2, 3, 4, 5};\r\n</pre></blockquote>\r\n\r\n<p>A naive reading of that statement would make us believe that it does the following:</p>\r\n\r\n<ul>\r\n  <li>Constructs a new temporary vector of five integers (1, 2, 3, 4, and 5).</li>\r\n  <li>Constructs <b>v</b> as a copy of that temporary vector of five integers.</li>\r\n  <li>Destroys the temporary vector, since it's no longer necessary.</li>\r\n</ul>\r\n\r\n<p>It's clear, though, that this is a pretty wasteful approach.  Why build the temporary vector and leave it alive just long enough to copy it into <b>v</b>?  Why not just eliminate all of that and construct <b>v</b> directly, so that it contains the five integers, and be done with it?</p>\r\n\r\n<p>C++ compilers do what's called <i>copy elision</i> to deal with cases like this.  At well-defined times &mdash; the C++ standard actually defines when this is allowed to occur, since constructors, copy constructors, and assignment operators might have side effects &mdash; the unnecessary copies will be eliminated automatically.  In the statement above, for example, since the temporary vector lasts only long enough to copy-construct it into <b>v</b>, the compiler simply constructs the temporary into <b>v</b> in the first place; <b>v</b> becomes a vector of five integers with a regular constructor, and the temporary never exists.</p>\r\n\r\n<p>There are other cases where copy elision takes effect, as well.  Another example occurs when values are returned from functions and then immediately stored into variables.</p>\r\n\r\n<blockquote><pre>\r\nstd::vector&lt;int&gt; build()\r\n{\r\n    return std::vector&lt;int&gt;{1, 2, 3, 4, 5};\r\n}\r\n\r\n...\r\n\r\nstd::vector&lt;int&gt; v = build();\r\n</pre></blockquote>\r\n\r\n<p>In a case like this, a compiler is permitted to elide the copy, instead constructing the returned vector directly into the variable <b>v</b>.  Similarly, temporary values passed into pass-by-value parameters can be constructed directly into those parameters, again eliding a copy.</p>\r\n\r\n<p>But, unfortunately, this technique only gets us so far; there are plenty of copies that the compiler is not allowed to elide.  But, thanks to some advances in C++ (since the C++11 standard), if we write our own code more carefully, we can remove certain other kinds of unnecessary copies ourselves, by implementing them instead as <i>moves</i>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Moving instead of copying</p>\r\n\r\n<p>While it has long been possible to customize swapping behavior to make it more efficient by specializing the <b>std::swap</b> function in the C++ Standard Library, swapping turns out to be a special case of something that's actually more general.  Sometimes you want the value of one variable to be stored in another variable, but you don't want to make a copy of it, because only the new variable needs its value subsequently.  In a case like that, all you want is for that value to <i>move</i> to a new variable instead.</p>\r\n\r\n<p>You're probably already quite familiar with the distinction between copying and moving in other contexts.  For example, you've no doubt seen this distinction in the context of files on your hard drive.</p>\r\n\r\n<ul>\r\n  <li>If you <i>copy</i> a file, that file's contents are now separately stored in two places.  Subsequently, anything you do to one of those copies will not affect the other.</li>\r\n  <li>If you <i>move</i> a file &mdash; say, from one directory to another &mdash; then its contents are still only stored once, albeit in a different place.</li>\r\n</ul>\r\n\r\n<p>It may not surprise you to know that moving a file is generally a lot cheaper than copying it, because filesystems tend to be implemented in such a way that a file contains something akin to a pointer to its contents.  Moving a file, conceptually, requires putting that same pointer in a different place, but the contents of the file don't have to actually move, so it's no more expensive to move a large file than it is to move a small one.  (You may also have noticed that moving a file from one hard drive to another, or from a hard drive to a USB stick, behaves quite differently.  That can't be done without copying the contents of the file to the new device; a move between devices would actually be implemented as a copy followed by a deletion.)</p>\r\n\r\n<p>Let's suppose, hypothetically, that there was a <i>move operator</i> in C++, somewhat akin to assignment, but whose goal was to move the contents of a variable into another, rather than copying it.  We'll say that this operator is written as &lArr;, where <b>a &lArr; b</b> moves the value out of <b>b</b> and into <b>a</b>, leaving <b>b</b> in an undefined state.  If there was such an operator, then you could write our <b>myswap</b> function template much differently:</p>\r\n\r\n<blockquote><pre>\r\ntemplate &lt;typename T&gt;\r\nvoid myswap(T&amp; a, T&amp; b)\r\n{\r\n    T temp &lArr; a;\r\n    a &lArr; b;\r\n    b &lArr; temp;\r\n}\r\n</pre></blockquote>\r\n\r\n<p>Why this would be different is that moving is a different operation than copying.  For example, if the type <b>T</b> was <b>std::vector&lt;int&gt;</b>, the moves would be substantially cheaper than the corresponding copies, because it would require only adjusting pointers to dynamically-allocated arrays, rather than creating new arrays or copying values from one into another.  In more detail, here's how this might work.  Let's suppose, again, that each vector contains three member variables: <b>data</b> (a pointer to a dynamically-allocated array), <b>size</b>, and <b>capacity</b>.</p>\r\n\r\n<ul>\r\n  <li>First, <b>a</b> would be moved into <b>temp</b>, which would make these changes:\r\n    <ul>\r\n      <li>Set <b>temp</b>'s <b>data</b> to be <b>a</b>'s data.  This is simply a pointer copy, which is quite inexpensive.</li>\r\n      <li>Set <b>temp</b>'s <b>size</b> and <b>capacity</b> to be <b>a</b>'s <b>size</b> and <b>capacity</b>.  Again, this would be quite inexpensive.</li>\r\n      <li>Set <b>a</b>'s <b>data</b> to <b>nullptr</b>, since it no longer has any contents.</li>\r\n      <li>Set <b>a</b>'s <b>size</b> and <b>capacity</b> to 0.</li>\r\n    </ul>\r\n  </li>\r\n  <li>Next, <b>b</b> would be moved into <b>a</b>, which would be implemented similarly.  <b>a</b> would now have the same <b>data</b>, <b>size</b>, and <b>capacity</b> that <b>b</b> used to have, and <b>b</b> would now be empty.</li>\r\n  <li>Next, <b>temp</b> would be moved into <b>b</b>, which would also be similar.  <b>b</b> would now contain the contents of <b>temp</b>, and <b>temp</b> would now be empty.</li>\r\n  <li>Finally, the local variable <b>temp</b> would be destroyed, since we've reached the end of the function.  But since <b>temp</b> is empty, it will be destroyed quite easily; there's nothing to deallocate.</li>\r\n</ul>\r\n\r\n<p>This implementation of <b>myswap</b> has almost no unnecessary overhead left in it.  None of the elements of either <b>a</b> or <b>b</b> were ever copied or even touched; instead, pointers were swapped, which is cheap (and doesn't scale linearly with the size of the vectors).</p>\r\n\r\n<p>It should be noted that the move operator described here doesn't exist in C++, but there is an implementation of this same idea, which is called <i>move semantics</i>.  From a performance perspective, being able to move things instead of copy them can eliminate a lot of unnecessary overhead, particularly when you talk about objects that would be complex or expensive to copy.  Let's take a look at how the actual implementation of move semantics in C++ works.  (Note that this is a feature that was added to C++ relatively recently, in the C++11 standard, so you'll need a relatively recent compiler to make use of it.  The compiler on the ICS 46 VM supports it, so you're on safe ground there.)</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Move semantics in C++</p>\r\n\r\n<p class=\"subtitle\">Lvalues and rvalues, revisited</p>\r\n\r\n<p>C++ programs, fundamentally, manipulate <i>values</i>.  Values are stored in variables, passed as parameters, returned from functions, used temporarily and then thrown away, and so on.  To make sense of all of this, C++ distinguishes between a few kinds of values, most notably <i>lvalues</i> and <i>rvalues</i>.</p>\r\n\r\n<ul>\r\n  <li>An <i>lvalue</i> is one that has storage allocated to it.  For example, when you evaluate the name of an existing variable in an expression, that's an lvalue, because variables are stored in memory.</li>\r\n  <li>An <i>rvalue</i> is one that does not have storage allocated to it, such as the value of an expression that was calculated temporarily.</li>\r\n</ul>\r\n\r\n<p>The letters <i>l</i> and <i>r</i> are used to distinguish <b>l</b>eft from <b>r</b>ight, the basic distinction being that lvalues can appear on the left-hand side of an assignment and that rvalues can appear only on the right-hand side.  So, for example, it's legal to say this:</p>\r\n\r\n<blockquote><pre>\r\nx = 3;\r\n</blockquote></pre>\r\n\r\n<p>because <b>x</b> is an lvalue (i.e., it refers to a location in memory), but it's not legal to say this:</p>\r\n\r\n<blockquote><pre>\r\n3 = x;\r\n</pre></blockquote>\r\n\r\n<p>because <b>3</b> is an rvalue, so where would we be storing a result?</p>\r\n\r\n<p class=\"subtitle\">Lvalue references</p>\r\n\r\n<p>We've seen, many times, that you can declare variables that are <i>references</i> in C++.  References establish an alternative name for some object.  Once you've bound it to an object, any time you use the reference, you're using the original object; the two are synonymous.</p>\r\n\r\n<blockquote><pre>\r\nint i = 3;\r\nint&amp; r = i;                       // r is now bound to i\r\nr = 9;\r\nstd::cout &lt;&lt; i &lt;&lt; std::endl;      // prints <b>9</b>\r\n</pre></blockquote>\r\n\r\n<p>You've probably noticed that it's not possible to bind a reference to a constant:</p>\r\n\r\n<blockquote><pre>\r\nint&amp; r = 9;                       // not legal!\r\n</pre></blockquote>\r\n\r\n<p>The technical reason is that <b>9</b> is not an lvalue; it has no storage associated with it, so a subseqeuent assignment to <b>r</b> would be meaningless.  For this reason, C++ nowadays has a more specific name for the kinds of references you've seen previously: they're called <i>lvalue references</i>, because they can only refer to lvalues.</p>\r\n\r\n<p class=\"subtitle\">Rvalue references</p>\r\n\r\n<p>Beginning in C++11, we now have what are called <i>rvalue references</i>, which are permitted to refer to rvalues but <i>not</i> to lvalues.  An rvalue reference to an <b>int</b> rvalue would have the type <b>int&amp;&amp;</b>; the two <b>&amp;</b> characters are what tells you that the reference is an rvalue reference (as opposed to the single <b>&amp;</b> character used to denote an lvalue reference).  At first blush, that seems like a very odd feature to include in the language, but it is surprisingly useful in practice.  Let's first make sure we understand their basic mechanics.</p>\r\n\r\n<blockquote><pre>\r\nint i = 3;\r\nint&amp;&amp; r1 = i;                     // not legal; i is not an rvalue\r\nint&amp;&amp; r2 = 9;                     // legal, since 9 is an rvalue\r\n</pre></blockquote>\r\n\r\n<p>A bit more technically, the real distinction here is that <b>9</b> is a value that is <i>expiring</i>, which is to say that it will die as soon as the expression it arises from has been evaluated.  Rvalue references allow you to keep expiring values alive a bit longer, so you can do something with them before they die.</p>\r\n\r\n<p>It should be noted that all of this gets a lot more complicated than I'm explaining here, particularly in cases where you use rvalue references with types that aren't determined until a template is instantiated.  But this understanding is enough for us to understand how to implement move semantics, which is one of their primary uses.</p>\r\n\r\n<p class=\"subtitle\">Move constructors</p>\r\n\r\n<p>Beginning in C++11, a new kind of constructor called a <i>move constructor</i> is now available to us, and can be written in any class where we need one.  A move constructor's job is to move the value of its parameter into the object being constructed, leaving the parameter essentially valueless (or, at the very least, in some valid state) afterward.  Granted, because they have an effect on their source, they are potentially dangerous, but they're only actually used in scenarios where that danger doesn't exist: when the source is an rvalue.  We denote that by writing the move constructor so that its parameter is an rvalue reference, so it will only be called when the source is an rvalue.</p>\r\n\r\n<blockquote><pre>\r\nclass X\r\n{\r\npublic:\r\n    ...\r\n    X(X&& x);     // move constructor\r\n    ...\r\n};\r\n</pre></blockquote>\r\n\r\n<p>Since we know that the parameter is about to expire, it's safe for us to do things that would otherwise be problematic.  For example, a hypothetical move constructor for <b>std::vector</b> might look something like this:</p>\r\n\r\n<blockquote><pre>\r\ntemplate &lt;typename T&gt;\r\nstd::vector&lt;T&gt;::vector(std::vector&lt;T&gt;&& v) noexcept\r\n    : data{nullptr}, size{0}, capacity{0}\r\n{\r\n    std::swap(data, v.data);\r\n    std::swap(size, v.size);\r\n    std::swap(capacity, v.capacity);\r\n}\r\n</pre></blockquote>\r\n\r\n<p>In this case, we've essentially cannibalized the internals of <b>v</b>, placed them inside of the newly-constructed vector, and left behind empty internals in <b>v</b>.  Since we know that <b>v</b> is a vector that is about to expire, then we leave it in a state where it will be inexpensive to clean up.  But rather than copying the internals of <b>v</b> into our newly-constructed vector, we've moved them, which is to say that the newly-constructed vector now looks <i>exactly</i> like <b>v</b> used to look; it points to the same array and has the same size and capacity.  And not a single element of the array was touched or copied, so this was very inexpensive.</p>\r\n\r\n<p>Note that we were able to mark this move constructor <b>noexcept</b> because all we're doing is swapping the values of pointers and integers; nothing can fail.  (This is not uncommon in move constructors, and we generally want to mark them as <b>noexcept</b> whenever we can, because that triggers some optimizations that aren't available without it.)</p>\r\n\r\n<p>We need not invoke this constructor directly.  A C++ compiler will automatically generate code that calls it in cases where it's reasonable and safe to do so, and, for the most part, the defaults work as you would expect.  The advantage is that cases where vectors can be moved will now be substantially faster &mdash; asymptotically faster! &mdash; than they used to be.  Could we leave out a move constructor and let the copy constructor do the work?  Sure, we could.  But adding a move constructor is a great performance optimization in cases where moving could be implemented a lot more cheaply than copying, particularly if you're implementing something like a data structure, whose size may grow arbitrarily large.</p>\r\n\r\n<p class=\"subtitle\">Move assignment operators</p>\r\n\r\n<p>Similarly, C++11 added the notion of a <i>move assignment operator</i>, which is one that assigns an expiring value into an existing variable by moving it.  Again, a parameter with an rvalue reference type is used to distinguish it from a typical (copy) assignment operator.</p>\r\n\r\n<blockquote><pre>\r\nclass X\r\n{\r\npublic:\r\n    ...\r\n    X& operator=(X&& x);       // move assignment operator\r\n};\r\n</pre></blockquote>\r\n\r\n<p>As with move constructors, the knowledge that a move assignment operator's parameter is an expiring value makes it possible for us to do things that are much more efficient than we could if the parameter had to live on.  For example, a hypothetical move assignment operator for <b>std::vector</b> might look something like this:</p>\r\n\r\n<blockquote><pre>\r\ntemplate &lt;typename T&gt;\r\nstd::vector&lt;T&gt;&amp; std::vector&lt;T&gt;::operator=(std::vector&lt;T&gt;&amp;&amp; v) noexcept\r\n{\r\n    std::swap(data, v.data);\r\n    std::swap(size, v.size);\r\n    std::swap(capacity, v.capacity);\r\n    return *this;\r\n}\r\n</pre></blockquote>\r\n\r\n<p>Note that we've being careful to swap the old value of the target vector into the source vector, rather than leaving the source vector in an empty state.  This is important because it ensures that the old value of the target vector &mdash; which has been replaced by the new value &mdash; will still need to be destroyed.  But since we know the source vector is expiring, we know that its destructor is about to be called, so we might as well let that destructor clean up the target vector's old value for us.</p>\r\n\r\n<p>Once again, I should point out that a move assignment operator is not a requirement in a C++ class, because a (copy) assignment operator can always be used in its place, but move assignment can add a very important layer of optimization for types where copying is expensive, particularly if you're implementing something like a data structure, whose size may grow arbitrarily large.</p>\r\n\r\n<p class=\"subtitle\">std::move and rewriting our myswap to use moves instead of copies</p>\r\n\r\n<p>There is one more wrinkle that is worth understanding.  While a C++ compiler is capable of determining, in many cases, that values are about to expire, there are times when it's not obvious from the context of the code you wrote, yet you can determine that a value should expire at a certain point.  As an additional performance optimization, you can \"force\" a value to expire by calling a function in the C++ Standard Library called <b>std::move</b>.  It's important to point out that <b>std::move</b> is actually a somewhat misleading name, because it doesn't actually move anything; what it does is cast a value to its corresponding rvalue reference type, which means that the compiler will now freely assume that the value is about to expire.  Anything you do with it subsequently is considered undefined behavior, but if you use this carefully, you can achieve a lot of benefit in some circumstances.</p>\r\n\r\n<p>The <b>std::move</b> function in the C++ Standard Library isn't just a curiosity; it actually has a lot of use.  For example, it allows us to write something very much akin to the hypothetical <b>myswap</b> that we proposed using the nonexistent &lArr; operator.</p>\r\n\r\n<blockquote><pre>\r\ntemplate &lt;typename T&gt;\r\nvoid myswap(T&amp; a, T&amp; b)\r\n{\r\n    T temp = std::move(a);\r\n    a = std::move(b);\r\n    b = std::move(temp);\r\n}\r\n</pre></blockquote>\r\n\r\n<p>Note that this is the implementation of <b>std::swap</b> in the C++ Standard Library these days, so there is much less need to implement custom swap functions than there once was.  By solving the more general problem &mdash; allowing moves in place of copies, when appropriate &mdash; the more specific problem is solved automatically.</p>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}