{"url": "https://www.ics.uci.edu/~taylor/ICS125_FQ04/implementation.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r<HTML>\r<HEAD>\r   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\r   <META NAME=\"GENERATOR\" CONTENT=\"Mozilla/4.07 (Macintosh; I; PPC) [Netscape]\">\r   <TITLE>Deliverable 3: Design</TITLE>\r</HEAD>\r<BODY BGCOLOR=\"#FFFFF0\">\r\r<CENTER>\r<H2> ICS 125: Project in Software System Design</H2></CENTER>\r\r<CENTER>\r<H3> Fall Quarter 1999</H3></CENTER>\r\r<CENTER>\r<H1> Implementation</H1></CENTER>\r\r<H3>\rDue Date</H3>\rAs described in the course syllabus.\r\r<HR>\r<h3>Overview</h3>\r\r<P>After finalizing your design, your team shall implement the\rsoftware according to the design and requirements for your application.\rThis implementation should be done incrementally (and will be handed in\rover two phases). This assignment corresponds to the initial\rcoding phase and unit testing and debugging. The next assignment corresponds\rto software integration, integration and system testing, debugging, and\renhancements.&nbsp; In conjunction with coding each unit, your team must\rdevelop unit test plans covering each of the implemented units.\r\r<P>For this assignment, you must turn in both a descriptive document and\rcode listings as described below. The source code should be documented\rwith sufficient, informative comments. This deliverable also includes the\runit test plans and test execution histories, which should functionally\rand structurally test each unit in the implementation. You should organize\rthe unit test plans and test history documentation in much the same way\ras the units themselves are organized in the implementation. You need not\rprint out the results of all testing activity, but should show enough results\rof executing your unit test plans to convince us that your units are ready\rfor integration.\r\r<P>Specify the correspondence between your software design and the implementation.\rShow this correspondence any way you feel is appropriate (e.g., make notations\rthroughout your document or in your minutes), but by all means include\rsome discussion in the overview section. Implementing the software will\rundoubtedly reveal inadequacies in previous documents. Please note these\rproblems and what was done to solve them.\r\r<P>Don't forget to include your meeting minutes and performance appraisals\rwith your document; refer to the syllabus for the complete check-list of\rwhat has to be turned in. As before, make sure that you post your design\rdocument and your meeting minutes to your team web page.\r\r\r<BR>\r<HR>\r<H3>\rDeliverable Objectives/Quality</H3>\rKeep in mind that key objectives of the implementation are to:\r<UL>\r<LI> Translate the design into code that will satisfy requirements</LI>\r<LI> Identify inadequacies in the design and requirements</LI>\r<LI> Document further decisions and rationale</LI>\r<LI> Provide a reference tool readable by developers, testers, and maintainers</LI>\r<LI> Develop a review plan that will yield confidence in the code</LI>\r<LI> Provide a basis for unit testing to determine that implementation meets\rdesign</LI>\r</UL>\r\rIn addition, keep in mind that an implementation document should satisfy\rthe following qualities:\r<UL>\r<LI> Complete? everything that is in the requirements and design is implemented</LI>\r<LI> Consistent? no mismatched interfaces and consistent with the design</LI>\r<LI> Stylistic? exhibits good programming style</LI>\r<BR>(e.g., safe constructs, information hiding, well defined types, reasonable\rmodule sizes and complexity, well-defined module interfaces, avoids side\reffects)\r<LI> Understandable? code should be constructed that is easy to read,</LI>\r<BR>not necessarilly easy to write\r<LI> Modifiable? again this is a living document</LI>\r<LI> Desensitized to change? maintains information hiding as specified in the\rdesign</LI>\r<LI> Confirmable, Verifiable and testable? you can tell when you've met the\rdesign and requirements</LI>\r</UL>\r\r<HR>\r<H3> Document Contents</H3>\r\r<H4>\rIntroduction</H4>\rExpand your introduction to discuss your specific approaches to the implementation\rof the system and the organization of this document. This description is\ressentially just an updated version of the introduction you included in\ryour previous deliverable. This description should guide the reader.\r<H4>\rUnderstanding</H4>\rAs needed, expand the understanding section of your previous document. Make sure to\radd descriptions of what additional steps or actions you took to understand each technology\ror software during this phase. If you make changes to this section, add\rtext describing why the change was necessary, and why it more accurately\rreflects your new understanding. This section need not be different if\ryour understanding hasn't changed.\r\r<H4>\rProject Plan</H4>\rThis will be an iterative expansion of your previous submission. Expand\ryour project plan to represent how you have accomplished the work so far.\rReassess the project risks. Expand your task network or work breakdown\rstructure to include the effort expended to complete this task. Based on\rthe work you have done, revise your estimates on how much your team can\raccomplish and deliver.  Update your time estimates for the remaining\rwork.\r\r<P>If you make changes, add text describing why the change was necessary\ror why it will improve the ability of your team to accomplish the work\ryou have proposed.\r\r<H4>\rImplementation</H4>\r<UL>\r<LI> Overview of Software Implementation</LI>\r  <UL>\r  <LI> Implementation organization</LI>\r  <LI> How your systems works</LI>\r  <LI> System size (e.g., source lines, packages) (See the note below under the\r\t presentation instructions for how to show this.)</LI>\r  <LI> Major limitations on the current implementation</LI>\r</UL>\r\r<LI> Source Code Listings</LI>\r   <UL>\r   <LI> List of Modules/Objects within your system</LI>\r   <LI> Complete listings for your software system.</LI>\r       <UL>\r       <LI> Listings should be free of syntax errors and should have compiled</LI>\r       <LI> Organize these listings by system architecture in the same order as your\r            design document</LI>\r       <LI> Each module/object must be documented in standard ways, defining its purpose,\r            how it works, and interface (this should be straight out of the design)</LI>\r       </UL>\r   </UL>\r</UL>\r\r<H4>\rUnit Test Plan/Test History</H4>\rIncludes a unit test plans capable of demonstrating that each unit meets\rthe design and requirements traceable to that unit. The unit test plans\rshould be based on both functional test heuristics based on the functional\rdescription of the unit (black box) and structural test criterion to at\rleast cover all branches (white box).\r\r<P>Shows selected results of your testing activity, enough to raise our\rconfidence in your software and to show that it is ready for integration\rand final testing. In particular, you should show a representative selection\rof test results for each unit test plan. The test results should show the\rtest case executed, whether any failures were detected, what faults were\rdebugged, and (hopefully) that it eventually passed.\r\r<P>NOTE: if desired, the test cases can be grouped with the code entity\rto which they apply, else a cross reference listing of some sort should\rbe provided. In addition, the test results can be grouped with the test\rplans/cases to which they apply, else a cross reference listing of some\rsort should be provided.\r\r<UL>\r<LI> Unit Test Plan / Test Execution History ... for each test case</LI>\r   <UL>\r   <LI> Test Case Identification</LI>\r   <LI> Purpose of Test Case</LI>\r   <LI> Item(s) being tested</LI>\r   <LI> Input specification</LI>\r   <LI> Output specification</LI>\r      <UL>\r      <LI> Expected Results or Test Oracle Mechanism</LI>\r      </UL>\r   <LI> Test environmental needs or special test procedures</LI>\r   </UL>\r\r   <HR WIDTH=\"100%\">\r\r   <UL>\r   <LI> Test Results</LI>\r      <UL>\r      <LI> pass/fail</LI>\r      </UL>\r   <LI> Failures detected</LI>\r   <LI> Faults debugged</LI>\r   <LI> Final Test Result</LI>\r      <UL>\r      <LI> hopefully passed ... but if not fixed, document this</LI>\r      </UL>\r   </UL>\r</UL>\r\r<H4>\rDemonstration Plan</H4>\rHow and what will you demonstrate? This is a chance to continue your planning\rfor the final demonstration.\r<H4>\rTracking and Control Mechanisms</H4>\r<p>\rConfiguration Management: how are your modules/objects maintained?\r<UL>\r<LI> file structure, sub-directories, Makefiles, etc.</LI>\r<LI> persistent data</LI>\r</UL>\r<p>\rDesign Cross Reference: what files contain what modules/objects from your\rdesign?\r<UL>\r<LI> a table mapping module/object to file</LI>\r<LI> make sure it is complete and consistent.</LI>\r</UL>\r\r<H4>\rModifications to Prior Documents</H4>\r\r<H5>\rDesign</H5>\rThis will be similar to your previous design document, but if any modules/objects\ror interactions are changed, added or deleted, make this explicit. Highlight\rwhy the design was changed/added/deleted and by whom (customer, developer,\retc.). Again make sure your design meet the objectives of completeness,\rabstraction, modifiability, and consistency. If your design has not changed,\rthen this section should be identical to what you submitted earlier.\r<H5>\rRequirements</H5>\rThis will be similar to your previous requirements document, but if any\rrequirements are changed, added or deleted, make this explicit. Highlight\rwhy the requirement was changed/added/deleted and by whom (customer, developer,\retc.). Again make sure your requirements meet the objectives of completeness,\runderstandability, utility, unambiguity, and consistency. If your requirements\rhave not changed, then this section should be identical to what you submitted\rearlier.\r<H4>\rGlossary</H4>\rDefines any terms used in the specifications above.\r\r<H4> Documentation</H4>\rThis section is reserved for any additional documentation you may have\rdeveloped during this phase of the project. Specifically, if during the\rcourse of developing the your understanding of the various technologies\rinvolved in the project, you discovered items that were not documented,\rbut which were important, then you should include that here.\r\r<P>Additionally you should list here the major background sources of information\rthat you used during this phase or any that you plan to use during the\rremainder of the project. This would include references to similar systems\rand/or procedures.\r\r<hr>\r<H3> Implementation Presentations </H3>\rSee the syllabus for dates.\r<p>\rEach team should prepare a 10 minute presentation (NOTE:  this is shorter than\rall the previous presentations), after which we will allow up to 5 minutes of questions. \rYour presentation should include the following:\r<UL>\r<LI> Very brief context to your project;</LI>\r<LI> Current state of your project plan. Be sure to include a table showing how many hours were \roriginally planned for each phase and how many hours you actually spent on each phase.  For\rphases where there is a large difference (>25%) provide an explanation.</LI>\r<LI> Highlights of your implementation including</LI>\r   <UL>\r   <LI> an overview of your architecture</LI>\r   <LI> one or more module/object implementations and associated unit test plans;</LI>\r   <LI> requirements and design cross reference for the highlighted code;</LI>\r   </UL>\r<li> A description of how many lines of code you've written, how many files they are in,\rand how those files are organized.  A good way of showing this is as a tree reflecting\rthe file/directory structure, with each leaf node annotated with the number of lines of code\rin that node, and each non-leaf node annotated with the aggregate number of source lines\rin all subsidiary directories and files.\r<LI> Modifications to your requirements and design that arose as a result of\ryour coding process;</LI>\r</UL>\r&nbsp;\r</BODY>\r</HTML>\r", "encoding": "ascii"}