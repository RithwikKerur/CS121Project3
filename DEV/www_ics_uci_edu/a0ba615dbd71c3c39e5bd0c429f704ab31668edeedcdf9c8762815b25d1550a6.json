{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/doc/overview/encodings.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n <head>\n  <!-- IE Standards Mode -->\n  <meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"></meta>\n\n  <!-- Favicon -->\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"icon\"></link>\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"shortcut icon\"></link>\n\n  <!-- Page title -->\n  <title>VLFeat - Tutorials > Fisher Vector and VLAD</title>\n\n  <!-- Stylesheets -->\n  <link href=\"../vlfeat.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <link href=\"../pygmentize.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <style xml:space=\"preserve\">\n    /* fixes a conflict between Pygmentize and MathJax */\n    .MathJax .mo, .MathJax .mi {color: inherit ! important}\n  </style>\n  \n\n  <!-- Scripts-->\n  \n\n  <!-- MathJax -->\n  <script xml:space=\"preserve\" type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true,\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n        by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers: { autoNumber: 'AMS' }\n      }\n    });\n  </script>\n  <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" xml:space=\"preserve\" type=\"text/javascript\"></script>\n\n  <!-- Google Custom Search -->\n  <script xml:space=\"preserve\">\n    (function() {\n    var cx = '003215582122030917471:oq23albfeam';\n    var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n    gcse.src = (document.location.protocol == 'https' ? 'https:' : 'http:') +\n    '//www.google.com/cse/cse.js?cx=' + cx;\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n    })();\n  </script>\n\n  <!-- Google Analytics -->\n  <script xml:space=\"preserve\" type=\"text/javascript\">\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-4936091-2']);\n    _gaq.push(['_trackPageview']);\n    (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    })();\n  </script>\n </head>\n\n <!-- Body Start -->\n <body>\n  <div id=\"header-section\">\n    <div id=\"header\">\n      <!-- Google CSE Search Box -->\n      <div class=\"searchbox\">\n        <gcse:searchbox-only autoCompleteMaxCompletions=\"5\" autoCompleteMatchType=\"any\" resultsUrl=\"http://www.vlfeat.org/search.html\"></gcse:searchbox-only>\n      </div>\n      <h1 id=\"id-16\"><a shape=\"rect\" href=\"../index.html\" class=\"plain\"><span id=\"vlfeat\">VLFeat</span><span id=\"dotorg\">.org</span></a></h1>\n    </div>\n    <div id=\"sidebar\"> <!-- Navigation Start -->\n      <ul>\n<li><a href=\"../index.html\">Home</a>\n<ul>\n<li><a href=\"../about.html\">About</a>\n</li>\n<li><a href=\"../license.html\">License</a>\n</li>\n</ul></li>\n<li><a href=\"../download.html\">Download</a>\n<ul>\n<li><a href=\"../install-matlab.html\">Using from MATLAB</a>\n</li>\n<li><a href=\"../install-octave.html\">Using from Octave</a>\n</li>\n<li><a href=\"../install-shell.html\">Using from the command line</a>\n</li>\n<li><a href=\"../install-c.html\">Using from C</a>\n<ul>\n<li><a href=\"../xcode.html\">Xcode</a>\n</li>\n<li><a href=\"../vsexpress.html\">Visual C++</a>\n</li>\n<li><a href=\"../gcc.html\">g++</a>\n</li>\n</ul></li>\n<li><a href=\"../compiling.html\">Compiling</a>\n<ul>\n<li><a href=\"../compiling-unix.html\">Compiling on UNIX-like platforms</a>\n</li>\n<li><a href=\"../compiling-windows.html\">Compiling on Windows</a>\n</li>\n</ul></li>\n</ul></li>\n<li class='active'><a href=\"tut.html\">Tutorials</a>\n<ul>\n<li><a href=\"frame.html\">Local feature frames</a>\n</li>\n<li><a href=\"covdet.html\">Covariant feature detectors</a>\n</li>\n<li><a href=\"hog.html\">HOG features</a>\n</li>\n<li><a href=\"sift.html\">SIFT detector and descriptor</a>\n</li>\n<li><a href=\"dsift.html\">Dense SIFT</a>\n</li>\n<li><a href=\"liop.html\">LIOP local descriptor</a>\n</li>\n<li><a href=\"mser.html\">MSER feature detector</a>\n</li>\n<li><a href=\"imdisttf.html\">Distance transform</a>\n</li>\n<li class='active' class='activeLeaf'><a href=\"encodings.html\">Fisher Vector and VLAD</a>\n</li>\n<li><a href=\"gmm.html\">Gaussian Mixture Models</a>\n</li>\n<li><a href=\"kmeans.html\">K-means clustering</a>\n</li>\n<li><a href=\"aib.html\">Agglomerative Infromation Bottleneck</a>\n</li>\n<li><a href=\"quickshift.html\">Quick shift superpixels</a>\n</li>\n<li><a href=\"slic.html\">SLIC superpixels</a>\n</li>\n<li><a href=\"svm.html#tut.svm\">Support Vector Machines (SVMs)</a>\n</li>\n<li><a href=\"kdtree.html\">KD-trees and forests</a>\n</li>\n<li><a href=\"plots-rank.html\">Plotting AP and ROC curves</a>\n</li>\n<li><a href=\"utils.html\">Miscellaneous utilities</a>\n</li>\n<li><a href=\"ikm.html\">Integer K-means</a>\n</li>\n<li><a href=\"hikm.html\">Hierarchical integer k-means</a>\n</li>\n</ul></li>\n<li><a href=\"../applications/apps.html\">Applications</a>\n</li>\n<li><a href=\"../doc.html\">Documentation</a>\n<ul>\n<li><a href=\"../matlab/matlab.html\">MATLAB API</a>\n</li>\n<li><a href=\"../api/index.html\">C API</a>\n</li>\n<li><a href=\"../man/man.html\">Man pages</a>\n<ul>\n<li><a href=\"../man/mser.html\">mser</a>\n</li>\n<li><a href=\"../man/sift.html\">sift</a>\n</li>\n<li><a href=\"../man/vlfeat.html\">vlfeat</a>\n</li>\n</ul></li>\n</ul></li>\n</ul>\n\n    </div> <!-- sidebar -->\n  </div>\n  <div id=\"headbanner-section\">\n    <div id=\"headbanner\">\n      <span class='page'><a href=\"tut.html\">Tutorials</a></span><span class='separator'>></span><span class='page'><a href=\"encodings.html\">Fisher Vector and VLAD</a></span>\n    </div>\n  </div>\n  <div id=\"content-section\">\n    <div id=\"content-wrapper\">\n      <div id=\"content\">\n        \n    \n\n<div class='toc'>\n<h3>Table of Contents</h3><ul><li class=\"level1\"><a href=\"#tut.fisher\">Fisher encoding</a></li>\n<li class=\"level1\"><a href=\"#tut.vlad\">VLAD encoding</a></li>\n</ul>\n</div><!-- Table of contents -->\n\n\n<p>This short tutorial shows how to\ncompute <b><a shape=\"rect\" href=\"../api/fisher.html\">Fisher vector</a></b> and\n<b><a shape=\"rect\" href=\"../api/vlad.html\">VLAD</a></b> encodings with VLFeat MATLAB\ninterface.</p>\n\n<p>These encoding serve a similar purposes: summarizing in a vectorial\nstatistic a number of local feature descriptors\n(e.g. <a shape=\"rect\" href=\"../api/sift.html\">SIFT</a>). Similarly to bag of visual\nwords, they assign local descriptor to elements in a visual\ndictionary, obtained with vector quantization (KMeans) in the case of\nVLAD or a <a shape=\"rect\" href=\"../api/gmm.html\">Gaussian Mixture Models</a> for Fisher\nVectors. However, rather than storing visual word occurrences only,\nthese representations store a statistics of the difference between\ndictionary elements and pooled local features.</p>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.fisher\">Fisher encoding</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>The Fisher encoding uses GMM to construct a visual word\ndictionary. To exemplify constructing a GMM, consider a number of 2\ndimensional data points (see also the <a shape=\"rect\" href=\"gmm.html\">GMM\ntutorial</a>). In practice, these points would be a collection of SIFT\nor other local image features. The following code fits a GMM to the\npoints:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">numFeatures</span> <span class=\"p\">=</span> <span class=\"mi\">5000</span> <span class=\"p\">;</span>\n<span class=\"n\">dimension</span> <span class=\"p\">=</span> <span class=\"mi\">2</span> <span class=\"p\">;</span>\n<span class=\"n\">data</span> <span class=\"p\">=</span> <span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"n\">dimension</span><span class=\"p\">,</span><span class=\"n\">numFeatures</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n\n<span class=\"n\">numClusters</span> <span class=\"p\">=</span> <span class=\"mi\">30</span> <span class=\"p\">;</span>\n<span class=\"p\">[</span><span class=\"n\">means</span><span class=\"p\">,</span> <span class=\"n\">covariances</span><span class=\"p\">,</span> <span class=\"n\">priors</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">vl_gmm</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">numClusters</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Next, we create another random set of vectors, which should be\nencoded using the Fisher Vector representation and the GMM just\nobtained:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">numDataToBeEncoded</span> <span class=\"p\">=</span> <span class=\"mi\">1000</span><span class=\"p\">;</span>\n<span class=\"n\">dataToBeEncoded</span> <span class=\"p\">=</span> <span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"n\">dimension</span><span class=\"p\">,</span><span class=\"n\">numDataToBeEncoded</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>The Fisher vector encoding <code/>enc</code> of these vectors is\nobtained by calling the <code/><a href=../matlab/vl_fisher.html>vl_fisher</a></code> function using the\noutput of the <code/><a href=../matlab/vl_gmm.html>vl_gmm</a></code> function:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">encoding</span> <span class=\"p\">=</span> <span class=\"n\">vl_fisher</span><span class=\"p\">(</span><span class=\"n\">datatoBeEncoded</span><span class=\"p\">,</span> <span class=\"n\">means</span><span class=\"p\">,</span> <span class=\"n\">covariances</span><span class=\"p\">,</span> <span class=\"n\">priors</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>The <code/>encoding</code> vector is the Fisher vector\nrepresentation of the data <code/>dataToBeEncoded</code>.</p>\n\n<p>Note that Fisher Vectors support\nseveral <a shape=\"rect\" href=\"../api/fisher-fundamentals.html#fisher-normalization\">normalization options</a>\nthat can affect substantially the performance of the\nrepresentation.</p>\n\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n<h1 id=\"tut.vlad\">VLAD encoding</h1>\n<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n\n<p>The <b>V</b>ector\nof <b>L</b>inearly <b>A</b>gregated <b>D</b>escriptors is similar to\nFisher vectors but (i) it does not store second-order information\nabout the features and (ii) it typically use KMeans instead of GMMs to\ngenerate the feature vocabulary (although the latter is also an\noption).</p>\n\n<p>Consider the same 2D data matrix <code/>data</code> used in the\nprevious section to train the Fisher vector representation. To compute\nVLAD, we first need to obtain a visual word dictionary. This time, we\nuse K-means:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">numClusters</span> <span class=\"p\">=</span> <span class=\"mi\">30</span> <span class=\"p\">;</span>\n<span class=\"n\">centers</span> <span class=\"p\">=</span> <span class=\"n\">vl_kmeans</span><span class=\"p\">(</span><span class=\"n\">dataLearn</span><span class=\"p\">,</span> <span class=\"n\">numClusters</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Now consider the data <code/>dataToBeEncoded</code> and use\nthe <code/><a href=../matlab/vl_vlad.html>vl_vlad</a></code> function to compute the encoding. Differently\nfrom <code/><a href=../matlab/vl_fisher.html>vl_fisher</a></code>, <code/><a href=../matlab/vl_vlad.html>vl_vlad</a></code> requires the\ndata-to-cluster assignments to be passed in. This allows using a fast\nvector quantization technique (e.g. kd-tree) as well as switching from\nsoft to hard assignment.</p>\n\n<p>In this example, we use a kd-tree for quantization:</p>\n\n<div class=\"highlight\"><pre><span class=\"n\">kdtree</span> <span class=\"p\">=</span> <span class=\"n\">vl_kdtreebuild</span><span class=\"p\">(</span><span class=\"n\">centers</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n<span class=\"n\">nn</span> <span class=\"p\">=</span> <span class=\"n\">vl_kdtreequery</span><span class=\"p\">(</span><span class=\"n\">kdtree</span><span class=\"p\">,</span> <span class=\"n\">centers</span><span class=\"p\">,</span> <span class=\"n\">dataEncode</span><span class=\"p\">)</span> <span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Now we have in the <code/>nn</code> the indexes of the nearest\ncenter to each vector in the matrix <code/>dataToBeEncoded</code>. The\nnext step is to create an assignment matrix:</p>\n\n<pre>\nassignments = zeros(numClusters,numDataToBeEncoded);\nassignments(sub2ind(size(assignments), nn, 1:length(nn))) = 1;\n</pre>\n\n<p>It is now possible to encode the data using\nthe <code/><a href=../matlab/vl_vlad.html>vl_vlad</a></code> function:</p>\n\n<pre>\nenc = vl_vlad(dataToBeEncoded,centers,assignments);\n</pre>\n\n<p>Note that, similarly to Fisher vectors, VLAD supports\nseveral <a shape=\"rect\" href=\"../api/vlad-fundamentals.html#vlad-normalization\">normalization options</a>\nthat can affect substantially the performance of the\nrepresentation.</p>\n\n\n  \n      </div>\n      <div class=\"clear\">&nbsp;</div>\n    </div>\n  </div> <!-- content-section -->\n  <div id=\"footer-section\">\n    <div id=\"footer\">\n      &copy; 2007-13 The authors of VLFeat\n    </div> <!-- footer -->\n  </div> <!-- footer section -->\n </body>\n <!-- Body ends -->\n</html>\n ", "encoding": "ascii"}