{"url": "https://www.ics.uci.edu/~irani/w10_23/CodingStandards.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"><head>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\">\r\n<link rel=\"stylesheet\" href=\"CodingStandards_files/course2.css\" type=\"text/css\">\r\n\r\n<title>ICS 23 / CSE 23 - Style and Documentation Standards</title>\r\n</head><body bgcolor=\"AADDDD\">\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 23 / CSE 23 - Style and Documentation Standards</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr>\r\n\r\n<p>Using a good coding style is important, for many reasons.\r\nProfessional programmers need not only to be able to read and\r\nunderstand their own code, months or even years after originally\r\nwriting it, but also to be able to read and understand code written by\r\nothers, oftentimes in the absence of the original programmer.\r\nProgrammers who write code in a clear style with adequate documentation\r\nbenefit not only themselves, but all other member of their team, as\r\nwell as future members of the team. There is nothing more frustrating\r\nas a programmer than inheriting responsibility for someone else's code,\r\nonly to find that the code is designed poorly, written cryptically, and\r\ndocumented shabbily (or not at all!). Yet much of the code that I've\r\ninherited during my career has exhibited one or more of these\r\nshortcomings!</p>\r\n\r\n<p>The Java code that you write for this course should follow the style and documentation conventions described in the list below.</p>\r\n\r\n<ul>\r\n  <li>Matching opening and closing curly braces should be aligned\r\nin the same column. This means that the opening curly brace which\r\nfollows an <b>if</b> statement should appear directly below the letter <b>i</b> in <b>if</b>, and <i>not</i> on the same line as the conditional expression.</li>\r\n  <li>All\r\nstatements within curly braces should be indented four spaces (or one\r\nTAB character) relative to the brace. A statement should not appear on\r\nthe same line as the opening curly brace.</li>\r\n  <li>The names that you use for variables, parameters, methods, and classes should be meaningful.  <i>Exception: Counters or other loop control variables may have simple names such as i or p.</i></li>\r\n  <li>All\r\nconstants in your program should be defined and named meaningfully. For\r\nexample, if you were writing an array implementation of a stack with a\r\nhard-coded maximum size of 256 elements, define a static final field\r\nsuch as MAXIMUM_ELEMENTS, and use that field in your code, rather than\r\nthe literal integer 256.</li>\r\n  <li>Naming conventions for classes, members, and constants:\r\n    <ul>\r\n      <li>Class\r\nnames should be capitalized. Class names with multiple words should\r\nhave each subsequent word capitalized, with no underscore separating\r\nthe words. (e.g. Song, ReggaeSong)</li>\r\n      <li>Names of class\r\nmembers (methods and fields) should begin with a lowercase letter.\r\nSubsequent words should be capitalized, with no underscore separating\r\nthe words. (e.g. playSong(), songTitle)</li>\r\n      <li>Named constants\r\nshould be named using all capital letters, with underscores separating\r\nthe words. (e.g. EULER, MAXIMUM_ELEMENTS)</li>\r\n    </ul>\r\n  </li>\r\n  <li>Every member should be declared using an access-control modifier (e.g. public, private, or protected).</li>\r\n  <li>Whitespace should appear between each method argument and around each binary operator.  For example, <b>createFile(\"alex.out\", WRITE)</b> instead of <b>createFile(\"alex.out\",WRITE)</b>, or <b>a + b</b> instead of <b>a+b</b>.</li>\r\n  <li>One\r\nsingle line of code should not be inordinately long. What constitutes\r\n\"inordinately long\" is largely a matter of taste, but a good rule of\r\nthumb is not to write lines of code that are longer than 80 characters.\r\nDon't be afraid to break up long lines into multiple lines. For\r\nexample, if you have a method call with fifteen parameters, put some on\r\none line, some on the next, etc., such that each line is no longer than\r\n80 characters.</li>\r\n  <li>Every class, method, and field should have a\r\ncomment which briefly explains its purpose. In the case of methods,\r\nsome explanation of the meaning of the method's parameters is expected.</li>\r\n  <li>Within the body of your methods, code whose purpose is not readily obvious should be commented.  It is <i>not</i>\r\nnecessary to include a comment on every line. It is appropriate,\r\ninstead, to have one comment which explains the purpose of a chunk of\r\nseveral lines of code.</li>\r\n</ul>\r\n\r\n<p>A good example of many of these coding practices can be found by\r\nlooking\r\nat the various starting points provided for each project. Some of these\r\nfiles do not follow all of the rules above, particularly the rule\r\nregarding a comment on every method (since we expect you to write these\r\ncomments yourself, in most cases), but they are still a useful way to\r\nsee these rules in action.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr>\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Tweaked for the \"new\" ICS 22 by Alex Thornton, Winter 2002.</li>\r\n  <li>Modified to fit <i>CHEM Consulting</i> model for ICS 22 by Alex Thornton, Winter 2001.</li>\r\n  <li>Adapted from Ray Klefstad's coding standards by Alex Thornton for ICS 23, Summer 2000.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body></html>", "encoding": "ascii"}