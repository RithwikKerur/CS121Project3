{"url": "https://www.ics.uci.edu/~ejw/authoring/collection/draft-ietf-webdav-collection-protocol-01.txt", "content": "\r\n     WEBDAV Working Group                                   J. Slein, Xerox\r\n     INTERNET DRAFT                                         J. Davis, Xerox\r\n     <draft-ietf-webdav-collection-protocol-01>          A. Babich, FileNet\r\n                                              E.J. Whitehead Jr., UC Irvine\r\n                                                              July 31, 1998\r\n     Expires January 31, 1999\r\n\r\n\t\t\tWebDAV Advanced Collections Protocol\r\n\r\n     Status of this Memo\r\n\r\n        This document is an Internet-Draft. Internet-Drafts are working\r\n        documents of the Internet Engineering Task Force (IETF), its\r\n        areas, and its working groups. Note that other groups may also\r\n        distribute working documents as Internet-Drafts.\r\n\r\n        Internet-Drafts are draft documents valid for a maximum of six\r\n        months and may be updated, replaced, or made obsolete by other\r\n        documents at any time. It is inappropriate to use Internet-Drafts\r\n        as reference material or to cite them other than as \"work in\r\n        progress\".\r\n\r\n        To view the entire list of current Internet-Drafts, please check\r\n        the \"1id-abstracts.txt\" listing contained in the Internet-Drafts\r\n        Shadow Directories on ftp.is.co.za (Africa), ftp.nordu.net\r\n        (Northern Europe), ftp.nis.garr.it (Southern Europe),munnari.oz.au \r\n        (Pacific Rim), ftp.ietf.org (US EastCoast), or ftp.isi.edu (US West\r\n        Coast).\r\n\r\n        Distribution of this document is unlimited. Please send comments\r\n        to the Distributed Authoring and Versioning (WebDAV) working group\r\n        at <w3c-dist-auth@w3.org>, which may be joined by sending a\r\n        message with subject \"subscribe\" to <w3c-dist-auth-\r\n        request@w3.org>.\r\n\r\n        Discussions of the WEBDAV working group are archived at URL:\r\n        <http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth>.\r\n\r\n     Abstract\r\n\r\n        The base WebDAV protocol [WebDAV] provides basic support for\r\n        collections.  It defines a MKCOL method for creating collections\r\n        and specifies how other HTTP and WebDAV methods interact with\r\n        collections.  It supports internal members of collections, which it\r\n        defines as members whose URIs are immediately relative to the URI\r\n        of the collection.\r\n\r\n        Many applications, however, need more powerful collections.  There\r\n        are two areas in particular where more powerful functionality is\r\n        often needed: referential resources and ordering.\r\n\r\n        This draft specifies extensions to the base WebDAV protocol to\r\n        support these more powerful collections.\r\n\r\n    Table of Contents\r\n\r\n\t1\tTerminology\t\t\t\t\t3\r\n\r\nSlein et al.                                                    Page 1\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n\t2\tIntroduction\t\t\t\t\t4\r\n\t3\tReferential Resources\t\t\t\t4\r\n\t  3.1\t  Scope\t\t\t\t\t\t4\r\n\t  3.2\t  Overview\t\t\t\t\t6\r\n\t  3.3\t  Creating Referential Resources\t\t6\r\n\t    3.3.1\tThe MKREF Method\t\t\t6\r\n\t    3.3.2\tStatus Codes\t\t\t\t7\r\n\t    3.3.3\tExample\t\t\t\t\t8\r\n\t  3.4\t  Deleting Referential Resources\t\t8\r\n\t    3.4.1\tThe DELREF Method\t\t\t8\r\n\t    3.4.2\tStatus Codes\t\t\t\t8\r\n\t    3.4.3\tExample\t\t\t\t\t8\r\n\t    3.4.4\tDesign Rationale\t\t\t8\r\n\t  3.5\t  Listing Referential Members of a Collection\t9\r\n\t  3.6\t  Other WebDAV Operations on Indirect References\t9\r\n\t  3.7\t  HTTP Operations on Indirect References \t10\r\n\t  3.8\t  Operations on Targets of References\t\t11\r\n\t4\tOrdered Collections\t\t\t\t11\r\n\t  4.1\t  Overview\t\t\t\t\t11\r\n\t  4.2\t  Creating an Ordered Collection\t\t11\r\n\t    4.2.1\tOverview\t\t\t\t11\r\n\t    4.2.2\tStatus Codes\t\t\t\t12\r\n\t    4.2.3\tExample\t\t\t\t\t12\r\n\t  4.3\t  Setting the Position of a Collection Member\t12\r\n\t    4.3.1\tOverview\t\t\t\t12\r\n\t    4.3.2\tStatus Codes\t\t\t\t13\r\n\t    4.3.3\tExamples\t\t\t\t13\r\n\t  4.4\t  Changing the Semantics of a Collection Ordering\t14\r\n\t  4.5\t  Changing the Position of a Collection Member\t14\r\n\t    4.5.1\tThe ORDERPATCH Method\t\t\t14\r\n\t    4.5.2\tStatus Codes\t\t\t\t14\r\n\t    4.5.3\tExample\t\t\t\t\t14\r\n\t    4.5.4\tDesign Rationale\t\t\t15\r\n\t5\tNew Headers\t\t\t\t\t16\r\n\t  5.1\t  Ref-Target Request Header\t\t\t16\r\n\t  5.2\t  Ref-Integrity Request Header\t\t\t16\r\n\t  5.3\t  Pass-Through Request Header\t\t\t17\r\n\t  5.4\t  Resource-Type Response Header\t\t\t17\r\n\t  5.5\t  Ordered Request Header\t\t\t17\r\n\t  5.6\t  Position Request Header\t\t\t18\r\n\t6\tNew Properties\t\t\t\t\t18\r\n\t  6.1\t  reftarget Property\t\t\t\t18\r\n\t  6.2\t  refintegrity Property\t\t\t\t18\r\n\t  6.3\t  passthrough Property\t\t\t\t19\r\n\t  6.4\t  orderingtype Property\t\t\t\t19\r\n\t7\tNew XML Elements\t\t\t\t20\r\n\t  7.1\t  reference XML Element\t\t\t\t20\r\n\t  7.2\t  weak XML Element\t\t\t\t20\r\n\t  7.3\t  arbitrary XML Element\t\t\t\t20\r\n\t  7.4\t  order XML Element\t\t\t\t20\r\n\t  7.5\t  member XML Element\t\t\t\t20\r\n\t  7.6\t  position XML Element\t\t\t\t21\r\n\t  7.7\t  first XML Element\t\t\t\t21\r\n\t  7.8\t  last XML Element\t\t\t\t21\r\n\t  7.9\t  before XML Element\t\t\t\t21\r\n\r\nSlein et al.                                                    Page 2\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n\t  7.10\t  after XML Element\t\t\t\t22\r\n\t8\tCompliance\t\t\t\t\t22\r\n\t  8.1\t  Class 3\t\t\t\t\t22\r\n\t  8.2\t  Class 4\t\t\t\t\t22\r\n\t9\tDependencies on Other Specifications\t\t22\r\n\t10\tSecurity Considerations\t\t\t\t22\r\n\t  10.1\t  Redirect Loops\t\t\t\t23\r\n\t  10.2\t  References and Denial of Service\t\t23\r\n\t  10.3\t  Malicious Modifications of Ordering\t\t23\r\n\t  10.4\t  Denial of Service and DAV:orderingtype\t23\r\n\t11\tInternationalization Considerations\t\t23\r\n\t12\tIANA Considerations\t\t\t\t24\r\n\t13\tCopyright\t\t\t\t\t24\r\n\t14\tIntellectual Property\t\t\t\t24\r\n\t15\tAcknowledgements\t\t\t\t24\r\n\t16\tReferences\t\t\t\t\t24\r\n\t17\tAuthors' Addresses\t\t\t\t25\r\n\r\n1 Terminology\r\n\r\n        The terminology used here follows and extends that in the base \r\n        WebDAV protocol specification [WebDAV].\r\n\r\n        Collection\r\n           A resource that contains member resources\r\n\r\n        Member Resource\r\n           A resource contained by a collection\r\n\r\n        Referential Resource (or Reference)\r\n           A resource that has no content of its own, but rather is\r\n           a reference to another resource\r\n\r\n        Ordinary Resource\r\n           A member resource that is not a reference to another resource\r\n\r\n        Target Resource\r\n           The resource referenced by a referential member of a collection\r\n\r\n        Direct Reference\r\n           A reference that has the property that operations on it are\r\n           passed through to its target\r\n\r\n        Indirect Reference\r\n           A reference that has the property that operations on it do\r\n           not affect its target\r\n\r\n        Strong Reference\r\n           A reference whose referential integrity is guaranteed by the\r\n           server\r\n\r\n        Weak Reference\r\n           A reference whose referential integrity is not guaranteed by the\r\n           server\r\n\r\n\r\nSlein et al.                                                    Page 3\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        Referential Integrity\r\n           A server guarantees the integrity of a reference if it ensures\r\n           that the reference will not be broken, or enables the\r\n           reference's owner to ensure that the reference will not be\r\n           broken.\r\n\r\n2 Introduction\r\n\r\n        The simple collections that the base WebDAV specification supports\r\n        are powerful enough to be widely useful.  They provide for the\r\n        hierarchical organization of resources, with mechanisms for\r\n        creating and deleting collections, copying and moving them,\r\n        locking them, adding resources to them and deleting resources from\r\n        them, and getting listings of their members.  Delete, copy, move,\r\n        list, and lock operations can be applied recursively, so that a\r\n        client can operate on whole hierarchies with a single request.\r\n\r\n        Many applications, however, need more powerful collections.  There\r\n        are two areas in particular where more powerful functionality is\r\n        often needed: referential resources and ordering.\r\n\r\n        Referential resources make it possible for many collections, on the\r\n        same or different servers, to share the same resource.  Because\r\n        the collections share the resource by referencing it, only one\r\n        physical copy of the resource need exist, and any changes made in\r\n        the resource are visible from all the collections that reference\r\n        it.\r\n\r\n        It is useful for many applications to be able to impose an\r\n        ordering on a collection. Orderings may be based on property\r\n        values, but they may be completely independent of any properties\r\n        on the collection's member resources.  Orderings based on\r\n        properties can be obtained using a search protocol [DASL], but\r\n        orderings not based on properties need some other mechanism.\r\n\r\n        Since these two areas are independent of each other, servers may\r\n        elect to comply with the Referential Resources section of this\r\n        specification or with the Ordered Collections section or both.\r\n        A server MUST advertise its compliance through its response to\r\n        an OPTIONS request, as specified in [WebDAV].  New values for the\r\n        DAV header are defined in Section 8 below to support this\r\n        requirement.\r\n\r\n3 Referential Resources\r\n\r\n3.1 Scope\r\n\r\n        [WebDAVReq] distinguishes between \"weak\" references and \"strong\"\r\n        references, and also between \"indirect\" references and \"direct\"\r\n        references.  This specification supports only weak references and\r\n        indirect references, but is designed so that it can be extended\r\n        to support strong references and direct references in the future.\r\n\r\n        Strong references are references whose integrity is guaranteed by\r\n        the server; weak references are those whose integrity is not\r\n\r\nSlein et al.                                                    Page 4\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        guaranteed.  Strong references and weak references are both useful\r\n        in different contexts.  Some applications cannot tolerate broken\r\n        links.  A software development application, for example, must be\r\n        able to rely on the integrity of references to component modules.\r\n        Such applications must be able to request strong references.  Other\r\n        applications may want to reference target resources on multiple\r\n        servers, where referential integrity cannot be guaranteed, and may\r\n        be less concerned about possible broken references.  \r\n\r\n        Several considerations led to the decision not to support strong\r\n        references in the current specification.  First, there are many\r\n        possible policies that applications and services might use to\r\n        enforce referential integrity.\r\n\r\n\t   o Delete strong references when their targets are deleted.\r\n\r\n\t   o Decline to delete targets of strong references.\r\n\r\n           o Notify strong references when their targets have been\r\n             deleted.\r\n\r\n           o Let owners of resources decide whether strong references to\r\n             them are allowed.\r\n\r\n        There appears to be no common practice in this area.  Moreover, \r\n        some of the policies have significant security risks.\r\n\r\n           o Moving a target of strong references could be a security\r\n             risk to the owner of the target by revealing secret\r\n             locations on the target's server.\r\n\r\n           o A strong reference could be a security risk to the owner of\r\n             the reference by revealing secret locations on his server.\r\n\r\n           o The presence of strong references to resources on a server\r\n             could make it impossible to reclaim space on that server\r\n             by moving or deleting those target resources. \r\n\r\n        These considerations together led to the decision not to support\r\n        strong references in the short term. \r\n\r\n        Operations on indirect references do not affect their target \r\n        resources, whereas operations on direct references are passed\r\n        through to their targets.  Both indirect and direct references may\r\n        be useful.  Each of these types of references is implemented in\r\n        existing systems.  Existing HTTP servers are capable of supporting\r\n        both types of references.  In effect, indirect references give\r\n        clients access to the reference itself, and allow the reference to\r\n        bear properties.  Direct references, once created, simplify access\r\n        to the target resource by hiding from clients the fact that there\r\n        is a reference mediating between the client and the target\r\n        resource.  They also make access to the target more efficient,\r\n        eliminating a round trip required by indirect references to get the\r\n        URI of the target resource.\r\n\r\n\r\nSlein et al.                                                    Page 5\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        Again, it was believed that supporting direct references would be\r\n        too difficult in the short term.  Although convenient, they add no\r\n        functionality beyond what is available through indirect references.\r\n        Existing systems often implement hybrids of direct and indirect\r\n        references, for which some operations are passed through to the\r\n        target while others are not.  This fact muddies the issue of what\r\n        exactly WebDAV should support.  It also suggests that the\r\n        definition of direct references as those for which operations are\r\n        passed through to their targets may not really capture a class of\r\n        references that are useful. [what else?]\r\n\r\n        Consequently, it was decided not to support direct references in\r\n        the short term. \r\n\r\n3.2 Overview\r\n\r\n        A referential resource is a resource that has no content of its\r\n        own, but instead references another resource.  The resource it\r\n        references may be in the same collection or anywhere else.  This\r\n        target resource may be a collection or a simple resource or another\r\n        reference, or any other sort of resource that may be defined in the\r\n        future.  A resource may be the target of any number of referential\r\n        resources. \r\n\r\n        Since a referential resource is a resource, it can have properties\r\n        just like any other resource.  These properties are completely\r\n        independent of the properties on its target resource.  A new\r\n        DAV:reftarget property of referential resources has as its value\r\n        the URI of the target resource.\r\n\r\n        To make it possible to distinguish referential resources from\r\n        ordinary resources, a new value of the DAV:resourcetype property\r\n        is defined here.  The DAV:resourcetype property of all referential\r\n        resources MUST have the value reference.\r\n\r\n        Although only weak, indirect references are currently supported,\r\n        two new DAV properties are defined in anticipation of future \r\n        support for strong references and direct references.  These \r\n        properties, DAV:refintegrity and DAV:passthrough, will allow\r\n        clients to distinguish between weak and strong references, and\r\n        between indirect and direct references.  All referential resources\r\n        MUST have these properties.  Although the only value currently\r\n        defined for DAV:refintegrity is weak, other values may be defined\r\n        in the future.  Although the only value currently defined for\r\n        DAV:passthrough is none, other values may be defined in the future.\r\n\r\n3.3 Creating Referential Resources\r\n\r\n3.3.1 The MKREF Method\r\n\r\n\tReferential resources are created using the MKREF method.  The\r\n        request-URI of the MKREF request identifies the resource to be\r\n        created.  The required Ref-Target header contains the URI of the\r\n        target resource.\r\n\r\n\r\nSlein et al.                                                    Page 6\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        An optional Ref-Integrity request header is defined below,\r\n        primarily for future support for strong references.  The only value\r\n        currently defined for this header is \"DAV:weak\",although other\r\n        values may be used by private agreement.  \"DAV:weak\" is the default\r\n        value if the header is not present.\r\n\r\n        An optional Pass-Through request header is defined below, primarily\r\n        for future support for direct references.  Currently, its value is\r\n        always empty, although other values may be used by private\r\n        agreement.  The default value is empty if the header is not\r\n        present.\r\n\r\n        An optional Position request header supports ordered collections by\r\n        allowing the client to specify where the new referential member is\r\n        to be placed in the collection's ordering.  (This header can also\r\n        be used with PUT to create an ordinary collection member at a\r\n        specific position in the ordering.) \r\n\r\n        When a server processes a MKREF request, it MUST set the\r\n        DAV:resourcetype property (defined in [WebDAV]) of the new resource\r\n        to be DAV:reference.\r\n\r\n        When a server processes a MKREF request, it MUST set the\r\n        DAV:reftarget property to the URI of the target resource.\r\n        \r\n        When a server processes a MKREF request, it MUST set the\r\n        DAV:refintegrity property and the DAV:passthrough property.\r\n\r\n        The client MUST NOT send any content with the MKREF request, and so\r\n        MUST NOT use the Content-Length or Transfer-Encoding headers.  (See\r\n        [HTTP].)\r\n\r\n        If a MKREF request is submitted for an existing resource, the\r\n        existing resource's content and headers will be overwritten.  This\r\n        behavior is analogous to the behavior of the HTTP PUT method.  Live\r\n        properties may get new values at the server's discretion; dead\r\n        properties will retain their existing values.  If the Position\r\n        header is absent in this case and the collection is ordered, the\r\n        server MUST leave the member at its previous position in the\r\n        collection ordering.  If the Position header is present and the\r\n        collection is ordered, the server MUST remove it from its previous\r\n        position, and then insert it at the requested position.\r\n\r\n3.3.2 Status Codes\r\n\r\n        201 Created\r\n        200 OK: modified an existing resource\r\n        409 Conflict: no resource at Ref-Target\r\n        unrecognized / unsupported value for Ref-Integrity\r\n        unrecognized / unsupported value for Pass-Through\r\n        400 Bad Request: content not allowed\r\n        409 Conflict: Position Before / After a URI that is not in this\r\n                      collection\r\n        400 Bad Request: Position Before / After self\r\n        409 Conflict: Position header, but not an ordered collection\r\n\r\nSlein et al.                                                    Page 7\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        425 Insufficient Space on Resource\r\n        409 Conflict: Parent collection does not exist\r\n\r\n3.3.3 Example\r\n\r\n        Request:\r\n\r\n        MKREF /~whitehead/dav/spec08.ref HTTP/1.1\r\n        HOST: www.ics.uci.edu\r\n        Ref-Target: <http://www.ics.uci.edu/i-d/draft-webdav-protocol-        08.txt>\r\n\r\n        Response:\r\n\r\n        HTTP/1.1 201 Created\r\n\r\n        This request resulted in the creation of a new referential resource\r\n        at www.ics.uci.edu/~whitehead/dav/spec08.ref, which points to the\r\n        resource identified by the Ref-Target header.  Its DAV:resourcetype\r\n        property is set to DAV:reference.  Its DAV:reftarget property is\r\n        set to the URI of its target resource.  Its DAV:refintegrity\r\n        property is set to the default value of DAV:weak.  Its\r\n        DAV:passthrough property is set to the default value of EMPTY.\r\n\r\n3.4 Deleting Referential Resources\r\n\r\n3.4.1 The DELREF Method\r\n\r\n        The new DELREF method is used to delete referential resources.\r\n        DELREF on a referential resource has no effect on its target\r\n        resource.\r\n\r\n3.4.2 Status Codes\r\n\r\n        200 OK\r\n        405 Method Not Allowed: Request-URI is not a reference\r\n        404 Not Found: No resource at Request-URI\r\n\r\n3.4.3 Example\r\n\r\n        Request:\r\n\r\n        DELREF /~whitehead/dav/spec08.ref HTTP/1.1\r\n        HOST: www.ics.uci.edu\r\n\r\n        Response:\r\n\r\n        HTTP/1.1 200 OK\r\n\r\n        The referential resource /~whitehead/dav/spec08.ref has been\r\n        deleted, but its target resource still exists.\r\n\r\n3.4.4 Design Rationale\r\n\r\n        The HTTP DELETE method can be used to delete indirect references,\r\n        since by definition these references do not pass operations through\r\n\r\nSlein et al.                                                    Page 8\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        to their targets.\r\n\r\n        If direct references are supported in the future, however, a method\r\n        distinct from the HTTP DELETE method will be needed for deleting\r\n        the reference itself.  Since direct references do pass operations\r\n        through to their targets, DELETE would delete the target resource\r\n        rather than the reference itself.\r\n\r\n        DELREF is being introduced now in anticipation of future needs,\r\n        and can be used in all cases where a reference is to be deleted.\r\n\r\n3.5 Listing Referential Members of a Collection\r\n\r\n        Since a referential member of a collection is just a resource in\r\n        the collection, a listing of members of the collection shows\r\n        referential members along with ordinary members.  That is, a WebDAV\r\n        PROPFIND request on a collection resource with Depth = 1 or\r\n        infinity MUST return a response XML element for each ordinary\r\n        member and for each referential member.\r\n\r\n        If Depth = infinity in the PROPFIND request, the server MUST NOT\r\n        follow indirect references into any collections to which they may\r\n        refer.\r\n\r\n3.6 Other WebDAV Operations on Indirect Referential Resources\r\n\r\n        By definition, operations on an indirect reference affect only the\r\n        reference, and not its target resource.  Since only indirect\r\n        references are supported by this specification, WebDAV operations\r\n        that are applied to them affect only the referential resource, not\r\n        its target resource.  \r\n\r\n        A LOCK operation on an indirect reference locks the referential\r\n        resource, not its target.  A LOCK on the collection with\r\n        Depth = 1 or infinity locks the referential members along with all\r\n        the other members of the collection, but not the targets of the\r\n        indirect referential members. \r\n\r\n        A PROPPATCH on an indirect referential resource modifies the\r\n        properties of the referential resource, not the properties of its\r\n        target resource.\r\n\r\n        A PROPFIND on an indirect referential resource returns the\r\n        properties of the referential resource, not the properties of its\r\n        target resource. \r\n\r\n        A MOVE operation on an indirect referential resource moves the\r\n        referential resource to a different location, but has no effect on\r\n        the location of its target. The DAV:reftarget property is unchanged\r\n        after a MOVE unless the Ref-Target header is used to change it.\r\n\r\n        A COPY operation on an indirect referential resource copies the\r\n        referential resource, not its target resource, to another location.\r\n        The DAV:reftarget property of the destination resource is the same\r\n        as the DAV:reftarget of the source resource, unless the Ref-Target\r\n\r\nSlein et al.                                                    Page 9\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        header is used to change it.\r\n\r\n3.7 HTTP Operations on Indirect Referential Resources\r\n\r\n        Although existing HTTP clients cannot create referential resources,\r\n        they should be able to read collections created by Class 3 WebDAV\r\n        clients.  They should be able to follow any references in those\r\n        collections to their targets.  To make this possible, a server that\r\n        receives a GET or HEAD on an indirect reference MUST return a 302\r\n        (Moved Temporarily) status code.  The server MUST follow [HTTP]\r\n        Section 10.3.3 \"302 Moved Temporarily,\" but with these additional\r\n        rules: \r\n\r\n           o The Location header MUST contain the target URI of the\r\n             reference.  \r\n\r\n           o The response MUST include a Resource-Type header with the\r\n             value \"Reference\".  This header allows Class 3 WebDAV clients\r\n             to recognize the resource as a reference and understand the\r\n             reason for the redirection. \r\n\r\n           o The response MUST also include those HTTP headers that make\r\n             sense for referential resources, at a minimum: Cache-Control,\r\n             Age, ETag, Expires, and Last-Modified.  \r\n\r\n        POST cannot be applied to an indirect reference.  A reference\r\n        cannot accept another entity as its subordinate.  Depending upon \r\n        the nature of the target resource, however, it might make sense to\r\n        apply POST to the target.  A server that receives a POST request\r\n        on an indirect reference MUST return a 302 (Moved Temporarily).\r\n        The rules for constructing and using the response are the same as\r\n        for GET and HEAD, except that there is no requirement to return \r\n        Cache-Control, Age, ETag, Expires, or Last-Modified.\r\n\r\n        PUT cannot be applied to an indirect reference.  To replace one\r\n        indirect reference with another, MKREF MUST be used.  To replace an\r\n        indirect reference with an ordinary resource, the reference MUST\r\n        first be deleted with DELREF, after which a PUT MUST be used to\r\n        create the ordinary resource.\r\n\r\n        Existing HTTP clients that do not understand referential resources\r\n        need to be accommodated, however.  To enable these clients to\r\n        operate reasonably on indirect references, a server that receives a\r\n        PUT request on an indirect reference MUST return a 302 (Moved\r\n        Temporarily).  The client and server MUST follow [HTTP] Section\r\n        10.3.3 \"302 Moved Temporarily,\" but with these additional rules: \r\n\r\n           o The Location response header MUST contain the target URI of\r\n             the reference.  \r\n\r\n           o The response MUST include a Resource-Type header, defined in\r\n             Section 5.n below, with the value \"Reference\".  This header\r\n             allows Class 3 WebDAV clients to recognize the resource as a\r\n             reference and understand the reason for the redirection. \r\n\r\n\r\nSlein et al.                                                    Page 10\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n           o The response MUST include an entity body for display to users.\r\n             The entity body explains that the requested resource is a\r\n             reference to another resource, and allows the user to choose\r\n             whether to replace the target resource or to replace the\r\n             reference.\r\n\r\n\tThis last rule is needed for PUT, but not for GET, HEAD, or\r\n        POST.  Only for PUT does it make sense for the user to confirm\r\n        that the operation is to be performed at the request-URI.  GET or\r\n        HEAD will already have returned all useful information about the\r\n        request-URI.  POST makes no sense for the indirect reference at the\r\n        request-URI.  But the user might really want to replace the\r\n        indirect reference with the entity in the PUT request.\r\n\r\n        Although the new DELREF method has been defined for deleting\r\n        references, DELETE can be used to delete an indirect reference.\r\n        Since by definition operations on an indirect reference affect the\r\n        reference, and not its target, DELETE will delete the indirect\r\n        reference and leave its target untouched.\r\n\r\n3.8 Operations on Targets of Referential Resources\r\n\r\n        Operations on targets of weak, indirect referential resources have\r\n        no effect on the referential resource.\r\n\r\n4 Ordered Collections\r\n\r\n4.1 Overview\r\n\r\n        Collections on a compliant server may be ordered, but need not be.\r\n        It is up to the client to decide whether a given collection is\r\n        ordered and, if so, to specify the semantics to be used for \r\n        ordering its members.  If a collection is ordered, each of its\r\n        members must be in the ordering exactly once, and the ordering must\r\n        not include any resource that is not a member of the collection.\r\n        Only one ordering can be attached to any collection.  Multiple\r\n        orderings of the same resources can be achieved by creating\r\n        multiple collections referencing those resources, and attaching a\r\n        different ordering to each collection.\r\n\r\n        The server is responsible for enforcing these constraints on\r\n        orderings.  The server MUST remove a resource from the ordering\r\n        when it is removed from the collection. The server MUST add a\r\n        resource to the ordering when it is added to the collection.\r\n\r\n        When responding to a PROPFIND on a collection, the server MUST\r\n        order the response elements according to the ordering defined\r\n        on the collection.\r\n\r\n4.2 Creating an Ordered Collection\r\n\r\n4.2.1 Overview \r\n\r\n        When a collection is created, the client can request that it be\r\n        ordered and specify the semantics of the ordering by using the\r\n\r\nSlein et al.                                                    Page 11\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        new Ordered header in the MKCOL request, setting its value to the\r\n        URI of the semantics to be used.  If the client does not want the\r\n        collection to be ordered, it may omit the Ordered header, or use\r\n        it with the value \"DAV:arbitrary\".\r\n\r\n        Every collection MUST have the new DAV:orderingtype property,\r\n        which indicates whether the collection is ordered and, if so,\r\n        identifies the semantics of the ordering.  A value of DAV:arbitrary\r\n        indicates that that collection is not ordered.  That is, the client\r\n        cannot depend on the repeatability of the ordering of results from\r\n        a PROPFIND request.  Otherwise the value of DAV:orderingtype is an\r\n        href that SHOULD point to a resource that contains a definition of\r\n        the semantics of the ordering, allowing a human user or software\r\n        package to insert new collection members into the ordering\r\n        intelligently.\r\n \r\n        If the Ordered header is present on a MKCOL request, the server\r\n        MUST set the collection's DAV:orderingtype property to the value of\r\n        the Ordered header.  If the Ordered header is not present, the\r\n        server MUST treat the request as if it had an Ordered header with\r\n        the value \"DAV:arbitrary\", meaning that the collection is not\r\n        ordered.  If the collection is ordered, the server MUST respond to\r\n        PROPFIND requests on the collection using the specified ordering.\r\n\r\n4.2.2 Status Codes\r\n\r\n        No new error conditions are introduced.\r\n\r\n4.2.3 Example\r\n\r\n        Request:\r\n\r\n        MKCOL /theNorth/ HTTP/1.1\r\n        Host: www.server.org\r\n        Ordered: <http://www.server.org/orderings/compass.html>\r\n\r\n        Response:\r\n\r\n        HTTP/1.1 201 Created\r\n\r\n        In this example, a new, ordered collection was created.  Its\r\n        DAV:orderingtype property has as its value the URI from the\r\n        Ordered header.  In this case, the URI points to a description of\r\n        the semantics governing the ordering.  As new members are added to\r\n        the collection, clients or end users can consult the semantics to\r\n        determine how to position the new members in the ordering. \r\n\r\n4.3 Setting the Position of a Collection Member\r\n\r\n4.3.1 Overview\r\n\r\n        When a new member is added to a collection with MKREF, PUT, COPY,\r\n        or MOVE, its position in the ordering can be set with the new\r\n        Position header.  The Position header allows the client to specify\r\n        that the member should be first in the collection's ordering, last\r\n\r\nSlein et al.                                                    Page 12\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        in the collection's ordering, before some other collection member\r\n        in the collection's ordering, or after some other collection member\r\n        in the collection's ordering.\r\n\r\n        The server MUST insert the new member into the ordering at the\r\n        location specified in the Position header, if one is present (and\r\n        if the collection is ordered); otherwise, it MUST append the new\r\n        member to the end of the ordering (if the collection is ordered).\r\n        If a PUT or MKREF causes an existing resource to be replaced, and\r\n        if the Position header is absent, the server MUST leave the member\r\n        at its previous position in the collection ordering.  If the\r\n        Position header is present, the server MUST remove the member from\r\n        its previous position, and then insert it at the requested\r\n        position.\r\n\r\n4.3.2 Status Codes\r\n\r\n        201 Created\r\n        409 Conflict: Before / After a URI that is not in this collection\r\n        400 Bad Request: Before / After self\r\n        405 Method Not Allowed: Not an ordered collection\r\n        \r\n4.3.3 Examples\r\n\r\n        Request:\r\n\r\n        MKREF /~whitehead/dav/spec08.ref HTTP/1.1\r\n        HOST: www.ics.uci.edu\r\n        Ref-Target: <http://www.ics.uci.edu/i-d/draft-webdav-protocol-08.txt>\r\n        Position: After <requirements.html>       \r\n\r\n        Response:\r\n\r\n        HTTP/1.1 201 Created\r\n\r\n        This request resulted in the creation of a new referential resource\r\n        at www.ics.uci.edu/~whitehead/dav/spec08.ref, which points to the\r\n        resource identified by the Ref-Target header.  The Position header\r\n        in this example caused the server to set its position in the\r\n        ordering of the /~whitehead/dav/ collection immediately after the\r\n        requirements.html resource.\r\n\r\n        Request:\r\n\r\n        MOVE /i-d/draft-webdav-protocol-08.txt HTTP/1.1\r\n        Host: www.ics.uci.edu\r\n        Destination: </~whitehead/dav/draft-webdav-protocol-08.txt>\r\n        Position: First\r\n\r\n        Response:\r\n\r\n        HTTP/1.1 409 Conflict\r\n\r\n        In this case, the server returned a 409 Conflict status code\r\n        because the /~whitehead/dav/ collection is an unordered collection.\r\n\r\nSlein et al.                                                    Page 13\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        Consequently, the server was unable to satisfy the Position\r\n        header.\r\n\r\n4.4 Changing the Semantics of a Collection Ordering\r\n\r\n        After a collection has been created, a client can change its\r\n        ordering semantics, or change an ordered collection to an unordered\r\n        collection or vice versa, by using PROPPATCH to change the value of\r\n        its DAV:orderingtype property.  The client is then responsible for\r\n        updating the ordering of the collection members according to the\r\n        new semantics.  PROPPATCH is defined in [WebDAV], Section 7.2.\r\n\r\n4.5 Changing the Position of a Collection Member\r\n\r\n4.5.1 The ORDERPATCH Method\r\n\r\n        To change the position of a collection member in the collection's\r\n        ordering, the client MUST use an ORDERPATCH request with a request\r\n        body containing an order XML element.  The request-URI of an\r\n        ORDERPATCH request is the URI of the collection whose ordering is\r\n        to be updated.  The order XML element identifies the member\r\n        resource whose position is to be changed, and describes its new\r\n        position in the ordering.  The new position can be specified as\r\n        first in the ordering, last in the ordering, before some other\r\n        collection member in the ordering, or after some other collection\r\n        member in the ordering.\r\n\r\n4.5.2 Status Codes\r\n\r\n        Although the protocol currently allows only a single change to be\r\n        requested with ORDERPATCH, it is anticipated that this may change\r\n        in the future.  Consequently, the server MUST return a 207\r\n        Multi-Status response, as defined in [WebDAV].\r\n\r\n        Within the 207 Multi-Status response, the following status codes\r\n        are possible:\r\n\r\n        200 OK\r\n        409 Conflict: Before / After a URI that is not in this collection\r\n        409 Conflict: href doesn't point to a member of this collection\r\n        400 Bad Request: only one change allowed\r\n        400 Bad Request: Before / After self\r\n        405 Method Not Allowed: Not an ordered collection\r\n        405 Method Not Allowed: Not a collection\r\n        (It's ok to reposition to the same position)\r\n\r\n4.5.3 Example\r\n\r\n        Consider a collection /coll-1/ with members ordered as follows:\r\n\r\n                nunavut.map\r\n                nunavut.img\r\n\t\tbaffin.map\r\n                baffin.desc\r\n                baffin.img\r\n\r\nSlein et al.                                                    Page 14\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n                iqaluit.map\r\n                nunavut.desc\r\n                iqaluit.desc\r\n                iqaluit.img\r\n\r\n        Request:\r\n\r\n        ORDERPATCH /coll-1/ HTTP/1.1\r\n        Host: www.nunanet.com\r\n        Content-Type: text/xml\r\n        Content-Length: xxx\r\n\r\n        <?xml version=\"1.0\" ?>\r\n        <?xml:namespace ns=\"DAV:\" prefix=\"d\" ?>\r\n        <d:order>\r\n\t   <d:member>\r\n              <d:href>nunavut.desc</d:href>\r\n              <d:position> \r\n                 <d:after>\r\n                    <d:href>nunavut.map</d:href>\r\n                 </d:after>\r\n              </d:position>\r\n           </d:member>\r\n        </d:order>\r\n\r\n        Response:\r\n\r\n        HTTP/1.1 207 Multi-Status\r\n        Content-Type: text/xml\r\n        Content-Length: xxx\r\n\r\n        <?xml version=\"1.0\" ?>\r\n        <?xml:namespace ns=\"DAV:\" prefix=\"d\" ?>\r\n        <d:multistatus>\r\n\t   <d:response>\r\n              <d:href>http://www.nunanet.com/coll-1/nunavut.desc</d:href>\r\n              <d:status>HTTP/1.1 200 OK</d:status>\r\n           </d:response>\r\n        </d:multistatus>\r\n\r\n        In this example, after the request has been processed, the \r\n        map of nunavut is the first member in the collection's ordering:\r\n\r\n                nunavut.map\r\n                nunavut.desc\r\n                nunavut.img\r\n\t\tbaffin.map\r\n                baffin.desc\r\n                baffin.img\r\n                iqaluit.map\r\n                iqaluit.desc\r\n                iqaluit.img\r\n\r\n4.5.4 Design Rationale\r\n \r\n\r\nSlein et al.                                                    Page 15\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        The decision to introduce the new ORDERPATCH method was made after\r\n        investigating the possibility of using the existing MOVE method\r\n        with a Position header.  The use of MOVE initially looked \r\n        appealingly simple:\r\n\r\n        MOVE /root/coll-1/foo HTTP/1.1\r\n        Host: www.somehost.com\r\n        Destination: </root/coll-1/foo>\r\n        Position: First\r\n\r\n        Unfortunately, several features of the semantics of MOVE make it\r\n        unsuitable for changing the position of a collection member in the\r\n        collection's ordering.  First, [WebDAV] defines MOVE as logically\r\n        equivalent to a copy followed by a delete of the source resource.\r\n        This definition makes it impossible to MOVE a resource to a\r\n        destination URL that is the same as the source URL.  The resource\r\n        would be deleted rather than moved.  Second, [WebDAV] states that\r\n        when moving a resource to a destination where a resource already\r\n        exists, the Overwrite header must be \"T\", and in this case the\r\n        server must DELETE the resource at the destination before\r\n        performing the MOVE.  Again, this makes it impossible to MOVE\r\n        a resource to the same location.  Finally, [WebDAV] states that\r\n        locks are lost on a MOVE, an outcome that seems undesirable in this\r\n        case.\r\n\r\n        The decision to allow only a single change to be described in a\r\n        PROPPATCH request was made in order to accommodate many existing\r\n        systems that do not allow multiple changes to be requested at once.\r\n        However, the protocol design is extensible to support multiple\r\n        requests in the future.\r\n\r\n        In particular, the decision to define a new order XML element for\r\n        ORDERPATCH was made for the sake of extensibility.  Although the\r\n        current definition of the order XML element allows only a single\r\n        change in the ordering per ORDERPATCH request, using an XML element\r\n        keeps open the option of later allowing multiple changes to be\r\n        described in a single ORDERPATCH request.  Similarly, a\r\n        Multi-Status response is used in order to keep open the option of\r\n        multiple changes in a single request in the future. \r\n\r\n5 New Headers\r\n\r\n5.1 Ref-Target Request Header\r\n\r\n        Ref-Target = \"Ref-Target\" \":\" Coded-url\r\n\r\n        Coded-url is defined in [WebDAV], Section 8.4.\r\n\r\n        The Ref-Target request header is used with the MKREF method to \r\n        identify the target resource of the new referential resource being\r\n        created.  It is a required header in MKREF requests.  This header\r\n        may also be used with COPY and MOVE requests to change the target\r\n        of the destination reference.\r\n\r\n5.2 Ref-Integrity Request Header\r\n\r\nSlein et al.                                                    Page 16\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n\r\n        Ref-Integrity = \"Ref-Integrity\" \":\" (\"DAV:weak\")\r\n\r\n        The Ref-Integrity header is defined to allow future support for\r\n        strong references.  It specifies whether the server should\r\n        enforce referential integrity for a referential resource being\r\n        created with MKREF.  The only value currently defined for the\r\n        Ref-Integrity header is \"DAV:weak\", which means that the server\r\n        need not [should not? must not?] enforce referential integrity for\r\n        the newly created reference.  Other values may be used by private\r\n        agreement between the client and server.  If the header is not\r\n        present on a MKREF request, the server MUST treat the request as\r\n        if it has a Ref-Integrity header set to \"DAV:weak\".  This header\r\n        may also be used with COPY and MOVE requests.  If this header is \r\n        not present on a COPY or MOVE request, the DAV:refintegrity\r\n        property MUST be treated like any other live property, as\r\n        specified in [WebDAV] sections 7.8.2 and 7.9.1.\r\n\r\n5.3 Pass-Through Request Header\r\n\r\n        Pass-Through = \"Pass-Through\" \":\" \"\" \r\n\r\n        The Pass-Through header is defined to allow future support for\r\n        direct references.  Indirect references do not pass operations\r\n        through to their target resources, so for them the value of \r\n        the Pass-Through header is empty.  Direct references pass all\r\n        operations through to their target resources.  Other types of\r\n        references may pass certain operations through, while others may\r\n        affect the reference itself.  Since only indirect references are\r\n        supported today, the only value currently defined for Pass-Through\r\n        is empty.  Other values may be used by private agreement between \r\n        the client and server.  If the header is not present on a MKREF\r\n        request, the server MUST treat the request as if it has a \r\n        Pass-Through header with the value empty.  This header may also be\r\n        used with a COPY or MOVE request on a reference.  If this header is \r\n        not present on a COPY or MOVE request, the DAV:passthrough\r\n        property MUST be treated like any other live property, as\r\n        specified in [WebDAV] sections 7.8.2 and 7.9.1.\r\n\r\n5.4 Resource-Type Response Header\r\n\r\n        Resource-Type = \"Resource-Type\" \":\" [\"DAV:collection\" | \r\n                                             \"DAV:reference\" | \"\"]\r\n\r\n        The Resource-Type response header contains the value of the \r\n        DAV:resourcetype property.  It is used with 302 responses to PUT,\r\n        POST, GET, or HEAD requests on referential resources to indicate to\r\n        the client that the reason for the redirection is that the \r\n        request-URI pointed to a referential resource.  \r\n\r\n5.5 Ordered Request Header\r\n\r\n        Ordered = \"Ordered\" \":\" (\"DAV:arbitrary\" | Coded-url)\r\n\r\n        The Ordered request header may be used with MKCOL to request that\r\n\r\nSlein et al.                                                    Page 17\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        the new collection be ordered and to specify its ordering\r\n        semantics.  A value of \"DAV:arbitrary\" indicates that the\r\n        collection is not ordered.  That is, the client cannot depend on\r\n        the repeatability of the ordering of results from a PROPFIND\r\n        request. A Coded-url value indicates that the collection is\r\n        ordered, and identifies the semantics of the ordering.  The\r\n        Coded-url SHOULD point to a resource that contains a definition of\r\n        the semantics of the ordering, allowing a human user or software\r\n        package to insert new collection members into the ordering\r\n        intelligently.\r\n\r\n        If the Ordered header is not present on a MKCOL request, the \r\n        server MUST treat the request as if it had an Ordered header with\r\n        the value \"DAV:arbitrary\".\r\n\r\n5.6 Position Request Header\r\n\r\n        Position = \"Position\" \":\" (\"First\" | \"Last\" | \r\n                                  ((\"Before\" | \"After\") Coded-url))\r\n\r\n        The Position header may be used with MKREF, PUT, COPY, or MOVE to\r\n        tell the server where in the collection ordering to position the\r\n        resource being added to the collection.  It may be used for both\r\n        ordinary and referential members.\r\n\r\n        If the Coded-url is a relative URL, it is interpreted relative to\r\n        the collection in which the resource is being created. \r\n\r\n        If the Position request header is not used, then:\r\n\r\n            If the request is replacing an existing resource, the server\r\n            MUST preserve the present ordering.\r\n\r\n            If the request is adding a new member to the collection, the\r\n            server MUST append the new member to the end of the ordering\r\n            (if the collection is ordered).\r\n\r\n6 New Properties\r\n\r\n6.1 reftarget Property\r\n\r\n        Name:\t\treftarget\r\n        Namespace:\tDAV:\r\n\tPurpose:  \tA required property of referential resources that\r\n                        provides an efficient way for clients to discover\r\n                        the URI of the target resource.  This is a readonly\r\n                        property, whose value can only be set by using the\r\n                        Ref-Target header with a MKREF, COPY, or MOVE\r\n                        request.\r\n        Value:          URI of the target resource.\r\n\r\n        <!ELEMENT reftarget href>\r\n\r\n6.2 refintegrity Property\r\n \r\n\r\nSlein et al.                                                    Page 18\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        Name:\t\trefintegrity\r\n\tNamespace:\tDAV:\r\n\tPurpose:\tA required property of a referential resource that\r\n\t\t\tindicates whether the server guarantees referential\r\n \t\t\tintegrity for that reference.  The refintegrity\r\n                        property is defined to allow future support for\r\n                        strong references.  The only value currently\r\n                        defined for refintegrity is weak, which means that\r\n                        the server need not [does not?] enforce referential\r\n                        integrity for the reference.  Other values may be\r\n                        used by private agreement between the client and\r\n                        server.  This is a readonly property, whose value\r\n                        can only be set by using the Ref-Integrity header\r\n                        with a MKREF, COPY, or MOVE request.\r\n\tValue:\t\tweak\r\n\r\n\t<!ELEMENT refintegrity (weak)>\r\n\r\n6.3 passthrough Property\r\n\r\n        Name:           passthrough\r\n        Namespace:      DAV\r\n        Purpose:        A required property of a referential resource that\r\n                        indicates what operations are passed through to its\r\n                        target resource.  The passthrough property is \r\n                        defined to allow future support for direct\r\n                        references, which pass all operations through to\r\n                        their targets.  This specification currently \r\n                        supports only indirect references, which do not\r\n                        pass any operations through to their targets.  The\r\n                        only value currently defined for passthrough is\r\n                        EMPTY.  Other values may be used by private\r\n                        agreement between the client and server.  This is\r\n                        a read-only property, whose value can only be set\r\n                        by using the Pass-Through header with a MKREF,\r\n                        COPY, or MOVE request.\r\n        Value:          EMPTY\r\n\r\n        <!ELEMENT passthrough EMPTY>\r\n\r\n6.4 orderingtype Property\r\n\r\n        Name:\t\torderingtype\r\n        Namespace:\tDAV:\r\n        Purpose:  \tIndicates whether the collection is ordered and, if\r\n                        so, uniquely identifies the semantics of the\r\n                        ordering being used.  SHOULD also provide an\r\n                        explanation of the semantics in human and / or\r\n                        machine-readable form.  At a minimum, this allows\r\n                        human users who add members to the collection to\r\n                        understand where to position them in the ordering.\r\n\tValue:\t\tarbitrary for an unordered collection, or a URI\r\n                        that uniquely identifies the semantics of the\r\n                        collection's ordering.  The URI SHOULD point to\r\n                        a definition of the ordering semantics.\r\n\r\nSlein et al.                                                    Page 19\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n\r\n\t<!ELEMENT orderingtype (arbitrary | href) >\r\n\r\n7 New XML Elements\r\n\r\n7.1 reference XML Element\r\n\r\n        Name: \t\treference\r\n        Namespace: \tDAV:\r\n        Purpose:  \tA new value of the DAV:resourcetype property that\r\n\t\t\tidentifies its resource as a referential resource.\r\n                        The DAV:resourcetype property of a referential\r\n                        resource MUST have this value.\r\n\tValue:\t\tEMPTY\r\n\r\n\t<!ELEMENT reference EMPTY >\r\n\r\n7.2 weak XML Element\r\n\r\n        Name:           weak\r\n        Namespace:      DAV:\r\n        Purpose:        The only value currently defined for the\r\n                        DAV:refintegrity property.  It means that the\r\n                        server need not [does not?] enforce referential\r\n                        integrity for the reference to which the property\r\n                        belongs.\r\n        Value:          EMPTY\r\n\r\n        <!ELEMENT weak EMPTY >\r\n\r\n7.3 arbitrary XML Element\r\n\r\n        Name:           arbitrary\r\n        Namespace:      DAV:\r\n        Purpose:        A value of the DAV:orderingtype property that\r\n                        indicates that the collection is not ordered.  That\r\n                        is, the client cannot depend on the repeatability\r\n                        of the ordering of results from a PROPFIND request.\r\n        Value:          EMPTY\r\n\r\n        <!ELEMENT arbitrary EMPTY >\r\n\r\n7.4 order XML Element\r\n        \r\n        Name:           order\r\n        Namespace:      DAV\r\n        Purpose:        For use with the new ORDERPATCH method.  Describes\r\n                        a change to be made in a collection ordering.\r\n        Value:          A description of the new position of a collection\r\n                        member in the collection's ordering.\r\n\r\n        <!ELEMENT order member >\r\n\r\n7.5 member XML Element\r\n \r\n\r\nSlein et al.                                                    Page 20\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        Name:           member\r\n        Namespace:      DAV\r\n        Purpose:        Occurs in the order XML Element, and describes the\r\n                        new position of a single collection member in the\r\n                        collection's ordering.\r\n        Value:          An href containing the relative URI of the\r\n                        collection member, and a description of its new\r\n                        position in the ordering.  The href XML element is\r\n                        defined in [WebDAV], Section 11.3.\r\n\r\n        <!ELEMENT member (href, position) >\r\n\r\n7.6 position XML Element\r\n\r\n        Name:           position\r\n        Namespace:      DAV\r\n        Purpose:        Occurs in the member XML element.  Describes the\r\n                        new position in a collection's ordering of one of\r\n                        the collection's members.\r\n        Value:          The new position can be described as first in the\r\n                        collection's ordering, last in the collection's \r\n                        ordering, before some other member of the\r\n                        collection, or after some other member of the\r\n                        collection.\r\n\r\n        <!ELEMENT position (first | last | before | after)>\r\n\r\n7.7 first XML Element\r\n\r\n        Name:           first\r\n        Namespace:      DAV\r\n        Purpose:        Occurs in the position XML element.  Describes the\r\n                        collection member's position as first in the\r\n                        collection's ordering.\r\n        Value:          EMPTY\r\n\r\n        <!ELEMENT first EMPTY >\r\n\r\n7.8 last XML Element\r\n\r\n        Name:           last\r\n        Namespace:      DAV\r\n        Purpose:        Occurs in the position XML element.  Describes the\r\n                        collection member's position as last in the\r\n                        collection's ordering.\r\n        Value:          EMPTY\r\n\r\n        <!ELEMENT last EMPTY >\r\n\r\n7.9 before XML Element\r\n\r\n        Name:           before\r\n        Namespace:      DAV\r\n        Purpose:        Occurs in the position XML element.  Describes the\r\n                        collection member's position as coming before some\r\n\r\nSlein et al.                                                    Page 21\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n                        other collection member in the collection's\r\n                        ordering.\r\n        Value:          href of the member it precedes in the ordering\r\n\r\n        <!ELEMENT before href >\r\n\r\n7.10 after XML Element\r\n\r\n        Name:           after\r\n        Namespace:      DAV\r\n        Purpose:        Occurs in the position XML element.  Describes the\r\n                        collection member's position as coming after some\r\n                        other collection member in the collection's\r\n                        ordering.\r\n        Value:          href of the member it follows in the ordering\r\n\r\n        <!ELEMENT after href >\r\n\r\n8 Compliance\r\n\r\n        Section 14 of [Goland et al, 1998] defined a DAV header for use\r\n        when responding to OPTIONS requests.  This header provides a way\r\n        for clients to discover which parts of WebDAV a resource supports.\r\n        The WebDAV specifications define numbered compliance classes \r\n        corresponding to collections of related functions that resources \r\n        may support.  When the server receives an OPTIONS request, it lists\r\n        the classes that the request-URI supports in the DAV response \r\n        header.\r\n\r\n        Since this specification defines two independent sets of\r\n        functionality, it defines two new compliance classes.  A WebDAV\r\n        server may support neither, one or the other, or both for any\r\n        resource.\r\n\r\n8.1 Class 3\r\n\r\n        This new compliance class indicates compliance with Section 3\r\n        \"Referential Resources\" of this specification.  Servers that comply\r\n        with Section 3 MUST list this class in the DAV response header\r\n        when they respond to an OPTIONS request.\r\n\r\n8.2 Class 4\r\n\r\n        This new compliance class indicates compliance with Section 4\r\n        \"Ordered Collections\" of this specification.  Servers that comply\r\n        with Section 4 MUST list this class in the DAV response header\r\n        when they respond to an OPTIONS request.\r\n\r\n9 Dependencies on Other Specifications\r\n\r\n\t  TBD\r\n\r\n10 Security Considerations\r\n\r\n        This section is provided to detail issues concerning security\r\n\r\nSlein et al.                                                    Page 22\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n        implications of which WebDAV applications need to be aware. \r\n\r\n        All of the security considerations of HTTP/1.1 and the base WebDAV\r\n        protocol also apply to WebDAV collections.  In addition, \r\n        referential resources and ordered collections introduce several\r\n        new security concerns and increase the risk of some existing\r\n        threats.  These issues are detailed below.\r\n\r\n10.1 Redirect Loops\r\n\r\n         Although redirect loops were already possible in HTTP 1.1, the\r\n         introduction of referential resources creates a new avenue for\r\n         clients to create loops accidentally or maliciously.  If the\r\n         referential resource and its target are on the same server, the\r\n         server may be able to detect MKREF requests that would create\r\n         loops. See also [HTTP], Section 10.3 \"Redirection 3xx.\" \r\n\r\n10.2 References and Denial of Service\r\n\r\n         The introduction of referential resources creates a new avenue\r\n         for denial of service attacks. Clients can create heavily used\r\n         references to target locations that were not designed for heavy\r\n         usage.\r\n\r\n10.3 Malicious Modifications of Ordering\r\n\r\n         Particularly in large collections, moving a collection member to\r\n         a different position in the ordering can make it very difficult\r\n         for users to find.\r\n\r\n10.4 Denial of Service and DAV:orderingtype\r\n\r\n         There may be some risk of denial of service at sites that are\r\n         advertised in the DAV:orderingtype property of collections.\r\n         However, it is anticipated that widely-deployed applications will\r\n         use hard-coded values for frequently-used ordering semantics\r\n         rather than looking up the semantics at the location specified by\r\n         DAV:orderingtype.\r\n\r\n11 Internationalization Considerations\r\n\r\n         This specification follows the practices of [WebDAV] in encoding\r\n         all human-readable content using XML [XML] and in the treatment\r\n         of names.  Consequently, this specification complies with the\r\n         IETF Character Set Policy [Alvestrand].\r\n\r\n         WebDAV applications MUST support the character set tagging,\r\n         character set encoding, and the language tagging functionality of\r\n         the XML specification.  This constraint ensures that the human-\r\n         readable content of this specification complies with [Alvestrand].\r\n\r\n         As in [WebDAV}, names in this specification fall into three\r\n         categories: names of protocol elements such as methods and\r\n         headers, names of XML elements, and names of properties.  Naming\r\n         of protocol elements follows the precedent of HTTP, using English\r\n\r\nSlein et al.                                                    Page 23\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n         names encoded in USASCII for methods and headers.  The names of\r\n         XML elements used in this specification are English names encoded\r\n         in UTF-8.\r\n\r\n         For error reporting, [WebDAV] follows the convention of HTTP/1.1\r\n         status codes, including with each status code a short, English\r\n         description of the code (e.g., 423 Locked).  Internationalized\r\n         applications will ignore this message, and display an appropriate\r\n         message in the user's language and character set.\r\n \r\n         For rationales for these decisions and advice for application\r\n         implementors, see [WebDAV].\r\n\r\n12 IANA Considerations\r\n\r\n\t  TBD\r\n\r\n13 Copyright\r\n\r\n14 Intellectual Property\r\n\r\n15 Acknowledgements\r\n\r\n        This draft has benefited from thoughtful discussion by \r\n        Steve Carter, Ellis Cohen, Spencer Dawkins, Rajiv Dulepet, \r\n        Chuck Fay, Roy Fielding, Yaron Goland, Fred Hitt, Alex Hopmann,\r\n        Marcus Jager, Rohit Khare, Daniel LaLiberte, Steve Martin,\r\n        Surendra Koduru Reddy, Sam Ruby, Bradley Sergeant, Nick Shelness,\r\n        John Stracke, John Tigue, John Turner, and others. \r\n\r\n16 References\r\n\r\n        [WebDAV] Y. Y. Goland, E. J. Whitehead, Jr., A.\r\n        Faizi, S. R. Carter, D. Jensen, \"Extensions for Distributed\r\n        Authoring on the World Wide Web - WebDAV.\" Draft-ietf-webdav-\r\n        protocol-08. Internet Draft, work in progress.  Microsoft,\r\n        U.C. Irvine, Netscape, Novell. April, 1998.\r\n\r\n        [DASL] Saveen Reddy, D. Jensen, Surendra Reddy,\r\n        R. Henderson, J. Davis, A. Babich, \"DAV Searching & Locating.\"\r\n        Draft-reddy-dasl-protocol-02. Internet Draft, work in progress.\r\n        Microsoft, Novell, Oracle, Netscape, Xerox, Filenet.  June, 1998. \r\n\r\n        [WebDAVReq] J. Slein, J. Davis, \"Requirements for Advanced\r\n        Collection Functionality in WebDAV.\" Draft-ietf-webdav-collection-\r\n        reqts-02. Internet Draft, work in progress.  Xerox, 1998.\r\n\r\n        [HTTP] R. Fielding, J. Gettys, J. Mogul, H. Frystyk,\r\n        T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1.\"\r\n        RFC 2068.  UC Irvine, DEC, MIT/LCS.  January, 1997.\r\n\r\n        [XML] T. Bray, J. Paoli, C.M. Sperberg-McQueen, \"Extensible Markup\r\n        Language (XML).\"  World Wide Web Consortium Recommendation\r\n        REC-xml-19980210. http://www.w3.org/TR/1998/REC-xml-19980210.\r\n\r\n\r\nSlein et al.                                                    Page 24\r\n\fINTERNET-DRAFT            WebDAV Collection Protocol          July 1998\r\n\r\n17 Authors' Addresses\r\n\r\n        J. Slein\r\n        Xerox Corporation\r\n        800 Phillips Road, 105-50C\r\n        Webster, NY 14580\r\n        Email: slein@wrc.xerox.com\r\n\r\n        J. Davis\r\n        Xerox Corporation\r\n        3333 Coyote Hill Road\r\n        Palo Alto, CA 94304\r\n        Email: jdavis@parc.xerox.com\r\n\r\n        A. Babich\r\n        FileNet Corporation\r\n        3565 Harbor Boulevard\r\n        Costa Mesa, CA 92626-1420\r\n        Email: ababich@filenet.com\r\n\r\n        E.J. Whitehead Jr.\r\n        Dept. of Information and Computer Science\r\n        University of California, Irvine\r\n        Irvine, CA 92697-3425\r\n        Email: ejw@ics.uci.edu\r\n\r\n    Expires January 31, 1999\r\n\r\nSlein et al.                                                    Page 25\r\n\f\r\n", "encoding": "ascii"}