{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node163.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Interrupts</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Interrupts\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html4200 HREF=\"node164.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html4198 HREF=\"node156.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html4192 HREF=\"node162.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html4202 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html4201 HREF=\"node164.html\"> The block/3 Predicate</A>\r\n<B>Up:</B> <A NAME=tex2html4199 HREF=\"node156.html\"> Exceptions</A>\r\n<B> Previous:</B> <A NAME=tex2html4193 HREF=\"node162.html\"> Using Tools in </A>\r\n<BR> <HR> <P>\r\n<H1><A NAME=SECTION001320000000000000000> Interrupts</A></H1>\r\n<P>\r\n<A NAME=sectinterrupts>&#160;</A>\r\n<A NAME=2560>&#160;</A>\r\nThe execution of a Prolog program may be <i> interrupt</i>ed, by such events as\r\nsystem action or the user typing <tt>^</tt>C.\r\nWhen this happens the <A NAME=tex2html562 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  system\r\nreceives an identifier of the interrupt which is usually\r\na small integer, and in a manner very similar to\r\nthat in the case of error handling, calls an interrupt handling routine.\r\nJust as error handlers may be user defined, so it is possible to define\r\ninterrupt handlers. The goal\r\n<blockquote> <PRE>set_interrupt_handler(N, PredSpec)\r\n</PRE>\r\n</blockquote>\r\n<A NAME=2565>&#160;</A>\r\nassigns the procedure specified by <i> PredSpec</i> as the interrupt handler for\r\nthe interrupt identified by <i> N</i>. Here, however, N is an <b> operating\r\nsystem</b> interrupt identifier: thus, the definition of interrupt\r\nhandlers is operating system dependent.\r\nThe built-in <b> current_interrupt/2</b> is provided to check and/or\r\ngenerate the valid interrupt numbers and their mnemonic names.\r\nSome interrupts can not be caught by the user (e.g. the <i> kill</i> signal),\r\ntrying to establish a handler for them yields an error message.\r\n<P>\r\nTo test interrupt handlers, the built-in kill/2 may be used to send\r\na signal to the own process.\r\n<P>\r\nThe predicate <b> get_interrupt_handler/3</b>\r\n<A NAME=2573>&#160;</A>\r\nmay be used to find the\r\ncurrent interrupt handler for an interrupt N, in the same manner as\r\n<b> get_error_handler</b>:\r\n<blockquote> <PRE>get_interrupt_handler(N, PredSpec, HomeModule)\r\n</PRE>\r\n</blockquote>\r\nThe predicates reset_interrupt_handler/1 and\r\nreset_interrupt_handlers/0 are used to reset a particular interrupt\r\nhandler or all interrupt handlers to their default values.\r\n<P>\r\nAn interrupt handler has one optional argument, which is the interrupt\r\nnumber.\r\nThere is no argument corresponding to the error culprit, since\r\nthe interrupt has no relation to the currently executed predicate.\r\nA handler may be defined which takes no argument (such\r\nas when the handler is defined for only one interrupt type).\r\nIf the handler has one argument, the identifier of the interrupt is passed\r\nto the handler when it is called.\r\n<P>\r\n\r\n<P>\r\nWhen an interrupt occurs, the system halts what it is currently doing and\r\ncalls the interrupt handler. Just as in the case with error handling, the\r\ninterrupt handler can be any Prolog procedure. However, unlike the situation\r\nin the case of error handling, when the handler exits,\r\nbe it with success or failure, the execution is resumed at the point\r\nwhere it was interrupted, the interrupt handling is in this case\r\ncompletely independent<A NAME=tex2html565 HREF=\"footnode.html#2579\"><IMG ALIGN=BOTTOM ALT=\"gif\" SRC=\"http://www.ecrc.de/eclipse/new_icons//foot_motif.gif\"></A>.\r\nThis ``resume and forget''\r\npolicy means that to the Prolog program, an interrupt is ``invisible'' ---\r\nproviding the handler has no side effects, the program continues as if\r\nthe interrupt had never happened.\r\nAs a consequence it is not significant whether the handler succeeds or fails.\r\nHowever, again just as in the\r\ncase of error handlers, a call to the predicate <b> exit_block/1</b> may be\r\n<A NAME=2581>&#160;</A>\r\nmade in order to escape from  within the handler to the corresponding\r\n<A NAME=2582>&#160;</A>\r\ncall of <b> block/3</b>.\r\nObviously, in this case the interrupted execution can no longer be resumed.\r\n<P>\r\nThere is one special interrupt handler <b> default/0</b> which performs\r\n<A NAME=2585>&#160;</A>\r\nthe standard UNIX handling of the specified interrupt (signal).\r\nSetting this handler is equivalent to calling <i> signal(N, SIG_DFL)</i>\r\non the C level.\r\nThus e.g. specifying\r\n<blockquote> <PRE>?- set_interrupt_handler(2, default/0)\r\n</PRE>\r\n</blockquote>\r\nwill exit the <A NAME=tex2html569 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  system when <tt>^</tt>C is pressed.\r\n<P>\r\nA signal is ignored by setting the handler to <b> true/0</b>.\r\n<A NAME=2591>&#160;</A>\r\nThis is equivalent to calling <i> signal(N, SIG_IGN)</i> on the C level.\r\nApart from these two exceptions, all other arguments will\r\nresult in the specified predicate to be called when the appropriate\r\ninterrupt occurs.\r\n<P>\r\n<A NAME=tex2html571 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  provides special support for debugging interrupt handlers.\r\nThey can be debugged independently of the interrupted program.\r\nTo achieve this, every interrupt number has a flag that can take one of the\r\nvalues <tt> debug</tt>, <tt> trace</tt>, <tt> nodebug</tt> or <tt> notrace</tt>\r\n(the latter two are synonyms).\r\nIt specifies if the corresponding interrupt handlers are executed \r\nwith the debugger in leap mode, in creep mode or without debugger respectively.\r\nThe flags can be set with the built-in <b> set_interrupt_flag/2</b>\r\nand queried with <b> get_interrupt_flag/2</b>.\r\n<P>\r\nThe remarks about care in the use of error handlers, especially in the\r\nmatter of how they affect input and output, are equally applicable to\r\ninterrupt handlers.\r\n<P>\r\n<BR> <HR><A NAME=tex2html4200 HREF=\"node164.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html4198 HREF=\"node156.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html4192 HREF=\"node162.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html4202 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html4201 HREF=\"node164.html\"> The block/3 Predicate</A>\r\n<B>Up:</B> <A NAME=tex2html4199 HREF=\"node156.html\"> Exceptions</A>\r\n<B> Previous:</B> <A NAME=tex2html4193 HREF=\"node162.html\"> Using Tools in </A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}