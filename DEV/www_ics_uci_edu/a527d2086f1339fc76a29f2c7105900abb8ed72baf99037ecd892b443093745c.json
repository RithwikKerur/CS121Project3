{"url": "https://www.ics.uci.edu/~eppstein/cgt/othello.html", "content": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title></title>\n</head>\n<body>\n<hr>\n<pre>\n<b>Newsgroups:</b>     rec.games.abstract\n<b>From:</b>           <a href=\n\"mailto:jff@maths.nott.ac.uk\">jff@maths.nott.ac.uk</a> (Joel F Feinstein)\n<b>Subject:</b>        Re: 6x6 Othello\n<b>Keywords:</b>       computer Othello\n<b>Organization:</b>   Maths Dept., Nottingham University, UK.\n<b>Date:</b>           Tue, 8 Jun 93 17:50:51 GMT\n</pre>\n\n<hr>\n<pre>\nJan Eric Larsson writes:\n&gt;Joel feinstein writes:\n&gt;&gt;I now have an optimal sequence for 6x6 Othello, if anyone\n&gt;&gt;is interested. The second player wins 20-16.\n&gt;I would be very happy if you would post your results. If you have some\n&gt;more information, like time used, how you did it, search method, ect.,\n&gt;I am sure it would be appreciated.\n\nMy strategy for solving 6x6 Othello was to modify my 8x8 player to\nplay 6x6, using a similar mid-game strategy in terms of corner regions\nand potential mobility (aim: maximize the number of empty squares\ntouching opponents discs) to the 8x8 version.\n\nIn the following please note that, in my notation, the top left square \nof the 6x6 Othello board is denoted by b2, for reasons explained in a \nprevious posting.\n\nMy endgame analyser uses short midgame searches to order the moves for\nits (unsophisticated) alpha-beta search. I was surprised to find that \nthe program could solve win-loss-draw with 29 empty squares in a day in most \ncases (in 8x8 it can only do 25-27 in this time). So, with no further thought\nrequired I was able to show that the second player had a forced win using about\n1.5 weeks cpu time on our silicon graphics crimson chip.\nThis seems to have been a little lucky: the \"parallel opening\"\n(1.d3 2.e3) turns out to be VERY complicated, and I still don't know\nwho wins. But it didn't take too long to show that white can not win\nby more than 4, which turns out to be critical (see below). The \"diagonal\" \nopening 1.d3 2.c3 is an easy loss, and only took one night. The remaining \n\"perpendicular\" opening, 1.d3 2.c5, wins by 4.  (This calculation took \ntwo weeks of cpu time: much quicker than I had expected. It helped\nthat I guessed that the score would be strictly between 18-18 and 21-15.\nI was again fortunate that the return value was inside my window).\nThe two calculations together required that about 60-70,000,000,000 \npositions be evaluated. I expect that more sophisticated search techniques \ncould reduce this figure by a large factor.\n\nBy symmetry, black's first move is forced. Thus white can use the following\nbook to achieve a won position after three moves each. I do not claim that \nthese lines are optimal for white. \n\nd3 c5 b6 e3 f5 e6\n            f4 d2 \n            d6 c4 \n            f2 d2 \n            f6 d2 \n            f3 d2 \n      c6 e3 b5 d2 \n            c4 b5 \n            f5 d2 \n            f3 f4 \n      d6 e3 b4 d2 \n            f4 d2 \n            b5 d2 \n            f5 f4 \n            f3 e2\n      e6 d2 c2 b2 \n            c3 e3 \n            c4 b5 \n            b5 f4 \n            c6 f4\n      f6 d2 c4 b5 \n            c3 f5 \n            c6 f5 \n            c2 b2 \n            b5 f4 \n\nJoel Feinstein (<a href=\n\"mailto:jff@maths.nott.ac.uk\">jff@maths.nott.ac.uk</a>)\n</pre>\n</body>\n</html>\n\n", "encoding": "ascii"}