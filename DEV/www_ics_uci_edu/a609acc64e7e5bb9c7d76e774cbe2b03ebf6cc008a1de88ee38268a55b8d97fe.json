{"url": "https://www.ics.uci.edu/~theory/269/190607.html", "content": "<!DOCTYPE html>\n<html>\n<head>\n<title>Theory Seminar, June 7, 2019</title>\n<link rel=\"stylesheet\" href=\"../stylesheet.css\" type=\"text/css\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"http://www.ics.uci.edu/~theory/logo/CATOC2.jpg\"\nalt=\"Center for Algorithms and Theory of Computation\"></a>\n<h2><a href=\"/~theory/269/\">CS 269S, Spring 2019: Theory Seminar</a><br>\nBren Hall, Room 1423, 1pm\n</h2>\n<hr />\n<h2>June 7, 2019:</h2>\n<h1>\nSimplifying critical path graphs\n</h1>\n<h2>\nDaniel Frishberg\n</h2>\n\n<p>\nCritical path graphs are used for modeling dependencies among the tasks in a\nproject. One representation (an activity-on-edge graph, which we call a\ncritical path graph, or CPG) labels edges with tasks, so that each task has a\nstart vertex and an end vertex. The dependencies among tasks are modeled with\nadditional unlabeled edges (of length zero). Given a nonnegative weight\nfunction on the task-labeled edges, the critical path of a CPG is defined the\nlongest path. The longest path is also the shortest possible project\ncompletion time. The question arises whether one can find a graph of minimum\nsize (number of vertices) which under every weight function preserves the\ncritical paths of a given graph. We answer this question in the affirmative\nwith a greedy algorithm which repeatedly applies a set of four reduction\nrules. We further show that the output graph is unique regardless of the\norder in which the rules are applied. \n\n<p>\n(Joint work with David Eppstein and Elham Havvaei)\n\n</body></html>\n", "encoding": "ascii"}