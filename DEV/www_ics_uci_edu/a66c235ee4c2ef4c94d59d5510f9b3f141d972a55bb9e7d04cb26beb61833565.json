{"url": "https://www.ics.uci.edu/~eppstein/pubs/j-sjc.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head>\n<title>David Eppstein - Publications</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body bgcolor=\"#ffffff\" text=\"#000000\">\n<h1>David Eppstein - Publications</h1>\n<hr><p>\n<h2>\nSIAM Journal on Computing\n</h2>\nI was on the editorial board from 1995 to 2004.\n<p>\n<ul>\n<li><b>Reset sequences for monotonic automata</b>.<br>\nD. Eppstein.<br>\n<i>15th Int. Coll. Automata, Languages and Programming,</i>\nTampere, Finland, 1988.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 317, 1988, pp. 230&ndash;238.<br>\n<a href=\"Epp-SJC-90.pdf\"><i>SIAM J. Computing</i> 19 (3): 500&ndash;510, 1990</a>.\n<p>\nAutomata theory.\nA reset sequence for a DFA is an input such that, no matter which\nstate the DFA starts in, it ends up after the input in a known state.\nThese have been used by Natarajan and Goldberg for certain robot motion\nplanning problems (in fact the conference version of this paper used\nthe title \"Reset sequences for finite automata\nwith application to design of parts orienters\"), and also in coding\ntheory where they arise in the design of\nself-synchronizing codes.  This paper considers DFAs in which the\ntransition functions respect a given cyclic ordering of the states, and\nshows that their shortest reset sequences can be found quickly.\nIt also considers parallel algorithms for the problem.\nThere remains open a gap between <i>n<sup>2</sup></i> and <i>n<sup>3</sup></i>\nin the maximum length of reset sequences for general automata.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Reset sequences for monotonic automata\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Reset-sequences-for-monotonic-automata.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein90reset.html\">CiteSeer</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=681434\">ACM DL (ICALP)</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=80025\">ACM DL (SJC)</a>)\n<p>\n<li><b>Separator based sparsification II: edge and vertex connectivity</b>.<br>\nD. Eppstein,\n<a href=\"//www.scs.gatech.edu/people/zvi-galil\">Z. Galil</a>, \n<a href=\"//www.info.uniroma2.it/~italiano/\">\nG.F. Italiano</a>, and T. Spencer.<br>\nTech. Rep. CS96-13, Univ. Ca' Foscari di Venezia, Oct. 1996.<br>\n<a href=\"//doi.org/10.1137/S0097539794269072\"><i>SIAM\nJ. Computing</i> 28 (1): 341&ndash;381, 1999</a>.\n<p>\nSecond half of journal version of\n<a href=\"p-egis.html\">Separator based sparsification for dynamic planar graph algorithms</a>.\n<p>\n(<a href=\"//fano.ics.uci.edu/cites/Document/Separator-based-sparsification-II-edge-and-vertex-connectivity.html\">Citations</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=298566\">ACM DL</a>)\n<p>\n<li><b>Finding the <i>k</i> shortest paths</b>.<br>\nD. Eppstein.<br>\n<i>35th IEEE Symp. Foundations of Comp. Sci.,</i> Santa Fe, 1994, pp. 154&ndash;165.<br>\n<a href=\"Epp-TR-94-26.pdf\">Tech. Rep. 94-26</a>, ICS, UCI, 1994.<br>\n<a href=\"//doi.org/10.1137/S0097539795290477\">\n<i>SIAM J. Computing</i> 28 (2): 652&ndash;673, 1998</a>.\n<p>\nThis paper presents an algorithm that finds multiple short paths connecting\ntwo terminals in a graph\n(allowing repeated vertices and edges in the paths)\nin constant time per path after a preprocessing stage\ndominated by a single-source shortest path computation.\nThe paths it finds are the <i>k</i> shortest in the graph, where <i>k</i> is a\nparameter given as input to the algorithm.\n<p>\nThe <i>k</i> shortest paths problem has many important applications for finding\nalternative solutions to geographic path planning problems, network\nrouting, hypothesis generation in computational linguistics, and\nsequence alignment and metabolic pathway finding in\nbioinformatics. Although there have been many papers on the\n<i>k</i> shortest paths problem before and after this one, it has become\nfrequently cited in those application areas.\nAdditionally, it marks a boundary in the theoretical study of the problem:\nprior theoretical work largely concerned how quickly the problem could\nbe solved, a line of research that was closed off by the optimal time\nbounds of this paper. Subsequent work has focused instead\non devising efficient algorithms for more complex alternative\nformulations of the problem that avoid the repeated\nvertices and other shortcomings of the alternative paths produced by\nthis formulation.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Finding the $k$ shortest paths\">BibTeX</a> &ndash;\n<a href=\"Epp-SJC-98.pdf\">Full paper</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Finding-the-k-shortest-paths.html\">Citations</a> &ndash;\n<a href=\"graehl.zip\">Graehl implementation</a> &ndash;\n<a href=\"//terra.act.uji.es/REA/\">Jim&eacute;nez-Marzal implementations</a> &ndash;\n<a href=\"Shibuya.tar.gz\">Shibuya implementation</a> &ndash;\n<a href=\"//www.mat.uc.pt/~eqvm/cientificos/research.html\">Martins implementation</a> &ndash;\n<a href=\"//christophercliff.com/eppstein/\">Cliff OpenStreetMap demo</a> &ndash;\nCiteSeer:\n<a href=\"//citeseer.ist.psu.edu/eppstein94finding.html\">TR '94</a>,\n<a href=\"//citeseer.ist.psu.edu/eppstein98finding.html\">SJC '98</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=299886\">ACM DL</a>)\n<p>\n<li><b>Setting parameters by example</b>.<br>\nD. Eppstein.<br>\n<a href=\"//arXiv.org/abs/cs.DS/9907001\">arXiv:cs.DS/9907001</a>.<br>\n<a href=\"//www.computer.org/proceedings/focs/0409/04090309abs.htm\"><i>40th\nIEEE Symp. Foundations of Comp. Sci.</i>, 1999, pp. 309&ndash;318</a>.<br>\n<a href=\"//doi.org/10.1137/S0097539700370084\">\n<i>SIAM J. Computing</i> 32 (3): 643&ndash;653, 2003</a>.\n<p>\nWe introduce a class of \"inverse parametric optimization\"\nproblems, in which one is given both a parametric optimization problem\nand a desired optimal solution; the task is to determine parameter\nvalues that lead to the given solution.  We use\n<a href=\"geom-lp.html\">low-dimensional linear programming</a>\nand geometric sampling techniques to solve\nsuch problems for\n<a href=\"mst.html\">minimum spanning trees</a>,\n<a href=\"graph-path.html\">shortest paths</a>, and\nother optimal subgraph problems, and discuss applications in\nmulticast routing, vehicle path planning, resource allocation, and board\ngame programming.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Setting parameters by\nexample\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Setting-parameters-by-example.html\">Citations</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=796502\">ACM DL (FOCS)</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=639091\">ACM DL (SJC)</a>)\n<p>\n<li><b>Improved combinatorial group testing for\nreal-world problem sizes.</b><br>\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>,\nand <a href=\"//www.ics.uci.edu/~dan/\">D. S. Hirschberg</a>.<br>\n<i>9th Worksh. Algorithms and Data Structures,</i> Waterloo, 2005.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 3608, 2005, pp. 86&ndash;98.<br>\n<a href=\"//arxiv.org/abs/cs.DS/0505048\">arXiv:cs.DS/0505048</a>.<br>\n<i>SIAM J. Computing</i> 36 (5): 1360&ndash;1375, 2007.\n<p>\nWe study practically efficient methods for finding few\nflawed items among large sets of items, by testing whether there\nexist flaws in each of a small number of batches of items.\n<p>\n(<a href=\"//www.ics.uci.edu/~eppstein/bibs/eppstein.html#Improved combinatorial group testing for real-world problem sizes\">BibTeX</a> &ndash;\n<a href=\"EppGooHir-WADS-05.pdf\">Mike's WADS talk slides</a>)\n<p>\n<li><b>Linear-time algorithms for geometric graphs with sublinearly many\ncrossings</b>.<br>\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>, and\n<a href=\"//www.ics.uci.edu/~dstrash/\">D. Strash</a>.<br>\n<a href=\"//arxiv.org/abs/0812.0893\">arXiv:0812.0893</a>.<br>\n<a href=\"//www.siam.org/proceedings/soda/2009/SODA09_018_eppsteind.pdf\"><i>20th ACM-SIAM Symp. Discrete Algorithms,</i>\nNew York, 2009, pp. 150&ndash;159</a>.<br>\n<a href=\"//doi.org/10.1137/090759112\"><i>SIAM J. Computing</i> 39 (8): 3814&ndash;3829, 2010</a>.\n<p>\nIf a connected graph corresponds to a set of points and line segments in\nthe plane, in such a way that the number of crossing pairs of line\nsegments is sublinear in the size of the graph by an iterated-log\nfactor, then we can find the arrangement of the segments in linear\ntime. It was previously known how to find the arrangement in linear time\nwhen the number of crossings is superlinear by an iterated-log factor,\nso the only remaining open case is when the number of crossings is close to the\nsize of the graph.\n<p>\n<li><b>Area-universal and constrained rectangular layouts</b>.<br>\nD. Eppstein,\nE. Mumford,\n<a href=\"//www.win.tue.nl/~speckman/\">B. Speckmann</a>, and\n<a href=\"//www.tue.nl/staff/k.a.b.verbeek\">K. Verbeek</a>.<br>\n<a href=\"//doi.org/10.1137/110834032\"><i>SIAM J. Computing</i> 41 (3): 537&ndash;564, 2012</a>.\n<p>\nA combined journal version of\n\"<a href=\"p-area-universal.html\">Area-universal rectangular layouts</a>\"\nand\n\"<a href=\"p-orientation-constrained\">Orientation-constrained\nrectangular layouts</a>\".\n<p>\n(<a href=\"EppMumSpe-SJC-12.pdf\">Local copy of article</a>)\n<p>\n</ul>\n\n<hr><p>\n<a href=\"jour.html\">Journals</a> &ndash;\n<a href=\"/~eppstein/pubs/\">Publications</a> &ndash;\n<a href=\"/~eppstein/\">David Eppstein</a> &ndash;\n<a href=\"/~theory/\">Theory Group</a> &ndash;\n<a href=\"/\">Inf. &amp; Comp. Sci.</a> &ndash;\n<a href=\"//www.uci.edu/\">UC Irvine</a>\n<p>\n<small>Semi-automatically <a href=\"filter.html\">filtered</a>\nfrom a common source file.</small>\n</body></html>\n", "encoding": "ascii"}