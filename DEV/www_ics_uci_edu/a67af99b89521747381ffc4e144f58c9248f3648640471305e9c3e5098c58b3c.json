{"url": "https://www.ics.uci.edu/~goodrich/teach/ics23/LabManual/LordOfTheRingbinders/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course2.css\" type=\"text/css\" />\n\n<title>ICS 23 / CSE 23 - Project #4: Lord of the Ringbinders</title>\n</head>\n\n<body>\n\n<div class=\"header\">\n\n<p>ICS 23 / CSE 23 - Project #4: <i>Lord of the Ringbinders</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, November 21, 6:59pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"center\">\n<i>\nThree Rings for the Elven-kings under the sky, <br>\nSeven for the Dwarf-lords in their halls of stone, <br>\nNine for Mortal Men doomed to die, <br>\nOne for the Dark Lord on his dark throne <br>\nIn the Land of Mordor where the Shadows lie. <br>\nOne Ring to rule them all, One Ring to find them, <br>\nOne Ring to bring them all and in the darkness <b>bind</B> them <br>\nIn the Land of Mordor where the Shadows lie. \n</i>\n<p class=\"center\">\n- from J.R.R. Tolkien, <cite>The Lord of the Rings</cite>\n</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>Consider a major Web site, such as <a\nhref=\"http://www.amazon.com/\">Amazon.com</a>.  At any given time,\nthey're storing a tremendous amount of information, e.g., book\ninventory, and making it available via the Web.  Further, the\ninformation is fairly fluid; every minute, many thousands of requests\npour in, each causing information to be accessed, changed, added, or\ndeleted.</p>\n\n<p>Companies like these store their information in <i>databases</i>.  A\ndatabase is a collection of data, which can be visualized as\na table consisting of\nrows and columns.  \nEach row corresponds to a <i>data record</i> and reach column\ncorresponds to an <i>attribute</i> that the data can have.\nFor example, in a database of books, each data record (row)\nwould correspond to an individual book, and each attribute (column)\nwould correspond to an attribute that a book can have, such as its\nauthor, title, or ISBN number.\nIn the case of books, the ISBN is a <i>unique</i> attribute, which is\ndifferent for each book.\nIn particular, each ISBN number contains a prefix that identifies the\noriginating country and publisher, and additional digits that\nuniquely identify the book.\nThus, one could enumerate all books for a certain country or\npublisher just by reporting all the data records (rows) in a book\ndatabase that have ISBN numbers with a certain prefix.\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Tables, rows, and columns</p>\n\n<p>For the purposes of this project, our <i>database</i> \nis a collection of <i>records</i>, each of which corresponds to a book.  \nEach book record consists of five attributes, as shown below:\n</p>\n\n<table class=\"normal\">\n  <tr class=\"top\">\n    <td>ISBN Number (key)</td>\n    <td>Author(s)</td>\n    <td>Title</td>\n    <td>Publisher</td>\n    <td>Year</td>\n  </tr>\n  <tr>\n    <td>0471128457</td>\n    <td>Schneier, Bruce</td>\n    <td>Applied Cryptography</td>\n    <td>John Wiley & Sons</td>\n    <td>1996</td>\n  </tr>\n  <tr>\n    <td>0471469831</td>\n    <td>Goodrich, M., and Tamassia, R.</td>\n    <td>Data Structures and Algorithms in Java</td>\n    <td>John Wiley & Sons</td>\n    <td>2004</td>\n  </tr>\n  <tr>\n    <td>0618517650</td>\n    <td>Tolkien, J.R.R.</td>\n    <td>The Lord of the Rings</td>\n    <td>George Allen & Unwin</td>\n    <td>1954</td>\n  </tr>\n</table>\n\n<p>\nImportantly, one of the attributes (i.e., a column) \ncontains a <i>key</i> value, which\nis used to uniquely identify the record.\nNo two records will\never have the same key.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The program</p>\n\n<p>Your program for this project is not intended to be\nanywhere near a production-quality database management system (DBMS).  \nMany of the ideas that I've\nintroduced above are simply to provide you enough background to\nunderstand the larger context into which your work fits.  Your program\nwill be a prototype of a very simple database system, capable of\nstoring book data, searching that data by keys,\nupdating that data, and removing it.  \nFor simplicity, all of the data\nwill be character strings.  \n</p>\n\n<p>Your program will read a sequence of commands from the console\n(presumably using a BufferedReader wrapped around an InputStreamReader\nwrapped around System.in) and print output to System.out as directed by\nthe specification below.  Your program should <i>not</i> print out any\nprompts such as \"Please enter your next command.\"  It should simply\nread commands blindly typed into the console, process them, and produce\noutput.  Many of the commands, in fact, will produce no output.  The\nreason for this design decision is two-fold.  Firstly, this is intended\nto be a prototype, meaning that it's not intended to be used by anyone\nwho is not familiar with the details of the project, so the user\ninterface need not be all that friendly.  Secondly, directly reading\ncommands from the console allows us to redirect input from a file into\nthe program, then redirect output into another file, for ease of\nautomated testing.  (I'll talk more about this aspect of the project\nlater in the write-up.)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The commands</p>\n\n<p>Your program needs to support the following commands:</p>\n\n<table class=\"normal\">\n  <tr class=\"top\">\n    <td>Command</td>\n  </tr>\n  <tr>\n    <td>\n      <p><b>INSERT</b> - Inserts a new book record into your database,\n      with the given ISBN key and the required data values.  \n      </p>\n\n      <p><pre>INSERT <i>ISBNKey</i> author=\"<i>authorName</i>\" title=\"<i>bookTitle</i>\" publisher=\"<i>publisherName</i>\" year=<i>yearValue</i> </pre></p>\n      <p>\n      where all of the fields are character strings, even the ones\n      not in quotes (quotes cannot be used inside names or titles)\n      <p>Examples:</p>\n      <ul>\n        <li><pre>INSERT 0471469831 author=\"Goodrich, M., and Tamassia, R.\" title=\"Data Structures and Algorithms in Java\" publisher=\"John Wiley & Sons\" year=2004</pre>\n        <li><pre>INSERT 0618517650 author=\"Tolkien, J.R.R.\" title=\"The Lord of the Rings\" publisher=\"George Allen & Unwin\" year=1954</pre>\n      </ul>\n      <p>This command should generate no output.  \n      The value placed into the ISBN key attribute must be unique in the database (i.e. no book may already exist with that value for is\n      ISBN key).  \n      </p>\n\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p><b>LOOKUP</b> - Retrieves all the books in the database having\n      a specified prefix in their ISBN keys, ordered by ISBN keys.</p>\n      <p><pre>LOOKUP <i>ISBNPrefix</i></pre> </p>\n      <p>Examples:</p>\n      <ul>\n        <li><pre>LOOKUP 0471</pre></li>\n\t<p>Looks up and prints the attributes of all books whose ISBN\n\tkey has the prefix 0471 (which corresponds to the publisher\n\tJohn Wiley & Sons).</p>\n      <p>The above command should generate output that looks like this:</p>\n      <p> \n<pre>\n0471128457 author=\"Schneier, Bruce\" title=\"Applied Cryptography\" publisher=\"John Wiley & Sons\" year=1996\n0471469831 author=\"Goodrich, M., and Tamassia, R.\" title=\"Data Structures and Algorithms in Java\" publisher=\"John Wiley & Sons\" year=2004\n</pre>\n        <li><pre>LOOKUP 0618517650</pre></li>\n\t<p>Looks up and prints the attributes of all books whose ISBN\n\tkey has the prefix 0618517650 (which corresponds to the one Tolkien\n\tbook).\n\t</p>\n      <p>The above command should generate output that looks like this:</p>\n<pre>\n0618517650 author=\"Tolkien, J.R.R.\" title=\"The Lord of the Rings\" publisher=\"George Allen & Unwin\" year=1954\n</pre>\n      </ul>\n    </p>\n      <p>This command should print all the retrieved \n      book records as space-delimited\n      lists of key-value pairs, ordered by their ISBN keys.\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p><b>DELETE</b> - Removes a book record with a particular key.</p>\n      <p><pre>DELETE <i>ISBNKey</i></pre></p>\n      <p>Examples:</p>\n      <ul>\n        <li><pre>DELETE 0471128457</pre>\n\tDeletes the book record with ISBNKey \n        equal to 0471128457, that is, the \"Applied Cryptography\" book.\n      </ul>\n      <p>This command should generate no output, unless the desired\n      record is not present (in which case the output should simply\n      be ERROR.</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p><b>EXIT</b> - Exits the program.</p>\n      <p><pre>EXIT</pre></p>\n      <p>This command should generate no output, and should end the program immediately.</p>\n    </td>\n  </tr>\n</table>\n\n<p></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Starting point</p>\n\n<p>\nYou're required to write the code for this project from scratch.\nNo code is provided.\n</p>\n\n</div>\n\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Handling erroneous commands</p>\n\n<p>Since your program is intended to be a rudimentary prototype, it\nneed not report specific error messages to indicate specific problems.\nInstead, any command that is not understood or does not follow the\nrules above should cause your program to simply print the word \"ERROR\"\nby itself on a line.  \n</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Implementing the Database</p>\n\n<p>You can think of our database as\na data structure that is commonly called a <i>map</i>.\nA map is a set of key/value pairs,\nwhere each key uniquely identifies a particular value.  In our case, we\ncan conceptually think of each record in the table as a key/value pair,\nwhere the key is the string value of the ISBN key for that record, and the\nvalue is the set of values for the remaining attributes.</p>\n\n<p>Since our database may contain a very large collection of\nbook records, it will be necessary for us to build an efficient implementation,\nwhich will provide fast insertions, lookups, and deletions.\nFor this project, you <b>must</b> implement the database as a\nrandom <b><i>skip list</i></b>, ordered by ISBN keys.\nBecause it is fundamentally necessary to have your skip list working before\nyou can build any of the other pieces, you should write and test this\npart of your project before moving on to the rest.\n</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Redirection of input and output</p>\n\n<p>Recall that you can execute a Java program from the command line by using the <b>java</b> command, like this:</p>\n\n<pre>\njava MyProgram\n</pre>\n\n<p>where MyProgram is the name of the class that contains a main( ) method.  Ordinarily, a Java program reads its \"standard\" input from the console, and writes its \"standard\" output to the console.  In other words, when you use the System.out.println( ) method, the output goes to the console.</p>\n\n<p>Most operating systems -- Windows, Unix, and Linux, for example -- allow you to <i>redirect</i> the standard input and output when you execute a program.  The contents of an existing file may be redirected into the standard input, meaning that, rather than allowing the user to type input into the console, the program proceeds as though the user has typed the next line of the file each time the program requires input.  Similarly, the standard output can be redirected into a file, meaning that all of the output to System.out will be stored in a file, rather than displayed on the console.</p>\n\n<p>The typical mechanism for redirection is to use the <b>&lt;</b> and <b>&gt;</b> operator on the command line, like this:</p>\n\n<pre>\njava MyProgram &lt;my-input.txt &gt;my-output.txt\n</pre>\n\n<p>Using the command above, every time the program needs input, it will read it from the file <b>my-input.txt</b>.  Every time it writes output, it will write it to the file <b>my-output.txt</b>.  It is possible to redirect the standard input without redirecting the standard output, and vice versa.  Note that the operating system deals with the <b>&lt;my-input.txt</b> and <b>&gt;my-output.txt</b> arguments itself before executing the program, so these will not end up in the array of Strings passed to the main( ) method.  In fact, the Java program will not even be aware of the redirection!  As far as the program is concerned, it's reading input from the console and writing output to the console.  The operating system handles the redirection transparently.</p>\n\n<p>This powerful and simple technique will allow you to write test input and reuse it many times while testing this program, so that you can test your database with large sets of data.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>You must turn in all of the <b>.java</b> files.\nPlease do not include any <b>.class</b> files or other files\ngenerated by your development environment.\n</p>\n\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for an explanation of how to turn in your project.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Limitations and advice</p>\n\n<p>You may not use the predefined Java \"collection\" classes, such as java.util.TreeMap, in your solution.  (The \"collection\" classes are the ones that store a collection of data, and include such classes as ArrayList, LinkedList, HashMap, Vector, Hashtable, and TreeMap.)</p>\n\n<p>I can't stress enough the need to <i>start early</i>.  The previous two projects involved a lot of conceptual thinking, but not very much coding.  This project, on the other hand, will require you to write more code.  It's actually not as big as you may believe, but I would allocate plenty of time to work on it, so that you can get your questions answered early on, and still have plenty of time to write the code.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Some additional explanation added and minor rewrites by Alex Thornton, Summer 2004.</li>\n  <li>Addition of the Command pattern and provided CommandParser class, along with some new explanations in the write-up, by Alex Thornton, Summer 2003.</li>\n  <li>User interface requirements adjusted and some provided source code modified by Alex Thornton, Spring 2003.</li>\n  <li>Originally written by Alex Thornton, Fall 2002.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}