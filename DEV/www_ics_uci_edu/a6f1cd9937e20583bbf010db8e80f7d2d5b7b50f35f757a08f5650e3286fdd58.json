{"url": "https://www.ics.uci.edu/~arcadia/arcadia_papers/lp/reprise_abstract.html", "content": "<HTML>\n<!-- $Id: reprise_abstract.html,v 1.1 1995/04/11 23:43:22 kari Exp $ -->\n<HEAD>\n<TITLE>Arcadia Collected Papers: ABSTRACT</TITLE>\n<META http-equiv=\"Owner\" content=\"Arcadia\">\n<META http-equiv=\"Reply-To\" content=\"arcadia-www@ics.uci.edu\">\n<LINK rev=\"made\" href=\"mailto:arcadia-www@ics.uci.edu\">\n</HEAD><BODY>\n<H1><img align=middle src=\"http://www.ics.uci.edu/~arcadia/Icons/arcadia-logo.gif\">\nArcadia Papers: ABSTRACT</H1>\n<HR>\n\n<A HREF=\"ftp://ftp.cs.colorado.edu/users/alw/papers/c++3.ps.Z\">\n\"<B>Representing Semantically Analyzed C++ Code with Reprise</B>\"</A>,\nby David S. Rosenblum and Alexander L. Wolf,\nin <I>Proceedings Third C++ Technical Conference</I>, pages 119-134,\nWashington, DC, April 1991.\n\n<H2> Abstract </H2>\n\nA prominent stumbling block in the spread of the C++ programming language has\nbeen a lack of programming and analysis tools to aid development and\nmaintenance of C++ systems.  One way to make the job of tool developers easier\nand to increase the quality of the tools they create is to factor out the\ncommon components of tools and provide the components as easily (re)used\nbuilding blocks.  Those building blocks  lexical, syntactic, and\nsemantic analyzers, tailored database derivers, code annotators and\ninstrumentors, and code generators.  From these building blocks, tools such\nas structure browsers, data-flow analyzers, program\\specification verifiers,\nmetrics collectors, compilers, interpreters, and the like can be built more\neasily and cheaply.  We believe that for C++ programming and analysis tools\nthe most primitive building blocks are centered around a common representation\nof semantically analyzed C++ code.\n\nIn this paper we describe such a representation, called Reprise\n(REPResentation Including SEmantics).  The conceptual model underlying Reprise\nis based on the use of expressions to capture all semantic information about\nboth the C++ language and code written in C++.  The expressions can be viewed\nas forming a directed graph, where there is an explicit connection from each\nuse of an entity to the declaration giving the semantics of that entity.  We\nelaborate on this model, illustrate how various features of C++ are\nrepresented, discuss some categories of tools that would create and manipulate\nReprise representations, and briefly describe our current implementation.\nThis paper is not intended to provide a complete definition of Reprise.\nRather, its purpose is to introduce at a high level the basic approach we are\ntaking in representing C++ code.\n\n<P>\n\n<HR>\n<ADDRESS>\n<A HREF=\"http://www.ics.uci.edu/Arcadia/\">The Arcadia Project\n&lt;arcadia-www@ics.uci.edu&gt;</A><BR>\nLast modified: Mon Feb 27 11:27:29 1995\n</ADDRESS>\n</BODY></HTML>\n", "encoding": "ascii"}