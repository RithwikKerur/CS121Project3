{"url": "https://www.ics.uci.edu/~fielding/pubs/dissertation/introduction.htm", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html><head>\n<title>Fielding Dissertation: Introduction</title>\n</head><body bgcolor=\"#ffffff\">\n<p>\n<i>[<a href=\"top.htm\" rel=\"parent\">Top</a>]\n   [<a href=\"abstract.htm\" rel=\"prev\">Prev</a>]\n   [<a href=\"software_arch.htm\" rel=\"next\">Next</a>]</i></p>\n<hr size=\"1\" noshade=\"noshade\" />\n<h1>INTRODUCTION</h1>\n<blockquote>\nExcuse me ... did you say `knives'?<br />\n<i>-- City Gent #1 (Michael Palin), The Architects Sketch [<a href=\"references.htm#ref_111\">111</a>]</i>\n</blockquote>\n<p>\nAs predicted by Perry and Wolf [<a href=\"references.htm#ref_105\">105</a>], software architecture has been a focal point for software engineering research in the 1990s. The complexity of modern software systems have necessitated a greater emphasis on componentized systems, where the implementation is partitioned into independent components that communicate to perform a desired task. Software architecture research investigates methods for determining how best to partition a system, how components identify and communicate with each other, how information is communicated, how elements of a system can evolve independently, and how all of the above can be described using formal and informal notations.</p>\n<p>\nA good architecture is not created in a vacuum. All design decisions at the architectural level should be made within the context of the functional, behavioral, and social requirements of the system being designed, which is a principle that applies equally to both software architecture and the traditional field of building architecture. The guideline that &quot;form follows function&quot; comes from hundreds of years of experience with failed building projects, but is often ignored by software practitioners. The funny bit within the Monty Python sketch, cited above, is the absurd notion that an architect, when faced with the goal of designing an urban block of flats (apartments), would present a building design with all the components of a modern slaughterhouse. It might very well be the best slaughterhouse design ever conceived, but that would be of little comfort to the prospective tenants as they are whisked along hallways containing rotating knives.</p>\n<p>\nThe hyperbole of The Architects Sketch may seem ridiculous, but consider how often we see software projects begin with adoption of the latest fad in architectural design, and only later discover whether or not the system requirements call for such an architecture. Design-by-buzzword is a common occurrence. At least some of this behavior within the software industry is due to a lack of understanding of why a given set of architectural constraints is useful. In other words, the reasoning behind good software architectures is not apparent to designers when those architectures are selected for reuse.</p>\n<p>\nThis dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. When given a name, a coordinated set of architectural constraints becomes an architectural style.</p>\n<p>\nThe first three chapters of this dissertation define a framework for understanding software architecture via architectural styles, revealing how styles can be used to guide the architectural design of network-based application software. Common architectural styles are surveyed and classified according to the architectural properties they induce when applied to an architecture for network-based hypermedia. This classification is used to identify a set of architectural constraints that could be used to improve the architecture of the early World Wide Web.</p>\n<p>\nArchitecting the Web requires an understanding of its requirements, as we shall discuss in Chapter 4. The Web is intended to be an Internet-scale distributed hypermedia system, which means considerably more than just geographical dispersion. The Internet is about interconnecting information networks across organizational boundaries. Suppliers of information services must be able to cope with the demands of anarchic scalability and the independent deployment of software components. Distributed hypermedia provides a uniform means of accessing services through the embedding of action controls within the presentation of information retrieved from remote sites. An architecture for the Web must therefore be designed with the context of communicating large-grain data objects across high-latency networks and multiple trust boundaries.</p>\n<p>\nChapter 5 introduces and elaborates the Representational State Transfer (REST) architectural style for distributed hypermedia systems. REST provides a set of architectural constraints that, when applied as a whole, emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems. I describe the software engineering principles guiding REST and the interaction constraints chosen to retain those principles, contrasting them to the constraints of other architectural styles.</p>\n<p>\nOver the past six years, the REST architectural style has been used to guide the design and development of the architecture for the modern Web, as presented in Chapter 6. This work was done in conjunction with my authoring of the Internet standards for the Hypertext Transfer Protocol (HTTP) and Uniform Resource Identifiers (URI), the two specifications that define the generic interface used by all component interactions on the Web.</p>\n<p>\nLike most real-world systems, not all components of the deployed Web architecture obey every constraint present in its architectural design. REST has been used both as a means to define architectural improvements and to identify architectural mismatches. Mismatches occur when, due to ignorance or oversight, a software implementation is deployed that violates the architectural constraints. While mismatches cannot be avoided in general, it is possible to identify them before they become standardized. Several mismatches within the modern Web architecture are summarized in Chapter 6, along with analyses of why they arose and how they deviate from REST.</p>\n<p>\nIn summary, this dissertation makes the following contributions to software research within the field of Information and Computer Science:</p>\n<ul>\n<li>a framework for understanding software architecture through architectural styles, including a consistent set of terminology for describing software architecture;</li>\n<li>a classification of architectural styles for network-based application software by the architectural properties they would induce when applied to the architecture for a distributed hypermedia system;</li>\n<li>REST, a novel architectural style for distributed hypermedia systems; and,</li>\n<li>application and evaluation of the REST architectural style in the design and deployment of the architecture for the modern World Wide Web.</li>\n</ul>\n<hr size=\"1\" noshade=\"noshade\" />\n<table width=\"100%\">\n<tr><td align=\"left\" valign=\"top\" nowrap=\"nowrap\">\n<i>[<a href=\"top.htm\" rel=\"parent\">Top</a>]\n   [<a href=\"abstract.htm\" rel=\"prev\">Prev</a>]\n   [<a href=\"software_arch.htm\" rel=\"next\">Next</a>]</i>\n</td><td align=\"center\" valign=\"top\">\n&#169; <a href=\"http://www.ics.uci.edu/~fielding/\">Roy Thomas Fielding</a>, 2000.  All rights reserved.\n</td><td align=\"right\" valign=\"top\">\n<i>[<a href=\"faq.htm\">How to reference this work.</a>]</i>\n</td></tr></table>\n</body></html>\n", "encoding": "ascii"}