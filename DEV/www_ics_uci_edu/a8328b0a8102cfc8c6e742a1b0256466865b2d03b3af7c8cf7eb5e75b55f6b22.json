{"url": "https://www.ics.uci.edu/~ardalan/courses/os/lab1.html", "content": "<!DOCTYPE html>\n<!-- saved from url=(0064)https://www.cs.jhu.edu/~huang/cs318/fall18/project/project1.html -->\n<html class=\"no-js\" lang=\"en\"><!-- Created on August, 12 2017 by texi2html 1.66 --><!--\nWritten by: Lionel Cons <Lionel.Cons@cern.ch> (original author)\n            Karl Berry  <karl@freefriends.org>\n            Olaf Bachmann <obachman@mathematik.uni-kl.de>\n            and many others.\nMaintained by: Many creative people <dev@texi2html.cvshome.org>\nSend bugs and suggestions to <users@texi2html.cvshome.org>\n-->\n<head>\n    <meta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <title>Ardalan Amiri Sani</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <link rel=\"stylesheet\" href=\"css/style.css\">\n    <link rel=\"shortcut icon\" href=\"img/favicon.ico\">\n</head>\n\n<body>\n\n\n<div id=\"main_body\">\n    <table width=\"100%\" height=125>\n        <tr>\n            <td>\n                <h1>CompSci 143A: Principles of Operating System</h1>\n                <p>\n                    <b>Instructor:</b> <a href=\"http://www.ics.uci.edu/~ardalan/\">Ardalan Amiri Sani</a><br/>\n                </p>\n            </td>\n        </tr>\n    </table>\n\n    <div id=\"navigation\">\n        <ul>\n            <li><a href=\"index.html\">Home</a></li>\n            <li><a href=\"lectures.html\">Lectures</a></li>\n            <li><a href=\"homework.html\">Homework</a></li>\n            <li><a href=\"discussions.html\">Discussions</a></li>\n            <li><a href=\"reading.html\">Reading</a></li>\n            <li><a href=\"project.html\">Project</a></li>\n        </ul>\n    </div>\n\n    <h2 id=\"pintos-project-lab1\">Pintos Project Lab 1: Threads</h2>\n\n    <p>\n        <strong>Due: </strong><span class=\"text-danger\">Wednesday 03/20/2019 11:55 PM</span>\n    </p>\n\n    In this assignment, we give you a minimally functional thread system.\n    Your job is to extend the functionality of this system to gain a\n    better understanding of synchronization problems.\n    <p></p>\n    <p>\n\n        You will be working primarily in the <q><tt>threads</tt></q> directory for\n        this assignment, with some work in the <q><tt>devices</tt></q> directory on the\n        side. Compilation should be done in the <q><tt>threads</tt></q> directory.\n    </p>\n    <p>\n\n        Before you read the description of this project, you should read all of\n        the following sections: <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_1.html#SEC1\">1.\n        Introduction</a>, <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_9.html#SEC148\">C.\n        Coding Standards</a>,\n        <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_11.html#SEC155\">E. Debugging\n            Tools</a>, and <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_12.html#SEC168\">F.\n        Development Tools</a>. You should at least\n        skim the material from <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_7.html#SEC101\">A.1 Loading</a>\n        through <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_7.html#SEC121\">A.5 Memory\n        Allocation</a>, especially <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_7.html#SEC110\">A.3\n        Synchronization</a>. To complete this project\n        you will also need to read <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_8.html#SEC141\">B.\n        4.4<acronym>BSD</acronym> Scheduler</a>.\n    </p>\n    <p>\n\n        <a name=\"Project 1 Background\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC26\"></a>\n    <h2> Background </h2>\n    <!--docid::SEC26::-->\n    <p>\n\n        <a name=\"Understanding Threads\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC27\"></a>\n    <h3> Understanding Threads </h3>\n    <!--docid::SEC27::-->\n    <p>\n\n        The first step is to read and understand the code for the initial thread\n        system.\n        Pintos already implements thread creation and thread completion,\n        a simple scheduler to switch between threads, and synchronization\n        primitives (semaphores, locks, condition variables, and optimization\n        barriers).\n    </p>\n    <p>\n\n        Some of this code might seem slightly mysterious. If\n        you haven't already compiled and run the base system, as described in\n        the introduction (see section <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_1.html#SEC1\">1. Introduction</a>),\n        you should do so now. You\n        can read through parts of the source code to see what's going\n        on. If you like, you can add calls to <code>printf()</code> almost\n        anywhere, then recompile and run to see what happens and in what\n        order. You can also run the kernel in a debugger and set breakpoints\n        at interesting spots, single-step through code and examine data, and\n        so on.\n    </p>\n    <p>\n\n        When a thread is created, you are creating a new context to be\n        scheduled. You provide a function to be run in this context as an\n        argument to <code>thread_create()</code>. The first time the thread is\n        scheduled and runs, it starts from the beginning of that function\n        and executes in that context. When the function returns, the thread\n        terminates. Each thread, therefore, acts like a mini-program running\n        inside Pintos, with the function passed to <code>thread_create()</code>\n        acting like <code>main()</code>.\n    </p>\n    <p>\n\n        At any given time, exactly one thread runs and the rest, if any,\n        become inactive. The scheduler decides which thread to\n        run next. (If no thread is ready to run\n        at any given time, then the special \"idle\" thread, implemented in\n        <code>idle()</code>, runs.)\n        Synchronization primitives can force context switches when one\n        thread needs to wait for another thread to do something.\n    </p>\n    <p>\n\n        The mechanics of a context switch are\n        in <q><tt>threads/switch.S</tt></q>, which is 80<var>x</var>86\n        assembly code. (You don't have to understand it.) It saves the\n        state of the currently running thread and restores the state of the\n        thread we're switching to.\n    </p>\n    <p>\n\n        Using the GDB debugger, slowly trace through a context\n        switch to see what happens (see section <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_11.html#SEC161\">E.5 GDB</a>). You\n        can set a\n        breakpoint on <code>schedule()</code> to start out, and then\n        single-step from there.<a name=\"DOCF1\"\n                                  href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_fot.html#FOOT1\">(1)</a>\n        Be sure\n        to keep track of each thread's address\n        and state, and what procedures are on the call stack for each thread.\n        You will notice that when one thread calls <code>switch_threads()</code>,\n        another thread starts running, and the first thing the new thread does\n        is to return from <code>switch_threads()</code>. You will understand the thread\n        system once you understand why and how the <code>switch_threads()</code> that\n        gets called is different from the <code>switch_threads()</code> that returns.\n        See section <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_7.html#SEC109\">A.2.3\n        Thread Switching</a>, for more information.\n    </p>\n    <p>\n\n    </p>\n    <div class=\"panel panel-warning\">\n        <div class=\"panel-heading\">\n            <strong>Warning!</strong>\n        </div>\n        <div class=\"panel-body\">\n            In Pintos, each thread is assigned a small,\n            fixed-size execution stack just under 4 kB in size. The kernel\n            tries to detect stack overflow, but it cannot do so perfectly. You\n            may cause bizarre problems, such as mysterious kernel panics, if you\n            declare large data structures as non-static local variables,\n            e.g. <q><samp>int buf[1000];</samp></q>. Alternatives to stack allocation include\n            the page allocator and the block allocator (see section <a\n                href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_7.html#SEC121\">A.5 Memory\n            Allocation</a>).\n        </div>\n    </div>\n    <p></p>\n    <p>\n\n        <a name=\"Project 1 Source Files\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC28\"></a>\n    <h3> Source Files </h3>\n    <!--docid::SEC28::-->\n    <p>\n\n        Refer to <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_1.html#SEC3\" target=\"_blank\">link</a>\n        for a brief overview of the files in the <q><tt>threads</tt></q>\n        directory. You will not need to modify most of this code, but the\n        hope is that presenting this overview will give you a start on what\n        code to look at.\n    </p>\n\n    <a name=\"Project 1 Synchronization\"></a>\n    <hr size=\"6\">\n    <a name=\"SEC31\"></a>\n    <h3> Synchronization </h3>\n    <!--docid::SEC31::-->\n    <p>\n\n        Proper synchronization is an important part of the solutions to these\n        problems. Any synchronization problem can be easily solved by turning\n        interrupts off: while interrupts are off, there is no concurrency, so\n        there's no possibility for race conditions. Therefore, it's tempting to\n        solve all synchronization problems this way, but <strong>don't</strong>.\n        Instead, use semaphores, locks, and condition variables to solve the\n        bulk of your synchronization problems. Read the tour section on\n        synchronization (see section <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_7.html#SEC110\">A.3\n        Synchronization</a>) or the comments in\n        <q><tt>threads/synch.c</tt></q> if you're unsure what synchronization primitives\n        may be used in what situations.\n    </p>\n    <p>\n\n        In the Pintos projects, the only class of problem best solved by\n        disabling interrupts is coordinating data shared between a kernel thread\n        and an interrupt handler. Because interrupt handlers can't sleep, they\n        can't acquire locks. This means that data shared between kernel threads\n        and an interrupt handler must be protected within a kernel thread by\n        turning off interrupts.\n    </p>\n    <p>\n\n        This project only requires accessing a little bit of thread state from\n        interrupt handlers. For the alarm clock, the timer interrupt needs to\n        wake up sleeping threads. In the advanced scheduler, the timer\n        interrupt needs to access a few global and per-thread variables. When\n        you access these variables from kernel threads, you will need to disable\n        interrupts to prevent the timer interrupt from interfering.\n    </p>\n    <p>\n\n        When you do turn off interrupts, take care to do so for the least amount\n        of code possible, or you can end up losing important things such as\n        timer ticks or input events. Turning off interrupts also increases the\n        interrupt handling latency, which can make a machine feel sluggish if\n        taken too far.\n    </p>\n    <p>\n\n        The synchronization primitives themselves in <q><tt>synch.c</tt></q> are\n        implemented by disabling interrupts. You may need to increase the\n        amount of code that runs with interrupts disabled here, but you should\n        still try to keep it to a minimum.\n    </p>\n    <p>\n\n        Disabling interrupts can be useful for debugging, if you want to make\n        sure that a section of code is not interrupted. You should remove\n        debugging code before turning in your project. (Don't just comment it\n        out, because that can make the code difficult to read.)\n    </p>\n    <p>\n\n        There should be no busy waiting in your submission. A tight loop that\n        calls <code>thread_yield()</code> is one form of busy waiting.\n    </p>\n    <p>\n\n        <a name=\"Development Suggestions\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC32\"></a>\n    <h3> Development Suggestions </h3>\n    <!--docid::SEC32::-->\n    <p>\n\n        In the past, many groups divided the assignment into pieces, then each\n        group member worked on his or her piece until just before the\n        deadline, at which time the group reconvened to combine their code and\n        submit. <strong>This is a bad idea. We do not recommend this\n        approach.</strong> Groups that do this often find that two changes conflict\n        with each other, requiring lots of last-minute debugging. Some groups\n        who have done this have turned in code that did not even compile or\n        boot, much less pass any tests.\n    </p>\n    <p>\n\n        Instead, we recommend integrating your team's changes early and often,\n        using a source code control system such as Git (see section <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_12.html#SEC171\">F.3 Git</a>).\n        This is less likely to produce surprises, because everyone can see\n        everyone else's code as it is written, instead of just when it is\n        finished. These systems also make it possible to review changes and,\n        when a change introduces a bug, drop back to working versions of code.\n    </p>\n    <p>\n\n        You should expect to run into bugs that you simply don't understand\n        while working on this project. When you do,\n        reread the appendix on debugging tools, which is filled with\n        useful debugging tips that should help you to get back up to speed\n        (see section <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_11.html#SEC155\">E.\n        Debugging Tools</a>). Be sure to read the section on backtraces\n        (see section <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_11.html#SEC159\">E.4\n        Backtraces</a>), which will help you to get the most out of every\n        kernel panic or assertion failure.\n    </p>\n    <p>\n\n        <a name=\"Project 1 Requirements\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC33\"></a>\n    <h2> Requirements </h2>\n    <!--docid::SEC33::-->\n    <p>\n\n        <a name=\"Project 1 Design Document\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC34\"></a>\n    <h3> 0. Design Document </h3>\n    <!--docid::SEC34::-->\n    <p>\n\n        Before you turn in your project, you must copy <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/threads.tmpl\">the\n        project 1 design document template</a> into your source tree under the name\n        <q><tt>pintos/src/threads/DESIGNDOC</tt></q> and fill it in. We recommend that\n        you read the design document template before you start working on the\n        project. See section <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_10.html#SEC152\">D.\n        Project Documentation</a>, for a sample design document\n        that goes along with a fictitious project.\n    </p>\n    <p>\n\n        <a name=\"Alarm Clock\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC35\"></a>\n    <h3> 1. Alarm Clock </h3>\n    <!--docid::SEC35::-->\n    <p>\n\n    </p>\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 1.1</strong>\n        </div>\n        <div class=\"panel-body\">\n            Reimplement <code>timer_sleep()</code>, defined in <q><tt>devices/timer.c</tt></q>.\n            Although a working implementation is provided, it \"busy waits,\" that\n            is, it spins in a loop checking the current time and calling\n            <code>thread_yield()</code> until enough time has gone by. Reimplement it to\n            avoid busy waiting.\n        </div>\n    </div>\n    <p></p>\n    <p>\n\n        <a name=\"IDX1\"></a>\n    </p>\n    <dl>\n        <dt><u>Function:</u> void <b>timer_sleep</b> (int64_t <var>ticks</var>)\n        </dt>\n        <dd>Suspends execution of the calling thread until time has advanced by at\n            least <var>x</var> timer ticks. Unless the system is otherwise idle, the\n            thread need not wake up after exactly <var>x</var> ticks. Just put it on\n            the ready queue after they have waited for the right amount of time.\n            <p>\n\n                <code>timer_sleep()</code> is useful for threads that operate in real-time,\n                e.g. for blinking the cursor once per second.\n            </p>\n            <p>\n\n                The argument to <code>timer_sleep()</code> is expressed in timer ticks, not in\n                milliseconds or any another unit. There are <code>TIMER_FREQ</code> timer\n                ticks per second, where <code>TIMER_FREQ</code> is a macro defined in\n                <code>devices/timer.h</code>. The default value is 100. We don't recommend\n                changing this value, because any change is likely to cause many of\n                the tests to fail.\n            </p>\n        </dd>\n    </dl>\n    <p>\n\n        Separate functions <code>timer_msleep()</code>, <code>timer_usleep()</code>, and\n        <code>timer_nsleep()</code> do exist for sleeping a specific number of\n        milliseconds, microseconds, or nanoseconds, respectively, but these will\n        call <code>timer_sleep()</code> automatically when necessary. You do not need\n        to modify them.\n    </p>\n    <p>\n\n        If your delays seem too short or too long, reread the explanation of the\n        <q><samp>-r</samp></q> option to <code>pintos</code> (see section <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_1.html#SEC6\">1.1.4 Debugging versus\n        Testing</a>).\n    </p>\n    <p>\n\n        The alarm clock implementation is not needed for later projects,\n        although it could be useful for project 4.\n    </p>\n    <p>\n\n        <a name=\"Priority Scheduling\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC36\"></a>\n    <h3> 2. Priority Scheduling </h3>\n    <!--docid::SEC36::-->\n    <p>\n\n    </p>\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 1.2.1</strong>\n        </div>\n        <div class=\"panel-body\">\n            Implement priority scheduling in Pintos.\n            When a thread is added to the ready list that has a higher priority\n            than the currently running thread, the current thread should\n            immediately yield the processor to the new thread. Similarly, when\n            threads are waiting for a lock, semaphore, or condition variable, the\n            highest priority waiting thread should be awakened first. A thread\n            may raise or lower its own priority at any time, but lowering its\n            priority such that it no longer has the highest priority must cause it\n            to immediately yield the CPU.\n        </div>\n    </div>\n    <p></p>\n    <p>\n\n        Thread priorities range from <code>PRI_MIN</code> (0) to <code>PRI_MAX</code> (63).\n        Lower numbers correspond to lower priorities, so that priority 0\n        is the lowest priority and priority 63 is the highest.\n        The initial thread priority is passed as an argument to\n        <code>thread_create()</code>. If there's no reason to choose another\n        priority, use <code>PRI_DEFAULT</code> (31). The <code>PRI_</code> macros are\n        defined in <q><tt>threads/thread.h</tt></q>, and you should not change their\n        values.\n    </p>\n    <p>\n\n        One issue with priority scheduling is \"priority inversion\". Consider\n        high, medium, and low priority threads <var>H</var>, <var>M</var>, and <var>L</var>,\n        respectively. If <var>H</var> needs to wait for <var>L</var> (for instance, for a\n        lock held by <var>L</var>), and <var>M</var> is on the ready list, then <var>H</var>\n        will never get the CPU because the low priority thread will not get any\n        CPU time. A partial fix for this problem is for <var>H</var> to \"donate\"\n        its priority to <var>L</var> while <var>L</var> is holding the lock, then recall\n        the donation once <var>L</var> releases (and thus <var>H</var> acquires) the lock.\n    </p>\n    <p>\n\n    </p>\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 1.2.2</strong>\n        </div>\n        <div class=\"panel-body\">\n            Implement priority donation. You will need to account for all different\n            situations in which priority donation is required.\n        </div>\n    </div>\n\n    Be sure to handle multiple donations, in which multiple priorities are donated to a single\n    thread. You must also handle nested donation: if <var>H</var> is waiting on\n    a lock that <var>M</var> holds and <var>M</var> is waiting on a lock that <var>L</var>\n    holds, then both <var>M</var> and <var>L</var> should be boosted to <var>H</var>'s\n    priority. If necessary, you may impose a reasonable limit on depth of\n    nested priority donation, such as 8 levels.\n    <p></p>\n    <p>\n\n        You must implement priority donation for locks. You need not\n        implement priority donation for the other Pintos synchronization\n        constructs. You do need to implement priority scheduling in all\n        cases.\n    </p>\n    <p>\n\n    </p>\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 1.2.3</strong>\n        </div>\n        <div class=\"panel-body\">\n            Finally, implement the following functions that allow a thread to\n            examine and modify its own priority. Skeletons for these functions are\n            provided in <q><tt>threads/thread.c</tt></q>.\n        </div>\n    </div>\n\n    <p></p>\n    <p>\n\n        <a name=\"IDX2\"></a>\n    </p>\n    <dl>\n        <dt><u>Function:</u> void <b>thread_set_priority</b> (int <var>new_priority</var>)\n        </dt>\n        <dd>Sets the current thread's priority to <var>new_priority</var>. If the\n            current thread no longer has the highest priority, yields.\n        </dd>\n    </dl>\n    <p>\n\n        <a name=\"IDX3\"></a>\n    </p>\n    <dl>\n        <dt><u>Function:</u> int <b>thread_get_priority</b> (void)\n        </dt>\n        <dd>Returns the current thread's priority. In the presence of priority\n            donation, returns the higher (donated) priority.\n        </dd>\n    </dl>\n    <p>\n\n        You need not provide any interface to allow a thread to directly modify\n        other threads' priorities.\n    </p>\n    <p>\n\n        The priority scheduler is not used in any later project.\n    </p>\n    <p>\n\n        <a name=\"Advanced Scheduler\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC37\"></a>\n    <h3> 3. Advanced Scheduler </h3>\n    <!--docid::SEC37::-->\n    <p>\n\n    </p>\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 1.3</strong>\n        </div>\n        <div class=\"panel-body\">\n            Implement a multilevel feedback queue scheduler similar to the\n            4.4<acronym>BSD</acronym> scheduler to\n            reduce the average response time for running jobs on your system.\n            See section <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_8.html#SEC141\">B.\n            4.4<acronym>BSD</acronym>\n            Scheduler</a>, for detailed requirements.\n        </div>\n    </div>\n    <p></p>\n    <p>\n\n        Like the priority scheduler, the advanced scheduler chooses the thread\n        to run based on priorities. However, the advanced scheduler does not do\n        priority donation. Thus, we recommend that you have the priority\n        scheduler working, except possibly for priority donation, before you\n        start work on the advanced scheduler.\n    </p>\n    <p>\n\n        You must write your code to allow us to choose a scheduling algorithm\n        policy at Pintos startup time. By default, the priority scheduler\n        must be active, but we must be able to choose the 4.4<acronym>BSD</acronym>\n        scheduler\n        with the <q><samp>-mlfqs</samp></q> kernel option. Passing this\n        option sets <code>thread_mlfqs</code>, declared in <q><tt>threads/thread.h</tt></q>, to\n        true when the options are parsed by <code>parse_options()</code>, which happens\n        early in <code>main()</code>.\n    </p>\n    <p>\n\n        When the 4.4<acronym>BSD</acronym> scheduler is enabled, threads no longer\n        directly control their own priorities. The <var>priority</var> argument to\n        <code>thread_create()</code> should be ignored, as well as any calls to\n        <code>thread_set_priority()</code>, and <code>thread_get_priority()</code> should return\n        the thread's current priority as set by the scheduler.\n    </p>\n    <p>\n\n        The advanced scheduler is not used in any later project.\n    </p>\n\n    <!--\n    <a name=\"Project 1 Submission\"></a>\n    <hr size=\"6\">\n    <a name=\"SEC42\"></a>\n    <h2> Submission Instruction </h2>\n    <div class=\"panel panel-warning\">\n        <div class=\"panel-heading\">\n            <strong>Note</strong>\n        </div>\n        <div class=\"panel-body\">\n            We will collect your solution automatically through GitHub by taking a snapshot\n            by the deadline. Thus, be sure to commit your changes and do a <code>git push</code>\n            to GitHub, especially in the last few minutes! We prefer your submission to be\n            in a branch called <code>lab1-handin</code>. You can create such a branch\n            when you finalize your lab1 code with <code>git checkout -b lab1-handin</code>. If\n            after you created this branch, you made additional changes in another branch\n            (e.g., <code>master</code>), make sure you sync these changes to the submission\n            branch with <code>git checkout lab1-handin &amp;&amp; git merge master</code>.\n            <br>\n\n            If you decide to use the late hour tokens, by the deadline send an email to\n            <tt>cs318-staff@cs.jhu.edu</tt> with the subject <tt>[Late Request]: $GitHub_Repo_Name$</tt> (empty\n            content is fine) so we won't be collecting and grading your solution immediately.\n            When you finish (within the token limit), send another email to <tt>cs318-staff@cs.jhu.edu</tt>\n            with the subject <tt>[Late Finish]: $GitHub_Repo_Name$</tt>.\n        </div>\n    </div>\n    -->\n\n\n    <p>\n\n        <a name=\"Project 1 FAQ\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC38\"></a>\n    <h2> FAQ </h2>\n    <!--docid::SEC38::-->\n    <p>\n\n    </p>\n    <dl compact=\"\">\n        <dt><b>How much code will I need to write?</b>\n        </dt>\n        <dd><p>\n\n            Here's a summary of our reference solution, produced by the\n            <code>diffstat</code> program. The final row gives total lines inserted\n            and deleted; a changed line counts as both an insertion and a deletion.\n        </p>\n            <p>\n\n                The reference solution represents just one possible solution. Many\n                other solutions are also possible and many of those differ greatly from\n                the reference solution. Some excellent solutions may not modify all the\n                files modified by the reference solution, and some may modify files not\n                modified by the reference solution.\n            </p>\n            <p>\n\n            </p>\n            <table>\n                <tbody>\n                <tr>\n                    <td>&nbsp;</td>\n                    <td class=\"example\"><pre> devices/timer.c       |   42 +++++-\n threads/fixed-point.h |  120 ++++++++++++++++++\n threads/synch.c       |   88 ++++++++++++-\n threads/thread.c      |  196 ++++++++++++++++++++++++++----\n threads/thread.h      |   23 +++\n 5 files changed, 440 insertions(+), 29 deletions(-)\n</pre>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n            <p>\n\n                <q><tt>fixed-point.h</tt></q> is a new file added by the reference solution.\n            </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>How do I update the <q><tt>Makefile</tt></q>s when I add a new source file?</b>\n        </dt>\n        <dd><p>\n\n            <a name=\"Adding Source Files\"></a>\n            To add a <q><tt>.c</tt></q> file, edit the top-level <q><tt>Makefile.build</tt></q>.\n            Add the new file to variable <q><samp><var>dir</var>_SRC</samp></q>, where\n            <var>dir</var> is the directory where you added the file. For this\n            project, that means you should add it to <code>threads_SRC</code> or\n            <code>devices_SRC</code>. Then run <code>make</code>. If your new file\n            doesn't get\n            compiled, run <code>make clean</code> and then try again.\n        </p>\n            <p>\n\n                When you modify the top-level <q><tt>Makefile.build</tt></q> and re-run\n                <code>make</code>, the modified\n                version should be automatically copied to\n                <q><tt>threads/build/Makefile</tt></q>. The converse is\n                not true, so any changes will be lost the next time you run <code>make\n                clean</code> from the <q><tt>threads</tt></q> directory. Unless your changes are\n                truly temporary, you should prefer to edit <q><tt>Makefile.build</tt></q>.\n            </p>\n            <p>\n\n                A new <q><tt>.h</tt></q> file does not require editing the <q><tt>Makefile</tt></q>s.\n            </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>What does <code>warning: no previous prototype for `<var>func</var>'</code> mean?</b>\n        </dt>\n        <dd><p>\n\n            It means that you defined a non-<code>static</code> function without\n            preceding it by a prototype. Because non-<code>static</code> functions are\n            intended for use by other <q><tt>.c</tt></q> files, for safety they should be\n            prototyped in a header file included before their definition. To fix\n            the problem, add a prototype in a header file that you include, or, if\n            the function isn't actually used by other <q><tt>.c</tt></q> files, make it\n            <code>static</code>.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>What is the interval between timer interrupts?</b>\n        </dt>\n        <dd><p>\n\n            Timer interrupts occur <code>TIMER_FREQ</code> times per second. You can\n            adjust this value by editing <q><tt>devices/timer.h</tt></q>. The default is\n            100 Hz.\n        </p>\n            <p>\n\n                We don't recommend changing this value, because any changes are likely\n                to cause many of the tests to fail.\n            </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>How long is a time slice?</b>\n        </dt>\n        <dd><p>\n\n            There are <code>TIME_SLICE</code> ticks per time slice. This macro is\n            declared in <q><tt>threads/thread.c</tt></q>. The default is 4 ticks.\n        </p>\n            <p>\n\n                We don't recommend changing this value, because any changes are likely\n                to cause many of the tests to fail.\n            </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>How do I run the tests?</b>\n        </dt>\n        <dd><p>\n\n            See section <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_1.html#SEC8\">1.2.1\n            Testing</a>.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>Why do I get a test failure in <code>pass()</code>?</b>\n        </dt>\n        <dd><p>\n\n            <a name=\"The pass function fails\"></a>\n            You are probably looking at a backtrace that looks something like this:\n        </p>\n            <p>\n\n            </p>\n            <table>\n                <tbody>\n                <tr>\n                    <td>&nbsp;</td>\n                    <td class=\"example\"><pre>0xc0108810: debug_panic (lib/kernel/debug.c:32)\n0xc010a99f: pass (tests/threads/tests.c:93)\n0xc010bdd3: test_mlfqs_load_1 (...threads/mlfqs-load-1.c:33)\n0xc010a8cf: run_test (tests/threads/tests.c:51)\n0xc0100452: run_task (threads/init.c:283)\n0xc0100536: run_actions (threads/init.c:333)\n0xc01000bb: main (threads/init.c:137)\n</pre>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n            <p>\n\n                This is just confusing output from the <code>backtrace</code> program. It\n                does not actually mean that <code>pass()</code> called <code>debug_panic()</code>. In\n                fact, <code>fail()</code> called <code>debug_panic()</code> (via the <code>PANIC()</code>\n                macro). GCC knows that <code>debug_panic()</code> does not return, because it\n                is declared <code>NO_RETURN</code> (see section <a\n                    href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_11.html#SEC158\">E.3 Function\n                and Parameter Attributes</a>), so it doesn't include any code in <code>fail()</code> to take\n                control when <code>debug_panic()</code> returns. This means that the return\n                address on the stack looks like it is at the beginning of the function\n                that happens to follow <code>fail()</code> in memory, which in this case happens\n                to be <code>pass()</code>.\n            </p>\n            <p>\n\n                See section <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_11.html#SEC159\">E.4\n                Backtraces</a>, for more information.\n            </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>How do interrupts get re-enabled in the new thread following <code>schedule()</code>?</b>\n        </dt>\n        <dd><p>\n\n            Every path into <code>schedule()</code> disables interrupts. They eventually\n            get re-enabled by the next thread to be scheduled. Consider the\n            possibilities: the new thread is running in <code>switch_thread()</code> (but\n            see below), which is called by <code>schedule()</code>, which is called by one\n            of a few possible functions:\n        </p>\n            <p>\n\n            </p>\n            <ul>\n                <li>\n                    <code>thread_exit()</code>, but we'll never switch back into such a thread, so\n                    it's uninteresting.\n                    <p>\n\n                    </p>\n                </li>\n                <li>\n                    <code>thread_yield()</code>, which immediately restores the interrupt level upon\n                    return from <code>schedule()</code>.\n                    <p>\n\n                    </p>\n                </li>\n                <li>\n                    <code>thread_block()</code>, which is called from multiple places:\n                    <p>\n\n                    </p>\n                    <ul>\n                        <li>\n                            <code>sema_down()</code>, which restores the interrupt level before returning.\n                            <p>\n\n                            </p>\n                        </li>\n                        <li>\n                            <code>idle()</code>, which enables interrupts with an explicit assembly STI\n                            instruction.\n                            <p>\n\n                            </p>\n                        </li>\n                        <li>\n                            <code>wait()</code> in <q><tt>devices/intq.c</tt></q>, whose callers are responsible\n                            for\n                            re-enabling interrupts.\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n            <p>\n\n                There is a special case when a newly created thread runs for the first\n                time. Such a thread calls <code>intr_enable()</code> as the first action in\n                <code>kernel_thread()</code>, which is at the bottom of the call stack for every\n                kernel thread but the first.\n            </p></dd>\n    </dl>\n    <p>\n\n        <a name=\"Alarm Clock FAQ\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC39\"></a>\n    <h3> Alarm Clock FAQ </h3>\n    <!--docid::SEC39::-->\n    <p>\n\n    </p>\n    <dl compact=\"\">\n        <dt><b>Do I need to account for timer values overflowing?</b>\n        </dt>\n        <dd><p>\n\n            Don't worry about the possibility of timer values overflowing. Timer\n            values are expressed as signed 64-bit numbers, which at 100 ticks per\n            second should be good for almost 2,924,712,087 years. By then, we\n            expect Pintos to have been phased out of the Computer Science curriculum.\n        </p></dd>\n    </dl>\n    <p>\n\n        <a name=\"Priority Scheduling FAQ\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC40\"></a>\n    <h3> Priority Scheduling FAQ </h3>\n    <!--docid::SEC40::-->\n    <p>\n\n    </p>\n    <dl compact=\"\">\n        <dt><b>Doesn't priority scheduling lead to starvation?</b>\n        </dt>\n        <dd><p>\n\n            Yes, strict priority scheduling can lead to starvation\n            because a thread will not run if any higher-priority thread is runnable.\n            The advanced scheduler introduces a mechanism for dynamically\n            changing thread priorities.\n        </p>\n            <p>\n\n                Strict priority scheduling is valuable in real-time systems because it\n                offers the programmer more control over which jobs get processing\n                time. High priorities are generally reserved for time-critical\n                tasks. It's not \"fair,\" but it addresses other concerns not\n                applicable to a general-purpose operating system.\n            </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>What thread should run after a lock has been released?</b>\n        </dt>\n        <dd><p>\n\n            When a lock is released, the highest priority thread waiting for that\n            lock should be unblocked and put on the list of ready threads. The\n            scheduler should then run the highest priority thread on the ready\n            list.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>If the highest-priority thread yields, does it continue running?</b>\n        </dt>\n        <dd><p>\n\n            Yes. If there is a single highest-priority thread, it continues\n            running until it blocks or finishes, even if it calls\n            <code>thread_yield()</code>.\n            If multiple threads have the same highest priority,\n            <code>thread_yield()</code> should switch among them in \"round robin\" order.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>What happens to the priority of a donating thread?</b>\n        </dt>\n        <dd><p>\n\n            Priority donation only changes the priority of the donee\n            thread. The donor thread's priority is unchanged.\n            Priority donation is not additive: if thread <var>A</var> (with priority 5) donates\n            to thread <var>B</var> (with priority 3), then <var>B</var>'s new priority is 5, not 8.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>Can a thread's priority change while it is on the ready queue?</b>\n        </dt>\n        <dd><p>\n\n            Yes. Consider a ready, low-priority thread <var>L</var> that holds a lock.\n            High-priority thread <var>H</var> attempts to acquire the lock and blocks,\n            thereby donating its priority to ready thread <var>L</var>.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>Can a thread's priority change while it is blocked?</b>\n        </dt>\n        <dd><p>\n\n            Yes. While a thread that has acquired lock <var>L</var> is blocked for any\n            reason, its priority can increase by priority donation if a\n            higher-priority thread attempts to acquire <var>L</var>. This case is\n            checked by the <code>priority-donate-sema</code> test.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>Can a thread added to the ready list preempt the processor?</b>\n        </dt>\n        <dd><p>\n\n            Yes. If a thread added to the ready list has higher priority than the\n            running thread, the correct behavior is to immediately yield the\n            processor. It is not acceptable to wait for the next timer interrupt.\n            The highest priority thread should run as soon as it is runnable,\n            preempting whatever thread is currently running.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>How does <code>thread_set_priority()</code> affect a thread receiving donations?</b>\n        </dt>\n        <dd><p>\n\n            It sets the thread's base priority. The thread's effective priority\n            becomes the higher of the newly set priority or the highest donated\n            priority. When the donations are released, the thread's priority\n            becomes the one set through the function call. This behavior is checked\n            by the <code>priority-donate-lower</code> test.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>Doubled test names in output make them fail.</b>\n        </dt>\n        <dd><p>\n\n            Suppose you are seeing output in which some test names are doubled,\n            like this:\n        </p>\n            <p>\n\n            </p>\n            <table>\n                <tbody>\n                <tr>\n                    <td>&nbsp;</td>\n                    <td class=\"example\"><pre>(alarm-priority) begin\n(alarm-priority) (alarm-priority) Thread priority 30 woke up.\nThread priority 29 woke up.\n(alarm-priority) Thread priority 28 woke up.\n</pre>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n            <p>\n\n                What is happening is that output from two threads is being\n                interleaved. That is, one thread is printing <code>\"(alarm-priority)\n                Thread priority 29 woke up.\\n\"</code> and another thread is printing\n                <code>\"(alarm-priority) Thread priority 30 woke up.\\n\"</code>, but the first\n                thread is being preempted by the second in the middle of its output.\n            </p>\n            <p>\n\n                This problem indicates a bug in your priority scheduler. After all, a\n                thread with priority 29 should not be able to run while a thread with\n                priority 30 has work to do.\n            </p>\n            <p>\n\n                Normally, the implementation of the <code>printf()</code> function in the\n                Pintos kernel attempts to prevent such interleaved output by acquiring\n                a console lock during the duration of the <code>printf</code> call and\n                releasing it afterwards. However, the output of the test name,\n                e.g., <code>(alarm-priority)</code>, and the message following it is output\n                using two calls to <code>printf</code>, resulting in the console lock being\n                acquired and released twice.\n            </p></dd>\n    </dl>\n    <p>\n\n        <a name=\"Advanced Scheduler FAQ\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC41\"></a>\n    <h3> Advanced Scheduler FAQ </h3>\n    <!--docid::SEC41::-->\n    <p>\n\n    </p>\n    <dl compact=\"\">\n        <dt><b>How does priority donation interact with the advanced scheduler?</b>\n        </dt>\n        <dd><p>\n\n            It doesn't have to. We won't test priority donation and the advanced\n            scheduler at the same time.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>Can I use one queue instead of 64 queues?</b>\n        </dt>\n        <dd><p>\n\n            Yes. In general, your implementation may differ from the description,\n            as long as its behavior is the same.\n        </p>\n            <p>\n\n            </p>\n        </dd>\n        <dt><b>Some scheduler tests fail and I don't understand why. Help!</b>\n        </dt>\n        <dd><p>\n\n            If your implementation mysteriously fails some of the advanced\n            scheduler tests, try the following:\n        </p>\n            <p>\n\n            </p>\n            <ul>\n                <li>\n                    Read the source files for the tests that you're failing, to make sure\n                    that you understand what's going on. Each one has a comment at the\n                    top that explains its purpose and expected results.\n                    <p>\n\n                    </p>\n                </li>\n                <li>\n                    Double-check your fixed-point arithmetic routines and your use of them\n                    in the scheduler routines.\n                    <p>\n\n                    </p>\n                </li>\n                <li>\n                    Consider how much work your implementation does in the timer\n                    interrupt. If the timer interrupt handler takes too long, then it\n                    will take away most of a timer tick from the thread that the timer\n                    interrupt preempted. When it returns control to that thread, it\n                    therefore won't get to do much work before the next timer interrupt\n                    arrives. That thread will therefore get blamed for a lot more CPU\n                    time than it actually got a chance to use. This raises the\n                    interrupted thread's recent CPU count, thereby lowering its priority.\n                    It can cause scheduling decisions to change. It also raises the load\n                    average.\n                </li>\n            </ul>\n        </dd>\n    </dl>\n\n    <!--<footer class=\"site-footer\">-->\n        <!--<hr>-->\n        <!--<div class=\"wrapper\">-->\n            <!--Ryan Huang | Last updated 2019-01-06 13:58:14 -0500.-->\n        <!--</div>-->\n    <!--</footer>-->\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}