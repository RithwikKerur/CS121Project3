{"url": "https://www.ics.uci.edu/~dan/class/260P/hw3.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n      \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<HTML><HEAD>\n<title> CompSci 260P Homework #3 </title>\n</HEAD><BODY>\n<span style=\"color:#000000; font:16px Arial, Helvetica, sans-serif;\">\n\n<H2 align=center> CompSci 260P Homework #3 </H2>\n    <UL>\n      <LI> Chapter 3, Exercises 2,4,10,12\n<P>\n      <LI> Problem 1 <BR>\nGiven an undirected graph <I>G</I> = (<I>V,E</I>),\nconsisting of <I>n</I> vertices and <I>m</I> edges,\nwith each edge labeled from the set {0,1}.\n<P>\nDescribe and analyze the worst-case time complexity of an efficient algorithm to\nfind any cycle consisting of edges whose labels alternate 0,1.\n<P>\n      <LI> Problem 2 <BR>\nSuppose that you want to get from vertex <I>s</I> to vertex <I>t</I>\nin an unweighted graph <I>G</I> = (<I>V,E</I>),\nbut you would like to stop by vertex <I>u</I>\nif it is possible to do so without increasing the length of your\npath by more than a factor of &alpha;.\n<P>\nDescribe an efficient algorithm that would determine an optimal <I>s-t</I> path\ngiven your preference for stopping at <I>u</I> along the way if doing so\nis not prohibitively costly. (It should either return the shortest path\nfrom <I>s</I> to <I>t</I> or the shortest path from <I>s</I> to <I>t</I>\ncontaining <I>u</I>, depending on the situation.)\n<P>\n      <LI> Problem 3 <BR>\nDescribe and analyze an efficient algorithm that,\ngiven <I>n</I> nodes labeled from 0 to <I>n</I>-1 and a list of undirected edges\n(each edge is a pair of nodes), determines whether these edges make up a valid tree.\n<P>\n      <LI> Problem 4 <BR>\nGiven a binary tree with a value associated with each node.\nThe node values may be positive, negative, or zero.\n<P>\nFor this problem, a path is defined as any sequence of nodes from some starting node\nto any node in the tree along the parent-child connections. The path does not need\nto go through the root.\nThe path sum is the sum of the node values on that path.\n<P>\nDescribe and analyze an efficient algorithm to find the maximum path sum.\n    </UL>\n</span>\n</BODY></HTML>\n", "encoding": "ascii"}