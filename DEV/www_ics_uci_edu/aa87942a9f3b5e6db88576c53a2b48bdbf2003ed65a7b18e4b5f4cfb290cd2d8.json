{"url": "https://www.ics.uci.edu/~pattis/ICS-46/assignments/program0/program.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 0</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 0</h1>\r\n<h1>Learning to Use CLion/Clang C++, Course Libraries,<br>\r\n    GoogleTest, and Checkmate</h1>\r\n<p>\r\n<h2>ICS-46: Data Structure Implementation and Analysis\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\nThis \"programming assignment\" is designed to ensure that you know how to\r\n  use -at least in a cookbook way-\r\n  <b>CLion</b> (for editing,building,  running, and debugging C++ programs,\r\n    after installing the course library),\r\n <b>GoogleTest</b> (and driver programs, for testing and locating errors in\r\n    code), and <b>Checkmate</b> for submitting programs for grading.\r\n<p>\r\nYou will start this programming assignment similarly to others this quarter.\r\n<ul>\r\n<li>First you will download and unzip the <b>CLion Project Folder</b>\r\n      named <b>program0</b>.\r\n<p>\r\n<li>Second you will move the <b>program0</b> folder into your\r\n      <b>CLionProjects</b> folder (created when you installed and tested\r\n      the <a href=\"../../../common/handouts/cygwinclion/clion.html\" target =\"_new\">CLion</a>\r\n      IDE: see Section 3, Step 1).\r\n<p>\r\n<li>Third, you will individually uncomment (to correctly run a program, only\r\n     one <b>.cpp</b> file can be uncommented at a time), build (compile and\r\n     link), and run the <b>driver.cpp</b> program and then the\r\n     <b>test_queue.cpp</b> program that are in the <b>project0</b> folder: my\r\n     code deliberately has an error that you will find and fix.\r\n<p>\r\n<li>Fourth, when you have corrected the program, you will submit its\r\n      <b>.hpp</b> file for grading using the <b>Checkmate</b> submission system.\r\n</ul>\r\nFor all later assignments, I will not be providing as much code as I do in\r\n  this assignment, because the focus of this assignment is using tools,\r\n  not writing code; the focus of the later assignments is writing code\r\n using the tools that you will learn and practice with in this assignment.\r\n<b>Therefore</b> the later assigments assume that you have already learned how\r\n  to use these tools.\r\nThere is actually just one error in the code for this assignment, and this\r\n  write-up will detail where it is and how to fix it.\r\nSo the purpose of this assignment is not to fix the error, but instead to become\r\n  familiar with the tools that you will use throughout the quarter to find and\r\n  fix errors in your own code.\r\nThis is especially true of the debugger, where I estimate that every hour you \r\n  experiment running code in the debugger now will save you 3 hours later in\r\n  the quarter.\r\n<p>\r\nYou may want to print this document and carefully read it, marking any parts\r\n  that contain important information (for review, before you submit the file);\r\n  you might want to save the copy you marked-up.\r\nPlease report any major problems on the <b>program0</b> folder on Piazza\r\n  (and any minor problems, like typos, to me).\r\nI expect you to read this entire document and perform all the operations it\r\n  describes...maybe even more than once to better learn the tools covered\r\n  before your first real programming assignment; at that time, students become\r\n  reluctant to master general tools in pursuit of the specific problems they\r\n  need to solve.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Download/Unzip -->\r\n\r\n<a name=\"download\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Download, Unzip, and<br>\r\n                    Move the Project Folder</b></td>\r\n<td width =\"80%\">\r\nIn this section you will download, unzip, and move a project folder into\r\n  the <b>CLionProjects</b> folder (created when you installed and tested CLion).\r\n<ol>\r\n<li>Download (onto your desktop) and unzip the following \r\n      <a href=\"program0.zip\">CLion Start Project Folder</a>.\r\n    Generally if you right-click the <b>.zip</b> file, one of\r\n      the options available will unzip the file: <b>Izarc</b>\r\n      and <b>WinZip</b> are two common programs, both further\r\n     specify an <b>Extract [to] Here</b> option.\r\n    If you have any problems ask one of the staff for help.\r\n<p>\r\n\r\n    The resulting unzipped folder contains the <b>.hpp</b> and <b>.cpp</b> files\r\n      that comprise this programming project, along with its\r\n      <b>CMakeLists.txt</b> make file, and an input <b>.txt</b> file.\r\n    The <b>program0</b> folder contains 6 files:\r\n  <ul>\r\n  <li>The <b>linear_array_queue.hpp</b> file implements a queue data type\r\n       using an array (but with one bug).\r\n  <li>The <b>driver.cpp</b> and <b>driver_queue.hpp</b> files test drives\r\n        the <b>LinearArrayQueue</b>.\r\n  <li>The <b>test_queue.cpp</b> file contains a GoogleTest for any\r\n        implementation of a queue.\r\n  <li>The <b>CMakeLists.txt</b> file contains a <b>cmake</b> file from which\r\n        CLion automatically builds a <b>make</b> file when we load this project.\r\n      It contains the <b>cygwin</b> references needed for students using a PC;\r\n        if you are on a Mac, you will have to remove/comment-out these lines.\r\n  <li>The <b>loadq.txt</b> input file contains a few values that are loadable\r\n        by the <b>lf</b> command in the driver.\r\n  </ul>\r\n<p>\r\nThe <b>linear_array_queue</b> file in this project defines an almost correct\r\n  <b>LinearArrayQueue</b> class that implements the behavior of a queue data\r\n  type: it is a simpler to understand but less efficient version of the\r\n  <b>ArrayQueue</b> class supplied in the <b>courselib</b>.\r\nA queue is a simple FIFO data type, adhering to the\r\n  <b>F</b>irst-<b>In</b> <b>F</b>irst-<b>O</b>ut ordering property.\r\nQueues enqueue values to their rear and dequeue values from their front, so\r\n  these are the two \"hot spots\" that must be efficiently accessed in any data\r\n  structure that implements a queue.\r\nYou will be implementing lots of (abstract) data types like this one, during\r\n  the quarter.\r\n<p>\r\nWe can implement the queue data type efficiently by using either an array or\r\n  a linked list data structure.\r\nThe queue type implementation in this programming assignment,\r\n  <b>LinearArrayQueue</b>, declares the required instance variables and needed\r\n  methods using an array data structure: the front of the queue is always\r\n  stored at index 0; the rear is stored at a higher index in the array.\r\nUsing a linear array is conceptually simple to understand and program,\r\n  but it has a slower-than-necessary <b>dequeue</b> operation (when compared\r\n  with using a circular array data structure used in the <b>ArrayQueue</b>\r\n  class, which we will discuss in the course): it always requires looping\r\n  through an array, copying each element to its previous index.\r\nWhen all the necessary libraries are installed, this class compiles and can\r\n  be tested in the driver and via GoogleTest; but the code is not correct, so\r\n  it results in a few execution/run-time errors.\r\n<p>\r\n  In the <b>driver_queue.hpp</b> and <b>test_queue.cpp</b> files, see the lines\r\n    <b><pre>  //Uncomment one of the two following lines (matching below)\r\n  //#include \"array_queue.hpp\"\r\n  //#include \"linear_array_queue.hpp\"</b></pre>\r\nand \r\n    <b><pre>  //Uncomment one of the two following lines (matching above)\r\n  //typedef ics::ArrayQueue<std::string> QueueType;\r\n  //typedef ics::LinearArrayQueue<std::string> QueueType;</b></pre>\r\n\r\n  Choose to uncomment the lines referring to the <b>linear array queue</b>\r\n    implementation when you drive and test the code for this assignment.\r\n  The standard <b>ArrayQueue</b> in the <b>courselib</b> uses a more complicated\r\n    but efficient circular array implementation.\r\n  But both have exactly the same interface, so either can be driven/tested\r\n    with the supplied code.\r\n<p>\r\n<li>Move the entire <b>program0</b> folder (unzipped above) into the\r\n      <b>CLionProjects</b> folder (created when you installed and tested CLion).\r\n<!---\r\n<p>\r\n<b>IMPORTANT:</b> Mac users must always <b>remove the following two lines</b>\r\n    from the CMakeLists.txt file they download:\r\n<b><pre>set(CMAKE_CXX_COMPILER \"/cygdrive/c/cygwin64/bin/clang++\")\r\nset(CMAKE_C_COMPILER \"/cygdrive/c/cygwin64/bin/clang\")</pre></b>\r\nThese lines are necessary for PC (not Mac) implementations; always perform this\r\n  step after you download a project if you are on a Mac.\r\n--->\r\n</ol>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Start CLion, Create a Project, Install Libraries -->\r\n\r\n<a name=\"eclipse\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Start CLion and<br>\r\n                    Open a Project</b></td>\r\n<td width =\"80%\">\r\n<ol start=\"3\">\r\n<li>Double-click the shortcut to the CLion icon that you created when you\r\n      downloaded and installed CLion.\r\n    Watch as the CLion splash screen displays as the CLion IDE is loaded.\r\n    The standard CLion project window will appear on your screen.\r\n<p>\r\n<li>Click the <b>File</b> tab near the upper-left corner of the CLion window;\r\n      then click the <b>Open</b> option in the pull-down menu, as shown below.\r\n    <p>\r\n    <img src=\"images/open.jpg\">\r\n    <p>\r\n    The following  pop-up window should appear on your screen.\r\n    <p>\r\n    <img src=\"images/open program0.jpg\">\r\n    <p>\r\n    Find and click the <b>program0</b> project folder (so it is highlighted).\r\n    You may need to scroll this window and disclose/undisclose various folders\r\n      to make it appear as shown above.\r\n    The <b>Users</b> folder should contain a folder with your name\r\n      (<b>Pattis</b> for me); it should contain a folder with the\r\n      <b>CLionProjects</b> folder; it should contain the <b>program0</b>\r\n      project folder you just moved there, and any three project folders\r\n      that you created previously (likely <b>courselib</b>,\r\n      <b>gtestlib</b>, <b>test_all_data_types</b>, and <b>trivialtest</b>).\r\n    <p>\r\n\r\n<li>Click <b>OK</b>.\r\n    <p>\r\n    The following pop-up window will appear on your screen.\r\n    <p>\r\n    <img src=\"images/thiswindow.jpg\">\r\n    <p>\r\n\r\n<li>Click <b>This Window</b>.\r\n    <p>\r\n    CLion will load the project, which includes building the make file for\r\n      this project from the <b>CMakeLists.txt</b> file in the folder.\r\n    <blockquote>\r\n    If you see a <b>Windows Defender</b> message click <b>Fix</b>, then\r\n      click the <b>Configure Automatically</b> button, and finally when\r\n      prompted with\r\n      <b>Do you want to allow this App to make changes to your device</b>\r\n      click <b>Yes</b> \r\n    </blockquote>\r\n    When it finishes, the following <b>CLion</b>\r\n      project window should appear on your screen.\r\n    (although, you might need to disclose the <b>program0</b> project and\r\n       click some of its resources to see their tabs)\r\n    <p>\r\n    <img src=\"images/program0.jpg\">\r\n    <p>\r\n    If you don't see line number in the gray margin (between the project \r\n      resources and the editor tabs) and want them (recommended),\r\n      right-click the gray area and click <b>Show Line Numbers</b>.\r\n    Repeat this process for <b>Show Indent Guides</b>.\r\n    <p>\r\n    <img src=\"images/setlinenumbers.jpg\">\r\n    <p>\r\n    To configure all sorts of options in CLion, click <b>File</b> and then\r\n      <b>Settings</b>; disclose <b>Editor</b>, then\r\n      disclose <b>General</b>; click <b>Appearance</b>.\r\n    You will see checkboxes to\r\n      <b>Show line numbers</b>,\r\n      <b>Show indent guies</b>, and \r\n      <b>Show parameter names hints</b> in all edited files.\r\n    <p>\r\n    <img src=\"images/defaultlinenumbers.jpg\">\r\n    <p>\r\n    You can leave these checkboxes untouched or experiment with them and\r\n      observe their effects.\r\n    When <b>Show parameter names hints</b> is checked,\r\n      in function calls all the arguments your type are preceded by \r\n    This is a very useful configuration option, especially when functions have\r\n      many good parameter names.\r\n\r\n</ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<!-- Run Driver -->\r\n\r\n<a name=\"driver\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Run the Driver</b></td>\r\n<td width =\"80%\">\r\nEach data type that we will discuss this quarter has a \"driver\" program that\r\n  allows us to \"drive it\": to call (test) each of its methods and observe the\r\n  results.\r\nIn <b>program0</b>, the driver program appears in the <b>driver_queue.hpp</b>\r\n  file; it is called from the <b>driver.cpp</b> file.\r\n<ol start=\"7\"> \r\n<li>Uncomment lines all lines in the <b>driver.cpp</b> file.\r\n    This operation, and its opposite (commenting all lines in a file) are\r\n      often uses and easily done in CLion with the <b>Ctrl-a</b> followed by\r\n      <b>Ctrl-/</b> commands (e.g., while pressing the <b>Ctrl</b> key, press\r\n      the <b>a</b> key): select all lines and toggle their commenting\r\n      (<b>//</b> in C++).\r\n    Practice commenting/uncommenting lines.\r\n    On Macs the commands are <b>command-a</b> followed by <b>command-/</b>\r\n    <p>\r\n    <img src=\"images/uncommentdriver.jpg\">\r\n    <p>\r\n<li>Uncomment lines 11 and 18 in the <b>driver_queue.hpp</b> file; those\r\n      lines specify driving the linear array queue implementation.\r\n    <p>\r\n    <img src=\"images/uncommentdriverqueue.jpg\">\r\n    <p>\r\n\r\n<li>Click the\r\n    <img src=\"images/runicon.jpg\">\r\n     (Run icon) on this window.\r\n    <p>\r\n    The following <b>CLion</b>\r\n      project window should appear on your screen.\r\n    <p>\r\n    <img src=\"images/run.jpg\">\r\n    <p>\r\n\r\n<p>\r\nThe <b>Run</b> pane will display the queue being manipulated (now empty)\r\n followed by a menu of options that you can use to call/test each queue\r\n method.\r\n<p>\r\nIf you click the <b>0: Messages</b> button at the bottom of CLion, the following\r\n  <b>Messages</b> pane will replace the <b>Run</b> pane.\r\nThis pane shows how the project was built (compiled and linked).\r\n    <p>\r\n    <img src=\"images/0messages.jpg\">\r\n    <p>\r\nAfter clicking the <b>Build</b> or <b>Run</b> icon, if a project failed to\r\n  compile and link correctly, the <b>Messages</b> pane will be the default one\r\n  shown; if compling and linking succeeds the <b>Run</b> pane will be the \r\n  default.\r\nBut, you can always (re)examine the <b>Messages</b> pane by clicking the\r\n  <b>0: Messages</b> button.\r\nI strongly recommend <b>always examining the Messages pane</b> because if a\r\n  program compiles with <b>warnings</b> but no <b>errors</b>, CLion will show\r\n  just the <b>Run</b> pane.\r\nBut, <b>we want to know whether a program compiled with warnings</b>;\r\n  so examine the <b>Messages</b> pane manually.\r\n<p>\r\nNote that this driver tests a queue that stores <b>std::string</b> values.\r\nWhen prompted, you must enter a <b>string</b> to test any Mutator (Command) or\r\n  Accessor (Query)  method.\r\nOf special note is the <b>it</b> command, which constructs and tests an explicit\r\n  iterator for this queue: it has its own submenu of options applicable\r\n  to iterators (which are the same for every data type).\r\n<p>\r\nAlso note that the driver prints the queue being manipulated before its menu\r\n  is displayed; it uses its <b>.str()</b> query, which constructs a string\r\n  starts with the data type (here <b>queue</b>) followed by the enqueued values\r\n  in brackets (separated by commas): at the start there are no values in the\r\n  queuer.\r\nAfterwards are all the data members in the implementing class and their values.\r\nIn a <b>LinearArrayQueue</b> these data members are...\r\n<ul>\r\n  <li>...<b>length</b>: the physical length of its array.\r\n  <li>...<b>used</b>: the number of array indexes containing values\r\n        (always <= <b>length</b>).\r\n  <li>...<b>mod_count</b>: counts the number of modifications made to the\r\n        queue since its construction.\r\n</ul>\r\n<p>\r\nThe <b>&lt;</b> command shows the data type view: just <b>queue[]:rear</b>\r\n  for an empty queue, which shows the data type view of the queue; whereas\r\n  the <b>.str()</b> call (shown above the menu) produces more detailed\r\n  information about the implementation, which is often useful for debugging the\r\n  implementation.\r\n<p>\r\n\r\n<li>\r\nIssue the <b>m</b>, <b>s</b>, and <b>p</b> commands to query the state of\r\n  the empty queue.\r\nThe <b>Run</b> pane should show the following.\r\n<p>\r\n<img src=\"images/runmsp.jpg\"></img>\r\n<p>\r\nThe <b>peek</b> method returns a reference to the queue's first value (which\r\n  the driver prints); but it cannot work correctly on an empty queue: there is\r\n  no first value.\r\nNotice what is printed instead: the thrown exception\r\n  (<b>EmptyError</b>) and the <b>Class::method</b> that raised the error.\r\nAfter printing an message, the driver just ignores this command and you can\r\n  continue driving the other methods in the <b>LinearArrayQueue</b> class.\r\n<p>\r\n\r\n<li>\r\nNext issue the <b>e</b> command and enqueue the string <b>test1</b> when\r\n  prompted.\r\nThis method returns the number of values enqueued to the queue\r\n  (for queues, which can contain duplicate values, it always returns\r\n  <b>1</b>; for sets, which cannot contain duplicate values, this method\r\n  may return <b>0</b> if the value is already in the set).\r\nThe queue now prints (using <b>.str()</b>, before the next menu) as\r\n<b><pre>queue q = LinearArrayQueue[0:test1](length=1,used=1,mod_count=1)</pre></b>\r\nwhich shows...\r\n<ul>\r\n  <li>...the queue now contains at index 0 of its storage array the value\r\n      <b>test1</b>.\r\n  <li>...the length of the array holding the queue values has increased to\r\n        <b>1</b>.\r\n  <li>...the queue is using <b>1</b> value in the array.\r\n  <li>...the queue has been mutated <b>1</b> time since being constructed:\r\n        the previous accessors/queries are not counted because they do not\r\n        change the queue.\r\n</ul>\r\n<p>\r\n\r\n<li>\r\nNext issue the <b>e</b> command and enqueue <b>test2</b> when prompted.\r\nThe queue now prints (before the next menu) as\r\n<b><pre>queue q = LinearArrayQueue[0:test1,1:test2](length=2,used=2,mod_count=2)</pre></b>\r\nOrder is important in queues: the earlier a value is enqueued, the earlier it\r\n  appears in the array.\r\nNotice that both <b>length</b> and <b>used</b> increase to <b>2</b>.\r\n<p>\r\nNext issue the <b>e</b> command again and enqueue <b>test3</b> when prompted.\r\nThe queue now prints (before the next menu) as\r\n<b><pre>queue q = LinearArrayQueue[0:test1,1:test2,2:test3,3:](length=4,used=3,mod_count=3)</pre></b>\r\nNotice that <b>length</b> increases to <b>4</b> while <b>used</b> and\r\n  <b>mod_count</b> both increase to <b>3</b>: generally if there is not enough\r\n  room in an array, its length is <b>doubled</b>, not just\r\n  <b>incremented-by-1</b>: we will discuss why doubling not incrementing-by-1\r\n  later in the quarter, when we analyze the running time of performing <b>N</b>\r\n  enqueues.\r\nFinally, notice that at the end of the array is <b>3:</b>, because all the array\r\n  </b>index:value</b> pairs are shown; here the value is an empty string\r\n  (produced by the default constructor for strings).\r\nThe <b>Run</b> pane should show the following.\r\n<p>\r\n<p>\r\n<img src=\"images/runeee.jpg\"></img>\r\n<p>\r\n\r\n<li>\r\nNext issue the <b>d</b> command which should dequeue the value at the front of\r\n  the queue.\r\nIt correctly prints <b>dequeue = test1</b>, but when it prints the queue\r\n  before the next menu, it appears as\r\n<b><pre>queue q = LinearArrayQueue[0:test2,1:test3,2:test3,3:](length=4,used=3,mod_count=4)</pre></b>\r\nThis result is <b>incorrect</b> because (a) <b>used</b> is still <b>3</b>.\r\nIt is OK that <b>test3</b> now appears in two different queue/array locations\r\n  (it was copied one to the left, but still appears at the end).\r\nIf <b>used</b> were <b>2</b>, index <b>2</b> would not be considered to be in\r\n  the queue (the two used indexes are <b>0</b> and <b>1</b>).\r\nIn fact, if you issue the <b>&lt;&lt;</b> command it will show as\r\n<b>queue[test2,test3,test3]:rear</b>, indicating (incorrectly) that <b>test3</b>\r\n  appears in the queue twice.\r\n<p>\r\nIf you issue the <b>d</b> command again, it correctly prints\r\n  <b>dequeue = test2</b> but <b>used</b> remains <b>3</b> and now <b>test3</b>\r\n  appears in all three positions in the array.\r\nIn fact, if you issue the <b>&lt;&lt;</b> command it will show as\r\n<b>queue[test3,test3,test3]:rear</b>, indicating (incorrectly) that <b>test3</b>\r\n  appears in the queue three times.\r\n<p>\r\nIf you issue the <b>d</b> command again, it correctly prints\r\n  <b>dequeue = test3</b> but <b>used</b> remains <b>3</b>.\r\n<p>\r\nNotice that <b>mod_count</b> (correctly) increases from <b>3</b>, to <b>4</b>,\r\n  to <b>5</b>, and finally to <b>6</b>, because each three <b>dequeue</b>\r\n  modifies the queue.\r\n<p>\r\nNext issue the <b>s</b> command, and the driver prints <b>3</b>: although we\r\n  have dequeued all three values, because of the error the queue thinks its\r\n  size is still <b>3</b>.\r\n<p>\r\nNext issue the <b>x</b> command (whose <b>clear</b> method is <b>void</b> and\r\n  returns -and the driver prints- no result).\r\nIt will correctly clear the queue, which prints before the final menu as\r\n<b><pre>queue q = LinearArrayQueue[0:test3,1:test3,2:test3,3:](length=4,used=0,mod_count=7)</pre></b>\r\nNotice that <b>mod_count</b> (correctly) increases to <b>7</b>, because\r\n  <b>clear</b> modifies the queue.\r\nAlso notice that <b>used</b> is now <b>0</b>.\r\nIn fact, if you issue the <b>&lt;&lt;</b> command it will show as\r\n<b>queue[]:rear</b>, indicating (correctly) that there are no values in the\r\n  queue.\r\n<p>\r\nThe <b>Run</b> pane should show the following.\r\n<p>\r\n<img src=\"images/rundddsx.jpg\"></img>\r\n<p>\r\nSo, using this driver, you can call/test all the methods in the\r\n  <b>LinearArrayQueue</b> class, looking for incorrect behavior.\r\n<p>\r\nIf you see any errors in the output, to help you debug them you can...\r\n<ul>\r\n  <li>...add code in the driver (to print intermediate results) and rerun it.\r\n  <li>...add code in the <b>LinearArrayQueue</b> (to print intermediate results)\r\n          and rerun the driver.\r\n  <li>...use the debugger to set breakpoints in your methods and execute/step\r\n       through the code while observing how it changes its state \r\n</ul>\r\n<p>\r\nA later section of this document illustrates using the driver with the debugger.\r\nFor now, continue to explore and experiment with the other commands in this\r\n driver, and <b>DO NOT</b> fix the error in <b>dequeue</b> yet.\r\nThe <b>lf</b> command allows quickly enqueuing a series of values read from\r\n  a file (the default it <b>loadq.txt</b>, which is included with this project;\r\n  but recall you have to move this file from the <b>input files</b> folder into\r\n  the <b<cmake-build-debug</b> folder).\r\nTry the <b>it</b> commands to better understand what you can do with iterators\r\n  (especially how to erase selected values inside the queue).\r\n<p>\r\nIf you ever find your program in an <b>infinite loop</b>, you can terminate the\r\n  program manually by clicking the \r\n  <img src=\"images/stopicon.jpg\">\r\n  (Stop icon) on the left of the <b>Run</b> pane.\r\n<p>\r\nClick this button now to terminate the driver (which you can also terminate\r\n  by entering the <b>q</b> command when prompted).\r\nThen, click the\r\n  <img src=\"../../../common/handouts/cygwinclion/images/clion/closeicon.jpg\">\r\n  (Close icon) on the left of the <b>Run</b> pane to close/remove the <b>Run</b>\r\n   pane.\r\n<p>\r\nTo rerun the driver after editing any of these files, click the\r\n  <img src=\"images/runicon.jpg\">\r\n  (Run icon).\r\nWhen CLion re-<b>builds</b> a project it re-<b>compiles</b> all changed files\r\n  and re-<b>links</b> them into an executable (<b>.exe</b>) file.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Run GoogleTest Test -->\r\n\r\n<a name=\"junit\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Run the GoogleTest<br> Unit Test<br>and Debugging</b></td>\r\n<td width =\"80%\">\r\nEach data type that we will discuss this quarter also has a GoogleTest for\r\n  testing its implementation(s).\r\nWhile a driver for a class is code that allows us to manually test its methods\r\n  and observe their results, a GoogleTest is code that automatically tests the\r\n  class and reports its results.\r\nIt produces output to show clearly which tests passed and which tests failed;\r\n  and for the failed tests, it produces more detailed information about how the\r\n  test failed.\r\nWhen the code is modified (and hopefully corrected), it is very easy to rerun\r\n  all the tests automatically and observe the changes (hopefully more/all tests\r\n  are now passing).\r\n<p>\r\nOf course, some bugs are so severe that the test program crashes.\r\nIn such cases, we will know which test caused the crash (the last one shown to\r\n  run in the <b>Run</b> pane; we can set a breakpoint in the debugger to stop\r\n  at the first statement in that function, and then single-step to find which\r\n  line in the test caused the crash when executed.\r\n<p>\r\nTo run the GoogleTest program...\r\n<ol start=\"13\">\r\n<li>Re-comment all lines in the <b>driver.cpp</b> file (because you do not\r\n      want to run the driver)</b>.\r\n    <p>\r\n    Recall that only one uncommented <b>main</b> function can exist in a C++\r\n      project, because there can be only one starting point for the program\r\n      being run; so you will comment this code and uncomment the code in the\r\n      <b>test_queue.cpp</b> file.\r\n<p>\r\n\r\n<li>Uncomment all the code in the <b>test_queue.cpp</b> file.\r\n  <ol>\r\n  <li>Double-click the <b>test_queue.cpp</b> file that appears in the \r\n        Project pane.\r\n  <li>Click inside the <b>test_queue.cpp</b> Editor pane to activate editing.\r\n  <li>Type the <b>ctrl-a</b> command (<b>command-a</b> on Macs)\r\n        to select <b>all</b> the lines in this file.\r\n  <li>Type the <b>ctrl-/</b> command (<b>command-/</b> on Macs)\r\n        to toggle the commenting on the selected lines (uncomment them).\r\n  <li>Uncomment lines 7 and 14 in the <b>test_queue.cpp</b> file; those\r\n      lines specify testing the linear array queue implementation.\r\n    <p>\r\n    <img src=\"images/uncommenttestqueue.jpg\">\r\n    <p>\r\n  </ol>\r\nBefore running this project, examine the code in the <b>test_queue.cpp</b> file.\r\nIt consists of 12 separate tests, each which should be readable and\r\n  understandable if you understand what queues are about.\r\nThe actual GoogleTest for implementations of the Queue data type is longer; but\r\n  you are using a smaller and simpler file for Programming Assignment #0.\r\n<p>\r\n\r\n<li>Click the\r\n    <img src=\"images/runicon.jpg\">\r\n     (Run icon) on this window to run the Googletest.\r\n    <p>\r\n    The <b>Run</b> pane should show the following.\r\n    <p>\r\n    <img src=\"images/googletest.jpg\">\r\n    <p>\r\nCheck the bottom of GoogleTest's output first.\r\nIt summarizes the number of passed tests and names the failed tests: you can\r\n  examine these failed tests in more detail, if they are present.\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<p>\r\n<h3>Failure Modes</h3>\r\n<p>\r\nThere are two major failure modes detectable in each GoogleTest.\r\n<ul>\r\n  <li>An assertion failure in a test means that the code being tested did not\r\n        meet its requirements.\r\n      GoogleTest will print useful information about the failure (just what it\r\n        prints is based on what kind of assertion failed).\r\n      In the figure above, both the <b>dequeue1</b> and <b>dequeue2</b> tests\r\n        failed (on lines 225 and 236 respectively); the assertions concerned\r\n        truth values for calling the <b>q.empty()</b> and <b>q.size()</b>\r\n        methods, whose different <b>Actual</b> and <b>Expected</b> values are\r\n        shown.\r\n  <p>\r\n  <li>An exception failure in a test means that the code being tested threw an\r\n        exception (not caught by code written in the test function).\r\n      GoogleTest will print information about the exception (although often\r\n        it just states an unexpected exception was thrown..\r\n      In the figure above, no unexpected exceptions were thrown.\r\n      If one was, it might look as follows:\r\n      <p>\r\n      <img src=\"images/exception.jpg\"></img>\r\n      <p>\r\n      \r\n  <p>\r\n</ul>\r\n<p>\r\nIn both cases, the GoogleTest records the failure and then continues with\r\n  subsequent tests.\r\nIn fact, after the first test in a function fails, no more code in that\r\n  function will be run; in such a case, GoogleTest just continues testing\r\n  at the next function.\r\n<p>\r\nIn addition, there are two failure modes <b>NOT</b> nicely\r\n  detectable/reportable in a GoogleTest.\r\n<ul>\r\n  <li>An <b>infinite loop</b>: In such a case GoogleTest will stop printing\r\n         information in the <b>Run</b> pane after starting to run a test.\r\n     If the <b>enqueue</b> test caused an infinite loop, the <b>Run</b> pane\r\n        might look as follows.\r\n     In such a case, you would have to manually stop the program.\r\n<p>\r\n<img src=\"images/infinite.jpg\"></img>\r\n<p>\r\nIf you ever find your program in an <b>infinite loop</b>, you can terminate the\r\n  program manually by clicking the \r\n  <img src=\"images/stopicon.jpg\">\r\n  (Stop icon) on the left of the <b>Run</b> pane.\r\n<!---\r\nAfter terminating the program, click the\r\n  <img src=\"../../../common/handouts/cygwinclion/images/clion/closeicon.jpg\">\r\n  (Close icon) on the left of the <b>Run</b> pane to close/remove the <b>Run</b>\r\n   pane.\r\n--->\r\n<p>\r\nBy these actions, the GoogleTest will stop and not be performed on subsequent\r\n  tests.\r\n<p>\r\n\r\n<li>Certain kinds of executions errors (e.g., accessing illegal memory).\r\nIn these cases, the program will stop executing the GoogleTest unexpectedly.\r\n<p>\r\n<img src=\"images/runtimeerror.jpg\"></img>\r\n<p>\r\nNote here that in the middle of RUNing the <b>QueueTest.enqueue</b>, the\r\n  program terminates.\r\n</ul>\r\n<p>\r\n\r\n<p>\r\nWhen either of these kinds of errors occur, you have a choice of either\r\n<ul>\r\n  <li>commenting-out this test code running when the error occurred\r\n      (so GoogleTest won't run this test, but will run subsequent tests).\r\n  <li>keeping this test and immediately debugging the code that is causing it\r\n        to fail.\r\n</ul>\r\n<p>\r\nIf you choose the first approach, remember to uncomment the test code\r\n  eventually to ensure that your code is passing all the GoogleTests eventually,\r\n  including this one.\r\n<p>\r\n\r\n<h3>Debugging Strategies</h3>\r\n<p>\r\nHere is a short but <b>important</b> list of four strategies that you can employ\r\n  when your code fails, to try to understand the cause of the problem (and then\r\n  hopefully correct it).\r\nFirst, examine the line of code in the test at which the failure was detected\r\n  (which is printed in the <b>Run</b> pane) and the information it displays\r\n  related to the failure.\r\n<ol>\r\n  <li>Searching the code for a mistake using the failure information as a guide.\r\n  <p>\r\n  <li>Add arbitrary C++ code in the GoogleTest to print useful information\r\n        right before the failure line.\r\n  <p>\r\n  <li>Use the debugger to set a breakpoint on the line with the failed\r\n        assertion (the debugger stops <b>before</b> executing the breakpointed\r\n        line) and then examine any relevant state.\r\n      You can set breakpoints in the <b>test_queue</b>, <b>driver_queue</b>, an\r\n        <b>linear_array_queue</b> (or in any combination of these): whichever\r\n        will help you debug the error.\r\n  <p>\r\n  <li>Use the driver (or any tiny program you write) to duplicate/explore the\r\n         problem manually.\r\n</ol>\r\n<p>\r\n<h3>GoogleTests</h3>\r\n<p>\r\nGenerally, each public method has its own GoogleTest, reflecting the\r\n  semantics (meaning) of what that method does in the class (but sometimes\r\n  needing to call other methods too).\r\nIt is good to be able to read and understand the GoogleTest code (and you will\r\n  get more experience doing so during the quarter) because it can be useful to\r\n  add debugging code to it: typically printing the state of variables just\r\n  before a test/assertion failed.\r\nMostly GoogleTest code intersperses calls to the methods of the class being\r\n  tested with assertions about what the results of those method-calls should\r\n  be: a test function fails when any assertions in it fail.\r\n<p>\r\nThe tests are preformed in the order in which they appear.\r\nI try to arrange my tests to go from the simple to the more complex.\r\nSometimes bugs that cause failures in the earlier tests also cause failures in\r\n  later test.\r\nSo an important debugging strategy is to concentrate on -and correct- the\r\n  earlier bugs: at best the later bugs might automatically disappear; at worst\r\n  it will be easier to understand/correct the later/more complicated bugs after\r\n  you have understood/corrected the earlier/simpler ones.\r\n<p>\r\nAlso note that each test is abandoned when the first assertion fails; it \r\n  doesn't test subsequent assertions <b>in that test function</b>\r\n  (but GoogleTest will still attempt to do all <b>subsequent</b> test functions\r\n  after any detectable failure).\r\nThis strategy leads to two interesting consequences\r\n<ul>\r\n  <li>The output is not cluttered with multiple failure messages for\r\n        multiple assertions in each test: instead each test either passes or\r\n        fails; and if it fails, it presents details about only the first\r\n        failure.\r\n  <p>\r\n  <li>Expect that a test might still fail after you make corrections to your\r\n        code.\r\n      But, the correction should cause a failure later in that test:\r\n        e.g., an earlier assertion in the test that failed should now pass,\r\n        even if a later assertion (which was not reached because of the earlier\r\n        failure) now is tested and fails.\r\n</ul>\r\n<p>\r\nPlan on eliminating bugs/failures one at a time, until none are present.\r\nDon't worry about rushing through the process; try to make small but incremental\r\n  progress while you debug.\r\n\r\n<p>\r\n<h3>Debugging Strategy Examples</h3>\r\n<p>\r\nHere we will examine the four strategies for debugging stated above.\r\nThe first failure was on line 225 in the <b>dequeue1</b> test.\r\nThe entire test appears as follows, with its line numbers.\r\n<p>\r\n<img src=\"images/dequeue1.jpg\"></img>\r\n<p>\r\n<!---\r\n<b><pre>  217 TEST_F(QueueTest, dequeue1) {\r\n  218   QueueType q;\r\n  219   load(q,\"abcde\");\r\n  220   ASSERT_EQ(\"a\",q.dequeue());\r\n  221   ASSERT_EQ(\"b\",q.dequeue());\r\n  222   ASSERT_EQ(\"c\",q.dequeue());\r\n  223   ASSERT_EQ(\"d\",q.dequeue());\r\n  224   ASSERT_EQ(\"e\",q.dequeue());\r\n  225   ASSERT_TRUE(q.empty());\r\n  226   ASSERT_EQ(0, q.size());\r\n  227   ASSERT_THROW(q.peek(),ics::EmptyError);\r\n  228 }</pre></b>\r\n--->\r\n<p>\r\nNote that the arguments in these function calls are prefaced with the names of\r\n  their matching parameters in gray -a CLion feature we discussed earlier in \r\n  this handout.\r\n<p>\r\nThe code on line 225 states that the queue was expected to be empty but it was\r\n  not.\r\n<p>\r\n<ol>\r\n<li>Our first strategy would be just to look at the code in the\r\n      <b>LinearArrayQueue</b/b> class.\r\n    We will see that the <b>empty</b> method returns <b>false</b> when\r\n      <b>used</b> is not <b>0</b>.\r\n    We will also see that <b>used</b> is initialized to <b>0</b>, and if we\r\n      enqueue five values (what <b>load(q,\"abcde\");</b> does)\r\n      and then dequeue five values it should return to  <b>0</b>.\r\n    Since the <b>enqueue</b> test worked, we can focus on the <b>dequeue</b>\r\n       method to learn why <b>used</b> was not decremented to <b>0</b>.\r\n<p>\r\n\r\n<li>Our second strategy would be to add some code in the <b>dequeue1</b> test to\r\n      help us understand why the <b>empty</b> method returns <b>false</b>.\r\n    We could, for example, print the size and even the queue itself (using the\r\n      more verbose <b>.str()</b> function), using the  following code.\r\n    <b><pre>std::cout << \"in deqeue1: size = \" << q.size() << \", queue = \" << q.str() << std::endl;</pre></b>\r\n    I highly recommend putting textual material in these debugging displays, to\r\n      identify them: as we put more and more debugging displays into a program\r\n      (which we typically do when debugging) they can become confusing.\r\n    If we put this code right before the line 225 it would display\r\n    <b><pre>in deqeue1: size = 5, queue = queue[e,e,e,e,e]:rear(length=8,used=5,mod_count=10)</pre></b>\r\n    The queue is supposed to be empty, but its <b>used</b> is <b>5</b>.\r\n    It might be useful to put this statement after the call to\r\n    <b>load</b> and after each call to <b>dequeue()</b> to observe how\r\n    <b>used</b> changes (in fact, it doesn't).\r\n    Doing so would produce the following output.\r\n<b><pre>\r\nin deqeue1: size = 5, queue = queue[a,b,c,d,e]:rear(length=8,used=5,mod_count=5)\r\nin deqeue1: size = 5, queue = queue[b,c,d,e,e]:rear(length=8,used=5,mod_count=6)\r\nin deqeue1: size = 5, queue = queue[c,d,e,e,e]:rear(length=8,used=5,mod_count=7)\r\nin deqeue1: size = 5, queue = queue[d,e,e,e,e]:rear(length=8,used=5,mod_count=8)\r\nin deqeue1: size = 5, queue = queue[e,e,e,e,e]:rear(length=8,used=5,mod_count=9)\r\nin deqeue1: size = 5, queue = queue[e,e,e,e,e]:rear(length=8,used=5,mod_count=10)</pre></b>\r\n\r\n<li>Our third strategy is to use the debugger to set a breakpoint before the\r\n      failed assertion, and then examine relevant state.\r\n    The debugger in CLion/C++ (GDB) operates similarly to the Eclipse/Python.\r\n    We can set unconditional and conditional breakpoints, single step (into,\r\n      over, and out of) code, observe the values of global and local variables.\r\n    Experiment with the debugger until you know how to use it to perform common\r\n      debugging tasks (like those indicated below).\r\n    <p>\r\n    Try these steps.\r\n    <ul>\r\n       <li>Double-click the <b>linear_array_queue.hpp</b> file in the Project\r\n             pane to edit it.\r\n       <p>\r\n       <li>Set an unconditional breakpoint on line 222 (the\r\n             <b>++mod_count;</b> statement in the <b>dequeue</B> method);\r\n             recall that when a line has a breakpoint, execution stops\r\n             <b>before</b> the line is executed.\r\n       <p>\r\n       <img src=\"images/breakpoint.jpg\"></img>\r\n       <p>\r\n\r\n       <li>Launch the debugger by clicking the bug icon \r\n             <img src=\"images/debugicon.jpg\"></img>.\r\n           <p>\r\n           This rebuilds and starts running the <b>test_queue</b> program,\r\n             which stops the first time it reaches line 222.\r\n           When debugging, the <b>Run</b> pane appears in a pop-window.\r\n           <p>\r\n           <img src=\"images/debugrunpane.jpg\"></img>\r\n           <p>\r\n           And the CLion window shows debugging information (mostly in the\r\n             Debug pane).\r\n           <p>\r\n           <img src=\"images/debug.jpg\"></img>\r\n           <p>\r\n           Here I have disclosed the object pointed to by <b>this</b> in the\r\n             <b>Variables</b> part of the <b>Debug</b> pane).\r\n           <ul>\r\n           <li>The code on Line 222 in the\r\n                 <b>linear_array_queue.hpp</b> pane is highlighted in blue,\r\n                 indicating this line is about to be executed.\r\n           <li>Underneath <b>Thread-1</b> shows execution starts in the\r\n                 <b>main</b> function in the <b>test_queue.cpp</b> file\r\n                 (at line 305) and goes upward through a variety of function\r\n                 calls until it reaches the <b>QueueTest_dequeue1_Test</b> in\r\n                 <b>test_queue.cpp</b> file\r\n                 call followed by the  <b>dequeue</b> function in the\r\n                 <b>linear_array_queue.hpp</b> file (at line 223).\r\n                 This is the function call stack, with the top of the stack\r\n                   highlighting in blue the function currently executing.\r\n                 <p>\r\n                 By scrolling right in the <b>Thread-1</b> pane I can see the\r\n                   line numbers executing in <b>test_queue.cpp</b> file\r\n                   and <b>linear_array_queue.hpp</b>; when CLion fills our\r\n                   entire screen, we can change the pane sizes to minimize\r\n                   scrolling.\r\n           <li>The <b>Variables</b> pane shows the object <b>this</b> refers to\r\n                 and object whose <b>length</b> member is equal to <b>8</b>,\r\n                 whose <b>used</b> member is equal to <b>5</b>, and whose\r\n                 <b>mod_count</b> member is equal to <b>6</b>.\r\n           </ul>\r\n      <p>\r\n          If I clicked on <b>QueueTest_dequeue1_Test</b> in the\r\n          <b>Threads-1</b>, the editor pane switches to\r\n          <b>test_queue.cpp</b> and the <b>Variables</b> pane switches\r\n          to showing its local variables, which I have disclosed in\r\n          the picture below.\r\n          <p>\r\n          <img src=\"images/debug2.jpg\"></img>\r\n          <p>\r\n          In this way, we can see the code/variables for any function in the\r\n             call stack by just clicking it.\r\n\r\n       <li>Execute the current line (222) by clicking the\r\n             <img src=\"images/stepovericon.jpg\"></img>,(Step over icon).\r\n           The result is\r\n           <p>\r\n           <img src=\"images/debug3.jpg\"></img>.\r\n           <p>\r\n           <ul>\r\n           <li>The code on Line 223 in the\r\n                 <b>linear_array_queue.hpp</b> pane is highlighted in blue,\r\n                 indicating this line is about to be executed.\r\n           <li>Underneath <b>Thread-1</b> shows the top of the stack as\r\n                 executing the <b>dequeue</b> function in the\r\n                 <b>linear_array_queue.hpp</b> file (at line 223).\r\n           <li>The <b>Variables</b> pane shows the <b>mod_count</b> member\r\n                 as changed (it appears in blue, highlighting which variables\r\n                 changed) to the value <b>6</b>.\r\n           </ul>\r\n    </ul>\r\n    <p>\r\n    I'm hoping that you have had some experience with debuggers in your\r\n      prior programming classes and that you will take some time to explores\r\n      this one's features.\r\n<p>\r\n\r\n<li>Our fourth strategy would be to use the driver to duplicate/explore the\r\n      problem manually.\r\n    Actually, in our discussion of the driver we saw that when we enqueued\r\n      three values and dequeued all three, the result was a queue whose\r\n      <b>used</b> was still <b>3</b>, with the last enqueued values stored in\r\n      all indexes.\r\n    Recall that to re-run the driver, we would have to uncomment its code,\r\n      after commenting-out all the code in the GoogleTest, and then re-run\r\n      the project code.\r\n</ol>\r\n<p>\r\n\r\nIn fact, both test failures relate to a single bug: the <b>used</b> variable\r\n  was not decremented in the <b>dequeue</b> method: I commented-out the code\r\n  at line 221 of the <b>linear_array_queue.hpp</b> file.\r\nRemember that sometimes fixing one bug will cause many failed tests to pass.\r\n<p>\r\nRestore this line of code (uncomment it) to fix the error.\r\nNow rerun this GoogleTest and verify that there are no more failures.\r\nThe bottom of the <b>Run</b> pane should show\r\n<p>\r\n<img src=\"images/passingall.jpg\"></img>.\r\n<p>\r\nOriginally, both errors and failures indicated that the code is incorrect and\r\n  should be fixed.\r\nOf course, we must be careful because it is possible that an assertion is\r\n  incorrect: e.g., an assertion asserts the size of the queue is some number\r\n  but based on the <b>enqueue</b>/<b>dequeue</b> methods called in the\r\n  GoogleTest it should be some other number.\r\nWhile you should mostly believe the GoogleTests I distribute, there is always\r\n  the possibility that I have made a mistake.\r\nIf you look closely at a GoogleTest and don't understand why some failing\r\n  assertion should be true, please contact me or one of the staff to help\r\n  resolve the problem (or post on Piazza).\r\n</td>\r\n</tbody>\r\n</table>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<!-- 3 Quick Things -->\r\n\r\n<a name=\"3quickthings\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>3 Quick Things</b></td>\r\n<td width =\"80%\">\r\n<ol>\r\n<li><b>Splitting the Editor</b>: Sometimes it is useful to have two panes\r\n  editing the same file, so we can look at two different locations.\r\nWe can do this by right-clicking the file's tab and then selecting\r\n  <b>Split Horizontally</b> illustrated below\r\n<p>\r\n<img src=\"images/splithorizontally.jpg\"></img>.\r\n<p>\r\nWe can click to Terminate the lower window or right-click it and select\r\n  <b>unsplit</b>\r\n<p>\r\n<li><b>Outline of functons/methods</b>: Sometimes it is useful to have an\r\n  outline of the functions/methods in a file, so we can quickly go between\r\n  editing different ones.\r\nWe can do this by clicking <b>View | Tool Windows | Structure</b> and the\r\n  positioning this pane where it is useful.\r\nI show one configuration that I use below.\r\n<p>\r\n<img src=\"images/structure.jpg\"></img>.\r\n<p>\r\nIf we click on a name in the <b>Structure</b> pane (I clicked the <b>peek</b>\r\n  method above, the editor window for that file scrolls to show that\r\n  function/method.\r\nWe can right-click on the <b>Structure</b> button to hide this pane (leaving\r\n  the <b>Structure</b> button avaliable for clicking to resotre it) or remove\r\n  it completely (needing <b>View | Tool Windows | Structure</b> to bring it\r\n  back)\r\n<p>\r\n<li><b>Cleaning and Rebuilding</b>:\r\nSometimes if you click the <b>Run</b> icon, CLion will compile your program,\r\n  and if it has only <b>Warnings</b> (not <b>Errors</b>) it will show the\r\n  <b>Run</b> Pane, thus hiding the warnings in the <b>Messages</b> Pane.\r\nSo, it is a good idea to always check the <b>Message</b> pane by clicking the\r\n  <b>0: Messages</b> button.\r\n<p>\r\nSometimes CLion gets confused about building/linking or running your code.\r\nIt doesn't seem to do the right thing (often refusing to recompile the\r\n  changes you have made): another reason to check the <b>Messages</b> pane.\r\nIn these cases I have tried the <b>Build | Clean</b> option, and then\r\n  continued building or running programs: doing so often fixed the problem.\r\n<p>\r\nFinally, sometimes when switching between running and debugging CLion starts\r\n  executing very slowly.\r\nI think it comes from not terminating all the running version of the program;\r\n  so work hard at always terminating runs/debugging sessions you have finished.\r\nWhen this happens, I have closed and reopened CLion; if that didn't work, I have\r\n  rebooted.\r\nI was always able to fix the problem in one of these two ways.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Submit via Checkmate -->\r\n\r\n<a name=\"checkmate\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Submit the Program for Grading via Checkmate</b></td>\r\n<td width =\"80%\">\r\nAfter you have fixed the code and verified that it works correctly via the\r\n  Driver and the GoogleTest, you should submit the code for grading via\r\n  <b>Checkmate</b>.\r\nIf you are unfamiliar with this system, read the\r\n  <a href=\"../../../common/handouts/checkmate/index.html\">\r\n    Submitting Homework Using Checkmate</a> document.\r\nIt explains how to submit programs, even if you are not officially registered\r\n  in the class yet.\r\n<p>\r\n<b>You are responsible for submitting the correct version of your code before\r\n     the deadline (not a minute later)</b>.\r\n<p>\r\nAny student who is submitting minutes before the deadline has mismanaged their\r\n  time.\r\n<p>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- End -->\r\n\r\n<a name=\"end\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Final Words</b></td>\r\n<td width =\"80%\">\r\n<b>You are also responsible for backing up your work frequently</b>.\r\n<p>\r\nWhenever you have updated your code (and whenever you have finished an\r\n  assignment) you should backup/save its entire project folder on a USB drive\r\n  (or in some data cloud).\r\nIt is better (and just as easy) to zip and backup the entire\r\n  <b>CLionProjects</b> folder, which will contain all of your projects.\r\n<p>\r\nFinally, repeatedly practice doing all the operations covered in this\r\n  Programming Assignment, until you are familiar with all these skills and can\r\n  perform them without rereading the directions.\r\nYou will save yourself much time later in the quarter (when time is really\r\n  important) if you spend some time now (when things aren't so rushed)\r\n  mastering this material.\r\n</table>\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}