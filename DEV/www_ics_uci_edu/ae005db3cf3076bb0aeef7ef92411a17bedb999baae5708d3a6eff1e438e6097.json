{"url": "https://www.ics.uci.edu/~ejw/authoring/collection/dt/Minutes990202.txt", "content": "WebDAV Advanced Collections Conference Call - 2/2/99\n\nAttending: Judy Slein, Geoff Clemm, Jim Davis, Jim Whitehead, Chuck Fay\n\nACTION ITEMS\n\nJudy:  Spec changes\nAll: Send comments to Judy via e-mail this week on the treatment of redirect references\nin sections 4.5 - 4.7 and 4.9.\nJudy: Quick and dirty rationale for the decision on locking.  \nGeoff: Polished rationale for the decision on locking (won't be available till after Friday).\nJim: Check with others about the importance of the performance issue for resolving\n/W/X/Y/Z.html.\nJim: Write up the concern about the ontology behind /W/X/Y/Z.html.\nJudy: Add ontology of hierarchies of references to the issues list.\nJudy: Get instructions for joining the call in the future.\n\nNEXT WEEK:\n\nCOPY, security considerations, ontology\n\nLOGISTICS\n\nInternet Drafts deadline for the next IETF meeting will probably be about March 5, so we\nshould plan to submit a draft at least by Feb 26\n\n2/19 - 3/6 Jim Whitehead will be out of the country and not easily accessible\n\nLOCKING 3.6\n\nGeoff is OK with this much:\nBy default, a LOCK on a direct reference gets passed through to its target.  (This includes\nthe case of a LOCK on a collection, Depth = infinity, where the collection contains direct\nreferences.)  A No-Passthrough header for a LOCK on a collection where Depth=infinity causes\nthe LOCK not to be passed through.\n\nHow do you interpret a URL /W/X/Y/Z.html, where every level of the URL identifies a\nreference?  (See ONTOLOGY below.)\nAssume for this discussion that we can make sense of such a URL.\n\nDo we want to have /W/X/Y/, /W/X/, and /W/ locked automatically when someone locks\n/W/X/Y/Z.html?\nIf not, it will be possible for someone to delete /W/, then create a new /W/ that points\nto a different target resource while /W/X/Y/X.html is locked.  This is undesirable.\n\nBut it's worse to do the automatic lock of all the levels of the hierarchy.  That would be\ninconsistent with the lock behavior defined in WebDAV.\n\nSo we're willing to live with the fact that someone could change /W/ while /W/X/Y/Z.html is\nlocked.  Manage this sort of problem out of band.  \n\nOnce we've decided this much, for consistency's sake, don't lock the lowest-level reference\neither.  So the behavior will be, lock the target, not the direct reference.\n\nJim W: We've taken two positions on lock semantics already, and now we are proposing to\nchange our position again.  Why is this so hard?\n\nThe question we are agonizing over is, What should be the *default* behavior of locking\nfor direct references? We are looking for efficiency and non-surprising behavior.\n\nGeoff proposes: If No-Passthrough is *not* used, LOCK operates only on target.  \nUse No-Passthrough if you want to lock the reference.  Do 2 operations if you want both the\nreference and its target to be locked.\n\nJim W: Geoff's proposal yields surprising results if /X/ and /Y/ are normal collections, \nand /X/Y/Z.html is a direct reference, and you do a Depth=infinity LOCK on /Y/.  You\nexpect Z.html to be locked, but it won't be.\nJim D: The client won't be surprised.  To the client, it looks as if the target of Z.html\nis the collection member, and the target will be locked.\nJim W: But another principal could delete Z.html in the locked collection.  This would\nsurprise the lock holder.\n\nGeoff: Some surprise is inherent in references.  We can't avoid surprising down-level\nclients.  The best we can do is default to something close to the intuitive case.\n\nGeoff: It's only operations on the namespace that produce surprising results.  Let's make\nit our policy not to let there be any surprises related to GET or PROPFIND or other in\ngeneral any operations that don't change the namespace.\n\nJim D: Only a referencing client can use the No-Passthrough header. A referencing\nclient who is a good citizen will check whether the target resource is locked before \nmodifying a direct reference.  So it is possible to avoid the kind of surprises Jim W\nis worried about by being good citizens.\n\nJim W:  It's a rule in WebDAV that if you LOCK a collection with Depth=infinity, you\ncan't modify the state of the collection.  Geoff's proposal violates that rule.  We should\nstick with last week's decision that LOCK affects references, not their targets.\n\nJim W: Ignoring the case of locking collections that contain direct references, the semantics\nof lock on a direct reference is that the target gets locked. Make the case of locking a\ncollection with Depth = infinity consistent with this.  This is to reverse our decision from\nlast week. \n\nJudy: The reason we have such difficulty making a decision is that no matter what we do, \nthere are undesirable / unintutitive / surprising results.  We have to make a decision about\nwhat behavior is the least objectionable.\n\nAgreed: A LOCK on a direct reference by default locks the target, not the reference.  The\nsame is true when a LOCK is applied to a collection with Depth=infinity and the collection\ncontains direct references.\n\nJudy will take a quick cut at writing a rationale for this decision.  Geoff will produce\nsomething more polished when he gets back from Sweden. \n\n\nONTOLOGY\n\nJim W: The LOCK model depends on what we think the objects are that populate the\nnamespace.\n\nThe problem case described in the mail this week used the URL /W/X/Y/Z.html, where each of\n/W/, /W/X/, /W/X/Y/, and /W/X/Y/Z.html identifies a reference.  Is it even possible to make\nsense of this case?\n\nThere are several possible interpretations.\n\n/W/ is a reference with the target /A/.  /W/X/ is a referential member of /A/.  /W/X/ has as\nits target collection /A/B/. /W/X/Y/ is a member of collection /A/B/, and has as its target\ncollection /A/B/C/.  /W/X/Y/Z.html is a referential member of /A/B/C/, and has as its target\nthe ordinary resource /A/B/C/D.html.\n\nIf /W/ points to /A/, then X is a member of /A/, not of /W/.  But this is not consistent\nwith the namespace requirements of WebDAV.  WebDAV says that for any URL /W/X, X must be\na member of the collection /W/.\n\nAlternatively, we can say the /W/X/Y/Z.html is free-floating in the namespace.\n\nWe can say that references, introduced after WebDAV, behave differently with respect to\nnamespace consistency. \n\nGeoff needs to be able to make sense of /W/X/Y/Z.html for versioning, for creating \na workspace in versioning.\n\nJim D: We need to fix the WebDAV namespace consistency requirements if they prevent us from \ndoing this.\n\nJim W: The performance of GET processing needs to be efficient. To resolve a URL, it is not\nacceptable to have to traverse the URL tree to find out where the references are.  High\nperformance servers would not implement this.\n\nGeoff: Caching can solve this, and is a common implementation in file systems\n\nJim D: If performance is a concern, don't use references.  You have to make a trade-off \nbetween the flexibility you get from references and speed.\n\nDown-level WebDAV clients won't be able to tell that /W/ is not a collection.  It will look\nto them as if we still obey the namespace consistency constraints.\n\n/W/ is sort-of a reference, and sort-of a collection. What is really the ontology here?\n\nWould it help if we had the notion of a \"real name\" (a GUID)?  Many servers do.\n\nJim W: We need to have an answer to the question: What collection has as part of its state \n/W/X?  Collection A?  The WebDAV spec says it's /W/.\nWe could say that /W/X does not have to be part of the state of any collection (relax the \nrules of webDAV).  Jim W doesn't like this.\nAccording to WebDAV, if you are a DAV resource and your parent is, too, then your parent \nmust contain your url as part of its state. In our example, there is no parent collection.\n(Or /A/ is the parent collection.  Or /W/ is sort-of the parent collection.)\n\nJim will write up the alternative interpretations and his concerns.\nJudy will add this to the issues list.\n\n\nBACKPOINTERS\n\nBackpointers are currently in the spec, but the discussion on the mailing list has reached\na deadlock.  One person strongly objects to backpointers.  Yaron also opposes optional\nfeatures in general.  Xerox participants strongly favor backpointers, others have voiced \nsupport -- Geoff, Bruce.  Other DMS vendors have not expressed opinions.\n\nChuck: DMA does have backpointers.  They are useful for navigating up a hierarchy.  He would\nlike to see them in the spec.\n\nJim W is concerned mainly to be sure that this issue is settled, and that it will not be\nraised again.\n\n(Review of the arguments from the mailing list.)\n\nAgreed: Leave backpointers in.\n\nPROPERTIES IN GENERAL\n\nConsider standardizing other optional properties -- make sure the work on Dublin Core in\nWebDAV continues.\nJim W favors property registry.\n\nOPTIONS\n\nThree new compliance classes are defined in this spec: DAV:basicref, DAV:directref, and\nDAV:orderedcoll.  What sorts of resources would respond with these values to an OPTIONS\nrequest?\n\nDAV:orderedcoll -- Only a collection responds this way, and it claims only that its own\nimmediate children may be ordered.  It says nothing about collections under it in the\nhierarchy.\n\nServers to reply to options on null resources with 200 (OK) and an options list.  For \nDAV:orderedcoll, this would mean that you could create a collection at that URI that is \nordered.\n\n(The spec will not talk about what should be included in the Public header and what should\nbe included in the Allow header.  Interestingly, most servers do not implement Public.\nMicrosoft does.  In theory, Public lists all methods supported by the server, and Allow\nlists only those methods that you could perform on that particular resource now given its\ncurrent state.  In general, you expect the list in Public to be the same throughout a\nserver's namespace.  So rather than check every resource, you might check just one and\nassume that whatever is in the Public list will work anywhere -- you will be wrong \noccasionally, but right for the most part.)\n\nDAV:basicref DAV:directref -- Any URL can return these, because you could create a reference\nat any URL (you might have to delete the resource currently at the URL first).\n\nIn general, if the tokens in the value of a header are not in a DAV: property, don't use\nthe \"DAV:\" prefix on the token.\n\nREDIRECT \n\nIssue 2: Redirect will be closed next week if no one sends comments in the mail before then.\n\nVERSIONING\n\nDoes there need to be syntax in the Ref-Target header and the DAV:reftarget property to\nallow for a revision id, in addition to a URL?\nJim W: Don't change anything yet -- wait till after next week's versioning workshop.\n\n", "encoding": "ascii"}