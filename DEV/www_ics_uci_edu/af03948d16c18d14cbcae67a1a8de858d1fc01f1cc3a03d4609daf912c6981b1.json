{"url": "https://www.ics.uci.edu/~thornton/ics22/LabManual/GoneToTheMovies/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 22 / CSE 22 Fall 2012, Project #4: Gone to the Movies</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 22 / CSE 22 Fall 2012 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../LabManual\">Lab Manual</a> |\n<a href=\"../../CodeExamples\">Code Examples</a>\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 22 / CSE 22 Fall 2012<br />\n   Project #4: <i>Gone to the Movies</i></p>\n   \n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Monday, November 19, 11:59pm</i></p>\n\n<p class=\"center\"><i>This project is to be completed individually</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Background</p>\n\n<p>In business or scientific contexts, it's sometimes very costly to make changes to the way that you're doing things, yet sometimes the changes you consider might yield great benefits; but sometimes, you don't know if they'll yield those benefits without some experimentation.  But if the experimentation is too costly, you might never be willing to pay the cost of finding out whether the changes you're considering are worthwhile or not.</p>\n\n<p>Computers have a role to play in situations like this.  If you can write a program that will show you how things would be different after you make your changes, and compare that result to how things are now, you can more cheaply find the answer you're looking for &mdash; should I make this change or not? &mdash; and, if it turns out to be a positive change, you can proceed with making it happen.</p>\n\n<p>In this project, we'll consider a situation like this one.  Suppose that the movie theater chain Millennium Cinemas is interested in finding ways to attract customers away from their larger, more well-established rivals.  With the proliferation of \"megaplex\" movie theaters during the last couple of decades, Millennium management believes that one problem that movie-goers face is the long wait in line to buy tickets.  They seek a solution that will allow their customers to spend less time in line, hoping that this will dramatically improve their sales.  It's not in their best interest to spend a lot of time running experiments, especially since some of the things they might want to try could well end up lengthening their customers' waits in line, ultimately hurting their business.  (When you're a large company, you can spend money trying things that might have a negative impact, absorb the loss, and move on.  When you're small, you don't have this kind of freedom.)</p>\n\n<p>So, to aid in their analysis of the time that customers spend in line, you'll build a program that will simulate various arrangements of lines and ticket windows, to allow them to find the optimal combinations for its theaters.  The project will give you practice implementing queues, as well as introduce you to the concept of a <i>simulation</i>, a program that approximates a real-world situation (in this case, the movement of customers as they arrive at the theater, stand in line, and buy tickets) and keeps track of statistics about it.  You'll also have a chance to gain some design skills, as you'll be starting this project from scratch.  Don't worry, though; we'll give you plenty of help along the way.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Reminder: Do not partner up</p>\n\n<p>For this project, your work is expected to be completed individually, so <i>do not</i> partner up, and <i>do not</i> use the pair programming technique.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The program</p>\n\n<p>Millennium requires a program that will allow them to simulate a variety of arrangements of ticket lines, ticket windows, and patterns of customer arrival.  You will write a program that gives them this flexible simulation ability.  It will allow the user to specify the number of ticket windows, whether there will be a single line or one per window, and the speed at which each ticket attendant can process customers.  Once these simulation parameters have been specified, the program processes a file that indicates the arrival of customers, simulating their arrival into the ticket lines, tracking how long each customer spends in line, and ultimately calculating statistics about them.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Window and line arrangements</p>\n\n<p>Millennium has many different styles of theaters, from single-screen theaters showing classic or foreign films to larger multi-screen varieties showing the latest releases.  To support its various sizes and styles of theaters, it wishes to investigate two arrangements of ticket windows and lines:</p>\n\n<ol>\n  <li>One or more ticket windows, each with its own line.</li>\n  <li>One or more ticket windows, and one line feeding all of them.</li>\n</ol>\n\n<p>For each arrangement of lines, they will also be interested in investigating the number of windows necessary to support various numbers and patterns of customers.  They will use the simulator to determine the contexts in which each arrangement will be appropriate.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The input file</p>\n\n<p>In order to simulate different types of theaters, the simulator will need to accept a set of parameters, specified in an input file.  The input file specifies the number of ticket windows, and whether there is a single ticket line or a separate line for each window.  In addition, the input file will contain a list of <i>customer arrivals</i>, specifying how many customers will arrive at the theater at which times.  Here is an example of an input file.  The italicized portions are included here for descriptive purposes, and should not be included in the actual input file.</p>\n\n<pre>\nShort simulation     <i>brief description of the simulation</i>\n5                    <i>the length of the simulation, in minutes</i>\n2                    <i>the number of ticket windows</i>\nS                    <i>how many lines: \"S\" for single, \"M\" for multiple</i>\n45                   <i>number of seconds it takes to process a customer at window #1</i>\n35                   <i>number of seconds it takes to process a customer at window #2</i>\n1 30                 <i>one customer arrives 30 seconds into the simulation</i>\n5 35                 <i>five customers arrive 35 seconds into the simulation</i>\n3 45                 <i>three customers arrive 45 seconds into the simulation</i>\n1 60                 <i>one customer arrives 60 seconds into the simulation</i>\n1 90                 <i>one customer arrives 90 seconds into the simulation</i>\nEND                  <i>the \"END\" tag marks the end of the customer arrivals</i>\n</pre>\n\n<p>The input file is broken into two parts: the <i>setup section</i>, which describes the arrangement of ticket windows and lines, and the <i>customer arrival section</i>, which lists the arrival of customers.</p>\n\n<p class=\"subtitle\">The setup section</p>\n\n<p>The first line of the setup section is a brief description, perhaps a sentence or so, that explains the purpose of the simulation.  The next line specifies the length of the simulation.  Following that, the next line specifies how many ticket windows there will be during the simulation.  This is followed by either \"S\" or \"M\" on a line by itself, which specifies whether there is a single ticket line or one ticket line per window.  Finally, there is a line for each of the windows &mdash; they should be numbered from 1..<i>n</i> &mdash; that states how many seconds it takes the attendant at that window to sell a ticket to a single customer.</p>\n\n<p>There must be a positive number (i.e., greater than zero) of ticket windows, though there is no pre-defined maximum.  The number of seconds that each attendant takes to process a customer must also be a positive number.</p>\n\n<p>After reading the setup section, the simulator should be ready to begin processing the arrival and departure of customers, so any applicable data structures should have been created and initialized appropriately.</p>\n\n<p class=\"subtitle\">The customer arrival section</p>\n\n<p>Each line in the customer arrival section of the input file describes the arrival of a number of customers at a particular time.  The time is specified as the number of seconds since the simulation started, and they must increase as the file is processed (i.e., the time on each line in the file must be greater than the time on the line that came before it).  The number of customers must be positive.</p>\n\n<p>When customers arrive, they get into one of the ticket lines.  If there is only a single line, obviously they get into that line.  If there are multiple lines, each customer should be processed one by one; each one should get into the line which has the fewest number of customers already in it.  In the event of a tie, they should always get into the one corresponding to the lowest-numbered window.  There is no maximum number of customers that can be in a particular line.</p>\n\n<p>When a window is unoccupied, a customer <i>immediately</i> moves from its corresponding ticket line to the window.  That customer will stay for the appropriate number of seconds.  At that time, the customer will leave the window and will <i>immediately</i> be replaced by another.</p>\n\n<p>For the sake of simplicity, we'll assume for our simulator that customers may not move from one ticket line to another.  In other words, suppose there is one ticket line per window.  If there is no one at the first window and no one in the first line, but there are three customers in the second line, we will assume that the customers in the second line <i>will not</i> go to the first window.  (Obviously, this is a non-issue when there is only one single line.)</p>\n\n<p class=\"subtitle\">Assumptions about the input file</p>\n\n<p>You may assume that the input file is formatted as described above.  You may <i>not</i> assume that it will be exactly the file that we're showing as an example, but you may assume that there won't be a word where a number is expected, and that there will always be exactly two integers on a line that's supposed to have two integers.  Further, you may assume that other restrictions, such as customer arrivals being in ascending order with respect to time, will hold.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">How will you know how to run my program?</p>\n\n<p>The name of the input file should be specified as a command-line argument, as in <a href=\"../Simple\">Project #3</a>.  If you'd like to refresh your memory about how to do that in Java (and within Eclipse), read through the relevant section of the <a href=\"../Simple\">Project #3</a> write-up.</p>\n\n<p>The class with your main() method should be called Simulator, so we'll be able to run your program in a predictable way.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The final report</p>\n\n<p>When the simulation is complete, your simulator should print out the <i>final report</i>.  The final report prints out some summary statistics about the simulation to <b>System.out</b>.  The final report must contain the following information:</p>\n\n<ul>\n  <li>For each ticket window:\n    <ul>\n      <li>The number of tickets sold at that window.  You may assume that each customer buys exactly one ticket.</li>\n      <li>The percentage of time spent idle.  You can calculate this by counting the number of seconds when no customer was at that window, and divide it by the total number of seconds in the simulation.</li>\n    </ul>\n  </li>\n  <li>For each ticket line:\n    <ul>\n    <li>The number of customers still waiting in that line.</li>\n      <li>The maximum length that line ever reached.</li>\n      <li>The average amount of time customers waited in that line to buy\ntickets.  Count only the customers who reached a window, though you may\ncount them if they are still at the window when the simulation ends.</li>\n      <li>The maximum amount of time any customer waited in that line, including customers who are still in line at the time the simulation ends.</li>\n    </ul>\n  </li>\n  <li>Overall:\n    <ul>\n      <li>The total number of tickets sold at all windows.</li>\n      <li>The average amount of time customers waited in line to buy tickets.  Count only the customers who reached a window, though you may count them if they are still at the window when the simulation ends.</li>\n      <li>The average amount of time each customer spent at a ticket window.  Naturally, you should only count customers who reached a window and bought a ticket, so don't count customers who are still at the window when the simulation ends.</li>\n    </ul>\n  </li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">How should the example file be processed?</p>\n\n<p>What follows is a step-by-step explanation of the processing of the example file shown in the previous section.  At the conclusion of the example, the statistics are shown.  All times are reported in terms of seconds.  The final output of your program does not need to look like this, but I do suggest that you include something like this in your program's output; there is simply no way you'll get the final statistics to come out correctly if customers aren't moving to the right places at the right times during the simulation.  (This also provides us the ability to give you partial credit if you're not able to get the entire program finished; as problems get more complex, it's worth considering ways to reach stable ground and have partial solutions working, and this partial output is a great example of that.)</p>\n\n<ul>\n  <li>time 0: window #1 and window #2 are idle, no one is in line</li>\n  <li>time 30: one customer arrives and gets into line</li>\n  <li>time 30: customer goes to window #1 (spent 0 seconds in line)</li>\n  <li>time 35: five customers arrive and get into line</li>\n  <li>time 35: customer goes to window #2 (spent 0 seconds in line)</li>\n  <li>time 45: three customers arrive and get into line</li>\n  <li>time 60: one customer arrives and gets into line</li>\n  <li>time 70: customer leaves window #2 (spent 35 seconds at window #2)</li>\n  <li>time 70: customer goes to window #2 (spent 35 seconds in line)</li>\n  <li>time 75: customer leaves window #1 (spent 45 seconds at window #1)</li>\n  <li>time 75: customer goes to window #1 (spent 40 seconds in line)</li>\n  <li>time 90: one customer arrives and gets into line</li>\n  <li>time 105: customer leaves window #2 (spent 35 seconds at window #2)</li>\n  <li>time 105: customer goes to window #2 (spent 70 seconds in line)</li>\n  <li>time 120: customer leaves window #1 (spent 45 seconds at window #1)</li>\n  <li>time 120: customer goes to window #1 (spent 85 seconds in line)</li>\n  <li>time 140: customer leaves window #2 (spent 35 seconds at window #2)</li>\n  <li>time 140: customer goes to window #2 (spent 95 seconds in line)</li>\n  <li>time 165: customer leaves window #1 (spent 45 seconds at window #1)</li>\n  <li>time 165: customer goes to window #1 (spent 120 seconds in line)</li>\n  <li>time 175: customer leaves window #2 (spent 35 seconds at window #2)</li>\n  <li>time 175: customer goes to window #2 (spent 130 seconds in line)</li>\n  <li>time 210: customer leaves window #1 (spent 45 seconds at window #1)</li>\n  <li>time 210: customer leaves window #2 (spent 35 seconds at window #2)</li>\n  <li>time 210: customer goes to window #1 (spent 150 seconds in line)</li>\n  <li>time 210: customer goes to window #2 (spent 120 seconds in line)</li>\n  <li>time 245: customer leaves window #2 (spent 35 seconds at window #2)</li>\n  <li>time 245: window #2 is idle</li>\n  <li>time 255: customer leaves window #1 (spent 45 seconds at window #1)</li>\n  <li>time 255: window #1 is idle</li>\n  <li>time 300: simulation ends</li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The statistics for the example file</p>\n\n<p>These are the statistics that you should see after processing the example file.  Note that the decimal numbers may be off by a hundredth in some cases for you, depending on how (and whether) you handle rounding, and that's fine.</p>\n\n<ul>\n  <li>Window #1\n    <ul>\n      <li>5 tickets sold</li>\n      <li>25.00% of time was idle (75 seconds out of 300)</li>\n    </ul>\n  </li>\n  <li>Window #2\n    <ul>\n      <li>6 tickets sold</li>\n      <li>30.00% of time was idle (90 seconds out of 300)</li>\n    </ul>\n  </li>\n  <li>Line\n    <ul>\n      <li>No customers were waiting at the end of the simulation</li>\n      <li>Maximum length was 8 customers</li>\n      <li>Avg. wait time: 76.82 seconds</li>\n      <li>Maximum wait time: 150 seconds</li>\n    </ul>\n  </li>\n  <li>Overall\n    <ul>\n      <li>11 tickets sold</li>\n      <li>Avg. wait time: 76.82 seconds</li>\n      <li>Avg. time spent at a window: 39.55 seconds</li>\n    </ul>\n  </li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">How about some additional examples?</p>\n\n<p>To test your simulation, you'll want to run more examples than just the one example file that I provided.  However, I'm only going to be providing you with the one example.  Part of the goal of writing a program is to find a way to be sure that it works; that means that you need to test it.  In the case of a simulation, that means you need to come up with some interesting inputs, figure out for yourself what the output should be, then see if your program generates the right output.  That's part of what I'm expecting you to do for this project, though you will not be required to submit your additional input files.  In fact, because it can be an arduous task to build input files and figure out what their expected output is, I encourage you to share your input files and expected outputs with one another, so that everyone can benefit from one another's insights about testing the program.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Some suggestions (and requirements) about the design of your simulator</p>\n\n<p>There are many ways that you could implement your simulator, and I will not impose any particular one on you, though I will make a few specific requirements.  For the most part, you're on your own for this project.  However, here are some suggestions which might help you get started, along with a few design requirements.</p>\n\n<p class=\"subtitle\">Deciding on your classes</p>\n\n<p>A somewhat simplistic, but often effective, way to break a large design into classes is to consider a description of the desired system and \"look for the nouns.\"  While this technique won't give you a complete or perfect design, it will at least give you a good feel for what the major abstractions in your program are.  Using that approach for this program, you might discover some of the following ideas (and probably others).  Of course, depending on how you describe your program, you may discover different abstractions than these.</p>\n\n<ul>\n  <li><i>Customer</i>.  The simulator is intended to keep track of customers as they enter lines, enter windows, and leave the area with their tickets.</li>\n  <li><i>Queue</i>.  A queue is an object that manages a set of objects standing in line waiting for access to some shared resource.  In the case of this program, the objects are customers and the shared resource is a ticket window; however, the queue class should be built to be generic, so that it could be reused in other programs.</li>\n  <li><i>Ticket line</i>.  One of the central features of the simulation.  Customers enter at the back of lines, work their way up, then emerge from the front.  This is an example of the concept of a queue, which you will be required to use to implement your ticket line.  A good way to implement your ticket line is to have it contain a queue.  The distinction between a queue and a ticket line is that a queue is generic (i.e., it can store any kind of object) and is intended to be possibly reused in other programs, while a ticket line specifically manages customers and keeps tracks of statistics necessary for this program.</li>\n  <li><i>Ticket window</i>.  Another central feature of the simulation.  One customer at a time can occupy a ticket window.  For each window, there is a predetermined amount of time that each customer will need to spend there.  It is possible for a window to be \"idle\" (i.e., to have no customer in it).  A ticket window will need to keep track of the necessary statistics that are specific to that window.</li>\n  <li><i>Theater</i>.  A broader abstraction for the theater area.  Contains ticket lines and ticket windows.  The purpose of the theater abstraction is to prevent other parts of the program from needing to be aware of the arrangement of lines and windows.  For example, when a customer arrival is processed, the Theater object can be in charge of placing the customers in the appropriate lines.  The Theater object should also track summary statistics for the entire simulation.</li>\n  <li><i>Simulation</i>.  An object that manages the entire simulation, delegating tasks to the theater (which will delegate some tasks to other objects, such as ticket lines and ticket windows).  This is where the input file can be read and processed.  This object will also manage the <i>simulation loop</i>, which I'll describe a bit later.</li>\n  <li><i>Clock</i>.  Since the simulation has a clock that keeps track of the current time, expressed as the number of seconds since the simulation started, it makes sense to have one object, shared by all of these classes, that keeps track of the current time.</li>\n</ul>\n\n<p class=\"subtitle\">Using a queue to implement your ticket line</p>\n\n<p>You are required to build a queue class for this project and use it to implement your ticket line.  The queue should be generic (e.g., Queue&lt;E&gt;), so that it could be used in other programs.  It is required to be implemented as a linked list, with the major operations (enqueue, dequeue, and front) written so that they will run in <i>O</i>(1) time.</p>\n\n<p>Separately, you'll probably find the need to define a ticket line class that specifically deals with customers and keeps track of the statistics that are necessary for this program.  (There are two reasons why it's wise to separate the queue from the ticket line: so that the queue can be reused in other programs and so that you can separate the logic that stores and manipulates the queue of customers from the logic that tracks the statistics.)</p>\n\n<p class=\"subtitle\">The simulation</p>\n\n<p>Your program should load the setup information from the input file first, and then setup the simulation (i.e., create the theater object with the appropriate initial state) based on those values.  From there, you can implement the simulation in various ways, but I suggest the following approach.  (This is by no means the most efficient way to implement such a simulation, but is efficient enough for our purposes, striking a good balance between efficiency and ease of implementation for this course.)</p>\n\n<p>Write a <i>simulation loop</i>, each iteration of which simulates one second.  Each second, the loop performs the following major tasks:</p>\n\n<ul>\n  <li>Find out what the current time is.  Remember that the current time is tracked as the number of seconds since the simulation started.  (Obviously, this should start at zero.)</li>\n  <li>If new customers are arriving in line at the current time, add them to the appropriate lines.</li>\n  <li>Check each ticket window.  If there is no customer there, the first customer in its corresponding ticket line should be removed from line and arrive at the window.  If there is a customer there, see if the customer is finished.  The customer is finished if she has been at the window for the specified number of seconds.  If the customer is finished, she leaves, and should be immediately replaced by the first customer in the corresponding ticket line (if any).</li>\n</ul>\n\n<p>When the specified number of seconds of simulation time elapse, the simulation ends, and the accumulated statistics should be printed out.</p>\n\n<p class=\"subtitle\">Memory usage</p>\n\n<p>You <i>may not</i> load all of the customer arrivals into memory at the beginning of the simulation.  Instead, you should read the customer arrivals into memory one line at a time, when necessary.  Reading all of the customer arrivals into memory ahead of time will yield a substantial penalty on your <b>Quality of solution</b> score for this project.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Testing</p>\n\n<p>To satisfy the testing portion of this project, write a JUnit-based test class that tests your Queue implementation.  It is not necessary to test other parts of your program, but you're welcome to test anything else you wish using JUnit.</p>\n\n<p>One thing to understand about unit testing is that how you design your program has a big effect on whether unit tests are easy (or even possible) to write.  This is a positive feedback loop: a design that permits unit tests to be written is one that is usually, on balance, better than the alternative.  Consider ways that you can make as much of your code unit-testable as possible.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Limitations</p>\n\n<p>You must implement your own linked list functionality.  You may not use pre-existing linked list implementations, such as <b>java.util.LinkedList</b> in your solution.  If you'd like, you may reuse your LinkedList&lt;E&gt; class from previous projects, though you will need to make it a singly-linked list with  both head and tail references, so that the various queue operations will run in constant time; you may also need to add one or more methods to it.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Starting point</p>\n\n<p>Unlike previous projects, you will not be provided with any code as a starting point for this one.  I believe that you now have the skills to write this program from scratch.  There is quite a bit of design advice in the write-up above, so be sure to spend some time reading and understanding it.  Ask questions in discussion and chat on the newsgroup.  Plenty of help is available, but I encourage you to start early.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>You must submit all of your <b>.java</b> files.  Please do not turn in the <b>.class</b> files, or other files generated by your development environment.  Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Testing section adjusted by Alex Thornton, Winter 2012.</li>\n  <li>Section detailing use of JUnit 4 in Eclipse rewritten (as user interface had changed) by Alex Thornton, Fall 2008.</li>\n  <li>Testing requirement restored and rewritten by Alex Thornton, Spring 2007.</li>\n  <li>Design advice rewritten, testing requirement removed, and some of the other requirements adjusted (to fit with previous projects in this quarter's ICS 22 offering) by Alex Thornton, Fall 2004.</li>\n  <li>More minor changes by Alex Thornton, Fall 2002.</li>\n  <li>A few more modifications and the inclusion of <i>jUnit</i> into this project by Alex Thornton, Spring 2002.</li>\n  <li>Re-tooled for the \"new\" ICS 22 (including the addition of a testing component) by Alex Thornton, Winter 2002.</li>\n  <li>A few screws were tightened by Alex Thornton, Summer 2001.</li>\n  <li>Some minor fixes and disambiguation by Alex Thornton, Spring 2001.</li>\n  <li>Originally written by Alex Thornton, Winter 2001.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}