{"url": "https://www.ics.uci.edu/~pattis/common/handouts/glossary.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Glossary</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Glossary of Programming (and Java) Terms</h1>\r\n<p>\r\n<p>\r\n</center>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Cascaded Method Calls</b></td>\r\n<td width =\"80%\">\r\nIn a cascaded method call, we use the result returned by one method (a\r\n  reference to an object) to immediatley call another method.\r\nIf we declare <b>String s = \"foo\";</b> and then the cascaded method call\r\n  <b>s.toUpperCase().replace('F','G')</b> it returns a result of <b>\"GOO\"</b>:\r\n   <b>toUpperCase</b> is called on the object <b>s</b> refers to, and returns \r\n  a reference to a new object whose state is <b>\"FOO\"</b>; the cascaded method\r\n  call immediately calls <b>replace</b> on this reference, and return a\r\n  reference to a newer object whose state is <b>\"GOO\"</b>.\r\nCascaded method calls is similar to composition of functions in mathematics.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Checked Exception</b></td>\r\n<td width =\"80%\">\r\nA checked exception is a sublcass of Throwable but not of RunTimeException.\r\nSuch exceptions generally indicate an extra-logical failure (one not related\r\n  to programming errors; e.g. EndOfFileException).).\r\nThey are required either to be caught, or appear in a method that specifies\r\n  in its prototyp that it throws that kind of exception.\r\nContrast to Unchecked Exception.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Access Modifier</b></td>\r\n<td width =\"80%\">\r\nA Java keyword that describes whether/how some class member can be\r\n  referred to (accessed).\r\nCommon access modifiers are <b>public</b>, <b>private</b>, <b>protected</b>,\r\n  <b>static</b>, and <b>final</b>.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Accessor</b></td>\r\n<td width =\"80%\">\r\nA Java method that examines the state of an object but does not change it\r\n  is called an accessor\r\nAccessors typically return a result (otherwise, calling one would produce\r\n  not visible effect).\r\nAccessors are often call \"getters\", and their names often start with\r\n   <b>get</b>.\r\nSee mutator.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Constructor</b></td>\r\n<td width =\"80%\">\r\nA class member whose purpose is to help initialize all the fields of a class.\r\nConstructors can be overloaded.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Driver</b></td>\r\n<td width =\"80%\">\r\nA program with a simple menu for testing the constructors and methods of\r\n  a class.\r\nThe user selects which method to call via the menu, and the result of\r\n  the operation is printed (often along with the current state of the\r\n  object via the <b>toString</b> method).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>EBNF</b></td>\r\n<td width =\"80%\">\r\nExtended Backus-Naur Form: A notation for formally describing the syntax of\r\n  a programming language (i.e., specifying which programs are grammatically\r\n  correct).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Evaluate</b></td>\r\n<td width =\"80%\">\r\nWhat Java does with an expression.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Exception</b></td>\r\n<td width =\"80%\">\r\nIf a built-in Java operator or programmer supplied Java method cannot\r\n   correctly compute its result (e.g., the user has specified the bad\r\n   arguments) it throws an exception to indicate a problem.\r\nExceptions are classified as either checked or not-checked.\r\nWhen such operators/methods occur in try/catch blocks, the programmer can\r\n  indicate how to proceed if an exception is thrown.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Excecute</b></td>\r\n<td width =\"80%\">\r\nWhat Java does with a statement.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Identifier</b></td>\r\n<td width =\"80%\">\r\nA kind of token, used for names: variable names, method names, class names,\r\n  etc.\r\nIdentifiers always start with letters; a dollar sign is allowed, but this\r\n  character should be reserved for special identifiers created by the\r\n  Java compiler.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\"> \r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Immutable</b></td>\r\n<td width =\"80%\">\r\nA class is immutable if is defines no mutator methods.\r\nThis means that once the state of an object is initialized by\r\n  a constructor, it will never change.\r\n<b>String</b> and the wrapper classes are all immutable.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Java</b></td>\r\n<td width =\"80%\">\r\nA programming language designed by James Gosling at Sun Microsystems.\r\nJava is meant to be easier (and safer) to use than C++ (the language that \r\n  it most closely resembles) at the cost of being less efficient.\r\nThe implications of this tradeoff are very interesting.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Keyword</b></td>\r\n<td width =\"80%\">\r\nA kind of token, used for names/identifiers reserved by Java with immutable\r\n  meanings.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Literal</b></td>\r\n<td width =\"80%\">\r\nA kind of token, used for the value of a type.\r\nJava allows us to specify literals for the primitive types int, double,\r\n  boolean, and char; and for the reference/class type String.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Members</b></td>\r\n<td width =\"80%\">\r\nJava classes define and document three kinds of  members:\r\n  constructors, methods, and fields.\r\nAlmost everything that we can say about a class is said about\r\n  one of these members.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Mutator</b></td>\r\n<td width =\"80%\">\r\nA Java method that changes the state of an object is called a mutator.\r\nMutators typically do not return a result (are declared to return <b>void</b>),\r\n  although some mutators both change state and return a result\r\n  (e.g., <b>nextToken</b> in <b>StringTokenizer</b>).\r\nMutators just change state, without looking at current values, are often call\r\n  \"setters\", and their names often start with <b>set</b>.\r\nSee accessor.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>new</b></td>\r\n<td width =\"80%\">\r\n<b>new</b> is a unary prefix operator, which takes as an operand the\r\n  name of any class.\r\nFollowing the class name is a pair of open/close parentheses;\r\n  inside these parentheses, separated by commas, is any information\r\n  that the class requires to specify the initial state of the\r\n  object being constructed.\r\nThe <b>new</b> operator constructs a new object from this class, initializes\r\n  it, and then returns as a result (all operators return results) a reference\r\n  to this object.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Operator</b></td>\r\n<td width =\"80%\">\r\nA kind of token, mostly used for arithmetic, relational, logical, or textual\r\n  operations (operating on primtive types or references -but not on the\r\n  state of the objects that they refer to).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Overloaded</b></td>\r\n<td width =\"80%\">\r\nAn operator or method is overloaded if it has more than one prototype.\r\nJava determines which actual operator/method to use based on its\r\n  signature.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Primitive Type</b></td>\r\n<td width =\"80%\">\r\nA type built in to the Java language (as a keyword).\r\nThe main primtive types are <b>int</b>, <b>double</b>, <b>boolean</b>,\r\n  and <b>char</b>; less often used primitive types are <b>short</b>,\r\n  <b>long</b>, and <b>float</b>.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Prototype</b></td>\r\n<td width =\"80%\">\r\nA specification of the types and exceptions involved in an operator or method.\r\nIt shows the types of the operands/parameter, the type of the result, and any\r\n  exceptions that can be thrown during the computation.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Reference Type</b></td>\r\n<td width =\"80%\">\r\nA reference type includes the names of interfaces and classes (either declared\r\n  in the standard Java library or by a programmer).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Separator</b></td>\r\n<td width =\"80%\">\r\nA kind of token, used for punctuation (period, comma, semi-colon) or grouping\r\n  (parentheses, brackets, braces -which all come in paris: one for openining\r\n  the group and one for closing it).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Signature</b></td>\r\n<td width =\"80%\">\r\nA specification of the types involved in an operator or method.\r\nIt shows the types of the operands/parameters only.\r\nIt is a subset of the prototype information (it omits the type of the result\r\n  and any exceptions that can be thrown during the computation).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Syntax Constraint</b></td>\r\n<td width =\"80%\">\r\nAn extra rule imposed by the compiler on some statement.\r\nThe rule either cannot be encoded in the EBNF, or it is just\r\n  very cumbersome to do so.\r\nExample: in an <code>if</code> statement, the <i>expression</i> in the\r\n  parentheses (which is specified in the EBNF) must be of type\r\n  <code>boolean</bode>.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Token</b></td>\r\n<td width =\"80%\">\r\nThe smallest lexical unit in a program.\r\nThe Java compiler scans the characters in a program, grouping them into tokens.\r\nThe 6 basic kinds of tokens are identifiers, keywords, separators, operators,\r\n  literals (either type int, double, boolean, char, or String), and comments.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Types</b></td>\r\n<td width =\"80%\">\r\nJava types include primitive types and reference types.\r\nTypes are a bit more general than classes; while every class is a types,\r\n   types also include interfaces.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Variable</b></td>\r\n<td width =\"80%\">\r\nVariables are declared to have names and types (either primitive or reference).\r\nA variable of a primitive type a value of that type.\r\nA variable of a reference type stores either <b>null</b> (meaning it\r\n  refers to no object), or a reference to an object constructed from\r\n  some compatible class: the object stores more information.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Unchecked Exception</b></td>\r\n<td width =\"80%\">\r\nAn unchecked exception is a sublcass of RunTimeException.\r\nSuch exceptions generally indicate a programming error (e.g.\r\n  IllegalArgumentException).\r\nContrast to Checked Exception.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}