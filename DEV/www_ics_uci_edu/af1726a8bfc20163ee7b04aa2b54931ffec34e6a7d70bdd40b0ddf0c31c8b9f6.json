{"url": "https://www.ics.uci.edu/~theory/269/070608.html", "content": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>Theory Seminar, June 8, 2007</title>\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"/~theory/logo/shortTheory.gif\" width=\"\n521\" height=\"82\" border=\"0\" alt=\"ICS Theory Group\"></a>\n\n<h2>CompSci 269S, Spring 2007: Theory Seminar</h2>\n\n<h3>June 8, 2007, in Bren Hall 1423</h3>\n\n<h1>Optimal-time Dynamic Mesh Refinement</h1>\n\n<h2>Benoit Hudson</h2>\n\n<p>Abstract:</p>\n\n<p>In February, Gary Miller presented our results on static mesh\nrefinement: the problem was to, given an input geometry, produce an\noutput tetrahedral mesh where every tetrahedron has good aspect ratio.\nThis requires adding some additional points to the input; he showed how\nto minimize (to within a constant factor) the number of points in the\noutput, and how to run in optimal sequential time.</p>\n\n<p>When the mesh domain changes after the first timestep, we now need to\nsolve the dynamic mesh refinement problem: how to maintain a small but\ngood quality mesh as we change the input.  I will show that after\naddding or removing points from the input, the mesh refinement algorithm\nof Bern, Eppstein, and Gilbert can recompute the output quality mesh in\nO(log&nbsp;<i>L</i>/<i>s</i>) time.  This uses the automatic\ndynamization techniques of Acar, which ensures that the dynamic\nalgorithm is no harder to implement than the static algorithm.</p>\n\n<p>In two dimensions, we can extend this to do even better: by\ndynamizing a post-processing algorithm of Har-Peled and Ungor, we can\nmaintain a mesh as small as is known how to produce in practice, at no\nadditional asymptotic cost.</p>\n\n<p>I expect this joint work with Umut Acar (TTI-C) to be of particular\ninterest to geometers, dynamic algorithmaticians, and scientific\ncomputers.</p>\n\n</body>\n</html>\n", "encoding": "ascii"}