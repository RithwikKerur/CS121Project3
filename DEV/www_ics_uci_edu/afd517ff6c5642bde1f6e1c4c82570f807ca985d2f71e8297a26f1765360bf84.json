{"url": "https://www.ics.uci.edu/~taylor/ics125_fq99/implementation.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<HTML>\n<HEAD>\n   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n   <META NAME=\"GENERATOR\" CONTENT=\"Mozilla/4.07 (Macintosh; I; PPC) [Netscape]\">\n   <TITLE>Deliverable 3: Design</TITLE>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFF0\">\n\n<CENTER>\n<H2> ICS 125: Project in Software System Design</H2></CENTER>\n\n<CENTER>\n<H3> Fall Quarter 1999</H3></CENTER>\n\n<CENTER>\n<H1> Implementation</H1></CENTER>\n\n<H3>\nDue Date</H3>\nAs described in the course syllabus.\n\n<HR>\n<h3>Overview</h3>\n\n<P>After finalizing your design, your team shall implement the\nsoftware according to the design and requirements for your application.\nThis implementation should be done incrementally (and will be handed in\nover two phases). This assignment corresponds to the initial\ncoding phase and unit testing and debugging. The next assignment corresponds\nto software integration, integration and system testing, debugging, and\nenhancements.&nbsp; In conjunction with coding each unit, your team must\ndevelop unit test plans covering each of the implemented units.\n\n<P>For this assignment, you must turn in both a descriptive document and\ncode listings as described below. The source code should be documented\nwith sufficient, informative comments. This deliverable also includes the\nunit test plans and test execution histories, which should functionally\nand structurally test each unit in the implementation. You should organize\nthe unit test plans and test history documentation in much the same way\nas the units themselves are organized in the implementation. You need not\nprint out the results of all testing activity, but should show enough results\nof executing your unit test plans to convince us that your units are ready\nfor integration.\n\n<P>Specify the correspondence between your software design and the implementation.\nShow this correspondence any way you feel is appropriate (e.g., make notations\nthroughout your document or in your minutes), but by all means include\nsome discussion in the overview section. Implementing the software will\nundoubtedly reveal inadequacies in previous documents. Please note these\nproblems and what was done to solve them.\n\n<P>Don't forget to include your meeting minutes and performance appraisals\nwith your document; refer to the syllabus for the complete check-list of\nwhat has to be turned in. As before, make sure that you post your design\ndocument and your meeting minutes to your team web page.\n\n\n<BR>\n<HR>\n<H3>\nDeliverable Objectives/Quality</H3>\nKeep in mind that key objectives of the implementation are to:\n<UL>\n<LI> Translate the design into code that will satisfy requirements</LI>\n<LI> Identify inadequacies in the design and requirements</LI>\n<LI> Document further decisions and rationale</LI>\n<LI> Provide a reference tool readable by developers, testers, and maintainers</LI>\n<LI> Develop a review plan that will yield confidence in the code</LI>\n<LI> Provide a basis for unit testing to determine that implementation meets\ndesign</LI>\n</UL>\n\nIn addition, keep in mind that an implementation document should satisfy\nthe following qualities:\n<UL>\n<LI> Complete? everything that is in the requirements and design is implemented</LI>\n<LI> Consistent? no mismatched interfaces and consistent with the design</LI>\n<LI> Stylistic? exhibits good programming style</LI>\n<BR>(e.g., safe constructs, information hiding, well defined types, reasonable\nmodule sizes and complexity, well-defined module interfaces, avoids side\neffects)\n<LI> Understandable? code should be constructed that is easy to read,</LI>\n<BR>not necessarilly easy to write\n<LI> Modifiable? again this is a living document</LI>\n<LI> Desensitized to change? maintains information hiding as specified in the\ndesign</LI>\n<LI> Confirmable, Verifiable and testable? you can tell when you've met the\ndesign and requirements</LI>\n</UL>\n\n<HR>\n<H3> Document Contents</H3>\n\n<H4>\nIntroduction</H4>\nExpand your introduction to discuss your specific approaches to the implementation\nof the system and the organization of this document. This description is\nessentially just an updated version of the introduction you included in\nyour previous deliverable. This description should guide the reader.\n<H4>\nUnderstanding</H4>\nAs needed, expand the understanding section of your previous document. Make sure to\nadd descriptions of what additional steps or actions you took to understand each technology\nor software during this phase. If you make changes to this section, add\ntext describing why the change was necessary, and why it more accurately\nreflects your new understanding. This section need not be different if\nyour understanding hasn't changed.\n\n<H4>\nProject Plan</H4>\nThis will be an iterative expansion of your previous submission. Expand\nyour project plan to represent how you have accomplished the work so far.\nReassess the project risks. Expand your task network or work breakdown\nstructure to include the effort expended to complete this task. Based on\nthe work you have done, revise your estimates on how much your team can\naccomplish and deliver.  Update your time estimates for the remaining\nwork.\n\n<P>If you make changes, add text describing why the change was necessary\nor why it will improve the ability of your team to accomplish the work\nyou have proposed.\n\n<H4>\nImplementation</H4>\n<UL>\n<LI> Overview of Software Implementation</LI>\n  <UL>\n  <LI> Implementation organization</LI>\n  <LI> How your systems works</LI>\n  <LI> System size (e.g., source lines, packages) (See the note below under the\n\t presentation instructions for how to show this.)</LI>\n  <LI> Major limitations on the current implementation</LI>\n</UL>\n\n<LI> Source Code Listings</LI>\n   <UL>\n   <LI> List of Modules/Objects within your system</LI>\n   <LI> Complete listings for your software system.</LI>\n       <UL>\n       <LI> Listings should be free of syntax errors and should have compiled</LI>\n       <LI> Organize these listings by system architecture in the same order as your\n            design document</LI>\n       <LI> Each module/object must be documented in standard ways, defining its purpose,\n            how it works, and interface (this should be straight out of the design)</LI>\n       </UL>\n   </UL>\n</UL>\n\n<H4>\nUnit Test Plan/Test History</H4>\nIncludes a unit test plans capable of demonstrating that each unit meets\nthe design and requirements traceable to that unit. The unit test plans\nshould be based on both functional test heuristics based on the functional\ndescription of the unit (black box) and structural test criterion to at\nleast cover all branches (white box).\n\n<P>Shows selected results of your testing activity, enough to raise our\nconfidence in your software and to show that it is ready for integration\nand final testing. In particular, you should show a representative selection\nof test results for each unit test plan. The test results should show the\ntest case executed, whether any failures were detected, what faults were\ndebugged, and (hopefully) that it eventually passed.\n\n<P>NOTE: if desired, the test cases can be grouped with the code entity\nto which they apply, else a cross reference listing of some sort should\nbe provided. In addition, the test results can be grouped with the test\nplans/cases to which they apply, else a cross reference listing of some\nsort should be provided.\n\n<UL>\n<LI> Unit Test Plan / Test Execution History ... for each test case</LI>\n   <UL>\n   <LI> Test Case Identification</LI>\n   <LI> Purpose of Test Case</LI>\n   <LI> Item(s) being tested</LI>\n   <LI> Input specification</LI>\n   <LI> Output specification</LI>\n      <UL>\n      <LI> Expected Results or Test Oracle Mechanism</LI>\n      </UL>\n   <LI> Test environmental needs or special test procedures</LI>\n   </UL>\n\n   <HR WIDTH=\"100%\">\n\n   <UL>\n   <LI> Test Results</LI>\n      <UL>\n      <LI> pass/fail</LI>\n      </UL>\n   <LI> Failures detected</LI>\n   <LI> Faults debugged</LI>\n   <LI> Final Test Result</LI>\n      <UL>\n      <LI> hopefully passed ... but if not fixed, document this</LI>\n      </UL>\n   </UL>\n</UL>\n\n<H4>\nDemonstration Plan</H4>\nHow and what will you demonstrate? This is a chance to continue your planning\nfor the final demonstration.\n<H4>\nTracking and Control Mechanisms</H4>\n<p>\nConfiguration Management: how are your modules/objects maintained?\n<UL>\n<LI> file structure, sub-directories, Makefiles, etc.</LI>\n<LI> persistent data</LI>\n</UL>\n<p>\nDesign Cross Reference: what files contain what modules/objects from your\ndesign?\n<UL>\n<LI> a table mapping module/object to file</LI>\n<LI> make sure it is complete and consistent.</LI>\n</UL>\n\n<H4>\nModifications to Prior Documents</H4>\n\n<H5>\nDesign</H5>\nThis will be similar to your previous design document, but if any modules/objects\nor interactions are changed, added or deleted, make this explicit. Highlight\nwhy the design was changed/added/deleted and by whom (customer, developer,\netc.). Again make sure your design meet the objectives of completeness,\nabstraction, modifiability, and consistency. If your design has not changed,\nthen this section should be identical to what you submitted earlier.\n<H5>\nRequirements</H5>\nThis will be similar to your previous requirements document, but if any\nrequirements are changed, added or deleted, make this explicit. Highlight\nwhy the requirement was changed/added/deleted and by whom (customer, developer,\netc.). Again make sure your requirements meet the objectives of completeness,\nunderstandability, utility, unambiguity, and consistency. If your requirements\nhave not changed, then this section should be identical to what you submitted\nearlier.\n<H4>\nGlossary</H4>\nDefines any terms used in the specifications above.\n\n<H4> Documentation</H4>\nThis section is reserved for any additional documentation you may have\ndeveloped during this phase of the project. Specifically, if during the\ncourse of developing the your understanding of the various technologies\ninvolved in the project, you discovered items that were not documented,\nbut which were important, then you should include that here.\n\n<P>Additionally you should list here the major background sources of information\nthat you used during this phase or any that you plan to use during the\nremainder of the project. This would include references to similar systems\nand/or procedures.\n\n<hr>\n<H3> Implementation Presentations </H3>\nSee the syllabus for dates.\n<p>\nEach team should prepare a 10 minute presentation (NOTE:  this is shorter than\nall the previous presentations), after which we will allow up to 5 minutes of questions. \nYour presentation should include the following:\n<UL>\n<LI> Very brief context to your project;</LI>\n<LI> Current state of your project plan. Be sure to include a table showing how many hours were \noriginally planned for each phase and how many hours you actually spent on each phase.  For\nphases where there is a large difference (>25%) provide an explanation.</LI>\n<LI> Highlights of your implementation including</LI>\n   <UL>\n   <LI> an overview of your architecture</LI>\n   <LI> one or more module/object implementations and associated unit test plans;</LI>\n   <LI> requirements and design cross reference for the highlighted code;</LI>\n   </UL>\n<li> A description of how many lines of code you've written, how many files they are in,\nand how those files are organized.  A good way of showing this is as a tree reflecting\nthe file/directory structure, with each leaf node annotated with the number of lines of code\nin that node, and each non-leaf node annotated with the aggregate number of source lines\nin all subsidiary directories and files.\n<LI> Modifications to your requirements and design that arose as a result of\nyour coding process;</LI>\n</UL>\n&nbsp;\n</BODY>\n</HTML>\n", "encoding": "ascii"}