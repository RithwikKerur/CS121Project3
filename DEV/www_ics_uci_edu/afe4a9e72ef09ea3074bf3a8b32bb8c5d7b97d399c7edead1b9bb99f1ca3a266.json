{"url": "https://www.ics.uci.edu/~eppstein/junkyard/euler/ear.html", "content": "<html><head>\n<title>Euler's Formula</title>\n</head><body>\n<h1><a href=\"http://www.ics.uci.edu/~eppstein/junkyard/\"><img src=\"../junkyard.gif\" align=center width=\"545\" height=\"45\" alt=\"The Geometry Junkyard\" border=0></a></h1>\n<hr>\n<h1>Euler's Formula,\nProof 11: Ear Decomposition\n</H1>\n\nA graph is <I>two-edge-connected</I> if removing any edge leaves a connected subgraph.\nTwo-edge-connectivity is equivalent to the existence of an <I>ear decomposition</I>:\na partition of the edges of the graph into a sequence of <I>ears</I>\n(simple paths and cycles), with the first ear being a single vertex; the\nstart and\nend of each successive ear should be vertices occurring in previous\nears, but all\nother vertices in an ear should be new.  Such a decomposition can be\nfound one ear at a time: start each ear by any unused edge <I>e</I> from an\nalready-explored vertex, and continue by a shortest path back to another\nalready-explored vertex (such a path must exist because <I>e</I> cannot\ndisconnect the graph).\n<P>\nWe can use such a decomposition in a proof of the Euler formula for polyhedra:\n<BLOCKQUOTE>\nThe graph G of a polyhedron is two-edge-connected, since if we remove an edge e\nwe can still connect its endpoints by a path around the other side of one of the\ntwo faces of G containing e.\n<P>\nFind an ear decomposition of G, and consider the process of forming G by\nadding ears one at a time starting\nfrom a single vertex.  Initially there is one vertex, one face, and no edges.\nEach new ear forms a path connecting two vertices on the boundary of a face,\nsplitting the face in two; the path has one more edge than it has vertices.\nSo if the ear has <I>k</I> edges, its addition increases V by\n<I>k</I>-1, E by <I>k</I>, and F by 1,\nand the result follows by induction on the number of ears.\n</BLOCKQUOTE>\nEar decompositions have been especially useful in the design of parallel algorithms,\nsince they are easier to find in parallel than are other structural decompositions\nof graphs such as depth first search trees.\nFor an example of this see my work on\n<a href=\"http://www.ics.uci.edu/~eppstein/pubs/p-serpar.html\">recognizing\nseries parallel graphs</a>.\n<P><HR><P>\n<a href=\"/~eppstein/junkyard/euler/\">Proofs of Euler's Formula</a>.<BR>\nFrom the <a href=\"/~eppstein/junkyard/\">Geometry Junkyard</a>,\ncomputational\nand recreational geometry pointers.<BR>\n<a href=\"http://www.ics.uci.edu/~eppstein/\">David Eppstein</a>,\n<a href=\"http://www.ics.uci.edu/~theory/\">Theory Group</a>,\n<a href=\"http://www.ics.uci.edu/\">ICS</a>,\n<a href=\"http://www.uci.edu/\">UC Irvine</a>.<P>\n<SMALL>Semi-automatically\n<a href=\"http://www.ics.uci.edu/~eppstein/pubs/filter.html\">filtered</a>\nfrom a common source file.\nLast update: <!--#flastmod file=\"euler.ff\" -->.</SMALL>\n", "encoding": "ascii"}