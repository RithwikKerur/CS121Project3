{"url": "https://www.ics.uci.edu/~dillenco/compsci261p/labs/lab1.html", "content": "<HTML><HEAD>\n</HEAD><BODY>\n<H2>CompSci 261P Project #1: Hashing algorithms</H2>\n\n<p>\nIn this project you are to implement two different hashing algorithms \nand perform an empirical comparative analysis of their performance.\n\n<p>\nThe hashing algorithms to be implemented are:\n<ol>\n<li>Either Linear Probing  or Chained Hashing (your choice).\n<li>Cuckoo hashing\n</ol>\n\n<p>\nFor the empirical analysis, run the algorithms on a variety of test\ncases to determine the relative efficiencies of the algorithms as functions\nof the load factor. For each algorithm, perform runtime experiments using \nrandomly generated data. Choose a sequence of load factors,\nand perform multiple runs for each load factor.\n\n<p>\nFor each of the two algorithms, plot the results on a log-log scale.  \nUse the plot to determine how the running time depends on the load factor.\nIf the data is well-fit with a line, \nthen the slope of the line can be used to determine the exponent \nin the running time, as explained in this \n<a href=\"https://en.wikipedia.org/wiki/Log-log_plot\">\nWikipedia article about log-log plots<a>\n(particularly the section \"Relation with monomials\").\nThink carefully about what the x-axis should be.\nFor example, with Linear Probing, you might glean more \ninformation if the x-axis is the log of 1/(1-&alpha;)\nrather than the log of &alpha;.\n\n<p>\nThere are some design parameters and decisions that are not specified that \nyou will need to decide on.  \nThese should be addressed in the report.\nHere are some examples.  The list may not be exhaustive.\n<ul>\n<li> Whether to measure worst-case or amortized time.\n<li> Whether to use actual clock time or count the number of keys accessed.\n<li> How the random data is generated\n<li> The access pattern for the data\n<li> The choice of hash function(s)\n</ul>\n\n<p>\nYou may implement your source code in any of the following languages: \nC, C++, Java, or Python.  If you implement it in C or C++, the following\nconsiderations apply:\n<ul>\n<li> Your code must run on one of the openlab machines. \nSo you can develop it under any environment you like, but you should make\nsure it runs on one of the openlab machines using the compiler specified\nin the next item, because that is where we will test it.\n<li> We will use openlab gcc 5.4.0 to test your code.  \nTo check which version you are running, type <b>gcc --version</b>.  \nTo load gcc 5.4.0, type <b>module load gcc/5.4.0</b>.\n(And just to be sure, type <b>gcc --version</b> again.)\n<li> In your documentation, be sure to tell us which openlab machine you\ntested it on.\n</ul>\n\n<H3>Deliverables</H3>\n\n\n<ol>\n<li> A ZIP file that includes the following:\n<ul>\n<li>Source code (C, C++, Java, or Python) of your program that implements and experimentally tests the running times of the two algorithms.\nFor implementing the hashing algorithms, the only libraries you should use are\ndynamic arrays and linked lists.  \n<li> The data used for any test cases or experiments \n</ul>\n<li>A Report (in PDF) that includes the following:\n<ul>\n<li>A description  of the algorithms that you \nimplemented.\n<li>Design choices implemented in the source code and in the design of the\nexperiments.\n<li>A comparative experimental analysis of the algorithms and \nconclusions drawn from the experiments. \nThis portion of the report should include the log-log plots.\nUse the slope of the best line fit to determine the relation between\nthe running time and the load factor.\n</ul>\n</ol>\n\n<H3>Project Submission</H3>\n\nSubmit your project using the EEE Dropbox system.\nYour submission should go into the following two drop boxes:\n<ul>\n<li> CS 261P Lab 1 Report: Submit your Report (a single PDF file) here\n<li> CS 261P Lab 1 Pgms: Submit a single zip file containing all your \ncode and your data here.\n</ul>\n<H3>Grading</H3>\n<ul>\n<li> Code and documentation: 40%\n<li> Experimental analysis: 60%\n</ul>\n\n<H3>Final Note</H3>\n<ul>\n<li> <b>Test your code throughly</b>.  If we find bugs in your code, \nthen not only will you lose points for the code and documentation,\nit calls into question your experimental analysis.\n</ul>\n<br>\n\nLast modified: October 9, 2019\n\n</BODY>\n\n\n\n", "encoding": "ascii"}