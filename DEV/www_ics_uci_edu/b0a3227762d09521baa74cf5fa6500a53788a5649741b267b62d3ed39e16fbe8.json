{"url": "https://www.ics.uci.edu/~ejw/authoring/versioning/draft-ramaswamy-version-control-00.txt", "content": "\n\n\n\nInternet Draft                                              S. Ramaswamy\nDocument: draft-ramaswamy-version-control-00.txt     Cisco Systems, Inc.\n                                                           February 1999\n                                                     Expires August 1999\n\n\n\n                       Version Control Protocol\n\n\nStatus of this Memo\n\n   This document is an Internet-Draft and is in full conformance with\n   all provisions of Section 10 of RFC2026.\n\n   Internet-Drafts are working documents of the Internet Engineering\n   Task Force (IETF), its areas, and its working groups.  Note that\n   other groups may also distribute working documents as Internet-\n   Drafts.\n\n   Internet-Drafts are draft documents valid for a maximum of six months\n   and may be updated, replaced, or obsoleted by other documents at any\n   time.  It is inappropriate to use Internet-Drafts as reference\n   material or to cite them other than as ``work in progress.''\n\n   The list of current Internet-Drafts can be accessed at\n   http://www.ietf.org/ietf/1id-abstracts.txt\n\n   The list of Internet-Draft Shadow Directories can be accessed at\n   http://www.ietf.org/shadow.html.\n\n\n1. Abstract\n\n   Version control has a wide range applications starting from a simple\n   ASCII text file management to a complex software source management.\n\n   This document discusses the basic requirement and framework for an\n   open interface for Version Control System. Such an open interface\n   would bring platform independence as well as flexibility and\n   extensibility.\n\n\n\n\nS. Ramaswamy                                                    [Page 1]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n2. Conventions used in this document\n\n   In examples, \"C:\" indicates lines sent by a client that is connected\n   to a server.  \"S:\" indicates lines sent by the server to the client.\n\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC-2119].\n\n\n3. Architecture\n\n   This version control architecture consists of clients and servers.\n   The client provides an interface to the user while the server\n   manages one or more source repositories. A client may associate\n   itself with multiple servers if the repositories are distributed.\n\n\n3.1. Projects\n\n   A Project is a logical unit of work. It is identified by a name and\n   that becomes the root of its source tree. Typically a VCP server\n   would manage one or more projects. A project could be made\n   distributed across more than one server, esp., the sub projects.\n\n3.2. Sub-Projects\n\n   A project might contain sub-projects within it. It is possible that\n   more than one project would refer a particular project as their\n   sub-project. Idea behind having sub-projects is to provide\n   relationships among projects.\n\n   In the following sections whatever is mentioned about a project is\n   also applicable to sub-project equally.\n\n\n3.3. Elements\n\n   A project consists of a tree of Elements. An element is a basic unit\n   of operation. It is similar to the file or directory of a file\n   system. Elements can be of the following types:\n\n           Directory\n           Text File\n           Binary File\n\n   The source control operations are basically defined for an element\n   or group of elements.\n\n\n\n\nS. Ramaswamy                                                    [Page 2]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n4. Version Control\n\n4.1. Checkout and Checkin\n\n   Checkout and checkin are the two basic operations in the version\n   control. A checkout operation allows the element to be modified by\n   the user who performed the checkout. When an element is checked out\n   other users cannot checkout but only see the latest revision that\n   was checked in before the checkout.\n\n\n4.2. Revisions\n\n   Revisions are created on an element as new revisions of it are\n   checkedin. Revisions are identified by numbers, starting from 1.\n   When an element is created first it is marked as revision 1. It can\n   go up to a maximum of 65536.\n\n   A specific revision of an element can referred to by the element name\n   followed by the character '%', followed by the revision number.\n\n\n4.3. Branching and Merging\n\n   Branching is done to create a temporary path for revision control\n   for a specific task or purpose. A branch can be created on any\n   element. When a branch is created on an element, all elements under\n   this element are also implicitly branched. A branch can be created\n   on an element that is already branched.\n\n   Each branch is identified by a name. Whenever a branch is created on\n   an element the revision number is set to 1 under that branch. New\n   revisions could be created on that branch which will result in\n   increments of revision number. A specific revision in a specific\n   branch can be identified by the element name followed by the\n   character '%', followed by branch names separated by '/' characters,\n   followed by another '/' character and the revision number. For\n   example, hello.c%INTEGRATION/ALPHA/15 identifies the 15th revision of\n   element hello.c under the branch ALPHA which is under the branch\n   INTEGRATION.\n\n   Once the task or purpose is accomplished the branch may be merged\n   with the main trunk. Merging to the branch from which it was branched\n   is equivalent to creating the next revision in the parent branch.\n   Once a branch is merged with its parent it is considered closed which\n   means no further modifications can be done there.\n\nS. Ramaswamy                                                    [Page 3]\n\n\n\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n4.4. Naming\n\n   Each element is associated with a revision specifier which identifies\n   a specific branch and revision. The revision specifier is defined as:\n\n        RevisionSpec ::= OCTET STRING\n\n   The format of the revision specifier string is:\n\n        <branch-name> [ / <branch-name>]... / <rev-number>\n\n   All project and element names must start with an alphabet followed by\n   alphabets, numbers, or symbols '.', '-', '_'. The names can be of a\n   maximum length of 256.\n\n\n5. Connection\n\n   This section describes the connection establishment and termination\n   procedures between the client and the server.\n\n\n5.1. Connection Establishment\n\n   The server listens on a well-known TCP port for incoming connections\n   from the client. The server administrator may override the default\n   TCP port number. The client makes a connection request to the server\n   using TCP which the server may accept or refuse. Once the connection\n   is established the client can do the transactions such as check-out\n   or check-in a source element.\n\n\n5.2. Connection Termination\n\n   At the end the client closes the connection. However, if for some\n   reason the server decides, it may choose to close the connection by\n   itself.\n\n\n5.3. Access Control\n\n   The source repository should be protected using proper access\n   control mechanism. When the client establishes a connection to the\n   server, it needs to authenticate to the server by providing a\n   password. The server performs the authentication and replies (either\n   allowing or denying access) to the client. The password is sent\n   cleartext.\n\n\n\nS. Ramaswamy                                                    [Page 4]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n   An Element and all elements under this element can be protected\n   (recursively) by means of an access-list. The access list consists\n   of a sequence of access control entries. Each access control entry\n   either grants or revokes a set of rights for a specific user or\n   group to the element and all sub elements, again recursively.\n\n\n5.3.1  Users and Groups\n\n   The definition of user and group are outside the scope of this\n   protocol. The server host must contain the necessary implementation\n   of user and group mechanism. However, the VCP protocol restricts\n   the user and group names as in the following definition:\n\n        PrincipalName ::= OCTET STRING (SIZE (256))\n\n\n5.3.2  Access Lists\n\n   The access list is defined as follows:\n\n        AccessList ::= SEQUENCE OF AccessControlEntry\n\n        AccessControlEntry ::=\n            SEQUENCE {\n                principal        PrincipalName,\n                action           INTEGER {\n                                     deny (0)\n                                     permit (1),\n                                 }\n                rights           RightsMask\n            }\n\n   The RightsMask is a 16-bit rights mask and is defined as follows.\n\n        RightsMask ::= OCTET STRING (SIZE (2))\n\n                Bit #        Right\n                -----        -----\n                  0          Create\n                  1          Delete\n                  2          Read\n                  3          Write\n                  4          List\n                 5-15        Reserved\n\n   The Read and List rights are recursive in nature. That means, if any\n   of these rights are denied for a principal for an element, the same\n   rights are denied for all sub elements.\n\n\n\nS. Ramaswamy                                                    [Page 5]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n5.4. Location\n\n   The resource at the server is located by means of an URL. The URL\n   format is given below:\n\n       vcp://<server>[:<port>]/<project>[/<sub-project>]...[<el-spec>]\n\n   The <server> denotes a valid server name or an IP address. The <port>\n   is optional, so if it is not present then the well-known port is\n   assumed. The <project> specifies the name of the project to work\n   with. The project name may be followed by a sequence of <sub-project>\n   specifiers. Optionally an element specifier path <el-path> can be\n   used to name a specific element.\n\n   The URL specifies the root or context for the operations.\n\n\n6. Command and Data Exchange\n\n   The client and the server communicate by sending and receiving\n   commands and acknowledgements between them. Data is transferred\n   between the client and the server by using files as basic units.\n\n   The LDAP protocol is described using Abstract Syntax Notation 1\n   (ASN.1) [ASN1], and is typically transferred using a subset of ASN.1\n   Basic Encoding Rules [BER]. In order to support future extensions to\n   this protocol, clients and servers MUST ignore elements of SEQUENCE\n   encodings whose tags they do not recognize.\n\n\n6.1.  Commands\n\n   Commands and acknowledgements are basically messages exchanged\n   between the client and the server. Commands are called Requests and\n   acknowledgements are called Responses in this document.\n\n   The client initiates a connection using connection request message\n   and the server replies with the response (acknowledgement) message.\n   From then on, various types of messages are exchanged between the\n   client and the server. Messages can be classified into Request and\n   Response messages.\n\n   Following is the list of messages:\n\n   Connection Messages\n\n        Connect Request\n        Connect Response\n        SetState Request\n        GetState Request\n\n\n\nS. Ramaswamy                                                    [Page 6]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n        State Response\n        Disconnect Request\n        Disconnect Response\n\n   Project Management Messages\n\n        Create Project/Sub-project Request\n        Delete Project/Sub-project Request\n        Modify Project/Sub-project Request\n        Create Branch/Label Request\n        Delete Branch/Label Request\n        Project Response\n\n   Element Management Messages\n\n        Create Element Request\n        Delete Element Request\n        Modify Element Request\n        Find Element Request\n        Find Element Response\n        Search Element Request\n        Search Element Response\n        Checkout Request\n        Checkin Request\n        Label Request\n        Branch Request\n        Merge Request\n        Diff Request\n        Diff Response\n        History Request\n        History Response\n        Reserve/Unreserve Request\n        Element Response\n\n   All these messages would be encapsulated into a higher level message\n   called VCPMessage.\n\n        VCPMessage ::=\n            [APPLICATION 0] SEQUENCE {\n                messageID        MessageID,\n                message            CHOICE {\n                                    connectRequest\n                                            ConnectRequest,\n                                    connectResponse\n                                            ConnectResponse,\n                                    setStateRequest\n                                            SetStateRequest,\n                                    getStateRequest\n                                            GetStateRequest,\n\n\n\nS. Ramaswamy                                                    [Page 7]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n                                    stateResponse\n                                            StateResponse,\n                                    disconnectRequest\n                                            DisconnectRequest,\n                                    disconnectResponse\n                                            DisconnectResponse,\n                                    createProjectRequest\n                                            CreateProjectRequest,\n                                    deleteProjectRequest\n                                            DeleteProjectRequest,\n                                    modifyProjectRequest\n                                            ModifyProjectRequest,\n                                    createBranchLabelRequest\n                                            CreateBranchLabelRequest,\n                                    deleteBranchLabelRequest\n                                            DeleteBranchLabelRequest,\n                                    projectResponse\n                                            ProjectResponse,\n                                    createElementRequest\n                                            CreateElementRequest,\n                                    deleteElementRequest\n                                            DeleteElementRequest,\n                                    modifyElementRequest\n                                            ModifyElementRequest,\n                                    findElementRequest\n                                            FindElementRequest,\n                                    findElementResponse\n                                            FindElementResponse,\n                                    searchElementsRequest\n                                            SearchElementsRequest,\n                                    searchElementsResponse\n                                            SearchElementsResponse,\n                                    checkoutRequest\n                                            CheckoutRequest,\n                                    checkinRequest\n                                            CheckinRequest,\n                                    labelRequest\n                                            LabelRequest,\n                                    branchRequest\n                                            BranchRequest,\n                                    mergeRequest\n                                            MergeRequest,\n                                    diffRequest\n                                            DiffRequest,\n                                    diffResponse\n                                            DiffResponse,\n                                    historyRequest\n                                            HistoryRequest,\n                                    historyResponse\n                                            HistoryResponse,\n\n\n\nS. Ramaswamy                                                    [Page 8]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n                                    reserveRequest\n                                            ReserveRequest,\n                                    elementResponse\n                                            ElementResponse\n                               }\n                    }\n\n\n6.1.1. Connection Messages\n\n\n6.1.1.1.  Connect Request\n\n      The Connect request is the first message sent by the client once\n      the connection is established. The version number should be set 1.\n      The project name identifies the root of the source tree. A branch\n      name may be specified, if not the main branch is assumed. Also, a\n      startDirectory can be specified so that subsequent messages need\n      only to specify paths relative to this directory.\n\n      This message also identifies the user who is making the request.\n      The accessType specifies the level of access requested. Some users\n      may have only read access to a repository. The authentication\n      data contains a unencrypted password.\n\n        ConnectRequest ::=\n\n            [APPLICATION 10] SEQUENCE {\n                version           INTEGER (0 .. 127),\n                projectName       OCTET STRING (SIZE (128)),\n                branch            OCTET STRING (SIZE (256)),\n                startDirectory    OCTET STRING (SIZE (128)),\n                userID            OCTET STRING (SIZE (64)),\n                accessType        INTEGER {\n                                      read-only (0),\n                                      read-write (1),\n                                      write-only (2)\n                                  },\n                authData          AuthenticationData\n            }\n\n        AuthenticationData ::= OCTET STRING (SIZE (256))\n\n\n6.1.1.2.  Connect Response\n\n      This message is sent by the server in response to the Connect\n      request message. It contains a status code indicating the reply.\n\n\n\n\nS. Ramaswamy                                                    [Page 9]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n      If the status is anything other than connected (0) the connection\n      is closed by the server.\n\n        ConnectResponse ::=\n\n            [APPLICATION 11] SEQUENCE {\n                statusCode        INTEGER {\n                                      connected (0),\n                                      no-such-project (1),\n                                      no-such-branch (2),\n                                      no-such-directory (3),\n                                      auth-failed (4)\n                                  }\n            }\n\n\n6.1.1.3.  SetState Request\n\n      This message is sent by the client to use new values for default\n      branch and startDirectory. The request contains a new branch and\n      new start directory. If any of these new values are empty then\n      the old values are left untouched. This message is acknowledged\n      by the server using StateResponse message. The response message\n      will indicate whether the requested operation succeeded or not.\n\n        SetStateRequest ::=\n\n            [APPLICATION 12] SEQUENCE {\n                newBranchName     OCTET STRING (SIZE (64)),\n                newStartDirectory OCTET STRING (SIZE (64))\n            }\n\n\n6.1.1.4.  GetState Request\n\n      This message is sent by the client to request the current state\n      variables, namely, the default branch and the start directory.\n      The message is acknowledged by the server using StateResponse\n      message which contains the value of those state variables.\n\n        GetStateRequest ::=\n\n            [APPLICATION 13] SEQUENCE {\n\n            }\n\n\n\n\n\n\nS. Ramaswamy                                                   [Page 10]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n6.1.1.5.  State Response\n\n      This message is sent by the server to client in response to the\n      GetState or SetState request messages.\n\n        StateResponse ::=\n\n            [APPLICATION 14] SEQUENCE {\n                status            INTEGER {\n                                      success (0),\n                                      failure (1)\n                                  }\n                branchName        OCTET STRING (SIZE (64)),\n                startDirectory    OCTET STRING (SIZE (64))\n            }\n\n\n6.1.1.6.  Disconnect Request\n\n      This message is sent by the client if it wishes to disconnect.\n      A request code is sent which indicates a normal or abort\n      disconnect. If the request code is 'normal', the server does all\n      the cleaning work and then close its side of the connection. If\n      the request code is 'abort' then the server closes the connection\n      first and then does any cleaning work.\n\n        DisconnectRequest ::=\n\n            [APPLICATION 15] SEQUENCE {\n                requestCode       INTEGER {\n                                      normal (0),\n                                      abort (1)\n                                  }\n            }\n\n\n6.1.1.7.  Disconnect Response\n\n      This message is sent by the server as an acknowledgement to\n      Disconnect request. Upon receipt of this message the client\n      closes the connection. The client need not interpret the status\n      code.\n\n        DisconnectResponse ::=\n\n            [APPLICATION 16] SEQUENCE {\n                statusCode        INTEGER {\n                                      success (0)\n                                  }\n            }\n\n\n\nS. Ramaswamy                                                   [Page 11]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n6.1.2. Project Management Messages\n\n6.1.2.1.  Create Project/Sub-project Request\n\n      This message is sent by the client to create a new project. Apart\n      from the project name, a description, a ownerID and an access list\n      must be present in this message. This request should be\n      acknowledged by the ProjectResponse message.\n\n        CreateProjectRequest ::=\n\n            [APPLICATION 17] SEQUENCE {\n                projectName       OCTET STRING (SIZE (128)),\n                description       OCTET STRING (SIZE (512)),\n                ownerID           PrincipalName,\n                accessList        AccessList\n            }\n\n6.1.2.2.  Delete Project/Sub-project Request\n\n      This message is sent by the client to delete a project identified\n      by the projectName. All the version control data as well as\n      history are deleted. This request should be acknowledged by the\n      ProjectResponse message.\n\n        DeleteProjectRequest ::=\n\n            [APPLICATION 18] SEQUENCE {\n                projectName       OCTET STRING (SIZE (128)),\n                comment           OCTET STRING (SIZE (512))\n            }\n\n\n6.1.2.3.  Modify Project/Sub-project Request\n\n      This message is sent by the client to modify the attributes of\n      project, namely, the project name, description, ownerID or the\n      access list. This request should be acknowledged by the\n      ProjectResponse message.\n\n        ModifyProjectRequest ::=\n\n            [APPLICATION 19] SEQUENCE {\n                projectName       OCTET STRING (SIZE (128)),\n                comment           CommentString,\n                modifications     CHOICE {\n                    projectName       OCTET STRING (SIZE (128)),\n                    description       OCTET STRING (SIZE (512)),\n\n\n\n\nS. Ramaswamy                                                   [Page 12]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n                    ownerID           PrincipalName,\n                    accessList        AccessList\n                }\n            }\n\n\n6.1.2.4.  Create Branch/Label\n\n      This message is sent by the client to create or register a branch\n      or label name. The names have to be unique in a project. This\n      message is acknowledged by the ProjectResponse message.\n\n        CreateBranchLabelRequest ::=\n\n            [APPLICATION 20] SEQUENCE {\n                projectName       OCTET STRING (SIZE (128)),\n                comment           CommentString,\n                name              CHOICE {\n                         branchName    OCTET STRING (SIZE (256)),\n                         labelName     OCTET STRING (SIZE (256))\n                                  }\n            }\n\n\n6.1.2.5.  Delete Branch/Label\n\n      This message is sent by the client to delete or deregister a\n      branch or label name. Deleting a branch name or a label name\n      does not affect any elements belonging to that branch or carrying\n      that label. This message is acknowledged by the ProjectResponse\n      message.\n\n        DeleteBranchLabelRequest ::=\n\n            [APPLICATION 21] SEQUENCE {\n                projectName       OCTET STRING (SIZE (128)),\n                comment           CommentString,\n                name              CHOICE {\n                         branchName    OCTET STRING (SIZE (256)),\n                         labelName     OCTET STRING (SIZE (256))\n                                  }\n            }\n\n\n6.1.2.6.  Project Response\n\n      This message is sent by the server as an acknowledgement to the\n      Project request messages. The status code indicates the result\n      of the operation.\n\n\n\nS. Ramaswamy                                                   [Page 13]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n        ProjectResponse ::=\n\n            [APPLICATION 22] SEQUENCE {\n                statusCode        INTEGER {\n                                      success (0),\n                                      no-such-project (1),\n                                      no-such-directory (2),\n                                      invalid-project (3),\n                                      invalid-acl (4)\n                                  }\n            }\n\n\n6.1.3. Element Management Messages\n\n6.1.3.1.  Create Element Request\n\n      This message is sent by the client to create an element. The\n      element could be an ASCII file, a binary file or a directory.\n      If no access list is specified in this message, it is inherited\n      from the project.\n\n      When the server receives this message, it creates the requested\n      element. If the element is a file, it then responds with the\n      GetFileData message, asking for the file. The client then\n      transmits the file by sending a sequence of VCPData messages.\n      After receiving the file the server acknowledges the file by\n      using an ElementResponse message.\n\n        CreateElementRequest ::=\n\n            [APPLICATION 23] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                elementType       INTEGER {\n                                      ascii-file (0),\n                                      binary-file (1),\n                                      directory (2)\n                                  },\n                description       OCTET STRING (SIZE (512)),\n                acl               AccessList\n            }\n\n\n6.1.3.2.  Delete Element Request\n\n      This message is sent by the client to delete an element. Checked\n      out elements cannot be deleted. The server acknowledges this\n      message by sending back an ElementResponse message. If no\n      revision is specified then all the revisions of this element are\n      deleted.\n\n\n\nS. Ramaswamy                                                   [Page 14]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n        DeleteElementRequest ::=\n\n            [APPLICATION 24] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                revision          RevisionSpec,\n                comment           CommentString,\n                acl               AccessList\n            }\n\n\n6.1.3.3.  Modify Element Request\n\n      This message is sent by the client to modify an element's name or\n      access list. The new access list can either be used to overwrite\n      or overlay on top of the existing list. The modification is\n      applicable to all revisions of the element. This message is\n      acknowledged by the server by sending the ElementResponse message\n      reply.\n\n      The element can also be moved to a different location (directory)\n      in the tree by giving the appropriate prefix in the newName.\n\n        ModifyElementRequest ::=\n\n            [APPLICATION 25] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                modification      CHOICE {\n                    newName           OCTET STRING (SIZE (64)),\n                    newAcl            SEQUENCE {\n                        overwrite          Boolean,\n                        acl                AccessList\n                                      }\n                                  },\n                comment           CommentString,\n            }\n\n\n6.1.3.4.  Find Element Request\n\n      This message is sent by the client to find an element under a\n      root. The search string might contain wildcard ('*') characters.\n      This server sends a reply in the form of a FindElementResponse\n      message which contains the find result. If root string is empty,\n      then either the startDirectory or current project root directory,\n      in that order, is assumed.\n\n\n\n\nS. Ramaswamy                                                   [Page 15]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n        FindElementRequest ::=\n\n            [APPLICATION 26] SEQUENCE {\n                findRoot        OCTET STRING (SIZE (128)),\n                findString      OCTET STRING (SIZE (256))\n            }\n\n\n6.1.3.5.  Find Element Response\n\n      This message is sent by the server to client in response to a\n      FileElementRequest message. It contains the list of matched\n      element names. The list will be empty if there are no matches.\n\n        FindElementResponse ::=\n\n            [APPLICATION 27] SEQUENCE {\n                elementNames      SEQUENCE OF OCTET STRING (SIZE (64))\n            }\n\n\n6.1.3.6.  Search Elements Request\n\n      This message is sent by the client to search the elements for a\n      regular expression pattern. The elementSpecList contains a list\n      of element name expressions, which may contain wild cards. At a\n      minimum the following wild card characters '*', '.', '+', '[',\n      '-', ']', '^', '$' must be supported by the server. The server\n      responds with SearchElementsResponse message.\n\n        SearchElementsRequest ::=\n\n            [APPLICATION 28] SEQUENCE {\n                elementSpecList   SEQUENCE OF OCTET STRING (SIZE (64)),\n                searchString      OCTET STRING (SIZE (256))\n            }\n\n\n6.1.3.7.  Search Elements Response\n\n      The message is sent by the server containing the search results\n      as a response to SearchElementsRequest message. The result is a\n      list of text lines, along with the element name and the line\n      number. The elementName may be empty if the search request\n      specified exactly one element.\n\n\n\n\nS. Ramaswamy                                                   [Page 16]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n        SearchElementsResponse ::=\n\n            [APPLICATION 29] SEQUENCE OF {\n                elementName       OCTET STRING (SIZE (64)),\n                lineNumber        INTEGER,\n                text              OCTET STRING\n            }\n\n\n6.1.3.8.  Checkout Request\n\n      This message is sent by the client to checkout an element. Only\n      the latest revision can be checked out. If the element is a\n      directory and recursive is true then all the sub elements are\n      recursively checked out. If the element is a file it is\n      transferred to the client. The file transfer protocol is described\n      later. After completing this operation the server sends an\n      acknowledgement in the form of an ElementResponse message.\n\n        CheckOutElementRequest ::=\n\n            [APPLICATION 30] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                comment           CommentString,\n                recursive         Boolean\n            }\n\n\n6.1.3.9.  Checkin Request\n\n      This message is sent by the client to checkin an element. If the\n      element is a file then the file is transferred to the server and\n      checked in. The file transfer protocol is described later. After\n      completing this operation the server sends an acknowledgement in\n      the form of an ElementResponse message.\n\n        CheckInElementRequest ::=\n\n            [APPLICATION 31] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                comment           CommentString\n            }\n\n\n\n\nS. Ramaswamy                                                   [Page 17]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n6.1.3.10.  Label Request\n\n      This message is sent by the client to label an element. A specific\n      revision may be specified. The label must have already been\n      created. If recursive flag is set all the sub elements (if any)\n      are also labeled. This message is acknowledged by the server by\n      using ElementResponse message.\n\n        LabelElementRequest ::=\n\n            [APPLICATION 32] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                revision          RevisionSpec,\n                label             OCTET STRING (SIZE (256)),\n                recursive         Boolean\n            }\n\n\n6.1.3.11.  Branch Request\n\n      This message is sent by the client to branch an element. A\n      specific revision may be specified. The branch must have already\n      been created. If recursive flag is set all the sub elements\n      (if any) are also branched. This message is acknowledged by the\n      server by using ElementResponse message.\n\n        BranchElementRequest ::=\n\n            [APPLICATION 33] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                revision          RevisionSpec,\n                comment           CommentString,\n                branchName        OCTET STRING (SIZE (256)),\n                recursive         Boolean\n            }\n\n\n6.1.3.12.  Merge Request\n\n      This message is sent by the client to merge an element to its\n      parent branch. Only the latest revision in the current branch\n      could be merged. After the merge the current branch is considered\n      closed for this element. This message is acknowledged by the\n      server by using ElementResponse message.\n\n        MergeElementRequest ::=\n\n            [APPLICATION 34] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                comment           CommentString\n            }\n\n\nS. Ramaswamy                                                   [Page 18]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n6.1.3.13.  Diff Request\n\n      This message is sent by the client to find the difference between\n      two elements. This is applicable only for ascii file elements. The\n      server returns a sequence of diff records in the form of\n      DiffElementResponse message. A specific revision may be specified\n      for either of the element names. If revision is empty, latest\n      revision is assumed. If the second element is empty, the\n      preceding revision of the first element is assumed. The client\n      may request that the white space difference be ignored.\n\n        DiffElementRequest ::=\n\n            [APPLICATION 35] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                revision          RevisionSpec,\n                elementName2      OCTET STRING (SIZE (64)),\n                revision2         RevisionSpec,\n                ignoreWhiteSpace  Boolean\n            }\n\n\n6.1.3.14.  Diff Response\n\n      This message is sent by the server in response to\n      DiffElementRequest message from the client. It contains a\n      sequence of diff records. Each diff record contains the differing\n      texts, information on type of difference and line numbers.\n\n        DiffElementResponse ::=\n\n            [APPLICATION 36] SEQUENCE {\n                records            SEQUENCE OF DiffRecord\n            }\n\n        DiffRecord ::=\n\n            [APPLICATION 37] SEQUENCE {\n                type               INTEGER {\n                                       changed (0),\n                                       deleted (1),\n                                       inserted (2),\n                                       moved (3)\n                                   }\n                text1              OCTET STRING,\n                beginLine1         INTEGER,\n\n\n\n\nS. Ramaswamy                                                   [Page 19]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n                endLine1           INTEGER,\n                text2              OCTET STRING\n                beginLine2         INTEGER,\n                endLine2           INTEGER\n            }\n\n\n6.1.3.15.  History Request\n\n      This message is sent by the client to list the history of\n      activities on an element in reverse chronological order. The\n      activities include creation, branching, labeling, checkouts,\n      checkins, etc. The client may request only a limited number of\n      records. This message is acknowledged by the server in the form\n      of HistoryResponse message which contains the history data.\n\n        HistoryElementRequest ::=\n\n            [APPLICATION 38] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                limit             INTEGER\n            }\n\n\n6.1.3.16.  History Response\n\n      This message is sent by the server in response to HistoryRequest\n      message from the client. It contains a sequence of history\n      records.\n\n        HistoryElementResponse ::=\n\n            [APPLICATION 39] SEQUENCE {\n                records            SEQUENCE OF HistoryRecord\n            }\n\n        HistoryRecord ::= OCTET STRING\n\n\n6.1.3.17.  Reserve/Unreserve Request\n\n      This message is sent by the client to either reserve or unreserve\n      an element. This operation is permitted only for the owner of the\n      element. Reserving a elements prevents other who have the\n      necessary permission from checking out. This message is\n      acknowledged by the server by using the ElementResponse message.\n\n\n\n\nS. Ramaswamy                                                   [Page 20]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n        ReserveElementRequest ::=\n\n            [APPLICATION 40] SEQUENCE {\n                elementName       OCTET STRING (SIZE (64)),\n                reserve           Boolean\n            }\n\n\n6.1.3.18.  Element Response\n\n      This is a generic acknowledgement message used by various element\n      request messages. It indicates to the client whether the\n      requested operation succeeded or not.\n\n        ElementResponse ::=\n\n            [APPLICATION 41] SEQUENCE {\n                statusCode        INTEGER {\n                                    success (0),\n                                    failure (1)\n                                }\n            }\n\n\n6.2.  Data Exchange\n\n   The data consist of files being version controlled. The files are\n   transferred inline between the client and the server when certain\n   messages are processed by the server. Only block mode of file\n   transfer is supported. This means EOF is explicitly indicated in\n   the message.\n\n   The request for receiving a file either by the client or by the\n   server is done by using the following message:\n\n        GetFileData ::=\n\n            [APPLICATION 1] SEQUENCE {\n                fileName         OCTET STRING\n            }\n\n   The request for sending a file either by the client or by the server\n   is done by using the following message:\n\n        PutFileData ::=\n\n            [APPLICATION 2] SEQUENCE {\n                fileName         OCTET STRING\n            }\n\n\n\n\nS. Ramaswamy                                                   [Page 21]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n\n   The data is encapsulated in the following message:\n\n        VCPData ::=\n\n            [APPLICATION 2] SEQUENCE {\n                more            Boolean,\n                data            OCTET STRING\n            }\n\n   The receiver keeps receiving the data until the more flag is reset.\n\n   Files could be transferred in ASCII, Binary or Continuous modes\n   [SFTP].\n\n\n6.2.1.  ASCII Mode File Transfer\n\n   The ASCII bytes are taken from the file in the source system,\n   transmitted over the connection, and stored in the file in the\n   destination system. The data is the 7-bit ASCII codes, transmitted\n   in the low-order 7 bits of 8-bit bytes. The high-order bit of the\n   transmission byte must be zero, and need not be stored in the file.\n\n   The data is \"NETASCII\" and is to follow the same rules as data sent\n   on Telnet connections.  The key requirement here is that the local\n   end of line is to be converted to the pair of ASCII characters CR\n   and LF when transmitted on the connection.\n\n\n6.2.2.  Binary Mode File Transfer\n\n   The 8-bit bytes are taken from the file in the source system,\n   transmitted over the connection, and stored in the file in the\n   destination system. The data is in 8-bit units. In systems with word\n   sizes which are not a multiple of 8, some bits of the word will not\n   be transmitted.\n\n\n6.2.3.  Continuous Mode File Transfer\n\n   The bits are taken from the file in the source system continuously,\n   ignoring word boundaries, and sent over the connection packed into\n   8-bit bytes. The destination system stores the bits received into\n   the file continuously, ignoring word boundaries.\n\n   For systems on machines with a word size that is a multiple of 8\n   bits, the implementation of binary and continuous modes should be\n   identical.\n\n\n\n\nS. Ramaswamy                                                   [Page 22]\n\f\nInternet DRAFT       Implementation Recommendations        February 1999\n\n   \n7. References\n\n   [SFTP], Lottor, M., \"Simple File Transfer Protocol\", RFC 913,\n   September 1984.\n\n   [ASN1] ITU-T Rec. X.680, \"Abstract Syntax Notation One (ASN.1) -\n   Specification of Basic Notation\", 1994.\n\n   [BER] ITU-T Rec. X.690, \"Specification of ASN.1 encoding rules:\n   Basic, Canonical, and Distinguished Encoding Rules\", 1994.\n\n\n8. Author's Address\n\n   Saravanan Ramaswamy\n   Cisco Systems, Inc.\n   Mail stop: SJC 1/3\n   3850 Zanker Rd\n   San Jose CA 95134\n\n   Phone: 1-408-526-6140\n   Email: rsaravan@cisco.com\n\n\n\n\n\n\n\n\n\nS. Ramaswamy                                                   [Page 23]\n", "encoding": "ascii"}