{"url": "https://www.ics.uci.edu/~thornton/ics33/ProjectGuide/Project2/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 33 Summer 2013, Project #2: Eight Line Poem</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 33 Summer 2013 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../ProjectGuide\">Project Guide</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 33 Summer 2013<br />\n   Project #2: <i>Eight Line Poem</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Monday, July 22, 11:59pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>When I was a young kid, one of my teachers introduced me to a computer for the first time &mdash; a <a href=\"http://en.wikipedia.org/wiki/TRS-80\">Radio Shack TRS-80 Model I</a>.  First, I played little math games and messed around with other \"state of the art\" educational tools from the early 1980s; the state of the art wasn't much then, but it was fun and new.</p>\n\n<p>Then one day, my teacher asked me if I wanted to learn how to write my own programs.  I thought it sounded like a great idea.  So I picked up a book about a language called BASIC &mdash; some of you may have experimented with it before &mdash; and typed in a short program that asked a user for a number of hits and a number of at-bats and printed out a batting average (foreshadowing my later interest in baseball, though I didn't know what it meant at the time).  I ran the program, tried it out, and I was mesmerized; the computer did exactly what I asked it to, exactly the way I asked it to.  I was hooked.  And I still am.</p>\n\n<p>BASIC was a good teaching tool for its day: versatile and easy to learn, much like Python is today.  For this project, I've designed a considerably limited version of BASIC called Bumpkin, which supports only a small handful of kinds of statements.  You'll be building a Bumpkin <i>interpreter</i>, a program written in Python that takes a Bumpkin program as its input and executes the Bumpkin program and shows its output.  (This may sound a little mind-bending, but it's not as crazy as it sounds.  The Python interpreter you've been using was most likely written in a language other than Python; the most popular one is written in a language called C.)</p>\n\n<p>In building your interpreter, you'll gain experience in a few areas that will stretch your abilities:</p>\n\n<ul>\n  <li>Continuing to develop your understanding of object-oriented design, as you'll be on the lookout for concepts in the program that would best be represented as <i>classes</i>.</li>\n  <li>Using <i>inheritance</i>, which is Python's mechanism for defining new classes in terms of existing ones, a surprisingly useful thing to be able to do.</li>\n  <li>Writing <i>unit tests</i> for parts of your program, so that you can verify that they work before you build larger parts on top of them.</li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The Bumpkin language</p>\n\n<p>I'll discuss the requirements for your interpreter later in the write-up.  First, let's talk about the Bumpkin language.  Bumpkin is a programming language, though it behaves somewhat differently from Python, so we'll first need to acquaint ourselves with how it works.</p>\n\n<p>A Bumpkin program is a sequence of <i>statements</i>, one per line.  Here's an example of a Bumpkin program:</p>\n\n<blockquote><pre>\nLET A 3\nPRINT A\nGOSUB 7\nPRINT A\nPRINT B\nGOTO 10\nLET A 4\nLET B 6\nRETURN\nPRINT A\n.\n</pre></blockquote>\n\n<p>Each line contains exactly one statement (i.e., there may be no blank lines).  Bumpkin assigns a <i>line number</i> to each of the lines, where the first line of the program is numbered 1, the second line is numbered 2, and so on.  The last line of the program is a period (.) on a line by itself.  Execution of a Buumpkin program always begins at line number 1.  There is no predefined limit on the number of lines in a Bumpkin program.</p>\n\n<p class=\"subtitle\">Labels and spacing</p>\n\n<p>Any line of a Bumpkin program can also begin with a <i>label</i>, which is a name that can be used to refer to that line elsewhere in the program without having to rely on its line number.  Labels are a single word appearing at the beginning of a line, immediately followed by a colon.  Labels must begin with a letter, optionally followed by one or more letters or digits.</p>\n\n<blockquote><pre>\n        LET A 3\n        PRINT A\n        GOSUB CHUNK\n        PRINT A\n        PRINT B\n        GOTO FINAL\nCHUNK:  LET A 4\n        LET B 6\n        RETURN\nFINAL:  PRINT A\n        .\n</pre></blockquote>\n\n<p class=\"subtitle\">Spacing</p>\n\n<p>One of the features of Python's syntax is that the way you space your program &mdash; indention, empty lines, and so on &mdash; has an effect on your program's meaning.  Bumpkin, in that sense, is different.  While Bumpkin programs may not have blank lines in them, the amount and placement of blank space between the words on each line is considered irrelevant.  So the following is a legal Bumpkin equivalent to the previous one shown.</p>\n\n<blockquote><pre>\n            LET        A    3\n   PRINT        A\n      GOSUB    CHUNK\n        PRINT    A\n  PRINT   B\n     GOTO         FINAL\n         CHUNK:  LET A 4\n  LET   B                            6\n              RETURN\n  FINAL:     PRINT    A\n          .\n</pre></blockquote>\n\n<p class=\"subtitle\">Variables</p>\n\n<p>A Bumpkin program can utilize <i>variables</i> to store integer values.  Variables have names that begin with a letter optionally followed by a sequence of letters and digits; legal variable names include <b>X</b>, <b>BOO</b>, <b>U2</b>, or <b>THIS1ISTHELAST1</b>.</p>\n\n<p>Variables do not need to have values assigned to them before they are used, and any variable that is used before it is used has the value 0.</p>\n\n<p>The value of a variable can be changed with a <b>LET</b> statement.  A LET statement changes the value of one variable, by either assigning it an integer constant or the value of another variable.</p>\n\n<ul>\n  <li><b>LET A 3</b> &mdash; changes the value of the variable A to 3</li>\n  <li><b>LET XYZ -7</b> &mdash; changes the value of the variable XYZ to -7</li>\n  <li><b>LET QQQ SSS</b> &mdash; changes the value of the variable QQQ to have a copy of the value stored in the variable SSS</li>\n</ul>\n\n<p>You can print the value of a variable to the console by using a <b>PRINT</b> statement.  A PRINT statement prints the value of one variable, followed by a newline.</p>\n\n<p>So, consider the following short Bumpkin program:</p>\n\n<blockquote><pre>\nLET A 3\nLET Z -9\nPRINT A\nPRINT Z\n.\n</pre></blockquote>\n\n<p>Its output would be:</p>\n\n<blockquote><pre>\n3\n-9\n</pre></blockquote>\n\n<p class=\"subtitle\">Execution of a Bumpkin program</p>\n\n<p>A Bumpkin program is executed one line at a time, beginning at line number 1.  Ordinarily, execution proceeds forward, so that line 1 will execute first, followed by line 2, followed by line 3, and so on.  Execution continues until either an <b>END</b> statement is reached, or until the \".\" line that appears on the last line of the program.</p>\n\n<p>Like any programming language, it is possible in Bumpkin to write programs that execute out of sequence, though the mechanisms are a bit more primitive than they are in a language like Python.  A <b>GOTO</b> statement causes execution to \"jump\" immediately to the given number.  For example, the statement <b>GOTO 4</b> jumps execution to line number 4.  Here's an example Bumpkin program that uses GOTO:</p>\n\n<blockquote><pre>\nLET A 1\nGOTO 4\nLET A 2\nPRINT A\n.\n</pre></blockquote>\n\n<p>In this program, line 1 is executed first, setting the variable A's value to 1.  Then the GOTO statement will immediately jump execution of the program to line 4, skipping the second LET.  Line 4 prints the value of A, which is still 1.  So, the output of the program is simply <b>1</b>.</p>\n\n<p>A GOTO statement may jump either forward or backward, meaning that the following program is a legal Bumpkin program.  See if you can figure out what its output would be.  (Remember that the value of a variable that hasn't yet been assigned with a LET is 0.)</p>\n\n<blockquote><pre>\nLET Z 5\nGOTO 7\nLET C 4\nPRINT C\nPRINT Z\nEND\nPRINT C\nPRINT Z\nGOTO 3\n.\n</pre></blockquote>\n\n<p>Alternatively, GOTO statements can specify a label instead of a line number, in which case execution jumps to the line that is marked with that label.  A Bumpkin program equivalent to the previous one, but that uses labels instead of line numbers, follows.</p>\n\n<blockquote><pre>\n        LET Z 5\n        GOTO CZ\nCCZ:    LET C 4\n        PRINT C\n        PRINT Z\n        END\nCZ:     PRINT C\n        PRINT Z\n        GOTO CCZ\n        .\n</pre></blockquote>\n\n<p>GOTO statements are not permitted to jump beyond the boundaries of the program, to lines before line 1 or lines after the \".\" that completes the program.  If such a GOTO statement is encountered while a program is executed, the interpreter terminates with an error message.  Similarly, GOTO statements are not permitted to jump to non-existent labels; this, too, terminates the interpreter with an error message.</p>\n\n<p class=\"subtitle\">Arithmetic operations</p>\n\n<p>Bumpkin provides the typical arithmetic operations that can be performed on variables: addition, subtraction, multiplication, and division.  Each operation is provided as a statement that changes the value of the given variable, making it equivalent to operators like +=, -=, etc., in Python.  The first operand must be the name of a variable; the second can either be an integer constant or the name of a variable.  Here are examples of their use:</p>\n\n<blockquote><pre>\nLET A 4\nADD A 3\nPRINT A\nLET B 5\nSUB B 3\nPRINT B\nLET C 6\nMULT C B\nPRINT C\nLET D 7\nDIV D 2\nPRINT D\n.\n</pre></blockquote>\n\n<p>In the example above, the ADD statement adds 3 to the value of A, storing the result in A.  So, printing A will display 7 on the console.  The output of the program above is:</p>\n\n<blockquote><pre>\n7\n2\n12\n3\n</pre></blockquote>\n\n<p>It is important to note that, since all variables in Bumpkin have integer values, the DIV statement implements integer division, meaning that its result is the floor (or integral part) of the quotient.  So, in the example above, 7 / 2 = 3.  The second operand must not be zero, meaning that the statement <b>DIV A 0</b> is illegal.  When a Bumpkin program encounters a division by zero, it immediately terminates with an error message.</p>\n\n<p class=\"subtitle\">The IF statement</p>\n\n<p>Bumpkin provides an IF statement, which acts like a conditional GOTO.  It compares the value of some variable to some value, and jumps execution of the program to the given line number or label if the comparison is true.  The comparison can use one of the typical relational operators: &lt;, &lt;=, &gt;, &gt;=, = (equal to), or &lt;&gt; (not equal to).</p>\n\n<blockquote><pre>\nLET A 3\nLET B 5\nIF A &lt; 4 THEN 5\nPRINT A\nPRINT B\n.\n</pre></blockquote>\n\n<p>In the program above, the variables A and B are given the values 3 and 5, respectively.  An IF statement then compares A to 4.  Since A is less than 4, execution jumps to line 5.  B's value is printed out.  So this program's output is simply:</p>\n\n<blockquote><pre>\n5\n</pre></blockquote>\n\n<p>The IF statement in Bumpkin is substantially less flexible than its Python equivalent.  In an IF statement in Bumpkin, the token IF must be followed by exactly five words.  The first must be the name of a variable.  The second must be one of the relational operators (&lt;, &lt;=, &gt;, &gt;=, =, or &lt;&gt;).  The third must be an integer constant.  The fourth must be the word THEN. The fifth must be a line number or a label.  They behave in the way you might expect.  For example: <b>IF C &lt;&gt; 0 THEN X</b> means \"jump to the line labeled X if C is not equal to 0\".</p>\n\n<p>Like GOTO statements, IF statements are not permitted to jump beyond the boundaries of the program or to a non-existent label.  An attempt to do so should cause the Bumpkin program to terminate with an error message.</p>\n\n<p class=\"subtitle\">Subroutines</p>\n\n<p>There are no methods or functions in Bumpkin, but there is a simplified mechanism called a <i>subroutine</i>.  A subroutine is a chunk of Bumpkin code that can be \"called\" by issuing a GOSUB statement.  GOSUB is much like GOTO; it causes execution to jump to a particular line (given a line number or a label).  However, GOSUB also causes the Bumpkin program to remember where it jumped from.  Subsequently, when a RETURN statement is reached, execution continues at the line following the GOSUB statement that caused the jump.  Here's an example:</p>\n\n<blockquote><pre>\nLET A 1\nGOSUB 6\nPRINT A\nPRINT B\nEND\nLET A 2\nLET B 3\nRETURN\n.\n</pre></blockquote>\n\n<p>In the program above, line 1 is executed first, setting the value of A to 1.  Next, a GOSUB statement is reached.  Execution jumps to line 6, but Bumpkin also remembers that when a RETURN statement is reached, execution should jump back to the line following the GOSUB &mdash; in this case, line 3.  Line 6 is executed next, setting A to 2, then line 7 sets B to 3.  Now we reach a RETURN statement, causing execution to jump back to the line number that we're remembering &mdash; line 3.  Line 3 prints the value of A (which is 2), then line 4 prints the value of B (which is 3).  Next, we reach line 5, which is an END statement, so the program ends.</p>\n\n<p>Subroutines can be used very similarly to Python functions or methods, except they do not take parameters or return a value.  Consider the following example, which contains a subroutine that prints the values of A, B, and C each time it's called:</p>\n\n<blockquote><pre>\n           LET A 3\n           GOSUB PRINTABC\n           LET B 4\n           GOSUB PRINTABC\n           LET C 5\n           GOSUB PRINTABC\n           LET A 1\n           GOSUB PRINTABC\n           END\nPRINTABC:  PRINT A\n           PRINT B\n           PRINT C\n           RETURN\n           .\n</pre></blockquote>\n\n<p>Subroutines may call other subroutines, meaning that two or more GOSUB's may be reached before a RETURN is reached.  The rules for this are very similar to functions that call other functions in Python; for each GOSUB that is reached, Bumpkin will remember the line to which it should return.  When a RETURN is reached, execution will move to the line remembered from the <i>most recent</i> GOSUB.  Here's an example:</p> \n\n<blockquote><pre>\nLET A 1\nGOSUB 7\nPRINT A\nEND\nLET A 3\nRETURN\nPRINT A\nLET A 2\nGOSUB 5\nPRINT A\nRETURN\n.\n</pre></blockquote>\n\n<p>In this example, execution begins at line 1 by setting the variable A to 1.  Next, we jump to line 7 with a GOSUB, but remember that we should jump back to line 3 when we encounter a RETURN.  Line 7 prints A (which is 1), then line 8 changes A's value to 2.  Now we've reached line 9, which is another GOSUB statement.  At this point, execution will jump to line 5, but we'll also need to remember to jump back to the line following this GOSUB &mdash; line 10 &mdash; when we reach a RETURN.  But we also need to remember the line from the previous GOSUB &mdash; line 3.</p>\n\n<p>Line 5 sets A to 3, then we encounter our first RETURN statement.  We're remembering two lines &mdash; line 3 and line 10.  But line 10 is the most recently remembered line, so execution jumps to line 10.  Line 10 prints A (which is 3).  Now we encounter another RETURN statement on line 11.  We're remembering the line 3 from the first GOSUB.  So execution jumps to line 3, printing A (which is still 3), then ending the program on line 4.</p>\n\n<p>So, the output of this program is:</p>\n\n<blockquote><pre>\n1\n3\n3\n</pre></blockquote>\n\n<p>Like GOTO statements, GOSUB statements are not permitted to jump beyond the boundaries of the program (to lines before line 1 or lines after the \".\" that completes the program) or to non-existent labels.  If such a GOSUB statement is encountered while a program is executed, the interpreter terminates with an error message.</p>\n\n<p>It is also an error for a RETURN statement to be encountered when there has been no previous GOSUB.  The Bumpkin program will immediately terminate and print an error message in this case, as well.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Experimenting with Bumpkin</p>\n\n<p>Click the link below to experiment with an implementation of a Bumpkin interpreter that you can run in your browser, so you can get an idea of how the language works.</p>\n\n<ul>\n  <li><a href=\"Bumpkin.html\">Experiment with Bumpkin</a></li>\n</ul>\n\n<p>A word of warning about my interpreter: I wrote it without making a serious attempt at handling syntax problems, so it assumes that the input is a legal Bumpkin program.  If you attempt to run an invalid Bumpkin program, you may see a clean error message, but you also may see the interpreter simply crash.</p>\n\n<p>Once you're comfortable with the Bumpkin language, it'll be your turn to implement a Bumpkin interpreter.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Your interpreter</p>\n\n<p>For this project, you'll be building your own <i>Bumpkin interpreter</i>, which is a program that you'll write in Python that is capable of executing a Bumpkin program, generating the correct output according to the specification of the Bumpkin language from the previous sections of this write-up.  (Since Python runs on many operating systems, that means, once completed, you'll be able to use your interpreter to run Bumpkin programs on Windows, Mac OS X, Linux, Unix, and several other platforms.  Not too shabby!)</p>\n\n<p>When your interpreter begins, it prints a prompt &mdash; a single greater-than sign followed by a space &mdash; at which a user can enter one of three commands.  After each command, the prompt is displayed again and the user can continue entering commands until exiting.</p>\n\n<ul>\n  <li><b>RUN <i>file_path</i></b>: Runs the Bumpkin program in the file whose path is specified, displaying the program's output.</li>\n  <li><b>TRACE <i>file_path</i></b>: Traces the Bumpkin program in the file whose path is specified.  Tracing a program is like running it, except that each line of the Bumpkin program, along with a line number, is printed to the console before it is executed, so it becomes possible to see the sequence of events more clearly.</li>\n  <li><b>EXIT</b>: Exits the interpreter.</li>\n</ul>\n\n<p>Note that Bumpkin programs run in isolation from one another.  If a user runs more than one Bumpkin program, the result of the first program (e.g., its output, the values stored in its variables) will not affect the result of the second (e.g., the values of all variables are zero when the second program begins).</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">How does an interpreter work?</p>\n\n<p>A typical interpreter will execute a program one statement at a time, keeping track of what we might call the <i>program state</i> as it goes along.  In the case of a Python interpreter, you might imagine that there would be quite a bit of work to be done, as Python is a fairly complex language.  The interpreter would need to keep track of all of the objects &mdash; creating new ones and garbage-collecting old ones as necessary &mdash; as well as maintain the \"call stack,\" along with various other tasks required by Python programs.  Implementing an efficient, complete Python interpreter is a project that would easily take many programmer-months.</p>\n\n<p>A Bumpkin interpreter is a much simpler program, since Bumpkin is a much simpler programming language.  Your interpreter will need to execute a Bumpkin program one statement at a time, updating the program state as necessary, until either an END statement or the \".\" is reached.  (The \".\" can simply be treated as an END statement, if you'd like.)  The program state consists of the following information:</p>\n\n<ul>\n  <li>What line of code is currently executing (you might call this the <i>program counter</i>)</li>\n  <li>The line number associated with each label</li>\n  <li>The integer values of each variable that has a value assigned to it</li>\n  <li>The line numbers remembered because of any GOSUB statements</li>\n</ul>\n\n<p>Each statement has a different effect on the program state.  For example, a LET statement will cause the value of one of the variables to change, then cause the program counter to be incremented (since, after a LET statement, execution continues on to the next statement), a GOTO statement will cause the program counter to be changed to the line number specified in the statement, and so on.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Reading the program from an input file and representing it in memory</p>\n\n<p>Your program will need to begin executing a Bumpkin program by reading it from a text file and representing it in memory.  There are a number of ways to solve this problem.  One way is to read the program into memory as a collection of strings, with each of the strings containing one line of the input program.  Every time a particular line is executed, it would need to be parsed (to see what kind of statement it was), then executed.  As you might imagine, this is a terribly inefficient way to implement an interpreter, since the same statement may need to be parsed over and over again.  You are not permitted to use this approach for your interpreter.</p>\n\n<p>A better approach &mdash; one that I'm requiring you to use instead &mdash; is to read the input program once, parse it once, and represent it as objects, one object per statement.  Since statements have commonalities (e.g., printing a trace), inheritance provides a very natural design approach for this problem:</p>\n\n<ul>\n  <li>A superclass called Statement contains any functionality common to all statements.</li>\n  <li>For each kind of statement (e.g., LET, PRINT, etc.), a subclass of Statement can be designed (e.g., LetStatement, PrintStatement).  Each class contains fields that store the information needed to execute the statement.  In the case of a LET statement, for example, the necessary information is the name of the variable and the value to assign into it.  Also needed in each of these Statement subclasses is a method that executes it; as we'll see, all of these \"execute\" methods need to have the same signature.</li>\n</ul>\n\n<p>You'll need to write code that can parse the input file and create the appropriate sequence of Statement objects.  You might want to store them in a list, though you should note that line numbers in Bumpkin start at 1, not 0, so I suggest storing <b>None</b> as the first element in the list, then storing the actual Statement objects with indices beginning at 1.  (An alternative, storing the statements beginning at index 0, will require the error-prone practice of adding or subtracting one when converting between line numbers and list indices, which you might find difficult to get right in every case; giving up an empty list cell is an inexpensive way to prevent mistakes.)</p>\n\n<p>While parsing the program, you'll also need to keep separate track of which line number is associated with each label, because you'll need this information when you execute the program.</p>\n\n<p>You may assume that the input file contains a syntactically legal Bumpkin program.  It's acceptable for your program to either print an error message, ignore lines that aren't understood, or even crash in the event that it's given an input file that is not legal Bumpkin.  (It's a good thing Python interpreters don't behave this way!)  We will only test your interpreter with syntactically legal Bumpkin programs, though the programs may have run-time errors in them.  As was discussed above, there are four kinds of run-time errors: division by zero, a RETURN statement without a corresponding GOSUB, a GOTO/GOSUB/IF..THEN to a line outside of the boundaries of the program, or an invalid (i.e., non-existent) label.  Your interpreter will need to behave reasonably in these cases, by printing a meaningful error message and ending the Bumpkin program's run.  Note that you shouldn't print a Python stack trace; you should instead print an error message that is specific to Bumpkin.  (This is for the same reason that Python interpreters show error messages specific to Python, as opposed to error messages that emanate from whatever programming language the Python interpreter was implemented in.)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Designing your interpreter</p>\n\n<p>As the size of a program increases, one of the most difficult obstacles that programmers face is the need to separate their concerns.  One of the primary strategies that programmers use to separate their concerns is to break a large program into a set of smaller pieces.  The obvious mechanism for breaking up a program in Python is the use of classes and functions, remembering that classes have the role of defining new kinds of objects.</p>\n\n<p>It is especially difficult for novice programmers to keep their concerns separate.  The temptation is always to try to think about the complete picture, since this strategy works well for the short programs that you write when you're first starting out.  As programs become larger, confusion naturally sets in, as the complete picture can be difficult to keep in your brain all at once.  Even moderately small Python programs are typically built out of many interacting parts and encompass a great deal of complexity.  My complete Bumpkin interpreter has approximately 15 classes and a handful of functions, spread across several modules.  (Yours may have fewer, because I implemented some optional features, but this gives you a rough order of magnitude to think about.)  Now, before you freak out, bear in mind that many of them are relatively short.  I opted to write more classes with less code in each, so that I could concentrate my efforts on each one largely in the absence of the others.  This project will encourage you to begin thinking about your programs the same way, which will give you the ability to write much larger programs than you could before.</p>\n\n<p>The main tasks that your program must perform are:</p>\n\n<ul>\n  <li>Read the contents of the input file, parsing each line, and storing an object into memory that represents the Bumpkin statement appearing on that line.  For each statement, you'll need to know:\n    <ul>\n      <li>Its line number</li>\n      <li>The label associated with it, if any</li>\n      <li>The text of the line, so it can be printed out during a trace</li>\n      <li>A simplified representation of the information contained in the statement that you'll need when the statement is executed (e.g., for a LET statement, you'd need to know the name of the variable you're assigning, as well as the value to assign to it).  Note that you'll need different information for each different kind of statement.</li>\n    </ul>\n  </li>\n  <li>Create a representation of the initial program state, then begin executing the program one statement at a time.  The execution of each statement will cause the program state to be changed, and may also cause output to appear on the console.  Some things that belong in the program state include:\n    <ul>\n      <li>The <i>program counter</i> (i.e., the line number that is currently executing)</li>\n      <li>The objects representing each statement in the program</li>\n      <li>The values of any variables</li>\n      <li>The line numbers associated with any labels</li>\n      <li>The line numbers being remembered because of GOSUB statements</li>\n    </ul>\n  </li>\n  <li>Continue executing the program until an END statement or the \".\" is reached.  One way to accomplish this goal is for the program's state to contain a boolean attribute specifying whether the program has ended.  Your \"interpreter loop\" could check this attribute and stop if it's True; the END and \".\" statements could set it to True.</li>\n</ul>\n\n<p>I suggest breaking up your program in the following way:</p>\n\n<ul>\n  <li>An <b>if __name__ == '__main__':</b> block that starts a command loop that reads commands from the user.  Until the user enters the <b>EXIT</b> command, continue reading and executing commands.</li>\n  <li>An Interpreter class that will oversee the execution of the interpreter on one input file.  Interpretation requires following the sequence of steps above: parsing the input file, creating an initial program state, then executing one statement at a time until the program ends.  Most of the actual work is delegated to other classes, with Interpreter acting as a manager.</li>\n  <li>A Parser class, which parses the input file and returns an initial ProgramState.</li>\n  <li>A ProgramState class, which allows you to represent the state of an executing Bumpkin program.  It contains methods that provide the \"raw materials\" from which you can implement statements, which might include methods like these (among many others):\n    <ul>\n      <li>Get the value of a variable, given its name</li>\n      <li>Increment the program counter</li>\n      <li>Find out what line number is associated with a label, if any</li>\n    </ul>\n  </li>\n  <li>A Statement class.  This class represents everything that is common amongst all statements in a Bumpkin program.  One key thing that's common is that a trace can be printed out for each statement as the program executes; another is the information required to print out that trace (the line number, the text of the line).</li>\n  <li>Subclasses of Statement such as LetStatement, PrintStatement, etc., that implement the actual statements.  By implementing these as subclasses of Statement, they will inherit the common behavior shared amongst all statements.  An \"execute\" method in each of the different subclasses will specify what happens when you execute that statement; it will need to take the ProgramState as a parameter and affect change on it (by setting the values of variables, changing the program counter, remembering line numbers, etc.).</li>\n</ul>\n\n<p>It's a good idea to build as many of the underlying pieces as you need to implement a couple of the statements, say LET and PRINT, first.  Afterward, add new kinds of statements one or two at a time, making any changes required in the underlying pieces.  The goal, as always, is to find a way to stand on stable ground as early and as often as possible.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Unit testing</p>\n\n<p>Along with your Bumpkin interpreter, you will be required to separately submit unit tests, implemented using the <b>unittest</b> module in the Python standard library (as we did in lecture), for the ProgramState class.  You can feel free to write unit tests for any other part of your interpreter that you'd like &mdash; though there are a couple of things you should be aware of:</p>\n\n<ul>\n  <li>User input and console output are difficult to test using techniques we've learned to date, so you'll probably want to avoid that.</li>\n  <li>Unit tests are intended to be self-contained, so you should be able to run them without requiring particular files (e.g., Bumpkin scripts) to exist already.  Writing your parser to take a sequence of lines instead of a file path is a good way to make it possible to unit test your parser, if you're so inclined.</li>\n</ul>\n\n<p>Remember that unit tests are separate from the program they test, so you would want to write your unit tests in separate modules, and executing the complete Bumpkin interpreter should not execute the unit tests (nor vice versa).</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Bumpkin quick reference</p>\n\n<p>Here is a list of all of the Bumpkin statements (and their different variants) that should be supported by your interpreter, with a brief description of the effect of each.</p>\n\n<table class=\"normal\">\n  <tr class=\"top\">\n    <td>Statement</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>LET <i>var</i> <i>value</i></td>\n    <td>Changes the value of the variable <i>var</i> to the given <i>value</i>, which will either be an integer constant or the name of another variable.</td>\n  </tr>\n  <tr>\n    <td>PRINT <i>value</i></td>\n    <td>Prints the given <i>value</i> to the console; the value will be either an integer constant or the name of a variable.</td>\n  </tr>\n  <tr>\n    <td>ADD <i>var</i> <i>value</i></td>\n    <td>Adds the given <i>value</i> to the value of the variable <i>var</i>, where the value will be either an integer constant or the name of another variable.</td>\n  </tr>\n  <tr>\n    <td>SUB <i>var</i> <i>value</i></td>\n    <td>Subtracts the given <i>value</i> to the value of the variable <i>var</i>, where the value will be either an integer constant or the name of another variable.</td>\n  </tr>\n  <tr>\n    <td>MULT <i>var</i> <i>value</i></td>\n    <td>Multiplies the given <i>value</i> to the value of the variable <i>var</i>, where the value will be either an integer constant or the name of another variable.</td>\n  </tr>\n  <tr>\n    <td>DIV <i>var</i> <i>value</i></td>\n    <td>Divides the given <i>value</i> to the value of the variable <i>var</i>, where the value will be either an integer constant or the name of another variable.</td>\n  </tr>\n  <tr>\n    <td>GOTO <i>line</i></td>\n    <td>Jumps execution of the program to the given <i>line</i> (which will be specified as either a line number or a label).</td>\n  </tr>\n  <tr>\n    <td>IF&nbsp;<i>value1</i>&nbsp;<i>op</i>&nbsp;<i>value2</i>&nbsp;THEN&nbsp;<i>line</i></td>\n    <td>Compares the value <i>value1</i> to the value <i>value2</i> using the relational operator <i>op</i> (=, &lt;&gt;, &lt;, &lt;=, &gt;, &gt;=).  <i>value1</i> and <i>value2</i> will either be the value of a variable or an integer constant.  If the comparison is true, jumps execution of the program to the given <i>line</i> (which will be specified either as a line number or a label).  If not, this statement has no effect.</td>\n  </tr>\n  <tr>\n    <td>GOSUB <i>line</i></td>\n    <td>Temporarily jumps to the given <i>line</i> (which will be specified as either a line number or a label).  A RETURN statement will cause execution to jump back to the line following the GOSUB.</td>\n  </tr>\n  <tr>\n    <td>RETURN</td>\n    <td>Jumps execution of the program back to the line following the most recently-executed GOSUB statement.</td>\n  </tr>\n  <tr>\n    <td>END</td>\n    <td>Ends the program immediately.</td>\n  </tr>\n  <tr>\n    <td>.</td>\n    <td>Special marker that indicates the end of the program text.  Behaves as an END statement when encountered.</td>\n  </tr>\n</table>\n\n<br />\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Limitations</p>\n\n<p>Third-party libraries &mdash; i.e., anything not included in a standard Python 3.3.2 installation &mdash; are strictly off-limits in this project.  Other than the standard Python library, all of the code should be written solely by you.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>Put your names and student ID in a comment at the top of each of your <b>.py</b> files, then submit all of the files to Checkmate.  Take a moment to be sure you've submitted all of your files and be sure you submit the right version; we will only be able to accept the files you submit before the deadline, so forgetting to submit one (or submitting the wrong version) can have a significant impact on the score you receive for this project.</p>\n\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.</p>\n\n<p class=\"subtitle\">Can I submit after the deadline?</p>\n\n<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Originally written by Alex Thornton, Summer 2013, with heavy influence from <i>What's Simple Is True</i>, also by Alex Thornton</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}