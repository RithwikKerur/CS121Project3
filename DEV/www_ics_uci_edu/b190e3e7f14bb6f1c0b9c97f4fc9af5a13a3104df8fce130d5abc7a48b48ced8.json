{"url": "https://www.ics.uci.edu/~eppstein/263/s14-hw6.html", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n<html>\n<head>\n<title>CompSci 263, Spring 2014, Homework 6</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\"\n  src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<h1>CS 263, Spring 2014, Homework 6</h1>\n<h2>Due at the start of class, Thursday, May 15</h2>\n\n<ol>\n<li><p>Suppose we apply the random-walk strategy to 2SAT (satisfiability instances with two variables or negated variables per clause): We start with a random truth assignment, and then as long as it does not satisfy every clause, we find an unsatisfied clause and flip one of its variables. Model this as a random walk on the integers, as we did for 3SAT. What is the probability that, from an initial value&nbsp;$i$, this random walk will eventually reach&nbsp;$0$? How many steps of the random walk should we take (not knowing&nbsp;$i$ in advance, so just based on the numbers $n$ and $m$ of variables and clauses) in order to ensure that, if the walk does eventually reach&nbsp;$0$, it does so within that many steps with high probability?</p></li>\n<li><p>In the \"not all-equal 3-sat problem\" (NAE3SAT) the input is a Boolean formula\n of the form $X(t_1,t_2,t_3) \\wedge X(\\dots) \\wedge \\dots$\nwhere each of the terms $t_1$, $t_2$, $t_3$ etc are either variables or negated variables\n(just like in 3SAT) but where $X$ is a Boolean function that is true \nwhen some of its arguments have different values from each other and false when \nall three of its arguments have the same value.</p>\n<p>One can use the random walk algorithm to solve NAE3SAT, just like for 3SAT, by repeatedly choosing an unsatisfied clause $X(\\dots)$ and flipping a random variable from that clause. The same analysis as for 3SAT shows that, if you start at a truth assignment that is $D$ steps away from a satisfying assignment, you have probability at least $2^-D$ of reaching a satisfying assignment.</p>\n<p>However, if $S$ is a satisfying assignment for NAE3SAT, then the assignment formed by flipping all the variables in $S$ is also satisfying. Therefore, in NAE3SAT, every truth assignment is at distance at most $n/2$ from a satisfying assignment, whereas in 3SAT there can be truth assignments that are as far as n from satisfying. By how large a factor does the existence of this second solution speed up the random walk algorithm?</p></li>\n<li><p>An ABZ-coloring of an undirected graph $G$ is an assignment of the three colors $A$, $B$, and $Z$ to $G$ with the following properties:</p>\n<ul>\n<li>On every path between two vertices labeled $A$, there must be at least one vertex labeled $Z$.</li>\n<li>On every path between two vertices labeled $B$, there must be at least one vertex labeled $Z$.</li>\n<li>On every path between two vertices labeled $Z$, there must be at least one vertex labeled either $A$ or $B$.</li>\n</ul>\n<p>Describe an algorithm for finding an ABZ-coloring of an $n$-vertex graph (if it exists) in time $O(c^n)$, for some $c<2$. How small can you make $c$?</p></li>\n<li><p>Suppose that we wish to assign distinct integer labels in the range from $1$ to $n$ to the $n$ vertices of a given undirected graph. For any such assignment, define the total length of the assignment to be the sum, over all edges of the graph, of the distance between the labels of the endpoint of the edge. That is, if vertex $v$ is placed on integer label $L(v)$, then the total length is\n$\\sum_{uv\\in E(G)} |L(u)-L(v)|$.\nDescribe a dynamic programming algorithm for computing the labeling with the minimum possible total length. On an $n$-vertex graph, your algorithm's running time should be within a polynomial factor of $2^n$.</p></li>\n</ol>\n</body>\n</html>\n", "encoding": "ascii"}