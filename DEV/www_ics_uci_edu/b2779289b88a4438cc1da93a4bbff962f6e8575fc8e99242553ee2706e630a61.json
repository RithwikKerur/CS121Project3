{"url": "https://www.ics.uci.edu/~rohit/L7-1.html", "content": "<HTML>\n<HEAD>\n  <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=windows-1252\">\n  <META NAME=\"Generator\" CONTENT=\"Microsoft Word 97\">\n  <META NAME=\"Template\" CONTENT=\"C:\\PROGRAM FILES\\MICROSOFT OFFICE\\OFFICE\\html.dot\">\n  <TITLE>Life in a TP... [Seventh Heaven #1]</TITLE>\n</HEAD>\n<BODY LINK=\"#0000ff\" VLINK=\"#800080\" BGCOLOR=\"#ffffff\">\n<H1>\n  Life in a TP...\n</H1>\n<P>\nIn the finest tradition of software project management, the Payroll team\nis focusing on processing the Employee database records against the latest\ntax regulations and the Accounting team reads in those reports to issue payments\nto banks' direct-deposit networks. Interconnecting the two is a separate\nintegration step: but how?\n<P>\nThey could just communicate by processing batch files, like the previous\nrelease -- that ran on a single mainframe. Today, they could use a distributed\nfile system, email the check records, pull them off of a Web server, or write\nyet another custom message transfer protocol. In each case, there are different\ntradeoffs between latency, reliability, security, and a hundred other details.\nThat is why a thousand Internet-scale messaging systems have bloomed: Telnet\nfor duplex bytestreams, File Transfer Protocol (FTP) for pulling files, Simple\nMail Transfer Protocol (SMTP) for reliable email messages, Network News Transfer\nProtocol (NNTP) for pushing email, HyperText Transfer Protocol (HTTP) for\npulling Web pages, and a host of other tolls in the same vein, from Finger\nto Network File System (NFS).\n<P>\n<I>Seventh Heaven</I> is column about those choices. Application-layer protocols,\nthe seventh layer of the OSI stack, proliferate in myriad forms every time\na developer wires together software components across the Internet. The\nApplications Area at the Internet Engineering Task Force (IETF) is growing\nrapidly under the strain of divergent efforts, in stark contrast to the relative\nstability of TCP/IP. Bookstore shelves groan under the load of books cataloging\neach different species of transfer protocols (TPs) separately; this column\nwill develop a common framework to navigate among them.\n<P>\nEach month, we will focus on setting one of these TPs in context. They have\nevolved to adapt to the vagaries of network topology, performance, economics,\nand standards-body politics. Understanding their history is key to charting\ntheir future as new contenders like HTTP-NG (Next Generation) take form.\nOur maiden voyage, though, sets forth our ontology in general -- our vocabulary\nfor describing and classifying TPs.\n<H4>\n  What's in a TP?\n</H4>\n<P>\nJust as lower levels of the network stack discuss transport protocols like\nTCP and TP4, application-layer designers work with message transfer protocols.\nThere are three major components of any such TP: <I>addresses</I> to identify\nparticipating nodes; <I>distribution</I> rules controlling transfers; and\nthe <I>messages</I> themselves. Admittedly, this framework is not explicitly\nin the design rationale of any TPs to date -- the RFCs emphasize <I>how</I>\nthey work almost to the exclusion of <I>why</I> -- but I hope it proves a\nuseful synthesis on our tour.\n<CENTER>\n  <TABLE CELLSPACING=\"5\" CELLPADDING=\"0\" ALIGN=\"Center\">\n    <CAPTION ALIGN=Bottom>\n      Three key aspects of the Transfer Protocols (TPs) <I>Seventh Heaven</I> will\n      cover in&nbsp;1998\n    </CAPTION>\n    <TR>\n      <TH COLSPAN=2 VALIGN=\"TOP\"><B>Transfer Protocol</B></TH>\n      <TD></TD>\n      <TH COLSPAN=2 VALIGN=\"TOP\">Addressing</TH>\n      <TD></TD>\n      <TH COLSPAN=3 VALIGN=\"TOP\">Distribution</TH>\n      <TD></TD>\n      <TH VALIGN=\"TOP\">Content</TH>\n    </TR>\n    <TR>\n      <TD COLSPAN=2 VALIGN=\"TOP\">\n\t  <HR>\n      </TD>\n      <TD></TD>\n      <TD COLSPAN=2 VALIGN=\"TOP\">\n\t  <HR>\n      </TD>\n      <TD></TD>\n      <TD COLSPAN=3 VALIGN=\"TOP\">\n\t  <HR>\n      </TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\">\n\t  <HR>\n      </TD>\n    </TR>\n    <TR>\n      <TD VALIGN=\"TOP\">Terminal</TD>\n      <TD VALIGN=\"TOP\">Telnet</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\tHost</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tPort</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\t1-1</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tSync</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tBoth</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\tBytestream w/interrupts</TD>\n    </TR>\n    <TR>\n      <TD VALIGN=\"TOP\">Filesystem</TD>\n      <TD VALIGN=\"TOP\">FTP</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\tHost</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tPath</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\t1-1</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tSync</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tBoth</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\tText / Binary Files</TD>\n    </TR>\n    <TR>\n      <TD VALIGN=\"TOP\">E-mail</TD>\n      <TD VALIGN=\"TOP\">SMTP</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\tMailbox</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tMsgid</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\t1-N</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tAsync</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tPush</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\t822 + MIME</TD>\n    </TR>\n    <TR>\n      <TD VALIGN=\"TOP\">Usenet</TD>\n      <TD VALIGN=\"TOP\">NNTP</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\tNewsgroup</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tMsgid</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\tN-N</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tAsync</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tPush</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\t822 + MIME</TD>\n    </TR>\n    <TR>\n      <TD VALIGN=\"TOP\">Web</TD>\n      <TD VALIGN=\"TOP\">HTTP</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\tHost</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tURL Path</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\t1-N</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tSync</TD>\n      <TD><P ALIGN=\"CENTER\">\n\tPull</TD>\n      <TD></TD>\n      <TD VALIGN=\"TOP\"><P ALIGN=\"CENTER\">\n\t822 + MIME + HTTP caching</TD>\n    </TR>\n  </TABLE>\n</CENTER>\n<P>\nSeveral ilities of TPs, such as reliability, latency, and maintainability\ncan be explained as consequences of variation along these three axes. Email,\nfor example, has reliable handoffs at each step, but does not establish a\ndirect mailbox-to-mailbox connection, so actual delivery can take a while,\nusually without delivery notification. Furthermore, each handoff is traceable\nthrough <TT>Received:</TT> headers for debugging. HTTP, in contrast, is a\nsynchronous request-reply protocol which requires direct, online connections.\nTransport-layer security can be directly composed with HTTP to encrypt the\nend-to-end connection; email's hop-by-hop transfers cannot.\n<H4>\n  Names &amp; Addresses\n</H4>\n<P>\nThe first things a TP must define are its <I>addresses</I> for the nodes\nit transfer messages between, and the <I>names</I> for the entities it transfers.\nFor many TPs, the endpoints are network interfaces on the connected Internet,\nso they use domain names or IP addresses directly. Sometimes, the endpoints\nare logical concepts, like individual users' mailboxes or globally-distributed\nnewsgroups. &nbsp;The entities they purport to transfer have to be represented\nas messages, so their names identify the message at hand. Names are more\nintimately tied to the semantics of the service: Telnet provides a Network\nVirtual Terminal (NVT) to some port on a host; FTP and HTTP servers can be\nqueried for the value of particular pathnames; and SMTP and NNTP refer to\nmessages by their globally-unique RFC-822 <TT>msgid</TT>s.\n<P>\nSometimes there are additional relations between these two. An &nbsp;HTTP\ncaching proxy uses names that include the original host address (e.g.\n<TT>http://cache/http://.../...</TT>). Similarly, an FTP mirror site maintains\na copy of the same file at a different host, possibly with a derived name\n(e.g. a prefix like <TT>/mirrors/sumex-aim/...</TT>). However, after fetching\na file, its name is the local filesystem pathname; FTP does not use metadata\nto bind it to its \"original\" name.\n<H4>\n  Push &amp; Pull\n</H4>\n<P>\nTraditionally, various TPs' distribution rules are seen as their most salient\nclassification. There are two levels of such description, though. At the\nmechanical level, they are all built atop TCP, so it is natural for clients\nto initiate the process. However, we can speak of a more abstract intent\nin deployed applications: for senders to push data at their will, or for\nreceivers to pull data at theirs. traditional Web clients can only fetch\ndata from servers; but FTP service usually allows up- and down-loading, so\nthe net effect can be push <I>or</I> pull (although FTP service built-in\nto those Web browsers cannot upload!).\n<P>\nAnother significant point about the distribution rules are their topologies.\nAgain, while TCP/IP is a point-to-point service, the net effect of message\ndelivery can vary. Telnet is a strictly one-on-one service; but email, with\nits intermediate relays and multiply-'name'd envelopes, can provide broadcast\nmessaging. Similarly, though HTTP connections are one-on-one, the net effect\nof publishing a URL is also to broadcast the data. Multicasting experiments,\nsuch as Newscaster and Self-Organizing Multicast Transfer Protocol [1] are\nchanging these rules.\n<P>\nFinally, the choice of synchronicity determines whether and how TP services\ncan be proxied by other parties. As opposed to simple tunneling, proxy service\nimplies reprocessing of a message by an intermediate node. Synchronous\nconversations like HTTP can only be chained, while asynchronous handoffs\ncan form an asymmetric loop, as in email routing. Synchronous one-to-many\nbroadcasting can also cause 'ACK implosions', which explains why real-time\nbroadcasting is designed to accommodate loss rather than process acknowledgments.\n<H4>\n  Meatdata &amp; Metadata\n</H4>\n<P>\nMessages are where the rubber meets the road in TP design. First, most TPs\nare designed with a particular type of content in mind, and optimized to\nthat end. Second, the elemental Protocol Data Units (PDUs) in these systems\nare messages that combine an envelope, the command and metadata about the\nentity, and a concrete representation of the entity itself.\n<P>\nMessage content affects the choice of transport in TPs: login emulation with\nTelnet requires the URGent delivery flag in TCP segments; delivery of open-ended\nstreaming data motivates a separate TCP connection for each HTTP/1.x operation;\nand time-critical multimedia content may use UDP datagrams directly.\n<P>\nThe bytes on the wire of a message usually combine the commands of the\ndistribution algorithm and the contents (FTP, though, separates its control\nand data channels). Messages combine the 'meatdata', some snapshot of the\nresource itself, and metadata. Typically, the source and destination addresses\nand transaction logs describe the command; content-type, content-name, and\ncontent-lifetime information (for caching) describe the entity. Traditional\nRemote Procedure Call (RPC) and distributed-object protocols also exchange\nlightweight messages, but such caching and reflection support has been unknown\nto date. Furthermore, advanced TPs also leverage interactions between such\nmetadata and the distribution commands, as with HTTP's content-negotiation\nand cache-validation GETs.\n<H4>\n  Ascending to Seventh Heaven\n</H4>\n<P>\nApplication layer developers, like our friends from Personnel, have a new\npivot point for deciding how to transfer messages between their software\nmodules. What classically was a single-necked hourglass of Internet development\n-- common interoperability of IP packets -- is becoming a double-necked hourglass\nwith application-layer consensus around URIs for naming and addressing and\nMIME-like messages for envelopes and data[2].<P>\n<CENTER>\n  <TABLE BORDER CELLPADDING=\"2\" ALIGN=\"Center\">\n    <CAPTION ALIGN=Bottom>\n      The double-necked hourglass\n    </CAPTION>\n    <TR>\n      <TD>Business cards</TD>\n      <TD>Price lists</TD>\n      <TD>Bill payments</TD>\n      <TD>Photographs</TD>\n      <TD>...</TD>\n    </TR>\n    <TR>\n      <TD COLSPAN=5><P ALIGN=Center>\n\t<I>URIs + MIME-like message 'tagging &amp; bagging'</I></TD>\n    </TR>\n    <TR>\n      <TD>HTTP</TD>\n      <TD>FTP</TD>\n      <TD>SMTP</TD>\n      <TD>NNTP</TD>\n      <TD>...</TD>\n    </TR>\n    <TR>\n      <TD COLSPAN=5><P ALIGN=Center>\n\t<I>TCP/IP channels</I></TD>\n    </TR>\n    <TR>\n      <TD>Ethernet</TD>\n      <TD>Token-Ring</TD>\n      <TD>SONET</TD>\n      <TD>LEO Satellites</TD>\n      <TD>...</TD>\n    </TR>\n  </TABLE>\n</CENTER>\n<P>\nOf course, where Sir Issac&nbsp;Newton claimed \"If I have seen further, it\nis by standing upon the shoulders of Giants,\" Digital researcher Brian Ried\nquipped, \"In Computer Science, we stand on each other's feet\" -- what have\nwe learned from the evolution of TPs over the last fifteen years? Consider\nFoRK, the mailing list of an electronic community of <I>Friends of Rohit\nKhare</I>: each message is available as email, in a local newsgroup, as an\narchived web page (both at my own site and at Findmail.com, with different\nURL paths), and as FTP'able mailbox files. Why should the same resource --\nwords in an ongoing conversation -- have to adopt a half-dozen different\nnames and addresses to reach different people? Why isn't there a stable\nidentifier and storage format which might bridge them all, to become more\nfuture-proof? To say nothing of integrating references to a realtime video\nchat room...\n<P>\nIn Jewish mysticism, the first level of heaven is the sky and clouds, then\nthe planets, and on through the stars, up to the ultimate nature of the Divine\n[3]. <I>Seventh Heaven</I> is also aimed at understanding the truth of the\nseventh layer: if you have any secret seals bearing the true name of God,\nor just comments on this taxonomy, please feel free to contact me! \n  <HR>\nRohit Khare [4] is a graduate student at the University of California at\nIrvine and a principal of 4K Consulting.\n<P>\n  <HR>\n<P>\n[1] A rough proposal of Newscaster circa October 1995 is at\nhttp://user.cs.tu-berlin.de/~nilss/som/newscast.htm\n<P>\n[2] MIME instigator Einar Stefferud popularized this metaphor\n<P>\n[3] http://www.acs.ucalgary.ca/~elsegal/Shokel/891103_7th_Heaven.html \n<P>\n[4] http://www.ics.uci.edu/~rohit\n</BODY></HTML>\n", "encoding": "ascii"}