{"url": "https://www.ics.uci.edu/~ejw/authoring/protocol/rfc2518.html", "content": "<html>\n   <head>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n   \n      <title>HTTP Extensions for Distributed Authoring -- WEBDAV</title><style type=\"text/css\">\nA\n{\n\ttext-decoration: none\n}\nA:hover\n{\n\ttext-decoration: underline\n}\nA:active\n{\n\ttext-decoration: underline\n}\nBODY\n{\n\tcolor: #000000;\n    font-family: helvetica, arial, sans-serif;\n    font-size: 13px;\n}\nH1\n{\n\tcolor: #333333;\n    font-size: 16px;\n    line-height: 16px;\n    font-family: helvetica, arial, sans-serif;\n\tpage-break-after: avoid;\n}\nH2\n{\n\tcolor: #000000;\n    font-size: 14px;\n    font-family: helvetica, arial, sans-serif;\n\tpage-break-after: avoid;\n}\nH3\n{\n\tcolor: #000000;\n    font-size: 13px;\n    font-family: helvetica, arial, sans-serif;\n\tpage-break-after: avoid;\n}\nP\n{\n\tmargin-left: 2em;\n    margin-right: 2em;\n}\nPRE\n{\n\tmargin-left: 3em;\n    color: #333333\n}\nTABLE\n{\n\tfont-size: 13px\n}\nTD.header\n{\n\tcolor: #ffffff;\n    font-size: 10px;\n    font-family: arial, helvetica, sans-serif;\n    valign: top\n}\n.copyright\n{\n\tfont-size: 10px\n}\n.hotText\n{\n\tcolor:#ffffff;\n    font-weight: normal;\n    text-decoration: none;\n    font-family: chelvetica, arial, sans-serif;\n\tfont-size: 9px\n}\n.link2\n{\n\tcolor:#ffffff;\n    font-weight: bold;\n    text-decoration: none;\n    font-family: helvetica, arial, sans-serif;\n    font-size: 9px\n}\n.RFC\n{\n\tcolor:#666666;\n    font-weight: bold;\n    text-decoration: none;\n    font-family: helvetica, arial, sans-serif;\n\tfont-size: 9px\n}\n.title\n{\n\tcolor: #990000;\n    font-size: 22px;\n    line-height: 22px;\n    font-weight: bold;\n    text-align: right;\n   \tfont-family: helvetica, arial, sans-serif\n}\n\n@media print {\n         .noprint {display:none}\n}\n</style></head>\n   <body bgcolor=\"#ffffff\" alink=\"#000000\" vlink=\"#666666\" link=\"#990000\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#000000\" align=\"center\" valign=\"center\" width=\"30\" height=\"30\"><b><span class=\"RFC\">&nbsp;RFC&nbsp;</span></b><br><span class=\"hotText\">2518</span></td>\n         </tr>\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <table width=\"66%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n         <tr>\n            <td>\n               <table width=\"100%\" border=\"0\" cellpadding=\"2\" cellspacing=\"1\">\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">Network Working Group&nbsp;</td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">Y. Goland&nbsp;</td>\n                  </tr>\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">Request for Comments: 2518&nbsp;</td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">Microsoft&nbsp;</td>\n                  </tr>\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">\n                        \tCategory:\n                        Standards Track&nbsp;\n                     </td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">E. Whitehead&nbsp;</td>\n                  </tr>\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">&nbsp;</td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">UC Irvine&nbsp;</td>\n                  </tr>\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">&nbsp;</td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">A. Faizi&nbsp;</td>\n                  </tr>\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">&nbsp;</td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">Netscape&nbsp;</td>\n                  </tr>\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">&nbsp;</td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">S.R. Carter&nbsp;</td>\n                  </tr>\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">&nbsp;</td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">D. Jensen&nbsp;</td>\n                  </tr>\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">&nbsp;</td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">Novell&nbsp;</td>\n                  </tr>\n                  <tr>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">&nbsp;</td>\n                     <td width=\"33%\" bgcolor=\"#666666\" class=\"header\">February 1999&nbsp;</td>\n                  </tr>\n               </table>\n            </td>\n         </tr>\n      </table><br><div align=\"right\"><span class=\"title\">HTTP Extensions for Distributed Authoring -- WEBDAV</span></div>\n      <h1>Status of this Memo</h1>\n      <p>This document specifies an Internet standards track protocol for the Internet\n         community, and requests discussion and suggestions for improvements.\n         Please refer to the current edition of the \"Internet Official Protocol\n         Standards\" (STD 1) for the standardization state and status of this\n         protocol. Distribution of this memo is unlimited.\n      </p>\n      <h1>Copyright Notice</h1>\n      <p>\n         Copyright (C) The Internet Society (1999). All Rights Reserved.\n      </p>\n      <h1>Abstract</h1>\n      <p>    \n         \n         <p>This document specifies a set of methods, headers, and content-types\n            ancillary to HTTP/1.1 for the management of resource properties,\n            creation and management of resource collections, namespace\n            manipulation, and resource locking (collision avoidance).\n         </p>\n         \t\n      </p>\n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#000000\" align=\"center\" valign=\"center\" width=\"30\" height=\"30\"><b><span class=\"RFC\">&nbsp;RFC&nbsp;</span></b><br><span class=\"hotText\">2518</span></td>\n         </tr>\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table><a name=\"rfc.toc\">\n         <h1>Table of Contents</h1></a><ul compact class=\"toc\"><b><a href=\"#rfc.section.1\">1</a>&nbsp;\n            \tIntroduction</b><br><b><a href=\"#rfc.section.2\">2</a>&nbsp;\n            \tNotational Conventions</b><br><b><a href=\"#rfc.section.3\">3</a>&nbsp;\n            \tTerminology</b><br><b><a href=\"#rfc.section.4\">4</a>&nbsp;\n            \tData Model for Resource Properties</b><br><b><a href=\"#rfc.section.4.1\">4.1</a>&nbsp;\n            \tThe Resource Property Model</b><br><b><a href=\"#rfc.section.4.2\">4.2</a>&nbsp;\n            \tExisting Metadata Proposals</b><br><b><a href=\"#rfc.section.4.3\">4.3</a>&nbsp;\n            \tProperties and HTTP Headers</b><br><b><a href=\"#rfc.section.4.4\">4.4</a>&nbsp;\n            \tProperty Values</b><br><b><a href=\"#rfc.section.4.5\">4.5</a>&nbsp;\n            \tProperty Names</b><br><b><a href=\"#rfc.section.4.6\">4.6</a>&nbsp;\n            \tMedia Independent Links</b><br><b><a href=\"#rfc.section.5\">5</a>&nbsp;\n            \tCollections of Web Resources</b><br><b><a href=\"#rfc.section.5.1\">5.1</a>&nbsp;\n            \tHTTP URL Namespace Model</b><br><b><a href=\"#rfc.section.5.2\">5.2</a>&nbsp;\n            \tCollection Resources</b><br><b><a href=\"#rfc.section.5.3\">5.3</a>&nbsp;\n            \tCreation and Retrieval of Collection Resources</b><br><b><a href=\"#rfc.section.5.4\">5.4</a>&nbsp;\n            \tSource Resources and Output Resources</b><br><b><a href=\"#rfc.section.6\">6</a>&nbsp;\n            \tLocking</b><br><b><a href=\"#rfc.section.6.1\">6.1</a>&nbsp;\n            \tExclusive Vs. Shared Locks</b><br><b><a href=\"#rfc.section.6.2\">6.2</a>&nbsp;\n            \tRequired Support</b><br><b><a href=\"#rfc.section.6.3\">6.3</a>&nbsp;\n            \tLock Tokens</b><br><b><a href=\"#rfc.section.6.4\">6.4</a>&nbsp;\n            \topaquelocktoken Lock Token URI Scheme</b><br><b><a href=\"#rfc.section.6.4.1\">6.4.1</a>&nbsp;\n            \tNode Field Generation Without the IEEE 802 Address</b><br><b><a href=\"#rfc.section.6.5\">6.5</a>&nbsp;\n            \tLock Capability Discovery</b><br><b><a href=\"#rfc.section.6.6\">6.6</a>&nbsp;\n            \tActive Lock Discovery</b><br><b><a href=\"#rfc.section.6.7\">6.7</a>&nbsp;\n            \tUsage Considerations</b><br><b><a href=\"#rfc.section.7\">7</a>&nbsp;\n            \tWrite Lock</b><br><b><a href=\"#rfc.section.7.1\">7.1</a>&nbsp;\n            \tMethods Restricted by Write Locks</b><br><b><a href=\"#rfc.section.7.2\">7.2</a>&nbsp;\n            \tWrite Locks and Lock Tokens</b><br><b><a href=\"#rfc.section.7.3\">7.3</a>&nbsp;\n            \tWrite Locks and Properties</b><br><b><a href=\"#rfc.section.7.4\">7.4</a>&nbsp;\n            \tWrite Locks and Null Resources</b><br><b><a href=\"#rfc.section.7.5\">7.5</a>&nbsp;\n            \tWrite Locks and Collections</b><br><b><a href=\"#rfc.section.7.6\">7.6</a>&nbsp;\n            \tWrite Locks and the If Request Header</b><br><b><a href=\"#rfc.section.7.6.1\">7.6.1</a>&nbsp;\n            \tExample - Write Lock</b><br><b><a href=\"#rfc.section.7.7\">7.7</a>&nbsp;\n            \tWrite Locks and COPY/MOVE</b><br><b><a href=\"#rfc.section.7.8\">7.8</a>&nbsp;\n            \tRefreshing Write Locks</b><br><b><a href=\"#rfc.section.8\">8</a>&nbsp;\n            \tHTTP Methods for Distributed Authoring</b><br><b><a href=\"#METHOD_PROPFIND\">8.1</a>&nbsp;\n            \tPROPFIND</b><br><b><a href=\"#rfc.section.8.1.1\">8.1.1</a>&nbsp;\n            \tExample - Retrieving Named Properties</b><br><b><a href=\"#rfc.section.8.1.2\">8.1.2</a>&nbsp;\n            \tExample - Using allprop to Retrieve All Properties</b><br><b><a href=\"#rfc.section.8.1.3\">8.1.3</a>&nbsp;\n            \tExample - Using propname to Retrieve all Property Names</b><br><b><a href=\"#METHOD_PROPPATCH\">8.2</a>&nbsp;\n            \tPROPPATCH</b><br><b><a href=\"#rfc.section.8.2.1\">8.2.1</a>&nbsp;\n            \tStatus Codes for use with 207 (Multi-Status)</b><br><b><a href=\"#rfc.section.8.2.2\">8.2.2</a>&nbsp;\n            \tExample - PROPPATCH</b><br><b><a href=\"#METHOD_MKCOL\">8.3</a>&nbsp;\n            \tMKCOL Method</b><br><b><a href=\"#rfc.section.8.3.1\">8.3.1</a>&nbsp;\n            \tRequest</b><br><b><a href=\"#rfc.section.8.3.2\">8.3.2</a>&nbsp;\n            \tStatus Codes</b><br><b><a href=\"#rfc.section.8.3.3\">8.3.3</a>&nbsp;\n            \tExample - MKCOL</b><br><b><a href=\"#rfc.section.8.4\">8.4</a>&nbsp;\n            \tGET, HEAD for Collections</b><br><b><a href=\"#rfc.section.8.5\">8.5</a>&nbsp;\n            \tPOST for Collections</b><br><b><a href=\"#METHOD_DELETE\">8.6</a>&nbsp;\n            \tDELETE</b><br><b><a href=\"#rfc.section.8.6.1\">8.6.1</a>&nbsp;\n            \tDELETE for Non-Collection Resources</b><br><b><a href=\"#rfc.section.8.6.2\">8.6.2</a>&nbsp;\n            \tDELETE for Collections</b><br><b><a href=\"#rfc.section.8.6.2.1\">8.6.2.1</a>&nbsp;\n            \tExample - DELETE</b><br><b><a href=\"#METHOD_PUT\">8.7</a>&nbsp;\n            \tPUT</b><br><b><a href=\"#rfc.section.8.7.1\">8.7.1</a>&nbsp;\n            \tPUT for Non-Collection Resources</b><br><b><a href=\"#rfc.section.8.7.2\">8.7.2</a>&nbsp;\n            \tPUT for Collections</b><br><b><a href=\"#METHOD_COPY\">8.8</a>&nbsp;\n            \tCOPY Method</b><br><b><a href=\"#rfc.section.8.8.1\">8.8.1</a>&nbsp;\n            \tCOPY for HTTP/1.1 resources</b><br><b><a href=\"#rfc.section.8.8.2\">8.8.2</a>&nbsp;\n            \tCOPY for Properties</b><br><b><a href=\"#rfc.section.8.8.3\">8.8.3</a>&nbsp;\n            \tCOPY for Collections</b><br><b><a href=\"#rfc.section.8.8.4\">8.8.4</a>&nbsp;\n            \tCOPY and the Overwrite Header</b><br><b><a href=\"#rfc.section.8.8.5\">8.8.5</a>&nbsp;\n            \tStatus Codes</b><br><b><a href=\"#rfc.section.8.8.6\">8.8.6</a>&nbsp;\n            \tExample - COPY with Overwrite</b><br><b><a href=\"#rfc.section.8.8.7\">8.8.7</a>&nbsp;\n            \tExample - COPY with No Overwrite</b><br><b><a href=\"#rfc.section.8.8.8\">8.8.8</a>&nbsp;\n            \tExample - COPY of a Collection</b><br><b><a href=\"#METHOD_MOVE\">8.9</a>&nbsp;\n            \tMOVE Method</b><br><b><a href=\"#rfc.section.8.9.1\">8.9.1</a>&nbsp;\n            \tMOVE for Properties</b><br><b><a href=\"#rfc.section.8.9.2\">8.9.2</a>&nbsp;\n            \tMOVE for Collections</b><br><b><a href=\"#rfc.section.8.9.3\">8.9.3</a>&nbsp;\n            \tMOVE and the Overwrite Header</b><br><b><a href=\"#rfc.section.8.9.4\">8.9.4</a>&nbsp;\n            \tStatus Codes</b><br><b><a href=\"#rfc.section.8.9.5\">8.9.5</a>&nbsp;\n            \tExample - MOVE of a Non-Collection</b><br><b><a href=\"#rfc.section.8.9.6\">8.9.6</a>&nbsp;\n            \tExample - MOVE of a Collection</b><br><b><a href=\"#METHOD_LOCK\">8.10</a>&nbsp;\n            \tLOCK Method</b><br><b><a href=\"#rfc.section.8.10.1\">8.10.1</a>&nbsp;\n            \tOperation</b><br><b><a href=\"#rfc.section.8.10.2\">8.10.2</a>&nbsp;\n            \tThe Effect of Locks on Properties and Collections</b><br><b><a href=\"#rfc.section.8.10.3\">8.10.3</a>&nbsp;\n            \tLocking Replicated Resources</b><br><b><a href=\"#rfc.section.8.10.4\">8.10.4</a>&nbsp;\n            \tDepth and Locking</b><br><b><a href=\"#rfc.section.8.10.5\">8.10.5</a>&nbsp;\n            \tInteraction with other Methods</b><br><b><a href=\"#rfc.section.8.10.6\">8.10.6</a>&nbsp;\n            \tLock Compatibility Table</b><br><b><a href=\"#rfc.section.8.10.7\">8.10.7</a>&nbsp;\n            \tStatus Codes</b><br><b><a href=\"#rfc.section.8.10.8\">8.10.8</a>&nbsp;\n            \tExample - Simple Lock Request</b><br><b><a href=\"#rfc.section.8.10.9\">8.10.9</a>&nbsp;\n            \tExample - Refreshing a Write Lock</b><br><b><a href=\"#rfc.section.8.10.10\">8.10.10</a>&nbsp;\n            \tExample - Multi-Resource Lock Request</b><br><b><a href=\"#METHOD_UNLOCK\">8.11</a>&nbsp;\n            \tUNLOCK Method</b><br><b><a href=\"#rfc.section.8.11.1\">8.11.1</a>&nbsp;\n            \tExample - UNLOCK</b><br><b><a href=\"#rfc.section.9\">9</a>&nbsp;\n            \tHTTP Headers for Distributed Authoring</b><br><b><a href=\"#HEADER_DAV\">9.1</a>&nbsp;\n            \tDAV Header</b><br><b><a href=\"#HEADER_Depth\">9.2</a>&nbsp;\n            \tDepth Header</b><br><b><a href=\"#HEADER_Destination\">9.3</a>&nbsp;\n            \tDestination Header</b><br><b><a href=\"#HEADER_If\">9.4</a>&nbsp;\n            \tIf Header</b><br><b><a href=\"#rfc.section.9.4.1\">9.4.1</a>&nbsp;\n            \tNo-tag-list Production</b><br><b><a href=\"#rfc.section.9.4.1.1\">9.4.1.1</a>&nbsp;\n            \tExample - No-tag-list If Header</b><br><b><a href=\"#rfc.section.9.4.2\">9.4.2</a>&nbsp;\n            \tTagged-list Production</b><br><b><a href=\"#rfc.section.9.4.2.1\">9.4.2.1</a>&nbsp;\n            \tExample - Tagged List If header</b><br><b><a href=\"#rfc.section.9.4.3\">9.4.3</a>&nbsp;\n            \tnot Production</b><br><b><a href=\"#rfc.section.9.4.4\">9.4.4</a>&nbsp;\n            \tMatching Function</b><br><b><a href=\"#rfc.section.9.4.5\">9.4.5</a>&nbsp;\n            \tIf Header and Non-DAV Compliant Proxies</b><br><b><a href=\"#HEADER_Lock-Token\">9.5</a>&nbsp;\n            \tLock-Token Header</b><br><b><a href=\"#HEADER_Overwrite\">9.6</a>&nbsp;\n            \tOverwrite Header</b><br><b><a href=\"#HEADER_Status-URI\">9.7</a>&nbsp;\n            \tStatus-URI Response Header</b><br><b><a href=\"#HEADER_Timeout\">9.8</a>&nbsp;\n            \tTimeout Request Header</b><br><b><a href=\"#rfc.section.10\">10</a>&nbsp;\n            \tStatus Code Extensions to HTTP/1.1</b><br><b><a href=\"#STATUS_102\">10.1</a>&nbsp;\n            \t102 Processing</b><br><b><a href=\"#STATUS_207\">10.2</a>&nbsp;\n            \t207 Multi-Status</b><br><b><a href=\"#STATUS_422\">10.3</a>&nbsp;\n            \t422 Unprocessable Entity</b><br><b><a href=\"#STATUS_423\">10.4</a>&nbsp;\n            \t423 Locked</b><br><b><a href=\"#STATUS_424\">10.5</a>&nbsp;\n            \t424 Failed Dependency</b><br><b><a href=\"#STATUS_507\">10.6</a>&nbsp;\n            \t507 Insufficient Storage</b><br><b><a href=\"#rfc.section.11\">11</a>&nbsp;\n            \tMulti-Status Response</b><br><b><a href=\"#rfc.section.12\">12</a>&nbsp;\n            \tXML Element Definitions</b><br><b><a href=\"#ELEMENT_activelock\">12.1</a>&nbsp;\n            \tactivelock XML Element</b><br><b><a href=\"#ELEMENT_depth\">12.1.1</a>&nbsp;\n            \tdepth XML Element</b><br><b><a href=\"#ELEMENT_locktoken\">12.1.2</a>&nbsp;\n            \tlocktoken XML Element</b><br><b><a href=\"#ELEMENT_timeout\">12.1.3</a>&nbsp;\n            \ttimeout XML Element</b><br><b><a href=\"#ELEMENT_collection\">12.2</a>&nbsp;\n            \tcollection XML Element</b><br><b><a href=\"#ELEMENT_href\">12.3</a>&nbsp;\n            \thref XML Element</b><br><b><a href=\"#ELEMENT_link\">12.4</a>&nbsp;\n            \tlink XML Element</b><br><b><a href=\"#ELEMENT_dest\">12.4.1</a>&nbsp;\n            \tdst XML Element</b><br><b><a href=\"#ELEMENT_src\">12.4.2</a>&nbsp;\n            \tsrc XML Element</b><br><b><a href=\"#ELEMENT_lockentry\">12.5</a>&nbsp;\n            \tlockentry XML Element</b><br><b><a href=\"#ELEMENT_lockinfo\">12.6</a>&nbsp;\n            \tlockinfo XML Element</b><br><b><a href=\"#ELEMENT_lockscope\">12.7</a>&nbsp;\n            \tlockscope XML Element</b><br><b><a href=\"#ELEMENT_exclusive\">12.7.1</a>&nbsp;\n            \texclusive XML Element</b><br><b><a href=\"#ELEMENT_shared\">12.7.2</a>&nbsp;\n            \tshared XML Element</b><br><b><a href=\"#ELEMENT_locktype\">12.8</a>&nbsp;\n            \tlocktype XML Element</b><br><b><a href=\"#ELEMENT_write\">12.8.1</a>&nbsp;\n            \twrite XML Element</b><br><b><a href=\"#ELEMENT_multistatus\">12.9</a>&nbsp;\n            \tmultistatus XML Element</b><br><b><a href=\"#ELEMENT_response\">12.9.1</a>&nbsp;\n            \tresponse XML Element</b><br><b><a href=\"#ELEMENT_propstat\">12.9.1.1</a>&nbsp;\n            \tpropstat XML Element</b><br><b><a href=\"#ELEMENT_status\">12.9.1.2</a>&nbsp;\n            \tstatus XML Element</b><br><b><a href=\"#ELEMENT_responsedescription\">12.9.2</a>&nbsp;\n            \tresponsedescription XML Element</b><br><b><a href=\"#ELEMENT_owner\">12.10</a>&nbsp;\n            \towner XML Element</b><br><b><a href=\"#ELEMENT_prop\">12.11</a>&nbsp;\n            \tprop XML element</b><br><b><a href=\"#ELEMENT_propertybehaviour\">12.12</a>&nbsp;\n            \tpropertybehavior XML element</b><br><b><a href=\"#ELEMENT_keepalive\">12.12.1</a>&nbsp;\n            \tkeepalive XML element</b><br><b><a href=\"#ELEMENT_omit\">12.12.2</a>&nbsp;\n            \tomit XML element</b><br><b><a href=\"#ELEMENT_propertyupdate\">12.13</a>&nbsp;\n            \tpropertyupdate XML element</b><br><b><a href=\"#ELEMENT_remove\">12.13.1</a>&nbsp;\n            \tremove XML element</b><br><b><a href=\"#ELEMENT_set\">12.13.2</a>&nbsp;\n            \tset XML element</b><br><b><a href=\"#ELEMENT_propfind\">12.14</a>&nbsp;\n            \tpropfind XML Element</b><br><b><a href=\"#ELEMENT_allprop\">12.14.1</a>&nbsp;\n            \tallprop XML Element</b><br><b><a href=\"#ELEMENT_propname\">12.14.2</a>&nbsp;\n            \tpropname XML Element</b><br><b><a href=\"#rfc.section.13\">13</a>&nbsp;\n            \tDAV Properties</b><br><b><a href=\"#PROPERTY_creationdate\">13.1</a>&nbsp;\n            \tcreationdate Property</b><br><b><a href=\"#PROPERTY_displayname\">13.2</a>&nbsp;\n            \tdisplayname Property</b><br><b><a href=\"#PROPERTY_getcontentlanguage\">13.3</a>&nbsp;\n            \tgetcontentlanguage Property</b><br><b><a href=\"#PROPERTY_getcontentlength\">13.4</a>&nbsp;\n            \tgetcontentlength Property</b><br><b><a href=\"#PROPERTY_getcontenttype\">13.5</a>&nbsp;\n            \tgetcontenttype Property</b><br><b><a href=\"#PROPERTY_getetag\">13.6</a>&nbsp;\n            \tgetetag Property</b><br><b><a href=\"#PROPERTY_getlastmodified\">13.7</a>&nbsp;\n            \tgetlastmodified Property</b><br><b><a href=\"#PROPERTY_lockdiscovery\">13.8</a>&nbsp;\n            \tlockdiscovery Property</b><br><b><a href=\"#rfc.section.13.8.1\">13.8.1</a>&nbsp;\n            \tExample - Retrieving the lockdiscovery Property</b><br><b><a href=\"#PROPERTY_resourcetype\">13.9</a>&nbsp;\n            \tresourcetype Property</b><br><b><a href=\"#PROPERTY_source\">13.10</a>&nbsp;\n            \tsource Property</b><br><b><a href=\"#rfc.section.13.10.1\">13.10.1</a>&nbsp;\n            \tExample - A source Property</b><br><b><a href=\"#PROPERTY_supportedlock\">13.11</a>&nbsp;\n            \tsupportedlock Property</b><br><b><a href=\"#rfc.section.13.11.1\">13.11.1</a>&nbsp;\n            \tExample - Retrieving the supportedlock Property</b><br><b><a href=\"#rfc.section.14\">14</a>&nbsp;\n            \tInstructions for Processing XML in DAV</b><br><b><a href=\"#rfc.section.15\">15</a>&nbsp;\n            \tDAV Compliance Classes</b><br><b><a href=\"#rfc.section.15.1\">15.1</a>&nbsp;\n            \tClass 1</b><br><b><a href=\"#rfc.section.15.2\">15.2</a>&nbsp;\n            \tClass 2</b><br><b><a href=\"#rfc.section.16\">16</a>&nbsp;\n            \tInternationalization Considerations</b><br><b><a href=\"#rfc.section.17\">17</a>&nbsp;\n            \tSecurity Considerations</b><br><b><a href=\"#rfc.section.17.1\">17.1</a>&nbsp;\n            \tAuthentication of Clients</b><br><b><a href=\"#rfc.section.17.2\">17.2</a>&nbsp;\n            \tDenial of Service</b><br><b><a href=\"#rfc.section.17.3\">17.3</a>&nbsp;\n            \tSecurity through Obscurity</b><br><b><a href=\"#rfc.section.17.4\">17.4</a>&nbsp;\n            \tPrivacy Issues Connected to Locks</b><br><b><a href=\"#rfc.section.17.5\">17.5</a>&nbsp;\n            \tPrivacy Issues Connected to Properties</b><br><b><a href=\"#rfc.section.17.6\">17.6</a>&nbsp;\n            \tReduction of Security due to Source Link</b><br><b><a href=\"#rfc.section.17.7\">17.7</a>&nbsp;\n            \tImplications of XML External Entities</b><br><b><a href=\"#rfc.section.17.8\">17.8</a>&nbsp;\n            \tRisks Connected with Lock Tokens</b><br><b><a href=\"#rfc.section.18\">18</a>&nbsp;\n            \tIANA Considerations</b><br><b><a href=\"#rfc.section.19\">19</a>&nbsp;\n            \tIntellectual Property</b><br><b><a href=\"#rfc.section.20\">20</a>&nbsp;\n            \tAcknowledgements</b><br><b><a href=\"#rfc.references\">&sect;</a>&nbsp;\n            \tReferences</b><br><b><a href=\"#rfc.section.A\">A</a>&nbsp;\n            \tWebDAV Document Type Definition</b><br><b><a href=\"#rfc.section.B\">B</a>&nbsp;\n            \tISO 8601 Date and Time Profile</b><br><b><a href=\"#rfc.section.C\">C</a>&nbsp;\n            \tNotes on Processing XML Elements</b><br><b><a href=\"#rfc.section.C.1\">C.1</a>&nbsp;\n            \tNotes on Empty XML Elements</b><br><b><a href=\"#rfc.section.C.2\">C.2</a>&nbsp;\n            \tNotes on Illegal XML Processing</b><br><b><a href=\"#rfc.section.C.2.1\">C.2.1</a>&nbsp;\n            \tExample - XML Syntax Error</b><br><b><a href=\"#rfc.section.C.2.2\">C.2.2</a>&nbsp;\n            \tExample - Unknown XML Element</b><br><b><a href=\"#rfc.section.C.3\">C.3</a>&nbsp;\n            \tXML Namespaces for WebDAV</b><br><b><a href=\"#rfc.section.C.3.1\">C.3.1</a>&nbsp;\n            \tIntroduction</b><br><b><a href=\"#rfc.section.C.3.2\">C.3.2</a>&nbsp;\n            \tMeaning of Qualified Names</b><br><b><a href=\"#rfc.authors\">&sect;</a>&nbsp;Author's Address\n            \t</b><br><b><a href=\"#rfc.copyright\">&sect;</a>&nbsp;Full Copyright Statement\n            \t</b><br></ul>\n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.1\">1</a>.&nbsp;\n         Introduction\n      </h1>\n      \n      <p>\n         This document describes an extension to the HTTP/1.1 protocol that\n         allows clients to perform remote web content authoring operations.\n         This extension provides a coherent set of methods, headers, request\n         entity body formats, and response entity body formats that provide\n         operations for:\n         \n      </p>\n      <p>\n         Properties: The ability to create, remove, and query information\n         about Web pages, such as their authors, creation dates, etc. Also,\n         the ability to link pages of any media type to related pages.\n         \n      </p>\n      <p>\n         Collections: The ability to create sets of documents and to retrieve\n         a hierarchical membership listing (like a directory listing in a file\n         system).\n         \n      </p>\n      <p>\n         Locking: The ability to keep more than one person from working on a\n         document at the same time. This prevents the \"lost update problem,\"\n         in which modifications are lost as first one author then another\n         writes changes without merging the other author's changes.\n         \n      </p>\n      <p>\n         Namespace Operations: The ability to instruct the server to copy and\n         move Web resources.\n         \n      </p>\n      <p>\n         Requirements and rationale for these operations are described in a\n         companion document, \"Requirements for a Distributed Authoring and\n         Versioning Protocol for the World Wide Web\" <a href=\"#RFC2291\" title=\"Requirements for a Distributed Authoring and Versioning Protocol for the World Wide Web\">[RFC2291]</a>.\n         \n      </p>\n      <p>\n         The sections below provide a detailed introduction to resource\n         properties (section 4), collections of resources (section 5), and\n         locking operations (section 6).  These sections introduce the\n         abstractions manipulated by the WebDAV-specific HTTP methods\n         described in section 8, \"HTTP Methods for Distributed Authoring\".\n         \n      </p>\n      <p>\n         In HTTP/1.1, method parameter information was exclusively encoded in\n         HTTP headers. Unlike HTTP/1.1, WebDAV encodes method parameter\n         information either in an Extensible Markup Language (XML) <a href=\"#REC-XML\" title=\"Extensible Markup Language (XML) 1.0\">[REC-XML]</a>\n         request entity body, or in an HTTP header.  The use of XML to encode\n         method parameters was motivated by the ability to add extra XML\n         elements to existing structures, providing extensibility; and by\n         XML's ability to encode information in ISO 10646 character sets,\n         providing internationalization support. As a rule of thumb,\n         parameters are encoded in XML entity bodies when they have unbounded\n         length, or when they may be shown to a human user and hence require\n         encoding in an ISO 10646 character set.  Otherwise, parameters are\n         encoded within HTTP headers.  Section 9 describes the new HTTP\n         headers used with WebDAV methods.\n         \n      </p>\n      <p>\n         In addition to encoding method parameters, XML is used in WebDAV to\n         encode the responses from methods, providing the extensibility and\n         internationalization advantages of XML for method output, as well as\n         input.\n         \n      </p>\n      <p>\n         XML elements used in this specification are defined in section 12.\n         \n      </p>\n      <p>\n         The XML namespace extension (Appendix 4) is also used in this\n         specification in order to allow for new XML elements to be added\n         without fear of colliding with other element names.\n         \n      </p>\n      <p>\n         While the status codes provided by HTTP/1.1 are sufficient to\n         describe most error conditions encountered by WebDAV methods, there\n         are some errors that do not fall neatly into the existing categories.\n         New status codes developed for the WebDAV methods are defined in\n         section 10.  Since some WebDAV methods may operate over many\n         resources, the Multi-Status response has been introduced to return\n         status information for multiple resources.  The Multi-Status response\n         is described in section 11.\n         \n      </p>\n      <p>\n         WebDAV employs the property mechanism to store information about the\n         current state of the resource.  For example, when a lock is taken out\n         on a resource, a lock information property describes the current\n         state of the lock. Section 13 defines the properties used within the\n         WebDAV specification.\n         \n      </p>\n      <p>\n         Finishing off the specification are sections on what it means to be\n         compliant with this specification (section 15), on\n         internationalization support (section 16), and on security (section\n         17).\n         \n      </p>\n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.2\">2</a>.&nbsp;\n         Notational Conventions\n      </h1>\n      \n      <p>\n         Since this document describes a set of extensions to the HTTP/1.1\n         protocol, the augmented BNF used herein to describe protocol elements\n         is exactly the same as described in section 2.1 of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>.  Since\n         this augmented BNF uses the basic production rules provided in\n         section 2.2 of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>, these rules apply to this document as well.\n         \n      </p>\n      <p>\n         The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n         \"SHOULD\", SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n         document are to be interpreted as described in RFC 2119 <a href=\"#RFC2119\" title=\"Key words for use in RFCs to Indicate Requirement Levels\">[RFC2119]</a>.\n         \n      </p>\n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.3\">3</a>.&nbsp;\n         Terminology\n      </h1>\n      \n      <p>\n         URI/URL - A Uniform Resource Identifier and Uniform Resource Locator,\n         respectively. These terms (and the distinction between them) are\n         defined in <a href=\"#RFC2396\" title=\"Uniform Resource Identifiers (URI): Generic Syntax\">[RFC2396]</a>.\n         \n      </p>\n      <p>\n         Collection - A resource that contains a set of URIs, termed member\n         URIs, which identify member resources and meets the requirements in\n         section 5 of this specification.\n         \n      </p>\n      <p>\n         Member URI - A URI which is a member of the set of URIs contained by\n         a collection.\n         \n      </p>\n      <p>\n         Internal Member URI - A Member URI that is immediately relative to\n         the URI of the collection (the definition of immediately relative is\n         given in section 5.2).\n         \n      </p>\n      <p>\n         Property - A name/value pair that contains descriptive information\n         about a resource.\n         \n      </p>\n      <p>\n         Live Property - A property whose semantics and syntax are enforced by\n         the server.  For example, the live \"getcontentlength\" property has\n         its value, the length of the entity returned by a GET request,\n         automatically calculated by the server.\n         \n      </p>\n      <p>\n         Dead Property - A property whose semantics and syntax are not\n         enforced by the server.  The server only records the value of a dead\n         property; the client is responsible for maintaining the consistency\n         of the syntax and semantics of a dead property.\n         \n      </p>\n      <p>\n         Null Resource - A resource which responds with a 404 (Not Found) to\n         any HTTP/1.1 or DAV method except for PUT, MKCOL, OPTIONS and LOCK.\n         A NULL resource MUST NOT appear as a member of its parent collection.\n         \n      </p>\n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.4\">4</a>.&nbsp;\n         Data Model for Resource Properties\n      </h1>\n      \n      \n      <h2><a name=\"rfc.section.4.1\">4.1</a>.&nbsp;\n         The Resource Property Model\n      </h2>\n      \n      <p>\n         Properties are pieces of data that describe the state of a resource.\n         Properties are data about data.\n         \n      </p>\n      <p>\n         Properties are used in distributed authoring environments to provide\n         for efficient discovery and management of resources.  For example, a\n         'subject' property might allow for the indexing of all resources by\n         their subject, and an 'author' property might allow for the discovery\n         of what authors have written which documents.\n         \n      </p>\n      <p>\n         The DAV property model consists of name/value pairs.  The name of a\n         property identifies the property's syntax and semantics, and provides\n         an address by which to refer to its syntax and semantics.\n         \n      </p>\n      <p>\n         There are two categories of properties: \"live\" and \"dead\".  A live\n         property has its syntax and semantics enforced by the server. Live\n         properties include cases where a) the value of a property is read-\n         only, maintained by the server, and b) the value of the property is\n         maintained by the client, but the server performs syntax checking on\n         submitted values. All instances of a given live property MUST comply\n         with the definition associated with that property name.  A dead\n         property has its syntax and semantics enforced by the client; the\n         server merely records the value of the property verbatim.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.4.2\">4.2</a>.&nbsp;\n         Existing Metadata Proposals\n      </h2>\n      \n      <p>\n         Properties have long played an essential role in the maintenance of\n         large document repositories, and many current proposals contain some\n         notion of a property, or discuss web metadata more generally.  These\n         include PICS <a href=\"#REC-PICS\" title=\"PICS Label Distribution Label Syntax and Communication Protocols, Version 1.1\">[REC-PICS]</a>, PICS-NG, XML, Web Collections, and several\n         proposals on representing relationships within HTML. Work on PICS-NG\n         and Web Collections has been subsumed by the Resource Description\n         Framework (RDF) metadata activity of the World Wide Web Consortium.\n         RDF consists of a network-based data model and an XML representation\n         of that model.\n         \n      </p>\n      <p>\n         Some proposals come from a digital library perspective.  These\n         include the Dublin Core <a href=\"#RFC2413\" title=\"Dublin Core Metadata for Resource Discovery\">[RFC2413]</a> metadata set and the Warwick\n         Framework <a href=\"#WF\" title=\"The Warwick Framework: A Container Architecture for Diverse Sets of Metadata\">[WF]</a>, a container architecture for different metadata\n         schemas.  The literature includes many examples of metadata,\n         including MARC <a href=\"#USMARC\" title=\"USMARC Format for Bibliographic Data\">[USMARC]</a>, a bibliographic metadata format, and a\n         technical report bibliographic format employed by the Dienst system\n         <a href=\"#RFC1807\" title=\"A Format for Bibliographic Records\">[RFC1807]</a>. Additionally, the proceedings from the first IEEE Metadata\n         conference describe many community-specific metadata sets.\n         \n      </p>\n      <p>\n         Participants of the 1996 Metadata II Workshop in Warwick, UK <a href=\"#WF\" title=\"The Warwick Framework: A Container Architecture for Diverse Sets of Metadata\">[WF]</a>,\n         noted that \"new metadata sets will develop as the networked\n         infrastructure matures\" and \"different communities will propose,\n         design, and be responsible for different types of metadata.\" These\n         observations can be corroborated by noting that many community-\n         specific sets of metadata already exist, and there is significant\n         motivation for the development of new forms of metadata as many\n         communities increasingly make their data available in digital form,\n         requiring a metadata format to assist data location and cataloging.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.4.3\">4.3</a>.&nbsp;\n         Properties and HTTP Headers\n      </h2>\n      \n      <p>\n         Properties already exist, in a limited sense, in HTTP message\n         headers.  However, in distributed authoring environments a relatively\n         large number of properties are needed to describe the state of a\n         resource, and setting/returning them all through HTTP headers is\n         inefficient.  Thus a mechanism is needed which allows a principal to\n         identify a set of properties in which the principal is interested and\n         to set or retrieve just those properties.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.4.4\">4.4</a>.&nbsp;\n         Property Values\n      </h2>\n      \n      <p>\n         The value of a property when expressed in XML MUST be well formed.\n         \n      </p>\n      <p>\n         XML has been chosen because it is a flexible, self-describing,\n         structured data format that supports rich schema definitions, and\n         because of its support for multiple character sets.  XML's self-\n         describing nature allows any property's value to be extended by\n         adding new elements.  Older clients will not break when they\n         encounter extensions because they will still have the data specified\n         in the original schema and will ignore elements they do not\n         understand.  XML's support for multiple character sets allows any\n         human-readable property to be encoded and read in a character set\n         familiar to the user.  XML's support for multiple human languages,\n         using the \"xml:lang\" attribute, handles cases where the same\n         character set is employed by multiple human languages.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.4.5\">4.5</a>.&nbsp;\n         Property Names\n      </h2>\n      \n      <p>\n         A property name is a universally unique identifier that is associated\n         with a schema that provides information about the syntax and\n         semantics of the property.\n         \n      </p>\n      <p>\n         Because a property's name is universally unique, clients can depend\n         upon consistent behavior for a particular property across multiple\n         resources, on the same and across different servers, so long as that\n         property is \"live\" on the resources in question, and the\n         implementation of the live property is faithful to its definition.\n         \n      </p>\n      <p>\n         The XML namespace mechanism, which is based on URIs <a href=\"#RFC2396\" title=\"Uniform Resource Identifiers (URI): Generic Syntax\">[RFC2396]</a>, is\n         used to name properties because it prevents namespace collisions and\n         provides for varying degrees of administrative control.\n         \n      </p>\n      <p>\n         The property namespace is flat; that is, no hierarchy of properties\n         is explicitly recognized.  Thus, if a property A and a property A/B\n         exist on a resource, there is no recognition of any relationship\n         between the two properties.  It is expected that a separate\n         specification will eventually be produced which will address issues\n         relating to hierarchical properties.\n         \n      </p>\n      <p>\n         Finally, it is not possible to define the same property twice on a\n         single resource, as this would cause a collision in the resource's\n         property namespace.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.4.6\">4.6</a>.&nbsp;\n         Media Independent Links\n      </h2>\n      \n      <p>\n         Although HTML resources support links to other resources, the Web\n         needs more general support for links between resources of any media\n         type (media types are also known as MIME types, or content types).\n         WebDAV provides such links. A WebDAV link is a special type of\n         property value, formally defined in section 12.4, that allows typed\n         connections to be established between resources of any media type.\n         The property value consists of source and destination Uniform\n         Resource Identifiers (URIs); the property name identifies the link\n         type.\n         \n      </p>\n      \n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.5\">5</a>.&nbsp;\n         Collections of Web Resources\n      </h1>\n      \n      <p>\n         This section provides a description of a new type of Web resource,\n         the collection, and discusses its interactions with the HTTP URL\n         namespace. The purpose of a collection resource is to model\n         collection-like objects (e.g., file system directories) within a\n         server's namespace.\n         \n      </p>\n      <p>\n         All DAV compliant resources MUST support the HTTP URL namespace model\n         specified herein.\n         \n      </p>\n      \n      \n      <h2><a name=\"rfc.section.5.1\">5.1</a>.&nbsp;\n         HTTP URL Namespace Model\n      </h2>\n      \n      <p>\n         The HTTP URL namespace is a hierarchical namespace where the\n         hierarchy is delimited with the \"/\" character.\n         \n      </p>\n      <p>\n         An HTTP URL namespace is said to be consistent if it meets the\n         following conditions: for every URL in the HTTP hierarchy there\n         exists a collection that contains that URL as an internal member.\n         The root, or top-level collection of the namespace under\n         consideration is exempt from the previous rule.\n         \n      </p>\n      <p>\n         Neither HTTP/1.1 nor WebDAV require that the entire HTTP URL\n         namespace be consistent.  However, certain WebDAV methods are\n         prohibited from producing results that cause namespace\n         inconsistencies.\n         \n      </p>\n      <p>\n         Although implicit in <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a> and <a href=\"#RFC2396\" title=\"Uniform Resource Identifiers (URI): Generic Syntax\">[RFC2396]</a>, any resource, including\n         collection resources, MAY be identified by more than one URI. For\n         example, a resource could be identified by multiple HTTP URLs.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.5.2\">5.2</a>.&nbsp;\n         Collection Resources\n      </h2>\n      \n      <p>\n         A collection is a resource whose state consists of at least a list of\n         internal member URIs and a set of properties, but which may have\n         additional state such as entity bodies returned by GET.  An internal\n         member URI MUST be immediately relative to a base URI of the\n         collection.  That is, the internal member URI is equal to a\n         containing collection's URI plus an additional segment for non-\n         collection resources, or additional segment plus trailing slash \"/\"\n         for collection resources, where segment is defined in section 3.3 of\n         <a href=\"#RFC2396\" title=\"Uniform Resource Identifiers (URI): Generic Syntax\">[RFC2396]</a>.\n         \n      </p>\n      <p>\n         Any given internal member URI MUST only belong to the collection\n         once, i.e., it is illegal to have multiple instances of the same URI\n         in a collection.  Properties defined on collections behave exactly as\n         do properties on non-collection resources.\n         \n      </p>\n      <p>\n         For all WebDAV compliant resources A and B, identified by URIs U and\n         V, for which U is immediately relative to V, B MUST be a collection\n         that has U as an internal member URI. So, if the resource with URL\n         http://foo.com/bar/blah is WebDAV compliant and if the resource with\n         URL http://foo.com/bar/ is WebDAV compliant then the resource with\n         URL http://foo.com/bar/ must be a collection and must contain URL\n         http://foo.com/bar/blah as an internal member.\n         \n      </p>\n      <p>\n         Collection resources MAY list the URLs of non-WebDAV compliant\n         children in the HTTP URL namespace hierarchy as internal members but\n         are not required to do so. For example, if the resource with URL\n         http://foo.com/bar/blah is not WebDAV compliant and the URL\n         http://foo.com/bar/ identifies a collection then URL\n         http://foo.com/bar/blah may or may not be an internal member of the\n         collection with URL http://foo.com/bar/.\n         \n      </p>\n      <p>\n         If a WebDAV compliant resource has no WebDAV compliant children in\n         the HTTP URL namespace hierarchy then the WebDAV compliant resource\n         is not required to be a collection.\n         \n      </p>\n      <p>\n         There is a standing convention that when a collection is referred to\n         by its name without a trailing slash, the trailing slash is\n         automatically appended.  Due to this, a resource may accept a URI\n         without a trailing \"/\" to point to a collection. In this case it\n         SHOULD return a content-location header in the response pointing to\n         the URI ending with the \"/\".  For example, if a client invokes a\n         method on http://foo.bar/blah (no trailing slash), the resource\n         http://foo.bar/blah/ (trailing slash) may respond as if the operation\n         were invoked on it, and should return a content-location header with\n         http://foo.bar/blah/ in it.  In general clients SHOULD use the \"/\"\n         form of collection names.\n         \n      </p>\n      <p>\n         A resource MAY be a collection but not be WebDAV compliant.  That is,\n         the resource may comply with all the rules set out in this\n         specification regarding how a collection is to behave without\n         necessarily supporting all methods that a WebDAV compliant resource\n         is required to support.  In such a case the resource may return the\n         DAV:resourcetype property with the value DAV:collection but MUST NOT\n         return a DAV header containing the value \"1\" on an OPTIONS response.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.5.3\">5.3</a>.&nbsp;\n         Creation and Retrieval of Collection Resources\n      </h2>\n      \n      <p>\n         This document specifies the MKCOL method to create new collection\n         resources, rather than using the existing HTTP/1.1 PUT or POST\n         method, for the following reasons:\n         \n      </p>\n      <p>\n         In HTTP/1.1, the PUT method is defined to store the request body at\n         the location specified by the Request-URI.  While a description\n         format for a collection can readily be constructed for use with PUT,\n         the implications of sending such a description to the server are\n         undesirable.  For example, if a description of a collection that\n         omitted some existing resources were PUT to a server, this might be\n         interpreted as a command to remove those members.  This would extend\n         PUT to perform DELETE functionality, which is undesirable since it\n         changes the semantics of PUT, and makes it difficult to control\n         DELETE functionality with an access control scheme based on methods.\n         \n      </p>\n      <p>\n         While the POST method is sufficiently open-ended that a \"create a\n         collection\" POST command could be constructed, this is undesirable\n         because it would be difficult to separate access control for\n         collection creation from other uses of POST.\n         \n      </p>\n      <p>\n         The exact definition of the behavior of GET and PUT on collections is\n         defined later in this document.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.5.4\">5.4</a>.&nbsp;\n         Source Resources and Output Resources\n      </h2>\n      \n      <p>\n         For many resources, the entity returned by a GET method exactly\n         matches the persistent state of the resource, for example, a GIF file\n         stored on a disk.  For this simple case, the URI at which a resource\n         is accessed is identical to the URI at which the source (the\n         persistent state) of the resource is accessed.  This is also the case\n         for HTML source files that are not processed by the server prior to\n         transmission.\n         \n      </p>\n      <p>\n         However, the server can sometimes process HTML resources before they\n         are transmitted as a return entity body.  For example, a server-\n         side-include directive within an HTML file might instruct a server to\n         replace the directive with another value, such as the current date.\n         In this case, what is returned by GET (HTML plus date) differs from\n         the persistent state of the resource (HTML plus directive).\n         Typically there is no way to access the HTML resource containing the\n         unprocessed directive.\n         \n      </p>\n      <p>\n         Sometimes the entity returned by GET is the output of a data-\n         producing process that is described by one or more source resources\n         (that may not even have a location in the URI namespace).  A single\n         data-producing process may dynamically generate the state of a\n         potentially large number of output resources.  An example of this is\n         a CGI script that describes a \"finger\" gateway process that maps part\n         of the namespace of a server into finger requests, such as\n         http://www.foo.bar.org/finger_gateway/user@host.\n         \n      </p>\n      <p>\n         In the absence of distributed authoring capabilities, it is\n         acceptable to have no mapping of source resource(s) to the URI\n         namespace. In fact, preventing access to the source resource(s) has\n         desirable security benefits.  However, if remote editing of the\n         source resource(s) is desired, the source resource(s) should be given\n         a location in the URI namespace.  This source location should not be\n         one of the locations at which the generated output is retrievable,\n         since in general it is impossible for the server to differentiate\n         requests for source resources from requests for process output\n         resources.  There is often a many-to-many relationship between source\n         resources and output resources.\n         \n      </p>\n      <p>\n         On WebDAV compliant servers the URI of the source resource(s) may be\n         stored in a link on the output resource with type DAV:source (see\n         section 13.10 for a description of the source link property).\n         Storing the source URIs in links on the output resources places the\n         burden of discovering the source on the authoring client.  Note that\n         the value of a source link is not guaranteed to point to the correct\n         source.  Source links may break or incorrect values may be entered.\n         Also note that not all servers will allow the client to set the\n         source link value.  For example a server which generates source links\n         on the fly for its CGI files will most likely not allow a client to\n         set the source link value.\n         \n      </p>\n      \n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.6\">6</a>.&nbsp;\n         Locking\n      </h1>\n      \n      <p>\n         The ability to lock a resource provides a mechanism for serializing\n         access to that resource.  Using a lock, an authoring client can\n         provide a reasonable guarantee that another principal will not modify\n         a resource while it is being edited.  In this way, a client can\n         prevent the \"lost update\" problem.\n         \n      </p>\n      <p>\n         This specification allows locks to vary over two client-specified\n         parameters, the number of principals involved (exclusive vs. shared)\n         and the type of access to be granted. This document defines locking\n         for only one access type, write. However, the syntax is extensible,\n         and permits the eventual specification of locking for other access\n         types.\n         \n      </p>\n      \n      \n      <h2><a name=\"rfc.section.6.1\">6.1</a>.&nbsp;\n         Exclusive Vs. Shared Locks\n      </h2>\n      \n      <p>\n         The most basic form of lock is an exclusive lock.  This is a lock\n         where the access right in question is only granted to a single\n         principal.  The need for this arbitration results from a desire to\n         avoid having to merge results.\n         \n      </p>\n      <p>\n         However, there are times when the goal of a lock is not to exclude\n         others from exercising an access right but rather to provide a\n         mechanism for principals to indicate that they intend to exercise\n         their access rights.  Shared locks are provided for this case.  A\n         shared lock allows multiple principals to receive a lock.  Hence any\n         principal with appropriate access can get the lock.\n         \n      </p>\n      <p>\n         With shared locks there are two trust sets that affect a resource.\n         The first trust set is created by access permissions.  Principals who\n         are trusted, for example, may have permission to write to the\n         resource.  Among those who have access permission to write to the\n         resource, the set of principals who have taken out a shared lock also\n         must trust each other, creating a (typically) smaller trust set\n         within the access permission write set.\n         \n      </p>\n      <p>\n         Starting with every possible principal on the Internet, in most\n         situations the vast majority of these principals will not have write\n         access to a given resource.  Of the small number who do have write\n         access, some principals may decide to guarantee their edits are free\n         from overwrite conflicts by using exclusive write locks.  Others may\n         decide they trust their collaborators will not overwrite their work\n         (the potential set of collaborators being the set of principals who\n         have write permission) and use a shared lock, which informs their\n         collaborators that a principal may be working on the resource.\n         \n      </p>\n      <p>\n         The WebDAV extensions to HTTP do not need to provide all of the\n         communications paths necessary for principals to coordinate their\n         activities.  When using shared locks, principals may use any out of\n         band communication channel to coordinate their work (e.g., face-to-\n         face interaction, written notes, post-it notes on the screen,\n         telephone conversation, Email, etc.)  The intent of a shared lock is\n         to let collaborators know who else may be working on a resource.\n         \n      </p>\n      <p>\n         Shared locks are included because experience from web distributed\n         authoring systems has indicated that exclusive locks are often too\n         rigid.  An exclusive lock is used to enforce a particular editing\n         process: take out an exclusive lock, read the resource, perform\n         edits, write the resource, release the lock.  This editing process\n         has the problem that locks are not always properly released, for\n         example when a program crashes, or when a lock owner leaves without\n         unlocking a resource.  While both timeouts and administrative action\n         can be used to remove an offending lock, neither mechanism may be\n         available when needed; the timeout may be long or the administrator\n         may not be available.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.6.2\">6.2</a>.&nbsp;\n         Required Support\n      </h2>\n      \n      <p>\n         A WebDAV compliant server is not required to support locking in any\n         form.  If the server does support locking it may choose to support\n         any combination of exclusive and shared locks for any access types.\n         \n      </p>\n      <p>\n         The reason for this flexibility is that locking policy strikes to the\n         very heart of the resource management and versioning systems employed\n         by various storage repositories.  These repositories require control\n         over what sort of locking will be made available.  For example, some\n         repositories only support shared write locks while others only\n         provide support for exclusive write locks while yet others use no\n         locking at all.  As each system is sufficiently different to merit\n         exclusion of certain locking features, this specification leaves\n         locking as the sole axis of negotiation within WebDAV.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.6.3\">6.3</a>.&nbsp;\n         Lock Tokens\n      </h2>\n      \n      <p>\n         A lock token is a type of state token, represented as a URI, which\n         identifies a particular lock.  A lock token is returned by every\n         successful LOCK operation in the lockdiscovery property in the\n         response body, and can also be found through lock discovery on a\n         resource.\n         \n      </p>\n      <p>\n         Lock token URIs MUST be unique across all resources for all time.\n         This uniqueness constraint allows lock tokens to be submitted across\n         resources and servers without fear of confusion.\n         \n      </p>\n      <p>\n         This specification provides a lock token URI scheme called\n         opaquelocktoken that meets the uniqueness requirements.  However\n         resources are free to return any URI scheme so long as it meets the\n         uniqueness requirements.\n         \n      </p>\n      <p>\n         Having a lock token provides no special access rights. Anyone can\n         find out anyone else's lock token by performing lock discovery.\n         Locks MUST be enforced based upon whatever authentication mechanism\n         is used by the server, not based on the secrecy of the token values.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.6.4\">6.4</a>.&nbsp;\n         opaquelocktoken Lock Token URI Scheme\n      </h2>\n      \n      <p>\n         The opaquelocktoken URI scheme is designed to be unique across all\n         resources for all time.  Due to this uniqueness quality, a client may\n         submit an opaque lock token in an If header on a resource other than\n         the one that returned it.\n         \n      </p>\n      <p>\n         All resources MUST recognize the opaquelocktoken scheme and, at\n         minimum, recognize that the lock token does not refer to an\n         outstanding lock on the resource.\n         \n      </p>\n      <p>\n         In order to guarantee uniqueness across all resources for all time\n         the opaquelocktoken requires the use of the Universal Unique\n         Identifier (UUID) mechanism, as described in <a href=\"#ISO-11578\" title=\"ISO/IEC 11578:1996. Information technology - Open Systems Interconnection - Remote Procedure Call (RPC)\">[ISO-11578]</a>.\n         \n      </p>\n      <p>\n         Opaquelocktoken generators, however, have a choice of how they create\n         these tokens.  They can either generate a new UUID for every lock\n         token they create or they can create a single UUID  and then add\n         extension characters.  If the second method is selected then the\n         program generating the extensions MUST guarantee that the same\n         extension will never be used twice with the associated UUID.\n         \n      </p>\n      <p>\n         OpaqueLockToken-URI = \"opaquelocktoken:\" UUID [Extension]  ; The UUID\n         production is the string representation of a UUID, as defined in\n         <a href=\"#ISO-11578\" title=\"ISO/IEC 11578:1996. Information technology - Open Systems Interconnection - Remote Procedure Call (RPC)\">[ISO-11578]</a>. Note that white space (LWS) is not allowed between\n         elements of this production.\n         \n      </p>\n      <p>\n         Extension = path  ; path is defined in section 3.2.1 of RFC 2068\n         <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.6.4.1\">6.4.1</a>.&nbsp;\n         Node Field Generation Without the IEEE 802 Address\n      </h3>\n      \n      <p>\n         UUIDs, as defined in <a href=\"#ISO-11578\" title=\"ISO/IEC 11578:1996. Information technology - Open Systems Interconnection - Remote Procedure Call (RPC)\">[ISO-11578]</a>, contain a \"node\" field that\n         contains one of the IEEE 802 addresses for the server machine.  As\n         noted in section 17.8, there are several security risks associated\n         with exposing a machine's IEEE 802 address. This section provides an\n         alternate mechanism for generating the \"node\" field of a UUID which\n         does not employ an IEEE 802 address.  WebDAV servers MAY use this\n         algorithm for creating the node field when generating UUIDs.  The\n         text in this section is originally from an Internet-Draft by Paul\n         Leach and Rich Salz, who are noted here to properly attribute their\n         work.\n         \n      </p>\n      <p>\n         The ideal solution is to obtain a 47 bit cryptographic quality random\n         number, and use it as the low 47 bits of the node ID, with the most\n         significant bit of the first octet of the node ID set to 1.  This bit\n         is the unicast/multicast bit, which will never be set in IEEE 802\n         addresses obtained from network cards; hence, there can never be a\n         conflict between UUIDs generated by machines with and without network\n         cards.\n         \n      </p>\n      <p>\n         If a system does not have a primitive to generate cryptographic\n         quality random numbers, then in most systems there are usually a\n         fairly large number of sources of randomness available from which one\n         can be generated. Such sources are system specific, but often\n         include:\n         \n      </p>\n      <p>\n         <ul class=\"text\">\n            \n            <li>the percent of memory in use</li>\n            \n            <li>the size of main memory in bytes</li>\n            \n            <li>the amount of free main memory in bytes</li>\n            \n            <li>the size of the paging or swap file in bytes</li>\n            \n            <li>free bytes of paging or swap file</li>\n            \n            <li>the total size of user virtual address space in bytes</li>\n            \n            <li>the total available user address space bytes</li>\n            \n            <li>the size of boot disk drive in bytes</li>\n            \n            <li>the free disk space on boot drive in bytes</li>\n            \n            <li>the current time</li>\n            \n            <li>the amount of time since the system booted</li>\n            \n            <li>the individual sizes of files in various system directories</li>\n            \n            <li>the creation, last read, and modification times of files in\n               various system directories\n            </li>\n            \n            <li>the utilization factors of various system resources (heap, etc.)</li>\n            \n            <li>current mouse cursor position</li>\n            \n            <li>current caret position</li>\n            \n            <li>current number of running processes, threads</li>\n            \n            <li>handles or IDs of the desktop window and the active window</li>\n            \n            <li>the value of stack pointer of the caller</li>\n            \n            <li>the process and thread ID of caller</li>\n            \n            <li>various processor architecture specific performance counters\n               (instructions executed, cache misses, TLB misses)\n            </li>\n            \n         </ul>\n      </p>\n      <p>\n         (Note that it is precisely the above kinds of sources of randomness\n         that are used to seed cryptographic quality random number generators\n         on systems without special hardware for their construction.)\n         \n      </p>\n      <p>\n         In addition, items such as the computer's name and the name of the\n         operating system, while not strictly speaking random, will help\n         differentiate the results from those obtained by other systems.\n         \n      </p>\n      <p>\n         The exact algorithm to generate a node ID using these data is system\n         specific, because both the data available and the functions to obtain\n         them are often very system specific. However, assuming that one can\n         concatenate all the values from the randomness sources into a buffer,\n         and that a cryptographic hash function such as MD5 is available, then\n         any 6 bytes of the MD5 hash of the buffer, with the multicast bit\n         (the high bit of the first byte) set will be an appropriately random\n         node ID.\n         \n      </p>\n      <p>\n         Other hash functions, such as SHA-1, can also be used. The only\n         requirement is that the result be suitably random _ in the sense that\n         the outputs from a set uniformly distributed inputs are themselves\n         uniformly distributed, and that a single bit change in the input can\n         be expected to cause half of the output bits to change.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.6.5\">6.5</a>.&nbsp;\n         Lock Capability Discovery\n      </h2>\n      \n      <p>\n         Since server lock support is optional, a client trying to lock a\n         resource on a server can either try the lock and hope for the best,\n         or perform some form of discovery to determine what lock capabilities\n         the server supports.  This is known as lock capability discovery.\n         Lock capability discovery differs from discovery of supported access\n         control types, since there may be access control types without\n         corresponding lock types.  A client can determine what lock types the\n         server supports by retrieving the supportedlock property.\n         \n      </p>\n      <p>\n         Any DAV compliant resource that supports the LOCK method MUST support\n         the supportedlock property.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.6.6\">6.6</a>.&nbsp;\n         Active Lock Discovery\n      </h2>\n      \n      <p>\n         If another principal locks a resource that a principal wishes to\n         access, it is useful for the second principal to be able to find out\n         who the first principal is.  For this purpose the lockdiscovery\n         property is provided.  This property lists all outstanding locks,\n         describes their type, and where available, provides their lock token.\n         \n      </p>\n      <p>\n         Any DAV compliant resource that supports the LOCK method MUST support\n         the lockdiscovery property.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.6.7\">6.7</a>.&nbsp;\n         Usage Considerations\n      </h2>\n      \n      <p>\n         Although the locking mechanisms specified here provide some help in\n         preventing lost updates, they cannot guarantee that updates will\n         never be lost.  Consider the following scenario:\n         \n      </p>\n      <p>\n         Two clients A and B are interested in editing the resource '\n         index.html'.  Client A is an HTTP client rather than a WebDAV client,\n         and so does not know how to perform locking.\n         \n      </p>\n      <p>\n         Client A doesn't lock the document, but does a GET and begins\n         editing.\n         \n      </p>\n      <p>\n         Client B does LOCK, performs a GET and begins editing.\n         \n      </p>\n      <p>\n         Client B finishes editing, performs a PUT, then an UNLOCK.\n         \n      </p>\n      <p>\n         Client A performs a PUT, overwriting and losing all of B's changes.\n         \n      </p>\n      <p>\n         There are several reasons why the WebDAV protocol itself cannot\n         prevent this situation.  First, it cannot force all clients to use\n         locking because it must be compatible with HTTP clients that do not\n         comprehend locking.  Second, it cannot require servers to support\n         locking because of the variety of repository implementations, some of\n         which rely on reservations and merging rather than on locking.\n         Finally, being stateless, it cannot enforce a sequence of operations\n         like LOCK / GET / PUT / UNLOCK.\n         \n      </p>\n      <p>\n         WebDAV servers that support locking can reduce the likelihood that\n         clients will accidentally overwrite each other's changes by requiring\n         clients to lock resources before modifying them.  Such servers would\n         effectively prevent HTTP 1.0 and HTTP 1.1 clients from modifying\n         resources.\n         \n      </p>\n      <p>\n         WebDAV clients can be good citizens by using a lock / retrieve /\n         write /unlock sequence of operations (at least by default) whenever\n         they interact with a WebDAV server that supports locking.\n         \n      </p>\n      <p>\n         HTTP 1.1 clients can be good citizens, avoiding overwriting other\n         clients' changes, by using entity tags in If-Match headers with any\n         requests that would modify resources.\n         \n      </p>\n      <p>\n         Information managers may attempt to prevent overwrites by\n         implementing client-side procedures requiring locking before\n         modifying WebDAV resources.\n         \n      </p>\n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.7\">7</a>.&nbsp;\n         Write Lock\n      </h1>\n      \n      <p>\n         This section describes the semantics specific to the write lock type.\n         The write lock is a specific instance of a lock type, and is the only\n         lock type described in this specification.\n         \n      </p>\n      \n      \n      <h2><a name=\"rfc.section.7.1\">7.1</a>.&nbsp;\n         Methods Restricted by Write Locks\n      </h2>\n      \n      <p>\n         A write lock MUST prevent a principal without the lock from\n         successfully executing a PUT, POST, PROPPATCH, LOCK, UNLOCK, MOVE,\n         DELETE, or MKCOL on the locked resource.  All other current methods,\n         GET in particular, function independently of the lock.\n         \n      </p>\n      <p>\n         Note, however, that as new methods are created it will be necessary\n         to specify how they interact with a write lock.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.7.2\">7.2</a>.&nbsp;\n         Write Locks and Lock Tokens\n      </h2>\n      \n      <p>\n         A successful request for an exclusive or shared write lock MUST\n         result in the generation of a unique lock token associated with the\n         requesting principal.  Thus if five principals have a shared write\n         lock on the same resource there will be five lock tokens, one for\n         each principal.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.7.3\">7.3</a>.&nbsp;\n         Write Locks and Properties\n      </h2>\n      \n      <p>\n         While those without a write lock may not alter a property on a\n         resource it is still possible for the values of live properties to\n         change, even while locked, due to the requirements of their schemas.\n         Only dead properties and live properties defined to respect locks are\n         guaranteed not to change while write locked.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.7.4\">7.4</a>.&nbsp;\n         Write Locks and Null Resources\n      </h2>\n      \n      <p>\n         It is possible to assert a write lock on a null resource in order to\n         lock the name.\n         \n      </p>\n      <p>\n         A write locked null resource, referred to as a lock-null resource,\n         MUST respond with a 404 (Not Found) or 405 (Method Not Allowed) to\n         any HTTP/1.1 or DAV methods except for PUT, MKCOL, OPTIONS, PROPFIND,\n         LOCK, and UNLOCK.  A lock-null resource MUST appear as a member of\n         its parent collection.  Additionally the lock-null resource MUST have\n         defined on it all mandatory DAV properties.  Most of these\n         properties, such as all the get* properties, will have no value as a\n         lock-null resource does not support the GET method.  Lock-Null\n         resources MUST have defined values for lockdiscovery and\n         supportedlock properties.\n         \n      </p>\n      <p>\n         Until a method such as PUT or MKCOL is successfully executed on the\n         lock-null resource the resource MUST stay in the lock-null state.\n         However, once a PUT or MKCOL is successfully executed on a lock-null\n         resource the resource ceases to be in the lock-null state.\n         \n      </p>\n      <p>\n         If the resource is unlocked, for any reason, without a PUT, MKCOL, or\n         similar method having been successfully executed upon it then the\n         resource MUST return to the null state.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.7.5\">7.5</a>.&nbsp;\n         Write Locks and Collections\n      </h2>\n      \n      <p>\n         A write lock on a collection, whether created by a \"Depth: 0\" or\n         \"Depth: infinity\" lock request, prevents the addition or removal of\n         member URIs of the collection by non-lock owners.  As a consequence,\n         when a principal issues a PUT or POST request to create a new\n         resource under a URI which needs to be an internal member of a write\n         locked collection to maintain HTTP namespace consistency, or issues a\n         DELETE to remove a resource which has a URI which is an existing\n         internal member URI of a write locked collection, this request MUST\n         fail if the principal does not have a write lock on the collection.\n         \n      </p>\n      <p>\n         However, if a write lock request is issued to a collection containing\n         member URIs identifying resources that are currently locked in a\n         manner which conflicts with the write lock, the request MUST fail\n         with a 423 (Locked) status code.\n         \n      </p>\n      <p>\n         If a lock owner causes the URI of a resource to be added as an\n         internal member URI of a locked collection then the new resource MUST\n         be automatically added to the lock.  This is the only mechanism that\n         \n      </p>\n      <p>\n         allows a resource to be added to a write lock.  Thus, for example, if\n         the collection /a/b/ is write locked and the resource /c is moved to\n         /a/b/c then resource /a/b/c will be added to the write lock.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.7.6\">7.6</a>.&nbsp;\n         Write Locks and the If Request Header\n      </h2>\n      \n      <p>\n         If a user agent is not required to have knowledge about a lock when\n         requesting an operation on a locked resource, the following scenario\n         might occur.  Program A, run by User A, takes out a write lock on a\n         resource.  Program B, also run by User A, has no knowledge of the\n         lock taken out by Program A, yet performs a PUT to the locked\n         resource.  In this scenario, the PUT succeeds because locks are\n         associated with a principal, not a program, and thus program B,\n         because it is acting with principal A's credential, is allowed to\n         perform the PUT.  However, had program B known about the lock, it\n         would not have overwritten the resource, preferring instead to\n         present a dialog box describing the conflict to the user.  Due to\n         this scenario, a mechanism is needed to prevent different programs\n         from accidentally ignoring locks taken out by other programs with the\n         same authorization.\n         \n      </p>\n      <p>\n         In order to prevent these collisions a lock token MUST be submitted\n         by an authorized principal in the If header for all locked resources\n         that a method may interact with or the method MUST fail.  For\n         example, if a resource is to be moved and both the source and\n         destination are locked then two lock tokens must be submitted, one\n         for the source and the other for the destination.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.7.6.1\">7.6.1</a>.&nbsp;\n         Example - Write Lock\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   COPY /~fielding/index.html HTTP/1.1\n   Host: www.ics.uci.edu\n   Destination: http://www.ics.uci.edu/users/f/fielding/index.html\n   If: &lt;http://www.ics.uci.edu/users/f/fielding/index.html&gt;\n       (&lt;opaquelocktoken:f81d4fae-7dec-11d0-a765-00a0c91e6bf6&gt;)\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 204 No Content\n</pre>\n      <p>\n         In this example, even though both the source and destination are\n         locked, only one lock token must be submitted, for the lock on the\n         destination.  This is because the source resource is not modified by\n         a COPY, and hence unaffected by the write lock. In this example, user\n         agent authentication has previously occurred via a mechanism outside\n         the scope of the HTTP protocol, in the underlying transport layer.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.7.7\">7.7</a>.&nbsp;\n         Write Locks and COPY/MOVE\n      </h2>\n      \n      <p>\n         A COPY method invocation MUST NOT duplicate any write locks active on\n         the source.  However, as previously noted, if the COPY copies the\n         resource into a collection that is locked with \"Depth: infinity\",\n         then the resource will be added to the lock.\n         \n      </p>\n      <p>\n         A successful MOVE request on a write locked resource MUST NOT move\n         the write lock with the resource. However, the resource is subject to\n         being added to an existing lock at the destination, as specified in\n         section 7.5. For example, if the MOVE makes the resource a child of a\n         collection that is locked with \"Depth: infinity\", then the resource\n         will be added to that collection's lock. Additionally, if a resource\n         locked with \"Depth: infinity\" is moved to a destination that is\n         within the scope of the same lock (e.g., within the namespace tree\n         covered by the lock), the moved resource will again be a added to the\n         lock. In both these examples, as specified in section 7.6, an If\n         header must be submitted containing a lock token for both the source\n         and destination.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.7.8\">7.8</a>.&nbsp;\n         Refreshing Write Locks\n      </h2>\n      \n      <p>\n         A client MUST NOT submit the same write lock request twice.  Note\n         that a client is always aware it is resubmitting the same lock\n         request because it must include the lock token in the If header in\n         order to make the request for a resource that is already locked.\n         \n      </p>\n      <p>\n         However, a client may submit a LOCK method with an If header but\n         without a body.  This form of LOCK MUST only be used to \"refresh\" a\n         lock.  Meaning, at minimum, that any timers associated with the lock\n         MUST be re-set.\n         \n      </p>\n      <p>\n         A server may return a Timeout header with a lock refresh that is\n         different than the Timeout header returned when the lock was\n         originally requested.  Additionally clients may submit Timeout\n         headers of arbitrary value with their lock refresh requests.\n         Servers, as always, may ignore Timeout headers submitted by the\n         client.\n         \n      </p>\n      <p>\n         If an error is received in response to a refresh LOCK request the\n         client SHOULD assume that the lock was not refreshed.\n         \n      </p>\n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.8\">8</a>.&nbsp;\n         HTTP Methods for Distributed Authoring\n      </h1>\n      \n      <p>\n         The following new HTTP methods use XML as a request and response\n         format.  All DAV compliant clients and resources MUST use XML parsers\n         that are compliant with <a href=\"#REC-XML\" title=\"Extensible Markup Language (XML) 1.0\">[REC-XML]</a>.  All XML used in either requests\n         or responses MUST be, at minimum, well formed.  If a server receives\n         ill-formed XML in a request it MUST reject the entire request with a\n         400 (Bad Request).  If a client receives ill-formed XML in a response\n         then it MUST NOT assume anything about the outcome of the executed\n         method and SHOULD treat the server as malfunctioning.\n         \n      </p>\n      \n      \n      <h2><a name=\"rfc.section.8.1\">8.1</a>.&nbsp;\n         <a name=\"METHOD_PROPFIND\">PROPFIND</a></h2>\n      \n      <p>\n         The PROPFIND method retrieves properties defined on the resource\n         identified by the Request-URI, if the resource does not have any\n         internal members, or on the resource identified by the Request-URI\n         and potentially its member resources, if the resource is a collection\n         that has internal member URIs.  All DAV compliant resources MUST\n         support the PROPFIND method and the propfind XML element (section\n         12.14) along with all XML elements defined for use with that element.\n         \n      </p>\n      <p>\n         A client may submit a Depth header with a value of \"0\", \"1\", or\n         \"infinity\" with a PROPFIND on a collection resource with internal\n         member URIs.  DAV compliant servers MUST support the \"0\", \"1\" and\n         \"infinity\" behaviors. By default, the PROPFIND method without a Depth\n         header MUST act as if a \"Depth: infinity\" header was included.\n         \n      </p>\n      <p>\n         A client may submit a propfind XML element in the body of the request\n         method describing what information is being requested.  It is\n         possible to request particular property values, all property values,\n         or a list of the names of the resource's properties.  A client may\n         choose not to submit a request body.  An empty PROPFIND request body\n         MUST be treated as a request for the names and values of all\n         properties.\n         \n      </p>\n      <p>\n         All servers MUST support returning a response of content type\n         text/xml or application/xml that contains a multistatus XML element\n         that describes the results of the attempts to retrieve the various\n         properties.\n         \n      </p>\n      <p>\n         If there is an error retrieving a property then a proper error result\n         MUST be included in the response.  A request to retrieve the value of\n         a property which does not exist is an error and MUST be noted, if the\n         response uses a multistatus XML element, with a response XML element\n         which contains a 404 (Not Found) status value.\n         \n      </p>\n      <p>\n         Consequently, the multistatus XML element for a collection resource\n         with member URIs MUST include a response XML element for each member\n         URI of the collection, to whatever depth was requested. Each response\n         XML element MUST contain an href XML element that gives the URI of\n         the resource on which the properties in the prop XML element are\n         defined.  Results for a PROPFIND on a collection resource with\n         internal member URIs are returned as a flat list whose order of\n         entries is not significant.\n         \n      </p>\n      <p>\n         In the case of allprop and propname, if a principal does not have the\n         right to know whether a particular property exists then the property\n         should be silently excluded from the response.\n         \n      </p>\n      <p>\n         The results of this method SHOULD NOT be cached.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.8.1.1\">8.1.1</a>.&nbsp;\n         Example - Retrieving Named Properties\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   PROPFIND  /file HTTP/1.1\n   Host: www.foo.bar\n   Content-type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:propfind xmlns:D=\"DAV:\"&gt;\n     &lt;D:prop xmlns:R=\"http://www.foo.bar/boxschema/\"&gt;\n          &lt;R:bigbox/&gt;\n          &lt;R:author/&gt;\n          &lt;R:DingALing/&gt;\n          &lt;R:Random/&gt;\n     &lt;/D:prop&gt;\n   &lt;/D:propfind&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:multistatus xmlns:D=\"DAV:\"&gt;\n     &lt;D:response&gt;\n          &lt;D:href&gt;http://www.foo.bar/file&lt;/D:href&gt;\n          &lt;D:propstat&gt;\n               &lt;D:prop xmlns:R=\"http://www.foo.bar/boxschema/\"&gt;\n                    &lt;R:bigbox&gt;\n                         &lt;R:BoxType&gt;Box type A&lt;/R:BoxType&gt;\n                    &lt;/R:bigbox&gt;\n                    &lt;R:author&gt;\n                         &lt;R:Name&gt;J.J. Johnson&lt;/R:Name&gt;\n                    &lt;/R:author&gt;\n               &lt;/D:prop&gt;\n               &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;\n          &lt;/D:propstat&gt;\n          &lt;D:propstat&gt;\n               &lt;D:prop&gt;&lt;R:DingALing/&gt;&lt;R:Random/&gt;&lt;/D:prop&gt;\n               &lt;D:status&gt;HTTP/1.1 403 Forbidden&lt;/D:status&gt;\n               &lt;D:responsedescription&gt; The user does not have access to\n   the DingALing property.\n               &lt;/D:responsedescription&gt;\n          &lt;/D:propstat&gt;\n     &lt;/D:response&gt;\n     &lt;D:responsedescription&gt; There has been an access violation error.\n     &lt;/D:responsedescription&gt;\n   &lt;/D:multistatus&gt;\n</pre>\n      <p>\n         In this example, PROPFIND is executed on a non-collection resource\n         http://www.foo.bar/file.  The propfind XML element specifies the name\n         of four properties whose values are being requested. In this case\n         only two properties were returned, since the principal issuing the\n         request did not have sufficient access rights to see the third and\n         fourth properties.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.1.2\">8.1.2</a>.&nbsp;\n         Example - Using allprop to Retrieve All Properties\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   PROPFIND  /container/ HTTP/1.1\n   Host: www.foo.bar\n   Depth: 1\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:propfind xmlns:D=\"DAV:\"&gt;\n     &lt;D:allprop/&gt;\n   &lt;/D:propfind&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:multistatus xmlns:D=\"DAV:\"&gt;\n     &lt;D:response&gt;\n          &lt;D:href&gt;http://www.foo.bar/container/&lt;/D:href&gt;\n          &lt;D:propstat&gt;\n               &lt;D:prop xmlns:R=\"http://www.foo.bar/boxschema/\"&gt;\n                    &lt;R:bigbox&gt;\n                         &lt;R:BoxType&gt;Box type A&lt;/R:BoxType&gt;\n                    &lt;/R:bigbox&gt;\n                    &lt;R:author&gt;\n                         &lt;R:Name&gt;Hadrian&lt;/R:Name&gt;\n                    &lt;/R:author&gt;\n                    &lt;D:creationdate&gt;\n                         1997-12-01T17:42:21-08:00\n                    &lt;/D:creationdate&gt;\n                    &lt;D:displayname&gt;\n                         Example collection\n                    &lt;/D:displayname&gt;\n                    &lt;D:resourcetype&gt;&lt;D:collection/&gt;&lt;/D:resourcetype&gt;\n                    &lt;D:supportedlock&gt;\n                         &lt;D:lockentry&gt;\n                              &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;\n                              &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n                         &lt;/D:lockentry&gt;\n                         &lt;D:lockentry&gt;\n                              &lt;D:lockscope&gt;&lt;D:shared/&gt;&lt;/D:lockscope&gt;\n                              &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n                         &lt;/D:lockentry&gt;\n                    &lt;/D:supportedlock&gt;\n               &lt;/D:prop&gt;\n               &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;\n          &lt;/D:propstat&gt;\n     &lt;/D:response&gt;\n     &lt;D:response&gt;\n          &lt;D:href&gt;http://www.foo.bar/container/front.html&lt;/D:href&gt;\n          &lt;D:propstat&gt;\n               &lt;D:prop xmlns:R=\"http://www.foo.bar/boxschema/\"&gt;\n                    &lt;R:bigbox&gt;\n                         &lt;R:BoxType&gt;Box type B&lt;/R:BoxType&gt;\n                    &lt;/R:bigbox&gt;\n                    &lt;D:creationdate&gt;\n                         1997-12-01T18:27:21-08:00\n                    &lt;/D:creationdate&gt;\n                    &lt;D:displayname&gt;\n                         Example HTML resource\n                    &lt;/D:displayname&gt;\n                    &lt;D:getcontentlength&gt;\n                         4525\n                    &lt;/D:getcontentlength&gt;\n                    &lt;D:getcontenttype&gt;\n                         text/html\n                    &lt;/D:getcontenttype&gt;\n                    &lt;D:getetag&gt;\n                         zzyzx\n                    &lt;/D:getetag&gt;\n                    &lt;D:getlastmodified&gt;\n                         Monday, 12-Jan-98 09:25:56 GMT\n                    &lt;/D:getlastmodified&gt;\n                    &lt;D:resourcetype/&gt;\n                    &lt;D:supportedlock&gt;\n                         &lt;D:lockentry&gt;\n                              &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;\n                              &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n                         &lt;/D:lockentry&gt;\n                         &lt;D:lockentry&gt;\n                              &lt;D:lockscope&gt;&lt;D:shared/&gt;&lt;/D:lockscope&gt;\n                              &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n                         &lt;/D:lockentry&gt;\n                    &lt;/D:supportedlock&gt;\n               &lt;/D:prop&gt;\n               &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;\n          &lt;/D:propstat&gt;\n     &lt;/D:response&gt;\n   &lt;/D:multistatus&gt;\n</pre>\n      <p>\n         In this example, PROPFIND was invoked on the resource\n         http://www.foo.bar/container/ with a Depth header of 1, meaning the\n         request applies to the resource and its children, and a propfind XML\n         element containing the allprop XML element, meaning the request\n         should return the name and value of all properties defined on each\n         resource.\n         \n      </p>\n      <p>\n         The resource http://www.foo.bar/container/ has six properties defined\n         on it:\n         \n      </p>\n      <p>\n         http://www.foo.bar/boxschema/bigbox,\n         http://www.foo.bar/boxschema/author, DAV:creationdate,\n         DAV:displayname, DAV:resourcetype, and DAV:supportedlock.\n         \n      </p>\n      <p>\n         The last four properties are WebDAV-specific, defined in section 13.\n         Since GET is not supported on this resource, the get* properties\n         (e.g., getcontentlength) are not defined on this resource. The DAV-\n         specific properties assert that \"container\" was created on December\n         1, 1997, at 5:42:21PM, in a time zone 8 hours west of GMT\n         (creationdate), has a name of \"Example collection\" (displayname), a\n         collection resource type (resourcetype), and supports exclusive write\n         and shared write locks (supportedlock).\n         \n      </p>\n      <p>\n         The resource http://www.foo.bar/container/front.html has nine\n         properties defined on it:\n         \n      </p>\n      <p>\n         http://www.foo.bar/boxschema/bigbox (another instance of the \"bigbox\"\n         property type), DAV:creationdate, DAV:displayname,\n         DAV:getcontentlength, DAV:getcontenttype, DAV:getetag,\n         DAV:getlastmodified, DAV:resourcetype, and DAV:supportedlock.\n         \n      </p>\n      <p>\n         The DAV-specific properties assert that \"front.html\" was created on\n         December 1, 1997, at 6:27:21PM, in a time zone 8 hours west of GMT\n         (creationdate), has a name of \"Example HTML resource\" (displayname),\n         a content length of 4525 bytes (getcontentlength), a MIME type of\n         \"text/html\" (getcontenttype), an entity tag of \"zzyzx\" (getetag), was\n         last modified on Monday, January 12, 1998, at 09:25:56 GMT\n         (getlastmodified), has an empty resource type, meaning that it is not\n         a collection (resourcetype), and supports both exclusive write and\n         shared write locks (supportedlock).\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.1.3\">8.1.3</a>.&nbsp;\n         Example - Using propname to Retrieve all Property Names\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   PROPFIND  /container/ HTTP/1.1\n   Host: www.foo.bar\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;propfind xmlns=\"DAV:\"&gt;\n     &lt;propname/&gt;\n   &lt;/propfind&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;multistatus xmlns=\"DAV:\"&gt;\n     &lt;response&gt;\n          &lt;href&gt;http://www.foo.bar/container/&lt;/href&gt;\n          &lt;propstat&gt;\n               &lt;prop xmlns:R=\"http://www.foo.bar/boxschema/\"&gt;\n                    &lt;R:bigbox/&gt;\n                    &lt;R:author/&gt;\n                    &lt;creationdate/&gt;\n                    &lt;displayname/&gt;\n                    &lt;resourcetype/&gt;\n                    &lt;supportedlock/&gt;\n               &lt;/prop&gt;\n               &lt;status&gt;HTTP/1.1 200 OK&lt;/status&gt;\n          &lt;/propstat&gt;\n     &lt;/response&gt;\n     &lt;response&gt;\n          &lt;href&gt;http://www.foo.bar/container/front.html&lt;/href&gt;\n          &lt;propstat&gt;\n               &lt;prop xmlns:R=\"http://www.foo.bar/boxschema/\"&gt;\n                    &lt;R:bigbox/&gt;\n                    &lt;creationdate/&gt;\n                    &lt;displayname/&gt;\n                    &lt;getcontentlength/&gt;\n                    &lt;getcontenttype/&gt;\n                    &lt;getetag/&gt;\n                    &lt;getlastmodified/&gt;\n                    &lt;resourcetype/&gt;\n                    &lt;supportedlock/&gt;\n               &lt;/prop&gt;\n               &lt;status&gt;HTTP/1.1 200 OK&lt;/status&gt;\n          &lt;/propstat&gt;\n     &lt;/response&gt;\n   &lt;/multistatus&gt;\n</pre>\n      <p>\n         In this example, PROPFIND is invoked on the collection resource\n         http://www.foo.bar/container/, with a propfind XML element containing\n         the propname XML element, meaning the name of all properties should\n         be returned.  Since no Depth header is present, it assumes its\n         default value of \"infinity\", meaning the name of the properties on\n         the collection and all its progeny should be returned.\n         \n      </p>\n      <p>\n         Consistent with the previous example, resource\n         http://www.foo.bar/container/ has six properties defined on it,\n         http://www.foo.bar/boxschema/bigbox,\n         http://www.foo.bar/boxschema/author, DAV:creationdate,\n         DAV:displayname, DAV:resourcetype, and DAV:supportedlock.\n         \n      </p>\n      <p>\n         The resource http://www.foo.bar/container/index.html, a member of the\n         \"container\" collection, has nine properties defined on it,\n         http://www.foo.bar/boxschema/bigbox, DAV:creationdate,\n         DAV:displayname, DAV:getcontentlength, DAV:getcontenttype,\n         DAV:getetag, DAV:getlastmodified, DAV:resourcetype, and\n         DAV:supportedlock.\n         \n      </p>\n      <p>\n         This example also demonstrates the use of XML namespace scoping, and\n         the default namespace.  Since the \"xmlns\" attribute does not contain\n         an explicit \"shorthand name\" (prefix) letter, the namespace applies\n         by default to all enclosed elements.  Hence, all elements which do\n         not explicitly state the namespace to which they belong are members\n         of the \"DAV:\" namespace schema.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.8.2\">8.2</a>.&nbsp;\n         <a name=\"METHOD_PROPPATCH\">PROPPATCH</a></h2>\n      \n      <p>\n         The PROPPATCH method processes instructions specified in the request\n         body to set and/or remove properties defined on the resource\n         identified by the Request-URI.\n         \n      </p>\n      <p>\n         All DAV compliant resources MUST support the PROPPATCH method and\n         MUST process instructions that are specified using the\n         propertyupdate, set, and remove XML elements of the DAV schema.\n         Execution of the directives in this method is, of course, subject to\n         access control constraints.  DAV compliant resources SHOULD support\n         the setting of arbitrary dead properties.\n         \n      </p>\n      <p>\n         The request message body of a PROPPATCH method MUST contain the\n         propertyupdate XML element.  Instruction processing MUST occur in the\n         order instructions are received (i.e., from top to bottom).\n         Instructions MUST either all be executed or none executed. Thus if\n         any error occurs during processing all executed instructions MUST be\n         undone and a proper error result returned. Instruction processing\n         details can be found in the definition of the set and remove\n         instructions in section 12.13.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.8.2.1\">8.2.1</a>.&nbsp;\n         Status Codes for use with 207 (Multi-Status)\n      </h3>\n      \n      <p>\n         The following are examples of response codes one would expect to be\n         used in a 207 (Multi-Status) response for this method.  Note,\n         however, that unless explicitly prohibited any 2/3/4/5xx series\n         response code may be used in a 207 (Multi-Status) response.\n         \n      </p>\n      <p>\n         200 (OK) - The command succeeded.  As there can be a mixture of sets\n         and removes in a body, a 201 (Created) seems inappropriate.\n         \n      </p>\n      <p>\n         403 (Forbidden) - The client, for reasons the server chooses not to\n         specify, cannot alter one of the properties.\n         \n      </p>\n      <p>\n         409 (Conflict) - The client has provided a value whose semantics are\n         not appropriate for the property.  This includes trying to set read-\n         only properties.\n         \n      </p>\n      <p>\n         423 (Locked) - The specified resource is locked and the client either\n         is not a lock owner or the lock type requires a lock token to be\n         submitted and the client did not submit it.\n         \n      </p>\n      <p>\n         507 (Insufficient Storage) - The server did not have sufficient space\n         to record the property.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.2.2\">8.2.2</a>.&nbsp;\n         Example - PROPPATCH\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   PROPPATCH /bar.html HTTP/1.1\n   Host: www.foo.com\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:propertyupdate xmlns:D=\"DAV:\"\n   xmlns:Z=\"http://www.w3.com/standards/z39.50/\"&gt;\n     &lt;D:set&gt;\n          &lt;D:prop&gt;\n               &lt;Z:authors&gt;\n                    &lt;Z:Author&gt;Jim Whitehead&lt;/Z:Author&gt;\n                    &lt;Z:Author&gt;Roy Fielding&lt;/Z:Author&gt;\n               &lt;/Z:authors&gt;\n          &lt;/D:prop&gt;\n     &lt;/D:set&gt;\n     &lt;D:remove&gt;\n          &lt;D:prop&gt;&lt;Z:Copyright-Owner/&gt;&lt;/D:prop&gt;\n     &lt;/D:remove&gt;\n   &lt;/D:propertyupdate&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:multistatus xmlns:D=\"DAV:\"\n   xmlns:Z=\"http://www.w3.com/standards/z39.50\"&gt;\n     &lt;D:response&gt;\n          &lt;D:href&gt;http://www.foo.com/bar.html&lt;/D:href&gt;\n          &lt;D:propstat&gt;\n               &lt;D:prop&gt;&lt;Z:Authors/&gt;&lt;/D:prop&gt;\n               &lt;D:status&gt;HTTP/1.1 424 Failed Dependency&lt;/D:status&gt;\n          &lt;/D:propstat&gt;\n          &lt;D:propstat&gt;\n               &lt;D:prop&gt;&lt;Z:Copyright-Owner/&gt;&lt;/D:prop&gt;\n               &lt;D:status&gt;HTTP/1.1 409 Conflict&lt;/D:status&gt;\n          &lt;/D:propstat&gt;\n          &lt;D:responsedescription&gt; Copyright Owner can not be deleted or\n   altered.&lt;/D:responsedescription&gt;\n     &lt;/D:response&gt;\n   &lt;/D:multistatus&gt;\n</pre>\n      <p>\n         In this example, the client requests the server to set the value of\n         the http://www.w3.com/standards/z39.50/Authors property, and to\n         remove the property http://www.w3.com/standards/z39.50/Copyright-\n         Owner.  Since the Copyright-Owner property could not be removed, no\n         property modifications occur.  The 424 (Failed Dependency) status\n         code for the Authors property indicates this action would have\n         succeeded if it were not for the conflict with removing the\n         Copyright-Owner property.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.8.3\">8.3</a>.&nbsp;\n         <a name=\"METHOD_MKCOL\">MKCOL Method</a></h2>\n      \n      <p>\n         The MKCOL method is used to create a new collection. All DAV\n         compliant resources MUST support the MKCOL method.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.8.3.1\">8.3.1</a>.&nbsp;\n         Request\n      </h3>\n      \n      <p>\n         MKCOL creates a new collection resource at the location specified by\n         the Request-URI.  If the resource identified by the Request-URI is\n         non-null then the MKCOL MUST fail.  During MKCOL processing, a server\n         MUST make the Request-URI a member of its parent collection, unless\n         the Request-URI is \"/\".  If no such ancestor exists, the method MUST\n         fail.  When the MKCOL operation creates a new collection resource,\n         all ancestors MUST already exist, or the method MUST fail with a 409\n         (Conflict) status code.  For example, if a request to create\n         collection /a/b/c/d/ is made, and neither /a/b/ nor /a/b/c/ exists,\n         the request must fail.\n         \n      </p>\n      <p>\n         When MKCOL is invoked without a request body, the newly created\n         collection SHOULD have no members.\n         \n      </p>\n      <p>\n         A MKCOL request message may contain a message body.  The behavior of\n         a MKCOL request when the body is present is limited to creating\n         collections, members of a collection, bodies of members and\n         properties on the collections or members.  If the server receives a\n         MKCOL request entity type it does not support or understand it MUST\n         respond with a 415 (Unsupported Media Type) status code.  The exact\n         behavior of MKCOL for various request media types is undefined in\n         this document, and will be specified in separate documents.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.3.2\">8.3.2</a>.&nbsp;\n         Status Codes\n      </h3>\n      \n      <p>\n         Responses from a MKCOL request MUST NOT be cached as MKCOL has non-\n         idempotent semantics.\n         \n      </p>\n      <p>\n         201 (Created) - The collection or structured resource was created in\n         its entirety.\n         \n      </p>\n      <p>\n         403 (Forbidden) - This indicates at least one of two conditions: 1)\n         the server does not allow the creation of collections at the given\n         location in its namespace, or 2) the parent collection of the\n         Request-URI exists but cannot accept members.\n         \n      </p>\n      <p>\n         405 (Method Not Allowed) - MKCOL can only be executed on a\n         deleted/non-existent resource.\n         \n      </p>\n      <p>\n         409 (Conflict) - A collection cannot be made at the Request-URI until\n         one or more intermediate collections have been created.\n         \n      </p>\n      <p>\n         415 (Unsupported Media Type)- The server does not support the request\n         type of the body.\n         \n      </p>\n      <p>\n         507 (Insufficient Storage) - The resource does not have sufficient\n         space to record the state of the resource after the execution of this\n         method.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.3.3\">8.3.3</a>.&nbsp;\n         Example - MKCOL\n      </h3>\n      \n      <p>\n         This example creates a collection called /webdisc/xfiles/ on the\n         server www.server.org.\n         \n      </p>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   MKCOL /webdisc/xfiles/ HTTP/1.1\n   Host: www.server.org\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 201 Created\n</pre>\n      \n      \n      \n      <h2><a name=\"rfc.section.8.4\">8.4</a>.&nbsp;\n         GET, HEAD for Collections\n      </h2>\n      \n      <p>\n         The semantics of GET are unchanged when applied to a collection,\n         since GET is defined as, \"retrieve whatever information (in the form\n         of an entity) is identified by the Request-URI\" <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>.  GET when\n         applied to a collection may return the contents of an \"index.html\"\n         resource, a human-readable view of the contents of the collection, or\n         something else altogether. Hence it is possible that the result of a\n         GET on a collection will bear no correlation to the membership of the\n         collection.\n         \n      </p>\n      <p>\n         Similarly, since the definition of HEAD is a GET without a response\n         message body, the semantics of HEAD are unmodified when applied to\n         collection resources.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.8.5\">8.5</a>.&nbsp;\n         POST for Collections\n      </h2>\n      \n      <p>\n         Since by definition the actual function performed by POST is\n         determined by the server and often depends on the particular\n         resource, the behavior of POST when applied to collections cannot be\n         meaningfully modified because it is largely undefined.  Thus the\n         semantics of POST are unmodified when applied to a collection.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.8.6\">8.6</a>.&nbsp;\n         <a name=\"METHOD_DELETE\">DELETE</a></h2>\n      \n      \n      <h3><a name=\"rfc.section.8.6.1\">8.6.1</a>.&nbsp;\n         DELETE for Non-Collection Resources\n      </h3>\n      \n      <p>\n         If the DELETE method is issued to a non-collection resource whose\n         URIs are an internal member of one or more collections, then during\n         DELETE processing a server MUST remove any URI for the resource\n         identified by the Request-URI from collections which contain it as a\n         member.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.6.2\">8.6.2</a>.&nbsp;\n         DELETE for Collections\n      </h3>\n      \n      <p>\n         The DELETE method on a collection MUST act as if a \"Depth: infinity\"\n         header was used on it.  A client MUST NOT submit a Depth header with\n         a DELETE on a collection with any value but infinity.\n         \n      </p>\n      <p>\n         DELETE instructs that the collection specified in the Request-URI and\n         all resources identified by its internal member URIs are to be\n         deleted.\n         \n      </p>\n      <p>\n         If any resource identified by a member URI cannot be deleted then all\n         of the member's ancestors MUST NOT be deleted, so as to maintain\n         namespace consistency.\n         \n      </p>\n      <p>\n         Any headers included with DELETE MUST be applied in processing every\n         resource to be deleted.\n         \n      </p>\n      <p>\n         When the DELETE method has completed processing it MUST result in a\n         consistent namespace.\n         \n      </p>\n      <p>\n         If an error occurs with a resource other than the resource identified\n         in the Request-URI then the response MUST be a 207 (Multi-Status).\n         424 (Failed Dependency) errors SHOULD NOT be in the 207 (Multi-\n         Status).  They can be safely left out because the client will know\n         that the ancestors of a resource could not be deleted when the client\n         receives an error for the ancestor's progeny.  Additionally 204 (No\n         Content) errors SHOULD NOT be returned in the 207 (Multi-Status).\n         The reason for this prohibition is that 204 (No Content) is the\n         default success code.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.8.6.2.1\">8.6.2.1</a>.&nbsp;\n         Example - DELETE\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   DELETE  /container/ HTTP/1.1\n   Host: www.foo.bar\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;d:multistatus xmlns:d=\"DAV:\"&gt;\n     &lt;d:response&gt;\n          &lt;d:href&gt;http://www.foo.bar/container/resource3&lt;/d:href&gt;\n          &lt;d:status&gt;HTTP/1.1 423 Locked&lt;/d:status&gt;\n     &lt;/d:response&gt;\n   &lt;/d:multistatus&gt;\n</pre>\n      <p>\n         In this example the attempt to delete\n         http://www.foo.bar/container/resource3 failed because it is locked,\n         and no lock token was submitted with the request. Consequently, the\n         attempt to delete http://www.foo.bar/container/ also failed. Thus the\n         client knows that the attempt to delete http://www.foo.bar/container/\n         must have also failed since the parent can not be deleted unless its\n         child has also been deleted.  Even though a Depth header has not been\n         included, a depth of infinity is assumed because the method is on a\n         collection.\n         \n      </p>\n      \n      \n      \n      \n      \n      \n      <h2><a name=\"rfc.section.8.7\">8.7</a>.&nbsp;\n         <a name=\"METHOD_PUT\">PUT</a></h2>\n      \n      \n      <h3><a name=\"rfc.section.8.7.1\">8.7.1</a>.&nbsp;\n         PUT for Non-Collection Resources\n      </h3>\n      \n      <p>\n         A PUT performed on an existing resource replaces the GET response\n         entity of the resource.  Properties defined on the resource may be\n         recomputed during PUT processing but are not otherwise affected.  For\n         example, if a server recognizes the content type of the request body,\n         it may be able to automatically extract information that could be\n         profitably exposed as properties.\n         \n      </p>\n      <p>\n         A PUT that would result in the creation of a resource without an\n         appropriately scoped parent collection MUST fail with a 409\n         (Conflict).\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.7.2\">8.7.2</a>.&nbsp;\n         PUT for Collections\n      </h3>\n      \n      <p>\n         As defined in the HTTP/1.1 specification <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>, the \"PUT method\n         requests that the enclosed entity be stored under the supplied\n         Request-URI.\"  Since submission of an entity representing a\n         collection would implicitly encode creation and deletion of\n         resources, this specification intentionally does not define a\n         transmission format for creating a collection using PUT.  Instead,\n         the MKCOL method is defined to create collections.\n         \n      </p>\n      \n      <p>\n         When the PUT operation creates a new non-collection resource all\n         ancestors MUST already exist.  If all ancestors do not exist, the\n         method MUST fail with a 409 (Conflict) status code.  For example, if\n         resource /a/b/c/d.html is to be created and /a/b/c/ does not exist,\n         then the request must fail.\n         \n      </p>\n      \n      \n      \n      \n      \n      <h2><a name=\"rfc.section.8.8\">8.8</a>.&nbsp;\n         <a name=\"METHOD_COPY\">COPY Method</a></h2>\n      \n      <p>\n         The COPY method creates a duplicate of the source resource,\n         identified by the Request-URI, in the destination resource,\n         identified by the URI in the Destination header.  The Destination\n         header MUST be present.  The exact behavior of the COPY method\n         depends on the type of the source resource.\n         \n      </p>\n      <p>\n         All WebDAV compliant resources MUST support the COPY method.\n         However, support for the COPY method does not guarantee the ability\n         to copy a resource. For example, separate programs may control\n         resources on the same server.  As a result, it may not be possible to\n         copy a resource to a location that appears to be on the same server.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.8.8.1\">8.8.1</a>.&nbsp;\n         COPY for HTTP/1.1 resources\n      </h3>\n      \n      <p>\n         When the source resource is not a collection the result of the COPY\n         method is the creation of a new resource at the destination whose\n         state and behavior match that of the source resource as closely as\n         possible.  After a successful COPY invocation, all properties on the\n         source resource MUST be duplicated on the destination resource,\n         subject to modifying headers and XML elements, following the\n         definition for copying properties.  Since the environment at the\n         destination may be different than at the source due to factors\n         outside the scope of control of the server, such as the absence of\n         resources required for correct operation, it may not be possible to\n         completely duplicate the behavior of the resource at the destination.\n         Subsequent alterations to the destination resource will not modify\n         the source resource.  Subsequent alterations to the source resource\n         will not modify the destination resource.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.8.2\">8.8.2</a>.&nbsp;\n         COPY for Properties\n      </h3>\n      \n      <p>\n         The following section defines how properties on a resource are\n         handled during a COPY operation.\n         \n      </p>\n      <p>\n         Live properties SHOULD be duplicated as identically behaving live\n         properties at the destination resource.  If a property cannot be\n         copied live, then its value MUST be duplicated, octet-for-octet, in\n         an identically named, dead property on the destination resource\n         subject to the effects of the propertybehavior XML element.\n         \n      </p>\n      <p>\n         The propertybehavior XML element can specify that properties are\n         copied on best effort, that all live properties must be successfully\n         copied or the method must fail, or that a specified list of live\n         properties must be successfully copied or the method must fail. The\n         propertybehavior XML element is defined in section 12.12.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.8.3\">8.8.3</a>.&nbsp;\n         COPY for Collections\n      </h3>\n      \n      <p>\n         The COPY method on a collection without a Depth header MUST act as if\n         a Depth header with value \"infinity\" was included.  A client may\n         submit a Depth header on a COPY on a collection with a value of \"0\"\n         or \"infinity\".  DAV compliant servers MUST support the \"0\" and\n         \"infinity\" Depth header behaviors.\n         \n      </p>\n      <p>\n         A COPY of depth infinity instructs that the collection resource\n         identified by the Request-URI is to be copied to the location\n         identified by the URI in the Destination header, and all its internal\n         member resources are to be copied to a location relative to it,\n         recursively through all levels of the collection hierarchy.\n         \n      </p>\n      <p>\n         A COPY of \"Depth: 0\" only instructs that the collection and its\n         properties but not resources identified by its internal member URIs,\n         are to be copied.\n         \n      </p>\n      <p>\n         Any headers included with a COPY MUST be applied in processing every\n         resource to be copied with the exception of the Destination header.\n         \n      </p>\n      <p>\n         The Destination header only specifies the destination URI for the\n         Request-URI. When applied to members of the collection identified by\n         the Request-URI the value of Destination is to be modified to reflect\n         the current location in the hierarchy.  So, if the Request- URI is\n         /a/ with Host header value http://fun.com/ and the Destination is\n         http://fun.com/b/ then when http://fun.com/a/c/d is processed it must\n         use a Destination of http://fun.com/b/c/d.\n         \n      </p>\n      <p>\n         When the COPY method has completed processing it MUST have created a\n         consistent namespace at the destination (see section 5.1 for the\n         definition of namespace consistency).  However, if an error occurs\n         while copying an internal collection, the server MUST NOT copy any\n         resources identified by members of this collection (i.e., the server\n         must skip this subtree), as this would create an inconsistent\n         namespace. After detecting an error, the COPY operation SHOULD try to\n         finish as much of the original copy operation as possible (i.e., the\n         server should still attempt to copy other subtrees and their members,\n         that are not descendents of an error-causing collection).  So, for\n         example, if an infinite depth copy operation is performed on\n         collection /a/, which contains collections /a/b/ and /a/c/, and an\n         error occurs copying /a/b/, an attempt should still be made to copy\n         /a/c/. Similarly, after encountering an error copying a non-\n         collection resource as part of an infinite depth copy, the server\n         SHOULD try to finish as much of the original copy operation as\n         possible.\n         \n      </p>\n      <p>\n         If an error in executing the COPY method occurs with a resource other\n         than the resource identified in the Request-URI then the response\n         MUST be a 207 (Multi-Status).\n         \n      </p>\n      <p>\n         The 424 (Failed Dependency) status code SHOULD NOT be returned in the\n         207 (Multi-Status) response from a COPY method.  These responses can\n         be safely omitted because the client will know that the progeny of a\n         resource could not be copied when the client receives an error for\n         the parent.  Additionally 201 (Created)/204 (No Content) status codes\n         SHOULD NOT be returned as values in 207 (Multi-Status) responses from\n         COPY methods.  They, too, can be safely omitted because they are the\n         default success codes.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.8.4\">8.8.4</a>.&nbsp;\n         COPY and the Overwrite Header\n      </h3>\n      \n      <p>\n         If a resource exists at the destination and the Overwrite header is\n         \"T\" then prior to performing the copy the server MUST perform a\n         DELETE with \"Depth: infinity\" on the destination resource.  If the\n         Overwrite header is set to \"F\" then the operation will fail.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.8.5\">8.8.5</a>.&nbsp;\n         Status Codes\n      </h3>\n      \n      <p>\n         201 (Created) - The source resource was successfully copied.  The\n         copy operation resulted in the creation of a new resource.\n         \n      </p>\n      <p>\n         204 (No Content) - The source resource was successfully copied to a\n         pre-existing destination resource.\n         \n      </p>\n      <p>\n         403 (Forbidden) - The source and destination URIs are the same.\n         \n      </p>\n      <p>\n         409 (Conflict) - A resource cannot be created at the destination\n         until one or more intermediate collections have been created.\n         \n      </p>\n      <p>\n         412 (Precondition Failed) - The server was unable to maintain the\n         liveness of the properties listed in the propertybehavior XML element\n         or the Overwrite header is \"F\" and the state of the destination\n         resource is non-null.\n         \n      </p>\n      <p>\n         423 (Locked) - The destination resource was locked.\n         \n      </p>\n      <p>\n         502 (Bad Gateway) - This may occur when the destination is on another\n         server and the destination server refuses to accept the resource.\n         \n      </p>\n      <p>\n         507 (Insufficient Storage) - The destination resource does not have\n         sufficient space to record the state of the resource after the\n         execution of this method.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.8.6\">8.8.6</a>.&nbsp;\n         Example - COPY with Overwrite\n      </h3>\n      \n      <p>\n         This example shows resource\n         http://www.ics.uci.edu/~fielding/index.html being copied to the\n         location http://www.ics.uci.edu/users/f/fielding/index.html.  The 204\n         (No Content) status code indicates the existing resource at the\n         destination was overwritten.\n         \n      </p>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   COPY /~fielding/index.html HTTP/1.1\n   Host: www.ics.uci.edu\n   Destination: http://www.ics.uci.edu/users/f/fielding/index.html\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 204 No Content\n</pre>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.8.7\">8.8.7</a>.&nbsp;\n         Example - COPY with No Overwrite\n      </h3>\n      \n      <p>\n         The following example shows the same copy operation being performed,\n         but with the Overwrite header set to \"F.\"  A response of 412\n         (Precondition Failed) is returned because the destination resource\n         has a non-null state.\n         \n      </p>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   COPY /~fielding/index.html HTTP/1.1\n   Host: www.ics.uci.edu\n   Destination: http://www.ics.uci.edu/users/f/fielding/index.html\n   Overwrite: F\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 412 Precondition Failed\n</pre>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.8.8\">8.8.8</a>.&nbsp;\n         Example - COPY of a Collection\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   COPY /container/ HTTP/1.1\n   Host: www.foo.bar\n   Destination: http://www.foo.bar/othercontainer/\n   Depth: infinity\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;d:propertybehavior xmlns:d=\"DAV:\"&gt;\n     &lt;d:keepalive&gt;*&lt;/d:keepalive&gt;\n   &lt;/d:propertybehavior&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;d:multistatus xmlns:d=\"DAV:\"&gt;\n      &lt;d:response&gt;\n          &lt;d:href&gt;http://www.foo.bar/othercontainer/R2/&lt;/d:href&gt;\n          &lt;d:status&gt;HTTP/1.1 412 Precondition Failed&lt;/d:status&gt;\n      &lt;/d:response&gt;\n   &lt;/d:multistatus&gt;\n</pre>\n      <p>\n         The Depth header is unnecessary as the default behavior of COPY on a\n         collection is to act as if a \"Depth: infinity\" header had been\n         submitted.  In this example most of the resources, along with the\n         collection, were copied successfully. However the collection R2\n         failed, most likely due to a problem with maintaining the liveness of\n         properties (this is specified by the propertybehavior XML element).\n         Because there was an error copying R2, none of R2's members were\n         copied.  However no errors were listed for those members due to the\n         error minimization rules given in section 8.8.3.\n         \n      </p>\n      \n      \n      \n      \n      \n      <h2><a name=\"rfc.section.8.9\">8.9</a>.&nbsp;\n         <a name=\"METHOD_MOVE\">MOVE Method</a></h2>\n      \n      <p>\n         The MOVE operation on a non-collection resource is the logical\n         equivalent of a copy (COPY), followed by consistency maintenance\n         processing, followed by a delete of the source, where all three\n         actions are performed atomically.  The consistency maintenance step\n         allows the server to perform updates caused by the move, such as\n         updating all URIs other than the Request-URI which identify the\n         source resource, to point to the new destination resource.\n         Consequently, the Destination header MUST be present on all MOVE\n         methods and MUST follow all COPY requirements for the COPY part of\n         the MOVE method.  All DAV compliant resources MUST support the MOVE\n         method.  However, support for the MOVE method does not guarantee the\n         ability to move a resource to a particular destination.\n         \n      </p>\n      <p>\n         For example, separate programs may actually control different sets of\n         resources on the same server.  Therefore, it may not be possible to\n         move a resource within a namespace that appears to belong to the same\n         server.\n         \n      </p>\n      <p>\n         If a resource exists at the destination, the destination resource\n         will be DELETEd as a side-effect of the MOVE operation, subject to\n         the restrictions of the Overwrite header.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.8.9.1\">8.9.1</a>.&nbsp;\n         MOVE for Properties\n      </h3>\n      \n      <p>\n         The behavior of properties on a MOVE, including the effects of the\n         propertybehavior XML element, MUST be the same as specified in\n         section 8.8.2.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.9.2\">8.9.2</a>.&nbsp;\n         MOVE for Collections\n      </h3>\n      \n      <p>\n         A MOVE with \"Depth: infinity\" instructs that the collection\n         identified by the Request-URI be moved to the URI specified in the\n         Destination header, and all resources identified by its internal\n         member URIs are to be moved to locations relative to it, recursively\n         through all levels of the collection hierarchy.\n         \n      </p>\n      <p>\n         The MOVE method on a collection MUST act as if a \"Depth: infinity\"\n         header was used on it.  A client MUST NOT submit a Depth header on a\n         MOVE on a collection with any value but \"infinity\".\n         \n      </p>\n      <p>\n         Any headers included with MOVE MUST be applied in processing every\n         resource to be moved with the exception of the Destination header.\n         \n      </p>\n      <p>\n         The behavior of the Destination header is the same as given for COPY\n         on collections.\n         \n      </p>\n      <p>\n         When the MOVE method has completed processing it MUST have created a\n         consistent namespace at both the source and destination (see section\n         5.1 for the definition of namespace consistency). However, if an\n         error occurs while moving an internal collection, the server MUST NOT\n         move any resources identified by members of the failed collection\n         (i.e., the server must skip the error-causing subtree), as this would\n         create an inconsistent namespace. In this case, after detecting the\n         error, the move operation SHOULD try to finish as much of the\n         original move as possible (i.e., the server should still attempt to\n         move other subtrees and the resources identified by their members,\n         that are not descendents of an error-causing collection).  So, for\n         example, if an infinite depth move is performed on collection /a/,\n         which contains collections /a/b/ and /a/c/, and an error occurs\n         moving /a/b/, an attempt should still be made to try moving /a/c/.\n         Similarly, after encountering an error moving a non-collection\n         resource as part of an infinite depth move, the server SHOULD try to\n         finish as much of the original move operation as possible.\n         \n      </p>\n      <p>\n         If an error occurs with a resource other than the resource identified\n         in the Request-URI then the response MUST be a 207 (Multi-Status).\n         \n      </p>\n      <p>\n         The 424 (Failed Dependency) status code SHOULD NOT be returned in the\n         207 (Multi-Status) response from a MOVE method.  These errors can be\n         safely omitted because the client will know that the progeny of a\n         resource could not be moved when the client receives an error for the\n         parent.  Additionally 201 (Created)/204 (No Content) responses SHOULD\n         NOT be returned as values in 207 (Multi-Status) responses from a\n         MOVE.  These responses can be safely omitted because they are the\n         default success codes.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.9.3\">8.9.3</a>.&nbsp;\n         MOVE and the Overwrite Header\n      </h3>\n      \n      <p>\n         If a resource exists at the destination and the Overwrite header is\n         \"T\" then prior to performing the move the server MUST perform a\n         DELETE with \"Depth: infinity\" on the destination resource.  If the\n         Overwrite header is set to \"F\" then the operation will fail.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.9.4\">8.9.4</a>.&nbsp;\n         Status Codes\n      </h3>\n      \n      <p>\n         201 (Created) - The source resource was successfully moved, and a new\n         resource was created at the destination.\n         \n      </p>\n      <p>\n         204 (No Content) - The source resource was successfully moved to a\n         pre-existing destination resource.\n         \n      </p>\n      <p>\n         403 (Forbidden) - The source and destination URIs are the same.\n         \n      </p>\n      <p>\n         409 (Conflict) - A resource cannot be created at the destination\n         until one or more intermediate collections have been created.\n         \n      </p>\n      <p>\n         412 (Precondition Failed) - The server was unable to maintain the\n         liveness of the properties listed in the propertybehavior XML element\n         or the Overwrite header is \"F\" and the state of the destination\n         resource is non-null.\n         \n      </p>\n      <p>\n         423 (Locked) - The source or the destination resource was locked.\n         \n      </p>\n      <p>\n         502 (Bad Gateway) - This may occur when the destination is on another\n         server and the destination server refuses to accept the resource.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.9.5\">8.9.5</a>.&nbsp;\n         Example - MOVE of a Non-Collection\n      </h3>\n      \n      <p>\n         This example shows resource\n         http://www.ics.uci.edu/~fielding/index.html being moved to the\n         location http://www.ics.uci.edu/users/f/fielding/index.html. The\n         contents of the destination resource would have been overwritten if\n         the destination resource had been non-null.  In this case, since\n         there was nothing at the destination resource, the response code is\n         201 (Created).\n         \n      </p>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   MOVE /~fielding/index.html HTTP/1.1\n   Host: www.ics.uci.edu\n   Destination: http://www.ics.uci.edu/users/f/fielding/index.html\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 201 Created\n   Location: http://www.ics.uci.edu/users/f/fielding/index.html\n</pre>\n      \n      \n      <h3><a name=\"rfc.section.8.9.6\">8.9.6</a>.&nbsp;\n         Example - MOVE of a Collection\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   MOVE /container/ HTTP/1.1\n   Host: www.foo.bar\n   Destination: http://www.foo.bar/othercontainer/\n   Overwrite: F\n   If: (&lt;opaquelocktoken:fe184f2e-6eec-41d0-c765-01adc56e6bb4&gt;)\n       (&lt;opaquelocktoken:e454f3f3-acdc-452a-56c7-00a5c91e4b77&gt;)\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;d:propertybehavior xmlns:d='DAV:'&gt;\n     &lt;d:keepalive&gt;*&lt;/d:keepalive&gt;\n   &lt;/d:propertybehavior&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;d:multistatus xmlns:d='DAV:'&gt;\n     &lt;d:response&gt;\n          &lt;d:href&gt;http://www.foo.bar/othercontainer/C2/&lt;/d:href&gt;\n          &lt;d:status&gt;HTTP/1.1 423 Locked&lt;/d:status&gt;\n     &lt;/d:response&gt;\n   &lt;/d:multistatus&gt;\n</pre>\n      <p>\n         In this example the client has submitted a number of lock tokens with\n         the request.  A lock token will need to be submitted for every\n         resource, both source and destination, anywhere in the scope of the\n         method, that is locked.  In this case the proper lock token was not\n         submitted for the destination http://www.foo.bar/othercontainer/C2/.\n         This means that the resource /container/C2/ could not be moved.\n         Because there was an error copying /container/C2/, none of\n         /container/C2's members were copied.  However no errors were listed\n         for those members due to the error minimization rules given in\n         section 8.8.3.  User agent authentication has previously occurred via\n         a mechanism outside the scope of the HTTP protocol, in an underlying\n         transport layer.\n         \n      </p>\n      \n      \n      \n      \n      \n      <h2><a name=\"rfc.section.8.10\">8.10</a>.&nbsp;\n         <a name=\"METHOD_LOCK\">LOCK Method</a></h2>\n      \n      <p>\n         The following sections describe the LOCK method, which is used to\n         take out a lock of any access type.  These sections on the LOCK\n         method describe only those semantics that are specific to the LOCK\n         method and are independent of the access type of the lock being\n         requested.\n         \n      </p>\n      <p>\n         Any resource which supports the LOCK method MUST, at minimum, support\n         the XML request and response formats defined herein.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.8.10.1\">8.10.1</a>.&nbsp;\n         Operation\n      </h3>\n      \n      <p>\n         A LOCK method invocation creates the lock specified by the lockinfo\n         XML element on the Request-URI.  Lock method requests SHOULD have a\n         XML request body which contains an owner XML element for this lock\n         request, unless this is a refresh request. The LOCK request may have\n         a Timeout header.\n         \n      </p>\n      <p>\n         Clients MUST assume that locks may arbitrarily disappear at any time,\n         regardless of the value given in the Timeout header.  The Timeout\n         header only indicates the behavior of the server if \"extraordinary\"\n         circumstances do not occur.  For example, an administrator may remove\n         a lock at any time or the system may crash in such a way that it\n         loses the record of the lock's existence. The response MUST contain\n         the value of the lockdiscovery property in a prop XML element.\n         \n      </p>\n      <p>\n         In order to indicate the lock token associated with a newly created\n         lock, a Lock-Token response header MUST be included in the response\n         for every successful LOCK request for a new lock.  Note that the\n         Lock-Token header would not be returned in the response for a\n         successful refresh LOCK request because a new lock was not created.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.10.2\">8.10.2</a>.&nbsp;\n         The Effect of Locks on Properties and Collections\n      </h3>\n      \n      <p>\n         The scope of a lock is the entire state of the resource, including\n         its body and associated properties.  As a result, a lock on a\n         resource MUST also lock the resource's properties.\n         \n      </p>\n      <p>\n         For collections, a lock also affects the ability to add or remove\n         members.  The nature of the effect depends upon the type of access\n         control involved.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.10.3\">8.10.3</a>.&nbsp;\n         Locking Replicated Resources\n      </h3>\n      \n      <p>\n         A resource may be made available through more than one URI. However\n         locks apply to resources, not URIs. Therefore a LOCK request on a\n         resource MUST NOT succeed if can not be honored by all the URIs\n         through which the resource is addressable.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.10.4\">8.10.4</a>.&nbsp;\n         Depth and Locking\n      </h3>\n      \n      <p>\n         The Depth header may be used with the LOCK method.  Values other than\n         0 or infinity MUST NOT be used with the Depth header on a LOCK\n         method.  All resources that support the LOCK method MUST support the\n         Depth header.\n         \n      </p>\n      <p>\n         A Depth header of value 0 means to just lock the resource specified\n         by the Request-URI.\n         \n      </p>\n      <p>\n         If the Depth header is set to infinity then the resource specified in\n         the Request-URI along with all its internal members, all the way down\n         the hierarchy, are to be locked.  A successful result MUST return a\n         single lock token which represents all the resources that have been\n         locked.  If an UNLOCK is successfully executed on this token, all\n         associated resources are unlocked.  If the lock cannot be granted to\n         all resources, a 409 (Conflict) status code MUST be returned with a\n         response entity body containing a multistatus XML element describing\n         which resource(s) prevented the lock from being granted.  Hence,\n         partial success is not an option.  Either the entire hierarchy is\n         locked or no resources are locked.\n         \n      </p>\n      <p>\n         If no Depth header is submitted on a LOCK request then the request\n         MUST act as if a \"Depth:infinity\" had been submitted.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.10.5\">8.10.5</a>.&nbsp;\n         Interaction with other Methods\n      </h3>\n      \n      <p>\n         The interaction of a LOCK with various methods is dependent upon the\n         lock type.  However, independent of lock type, a successful DELETE of\n         a resource MUST cause all of its locks to be removed.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.10.6\">8.10.6</a>.&nbsp;\n         Lock Compatibility Table\n      </h3>\n      \n      <p>\n         The table below describes the behavior that occurs when a lock\n         request is made on a resource.\n         \n      </p>\n      <pre>\n   Current lock state/  |   Shared Lock   |   Exclusive\n   Lock request         |                 |   Lock\n   =====================+=================+==============\n   None                 |   True          |   True\n   ---------------------+-----------------+--------------\n   Shared Lock          |   True          |   False\n   ---------------------+-----------------+--------------\n   Exclusive Lock       |   False         |   False*\n   ------------------------------------------------------\n</pre>\n      <p>\n         Legend: True = lock may be granted.  False = lock MUST NOT be\n         granted. *=It is illegal for a principal to request the same lock\n         twice.\n         \n      </p>\n      <p>\n         The current lock state of a resource is given in the leftmost column,\n         and lock requests are listed in the first row.  The intersection of a\n         row and column gives the result of a lock request.  For example, if a\n         shared lock is held on a resource, and an exclusive lock is\n         requested, the table entry is \"false\", indicating the lock must not\n         be granted.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.10.7\">8.10.7</a>.&nbsp;\n         Status Codes\n      </h3>\n      \n      <p>\n         200 (OK) - The lock request succeeded and the value of the\n         lockdiscovery property is included in the body.\n         \n      </p>\n      <p>\n         412 (Precondition Failed) - The included lock token was not\n         enforceable on this resource or the server could not satisfy the\n         request in the lockinfo XML element.\n         \n      </p>\n      <p>\n         423 (Locked) - The resource is locked, so the method has been\n         rejected.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.10.8\">8.10.8</a>.&nbsp;\n         Example - Simple Lock Request\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   LOCK /workspace/webdav/proposal.doc HTTP/1.1\n   Host: webdav.sb.aol.com\n   Timeout: Infinite, Second-4100000000\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   Authorization: Digest username=\"ejw\",\n      realm=\"ejw@webdav.sb.aol.com\", nonce=\"...\",\n      uri=\"/workspace/webdav/proposal.doc\",\n      response=\"...\", opaque=\"...\"\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:lockinfo xmlns:D='DAV:'&gt;\n     &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;\n     &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n     &lt;D:owner&gt;\n          &lt;D:href&gt;http://www.ics.uci.edu/~ejw/contact.html&lt;/D:href&gt;\n     &lt;/D:owner&gt;\n   &lt;/D:lockinfo&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 200 OK\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:prop xmlns:D=\"DAV:\"&gt;\n     &lt;D:lockdiscovery&gt;\n          &lt;D:activelock&gt;\n               &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n               &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;\n               &lt;D:depth&gt;Infinity&lt;/D:depth&gt;\n               &lt;D:owner&gt;\n                    &lt;D:href&gt;\n                         http://www.ics.uci.edu/~ejw/contact.html\n                    &lt;/D:href&gt;\n               &lt;/D:owner&gt;\n               &lt;D:timeout&gt;Second-604800&lt;/D:timeout&gt;\n               &lt;D:locktoken&gt;\n                    &lt;D:href&gt;\n               opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4\n                    &lt;/D:href&gt;\n               &lt;/D:locktoken&gt;\n          &lt;/D:activelock&gt;\n     &lt;/D:lockdiscovery&gt;\n   &lt;/D:prop&gt;\n</pre>\n      <p>\n         This example shows the successful creation of an exclusive write lock\n         on resource http://webdav.sb.aol.com/workspace/webdav/proposal.doc.\n         The resource http://www.ics.uci.edu/~ejw/contact.html contains\n         contact information for the owner of the lock.  The server has an\n         activity-based timeout policy in place on this resource, which causes\n         the lock to automatically be removed after 1 week (604800 seconds).\n         Note that the nonce, response, and opaque fields have not been\n         calculated in the Authorization request header.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.10.9\">8.10.9</a>.&nbsp;\n         Example - Refreshing a Write Lock\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   LOCK /workspace/webdav/proposal.doc HTTP/1.1\n   Host: webdav.sb.aol.com\n   Timeout: Infinite, Second-4100000000\n   If: (&lt;opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4&gt;)\n   Authorization: Digest username=\"ejw\",\n      realm=\"ejw@webdav.sb.aol.com\", nonce=\"...\",\n      uri=\"/workspace/webdav/proposal.doc\",\n      response=\"...\", opaque=\"...\"\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 200 OK\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:prop xmlns:D=\"DAV:\"&gt;\n     &lt;D:lockdiscovery&gt;\n          &lt;D:activelock&gt;\n               &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n               &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;\n               &lt;D:depth&gt;Infinity&lt;/D:depth&gt;\n               &lt;D:owner&gt;\n                    &lt;D:href&gt;\n                    http://www.ics.uci.edu/~ejw/contact.html\n                    &lt;/D:href&gt;\n               &lt;/D:owner&gt;\n               &lt;D:timeout&gt;Second-604800&lt;/D:timeout&gt;\n               &lt;D:locktoken&gt;\n                    &lt;D:href&gt;\n               opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4\n                    &lt;/D:href&gt;\n               &lt;/D:locktoken&gt;\n          &lt;/D:activelock&gt;\n     &lt;/D:lockdiscovery&gt;\n   &lt;/D:prop&gt;\n</pre>\n      <p>\n         This request would refresh the lock, resetting any time outs.  Notice\n         that the client asked for an infinite time out but the server choose\n         to ignore the request. In this example, the nonce, response, and\n         opaque fields have not been calculated in the Authorization request\n         header.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.8.10.10\">8.10.10</a>.&nbsp;\n         Example - Multi-Resource Lock Request\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   LOCK /webdav/ HTTP/1.1\n   Host: webdav.sb.aol.com\n   Timeout: Infinite, Second-4100000000\n   Depth: infinity\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   Authorization: Digest username=\"ejw\",\n      realm=\"ejw@webdav.sb.aol.com\", nonce=\"...\",\n      uri=\"/workspace/webdav/proposal.doc\",\n      response=\"...\", opaque=\"...\"\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:lockinfo xmlns:D=\"DAV:\"&gt;\n     &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n     &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;\n     &lt;D:owner&gt;\n          &lt;D:href&gt;http://www.ics.uci.edu/~ejw/contact.html&lt;/D:href&gt;\n     &lt;/D:owner&gt;\n   &lt;/D:lockinfo&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:multistatus xmlns:D=\"DAV:\"&gt;\n     &lt;D:response&gt;\n          &lt;D:href&gt;http://webdav.sb.aol.com/webdav/secret&lt;/D:href&gt;\n          &lt;D:status&gt;HTTP/1.1 403 Forbidden&lt;/D:status&gt;\n     &lt;/D:response&gt;\n     &lt;D:response&gt;\n          &lt;D:href&gt;http://webdav.sb.aol.com/webdav/&lt;/D:href&gt;\n          &lt;D:propstat&gt;\n               &lt;D:prop&gt;&lt;D:lockdiscovery/&gt;&lt;/D:prop&gt;\n               &lt;D:status&gt;HTTP/1.1 424 Failed Dependency&lt;/D:status&gt;\n          &lt;/D:propstat&gt;\n     &lt;/D:response&gt;\n   &lt;/D:multistatus&gt;\n</pre>\n      <p>\n         This example shows a request for an exclusive write lock on a\n         collection and all its children.  In this request, the client has\n         specified that it desires an infinite length lock, if available,\n         otherwise a timeout of 4.1 billion seconds, if available. The request\n         entity body contains the contact information for the principal taking\n         out the lock, in this case a web page URL.\n         \n      </p>\n      <p>\n         The error is a 403 (Forbidden) response on the resource\n         http://webdav.sb.aol.com/webdav/secret.  Because this resource could\n         not be locked, none of the resources were locked.  Note also that the\n         lockdiscovery property for the Request-URI has been included as\n         required.  In this example the lockdiscovery property is empty which\n         means that there are no outstanding locks on the resource.\n         \n      </p>\n      <p>\n         In this example, the nonce, response, and opaque fields have not been\n         calculated in the Authorization request header.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.8.11\">8.11</a>.&nbsp;\n         <a name=\"METHOD_UNLOCK\">UNLOCK Method</a></h2>\n      \n      <p>\n         The UNLOCK method removes the lock identified by the lock token in\n         the Lock-Token request header from the Request-URI, and all other\n         resources included in the lock.  If all resources which have been\n         locked under the submitted lock token can not be unlocked then the\n         UNLOCK request MUST fail.\n         \n      </p>\n      <p>\n         Any DAV compliant resource which supports the LOCK method MUST\n         support the UNLOCK method.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.8.11.1\">8.11.1</a>.&nbsp;\n         Example - UNLOCK\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   UNLOCK /workspace/webdav/info.doc HTTP/1.1\n   Host: webdav.sb.aol.com\n   Lock-Token: &lt;opaquelocktoken:a515cfa4-5da4-22e1-f5b5-00a0451e6bf7&gt;\n   Authorization: Digest username=\"ejw\",\n      realm=\"ejw@webdav.sb.aol.com\", nonce=\"...\",\n      uri=\"/workspace/webdav/proposal.doc\",\n      response=\"...\", opaque=\"...\"\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 204 No Content\n</pre>\n      <p>\n         In this example, the lock identified by the lock token\n         \"opaquelocktoken:a515cfa4-5da4-22e1-f5b5-00a0451e6bf7\" is\n         successfully removed from the resource\n         http://webdav.sb.aol.com/workspace/webdav/info.doc.  If this lock\n         included more than just one resource, the lock is removed from all\n         resources included in the lock.  The 204 (No Content) status code is\n         used instead of 200 (OK) because there is no response entity body.\n         \n      </p>\n      <p>\n         In this example, the nonce, response, and opaque fields have not been\n         calculated in the Authorization request header.\n         \n      </p>\n      \n      \n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.9\">9</a>.&nbsp;\n         HTTP Headers for Distributed Authoring\n      </h1>\n      \n      \n      <h2><a name=\"rfc.section.9.1\">9.1</a>.&nbsp;\n         <a name=\"HEADER_DAV\">DAV Header</a></h2>\n      <pre>\n   DAV = \"DAV\" \":\" \"1\" [\",\" \"2\"] [\",\" 1#extend]\n</pre>\n      <p>\n         This header indicates that the resource supports the DAV schema and\n         protocol as specified. All DAV compliant resources MUST return the\n         DAV header on all OPTIONS responses.\n         \n      </p>\n      <p>\n         The value is a list of all compliance classes that the resource\n         supports.  Note that above a comma has already been added to the 2.\n         This is because a resource can not be level 2 compliant unless it is\n         also level 1 compliant. Please refer to section 15 for more details.\n         In general, however, support for one compliance class does not entail\n         support for any other.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.9.2\">9.2</a>.&nbsp;\n         <a name=\"HEADER_Depth\">Depth Header</a></h2>\n      <pre>\n   Depth = \"Depth\" \":\" (\"0\" | \"1\" | \"infinity\")\n</pre>\n      <p>\n         The Depth header is used with methods executed on resources which\n         could potentially have internal members to indicate whether the\n         method is to be applied only to the resource (\"Depth: 0\"), to the\n         resource and its immediate children, (\"Depth: 1\"), or the resource\n         and all its progeny (\"Depth: infinity\").\n         \n      </p>\n      <p>\n         The Depth header is only supported if a method's definition\n         explicitly provides for such support.\n         \n      </p>\n      <p>\n         The following rules are the default behavior for any method that\n         supports the Depth header. A method may override these defaults by\n         defining different behavior in its definition.\n         \n      </p>\n      <p>\n         Methods which support the Depth header may choose not to support all\n         of the header's values and may define, on a case by case basis, the\n         behavior of the method if a Depth header is not present. For example,\n         the MOVE method only supports \"Depth: infinity\" and if a Depth header\n         is not present will act as if a \"Depth: infinity\" header had been\n         applied.\n         \n      </p>\n      <p>\n         Clients MUST NOT rely upon methods executing on members of their\n         hierarchies in any particular order or on the execution being atomic\n         unless the particular method explicitly provides such guarantees.\n         \n      </p>\n      <p>\n         Upon execution, a method with a Depth header will perform as much of\n         its assigned task as possible and then return a response specifying\n         what it was able to accomplish and what it failed to do.\n         \n      </p>\n      <p>\n         So, for example, an attempt to COPY a hierarchy may result in some of\n         the members being copied and some not.\n         \n      </p>\n      <p>\n         Any headers on a method that has a defined interaction with the Depth\n         header MUST be applied to all resources in the scope of the method\n         except where alternative behavior is explicitly defined. For example,\n         an If-Match header will have its value applied against every resource\n         in the method's scope and will cause the method to fail if the header\n         fails to match.\n         \n      </p>\n      <p>\n         If a resource, source or destination, within the scope of the method\n         with a Depth header is locked in such a way as to prevent the\n         successful execution of the method, then the lock token for that\n         resource MUST be submitted with the request in the If request header.\n         \n      </p>\n      <p>\n         The Depth header only specifies the behavior of the method with\n         regards to internal children.  If a resource does not have internal\n         children then the Depth header MUST be ignored.\n         \n      </p>\n      <p>\n         Please note, however, that it is always an error to submit a value\n         for the Depth header that is not allowed by the method's definition.\n         Thus submitting a \"Depth: 1\" on a COPY, even if the resource does not\n         have internal members, will result in a 400 (Bad Request). The method\n         should fail not because the resource doesn't have internal members,\n         but because of the illegal value in the header.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.9.3\">9.3</a>.&nbsp;\n         <a name=\"HEADER_Destination\">Destination Header</a></h2>\n      <pre>\n   Destination = \"Destination\" \":\" absoluteURI\n</pre>\n      <p>\n         The Destination header specifies the URI which identifies a\n         destination resource for methods such as COPY and MOVE, which take\n         two URIs as parameters.  Note that the absoluteURI production is\n         defined in <a href=\"#RFC2396\" title=\"Uniform Resource Identifiers (URI): Generic Syntax\">[RFC2396]</a>.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.9.4\">9.4</a>.&nbsp;\n         <a name=\"HEADER_If\">If Header</a></h2>\n      <pre>\n   If = \"If\" \":\" ( 1*No-tag-list | 1*Tagged-list)\n   No-tag-list = List\n   Tagged-list = Resource 1*List\n   Resource = Coded-URL\n   List = \"(\" 1*([\"Not\"](State-token | \"[\" entity-tag \"]\")) \")\"\n   State-token = Coded-URL\n   Coded-URL = \"&lt;\" absoluteURI \"&gt;\"\n</pre>\n      <p>\n         The If header is intended to have similar functionality to the If-\n         Match header defined in section 14.25 of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>.  However the If\n         header is intended for use with any URI which represents state\n         information, referred to as a state token, about a resource as well\n         as ETags.  A typical example of a state token is a lock token, and\n         lock tokens are the only state tokens defined in this specification.\n         \n      </p>\n      <p>\n         All DAV compliant resources MUST honor the If header.\n         \n      </p>\n      <p>\n         The If header's purpose is to describe a series of state lists.  If\n         the state of the resource to which the header is applied does not\n         match any of the specified state lists then the request MUST fail\n         with a 412 (Precondition Failed).  If one of the described state\n         lists matches the state of the resource then the request may succeed.\n         \n      </p>\n      <p>\n         Note that the absoluteURI production is defined in <a href=\"#RFC2396\" title=\"Uniform Resource Identifiers (URI): Generic Syntax\">[RFC2396]</a>.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.9.4.1\">9.4.1</a>.&nbsp;\n         No-tag-list Production\n      </h3>\n      \n      <p>\n         The No-tag-list production describes a series of state tokens and\n         ETags.  If multiple No-tag-list productions are used then one only\n         needs to match the state of the resource for the method to be allowed\n         to continue.\n         \n      </p>\n      <p>\n         If a method, due to the presence of a Depth or Destination header, is\n         applied to multiple resources then the No-tag-list production MUST be\n         applied to each resource the method is applied to.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.9.4.1.1\">9.4.1.1</a>.&nbsp;\n         Example - No-tag-list If Header\n      </h3>\n      <pre>\n   If: (&lt;locktoken:a-write-lock-token&gt; [\"I am an ETag\"]) ([\"I am another\n   ETag\"])\n</pre>\n      <p>\n         The previous header would require that any resources within the scope\n         of the method must either be locked with the specified lock token and\n         in the state identified by the \"I am an ETag\" ETag or in the state\n         identified by the second ETag \"I am another ETag\".  To put the matter\n         more plainly one can think of the previous If header as being in the\n         form (or (and &lt;locktoken:a-write-lock-token&gt; [\"I am an ETag\"]) (and\n         [\"I am another ETag\"])).\n         \n      </p>\n      \n      \n      \n      \n      <h3><a name=\"rfc.section.9.4.2\">9.4.2</a>.&nbsp;\n         Tagged-list Production\n      </h3>\n      \n      <p>\n         The tagged-list production scopes a list production.  That is, it\n         specifies that the lists following the resource specification only\n         apply to the specified resource.  The scope of the resource\n         production begins with the list production immediately following the\n         resource production and ends with the next resource production, if\n         any.\n         \n      </p>\n      <p>\n         When the If header is applied to a particular resource, the Tagged-\n         list productions MUST be searched to determine if any of the listed\n         resources match the operand resource(s) for the current method.  If\n         none of the resource productions match the current resource then the\n         header MUST be ignored.  If one of the resource productions does\n         match the name of the resource under consideration then the list\n         productions following the resource production MUST be applied to the\n         resource in the manner specified in the previous section.\n         \n      </p>\n      <p>\n         The same URI MUST NOT appear more than once in a resource production\n         in an If header.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.9.4.2.1\">9.4.2.1</a>.&nbsp;\n         Example - Tagged List If header\n      </h3>\n      <pre>\n   COPY /resource1 HTTP/1.1\n   Host: www.foo.bar\n   Destination: http://www.foo.bar/resource2\n   If: &lt;http://www.foo.bar/resource1&gt; (&lt;locktoken:a-write-lock-token&gt;\n   [W/\"A weak ETag\"]) ([\"strong ETag\"])\n   &lt;http://www.bar.bar/random&gt;([\"another strong ETag\"])\n</pre>\n      <p>\n         In this example http://www.foo.bar/resource1 is being copied to\n         http://www.foo.bar/resource2.  When the method is first applied to\n         http://www.foo.bar/resource1, resource1 must be in the state\n         specified by \"(&lt;locktoken:a-write-lock-token&gt; [W/\"A weak ETag\"])\n         ([\"strong ETag\"])\", that is, it either must be locked with a lock\n         token of \"locktoken:a-write-lock-token\" and have a weak entity tag\n         W/\"A weak ETag\" or it must have a strong entity tag \"strong ETag\".\n         \n      </p>\n      <p>\n         That is the only success condition since the resource\n         http://www.bar.bar/random never has the method applied to it (the\n         only other resource listed in the If header) and\n         http://www.foo.bar/resource2 is not listed in the If header.\n         \n      </p>\n      \n      \n      \n      \n      <h3><a name=\"rfc.section.9.4.3\">9.4.3</a>.&nbsp;\n         not Production\n      </h3>\n      \n      <p>\n         Every state token or ETag is either current, and hence describes the\n         state of a resource, or is not current, and does not describe the\n         state of a resource. The boolean operation of matching a state token\n         or ETag to the current state of a resource thus resolves to a true or\n         false value.  The not production is used to reverse that value.  The\n         scope of the not production is the state-token or entity-tag\n         immediately following it.\n         \n      </p>\n      <pre>\n   If: (Not &lt;locktoken:write1&gt; &lt;locktoken:write2&gt;)\n</pre>\n      <p>\n         When submitted with a request, this If header requires that all\n         operand resources must not be locked with locktoken:write1 and must\n         be locked with locktoken:write2.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.9.4.4\">9.4.4</a>.&nbsp;\n         Matching Function\n      </h3>\n      \n      <p>\n         When performing If header processing, the definition of a matching\n         state token or entity tag is as follows.\n         \n      </p>\n      <p>\n         Matching entity tag: Where the entity tag matches an entity tag\n         associated with that resource.\n         \n      </p>\n      <p>\n         Matching state token: Where there is an exact match between the state\n         token in the If header and any state token on the resource.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.9.4.5\">9.4.5</a>.&nbsp;\n         If Header and Non-DAV Compliant Proxies\n      </h3>\n      \n      <p>\n         Non-DAV compliant proxies will not honor the If header, since they\n         will not understand the If header, and HTTP requires non-understood\n         headers to be ignored.  When communicating with HTTP/1.1 proxies, the\n         \"Cache-Control: no-cache\" request header MUST be used so as to\n         prevent the proxy from improperly trying to service the request from\n         its cache.  When dealing with HTTP/1.0 proxies the \"Pragma: no-cache\"\n         request header MUST be used for the same reason.\n         \n      </p>\n      \n      \n      \n      \n      \n      <h2><a name=\"rfc.section.9.5\">9.5</a>.&nbsp;\n         <a name=\"HEADER_Lock-Token\">Lock-Token Header</a></h2>\n      <pre>\n   Lock-Token = \"Lock-Token\" \":\" Coded-URL\n</pre>\n      <p>\n         The Lock-Token request header is used with the UNLOCK method to\n         identify the lock to be removed.  The lock token in the Lock-Token\n         request header MUST identify a lock that contains the resource\n         identified by Request-URI as a member.\n         \n      </p>\n      <p>\n         The Lock-Token response header is used with the LOCK method to\n         indicate the lock token created as a result of a successful LOCK\n         request to create a new lock.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.9.6\">9.6</a>.&nbsp;\n         <a name=\"HEADER_Overwrite\">Overwrite Header</a></h2>\n      <pre>\n   Overwrite = \"Overwrite\" \":\" (\"T\" | \"F\")\n</pre>\n      <p>\n         The Overwrite header specifies whether the server should overwrite\n         the state of a non-null destination resource during a COPY or MOVE.\n         A value of \"F\" states that the server must not perform the COPY or\n         MOVE operation if the state of the destination resource is non-null.\n         If the overwrite header is not included in a COPY or MOVE request\n         then the resource MUST treat the request as if it has an overwrite\n         header of value \"T\". While the Overwrite header appears to duplicate\n         the functionality of the If-Match: * header of HTTP/1.1, If-Match\n         applies only to the Request-URI, and not to the Destination of a COPY\n         or MOVE.\n         \n      </p>\n      <p>\n         If a COPY or MOVE is not performed due to the value of the Overwrite\n         header, the method MUST fail with a 412 (Precondition Failed) status\n         code.\n         \n      </p>\n      <p>\n         All DAV compliant resources MUST support the Overwrite header.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.9.7\">9.7</a>.&nbsp;\n         <a name=\"HEADER_Status-URI\">Status-URI Response Header</a></h2>\n      \n      <p>\n         The Status-URI response header may be used with the 102 (Processing)\n         status code to inform the client as to the status of a method.\n         Status-URI = \"Status-URI\" \":\" *(Status-Code Coded-URL) ; Status-Code\n         is defined in 6.1.1 of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>\n         \n      </p>\n      <p>\n         The URIs listed in the header are source resources which have been\n         affected by the outstanding method.  The status code indicates the\n         resolution of the method on the identified resource.  So, for\n         example, if a MOVE method on a collection is outstanding and a 102\n         (Processing) response with a Status-URI response header is returned,\n         the included URIs will indicate resources that have had move\n         attempted on them and what the result was.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.9.8\">9.8</a>.&nbsp;\n         <a name=\"HEADER_Timeout\">Timeout Request Header</a></h2>\n      <pre>\n   TimeOut = \"Timeout\" \":\" 1#TimeType\n   TimeType = (\"Second-\" DAVTimeOutVal | \"Infinite\" | Other)\n   DAVTimeOutVal = 1*digit\n   Other = \"Extend\" field-value   ; See section 4.2 of [RFC2068]\n</pre>\n      <p>\n         Clients may include Timeout headers in their LOCK requests.  However,\n         the server is not required to honor or even consider these requests.\n         Clients MUST NOT submit a Timeout request header with any method\n         other than a LOCK method.\n         \n      </p>\n      <p>\n         A Timeout request header MUST contain at least one TimeType and may\n         contain multiple TimeType entries. The purpose of listing multiple\n         TimeType entries is to indicate multiple different values and value\n         types that are acceptable to the client.  The client lists the\n         TimeType entries in order of preference.\n         \n      </p>\n      <p>\n         Timeout response values MUST use a Second value, Infinite, or a\n         TimeType the client has indicated familiarity with.  The server may\n         assume a client is familiar with any TimeType submitted in a Timeout\n         header.\n         \n      </p>\n      <p>\n         The \"Second\" TimeType specifies the number of seconds that will\n         elapse between granting of the lock at the server, and the automatic\n         removal of the lock.  The timeout value for TimeType \"Second\" MUST\n         NOT be greater than 2^32-1.\n         \n      </p>\n      <p>\n         The timeout counter SHOULD be restarted any time an owner of the lock\n         sends a method to any member of the lock, including unsupported\n         methods, or methods which are unsuccessful.  However the lock MUST be\n         refreshed if a refresh LOCK method is successfully received.\n         \n      </p>\n      <p>\n         If the timeout expires then the lock may be lost.  Specifically, if\n         the server wishes to harvest the lock upon time-out, the server\n         SHOULD act as if an UNLOCK method was executed by the server on the\n         resource using the lock token of the timed-out lock, performed with\n         its override authority. Thus logs should be updated with the\n         disposition of the lock, notifications should be sent, etc., just as\n         they would be for an UNLOCK request.\n         \n      </p>\n      <p>\n         Servers are advised to pay close attention to the values submitted by\n         clients, as they will be indicative of the type of activity the\n         client intends to perform.  For example, an applet running in a\n         browser may need to lock a resource, but because of the instability\n         of the environment within which the applet is running, the applet may\n         be turned off without warning.  As a result, the applet is likely to\n         ask for a relatively small timeout value so that if the applet dies,\n         the lock can be quickly harvested.  However, a document management\n         system is likely to ask for an extremely long timeout because its\n         user may be planning on going off-line.\n         \n      </p>\n      <p>\n         A client MUST NOT assume that just because the time-out has expired\n         the lock has been lost.\n         \n      </p>\n      \n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.10\">10</a>.&nbsp;\n         Status Code Extensions to HTTP/1.1\n      </h1>\n      \n      <p>\n         The following status codes are added to those defined in HTTP/1.1\n         <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>.\n         \n      </p>\n      \n      \n      <h2><a name=\"rfc.section.10.1\">10.1</a>.&nbsp;\n         <a name=\"STATUS_102\">102 Processing</a></h2>\n      \n      <p>\n         The 102 (Processing) status code is an interim response used to\n         inform the client that the server has accepted the complete request,\n         but has not yet completed it.  This status code SHOULD only be sent\n         when the server has a reasonable expectation that the request will\n         take significant time to complete. As guidance, if a method is taking\n         longer than 20 seconds (a reasonable, but arbitrary value) to process\n         the server SHOULD return a 102 (Processing) response. The server MUST\n         send a final response after the request has been completed.\n         \n      </p>\n      <p>\n         Methods can potentially take a long period of time to process,\n         especially methods that support the Depth header.  In such cases the\n         client may time-out the connection while waiting for a response.  To\n         prevent this the server may return a 102 (Processing) status code to\n         indicate to the client that the server is still processing the\n         method.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.10.2\">10.2</a>.&nbsp;\n         <a name=\"STATUS_207\">207 Multi-Status</a></h2>\n      \n      <p>\n         The 207 (Multi-Status) status code provides status for multiple\n         independent operations (see section 11 for more information).\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.10.3\">10.3</a>.&nbsp;\n         <a name=\"STATUS_422\">422 Unprocessable Entity</a></h2>\n      \n      <p>\n         The 422 (Unprocessable Entity) status code means the server\n         understands the content type of the request entity (hence a\n         415(Unsupported Media Type) status code is inappropriate), and the\n         syntax of the request entity is correct (thus a 400 (Bad Request)\n         status code is inappropriate) but was unable to process the contained\n         instructions.  For example, this error condition may occur if an XML\n         request body contains well-formed (i.e., syntactically correct), but\n         semantically erroneous XML instructions.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.10.4\">10.4</a>.&nbsp;\n         <a name=\"STATUS_423\">423 Locked</a></h2>\n      \n      <p>\n         The 423 (Locked) status code means the source or destination resource\n         of a method is locked.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.10.5\">10.5</a>.&nbsp;\n         <a name=\"STATUS_424\">424 Failed Dependency</a></h2>\n      \n      <p>\n         The 424 (Failed Dependency) status code means that the method could\n         not be performed on the resource because the requested action\n         depended on another action and that action failed.  For example, if a\n         command in a PROPPATCH method fails then, at minimum, the rest of the\n         commands will also fail with 424 (Failed Dependency).\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.10.6\">10.6</a>.&nbsp;\n         <a name=\"STATUS_507\">507 Insufficient Storage</a></h2>\n      \n      <p>\n         The 507 (Insufficient Storage) status code means the method could not\n         be performed on the resource because the server is unable to store\n         the representation needed to successfully complete the request.  This\n         condition is considered to be temporary.  If the request which\n         received this status code was the result of a user action, the\n         request MUST NOT be repeated until it is requested by a separate user\n         action.\n         \n      </p>\n      \n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.11\">11</a>.&nbsp;\n         Multi-Status Response\n      </h1>\n      \n      <p>\n         The default 207 (Multi-Status) response body is a text/xml or\n         application/xml HTTP entity that contains a single XML element called\n         multistatus, which contains a set of XML elements called response\n         which contain 200, 300, 400, and 500 series status codes generated\n         during the method invocation.  100 series status codes SHOULD NOT be\n         recorded in a response XML element.\n         \n      </p>\n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.12\">12</a>.&nbsp;\n         XML Element Definitions\n      </h1>\n      \n      <p>\n         In the section below, the final line of each section gives the\n         element type declaration using the format defined in <a href=\"#REC-XML\" title=\"Extensible Markup Language (XML) 1.0\">[REC-XML]</a>. The\n         \"Value\" field, where present, specifies further restrictions on the\n         allowable contents of the XML element using BNF (i.e., to further\n         restrict the values of a PCDATA element).\n         \n      </p>\n      \n      \n      <h2><a name=\"rfc.section.12.1\">12.1</a>.&nbsp;\n         <a name=\"ELEMENT_activelock\">activelock XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>activelock</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Describes a lock on a resource.</dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT activelock (lockscope, locktype, depth, owner?, timeout?,\n   locktoken?) &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.12.1.1\">12.1.1</a>.&nbsp;\n         <a name=\"ELEMENT_depth\">depth XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>depth</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>The value of the Depth header.</dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>\"0\" | \"1\" | \"infinity\"</dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT depth (#PCDATA) &gt;\n</pre>\n      \n      \n      <h3><a name=\"rfc.section.12.1.2\">12.1.2</a>.&nbsp;\n         <a name=\"ELEMENT_locktoken\">locktoken XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>locktoken</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>The lock token associated with a lock.\n                     Description: The href contains one or more opaque lock token URIs\n                     which all refer to the same lock (i.e., the OpaqueLockToken-URI\n                     production in section 6.4).\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT locktoken (href+) &gt;\n</pre>\n      \n      \n      <h3><a name=\"rfc.section.12.1.3\">12.1.3</a>.&nbsp;\n         <a name=\"ELEMENT_timeout\">timeout XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>timeout</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>The timeout associated with a lock</dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>TimeType ;Defined in section 9.8</dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT timeout (#PCDATA) &gt;\n</pre>\n      \n      \n      \n      <h2><a name=\"rfc.section.12.2\">12.2</a>.&nbsp;\n         <a name=\"ELEMENT_collection\">collection XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>collection</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Identifies the associated resource as a collection. The\n                     resourcetype property of a collection resource MUST have this value.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT collection EMPTY &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.12.3\">12.3</a>.&nbsp;\n         <a name=\"ELEMENT_href\">href XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>href</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Identifies the content of the element as a URI.</dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>URI ; See section 3.2.1 of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a></dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT href (#PCDATA)&gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.12.4\">12.4</a>.&nbsp;\n         <a name=\"ELEMENT_link\">link XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>link</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Identifies the property as a link and contains the source\n                     and destination of that link.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The link XML element is used to provide the sources and\n                     destinations of a link.  The name of the property containing the link\n                     XML element provides the type of the link.  Link is a multi-valued\n                     element, so multiple links may be used together to indicate multiple\n                     links with the same type.  The values in the href XML elements inside\n                     the src and dst XML elements of the link XML element MUST NOT be\n                     rejected if they point to resources which do not exist.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT link (src+, dst+) &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.12.4.1\">12.4.1</a>.&nbsp;\n         <a name=\"ELEMENT_dest\">dst XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>dst</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Indicates the destination of a link</dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>URI</dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT dst (#PCDATA) &gt;\n</pre>\n      \n      \n      <h3><a name=\"rfc.section.12.4.2\">12.4.2</a>.&nbsp;\n         <a name=\"ELEMENT_src\">src XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>src</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Indicates the source of a link.</dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>URI</dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT src (#PCDATA) &gt;\n</pre>\n      \n      \n      \n      <h2><a name=\"rfc.section.12.5\">12.5</a>.&nbsp;\n         <a name=\"ELEMENT_lockentry\">lockentry XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>lockentry</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Defines the types of locks that can be used with the\n                     resource.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT lockentry (lockscope, locktype) &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.12.6\">12.6</a>.&nbsp;\n         <a name=\"ELEMENT_lockinfo\">lockinfo XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>lockinfo</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>The lockinfo XML element is used with a LOCK method to\n                     specify the type of lock the client wishes to have created.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT lockinfo (lockscope, locktype, owner?) &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.12.7\">12.7</a>.&nbsp;\n         <a name=\"ELEMENT_lockscope\">lockscope XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>lockscope</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Specifies whether a lock is an exclusive lock, or a\n                     shared lock.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT lockscope (exclusive | shared) &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.12.7.1\">12.7.1</a>.&nbsp;\n         <a name=\"ELEMENT_exclusive\">exclusive XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>exclusive</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Specifies an exclusive lock</dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT exclusive EMPTY &gt;\n</pre>\n      \n      \n      <h3><a name=\"rfc.section.12.7.2\">12.7.2</a>.&nbsp;\n         <a name=\"ELEMENT_shared\">shared XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>shared</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Specifies a shared lock</dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT shared EMPTY &gt;\n</pre>\n      \n      \n      \n      <h2><a name=\"rfc.section.12.8\">12.8</a>.&nbsp;\n         <a name=\"ELEMENT_locktype\">locktype XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>locktype</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Specifies the access type of a lock.  At present, this\n                     specification only defines one lock type, the write lock.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT locktype (write) &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.12.8.1\">12.8.1</a>.&nbsp;\n         <a name=\"ELEMENT_write\">write XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>write</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Specifies a write lock.</dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT write EMPTY &gt;\n</pre>\n      \n      \n      \n      <h2><a name=\"rfc.section.12.9\">12.9</a>.&nbsp;\n         <a name=\"ELEMENT_multistatus\">multistatus XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>multistatus</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Contains multiple response messages.</dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The responsedescription at the top level is used to\n                     provide a general message describing the overarching nature of the\n                     response.  If this value is available an application may use it\n                     instead of presenting the individual response descriptions contained\n                     within the responses.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT multistatus (response+, responsedescription?) &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.12.9.1\">12.9.1</a>.&nbsp;\n         <a name=\"ELEMENT_response\">response XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>response</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Holds a single response describing the effect of a\n                     method on resource and/or its properties.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>A particular href MUST NOT appear more than once as the\n                     child of a response XML element under a multistatus XML element.\n                     This requirement is necessary in order to keep processing costs for a\n                     response to linear time.  Essentially, this prevents having to search\n                     in order to group together all the responses by href.  There are,\n                     however, no requirements regarding ordering based on href values.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT response (href, ((href*, status)|(propstat+)),\n   responsedescription?) &gt;\n</pre>\n      \n      \n      <h3><a name=\"rfc.section.12.9.1.1\">12.9.1.1</a>.&nbsp;\n         <a name=\"ELEMENT_propstat\">propstat XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>propstat</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Groups together a prop and status element that is\n                     associated with a particular href element.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The propstat XML element MUST contain one prop XML\n                     element and one status XML element.  The contents of the prop XML\n                     element MUST only list the names of properties to which the result in\n                     the status element applies.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT propstat (prop, status, responsedescription?) &gt;\n</pre>\n      \n      \n      <h3><a name=\"rfc.section.12.9.1.2\">12.9.1.2</a>.&nbsp;\n         <a name=\"ELEMENT_status\">status XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>status</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Holds a single HTTP status-line</dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>status-line   ;status-line defined in <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a></dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT status (#PCDATA) &gt;\n</pre>\n      \n      \n      \n      <h3><a name=\"rfc.section.12.9.2\">12.9.2</a>.&nbsp;\n         <a name=\"ELEMENT_responsedescription\">responsedescription XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>responsedescription</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Contains a message that can be displayed to the user\n                     explaining the nature of the response.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>This XML element provides information suitable to be\n                     presented to a user.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT responsedescription (#PCDATA) &gt;\n</pre>\n      \n      \n      \n      <h2><a name=\"rfc.section.12.10\">12.10</a>.&nbsp;\n         <a name=\"ELEMENT_owner\">owner XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>owner</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Provides information about the principal taking out a\n                     lock.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The owner XML element provides information sufficient\n                     for either directly contacting a principal (such as a telephone\n                     number or Email URI), or for discovering the principal (such as the\n                     URL of a homepage) who owns a lock.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT owner ANY&gt;\n</pre>\n      \n      \n      \n      <h2><a name=\"rfc.section.12.11\">12.11</a>.&nbsp;\n         <a name=\"ELEMENT_prop\">prop XML element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>prop</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Contains properties related to a resource.</dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The prop XML element is a generic container for\n                     properties defined on resources.  All elements inside a prop XML\n                     element MUST define properties related to the resource.  No other\n                     elements may be used inside of a prop element.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT prop ANY&gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.12.12\">12.12</a>.&nbsp;\n         <a name=\"ELEMENT_propertybehaviour\">propertybehavior XML element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>propertybehavior</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Specifies\n                     how properties are handled during a COPY or MOVE.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The propertybehavior XML element specifies how\n                     properties are handled during a COPY or MOVE.  If this XML element is\n                     not included in the request body then the server is expected to act\n                     as defined by the default property handling behavior of the\n                     associated method.  All WebDAV compliant resources MUST support the\n                     propertybehavior XML element.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT propertybehavior (omit | keepalive) &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.12.12.1\">12.12.1</a>.&nbsp;\n         <a name=\"ELEMENT_keepalive\">keepalive XML element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>keepalive</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Specifies requirements for the copying/moving of live\n                     properties.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>If a list of URIs is included as the value of keepalive\n                     then the named properties MUST be \"live\" after they are copied\n                     (moved) to the destination resource of a COPY (or MOVE).  If the\n                     value \"*\" is given for the keepalive XML element, this designates\n                     that all live properties on the source resource MUST be live on the\n                     destination.  If the requirements specified by the keepalive element\n                     can not be honored then the method MUST fail with a 412 (Precondition\n                     Failed).  All DAV compliant resources MUST support the keepalive XML\n                     element for use with the COPY and MOVE methods.\n                  </dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>\"*\" ; #PCDATA value can only be \"*\"</dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT keepalive (#PCDATA | href+) &gt;\n</pre>\n      \n      \n      \n      <h3><a name=\"rfc.section.12.12.2\">12.12.2</a>.&nbsp;\n         <a name=\"ELEMENT_omit\">omit XML element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>omit</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>The omit XML element instructs the server that it should\n                     use best effort to copy properties but a failure to copy a property\n                     MUST NOT cause the method to fail.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The default behavior\n                     for a COPY or MOVE is to copy/move all properties or fail the method.\n                     In certain circumstances, such as when a server copies a resource\n                     over another protocol such as FTP, it may not be possible to\n                     copy/move the properties associated with the resource. Thus any\n                     attempt to copy/move over FTP would always have to fail because\n                     properties could not be moved over, even as dead properties.  All DAV\n                     compliant resources MUST support the omit XML element on COPY/MOVE\n                     methods.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT omit EMPTY &gt;\n</pre>\n      \n      \n      \n      <h2><a name=\"rfc.section.12.13\">12.13</a>.&nbsp;\n         <a name=\"ELEMENT_propertyupdate\">propertyupdate XML element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>propertyupdate</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Contains a request to alter the properties on a\n                     resource.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>This XML element is a container for the information\n                     required to modify the properties on the resource.  This XML element\n                     is multi-valued.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT propertyupdate (remove | set)+ &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.12.13.1\">12.13.1</a>.&nbsp;\n         <a name=\"ELEMENT_remove\">remove XML element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>remove</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Lists the DAV properties to be removed from a resource.</dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>Remove instructs that the properties specified in prop\n                     should be removed.  Specifying the removal of a property that does\n                     not exist is not an error.  All the XML elements in a prop XML\n                     element inside of a remove XML element MUST be empty, as only the\n                     names of properties to be removed are required.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT remove (prop) &gt;\n</pre>\n      \n      \n      <h3><a name=\"rfc.section.12.13.2\">12.13.2</a>.&nbsp;\n         <a name=\"ELEMENT_set\">set XML element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>set</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Lists the DAV property values to be set for a resource.</dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The set XML element MUST contain only a prop XML\n                     element.  The elements contained by the prop XML element inside the\n                     set XML element MUST specify the name and value of properties that\n                     are set on the resource identified by Request-URI.  If a property\n                     already exists then its value is replaced. Language tagging\n                     information in the property's value (in the \"xml:lang\" attribute, if\n                     present) MUST be persistently stored along with the property, and\n                     MUST be subsequently retrievable using PROPFIND.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT set (prop) &gt;\n</pre>\n      \n      \n      \n      <h2><a name=\"rfc.section.12.14\">12.14</a>.&nbsp;\n         <a name=\"ELEMENT_propfind\">propfind XML Element</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>propfind</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Specifies the properties to be returned from a PROPFIND\n                     method.  Two special elements are specified for use with propfind,\n                     allprop and propname.  If prop is used inside propfind it MUST only\n                     contain property names, not values.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT propfind (allprop | propname | prop) &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.12.14.1\">12.14.1</a>.&nbsp;\n         <a name=\"ELEMENT_allprop\">allprop XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>allprop</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>The allprop XML\n                     element specifies that all property names and values on the resource\n                     are to be returned.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT allprop EMPTY &gt;\n</pre>\n      \n      \n      <h3><a name=\"rfc.section.12.14.2\">12.14.2</a>.&nbsp;\n         <a name=\"ELEMENT_propname\">propname XML Element</a></h3>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>propname</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>The propname XML\n                     element specifies that only a list of property names on the resource\n                     is to be returned.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT propname EMPTY &gt;\n</pre>\n      \n      \n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.13\">13</a>.&nbsp;\n         DAV Properties\n      </h1>\n      \n      <p>\n         For DAV properties, the name of the property is also the same as the\n         name of the XML element that contains its value. In the section\n         below, the final line of each section gives the element type\n         declaration using the format defined in <a href=\"#REC-XML\" title=\"Extensible Markup Language (XML) 1.0\">[REC-XML]</a>. The \"Value\" field,\n         where present, specifies further restrictions on the allowable\n         contents of the XML element using BNF (i.e., to further restrict the\n         values of a PCDATA element).\n         \n      </p>\n      \n      \n      <h2><a name=\"rfc.section.13.1\">13.1</a>.&nbsp;\n         <a name=\"PROPERTY_creationdate\">creationdate Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>creationdate</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Records the time and date the resource was created.</dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>date-time ; See Appendix 2</dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The creationdate property should be defined on all DAV\n                     compliant resources.  If present, it contains a timestamp of the\n                     moment when the resource was created (i.e., the moment it had non-\n                     null state).\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT creationdate (#PCDATA) &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.13.2\">13.2</a>.&nbsp;\n         <a name=\"PROPERTY_displayname\">displayname Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>displayname</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Provides a name for the resource that is suitable for\n                     presentation to a user.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The displayname property should be defined on all DAV\n                     compliant resources.  If present, the property contains a description\n                     of the resource that is suitable for presentation to a user.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT displayname (#PCDATA) &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.13.3\">13.3</a>.&nbsp;\n         <a name=\"PROPERTY_getcontentlanguage\">getcontentlanguage Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>getcontentlanguage</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Contains the Content-Language header returned by a GET\n                     without accept headers\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The getcontentlanguage property MUST be defined on any\n                     DAV compliant resource that returns the Content-Language header on a\n                     GET.\n                  </dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>language-tag   ;language-tag is defined in section 14.13\n                     of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a></dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT getcontentlanguage (#PCDATA) &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.13.4\">13.4</a>.&nbsp;\n         <a name=\"PROPERTY_getcontentlength\">getcontentlength Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>getcontentlength</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Contains the Content-Length header returned by a GET\n                     without accept headers.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The getcontentlength property MUST be defined on any\n                     DAV compliant resource that returns the Content-Length header in\n                     response to a GET.\n                  </dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>content-length ; see section 14.14 of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a></dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT getcontentlength (#PCDATA) &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.13.5\">13.5</a>.&nbsp;\n         <a name=\"PROPERTY_getcontenttype\">getcontenttype Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>getcontenttype</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Contains the Content-Type header returned by a GET\n                     without accept headers.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>This getcontenttype property MUST be defined on any DAV\n                     compliant resource that returns the Content-Type header in response\n                     to a GET.\n                  </dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>media-type   ; defined in section 3.7 of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a></dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT getcontenttype (#PCDATA) &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.13.6\">13.6</a>.&nbsp;\n         <a name=\"PROPERTY_getetag\">getetag Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>getetag</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Contains the ETag header returned by a GET without\n                     accept headers.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The getetag property MUST be defined on any DAV\n                     compliant resource that returns the Etag header.\n                  </dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>entity-tag  ; defined in section 3.11 of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a></dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT getetag (#PCDATA) &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.13.7\">13.7</a>.&nbsp;\n         <a name=\"PROPERTY_getlastmodified\">getlastmodified Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>getlastmodified</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Contains the Last-Modified header returned by a GET\n                     method without accept headers.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>Note that the last-modified date on a resource may\n                     reflect changes in any part of the state of the resource, not\n                     necessarily just a change to the response to the GET method.  For\n                     example, a change in a property may cause the last-modified date to\n                     change. The getlastmodified property MUST be defined on any DAV\n                     compliant resource that returns the Last-Modified header in response\n                     to a GET.\n                  </dd>\n                  \n                  <dt>Value:</dt>\n                  <dd>HTTP-date  ; defined in section 3.3.1 of <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a></dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT getlastmodified (#PCDATA) &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.13.8\">13.8</a>.&nbsp;\n         <a name=\"PROPERTY_lockdiscovery\">lockdiscovery Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>lockdiscovery</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Describes the active locks on a resource</dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The lockdiscovery property returns a listing of who has\n                     a lock, what type of lock he has, the timeout type and the time\n                     remaining on the timeout, and the associated lock token.  The server\n                     is free to withhold any or all of this information if the requesting\n                     principal does not have sufficient access rights to see the requested\n                     data.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT lockdiscovery (activelock)* &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.13.8.1\">13.8.1</a>.&nbsp;\n         Example - Retrieving the lockdiscovery Property\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   PROPFIND /container/ HTTP/1.1\n   Host: www.foo.bar\n   Content-Length: xxxx\n   Content-Type: text/xml; charset=\"utf-8\"\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:propfind xmlns:D='DAV:'&gt;\n     &lt;D:prop&gt;&lt;D:lockdiscovery/&gt;&lt;/D:prop&gt;\n   &lt;/D:propfind&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:multistatus xmlns:D='DAV:'&gt;\n     &lt;D:response&gt;\n          &lt;D:href&gt;http://www.foo.bar/container/&lt;/D:href&gt;\n          &lt;D:propstat&gt;\n               &lt;D:prop&gt;\n                    &lt;D:lockdiscovery&gt;\n                         &lt;D:activelock&gt;\n                              &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n                              &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;\n                              &lt;D:depth&gt;0&lt;/D:depth&gt;\n                              &lt;D:owner&gt;Jane Smith&lt;/D:owner&gt;\n                              &lt;D:timeout&gt;Infinite&lt;/D:timeout&gt;\n                              &lt;D:locktoken&gt;\n                                   &lt;D:href&gt;\n               opaquelocktoken:f81de2ad-7f3d-a1b2-4f3c-00a0c91a9d76\n                                   &lt;/D:href&gt;\n                              &lt;/D:locktoken&gt;\n                         &lt;/D:activelock&gt;\n                    &lt;/D:lockdiscovery&gt;\n               &lt;/D:prop&gt;\n               &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;\n          &lt;/D:propstat&gt;\n     &lt;/D:response&gt;\n   &lt;/D:multistatus&gt;\n</pre>\n      <p>\n         This resource has a single exclusive write lock on it, with an\n         infinite timeout.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.13.9\">13.9</a>.&nbsp;\n         <a name=\"PROPERTY_resourcetype\">resourcetype Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>resourcetype</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>Specifies the nature of the resource.</dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The resourcetype property MUST be defined on all DAV\n                     compliant resources.  The default value is empty.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT resourcetype ANY &gt;\n</pre>\n      \n      \n      <h2><a name=\"rfc.section.13.10\">13.10</a>.&nbsp;\n         <a name=\"PROPERTY_source\">source Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>source</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>The destination of the source link identifies the\n                     resource that contains the unprocessed source of the link's source.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The source of the link (src) is typically the URI of the\n                     output resource on which the link is defined, and there is typically\n                     only one destination (dst) of the link, which is the URI where the\n                     unprocessed source of the resource may be accessed.  When more than\n                     one link destination exists, this specification asserts no policy on\n                     ordering.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT source (link)* &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.13.10.1\">13.10.1</a>.&nbsp;\n         Example - A source Property\n      </h3>\n      <pre>\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:prop xmlns:D=\"DAV:\" xmlns:F=\"http://www.foocorp.com/Project/\"&gt;\n     &lt;D:source&gt;\n          &lt;D:link&gt;\n               &lt;F:projfiles&gt;Source&lt;/F:projfiles&gt;\n               &lt;D:src&gt;http://foo.bar/program&lt;/D:src&gt;\n               &lt;D:dst&gt;http://foo.bar/src/main.c&lt;/D:dst&gt;\n          &lt;/D:link&gt;\n          &lt;D:link&gt;\n               &lt;F:projfiles&gt;Library&lt;/F:projfiles&gt;\n               &lt;D:src&gt;http://foo.bar/program&lt;/D:src&gt;\n               &lt;D:dst&gt;http://foo.bar/src/main.lib&lt;/D:dst&gt;\n          &lt;/D:link&gt;\n          &lt;D:link&gt;\n               &lt;F:projfiles&gt;Makefile&lt;/F:projfiles&gt;\n               &lt;D:src&gt;http://foo.bar/program&lt;/D:src&gt;\n               &lt;D:dst&gt;http://foo.bar/src/makefile&lt;/D:dst&gt;\n          &lt;/D:link&gt;\n     &lt;/D:source&gt;\n   &lt;/D:prop&gt;\n</pre>\n      <p>\n         In this example the resource http://foo.bar/program has a source\n         property that contains three links.  Each link contains three\n         elements, two of which, src and dst, are part of the DAV schema\n         defined in this document, and one which is defined by the schema\n         http://www.foocorp.com/project/ (Source, Library, and Makefile).  A\n         client which only implements the elements in the DAV spec will not\n         understand the foocorp elements and will ignore them, thus seeing the\n         expected source and destination links.  An enhanced client may know\n         about the foocorp elements and be able to present the user with\n         additional information about the links.  This example demonstrates\n         the power of XML markup, allowing element values to be enhanced\n         without breaking older clients.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.13.11\">13.11</a>.&nbsp;\n         <a name=\"PROPERTY_supportedlock\">supportedlock Property</a></h2>\n      \n      <p><span>\n            <blockquote>\n               <dl>\n                  \n                  <dt>Name:</dt>\n                  <dd>supportedlock</dd>\n                  \n                  <dt>Namespace:</dt>\n                  <dd>DAV:</dd>\n                  \n                  <dt>Purpose:</dt>\n                  <dd>To provide a listing of the lock capabilities supported\n                     by the resource.\n                  </dd>\n                  \n                  <dt>Description:</dt>\n                  <dd>The supportedlock property of a resource returns a\n                     listing of the combinations of scope and access types which may be\n                     specified in a lock request on the resource.  Note that the actual\n                     contents are themselves controlled by access controls so a server is\n                     not required to provide information the client is not authorized to\n                     see.\n                  </dd>\n                  \n               </dl>\n            </blockquote></span></p>\n      <pre>\n   &lt;!ELEMENT supportedlock (lockentry)* &gt;\n</pre>\n      \n      <h3><a name=\"rfc.section.13.11.1\">13.11.1</a>.&nbsp;\n         Example - Retrieving the supportedlock Property\n      </h3>\n      \n      <p>\n         &gt;&gt;Request\n      </p>\n      <pre>\n   PROPFIND  /container/ HTTP/1.1\n   Host: www.foo.bar\n   Content-Length: xxxx\n   Content-Type: text/xml; charset=\"utf-8\"\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:propfind xmlns:D=\"DAV:\"&gt;\n     &lt;D:prop&gt;&lt;D:supportedlock/&gt;&lt;/D:prop&gt;\n   &lt;/D:propfind&gt;\n</pre>\n      <p>\n         &gt;&gt;Response\n      </p>\n      <pre>\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:multistatus xmlns:D=\"DAV:\"&gt;\n     &lt;D:response&gt;\n          &lt;D:href&gt;http://www.foo.bar/container/&lt;/D:href&gt;\n          &lt;D:propstat&gt;\n               &lt;D:prop&gt;\n                    &lt;D:supportedlock&gt;\n                         &lt;D:lockentry&gt;\n                              &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;\n                              &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n                         &lt;/D:lockentry&gt;\n                         &lt;D:lockentry&gt;\n                              &lt;D:lockscope&gt;&lt;D:shared/&gt;&lt;/D:lockscope&gt;\n                              &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;\n                         &lt;/D:lockentry&gt;\n                    &lt;/D:supportedlock&gt;\n               &lt;/D:prop&gt;\n               &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;\n          &lt;/D:propstat&gt;\n     &lt;/D:response&gt;\n   &lt;/D:multistatus&gt;\n</pre>\n      \n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.14\">14</a>.&nbsp;\n         Instructions for Processing XML in DAV\n      </h1>\n      \n      <p>\n         All DAV compliant resources MUST ignore any unknown XML element and\n         all its children encountered while processing a DAV method that uses\n         XML as its command language.\n         \n      </p>\n      <p>\n         This restriction also applies to the processing, by clients, of DAV\n         property values where unknown XML elements SHOULD be ignored unless\n         the property's schema declares otherwise.\n         \n      </p>\n      <p>\n         This restriction does not apply to setting dead DAV properties on the\n         server where the server MUST record unknown XML elements.\n         \n      </p>\n      <p>\n         Additionally, this restriction does not apply to the use of XML where\n         XML happens to be the content type of the entity body, for example,\n         when used as the body of a PUT.\n         \n      </p>\n      <p>\n         Since XML can be transported as text/xml or application/xml, a DAV\n         server MUST accept DAV method requests with XML parameters\n         transported as either text/xml or application/xml, and DAV client\n         MUST accept XML responses using either text/xml or application/xml.\n         \n      </p>\n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.15\">15</a>.&nbsp;\n         DAV Compliance Classes\n      </h1>\n      \n      <p>\n         A DAV compliant resource can choose from two classes of compliance.\n         A client can discover the compliance classes of a resource by\n         executing OPTIONS on the resource, and examining the \"DAV\" header\n         which is returned.\n         \n      </p>\n      <p>\n         Since this document describes extensions to the HTTP/1.1 protocol,\n         minimally all DAV compliant resources, clients, and proxies MUST be\n         compliant with <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>.\n         \n      </p>\n      <p>\n         Compliance classes are not necessarily sequential. A resource that is\n         class 2 compliant must also be class 1 compliant; but if additional\n         compliance classes are defined later, a resource that is class 1, 2,\n         and 4 compliant might not be class 3 compliant.  Also note that\n         identifiers other than numbers may be used as compliance class\n         identifiers.\n         \n      </p>\n      \n      \n      <h2><a name=\"rfc.section.15.1\">15.1</a>.&nbsp;\n         Class 1\n      </h2>\n      \n      <p>\n         A class 1 compliant resource MUST meet all \"MUST\" requirements in all\n         sections of this document.\n         \n      </p>\n      <p>\n         Class 1 compliant resources MUST return, at minimum, the value \"1\" in\n         the DAV header on all responses to the OPTIONS method.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.15.2\">15.2</a>.&nbsp;\n         Class 2\n      </h2>\n      \n      <p>\n         A class 2 compliant resource MUST meet all class 1 requirements and\n         support the LOCK method, the supportedlock property, the\n         lockdiscovery property, the Time-Out response header and the Lock-\n         Token request header.  A class \"2\" compliant resource SHOULD also\n         support the Time-Out request header and the owner XML element.\n         \n      </p>\n      <p>\n         Class 2 compliant resources MUST return, at minimum, the values \"1\"\n         and \"2\" in the DAV header on all responses to the OPTIONS method.\n         \n      </p>\n      \n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.16\">16</a>.&nbsp;\n         Internationalization Considerations\n      </h1>\n      \n      <p>\n         In the realm of internationalization, this specification complies\n         with the IETF Character Set Policy <a href=\"#RFC2277\" title=\"IETF Policy on Character Sets and Languages\">[RFC2277]</a>. In this specification,\n         human-readable fields can be found either in the value of a property,\n         or in an error message returned in a response entity body.  In both\n         cases, the human-readable content is encoded using XML, which has\n         explicit provisions for character set tagging and encoding, and\n         requires that XML processors read XML elements encoded, at minimum,\n         using the UTF-8 <a href=\"#UTF-8\" title=\"UTF-8, a transformation format of ISO 10646\">[UTF-8]</a> encoding of the ISO 10646 multilingual plane.\n         XML examples in this specification demonstrate use of the charset\n         parameter of the Content-Type header, as defined in <a href=\"#RFC2376\" title=\"XML Media Types\">[RFC2376]</a>, as\n         well as the XML \"encoding\" attribute, which together provide charset\n         identification information for MIME and XML processors.\n         \n      </p>\n      <p>\n         XML also provides a language tagging capability for specifying the\n         language of the contents of a particular XML element.  XML uses\n         either IANA registered language tags (see <a href=\"#RFC1766\" title=\"Tags for the Identification of Languages\">[RFC1766]</a>) or ISO 639\n         language tags <a href=\"#ISO-639\" title=\"ISO 639:1988. Code for the representation of names of languages.\">[ISO-639]</a> in the \"xml:lang\" attribute of an XML element\n         to identify the language of its content and attributes.\n         \n      </p>\n      <p>\n         WebDAV applications MUST support the character set tagging, character\n         set encoding, and the language tagging functionality of the XML\n         specification.  Implementors of WebDAV applications are strongly\n         encouraged to read \"XML Media Types\" <a href=\"#RFC2376\" title=\"XML Media Types\">[RFC2376]</a> for instruction on\n         which MIME media type to use for XML transport, and on use of the\n         charset parameter of the Content-Type header.\n         \n      </p>\n      <p>\n         Names used within this specification fall into three categories:\n         names of protocol elements such as methods and headers, names of XML\n         elements, and names of properties.  Naming of protocol elements\n         follows the precedent of HTTP, using English names encoded in USASCII\n         for methods and headers.  Since these protocol elements are not\n         visible to users, and are in fact simply long token identifiers, they\n         do not need to support encoding in multiple character sets.\n         Similarly, though the names of XML elements used in this\n         specification are English names encoded in UTF-8, these names are not\n         visible to the user, and hence do not need to support multiple\n         character set encodings.\n         \n      </p>\n      <p>\n         The name of a property defined on a resource is a URI.  Although some\n         applications (e.g., a generic property viewer) will display property\n         URIs directly to their users, it is expected that the typical\n         application will use a fixed set of properties, and will provide a\n         mapping from the property name URI to a human-readable field when\n         displaying the property name to a user.  It is only in the case where\n         the set of properties is not known ahead of time that an application\n         need display a property name URI to a user. We recommend that\n         applications provide human-readable property names wherever feasible.\n         \n      </p>\n      <p>\n         For error reporting, we follow the convention of HTTP/1.1 status\n         codes, including with each status code a short, English description\n         of the code (e.g., 423 (Locked)).  While the possibility exists that\n         a poorly crafted user agent would display this message to a user,\n         internationalized applications will ignore this message, and display\n         an appropriate message in the user's language and character set.\n         \n      </p>\n      <p>\n         Since interoperation of clients and servers does not require locale\n         information, this specification does not specify any mechanism for\n         transmission of this information.\n         \n      </p>\n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.17\">17</a>.&nbsp;\n         Security Considerations\n      </h1>\n      \n      <p>\n         This section is provided to detail issues concerning security\n         implications of which WebDAV applications need to be aware.\n         \n      </p>\n      <p>\n         All of the security considerations of HTTP/1.1 (discussed in\n         <a href=\"#RFC2068\" title=\"Hypertext Transfer Protocol -- HTTP/1.1\">[RFC2068]</a>) and XML (discussed in <a href=\"#RFC2376\" title=\"XML Media Types\">[RFC2376]</a>) also apply to WebDAV. In\n         addition, the security risks inherent in remote authoring require\n         stronger authentication technology, introduce several new privacy\n         concerns, and may increase the hazards from poor server design.\n         These issues are detailed below.\n         \n      </p>\n      \n      \n      <h2><a name=\"rfc.section.17.1\">17.1</a>.&nbsp;\n         Authentication of Clients\n      </h2>\n      \n      <p>\n         Due to their emphasis on authoring, WebDAV servers need to use\n         authentication technology to protect not just access to a network\n         resource, but the integrity of the resource as well.  Furthermore,\n         the introduction of locking functionality requires support for\n         authentication.\n         \n      </p>\n      <p>\n         A password sent in the clear over an insecure channel is an\n         inadequate means for protecting the accessibility and integrity of a\n         resource as the password may be intercepted.  Since Basic\n         authentication for HTTP/1.1 performs essentially clear text\n         transmission of a password, Basic authentication MUST NOT be used to\n         authenticate a WebDAV client to a server unless the connection is\n         secure. Furthermore, a WebDAV server MUST NOT send Basic\n         authentication credentials in a WWW-Authenticate header unless the\n         connection is secure.  Examples of secure connections include a\n         Transport Layer Security (TLS) connection employing a strong cipher\n         suite with mutual authentication of client and server, or a\n         connection over a network which is physically secure, for example, an\n         isolated network in a building with restricted access.\n         \n      </p>\n      <p>\n         WebDAV applications MUST support the Digest authentication scheme\n         <a href=\"#RFC2069\" title=\"An Extension to HTTP : Digest Access Authentication\">[RFC2069]</a>. Since Digest authentication verifies that both parties to\n         a communication know a shared secret, a password, without having to\n         send that secret in the clear, Digest authentication avoids the\n         security problems inherent in Basic authentication while providing a\n         level of authentication which is useful in a wide range of scenarios.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.17.2\">17.2</a>.&nbsp;\n         Denial of Service\n      </h2>\n      \n      <p>\n         Denial of service attacks are of special concern to WebDAV servers.\n         WebDAV plus HTTP enables denial of service attacks on every part of a\n         system's resources.\n         \n      </p>\n      <p>\n         The underlying storage can be attacked by PUTting extremely large\n         files.\n         \n      </p>\n      <p>\n         Asking for recursive operations on large collections can attack\n         processing time.\n         \n      </p>\n      <p>\n         Making multiple pipelined requests on multiple connections can attack\n         network connections.\n         \n      </p>\n      <p>\n         WebDAV servers need to be aware of the possibility of a denial of\n         service attack at all levels.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.17.3\">17.3</a>.&nbsp;\n         Security through Obscurity\n      </h2>\n      \n      <p>\n         WebDAV provides, through the PROPFIND method, a mechanism for listing\n         the member resources of a collection.  This greatly diminishes the\n         effectiveness of security or privacy techniques that rely only on the\n         difficulty of discovering the names of network resources.  Users of\n         WebDAV servers are encouraged to use access control techniques to\n         prevent unwanted access to resources, rather than depending on the\n         relative obscurity of their resource names.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.17.4\">17.4</a>.&nbsp;\n         Privacy Issues Connected to Locks\n      </h2>\n      \n      <p>\n         When submitting a lock request a user agent may also submit an owner\n         XML field giving contact information for the person taking out the\n         lock (for those cases where a person, rather than a robot, is taking\n         out the lock). This contact information is stored in a lockdiscovery\n         property on the resource, and can be used by other collaborators to\n         begin negotiation over access to the resource.  However, in many\n         cases this contact information can be very private, and should not be\n         widely disseminated.  Servers SHOULD limit read access to the\n         lockdiscovery property as appropriate.  Furthermore, user agents\n         SHOULD provide control over whether contact information is sent at\n         all, and if contact information is sent, control over exactly what\n         information is sent.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.17.5\">17.5</a>.&nbsp;\n         Privacy Issues Connected to Properties\n      </h2>\n      \n      <p>\n         Since property values are typically used to hold information such as\n         the author of a document, there is the possibility that privacy\n         concerns could arise stemming from widespread access to a resource's\n         property data.  To reduce the risk of inadvertent release of private\n         information via properties, servers are encouraged to develop access\n         control mechanisms that separate read access to the resource body and\n         read access to the resource's properties.  This allows a user to\n         control the dissemination of their property data without overly\n         restricting access to the resource's contents.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.17.6\">17.6</a>.&nbsp;\n         Reduction of Security due to Source Link\n      </h2>\n      \n      <p>\n         HTTP/1.1 warns against providing read access to script code because\n         it may contain sensitive information.  Yet WebDAV, via its source\n         link facility, can potentially provide a URI for script resources so\n         they may be authored.  For HTTP/1.1, a server could reasonably\n         prevent access to source resources due to the predominance of read-\n         only access.  WebDAV, with its emphasis on authoring, encourages read\n         and write access to source resources, and provides the source link\n         facility to identify the source.  This reduces the security benefits\n         of eliminating access to source resources.  Users and administrators\n         of WebDAV servers should be very cautious when allowing remote\n         authoring of scripts, limiting read and write access to the source\n         resources to authorized principals.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.17.7\">17.7</a>.&nbsp;\n         Implications of XML External Entities\n      </h2>\n      \n      <p>\n         XML supports a facility known as \"external entities\", defined in\n         section 4.2.2 of <a href=\"#REC-XML\" title=\"Extensible Markup Language (XML) 1.0\">[REC-XML]</a>, which instruct an XML processor to\n         retrieve and perform an inline include of XML located at a particular\n         URI. An external XML entity can be used to append or modify the\n         document type declaration (DTD) associated with an XML document.  An\n         external XML entity can also be used to include XML within the\n         content of an XML document.  For non-validating XML, such as the XML\n         used in this specification, including an external XML entity is not\n         required by <a href=\"#REC-XML\" title=\"Extensible Markup Language (XML) 1.0\">[REC-XML]</a>. However, <a href=\"#REC-XML\" title=\"Extensible Markup Language (XML) 1.0\">[REC-XML]</a> does state that an XML\n         processor may, at its discretion, include the external XML entity.\n         \n      </p>\n      <p>\n         External XML entities have no inherent trustworthiness and are\n         subject to all the attacks that are endemic to any HTTP GET request.\n         Furthermore, it is possible for an external XML entity to modify the\n         DTD, and hence affect the final form of an XML document, in the worst\n         case significantly modifying its semantics, or exposing the XML\n         processor to the security risks discussed in <a href=\"#RFC2376\" title=\"XML Media Types\">[RFC2376]</a>.  Therefore,\n         implementers must be aware that external XML entities should be\n         treated as untrustworthy.\n         \n      </p>\n      <p>\n         There is also the scalability risk that would accompany a widely\n         deployed application which made use of external XML entities.  In\n         this situation, it is possible that there would be significant\n         numbers of requests for one external XML entity, potentially\n         overloading any server which fields requests for the resource\n         containing the external XML entity.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.17.8\">17.8</a>.&nbsp;\n         Risks Connected with Lock Tokens\n      </h2>\n      \n      <p>\n         This specification, in section 6.4, requires the use of Universal\n         Unique Identifiers (UUIDs) for lock tokens, in order to guarantee\n         their uniqueness across space and time.  UUIDs, as defined in [ISO-\n         11578], contain a \"node\" field which \"consists of the IEEE address,\n         usually the host address.  For systems with multiple IEEE 802 nodes,\n         any available node address can be used.\"  Since a WebDAV server will\n         issue many locks over its lifetime, the implication is that it will\n         also be publicly exposing its IEEE 802 address.\n         \n      </p>\n      <p>\n         There are several risks associated with exposure of IEEE 802\n         addresses.  Using the IEEE 802 address:\n         \n      </p>\n      \n      <p>\n         <ul class=\"text\">\n            \n            <li>It is possible to track the movement of hardware from subnet to\n               subnet.\n            </li>\n            \n            \n            <li>It may be possible to identify the manufacturer of the hardware\n               running a WebDAV server.\n            </li>\n            \n            \n            <li>It may be possible to determine the number of each type of computer\n               running WebDAV.\n            </li>\n            \n         </ul>\n      </p>\n      \n      <p>\n         Section 6.4.1 of this specification details an alternate mechanism\n         for generating the \"node\" field of a UUID without using an IEEE 802\n         address, which alleviates the risks associated with exposure of IEEE\n         802 addresses by using an alternate source of uniqueness.\n         \n      </p>\n      \n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.18\">18</a>.&nbsp;\n         IANA Considerations\n      </h1>\n      \n      <p>\n         This document defines two namespaces, the namespace of property\n         names, and the namespace of WebDAV-specific XML elements used within\n         property values.\n         URIs are used for both names, for several reasons. Assignment of a\n         URI does not require a request to a central naming authority, and\n         hence allow WebDAV property names and XML elements to be quickly\n         defined by any WebDAV user or application.  URIs also provide a\n         unique address space, ensuring that the distributed users of WebDAV\n         will not have collisions among the property names and XML elements\n         they create.\n         \n      </p>\n      <p>\n         This specification defines a distinguished set of property names and\n         XML elements that are understood by all WebDAV applications.  The\n         property names and XML elements in this specification are all derived\n         from the base URI DAV: by adding a suffix to this URI, for example,\n         DAV:creationdate for the \"creationdate\" property.\n         \n      </p>\n      <p>\n         This specification also defines a URI scheme for the encoding of lock\n         tokens, the opaquelocktoken URI scheme described in section 6.4.\n         \n      </p>\n      <p>\n         To ensure correct interoperation based on this specification, IANA\n         must reserve the URI namespaces starting with \"DAV:\" and with\n         \"opaquelocktoken:\" for use by this specification, its revisions, and\n         related WebDAV specifications.\n         \n      </p>\n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.19\">19</a>.&nbsp;\n         Intellectual Property\n      </h1>\n      \n      <p>\n         The following notice is copied from RFC 2026 <a href=\"#RFC2026\" title=\"The Internet Standards Process -- Revision 3\">[RFC2026]</a>, section 10.4,\n         and describes the position of the IETF concerning intellectual\n         property claims made against this document.\n         \n      </p>\n      <p>\n         The IETF takes no position regarding the validity or scope of any\n         intellectual property or other rights that might be claimed to\n         pertain to the implementation or use other technology described in\n         this document or the extent to which any license under such rights\n         might or might not be available; neither does it represent that it\n         has made any effort to identify any such rights.  Information on the\n         IETF's procedures with respect to rights in standards-track and\n         standards-related documentation can be found in BCP-11.  Copies of\n         claims of rights made available for publication and any assurances of\n         licenses to be made available, or the result of an attempt made to\n         obtain a general license or permission for the use of such\n         proprietary rights by implementors or users of this specification can\n         be obtained from the IETF Secretariat.\n         \n      </p>\n      <p>\n         The IETF invites any interested party to bring to its attention any\n         copyrights, patents or patent applications, or other proprietary\n         rights which may cover technology that may be required to practice\n         this standard.  Please address the information to the IETF Executive\n         Director.\n         \n      </p>\n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.20\">20</a>.&nbsp;\n         Acknowledgements\n      </h1>\n      \n      <p>\n         A specification such as this thrives on piercing critical review and\n         withers from apathetic neglect.  The authors gratefully acknowledge\n         the contributions of the following people, whose insights were so\n         valuable at every stage of our work.\n         \n      </p>\n      <p>\n         Terry Allen, Harald Alvestrand, Jim Amsden, Becky Anderson, Alan\n         Babich, Sanford Barr, Dylan Barrell, Bernard Chester, Tim Berners-\n         Lee, Dan Connolly, Jim Cunningham, Ron Daniel, Jr., Jim Davis, Keith\n         Dawson, Mark Day, Brian Deen, Martin Duerst, David Durand, Lee\n         Farrell, Chuck Fay, Wesley Felter, Roy Fielding, Mark Fisher, Alan\n         Freier, George Florentine, Jim Gettys, Phill Hallam-Baker, Dennis\n         Hamilton, Steve Henning, Mead Himelstein, Alex Hopmann, Andre van der\n         Hoek, Ben Laurie, Paul Leach, Ora Lassila, Karen MacArthur, Steven\n         Martin, Larry Masinter, Michael Mealling, Keith Moore, Thomas Narten,\n         Henrik Nielsen, Kenji Ota, Bob Parker, Glenn Peterson, Jon Radoff,\n         Saveen Reddy, Henry Sanders, Christopher Seiwald, Judith Slein, Mike\n         Spreitzer, Einar Stefferud, Greg Stein, Ralph Swick, Kenji Takahashi,\n         Richard N. Taylor, Robert Thau, John Turner, Sankar Virdhagriswaran,\n         Fabio Vitali, Gregory Woodhouse, and Lauren Wood.\n         \n      </p>\n      <p>\n         Two from this list deserve special mention.  The contributions by\n         Larry Masinter have been invaluable, both in helping the formation of\n         the working group and in patiently coaching the authors along the\n         way.  In so many ways he has set high standards we have toiled to\n         meet. The contributions of Judith Slein in clarifying the\n         requirements, and in patiently reviewing draft after draft, both\n         improved this specification and expanded our minds on document\n         management.\n         \n      </p>\n      <p>\n         We would also like to thank John Turner for developing the XML DTD.\n         \n      </p>\n      \n      \n      \n      \n      \n      \n      \t\n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table><a name=\"rfc.references\">\n         <h1>References</h1></a><table width=\"99%\" border=\"0\">\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC1766\">[RFC1766]</a></b></td>\n            <td valign=\"top\">Alvestrand, H.T.,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc1766.txt\">Tags for the Identification of Languages</a>\",\n               \t\t\t\tRFC&nbsp;1766,\n               March&nbsp;1995.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2277\">[RFC2277]</a></b></td>\n            <td valign=\"top\"><a href=\"mailto:Harald.T.Alvestrand@uninett.no\" title=\"UNINETT\">Alvestrand, H.T.</a>,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2277.txt\">IETF Policy on Character Sets and Languages</a>\",\n               \t\t\t\tBCP&nbsp;18,\n               RFC&nbsp;2277,\n               January&nbsp;1998.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2119\">[RFC2119]</a></b></td>\n            <td valign=\"top\"><a href=\"mailto:-\" title=\"Harvard University\">Bradner, S.</a>,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2119.txt\">Key words for use in RFCs to Indicate Requirement Levels</a>\",\n               \t\t\t\tBCP&nbsp;14,\n               RFC&nbsp;2119,\n               March&nbsp;1997.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2396\">[RFC2396]</a></b></td>\n            <td valign=\"top\"><a href=\"mailto:timbl@w3.org\" title=\"World Wide Web Consortium\">Berners-Lee, T.</a>,&nbsp;<a href=\"mailto:fielding@ics.uci.edu\" title=\"Department of Information and Computer Science\">Fielding, R.T.</a> and <a href=\"mailto:masinter@parc.xerox.com\" title=\"Xerox PARC\">Masinter, L.</a>,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2396.txt\">Uniform Resource Identifiers (URI): Generic Syntax</a>\",\n               \t\t\t\tRFC&nbsp;2396,\n               August&nbsp;1998.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"REC-XML\">[REC-XML]</a></b></td>\n            <td valign=\"top\"><a href=\"http://www.w3c.org\">World Wide Web Consortium</a>,&nbsp;<a href=\"mailto:tbray@textuality.com\">Bray, T.</a>,&nbsp;<a href=\"mailto:jeanpa@microsoft.com\">Paoli, J.</a> and <a href=\"mailto:cmsmcq@uic.edu\">Sperberg-McQueen, C.M.</a>,&nbsp;\n               \t                \t\"<a href=\"http://www.w3.org/TR/1998/REC-xml-19980210\">Extensible Markup Language (XML) 1.0</a>\",\n               \t\t\t\tW3C&nbsp;XML,\n               February&nbsp;1998.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"REC-XML-NAMES\">[REC-XML-NAMES]</a></b></td>\n            <td valign=\"top\"><a href=\"http://www.w3c.org\">World Wide Web Consortium</a>,&nbsp;<a href=\"mailto:tbray@textuality.com\">Bray, T.</a>,&nbsp;<a href=\"mailto:dmh@corp.hp.com\">Hollander, D.</a> and <a href=\"mailto:andrewl@microsoft.com\">Layman, A.</a>,&nbsp;\n               \t                \t\"<a href=\"http://www.w3.org/TR/1999/REC-xml-names-19990114\">Namespaces in XML</a>\",\n               \t\t\t\tW3C&nbsp;XML-NAMES,\n               January&nbsp;1999.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2069\">[RFC2069]</a></b></td>\n            <td valign=\"top\">Franks, J.,&nbsp;Hallam-Baker, P.,&nbsp;Hostetler, J.,&nbsp;Leach, P.,&nbsp;Luotonen, A.,&nbsp;Sink, E. and Stewart, L.,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2069.txt\">An Extension to HTTP : Digest Access Authentication</a>\",\n               \t\t\t\tRFC&nbsp;2069,\n               January&nbsp;1997.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2068\">[RFC2068]</a></b></td>\n            <td valign=\"top\">Fielding, R.,&nbsp;Gettys, J.,&nbsp;Mogul, J.,&nbsp;Frystyk, H. and Berners-Lee, T.,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2068.txt\">Hypertext Transfer Protocol -- HTTP/1.1</a>\",\n               \t\t\t\tRFC&nbsp;2068,\n               January&nbsp;1997.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"ISO-639\">[ISO-639]</a></b></td>\n            <td valign=\"top\"><a href=\"http://www.iso.ch\">International Organization for Standardization</a>,&nbsp;\n               \t\"ISO 639:1988. Code for the representation of names\n               of languages.\",\n               ???&nbsp;1988.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"ISO-8601\">[ISO-8601]</a></b></td>\n            <td valign=\"top\"><a href=\"http://www.iso.ch\">International Organization for Standardization</a>,&nbsp;\n               \t\"ISO 8601, Data elements and interchange formats-Information\n               interchange--Representation of dates and times\",\n               June&nbsp;1988.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"ISO-11578\">[ISO-11578]</a></b></td>\n            <td valign=\"top\"><a href=\"http://www.iso.ch\">International Organization for Standardization</a>,&nbsp;\n               \t\"ISO/IEC 11578:1996. Information technology - Open\n               Systems Interconnection - Remote Procedure Call\n               (RPC)\",\n               ???&nbsp;1996.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2141\">[RFC2141]</a></b></td>\n            <td valign=\"top\"><a href=\"mailto:jayhawk@ds.internic.net\" title=\"AT&amp;T\">Moats, R.</a>,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2141.txt\">URN Syntax</a>\",\n               \t\t\t\tRFC&nbsp;2141,\n               May&nbsp;1997.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"UTF-8\">[UTF-8]</a></b></td>\n            <td valign=\"top\">Yergeau, F.,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2279.txt\">UTF-8, a transformation format of ISO 10646</a>\",\n               \t\t\t\tRFC&nbsp;2279,\n               January&nbsp;1998.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2026\">[RFC2026]</a></b></td>\n            <td valign=\"top\">Bradner, S.,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2026.txt\">The Internet Standards Process -- Revision 3</a>\",\n               \t\t\t\tBCP&nbsp;9,\n               RFC&nbsp;2026,\n               October&nbsp;1996.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC1807\">[RFC1807]</a></b></td>\n            <td valign=\"top\">Lasher, R. and Cohen, D.,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc1807.txt\">A Format for Bibliographic Records</a>\",\n               \t\t\t\tRFC&nbsp;1807,\n               June&nbsp;1995.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"WF\">[WF]</a></b></td>\n            <td valign=\"top\"><a href=\"mailto:lagoze@cs.cornell.edu\" title=\"Digital Library Research Group, Cornell University\">Lagoze, C.</a>,&nbsp;\n               \t                \t\"<a href=\"http://www.dlib.org/dlib/july96/lagoze/07lagoze.html\">The Warwick Framework: A Container Architecture for Diverse Sets of Metadata</a>\",\n               \t\t\t\tJuly&nbsp;1996.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"USMARC\">[USMARC]</a></b></td>\n            <td valign=\"top\">Network Development and MARC Standards, Office, Washington DC:\n               Cataloging Distribution Service, Library of Congress.,&nbsp;\n               \t\"USMARC Format for Bibliographic Data\",\n               ???&nbsp;1994.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"REC-PICS\">[REC-PICS]</a></b></td>\n            <td valign=\"top\"><a href=\"mailto:jmiller@w3.org\" title=\"World Wide Web Consortium\">Miller, J.</a>,&nbsp;<a href=\"mailto:timk@spyglass.com\">Krauskopf, T.</a>,&nbsp;<a href=\"mailto:presnick@research.att.com\">Resnick, P.</a> and <a href=\"mailto:treese@OpenMarket.com\">Treese, W.</a>,&nbsp;\n               \t                \t\"<a href=\"http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html\">PICS Label Distribution Label Syntax and Communication Protocols, Version 1.1</a>\",\n               \t\t\t\tW3C&nbsp;REC-PICS,\n               October&nbsp;1996.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2291\">[RFC2291]</a></b></td>\n            <td valign=\"top\"><a href=\"mailto:slein@wrc.xerox.com\" title=\"Xerox Corporation\">Slein, J.</a>,&nbsp;<a href=\"mailto:fabio@cs.unibo.it\" title=\"Department of Computer Science\">Vitali, F.</a>,&nbsp;<a href=\"mailto:ejw@ics.uci.edu\" title=\"Department of Information and Computer Science\">Whitehead, E.J.</a> and <a href=\"mailto:dgd@cs.bu.edu\" title=\"Department of Computer Science\">Durand, D.G.</a>,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2291.txt\">Requirements for a Distributed Authoring and Versioning Protocol for the World Wide Web</a>\",\n               \t\t\t\tRFC&nbsp;2291,\n               February&nbsp;1998.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2413\">[RFC2413]</a></b></td>\n            <td valign=\"top\"><a href=\"mailto:weibel@oclc.org\" title=\"OCLC Online Computer Library Center, Inc., Office of Research\">Weibel, S.L.</a>,&nbsp;<a href=\"mailto:jak@ckm.ucsf.edu\" title=\"University of California, San Francisco, Center for Knowledge Management\">Kunze, J.A.</a>,&nbsp;<a href=\"mailto:lagoze@cs.cornell.edu\" title=\"Cornell University, University Library and Department of Computer Science\">Lagoze, C.</a> and <a href=\"mailto:misha.wolf@reuters.com\" title=\"Reuters Limited\">Wolf, M.</a>,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2413.txt\">Dublin Core Metadata for Resource Discovery</a>\",\n               \t\t\t\tRFC&nbsp;2413,\n               September&nbsp;1998.\n               \t\n            </td>\n         </tr>\n         <tr>\n            <td valign=\"top\"><b><a name=\"RFC2376\">[RFC2376]</a></b></td>\n            <td valign=\"top\"><a href=\"mailto:ejw@ics.uci.edu\" title=\"Dept. of Information and Computer Science\">Whitehead, E.J.</a> and <a href=\"mailto:murata@fxis.fujixerox.co.jp\" title=\"Fuji Xerox Information Systems,\">Makoto, M.</a>,&nbsp;\n               \t                \t\"<a href=\"http://info.internet.isi.edu/in-notes/rfc/files/rfc2376.txt\">XML Media Types</a>\",\n               \t\t\t\tRFC&nbsp;2376,\n               July&nbsp;1998.\n               \t\n            </td>\n         </tr>\n      </table>\n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table><a name=\"rfc.authors\">\n         <h1>Author's Addresses</h1></a><table width=\"99%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n         <tr>\n            <td>&nbsp;</td>\n            <td>Y. Y. Goland</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Microsoft Corporation</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>One Microsoft Way<br></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Redmond, WA 98052-6399</td>\n         </tr>\n         <tr>\n            <td align=\"right\"><b>EMail:&nbsp;</b></td>\n            <td><a href=\"mailto:yarong@microsoft.com\">yarong@microsoft.com</a></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>E. J. Whitehead, Jr.</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Dept. Of Information and Computer Science,\n               \t   University of California, Irvine\n            </td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td><br></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Irvine, CA 92697-3425</td>\n         </tr>\n         <tr>\n            <td align=\"right\"><b>EMail:&nbsp;</b></td>\n            <td><a href=\"mailto:ejw@ics.uci.edu\">ejw@ics.uci.edu</a></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>A. Faizi</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Netscape</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>685 East Middlefield Road<br></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Mountain View, CA 94043</td>\n         </tr>\n         <tr>\n            <td align=\"right\"><b>EMail:&nbsp;</b></td>\n            <td><a href=\"mailto:asad@netscape.com\">asad@netscape.com</a></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>S. R. Carter</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Novell</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>1555 N. Technology Way<br>M/S ORM F111<br></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Orem, UT 84097-2399</td>\n         </tr>\n         <tr>\n            <td align=\"right\"><b>EMail:&nbsp;</b></td>\n            <td><a href=\"mailto:srcarter@novell.com\">srcarter@novell.com</a></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>D. Jensen</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Novell</td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>1555 N. Technology Way<br>M/S ORM F111<br></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n            <td>Orem, UT 84097-2399</td>\n         </tr>\n         <tr>\n            <td align=\"right\"><b>EMail:&nbsp;</b></td>\n            <td><a href=\"mailto:dcjensen@novell.com\">dcjensen@novell.com</a></td>\n         </tr>\n         <tr>\n            <td>&nbsp;</td>\n         </tr>\n      </table>\n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.A\">A</a>.&nbsp;\n         WebDAV Document Type Definition\n      </h1>\n      \n      <p>\n         This section provides a document type definition, following the rules\n         in <a href=\"#REC-XML\" title=\"Extensible Markup Language (XML) 1.0\">[REC-XML]</a>, for the XML elements used in the protocol stream and in\n         the values of properties. It collects the element definitions given\n         in sections 12 and 13.\n         \n      </p>\n      <pre>\n   &lt;!DOCTYPE webdav-1.0 [\n\n   &lt;!--============ XML Elements from Section 12 ==================--&gt;\n\n   &lt;!ELEMENT activelock (lockscope, locktype, depth, owner?, timeout?,\n   locktoken?) &gt;\n\n   &lt;!ELEMENT lockentry (lockscope, locktype) &gt;\n   &lt;!ELEMENT lockinfo (lockscope, locktype, owner?) &gt;\n\n   &lt;!ELEMENT locktype (write) &gt;\n   &lt;!ELEMENT write EMPTY &gt;\n\n   &lt;!ELEMENT lockscope (exclusive | shared) &gt;\n   &lt;!ELEMENT exclusive EMPTY &gt;\n   &lt;!ELEMENT shared EMPTY &gt;\n\n   &lt;!ELEMENT depth (#PCDATA) &gt;\n\n   &lt;!ELEMENT owner ANY &gt;\n\n   &lt;!ELEMENT timeout (#PCDATA) &gt;\n\n   &lt;!ELEMENT locktoken (href+) &gt;\n\n   &lt;!ELEMENT href (#PCDATA) &gt;\n\n   &lt;!ELEMENT link (src+, dst+) &gt;\n   &lt;!ELEMENT dst (#PCDATA) &gt;\n   &lt;!ELEMENT src (#PCDATA) &gt;\n\n   &lt;!ELEMENT multistatus (response+, responsedescription?) &gt;\n\n   &lt;!ELEMENT response (href, ((href*, status)|(propstat+)),\n   responsedescription?) &gt;\n   &lt;!ELEMENT status (#PCDATA) &gt;\n   &lt;!ELEMENT propstat (prop, status, responsedescription?) &gt;\n   &lt;!ELEMENT responsedescription (#PCDATA) &gt;\n\n   &lt;!ELEMENT prop ANY &gt;\n\n   &lt;!ELEMENT propertybehavior (omit | keepalive) &gt;\n   &lt;!ELEMENT omit EMPTY &gt;\n\n   &lt;!ELEMENT keepalive (#PCDATA | href+) &gt;\n\n   &lt;!ELEMENT propertyupdate (remove | set)+ &gt;\n   &lt;!ELEMENT remove (prop) &gt;\n   &lt;!ELEMENT set (prop) &gt;\n\n   &lt;!ELEMENT propfind (allprop | propname | prop) &gt;\n   &lt;!ELEMENT allprop EMPTY &gt;\n   &lt;!ELEMENT propname EMPTY &gt;\n\n   &lt;!ELEMENT collection EMPTY &gt;\n\n   &lt;!--=========== Property Elements from Section 13 ===============--&gt;\n   &lt;!ELEMENT creationdate (#PCDATA) &gt;\n   &lt;!ELEMENT displayname (#PCDATA) &gt;\n   &lt;!ELEMENT getcontentlanguage (#PCDATA) &gt;\n   &lt;!ELEMENT getcontentlength (#PCDATA) &gt;\n   &lt;!ELEMENT getcontenttype (#PCDATA) &gt;\n   &lt;!ELEMENT getetag (#PCDATA) &gt;\n   &lt;!ELEMENT getlastmodified (#PCDATA) &gt;\n   &lt;!ELEMENT lockdiscovery (activelock)* &gt;\n   &lt;!ELEMENT resourcetype ANY &gt;\n   &lt;!ELEMENT source (link)* &gt;\n   &lt;!ELEMENT supportedlock (lockentry)* &gt;\n   ]&gt;\n</pre>\n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.B\">B</a>.&nbsp;\n         ISO 8601 Date and Time Profile\n      </h1>\n      \n      <p>\n         The creationdate property specifies the use of the ISO 8601 date\n         format <a href=\"#ISO-8601\" title=\"ISO 8601, Data elements and interchange formats-Information interchange--Representation of dates and times\">[ISO-8601]</a>.  This section defines a profile of the ISO 8601\n         date format for use with this specification.  This profile is quoted\n         from an Internet-Draft by Chris Newman, and is mentioned here to\n         properly attribute his work.\n         \n      </p>\n      <pre>\n   date-time       = full-date \"T\" full-time\n\n   full-date       = date-fullyear \"-\" date-month \"-\" date-mday\n   full-time       = partial-time time-offset\n\n   date-fullyear   = 4DIGIT\n   date-month      = 2DIGIT  ; 01-12\n   date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n   month/year\n   time-hour       = 2DIGIT  ; 00-23\n   time-minute     = 2DIGIT  ; 00-59\n   time-second     = 2DIGIT  ; 00-59, 00-60 based on leap second rules\n   time-secfrac    = \".\" 1*DIGIT\n   time-numoffset  = (\"+\" / \"-\") time-hour \":\" time-minute\n   time-offset     = \"Z\" / time-numoffset\n\n   partial-time    = time-hour \":\" time-minute \":\" time-second\n                    [time-secfrac]\n</pre>\n      <p>\n         Numeric offsets are calculated as local time minus UTC (Coordinated\n         Universal Time).  So the equivalent time in UTC can be determined by\n         subtracting the offset from the local time.  For example, 18:50:00-\n         04:00 is the same time as 22:58:00Z.\n         \n      </p>\n      <p>\n         If the time in UTC is known, but the offset to local time is unknown,\n         this can be represented with an offset of \"-00:00\".  This differs\n         from an offset of \"Z\" which implies that UTC is the preferred\n         reference point for the specified time.\n         \n      </p>\n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table>\n      <h1><a name=\"rfc.section.C\">C</a>.&nbsp;\n         Notes on Processing XML Elements\n      </h1>\n      \n      \n      <h2><a name=\"rfc.section.C.1\">C.1</a>.&nbsp;\n         Notes on Empty XML Elements\n      </h2>\n      \n      <p>\n         XML supports two mechanisms for indicating that an XML element does\n         not have any content.  The first is to declare an XML element of the\n         form &lt;A&gt;&lt;/A&gt;.  The second is to declare an XML element of the form\n         &lt;A/&gt;.  The two XML elements are semantically identical.\n         \n      </p>\n      <p>\n         It is a violation of the XML specification to use the &lt;A&gt;&lt;/A&gt; form if\n         the associated DTD declares the element to be EMPTY (e.g., &lt;!ELEMENT\n         A EMPTY&gt;).  If such a statement is included, then the empty element\n         format, &lt;A/&gt; must be used.  If the element is not declared to be\n         EMPTY, then either form &lt;A&gt;&lt;/A&gt; or &lt;A/&gt; may be used for empty\n         elements.\n         \n      </p>\n      \n      \n      \n      <h2><a name=\"rfc.section.C.2\">C.2</a>.&nbsp;\n         Notes on Illegal XML Processing\n      </h2>\n      \n      <p>\n         XML is a flexible data format that makes it easy to submit data that\n         appears legal but in fact is not.  The philosophy of \"Be flexible in\n         what you accept and strict in what you send\" still applies, but it\n         must not be applied inappropriately.  XML is extremely flexible in\n         dealing with issues of white space, element ordering, inserting new\n         elements, etc.  This flexibility does not require extension,\n         especially not in the area of the meaning of elements.\n         \n      </p>\n      <p>\n         There is no kindness in accepting illegal combinations of XML\n         elements.  At best it will cause an unwanted result and at worst it\n         can cause real damage.\n         \n      </p>\n      \n      \n      <h3><a name=\"rfc.section.C.2.1\">C.2.1</a>.&nbsp;\n         Example - XML Syntax Error\n      </h3>\n      \n      <p>\n         The following request body for a PROPFIND method is illegal.\n         \n      </p>\n      <pre>\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:propfind xmlns:D=\"DAV:\"&gt;\n     &lt;D:allprop/&gt;\n     &lt;D:propname/&gt;\n   &lt;/D:propfind&gt;\n</pre>\n      <p>\n         The definition of the propfind element only allows for the allprop or\n         the propname element, not both.  Thus the above is an error and must\n         be responded to with a 400 (Bad Request).\n         \n      </p>\n      <p>\n         Imagine, however, that a server wanted to be \"kind\" and decided to\n         pick the allprop element as the true element and respond to it.  A\n         client running over a bandwidth limited line who intended to execute\n         a propname would be in for a big surprise if the server treated the\n         command as an allprop.\n         \n      </p>\n      <p>\n         Additionally, if a server were lenient and decided to reply to this\n         request, the results would vary randomly from server to server, with\n         some servers executing the allprop directive, and others executing\n         the propname directive. This reduces interoperability rather than\n         increasing it.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.C.2.2\">C.2.2</a>.&nbsp;\n         Example - Unknown XML Element\n      </h3>\n      \n      <p>\n         The previous example was illegal because it contained two elements\n         that were explicitly banned from appearing together in the propfind\n         element.  However, XML is an extensible language, so one can imagine\n         new elements being defined for use with propfind.  Below is the\n         request body of a PROPFIND and, like the previous example, must be\n         rejected with a 400 (Bad Request) by a server that does not\n         understand the expired-props element.\n         \n      </p>\n      <pre>\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:propfind xmlns:D=\"DAV:\"\n   xmlns:E=\"http://www.foo.bar/standards/props/\"&gt;\n     &lt;E:expired-props/&gt;\n   &lt;/D:propfind&gt;\n</pre>\n      <p>\n         To understand why a 400 (Bad Request) is returned let us look at the\n         request body as the server unfamiliar with expired-props sees it.\n         \n      </p>\n      <pre>\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:propfind xmlns:D=\"DAV:\"\n               xmlns:E=\"http://www.foo.bar/standards/props/\"&gt;\n   &lt;/D:propfind&gt;\n</pre>\n      <p>\n         As the server does not understand the expired-props element,\n         according to the WebDAV-specific XML processing rules specified in\n         section 14, it must ignore it.  Thus the server sees an empty\n         propfind, which by the definition of the propfind element is illegal.\n         \n      </p>\n      <p>\n         Please note that had the extension been additive it would not\n         necessarily have resulted in a 400 (Bad Request).  For example,\n         imagine the following request body for a PROPFIND:\n         \n      </p>\n      <pre>\n   &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n   &lt;D:propfind xmlns:D=\"DAV:\"\n               xmlns:E=\"http://www.foo.bar/standards/props/\"&gt;\n     &lt;D:propname/&gt;\n     &lt;E:leave-out&gt;*boss*&lt;/E:leave-out&gt;\n   &lt;/D:propfind&gt;\n</pre>\n      <p>\n         The previous example contains the fictitious element leave-out. Its\n         purpose is to prevent the return of any property whose name matches\n         the submitted pattern.  If the previous example were submitted to a\n         server unfamiliar with leave-out, the only result would be that the\n         leave-out element would be ignored and a propname would be executed.\n         \n      </p>\n      \n      \n      \n      \n      <h2><a name=\"rfc.section.C.3\">C.3</a>.&nbsp;\n         XML Namespaces for WebDAV\n      </h2>\n      \n      \n      <h3><a name=\"rfc.section.C.3.1\">C.3.1</a>.&nbsp;\n         Introduction\n      </h3>\n      \n      <p>\n         All DAV compliant systems MUST support the XML namespace extensions\n         as specified in <a href=\"#REC-XML-NAMES\" title=\"Namespaces in XML\">[REC-XML-NAMES]</a>.\n         \n      </p>\n      \n      \n      \n      <h3><a name=\"rfc.section.C.3.2\">C.3.2</a>.&nbsp;\n         Meaning of Qualified Names\n      </h3>\n      \n      <p>\n         [Note to the reader: This section does not appear in <a href=\"#REC-XML-NAMES\" title=\"Namespaces in XML\">[REC-XML-NAMES]</a>,\n         but is necessary to avoid ambiguity for WebDAV XML processors.]\n         \n      </p>\n      \n      <p>\n         WebDAV compliant XML processors MUST interpret a qualified name as a\n         URI constructed by appending the LocalPart to the namespace name URI.\n         \n      </p>\n      <pre>\n   Example\n\n   &lt;del:glider xmlns:del=\"http://www.del.jensen.org/\"&gt;\n     &lt;del:glidername&gt;\n          Johnny Updraft\n     &lt;/del:glidername&gt;\n     &lt;del:glideraccidents/&gt;\n   &lt;/del:glider&gt;\n</pre>\n      <p>\n         In this example, the qualified element name \"del:glider\" is\n         interpreted as the URL \"http://www.del.jensen.org/glider\".\n         \n      </p>\n      <pre>\n   &lt;bar:glider xmlns:del=\"http://www.del.jensen.org/\"&gt;\n     &lt;bar:glidername&gt;\n          Johnny Updraft\n     &lt;/bar:glidername&gt;\n     &lt;bar:glideraccidents/&gt;\n   &lt;/bar:glider&gt;\n</pre>\n      <p>\n         Even though this example is syntactically different from the previous\n         example, it is semantically identical.  Each instance of the\n         namespace name \"bar\" is replaced with \"http://www.del.jensen.org/\"\n         and then appended to the local name for each element tag.  The\n         resulting tag names in this example are exactly the same as for the\n         previous example.\n         \n      </p>\n      <pre>\n   &lt;foo:r xmlns:foo=\"http://www.del.jensen.org/glide\"&gt;\n     &lt;foo:rname&gt;\n          Johnny Updraft\n     &lt;/foo:rname&gt;\n     &lt;foo:raccidents/&gt;\n   &lt;/foo:r&gt;\n</pre>\n      <p>\n         This example is semantically identical to the two previous ones.\n         Each instance of the namespace name \"foo\" is replaced with\n         \"http://www.del.jensen.org/glide\" which is then appended to the local\n         name for each element tag, the resulting tag names are identical to\n         those in the previous examples.\n         \n      </p>\n      \n      \n      \n      <hr class=\"noprint\" size=\"1\" shade=\"0\">\n      <table class=\"noprint\" border=\"0\" cellpadding=\"0\" cellspacing=\"2\" width=\"30\" height=\"15\" align=\"right\">\n         <tr>\n            <td bgcolor=\"#990000\" align=\"center\" width=\"30\" height=\"15\"><a href=\"#rfc.toc\" CLASS=\"link2\"><b class=\"link2\">&nbsp;TOC&nbsp;</b></a></td>\n         </tr>\n      </table><a name=\"rfc.copyright\">\n         <h1>Full Copyright Statement</h1></a><p class=\"copyright\">    \n         Copyright (C) The Internet Society (1999). All Rights Reserved.\n         \n      </p>\n      <p class=\"copyright\">\n         This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise\n         explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without\n         restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative\n         works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references\n         to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards\n         in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to\n         translate it into languages other than English.\n         \n      </p>\n      <p class=\"copyright\">\n         The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.\n         \n      </p>\n      <p class=\"copyright\">\n         This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET\n         ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\n         OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR\n         PURPOSE.\n         \n      </p>\n      <h1>Acknowledgement</h1>\n      <p class=\"copyright\">Funding for the RFC editor function is currently provided by the Internet Society.</p>\n      \n   </body>\n</html>", "encoding": "ascii"}