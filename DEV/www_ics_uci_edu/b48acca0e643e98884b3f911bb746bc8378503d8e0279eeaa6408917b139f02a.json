{"url": "https://www.ics.uci.edu/~thornton/ics142/MidtermAnswers.html", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"course2.css\" type=\"text/css\" />\r\n\r\n<title>ICS 142 Winter 2004, Midterm Answer Sheet</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 142 Winter 2004 |\r\n<a href=\"index.html\">News</a> |\r\n<a href=\"CourseReference.html\">Course Reference</a> |\r\n<a href=\"Schedule.html\">Schedule</a> |\r\n<a href=\"LabManual\">Lab Manual</a> |\r\n<a href=\"news:ics.142\">ics.142 newsgroup</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 142 Winter 2004<br />\r\n   Midterm Answer Sheet</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Introduction</p>\r\n\r\n<p>There were three versions of the exam.  Though all three asked essentially the same questions, some minor changes were made to distinguish them from one another.  The answers for all three versions appear below; it should be evident from your exam sheet which answers are relevant for your version.</p>\r\n\r\n<p>If you're wondering about your score, have a look at the <a href=\"MidtermScores.html\">Midterm scores</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The answers</p>\r\n\r\n<p class=\"subtitle\">Problem 1</p>\r\n\r\n<p>Results on this problem were mixed, with an average score of 4.6 out of 8.  Many people lost a point on the first part, as they didn't answer the question that was asked.  Several others didn't write regular expressions, but instead wrote grammars or some other kind of notation that we couldn't unscramble.</p>\r\n\r\n<p><i>a)</i></p>\r\n\r\n<p>The answers here were:\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr><td>a+b+</td><td>x+y+</td><td>y+x+</td></tr>\r\n</table>\r\n\r\n<p>Other equivalent regular expressions, such as <b>aa*bb*</b> were accepted, as well.  The most common wrong answer was one of the form <b>ab+</b>, which was awarded half-credit.</p>\r\n\r\n<p><i>b)</i></p>\r\n\r\n<p>There are certainly multiple reasonable solutions to this problem (which mimicked a problem you faced on one of the lab assignments), but straightforward answers were:</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr>\r\n    <td>[A-Z] [a-z]* ($ [A-Z] [a-z]*)*</td>\r\n    <td>[A-Z] [a-z]* (- [A-z] [a-z]*)*</td>\r\n    <td>[a-z] [A-Z]* (^ [a-z] [A-Z]*)*</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>Other answers that were equivalent were accepted.  Of the three points possible, one was allocated to the first part (building one word) and two more were allocated to the second part (the subsequent words, separated by the appropriate character).</p>\r\n\r\n<p><i>c)</i></p>\r\n\r\n<p>Again, more than one answer was acceptable here.  Some students used JFlex-style shorthands; if we could decipher them (i.e. they were clear and <i>were not recursive!</i>), we still tried to award credit when we could.  This question was the same on all three versions, and one possible good answer was:</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>All Three Versions</td>\r\n  </tr>\r\n  <tr>\r\n    <td>(0 | [1-9] [0-9]*) (. (0 | [0-9]* [1-9]))?</td>\r\n  </tr>\r\n</table>\r\n\r\n<hr />\r\n\r\n<p class=\"subtitle\">Problem 2</p>\r\n\r\n<p>This problem asked for the output of a JFlex script, given a set of patterns with actions that called System.out.println.  It essentially tested whether you understood the greedy matching algorithm used by JFlex (i.e. one that always takes the longest possible match).  By and large, students did very well on this question, averaging 4.5 out of 6 points.</p>\r\n\r\n<p>Roughly speaking, one point was deducted for each kind of mistake found, such as matching substrings of a-e and 1-5 separately, not matching the longest one, etc.  Also, 1 point was deducted for an output format not matching the requirements, such as a long sequence of numbers (e.g. \"245341353\").</p>\r\n\r\n<p>The JFlex script was the same on the three versions, though the input strings were different.  The correct answers were:</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr>\r\n    <td>\r\n      2 abcd<br />\r\n      4 77<br />\r\n      5 cabc234<br />\r\n      3 Q<br />\r\n      4 7<br />\r\n      1 abc<br />\r\n      3 J<br />\r\n      5 3c2a1<br />\r\n      3 H\r\n    </td>\r\n    <td>\r\n      2 abcd<br />\r\n      4 00<br />\r\n      5 babc123<br />\r\n      3 Z<br />\r\n      4 0<br />\r\n      1 abc<br />\r\n      3 G<br />\r\n      5 5a3b4<br />\r\n      3 F\r\n    </td>\r\n    <td>\r\n      2 abcd<br />\r\n      4 99<br />\r\n      5 cbab234<br />\r\n      3 V<br />\r\n      4 9<br />\r\n      1 abc<br />\r\n      3 F<br />\r\n      5 4b2c3<br />\r\n      3 G\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n<hr />\r\n\r\n<p class=\"subtitle\">Problem 3</p>\r\n\r\n<p>By and large, students did pretty well on the first part and not well at all on the second part.  The average score overall on the problem was 4.5 out of 8.</p>\r\n\r\n<p><i>a)</i></p>\r\n\r\n<p>The three versions differed only in terms of the regular expression that appeared in part (a), though all three regular expressions were of a similar form, so I'll just show the answer for one of the versions (for which the regular expression was <b>a | (bc)*</b>).  Since the problem specifically asked you to use Thompson's construction, equivalent NFA's (i.e. NFA's that are different -- including DFA's! -- but accept the same language) were not accepted.</p>\r\n\r\n<p class=\"center\"><img src=\"MidtermAnswer3a.jpg\" alt=\"\" /></p>\r\n\r\n<p><i>b)</i></p>\r\n\r\n<p>This part of the problem was the same on all three versions.  Since the problem specifically asked you to use the subset construction to build the DFA, equivalent DFA's (i.e. DFA's that are different but accept the same language) were not accepted.  Naturally, NFA's were not accepted either.  State names were not considered relevant.</p>\r\n\r\n<p class=\"center\"><img src=\"MidtermAnswer3b.jpg\" alt=\"\" /></p>\r\n\r\n<p>It should be pointed out that, even though all three of this DFA's are accept states, it still doesn't accept all strings.  Strings such as <b>b</b> or <b>abab</b> are not accepted by it.</p>\r\n\r\n<hr />\r\n\r\n<p class=\"subtitle\">Problem 4</p>\r\n\r\n<p>Answers for this problem (which I graded myself) were all over the map.  The average score on it was 3.9 out of 8, with a substantial portion of that coming from part (a).  Part (b) was a disaster, but it was a great deal more difficult than I'd originally intended.</p>\r\n\r\n<p><i>a)</i></p>\r\n\r\n<p>This problem had a wide variety of answers, many of which were clearly not LL(1).  Many students tried a variety of transformations that don't make any sense, such as flip-flopping rules like <b>Y &rarr; Ybc</b> to <b>Y &rarr; bcY</b>.  More than one answer was considered correct, but it had to be an LL(1) grammar that accepted the same language.\r\n\r\n<p>The straightforward answer, which you could arrive at by performing the transformations we discussed in class on the original grammar, was:</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr>\r\n    <td>\r\n      X &rarr; Ya | Zbc<br />\r\n      Y &rarr; abaY' | cabaY'<br />\r\n      Y' &rarr; bcY' | &epsilon;<br/ >\r\n      Z &rarr; bZ'<br />\r\n      Z' &rarr; bc | c\r\n    </td>\r\n    <td>\r\n      A &rarr; Bx | Cyz<br />\r\n      B &rarr; xyxB' | zxyxB'<br />\r\n      B' &rarr; yzB' | &epsilon;<br/ >\r\n      C &rarr; yC'<br />\r\n      C' &rarr; yz | z\r\n    </td>\r\n    <td>\r\n      D &rarr; Er | Fst<br />\r\n      E &rarr; rsrE' | trsrE'<br />\r\n      E' &rarr; stE' | &epsilon;<br/ >\r\n      F &rarr; sF'<br />\r\n      F' &rarr; st | t\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n<p>Partial credit was given for transforming portions of the grammar correctly, even if the entire grammar was not LL(1).  Students were much more commonly able to transform Z &rarr; bbc | bc to Z &rarr; bZ' and Z' &rarr; bc | c than they were able to perform the left recursion elimination on Y correctly.</p>\r\n\r\n<p><i>b)</i></p>\r\n\r\n<p>This problem actually couldn't be solved using strictly the techniques shown in class.  For that reason, I accepted some answers that were arrived at by applying as many of these transformations as could be applied, even if the final grammar was not LL(1).  (Few students got this far, as it turned out, and the most common score on this part of the problem was 1 out of 4, awarded for attempting to perform some kind of transformation to the grammar.)  A few students applied some ingenuity, reverse engineering the grammar and building a new one.  After inspecting the behavior of the grammar, you can discover that the grammar describes a language that can be described by the regular expression <b>ab (bb | cb)*</b>, from which you can build a grammar.</p>\r\n\r\n<p>The incorrect but acceptable answer looked like this:</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr>\r\n    <td>\r\n      X &rarr; Yb<br />\r\n      Y &rarr; aY'<br />\r\n      Y' &rarr; &epsilon; | bY''<br />\r\n      Y'' &rarr; bY' | cY'\r\n    </td>\r\n    <td>\r\n      A &rarr; By<br />\r\n      B &rarr; xB'<br />\r\n      B' &rarr; &epsilon; | yB''<br />\r\n      B'' &rarr; yB' | zB'\r\n    </td>\r\n    <td>\r\n      D &rarr; Es<br />\r\n      E &rarr; rE'<br />\r\n      E' &rarr; &epsilon; | sE''<br />\r\n      E'' &rarr; sE' | tE'\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n<p>(These grammars are not LL(1) because, for example, starting with this derivation: X &rArr; Yb &rArr; aY'b &rArr; ...it is not clear now, with the next character of input being a <b>b</b>, whether we should expand by Y' &rarr; bY'', or by Y' &rarr; &epsilon;.)</p>\r\n\r\n<p>Correct answers looked like one of these grammars (or something very much like them):</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr>\r\n    <td>\r\n      X &rarr; abY<br />\r\n      Y &rarr; bbY | cbY | &epsilon;<br />\r\n      <br />\r\n      or<br />\r\n      <br />\r\n      X &rarr; aY<br />\r\n      Y &rarr; bY'<br />\r\n      Y' &rarr; &epsilon; | bbY' | cbY'\r\n    </td>\r\n    <td>\r\n      A &rarr; xyB<br />\r\n      B &rarr; yyB | zyB | &epsilon;<br />\r\n      <br />\r\n      or<br />\r\n      <br />\r\n      A &rarr; xB<br />\r\n      B &rarr; yB'<br />\r\n      B' &rarr; &epsilon; | yyB' | zyB'\r\n    </td>\r\n    <td>\r\n      D &rarr; rsE<br />\r\n      E &rarr; ssE | tsE | &epsilon;<br />\r\n      <br />\r\n      or<br />\r\n      <br />\r\n      D &rarr; rE<br />\r\n      E &rarr; sE'<br />\r\n      E' &rarr; &epsilon; | ssB' | tsB'\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n<p>The answers are inspired by two different regular expressions: <b>ab (bb | cb)*</b> and <b>a (bb | bc)* b</b>.</p>\r\n\r\n<hr />\r\n\r\n<p class=\"subtitle\">Problem 5</p>\r\n\r\n<p>After the homework assignment I gave on this topic, students seem to have gotten the point about FIRST and FOLLOW sets.  The average score on this problem was 7.8 out of 9.</p>\r\n\r\n<p><i>a)</i></p>\r\n\r\n<p>The first five sets had only one element each; they were worth a total of one point.  The others were worth one point each.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr>\r\n    <td>\r\n      FIRST(&epsilon;) = { &epsilon; }<br />\r\n      FIRST(a) = { a }<br />\r\n      FIRST(b) = { b }<br />\r\n      FIRST(c) = { c }<br />\r\n      FIRST(d) = { d }<br />\r\n      FIRST(S) = { b, c, d, a, &epsilon; }<br />\r\n      FIRST(X) = { b, c }<br />\r\n      FIRST(Y) = { d, a, &epsilon; }\r\n    </td>\r\n    <td>\r\n      FIRST(&epsilon;) = { &epsilon; }<br />\r\n      FIRST(x) = { x }<br />\r\n      FIRST(y) = { y }<br />\r\n      FIRST(z) = { z }<br />\r\n      FIRST(w) = { w }<br />\r\n      FIRST(S) = { y, z, w, x, &epsilon; }<br />\r\n      FIRST(A) = { y, z }<br />\r\n      FIRST(B) = { w, x, &epsilon; }\r\n    </td>\r\n    <td>\r\n      FIRST(&epsilon;) = { &epsilon; }<br />\r\n      FIRST(r) = { r }<br />\r\n      FIRST(s) = { s }<br />\r\n      FIRST(t) = { t }<br />\r\n      FIRST(v) = { v }<br />\r\n      FIRST(S) = { s, t, v, r, &epsilon; }<br />\r\n      FIRST(D) = { s, t }<br />\r\n      FIRST(E) = { v, r, &epsilon; }\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n<p><i>b)</i></p>\r\n\r\n<p>Results were strong here, too, with some of the most common mistakes being including &epsilon; and not including eof.  These were worth one point each.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr>\r\n    <td>\r\n      FOLLOW(S) = { eof }<br />\r\n      FOLLOW(X) = { eof, d, a }<br />\r\n      FOLLOW(Y) = { eof, c }\r\n    </td>\r\n    <td>\r\n      FOLLOW(S) = { eof }<br />\r\n      FOLLOW(A) = { eof, w, x }<br />\r\n      FOLLOW(B) = { eof, z }\r\n    </td>\r\n    <td>\r\n      FOLLOW(S) = { eof }<br />\r\n      FOLLOW(D) = { eof, v, r }<br />\r\n      FOLLOW(E) = { eof, t }\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n<p><i>c)</i></p>\r\n\r\n<p>This was worth two points, all or nothing.  The answer was <b>Yes!!!</b> (though the exclamation marks were not required :) ).</p>\r\n\r\n<hr />\r\n\r\n<p class=\"subtitle\">Problem 6</p>\r\n\r\n<p>Students didn't do particularly well on this question, with the average score being 4.4 out of 9.  As with most other questions on the exam, a wide variety of answers were given.</p>\r\n\r\n<p>For all three parts of the problem, the following rubric was used for grading (and marks were made accordingly with the notation shown in parentheses):</p>\r\n\r\n<ul>\r\n  <li>-0.25 points for each wrong or missing lookahead (WL / NL)</li>\r\n  <li>-1 point for not computing the closure of a set (NC)</li>\r\n  <li>-0.5 points for missing an item in a set (MI)</li>\r\n  <li>-2 points for a wrong set of LR(1) items in part b (TWS, WS)</li>\r\n  <li>-1 point for missing the first item in goto in part b (MFI)</li>\r\n  <li>-2 points for missing first set of LR(1) items in part b (N1S)</li>\r\n  <li>-2 points for missing second set of LR(1) items in part b (N2S)</li>\r\n  <li>-2 points for missing third set of LR(1) items in part b (N3S)</li>\r\n  <li>If many more items than needed were listed, no credit was given.</li>\r\n</ul>\r\n\r\n<p><i>a)</i></p>\r\n\r\n<p>The initial state of the parser consisted of six LR(1) items.  Each was worth a half-point.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr>\r\n    <td>\r\n      { [Goal &rarr; &bull; S, eof], <br />\r\n      [S &rarr; &bull; YY, eof], <br />\r\n      [Y &rarr; &bull; fY, f], <br />\r\n      [Y &rarr; &bull; fY, g], <br />\r\n      [Y &rarr; &bull; g, f], <br />\r\n      [Y &rarr; &bull; g, g] }\r\n    </td>\r\n    <td>\r\n      { [Goal &rarr; &bull; S, eof], <br />\r\n      [S &rarr; &bull; BB, eof], <br />\r\n      [B &rarr; &bull; eB, e], <br />\r\n      [B &rarr; &bull; eB, f], <br />\r\n      [B &rarr; &bull; f, e], <br />\r\n      [B &rarr; &bull; f, f] }\r\n    </td>\r\n    <td>\r\n      { [Goal &rarr; &bull; S, eof], <br />\r\n      [S &rarr; &bull; EE, eof], <br />\r\n      [E &rarr; &bull; gE, g], <br />\r\n      [E &rarr; &bull; gE, h], <br />\r\n      [E &rarr; &bull; h, g], <br />\r\n      [E &rarr; &bull; h, h] }\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n<p><i>b)</i></p>\r\n\r\n<p>If we apply goto to S<sub>z</sub>, we can reach three distinct parse states.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\"><td>Version A</td><td>Version B</td><td>Version C</td></tr>\r\n  <tr>\r\n    <td>\r\n      goto(S<sub>z</sub>, Y) = { [S &rarr; YY &bull;, eof] }<br />\r\n      <br />\r\n      goto(S<sub>z</sub>, f) = { [Y &rarr; f &bull; Y, eof],<br />\r\n      [Y &rarr; &bull; fY, eof], [Y &rarr; &bull; g, eof] }<br />\r\n      <br />\r\n      goto(S<sub>z</sub>, g) = { [Y &rarr; g &bull;, eof] }\r\n    </td>\r\n    <td>\r\n      goto(S<sub>z</sub>, B) = { [S &rarr; BB &bull;, eof] }<br />\r\n      <br />\r\n      goto(S<sub>z</sub>, e) = { [B &rarr; e &bull; B, eof],<br />\r\n      [B &rarr; &bull; eB, eof], [B &rarr; &bull; f, eof] }<br />\r\n      <br />\r\n      goto(S<sub>z</sub>, f) = { [B &rarr; f &bull;, eof] }\r\n    </td>\r\n    <td>\r\n      goto(S<sub>z</sub>, E) = { [S &rarr; EE &bull;, eof] }<br />\r\n      <br />\r\n      goto(S<sub>z</sub>, g) = { [E &rarr; g &bull; E, eof],<br />\r\n      [E &rarr; &bull; gE, eof], [E &rarr; &bull; h, eof] }<br />\r\n      <br />\r\n      goto(S<sub>z</sub>, h) = { [E &rarr; h &bull;, eof] }\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n<p class=\"subtitle\">Problem 7</p>\r\n\r\n<p>This problem was thrown out, as it had at least one mistake on every version, and at least one more mistake on at least one of the versions.  Ugh!</p>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}