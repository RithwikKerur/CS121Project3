{"url": "https://www.ics.uci.edu/~aburtsev/250P/2019winter/hw/hw2.html", "content": "<HTML>\n<HEAD>\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\">\n<TITLE>250P Computer Systems Architecture</TITLE>\n<LINK HREF=\"./css/main.css\" TYPE=\"text/css\" REL=\"stylesheet\">\n<META NAME=\"Description\" CONTENT=\"cs250P Computer Systems Architecture (Anton Burtsev)\">\n<META NAME=\"Keywords\" CONTENT=\"Anton Burtsev, Burtsev, Anton, cs250P\">\n<SCRIPT SRC=\"./scripts/image_switcher.js\" LANGUAGE=\"JavaScript\"></SCRIPT>\n</HEAD>\n\n<BODY BGCOLOR=\"#FFFFFF\" LEFTMARGIN=\"0\" TOPMARGIN=\"0\" MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\">\n\t<TABLE  ID=\"text\" ALIGN=\"CENTER\" WIDTH=\"600\" BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"0\">\n\t<TR>\n\t\t<TD ALIGN=\"LEFT\" BGCOLOR=\"#FFFFFF\"><!-- top margin --> \n\t\t\t<IMG SRC=\"./images/spacer.gif\" WIDTH=\"100%\" HEIGHT=\"15\" ALT=\"\" BORDER=\"0\"/>\n\t\t</TD>\n\t</TR>\n\t<TR>\n\t<TD>\n\t\t<DIV ID=\"tech_nav\">\n\t\t\t<A HREF=\"../index.html\">Home</A>\n\t\t\t<IMG SRC=\"./images/spacer.gif\" WIDTH=\"100%\" HEIGHT=\"30\" ALT=\"\" BORDER=\"0\"/>\n\t\t</DIV>\n\t</TD>\n\t</TR>\t\n\t<TR>\n\t<TD COLSPAN=\"4\" ALIGN=\"LEFT\" BGCOLOR=\"#FFFFFF\">\n\n\n\n\t\t<P>\n\n<h1>HW2: RISC instruction set, pipelining</h1>\n\n<p>\n  <b>Note:</b>\n  Make reasonable assumptions where necessary and clearly state them.\n  Feel free to discuss problems with classmates, but the only written material\n  that you may consult while writing your solutions are the textbook, lecture\n  notes, and lecture slides.\n\n\n<h3>Problem 1: RISC Instruction set</h3>\n\nTake a look at the RISC instruction set in the book (Section A.9). Write a\nsimple RISC assembly program that finds a sum of numbers from 1 to N. \n\n\n<h3>Problem 2: Basic pipelining</h3>\n\nAn unpipelined processor takes 3 ns to work on one instruction. It then takes\n0.2 ns to latch its results into latches. I was able to convert the circuits\ninto 5 equal sequential pipeline stages. Answer the following, assuming that\nthere are no stalls in the pipeline.\n\n<p> <ul>\n\n<li>What are the cycle times in the two processors?\n\n<li>What are the clock speeds?\n\n<li>What are the IPCs?\n\n<li>How long does it take to finish one instr?\n\n<li>What is the speedup from pipelining?\n\n<li> If I was able to build a magical 1000-stage pipeline, where each stage\ntook an equal amount of time, what speedup would I get? \n\n</ul>\n\n\n<h3> Problem 3: Data Dependences</h3>\n\n  Consider a 32-bit in-order pipeline that has the following stages.  Note\nthe many differences from the examples in class: a stage that converts CISC\ninstructions to micro-ops, one stage to do register reads, one stage to do\nregister writes, three\nstages to access the data memory, and 4 stages for the FP-ALU.  For the\nquestions below, assume that each CISC instruction is simple and is\nconverted to a single micro-op.\n\n<p>\n<table cellpadding=\"2\" cellspacing=\"2\" border=\"1\" width=\"90%\">\n  <tbody>\n    <tr align=\"center\">\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Fetch </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Convert to micro-ops </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Decode </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Regread </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> IntALU </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Regwrite </font></td>\n    </tr>\n\n    <tr align=\"center\">\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> IntALU </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Datamem1 </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Datamem2 </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Datamem3 </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Regwrite </font></td>\n    </tr>\n\n    <tr align=\"center\">\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> FPALU1 </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> FPALU2 </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> FPALU3 </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> FPALU4 </font> </td>\n      <td align=\"center\" width=\"10%\"> <font color=\"blue\"> Regwrite </font></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>\nAfter instruction fetch, the instruction goes through the micro-op conversion\nstage, a Decode stage where dependences are analyzed, and\na Regread stage where\ninput operands are read from the register file.\nAfter this, an instruction takes one of three possible paths.\nInt-adds go through the stages labeled \"IntALU\" and \"Regwrite\".\nLoads/stores go through the stages labeled\n\"IntALU\", \"Datamem1\", \"Datamem2\", \"Datamem3\", and \"Regwrite\". \nFP-adds go through\nthe stages labeled \"FPALU1\", \"FPALU2\", \"FPALU3\", \"FPALU4\", and \"Regwrite\".\nAssume that the register file has an infinite number of write\nports so stalls are never introduced because of structural hazards, also assume \nthat register read and register write take half a cycle same as in our simple 5-stage pipeline \nthat we discussed in class.\nHow many stall cycles are introduced between the following pairs of\nsuccessive instructions (i) for a processor with no register bypassing and\n(ii) for a processor with full bypassing?\n<ol>\n<li> Int-add, followed by a dependent Int-add\n<li> FP-add, followed by a dependent FP-add\n<li> Load, providing the address for a store\n<li> Load, providing the data for a store\n<li> FP-add, providing the data for a store\n</ol>\n<p>\n\n\n\n<p>Submit your solution through Gradescope <a\nhref=\"https://www.gradescope.com/courses/39177\">HW2</a> (as a PDF file (please\nmark which parts of the PDF are used for each question (this can be done\nthrough Gradescope)). \n\n\n\n\t</TD>\t\t\t\n\t</TR>\n\t<TR>\n\t\t<TD ALIGN=\"LEFT\" BGCOLOR=\"#FFFFFF\"><!-- top margin --> \n\t\t\t<IMG SRC=\"./images/spacer.gif\" WIDTH=\"100%\" HEIGHT=\"15\" ALT=\"\" BORDER=\"0\"/>\n\t\t</TD>\n\t</TR>\n\t<TR>\n\t<TD COLSPAN=\"4\">\n\t\t<DIV ID=\"tech\">Updated: February, 2019</DIV>\n\t</TD>\n\t</TR>\n\t</TABLE>\n</BODY>\n</HTML>\n\n", "encoding": "ascii"}