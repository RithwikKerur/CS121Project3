{"url": "https://www.ics.uci.edu/~theory/269/190531a.html", "content": "<!DOCTYPE html>\n<html>\n<head>\n<title>Theory Seminar, May 31, 2019</title>\n<link rel=\"stylesheet\" href=\"../stylesheet.css\" type=\"text/css\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"http://www.ics.uci.edu/~theory/logo/CATOC2.jpg\"\nalt=\"Center for Algorithms and Theory of Computation\"></a>\n<h2><a href=\"/~theory/269/\">CS 269S, Spring 2019: Theory Seminar</a><br>\nBren Hall, Room 1423, 1pm\n</h2>\n<hr />\n<h2>May 31, 2019:</h2>\n<h1>\nPolynomial Time Approximation Schemes for Euclidean Traveling Salesman and other Geometric Problems\n</h1>\n<h2>\nJames Liu\n</h2>\n\n<p>\nWe present a polynomial time approximation scheme for Euclidean TSP in fixed dimensions. For every fixed c > 1 and\ngiven any n nodes in R2 , a randomized version of the scheme finds a (1 + 1/c)-approximation to the optimum traveling\nsalesman tour in O(n(log n) O(c) ) time. When the nodes are in Rd, the running time increases to O(n(log n) (O(\ndc))d1 ). For every fixed c, d the running time is n  poly(log n), i.e., nearly linear in n. The algorithm can be\nderandomized, but this increases the running time by a factor O(n d). The previous best approximation algorithm for\nthe problem (due to Christofides) achieves a 3/2-approximation in polynomial time. We also give similar approximation\nschemes for some other NP-hard Euclidean problems: Minimum Steiner Tree, k-TSP, and k-MST. (The running times of the\nalgorithm for k-TSP and k-MST involve an additional multiplicative factor k.) The previous best approximation\nalgorithms for all these problems achieved a constant-factor approximation. We also give efficient approximation\nschemes for Euclidean Min-Cost Matching, a problem that can be solved exactly in polynomial time. All our algorithms\nalso work, with almost no modification, when distance is measured using any geometric norm (such as \u00e2\u201e\u201cp for p  1 or\nother Minkowski norms). They also have efficient parallel (i.e., NC) implementations.\n\n\n<p>\n(Paper by Sanjeev Arora)\n\n</body></html>\n", "encoding": "Windows-1252"}