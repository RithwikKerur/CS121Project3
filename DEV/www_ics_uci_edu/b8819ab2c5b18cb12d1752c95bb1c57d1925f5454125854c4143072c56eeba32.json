{"url": "https://www.ics.uci.edu/~pattis/common/handouts/cygwinclion/commandline.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Command Line Cygwin Tools</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Command Line Cygwin Tools</h1>\r\n<p>\r\n</center>\r\n<hr align=\"left\" width=\"100%\">\r\n<p>\r\nThis document shows how to create and download project files for use with the\r\n  Cygwin tools from the command line.\r\nMost students will use the CLion IDE for writing and debugging their programs,\r\n  but you can use Cygwin if you prefer using command line tools.\r\nThis handout is also useful for ensuring you have correctly downloaded Cygwin\r\n  and all the C++ tools used in Cygwin and in CLion.\r\n<p>\r\n<hr align=\"left\" width=\"100%\">\r\n<p>\r\n\r\n<h3>Section 1) Testing the Cygwin Toolset and Clang</h3>\r\n<p>\r\nIn this section you will create and run a trivial C++ project/program\r\n   (including editing it, and seeing how syntax errors are reported).\r\n<p>\r\n<ol>\r\n<li>Click the <img src=\"images/cygwin/cygwin64terminal.jpg\"> (Cygwin64 Terminal\r\n      icon).\r\n    Perform the following actions in your come directory\r\n      (mine is <b>pattis@PATTIS-HOME</b>).\r\n    <p>\r\n    <ul>\r\n    <li>Make an empty directory for all ICS-46 Projects (<b>ics46projects</b>)\r\n          using the <b>mkdir</b> command.\r\n    <li>Connect to the <b>ics46projects</b> directory\r\n          using the <b>cd</b> command.\r\n    <li>Make an empty directory for the Trivial Test Project\r\n         (<b>trivialtest</b>)\r\n          using the <b>mkdir</b> command.\r\n    <li>Connect to the <b>trivialtest</b> project directory\r\n          using the <b>cd</b> command.\r\n    <li>Use any editor (<b>vi</b> is automatically available in Cygwin;\r\n          other editors can be downloaded; Windows editors can be used)\r\n          to create a <b>main.cpp</b> file that contains the following code\r\n          (e.g., copy/paste it):\r\n    <b><pre>#include &lt;iostream&gt;\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    cout << \"Hello, World!\" << endl;\r\n    return 0;\r\n}</pre></b>\r\n<p>\r\n    <li>Create a <b>CMakeLists.txt</b> file that contains the following code\r\n          (e.g., copy/paste it):\r\n    <b><pre>cmake_minimum_required(VERSION 3.3.2)\r\n\r\nset(CMAKE_CXX_COMPILER \"/cygdrive/c/cygwin64/bin/clang++\")\r\nset(CMAKE_C_COMPILER \"/cygdrive/c/cygwin64/bin/clang\")\r\n\r\nproject(trivialtest)\r\n\r\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\r\n\r\nset(SOURCE_FILES main.cpp)\r\nadd_executable(trivialtest ${SOURCE_FILES})</pre></b>\r\n<p>\r\n    <li>List the contents of the <b>ics46project/trivialtest</b> directory\r\n          storing these two files,\r\n          by using the <b>ls</b> command.\r\n    <li>Create the <b>make</b> files needed for this project,\r\n          by using the <b>cmake .</b> command (reemember, you will\r\n          do this just the first time you use a project).\r\n    <li>List the contents of the <b>ics46project/trivialtest</b> directory\r\n          storing the new files it creates (and the new <b>CMakeFiles</b>\r\n          directory),\r\n          by using the <b>ls</b> command.\r\n    <li>Build the <b>trivialtest.exe</b> file needed to execute this program,\r\n          by using the <b>make</b> command (you will do this each time\r\n          that you modify a <b>.cpp</b> file in a project).\r\n    <li>List the contents of the <b>ics46project/trivialtest</b> directory\r\n          storing the new file it creates,\r\n          by using the <b>ls</b> command.\r\n   <li>Run the <b>trivialtest.exe</b> executable file,\r\n          by using the <b>./trivialtest.exe</b> command.\r\n   </ul>\r\n   <p>\r\n    The following <b>~/ics46projects/trivialtest</b>\r\n      Cygwin64 Terminal window shows all these actions.\r\n    <p>\r\n    <img src=\"images/commandline/trivialtest.jpg\">\r\n    <p>\r\n    <!--- new download of llvc require specification of C++ compiler\r\n    If you do not see the <b>clang</b> and <b>clang++</b> compilers listed here,\r\n      you might have multiple C/C++ compilers on your computer, and Cygwin\r\n      is using the wrong one.\r\n    In such a case, edit the <b>MakeLists.txt</b> file (specified above) to\r\n      contain the following two <b>set</b> commands between the\r\n      <b>cmake_mininum_required</b> and <b>project</b> commands.\r\n<b><pre>  cmake_minimum_required(VERSION 3.3.2)\r\n\r\n  set(CMAKE_CXX_COMPILER \"/cygdrive/c/cygwin64/bin/clang++\")\r\n  set(CMAKE_C_COMPILER \"/cygdrive/c/cygwin64/bin/clang\")\r\n\r\n  project(trivialtest)</pre></b>\r\n    Then execute the 2 commands <b>rm -f -r CMakeFiles</b> and\r\n      <b>rm CMakeCache.txt</b> and repeat the commands above, starting at\r\n      <b>cmake .</b>\r\n    <p>\r\n    --->\r\nThe lines at the top (before the <b>pattis@PATTIS-HOME ~</b> prompt), are\r\n  printed only the first time that you use Cygwin: they are informing you\r\n  that default values for certain Unix files were created; you will not need\r\n  to edit/modify these files.\r\n<p>\r\n<li>Open a Windows file Explorer Window and navigate to the \r\n      <b>C:\\cygwin\\home\\yourname\\ics46projects\\trivialtest</b> \r\n      directory, which is the same as the one manipulated using Cygwin.\r\n    <p>\r\n    The following \r\n      Explorer window should appear on your screen.\r\n    <p>\r\n    <img src=\"images/commandline/trivialtest windows.jpg\">\r\n    <p>\r\n    You can use any combination of Windows and Cygwin commands to manipulate\r\n      the files in this directory: whichever is simplest.\r\n<p>\r\n\r\n<li>Edit, rebuild, and rerun the <b>main.cpp</b> program,\r\n   <ul>\r\n   <p>\r\n   <li>Use an editor to change the <b>cout</b> to print\r\n         <b>\"Goodbye, World!\"</b>.\r\n   <li>Show the <b>main.cpp</b> program file, by using the <b>more</b> command.\r\n   <li>Rebuild the <b>trivialtest.exe</b> file using the same <b>make</b>\r\n         command.\r\n       There is no reason to use the <b>cmake</b> command here: it must be used\r\n       only if we <b>change</b> the <b>CMakeLists.txt</b> file.\r\n   <li>Rerun the edited <b>trivialtest.exe</b> file,\r\n          by using the <b>./trivialtest.exe</b> command.\r\n   </ul>\r\n   <p>\r\n    The following <b>~/ics46projects/trivialtest</b>\r\n      Cygwin64 Terminal window shows all these actions.\r\n    <p>\r\n    <img src=\"images/commandline/trivialtest rebuild.jpg\">\r\n    <p>\r\n\r\n<li>Create a syntax error (remove the <b>;</b> at the end of the <b>cout</b>\r\n      line), and then follow the rebuilding/rerunning steps above\r\n    The following <b>~/ics46projects/trivialtest</b>\r\n      Cygwin64 Terminal window shows all these actions.\r\n    <p>\r\n    <img src=\"images/commandline/trivialtest syntax error.jpg\">\r\n    <p>\r\n    The failed results of attempting to rebuild the program appear after the\r\n      <b>make</b> command.\r\n    In this case, the Clang compiler accurately indicates the source of the\r\n      error.\r\n    I have lengthened the window so as not cause lines to wrap.\r\n</ol>\r\nWe will now continue by learning how to download a project and run it.\r\nDuring the quarter, you will be asked to do this for all programming\r\n  assignments and many quizzes.\r\n<p>\r\n\r\n<hr align=\"left\" width=\"33%\">\r\n<h3>Section 2) Testing Downloadable Projects with the Course Libraries</h3>\r\n<p>\r\nIn this section you will download the course libraries and then\r\n  download/build/run a project that contains various programs that use these\r\n  libraries.\r\n<p>\r\n<ol>\r\n<li>Create a shortcut named <b>ics46projects</b> to the directory\r\n      <b>C:\\cygwin\\home\\yourname\\ics46projects</b> and place it on your desktop\r\n      near the \r\n      <img src=\"images/cygwin/cygwin64terminal.jpg\"> (Cygwin64 Terminal icon).\r\n<p>\r\n\r\n<li>Download and unzip the file <a href=\"libraries.zip\">libraries.zip</a>;\r\n    Copy its three directories (<b>courselib</b>, <b>googletestlib</b>, and\r\n      <b>test_all_data_types</b>) into the directory that\r\n      <b>ics46projects</b> shortcuts; it should already contain the\r\n      <b>trivialtest</b>  directory,  created by the operations above.\r\n    <p>\r\n    Generally, whenever you download projects, you will unzip them and \r\n      then copy their directories into the directory that <b>ics46projects</b>\r\n      shortcuts.\r\n    <p>\r\n    The following <b>~/ics46projects</b>\r\n      Cygwin64 Terminal window lists these four directories.\r\n    <p>\r\n    <img src=\"images/commandline/libraries.jpg\">\r\n    <p>\r\n\r\n<li>Connect to the <b>test_all_data_types</b> directory,\r\n      by using the <b>cd</b> command.\r\n    Hint: type only <b>cd te</b> and then press the <b>tab</b> key and Cygwin\r\n      should complete the name of this directory; generally using <b>tab</b> for\r\n      directory/file name completion can drastically reduce your typing in\r\n      Cygwin.\r\n    <p>\r\n    List the contents of the <b>ics46project/test_all_data_types</b> directory,\r\n          by using the <b>ls</b> command.\r\n    Notice that this project folder contiains various <b>.cpp</b> files\r\n      and a <b>CMakeLists.txt</b> file\r\n    <p>\r\n    The following <b>~/ics46projects/test_all_data_types</b>\r\n      Cygwin64 Terminal window shows all these actions.\r\n    <p>\r\n    <img src=\"images/commandline/test_all_data_types.jpg\">\r\n    <p>\r\n\r\n<li>Edit the <b>driver.cpp</b> file by uncommenting lines 29-34, so they\r\n      appear as follows\r\n    <b><pre>#include \"driver_set.hpp\"\r\n\r\nint main() {\r\n  ics::DriverSet d;\r\n  return 0;\r\n}</pre></b>\r\n<p>\r\n\r\n<li>Build and run the <b>main.cpp</b> program,\r\n   <ul>\r\n   <p>\r\n   <li>Create the <b>make</b> files needed for this project,\r\n         by using the <b>cmake .</b> command (recall you will\r\n         do this just the first time you use a project).\r\n   <li>Build the <b>test_all_data_types.exe</b> file needed to execute this\r\n         program, by using the <b>make</b> command (you will do this each time\r\n         that you modify a <b>.cpp</b> file in a project).\r\n   <li>Run the <b>test_all_data_types.exe</b> executable file,\r\n          by using the <b>./test_all_data_types.exe</b> command\r\n          (remember to use command-completion to reduce your typing:\r\n          but since many file names start with <b>test_</b> you will\r\n          have to type <b>test_d</b> (a unique prefix for the <b>exe</b> file)\r\n          before pressing <b>tab</b>.\r\n   </ul>\r\n   <p>\r\n    The following <b>~/ics46projects/test_all_data_types</b>\r\n      Cygwin64 Terminal window shows all these actions.\r\n    <p>\r\n    <img src=\"images/commandline/test_all_data_types run.jpg\">\r\n    <p>\r\n    <!--- updated CMakeList.txt to include these (see above)\r\n    If you do not see the <b>clang</b> and <b>clang++</b> compilers listed here,\r\n      you might have multiple C/C++ compilers on your computer, and Cygwin\r\n      is using the wrong one.\r\n    In such a case, edit the <b>MakeLists.txt</b> file (see part 3 above) to\r\n      contain the following two <b>set</b> commands between the\r\n      <b>cmake_mininum_required</b> and <b>project</b> commands.\r\n<b><pre>  cmake_minimum_required(VERSION 3.3.2)\r\n\r\n  set(CMAKE_CXX_COMPILER \"/cygdrive/c/cygwin64/bin/clang++\")\r\n  set(CMAKE_C_COMPILER \"/cygdrive/c/cygwin64/bin/clang\")\r\n\r\n  project(test_all_data_types)</pre></b>\r\n    Then execute the 2 commands <b>rm -f -r CMakeFiles</b> and\r\n      <b>rm CMakeCache.txt</b> and repeat the commands above, starting at\r\n      <b>cmake .</b>\r\n    <p>\r\n--->\r\n    Experiment with this driver by entering commands (and their arguments, when\r\n      prompted) to better understand the <b>set</b> data type.\r\n    You can enter the <b>q</b> command to terminate the driver, or you can\r\n      type <b>ctrl-c</b> to terminate the driver.\r\n    <p>\r\n    I suggest that you try terminating the driver with a <b>q</b> command; then,\r\n      rerun the program and terminate it with <b>ctrl-c</b>.\r\n<p>\r\n\r\n<li>Recall in <b>Item 1</b> (at the top of this section) you created a shortcut\r\n      named <b>ics46projects</b> to the directory\r\n      <b>C:\\cygwin\\home\\yourname\\ics46projects</b>; we will now\r\n      briefly explore the contents of this folder.\r\n    Explore (double-click) the short-cut and double-click on the\r\n      <b>test_all_data_types</b> folder.\r\n    <p>\r\n    The following explorer window should appear on your screen.\r\n    <p>\r\n    <img src=\"images/commandline/explorer test_all_data_types.jpg\">\r\n    <p>\r\n\r\n<li>Double-click the <b>test_all_data_types.exe</b> file to run this program\r\n      in Windows, outside of Cygwin.\r\n    The following MS-DOS window should appear on your screen.\r\n    <p>\r\n    <img src=\"images/commandline/MSDOSRun.jpg\">\r\n    <p>\r\n    <blockquote>\r\n    If the error pop-window\r\n    <p>\r\n    <img src=\"images/clion/CLion patherror.jpg\">\r\n    <p>\r\n    appears, you must also add <b>C:\\cygwin64\\bin</b> to the\r\n      user variable <b>PATH</b>: see steps 15-22 in the\r\n      <a href=\"cygwin.html\" target=\"_new\">Cygwin</a> handout.\r\n<!---\r\n    <p>\r\n    <img src=\"images/clion/CLion patherrorfix.jpg\">\r\n    <p>\r\n--->\r\n    </blockquote>\r\n    Experiment with this driver by entering commands (and their arguments, when\r\n      prompted); it runs as it did in Cygwin.\r\n    Note that when you enter the <b>q</b> command or <b>ctrl-c</b>, the program\r\n      terminates and the MS-DOS window disappears.\r\n    <p>\r\n    So, when a program we run under Cygwin terminates, the screen retains the\r\n      information printed (by <b>cout</b>) after the run terminates, but when we\r\n      run it directly in an MS-DOS window, the window disappears after the run\r\n      terminates.\r\n    For example, if you find the <b>trivialtest.exe</b> file and run it by\r\n      double-clicking this file, its MS-DOS windo will run and then immediately\r\n      disappear.\r\n<p>\r\n\r\n<li>Find the <b>'input files'</b> directory in the <b>test_all_data_types</b>\r\n      folder and copy all of its <b>.txt</b> data files up one level in the\r\n      directory (the one that contains the <b>test_all_data_types.exe</b> file).\r\n    <p>\r\n    Then, run the program (either in the Cygwin or a MS-DOS window) and\r\n      issue the <b>lf</b> command (load from file); when prompted for the file\r\n      name, just press the enter key to choose the default (<b>loadset.txt</b>).\r\n    <p>\r\n    The following <b>~/ics46projects/test_all_data_types</b>\r\n      Cygwin64 Terminal window shows all these actions.\r\n    <p>\r\n    <img src=\"images/commandline/lf command run.jpg\">\r\n    <p>\r\n    Note that because the directory name <b>input files</b> contains a space,\r\n      it appears in single quotes (<b>'input files'</b>) and must appear in\r\n      single quotes in all Cygwin commands. \r\n    <p>\r\n    <b>IMPORTANT</b>: If a program reads data files, the root directory for the\r\n         specifying the files is the directory in which the <b>.exe</b> file\r\n         appears.\r\n       It is simplest to copy all the data files into this directory.\r\n       An alternative would be to leave the files in the <b>input files</b>\r\n         directory, and enter their names like <b>input files/loadset.txt</b>\r\n         (note no quotes here: this is not a Cygwin command).\r\n<p>\r\n\r\n<li>A typical project folder may have more than one <b>.cpp</b> file with a\r\n     main function (as <b>test_all_data_types</b> has).\r\n    Only one of these <b>.cpp</b> files can have its main function uncommented,\r\n      otherwise the build will fail.\r\n    When working on project, it is typical to \r\n    <p>\r\n    <ol type=\"a\">\r\n      <li>Comment-out code in one <b>.cpp</b> file.\r\n      <li>Uncomment code in another <b>.cpp</b> file.\r\n      <li>Rebuild/Rerun the newly uncommented <b>.cpp</b> file.\r\n    </ol>\r\n    <p>\r\n    In the <b>test_all_data_types</b> project folder, the <b>driver.cpp</b>\r\n      file has many main functions: we uncommented one (in step 4) to allow us\r\n      to run the Set driver.\r\n    If more than one main function is uncommented, attempting to build the code\r\n      will result in the compiler specifying a <b>redefinition of 'main'</b>\r\n      error.\r\n    <p>\r\n    The <b>test_all_data_types</b> project folder also contains many <b>.cpp</b>\r\n      files (their names all start with <b>test</b>) that each contain one main\r\n      function (each is a <b>Googletest</b> for one data type).\r\n    If more than one file contains a main function, attempting to build the\r\n      code will result in the linker specifying a\r\n      <b>multiple definition of 'main'</b> error.\r\n    <p>\r\n    To switch this project from running the Set driver to the Set Googletest\r\n    <ol type=\"a\">\r\n      <li>Edit the <b>driver.cpp</b> file and comment-out lines 29-34.\r\n      <li>Edit the <b>test_set.cpp</b> file and uncomment all its lines.<br>\r\n          Most program editors have a special command that allows commenting\r\n          on selected lines to be toggeled.\r\n    </ol>\r\n    <p>\r\n    Rebuild/Rerun the newly uncommented <b>.cpp</b> file.\r\n    <p>\r\n    The following <b>~/ics46projects/test_all_data_types</b>\r\n      Cygwin64 Terminal window shows all these actions.\r\n    <p>\r\n    <img src=\"images/commandline/test_set run.jpg\">\r\n    <p>\r\n    <p>\r\n</ol>\r\n<p>\r\nWe are now at the end of this handout.\r\nYou will not need to repeat the first two sections during the course, but you\r\n  will frequently download project folders and use them as demonstrated in\r\n  section 2.\r\n\r\n</body>\r\n</html>\r\n\r\n", "encoding": "ascii"}