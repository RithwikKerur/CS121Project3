{"url": "https://www.ics.uci.edu/~yuzok/software-architecture.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"http://www.w3.org/TR/html4/loose.dtd\">\n<html lang=\"en\">\n<head>\n\t<!-- META tags provide additional information, as described below... -->\n\n\t<!-- Establish character encoding (Western European ISO) -->\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\" >\n\n\t<!-- Force reload from server, not local cache -->\n\t<meta http-equiv=\"pragma\" content=\"no-cache\" >\n\n\t<!-- Allows search engine bots to index this page -->\n\n\t<meta name=\"ROBOTS\" content=\"ALL\" >\n\n\t<!-- Disables Microsoft's Smart Tags functionality on this page -->\n\t<meta name=\"MSSmartTagsPreventParsing\" content=\"true\" >\n\n\t<!-- Provides description of page for search engines -->\n\t<meta name=\"DESCRIPTION\" content=\"A source poage for Software Architecture Information\" >\n\n\t<!-- Provides keywords for search engines -->\n\t<meta name=\"KEYWORDS\" content=\"UC Irvine, Software Architecture research,\nSoftware Architecture resources, Software Architecture\" >\n\n\t<!-- States page authors -->\n\t<meta name=\"AUTHOR\" content=\"Yuzo Kanomata\" >\n\n<TITLE>Software Architecture Sites\n</TITLE>\n</HEAD>\n\n<BODY>\n<H1 ALIGN=CENTER>Software Architecture<BR>Resource Sites</H1>\n<TABLE>\n\t<TR><TD WIDTH=150></TD><TD><A HREF=\"#bell\">Bell Labs</A></TD><TD></TD></TR>\n\t<TR><TD WIDTH=150></TD><TD ><A HREF=\"#stars\">STARS - Software Architecture Technology Guide</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#cse\">USC - Center for Software Engineering</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#csl\">Computer Science Laboratory at SRI</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#laser\">LASER - UMass Amherst</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#cmu\">CS at Carnegie Mellon University</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#sei\">SEI at Carnegie Mellon University</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#open\">Open Implementation at Xerox</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#aspect\">Aspect-Oriented Programming at Xerox</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#ilu\">Inter-Language Unification at Xerox</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#gen\">Systems Generator at UTexas</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#serl\">SERL at UColorado</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#patterns\">Patterns at UIUC</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#sdn\">Software Design Network</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#honeywell\">SA at Honeywell</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#tek\">SA at Teknowledge</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#irus\">SA at UC Irvine</A></TD><TD></TD></TR>\n\t <TR><TD></TD><TD><A HREF=\"#gatech\">SA at GaTech</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#ogi\">SA at Oregon Graduate Institute</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#rapide\">Rapide at Stanford</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#TAFIM\">TAFIM at DISA</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#contracts\">Reuse Contracts</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#arcs\">ARchitecture and Composition Software</A></TD><TD></TD></TR>\n\t<TR><TD></TD><TD><A HREF=\"#wwisa\">World-Wide Institute of Software Architects</A></TD><TD></TD></TR>\n</TABLE>\n\n<HR>\n<dl>\n<DT><A NAME=\"wwisa\" HREF=\"http://www.wwisa.org/\">World-Wide Institute of Software Architects</A>\n<DD><P>\nThe Institute of Software Architects is a nonprofit membership organization\nwith a mission to accelerate the establishment of the profession of software\narchitecture and provide information and services to software architects and\ntheir clients.\n</P>\n<DT><A HREF=\"http://www.bell-labs.com/user/dep/work/swa/\">SA at Bell Labs</A>\n<DD><P>This site contains Dewayne Perry's collection of SA material.  It includes links to his papers, sites, projects, and individuals.\n\n</P>\n<DT><A HREF=\"http://bilbo.ide.hk-r.se:8080/~bosch/ARCS.html\">ARchitecture and Composition Software</A> Department of Computer Science and\nBusiness Administration at the University of Karlskrona/Ronneby \n<DD><P>The ARCS research group is formed by researchers from the University of Karlskrona/Ronneby and the University of Kalmar.\nWithin ARCS we study the architecture of software systems and the composition of software components in such systems,\nprimarily from the perspective of the object-oriented paradigm. This indicates that our approach to software architecture is\ninfluenced by our experiences in object-oriented frameworks and class libraries, design patterns and advanced object-oriented\ncomputation models. </P>\n<P>\nThe research perspective taken by the ARCS group is based on three observations: \n\n</P>\n<UL TYPE=DISC>\n       \t<LI>Insufficient support is provided for describing system architectures and reasoning about architectural issues. Lately, some\n       \tresearch efforts have started to address these issues, but things are far from solved. \n       \t<LI>It remains notoriously difficult to construct systems by composing them from reused components. Especially component\n       adaptation lacks support. \n       \t<LI>It is not well understood how to design a system architecture from, potentially conflicting, non-functional requirements. \n</UL>\n\n<DT><A NAME=\"contracts\" HREF=\"http://progwww.vub.ac.be/prog/pools/rcs/\">Reuse Contracts</A>\n<DD><P>The reuse contract methodology is a novel methodology for managing reuse and evolution in software development. The methodology\naddresses the incremental/iterative development of reusable software components and models, and how to build highly customized\napplications based on these components and models. Much of the inspiration for developing reuse contracts has been drawn from the\npractical experience in developing object-oriented frameworks (see the Communications of the ACM paper October 1997). It is a practical method. It\nbuilds on existing object-oriented analysis and design methods (in casu UML). Yet, it distinguishes itself from all other methodologies by\nits formal foundation and support for evolution: Reused components and the way they are reused are formally described in a contract\n(hence the name). This forms the basis of tools for managing change and for checking the consistency between models and code. While\nbeing formal, the notation is simple enough for every day use (it can be explained in an hour). \n</P>\n<DT><A NAME=\"rapide\" HREF=\"http://anna.stanford.edu/rapide/rapide.html\">Rapide at Stanford</A>\n<DD>The Rapide Language effort focuses on developing a new technology for building large-scale, distributed multi-language\nsystems. This technology is based upon a new generation of computer languages, called Executable Architecture Definition\nLanguages (EADLs), and an innovative toolset supporting the use of EADLs in evolutionary development and rigorous\nanalysis of large-scale systems. \n<P>\n<DD>Rapide is designed to support component-based development of large, multi-language systems by utilizing architecture\ndefinitions as the development framework. Rapide adopts a new event-based execution model of distributed,\ntime-sensitive systems -- the \"timed poset model.\" Posets provide the most detailed formal basis to date for constructing\nearly life cycle prototyping tools, and later life cycle tools for correctness and performance analysis of distributed\ntime-sensitive systems. <P>\n<DT><A NAME=\"stars\"\nHREF=\"http://www-ast.tds-gn.lmco.com/arch/guide.html\">Software\nArchitecture Technology Guide\n</A> \n<DD> The purpose of this node is to\nprovide DoD software developers with an overview of software architecture technology and to serve as a\n\"virtual road map\" to additional web resources for understanding and applying architectural techniques\nto domain-specific reuse. The reader is guided through software architecture concepts, representation\nmethods, architecture-focused software efforts, recommended readings,\nand additional sources (including a more than adequate treatment of\narchitecture description languages)\nfor software architecture technology information. \n<P>\n<DD>This effort is sponsored by the Department of Defense OASD(C3I)\nInformation Technology Directorate, and contracted through the Air Force Electronic Systems Center (ESC), as part of the Software\nTechnology for Adaptable, Reliable Systems \n(<A HREF=\"http://source.asset.com/stars/\">STARS</A>) program. \n<P>\n<dt><A NAME=\"cse\" HREF=\"http://sunset.usc.edu/index.html\">Center for Software\nEngineering\n</A>\n<dd><p>Dr. Barry Boehm founded the center at University of Southern\nCalifornia in 1993.  The purpose is to provide an environment for\nresearch and teaching in the areas of large-scale software design\nand development processes, generic and domain specific software\narchitectures, software engineering tools and environments,\ncooperative system design and the economics of software\nengineering.</P>\n<dd><p>Their work in software architecture focuses on:\n</p>\n<ol>\n<li>Representing software architectures\n<li>Fitting software architectures into the software process\n<li>Architecting for a product line or a specific domain\n<li>Using infrastructure technologies (tool or set of tools to assist the\narchitect in managing the multiple view of the architecture)\n</ol>\n<dt><A NAME=\"csl\" HREF=\"http://www.csl.sri.com/~moriconi/mmprojects.html\">Software Architecture Projects at SRI</A> \n<dd><p> There are two major projects in the area of software architecture: one is focused the development of fundamental enabling technology and\nthe other on applying it in the development of a useful architectural standard. Both projects are multiyear and involve collaboration with\nresearchers at Stanford University.    Those interested in formal methods should\nalso consider <A HREF=\"http://www.sri.cam.uk/\">SRI Cambridge Computer\nScience Research Centre\n</A>.\n</P> \n<dt><A NAME=\"laser\" HREF=\"http://zoo.cs.umass.edu/public.html\">Laboratory for\nAdvanced Software Engineering Research\n</A>\n\n<DD><P>The research being done is LASER falls into the following\ncategories: process, object management, analysis of software\nsystems, and software architecture.  This works fits under the\ninteroperability problem.  They are looking at stratgies and architectures\nthat would allow tools developed in different languages to operate on shared\ndata on by passing control among themselves.\n</p> \n<DT><A NAME=\"cmu\" HREF=\"http://www.cs.cmu.edu/\">Computer Science at Carnegie Mellon University</A>\n<DD><P>Carnegie Mellon University's <A HREF=\"http://www.cs.cmu.edu/Groups/able/able.html\">ABLE project</A> is concerned with exploring the formal basis\nfor Software Architecture, developing the concept of Architectural Style, and building\ntools that practicing software architects might find useful. Our tool development effort\nhas focused on the Aesop system, a toolkit for rapidly producing software architecture\ndesign and analysis environments that are customized to support specific architectural\nstyles. The formal work revolves around the Wright language.</P>\n<DD><P>The <A HREF=\"http://www.cs.cmu.edu/afs/cs/project/compose/www/index.html\">composable systems group</A> focuses on three research areas: software architecture, formal methods,\n       and tractable software analysis. We develop new models, theories, methods,\n       languages, and tools for classifying, specifying, analyzing, and designing\n       software systems beyond the component level. This support could lead to\n       substantial reduction in maintenance costs, improvement in software\n       resuse, and increase in quality of software.</p>\n <DD><P> For design practice to make the transition from innovative to routine,\n         design knowledge must be captured, organized, and disseminated.\n         Handbooks are a popular means of doing this. One example, Perry's\n         Chemical Engineers' Handbook, is a tome several inches thick, filled with\n         tables, diagrams, and schematics that cover topics from the basics of the\n         metric system to the intricate innards of heat pumps. In the bulk of the\n         text, noted practioners give useful, specific advice about the standard\n         solutions to common design tasks. The\n         <A HREF=\"http://www.cs.cmu.edu/People/Vit/vitruvius.html\">Vitruvius Project</A> at CMU is taking steps toward the goal of establishing just such a codificaiton of\n         practice.</p>\n<dt><A NAME=\"sei\" HREF=\"http://www.sei.cmu.edu/technology/architecture/\">Software\nEngineering Institute\n</A>\n<DD><p>The SEI is a federally funded research and development center\noperated since 1984 by Carnegie Mellon University.  Through the\nsponsorship of the Defense Department's Advanced Research Projects\nAgency the objective is to provide leadership in software\nengineering and the transition of new technology into software\nengineering practice.  There are a number of resources available at this\nsite.\n</p>\n<DT><A NAME=\"aspect\" HREF=\"http://www.parc.xerox.com/spl/projects/aop/\">Aspect-Oriented Programming at Xerox</A>\n<DD><P>Because modules correspond so directly to blocks of executable code, and the different\naspects of concern cross-cut the executable code, the modules themselves end up being a\ntangled mess of aspects. We believe this TANGLING-OF-ASPECTS phenomenon is at the heart of much\nof the complexity in existing software systems. Further, we believe that adjusting the scale of\nmodules (or the level of programming languages) won't help without addressing this root cause\nof the tangling. Instead what is needed is to be able to work with abstractions that correspond\nmore directly to aspects of concern than to blocks of executable code. </p>\n<P>We are working on a new programming paradigm, Aspect-Oriented Programming (AOP), that\ndoes just this. AOP works by allowing programmers to first express each of a system's aspects of\nconcern in a separate and natural form, and then automatically combine those separate\ndescriptions into a final executable form using a tool called an Aspect Weaver. </p>\n<DT><A HREF=\"ftp://ftp.parc.xerox.com/pub/ilu/ilu.html\">Inter-Language Unification at Xerox</A>\n<DD><P>The Inter-Language Unification system (ILU) is a multi-language object interface system. The\nobject interfaces provided by ILU hide implementation distinctions between different\nlanguages, between different address spaces, and between operating system types. ILU can be\nused to build multi-lingual object-oriented libraries (\"class libraries\") with well-specified\nlanguage-independent interfaces. It can also be used to implement distributed systems. It can\nalso be used to define and document interfaces between the modules of non-distributed\nprograms. ILU interfaces can be specified in either the OMG's CORBA Interface Definition\nLanguage (OMG IDL), or ILU's Interface Specification Language (ISL). </p>\n\n<P>ILU 2.0 supports the programming languages C++, ANSI C, and Python, and will support Java,\nand Common Lisp. The 1.8 release also contains support for Modula-3, and contributed support\nfor Modula-3 in ILU 2.0 is available. ILU has been installed on most flavors of UNIX (SunOS,\nSolaris, HP-UX, AIX, OSF, IRIX, FreeBSD, Linux, LynxOS, SCO Unix, etc.) and MS-Windows (3.1, 95,\nNT). It supports both threaded (POSIX, Solaris, NT, Franz ACL, PPCR, Modula-3) and event-loop\n(Xt, Tk, XView) operation. One of the implementation goals is to maximize compatibility with\nexisting open standards. As a result, ILU provides support for use of the OMG CORBA IDL\ninterface description language, and can be thought of as a CORBA ORB system (though with\nomissions from and extensions to the CORBA spec). ILU also includes a self-contained\nimplementation of ONC RPC, and it is possible to describe and use existing RPC services as ILU\nobjects. ILU also includes a self-contained implementation of the World Wide Web's Hypertext\nTransfer Protocol (HTTP), and can thus be used to implement object-oriented web browsers and\nservers. ILU is available free from '<A HREF=\"ftp://ftp.parc.xerox.com/pub/ilu/ilu.html\">ftp://ftp.parc.xerox.com/pub/ilu/ilu.html</A>'. </P>\n<dt><A NAME=\"open\" HREF=\"http://www.parc.xerox.com/spl/projects/oi/\">Xerox Open\nImplementation</A>\n<dd><p>Open implementation is a new design principle under consideration by\na number of researchers and practitioners.  Workers at Xerox Parc are at the\nforefront of exploring this design notion and the implication on a system's\narchitecture.</p>\n<DD><p>Simply put, the focus of work on open implementation (OI) is to develop\ntechniques whereby a module can be more reusable and tailorable by\nexposing certain crucial aspects of its implementation (as well as its\nnormal interface) to clients.  This can allow the clients to adjust the\nmodule to better suit their needs.  Recent work in open implementation\nhas produced an initial OI analysis and design methodology that helps\ndesigners work out what aspects of its implementation a module should\nexpose and how.</p>\n<DT><A NAME=\"gen\" HREF=\"http://www.cs.utexas.edu/users/schwartz/\">Software Systems Generator Research Group</A>\n<DD><P>Software system generators are tools for\nassembling complex software from\ninterchangeable, reusable components. We\nhave developed GenVoca, a\ndomain-independent model of software\nconstruction that defines systems as\nalgebraic equations, where terms are\ncomponents. GenVoca has been\nsuccessfully applied to many domains including database management systems, avionics,\nand data structures. Our results have demonstrated GenVoca generators can\nsubstantially improve productivity and application run-time performance. </p>\n\n<dt><A NAME=\"serl\" HREF=\"http://www.cs.colorado.edu/users/serl/\">Software\nEngineering Research Laboratory\n</A> \n<dd><p>The Software Engineering Research Laboratory (SERL) is part of the\nComputer Science Department at the University of Colorado. The focus of\nour research is in global software engineering, and consequently in each\nof our research topics our work focuses on the wide-area software\ndevelopment and deployment context.\n</p>\n<dt><A NAME=\"patterns\" HREF=\"http://st-www.cs.uiuc.edu/users/patterns/patterns.html\">Patterns Home Page</A>\n<dd><P>This site organizes material from a variety of sites regarding\n<A HREF=\"/../coursepages/softwarearchitecture/sareadings/alexanderforCS.ps\">patterns and pattern languages</A> (<STRONG>PS</STRONG>) \n(see also an  <A HREF=\"http://xent.w3.org/~khare/Alexander.htmld/\">introduction to design patterns</A>).  \nPatterns can be considered a\nmicro-architectural view of a system.  Most work in patterns is from a\ncomponent or design reuse perspective.  More on patterns can be found at the\n<A HREF=\"http://c2.com/ppr/index.html\">Portland Pattern Repository</A>.\n</p> \n<dt><A NAME=\"sdn\" HREF=\"http://hopper.cs.wvu.edu/\">Software Design Network</A>\n<DD><P>The primary mission of the SDN is to promote and disseminate information concerning research in\nsoftware architectures. The SDN is a worldwide, virtual enterprise of faculty and students that are interested in research in\nsoftware architectures. The SDN project is partially funded by the NASA IVandV Facility in Fairmont,\nWest Virginia. It started as a virtual enterprise between several departments and research centers at WVU\nin 1994 in conjunction with the NASA Earth Observing System (EOS) Project and National Library of\nMedicine.  </P>\n<DT><A NAME=\"honeywell\" HREF=\"http://www.htc.honeywell.com/projects/dssa/\">DSSA at Honeywell</A>\n<DD><P>Engineers often draw annotated diagrams of components and the\n relationships between them to describe the high-level design or\n architecture of a system. We seek to make this intuitive notion of an\n architecture more rigorous by defining precise meanings and notations for\n such specifications. This means using machine-processable languages to\n capture architecture specifications; tools to analyze architectures and\n estimate system properties; and tools to automate the production and\n testing of software from an architecture specification. We have applied\n these principles to develop architecture specification languages for\n real-time systems, with special attention paid to those that include\n guidance, navigation and control functions; and to specify example\n architectures that can be easily adapted to meet the requirements of\n families of related products. </p>\n <DT><A NAME=\"tek\" HREF=\"http://www.teknowledge.com:80/DSSA/\">Teknowledge's DSSA & ProtoTech Projects</A>\n<DD><P>Teknowledge's Domain-Specific Software Architectures\n(DSSA) Project home page. This also provides information about our\nProtoTech (Prototyping Technologies) project. Both projects are funded by\nARPA/SISTO -- DSSA through ARDEC (Army) and ProtoTech through ONR\n(Navy). \n</P>\n<DT><A NAME=\"irus\" HREF=\"http://www.ics.uci.edu/pub/arch/\">Software Architecture Research at U. C. Irvine</A>\n<DD><P>Software Architecture research is directed at reducing the cost of application\n   development by focusing attention on high level design issues and increasing reuse. \n</P>\n<DL>\n\t<DT>The C2 Style\n\t\t<DD>A component- and message-based architectural style for component reuse and flexible\n                                    \tsystem composition. \n\t\t<DT>Dynamic Architecture\n\t<DD>Techniques and tools for modifying software architectures during execution. \n\t\t<DT>The Argo Design Environment\n\t<DD>A graphical design environment for constructing, analyzing, and generating C2\n                                       \t\tarchitectures. \n</DL>\n\n<DT><A NAME=\"gatech\" HREF=\"http://www.cc.gatech.edu/computing/classes/cs8112m/\">Georgia Tech Software Architecture Reading Group</A>\n<DD><P>GT-SARG is a reading group set up in the College of Computing for people interested in\ndiscussing issues related to software architecture. GT-SARG began as weekly meetings in\nthe Winter Quarter of 1995 and will continue as long as interest remains.</P>\n<P>The reading group is organized by Gregory Abowd, a faculty member in the College of\nComputing whose research interests cover models and evaluation of software\narchitectures. </P>\n<DT><A NAME=\"ogi\" HREF=\"http://www.cse.ogi.edu:80/PacSoft/Blackberry.html\">Software Design for Reliability and Reuse at Oregon Graduate Institute</A>\n<DD><P>The goal of the SDRR project was to create a technology for generation of software\ncomponents. Phase I of the Blackberry project was successfully completed on January\n31, 1995. The created technology was tested and compared to a state-of-the-art\ntemplate-based software technology. SDRR technology demonstrated 3 times increase in\nprogrammers' productivity. There's more to SDRR than just productivity. </p>\n<DT><A HREF=\"http://www-library.itsi.disa.mil/tafim/tafim3.0/pages/tafim.htm\" NAME=\"TAFIM\">Technical Architecture Framework for Information Management</A>\n\n<DD><P>The TAFIM is intended to guide the development of architectures that satisfy requirements\n   across missions, functional areas, and functional activities. The TAFIM is mandatory for use in\n   DOD. The specific technical architectures for missions and functions will be developed using\n   standard architecture guidance and development methodologies provided by the TAFIM.\n</P>\n\n</BODY>\n\n</HTML>\n\n", "encoding": "ascii"}