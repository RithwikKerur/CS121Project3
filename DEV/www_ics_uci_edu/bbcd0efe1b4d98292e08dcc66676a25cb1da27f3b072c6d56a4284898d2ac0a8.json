{"url": "https://www.ics.uci.edu/~arcadia/system_pages/cats_pal.html", "content": "<HTML>\n<!-- $Id$ -->\n<HEAD>\n<TITLE> CATS/Pal</TITLE>\n<META http-equiv=\"Owner\" content=\"Arcadia\">\n<META http-equiv=\"Reply-To\" content=\"arcadia-www@ics.uci.edu\">\n<LINK rev=\"made\" href=\"mailto:arcadia-www@ics.uci.edu\">\n</HEAD><BODY>\n<H1><IMG src=\"http://www.ics.uci.edu/~arcadia/Icons/arcadia-logo.gif\" alt=\"\" align=middle>\n<A NAME=\"SECTION0004200000000000000\"> CATS/Pal</A></H1>\n<HR>\n<P>\n<OL><LI> <i>Name:</i><BR>\nCATS/Pal. (The tool is called CATS, its input language is called\n\tPAL.)\n<P>\n<LI> <i>Source:</i><BR>\nPurdue University\n<P>\n<LI> <i>Brief description:</i><BR>\nCATS/Pal is a tool for statically analyzing concurrent programs.\n\tIt is a prototype of task parcelling and composition techniques\n\tbased on process algebra that will later be incorporated into\n\tthe CATS tool suite. It includes: \n<UL><LI> An Ada-like design language (PAL) \n<LI> An analysis tool (Pal) that\n<OL><LI> translates specifications written in PAL into process graphs,\n\t   and constructs a hierarchical analysis plan based on scope\n\t   structure and task communication structures.\n<LI> performs reachability analysis and verifies correct implementations\n           based on various notions of ``implements'' relations \n\t   (bisimulations and preorders). \n<LI> applies abstraction and reductions automatically or \n\t   under user direction during hierarchical composition of\n\t   analysis results to control growth of the state-space.\n<LI> uses user-supplied context  assumptions to further prune the\n \t   state-space, as well as verifying the validity of those\n           assumptions. \n<LI> can be configured as a single client/server pair (the default\n\t   configuration) or as multiple servers analyzing\n\t   sub-problems in parallel on a network of workstations.\n</OL>\n</UL>\n<P>\n<LI> <i>Evaluation against applicable general dimensions:</i>\n<OL><LI> <i>Availability: commercial/licensed/public domain</i><BR>\nCost-free license.  Full sources are available by anonymous\n\tftp to<BR>\nphosphor.cs.purdue.edu, directory pub/arcadia/PAL.\n<P>\n<LI> <i>Cost:</i><BR>\nFree if obtained over the internet.\n<P>\n<LI> <i>Degree of support/maturity/testing/usage:</i><BR>\nLimited support.  CATS/Pal was developed by a single graduate\n\tstudent, Wei Jen Yeh. The PAL language, translator, and \n\tback-end analysis engine are now fairly stable, but\n\tPal is not a commercial-quality tool.  \n\tDocumentation is sparse, and the user\n\tinterface is primitive.\n\tIt has been successfully tested on many examples, including\n\tstandard \n\t``white rat'' problems from the literature (100 dining\n\tphilosophers, Milner's scheduler, gas station, etc.) and\n\ta smaller number of more realistic problems including\n\ta model of PAL itself (in a multiple-server configuration) \n\tand portions of the Chiron user interface development system.\n<P>\n<LI> <i>Speed:</i><BR>\nAn individual process composition operation is at least one\n\torder of magnitude slower in Pal than in simpler brute-force \n\treachability analysis tools, and its capacity is similarly \n\tlimited.  However, analysis of much larger systems is possible\n\twhen the reductions are successfully applied to limit growth\n\tof the state space. For instance, Pal requires more time to \n\tanalyze 3 dining philosophers than CATS (the Ada implementation) \n\trequires for 7; but Pal analyzes \n\t100 dining philosophers in less time (and less memory) than\n\tCATS takes to analyze 9 dining \tphilosophers. Pal is\n\tcompetitive with non-enumerative analysis tools  like \n\tconstrained expression analysis for highly structured\n\tproblems (faster on some, slower on others).\n<P>\n\tAnalysis of more realistic system designs\n\tis typically achievable if the \tsystem has a cleanly layered\n\tdesign; otherwise reorganization of the design (introduction\n\tof layering in the design, even if it is absent in the\n\timplementation) is necessary to achieve satisfactory results.\n\tExperience so far suggests that the structure required to make\n\tanalysis feasible is also useful for understandability.\n<P>\n<LI> <i>Computing platforms:</i><BR>\nDeveloped and maintained on Sun Sparcstations under Sun OS 4.x\n\twith Austin/Kyoto Common Lisp version 615. Pal has been ported to\n\tSystem V R4 and SVR3 environments running on 80486 PC's, as\n\twell as Lucid Common Lisp version 4.0  under Sun OS. \n\tShould port to other Unix systems with Common Lisp and\n\tsockets; porting to a new operating system or Lisp compiler\n\trequires modification of a small number of interface modules\n\tfor inter-process communication and invocation of system\n\tservices. Performance is best with at least 24M of \n\tmain memory; more is desirable.\n<P>\n<LI> <i>Language compatibilities:</i><BR>\nPAL language is based on Ada and supports most tasking constructs\n\tof Ada.  Also supports modeling of data values through \n\tlimited symbolic evaluation (also known as ``value flattening''). \n\tDoes not support many Ada features unrelated to tasking; in\n\tparticular, the 'package' construct is not supported.\n<P>\n<LI> <i>Footprint:</i>\n\t<OL><LI> <i>Source distribution</i> 400 kB (compressed)\n\t    <LI> <i>Full sources, binaries, and examples</i> 48 MB\n\t</OL>\n<P>\n\tSources are exclusive of the Lisp compiler.\n<P>\n<LI> <i>Openness/integrability/source availability:</i><BR>\nSource code (Common Lisp and C) is provided.\n<P>\n<LI> <i>Extensibility:</i><BR>\nThis experimental prototype is not designed for\n\textension by end users, although there are reasonably clean\n\tinterfaces for extension or integration by developers.\n<P>\n<LI> <i>Pedigree: ARPA developed?</i><BR>\nDeveloped under NSF and ARPA sponsorship, including \n\ta subcontract to the ARPA Arcadia program.\n</OL>\n<P>\n<LI> <i>Contact person(s)</i>\n<blockquote> Michal Young<BR>\nDepartment of Computer Sciences<BR>\nPurdue University<BR>\nWest Lafayette, IN  47907<BR>\nyoung@cs.purdue.edu<BR>\nyeh@cs.purdue.edu<BR>\n(317) 494-6023<BR>\n(317) 494-0739 - fax\n</blockquote>\n<P>\n<LI> <i>Pointers to literature, demos, etc.:</i><BR>\nAll papers are available by anonymous ftp to phosphor.cs.purdue.edu,<BR>\ndirectory pub/arcadia/papers.  See manifest for contents.\n<UL><LI>   Wei Jen Yeh and Michal Young.  Compositional reachability\n\tanalysis of Ada programs using process algebra.  Preliminary\n\tversion appeared in Proceedings of \n\tthe Fourth ACM Symposium on Software Testing, Analysis,\n\tand Verification (TAV4), Victoria, BC, October 1991;\n\tthe ftp-able version is greatly revised and expanded\n\t(July 1993) and has been submitted for journal publication.\n<P>\n<LI>   Wei Jen Yeh and Michal Young, Redesigning Ada tasking programs\n\tfor analysis, SERC technical report TR-148-P, December 1993, \n\tsubmitted for publication.\n<P>\n<LI>   Wei Jen Yeh, Controlling State Explosion in Reachability\n\tAnalysis, SERC technical report TR-147-P, August 1993\n\t(Ph.D. Dissertation).\n<P>\n<LI>   Demonstrations on request.\n</UL>\n</OL>\n<P>\n<HR>\n<P>\n<ADDRESS>\n<A HREF=\"http://www.ics.uci.edu/Arcadia/\">The Arcadia Project\n&lt;arcadia-www@ics.uci.edu&gt;</A><BR>\nLast modified: Wed Nov 30 14:40:38 1994\n</ADDRESS>\n</BODY></HTML>\n", "encoding": "ascii"}