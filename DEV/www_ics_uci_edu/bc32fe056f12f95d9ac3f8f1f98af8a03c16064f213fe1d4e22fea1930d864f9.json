{"url": "https://www.ics.uci.edu/~raccoon/release/v2.0/readme.txt", "content": "\n---------------------------------------------------------------------\n RACCOON: A Peer-Based System for Data Integration and Sharing \n      The RACCOON Project, http://www.ics.uci.edu/~raccoon/\n                Release v 2.0\n                November 29, 2004\n\nCopyright (c) 2004 by Database Group\nDepartment of Computer Science \nUniversity of California, Irvine\nIrvine, CA 92697\n  \n   Qi Zhong (qzhong@ics.uci.edu)\n   Jia Li (jiali@ics.uci.edu)  \n   Chen Li (chenli@ics.uci.edu)\n   University of California, Irvine\n\n   Partially supported by the National Science Foundation under the\n   CAREER-Award Grant IIS-0238586.\n\n   Please send technical questions about this release to raccoon@ics.uci.edu .\n---------------------------------------------------------------------\n\nThis software was created by members of the Database Group at UC\nIrvine and is distributed free of charge. It is placed in the public\ndomain and permission is granted for anyone to use, duplicate, modify\nand redistribute it provided this notice is attached.\n  \nThere is absolutely NO WARRANTY OF ANY KIND with respect to this\nsoftware; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT WILL ANY PARTY BE LIABLE\nTO ANYONE FOR ANY DAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE,\nINCLUDING, WITHOUT LIMITATION, DAMAGES RESULTING FROM LOST DATA OR\nLOST PROFITS, OR FOR ANY SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES.\n\nThe package complies to the GNU copyright terms at\nhttp://www.gnu.org/copyleft/gpl.html. We include a copy of the terms\nin gpl.txt in this distribution package. It also complies to the\ncopyright terms of University of California, Irvine.\n  \nThe information in this software is subject to change without notice\nand should not be construed as a commitment by any employees of the\nDatabase Group or any other employee of University of California.\n---------------------------------------------------------------------\n\nA brief description of this demo is described in the following paper:\n\n  RACCOON: A Peer-Based System for Data Integration and Sharing. Chen\n  Li, Jia Li, Qi Zhong.  International Conference on Data Engineering\n  (ICDE), Demo Track, Boston MA, USA, March, 2004.\n---------------------------------------------------------------------\n\n- Introduction\n\n Traditional data-integration systems use a centralized mediation\n approach, in which a centralized mediator accepts user queries and\n collects information from heterogeneous sources to compute answers.\n Recent database applications are seeing the emerging need to support\n data integration and sharing in distributed, peer-based\n environments. In such an environment, autonomous peers (sources)\n connected by a network are willing to exchange data and services with\n each other.  The goal of the Raccoon Project is to allow these\n different information sources to share and query their data with each\n other.  This release includes the implementation of the Raccoon\n system as of the release date.  This readme file describes how to run\n the demo.\n\n- Platform Requirements:\n\n  Any Java-compatible environment with a Java 2 SDK.  (We tested the code \n  on Java(TM) 2 Runtime Environment, Standard Edition, version \"1.4.1_01\".)\n\n- Installation\n\n 1. Download the source code from http://www.ics.uci.edu/~raccoon/ .\n\n 2. Unzip the source code.\n\n 3. Type the following commands to compile the code.\n\n On a Windows environment:\n\n javac -classpath .;.\\lib\\nanoxml-2.1.1.jar;.\\lib\\BrowserLauncher.jar;.\\lib\\db2java.zip;.\\lib\\ifxjdbc.jar;.\\lib\\ifxjdbc-g.jar;.\\lib\\java_cup_v10k.zip;.\\lib\\mysql-connector-java-3.0.8-stable-bin.jar -d .\\class .\\Raccoon\\Raccoon.java\n rmic -classpath .;.\\lib\\nanoxml-2.1.1.jar;.\\lib\\BrowserLauncher.jar;.\\lib\\db2java.zip;.\\lib\\ifxjdbc.jar;.\\lib\\ifxjdbc-g.jar;.\\lib\\java_cup_v10k.zip;.\\lib\\mysql-connector-java-3.0.8-stable-bin.jar -d .\\class Raccoon.NET.NetModuleImpl\n \n On a Unix environment:\n \n javac -classpath .:./lib/nanoxml-2.1.1.jar:./lib/BrowserLauncher.jar:./lib/db2java.zip:./lib/ifxjdbc.jar:./lib/ifxjdbc-g.jar:./lib/java_cup_v10k.zip:./lib/mysql-connector-java-3.0.8-stable-bin.jar -d ./class ./Raccoon/Raccoon.java\n rmic -classpath .:./lib/nanoxml-2.1.1.jar:./lib/BrowserLauncher.jar:./lib/db2java.zip:./lib/ifxjdbc.jar:./lib/ifxjdbc-g.jar:./lib/java_cup_v10k.zip:./lib/mysql-connector-java-3.0.8-stable-bin.jar -d ./class Raccoon.NET.NetModuleImpl\n\n- Configuration\n\n Before starting to run the demo, you need to configure the\n peer-to-peer database network.  If you want to use some databases\n provided by the Raccoon Project, you can skip this step and go to the\n \"Running the demo\" step by using the provided files \"10001.xml\", ...,\n \"10005.xml\".  In this case, you will be using five peers running on\n two databases (MySQL) on two machines of the Raccoon Project.\n\n If you do want to set up your own peers and network, you need to do\n the following.  For each peer, create an XML file similar to the\n sample file \"10001.xml\" provided in the package.  The following is\n part of the example file 10004.xml.\n\n(1)  <PEERVIWER>\n(2)      <RMIPORT port = \"10004\"/>\n(3)      <NEIGHBOR ip=\"127.0.0.1\" port=\"10001\"/> \n(4)      <NEIGHBOR ip=\"127.0.0.1\" port=\"10005\"/> \n(5)      <DATABASE  system =\"MySQL\" host=\"128.195.38.176\" dbName = \"peerDB\" user=\"demo\" passwd=\"demo\" />\n(6)      <NODE_INFO>\n(7)     \t<NODE_INFO_NAME>OCHousing</NODE_INFO_NAME>\n(8)     \t<NODE_INFO_DESC>Orange County Housing</NODE_INFO_DESC>\n(9)     \t<NODE_INFO_BW>56Kbps</NODE_INFO_BW>\n(10)    \t<NODE_INFO_SIZE>100M</NODE_INFO_SIZE>\n(11)     \t<NODE_INFO_TYPE>Physical Data</NODE_INFO_TYPE>\n(12)    \t<RELATION name = \"OCHousing\" />\n(13)     </NODE_INFO>   \n(14) </PEERVIWER>\n\n\n Line (2) shows that this peer is using port 10004 to communicate with\n other peers. Any unoccupied port can be used here.\n\n Line (3) shows that this peer has a neighbor running on machine\n \"127.0.0.1\" and using port 10002.  You can specify any IP, but you\n have to make sure that there is a peer running on that IP with that\n port.  Notice that this machine is a remote machine, which is\n different from the machine on which you are running this demo.  Thus\n this port number is different from the RMI port number.\n\n Line (4) shows another neighbor peer.  (It happens to be on the same\n IP machine as the previous peer.  In general you can specify any IP\n machine with a port as a neighbor, as long as that a peer is really\n running on that port.)  If you run this demo with several peers on\n the same machine, then you need to specify the new IP address for all\n these peers' XML files.\n\n Line (5) specifies the database for the local peer. The system is\n MySQL and it is running on 128.195.38.176. The database name is\n \"peerDB\" using \"demo\" and \"demo\" as the user and password. Currently\n our system supports MySQL, Informix, and DB2.  The IP address is not\n limited on the local machine.  The following two databases examples\n are available for the demo:\n\n <DATABASE  system =\"MySQL\" host=\"CSE104g.ics.uci.edu\" dbName=\"peerDB\" user=\"demo\" passwd=\"demo\"/>\n <DATABASE  system =\"MySQL\" host=\"RESCUE15.ics.uci.edu\" dbName=\"peerDB\" user=\"demo\" passwd=\"demo\"/>\n\t\n !!!NOTICE!!!  You have to make sure that the username and password\n are correct and the user has the right to do queries on the database.\n In addition, KEEP THIS XML FILE PROPERLY, SINCE IT MAY CONTAIN\n INFORMATION ABOUT THE USER AND PASSWORD.\n\n Lines (6)~(13) specify the information about this local peer.\n\n Line (7) gives the name of the peer.\n\n Line (8) gives the description of peer.\n\n Line (9) shows the network bandwidth.  Currently this information is\n not used.\n\n Line (10) gives the size of the data set at this peer.\n\n Line (11) gives the type of the data set.\n\n Line (12) gives the name of the relation you want to share. This\n relation must be defined in the database specified in Line (5)\n\n- Running the Demo\n\n After writing configuration XML files (e.g. file 10001.xml) to\n specify the peer network, you can start each peer using the\n corresponding configuration file by typing the following command.\n (The following is using 10001.xml as an example.)\n\n Windows:\n  \n  java -cp .;.\\class;.\\lib\\nanoxml-2.1.1.jar;.\\lib\\BrowserLauncher.jar;.\\lib\\db2java.zip;.\\lib\\ifxjdbc.jar;.\\lib\\ifxjdbc-g.jar;.\\lib\\java_cup_v10k.zip;.\\lib\\mysql-connector-java-3.0.8-stable-bin.jar Raccoon.Raccoon 10001.xml\n  \n \n Unix:\n  java -cp .:./class:./lib/nanoxml-2.1.1.jar:./lib/BrowserLauncher.jar:./lib/db2java.zip:./lib/ifxjdbc.jar:./lib/ifxjdbc-g.jar:./lib/java_cup_v10k.zip:./lib/mysql-connector-java-3.0.8-stable-bin.jar Raccoon.Raccoon 10001.xml\n\n This command will start a peer with a PeerViewer browser on your\n system.\n\n Alternatively, you could also type the following command.\n\n Windows:\njava -cp .;.\\class;.\\lib\\nanoxml-2.1.1.jar;.\\lib\\BrowserLauncher.jar;.\\lib\\db2java.zip;.\\lib\\ifxjdbc.jar;.\\lib\\ifxjdbc-g.jar;.\\lib\\java_cup_v10k.zip;.\\lib\\mysql-connector-java-3.0.8-stable-bin.jar Raccoon.Raccoon 10001.xml dummy\n\n Unix:\n  java -cp .:./class:./lib/nanoxml-2.1.1.jar:./lib/BrowserLauncher.jar:./lib/db2java.zip:./lib/ifxjdbc.jar:./lib/ifxjdbc-g.jar:./lib/java_cup_v10k.zip:./lib/mysql-connector-java-3.0.8-stable-bin.jar Raccoon.Raccoon 10001.xml dummy\n\n This command will start the peer in a \"dummy\" mode.  In this mode,\n the peer can only answer queries from other peers, but it cannot\n issue queries.  In addition, there will be no browser for a peer\n in a dummy mode.  A peer in a dummy mode uses much fewer resources.\n\n Because of some limitations, currently our implementation can access\n only one database on a DBMS server from an IP address. Thus, if you\n are simulating multiple peers on one machine, either configure each\n of them to access different DBMS servers, or configure them to use\n the same database on the same DBMS server.\n\n- Functionalities:\n\n The current implementation provides the following features.\n\n o A user can navigate the peer network.  Each peer is represented by\n   a colored node in the browser, called PeerViewer.  By right\n   clicking each node and choosing \"Expand Node,\" the user can explore\n   its neighboring nodes. If the user puts the mouse on a node for a\n   second, all the information about the node will be listed on the\n   right-hand side, including the network bandwidth, relation schema,\n   etc.\n\n o The user can search in the network for relations that are \"similar\"\n   to a given relation.  This search can be done by right clicking the\n   local node and choosing \"Search Node.\"  The user needs to specify a\n   relation in the local database.  This search will be propagated in\n   the network.  For each peer, we use schema-mapping techniques to\n   identify relations that are \"similar\" to the given relation.  All\n   the peers with similar relations will be returned.\n\n o After a search is done, the system will return all the peers with\n   similar relations.  If the user is interested in a returned\n   relation, she can click the \"Add Mapping\" button, and the system\n   will compute an attribute-level mapping based on the similarity\n   between each pair of attributes.  (Each mapping is directed.)  The\n   user can validate the mapping, and add this mapping into the\n   system. This mapping will be stored in the two peers to be used to\n   answer an \"Extended Query\" (see below).\n\n o Querying the peers.  A user can issue queries on the system.  There\n   are two kinds of querying modes.\n\n  (1) Focused Querying Mode: The user can pose a query on peer\n      relations.  In this mode, the system will answer the query by\n      accessing the specified relations only, without expanding the\n      query to other relations.  For instance, suppose peer A has a\n      relation student(id, name), and peer B has a relation exam(id,\n      grade).  The user issues the following query:\n\n          SELECT A:student.name, B:exam.grade\n          FROM   A:student, B:exam\n          WHERE  A:student.id = B:exam.id;\n\n     Here each query should have a prefix to indicate the peer\n     name. Notice that each query statement should end with a\n     semicolon.\n\n     In the focused querying mode, the system will compute the answers\n     by using the two specified relations.\n\n (2) Extended Querying Mode.  In such a mode, for each query, a peer\n     with a specified relation will utilize available mappings of the\n     relation, and expand the \"subquery\" on this relation to other\n     relations that have mappings with this relation.  The motivation\n     of supporting this querying mode is to allow the user to get as\n     much information as possible to answer a user query.\n\n     For instance, in the example above, suppose peer B has a mapping\n     between B.exam with another relation \"exam2\" at a different peer\n     C.  Then peer B will translate the condition on B.exam to the\n     relation C.exam2 to get more information to answer the query.\n\n- Sample Testing Scripts\n\n If you want to do a quick test, you can use five peers provided by\n the Raccoon Project.  Currently these peers are running on two MySQL\n databases on two machines of the Raccoon Project at UC Irvine.\n Please contact the authors if you have problems starting these peers.\n To use these five peers, do the following:\n\n  1) Open a command line window and start a peer with 10001.xml.\n\n Windows:\n java -cp .;.\\class;.\\lib\\nanoxml-2.1.1.jar;.\\lib\\BrowserLauncher.jar;.\\lib\\db2java.zip;.\\lib\\ifxjdbc.jar;.\\lib\\ifxjdbc-g.jar;.\\lib\\java_cup_v10k.zip;.\\lib\\mysql-connector-java-3.0.8-stable-bin.jar Raccoon.Raccoon 10001.xml\n\n Unix:\n  java -cp .:./class:./lib/nanoxml-2.1.1.jar:./lib/BrowserLauncher.jar:./lib/db2java.zip:./lib/ifxjdbc.jar:./lib/ifxjdbc-g.jar:./lib/java_cup_v10k.zip:./lib/mysql-connector-java-3.0.8-stable-bin.jar Raccoon.Raccoon 10001.xml dummy\n\n  2) Open a command line windows and start a peer with 10002.xml.\n\n  3) Open a command line windows and start a peer with 10003.xml.\n\n  4) Open a command line windows and start a peer with 10004.xml.\n\n  5) Open a command line windows and start a peer with 10005.xml.\n\n Be sure to modify these five XML files to specify the IP address\n (your machine) properly. You don't have to modify anything if you\n are running all the peers on one machine.\n\n If you want to use your own database, you need to create the\n database.  You may use the commands in the file\n \"sample/sample-data.sql\" to create and populate the different\n tables/databases. \n \n\n You can use the queries in the file\n \"sample/test_script.txt\" to test searches and queries.\n\n- System Architecture\n\n The current system has five modules: Net, GUI, Resource Manager,\n Search Manager, and Query Manager, as illustrated by the file\n \"./architecture.jpg\"\n\n  (1) Net: This module does all the communication tasks among\n      different peers.  It is implemented using RMI.\n\n  (2) GUI: It displays the network and supports different\n      operations. It is based on GraphLayout library offered by\n      TouchGraph Inc.\n\n  (3) Resource Manager: It stores the following resources:\n        * Peers known to a local node;\n        * Mapping links created by user;\n        * An interface dealing with data stored in local databases.\n\n  (4) Search Manager: It supports searches for similar relations.\n      Currently we use a basic schema-mapping algorithm to compute\n      the similarity between two schemas.\n\n  (5) Query Manager: It processes user queries.  It contains a parser,\n      which parses an SQL query and builds a query tree.  It has an\n      engine that executes the query tree. In the implementation, we\n      do simple optimization, e.g., pushing selections and projections\n      down the tree.\n\n- Used Libraries:\n\n o java_cup and JLEX: used to generate the SQL Parser.\n\n o db2java.zip: JDBC driver for IBM DB2.\n\n o ifxjdbc.jar and ifxjdbc-g.jar: JDBC Driver for Informix.\n\n o mysql-connector-java-3.0.8-stable-bin.jar: JDBC Driver for MySQL.\n\n o nanoxml-2.1.1.jar: a lightweight XML parser.\n\n o BrowserLauncher.jar: a package to display an HTML page in a java\n   component.\n\n o TouchGraph: a GraphLayOut software to display a network. The\n   original package could be downloaded from www.touchgraph.com .  It\n   has been modified in this implementation.  The following are the\n   major changes:\n\n  * Change some methods in LB to \"public.\"  Otherwise we cannot extend\n    them to call their methods.\n\n  * Change Node and LBNode to be \"implements Serializable,\" because we\n    are using RMI.\n\n  * Node has edge info in it. When you pass a node, you pass the edge\n    along with it.\n\n  We unpack the code and put it under the com/ subdirectory.\n  \nFor the latest information about the Raccoon Project, visit its home page:\n\n  http://www.ics.uci.edu/~raccoon\n\nEnjoy.\n\nLast updated: November 29, 2004.", "encoding": "ascii"}