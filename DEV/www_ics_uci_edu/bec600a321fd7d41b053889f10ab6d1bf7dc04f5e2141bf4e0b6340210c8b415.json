{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/make/matlab.mak", "content": "# file: matlab.mak\n# description: Build MATALB toolbox\n# author: Andrea Vedaldi\n\n# Copyright (C) 2013-14 Andrea Vedaldi.\n# Copyright (C) 2007-12 Andrea Vedaldi and Brian Fulkerson.\n# All rights reserved.\n#\n# This file is part of the VLFeat library and is made available under\n# the terms of the BSD license (see the COPYING file).\n\n# MATLAB support is enabled if $(MEX) is executable and if MATLAB root\n# can be deduced from the output of `$(MEX) -v`. Therefore setting MEX to\n# the empty string disables MATLAB support.\n\nMEX ?= mex\nMATLAB_PATH ?= $(subst /bin/mex,,$(realpath $(shell which '$(MEX)')))\nMATLAB_EXE ?= \"$(MATLAB_PATH)/bin/matlab\"\nMATLAB_VER ?= 0 # will be determined automatically\n\n# transform in immediate for efficiency\nMATLAB_PATH := $(MATLAB_PATH)\n\n# if expand to empty string, set to empty string for use with ifdef\nifeq ($(MATLAB_PATH),)\nMATLAB_PATH=\nendif\n\nifdef MATLAB_PATH\nall: mex-all matlab-all\nclean: mex-clean matlab-clean\narchclean: mex-archclean matlab-archclean\ndistclean: mex-distclean matlab-distclean\nendif\n\ninfo: mex-info matlab-info\n\n# With 2014a the new mex uses a revamped configuration system. It also\n# breaks in subtle way how variables need to be escaped when passed to the\n# mex command.\n\n# --------------------------------------------------------------------\n#                                                Obtain MATLAB version\n# --------------------------------------------------------------------\n\nifeq ($(ARCH),maci)\nMEX_SUFFIX := mexmaci\nendif\n\nifeq ($(ARCH),maci64)\nMEX_SUFFIX := mexmaci64\nendif\n\nifeq ($(ARCH),glnx86)\nMEX_SUFFIX := mexglx\nendif\n\nifeq ($(ARCH),glnxa64)\nMEX_SUFFIX := mexa64\nendif\n\nMEX_BINDIR := toolbox/mex/$(MEX_SUFFIX)\n\n# generate the mex-dir target\n$(eval $(call gendir, mex, $(MEX_BINDIR)))\n\n# Cache an integer representing MATLAB's version\n$(MEX_BINDIR)/matlabver.mak: $(mex-dir)\n\trm -f \"$(MEX_BINDIR)/matlabver.mak\"\n\t$(MATLAB_EXE) -nodesktop -nosplash -nojvm \\\n\t-r \\\n\"f=fopen('$(MEX_BINDIR)/matlabver.mak','w');\"\\\n\"fprintf(f,'MATLAB_VER=%d',[1e4 1e2 1]*sscanf(version,'%d.%d.%d'));fclose(f);exit();\"\n\nifdef MATLAB_PATH\nifeq ($(filter $(no_dep_targets), $(MAKECMDGOALS)),)\n-include $(MEX_BINDIR)/matlabver.mak\nendif\nendif\n\nifeq ($(call gt,$(MATLAB_VER),80300),)\n# new style\n$(info Detected MATLAB 2014a or greater: adjusting escape method for MEX)\nescape =$(1)\nelse\nifeq ($(call gt,$(MATLAB_VER),1),)\n# old style\n$(info Detected MATLAB 2013b or earlier: adjusting escape method for MEX)\nescape =$(subst $$,\\\\$$,$(1))\nelse\n$(info The MALTAB version will be detected in the next phase of Make)\nendif\nendif\n\n# --------------------------------------------------------------------\n#                                                  Prepare MEX options\n# --------------------------------------------------------------------\n#\n# MATLAB provides the MEX command to compile and link MEX files. MEX is\n# in fact a wrapper of the host compiler. By itself, it understand a\n# set of standard compiler flags, but not, in general, flags which are\n# specific to the underlying complier.\n#\n# The MEX command is called as follows:\n#\n#   $(MEX) $(MEX_FLAGS) $(MEX_CFLAGS) $(MEX_LDFLAGS)\n#\n# where\n#\n# * MEX_CLFAGS are standard compiler flags such as -I (include path).\n# * MEX_LDFLAGS are standard linker flags such as -L (library path)\n#   and -l (link library)\n# * MEX_FLAGS are other MEX flags such as -v (verbose). This variable\n#   is also used to contain overrides for the variables used\n#   internally by MEX.\n#\n# The variables STD_CLFAGS and STD_LDFLAGS contain settings which are\n# specific to one complier (e.g. GCC or clang). To pass these to MEX,\n# the following is appended to MEX_FLAGS, and ultimately to the MEX\n# command line:\n#\n#   CFLAGS='$$CFLAGS $(STD_CFLAGS)'\n#   LDFLAGS='$$LDFLAGS $(STD_LDFLAGS)'\n#\n# This causes MEX to append $(STD_CLFAGS) and $(STD_LDFLAGS) to its\n# default settings.\n#\n# While this usually achieves the desired effects, some versions of\n# MATLAB may not be compatible with certain compilers (e.g. MATLAB\n# 2013a and Xcode 5.0 and Mac OS X 10.9). Fixing this requires\n# changing CLFAGS and LDFLAGS completely (i.e.  not just appending to\n# their default values).\n\nMEX_ARCH = $(ARCH)\nMEX_CFLAGS = $(LINK_DLL_CFLAGS) -Itoolbox\nMEX_LDFLAGS = $(subst bin/$(ARCH),toolbox/mex/$(MEX_SUFFIX),$(LINK_DLL_LDFLAGS)) -lm\nMEX_FLAGS = \\\n$(MEXFLAGS) \\\n-$(MEX_ARCH) \\\n$(if $(VERB),-v,) \\\n$(if $(DEBUG),-g,-O) \\\n$(if $(PROFILE),-g -O,)\n\n# Mac OS X on Intel 32 bit processor\nifeq ($(ARCH),maci)\nMEX_FLAGS += CC='$(CC)'\nMEX_FLAGS += LD='$(CC)'\n# a hack to support recent Xcode/clang/GCC versions on old MATLABs\nMEX_FLAGS += CFLAGS='\\\n-arch i386 \\\n-fno-common \\\n-fexceptions \\\n$(call escape,$(STD_CFLAGS))'\nMEX_FLAGS += LDFLAGS='\\\n-arch i386 \\\n-Wl,-syslibroot,$(SDKROOT) \\\n-mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET) \\\n-bundle -Wl,-exported_symbols_list,$(MATLAB_PATH)/extern/lib/maci/mexFunction.map \\\n$(if $(DISABLE_OPENMP),,-L$(MATLAB_PATH)/sys/os/$(ARCH)/) \\\n$(call escape,$(STD_LDFLAGS))'\nendif\n\n# Mac OS X on Intel 64 bit processor\nifeq ($(ARCH),maci64)\nMEX_FLAGS += -largeArrayDims\nMEX_FLAGS += CC='$(CC)'\nMEX_FLAGS += LD='$(CC)'\nMEX_FLAGS += CFLAGS='\\\n-arch x86_64 \\\n-fno-common \\\n-fexceptions \\\n$(call escape,$(STD_CFLAGS))'\nMEX_FLAGS += LDFLAGS='\\\n-arch x86_64 \\\n-Wl,-syslibroot,$(SDKROOT) \\\n-mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET) \\\n-bundle -Wl,-exported_symbols_list,$(MATLAB_PATH)/extern/lib/maci64/mexFunction.map \\\n$(if $(DISABLE_OPENMP),,-L$(MATLAB_PATH)/sys/os/$(ARCH)/) \\\n$(call escape,$(STD_LDFLAGS))'\nendif\n\n# Linux on 32 bit processor\nifeq ($(ARCH),glnx86)\nMEX_FLAGS += CFLAGS='$$CFLAGS $(call escape,$(STD_CFLAGS))'\nMEX_FLAGS += LDFLAGS='$$LDFLAGS $(call escape,$(STD_LDFLAGS))'\nendif\n\n# Linux on 64 bit processorm\nifeq ($(ARCH),glnxa64)\nMEX_FLAGS += -largeArrayDims\nMEX_FLAGS += CFLAGS='$$CFLAGS $(call escape,$(STD_CFLAGS))'\nMEX_FLAGS += LDFLAGS='$$LDFLAGS $(call escape,$(STD_LDFLAGS))'\nendif\n\n# For efficiency reasons, immediately expand this variable once\nMEX_FLAGS := $(MEX_FLAGS)\n\n# --------------------------------------------------------------------\n#                                                         Sanity check\n# --------------------------------------------------------------------\n\nerr_no_mex_suffix = $(shell echo \"** Could not set MEX_SUFFIX for ARCH = $(ARCH)\"  1>&2)\nerr_no_mex_suffix +=no_mex_suffix\n\nifeq ($(MEX_SUFFIX),)\ndie:=$(error $(err_no_mex_suffix))\nendif\n\n# --------------------------------------------------------------------\n#                                                                Build\n# --------------------------------------------------------------------\n\n.PHONY: mex-all, mex-dir, mex-info, mex-test\n.PHONY: mex-clean, mex-distclean, mex-archclean\nno_dep_targets += mex-dir mex-info mex-test\nno_dep_targets += mex-clean mex-distclean mex-archclean\n\nmex_sub := $(shell find $(VLDIR)/toolbox -type d)\nmex_src := $(shell find $(VLDIR)/toolbox -name \"*.c\")\nmex_tgt := $(addprefix $(MEX_BINDIR)/,\\\n\t   $(notdir $(mex_src:.c=.$(MEX_SUFFIX)) ) )\nmex_dep := $(mex_tgt:.$(MEX_SUFFIX)=.d)\nmex_dll := $(MEX_BINDIR)/lib$(DLL_NAME).$(DLL_SUFFIX)\n\nifdef MATLAB_PATH\narch_bins += $(mex_tgt) $(MEX_BINDIR)/lib$(DLL_NAME).$(DLL_SUFFIX)\ncomm_bins +=\ndeps += $(mex_dep)\nendif\n\nvpath vl_%.c $(mex_sub)\n\nmex-all: $(mex_dll) $(mex_tgt)\n\n# Create a copy of the VLFeat DLL that links to MATLAB OpenMP library\n# (Intel OMP 5) rather than the system one. The Intel library is\n# binary compatible with GCC. This avoids running two OpenMP\n# subsystems when VLFeat runs within MATLAB.\n\n$(MEX_BINDIR)/lib$(DLL_NAME).dylib : $(mex-dir) $(dll_obj)\n\t$(call C,CC)                                                            \\\n\t    -dynamiclib\t\t\t\t\t\t\t\t\\\n\t    -undefined suppress\t\t\t\t\t\t\t\\\n\t    -flat_namespace\t\t\t\t\t\t\t\\\n\t    -install_name @loader_path/lib$(DLL_NAME).dylib\t\t\t\\\n\t    -compatibility_version $(VER)\t\t\t\t\t\\\n\t    -current_version $(VER)\t\t\t\t\t\t\\\n\t    -isysroot $(SDKROOT)\t\t\t\t\t\t\\\n\t    $(dll_obj)\t\t\t\t\t\t\t\t\\\n\t    $(filter-out -fopenmp, $(DLL_LDFLAGS))                              \\\n\t    $(if $(DISABLE_OPENMP),,-L$(MATLAB_PATH)/bin/$(ARCH)/)              \\\n\t    $(if $(DISABLE_OPENMP),,-L$(MATLAB_PATH)/sys/os/$(ARCH)/ -liomp5)\t\\\n\t   -o $@\n\n$(MEX_BINDIR)/lib$(DLL_NAME).so : $(mex-dir) $(dll_obj)\n\t$(call C,CC) -shared\t\t\t\t\t\t\t\\\n\t    $(dll_obj)\t\t\t\t\t\t\t        \\\n\t    $(filter-out -fopenmp, $(DLL_LDFLAGS))                              \\\n\t    $(if $(DISABLE_OPENMP),,-L$(MATLAB_PATH)/bin/$(ARCH)/)              \\\n\t    $(if $(DISABLE_OPENMP),,-L$(MATLAB_PATH)/sys/os/$(ARCH)/ -liomp5)   \\\n\t   -o $(@)\n\n$(MEX_BINDIR)/%.d : %.c $(mex-dir)\n\t$(call C,CC)\t\t\t\t\t\t\t\t\\\n\t    -MM\t\t\t\t\t\t\t\t\t\\\n\t    -MF \"$(@)\"\t\t\t\t\t\t\t\t\\\n\t    -MT '$(MEX_BINDIR)/$*.$(MEX_SUFFIX) $(MEX_BINDIR)/$*.d'\t\t\\\n\t    -I\"$(MATLAB_PATH)/extern/include\"\t\t\t\t\t\\\n\t    $(MEX_CFLAGS) \"$(<)\"\n\n$(MEX_BINDIR)/%.$(MEX_SUFFIX) : %.c $(mex-dir) $(mex_dll)\n\t$(call C,MEX)\t\t\t\t\t\t\t\t\\\n\t    $(MEX_FLAGS)\t\t\t\t\t\t\t\\\n\t    $(MEX_CFLAGS)\t\t\t\t\t\t\t\\\n\t    \"$(<)\"\t\t\t\t\t\t\t\t\\\n\t    $(MEX_LDFLAGS)\t\t\t\t\t\t\t\\\n\t       -outdir \"$(dir $(@))\"\n\nmex-info:\n\t$(call echo-title,MATLAB support)\n\t$(if $(MATLAB_PATH),\\\n\t  @echo \"MATLAB support enabled (MEX found)\",\\\n\t  @echo \"MATLAB support disabled (MEX not found)\")\n\t$(call dump-var,mex_src)\n\t$(call dump-var,mex_tgt)\n\t$(call dump-var,mex_dep)\n\nmex-clean:\n\trm -f $(mex_dep)\n\trm -f $(MEX_BINDIR)/matlabver.mak\n\nmex-archclean: mex-clean\n\trm -rf $(MEX_BINDIR)\n\nmex-distclean:\n\trm -rf \"toolbox/mex\" ;\n\nmex-test: mex-all\n\tcd toolbox ; \\\n\t$(MATLAB_EXE) \\\n\t    -$(ARCH) -nodesktop -nosplash \\\n\t    -r \"clear mex;vl_setup test;r=vl_test();if(any(~[r.succeded])),disp('MEX testing failed');end;exit\"\n\n# --------------------------------------------------------------------\n#                                                  Prefix-less M files\n# --------------------------------------------------------------------\n# Populate the directory toolbox/noprefix with links to the MEX / M\n# files without the vl_ prefix.\n\nm_src := $(shell find $(VLDIR)/toolbox -name \"vl_*.m\")\nm_lnk := $(addprefix toolbox/noprefix/,                              \\\n          $(filter-out setup.m,                                      \\\n          $(filter-out help.m,                                       \\\n          $(filter-out version.m,                                    \\\n          $(filter-out root.m,                                       \\\n          $(filter-out demo.m,                                       \\\n          $(filter-out compile.m,                                    \\\n          $(filter-out test_%,                                       \\\n          $(filter-out demo_%,                                       \\\n          $(filter-out tune_%,                                       \\\n          $(subst vl_,,$(notdir $(m_src)))))))))))))\nm_lnk += $(addprefix toolbox/noprefix/,                              \\\n\t  $(subst, $(MEX_SUFFIX),.m,$(subst vl_,,$(notdir $(mex_tgt)))))\n\nvpath vl_%.m $(shell find $(VLDIR)/toolbox -type d)\n\n.PHONY: matlab-all, matlab-noprefix, matlab-info\n.PHONY: matlab-clean, matlab-archclean, matlab-distclean\nno_dep_targets += matlab-all matlab-noprefix matlab-info\nno_dep_targets += matlab-clean matlab-archclean matlab-distclean\n\nifdef MATLAB_PATH\narch_bins +=\ncomm_bins += $(m_lnk)\ndeps +=\nendif\n\nmatlab-all: matlab-noprefix\n\n# generate matlab-noprefix-dir target\n$(eval $(call gendir, matlab-noprefix, toolbox/noprefix))\n\nmatlab-noprefix: $(m_lnk)\n\ntoolbox/noprefix/%.m : vl_%.m $(matlab-noprefix-dir)\n\t@upperName=`echo \"$*\" | tr [a-z]  [A-Z]` ;              \\\n\techo \"function varargout = $*(varargin)\" > \"$@\" ;       \\\n\tcat \"$<\" | sed -n -e '/^function/b' -e '/^%.*$$/p'      \\\n             -e '/^%.*$$/b' -e q >> \"$@\" ;                      \\\n\techo \"[varargout{1:nargout}] = vl_$*(varargin{:});\" >> \"$@\" ;\n\nmatlab-test:\n\t@echo \"Testing Matlab toolbox\" ;\t\t\t\\\n\tcd toolbox ;\t\t\t\t\t\t\\\n\tRESULT=$$(\t\t\t\t\t\t\\\n\t$(MATLAB_EXE) -$(ARCH) -nodesktop -r\t\t\t\\\n\t\"vl_setup('xtest','verbose') ; vl_test ; exit\") ;\t\\\n\techo \"$$RESULT\" ;\t\t\t\t\t\\\n\tif test -n \"$$(echo \\\"$$RESULT\\\" | grep \\\"failed\\\")\" ;\t\\\n\tthen\t\t\t\t\t\t\t\\\n\t  echo \"Matlab toolbox test encountered an error!\" ;\t\\\n\t  exit 1 ;\t\t\t\t\t\t\\\n\telse\t\t\t\t\t\t\t\\\n\t  echo \"Matlab toolbox test completed successfully!\" ;\t\\\n\tfi\n\nmatlab-info:\n\t$(call dump-var,m_src)\n\t$(call dump-var,m_lnk)\n\t$(call echo-var,mex_dll)\n\t$(call echo-var,MATLAB_PATH)\n\t$(call echo-var,MATLAB_EXE)\n\t$(call echo-var,MATLAB_VER)\n\t$(call echo-var,MEX)\n\t$(call echo-var,MEX_FLAGS)\n\t$(call echo-var,MEX_CFLAGS)\n\t$(call echo-var,MEX_LDFLAGS)\n\t@echo\n\nmatlab-clean:\n\nmatlab-archclean: matlab-clean\n\nmatlab-distclean:\n\trm -rf toolbox/noprefix\n\n# Emacs:\n# Local variables:\n# mode: Makefile\n# End:\n", "encoding": "ascii"}