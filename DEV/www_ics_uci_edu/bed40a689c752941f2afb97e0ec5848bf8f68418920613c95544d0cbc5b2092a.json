{"url": "https://www.ics.uci.edu/~thornton/ics46/ProjectGuide/Project2/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 46 Spring 2018, Project #2: Time Waits for No One</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 46 Spring 2018 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 46 Spring 2018<br />\r\n   Project #2: <i>Time Waits for No One</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, May 4, 11:59pm</i></b></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Introduction</p>\r\n\r\n<p>In business or scientific contexts, it's sometimes very costly to make changes to the way that you're doing things, yet sometimes the changes you consider might yield great benefits.  Unfortunately, you don't always know if they'll yield those benefits without some experimentation.  But if the experimentation is too costly, you might never be willing to pay the cost of finding out whether the changes you're considering are worthwhile or not.</p>\r\n\r\n<p>Computers have a role to play in situations like this.  If you can write a <i>simulation</i> that models reality well enough that it can demonstrate how things would turn out in various scenarios, you might be able to more cheaply find the answer you're looking for &mdash; should I make this change or not? &mdash; and, if it turns out to be a positive one, you can proceed.</p>\r\n\r\n<p>In this project, we'll write a simulation like this one.  Suppose that a chain of big-box retail stores is considering a rearrangement of the way that customers go through the check-out process, in hopes of processing customers more efficiently, helping them spend less time waiting in line, and keeping their business from being lost to more efficient competitors.  To aid in that analysis, you'll build a program that will simulate two different arrangements of lines and registers, generating a log of the movement of customers throughout the simulation and, at the end, overall statistics.</p>\r\n\r\n<p>Along the way, you'll implement a doubly-linked list with head and tail pointers, then use it as the basis for a <i>queue</i>, which you'll then use in your simulation.  This will give you additional practice with the kind of thinking and techniques you need to implement data structures, while also building your experience with some new areas of C++ that you may not have used a lot previously, such as templates, public and private inheritance, and move semantics.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Getting started</p>\r\n\r\n<p>Before you begin work on this project, there are a couple of chores you'll need to complete on your ICS 46 VM to get it set up to proceed.</p>\r\n\r\n<p class=\"subtitle\">Refreshing your ICS 46 VM environment</p>\r\n\r\n<p>Even if you previously downloaded your ICS 46 VM, you will probably need to refresh its environment before proceeding with this project.  Log into your VM and issue the command <b>ics46 version</b> to see what version of the ICS 46 environment you currently have stored on your VM.  Note, in particular, the timestamp; if you see a version with a timestamp older than the one listed below, you'll want to refresh your environment by running the command <b>ics46 refresh</b> to download the latest one before you proceed with this project.</p>\r\n\r\n<blockquote><pre>\r\n2018-04-15 21:17:41\r\nICS 46 Project #2 template added (with one file update)\r\n</pre></blockquote>\r\n\r\n<p>If you're unable to get outgoing network access to work on the ICS 46 VM &mdash; something that afflicts a handful of students each quarter &mdash; then the <b>ics46 refresh</b> command won't work, but an alternative approach is to download the latest environment from the link below, then to upload the file on to your ICS 46 VM using SCP.  (See the <a href=\"../Project0\">Project #0</a> write-up for more details on using SCP.)  Once the file is on your VM, you can run the command <b>ics46 refresh_local NAME_OF_ENVIRONMENT_FILE</b>, replacing <b>NAME_OF_ENVIRONMENT_FILE</b> with the name of the file you uploaded; note that you'd need to be in the same directory where the file is when you run the command.</p>\r\n\r\n<ul>\r\n  <li><a href=\"../../vm/ics46-2018spring-environment.tar.gz\">ics46-2018spring-environment.tar.gz</a></li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Creating your project directory on your ICS 46 VM</p>\r\n\r\n<p>A project template has been created specifically for this project, containing a similar structure to the <b>basic</b> template you saw in <a href=\"../Project0\">Project #0</a>, but including a starting point that you must use.  So you'll absolutely need to use the <b>project2</b> template for this project, as opposed to the <b>basic</b> one.</p>\r\n\r\n<p>Decide on a name for your project directory, then issue the command <b>ics46 start <i>YOUR_CHOSEN_PROJECT_NAME</i> project2</b> to create your new project directory using the <b>project2</b> template.  (For example, if you wanted to call your project directory <b>proj2</b>, you would issue the command <b>ics46 start proj2 project2</b> to create it.)  Now you're ready to proceed!</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The first step: Implementing the necessary data structures</p>\r\n\r\n<p>Your first step is to implement the necessary data structures to support your application.  Since we're building a simulation that's fundamentally centered around people standing in line, a queue implementation is what we need here.  This part will be tested and graded separately &mdash; and you can obtain a substantial proportion of the correctness score for this project for submitting just this part, even if you don't build the application around it.  But the implementation will need to be painstakingly complete and correct; we'll be doing the kind of testing we did in <a href=\"../Project0\">Project #0</a> when we grade it.</p>\r\n\r\n<p>In the <b>core</b> directory within your project directory, you'll find two files that you'll be most interested in:</p>\r\n\r\n<ul>\r\n  <li><b>Queue.hpp</b>, which contains a class template <b>Queue&lt;ValueType&gt;</b>.  As luck would have it, I'm actually giving you a full implementation of this, which you'll need to leave as-is.  (You can add things to it, if you'd like, but you can't make any changes to existing parts of its public interface, because we'll be running unit tests that need to be able to compile and run.)  Now, the fact that you're being given the full implementation of this isn't quite the good news that it sounds like: All it does is inherit its implementation from a base class, which you'll have to implement.</li>\r\n  <li><b>DoublyLinkedList.hpp</b>, which contains a class template <b>DoublyLinkedList&lt;ValueType&gt;</b>.  The public interface of this one is designed &mdash; and, like <b>Queue</b>, you'll need to leave the existing parts of the public interface as-is, though you can add anything else you'd like &mdash; but the implementation is mainly stubs, sufficient to make the unit tests compile and run, but not to make them pass.  <b>DoublyLinkedList</b> forms the basis of the <b>Queue</b> implementation, but also includes a fair amount of additional functionality that will not be required by <b>Queue</b>.</li>\r\n</ul>\r\n\r\n<p>In the <b>gtest</b> directory, you'll find a collection of sanity-checking unit tests for both <b>Queue</b> and <b>DoublyLinkedList</b>, which demonstrates how each of the member functions are expected to behave and interact with one another.  The depth of the testing is fairly light &mdash; while the sanity-checking tests touch all of the basic functionality, there are a lot of interesting cases missing, so you'll want to be sure that you write your own <b>DoublyLinkedList</b> tests, as well.  Note, too, that your best bet is not to change any of the sanity-checking unit tests &mdash; other than perhaps commenting some of them out and then bringing them back later, if you need to run some of them in the absence of the others &mdash; because they're a fundamental way to demonstrate that your implementation will compile against our unit tests, so we'll be able to test it.</p>\r\n\r\n<p>For this part, any code you write needs to be in the <b>core</b> directory.  There's a good chance you won't be making changes to any files except <b>DoublyLinkedList.hpp</b>, but even if you choose to add files, you would add them in the <b>core</b> directory.  Avoid the temptation to create a <b>DoublyLinkedList.cpp</b>, though; templates are generally written entirely in header files.  (See the <a href=\"../../Notes/Templates\">Templates</a> notes if you need a refresher on why.)</p>\r\n\r\n<p class=\"subtitle\">Features of your DoublyLinkedList class template</p>\r\n\r\n<p>Your DoublyLinkedList class template must implement all of the public member functions that have been declared within it already, which include all of the following:</p>\r\n\r\n<ul>\r\n  <li>A constructor that initializes a list to be empty.</li>\r\n  <li>Copy and move constructors that initialize lists from existing ones.</li>\r\n  <li>Copy and move assignment operators that change existing lists to be like other existing ones.</li>\r\n  <li>A destructor that cleans up the memory owned by the list.</li>\r\n  <li>Adding and remove values at either end.</li>\r\n  <li>Accessing the values at either end.</li>\r\n  <li>Tracking and reporting its size.</li>\r\n  <li>Support for two kinds of <i>iterators</i>: one that allows the contents of the list to be both accessed and modified, and another that allows them to be accessed but not modified.  (See the section titled <i>Iterators</i> below for more information about this requirement.)</li>\r\n</ul>\r\n\r\n<p>Of course, partial credit is available for a partial implementation, though some features are going to be more fundamental than others.  For example, if we can't construct a list, there's not much else we can do to test it; if the only thing missing is the move constructors or the iterators, there's still a lot we can test.  Of paramount importance is that our unit tests can compile.  Be sure your code compiles against all of the sanity-checking unit tests, even if they don't all pass; it we can't compile our tests, we can't run them, and we're not going to be willing or able to spend time debugging your code to make them compile.</p>\r\n\r\n<p class=\"subtitle\">Limitations</p>\r\n\r\n<p>When you work on <b>Queue</b> and <b>DoublyLinkedList</b>, you are not permitted to use any part of the C++ Standard Library.  Do not submit a version of <b>DoublyLinkedList.hpp</b>, <b>Queue.hpp</b> (or any file that they include) that includes any C++ Standard Library headers.  (This includes things like adding a <b>print()</b> member function that requires <b>&lt;iostream&gt;</b>.  Remove anything like that before you submit your work.)</p>\r\n\r\n<p>The nodes in your <b>DoublyLinkedList</b> must remain completely private.  There should be no part of the public interface that exposes the notion of <b>Node</b>, because the nodes in a linked list are an implementation detail; exposing nodes to code outside of <b>DoublyLinkedList</b> invites code that breaks the list's fundamental assumptions, such as introducing cycles or losing links to nodes and causing memory leaks.  This is why the provided version of <b>DoublyLinkedList</b> has its <b>Node</b> struct declared as a private member of <b>DoublyLinkedList</b>, why there are iterators (to provide a way for code outside of <b>DoublyLinkedList</b> to iterate through a list without manually twiddling pointers), and why the iterator classes are also declared within <b>DoublyLinkedList</b>; that way iterators can see the nodes, but no code outside of <b>DoublyLinkedList</b> can.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The second step: Writing the application</p>\r\n\r\n<p>In the <b>app</b> directory, you'll write the rest of your code, a program that performs the following simulation.  The format of the input and output are described in detail and need to be followed carefully; spelling, capitalization, and spacing are all relevant and must be correct for full credit.  Your simulator will read all of its input from <b>std::cin</b> and write all of its output to <b>std::cout</b>.  While you may want to use the technique of <i>redirection</i> to use files for this purpose (see below), your simulator will always use <b>std::cin</b> and <b>std::cout</b>.</p>\r\n\r\n<p class=\"subtitle\">What are we simulating?</p>\r\n\r\n<p>In our hypothetical big-box retail store, customers shop and choose the merchandise they want to buy.  Each customer then proceeds to get into a <i>line</i> to wait to be checked out.  When there is an available cashier, the customer goes to the <i>register</i> where that cashier is waiting.  When the cashier is finished checking the customer out, the customer exits the register and is considered finished.</p>\r\n\r\n<p>What we're interested in doing is tracking these movements: when customers enter lines, exit lines and enter registers, and finally exit registers.  We'll then report various statistics at the conclusion of the simulation, to summarize the overall outcome.</p>\r\n\r\n<p class=\"subtitle\">Arrangements of lines and registers</p>\r\n\r\n<p>There are two different arrangements of lines and registers that our simulation will support.</p>\r\n\r\n<ol>\r\n  <li>One or more registers, each with its own separate line.  A customer in a particular line will only ever proceed to the corresponding register.</li>\r\n  <li>One or more registers, with one shared line feeding customers to all of them.</li>\r\n</ol>\r\n\r\n<p class=\"subtitle\">The input</p>\r\n\r\n<p>First of all, you may freely assume that the input given to your simulation will match the description below.  It may obviously be different than what's shown here, but it will always follow all of the rules here.  Your program is free to do anything you'd like &mdash; up to and including crashing &mdash; in the case that the input is invalid.</p>\r\n\r\n<p>The simulator's input begins with what we'll call the <i>setup section</i>, which specifies the parameters that control how the simulation will run.  The setup section looks like this &mdash; the italiczed portions are included here for descriptive purposes, but are not included in the actual input.</p>\r\n\r\n<blockquote><pre>\r\n4       <i>the length of the simulation, in minutes</i>\r\n3       <i>the number of registers</i>\r\n3       <i>the maximum line length, beyond which customers be lost</i>\r\nM       <i>S for a single line, M for multiple lines (one for each register)</i>\r\n40      <i>register #1 takes 40 seconds to process a customer</i>\r\n50      <i>register #2 takes 50 seconds to process a customer</i>\r\n30      <i>register #3 takes 30 seconds to process a customer</i>\r\n</pre></blockquote>\r\n\r\n<p>There are a few notes to be aware of:</p>\r\n\r\n<ul>\r\n  <li>When we talk about the <i>length of the simulation</i>, we don't actually intend for the simulation to take that long to run.  The goal is for the simulation to give a quick answer to the question of \"What would a day in my store look like if we arranged things like this?\"</li>\r\n  <li>We'll say that each register has a <i>register number</i> and that they are numbered consecutively starting from 1.  Similarly, lines will have a <i>line number</i> and they're also numbered consecutively starting from 1.</li>\r\n  <li>The simulation length is given in minutes, while the processing times for each register are given in seconds.</li>\r\n</ul>\r\n\r\n<p>After reading the setup section of the input, your simulator will have what it needs to set things up and get started.  From there, the rest of the input specifies <i>customer arrivals</i>.  Each line in the customer arrival section of the input consists of two numbers: a positive number of customers and the time that these customers arrival.  (Time in our simulation is always measured in terms of the number of seconds since the simulation started.)  You can assume that the time associated with each line describing an arriving of customers will be greater than the time associated with the previous one.</p>\r\n\r\n<p>The input will always end with a line consisting of the word <b>END</b>.  That doesn't mean that the simulation should end immediately; it just means that there are no more customer arrivals.</p>\r\n\r\n<p class=\"subtitle\">The movement of customers through the simulation</p>\r\n\r\n<p>So that we can all agree on the proper output of the simulation, we'll need to agree on the precise details of how customers move through the simulation.  In the interest of keeping things simple, we'll take some liberties with reality &mdash; customers won't always do the smartest thing, we'll ignore how long it takes for customers to physically move around, and so on.  Also, all actions are considered to have happened at discrete times measured in an integer number of seconds since the start of the simulation; something might happen at time 10 or time 11, but never at time 10.5.</p>\r\n\r\n<p></p>\r\n\r\n<ul>\r\n  <li>In any given second of simulation time, customer arrivals are always considered before customers are moved into and out of registers.</li>\r\n  <li>When <i>n</i> customers arrive at a particular time, we assume that they're separate &mdash; they each have a shopping basket and are interested in engaging in a separate transaction.  Each of them has a decision to make and they make them one right after the other:\r\n    <ul>\r\n      <li>The customer chooses the shortest line and enters it.  Note that this is based only on how many customers are in each line; the presence or absence of a customer at any registers is not considered.  When there is a tie (i.e., two lines are equally the shortest), the customer will always choose the line with the smallest line number (e.g., if lines 3 and 7 are equally the shortest, the customer will enter line 3).</li>\r\n      <li>If all of the lines are the maximum length specified in the setup section, the customer is not willing to wait, and instead leaves the simulation immediately.  That customer is considered to be <i>lost</i>.  (This is a crude representation of a store being busy enough that it drives away customers.)</li>\r\n    </ul>\r\n  </li>\r\n  <li>Whenever a register is unoccupied, a customer <i>immediately</i> moves from the corresponding line and into the register.  That customer will stay for the appropriate number of seconds (as determined by the processing time for that register, specified in the setup section).  At that time, the customer will leave the register and will <i>immediately</i> be replaced by another.</li>\r\n  <li>For the sake of simplicity, we'll assume that customers will never move from one line to another once they've entered a line, nor will a customer ever enter a register from any line other than the one that corresponds to it.</li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">The output</p>\r\n\r\n<p>The output of your simulator consists of two sections:</p>\r\n\r\n<ul>\r\n  <li>The <i>log</i>, which indicates each time an \"interesting\" event occurs.  The log begins with the word <b>LOG</b> alone on a line, followed by one line of output for each event.  Each line of output describing an event consists of an integer simulation time (the number of seconds since the simulation started), a space, and then a description of the event.  The following kinds of events are required to be logged:\r\n    <ul>\r\n      <li>The simulation started</li>\r\n      <li>The simulation ended</li>\r\n      <li>A customer entered a line, in which case we want to know which line number and how long the line is now (including the new customer)</li>\r\n      <li>A customer exited a line, in which case we want to know which line number and how many seconds the customer waited in that line</li>\r\n      <li>A customer entered a register, in which case we want to know which register number</li>\r\n      <li>A customer exited a register, in which case we want to know which register number &mdash; there's no need to see how long they waited, as this is always the same for a given register</li>\r\n      <li>A customer has been lost (i.e., they left without waiting in line because all lines were maximum length)</li>\r\n    </ul>\r\n  </li>\r\n  <li>The \"stats\" section.  This section begins with a blank line (to separate it from the log visually), followed by the word <b>STATS</b> alone on a line, followed by these statistics:\r\n    <ul>\r\n      <li>How many customers entered a line during the simulation</li>\r\n      <li>How many customers exited a line during the simulation</li>\r\n      <li>How many customers exited a register during the simulation &mdash; we don't show many customers entered a register, because every customer who exits a line immediately enters a register</li>\r\n      <li>The average wait time, in simulation seconds, for customers who exited a line.  We only care about how long they waited in line, and we only measure this for customers who exited a line; customers still remaining in line at the end of the simulation are not included.  Display this value to two digits after the decimal point.</li>\r\n      <li>How many customers are still left in line at the end of the simulation (i.e., they've entered a line but not exited it yet)</li>\r\n      <li>How many customers are still left at a register at the end of the simulation (i.e., they've entered a register but not exited it yet)</li>\r\n      <li>How many customers were lost during the simulation</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Example input and output</p>\r\n\r\n<p>A complete example of the simulator's input and expected output (for that input) are provided in the <b>examples</b> directory within your project directory in files called <b>sample.in</b> (the input) and <b>sample.out</b> (the output).  Your goal is to match this format precisely; spelling, capitalization, and spacing are all relevant, so take some time to study the example and make sure you recognize the little details within it.</p>\r\n\r\n<p class=\"subtitle\">Limitations</p>\r\n\r\n<p>You must use your own <b>Queue</b> class template to implement the concept of a line of customers.  Beyond that, you are free to use any part of the C++ Standard Library you wish in your simulator, even though it's forbidden in your <b>DoublyLinkedList</b> and <b>Queue</b> implementations.  For example, you may prefer to use <b>std::vector</b> to store the registers or the lines (though you can certainly use <b>DoublyLinkedList</b> if you prefer).</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">What is private inheritance?</p>\r\n\r\n<p>The provided <b>Queue</b> class template is quite short, even though it's also quite capable.  You won't need to write any code in <b>Queue</b> to make it work completely and correctly.  That's because it inherits its implementation from the <b>DoublyLinkedList</b> class template.  In general, for any type <b>T</b>, the type <b>Queue&lt;T&gt;</b> inherits from the type <b>DoublyLinkedList&lt;T&gt;</b>.  As you would expect, then, <b>Queue</b> objects have all of the member variables and member functions that <b>DoublyLinkedList</b> objects have, which means the entire implementation of <b>DoublyLinkedList</b> is inherently a part of <b>Queue</b>.</p>\r\n\r\n<p>It's not entirely crazy that <b>Queue</b> inherits from <b>DoublyLinkedList</b>, because you could certainly say that a queue is a linked list, if that's how you wanted to implement one.  A queue is a linked list that provides more limited abilities; it does less than a linked list does, rather than doing more.  And, in fact, we'd like to keep it that way.  If we have a queue-shaped problem, we probably only want to be able to perform queue-specific operations like enqueue, dequeue, and front, with anything else likely to be a bug in our program, anyway.  What we really want is for <b>Queue</b> to inherit from <b>DoublyLinkedList</b>, but for that inheritance relationship to be a secret; only <b>Queue</b> knows about it, so code outside of <b>Queue</b> can't do things like call <b>removeFromEnd</b> or create iterators that can insert elements in the middle somewhere.</p>\r\n\r\n<p>In C++, <i>private inheritance</i> is how you achieve this kind of goal.  Private inheritance is what it sounds like: It's an inheritance relationship that only the inheriting class knows about.  Suppose you start a class declaration in C++ like this:</p>\r\n\r\n<blockquote><pre>\r\nclass Y : private X\r\n</pre></blockquote>\r\n\r\n<p>What this means is that <b>Y</b> inherits from <b>X</b>, but that the only code in the program that can make use of that relationship is <b>Y</b>.  A <b>Y</b> object will have all of the member variables and member functions of <b>X</b>, but they won't be accessible outside of <b>Y</b>.  Inside of the <b>Y</b> class, it would be possible to point an <b>X*</b> to a <b>Y</b> object, but this wouldn't be possible outside of the <b>Y</b> class.</p>\r\n\r\n<p>Why a feature like this is useful is that it allows a class to inherit an implementation without inheriting an interface.  This way, a <b>Queue</b> can be a <b>DoublyLinkedList</b>, but no one else knows it; no one can treat a <b>Queue</b> like a <b>DoublyLinkedList</b> except <b>Queue</b>.  So if a <b>Queue</b> member function wants to call <b>addToEnd()</b> or <b>removeFromFront()</b> on the <b>this</b> object, it can do that; but code outside of the <b>Queue</b> class won't be able to do it.</p>\r\n\r\n<p>There are two ways to avoid bugs.  One is being careful not to do things you shouldn't do.  The other is to <i>make it impossible</i> to do the things you shouldn't do.  The latter is something to strive for, and static type checking in C++ is a useful tool to help you get there, with private inheritance one of the many techniques available to express the features and constraints in your design.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Iterators</p>\r\n\r\n<p>An <i>iterator</i> is an abstraction for a position within a data structure, the goal of which is to allow the values in a data structure to be accessed (and potentially modified) without relying on the details of how the data structure is implemented.  Given an iterator, an algorithm can obtain all of the values in the data structure without manipulating pointers, understanding the data structure's layout, or sometimes without even being aware of what kind of data structure it is.  When you can separate an algorithm from the details of the data structures it operates on, it becomes possible to write the algorithm generally; linear search is the same algorithm no matter what kind of data structure you're searching, as long as there's a way to say \"Give me the next thing I haven't seen\" and ask \"Is there anything left that I haven't seen?\"  Iterators provide those kinds of fundamental capabilities.</p>\r\n\r\n<p>For more background on this topic, see the section titled <i>Iterators</i> in the <a href=\"http://www.ics.uci.edu/~thornton/ics45c/Notes/StandardLibrary/\">Standard Library notes from my ICS 45C course</a>.  Our iterators aren't quite the same as the ones in the standard library, but their purpose is the same.</p>\r\n\r\n<p class=\"subtitle\">The difference between Iterator and ConstIterator</p>\r\n\r\n<p>Our implementation of <b>DoublyLinkedList</b> draws a distinction between <b>Iterators</b> and <b>ConstIterators</b>.  That distinction mirrors a similar distinction in the containers in the C++ Standard Library such as <b>std::vector</b> and <b>std::list</b>.  For our purposes, the distinction is this:</p>\r\n\r\n<ul>\r\n  <li>An <b>Iterator</b> has the ability to access and modify the contents of our list.  This includes moving forward and backward, accessing and changing the current value, inserting values before or after the current value, and removing the current value.</li>\r\n  <li>A <b>ConstIterator</b> has some of these abilities, but not all of them.  What it promises to holds constant is the contents of the data structure, so it only provides features that don't introduce change.  They can be moved forward and backward, and they can access the current value, but they can't insert, remove, or change existing values.</li>\r\n</ul>\r\n\r\n<p>Note, too, that it's possible to have a <b>const Iterator</b> (i.e., a variable of the type <b>Iterator</b> that is itself marked as <b>const</b>), but this is a different thing altogether.  What a <b>const Iterator</b> holds constant is the iterator (i.e., you can't move it), but it makes no promise about the contents of the list.  This is similar, in concept, to the way that the <b>const</b> specifier interacts with pointer types, in that <b>const</b> can be used to protect the pointer, the value the pointer points to, or both.</p>\r\n\r\n<p class=\"subtitle\">How our iterators are different from the standard ones</p>\r\n\r\n<p>The key difference between our iterators and the ones in the C++ Standard Library is our design avoids the need for the deep use of a C++ called feature called <i>operator overloading</i>, in which the meaning of operators is redefined for objects of classes you write; this is not something that's commonly been seen in depth by students coming into ICS 46, even if it's been touched on.  Fundamentally, our iterators are pretty similar to the <i>bidirectional iterators</i> in the standard library, with member functions taking the place of the operator overloads, along with some slight differences in semantics.  So, if you understand how to use the standard iterators, you'll find using and testing your own iterators to be pretty similar.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Redirection (or, How to avoid re-typing the input every time you run your program)</p>\r\n\r\n<p>When you use the <b>run</b> script to execute your program &mdash; and, generally, by default in Linux &mdash; the standard input and standard output are connected to the shell window where you executed the program.  The program's input is typed into that shell window; the program's output is written to that shell window.</p>\r\n\r\n<p>However, you can also use a technique called <i>redirection</i> to connect the standard input and/or standard output to other devices &mdash; most importantly for us, to files! &mdash; instead of the default.  For example, the contents of an existing file may be redirected into the standard input, so that your program will read its input from the file instead of from the shell window; similarly, the standard output can be redirected into a file, meaning that all of the output printed to <b>std::cout</b> will be saved into that file, rather than being displayed in the shell window.</p>\r\n\r\n<p>The typical mechanism for redirection is to use the &lt; and &gt; operators on the command line, like this:</p>\r\n\r\n<blockquote><pre>\r\nSomeProgramYouWantToRun &lt;FileContainingStdInput.txt &gt;FileToStoreStdOutput.txt\r\n</pre></blockquote>\r\n\r\n<p>You don't have to use both; you can use only &lt; (in which case the standard input is read from a file, but the standard output is written to the shell window) or only &gt; (in which case the standard input is read from the shell window, but the standard output is written to a file).  It's up to you.</p>\r\n\r\n<p class=\"subtitle\">Using redirection to avoid re-typing test input</p>\r\n\r\n<p>This can be a handy technique to use in your testing, to avoid the problem of having to re-type the program's input every time you run it.  If you used the <b>project2</b> project template &mdash; and you should have! &mdash; when creating your project, you should see a directory called <b>examples</b> in your project directory; in the <b>examples</b> directory, you should see a file <b>sample.in</b>, which contains the sample input from this project write-up.  If you want to run your program using the same input, issue this command (from your project directory):</p>\r\n\r\n<blockquote><pre>\r\n./run &lt;examples/sample.in\r\n</pre></blockquote>\r\n\r\n<p>The effect is that the contents of the <b>sample.in</b> file in the <b>examples</b> directory will be redirected into your program's standard input, in lieu of you having to type it.  You might also want to write other test files for yourself in that same <b>examples</b> directory, then use a similar technique to redirect them into the standard input of your program.  You can avoid a lot of re-typing this way!</p>\r\n\r\n<p>Similarly, you can use redirection to send the output of your program to a file.</p>\r\n\r\n<blockquote><pre>\r\n./run &lt;examples/sample.in >my.out\r\n</pre></blockquote>\r\n\r\n<p>That would create a file called <b>my.out</b> in your project directory containing the output of your program.  You could then compare it to the example output using the <b>diff</b> command, which is a handy way to quickly see if there are any differences.</p>\r\n\r\n<blockquote><pre>\r\ndiff my.out examples/sample.out\r\n</pre></blockquote>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>After using the <b>gather</b> script in your project directory to gather up your C++ source and header files into a single <b>project2.tar.gz</b> file (as you did in <a href=\"../Project0\">Project #0</a>, submit that file (and only that file) to Checkmate.  Refer back to <a href=\"../Project0\">Project #0</a> if you need instructions on how to do that.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're reponsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.  (It's not a bad idea to look at the contents of your tarball before submitting it; see <a href=\"../Project0\">Project #0</a> for instructions on how to do that.)</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Originally written by Alex Thornton, Winter 2018.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}