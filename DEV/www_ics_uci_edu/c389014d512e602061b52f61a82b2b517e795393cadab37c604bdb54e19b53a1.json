{"url": "https://www.ics.uci.edu/~eppstein/163/s16-hw1.html", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n<html>\n<head>\n<title>CompSci 163/265, Spring 2016, Homework 1</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<h1>CompSci 163/265, Spring 2016, Homework 1</h1>\n<ol>\n<li><p>A cube has eight vertices and twelve edges. One way to represent\nthis as a graph is to number the vertices from $0$ to $7$, and to\nconnect two vertices by an undirected edge whenever the binary\nrepresentations of their numbers are different in only one bit.\nWrite down a representation for this graph (with these vertex numbers)\nusing <a href=\"https://www.python.org/doc/essays/graphs/\">van Rossum's dictionary-of-lists</a> adjacency list format.</p></li>\n<li><p>In depth-first search, the order in which we loop over the\noutgoing edges from each vertex is arbitrary: if a vertex has $k$\noutgoing edges, then there are $k!$ different choices for what order to\nloop over them, and this may affect what happens in the rest of the\nalgorithm. In particular, one graph may have more than one possible\ndepth first search tree, depending on this choice of loop order. For the\nsame graph of the cube from problem 1, find the following two different\ndepth first search trees, both starting from vertex 0:</p>\n<ol type=\"a\">\n<li><p>a depth first search tree in which every vertex has at most one\nchild.</p></li>\n<li><p>a depth first search tree in which at least one vertex has more\nthan one child.</p></li></ol></li>\n<li><p>(163 students:) List the vertices of the cube (with the same\nnumbering) in an order that could be generated by performing a\nbreadth-first search of the cube, starting with vertex 0.</p>\n<p>(265 students:) List the vertices of the cube (with the same\nnumbering) in an order that is sorted by distance from vertex 0, but\ncould not be generated by performing a breadth-first search of the\ncube.</p></li>\n<li><p>(163 students:) Define a graph to be \"weakly connected\" if, for\nevery two vertices $v$ and $w$, there exists either a path from $v$ to\n$w$ or a path from $w$ to $v$ (but not necessarily both).\nDraw a directed graph $G$ that obeys all of the following properties:\n<ul>\n<li><p>$G$ is weakly connected.</p></li>\n<li><p>$G$ has at least three strongly connected components.</p></li>\n<li><p>At least one of the strongly connected components of $G$ has only\none vertex, and.</p></li>\n<li><p>At least one of the strongly connected components of $G$ has\nthree or more vertices.</p>\n</ul>\n<p>(265 students:) Define an edge of a directed graph to be \"loopy\" if\nthere exists at least one cycle in the graph that contains the given\nedge. Describe a linear-time algorithm that lists all of the loopy edges\nof a directed graph. (Hint: use the strongly connected component\nalgorithm as a subroutine. You do not need to describe the details of\nthis subroutine. You may assume that it outputs each component as a list\nof vertices.)</p></li>\n</ol>\n</body>\n</html>\n", "encoding": "ascii"}