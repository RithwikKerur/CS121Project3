{"url": "https://www.ics.uci.edu/~eppstein/projects/pairs/Source/testbed/Vector.cp", "content": "// Test of closest pair algorithms\n// David Eppstein, UC Irvine, 19 Apr 1997\n//\n// Generate n vectors in R^d, with varying distances\n\n#include \"Vector.h\"\n#include \"Random.h\"\n#include \"Error.h\"\n\nstatic inline double DoubleAbs(double a)\n{\n\tif (a < 0) return -a;\n\telse return a;\n}\n\n// Create new random set of vectors\nVectorPointSet::VectorPointSet(unsigned long npoints, int dim)\n\t: PointSet(npoints), d(dim), points(new double[dim*npoints])\n{\n\tif (points == 0) error(\"VectorPointSet: unable to create points\");\n\tfor (long i = 0; i < d*npoints; i++)\n\t\tpoints[i] = RandomDouble();\n}\n\n// Merge two clusters and replace by their median\nvoid VectorPointSet::interact(point i, point j)\n{\n\tfor (int k = 0; k < d; k++)\n\t\tpoints[i*d+k] = points[j*d+k] = (points[i*d+k] + points[j*d+k])/2;\n}\n\ndouble VectorL1::VecDistance(double * u, double * v)\n{\n\tdouble total = 0;\n\tfor (int i = 0; i < d; i++)\n\t\ttotal += DoubleAbs(u[i] - v[i]);\n\treturn total;\n}\n\ndouble VectorL2::VecDistance(double * u, double * v)\n{\n\tdouble total = 0;\n\tfor (int i = 0; i < d; i++) {\n\t\tdouble delta = u[i] - v[i];\n\t\ttotal += delta*delta;\n\t}\n\treturn total;\n}\n\ndouble VectorLinf::VecDistance(double * u, double * v)\n{\n\tdouble maxdif = DoubleAbs(u[0] - v[0]);\n\tfor (int i = 1; i < d; i++) {\n\t\tdouble dif = DoubleAbs(u[i] - v[i]);\n\t\tif (dif > maxdif) maxdif = dif;\n\t}\n\treturn maxdif;\n}\n\ndouble VectorDot::VecDistance(double * u, double * v)\n{\n\tdouble total = 0;\n\tfor (int i = 0; i < d; i++)\n\t\ttotal += u[i] + v[i];\n\treturn total;\n}\n", "encoding": "ascii"}