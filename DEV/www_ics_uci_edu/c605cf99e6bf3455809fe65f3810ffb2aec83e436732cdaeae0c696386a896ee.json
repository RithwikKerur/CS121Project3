{"url": "https://www.ics.uci.edu/~kay/courses/i42/hw/hw2.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Tuesday, January 10, 2006 11:58 AM\">\n<TITLE>Second Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D25B0789\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 2, CS2, assignment, Java\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for Informatics 42, a second-quarter introduction to computer science in Information and Computer Science, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001, 2005, 2006 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/i42/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P>\n<FONT FACE=\"Goudy Old Style\">Informatics 42 &bull; Winter 2012 &bull; David G. Kay\n&bull; UC Irvine</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\" SIZE=6><B>Second Homework</B></FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\">With this homework assignment, to be done individually (but with questions to i42@uci.edu or Piazza), we'll get into our usual rhythm of homeworks over the weekend and lab assignments in the lab hours).</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Get your work checked and signed off by a classmate, then show it to your TA in lab by Monday, January 23.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>Part I</B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Continue with the class-based restaurants\nprogram (<code>RPList.py</code>) that you worked on last week. You can start with the original version at </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/python/RPList.py\">http://www.ics.uci.edu/~kay/python/RPList.py</A></FONT><FONT FACE=\"Goudy Old Style\"> or you can use the modified version (with sentences and erasing) you developed for the last homework (so long as that version works correctly).</FONT></P>\n<UL>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Add the menu item &quot;</FONT><code>c:\n    Change all prices</code><FONT FACE=\"Goudy Old Style\">&quot;.  This should\n      prompt the user for an amount representing a percentage\n      change in price (so that 100 would double a price and &ndash;50 would cut it in\n      half).  Then it should apply that price change to the prices for all the\n      restaurants in the collection.</FONT>\n  <BR><BR>\n  <FONT FACE=\"Goudy Old Style\">This will require a new method in the Restaurant\n    class and a new method in the Collection class. (Try to work this out for yourself; you've seen all the components and patterns. Only read the following details if you're stuck [really, now, stop reading and think before continuing this paragraph]: </FONT>\n  The method in the Restaurant class, let's call it <code>adjustPrice</code>, takes the percentage number and changes the Restaurant's price (<code>self.price</code>) accordingly. The method in the Collection class applies the Restaurant's  <code>adjustPrice</code> method to each Restaurant in the Collection (which you can do with a loop (<code>for r in self.rests:</code> ...) or with a list comprehension.)<BR>\n</LI>\n<BR>\n<LI>\n  <FONT FACE=\"Goudy Old Style\">Add an </FONT><code>averagePrice</code>\n    method to the Collection class; it should return a <code>float</code> representing the average\n    price at all the restaurants.  You know the formula for calculating an average and you know how to obtain the constituent parts\u00e2\u20ac\u201dthe total price [following code we've seen in class] and the number of restaurants in the Collection. To be thorough, this method should check that the collection isn't empty; if it is empty, it should print a message and return zero. Then modify Collection's <code>print</code>\n  method to print the average price after it prints all the restaurants.</LI>\n</UL>\n<P>\n<B>Part II</B></P>\n<P>\nThis Python code copies a file, line by line.  It presumes that the input and output files will be in the same directory (folder) as the code itself. (This is a restriction we could relax by using libraries that let us navigate around file systems and use the operating system's standard file dialog boxes. But those are topics for another day.)</P>\n<pre><code>inFileName = input(&quot;Please enter the name of the file to copy: &quot;)\ninFile = open(inFileName)\noutFileName = input(&quot;Please enter the name of the new copy:  &quot;)\noutFile = open(outFileName, 'w')\nfor line in inFile:\n  outFile.write(line)\ninFile.close()\noutFile.close()</code>\n</pre>\n<P>\n  <FONT FACE=\"Goudy Old Style\"><B>(a)</B>  Install and run this code on\nyour own system.  Test it out with a short file.</FONT></P>\n<P>Then download the Project\n  Gutenberg version of <I>The Adventures of Sherlock Holmes</I> from <code><A HREF=\"http://www.gutenberg.org/cache/epub/1661/pg1661.txt\">http://www.gutenberg.org/cache/epub/1661/pg1661.txt</A></code><FONT FACE=\"Goudy Old Style\">\n  (Project Gutenberg is a wonderful resource for non-copyright-protected texts).\n  Run your file copying program to make a copy of this\n  file.  [Late update: Some problems have been reported with reading Project Gutenberg files. If you run into messages saying that Python can't decode a character, just find some other long text file and use that instead.]</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(b)</B>  Modify a copy of your program so\nthat the copied file includes line numbers at the start of each line:</FONT></P>\n<pre><code>    1: Project Gutenberg's The Adventures of Sherlock Holmes, by Arthur Conan Doyle\n    2: \n    3: This eBook is for the use of anyone anywhere at no cost and with\n...\n13052: subscribe to our email newsletter to hear about new eBooks.</code></pre>\n<FONT FACE=\"Goudy Old Style\">(Note that the line number is formatted and right-justified\nin a five-character field.)</FONT>\n<P>\n  <FONT FACE=\"Goudy Old Style\"><B>Additional challenges:</B>  If you have some time and enjoy coding, try some of the following. If you don't have more time for more coding for this homework, that's okay; move on to the lab assignment and wait for next week's homework. (These additional challenges don&#39;t yield any actual extra\n    credit, but if you implement some of them, we&#39;ll be impressed.  It's generally good to impress instructors because it gives\n    them something special to write in recommendation letters.)  But it wouldn't hurt for everyone to read these and think about how to code them up, even if you don&#39;t actually\ndo it.</FONT></P>\n<UL>\n<LI><FONT FACE=\"Goudy Old Style\">Write a program called Reverse.\n It should prompt for two file names and copy the first\nfile to the second, except in reverse order (with the last line of the original\nfile as the first line of the new one).  This requires that you store the\nwhole file in your program; probably the best way is with the <code>f.readlines()</code> method..</FONT><br>\n<br>\n</LI>\n<LI><FONT FACE=\"Goudy Old Style\">Implement a simple version of the </FONT><FONT FACE=\"Courier New\" SIZE=2>diff</FONT><FONT FACE=\"Goudy Old Style\">\n  command that reads two files and prints out the\n  lines that don&#39;t match.  (The real </FONT><FONT FACE=\"Courier New\" SIZE=2>diff</FONT><FONT FACE=\"Goudy Old Style\">\n    will recognize where one file has an extra line, and not act as if nothing\n    matches after that point, but your program doesn&#39;t have to do this.)</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Implement </FONT><FONT FACE=\"Courier New\" SIZE=2>head</FONT><FONT FACE=\"Goudy Old Style\">\nand </FONT><FONT FACE=\"Courier New\" SIZE=2>tail</FONT><FONT FACE=\"Goudy Old Style\">,\nwith the number of lines and the file name as arguments.  Doing\n</FONT><FONT FACE=\"Courier New\" SIZE=2>head</FONT><FONT FACE=\"Goudy Old Style\">\nis easy; doing </FONT><FONT FACE=\"Courier New\" SIZE=2>tail</FONT><FONT FACE=\"Goudy Old Style\">\nis a little trickier.</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">If you examine the file from Project Gutenberg,\nyou see that it contains some &quot;housekeeping&quot; information at the\nbeginning and at the end.  You&#39;ll also see that the text itself starts\nafter a line beginning with &quot;</FONT><FONT FACE=\"Courier New\" SIZE=2>***\nSTART</FONT><FONT FACE=\"Goudy Old Style\">&quot; and ends just before a line\nbeginning with &quot;</FONT><FONT FACE=\"Courier New\" SIZE=2>*** END</FONT><FONT FACE=\"Goudy Old Style\">&quot;.\n Write the program CopyTextOnly that copies only the body of a Project Gutenberg\nfile, omitting the &quot;housekeeping&quot; material at the front and end.</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Write a program Mirror that&#39;s like Reverse\nabove, except that it also reverses each line.</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Modify the line-numbering program so that the\nline number field is no wider than it has to be.  (So, for example, a file\nwith under 1000 lines, but over 99, would have its line numbers in a three-character-wide\nfield.)  You&#39;ll need to read the file into memory (as Reverse did) or\nread it twice (which we generally wouldn&#39;t do if the file is short enough\nto fit in memory, because I/O is so much slower than processing data already\nin memory).  </FONT></LI>\n</UL>\n<BR>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Written by David G. Kay, Winter 2005.  Modified\nWinter 2006. Modified by Alex Thornton, Winter 2007, and by David G. Kay, Winter 2008. Modified for Python by David G. Kay, Winter 2012.</FONT></P>\n<BR CLEAR=ALL>\n</BODY>\n</HTML>", "encoding": "Windows-1252"}