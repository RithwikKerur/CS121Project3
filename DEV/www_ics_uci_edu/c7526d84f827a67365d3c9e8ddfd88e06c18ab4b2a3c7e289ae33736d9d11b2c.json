{"url": "https://www.ics.uci.edu/~ardalan/courses/os/lab0.html", "content": "<!DOCTYPE html>\n<!-- saved from url=(0064)https://www.cs.jhu.edu/~huang/cs318/fall18/project/project0.html -->\n<html class=\"no-js\" lang=\"en\"><!-- Created on August, 12 2017 by texi2html 1.66 --><!--\nWritten by: Lionel Cons <Lionel.Cons@cern.ch> (original author)\n            Karl Berry  <karl@freefriends.org>\n            Olaf Bachmann <obachman@mathematik.uni-kl.de>\n            and many others.\nMaintained by: Many creative people <dev@texi2html.cvshome.org>\nSend bugs and suggestions to <users@texi2html.cvshome.org>\n-->\n<head>\n    <meta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <title>Ardalan Amiri Sani</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <link rel=\"stylesheet\" href=\"css/style.css\">\n    <link rel=\"shortcut icon\" href=\"img/favicon.ico\">\n</head>\n\n<body>\n\n<div id=\"main_body\">\n    <table width=\"100%\" height=125>\n        <tr>\n            <td>\n                <h1>CompSci 143A: Principles of Operating System</h1>\n                <p>\n                    <b>Instructor:</b> <a href=\"http://www.ics.uci.edu/~ardalan/\">Ardalan Amiri Sani</a><br/>\n                </p>\n            </td>\n        </tr>\n    </table>\n\n    <div id=\"navigation\">\n        <ul>\n            <li><a href=\"index.html\">Home</a></li>\n            <li><a href=\"lectures.html\">Lectures</a></li>\n            <li><a href=\"homework.html\">Homework</a></li>\n            <li><a href=\"discussions.html\">Discussions</a></li>\n            <li><a href=\"reading.html\">Reading</a></li>\n            <li><a href=\"project.html\">Project</a></li>\n        </ul>\n    </div>\n\n    <h2 id=\"pintos-project-lab0\">Pintos Project Lab 0: Getting Real</h2>\n\n    <p>\n        <strong>Due: </strong><span class=\"text-danger\">Friday 02/22/2019 11:55 PM</span>\n    </p>\n\n    This assignment is to prepare you for the later Pintos lab.\n    <!--\n    It will\n    walk you through what happens after a PC is powered on till when an operating\n    system is up and running, which you may have wondered about it before. You will\n    setup the development environment, learn the Pintos workflow, and run/debug it\n    in QEMU and Bochs.\n    -->\n    You will mainly do a simple programming exercise to add a\n    tiny kernel monitor to Pintos. Note that this\n    assignment is simpler than the next lab as it is intentionally\n    designed to help you warm up. This lab is borrowed from JHU's CS 318/418/618 course by Ryan Huang.\n    Ryan borrwed part of this project's description and exercise\n    from the MIT 6.828 and Caltech CS 124 course.\n    <p></p>\n    <p>\n\n    <!--\n        <a name=\"Project 0 Background\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC16\"></a>\n    <h2> Background </h2>\n    <p>\n\n        <a name=\"PC Bootstrap\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC17\"></a>\n    <h3> PC Bootstrap </h3>\n    <p>\n\n        The process of loading the operating system into memory for running\n        after a PC is powered on is commonly known as <strong>bootstrapping</strong>. The\n        operating system will then be loading other software such as the shell\n        for running. Two helpers are responsible for paving the way for bootstrapping:\n        BIOS (Basic Input/Output System) and bootloader. The PC hardware is designed\n        to make sure BIOS always gets control of the machine first after the computer is\n        powered on. The BIOS will be performing some test and initialization, e.g., checking\n        memory available and activating video card. After this initialization, the BIOS\n        will try to find a bootable device from some appropriate location such as a\n        floppy disk, hard disk, CD-ROM, or the network. Then the BIOS will pass control of\n        the machine to the bootloader who will load the operating system.\n    </p>\n    <p>\n\n        While BIOS and the bootloader have a large task, they have very few resources\n        to do it with. For example, IA32 bootloaders generally have to fit within 512 bytes\n        in memory for a partition or floppy disk bootloader (i.e., only the first disk\n        <em>sector</em>, and the last 2 bytes are fixed signatures for recognizing it is\n        a bootloader). For a bootloader in the Master Boot Record (MBR), it has to fit\n        in an even smaller 436 bytes. In addition, since BIOS and bootloader are running\n        on bare-metals, there are no standard library call like <code>printf</code> or system\n        call like <code>read</code> available. Its main leverage is the limited BIOS interrupt\n        services. Many functionalities need to be implemented from scratch. For example,\n        reading content from disk is easy inside OSes with system calls, but in bootloader,\n        it has to deal with disk directly with complex hardware programming routines. As\n        a result, the bootloaders are generally written in assembly language, because\n        even C code would include too much bloat!\n    </p>\n    <p>\n\n        To further understand this challenge, it is useful to look at the PC's physical\n        address space, which is hard-wired to have the following general layout:\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\">\n<pre>\t+------------------+  &lt;- 0xFFFFFFFF (4GB)\n\t|      32-bit      |\n\t|  memory mapped   |\n\t|     devices      |\n\t|                  |\n\t/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\n\t/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\t|                  |\n\t|      Unused      |\n\t|                  |\n\t+------------------+  &lt;- depends on amount of RAM\n\t|                  |\n\t|                  |\n\t| Extended Memory  |\n\t|                  |\n\t|                  |\n\t+------------------+  &lt;- 0x00100000 (1MB)\n\t|     BIOS ROM     |\n\t+------------------+  &lt;- 0x000F0000 (960KB)\n\t|  16-bit devices, |\n\t|  expansion ROMs  |\n\t+------------------+  &lt;- 0x000C0000 (768KB)\n\t|   VGA Display    |\n\t+------------------+  &lt;- 0x000A0000 (640KB)\n\t|                  |\n\t|    Low Memory    |\n\t|                  |\n\t+------------------+  &lt;- 0x00000000\n\n\n</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <p>\n\n        The first PCs, which were based on the 16-bit Intel 8088 processor, were only capable\n        of addressing 1MB of physical memory. The physical address space of an early PC\n        would therefore start at <tt>0x00000000</tt> but end at <tt>0x000FFFFF</tt> instead of\n        <tt>0xFFFFFFFF</tt>.\n        The 640KB area marked \"Low Memory\" was the only random-access memory (RAM) that\n        an early PC could use; in fact the very earliest PCs only could be configured with\n        16KB, 32KB, or 64KB of RAM!\n    </p>\n    <p>\n\n        The 384KB area from <tt>0x000A0000</tt> through <tt>0x000FFFFF</tt> was reserved by the hardware\n        for special uses such as video display buffers and firmware held in non-volatile memory.\n        The most important part of this reserved area is the BIOS, which occupies the\n        64KB region from <tt>0x000F0000</tt> through <tt>0x000FFFFF</tt>. In early PCs the BIOS was\n        held in true read-only memory (ROM), but current PCs store the BIOS in updateable\n        flash memory.\n    </p>\n    <p>\n\n        When Intel finally \"broke the one megabyte barrier\" with the 80286 and 80386\n        processors, which supported 16MB and 4GB physical address spaces respectively,\n        the PC architects nevertheless preserved the original layout for the low 1MB\n        of physical address space in order to ensure backward compatibility with existing\n        software. Modern PCs therefore have a \"hole\" in physical memory from <tt>0x000A0000</tt>\n        to <tt>0x00100000</tt>, dividing RAM into \"low\" or \"conventional memory\" (the first\n        640KB) and \"extended memory\" (everything else). In addition, some space at the\n        very top of the PC's 32-bit physical address space, above all physical RAM, is\n        now commonly reserved by the BIOS for use by 32-bit PCI devices.\n    </p>\n    <p>\n\n        <a name=\"The Boot Loader\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC18\"></a>\n    <h3> The Boot Loader </h3>\n    <p>\n\n        Floppy and hard disks for PCs are divided into 512 byte regions called sectors.\n        A sector is the disk's minimum transfer granularity: each read or write operation\n        must be one or more sectors in size and aligned on a sector boundary. If the disk\n        is bootable, the first sector is called the boot sector, since this is where the\n        boot loader code resides. When the BIOS finds a bootable floppy or hard disk, it\n        loads the 512-byte boot sector into memory at physical addresses <tt>0x7c00</tt> through\n        <tt>0x7dff</tt>, and then uses a <code>jmp</code> instruction to set the CS:IP to\n        <tt>0000</tt>:<tt>7c00</tt>,\n        passing control to the boot loader.\n    </p>\n    <p>\n\n        IA32 bootloaders have the unenviable position of running in <strong>real-addressing\n        mode</strong> (also known as \"real mode\"), where the segment registers are used to compute\n        the addresses of memory accesses according to the following formula:\n        <var>address</var> = 16 * <var>segment</var> + <var>offset</var>. The code segment CS is used\n        for instruction execution. For example, when the BIOS jump to <tt>0x0000:7c00</tt>,\n        the corresponding physical address is 16 * 0 + <tt>7c00</tt> = <tt>7c00</tt>. Other\n        segment registers include SS for the stack segment, DS for the data segment,\n        and ES for moving data around as well. Note that each segment is 64KiB in size;\n        since bootloaders often have to load kernels that are larger than 64KiB, they\n        must utilize the segment registers carefully.\n    </p>\n    <p>\n\n        Pintos bootloading is a pretty simple process compared to how modern OS kernels\n        are loaded. The kernel is a maximum of 512KiB (or 1024 sectors), and must be\n        loaded into memory starting at the address <tt>0x20000</tt>. Pintos does require a\n        specific kind of partition for the OS, so the Pintos bootloader must look for a\n        disk partition of the appropriate type. This means that the Pintos bootloader\n        must understand how to utilize Master Boot Records (MBRs). Fortunately they\n        aren't very complicated to understand. Pintos also only supports booting off of\n        a hard disk; therefore, the Pintos bootloader doesn't need to check floppy drives\n        or handle disks without an MBR in the first sector.\n    </p>\n    <p>\n\n        When the loader finds a bootable kernel partition, it reads the\n        partition's contents into memory at physical address 128 kB. The\n        kernel is at the beginning of the partition, which might be larger\n        than necessary due to partition boundary alignment conventions, so the\n        loader reads no more than 512 kB (and the Pintos build process\n        will refuse to produce kernels larger than that). Reading more data\n        than this would cross into the region from 640 kB to 1 MB that\n        the PC architecture reserves for hardware and the BIOS, and a standard\n        PC BIOS does not provide any means to load the kernel above 1 MB.\n    </p>\n    <p>\n\n        The loader's final job is to extract the entry point from the loaded\n        kernel image and transfer control to it. The entry point is not at a\n        predictable location, but the kernel's ELF header contains a pointer\n        to it. The loader extracts the pointer and jumps to the location it\n        points to.\n    </p>\n    <p>\n\n        The Pintos kernel command line is stored in the boot loader (using about 128 bytes).\n        The <code>pintos</code> program actually modifies a copy of the boot loader on disk each time it runs\n        the kernel,\n        inserting whatever command-line arguments the user supplies to the kernel,\n        and then the kernel at boot time reads those arguments out of the boot\n        loader in memory. This is not an elegant solution, but it is simple\n        and effective.\n    </p>\n    <p>\n\n        <a name=\"The Kernel\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC19\"></a>\n    <h3> The Kernel </h3>\n    <p>\n\n        The bootloader's last action is to transfer control to the kernel's entry\n        point, which is <code>start()</code> in <q><tt>threads/start.S</tt></q>. The job of\n        this code is to switch the CPU from legacy 16-bit \"<strong>real mode</strong>\" into\n        the 32-bit \"<strong>protected mode</strong>\" used by all modern 80<var>x</var>86 operating\n        systems.\n    </p>\n    <p>\n\n        The kernel startup code's first task is actually to obtain the machine's\n        memory size, by asking the BIOS for the PC's memory size. The\n        simplest BIOS function to do this can only detect up to 64 MB of RAM,\n        so that's the practical limit that Pintos can support.\n    </p>\n    <p>\n\n        In additional, the kernel startup code needs to to enable the A20 line, that\n        is, the CPU's address line numbered 20. For historical reasons, PCs\n        boot with this address line fixed at 0, which means that attempts to\n        access memory beyond the first 1 MB (2 raised to the 20th power) will\n        fail. Pintos wants to access more memory than this, so we have to\n        enable it.\n    </p>\n    <p>\n\n        Next, the kernel will do a basic page table setup and turn on\n        protected mode and paging (details omitted for now). The final step\n        is to call into the C code of the Pintos kernel, which from here on\n        will be the main content we will deal with.\n    </p>\n    <p>\n    -->\n        <a name=\"Lab 0 Requirements\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC20\"></a>\n    <h2> Lab 0 Requirements </h2>\n    <!--docid::SEC20::-->\n    <p>\n\n        <a name=\"Lab 0 Design Document\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC21\"></a>\n    <h3> 0. Project 0 Design Document </h3>\n    <!--docid::SEC21::-->\n    <p>\n\n        Before you turn in your project, you must copy <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/real.tmpl\">the lab 0 design document\n        template</a> into your source tree under the\n        name <q><tt>pintos/src/p0/DESIGNDOC</tt></q> and fill it in.\n    </p>\n    <p>\n\n        <a name=\"Booting Pintos\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC22\"></a>\n    <h3> 1. Booting Pintos </h3>\n    <!--docid::SEC22::-->\n    <p>\n\n        Read the <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_1.html#SEC1\">1.\n        Introduction</a> section to get an overview of Pintos. Have Pintos development\n        environment setup as described in <a href=\"project_setup.html\">Project\n        Setup</a>. Afterwards, execute\n    </p>\n    <p>\n\n    </p>\n\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ cd pintos/src/threads\n$ make\n$ cd build\n$ pintos --bochs -- run alarm-zero\n</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <p>\n\n        You can only use Bochs in Openlab (instructions above use Bochs).\n\t        Bochs will be useful for the <a\n            href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_3.html#SEC25\">3. Project 1:\n        Threads</a>.\n\n        If everything works, you should see Pintos booting in the Bochs emulator,\n        and print <code>Execution of 'alarm-zero' complete.</code> near the end. In addition to the shell where\n        you execute the command, a new graphic window of Bochs will also pop up printing\n        the same messages. If you are remotely connecting to a machine, e.g., the\n        Openlab machines, you should make sure you use X window option in your SSH client so that the window can open.\n    </p>\n    <p>\n\n    </p>\n\n    <p>\n        If you have configured QEMU on your own machine, you can run Pintos with QEMU as follows. \n    </p>\n\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ cd pintos/src/threads\n$ make qemu\n</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <p>\n\n        If everything works, you should see Pintos booting in the <a href=\"http://www.qemu.org/\">QEMU\n        emulator</a>,\n        and print <code>Boot complete.</code> near the end. In addition to the shell where\n        you execute the command, a new graphic window of QEMU will also pop up printing\n        the same messages. \n  \n       <!--\t\n    \t<p>\n\n        Note that to quit the Pintos interface, for the QEMU window, you can just close\n        it; for the terminal, you need to press <code>Ctrl-a x</code> to exit (if you are\n        running inside GNU screen or Tmux and its prefix key is Ctrl-a,\n        press <code>Ctrl-a</code> <em>twice</em> and <code>x</code> to exit). We also provide a Makefile\n        target to allow you to run Pintos just in the terminal: <code>make qemu-nox</code>.\n    </p>\n       -->\n\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 0.1</strong>\n        </div>\n        <div class=\"panel-body\">\n            Take a screenshot of the successful booting of Pintos in Bochs or QEMU, either in\n            the terminal or Bochs/QEMU window. Put the screenshot under <q><tt>pintos/src/p0</tt></q>.\n        </div>\n    </div>\n\n    <!--\n    <a name=\"Debugging\"></a>\n    <hr size=\"6\">\n    <a name=\"SEC23\"></a>\n    <h3> 2. Debugging </h3>\n    <p>\n\n        While you are working on the projects, you will frequently use the GNU Debugger\n        (GDB) to help you find bugs in your code. Make sure you read the\n        <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_11.html#SEC161\">E.5 GDB</a> section\n        first. In addition, if you are unfamiliar with x86 assembly,\n        the <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_14.html#PCASM\">PCASM</a> is an\n        excellent book to start. Note that you don't need to read\n        the entire book, just the basic ones are enough.\n    </p>\n    <p>\n\n    </p>\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 0.2.1</strong>\n        </div>\n        <div class=\"panel-body\">\n            Your first task in this section is to use GDB to trace the QEMU BIOS a bit to understand\n            how an IA-32 compatible computer boots. Answer the following questions in your\n            design document:\n            <ul>\n                <li>What is the first instruction that gets executed?\n                </li>\n                <li>At which physical address is this instruction located?\n                </li>\n                <li>Can you guess why the first instruction is like this?\n                </li>\n                <li>What are the next three instructions?\n                </li>\n            </ul>\n        </div>\n    </div>\n    <p>\n\n        In the second task, you will be tracing the Pintos bootloader. Set a breakpoint\n        at address <tt>0x7c00</tt>, which is where the boot sector will be loaded. Continue\n        execution until that breakpoint. Trace through the code in <q><tt>threads/loader.S</tt></q>,\n        using the source code and the disassembly file <q><tt>threads/build/loader.asm</tt></q>\n        to keep track of where you are. Also use the <code>x/i</code> command in GDB to disassemble\n        sequences of instructions in the boot loader, and compare the original boot loader\n        source code with both the disassembly in <q><tt>threads/build/loader.asm</tt></q> and\n        GDB.\n    </p>\n    <p>\n\n    </p>\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 0.2.2</strong>\n        </div>\n        <div class=\"panel-body\">\n            Trace the Pintos bootloader and answer the following questions in your design document:\n            <ul>\n                <li>How does the bootloader read disk sectors? In particular, what BIOS interrupt\n                    is used?\n                </li>\n                <li>How does the bootloader decides whether it finds the Pintos kernel?\n                </li>\n                <li>What happens when the bootloader could not find the Pintos kernel?\n                </li>\n                <li>At what point does the bootloader transfer control to the Pintos kernel?\n                </li>\n            </ul>\n        </div>\n    </div>\n    <p>\n\n        After the Pintos kernel take control, the initial setup is done in assembly\n        code <q><tt>threads/start.S</tt></q>. Later on, the kernel will finally kick into\n        the C world by calling the <code>pintos_init()</code> function in <q><tt>threads/init.c</tt></q>.\n        Set a breakpoint at <code>pintos_init()</code> and then continue tracing a bit into the\n        C initialization code. Then read the source code of <code>pintos_init()</code> function.\n        For this task, you don't need to submit anything.\n\n    </p>\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 0.2.3</strong>\n        </div>\n        <div class=\"panel-body\">\n            Trace the Pintos kernel.\n        </div>\n    </div>\n    <p></p>\n    <p>\n    -->\n        <a name=\"Kernel Monitor\"></a>\n    </p>\n    <hr size=\"6\">\n    <a name=\"SEC24\"></a>\n    <h3> 2. Kernel Monitor </h3>\n    <!--docid::SEC24::-->\n    <p>\n\n        At last, you will get to make a small enhancement to Pintos and write some code!\n        In particular, when Pintos finishes booting, it will check for the supplied\n        command line arguments stored in the kernel image. Typically you will pass\n        some tests for the kernel to run, e.g., <code>pintos -- run alarm-zero</code>.\n        If there is no command line argument passed, the kernel will simply finish up.\n        This is a little boring. You task is to add a tiny kernel shell to Pintos\n        so that when no command line argument is passed, it will run this shell interactively.\n        Note that this is a kernel-level shell. In later projects, you will be enhancing\n        the user program and file system parts of Pintos, at which point you will get to\n        run the regular shell.\n    </p>\n    <p>\n\n        The code place for you to add this feature is in line <tt>136</tt> of\n        <q><tt>threads/init.c</tt></q> with <code>// TODO: no command line passed to kernel.\n        Run interactively</code>. You only need to make this monitor very simple. It starts with\n        a prompt <tt>ICS143A&gt; </tt> and waits for user input. When a newline is entered, it\n        parses the input and checks if it is <tt>whoami</tt>. If it is <tt>whoami</tt>, print\n        your name. Afterwards, the monitor will print the command prompt <tt>ICS143A&gt; </tt>\n        again in the next line and repeat. If the user input is <tt>exit</tt>, the monitor\n        will quit to allow the kernel to finish. For the other input, print\n        <tt>invalid command</tt>.\n    </p>\n    <p>\n\n    </p>\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Exercise 0.2</strong>\n        </div>\n        <div class=\"panel-body\">\n            Enhance <q><tt>threads/init.c</tt></q> to implement a tiny kernel monitor in Pintos.\n            Feel free to add new source files in to the Pintos code base for this task, e.g.,\n            provide a <code>readline</code> library function. Refer to\n            <a href=\"https://www.ics.uci.edu/~ardalan/courses/os/pintos/pintos_3.html#Adding%20Source%20Files\">Adding\n                Source Files</a> for how to\n            do so.\n        </div>\n    </div>\n\n    <em>Hint:</em> You may need to use some functions provided in <q><tt>lib/kernel/console.c</tt></q>,\n    <q><tt>lib/stdio.c</tt></q> and <q><tt>devices/input.c</tt></q>.\n\n<!--\n    <a name=\"Project 0 Submission\"></a>\n    <hr size=\"6\">\n    <a name=\"SEC20\"></a>\n    <h2> Submission Instruction </h2>\n    <div class=\"panel panel-warning\">\n        <div class=\"panel-heading\">\n            <strong>Note</strong>\n        </div>\n        <div class=\"panel-body\">\n            To hand in your submission for this lab, first <tt>cd</tt> to the root\n            of your pintos source code repository. Commit all the changes you have\n            made for this lab (with <code>git add</code> and <code>git commit</code> command).\n            Then archive the entire repository with <code>git archive --prefix=lab0/ --format=tar HEAD | gzip\n            &gt; lab0-handin.tar.gz</code>.\n            Double check the archive file contains the content you want to submit and then submit\n            <q><tt>lab0-handin.tar.gz</tt></q> through <a href=\"https://blackboard.jhu.edu/\">Blackboard</a>\n            before the deadline. For later projects, we will collect group submissions through\n            GitHub classroom.\n        </div>\n    </div>\n-->\n    <!--<footer class=\"site-footer\">-->\n        <!--<hr>-->\n        <!--<div class=\"wrapper\">-->\n            <!--Ryan Huang | Last updated 2019-01-06 13:58:14 -0500.-->\n        <!--</div>-->\n    <!--</footer>-->\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}