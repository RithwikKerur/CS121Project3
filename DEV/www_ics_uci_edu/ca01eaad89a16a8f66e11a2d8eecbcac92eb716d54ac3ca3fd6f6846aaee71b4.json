{"url": "https://www.ics.uci.edu/~eppstein/pubs/c-swat.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head>\n<title>David Eppstein - Publications</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body bgcolor=\"#ffffff\" text=\"#000000\">\n<h1>David Eppstein - Publications</h1>\n<hr><p>\n<h2>\nScandinavian Worksh. Algorithm Theory (SWAT)\n</h2>\n<ul>\n<li><b>Finding the <i>k</i> smallest spanning trees</b>.<br>\nD. Eppstein.<br>\n<i>2nd Scand. Worksh. Algorithm Theory,</i> Bergen, Norway, 1990.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 447, 1990, pp. 38&ndash;47.<br>\n<a href=\"Epp-BIT-92.pdf\"><i>BIT</i> 32: 237&ndash;248, 1992</a>\n(special issue for 2nd Scand. Worksh. Algorithm Theory).\n<p>\nBy removing edges not involved in some solution,\nand contracting edges involved in all solutions,\nwe reduce the problem to one in a graph with O(<i>k</i>)\nedges and vertices.  This simplification step\ntransforms any time bound involving <i>m</i> or <i>n</i>\nto one involving min(<i>m,</i> <i>k</i>) or min(<i>n,</i> <i>k</i>)\nrespectively.  This paper also introduces the geometric\nversion of the <i>k</i> smallest spanning trees problem\n(the graph version was long known) which it solves using\norder (<i>k</i>+1) Voronoi diagrams.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Finding the $k$ smallest spanning trees\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Finding-the-k-smallest-spanning-trees.html\">Citations</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=671927\">ACM DL (SWAT)</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=174321\">ACM DL (BIT)</a>)\n<p>\n<li><b>Using sparsification for parametric minimum spanning tree problems</b>.<br>\n<a href=\"//www.cs.iastate.edu/~fernande/\">\nD. Fern&aacute;ndez-Baca</a>,\n<a href=\"//www.cs.iastate.edu/faculty/slutzki.html\">\nG. Slutzki</a>, and D. Eppstein.<br>\n<a href=\"FerSluEpp-SWAT-96.ps.gz\"><i>5th Scand. Worksh. Algorithm Theory,</i> Reykjavik, 1996</a>.<br>\nSpringer, <i>Lecture Notes in\nComp. Sci.</i> 1097, 1996, pp. 149&ndash;160.<br>\n<a href=\"FerSluEpp-NJC-96.pdf\"><i>Nordic J. Computing</i>\n3 (4): 352&ndash;366, 1996 (special issue for 5th SWAT).</a>\n<p>\nGiven a graph with edge weights that are linear functions of a parameter,\nfinds the sequence of\n<a href=\"mst.html\">minimum spanning trees</a> produced as the parameter varies,\nin total time O(mn log n), by combining ideas\nfrom \"<a href=\"p-sparsification.html\">Sparsification</a>\"\nand \"<a href=\"p-geomlb.html\">Geometric lower bounds</a>\".\nAlso solves various problems of optimizing the parameter value,\nincluding one closely related to that in\n\"<a href=\"p-maxwtavg.html\">Choosing subsets with maximum weighted average</a>\".\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Using sparsification for parametric minimum spanning tree problems\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Using-sparsification-for-parametric-minimum-spanning-tree-problems.html\">Citations</a> &ndash;\n<a href=\"//www.cs.helsinki.fi/njc/References/fernandez-bacase1996:352.html\">MIT hypertext bibliography</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=672282\">ACM DL (SWAT)</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=763883\">ACM DL (NJC)</a>)\n<p>\n<li><b>The weighted maximum-mean subtree and other bicriterion subtree problems.</b><br>\n<a href=\"//www.ics.uci.edu/~jcarlson/\">J. Carlson\nand D. Eppstein.<br>\n<a href=\"//arxiv.org/abs/cs.CG/0503023\">arXiv:cs.CG/0503023</a>.<br>\n<i>Proc. 10th Scand. Worksh. Algorithm Theory (SWAT 2006)</i>.<br>\nSpringer, <i>Lecture Notes in Comp. Sci.</i> 4059, 2006, pp. 397&ndash;408.\n<p>\nWe give a linear time algorithm for pruning a node-weighted tree to maximize\nthe average node weight of the pruned subtree; this problem was\npreviously studied under the less obvious name \"The Fractional\nPrize-Collecting Steiner Tree Problem on Trees\".\n<p>\n(<a href=\"//www.ics.uci.edu/~eppstein/bibs/eppstein.html#The maximum-mean subtree\">BibTeX</a>)\n<p>\n<li><b>Cuckoo filter: simplification and analysis</b>.<br>\nD. Eppstein.<br>\n<a href=\"//arxiv.org/abs/1604.06067\">arXiv:1604.06067</a>.<br>\n<i>Proc. 15th Scandinavian Symposium and Workshops on Algorithm\nTheory (SWAT 2016)</i>, Reykjavik, Iceland.<br>\n<a href=\"//doi.org/10.4230/LIPIcs.SWAT.2016.8\">Leibniz International\nProceedings in Informatics (LIPIcs) 53, pp. 8.1&ndash;8.12</a>.\n<p>\nA cuckoo filter is an approximate set data structure that can be used in\nplace of a Bloom filter, but with several practical advantages: it uses\nless space, has better locality of reference, and can handle element\ndeletions. We provide the first theoretical analysis of a simplified\nvariation of cuckoo filters, showing that these advantages can be\nguaranteed to hold theoretically and not just experimentally.\n<p>\n(<a href=\"Epp-SWAT-16-slides.pdf\">Slides</a>)\n<p>\n</ul>\n\n<hr><p>\n<a href=\"conf.html\">Conferences</a> &ndash;\n<a href=\"/~eppstein/pubs/\">Publications</a> &ndash;\n<a href=\"/~eppstein/\">David Eppstein</a> &ndash;\n<a href=\"/~theory/\">Theory Group</a> &ndash;\n<a href=\"/\">Inf. &amp; Comp. Sci.</a> &ndash;\n<a href=\"//www.uci.edu/\">UC Irvine</a>\n<p>\n<small>Semi-automatically <a href=\"filter.html\">filtered</a>\nfrom a common source file.</small>\n</body></html>\n", "encoding": "ascii"}