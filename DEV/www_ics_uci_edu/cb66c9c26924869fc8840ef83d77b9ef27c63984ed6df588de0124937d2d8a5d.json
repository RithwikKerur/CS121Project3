{"url": "https://www.ics.uci.edu/~asuncion/180/dspage.htm", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<title>DSPage</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<style type=\"text/css\">\n<!--\n.style1 {font-family: Arial, Helvetica, sans-serif}\n.style3 {font-family: Arial, Helvetica, sans-serif; font-weight: bold; }\n.style5 {font-size: x-small}\n.style9 {\n\tcolor: #000000;\n\tfont-weight: bold;\n}\n-->\n</style></head>\n<body>\n<p><img src=\"dspage.gif\" width=\"240\" height=\"55\">&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"dspage2.gif\" width=\"216\" height=\"44\">&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"dspage3.gif\" width=\"172\" height=\"36\"></p>\n<hr>\n<p class=\"style1\">Welcome to <a \nhref=\"http://www.ics.uci.edu/%7Easuncion\">Arthur Asuncion</a>'s Digital Signal Processing page. This site has been created for <a href=\"http://music.arts.uci.edu/dobrian/DSP2005/\">ICS 180</a>, which is taught by <a href=\"http://music.arts.uci.edu/dobrian/\">Professor Christopher Dobrian</a>.</p>\n<hr>\n<p class=\"style1\"><strong>March 21: Final Project Deliverables: Signal Processing Applications of Wavelets &amp; AWE Java Program </strong></p>\n<p class=\"style1\"><img height = 300 src=\"awe.gif\" /></p>\n<p class=\"style1\">My <a href=\"Asuncion_Wavelet_Final.pdf\">final research paper</a> is posted as a pdf file. Here is my <a href=\"code.zip\">zipped up code</a> (source files only, uncompiled). In order to compile the source files, use Java1.5, since I developed A.W.E. (Art's Wavelet Effects) in Java 1.5. If you would like to have the Java executables only, I have <a href=\"classFiles.zip\">zipped up the Java class</a> files as well for convenience. Again, use Java 1.5 to run these class files to ensure compatibility. </p>\n<p class=\"style1\">My code set includes 10 classes:</p>\n<ul>\n  <li class=\"style1\">Haar - Encapsulates Haar functionality </li>\n  <li class=\"style1\">Daubechies - Encapsulates Daubechies functionality</li>\n  <li class=\"style1\">Wavelet - Wavelet interface for Haar &amp; Daubechies </li>\n  <li class=\"style1\">SignalView - Makes the GUI </li>\n  <li class=\"style1\">SignalControl - Controls the Program </li>\n  <li class=\"style1\">Sound - Provides Sound Capabilities </li>\n  <li class=\"style1\">WaveletCanvas - Makes a Wavelet Canvas </li>\n  <li class=\"style1\">CartesianCanvas - Makes a Cartesian Canvas </li>\n  <li class=\"style1\">WaveletEffects - Encapsulates Wavelet Effects </li>\n  <li class=\"style1\">Doubleton - Helper Data Structure </li>\n</ul>\n<p class=\"style1\">Here is a brief overview of functionality:</p>\n<ul>\n  <li class=\"style1\">Load File - You must load a file first in order for anything to work. A.W.E. only takes in 16-bit mono and stereo WAV files.</li>\n  <li class=\"style1\">Start, Stop, Pause - Press these button to play, pause, or stop the file</li>\n  <li class=\"style1\">Wavelet Radio Buttons: Choose the wavelet you would like to use (Haar or Daubechies)</li>\n  <li class=\"style1\">Source: Choose whether to use the loaded file as the primary sound source, or your mic (line input)</li>\n  <li class=\"style1\">Simulate Compression: This effect simulates data compression by a factor of 16.</li>\n  <li class=\"style1\">Denoise: This effect simulates the simple denoising of a signal (by removing the highest frequency channel)</li>\n  <li class=\"style1\">Threshold: This effect thresholds the coefficients by a constant in order to simulate another form of data compression</li>\n  <li class=\"style1\">Modulate: This effect multiplies the coefficients to a cosine function to get a modulating sound</li>\n  <li class=\"style1\">Cross-Synthesize with Mic: This effect uses the wavelet coefficients of the mic input to threshold the coefficients of the primary sound source</li>\n  <li class=\"style1\">Remove Clicks: This removes some edge clicks that occur when the coefficients get over-processed</li>\n  <li class=\"style1\">Filter: Check this box if you want to filter the sound according to the 10 input boxes (which represent frequency channels, ordered from low to high frequencies)</li>\n  <li class=\"style1\">Stop View: Check this box if you would like the program to stop refreshing the visualizations (in order to increase audio efficiency). </li>\n</ul>\n<p class=\"style1\">To run A.W.E., simply type &quot;java SignalControl&quot; in the command-line prompt (make sure you are in the directory of the compiled classes).  Enjoy! </p>\n<p class=\"style1\"><strong>Update [March 21, 1:21 PM]</strong>: There is a small correction to the <a href=\"Sound.java\">Sound.java</a> file. This correction allows the correct visualization on Canvas 2 to be shown (the coefficients, rather than the reconstructed signal) when playing stereo files. Note that this doesn't affect the program at all when the program is playing mono files.</p>\n<p class=\"style1\"><strong>Update [March 23, 6:19 PM]</strong>: Here are \nthe  <a href=\"WaveletPresentation.pdf\">slides</a> that I presented today in class. If you have any questions about about my program or about wavelets in general, feel free to <a href=\"http://www.ics.uci.edu/%7Easuncion/contact.htm\">email</a> me. I enjoyed all the presentations today.</p>\n<hr>\n<p class=\"style1\"><strong>February 27: Project<strong> Update</strong>: Signal Processing Applications to Wavelets </strong></p>\n<p class=\"style1\">My project focuses on wavelets and their applications to digital signal processing. I have started to write a rough draft of the <a href=\"Asuncion_Wavelets.pdf\">research paper</a>. This rough draft includes the abstract, references, and text which describes the Haar wavelet transform. I still have to write about the different applications of wavelets. Also, I am planning to write about the Daubechies wavelet transform if I have time. </p>\n<p class=\"style1\">I have implemented many different functions relating to the Haar wavelet in Java:</p>\n<ul class=\"style1\">\n  <li>In-Place Haar Wavelet Transform</li>\n  <li>In-Place Haar Inverse Wavelet Transform</li>\n  <li>Ordering of Wavelet Coefficients</li>\n  <li>Disordering of Wavelet Coefficients</li>\n  <li> Threshold Functions</li>\n  <li>Compression Simulation </li>\n</ul>\n<p class=\"style1\">The Java source and class files are in <a href=\"Wavelet.zip\">Wavelet.zip</a>. In order to test the Haar-related functionality, simply extract the files in Wavelet.zip, open a command-line interface, navigate to the directory where the files are extracted (like Haar.class), and type <span class=\"style9\">java Haar</span> in the command-line interface. This program will print out an 8-sample signal along with its Haar wavelet transform. </p>\n<p class=\"style1\"><img src=\"wavelet.gif\" width=\"267\" height=\"271\"></p>\n<p class=\"style1\">I have also created an application which computes the Haar wavelet transform and inverse transform on a sound signal in realtime and plays the sound on the computer speakers. Simply type <span class=\"style9\">java SignalControl</span> in the same command-line interface. A user interface will be shown. Click on the Load button and select a 16-bit WAV file (this is the only format that is supported). After loading the WAV file, press the Start button. The program will then  transform the signal into wavelet coefficients, process these coefficients, and then transform the coefficients back to the normal time-amplitude format before playing the sound. If the WAV file is 1 channel (Mono), a compression simulation effect will be heard -- the signal will be compressed by a factor of 16. If the WAV file is 2 channels (Stereo), the low frequency coefficients will be thresholded and only the noisy part (the high frequencies) will be heard. For now, I have just hardcoded this functionality into the program. Later on, I plan to allow the manipulation of these effects through the user interface. Also, I have to implement the wavelet coefficient display; right now, the third frame of the user interface is blank. </p>\n<p class=\"style1\">In the zip file, I have also included two sample WAV files. LonelyUniverseIntro.wav is a stereo WAV file, while testReasonLoop.wav is a mono WAV file.</p>\n<p class=\"style1\">Deliverables:</p>\n<ul class=\"style1\">\n  <li><a href=\"Asuncion_Wavelets.pdf\">My research paper </a></li>\n  <li><a href=\"Wavelet.zip\">Wavelet.zip</a></li>\n</ul>\n<hr>\n<p class=\"style1\"><strong>February 14: Max/MSP Assignment on Sound Spatialization </strong></p>\n<p class=\"style1\"><img src=\"doppler.gif\" width=\"370\" height=\"208\"></p>\n<p class=\"style1\">I have created a patch that simulates the effect of Doppler shift. A moving sound source travels from left to right at a constant speed, while the listener stands a certain distance away from the source's line of travel. The primary sound  is a siren  that I generated using a technique similar to Doppler shift. One can also use sound files or the audio-in signal to test this Doppler shift effect. </p>\n<p class=\"style1\">I used the Pythagorean theorem to calculate the distances between the source and each of the listener's ears (with each ear getting its own calculation). I then used these distances, along with the speed of sound, to calculate the delay time for each ear. Since the distances are continuously changing, the delay is also continuously changing, and this gives rise to the Doppler shift. The sound becomes transposed to a higher pitch when the source is travelling towards the listener and to a lower pitch when the source is leaving the listener.</p>\n<p class=\"style1\">I used the varying delay time as my primary technique for sound spatialization. Another technique I used was continuously varying amplitude. One assumption that I made was that a siren sound can be heard within 500 meters. I made the amplitude inversely proportional to the distance between the source and the listener. Since the difference in distance between source-left ear and source-right ear was too miniscule to contribute to a noticeable amplitude change between left and right ear, I also scaled the amplitude again for panning reasons (so that the ear that is closer to the source would notice a higher amplitude than the ear that is further away). This additional amplitude-scaling is justifiable, since in real life, the closer ear has a better 'view' of the sound signal, while the farther ear is potentally being blocked by the listener's head! Thus, the closer ear should notice a considerably higher amplitude, especially in this specific left-to-right simulation.</p>\n<p class=\"style1\">I also used a lowpass filter with a cutoff frequency that becomes lower as the sound source recedes from the listener. I used the lowpass filter since I read in the book (and I heard in class) that the high frequencies cannot be heard as well as the low frequencies at greater distances. However, I am not sure that the lowpass filter contributes anything significant to my patch (maybe my parameters are not fine tuned enough).</p>\n<p class=\"style1\">Here is my patch as a text file (with many more comments and detailed user notes):</p>\n<ul>\n  <li><a href=\"dopplershiftstereo.txt\" class=\"style1\">dopplershiftstereo.txt</a></li>\n</ul>\n<hr>\n<p><span class=\"style3\">February 2: Proposal  for Final Research Project</span></p>\n<p class=\"style1\">There are several topics that I am currently thinking of pursuing: wavelets, pitch detection, or probabilistic composition.</p>\n<p class=\"style1\">Wavelets are used in spectrum analysis as an alternative to FFT (Fast Fourier Transform). I would like to research the advantages and disadvantages of using wavelet transformations over FFT. Furthermore, I would like to implement both WT (wavelet transformation) and FFT to compare the two approaches. I think that wavelets can be implemented in Max/MSP or in a standard programming language like C or Java. Curtis Roads gives a good overview of wavelets in Ch. 13 of his Computer Music textbook. Furthermore, I have done some initial browsing of web sites that are devoted to wavelets. After browsing through some sites, I have noticed that the topic of wavelets seems to require a lot of mathematical theory, so I am not yet sure of the feasibility of this proposal. Therefore, I am also considering other topics for my final research project.</p>\n<p class=\"style1\">Pitch detection is a more manageable topic that I might pursue. Curtis Roads gives a good treatise of this subject in Ch. 12 of his textbook. I would eventually like to implement a program that converts a wav file into a MIDI file. Handling multiple notes (polyphony) might be difficult. However, I have thought up of a non-realtime recursive approach to detecting multiple notes. Here is the algorithm that I have thought up (which has probably already been invented already): 1) Find the most obvious frequency in the sound. This is your first note. 2) Subtract this frequency from the original sound. And then repeat steps 1 and 2 for several iterations to get all of the notes that are in the sound.</p>\n<p class=\"style1\">The last topic that interests me is algorithmic composition using probabilistic models. Curtis Roads treats this subject in Ch. 18. I am familiar with Markov models and various probabilistic distributions, and I think that it would be very interesting to create a program that intelligently makes music. I am not sure if this topic is within the scope of the class, since it seems that there is no real Digital Signal Processing that is happening within the algorithmic composition of music. If I do this topic, perhaps I could extend my G.I.G. Java applet to be truly intelligent. There could be a Markov model that gives probabilities for each transition between chords. I must note that  I am not too strong on music theory, so I would need to research the probabilistic distributions of chord transitions and progressions. </p>\n<p class=\"style1\">If I have enough time, I would like to integrate all of these topics into one cohesive framework. Perhaps wavelets could be used to produce a more accurate pitch detection tool, and then this pitch detection tool could influence an artificially intelligent algorithmic composition system in real time. However, a combination of these topics does not seem like a feasible project to do within 6 weeks. Hence, I will most likely have to narrow my project to just one choice.</p>\n<hr>\n<p><span class=\"style3\">Assignment for Wednesday, January 19:</span></p>\n<p class=\"style1\">For this assignment, I have developed a C program called AMP, which stands for <strong>A</strong>rt's <strong>M</strong>ulti-effects <strong>P</strong>rocessor. Not only is AMP a real-time digital signal processor with three included effects (distortion, tremolo, and delay), but it is also an extensible framework that can be used to quickly create a new digital effect. AMP also dynamically facilitates both the creation of effects chains and the modification of effect parameters in real time.</p>\n<p class=\"style1\">AMP supports three basic operations: adding an effect to the effects chain, removing an effect from the effects chain, and modifying the parameters for each effect. In order to dynamically add and remove effects from the effects chain, AMP stores effect function pointers in an array and selects (from this array) the desired effect function(s) to run, based on the user's input. Browse the <a href=\"amp.c\">amp.c</a> code for more implementation details. </p>\n<p class=\"style1\">Different orderings of the effects in the effects chain can be utilized to process the signal in different ways. For instance, an effects chain configuration like <em>Input --&gt; tremolo --&gt; delay --&gt; Output</em> would produce a combined effect that is different from a configuration like <em>Input --&gt; delay --&gt; tremolo --&gt; Output</em>.  Sometimes the differences are very subtle. </p>\n<p class=\"style1\">AMP requires the standard <a href=\"http://www.portaudio.com\">PortAudio</a> files.  To use AMP on Windows, one would need to link to <em>winmm.lib</em> to compile. </p>\n<ul>\n  <li class=\"style1\">Here is the <a href=\"amp.c\">amp.c</a> file.</li>\n  <li class=\"style1\">Here is the <a href=\"Amp.exe\">Amp.exe</a> program.</li>\n</ul>\n\n<p><img src=\"amp.gif\" width=\"669\" height=\"338\"> </p>\n<hr>\n<p><span class=\"style3\">DSPage Links:</span></p>\n<ul>\n  <li class=\"style1\"><a href=\"http://music.arts.uci.edu/dobrian/digitalaudio.htm\">Digital Audio</a> by Professor Dobrian</li>\n  <li class=\"style1\"><a href=\"http://music.arts.uci.edu/dobrian/DSP2005/software.htm\">Computer Audio Software</a> for ICS 180</li>\n</ul>\n<p class=\"style1\"><strong>Personal Music Links: </strong></p>\n<ul>\n  <li class=\"style1\"><a \nhref=\"http://www.ics.uci.edu/~asuncion/GuitarFactory/GIG/gig.htm\">Guitar Intelli-Generator</a> by Arthur Asuncion </li>\n</ul>\n<hr>\n<p class=\"style1 style5\">Last Modified March 21, 2005</p>\n</body>\n</html>\n", "encoding": "ascii"}