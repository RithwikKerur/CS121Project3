{"url": "https://www.ics.uci.edu/~alspaugh/cls/shr/xslt.html", "content": "<?xml version='1.1'?>\n<!DOCTYPE html\n     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'\n     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>\n<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>\n<head>\n  <title>XSLT</title>\n  <meta name='Author' content='Thomas A. Alspaugh'/>\n  <meta name='Description' content=\"XSLT\"/>\n  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>\n  <meta http-equiv='Content-Style-Type' content='text/css'/>\n  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>\n  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->\n  <style type='text/css'>\n    @media screen {\n      body     {  background: url(\"img/bg-xslt.png\") repeat-y;  }\n      #TMain   {  margin-left: 10.00em;  }\n    }\n  </style>\n</head>\n<body>\n\n<div id='TBg'>\n\n<div id='THeader'>\nXSL Transformations (XSLT)\n<span class='newUrl'><a href='https://thomasalspaugh.org/pub/fnd/xslt.html'\n  >thomasalspaugh.org/pub/fnd/xslt.html</a></span>\n</div>\n\n<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->\n<p>  <a class='sc' href='../../index.html'>Home</a>\n</p>\n<div class='hr'> </div>\n<p>  <a href='index.html'>Foundations home</a>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='set.html'>Sets</a><br/>\n<a href='relation.html'>Relations</a><br/>\n<a href='correspondence.html'>Correspondences</a><br/>\n<a href='orderedSet.html'>Ordered Sets</a><br/>\n<a href='lattice.html'>Lattices</a><br/>\n<a href='graph.html'>Graphs</a><br/>\n<a href='powerset.html'>Powersets</a><br/>\n<a href='binaryString.html'>Binary Strings</a><br/>\n<a href='logicConcepts.html'>Logic</a><br/>\n<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->\n<a href='greek.html'>Greek</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='glossaryExternal.html'>Glossary</a><br/>\n<a href='goodAbstract.html'>Abstracts</a><br/>\n<a href='argument.html'>Argument</a><br/>\n<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>\n<a href='hohfeld.html'>Legal Relations</a><br/>\n<a href='goodPresentation.html'>Presentations</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='quickStart.html'>Elicitation</a><br/>\n<a href='ontology.html'>Glossaries</a><br/>\n<a href='goal.html'>Goals</a><br/>\n<a href='istar.html'>i*</a><br/>\n<a href='SCR.html'>SCR</a><br/>\n<a href='tracing.html'>Tracing</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='alloy.html'>Alloy</a><br/>\n<a href='msc.html'>MSCs</a><br/>\n<a href='regularExpression.html'>Regular Exprs.</a><br/>\n</p><!-- -spell MSCs Exprs -->\n<div class='hr2'> </div>\n<p>\n<a href='java-designPattern.html'>Design Patterns</a><br/>\n<a href='javadoc.html'>Javadoc</a><br/>\n<a href='java-package.html'>Java Packages</a><br/>\n<a href='java-type.html'>Java Types</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='html.html'>(X)HTML</a><br/>\n<a href='xmlSchema.html'>XML Schemas</a><br/>\n<a href='xslt.html'>XSLT</a><br/>\n</p><!-- -spell XSLT -->\n</div>\n\n\n<!-- No right column -->\n<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->\n<!--xhtml -y -->\n\n\n<!--spell CSS Localnames NCName QName Qnames Stylesheets UTF XMLSchema -->\n<!--spell XPath XSL Za abc abcd abcde arabic attribute's atttribute -->\n<!--spell atttributes bc boofle de dir doctype href html http img jpg -->\n<!--spell lang localname lt namespace normalizedString numberStyle -->\n<!--spell olist paraNest param qname simpleType src stylesheet stylesheets -->\n<!--spell twelveDays when's xalan xml xmlns xs xsl -->\n\n\n<h1>Table of contents</h1>\n\n<div id='ToC'>\n  <h1><a href='#Introduction'>Introduction and context</a></h1>\n  <h2><a href='#Weaknesses'>Some weaknesses of XSLT</a></h2>\n  <h1><a href='#node'>Nodes</a></h1>\n  <h1><a href='#stylesheet'>Stylesheets and the <code>stylesheet</code> element</a></h1>\n  <h1><a href='#template'>Matching templates</a></h1>\n  <h2><a href='#TemplateMatching'>Defining a template to match to a node</a></h2>\n  <h2><a href='#Pattern'>Patterns for matching nodes</a></h2>\n  <h2><a href='#Output'>Producing output from a template</a></h2>\n  <h3><a href='#Literally'>Literal template contents</a></h3>\n  <h3><a href='#copy'><code>copy</code></a></h3>\n  <h3><a href='#AttributeValueTemplate'>Attribute value templates</a></h3>\n  <h3><a href='#attribute'><code>attribute</code></a></h3>\n  <h3><a href='#element'><code>element</code></a></h3>\n  <h3><a href='#text'><code>text</code></a></h3>\n  <h3><a href='#comment'><code>comment</code></a></h3>\n  <h3><a href='#value-of'>Computing text with <code>value-of</code></a></h3>\n  <h3><a href='#copy-of'>Computing nodes with <code>copy-of</code></a></h3>\n  <h3><a href='#Example'>Example of producing output from a template</a></h3>\n  <h2><a href='#apply-templates'>Recursively applying templates</a></h2>\n  <h2><a href='#mode'>Template modes</a></h2>\n  <h2><a href='#TemplatePrecedence'>Which template is applied?</a></h2>\n  <h2><a href='#BuiltInTemplates'>Built-in templates</a></h2>\n  <h1><a href='#Whitespace'>Whitespace handling</a></h1>\n  <h1><a href='#NamedTemplate'>Named templates</a></h1>\n  <h1><a href='#VariableOrParameter'>Variables and parameters</a></h1>\n  <h1><a href='#for-each'><code>for-each</code></a></h1>\n  <h1><a href='#number'>Numbering things in the output</a></h1>\n  <h1><a href='#sort'><code>sort</code></a></h1>\n  <h1><a href='#Conditional'>If and when</a></h1>\n  <h1><a href='#IncludeImport'>Including and importing stylesheets</a></h1>\n  <h1><a href='#output'>Output method</a></h1>\n  <h1><a href='#NotCovered'>Not here, but in XSLT</a></h1>\n  <h1><a href='#References'>References</a></h1>\n</div> <!-- id='ToC' -->\n\n\n\n<h1 id='Introduction'>Introduction and context</h1>\n\n<p>\nXSLT is a language for transforming XML documents.&nbsp;\nThe result can be another XML document, an HTML document,\nor any text document.&nbsp;\nThe transformation is done by matching\n<code><a href='#template'>templates</a></code>\nin an XSLT stylesheet\nagainst an XML document.&nbsp;\nEach template defines the output produced when it is matched.&nbsp;\nIf desired,\neach template can use other templates recursively\nto produce parts of its output.&nbsp;\n</p>\n\n<p>\nThis document summarizes the basic features of XSLT.&nbsp;\nFor more information see the <a href='#XSLT'>W3C recommendation</a>\nthat defines XSLT.&nbsp;\n</p>\n\n<p>\nXSLT is a part of XSL, which is a general XML stylesheet language\nthat also handles how an XML file is presented\n(like CSS for HTML).&nbsp;\nXSLT is the part of XSL that deals with transformations of XML files.&nbsp;\n</p>\n\n<p>\nThe XSLT output of the examples in this document\nwas generated automatically using\n<a href='http://xml.apache.org'>xalan</a>.&nbsp;\n</p>\n\n<p>\nXSLT element and attribute names made from two words\nhave a hyphen between the words\n(for example\n<code><a href='#value-of'>value-of</a></code> and\n<code><a href='#preserve-space'>preserve-space</a></code>).&nbsp;\nThis is in contrast to analogous\n<a href='xmlSchema.html'>XML Schema</a> element and attribute names,\nin which the second word is capitalized\nand catenated to the first one\n(for example,\n<code><a href='xmlSchema.html#simpleType'>simpleType</a></code> and\n<code><a href='xmlSchema.html#normalizedString'>normalizedString</a></code>).&nbsp;\n</p>\n\n\n<h2 id='Weaknesses'>Some weaknesses of XSLT</h2>\n\n<p>\nBecause XSLT stylesheets are XML files,\nand elements of XML files have to be correctly nested,\nit is not possible to write a stylesheet\nthat produces the beginning of an element in one template\nand the end in another;&nbsp;\nan element must be entirely written\nfrom one template.&nbsp;\n</p>\n\n<p>\nXSLT does not have strong facilities for\nmodularizing a stylesheet,\nso complex transformations are difficult to manage.&nbsp;\nIt is easy for an XSLT stylesheet to get out of hand\nand become incomprehensible to its creator.&nbsp;\n</p>\n\n\n<h1 id='node'>Nodes</h1>\n\n<div class='figure' id='Figure1'>\n  <img src='img/xmlNodeTree.png' alt='XML node tree'\n   style='height: 3.5cm;'/>\n  <p>Figure 1.&nbsp; Node tree for example\n  </p>\n</div>\n\n<p>\nXSLT considers an XML file to consist of\na tree of <dfn>nodes</dfn>,\nin which each element, attribute, and string of text contained in an element\nis a node.&nbsp;\nEach attribute of an element\nis a child node of that element's node;&nbsp;\neach child element is also a child node of that element's node.&nbsp;\nIf the element's contents are text only,\nthe element's node has a single child node for that text;&nbsp;\nif the element contains elements and text mixed,\nthen its node has a child node for each segment of text\nand each child element.&nbsp;\nEach node of an input XML document\nis processed by a template and can produce output.&nbsp;\nThe nodes are most commonly traversed in pre-order\n(parent node first, followed by child nodes in sequence, recursively),\nbut XSLT provides ways of processing nodes in almost any order,\nas will be seen later.&nbsp;\n</p>\n\n<p>\nFigure 1 shows the node tree for this XML element:&nbsp;\n</p>\n\n<pre>\n  &lt;body&gt;\n    &lt;p class='sum'&gt;Total Amount: &lt;xsl:value-of select='expense-report/total'/&gt;&lt;/p&gt;\n  &lt;/body&gt;\n</pre>\n\n\n<h1 id='stylesheet'>Stylesheets and the <code>stylesheet</code> element</h1>\n\n<p>\nAn XSLT stylesheet is an XML file containing a <code>stylesheet</code> element,\nas in this example:&nbsp;\n</p>\n\n<pre>\n  &lt;?xml version='1.0'?&gt;\n  &lt;xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&gt;\n    ...\n  &lt;/xsl:stylesheet&gt;\n</pre>\n\n<p>\nThe <code>xsl:</code> prefix is commonly used for XSLT elements,\nbut any prefix can be used if it is\ndefined in the <code>xmlns</code> attribute.&nbsp;\nEach prefix used in the stylesheet\nmust be declared in the <code><a href='#stylesheet'>stylesheet</a></code> element\nas an <code>xmlns:</code> attribute\n(as <code>xsl:</code> has been above, in the <code>xmlns:xsl</code> attribute).&nbsp;\n</p>\n\n<p>\n<code><a href='#stylesheet'>stylesheet</a></code> may have an\n<code>exclude-result-prefixes</code> attribute\nwhose value is a list of namespace prefixes\nthat are not to be automatically given\nto output nodes.&nbsp;\nEach such prefix must have been declared as an <code>xmlns:</code> attribute.&nbsp;\n</p>\n\n\n<h1 id='template'>Matching templates</h1>\n\n<h2 id='TemplateMatching'>Defining a template to match to a node</h2>\n\n<p>\nA <code>template</code> element can be set up to match a node\n<a href='#Pattern'>pattern</a>,\nas in the example below.&nbsp;\nThe pattern is given in the <code>match</code> attribute.&nbsp;\nThe template expression can match no nodes, one node, many nodes, or all nodes.&nbsp;\n</p>\n\n<pre>\n  &lt;xsl:template <b>match='item'</b>&gt; &lt;!-- Matches an item child of the context node --&gt;\n    ... &lt;!-- See <a href='#Output'>below</a> for contents of a template --&gt;\n  &lt;/xsl:template&gt;\n</pre>\n\n<p>\nSee also <a href='#NamedTemplate'>named templates</a>.&nbsp;\n</p>\n\n\n<h2 id='Pattern'>Patterns for matching nodes</h2>\n\n<p id='ContextNode'>\nXSLT uses a subset of <a href='#XPath'>XPath</a> expressions as patterns\nto match against XML nodes.&nbsp;\nExpressions can be absolute\n(beginning with <code>/</code> for the root element)\nor relative to a <i>context node</i>,\nthe current location.&nbsp;\nHere is a list of example expressions\n(many adapted from examples in\n[<a href='#XSLT'>XSLT</a>] and\n[<a href='#XPath'>XPath</a>]).&nbsp;\n</p>\n\n<ul>\n  <li> <code>/</code> matches the root element\n  </li>\n  <li> <code>.</code> matches the context node\n  </li>\n  <li> <code>..</code> matches the parent of the context node\n  </li>\n  <li> <code>*</code> matches any child element of the context node\n  </li>\n  <li> <code>para</code> matches any <code>para</code> child element\n    of the context node\n  </li>\n  <li> <code>chapter|appendix</code> matches any\n    child element of the context node\n    that is either\n    a <code>chapter</code> or an <code>appendix</code>\n  </li>\n  <li> <code>/olist</code> matches any <code>olist</code> element\n    that is a child of the root element\n  </li>\n  <li> <code>//olist</code> matches any <code>olist</code> element\n    that is a descendant of the root element\n    (i.e. anywhere in the document)\n  </li>\n  <li> <code>olist/item</code> matches any <code>item</code> element\n    that is a child of an <code>olist</code> element\n    that is a child of the context node\n  </li>\n  <li> <code>appendix//para</code> matches any <code>para</code> element\n    that is a descendant of an <code>appendix</code> element\n    that is a child of the context node\n  </li>\n  <li> <code>*[1]</code> matches\n    any element that is the first child element of the context node\n  </li>\n  <li> <code>para[1]</code> matches any <code>para</code> element\n    that is the first <code>para</code> child element of the context node\n  </li>\n  <li> <code>para[position() &amp;gt; 1]</code> matches any <code>para</code> element\n    that is the second or later <code>para</code> child element of\n    the context node\n    (<code>&lt;</code> and <code>&gt;</code> must be represented by\n    <code>&amp;lt;</code> and <code>&amp;gt;</code> in attribute values)\n  </li>\n  <li> <code>para[last()]</code> matches any <code>para</code> element\n    that is the last <code>para</code> child element of the context node\n  </li>\n  <li> <code>para[last()=1]</code> matches any <code>para</code> element\n    that is the only <code>para</code> child element of the context node\n    (the last child is the first)\n  </li>\n  <li> <code>para[position()=2 and last()=3]</code> matches\n    any <code>para</code> element\n    that is the second of three <code>para</code> child elements of the context node\n  </li>\n  <li> <code>para[position() mod 2 = 1]</code>\n    matches any <code>item</code> element that is\n    the 1st or 3rd or 5th or ... child of the context node\n  </li>\n  <li> <code>chapter[@title='Appendix']</code> matches any <code>chapter</code>\n    child element of the context node\n    that has a <code>title</code> attribute whose value is 'Appendix'\n  </li>\n  <li> <code>div[@class]//p</code> matches any <code>p</code> element\n    with a <code>div</code> ancestor element that has\n    a <code>class</code> attribute\n    and is a child of the context node\n  </li>\n  <li> <code>*[position()=last() or @title!='Appendix']</code> matches\n    any child element of the context node\n    that is the last child element\n    or has a <code>title</code> attribute whose value is not 'Appendix'\n  </li>\n  <li> <code>@*</code> matches any attribute of the context node\n    (not any element that has an attribute)\n  </li>\n  <li> <code>@class</code> matches any <code>class</code> attribute\n    of the context node\n    (not any element that has a <code>class</code> attribute)\n  </li>\n  <li> <code>text()</code> matches any text node\n    that is the child of the context node,\n    for example the simple content of an element\n  </li>\n  <li> <code>node()</code> matches any child element of the context node\n  </li>\n</ul>\n\n<p>\nA name may be\n</p>\n\n<ul>\n  <li id='localname'>\n    a <dfn>localname</dfn> such as <code>item</code>\n    with no namespace prefix,\n    corresponding to the\n    <a href='xmlSchema.html#NCName'><code>xs:NCName</code></a> predefined type;&nbsp;\n    or\n  </li>\n  <li id='qname'>\n    a <dfn>qualified name</dfn> or <dfn>qname</dfn>  such as <code>xs:QName</code>\n    with a namespace prefix,\n    corresponding to the\n    <a href='xmlSchema.html#QName'><code>xs:QName</code></a> predefined type.&nbsp;\n    The prefix must have been defined in an\n    <code><a href='xmlSchema.html#xmlns_'>xmlns:*</a></code> attribute\n    such as <code>xmlns:xs='http://www.w3.org/2001/XMLSchema'</code>\n    of the current element or a parent element.&nbsp;\n  </li>\n</ul>\n\n<p>\nLocalnames only match elements and attributes in an XML file\nwith no default namespace.&nbsp;\nQnames only match elements and attributes\nwhose default namespace or explicit prefix corresponds to\nthe namespace for the qname.&nbsp;\n</p>\n\n<p>\nIn summary:\n</p>\n\n<ul>\n  <li> names represent element names\n  </li>\n  <li> names preceded by @ represent attribute names\n  </li>\n  <li> / and // constrain an element match by matching on the element's\n    parent or ancestor elements\n  </li>\n  <li> .. matches a parent node\n  </li>\n  <li> [] encloses a condition that further constrains an element match,\n    or an integer expression such as <code>1</code> or <code>last()</code>\n    that is shorthand for the condition\n    <code>position=1</code> or <code>position=last()</code>\n  </li>\n  <li> [] may constrain any element in a / or // chain\n  </li>\n  <li> expressions beginning with / are absolute\n  </li>\n  <li> all other expressions are relative to the context node\n  </li>\n</ul>\n\n\n<h2 id='Output'>Producing output from a template</h2>\n\n<p>\nA <code><a href='#template'>template</a></code> element can contain\ntext, non-XSLT elements, and XSLT elements.&nbsp;\nWhen a template matches an input element or attribute,\nthe text and non-XSLT elements it contains are written as output\n(with whitespace <a href='#Whitespace'>compressed or stripped</a>\nand <a href='#AttributeValueTemplate'>attribute value templates</a> expanded).&nbsp;\nXSLT elements it contains are replaced by their own output.&nbsp;\n</p>\n\n<table summary='Ways to produce output from XSLT'>\n<caption>Table 1.&nbsp; Ways to produce output from XSLT</caption>\n<tbody>\n  <tr><th>If you want to:\n      </th>\n      <th>Put in the template:\n      </th>\n  </tr>\n  <tr><td> produce fixed output (other than\n      XSLT elements and <code>&lt;!-- --&gt;</code> comments)\n      </td>\n      <td> the fixed output itself\n      </td>\n  </tr>\n  <tr><td> produce a copy of the context node\n      </td>\n      <td> <code><a href='#copy'>copy</a></code>\n      </td>\n  </tr>\n  <tr><td> compute the value of an attribute\n      </td>\n      <td> an <a href='#AttributeValueTemplate'>attribute value template</a>\n      </td>\n  </tr>\n  <tr><td> compute the name of an attribute\n      </td>\n      <td> <code><a href='#attribute'>attribute</a></code>\n      </td>\n  </tr>\n  <tr><td> compute the name of an element,\n            or output an XSLT element\n      </td>\n      <td> <code><a href='#element'>element</a></code>\n      </td>\n  </tr>\n  <tr><td> compute text in an element\n      </td>\n      <td><code><a href='#value-of'>value-of</a></code>\n      </td>\n  </tr>\n  <tr><td> produce a set of copies of input nodes\n      </td>\n      <td> <code><a href='#copy-of'>copy-of</a></code>\n      </td>\n  </tr>\n  <tr><td> produce a <code>&lt;!-- --&gt;</code> comment\n        in the output\n      </td>\n      <td> <code><a href='#comment'>comment</a></code>\n      </td>\n  </tr>\n  <tr><td> control output whitespace exactly\n        and/or produce newlines in the output\n      </td>\n      <td> <code><a href='#text'>text</a></code>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n<p>\nXSLT produces XML output by default\n(with an XML header),\nbut can be changed to output HTML or text\nusing the <code>method</code> attribute of the\n<code><a href='#output'>output</a></code> element.&nbsp;\n</p>\n\n<p>\nSee Examples\n<a href='#eg-copy'>1</a> (<code><a href='#copy'>copy</a></code>),\n<a href='#eg-attributeValueTemplate'>2</a>\n(<a href='#AttributeValueTemplate'>attribute value templates</a>),\nand\n<a href='#eg-outputAll'>3</a> (many ways of producing output) below\nfor examples of templates.&nbsp;\n</p>\n\n\n<h3 id='Literally'>Literal template contents</h3>\n\n<p>\nThe simplest way to produce text and non-XSLT elements in the output\nis just to put them in the contents of the template.&nbsp;\nThis always works if the text and elements are fixed\nand you are not particular about whitespace\n(see <a href='#Whitespace'>Whitespace handling</a>).&nbsp;\n</p>\n\n<p>\nSee <a href='#eg-attributeValueTemplate'>Example 2</a> below for an example\nof literal contents in a template.&nbsp;\n</p>\n\n\n<h3 id='copy'><code>copy</code></h3>\n\n<p>\nIf a copy of the input node is desired in the output,\nthe <code><dfn>copy</dfn></code> element may be used in the template.&nbsp;\n<code><a href='#copy'>copy</a></code> creates an element or attribute\nwith the same name as the context node\n(but does not create its child elements or attributes if any &mdash;\nsee <code><a href='#copy-of'>copy-of</a></code> for that).&nbsp;\nThe contents of the <code><a href='#copy'>copy</a></code> element\nare expanded to become the contents of the output element or attribute.&nbsp;\n</p>\n\n<table id='eg-copy' summary='eg-copy'>\n<tbody>\n  <tr><th colspan='2'>Example 1.&nbsp; Copying elements and attributes\n      </th>\n  </tr>\n  <tr><th>XSLT\n      </th>\n      <td>\n<pre>\n&lt;?xml version='1.0'?&gt;\n&lt;xsl:<a href='#stylesheet'>stylesheet</a> xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&gt;\n  &lt;xsl:<a href='#output'>output</a> method='xml'/&gt;\n\n  &lt;xsl:<a href='#template'>template</a> match='para'&gt;\n    &lt;paraNest&gt;\n      &lt;xsl:<a href='#copy'>copy</a>&gt;&lt;xsl:<a href='#apply-templates'>apply-templates</a> select='<span class='attrexpr'>@*</span>'/&gt;Contains '&lt;xsl:apply-templates\n        select='<span class='attrexpr'>text()</span>'/&gt;'.&lt;/xsl:copy&gt;\n    &lt;/paraNest&gt;\n  &lt;/xsl:template&gt;\n\n  &lt;xsl:<a href='#template'>template</a> match='@depth'&gt;\n    &lt;xsl:<a href='#copy'>copy</a>/&gt;\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n      </td>\n  </tr>\n  <tr><th>Input\n      </th>\n      <td>\n<pre>\n&lt;para depth='1'&gt;woo-woo!&lt;/para&gt;</pre>\n      </td>\n  </tr>\n  <tr><th>Output\n      </th>\n      <td>\n<pre>\n&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;paraNest&gt;&lt;para depth='1'&gt;Contains 'woo-woo!'.&lt;/para&gt;&lt;/paraNest&gt;</pre>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h3 id='AttributeValueTemplate'>Attribute value templates</h3>\n\n<p>\nAttribute values in non-XSLT elements\nof a <code><a href='#template'>template</a></code>\nmay contain <dfn>attribute value templates</dfn> enclosed in <code>{}</code>,\nwhich are expanded\nwhen output is produced for the <code><a href='#template'>template</a></code>.&nbsp;\nAn attribute value template is an\nXPath expression (such as a <a href='#Pattern'>pattern</a>),\npossibly extended with\n<a href='#VariableOrParameter'>XSLT variable or parameter references</a>&nbsp;\n(<code>$x</code> where <code>x</code> is the name of the variable or parameter)\nand additional functions and extensions\ndescribed in [<a href='#XSLT'>XSLT</a>].&nbsp;\nThe <a href='#ContextNode'>context node</a> for the attribute value template\nis the node matched by the <code><a href='#template'>template</a></code>.&nbsp;\n</p>\n\n<p>\nAny <a href='#Pattern'>pattern</a> that can be used for matching nodes\ncan also be used in an attribute value template:&nbsp;\n</p>\n\n<ul>\n  <li> <code>{href}</code> is replaced by the (simple) contents of\n    child element <code>href</code> of the matched element;&nbsp;\n    if there is more than one <code>href</code> child element,\n    the contents of the first one are used\n  </li>\n  <li> <code>{@width}</code> is replaced by\n    the value of attribute <code>width</code>\n    of the matched element\n  </li>\n  <li> <code>{size/@width}</code> is replaced by\n    the value of attribute <code>width</code>\n    of the <code>size</code> child element of the matched element\n  </li>\n  <li> <code>{../@width}</code> is replaced by\n    the value of attribute <code>width</code>\n    of the parent of the matched element\n  </li>\n</ul>\n\n<p>\nBut there are additional <a href='#XPath'>XPath</a> expressions\nthat can be used as well,\nof which a few are:&nbsp;\n</p>\n\n<ul>\n  <li> <code>{'href'}</code> is replaced by\n    the literal string <code>href</code>.&nbsp;\n  </li>\n  <li> <code>{$image-dir}</code> is replaced by the value of\n    XSLT <a href='#VariableOrParameter'>variable or parameter</a>\n    <code>image-dir</code>.&nbsp;\n  </li>\n  <li> <code>{local-name(.)}</code> is replaced by\n    the local name of the first node its argument matches.&nbsp;\n    Any <a href='#Pattern'>pattern</a> can be used in place of '.'.&nbsp;\n  </li>\n  <li> <code>{substring('abc', 2, 1)}</code> is replaced by\n    the substring of 'abc' beginning at the 2nd character (1-origin)\n    of length 1 (in other words, by 'b').&nbsp;\n    If the length parameter is omitted the substring extends\n    to the end of the string.&nbsp;\n  </li>\n  <li> <code>{substring-after('abcde', 'bc')}</code> is replaced by\n    the substring of 'abcde'\n    following the first appearance of 'bc'\n    (in other words, by 'de').&nbsp;\n    The <code>substring-before</code> function is analogous.&nbsp;\n  </li>\n</ul>\n\n<p>\nTo include a <code>{</code> or <code>}</code> in an attribute,\ndouble it.&nbsp;\nFor example,\n<code>{{$image-dir}}</code> represents the literal string\n<code>{$image-dir}</code>.&nbsp;\nOtherwise, <code>{</code> or <code>}</code> are not allowed inside\nthe enclosing <code>{}</code> of an attribute value template.&nbsp;\n</p>\n\n<p>\nThe values of certain XSL attributes\nsuch as <code>select</code> and <code>name</code>\nare assumed to be attribute value templates &mdash;\ntemplates in these attributes' values\nshould not be enclosed in <code>{}</code>,\nand literal strings in these values\nmust be quoted (with single quotes <code>'x'</code>\nif the attribute's value is double-quoted as usual).&nbsp;\nThese attributes are listed at the end of the document\nin <a href='#ExpressionAttributes'>Table 3</a>.&nbsp;\n(They are distinguished in\n[<a href='#XSLT'>XSLT</a>]'s syntax summary of each element\nby having an expression type,\nor being enclosed in <code>{}</code>.)&nbsp;\nFor example:&nbsp;\n<code>select=''href''</code> selects the literal string <code>href</code>,\nwhile\n<code>select='href'</code> selects the child <code>href</code> element\nof the context node.&nbsp;\n</p>\n\n<table id='eg-attributeValueTemplate' summary='eg-attributeValueTemplate'>\n<tbody>\n  <tr><th colspan='2'>Example 2.&nbsp; Attribute value templates in a\n        <code><a href='#template'>template</a></code>\n      </th>\n  </tr>\n  <tr><th>XSLT\n      </th>\n      <td>\n<pre>\n&lt;?xml version='1.0'?&gt;\n&lt;xsl:<a href='#stylesheet'>stylesheet</a> xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&gt;\n  &lt;xsl:<a href='#output'>output</a> method='html'/&gt;\n\n  &lt;xsl:<a href='#variable'>variable</a> name='image-dir'&gt;/images&lt;/xsl:variable&gt;\n\n  &lt;xsl:<a href='#template'>template</a> match='photograph'&gt;\n    &lt;img src='{<span class='attrexpr'>$image-dir</span>}/{<span class='attrexpr'>href</span>}' width='{<span class='attrexpr'>size/@width</span>}'/&gt;\n    &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;&lt;!-- <i>outputs a newline</i> --&gt;\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n      </td>\n  </tr>\n  <tr><th>Input\n      </th>\n      <td>\n<pre>\n&lt;photograph&gt;\n  &lt;href&gt;headquarters.jpg&lt;/href&gt;\n  &lt;size width='300'/&gt;\n&lt;/photograph&gt;\n</pre>\n      </td>\n  </tr>\n  <tr><th>Output\n      </th>\n      <td>\n<pre>\n&lt;img width='300' src='/images/headquarters.jpg'&gt;\n</pre>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h3 id='attribute'><code>attribute</code></h3>\n\n<p>\nAn attribute and its value can be produced in the output\nby an <code><dfn>attribute</dfn></code> element\nin an <code><a href='#element'>element</a></code> child element of the template;&nbsp;\nthis allows production of an attribute with a computed name.&nbsp;\nThe <code><a href='#attribute'>attribute</a></code>'s\n<code>name</code> gives the output attribute's name,\nand the contents of the <code><a href='#attribute'>attribute</a></code> element\ngive its value.&nbsp;\n</p>\n\n<p>\nUnless the attribute's name is computed,\nor it is part of an output element produced with\n<code><a href='#element'>element</a></code>,\nit is simpler and just as effective to\nput the attribute literally in the template and\nuse an <a href='#AttributeValueTemplate'>attribute value template</a>\nin its value if necessary,\nrather than use <code><a href='#attribute'>attribute</a></code>.&nbsp;\n</p>\n\n<p>\nExample:&nbsp;\nThis <code><a href='#attribute'>attribute</a></code> element outputs\nan attribute of an <code>img</code> element.&nbsp;\nThe attribute's name is\nthe value of the <code>src-attribute</code> variable or parameter,\nand the attribute's value is the contents of the\ncontext node's <code>href</code> child element.&nbsp;\n</p>\n\n<pre>\n  &lt;xsl:<a href='#element'>element</a> name='img'&gt;\n    &lt;xsl:<a href='#attribute'>attribute</a> name='{$src-attribute}'&gt;\n      &lt;xsl:<a href='#value-of'>value-of</a> select='{href}'/&gt;\n    &lt;/xsl:attribute&gt;\n  &lt;/xsl:element&gt;\n</pre>\n\n\n<h3 id='element'><code>element</code></h3>\n\n<p>\nAn element can be produced in the output\nby an <code><dfn>element</dfn></code> element\nin the template;&nbsp;\nthis is used to output an element with a computed name or attribute,\nor to output an XSLT element.&nbsp;\nThe <code><a href='#element'>element</a></code>'s <code>name</code> attribute\ngives the output element's name,\n<code><a href='#attribute'>attribute</a></code> child elements\ngive the output element's attributes, and\nother contents of the element\ngive the content of the output element.&nbsp;\n</p>\n\n<p>\nUnless the output element's name is to be computed,\nthe output is to be an XSLT element,\nor the name of one of its attributes must be computed\n(see <code><a href='#attribute'>attribute</a></code>),\nit is simpler and just as effective to put the element literally in the template\nrather than use <code><a href='#element'>element</a></code>.&nbsp;\n</p>\n\n<p>\nExample:&nbsp;\nThis <code><a href='#element'>element</a></code> element\noutputs an element whose name is\nthe value of the <code>photo-element</code> variable or parameter.&nbsp;\nThe output element has a single attribute\n<code>src='headquarters.jpg'</code>,\nand no child elements or text content.&nbsp;\n</p>\n\n<pre>\n  &lt;xsl:<code><a href='#element'>element</a></code> name='{$photo-element}'&gt;\n    &lt;xsl:<code><a href='#attribute'>attribute</a></code> name='src' select='headquarters.jpg'/&gt;\n  &lt;/xsl:element&gt;\n</pre>\n\n\n<h3 id='text'><code>text</code></h3>\n\n<p>\nText in a <code><a href='#template'>template</a></code> is\nwritten as output when the template matches,\nusually with <code><a href='#Whitespace'>whitespace collapsed and stripped</a></code>.&nbsp;\nHowever,\nthe text contents of a <code><a href='#text'>text</a></code> child\nof a <code><a href='#template'>template</a></code> element\nare written unchanged.&nbsp;\nThis lets you put newlines, tabs, and strings of spaces\ninto the output.&nbsp;\n</p>\n\n<p>\n<code><a href='#text'>text</a></code> can't be used to write output elements.&nbsp;\n</p>\n\n<p>\nUnless the text must contain newlines or consecutive whitespace,\nit is simpler and just as effective to put the text literally in the template\nrather than use <code><a href='#text'>text</a></code>.&nbsp;\n</p>\n\n<p>Example:&nbsp;\nThis <code>text</code> element outputs a single newline.&nbsp;\n</p>\n\n<pre>\n  &lt;xsl:<code><a href='#text'>text</a></code>&gt;\n  &lt;/xsl:text&gt;\n</pre>\n\n\n<h3 id='comment'><code>comment</code></h3>\n\n<p>\nA <code>&lt;!-- --&gt;</code> comment can be produced in the output\nwith the <code><dfn>comment</dfn></code> element.&nbsp;\nThe content of the <code><a href='#comment'>comment</a></code> element\nis used as the contents of the output comment.&nbsp;\nLiteral comments in a <code><a href='#template'>template</a></code>\nare assumed to be a comment for the XSLT stylesheet,\nand are ignored,\nso a comment in the output can't be produced that way.&nbsp;\n</p>\n\n<p>\nExample:&nbsp;\nThis <code><a href='#comment'>comment</a></code> element outputs\n<code>&lt;!-- A comment in the output --&gt;</code>.&nbsp;\n</p>\n\n<pre>\n  &lt;xsl:<code><a href='#comment'>comment</a></code>&gt; A comment in the output &lt;/xsl:comment&gt;\n</pre>\n\n\n<h3 id='value-of'>Computing text with <code>value-of</code></h3>\n\n<p>\nA <code><dfn>value-of</dfn></code> element\nof a <code><a href='#template'>template</a></code>\noutputs text based on an\n<a href='#AttributeValueTemplate'>attribute value template</a>.&nbsp;\nThe expression is given as the value of\nthe <code><a href='#value-of'>value-of</a></code> element's\n<code>select</code> attribute,\nand is just like an ordinary <a href='#AttributeValueTemplate'>attribute value template</a>\nexcept that it is not enclosed in <code>{}</code>.&nbsp;\n<code><a href='#value-of'>value-of</a></code> lets you\nput the same kind of computed text in the text of an element\nthat an <a href='#AttributeValueTemplate'>attribute value template</a>\nlets you put in an attribute value.&nbsp;\n</p>\n\n<p>\nExample:&nbsp;\nThis <code><a href='#value-of'>value-of</a></code> element\nputs the value of the <code>photo-element</code> variable or parameter\ninto the contents of an output comment.&nbsp;\n</p>\n\n<pre>\n  &lt;xsl:<code><a href='#comment'>comment</a></code>&gt;photograph becomes\n    &lt;xsl:<code><a href='#value-of'>value-of</a></code> select='$photo-element'/&gt;\n  &lt;/xsl:comment&gt;\n</pre>\n\n\n<h3 id='copy-of'>Computing nodes with <code>copy-of</code></h3>\n\n<p>\nThe <code><dfn>copy-of</dfn></code> element\nproduces a set of copies of input nodes.&nbsp;\nIt is analogous to <code><a href='#value-of'>value-of</a></code>\nexcept that its <code>select</code> attribute\nmay expand to anything, rather than just to a string.&nbsp;\n</p>\n\n\n<h3 id='Example'>Example of producing output from a template</h3>\n\n<p>\nThis example shows the use of\n<code><a href='#value-of'>value-of</a></code>,\n<code><a href='#text'>text</a></code>,\n<code><a href='#element'>element</a></code>,\n<code><a href='#attribute'>attribute</a></code>, and\n<code><a href='#comment'>comment</a></code>.&nbsp;\n(It also shows\n<code><a href='#variable'>variable</a></code>,\nwhich has not been discussed yet.)&nbsp;\nNotice how whitespace is collapsed or stripped\nexcept within the <code><a href='#text'>text</a></code> element,\nwhich is used to begin a new line in the output.&nbsp;\n</p>\n\n<table id='eg-outputAll' summary='eg-outputAll'>\n<tbody>\n  <tr><th colspan='2'>Example 3.&nbsp;\n    Template containing\n    <code><a href='#value-of'>value-of</a></code>,\n    <code><a href='#text'>text</a></code>,\n    <code><a href='#element'>element</a></code>,\n    <code><a href='#attribute'>attribute</a></code>,\n    <code><a href='#comment'>comment</a></code>, and\n    <code><a href='#variable'>variable</a></code>\n      </th>\n  </tr>\n  <tr><th>XSLT\n      </th>\n      <td>\n<pre>\n&lt;?xml version='1.0'?&gt;\n&lt;xsl:<a href='#stylesheet'>stylesheet</a> xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&gt;\n  &lt;xsl:<a href='#output'>output</a> method='html'/&gt;\n\n  &lt;xsl:<a href='#variable'>variable</a> name='photo-element'&gt;img&lt;/xsl:variable&gt;\n  &lt;xsl:<a href='#variable'>variable</a> name='src-attribute'&gt;src&lt;/xsl:variable&gt;\n\n  &lt;xsl:<a href='#template'>template</a> match='photograph'&gt;\n    &lt;xsl:<a href='#comment'>comment</a>&gt;photograph becomes &lt;xsl:<a href='#value-of'>value-of</a> select='<span class='attrexpr'>$photo-element</span>'/&gt;\n    &lt;/xsl:comment&gt;\n    &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;&lt;!-- <i>outputs a newline</i> --&gt;\n    &lt;xsl:<a href='#element'>element</a> name='{<span class='attrexpr'>$photo-element</span>}'&gt;\n      &lt;xsl:<a href='#attribute'>attribute</a> name='{<span class='attrexpr'>$src-attribute</span>}'&gt;&lt;xsl:<a href='#value-of'>value-of</a> select='<span class='attrexpr'>href</span>'/&gt;&lt;/xsl:attribute&gt;\n      &lt;xsl:<a href='#apply-templates'>apply-templates</a> select='<span class='attrexpr'>height|width</span>'/&gt;\n    &lt;/xsl:element&gt;\n    &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;&lt;!-- <i>outputs a newline</i> --&gt;\n  &lt;/xsl:template&gt;\n\n  &lt;xsl:<a href='#template'>template</a> match='height|width'&gt;&lt;xsl:<a href='#copy'>copy</a>/&gt;&lt;/xsl:template&gt;\n\n  &lt;/xsl:stylesheet&gt;</pre>\n      </td>\n  </tr>\n  <tr><th>Input\n      </th>\n      <td>\n<pre>\n&lt;photograph width='2cm'&gt;\n  &lt;href&gt;headquarters.jpg&lt;/href&gt;\n&lt;/photograph&gt;\n</pre>\n      </td>\n  </tr>\n  <tr><th>Output\n      </th>\n      <td>\n<pre>\n&lt;!--photograph becomes img--&gt;\n&lt;img src='headquarters.jpg'&gt;\n</pre>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h2 id='apply-templates'>Recursively applying templates</h2>\n\n<p>\nA <code><a href='#template'>template</a></code> element\nmay use other templates\nto produce part of its output\nby including an <code><dfn>apply-templates</dfn></code>\nchild element.&nbsp;\n</p>\n<p>\nThe <code>select</code> attribute\nof <code><a href='#apply-templates'>apply-templates</a></code>\ncontrols which templates are applied.&nbsp;\nIf <code>select</code> is not present,\n<code><a href='#apply-templates'>apply-templates</a></code>\napplies templates to each of the current node's child nodes,\nin sequence from first to last.&nbsp;\nIf the attribute is given,\nits value must be an <a href='#XPath'>XPath</a> expression\n(see the <a href='#Pattern'>examples</a>)\nthat can match nodes;&nbsp;\nthen templates are applied to every node that matches the expression.&nbsp;\n</p>\n\n<p>\nExample:&nbsp;\n<span class='FW'>(under construction)</span>\n</p>\n\n\n<h2 id='mode'>Template modes</h2>\n\n<p>\nIf there is more than one template that could be applied to a node,\nthese template may each be given a different <code><dfn>mode</dfn></code>\nin order to control which one is applied.&nbsp;\nTemplates with modes also allow an input element to be processed several times\nwith different templates, each one selected by a mode.&nbsp;\n</p>\n\n<ul>\n  <li> If <code><a href='#apply-templates'>apply-templates</a></code>\n    has a <code>mode</code> attribute,\n    only templates with the same <code>mode</code> attribute will be applied.&nbsp;\n  </li>\n  <li> If <code><a href='#apply-templates'>apply-templates</a></code>\n    has no <code>mode</code> attribute,\n    only templates with no <code>mode</code> attribute will be applied.&nbsp;\n  </li>\n</ul>\n\n<p>\nThe <code>mode</code> attribute of\n<code><a href='#template'>template</a></code> and\n<code><a href='#apply-templates'>apply-templates</a></code>\ntakes a <code><a href='xmlSchema.html#QName'>QName</a></code> value\n(<code>[_A-Za-z][-_:.A-Za-z0-9]*</code>, with at most one colon).&nbsp;\nA <code><a href='#template'>template</a></code>\nwith a <code>mode</code> attribute\nmust also have a <code>match</code> attribute.&nbsp;\n(See also <a href='#NamedTemplate'>named templates</a>.)&nbsp;\n</p>\n\n\n<h2 id='TemplatePrecedence'>Which template is applied?</h2>\n\n<p>\nWhat if there is more than one template that could be applied?&nbsp;\n</p>\n\n<ol>\n  <li> If some of the templates have lower\n    <a href='#import'>import precedence</a>,\n    they are eliminated from consideration.&nbsp;\n  </li>\n  <li> If some of the templates have lower\n    priority,\n    they are eliminated from consideration.&nbsp;\n    Each template may be given an explicit priority\n    by its <code>priority</code> attribute,\n    whose value must be an integer (positive, negative, or zero).&nbsp;\n    Templates without a <code>priority</code> attribute\n    are given a default priority\n    that for all child element or attribute value templates is 0;&nbsp;\n    see [<a href='#XSLT'>XSLT</a>]\n    for the default priority of more unusual expressions.\n  </li>\n</ol>\n\n<p>\nIf more than one applicable template remains,\nit is an error.&nbsp;\n</p>\n\n\n<h2 id='BuiltInTemplates'>Built-in templates</h2>\n\n<p>\nXSLT processors use built-in templates\nthat provide the most common default processing,\nnamely to recursively apply templates to each node\nand to copy text through to the output.&nbsp;\nThese built-in templates are treated as though they were\nimported and given the lowest import precedence,\nso that every template provided from other sources overrides\nwhichever built-in template might apply.&nbsp;\n</p>\n\n<p>\nIn effect, there is no built-in processing of\nelement nodes with no child nodes or text,\nor of attribute nodes,\nbecause these built-in templates do nothing for them.&nbsp;\n</p>\n\n<pre>\n  &lt;!-- Built-in template for element nodes --&gt;\n  &lt;xsl:<code><a href='#template'>template</a></code> match='*|/'&gt;\n    &lt;xsl:<code><a href='#apply-templates'>apply-templates</a></code>/&gt;\n  &lt;/xsl:template&gt;\n</pre>\n\n<pre>\n  &lt;!-- A built-in template is imported for each mode --&gt;\n  &lt;xsl:<code><a href='#template'>template</a></code> match='*|/' mode='m'&gt;\n    &lt;xsl:<code><a href='#apply-templates'>apply-templates</a></code> mode='m'/&gt;\n  &lt;/xsl:template&gt;\n</pre>\n\n<pre>\n  &lt;!-- Built-in template for text nodes --&gt;\n  &lt;xsl:<code><a href='#template'>template</a></code> match='text()|@*'&gt;\n    &lt;xsl:<code><a href='#value-of'>value-of</a></code> select='.'/&gt;\n  &lt;/xsl:template&gt;\n</pre>\n\n<p>\nIn order to prevent built-in processing of an element,\ndefine a template that matches it but does nothing,\nas in the example below:&nbsp;\n</p>\n\n<pre>\n  &lt;!-- Template that does nothing for boofle elements ---&gt;\n  &lt;xsl:<code><a href='#template'>template</a></code> match='boofle'/&gt;\n</pre>\n\n\n<h1 id='Whitespace'>Whitespace handling</h1>\n\n<p>\nWhitespace in input or template text is ordinarily collapsed to single spaces,\nand text nodes consisting only of whitespace\nordinarily are stripped out before processing,\nso that they are not matched and result in no output.&nbsp;\nThe only exception is <code><a href='#text'>text</a></code>\nelements of an XSLT file,\nwhose whitespace is preserved by default.&nbsp;\nThe default whitespace processing for\n<code><a href='#text'>text</a></code> elements and other nodes\ncan be changed in several ways:&nbsp;\nthe xml:<code><a href='#space'>space</a></code> attribute\nof input or XSLT elements;&nbsp;\nthe <code><a href='#preserve-space'>preserve-space</a></code> element\nof XSLT stylesheets,\nwhich adds elements to the list of those whose whitespace is preserved;&nbsp;\nand\nthe <code><a href='#strip-space'>strip-space</a></code> element\nof XSLT stylesheets,\nwhich is not discussed here.&nbsp;\n</p>\n\n<p id='space'>\nThe <code><dfn>xml:space</dfn></code> attribute can be given\nto any XML element in the input or XSLT.&nbsp;\nText nodes that are descendants of\nan element with the <code>xml:space=preserve</code> attribute\nare neither compressed nor stripped;&nbsp;\ndescendants of an element with <code>xml:space=default</code>\nare compressed and stripped.&nbsp;\nThe default is, not surprisingly, <code>xml:space=default</code>.&nbsp;\nIf a text node has an ancestor with <code>xml:space=preserve</code>\nand an ancestor with <code>xml:space=default</code>,\nthe closest ancestor prevails.&nbsp;\n</p>\n\n<p id='preserve-space'>\nAn XSLT stylesheet may contain\n<code><dfn>preserve-space</dfn></code> elements.&nbsp;\nThe <code>elements</code> attribute of\n<code><a href='#preserve-space'>preserve-space</a></code> elements lists\ninput elements whose whitespace is neither compressed nor stripped.&nbsp;\nBy default,\nwhitespace is preserved for <code><a href='#text'>text</a></code> elements only.&nbsp;\n</p>\n\n\n<h1 id='NamedTemplate'>Named templates</h1>\n\n<p id='call-template'>\nWe have seen that a template may have a\n<code><a href='#TemplateMatching'>match</a></code> attribute,\nand be applied using <code><a href='#apply-templates'>apply-templates</a></code>.&nbsp;\nA template may also have a <code>name</code> attribute\nand be called using <code><dfn>call-template</dfn></code>.&nbsp;\nNames must be unique among templates.&nbsp;\n<code><a href='#call-template'>call-template</a></code> has a required\n<code>name</code> attribute,\nand calls the <code><a href='#template'>template</a></code> with that name,\nregardless of its <code>match</code>, <code>mode</code>,\nand <code>priority</code> (if any).&nbsp;\n</p>\n\n\n<h1 id='VariableOrParameter'>Variables and parameters</h1>\n\n<p>\nXSLT allows variables and parameters to be defined\nfor stylesheets and for templates.&nbsp;\nA variable or parameter may be given\nany value that an <a href='#Pattern'>expression</a> can return.&nbsp;\nA second value cannot later be given to either a variable or parameter.&nbsp;\n</p>\n\n<p id='variable'>\nA <code><dfn>variable</dfn></code> element defines a named value;&nbsp;\nits name is given by its <code>name</code> attribute,\nand its value is given either by\nits <code>select</code> attribute\nor the element contents.&nbsp;\n</p>\n\n<p id='param'>\nA <code><dfn>param</dfn></code> element defines a named value\nassociated with the <code><a href='#template'>template</a></code>\ncontaining the definition.&nbsp;\nIts name is given by its <code>name</code> attribute,\nand its default value is given either by\nits <code>select</code> attribute\nor the element contents.&nbsp;\n</p>\n\n<p id='with-param'>\nThe final value of a <code><a href='#param'>parameter</a></code>\nis set by the contents of a\n<code><a href='#with-param'><dfn>with-param</dfn></a></code> element\n(if present)\nin <code><a href='#call-template'>call-template</a></code> or\n<code><a href='#apply-templates'>apply-templates</a></code>.&nbsp;\nIf the\n<code><a href='#call-template'>call-template</a></code> or\n<code><a href='#apply-templates'>apply-templates</a></code>\ndoes not contain a <code><a href='#with-param'>with-param</a></code> element\nfor a parameter,\nthe default value set in the\n<code><a href='#param'>parameter</a></code> definition is used.&nbsp;\n</p>\n\n<p>\nExcept that <code><a href='#param'>parameters</a></code> may be passed in,\n<code><a href='#param'>parameters</a></code> and\n<code><a href='#variable'>variables</a></code> behave the same\nand are referenced in the same way:&nbsp;\nby a <code>$name</code> expression in an\n<code><a href='#AttributeValueTemplate'>attribute value template</a></code>.&nbsp;\n</p>\n\n<table id='call-template-example' summary='call-template-example'>\n<tbody>\n  <tr><th colspan='2'>Example 3.&nbsp;\n        <code><a href='#variable'>Variables</a></code>,\n        <code><a href='#param'>parameters</a></code>, and\n        <code><a href='#call-template'>call-template</a></code>\n      </th>\n  </tr>\n  <tr><th>XSLT\n      </th>\n      <td>\n<pre>\n&lt;?xml version='1.0'?&gt;\n&lt;xsl:<a href='#stylesheet'>stylesheet</a> xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&gt;\n  &lt;xsl:<a href='#output'>output</a> method='html'/&gt;\n\n  &lt;xsl:<a href='#variable'>variable</a> name='title'&gt;Paragraph&lt;/xsl:variable&gt;\n\n  &lt;xsl:<a href='#template'>template</a> name='paragraph'&gt;\n    &lt;xsl:<a href='#param'>param</a> name='number'&gt;* &lt;/xsl:param&gt;\n    &lt;xsl:<a href='#param'>param</a> name='numberStyle' select='<span class='attrexpr'>''</span>'/&gt;\n    &lt;xsl:<a href='#param'>param</a> name='class'/&gt;\n    &lt;p class='{<span class='attrexpr'>$class</span>}' title='{<span class='attrexpr'>$title</span>}'&gt;\n      &lt;span style='{<span class='attrexpr'>$numberStyle</span>}'&gt;&lt;xsl:<a href='#value-of'>value-of</a> select='<span class='attrexpr'>$number</span>'/&gt;&lt;/span&gt;\n      &lt;xsl:<a href='#value-of'>value-of</a> select='<span class='attrexpr'>.</span>'/&gt;\n    &lt;/p&gt;\n    &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;&lt;!-- <i>outputs a newline</i> --&gt;\n  &lt;/xsl:template&gt;\n\n  &lt;xsl:<a href='#template'>template</a> match='document'&gt;\n    &lt;xsl:<a href='#call-template'>call-template</a> name='paragraph'&gt;\n      &lt;xsl:<a href='#with-param'>with-param</a> name='numberStyle'&gt;bold&lt;/xsl:with-param&gt;\n      &lt;xsl:<a href='#with-param'>with-param</a> name='class' select='<span class='attrexpr'>'indented'</span>'/&gt;\n    &lt;/xsl:call-template&gt;\n    &lt;!--\n      Template is called with values for 'numberStyle' and 'class' parameters,\n      but not for 'number', which will be given the default value\n      set in the 'param' element for it.\n      --&gt;\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n      </td>\n  </tr>\n  <tr><th>Input\n      </th>\n      <td>\n<pre>\n&lt;document&gt;\n  &lt;paragraph number='1'&gt;Paragraph contents.&lt;/paragraph&gt;\n&lt;/document&gt;</pre>\n      </td>\n  </tr>\n  <tr><th>Output\n      </th>\n      <td>\n<pre>\n&lt;p title='Paragraph' class='indented'&gt;\n&lt;span style='bold'&gt;* &lt;/span&gt;\n  Paragraph contents.\n&lt;/p&gt;\n</pre>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='for-each'><code>for-each</code></h1>\n\n<p>\nThe <code><dfn>for-each</dfn></code> element\nselects a set of nodes\nand then produces output for each node in the set.&nbsp;\nThe contents of the <code>for-each</code> element\nare expanded for each selected node,\nusing that node as the current node.&nbsp;\n</p>\n\n<p id='for-each-pattern'>\nThe set of nodes is specified as a <code><a href='#Pattern'>pattern</a></code>\nin the <code><a href='#for-each'>for-each</a></code> element's\n<code>select</code> attribute.&nbsp;\n</p>\n\n<p>\nSee <a href='#eg-numbering'>Example 4</a> for an example of its use.&nbsp;\n</p>\n\n\n<h1 id='number'>Numbering things in the output</h1>\n\n<p>\nThe <code><dfn>number</dfn></code> element outputs a number\nbased on the sequence of nodes in the input node tree.&nbsp;\nIts output is controlled by a large number of attributes,\nof which these three are the most useful:&nbsp;\n</p>\n\n<table summary='number attributes'>\n<caption>Table 2.&nbsp; <code>number</code> attributes</caption>\n<tbody>\n  <tr><th>Attribute\n      </th>\n      <th>Effect\n      </th>\n  </tr>\n  <tr>\n    <td><code>count</code>\n      </td>\n    <td>A <a href='#Pattern'>pattern</a> matching the nodes to be counted.&nbsp;\n      If absent, the current node's name is used.&nbsp;\n      </td>\n  </tr>\n  <tr>\n      <td><code>level</code>\n        </td>\n      <td>\n        <ul>\n          <li>\n            <code>level=single</code>,\n            in which case the number counts the context node's\n            preceding siblings that also match the <code>count</code> pattern;&nbsp;\n            or\n          </li>\n          <li>\n            <code>level=all</code>,\n            in which case the number counts\n            all nodes that match the <code>count</code> pattern\n            and precede the context node,\n            at any level in the input tree.&nbsp;\n          </li>\n          <li>\n            <code>level=multiple</code>,\n            in which case the number gives an outline-style number\n            counting all nodes that match the <code>count</code> pattern\n            and precede the context node,\n            at any level in the input tree.&nbsp;\n          </li>\n        </ul>\n      </td>\n  </tr>\n  <tr>\n      <td>format\n      </td>\n      <td>The sequences used for numbering, and possibly (for <code>level=multiple</code>)\n        the number separators (a dot is the default but can be changed).&nbsp;\n        <ul>\n          <li> <code>1</code> indicates arabic numbering\n            (<code>1</code>, <code>2</code>, <code>3</code>, ...).&nbsp;\n          </li>\n          <li> <code>01</code> indicates a leading zero up to 10\n            (<code>01</code>, <code>02</code>, ... , <code>09</code>,\n            <code>10</code>, ...);&nbsp;\n            <code>001</code> indicates leading zeroes up to 100, etc.&nbsp;\n          </li>\n          <li> <code>A</code> indicates\n            <code>A</code>, <code>B</code>, <code>C</code>, ....&nbsp;\n          </li>\n          <li> <code>a</code> indicates\n            <code>a</code>, <code>b</code>, <code>c</code>, ....&nbsp;\n          </li>\n          <li> <code>I</code> indicates Roman numbering\n            <code>I</code>, <code>II</code>, <code>III</code>, <code>IV</code>, ....&nbsp;\n          </li>\n          <li> <code>i</code> indicates Roman numbering\n            <code>i</code>, <code>ii</code>, <code>iii</code>, <code>iv</code>, ....&nbsp;\n          </li>\n          <li> The interpretation of any other letters or numbers in the\n            <code>format</code> value is not defined, so do not use them.&nbsp;\n            Non-alphanumeric characters are copied literally as separators.&nbsp;\n          </li>\n        </ul>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n<table id='eg-numbering' summary='eg-numbering'>\n<tbody>\n  <tr><th colspan='2'>Example 4.&nbsp;\n        Numbering\n      </th>\n  </tr>\n  <tr><th>XSLT\n      </th>\n      <td>\n<pre>\n&lt;?xml version='1.0'?&gt;\n&lt;xsl:<a href='#stylesheet'>stylesheet</a> xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&gt;\n  &lt;xsl:<a href='#output'>output</a> method='xml'/&gt;\n\n  &lt;xsl:<a href='#template'>template</a> match='/'&gt;\n    &lt;Numbered&gt;\n\n      &lt;xsl:<a href='#text'>text</a>&gt;\nAll paragraphs in the input numbered within their chapters:\n&lt;/xsl:text&gt;\n      &lt;xsl:<a href='#for-each'>for-each</a> select='<span class='attrexpr'>//paragraph</span>'&gt;\n        &lt;xsl:<a href='#text'>text</a>&gt;  &lt;/xsl:text&gt;\n        &lt;xsl:<a href='#copy'>copy</a>&gt;&lt;xsl:<a href='#number'>number</a> level='single'/&gt;&lt;xsl:<a href='#text'>text</a>&gt;. &lt;/xsl:text&gt;\n          &lt;xsl:<a href='#apply-templates'>apply-templates</a> select='<span class='attrexpr'>text()</span>'/&gt;&lt;/xsl:copy&gt;\n        &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;\n      &lt;/xsl:for-each&gt;\n\n      &lt;xsl:<a href='#text'>text</a>&gt;\nAll paragraphs in the entire input numbered in sequence:\n&lt;/xsl:text&gt;\n      &lt;xsl:<a href='#for-each'>for-each</a> select='<span class='attrexpr'>//paragraph</span>'&gt;\n        &lt;xsl:<a href='#text'>text</a>&gt;  &lt;/xsl:text&gt;\n        &lt;xsl:<a href='#copy'>copy</a>&gt;&lt;xsl:<a href='#number'>number</a> level='any' format='i. '/&gt;\n          &lt;xsl:<a href='#apply-templates'>apply-templates</a> select='<span class='attrexpr'>text()</span>'/&gt;&lt;/xsl:copy&gt;\n        &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;\n      &lt;/xsl:for-each&gt;\n\n      &lt;xsl:<a href='#text'>text</a>&gt;\nAll paragraphs in the input outline-numbered (by chapter) in sequence:\n&lt;/xsl:text&gt;\n      &lt;xsl:<a href='#for-each'>for-each</a> select='<span class='attrexpr'>//paragraph</span>'&gt;\n        &lt;xsl:<a href='#text'>text</a>&gt;  &lt;/xsl:text&gt;\n        &lt;xsl:<a href='#copy'>copy</a>&gt;&lt;xsl:<a href='#number'>number</a> level='multiple' count='chapter|paragraph'\n          format='[I:a.] '/&gt;\n          &lt;xsl:<a href='#apply-templates'>apply-templates</a> select='<span class='attrexpr'>text()</span>'/&gt;&lt;/xsl:copy&gt;\n        &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;\n      &lt;/xsl:for-each&gt;\n\n    &lt;/Numbered&gt;\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n      </td>\n  </tr>\n  <tr><th>Input\n      </th>\n      <td>\n<pre>\n&lt;book&gt;\n  &lt;chapter&gt;\n    &lt;paragraph&gt;First.&lt;/paragraph&gt;\n    &lt;paragraph&gt;Second.&lt;/paragraph&gt;\n  &lt;/chapter&gt;\n  &lt;chapter&gt;\n    &lt;paragraph&gt;First in second chapter.&lt;/paragraph&gt;\n  &lt;/chapter&gt;\n&lt;/book&gt;</pre>\n      </td>\n  </tr>\n  <tr><th>Output\n      </th>\n      <td>\n<pre>\n&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;Numbered&gt;\nAll paragraphs in the input numbered within their chapters:\n  &lt;paragraph&gt;1. First.&lt;/paragraph&gt;\n  &lt;paragraph&gt;2. Second.&lt;/paragraph&gt;\n  &lt;paragraph&gt;1. First in second chapter.&lt;/paragraph&gt;\n\nAll paragraphs in the entire input numbered in sequence:\n  &lt;paragraph&gt;i. First.&lt;/paragraph&gt;\n  &lt;paragraph&gt;ii. Second.&lt;/paragraph&gt;\n  &lt;paragraph&gt;iii. First in second chapter.&lt;/paragraph&gt;\n\nAll paragraphs in the input outline-numbered (by chapter) in sequence:\n  &lt;paragraph&gt;[I:a.] First.&lt;/paragraph&gt;\n  &lt;paragraph&gt;[I:b.] Second.&lt;/paragraph&gt;\n  &lt;paragraph&gt;[II:a.] First in second chapter.&lt;/paragraph&gt;\n&lt;/Numbered&gt;</pre>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='sort'><code>sort</code></h1>\n\n<p>\n<code><a href='#apply-templates'>apply-templates</a></code> and\n<code><a href='#for-each'>for-each</a></code>\nprocess the input nodes they match\nin the order those nodes appear in the input,\nunless one or more <code><dfn>sort</dfn></code> elements are used\nto specify a different order.&nbsp;\nThe <code><a href='#sort'>sort</a></code> element(s),\nif present,\nmust be the first child element(s) of the\n<code><a href='#apply-templates'>apply-templates</a></code> or\n<code><a href='#for-each'>for-each</a></code>.&nbsp;\nThe <code><a href='#sort'>sort</a></code> element's\n<code>select</code> attribute is an\n<a href='#ExpressionAttributes'>attribute value expression</a>\nthat is evaluated for each node matched by the\n<code><a href='#apply-templates'>apply-templates</a></code> or\n<code><a href='#for-each'>for-each</a></code>;&nbsp;\nthe resulting value is used as a key for that input node.&nbsp;\n</p>\n\n<p>\nThere are a variety of text functions\navailable with which the keys may be derived\nfrom attribute values and text contents &mdash;\nsee [<a href='#XSLT'>XSLT</a>] for these.&nbsp;\n</p>\n\n<p>\nAdditional attributes of <code><a href='#sort'>sort</a></code>\ncontrol how the sorting is done:&nbsp;\n</p>\n\n<ul>\n  <li>\n    Keys are sorted as text by default,\n    but the <code>data-type='number'</code> attribute\n    causes them to be sorted numerically instead.&nbsp;\n  </li>\n  <li>\n    The keys are sorted in ascending order\n    unless the <code>order=descending</code> attribute is present.&nbsp;\n  </li>\n  <li>\n    Text keys are sorted with uppercase first\n    unless the <code>case-order='lower-first'</code> attribute is present.&nbsp;\n  </li>\n</ul>\n\n<table id='eg-for-each' summary='eg-for-each'>\n<tbody>\n  <tr><th colspan='2'>Example 5.&nbsp;\n        Sorting\n      </th>\n  </tr>\n  <tr><th>XSLT\n      </th>\n      <td>\n<pre>\n&lt;?xml version='1.0'?&gt;\n&lt;xsl:<a href='#stylesheet'>stylesheet</a> xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&gt;\n  &lt;xsl:<a href='#output'>output</a> method='xml'/&gt;\n\n  &lt;xsl:<a href='#template'>template</a> match='twelveDays'&gt;\n    &lt;xsl:<a href='#copy'>copy</a>&gt;&lt;xsl:<a href='#comment'>comment</a>&gt; Sorted lexicographically &lt;/xsl:comment&gt;\n        &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;\n      &lt;xsl:<a href='#for-each'>for-each</a> select='<span class='attrexpr'>day</span>'&gt;\n        &lt;xsl:<a href='#sort'>sort</a> select='<span class='attrexpr'>text()</span>'/&gt;\n        &lt;xsl:<a href='#text'>text</a>&gt;  &lt;/xsl:text&gt;&lt;xsl:<a href='#copy'>copy</a>&gt;&lt;xsl:<a href='#apply-templates'>apply-templates</a>/&gt;&lt;/xsl:copy&gt;\n        &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;\n      &lt;/xsl:for-each&gt;\n    &lt;/xsl:copy&gt;\n    &lt;xsl:<a href='#text'>text</a>&gt;\n&lt;/xsl:text&gt;\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n      </td>\n  </tr>\n  <tr><th>Input\n      </th>\n      <td>\n<pre>\n&lt;twelveDays&gt;\n  &lt;day&gt;A partridge in a pear tree&lt;/day&gt;\n  &lt;day&gt;Two turtledoves&lt;/day&gt;\n  &lt;day&gt;Three French hens&lt;/day&gt;\n&lt;/twelveDays&gt;\n</pre>\n      </td>\n  </tr>\n  <tr><th>Output\n      </th>\n      <td>\n<pre>\n&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;twelveDays&gt;&lt;!-- <i>Sorted lexicographically</i> --&gt;\n  &lt;day&gt;A partridge in a pear tree&lt;/day&gt;\n  &lt;day&gt;Three French hens&lt;/day&gt;\n  &lt;day&gt;Two turtledoves&lt;/day&gt;\n&lt;/twelveDays&gt;\n</pre>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='Conditional'>If and when</h1>\n\n<p>\nThere are two ways to do things conditionally in an XSLT stylesheet.&nbsp;\n</p>\n\n<ul>\n  <li id='if'> An <code><dfn>if</dfn></code> element's contents\n    are expanded if its <code>test</code> attribute is true.&nbsp;\n  </li>\n  <li id='choose'> A <code><dfn>choose</dfn></code> element contains\n    a sequence of <code><a href='#when'>when</a></code> elements\n    possibly followed by\n    an <code><a href='#otherwise'>otherwise</a></code> element.&nbsp;\n    <ul>\n      <li id='when'>\n        The contents of the first <code><dfn>when</dfn></code> element\n        whose <code>test</code> attribute is true\n        are expanded.&nbsp;\n      </li>\n      <li id='otherwise'>\n        If no <code><a href='#when'>when</a></code>'s <code>test</code> is true,\n        the contents of the\n        <code><dfn>otherwise</dfn></code> element (if present)\n        are expanded.&nbsp;\n      </li>\n</ul>\n  </li>\n</ul>\n\n<p>\nThe <code>test</code> attribute's value is an\n<code><a href='#ExpressionAttributes'>attribute value pattern</a></code>\nor other <a href='#XPath'>XPath</a> expression\nsuch as:&nbsp;\n</p>\n\n<ul>\n  <li> <code>contains('abcd','bc')</code>\n    is true if the first string contains the second\n    (in this case, it is true).&nbsp;\n  </li>\n  <li> <code>starts-with('abcd','bc')</code>\n    is true if the first string starts with the second\n    (in this case, it is false).&nbsp;\n  </li>\n</ul>\n\n<p>\nA value of the <code>test</code> attribute\nthat is not a condition is true if it is a\nnon-zero number,\nnon-empty string, or\nnon-empty lists of nodes.&nbsp;\nZero, the empty string, and the empty node-list\nare all false.&nbsp;\n</p>\n\n<p>\nExample:&nbsp;\n</p>\n\n<pre>\n&lt;?xml version='1.0'?&gt;\n&lt;xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&gt;\n\n  &lt;xsl:template match='block'&gt;\n\n    &lt;xsl:if test='@depth'&gt;&lt;!-- if the context node has a depth attribute --&gt;\n      &lt;xsl:value-of select='@depth'/&gt;\n    &lt;/xsl:if&gt;\n\n    &lt;xsl:choose&gt;\n      &lt;xsl:when test='0 &amp;lt; @depth'&gt;&lt;xsl:value-of select='@depth'/&gt;&lt;/xsl:when&gt;\n      &lt;xsl:when test='0 = @depth'&gt;Zero&lt;/xsl:when&gt;\n      &lt;xsl:otherwise&gt;Bad Depth&lt;/xsl:otherwise&gt;\n    &lt;/xsl:choose&gt;\n\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n\n\n<h1 id='IncludeImport'>Including and importing stylesheets</h1>\n\n<p id='include'>\nAn <code><dfn>include</dfn></code> element\nincludes another XSLT stylesheet,\nnamed by the <code>href</code> attribute.&nbsp;\n</p>\n\n<p id='import'>\nAn <code><dfn>import</dfn></code> element\nincludes another XSLT stylesheet,\nnamed by the <code>href</code> attribute,\nbut the templates in the imported stylesheet\nhave a lower <dfn>import precedence</dfn>.\nImport precedence affects\n<a href='#TemplatePrecedence'>which template is applied</a>\nif more than one matches.&nbsp;\n</p>\n\n<p>\n(If you import a stylesheet that imports other stylesheets,\nsee [<a href='#XSLT'>XSLT</a>] for\nits more complex but exact definition of\nimport precedence.)&nbsp;\n</p>\n\n<p>\n<code><a href='#include'>include</a></code> and\n<code><a href='#import'>import</a></code>\nmay only appear as <a href='xmlSchema.html#TopLevel'>top-level</a> elements.&nbsp;\n</p>\n\n\n<h1 id='output'>Output method</h1>\n\n<p>\nThe <code><dfn>output</dfn></code> element controls a number of aspects of\nthe production of output by an XSLT processor.&nbsp;\n</p>\n\n<ul>\n  <li>\n    The <code>method</code> attribute\n    may have the value <code>xml</code>, <code>html</code>, or <code>text</code>,\n    controlling whether XML, HTML, or text output is produced.&nbsp;\n    <ul>\n      <li> XML output begins with an <code>xml</code> declaration\n        and produces a properly nested tree of XML elements.&nbsp;\n      </li>\n      <li> HTML output doesn't produce end-tags for empty elements\n        such as <code>img</code>\n        (see [<a href='#XSLT'>XSLT</a>] for a complete list);&nbsp;\n        doesn't turn <code>&lt;</code> in attribute values\n        into <code>&amp;lt;</code>;&nbsp;\n        terminates processing instructions with <code>&gt;</code>\n        rather than <code>?&gt;</code>;&nbsp;\n        outputs character entities for characters that have them;&nbsp;\n        and in general produces correct HTML output.&nbsp;\n        See [<a href='#XSLT'>XSLT</a>] for details.&nbsp;\n      </li>\n      <li> Text output just produces the text.&nbsp;\n        No <code><a href='#element'>element</a></code> elements are allowed\n        in the XSLT stylesheet in this case.&nbsp;\n      </li>\n    </ul>\n  </li>\n  <li>\n    The  <code>version</code> atttribute\n    controls which version of the XML or HTML output methods are used.&nbsp;\n  </li>\n  <li>\n    The <code>indent</code> atttribute\n    (value <code>yes</code> or <code>no</code>)\n    controls whether the output method\n    attempts to indent the XML or HTML output automatically\n    based on nesting depth.&nbsp;\n  </li>\n  <li>\n    The <code>omit-xml-declaration</code> atttribute\n    (value <code>yes</code> or <code>no</code>)\n    controls whether an XML declaration is produced\n    by the XML method.&nbsp;\n  </li>\n  <li>\n    The <code>doctype-system</code> and\n    <code>doctype-public</code> atttributes\n    give the identifiers to be used in the document type declaration.&nbsp;\n  </li>\n</ul>\n\n\n<h1 id='NotCovered'>Not here, but in XSLT</h1>\n\n<p>\nSee [<a href='#XSLT'>XSLT</a>] for a discussion of these less-needed aspects.&nbsp;\n</p>\n\n<ol>\n  <li> Processing instruction nodes, produced by your XSLT stylesheet\n    and then processed again later.&nbsp;\n  </li>\n  <li> The <code>disable-output-escaping</code> attribute of\n    <code><a href='#text'>text</a></code> and\n    <code><a href='#value-of'>value-of</a></code>.&nbsp;\n  </li>\n  <li id='strip-space'> <code>strip-space</code>,\n    which opposes <code><a href='#preserve-space'>preserve-space</a></code>\n    in a non-simple manner.&nbsp;\n  </li>\n  <li> <code><a href='#sort'>sort</a></code>'s\n    <code>from</code>, <code>grouping-separator</code>,\n    <code>grouping-size</code>, <code>lang</code>, <code>letter-value</code>,\n    and <code>value</code> attributes.&nbsp;\n  </li>\n  <li> Keys.&nbsp;\n  </li>\n  <li> The <code>lang</code> attribute,\n    which can be important if the text being processed is not English.&nbsp;\n  </li>\n  <li> Top-level <code><a href='#param'>parameters</a></code>.&nbsp;\n    These are allowed,\n    and are associated with the <code><a href='#stylesheet'>stylesheet</a></code>,\n    but XSLT provides no way to pass values in to\n    the <code><a href='#stylesheet'>stylesheet</a></code>\n    so use a top-level <code><a href='#variable'>variable</a></code> instead.&nbsp;\n  </li>\n</ol>\n\n<p>\nErratum:&nbsp;\n[<a href='#XSLT'>XSLT</a>] sometimes puts\n<code>&lt;</code> or <code>&gt;</code>\nin attribute value expressions;&nbsp;\nyou must put <code>&amp;lt;</code> or <code>&amp;gt;</code> instead,\nbecause attribute values cannot contain <code>&lt;</code> or <code>&gt;</code>.&nbsp;\n</p>\n\n<table id='ExpressionAttributes' summary='Attributes interpreted as XPath expressions'>\n<caption>Table 3.&nbsp; Attributes interpreted as XPath expressions</caption>\n<tbody>\n  <tr><th>Element\n      </th>\n      <th>Attributes with expression value\n      </th>\n  </tr>\n  <tr class='tt'>\n      <td>apply-templates\n      </td>\n      <td>select\n      </td>\n  </tr>\n  <tr class='tt'>\n      <td>attribute\n      </td>\n      <td>name, namespace\n      </td>\n  </tr>\n  <tr class='tt'>\n      <td>element\n      </td>\n      <td>name, namespace\n      </td>\n  </tr>\n  <tr class='tt'>\n      <td>for-each\n      </td>\n      <td>select\n      </td>\n  </tr>\n  <tr class='tt'>\n      <td>number\n      </td>\n      <td>lang, format, letter-value, grouping-separator, grouping-size\n      </td>\n  </tr>\n  <tr class='tt'>\n      <td>sort\n      </td>\n      <td>select, lang, data-type, order, case-order\n      </td>\n  </tr>\n  <tr class='tt'>\n      <td>value-of\n      </td>\n      <td>select\n      </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='References'>References</h1>\n\n<dl>\n  <dt id='XPath'>[XPath]</dt>\n    <dd><a href='http://www.w3.org/TR/xpath'>XML Path Language (XPath)</a>.&nbsp;\n    W3C Recommendation.&nbsp;\n    </dd>\n  <dt id='XSLT'>[XSLT]</dt>\n    <dd><a href='http://www.w3.org/TR/xslt'>XSL Transformations (XSLT)</a>.&nbsp;\n    W3C Recommendation.&nbsp;\n    </dd>\n</dl>\n\n\n<!--xhtml -n -->\n</div>\n\n</div><!-- #TBg -->\n\n<div id='TFooter'>\n<div class='W3C'>\n  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'\n    src='../../img/valid-xhtml10-blue.png'\n    alt='Valid XHTML 1.0 Strict'/></a>\n  <br/>\n  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'\n    src='../../img/vcss-blue.png'\n    alt='Valid CSS!'/></a>\n</div>\n<div class='timestamp'>2019Jan18Fr22:03</div>\n<div style='padding-top:1px;'>\n<a class='plain' href='./index.html' style='font-variant:small-caps;'\n>Thomas A. Alspaugh</a>\n<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;\n    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>\n    <!-- -spell alspaugh uci edu --> </span>\n</div>\n</div>\n\n<!-- Google Analytics code -->\n<script type=\"text/javascript\">\nvar gaJsHost = ((\"https:\" == document.location.protocol)\n  ? \"https://ssl.\" : \"http://www.\");\ndocument.write(unescape(\"%3Cscript src='\" + gaJsHost +\n  \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n<script type=\"text/javascript\">\ntry {\nvar pageTracker = _gat._getTracker(\"UA-15281497-1\");\npageTracker._trackPageview();\n} catch(err) {}\n</script>\n\n</body>\n</html>\n\n", "encoding": "ascii"}