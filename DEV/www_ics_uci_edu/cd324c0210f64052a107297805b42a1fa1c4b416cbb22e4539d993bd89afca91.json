{"url": "https://www.ics.uci.edu/~thornton/ics32/Notes/PythonBasics/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 32 Winter 2019, Python Background Notes: Python Basics</title>\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 32 Winter 2019 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 32 Winter 2019<br />\r\n   Python Background Notes: Python Basics</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Launching a Python shell</p>\r\n\r\n<p>The simplest way to interact with Python is to use something called the <i>Python shell</i>.  If you followed the installation instructions in <a href=\"../../ProjectGuide/Project0\">Project #0</a>, then you'll have two ways available to start up a Python shell:</p>\r\n\r\n<ul>\r\n  <li>Launching IDLE, which provides a windowed environment that lets you edit Python programs, as well as interacting with them from within a Python shell.</li>\r\n  <li>Launching a Python shell from the <i>command line</i>, a technique we'll need later this quarter.</li>\r\n</ul>\r\n\r\n<p>Either way, having launched a Python shell, you'll see text similar to this appear:</p>\r\n\r\n<blockquote><pre>\r\nPython 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)] on win32\r\nType \"copyright\", \"credits\" or \"license()\" for more information.\r\n&gt;&gt;&gt; \r\n</pre></blockquote>\r\n\r\n<p>The first part of that text identifies the current version of Python you're running &mdash; what you see above is what you'd see if you installed the 64-bit version 3.7.0 on Windows, but you'll see something slightly different if you're running something else &mdash; while the <b>&gt;&gt;&gt;</b> is actually the most important thing.  That's called the <i>shell prompt</i>.</p>\r\n\r\n<p>The way you interact with the Python shell is to type an <i>expression</i> at the shell prompt, then hit the Enter or Return key.  Python <i>evaluates</i> the expression, determines its value, and then displays that value.  Afterward, you'll see another shell prompt, allowing you to type another expression, and so on.  This continues until you quit the Python shell.  (Generally, this style of interaction is often called a <i>read-evaluate-print loop</i> or <i>REPL</i>.  As you continue studying computing, you'll see that lots of programming languages offer this style of interaction, though not all of them do.)</p>\r\n\r\n<p>Throughout these notes, when demonstrating interactions with the Python shell, I'll show the shell's output using normal text, while showing what you might type using boldfaced text.  For example, you might start with the following interaction with the Python shell:</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>4</b>\r\n4\r\n&gt;&gt;&gt; <b>'Hello'</b>\r\n'Hello'\r\n</pre></blockquote>\r\n\r\n<p>The rule we're seeing in action above is that some kinds of expressions &mdash; the simplest kinds, for the most part &mdash; evaluate to themselves.  If all you type is a number or some text surrounded by single-quotes, you get back exactly what you typed.  But those are the least interesting examples, so let's try some other things.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>2 + 2</b>\r\n4\r\n&gt;&gt;&gt; <b>19 - 6</b>\r\n13\r\n&gt;&gt;&gt; <b>3.5 + 2.25</b>\r\n5.75\r\n</pre></blockquote>\r\n\r\n<p>We see that numbers can participate in arithmetic calculations like addition and subtraction, and that we can specify numbers that have a fractional part.  In these examples, <b>+</b> and <b>-</b> are what we call <i>operators</i>.  Multiplication and division are supported, too, with the <b>*</b> and <b>/</b> operators used to represent them:</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>5 * 4</b>\r\n20\r\n&gt;&gt;&gt; <b>12 / 4</b>\r\n3.0\r\n</pre></blockquote>\r\n\r\n<p>If you've got a keen eye for detail, you'll notice that the result of dividing 12 by 4 was given as <b>3.0</b> instead of <b>3</b>.  There's a somewhat longer story there, which we'll return to in a little while, but the short version is that the kind of division we did &mdash; using the <b>/</b> operator &mdash; always returns the kind of numbers that include a fractional part, even if that fractional part is <b>.0</b>.  (If you didn't notice, don't feel bad, but <i>do</i> work on getting yourself in the habit of noticing the small details.  Those details are usually trying to tell you something, or offering you a distinction that you can learn something from.)</p>\r\n\r\n<p>As it turns out, not every expression can be evaluated, so you'll sometimes see an error message instead of a value.  Some things you'll type simply aren't legal according to Python's syntax rules, in which case they aren't evaluated at all.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>Boo is sleeping next to me</b>\r\nSyntaxError: invalid syntax\r\n</pre></blockquote>\r\n\r\n<p>Some things are syntactically legal, but fail during evaluation for some other reason.  Division by zero is one example, and we'll see many more.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>5 / 0</b>\r\nTraceback (most recent call last):\r\n  File \"&lt;pyshell#8&gt;\", line 1, in &lt;module&gt;\r\n    5 / 0\r\nZeroDivisionError: division by zero\r\n</pre></blockquote>\r\n\r\n<p>When you see a <i>traceback</i>, this is Python's way of saying that it encountered a failure while evaluating your expression.  Tracebacks contain a fair amount of useful information:</p>\r\n\r\n<ul>\r\n  <li>What kind of error was it?  In this case, it was a <b>ZeroDivisionError</b>, which is what it sounds like: an attempt to divide by zero.</li>\r\n  <li>What is an English description of it?  In this case, it was <b>division by zero</b>, which wasn't much more descriptive than the kind of error was, but the descriptions quite often add useful contextual information for understanding why something failed.</li>\r\n  <li>What part of the code failed?  In this case, it was the entire expression we typed: <b>5 / 0</b>.  But if this happened within a larger program, we'd see exactly what part of the program encountered the issue.</li>\r\n  <li>Where in the code was the failure?  In this case, the cryptic-looking <b>&lt;pyshell#8&gt;</b> is the location of the failure, which is to say the ninth expression we've evaluated (they're counted sequentially, starting from zero) since we started the Python shell.  But when it happens within a larger program, we'll see the name of the file and a location within it, which can be a handy way of getting our bearings when trying to figure out what happened and why.</li>\r\n</ul>\r\n\r\n<p>When you're done with the Python shell and you want to exit, there are a couple of ways to do it.</p>\r\n\r\n<ul>\r\n  <li>If you're running IDLE, close the window in which the Python shell is running using the usual mechanism.</li>\r\n  <li>Evaluate the expression <b>quit()</b>, which causes the Python shell to stop itself.  In IDLE, this will launch a pop-up that will say \"Your program is still running!  Do you want to kill it?\"  Click \"OK\" and IDLE will exit.  From the command-line, this will stop the shell without any confirmation.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Types, objects, numbers, and arithmetic operators</p>\r\n\r\n<p>We saw previously that numbers are displayed in two different ways: with or without a fractional part.  Perhaps counterintuitively, we even saw a number displayed as <b>3.0</b>, even though it could just as easily have been displayed as <b>3</b>.  Meanwhile, we also saw the number <b>4</b> displayed without the fractional part.  There's a meaningful distinction here, and understanding what's at the root of that distinction will teach us something broadly useful about Python.</p>\r\n\r\n<p>Every expression is evaluated and that evaluation (if successful) yields a value.  A little more technically, we call each of these values an <i>object</i>.  Notably, every object will always have a <i>type</i>.  A type is a means of classifying that object, governing what operations are legal and illegal to perform on it, as well as what happens when you perform legal operations.  One thing an object's type determines is how the Python shell will display it; each type has what's called a <i>representation</i>, which is a way of determining what objects of that type should look like when displayed in the Python shell.</p>\r\n\r\n<p>Returning, then, to the question of why we sometimes saw numbers show up with fractional parts and other times did not, we might infer that the reason is because the numbers had different types.  Let's test our theory.  Python includes a way to ask that question; by surrounding an expression with parentheses and writing the word <b>type</b> before it, we can find out what the type of value returned by that expression is.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>type(4)</b>\r\n&lt;class 'int'&gt;\r\n&gt;&gt;&gt; <b>type(11.875)</b>\r\n&lt;class 'float'&gt;\r\n</pre></blockquote>\r\n\r\n<p>One thing to note is that we did receive a different answer when we asked for the type of <b>4</b> as opposed to the type of <b>11.875</b>.  That tells us that these values do, indeed, have different types.</p>\r\n\r\n<p>Another thing to note is that we asked for each value's type, but what we got back was something called a <i>class</i> instead.  You'll find that the terms \"class\" and \"type\" are used somewhat interchangeably in Python.  The distinction between them is mostly a historical anomaly &mdash; differences that were evident in much older versions of Python, but that have long since been unified &mdash; so you can think of these terms as meaning the same thing.  If you don't believe me, look what happens when you ask for the type of the thing we get back when we ask for the type of a value's type.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>type(type(4))</b>\r\n&lt;class 'type'&gt;\r\n</pre></blockquote>\r\n\r\n<p>The reason this works is because even types are objects; their type is called <b>type</b>.</p>\r\n\r\n<p class=\"subtitle\">Ints and floats</p>\r\n\r\n<p>An <i>int</i> (or an <i>integer</i>) is a number without a fractional part, such as <b>15</b> or <b>-12345</b>.  Python's integers can be either positive, negative, or zero, and there is no limit on how large or how small they might be.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>123456789012345678901234567890</b>\r\n123456789012345678901234567890\r\n&gt;&gt;&gt; <b>type(123456789012345678901234567890)</b>\r\n&lt;class 'int'&gt;\r\n</pre></blockquote>\r\n\r\n<p>A <i>float</i> is what's called a <i>floating-point number</i>, which is a number with a fractional part, such as <b>5.75</b> or <b>-4.0</b>.  Unlike integers, there is a practical limit on the size of a float, though it's a bit more difficult to describe and it can vary from one installation of Python to another.  For all practical purposes, you can think of floats as capable of being almost endlessly large or endlessly small, but not endlessly precise.  If you ever learned about <i>scientific notation</i> for numbers in a science course, such as <b>6.02 x 10<sup><small>23</small></sup></b>, that's a pretty good way of thinking about what a floating-point number is: a value derived from a <i>mantissa</i> (6.02) and an <i>exponent</i> (23).  The difference is that the mantissa is stored as a <i>binary number</i> (base 2, rather than base 10) and the exponent is a power of 2 instead of 10.  There is a limit on the number of digits available in the mantissa and in the exponent, which is why floats aren't endlessly precise.  There is much more to be said about floating-point numbers, though we'll defer the rest of that discussion for another day.</p>\r\n\r\n<p>There are several arithmetic operators that you can use on integer and float values, which are demonstrated below.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>5 + 4</b>\r\n9\r\n&gt;&gt;&gt; <b>2.5 + 3.75</b>\r\n6.25\r\n&gt;&gt;&gt; <b>20 - 9</b>\r\n11\r\n&gt;&gt;&gt; <b>4.5 - 3.125</b>\r\n1.375\r\n&gt;&gt;&gt; <b>4 * 9</b>\r\n36\r\n&gt;&gt;&gt; <b>2.25 * 3.0</b>\r\n6.75\r\n&gt;&gt;&gt; <b>15 / 3</b>\r\n5.0\r\n&gt;&gt;&gt; <b>15.0 / 3.0</b>\r\n5.0\r\n&gt;&gt;&gt; <b>15 // 3</b>\r\n5\r\n&gt;&gt;&gt; <b>15.0 // 3.0</b>\r\n5.0\r\n&gt;&gt;&gt; <b>2 ** 10</b>\r\n1024\r\n&gt;&gt;&gt; <b>2.1 ** 3.3</b>\r\n11.569741950241465\r\n</pre></blockquote>\r\n\r\n<p>There are a few things to note from these examples:</p>\r\n\r\n<ul>\r\n  <li>The <b>**</b> operator is <i>exponentiation</i>.  So, for example, <b>2 ** 10</b> is how, in Python, we say <b>2<sup><small>10</small></sup></b>, which explains why the value of <b>2 ** 10</b> is <b>1024</b>.</li>\r\n  <li>We see from these examples that, for the most part, whenever we use these operators on two integer operands (such as <b>5 + 4</b> or <b>4 * 9</b>), we get an integer result, while float operands lead to float results.</li>\r\n  <li>Division is the outlier that behaves differently from the others, with respect to types.  This is to be expected, in a way, because division is the only one of these arithmetic operators that can take two integer values and yield a non-integer.  For this reason, Python provides two different division operators, <b>/</b> and <b>//</b>, which we can use for different things.</li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Division vs. integer division</p>\r\n\r\n<p>Python supports two kinds of division:</p>\r\n\r\n<ul>\r\n  <li><i>Division</i> is performed by an operator <b>/</b> (i.e., a single forward slash).  This kind of division always yields a non-integer result, even when its operands divide evenly.</li>\r\n  <li><i>Integer division</i> or <i>floor division</i> is performed by an operator <b>//</b> (i.e., denoted by two forward slashes).  This kind of division always yields an integral result (though not always an integer), in the sense that the \"floor\" of the result is taken, with any fractional part being discarded.</li>\r\n</ul>\r\n\r\n<p>Let's explore the two kinds of division more carefully, taking note of the types of values we get back from it, in addition to the values themselves.  When used on two integers, the two division operators work like this.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>12 / 4</b>\r\n3.0\r\n&gt;&gt;&gt; <b>type(12 / 4)</b>\r\n&lt;class 'float'&gt;\r\n&gt;&gt;&gt; <b>11 / 4</b>\r\n2.75\r\n&gt;&gt;&gt; <b>type(11 / 4)</b>\r\n&lt;class 'float'&gt;\r\n&gt;&gt;&gt; <b>12 // 4</b>\r\n3\r\n&gt;&gt;&gt; <b>type(12 // 4)</b>\r\n&lt;class 'int'&gt;\r\n&gt;&gt;&gt; <b>11 // 4</b>\r\n2\r\n&gt;&gt;&gt; <b>type(11 // 4)</b>\r\n&lt;class 'int'&gt;\r\n</pre></blockquote>\r\n\r\n<p>We see that, when used on two integers, the division operator <b>/</b> always returns a float; the integer division operator <b>//</b> always returns an int.  Let's see if that's true when we use them on two floats instead.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>12.0 / 4.0</b>\r\n3.0\r\n&gt;&gt;&gt; <b>type(12.0 / 4.0)</b>\r\n&lt;class 'float'&gt;\r\n&gt;&gt;&gt; <b>11.0 / 4.0</b>\r\n2.75\r\n&gt;&gt;&gt; <b>type(11.0 / 4.0)</b>\r\n&lt;class 'float'&gt;\r\n&gt;&gt;&gt; <b>12.0 // 4.0</b>\r\n3.0\r\n&gt;&gt;&gt; <b>type(12.0 // 4.0)</b>\r\n&lt;class 'float'&gt;\r\n&gt;&gt;&gt; <b>11.0 // 4.0</b>\r\n2.0\r\n&gt;&gt;&gt; <b>type(11.0 // 4.0)</b>\r\n&lt;class 'float'&gt;\r\n</pre></blockquote>\r\n\r\n<p>In this case, we get a float result using either of the division operators, the difference being that integer division <b>//</b> gives us an integral result (i.e., a result with the fractional part discarded and replaced with <b>.0</b> instead).  The only other interesting question is what happens when we use floats with fractional parts other than <b>.0</b>.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>3.25 / 0.5</b>\r\n6.5\r\n&gt;&gt;&gt; <b>type(3.25 / 0.5)</b>\r\n&lt;class 'float'&gt;\r\n&gt;&gt;&gt; <b>3.25 // 0.5</b>\r\n6.0\r\n&gt;&gt;&gt; <b>type(3.25 // 0.5)</b>\r\n&lt;class 'float'&gt;\r\n</pre></blockquote>\r\n\r\n<p>Nothing there disproves our theory.  The rules are:</p>\r\n\r\n<ul>\r\n  <li>Division of two integers yields a float</li>\r\n  <li>Division of two floats yields a float</li>\r\n  <li>Integer division of two integers yields an integer</li>\r\n  <li>Integer division of two floats yields a float whose fractional part is <b>.0</b></li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Remainders</p>\r\n\r\n<p>There is one additional wrinkle when it comes to division.  Not only is there a way to perform integer division, but there is also a way to obtain the <i>remainder</i> of that division, using the remainder (also called <i>mod</i> or <i>modulo</i>) operator, which is denoted in Python by <b>%</b>.  What this returns is the remainder left over after performing an integer division, similar to how I originally learned about mathematical division a very long time ago (before I had been taught about fractions or decimals).</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>6 % 3</b>\r\n0\r\n&gt;&gt;&gt; <b>7 % 3</b>\r\n1\r\n&gt;&gt;&gt; <b>8 % 3</b>\r\n2\r\n&gt;&gt;&gt; <b>9 % 3</b>\r\n0\r\n&gt;&gt;&gt; <b>10 % 3</b>\r\n1\r\n</pre></blockquote>\r\n\r\n<p>Since 6 is divided evenly by 3, there is no remainder, so the result is 0.  7 does not divide evenly by 3; we can group 3 elements twice and then have 1 left over, so the result is 1.</p>\r\n\r\n<p>At first blush, this seems like a strange operator to include in a programming language.  Why would we ever want the remainder of a division?  However, remainders are surprisingly handy, due to some useful characteristics they have.</p>\r\n\r\n<ul>\r\n  <li>The remainder is always 0 when the second operand evenly divides the first.  If you ever want to know whether a number <b>n</b> is a multiple of 10, you can simply check if <b>n % 10</b> is 0.  If you ever want to know if a number is even, you can check if <b>n % 2</b> is 0.  (Note, too, that you can check if a number is odd by checking if <b>n % 2</b> is 1.)</li>\r\n  <li>The remainder of <b>n % m</b> always lies between 0 and m - 1, inclusive.  This can be used to ensure that values stay within a certain range as you operate on them, which has all kinds of uses.</li>\r\n</ul>\r\n\r\n<p>Note that it's possible to find remainders using negative integers on either or both sides, and it's also possible to do it using floats, though neither of those techniques has nearly as much practical use as what we've already seen, so we'll leave those as curiosities for now and move on.</p> \r\n\r\n<p class=\"subtitle\">Mixed-mode arithmetic</p>\r\n\r\n<p>Python also supports what is often called <i>mixed-mode arithmetic</i>, which is a fancy way of saying that you can perform arithmetic operations on two operands where one is an int and the other is a float.  In that case, the int operand is first converted to an equivalent float (e.g., <b>14</b> becomes <b>14.0</b>), then the operation is performed using the usual rules we've already seen for operations involving two floats.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>5 * 3.5</b>\r\n17.5\r\n&gt;&gt;&gt; <b>12.5 // 3</b>\r\n4.0\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Operator precedence, associativity, and parenthesization</p>\r\n\r\n<p>The arithmetic operators (and all of the others, too) each have a <i>precedence</i> associated with them, with some having a higher precedence than others.  In an expression with multiple operators, the operators with higher precedence are evaluated before those with lower precedence.  As is typical in algebra, multiplication and division have a higher precedence than addition and subtraction.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>3 + 4 * 5</b>\r\n23\r\n</pre></blockquote>\r\n\r\n<p>Operators at the same level of precedence are evaluated according to their <i>associativity</i>.  Most operators associate from left-to-right when precedences are the same, meaning that the operator on the left is evaluated before the operator on the right.  That may seem like an irrelevant detail, but it actually turns out to be important.  Subtraction associates left-to-right, which makes the example below work the way it's shown below.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>5 - 3 - 2</b>\r\n0\r\n</pre></blockquote>\r\n\r\n<p>If subtraction associated right-to-left instead, the answer would be different: First, 2 would be subtracted from 3 (giving 1), which would then be subtracted from 5 (giving 4).</p>\r\n\r\n<p>While most operators associate left-to-right, some don't.  One example is exponentiation, which associates right-to-left &mdash; as it does in mathematics, when we write things like 4<sup><small>3</small><sup><small>2</small></sup></sup>.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>4 ** 3 ** 2</b>\r\n262144\r\n</pre></blockquote>\r\n\r\n<p>In this case, <b>3 ** 2</b> is evaluated first (giving 9), then <b>4 ** 9</b> is evaluated (giving 262144).</p>\r\n\r\n<p>As is also typical in algebra, parentheses can be used to override the normal precedence of operators.  In an expression, operators within a set of parentheses are evaluated before operators outside of it.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>(3 + 4) * 5</b>\r\n35\r\n&gt;&gt;&gt; <b>4 * ((5 + 6) / 2)</b>\r\n22.0\r\n</pre></blockquote>\r\n\r\n<p>Of course, there's only so far we can get in a programming language by evaluating arithmetic expressions, so let's expand our horizons a bit.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Variables</p>\r\n\r\n<p>A <i>variable</i> in Python provides a way to give a name to some value, and to retrieve that value (using its name) again later.  Introducing a new variable simply requires that we use <i>assignment</i> to store a value into a variable that we hadn't used previously.  Subsequently, if we use that variable in an expression, it will evaluate to the value we stored in it previously.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>boo = 11</b>\r\n&gt;&gt;&gt; <b>boo</b>\r\n11\r\n&gt;&gt;&gt; <b>boo * 4</b>\r\n44\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Statements</p>\r\n\r\n<p>Until now, every time we've typed something into the Python shell, it's been evaluated and its value has been displayed.  In our use of assignment, however, things were different.  We typed <b>boo = 11</b> into the shell, but we didn't see any result at all.  Instead, we were simply shown another prompt, expecting us to type something else.</p>\r\n\r\n<p>Assignment in Python is an example of a <i>statement</i>.  Statements differ from expressions in that they do not have a value; they instead achieve some other kind of effect.  In this case, the effect we got (by using assignment) was to store a value into a variable.  There's no value returned; there's simply a change made behind the scenes (the variable <b>boo</b> now has the value <b>11</b> stored in it).  We'll see a number of other kinds of statements, which will have different effects.  But that distinction will always remain: Expressions are evaluated and return a value, while statements do not return a value, but instead have some other kind of effect.</p>\r\n\r\n<p class=\"subtitle\">Values have types, but variables do not</p>\r\n\r\n<p>Depending on which programming languages you've seen previously, you might be wondering why it wasn't necessary to introduce the variable into the program in some way before assigning a value to it.  For example, in Java, you introduce a new variable by <i>declaring</i> it, after which you can assign it a value.</p>\r\n\r\n<blockquote><pre>\r\nint boo;\r\n\r\n. . .\r\n\r\nboo = 11;\r\n</pre></blockquote>\r\n\r\n<p>The primary reason for variable declaration in a programming language is to associate a variable with a type.  In Java, once you've declared that the variable <b>boo</b> has the type <b>int</b>, you'll only ever be allowed to store an integer value in <b>boo</b>.  The limitation is enforced so strongly that a Java program can't even run if there's an attempt to store something other than an integer in the variable <b>boo</b>; a Java compiler will reject the program with an error message before it can run.</p>\r\n\r\n<p>In Python, however, variables don't have a type.  Variables can store any value you'd like at any time.  The same variable can even store values of different types throughout its lifetime &mdash; though you might consider the wisdom of such an approach, it is legal, even if the types are wildly different from one another.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>boo = 11</b>\r\n&gt;&gt;&gt; <b>boo</b>\r\n11\r\n&gt;&gt;&gt; <b>type(boo)</b>\r\n&lt;class 'int'&gt;\r\n&gt;&gt;&gt; <b>boo = 4.25</b>\r\n&gt;&gt;&gt; <b>boo</b>\r\n&gt;&gt;&gt; 4.25\r\n&gt;&gt;&gt; <b>type(boo)</b>\r\n&lt;class 'float'&gt;\r\n</pre></blockquote>\r\n\r\n<p>Because it's possible to say <b>type(boo)</b>, you might be thinking that the variable <b>boo</b> has a type, but it really doesn't.  What we're really doing when we say <b>type(boo)</b> is this:</p>\r\n\r\n<ul>\r\n  <li>First, obtain the value of <b>boo</b>.  The first time we did this in the example above, it came back as the integer 11.</li>\r\n  <li>Next, ask for the type of the value that we got back.  It's an integer, so we got back <b>&lt;class 'int'&gt;</b>.</li>\r\n</ul>\r\n\r\n<p>The key thing to remember is that variables in Python do not have a type, but they each store a value, and the value they store <i>does</i> have a type.  That may seem like a distinction without a difference, but will actually turn out to be important as we move forward.</p>\r\n\r\n<p>This means that whether it's legal to use a variable in a Python expression is largely a matter of what type of value it stores.  For example, if we attempted to evaluate the expression <b>boo + 8</b>, that might or might not be legal; it depends on what kind of value is stored in <b>boo</b>.  If it's a value to which we can add an integer, it will be legal; if not, it won't.  (This is why, in practice, we'll want to consider the types of values we plan to store in each of our variables, even though it's not checked by Python until the program runs.  The name of the game, in any programming language, is to write a program that works correctly, and that requires the requisite level of care, no matter what language you're writing in.)</p>\r\n\r\n<p class=\"subtitle\">Naming conventions</p>\r\n\r\n<p>When we write Python programs, we'll follow certain <i>naming conventions</i> that are typically used by Python programmers.  The word \"conventions\" means something less strict than \"rules\" or \"laws\"; a naming convention is not an absolute (i.e., you can technically violate it and still be writing a Python program that can run successfully).  But when everyone who writes Python programs names similar kinds of things similarly &mdash; following the same norms for capitalization, spacing, and so on &mdash; then everyone benefits; seeing names written in a certain way provides a valuable clue about what they mean, which can make a program easier to read and understand.</p>\r\n\r\n<p>For that reason, we'll follow the usual naming conventions for Python in this course.  Having learned a language other than Python previously, you may find that you're used to something different, so what you see here may seem jarring.  But part of learning a new programming language is learning the culture around that language, the shared ideas and techniques that help people writing in that language collaborate and understand each other more easily; naming conventions are part of that culture.</p>\r\n\r\n<p>In Python, variables are named using only lowercase letters, digits, and underscores.  It turns out that the digits can't come first &mdash; that's a rule in Python, actually, which makes a name like <b>123boo</b> for a variable illegal &mdash; but, otherwise, anything goes.  The underscores are used to separate words, for names that consist of more than one word.  All of these are valid variable names in Python, according to the naming convention:</p>\r\n\r\n<blockquote><pre>\r\nboo\r\nfield3\r\ninstructor_name\r\nstudent_id_number\r\n</pre></blockquote>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Relational operators</p>\r\n\r\n<p>In addition to the arithmetic operators we've already seen, Python also includes <i>relational operators</i> (also called <i>comparison operators</i>) that allow you to determine how two values compare to one another &mdash; whether they are equal, not equal, less than, less than or equal, greater than, or greater than or equal to one another.  These work more or less the way you would expect; some examples follow.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>3 == 3</b>\r\nTrue\r\n&gt;&gt;&gt; <b>4 == 3</b>\r\nFalse\r\n&gt;&gt;&gt; <b>3 != 3</b>\r\nFalse\r\n&gt;&gt;&gt; <b>4 != 3</b>\r\nTrue\r\n&gt;&gt;&gt; <b>2 &lt; 3</b>\r\nTrue\r\n&gt;&gt;&gt; <b>3 &lt; 3</b>\r\nFalse\r\n&gt;&gt;&gt; <b>4 &lt; 3</b>\r\nFalse\r\n&gt;&gt;&gt; <b>2 &lt;= 3</b>\r\nTrue\r\n&gt;&gt;&gt; <b>3 &lt;= 3</b>\r\nTrue\r\n&gt;&gt;&gt; <b>4 &lt;= 3</b>\r\nFalse\r\n&gt;&gt;&gt; <b>2 &gt; 3</b>\r\nFalse\r\n&gt;&gt;&gt; <b>3 &gt; 3</b>\r\nFalse\r\n&gt;&gt;&gt; <b>4 &gt; 3</b>\r\nTrue\r\n&gt;&gt;&gt; <b>2 &gt;= 3</b>\r\nFalse\r\n&gt;&gt;&gt; <b>3 &gt;= 3</b>\r\nTrue\r\n&gt;&gt;&gt; <b>4 &gt;= 3</b>\r\nTrue\r\n</pre></blockquote>\r\n\r\n<p>Note, too, that it is possible to do all of these things with floats, and also to mix integers and floats, with predictable results.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>4.0 == 4.0</b>\r\nTrue\r\n&gt;&gt;&gt; <b>3 &lt;= 4.0</b>\r\nTrue\r\n&gt;&gt;&gt; <b>6.5 &gt; 8</b>\r\nFalse\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Chaining relational operators in the same expression</p>\r\n\r\n<p>One feature you might not expect, depending on which programming languages you've used previously, is that you can chain more than one relational operator together in the same expression.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>2 &lt; 4 &lt; 8</b>\r\nTrue\r\n&gt;&gt;&gt; <b>14 &gt;= 8 &lt; 3</b>\r\nFalse\r\n</pre></blockquote>\r\n\r\n<p>The key to understanding these expressions is to realize that it's actually a shorthand for something else.  The expression <b>2 &lt; 4 &lt; 8</b> is really a way to ask \"Is it true that 2 is less than 4 <i>and</i> that 4 is less than 8?\"  If both parts are true, the whole expression will evaluate to <b>True</b>; otherwise, it will be <b>False</b>.  That's why the second of the examples above is <b>False</b>: 14 is greater than or equal to 8, but 8 is not less than 3.</p>\r\n\r\n<p>The main reason you'd want to chain relational operators together is the same way we often do it in mathematics: It's a handy way to establish that a value lies between two others, or that three or more values are all equal.  This is especially useful when we're using variables.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>x = 3</b>\r\n&gt;&gt;&gt; <b>0 &lt; x &lt; 5</b>\r\nTrue\r\n&gt;&gt;&gt; <b>y = 4</b>\r\n&gt;&gt;&gt; <b>z = 5</b>\r\n&gt;&gt;&gt; <b>x == y == z</b>\r\nFalse\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">The values True and False</p>\r\n\r\n<p>Another thing to note is that the values we got when we evaluated expressions involving relational operators weren't integers or floats; instead, we always got back either the value <b>True</b> or the value <b>False</b>.  This might rightly make you wonder what these values are; there's no better way to find out than to ask the Python shell.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>type(2 &gt; 3)</b>\r\n&lt;class 'bool'&gt;\r\n</pre></blockquote>\r\n\r\n<p>So, what's a <b>bool</b>?  That's the next part of our story.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Bools</p>\r\n\r\n<p>The <i>bool</i> (or <i>Boolean</i>) type is one that you can think of as comprising two values: <b>True</b> and <b>False</b>.  (Technically, a bool is a kind of integer in Python, though we will likely never rely on that detail.  When we want a \"true/false\" value, we'll use bool; when we want a number, we'll use a number.  That you can do things like arithmetic using bools is mainly a curiosity; it doesn't have a lot of practical use, so we'll avoid it.)</p>\r\n\r\n<p>In fact, <b>True</b> and <b>False</b> are legal Python syntax on their own, literally meaning these two bool values.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>True</b>\r\nTrue\r\n&gt;&gt;&gt; <b>type(True)</b>\r\n&lt;class 'bool'&gt;\r\n&gt;&gt;&gt; <b>False</b>\r\nFalse\r\n&gt;&gt;&gt; <b>type(False)</b>\r\n&lt;class 'bool'&gt;\r\n</pre></blockquote>\r\n\r\n<p>You can compare two bools use the equality operators and get the result you'd expect.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>True == True</b>\r\nTrue\r\n&gt;&gt;&gt; <b>True == False</b>\r\nFalse\r\n&gt;&gt;&gt; <b>True != True</b>\r\nFalse\r\n&gt;&gt;&gt; <b>True != False</b>\r\nTrue\r\n</pre></blockquote>\r\n\r\n<p>More importantly, you can use logical operators with bools, which also work in ways you would expect.  The <b>not</b> operator negates its bool operand, so <b>True</b> becomes <b>False</b> and vice versa.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>not True</b>\r\nFalse\r\n&gt;&gt;&gt; <b>not False</b>\r\nTrue\r\n</pre></blockquote>\r\n\r\n<p>The <b>and</b> and <b>or</b> operators combine two or more bools, according to the rules you might expect: <b>and</b> returns <b>True</b> if <i>all</i> of its operands are <b>True</b>, while <b>or</b> returns <b>True</b> if <i>any</i> of its operands are <b>True</b>.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>True and True</b>\r\nTrue\r\n&gt;&gt;&gt; <b>True and False</b>\r\nFalse\r\n&gt;&gt;&gt; <b>False and True</b>\r\nFalse\r\n&gt;&gt;&gt; <b>False and False</b>\r\nFalse\r\n&gt;&gt;&gt; <b>True and False and True and True</b>\r\nFalse\r\n&gt;&gt;&gt; <b>True or True</b>\r\nTrue\r\n&gt;&gt;&gt; <b>True or False</b>\r\nTrue\r\n&gt;&gt;&gt; <b>False or True</b>\r\nTrue\r\n&gt;&gt;&gt; <b>False or False</b>\r\nFalse\r\n&gt;&gt;&gt; <b>False or False or True or False</b>\r\nTrue\r\n</pre></blockquote>\r\n\r\n<p>Of course, in practice, we won't just be using <b>and</b>, <b>or</b>, and <b>not</b> to combine literal <b>True</b> and <b>False</b> values.  Instead, we'll be using them to combine the results of other expressions that evaluate to these values.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>a = 12</b>\r\n&gt;&gt;&gt; <b>b = 9</b>\r\n&gt;&gt;&gt; <b>a &lt; 15 and b &gt; 0</b>\r\nTrue\r\n&gt;&gt;&gt; <b>a &lt; 10 or b == 10</b>\r\nFalse\r\n</pre></blockquote>\r\n\r\n<p>The primary use we'll find for bool values is in <i>truth testing</i>, which will allow us to write Python code that behaves differently depending on the result of that testing.  To get into that topic in detail, though, we'll need to know a little more Python first, but we'll return to this topic shortly.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Writing Python scripts</p>\r\n\r\n<p>So far, we've spent a lot of time interacting with the Python shell.  The Python shell is obviously handy because of its interactivity, but it's a tool for people who write programs, not for people who use them.  So how do we write Python programs that can be used by non-programmers?  Or save programs so we can run them again and again, without re-typing them into the shell?  The answer is to write <i>Python scripts</i>.</p>\r\n\r\n<p class=\"subtitle\">Naming a Python script</p>\r\n\r\n<p>A Python script isn't really all that special; it's a file that contains text, the same kind of text (Python code) that you could type into the Python shell.  What makes it a Python script is mainly a matter of naming it appropriately.  Similarly to variables, there is a naming convention that is typical for Python scripts, which we'll follow:</p>\r\n\r\n<ul>\r\n  <li>Files containing Python scripts have names ending in <b>.py</b>.</li>\r\n  <li>Before the <b>.py</b>, the names are made up of lowercase letters, digits, and (optionally) underscores, but nothing else, with the first character not permitted to be a digit.</li>\r\n</ul>\r\n\r\n<p>The second part of the convention is there mainly so that we can write Python programs that consist of more than one script; it facilitates the ability for one Python script to \"import\" another, a topic we'll return to soon.  By naming scripts similarly to how we name variables, we're sure that we'll be able to use the name of one script within another.</p>\r\n\r\n<p>So, by these rules, these would all be allowable names for Python scripts:</p>\r\n\r\n<blockquote><pre>\r\nproject0b.py\r\nmy_program.py\r\nrock_paper_scissors.py\r\n</pre></blockquote>\r\n\r\n<p>while these would not:</p>\r\n\r\n<blockquote><pre>\r\nProject #0B.py\r\nMyProgram.py\r\nrock_paper_scissors.py.txt\r\n</pre></blockquote>\r\n\r\n<p>(As it turns out, the latter three are not technically illegal, but, as we'll see, they're a really bad idea; we'll stick with the naming convention above.)</p>\r\n\r\n<p class=\"subtitle\">Our first Python script</p>\r\n\r\n<p>Let's write our first Python script.  In IDLE, select the <b>File</b> menu, then <b>New File</b>.  A new, empty window will appear, while the IDLE window containing the Python shell will remain in the background.  In your new window, type the following text.  (Note, too, that you could type this same text into a Python shell; Python code is Python code.)</p>\r\n\r\n<blockquote><pre>\r\nfirst = 10\r\nlast = 30\r\nlast - first\r\n</pre></blockquote>\r\n\r\n<p>After typing that text, but in that same window, select the <b>File</b> menu, then <b>Save</b>.  You'll be asked to choose a location for the file and a name; give it the name <b>example1.py</b>, our first example.</p>\r\n\r\n<p>Now that we've saved the file, we can run our Python script and see what it does.  From the <b>Run</b> menu, select <b>Run Module</b>.  You'll notice that the IDLE window containing the Python shell will return to the foreground, with text similar to this now appearing in the window:</p>\r\n\r\n<blockquote><pre>\r\n============== RESTART: D:/Examples/32/example1.py ==============\r\n&gt;&gt;&gt;\r\n</pre></blockquote>\r\n\r\n<p>All we saw was that the shell was restarted &mdash; that's why it says <b>RESTART</b> &mdash; which means that any previous state (e.g., variables we had previously assigned in the Python shell) will have been wiped clean.  Then we see the usual <b>&gt;&gt;&gt;</b> prompt, and the Python shell is waiting for us to type an expression.</p>\r\n\r\n<p>But where's our output?  The third line of our program said <b>last - first</b>, so we might have expected to see the value <b>20</b> appear, just like it would have appeared if we had typed those same three lines of code into a Python shell.  But it didn't.  Why is that?  Did our script even run?  Let's check, by typing some expressions into the Python shell.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>first</b>\r\n10\r\n&gt;&gt;&gt; <b>last</b>\r\n30\r\n</pre></blockquote>\r\n\r\n<p>It sure looks like it, because the variables <b>first</b> and <b>last</b> have the values assigned to them in our script.  So why didn't we see the result of <b>last - first</b>?</p>\r\n\r\n<p>The answer to that question is that running a script isn't the same as typing expressions into a Python shell.  When you type an expression like <b>last - first</b> into a Python shell, it's evaluated and its value is displayed.  But when an expression is evaluated within a Python script, we see nothing.  It happens, but if nothing is done with its value, that value is simply discarded.</p>\r\n\r\n<p>So how can we write a Python script that generates output we can see?</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Printing output</p>\r\n\r\n<p>Python includes a set of <i>built-in functions</i>, which are always available to us and provide some basic capabilities that are required in Python programs.  We've seen one of those built-in functions, called <b>type()</b>, already.  Another of those built-in functions is called <b>print()</b>, whose job is to display output; if we use that from within a Python script, we'll see the output it displays when we run the script.</p>\r\n\r\n<p>Let's modify our first example script, so it uses <b>print()</b> on the last line.</p>\r\n\r\n<blockquote><pre>\r\nfirst = 10\r\nlast = 30\r\nprint(last - first)\r\n</pre></blockquote>\r\n\r\n<p>Note that, just like the <b>type()</b> function, we <i>call</i> the <b>print()</b> function by specifying its name, followed by a pair of parentheses.  Between the parentheses are what are called <i>arguments</i>.  In this case, we're passing only one of them &mdash; the result of evaluating the expression <b>last - first</b> &mdash; and asking the function to print that value.</p>\r\n\r\n<p>Let's see what happens when we run this new version of our script.</p>\r\n\r\n<blockquote><pre>\r\n============== RESTART: D:/Examples/32/example1.py ==============\r\n20\r\n&gt;&gt;&gt;\r\n</pre></blockquote>\r\n\r\n<p>Now we're getting somewhere!  The Python shell was restarted, our script was executed, its output (20) was printed, and we then see the &gt;&gt;&gt; prompt, like before.  (When we run a Python script within IDLE, we'll always get a shell prompt at the end, which will allow us to explore the aftermath of our script's execution.)</p>\r\n\r\n<p>I should point out that you can use the <b>print()</b> function within the Python shell, as well, but it has more limited use there, since its goal &mdash; to make output visible &mdash; is already met by the Python shell's feature of displaying the value of whatever expression we evaluate.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>x = 15</b>\r\n&gt;&gt;&gt; <b>x</b>\r\n15\r\n&gt;&gt;&gt; <b>print(x)</b>\r\n15\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">A few more details about print()</p>\r\n\r\n<p>Before we move forward, there are a few things worth highlighting about the <b>print()</b> function.</p>\r\n\r\n<p>You can pass more than one argument to the <b>print()</b> function.  (The way you pass multiple arguments to a function in Python is to separate the arguments with commas.)  When you do that, the arguments' values are printed in the order you passed them to the function, with a space separating them.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>print(10, 20)</b>\r\n10 20\r\n&gt;&gt;&gt; <b>print(4.5, 30, -2.75)</b>\r\n4.5 30 -2.75\r\n</pre></blockquote>\r\n\r\n<p>If you don't want the arguments' values to be separated by spaces when printed, there's a way to control that, as well.  Some Python functions can accept what are called <i>keyword arguments</i>, which is to say arguments that are explicitly named.  The main rules to be followed are that the keyword arguments must appear after all of the \"normal\", non-keyworded ones, and that the function must recognize the keyword argument(s) you pass to it.  In the case of <b>print()</b>, it supports the keyword argument <b>sep</b> &mdash; short for <i>separator</i> &mdash; which allows you to specify what should be printed in between each argument.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>print(10, 20, sep = 'e')</b>\r\n10e20\r\n</pre></blockquote>\r\n\r\n<p>Ordinarily, when you call <b>print()</b>, it prints the values of whatever arguments you pass to it, then prints a <i>newline character</i>, meaning that the next output to be printed will appear at the beginning of the next line.  However, you can control that behavior, as well; the keyword argument <b>end</b> allows you to specify what should be printed after the values of the arguments.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>print(10, 20, sep = 'e', end = 'X')</b>\r\n10e20X\r\n</pre></blockquote>\r\n\r\n<p>Putting all of that together, suppose you have a Python script with the following code in it.</p>\r\n\r\n<blockquote><pre>\r\nx = 5\r\ny = 7.5\r\nz = 10\r\nprint(x, y, sep = 'q', end = '')\r\nprint(z)\r\nprint(x + y + z)\r\n</pre></blockquote>\r\n\r\n<p>If you executed that script, you would see this output:</p>\r\n\r\n<blockquote><pre>\r\n5q7.510\r\n22.5\r\n</pre></blockquote>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Reading input</p>\r\n\r\n<p>Thus far, we've been able to write Python code that displays output, but most interesting programs also need to read some kind of input.  There are actually a lot of ways for a Python program to receive input:</p>\r\n\r\n<ul>\r\n  <li>From the keyboard, via the Python shell</li>\r\n  <li>From the mouse or other input devices, in a program with a graphical user interface</li>\r\n  <li>From a file on a hard drive or other storage device</li>\r\n  <li>Via a computer network, such as the Internet or a local-area network</li>\r\n</ul>\r\n\r\n<p>We'll see all of these techniques during our travels this quarter, but we'll begin with the simplest of these: reading input from the keyboard via the Python shell.</p>\r\n\r\n<p class=\"subtitle\">The built-in function input()</p>\r\n\r\n<p>Python provides a built-in function called <b>input()</b>, whose job is to wait for the user to type a line of input, then return whatever the user typed.  The function won't finish until the user has pressed the <b>Enter</b> or <b>Return</b> key to signify that they've finished typing.</p>\r\n\r\n<p>Let's try it from the Python shell first.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>x = input()</b>\r\n</pre></blockquote>\r\n\r\n<p>At this point, the cursor will appear at the beginning of the next line, directly underneath the first &gt; in the prompt above, waiting for the user to type something.  We won't see the next &gt;&gt;&gt; prompt, because the <b>input()</b> function hasn't finished executing yet.  So, for example, if we typed <b>35</b> and hit the <b>Enter</b> or <b>Return</b> key, then <b>input()</b> could finish, the assignment to the variable <b>x</b> could occur, and we'd see the next prompt.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>x = input()</b>\r\n<b>35</b>\r\n&gt;&gt;&gt;\r\n</pre></blockquote>\r\n\r\n<p>Since <b>x = input()</b> is an assignment statement, it has no value, so nothing is printed.  (Note the boldfaced text in my example above; <b>35</b> is something we typed, not something that the Python shell displayed.)</p>\r\n\r\n<p>Now that the assignment is complete, we might expect <b>x</b> to have the value <b>35</b>.  Let's see if we're right about that.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>x</b>\r\n'35'\r\n</pre></blockquote>\r\n\r\n<p>The single quotes surrounding the <b>35</b> aren't an accident; they mean something.  The value in <b>x</b> isn't an integer; it's something else.  And if we want to know what it is, a good first step is to ask the Python shell to tell us.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>type(x)</b>\r\n&lt;class 'str'&gt;\r\n</pre></blockquote>\r\n\r\n<p>But if we typed the digits <b>35</b>, why didn't <b>input()</b> give us back an integer instead?  Before we answer that question, let's make sure we understand what <b>str</b> means.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Strings</p>\r\n\r\n<p>A <i>string</i> is a sequence of text, made up of zero or more <i>characters</i>.  The <b>str</b> type in Python is used to represent strings.  (Notably, there is no separate type for characters; characters are represented as strings containing one character instead.)  Different strings can have different lengths, and there is no official limit on the number of characters that can be in a string in Python &mdash; though there is a practical one, in the sense that your computer has a finite amount of memory available.</p>\r\n\r\n<p>A <i>string literal</i> in Python is a way to write a string whose characters are specified directly in your program.  There are a few ways to write string literals in Python, the most common of which are:</p>\r\n\r\n<ul>\r\n  <li>Surrounding a sequence of characters with a pair of single-quotes</li>\r\n  <li>Surrounding a sequence of characters with a pair of double-quotes</li>\r\n</ul>\r\n\r\n<p>Note, though, that these are just different syntaxes for the same result; either way, what you get back is a string.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'Hello'</b>\r\n'Hello'\r\n&gt;&gt;&gt; <b>type('Hello')</b>\r\n&lt;class 'str'&gt;\r\n&gt;&gt;&gt; <b>\"Hello\"</b>\r\n'Hello'\r\n&gt;&gt;&gt; <b>type(\"Hello\")</b>\r\n&lt;class 'str'&gt;\r\n</pre></blockquote>\r\n\r\n<p>The Python shell prefers displaying strings by surrounding them with single-quotes, so you'll notice that when we evaluated <b>\"Hello\"</b>, we saw that the Python shell displayed it as <b>'Hello'</b> instead.  We'll prefer the same in the code that we write in this course; we'll use single-quotes, except when there's a good reason not to.</p>\r\n\r\n<p>You might wonder why Python supports both syntaxes in the first place.  The reason has mostly to do with being able to easily write string literals that themselves have quotes inside of them.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'His name is \"Boo\"'</b>\r\n'His name is \"Boo\"'\r\n&gt;&gt;&gt; <b>\"He's perfect\"</b>\r\n\"He's perfect\"\r\n</pre></blockquote>\r\n\r\n<p>Notice that the Python shell will display strings surrounded with double-quotes when they contain a single-quote (and don't also contain a double-quote).</p>\r\n\r\n<p class=\"subtitle\">Escape sequences</p>\r\n\r\n<p>Of course, there are some syntax limitations here.</p>\r\n\r\n<ul>\r\n  <li>If you have a single-quoted string literal, you can't easily put a single-quote into it, because it would be interpreted as being the end of the string.</li>\r\n  <li>If you have a double-quoted string literal, you can't easily put a double-quote into it, for a similar reason.</li>\r\n  <li>You might like to have a string that contains both single-quotes and double-quotes within it.</li>\r\n  <li>Both single- and double-quoted string literals must appear on a single line (i.e., they can't have newlines within them), which means you can't easily put a newline character into a string literal, either.</li>\r\n</ul>\r\n\r\n<p>How we solve problems like these in Python is similar to how most programming languages allow us to solve them: by providing <i>escape sequences</i>.  If the backslash character <b>'\\'</b> appears in a string literal, you've potentially started an escape sequence, which is to say that you've \"escaped\" from the normal rules of Python syntax temporarily.  If the character(s) that follow the backslash are recognized as escape characters, Python will change the entire escape sequence &mdash; the backslash, plus the character(s) that follow &mdash; into something else that might otherwise be difficult or impossible to write in a string literal.</p>\r\n\r\n<p>For example, single- and double-quote characters can be escaped this way.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'It\\'s a beautiful day'</b>\r\n\"It's a beautiful day\"\r\n&gt;&gt;&gt; <b>\"I said \\\"Isn't it?\\\"\"</b>\r\n'I said \"Isn\\'t it?\"'\r\n</pre></blockquote>\r\n\r\n<p>(Notice again that the Python shell preferred to display the string surrounded by single-quotes in the second case.  It always uses single-quotes, unless the string contains single-quotes <i>and</i> doesn't contain double-quotes.)</p>\r\n\r\n<p>Another commonly-used escape sequence is <b>\\n</b>, which is replaced by a newline character.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'Hello\\nthere'</b>\r\n'Hello\\nthere'\r\n&gt;&gt;&gt; <b>print('Hello\\nthere')</b>\r\nHello\r\nthere\r\n</pre></blockquote>\r\n\r\n<p>There are a couple of interesting things going on in the example above, which we should take note of.  When the Python shell displays a string value that results from evaluating an expression, it uses the string's representation, which is done using Python syntax; what we see is itself a string literal.  This is why evaluating <b>'Hello\\nthere'</b> led to the result <b>'Hello\\nthere'</b> being displayed.  On the other hand, when Python prints a string, it displays only the characters in that string; in that case, the newline character actually manifests itself as a newline (i.e., going to the beginning of the next line after printing <b>Hello</b> but before printing <b>there</b>).</p>\r\n\r\n<p>A similar technique allows us to include a backslash character into a string literal.  The escape sequence <b>\\\\</b> becomes a single backslash.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'a\\\\b'</b>\r\n'a\\\\b'\r\n&gt;&gt;&gt; <b>print('a\\\\b')</b>\r\na\\b\r\n</pre></blockquote>\r\n\r\n<p>There are a number of other escape sequences supported by Python, and we'll no doubt see some more of them as we move forward.  Note, though, that not every character following a backslash forms an escape sequence.  If we follow a backslash with something that doesn't form an escape sequence, we get what we wrote &mdash; the backslash is included in the string literal.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'a\\gb'</b>\r\n'a\\\\gb'\r\n&gt;&gt;&gt; <b>print('a\\gb')</b>\r\na\\gb\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Asking for the length of a string</p>\r\n\r\n<p>The built-in function <b>len()</b> in Python provides a way to ask a value for its length.  Not all types of values have lengths, but strings certainly do: The length of a string is the number of characters in it.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>len('Boo')</b>\r\n3\r\n&gt;&gt;&gt; <b>len('Hello there')</b>\r\n11\r\n&gt;&gt;&gt; <b>len('a\\\\b')</b>\r\n3\r\n</pre></blockquote>\r\n\r\n<p>Note, from the last example, that what is being counted are the characters actually stored in the string.  Escape sequences are translated to something else before they're stored, which means that <b>len('a\\\\b')</b> is 3, because the escape sequence <b>\\\\</b> becomes a single backslash.</p>\r\n\r\n<p>Not all kinds of values have lengths.  Numbers, for example, do not; asking a number for its length will give you an error message.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>len(5)</b>\r\nTraceback (most recent call last):\r\n  File \"&lt;pyshell#33&gt;\", line 1, in &lt;module&gt;\r\n    len(5)\r\nTypeError: object of type 'int' has no len()\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Concatenation and multiplication</p>\r\n\r\n<p>Strings can be <i>concatenated</i> by using the <b>+</b> operator.  Concatenation simply means to combine two strings into a single one, such that the text from the second of the two strings appears immediately after the text from the first.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'abc' + 'def'</b>\r\n'abcdef'\r\n</pre></blockquote>\r\n\r\n<p>They can also be <i>multiplied</i> by using the <b>*</b> operator.  When you multiply a string, you don't multiply it by another string; you multiply it by an integer, with the result being the original string appearing repeatedly the specified number of times.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'boo' * 3</b>\r\n'boobooboo'\r\n</pre></blockquote>\r\n\r\n<p>Not all arithmetic operators are supported by strings, however.  There is no notion of subtraction or division supported; attempting to subtract or divide strings is an error.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'abc' - 'bc'</b>\r\nTraceback (most recent call last):\r\n  File \"&lt;pyshell#36&gt;\", line 1, in &lt;module&gt;\r\n    'abc' - 'bc'\r\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\r\n&gt;&gt;&gt; <b>'hellohello' / 2</b>\r\nTraceback (most recent call last):\r\n  File \"&lt;pyshell#37&gt;\", line 1, in &lt;module&gt;\r\n    'hellohello' / 2\r\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Relational operators on strings</p>\r\n\r\n<p>Relational operators are supported by strings, which means that you can compare them for equality, inequality, or ordering.  Two strings are equal if they contain the same sequence of characters (i.e., the same characters specifed in the same order).</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'Hello' == 'Hello'</b>\r\nTrue\r\n&gt;&gt;&gt; <b>'Hello' != 'Hello'</b>\r\nFalse\r\n&gt;&gt;&gt; <b>'Hello' == 'Hello '</b>\r\nFalse\r\n&gt;&gt;&gt; <b>'Hello' != 'Hello '</b>\r\nTrue\r\n&gt;&gt;&gt; <b>'Hello' == 'hello'</b>\r\nFalse\r\n&gt;&gt;&gt; <b>'Hello' != 'hello'</b>\r\nTrue\r\n</pre></blockquote>\r\n\r\n<p>Comparisons for ordering, using operators such as &lt; or &gt;=, are done using a technique called <i>lexicographical ordering</i>, which is a somewhat longer story that we'll return to a bit later in the course.</p>\r\n\r\n<p class=\"subtitle\">Calling methods on a string</p>\r\n\r\n<p>We've seen before that the values that Python programs operate on are said to be <i>objects</i>.  If you've previously learned a language such as Java, C++, or C#, you'll be familiar with the term, so you may have certain expectations about how they must work in Python, too &mdash; though, as usual, previous knowledge can also be slightly misleading, so be careful how many assumptions you make about the similarity of Python to languages that you already know.</p>\r\n\r\n<p>Many kinds of objects in Python support what are called <i>methods</i>, which are similar to functions, but that you instead ask an object to perform on your behalf.  Not nearly every function you write in Python will be a method, but methods do exist, and we'll need to know how to call them &mdash; and, eventually, how to write them, though that's a topic for another day.</p>\r\n\r\n<p>When you want to <i>call a method</i> on an object &mdash; which is to say that you want to ask the object to do a job for you &mdash; you do so by following that object with a dot, then the name of the method, then arguments surrounded by parentheses (similar to when you call a function).  Strings support a number of methods, so let's take a look at how some of them work.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>description = '  Boo is happy today!  '</b>\r\n&gt;&gt;&gt; <b>description.strip()</b>\r\n'Boo is happy today!'\r\n</blockquote></pre>\r\n\r\n<p>The <b>strip</b> method returns the string it's called on, but with any spaces at the beginning and the end removed.  Note that <b>description</b> will not have changed; what we're getting back is a new string that's similar to the existing one.  (That's true of all of the methods that the <b>str</b> type provides; they don't modify the strings they're called on.)  You can think of these methods as asking a string a question: \"What would you look like if you had no spaces at the beginning and the end?\"</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>description.upper()</b>\r\n'  BOO IS HAPPY TODAY!  '\r\n&gt;&gt;&gt; <b>description.isupper()</b>\r\nFalse\r\n</pre></blockquote>\r\n\r\n<p>As you might imagine, the <b>upper</b> method returns a string where any lowercase letters have been replaced by uppercase letters instead.  <b>isupper</b> instead answers the question of whether every letter is uppercase.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>'Boo'.upper()</b>\r\n'BOO'\r\n&gt;&gt;&gt; <b>'Boo'.upper().isupper()</b>\r\nTrue\r\n</pre></blockquote>\r\n\r\n<p>One thing to realize is that you can call a method on a string, even if that string isn't stored in a variable.  That allows you not only to call a method on a string literal, but also to chain together two or more string methods on the same line of code.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>description.startswith('B')</b>\r\nFalse\r\n&gt;&gt;&gt; <b>description.startswith(' ')</b>\r\nTrue\r\n&gt;&gt;&gt; <b>description.strip().startswith('B')</b>\r\nTrue\r\n</pre></blockquote>\r\n\r\n<p>The <b>startswith</b> method returns <b>True</b> if called on a string that starts with the characters in the string you pass as an argument to it.</p>\r\n\r\n<p>There are lots more that you can call on strings, and we'll see some of them later in the course, but let's move forward to other topics for now.</p>\r\n\r\n<p class=\"subtitle\">The input() function always returns a string</p>\r\n\r\n<p>Now that we know what strings are, we can return to a question we had left open previously.  We did the following in the Python shell, but got back a somewhat curious result.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>x = input()</b>\r\n<b>35</b>\r\n&gt;&gt;&gt; <b>x</b>\r\n'35'\r\n&gt;&gt;&gt; <b>type(x)</b>\r\n&lt;class 'str'&gt;\r\n</pre></blockquote>\r\n\r\n<p>The reason the value in <b>x</b> is a string and not an integer is simple: Users can type any text they want in response to a call to the <b>input()</b> function, so the <b>input()</b> function always returns a string, since only a string can safely represent anything the user could have typed.</p>\r\n\r\n<p>Of course, the problem arises when what we really want is an integer, because we subsequently want to use the value in ways that only an integer supports (e.g., to perform arithmetic on it).</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>num = input('Enter a number: ')</b>\r\n<b>35</b>\r\n&gt;&gt;&gt; <b>num + 2</b>\r\nTraceback (most recent call last):\r\n  File \"&lt;pyshell#12&gt;\", line 1, in &lt;module&gt;\r\n    num + 2\r\nTypeError: must be str, not int\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Conversions between strings and other built-in types</p>\r\n\r\n<p>It is possible in Python to convert strings to many of the other built-in types.  Each of the built-in types has a <i>constructor</i>, which is a function that can create a value of that type.  Each of them supports slightly different options, but they all support the option of taking a string as an argument.  These constructor functions will do nicely as a way of converting a string to an integer or a float.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>int('35')</b>\r\n35\r\n&gt;&gt;&gt; <b>type(int('35'))</b>\r\n&lt;class 'int'&gt;\r\n&gt;&gt;&gt; <b>float('10.5')</b>\r\n10.5\r\n&gt;&gt;&gt; <b>type(float('10.5'))</b>\r\n&lt;class 'float'&gt;\r\n</pre></blockquote>\r\n\r\n<p>These functions will also do nicely for helping us to detect that the string can't be converted, because it contains text other than digits.  They'll generally strip spaces off of the beginning and the end of the string before conversion, but they won't allow the conversion if the string is non-numeric; in that case, an error message will appear.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>int('  15  ')</b>\r\n15\r\n&gt;&gt;&gt; <b>int('boo')</b>\r\nTraceback (most recent call last):\r\n  File \"&lt;pyshell#49&gt;\", line 1, in &lt;module&gt;\r\n    int('boo')\r\nValueError: invalid literal for int() with base 10: 'boo'\r\n</pre></blockquote>\r\n\r\n<p>Conversions from string to bool are a little more problematic, because they don't behave the way you would expect; non-empty strings are considered <b>True</b> and empty strings are considered <b>False</b>.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>bool('True')</b>\r\nTrue\r\n&gt;&gt;&gt; <b>bool('False')</b>\r\nTrue\r\n&gt;&gt;&gt; <b>bool('123')</b>\r\nTrue\r\n&gt;&gt;&gt; <b>bool('0')</b>\r\nTrue\r\n&gt;&gt;&gt; <b>bool('')</b>\r\nFalse\r\n</pre></blockquote>\r\n\r\n<p>The <b>str</b> type has its own constructor, which can do this same kind of conversion in reverse.  If you give it a value such as an integer, a float, or a bool, you'll get back a string containing something that looks like that value.  (Technically, what you'll get is the same thing you get when you print a value, except it will be stored in a string instead of printed to the output.)</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>str(10.5)</b>\r\n'10.5'\r\n&gt;&gt;&gt; <b>str(False)</b>\r\n'False'\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Reading numeric input</p>\r\n\r\n<p>When we want to read numeric input, there are two tools that can be combined to solve the problem.</p>\r\n\r\n<ul>\r\n  <li>The built-in function <b>input()</b> reads input from the user and returns it to us as a string.</li>\r\n  <li>The <b>int()</b> and <b>float()</b> constructors can take strings and convert them to integers or floats for us.</li>\r\n</ul>\r\n\r\n<p>So, if we wanted to read, say, integer input, we could do the following.  (Note, too, that the <b>input()</b> function can take a string argument, which is printed to the user as a sort of \"prompt\" to describe what they should do next.)</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>age = int(input('Enter your age: '))</b>\r\nEnter your age: <b>42</b>\r\n&gt;&gt;&gt; <b>age</b>\r\n42\r\n&gt;&gt;&gt; <b>type(age)</b>\r\n&lt;class 'int'&gt;\r\n</pre></blockquote>\r\n\r\n<p>If the user types something non-numeric, this will result in an error message, because the conversion being done by the <b>int()</b> constructor will fail.  A little later this quarter, we'll learn how to react to situations like that and be able to handle them gracefully, but we'll allow the fragility for now.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Conditionality using the \"if\" statement</p>\r\n\r\n<p>As in any programming language, Python provides a mechanism to achieve <i>conditionality</i>, so that you can write portions of your program that may or may not be executed, depending on the situation.  (This turns out to be one of the very few critical features that a programming language must provide if it is to be generally useful.)  In Python, conditionality is achieved using a statement called <b>if</b>.</p>\r\n\r\n<p class=\"subtitle\">Indention</p>\r\n\r\n<p>The Python statements we've seen so far have been singular; they've stood alone.  Even a statement with a complex expression in it, such as <b>age = int(input('Enter your age: '))</b> is really just a single statement: an assignment into the variable <b>age</b>.</p>\r\n\r\n<p>Some Python statements are what you might call <i>compound statements</i>, in the sense that they have other statements inside of them.  The <b>if</b> statement is one such statement, because an <b>if</b> statement provides a way of saying \"Under the following circumstances, run these statements; otherwise, don't.\"</p>\r\n\r\n<p>Programming languages with compound statements need to have some way in their syntax to make clear which other statements belong within it.  Some programming languages use symbols like semicolons, braces, brackets, or parentheses to play this role.  Python, by way of contrast, uses the presence or absence of spacing; it is subject to <i>indention</i> rules instead.</p>\r\n\r\n<p>An <b>if</b> statement provides a good example.  Structurally, an <b>if</b> statement is made up of two things: a <i>condition</i> and a <i>body</i>.  The condition is an expression that is evaluated as a way to decide whether the body should run; the body is a sequence of one or more statements that would be run if the condition says it should.  So, for example, you could write the following Python script.</p>\r\n\r\n<blockquote><pre>\r\nvalue = int(input('Enter a number: '))\r\n\r\nif value &gt; 0:\r\n    print('That number is positive')\r\n\r\nprint('Goodbye!')\r\n</pre></blockquote>\r\n\r\n<p>The <b>if</b> statement begins with the word <b>if</b>.  The condition is the expression <b>value &gt; 0</b>, which returns the bool value <b>True</b> if <b>value</b> is greater than 0, or the bool value <b>False</b> if not.  Notice, too, the colon at the end of that line; that's a necessity, a way of telling Python that you're done writing the condition and are ready to begin the body.  (In general, you'll find that the top line of compound statements in Python will end with a colon.)</p>\r\n\r\n<p>The next line, where we're printing <b>That number is positive</b>, is <i>indented</i>.  That's not just a stylistic matter in Python; that's a <i>syntactic</i> one.  The line directly underneath the top line of our <b>if</b> statement needs to be indented at least one space.  (It's not a bad idea to space things uniformly, for the sake of keeping a program cleanly readable.  I'll always use four spaces for indention, which is also the default you'll see if you hit the Tab key in IDLE.)  This tells Python that the statement on this line is part of the body of the <b>if</b> statement.</p>\r\n\r\n<p>Where we say <b>print('Goodbye')</b>, we're back to the original level of indention, with the text on the line beginning in the same column as the word <b>if</b>.  This, too, is syntactic, rather just that stylistic; it's this unindention that tells Python that the body of the <b>if</b> statement is complete, and that the line <b>print('Goodbye')</b> is <i>not</i> part of the body of the <b>if</b> statement.</p>\r\n\r\n<p>Putting all of that together, here are a couple of separate runs of the Python script above.</p>\r\n\r\n<blockquote><pre>\r\nEnter a number: <b>20</b>\r\nThat number is positive\r\nGoodbye!\r\n</pre></blockquote>\r\n\r\n<blockquote><pre>\r\nEnter a number: <b>-5</b>\r\nGoodbye!\r\n</pre></blockquote>\r\n\r\n<P>Note that we'll see <b>Goodbye!</b> printed at the end, regardless of whether the number we enter is positive or not; that's because the last line, where <b>Goodbye!</b> is printed, is not part of the <b>if</b> statement &mdash; it's unconditional.</p>\r\n\r\n<p class=\"subtitle\">Truth testing and \"truthiness\"</p>\r\n\r\n<p>An <b>if</b> statement makes its primary decision by performing something called a <i>truth test</i>.  Its condition expression is evaluated, resulting in a value; that value is then tested to see if it is <i>truthy</i> or <i>falsy</i>.  (Those sound like strange words, but that's actually how Python programmers describe this mechanism.)  If the value is considered truthy, the body of the <b>if</b> statement is executed; if falsy, it's not.</p>\r\n\r\n<p>The truthiness of bool values is not particularly surprising.  <b>True</b> is truthy, while <b>False</b> is falsy.  That's what made our previous example work the way it did: <b>value &gt; 0</b> returned the bool value <b>True</b> or <b>False</b>, and if that value was <b>True</b>, the body of the <b>if</b> statement was executed and <b>That number is positive</b> would be printed.</p>\r\n\r\n<p>All other types of values in Python can be considered either truthy or falsy, as well; they don't have to be bools.  Numbers, for example, are distinguished by whether or not they're zero &mdash; with zero being considered falsy, and non-zero being considered truthy.  Strings are distinguished by whether or not they're empty &mdash; falsy if empty, true if they contain at least one character.  And so on.  So, for example, the following Python script would print <b>You said something!</b> whenever the user enters any input (as opposed to just hitting the <b>Enter</b> or <b>Return</b> key immediately).</p>\r\n\r\n<blockquote><pre>\r\nwhat = input('Say something: ')\r\n\r\nif what:\r\n    print('You said something!')\r\n</pre></blockquote>\r\n\r\n<p>In my experience, generally, I've found that relying on that behavior results in code that is more terse, but that is harder to read and understand, so I tend not to use this shortcut.  If I want to write code that depends on the length of a string being positive, I'd rather say <b>if len(s) &gt; 0</b> than just saying <b>if s</b>.  The name of the game is not to write as little code as possible.  Programs are for people as much as they're for computers, so the objective is to write a program that people can best understand; say what you mean and mean what you say, so to speak.  However, you should be aware that this is how Python works, because you will see people do things like this from time to time.</p>\r\n\r\n<p class=\"subtitle\">The \"elif\" and \"else\" clauses</p>\r\n\r\n<p>An <b>if</b> statement can have additional clauses attached to it, which specify what might happen when the condition expression at the top of the <b>if</b> statement is falsy.  These clauses are called <b>elif</b> and <b>else</b>.  You can have as many of these as you'd like, but the <b>else</b> clause (if present) must be the last one.</p>\r\n\r\n<blockquote><pre>\r\nnum = input('Enter a number: ')\r\n\r\nif num &gt; 0:\r\n    print('That number is positive')\r\nelif num &lt; 0:\r\n    print('That number is negative')\r\nelse:\r\n    print('That number is zero')\r\n</pre></blockquote>\r\n\r\n<p>The meaning of this is what you might expect, with the clauses always considered in the order listed:</p>\r\n\r\n<ul>\r\n  <li>First, we check if <b>num &gt; 0</b>.  If so, we print <b>That number is positive</b> and we're done.</li>\r\n  <li>Only if it wasn't true that <b>num &gt; 0</b>, we next try the second clause, checking if <b>num &lt; 0</b>.  If so, we print <b>That number is negative</b> and we're done.</li>\r\n  <li>Only if it wasn't true that <b>num &lt; 0</b> either, then we next try the third clause.  Since it's an <b>else</b> with no condition, we'll always run its body if we get that far, so we'd then print <b>That number is zero</b>.</li>\r\n</ul>\r\n\r\n<p>Ultimately, this script will print one of three things, depending on the user's input, but it will never print more than one of them.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Repetition using the \"while\" loop</p>\r\n\r\n<p>Conditionality is one of the few features that a programming language absolutely must have to be broadly useful.  Another is <i>repetition</i>, which is the ability to perform the same work repeatedly (e.g., a certain predetermined number of times, or until some condition is met).  We see repetition all the time in software we use.  A couple of examples follow, but there are countless more.</p>\r\n\r\n<ul>\r\n  <li>Any program with a graphical user interface uses repetition to process its input.  By far, the most common way that graphical user interfaces work is to repeatedly wait for some kind of input &mdash; a keypress, movement of the mouse, etc. &mdash; and then process it, before waiting for the next one, and so on.</li>\r\n  <li>A program that downloads a file from the Internet uses repetition to download a small chunk of the file at a time, continuing until the entire file is complete.</li>\r\n</ul>\r\n\r\n<p>So, suffice it to say, programming languages need this feature, and Python is no exception.  One way to achieve it in Python is to use a <b>while</b> loop.</p>\r\n\r\n<p>The structure of a <b>while</b> loop is somewhat similar to that of the <b>if</b> statement that we saw previously, though don't let the similarity fool you; it solves a very different kind of problem.</p>\r\n\r\n<blockquote><pre>\r\nnum = int(input('Enter a number: '))\r\n\r\nwhile num &gt; 0:\r\n    print(num)\r\n    num -= 1\r\n\r\nprint('Goodbye!')\r\n</pre></blockquote>\r\n\r\n<p>(Aside: The <b>-=</b> operator subtracts the number on the right from the value of the variable on the left.  <b>num -= 1</b>, then, means to subtract 1 from the value of <b>num</b>.  Many of the binary operators (i.e., operators that take two operands) in Python have variants like this, so you can expect to see things like <b>x += 10</b>, <b>y *= 3</b>, and so on, as we move forward.)</p>\r\n\r\n<p>How a <b>while</b> loop is different from an <b>if</b> statement is simple: An <b>if</b> statement evaluates its condition once and then, optionally, executes its body once.  A <b>while</b> loop does that same thing repeatedly.</p>\r\n\r\n<ul>\r\n  <li>First, the condition expression is evaluated for \"truthiness.\"</li>\r\n  <li>If the condition is truthy, the body of the <b>while</b> loop is executed once, then we go back to the top and do it all again.</li>\r\n  <li>If the condition is falsy, the <b>while</b> loop ends, with control flowing to the statement after the <b>while</b> loop.</li>\r\n</ul>\r\n\r\n<p>Here's one example run of the script above.</p>\r\n\r\n<blockquote><pre>\r\nEnter a number: <b>6</b>\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\nGoodbye!\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">The \"break\" statement</p>\r\n\r\n<p>Within the body of a <b>while</b> loop, you can include a <b>break</b> statement, which, if reached, terminates the <b>while</b> loop immediately, with control flowing directly to the statement after the <b>while</b> loop.  One place we'll see this is in the reading of user input, particularly when we want to check that input for validity &mdash; asking the user repeatedly until getting valid input &mdash; before accepting it and moving on.</p>\r\n\r\n<blockquote><pre>\r\nwhile True:\r\n    name = input('Enter your name: ')\r\n\r\n    if name == '':\r\n        print('Please enter a name; you entered nothing')\r\n    else:\r\n        break\r\n\r\nprint('Your name is ' + name)\r\n</pre></blockquote>\r\n\r\n<p>The use of <b>while True</b> at the top of this loop isn't as cryptic as it looks.  If a <b>while</b> loop continues running until its condition is falsy, one way to ensure that it doesn't ever end is by writing a condition that is always truthy.  There are a lot of conditions in Python that are always truthy, but <b>True</b> is the clearest way to say it, so we'll stick with that.</p>\r\n\r\n<p>Of course, we don't actually want the loop to run forever.  But we won't know if a particular loop iteration will be the last one until it's done part of its work &mdash; namely, read a line of input and see if it's empty.  By including a <b>break</b> statement in the loop, we have a way to \"bail out\" from it, but we preserve a simpler structure than the alternative of using the condition to get us out, which might look something like this instead.</p>\r\n\r\n<blockquote><pre>\r\nname = ''\r\n\r\nwhile name == '':\r\n    name = input('Enter your name: ')\r\n\r\n    if name == '':\r\n        print('Please enter a name; you entered nothing')\r\n\r\nprint('Your name is ' + name)\r\n</pre></blockquote>\r\n\r\n<p>In my estimation, this latter version is more convoluted.  First, there is the assignment of the empty string into the variable <b>name</b>, which doesn't seem to have a purpose, but is strictly there to make the <b>while</b> loop's condition truthy the first time it runs.  We then have the same expression <b>name == ''</b> in two places.  All in all, this is a more obtuse way of achieving what we could more easily achieve with <b>while True</b> and <b>break</b>.</p>\r\n\r\n<p>It's certainly not always the case that a <b>while</b> loop will be written with <b>while True</b> and <b>break</b>, but I've found this pattern for reading and validating user input to be a useful one.</p>\r\n\r\n<p class=\"subtitle\">Adding an \"else\" clause to a \"while\" loop</p>\r\n\r\n<p>Like an <b>if</b> statement, a <b>while</b> loop can also have an <b>else</b> clause (though not an <b>elif</b> clause), though its meaning is a little bit different.  An <b>else</b> clause on a <b>while</b> loop executes when the loop ends, but only if it ended normally (i.e., the condition was falsy); if, on the other hand, a <b>break</b> statement ended the loop, the <b>else</b> clause is skipped.</p>\r\n\r\n<p>This technique is surprisingly useful as a simple way of differentiating when you have a loop that can end normally or might stop early; if you put code into the <b>else</b> clause, you can be sure it will only run if the loop ended normally.  For example, the Python script below asks a user to type ten numbers, none of which can be zero, at which point it prints their sum.  But if the user types 0, an error message is shown instead, with no sum displayed.</p>\r\n\r\n<blockquote><pre>\r\ntotal = 0\r\ncount = 0\r\n\r\nprint('Please enter 10 non-zero numbers')\r\n\r\nwhile count &lt; 10:\r\n    num = int(input('Next number: '))\r\n\r\n    if num == 0:\r\n        print('That number was not zero; no sum for you!')\r\n        break\r\n    else:\r\n        total += num\r\n        count += 1\r\nelse:\r\n    print('Thank you!  The sum of these numbers was', total)\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Ranges</p>\r\n\r\n<p>It is not at all uncommon that we want to count through a sequence of integers.  If we were writing a Python program that was laying out text into a printable format such as PDF and we wanted the pages to be numbered consecutively, we'd need this ability.  If we wanted to sum the integers from 1 through 10, inclusive, we'd need this ability.  And so on.  It's certainly true that we could solve this problem by storing an integer into a variable and then incrementing it with something like <b>page_number += 1</b> repeatedly.  But there's value in taking higher-level concepts, which occur often in programs, and representing them in a simple, coherent way.  Taking a few lines of code &mdash; especially if they have to be sprinkled around in multiple places &mdash; and turning it into something that has a simple name is almost always a win; a program is almost always more readable that way, as long as the name is clearly chosen.</p>\r\n\r\n<p>So, if we want to count through a sequence of integers, rather than doing that ourselves, we can rely on a built-in type of object called a <i>range</i>, which is capable of doing that job for us.  By creating an object that represents our range, we can do things that would otherwise be difficult to do, such as passing the entire range as an argument to a function.</p>\r\n\r\n<p>Creating a range is done using the built-in function <b>range()</b>, which is actually a constructor, in the sense that we've seen them already.  How we know it's a constructor is by looking at the type of object it returns to us and realizing that its type is <b>range</b>.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>range(1, 10, 2)</b>\r\nrange(1, 10, 2)\r\n&gt;&gt;&gt; <b>type(range(1, 10, 2))</b>\r\n&lt;class 'range'&gt;\r\n</pre></blockquote>\r\n\r\n<p>A range represents not one integer, but a sequence of potentially many of them.  Ranges are described by three integers: a <i>start</i>, a <i>stop</i>, and a <i>step</i>.</p>\r\n\r\n<ul>\r\n  <li>The \"start\" is the first integer in the range.</li>\r\n  <li>The \"stop\" is the integer where the range ends.  Note that the \"stop\" is <i>not</i> inclusive &mdash; so, for example, a range with a \"stop\" of 10 would not include the integer 10.</li>\r\n  <li>The \"step\" is the difference between each integer in the range and the integer preceding it in the range.</li>\r\n</ul>\r\n\r\n<p>When we pass three arguments to <b>range()</b>, as in our example <b>range(1, 10, 2)</b> above, then the three arguments are interpreted in that order: start, then stop, then step.  So this range starts at 1, stops at 10, with a step of 2, meaning that it actually represents the integers 1, 3, 5, 7, 9.  One way to verify that we're on the right track here is to check its length, which we can do using the built-in <b>len</b> function.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>len(range(1, 10, 2))</b>\r\n5\r\n</pre></blockquote>\r\n\r\n<p>When you create a range, you don't have to specify all three of the values used to describe them.  If you pass just two arguments to <b>range()</b>, what you're specifying is the start and the stop, but the step defaults to 1.  So, for example, <b>range(1, 10)</b> would be a range starting at 1 and stopping at 10.  That range includes the integers 1, 2, 3, 4, 5, 6, 7, 8, 9, so we would expect its length to be 9.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>range(1, 10)</b>\r\nrange(1, 10)\r\n&gt;&gt;&gt; <b>len(range(1, 10))</b>\r\n9\r\n</pre></blockquote>\r\n\r\n<p>If we pass only one argument to <b>range()</b>, we're specifying only the stop value; the start defaults to 0 and the step defaults to 1.  This means that <b>range(6)</b> would have start at 0, stop at 6, and have a step of 1, meaning it would contain the integers 0, 1, 2, 3, 4, 5.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>range(6)</b>\r\nrange(0, 6)\r\n&gt;&gt;&gt; <b>len(range(6))</b>\r\n6\r\n</pre></blockquote>\r\n\r\n<p>We see, too, that the representation of a range when displayed in the Python shell always includes the start and the stop, but only includes the step if it's something other than 1.</p>\r\n\r\n<p>You may be wondering how to get the integers out of the range, though.  One way to do that is to use the <i>indexing</i> operator, which is denoted by an integer surrounded by brackets.  Each integer in the range has an <i>index</i> associated with it; the first integer has the index 0, the second integer has the index 1, and so on.  (It's not at all uncommon for \"counting\" to be done starting from 0 rather than 1 in computer science; Python is no exception.)</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>r = range(1, 10)</b>\r\n&gt;&gt;&gt; <b>len(r)</b>\r\n9\r\n&gt;&gt;&gt; <b>r[0]</b>\r\n1\r\n&gt;&gt;&gt; <b>r[1]</b>\r\n2\r\n&gt;&gt;&gt; <b>r[8]</b>\r\n9\r\n</pre></blockquote>\r\n\r\n<p>We know that this range only contains nine values, so we would expect the valid indices to run from 0 through 8.  So we'll see an error message if we try to ask for an index other than those.</p>\r\n\r\n<blockquote><pre>\r\n&gt;&gt;&gt; <b>r[9]</b>\r\nTraceback (most recent call last):\r\n  File \"&lt;pyshell#5&gt;\", line 1, in &lt;module&gt;\r\n    r[9]\r\nIndexError: range object index out of range\r\n</pre></blockquote>\r\n\r\n<p>Given that we know that we could use indexing to obtain the integers in the range, we could use a <b>while</b> loop if we wanted to use all of them.  For example, this is how we might calculate the sum of the integers in a range.</p>\r\n\r\n<blockquote><pre>\r\nr = range(1, 10)\r\nindex = 0\r\ntotal = 0\r\n\r\nwhile index < len(r):\r\n    total += r[index]\r\n    index += 1\r\n\r\nprint('The sum is', total)\r\n</pre></blockquote>\r\n\r\n<p>However, even this is somewhat unsatisfying.  What's the point of having a range object &mdash; something that's intended to make it easier to work with a sequence of integers &mdash; if we have to manually manage indices like this?  It turns out that there's a simpler way to approach this.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Iteration using the \"for\" loop</p>\r\n\r\n<p>Given an object that contains a <i>sequence</i> of other objects, a <b>for</b> loop is used to iterate through that sequence, with the loop's body executing once per each of its objects.  A sequence is actually a somewhat technical term in Python &mdash; and we'll explore that in some detail in ICS 33 &mdash; but you can think of it, for now, as being an object that contains a collection of other objects that are stored within it.  Ranges certainly fit that description: They contain a collection of integers.  So we should be able to use a <b>for</b> loop to iterate through a range.</p>\r\n\r\n<p>Syntactically, what we need to say are three things:</p>\r\n\r\n<ul>\r\n  <li>What sequence should we be iterating?</li>\r\n  <li>What is the name of the variable that will be used to store each of the obejcts in the sequence, one at a time?</li>\r\n  <li>What statements make up the body?  In other words, what should we do with each of those objects?</li>\r\n</ul>\r\n\r\n<p>How we say those things is demonstrated below, a much simpler way to calculate the sum of the integers in a range than the version that was written above using a <b>while</b> loop.</p>\r\n\r\n<blockquote><pre>\r\ntotal = 0\r\n\r\nfor num in range(1, 10):\r\n    total += num\r\n\r\nprint('The sum is', total)\r\n</pre></blockquote>\r\n\r\n<p>This gives us a handy way of writing a loop that runs a predetermined number of times &mdash; by looping over a range with the appropriate number of integers in it, even if we don't care so much what the integers are.  For example, it we wanted to print <b>Boo</b> 15 times, we might write this:</p>\r\n\r\n<blockquote><pre>\r\nfor i in range(15):\r\n    print('Boo')\r\n</pre></blockquote>\r\n\r\n<p>As we'll see later, ranges aren't the only kind of object that can be treated as a sequence; a <b>for</b> loop will also allow us to iterate through the elements stored within a data structure, for example.  Our general goal will be to use the <b>for</b> loop when we can, and a <b>while</b> loop when we must.</p>\r\n\r\n<p class=\"subtitle\">A few additional details</p>\r\n\r\n<p>Like <b>while</b> loops, <b>for</b> loops permit the use of the <b>break</b> statement within their bodies, which would have a similar effect: stopping the loop immediately, with control flowing to the statement immediately after the loop.</p>\r\n\r\n<p>Also like <b>while</b> loops, <b>for</b> loops can have an <b>else</b> clause, which is executed only if the loop ends normally.  What it means to \"end normally\" is that the entire sequence is iterated, as opposed to reaching a <b>break</b> statement that ends the loop early.</p>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}