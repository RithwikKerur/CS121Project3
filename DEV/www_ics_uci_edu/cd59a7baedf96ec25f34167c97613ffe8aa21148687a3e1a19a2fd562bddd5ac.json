{"url": "https://www.ics.uci.edu/~ejw/authoring/collection/dt/conf_call_oct_6_98.txt", "content": "Advanced Collections Conference Call\nOctober 6, 1998\n\nMinutes taken by Jim Davis (first part) and Judy Slein (second part).\n\nPresent: Roy Fielding, Jim Davis, Judy Slein, Jim Whitehead, Alan Babich,\nJohn Stracke, Jim Amsden\n\nAgenda\n\nJudy's list of issues (from email)\n\n1. Optional backpointers\n2. Terminology (direct/indirect or something else)\n3. Which methods get passed through for direct references\n4. \"There should be a choice about whether deleting the target of a direct\nreference deletes all (direct) references\" (Roy's, I think)\n\n1. Backpointers:\n\nWe agree that the list has reached rough consensus that it is okay to\ndefine the backpointer property as an optional property.\n\n2. Terminology:\n\nWe will try using \"direct and redirect\" instead of \"direct\" and \"indirect\"\n\n3. What methods get passed?\n\nAre \"direct references\" resources?  This is a difficult philosophical issue.\n\nWhen a reference is a member of a collection, and one does a PROPFIND\non the collection, there won't be any way to distinguish a reference\nfrom a 'real' resource.\n\nIt would be good to state the rationale for why DELETE, COPY, and MOVE\ndon't pass through.  If DELETE doesn't MOVE can't, because MOVE is a\n\"macro\".  DELETE doesn't, because deleting the reference obtains the\ndesired new state (the resource no longer appears in the collection),\nand deleting the target as well would be unnecessary extra work.\nWhat about COPY?\n\nThe purpose of references is to have secondary 'configurations'\nwithout having to worry about making copies that can get out of sync.\nDELETE, COPY, and MOVE affect the secondary 'configuration'.\n\nWe agree on the three methods\n\n4. \"There should be a choice about whether deleting the target of a direct\nreference deletes all (direct) references\"\n\nWe agreed that this behavior must be optional, because while it's\npretty easy to implement direct references, it not easy to implement\nback pointers or the semantics of deleting references when target is\ndeleted.\n\nIssue: must define the behavior if the target of a direct reference\nhas been deleted?\n\nIssue: \n\nShould the client be able to request creation of a reference whose\nreferential integrity is not enforced?\n  Counter argument: few if any servers will implement both choices\n  Putting in the choice complicates the protocol for no benefit.\n    Counter-counter argument: Some DAV servers currently under development\n      support both types of integrity.\n\nThe use case (Fielding) is to be able to create a reference, have the\ntarget go away, have the target get recreated, then have the reference\nwork again.  There is some skepticism about the reasonableness of this case.\n\nShould a client be able to choose when DELETEing a target to not\nenforce referential integrity?\n  No, because this requires all clients to be correct.\n\nIt could be that once we work out the behavior of references whose targets\nhave been deleted, Roy's case won't be workable for other reasons.  \n\n{Ed: the notetaker changed to Judy Slein at this point}\n\nIf we decide to support a client request for referential integrity / no\nreferential integrity, it should be applied when a reference is created.\n\nSemantics of Dangling References\n\nPROPFIND on a collection: 207 Multistatus, with a 404 Not Found as the\nstatus for the dangling reference.\nGET on a dangling reference: 404 Not Found + Ref-Type header\nPROPFIND for a single property on a dangling reference: needs more thought\nPROPPATCH on a dangling reference: 404 Not Found, so in this case there is\nno distinction between the case where the reference is not there and the\ncase where it's a dangling reference.  Is this ok? \nPUT on a dangling reference succeeds.\n\nThere needs to be more discussion on the semantics of dangling references.\n\nWe will take back to the list the issue of whether clients need to have a\nchoice about whether references will be deleted when their target is\ndeleted.\n\nJim Amsden protested against the conclusion that there is consensus that\noptional backpointers are ok.  He will send another note to the list on this\nissue.  \n\nAgainst backpointers: WebDAV should define only properties that are needed\nfor the protocol to operate.\n\nCounterargument: There is a requirement to be able to navigate upward from a\nresource that referenced, to find out what collections it is referenced\nfrom.  The DAV:references property satisfies this requirement.\n\nProposal: Don't put optional backpointers into the Advanced Collections\nspec, but instead write an informational rfc that recommends the\nDAV:references property as the way to provide interoperable backpointers.\nNo decision.\n\n*** Meeting Adjourned ***", "encoding": "ascii"}