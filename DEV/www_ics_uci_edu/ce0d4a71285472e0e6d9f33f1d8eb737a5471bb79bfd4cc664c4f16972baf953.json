{"url": "https://www.ics.uci.edu/~kay/courses/h22/hw/hw7.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Saturday, March 1, 2003 5:23 PM\">\n<TITLE>Seventh Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D734C06E\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 2, CS2, assignment, performance measurement\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment involving measuring and analyzing the performance of alternative search algorithms for ICS H22, an honors second-quarter course in computer science in Information and Computer Science, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2000, 2003 by David G. Kay.  All rights reserved.\">\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<A NAME=\"_top\"></A>\n<P>\n<IMG SRC=\"Seventh_Homework_files/Sidebar_123.gif\" WIDTH=575 HEIGHT=77>\n<BR>\n<FONT FACE=\"AGaramond\" SIZE=4> &#160; <A NAME=\"_14_30\"></A></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>This assignment is due on Monday, March 3.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a)</B> Code up Alex Thornton&#39;s Project\n#5 from ICS 22, available on the web at </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.ics.uci.edu/~thornton/ics22/LabManual/GoneToTheMovies/\">http://www.ics.uci.edu/~thornton/ics22/LabManual/GoneToTheMovies/</A></FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n This project lets you write a simulator of people standing in line at a\nmovie theater.  This is a specific instance of a situation that comes up\nfrequently, not just in the real world but also in computer systems.  Computer\nnetworks, in particular, consist in some sense of client requests (like\nyour browser requesting a web page or your computer sending a document to\na shared printer) and servers satisfying them.  When the server can&#39;t\nsatisfy each request immediately, the waiting requests are typically queued\nup.  Determining the overall performance of a network (how long do requests\nhave to wait, how many can be satisfied per minute) is a crucial task, since\ndecisions about the size and number of servers and the necessary bandwidth\ndepend on that analysis (and on a more practical level, if your web site\nmakes visitors wait annoyingly and your competitor&#39;s site serves them\nquickly, your competitor will receive more traffic, be more successful,\nand have a better chance of being bought out for $100 million by AOL).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>This project analyzes the performance of a\nqueueing system experimentally, by simulating it.  Queueing system performance\ncan also be analyzed mathematically, which is the focus of a subdiscipline\nof computer science called queueing theory.  Take just a second to reflect\non the differences between experimental and mathematical analysis:  What\nare the advantages and disadvantages of each?</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Of course you must test your code thoroughly,\nbut you are not required to use JUnit.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>There are more design decisions for you to\nmake in this program than in the previous ones.  It&#39;s a wise idea to\nattend section early in the project, to discuss various approaches and make\nsure you&#39;re on the right track.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b)</B>  For a little extra credit, make\nyour simulation more realistic by accommodating some variability.  But before\nyou start, save a completed, correct copy of your required version and make\nany extra credit enhancements on a fresh copy.  You&#39;ll turn in the required\nand extra credit versions separately.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>We all know that not every transaction (at\na ticket window, in the supermarket, or on the Web) takes the same amount\nof time.  Instead, there&#39;s a range.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Change your program so that instead of a fixed\ntransaction time for each window, the user can specify a minimum and a maximum\ntransaction time, with the program choosing a value at random from that\nrange.  (Look up </FONT><FONT FACE=\"Courier New\">java.util.Random</FONT><FONT FACE=\"AGaramond\" SIZE=4>.)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>You could also generate customers at random\nfor an even more realistic simulation.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c)</B>  Continue to think about your optional\nGUI-building project, part <B>(d)</B> of the Sixth Homework.  It will be\ndue in about a week and a half.  You may build a GUI onto the movie theater\nsimulator if you like.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>What to turn in:</B>  Turn in your Java\nfiles via Checkmate.</FONT></P>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Written by David G. Kay, Winter 2003, to build\non Alex Thornton&#39;s &quot;Gone to the Movies,&quot; an ICS 22 project.</FONT></P>\n<BR CLEAR=ALL>\n</BODY>\n</HTML>\n", "encoding": "ascii"}