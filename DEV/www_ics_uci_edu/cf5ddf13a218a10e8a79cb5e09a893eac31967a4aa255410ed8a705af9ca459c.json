{"url": "https://www.ics.uci.edu/~eppstein/numth/egypt/greed.html", "content": "<!-- This document automatically created using nb2html -->\n<!--         nb2html is Copyright T.D.Robb 1994        -->\n<H1><CENTER>\nAlgorithms for Egyptian Fractions\n</CENTER></H1>\n<P>\n<HR><H2><IMG SRC=\"mmaSection.gif\" ALT=\"o\">\nReverse Greedy Methods\n</H2>\n<P>\n<H3><IMG SRC=\"mmaSubSection.gif\" ALT=\"+\">\nThe Basic Reverse Greedy Method\n</H3>\n<P>\nThe idea behind this algorithm (due to K.S. Brown in an email forwarded to me by Milo Gardner) is to generate the Egyptian fraction in \"reverse\" order, from larger denominators to smaller.  At each step, we expand our fraction x/y = x'/y' + 1/u in an attempt to make the new denominator y' as small as possible.  We always know y' &lt; y is possible from the continued fraction method.  In general this method reduces the denominator faster than continued fractions and hopefully produces fewer terms.\n<P>\nThe basic idea is to first choose d=xy'-x'y, then solve for y' and x'.  Some analysis simplifies the search for d.  First, suppose some prime p divides d and doesn't divide y.  Then since u=yy'/d, we know that p divides y'.  Further, since x'=(xy'-d)/y, p divides x' and x'/y' is not in least terms.  We can ignore such solutions.  Similarly, if p divides y exactly c times, and p divides d 2c+k times, we know that p^(c+k) divides y' and p^k divides x'.  So it is always safe to assume d is a divisor of y^2.  Conversely, every divisor of y^2 leads to a unit fraction 1/u, but for some of them x'/y' is negative or y' is zero.  We filter those divisors to include only those d leading to a valid fraction x'/y'.\n<BLOCKQUOTE><PRE><B>\nERGChoices[x_,y_] :=\n\tSelect[Divisors[y*y],\n\t\t   ((# * PowerMod[x,-1,y]) ~Mod~ y) * x &gt; # &amp;];\n    \nEgyptReverseGreedy[q_Integer] := If[q==0,{},{q}];\nEgyptReverseGreedy[Rational[x_,y_]] :=\n\tIf[x==1,{x/y},\n\t   EgyptPairList[Append[EgyptReverseGreedy[x/y-#],#]]&amp; @\n\t   ((# * x) ~Mod~ y / (# * y) &amp; @\n\t   Min[(ERGChoices[x,y]*PowerMod[x,-1,y]) ~Mod~ y])];\n</B></PRE></BLOCKQUOTE>\n<P>\n<A HREF=\"conflict.html#pair\">EgyptPairList</A> is needed to avoid duplicate fractions; for instance otherwise this method would produce 1/11+1/231+1/231 for 23/231.  Because of this, it is hard to bound the denominators in the representations this method produces.  The number of terms is clearly O[y]; it produces fewer terms in practice but it is unclear whether one can prove bounds on the number of terms that are even as good as the continued fraction method.\n<BLOCKQUOTE><PRE><B>\nEgyptReverseGreedy[31/311]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1   1    1     1\n{--, --, ---, -----}\n 16  28  688  93611\n</PRE></BLOCKQUOTE>\n<H3><IMG SRC=\"mmaSubSection.gif\" ALT=\"+\">\nSmall-Unit Reverse Greedy\n</H3>\n<P>\nOne simple variation on the reverse greedy strategy is to choose the unit fraction with smallest denominator to remove at each step, among those unit fractions reducing the denominator of the remainder.\n<BLOCKQUOTE><PRE><B>\nERGFrac[x_,y_,d_] :=\n\td/((d*PowerMod[x,-1,y]) ~Mod~ y)\n\nEgyptSmallUnit[q_Integer] := If[q==0,{},{q}];\nEgyptSmallUnit[Rational[x_,y_]] :=\n\tIf[x==1,{x/y},\n\tEgyptPairList[Append[EgyptSmallUnit[(x-#)/y],#/y]]&amp; @\n    Max[ERGFrac[x,y,#]&amp; /@ ERGChoices[x,y]]];\n</B></PRE></BLOCKQUOTE>\n<P>\nThis leads to representations with smaller denominators, but also may reduce the number of terms.\n<BLOCKQUOTE><PRE><B>\nEgyptReverseGreedy[10/143]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1    1    1     1\n{--, ---, ----, ----}\n 15  435  1247  6149\n</PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptSmallUnit[10/143]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1   1   1   1\n{--, --, --, --}\n 36  60  65  99\n</PRE></BLOCKQUOTE>\n<P>\n<A NAME=\"smallden\"><H3><IMG SRC=\"mmaSubSection.gif\" ALT=\"+\">\nSmall Denominator Reverse Greedy\n</H3>\n<P>\n</A>One drawback of the small unit method (as a way of generating fractions with small denominators) is that it can sometimes choose a unit fraction very close to x/y, leaving a relatively small remainder.  It seems more appropriate in this case to balance the two denominators of u and y'.\n<BLOCKQUOTE><PRE><B>\nArgMin[l_,f_] := (Position[#,Min[#]]&amp; @ (f /@ l))[[1,1]];\n\nERGMaxDen[x_,y_,l_] :=\n\tl[[ ArgMin[l,Max[Denominator[#/y],\n\t\t\t\t\t Denominator[(x-#)/y]]&amp;] ]];\n\t\nEgyptSmallDen[q_Integer] := If[q==0,{},{q}];\nEgyptSmallDen[Rational[x_,y_]] :=\n\tIf[x==1,{x/y},\n\tEgyptPairList[Append[EgyptSmallDen[(x-#)/y],#/y]]&amp; @\n\tERGMaxDen[x,y,ERGFrac[x,y,#]&amp; /@ ERGChoices[x,y]]];\n</B></PRE></BLOCKQUOTE>\n<P>\nThis can often do a good job of keeping all denominators small.\n<BLOCKQUOTE><PRE><B>\nEgyptSmallUnit[17/180]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1   1\n{--, --}\n 12  90\n</PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptSmallDen[17/180]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1   1\n{--, --}\n 15  36\n</PRE></BLOCKQUOTE>\n<P>\n<A NAME=\"smallnum\"><H3><IMG SRC=\"mmaSubSection.gif\" ALT=\"+\">\nSmall Numerator Reverse Greedy\n</H3>\n<P>\n</A>This idea combines the reverse greedy method (which reduces denominators) with the standard greedy method (which reduces numerators).  The idea is simply to choose, among all the choices of x/y=x'/y'+1/u, the one with the smallest value of x'.  To break ties we choose the smallest value of u since that seems to lead to better representations.\n<BLOCKQUOTE><PRE><B>\nERGGoodNum[x_,y_,l_] :=\n\tl[[ ArgMin[l,Numerator[(x-#)/y] - #/y &amp;] ]];\n\t\nEgyptSmallNum[q_Integer] := If[q==0,{},{q}];\nEgyptSmallNum[Rational[x_,y_]] :=\n\tIf[x==1,{x/y},\n\tEgyptPairList[Append[EgyptSmallNum[(x-#)/y],#/y]]&amp; @\n\tERGGoodNum[x,y,ERGFrac[x,y,#]&amp; /@ ERGChoices[x,y]]];\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptSmallNum[10/143]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1   1    1\n{--, --, ---}\n 22  65  110\n</PRE></BLOCKQUOTE>\n<H3><IMG SRC=\"mmaSubSection.gif\" ALT=\"+\">\nBig Divisor Reverse Greedy\n</H3>\n<P>\nAnother variant of the reverse greedy method simply chooses the largest value in ERGChoices.  Heuristically this is likely to lead to much cancellation and a unit fraction with small denominator.\n<BLOCKQUOTE><PRE><B>\nEgyptBigDiv[q_Integer] := If[q==0,{},{q}];\nEgyptBigDiv[Rational[x_,y_]] :=\n\tIf[x==1,{x/y},\n\tEgyptPairList[Append[EgyptSmallNum[(x-#)/y],#/y]]&amp; @\n\tERGFrac[x,y,Last[ERGChoices[x,y]]]];\n</B></PRE></BLOCKQUOTE>\n<P>\nThis is often the same as EgyptSmallUnit, but occasionally differs, and even sometimes results in smaller denominators.\n<BLOCKQUOTE><PRE><B>\nEgyptReverseGreedy[23/231]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1    1     1\n{--, ---, -----}\n 11  116  26796\n</PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptSmallUnit[23/231]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1   1   1    1\n{--, --, --, ---}\n 21  40  56  110\n</PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptSmallNum[23/231]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1   1    1\n{--, --, ---}\n 15  35  231\n</PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptSmallDen[23/231]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1   1   1\n{--, --, --}\n 22  33  42\n</PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE><B>\nEgyptBigDiv[23/231]\n</B></PRE></BLOCKQUOTE>\n<BLOCKQUOTE><PRE>\n 1   1   1\n{--, --, --}\n 22  33  42\n</PRE></BLOCKQUOTE>\n<P>\n<P><HR><P><A HREF=\"http://www.ics.uci.edu/~eppstein/numth/egypt/\">Egyptian Fractions,\n</A><A HREF=\"http://www.ics.uci.edu/~eppstein/numth/\">Number Theory,\n</A><A HREF=\"http://www.ics.uci.edu/~eppstein/\">David Eppstein,\n</A><A HREF=\"http://www.ics.uci.edu/\">ICS,\n</A><A HREF=\"http://www.uci.edu/\">UC Irvine\n</A><P><SMALL>Formatted by\n<A HREF=\"http://www.hallym.ac.kr/~physics/education/Math/tdr/nbks/sourceCode.html\">nb2html</A> and\n<A HREF=\"http://www.ics.uci.edu/~eppstein/pubs/filter.html\">filter</A>.\n<!--#config timefmt=\"%d %h %Y, %T %Z\" -->Last update:\n<!--#flastmod file=\"egypt.ma\" -->.\n</SMALL>", "encoding": "ascii"}