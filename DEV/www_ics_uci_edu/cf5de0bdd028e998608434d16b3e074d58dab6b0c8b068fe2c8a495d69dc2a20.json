{"url": "https://www.ics.uci.edu/~thornton/inf122/CodeExamples/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\" />\n\n<title>Informatics 122 Winter 2013, Code Examples</title>\n\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nInformatics 122 Winter 2013 |\n<a href=\"../index.html\">News</a> |\n<a href=\"../CourseReference.html\">Course Reference</a> |\n<a href=\"../Schedule.html\">Schedule</a> |\n<a href=\"../ProjectGuide\">Project Guide</a> |\n<a href=\"../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>Informatics 122 Winter 2013<br />\n   Code Examples</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Code examples, from lecture and otherwise</p>\n\n<p>Over the course of the quarter, I'll be providing commented code examples for you.  You are not permitted to copy and paste any of this code into your own projects.  These examples are mostly to give you clean and well-documented examples of some of the things we cover in lecture (and possibly a few things that we don't, time permitting), so that you can be free in lecture to avoid trying to take detailed notes when we're writing code together, instead concentrating on understanding the process and the bigger-picture concepts at work.</p>\n\n<p>These examples are mostly posted as Git repositories containing Eclipse projects, where the code is in the <b>src</b> folder.  You can download the repositories in one of two ways:</p>\n\n<ul>\n  <li>Via the Git command line tools, using the command <b>git clone</b>.  For each repository, the <b>git clone</b> command is provided.  Run that command from the command line in whatever directory you want the repository to be downloaded into.</li>\n  <li>Directly from within an Eclipse workspace using EGit.  Instructions for that are provided below.</li>\n</ul>\n\n<table class=\"normal\">\n  <tr class=\"top\">\n    <td>Lecture Date(s)</td>\n    <td>Description / Command to Download</td>\n  </tr>\n  <tr>\n    <td>Th 1/24</td>\n    <td>\n      A Git repository detailing the step-by-step progress through my implementation of last year's Assignment #1 user interface, which closely mirrors what you're working on in <a href=\"../ProjectGuide/Project2\">Project #2</a>, except that it contains some extra commands that are not included this year.<br />\n      <b>git clone http://www.ics.uci.edu/~thornton/inf122/git/Assignment1UI.git</b>\n    </td>  \n  </tr>\n  <tr>\n    <td>Tu 1/29<br />\n        Th 1/31<br />\n        Tu 2/5</td>\n    <td>\n      The examples from lecture related to the use of design patterns<br />\n      <b>git clone http://www.ics.uci.edu/~thornton/inf122/git/PatternsExamples.git</b>\n    </td>\n  </tr>\n  <tr>\n    <td>Th 2/7</td>\n    <td>\n      The example from lecture related to the use of dependency injection (and, specifically, constructor-based injection of dependencies)<br />\n      <b>git clone http://www.ics.uci.edu/~thornton/inf122/git/DependencyInjection.git</b>\n    </td>\n  </tr>\n  <tr>\n    <td>Tu 2/12</td>\n    <td><a href=\"BitLy.zip\">Using the bit.ly API from Java</a></td>\n  </tr>\n  <tr>\n    <td>Tu 2/19</td>\n    <td>\n      Detecting code smells in a design, and what to do about it<br />\n      <b>git clone http://www.ics.uci.edu/~thornton/inf122/git/CodeSmellsAndRefactoring.git</b>\n    </td>\n  </tr>\n  <tr>\n    <td>Th 2/21</td>\n    <td>\n      Building fluent APIs (or, why writing a method called <b>is</b> isn't crazy)<br />\n      <b>git clone http://www.ics.uci.edu/~thornton/inf122/git/FluentAPIs.git</b>\n    </td>\n  </tr>\n</table>\n\n<br />\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Importing a Git repository into an Eclipse workspace using EGit</p>\n\n<p>Code examples in this course are provided as Git repositories, which will allow you not only to see the final product, but also the step-by-step process by they were developed &mdash; warts and all!  As this course is largely about the process of discovering a good design, being able to see that whole process is much more instructive than only seeing where we ended up.</p>\n\n<p>While you can certainly use only the <b>git</b> command line tool to look through our code examples &mdash; by using <b>git checkout</b> to switch from one commit to another &mdash; a simpler approach is to use EGit within Eclipse, which provides graphical tools for navigating a repository's history.  You can checkout individual commits and your entire Eclipse project will change to look just like it did at that point in time; this is a great way to explore a code example step by step.</p>\n\n<p>The first thing to overcome, however, is importing a Git repository from this web site into an Eclipse workspace using EGit.  Instructions for that follow.</p>\n\n<ul>\n  <li>Open the Eclipse workspace where you want the code example to be imported.</li>\n  <li>Right-click in a blank area of Package Explorer and choose <b>Import...</b>.</li>\n  <li>A <b>\"Select\"</b> dialog will pop up, allowing you to select what kind of project you want to import.  A tree of options is displayed.  Open <b>Git</b> and select <b>Projects from Git</b>, then click <b>Next &gt;</b>.</li>\n  <li>(At this point, on Windows, you might get a warning about the HOME environment variable.  You can safely ignore this.)</li>\n  <li>Next, the <b>Select a Git Repository</b> dialog will pop up, where you can choose the repository you'd like to import.  The first step is to download the repository, so click the <b>Clone...</b> button.\n    <ul>\n      <li>The <b>Source Git Repository</b> dialog pops up.  Fill in these values, then click <b>Next &gt;</b>:\n        <ul>\n          <li><b>URI</b>: URI for the Git repository (e.g., <b>http://www.ics.uci.edu/~thornton/inf122/git/Assignment1UI.git</b>).</li>\n          <li><b>Protocol</b>: From the dropdown list, select <b>http</b>.</li>\n          <li><b>Port</b>, <b>User</b>, and <b>Password</b>: Leave these fields blank.</li>\n          <li><b>Store in Secure Store</b>: Leave this box unchecked</li>\n        </ul>\n      </li>\n      <li>Next, the <b>Branch Selection</b> dialog will ask what branch you want to clone.  The right choice here, for these code examples, will always be <b>master</b>, so check that and click <b>Next &gt;</b>.</li>\n      <li>Finally, fill in the <b>Directory</b> where you want the repository to be downloaded to your machine, choose <b>master</b> as the <b>Initial Branch</b>, and click <b>Finish</b>.</li>\n      <li>Now the Git repository should have been downloaded to your machine, so the next order of business is to import it into your Eclipse workspace.</li>\n    </ul>\n  </li>\n  <li>Back in the <b>Select Git Repository</b> dialog, the repository you downloaded should now be included in the list.  Select it and click <b>Next &gt;</b>, then continue clicking <b>Next &gt;</b> until you can click <b>Finish</b>, then click <b>Finish</b>, accepting all defaults along the way.</li>\n  <li>You should now see an Eclipse project representing the downloaded repository.  You're ready to explore the code example!</li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Exploring a repository's history in Eclipse using EGit</p>\n\n<p>The chief benefit of distributing code examples as Git repositories is that it allows you to see the progression of work that was done &mdash; how the code looked at various stages, commit comments that explain why we did what we did.  Exploring the <i>history</i> of a repository in EGit is simple, but there are a couple of tricks that are worth playing.</p>\n\n<p>With your Eclipse workspace open and an Eclipse project that is associated with a Git repository already created &mdash; see the steps above &mdash; right-click on the Eclipse project (e.g., <b>Assignment1UI</b>), select <b>Team</b>, then <b>Show in History</b>.  This brings up the <b>History</b> view, which allows you to view the history of a repository.  I find it handy to move the History view into the same area of the window as my editor, so it is large enough that I can find my way around, but you can put it wherever you want.</p>\n\n<p>Once you've got the History view opened, make sure the toolbar button <b>Show All Branches and Tags</b> &mdash; a tooltip pops up for each button, so you can use those to find the right one &mdash; is highlighted.  This will allow you to see the full history even as you traverse through it.</p>\n\n<p>Selecting individual commits in the list at the top of the History view will show you what files were updated in the selected commit and what the commit comment was.  Right-clicking on a file in the list of updated files reveals a menu with the useful option <b>Compare with Version in Ancestor</b>, which will show you in a fairly intuitive, graphical way how a file was changed in the selected commit.</p>\n\n<p>Right-clicking a commit and selecting <b>Checkout</b> &mdash; equivalent to the <b>git checkout</b> command from the command line &mdash; will update your Eclipse project accordingly, so that it will appear to contain the files as they appeared in whatever commit you checked out.  Note that this will leave you in a <i>detached HEAD</i> state, just as it would from the command line, so you'll be able to view code but will not be able to commit changes to it.</p>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}