{"url": "https://www.ics.uci.edu/~ardalan/courses/os/project_setup.html", "content": "<!DOCTYPE html>\n<html class=\"no-js\" lang=\"en\">\n<head>\n    <meta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <title>Ardalan Amiri Sani</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <link rel=\"stylesheet\" href=\"css/style.css\">\n    <link rel=\"shortcut icon\" href=\"img/favicon.ico\">\n</head>\n\n<body data-gr-c-s-loaded=\"true\">\n<div id=\"main_body\">\n    <table width=\"100%\" height=125>\n        <tr>\n            <td>\n                <h1>CompSci 143A: Principles of Operating System</h1>\n                <p>\n                    <b>Instructor:</b> <a href=\"http://www.ics.uci.edu/~ardalan/\">Ardalan Amiri Sani</a><br/>\n                </p>\n            </td>\n        </tr>\n    </table>\n\n    <div id=\"navigation\">\n        <ul>\n            <li><a href=\"index.html\">Home</a></li>\n            <li><a href=\"lectures.html\">Lectures</a></li>\n            <li><a href=\"homework.html\">Homework</a></li>\n            <li><a href=\"discussions.html\">Discussions</a></li>\n            <li><a href=\"reading.html\">Reading</a></li>\n            <li><a href=\"project.html\">Project</a></li>\n        </ul>\n    </div>\n\n    <h2 id=\"pintos-project-setup\">Pintos Project Setup</h2>\n\n    <p>To develop the Pintos projects, you'll need two essential sets of tools:</p>\n    <ul>\n        <li>80x86 cross-compiler toolchain for 32-bit architecture including a C compiler,\n            assembler, linker, and debugger.\n        </li>\n        <li>x86 emulator, QEMU or Bochs</li>\n    </ul>\n\n    <p>Your Openlab accounts have all the tools needed to build Pintos and the Bochs emulator.\n       Here are the instructions to do this</p>\n\n    <!-- step 1 -->\n    <p> 1. Create \u201cPintos\u201d directory in home directory:\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ mkdir Pintos</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <!-- step 2 -->\n    <p> 2. Get pintos from git in this directory:\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ cd Pintos\n$ git clone https://github.com/trusslab/pintos.git</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <!-- step 3 -->\n    <p> 3. Create \u201cbochs\u201d directory in \u201cPintos\u201d directory:\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ mkdir bochs</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <!-- step 4 -->\n    <p> 4. Go into pintos/src/misc/: \n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ cd pintos/src/misc/</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <!-- step 5 -->\n    <p> 5. To build and install bochs, execute::\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ ./bochs-2.6.2-build.sh ~/Pintos/bochs</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <!-- step 6 -->\n    <p> 6. Create \u201cbin\u201d and \u201cmisc\u201d directories inside \u201cpintos\u201d directory::\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ cd ~/Pintos/pintos/\n$ mkdir bin\n$ mkdir misc</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <!-- step 7 -->\n    <p> 7. Build utils:\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ cd ~/Pintos/pintos/src/utils/\n$ make</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <!-- step 8 -->\n    <p> 8. Copy/install files:\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ cp backtrace pintos Pintos.pm pintos-gdb pintos-set-cmdline pintos-mkdisk setitimer-helper squish-pty squish-unix ~/Pintos/pintos/bin/\n$ cp ~/Pintos/pintos/src/misc/gdb-macros ~/Pintos/pintos/misc/</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <!-- step 9 -->\n    <p> 9. Update path. add the following lines to the ~/.bashrc file, e.g., using the vim text editor ($ vim ~/.bashrc):\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>export PATH=$PATH:~/Pintos/pintos/bin/\nexport PATH=$PATH:~/Pintos/bochs/bin/</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n    <!-- step 10 -->\n    <p> 10. Reload ~/.bashrc:\n    </p>\n    <table>\n        <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td class=\"example\"><pre>$ source ~/.bashrc</pre>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n\n\n    <p>Besides the lab machines, you may want to work on the projects on your own machines to be more\n        productive.\n\tIf you have a Linux distrobution OS (e.g., Ubuntu), you can use the instructions above for your own machine too.\n\tIf you have successfully followed the instructions so far, you do not need to continue.\n\t\n    <p>The rest of this page contains more instructions to help you with the setup of the core development\n        environment needed for Pintos on your own machines. They are intended for Unix and\n        Mac OS machines. If you are running Windows, we recommend you to run a virtual machine with Linux\n        or you will have to setup <a href=\"http://www.cygwin.com/\">Cygwin</a> first. This guide, and\n        the course in general, assumes you are familiar with Unix commands.</p>\n\n    <h3 id=\"compiler-toolchain\">Compiler toolchain</h3>\n\n    <p>The compiler toolchain are a collection of tools that turns source code into\n        executable binaries for a target architecture. Pintos is written in C and\n        x86 assembly, and runs on 32-bit 80x86 machines. So we will need the C compiler (<code\n                class=\"highlighter-rouge\">gcc</code>),\n        assembler (<code class=\"highlighter-rouge\">as</code>), linker (<code\n                class=\"highlighter-rouge\">ld</code>)\n        and debugger (<code class=\"highlighter-rouge\">gdb</code>).</p>\n\n    <p>If you are using a Linux machine, it is likely equipped with the compiler toolchain already.\n        But it should support 32-bit x86 architecture. A quick test of the support is to run\n        <code class=\"highlighter-rouge\">objdump -i | grep elf32-i386</code> in the terminal. If it returns\n        matching lines, your\n        system\u2019s default tool chain supports the target <em class=\"text-success\">so you can skip this\n            section</em>.\n        Otherwise, you will need to build the toolchain from source. If you are using MacOS,\n        you have to build the toolchain from source because MacOS\u2019s object file format is\n        not ELF that we need (and the <code class=\"highlighter-rouge\">objdump -i</code> test won\u2019t work).\n    </p>\n\n    <p>When you are building the toolchain from source, to distinguish the new toolchain\n        from your system\u2019s default one, you should add a <code class=\"highlighter-rouge\">i386-elf-</code>\n        prefix\n        to the build\n        target, <em>e.g.</em>, <code class=\"highlighter-rouge\">i386-elf-gcc</code>, <code\n                class=\"highlighter-rouge\">i386-elf-as</code>.</p>\n\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <strong>Note</strong>\n        </div>\n        <div class=\"panel-body\">\n            <b>We've provided a script (<code\n                    class=\"highlighter-rouge\">pintos/src/misc/toolchain-build.sh</code>)\n                that automates the following building instructions. So you can just run the script and\n                modify your PATH setting after the build finishes. The script has been tested on\n                recent version of Ubuntu, Mac OS and Fedora.</b>\n        </div>\n    </div>\n\n    <ul>\n        <li><strong>Prerequisite</strong>:\n            <ul>\n                <li>standard build tools including <code class=\"highlighter-rouge\">make</code>, <code\n                        class=\"highlighter-rouge\">gcc</code>, etc.. For Ubuntu, they are the\n                    <code class=\"highlighter-rouge\">build-essential</code> package.\n                </li>\n                <li>in building GDB, you may encounter errors due to missing the ncurses and textinfo\n                    libraries. For Ubuntu, you can install them with <code class=\"highlighter-rouge\">sudo\n                        apt-get install libncurses5-dev texinfo</code>.\n                </li>\n            </ul>\n        </li>\n        <li>Directory and environment variables:\n            First, create a setup directory (e.g., <code class=\"highlighter-rouge\">~/318/toolchain</code>)\n            and\n            subdirectories that\n            look like this:\n            <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>/path/to/setup\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 x86_64\n\u2514\u2500\u2500 src\n</code></pre>\n            </div>\n\n            <p>Then, set the environment variables (remember to replace <code\n                    class=\"highlighter-rouge\">/path/to/setup</code>\n                with the\n                <em>full path</em> to the actual setup directory you\u2019ve created, e.g., <code\n                        class=\"highlighter-rouge\">SWD=/home/ryan/318/toolchain</code>).</p>\n            <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code><span\n                    class=\"gp\">$ </span><span\n                    class=\"nv\">SWD</span><span class=\"o\">=</span>/path/to/setup\n<span class=\"gp\">$ </span><span class=\"nv\">PREFIX</span><span class=\"o\">=</span><span class=\"nv\">$SWD</span>/x86_64\n<span class=\"gp\">$ </span><span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span\n                        class=\"nv\">$PREFIX</span>/bin:<span class=\"nv\">$PATH</span>\n<span class=\"gp\">$ </span><span class=\"nb\">export </span><span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span><span\n                        class=\"nv\">$PREFIX</span>/lib:<span class=\"nv\">$LD_LIBRARY_PATH</span>\n</code></pre>\n            </div>\n            <p>For Mac users, the last command is <code class=\"highlighter-rouge\">export\n                DYLD_LIBRARY_PATH=$PREFIX/lib:$DYLD_LIBRARY_PATH</code> instead.</p>\n        </li>\n        <li>GNU binutils:\n            <ul>\n                <li><strong>Download</strong>:\n                    <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code><span\n                            class=\"gp\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$SWD</span>/src\n<span class=\"gp\">$ </span>wget https://ftp.gnu.org/gnu/binutils/binutils-2.27.tar.gz <span class=\"o\">&amp;&amp;</span> tar xzf binutils-2.27.tar.gz\n</code></pre>\n                    </div>\n                </li>\n                <li><strong>Build</strong>:\n                    <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code><span\n                            class=\"gp\">$ </span>mkdir -p <span class=\"nv\">$SWD</span>/build/binutils <span\n                            class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> <span\n                            class=\"nv\">$SWD</span>/build/binutils\n<span class=\"gp\">$ </span>../../src/binutils-2.27/configure --prefix<span class=\"o\">=</span><span\n                                class=\"nv\">$PREFIX</span> --target<span class=\"o\">=</span>i386-elf <span\n                                class=\"se\">\\</span>\n--disable-multilib --disable-nls --disable-werror\n<span class=\"gp\">$ </span>make -j8\n<span class=\"gp\">$ </span>make install\n</code></pre>\n                    </div>\n                </li>\n            </ul>\n        </li>\n        <li>GCC:\n            <ul>\n                <li><strong>Download</strong>:\n                    <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code><span\n                            class=\"gp\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$SWD</span>/src\n<span class=\"gp\">$ </span>wget https://ftp.gnu.org/gnu/gcc/gcc-6.2.0/gcc-6.2.0.tar.bz2 <span class=\"o\">&amp;&amp;</span> tar xjf gcc-6.2.0.tar.bz2\n<span class=\"gp\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$SWD</span>/src/gcc-6.2.0 <span class=\"o\">&amp;&amp;</span> contrib/download_prerequisites\n</code></pre>\n                    </div>\n                </li>\n                <li><strong>Build</strong>:\n                    <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code><span\n                            class=\"gp\">$ </span>mkdir -p <span class=\"nv\">$SWD</span>/build/gcc <span\n                            class=\"o\">&amp;&amp;</span> <span\n                            class=\"nb\">cd</span> <span class=\"nv\">$SWD</span>/build/gcc\n<span class=\"gp\">$ </span>../../src/gcc-6.2.0/configure --prefix<span class=\"o\">=</span><span class=\"nv\">$PREFIX</span> --target<span\n                                class=\"o\">=</span>i386-elf <span class=\"se\">\\</span>\n--disable-multilib --disable-nls --disable-werror --disable-libssp <span class=\"se\">\\</span>\n--disable-libmudflap --with-newlib --without-headers --enable-languages<span class=\"o\">=</span>c,c++\n<span class=\"gp\">$ </span>make -j8 all-gcc \n<span class=\"gp\">$ </span>make install-gcc\n<span class=\"gp\">$ </span>make all-target-libgcc\n<span class=\"gp\">$ </span>make install-target-libgcc\n</code></pre>\n                    </div>\n                </li>\n            </ul>\n        </li>\n        <li>GDB:\n            <ul>\n                <li><strong>Download</strong>:\n                    <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code><span\n                            class=\"gp\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$SWD</span>/src\n<span class=\"gp\">$ </span>wget https://ftp.gnu.org/gnu/gdb/gdb-7.9.1.tar.xz  <span class=\"o\">&amp;&amp;</span> tar xJf gdb-7.9.1.tar.xz\n</code></pre>\n                    </div>\n                </li>\n                <li><strong>Build</strong>:\n                    <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code><span\n                            class=\"gp\">$ </span>mkdir -p <span class=\"nv\">$SWD</span>/build/gdb <span\n                            class=\"o\">&amp;&amp;</span> <span\n                            class=\"nb\">cd</span> <span class=\"nv\">$SWD</span>/build/gdb\n<span class=\"gp\">$ </span>../../src/gdb-7.9.1/configure --prefix<span class=\"o\">=</span><span class=\"nv\">$PREFIX</span> --target<span\n                                class=\"o\">=</span>i386-elf --disable-werror\n<span class=\"gp\">$ </span>make -j8\n<span class=\"gp\">$ </span>make install\n</code></pre>\n                    </div>\n                </li>\n            </ul>\n        </li>\n    </ul>\n\n    <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n            <b>Note</b>\n        </div>\n        <div class=\"panel-body\">\n            After building and installing the toolchain, you need to make sure they are in\n            the PATH. Put <code class=\"highlighter-rogue\">export PATH=/path/to/swd/x86_64/bin:$PATH</code>\n            to the end of your terminal config file (e.g., <code\n                class=\"highlighter-rogue\">.bash_profile</code>)\n            so that they are set automatically when you login. Remember to replace\n            <code class=\"highlighter-rogue\">/path/to/swd/x86_64/bin</code> with the actual path,\n            e.g., <code class=\"highlighter-rogue\">~/318/toolchain/x86_64/bin</code>. You may also\n            want to delete the source and build directories in <code>/path/to/swd/{src,build}</code>\n            to save space.\n        </div>\n    </div>\n\n    <h3 id=\"x86-emulator\">x86 Emulator</h3>\n\n    <ul>\n        <li><strong>QEMU</strong>:\n            <ul>\n                <li>QEMU is modern and fast. You can either install it from the package repository or\n                    build it from <a href=\"https://www.qemu.org/download/\">source</a>. For Ubuntu: <code\n                            class=\"highlighter-rouge\">sudo apt-get install qemu libvirt-bin</code>.\n                    For MacOS: <code class=\"highlighter-rouge\">brew install qemu</code>.\n                </li>\n            </ul>\n        </li>\n        <li><strong>Bochs</strong>:\n            <ul>\n                <li>\n                    <p>Bochs is slower than QEMU but provides full emulation (i.e., higher accuracy).\n                        For Lab 1, we will use Bochs as the default emulator and for Lab 2-4, we will\n                        use QEMU as the default emulator. Nevertheless, nothing will prevent you from using\n                        one or another for all the labs. There are some bugs in Bochs that should be fixed\n                        when using it with Pintos. Thus, we need to install Bochs from source, and apply\n                        the patches that we have provided under <code class=\"highlighter-rouge\">pintos/src/misc/bochs*.patch</code>.\n                        We will\n                        build two versions of Bochs: one, simply named <code\n                                class=\"highlighter-rouge\">bochs</code>, with the GDB stub enabled, and the\n                        other, named <code class=\"highlighter-rouge\">bochs-dbg</code>, with the built-in\n                        debugger enabled.</p>\n                </li>\n                <li>\n                    <p>Version 2.6.2 has been tested to work with Pintos. Newer version of Bochs has\n                        not been tested. <span class=\"text-info\">We have provided a build script\n<code>pintos/src/misc/bochs-2.6.2-build.sh</code> that will download, patch and\nbuild two versions of the Bochs for you. But you need to make sure X11 and its\nlibrary is installed. For Mac OS, you should install <a href=\"https://www.xquartz.org/\">XQuartz</a>.\nFor Ubuntu, you should have <code class=\"highlighter-rouge\">libx11-dev</code> and <code class=\"highlighter-rouge\">libxrandr-dev</code> installed.</span>\n                    </p>\n\n                    <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>  pintos/src/misc/bochs-2.6.2-build.sh /path/to/swd/x86_64\n</code></pre>\n                    </div>\n                    <p>(replace <code class=\"highlighter-rouge\">/path/to/swd/x86_64</code> with the actual\n                        directory path)</p>\n                </li>\n                <li>\n                    <p>After build succeeds, make sure the <code class=\"highlighter-rouge\">bochs</code> or\n                        <code\n                                class=\"highlighter-rouge\">bochs-db</code> are in PATH. You\n                        can verify the install with <code class=\"highlighter-rouge\">bochs --version</code>.\n                    </p>\n                </li>\n            </ul>\n        </li>\n    </ul>\n\n    <h3 id=\"pintos-utility-tools\">Pintos Utility Tools</h3>\n    <p>The Pintos source distribution comes with a few handy scripts that you will be\n        using frequently. They are located within <code class=\"highlighter-rouge\">src/utils/</code>. The\n        most\n        important one is\n        the <code class=\"highlighter-rouge\">pintos</code> Perl script, which you will be using to start and\n        run\n        tests\n        in pintos. You need to make sure it can be found in your PATH environment\n        variable. In addition, the <code class=\"highlighter-rouge\">src/misc/gdb-macros</code> is provided\n        with a\n        number of\n        GDB macros that you will find useful when you are debugging Pintos. The <code\n                class=\"highlighter-rouge\">pintos-gdb</code>\n        is a wrapper around the <code class=\"highlighter-rouge\">i386-elf-gdb</code> that reads this macro\n        file\n        at start.\n        It assumes the macro file resides in <code class=\"highlighter-rouge\">../misc</code>.</p>\n\n    <p>The example commands to do the above setup for the Pintos utilities are:\n        (replace <code class=\"highlighter-rouge\">/path/to/swd/x86_64</code> with the actual directory path)\n    </p>\n    <div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code><span\n            class=\"gp\">$ </span><span\n            class=\"nb\">cd </span>pintos/src/utils <span class=\"o\">&amp;&amp;</span> make\n<span class=\"gp\">$ </span>cp backtrace pintos Pintos.pm pintos-gdb pintos-set-cmdline pintos-mkdisk setitimer-helper squish-pty squish-unix /path/to/swd/x86_64/bin\n<span class=\"gp\">$ </span>mkdir /path/to/swd/x86_64/misc\n<span class=\"gp\">$ </span>cp pintos/src/misc/gdb-macros /path/to/swd/x86_64/misc\n</code></pre>\n    </div>\n\n    <h3 id=\"others\">Others</h3>\n    <ul>\n        <li>Required: <a href=\"http://www.perl.org/\">Perl</a>. Version 5.8.0 or later.</li>\n        <li>Recommended:\n            <ul>\n                <li><a href=\"http://ctags.sourceforge.net/\">ctags</a></li>\n                <li><a href=\"http://cscope.sourceforge.net/\">cscope</a></li>\n                <li><a href=\"https://cgdb.github.io/\">cgdb</a></li>\n                <li><a href=\"https://github.com/scrooloose/nerdtree\">NERDTree</a></li>\n                <li><a href=\"https://github.com/Valloric/YouCompleteMe\">YouCompleteMe</a>.</li>\n            </ul>\n        </li>\n        <li>Optional:\n            <ul>\n                <li>GUI IDEs like <a href=\"https://eclipse.org/cdt\">Eclipse CDT</a> or <a\n                        href=\"http://www.jetbrains.com/clion\">clion</a>.\n                    The instructor has not tried them. Vim or Emacs plus the standard Unix development\n                    tools would suffice for the course. But if you can\u2019t live without GUI IDEs. You\n                    may explore the setup yourself (potential\n                    <a href=\"https://uchicago-cs.github.io/mpcs52030/pintos_eclipse.html\">reference</a>) and\n                    let us know if they are helpful!\n                </li>\n            </ul>\n        </li>\n    </ul>\n\n    <h4 id=\"mac-users\">Mac Users</h4>\n    <p>The original Pintos was mainly developed and tested for Linux (Debian\n        and Ubuntu in particular) and Solaris. It has some issues to run\n        on Mac OS. We have fixed a number of issues and provided scripts\n        to make it run more smoothly with Mac OS. They should be working mostly.\n        But one caveat that you should be aware of is that the <code class=\"highlighter-rouge\">setitimer</code> system\n        call\n        (used by the <code class=\"highlighter-rouge\">pintos</code> script to control runtime of tests) in Mac OS seems\n        to have some bug,\n        which may trigger premature timeout when using <code class=\"highlighter-rouge\">pintos</code> with <code\n                class=\"highlighter-rouge\">--qemu</code>. To work around\n        this, you can either use the Bochs simulator <code class=\"highlighter-rouge\">--bochs</code> instead (modify the\n        <code class=\"highlighter-rouge\">src/{threads,userprog,vm,filesys}/Make.vars</code>) or increase the timeout\n        passed to\n        <code class=\"highlighter-rouge\">pintos</code> (e.g., change TIMEOUT in <code class=\"highlighter-rouge\">src/tests/Make.tests</code>\n        to 400).</p>\n\n\n    <!--<footer class=\"site-footer\">-->\n        <!--<hr>-->\n        <!--<div class=\"wrapper\">-->\n            <!--Ryan Huang | Last updated 2019-01-06 13:58:14 -0500.-->\n        <!--</div>-->\n    <!--</footer>-->\n\n</div>\n</body>\n</html>\n", "encoding": "utf-8"}