{"url": "https://www.ics.uci.edu/~thornton/ics33/CodeExamples/SpecialMethods/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 33 Summer 2013, Code Example: Special Methods</title>\n\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 33 Summer 2013 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../ProjectGuide\">Project Guide</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 33 Summer 2013<br />\n   Code Example: Special Methods</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Background</p>\n\n<p>In previous coursework, you've seen that there is very little about Python that's \"special\" or \"magical.\"  Instead, most higher-level concepts are implemented using lower-level concepts, so you can often understand the details of Python language features that you're unfamiliar with by learning how they map back to concepts that you already know.  What's more, once you know how those underlying details work, you'll find that you can make your own kinds of objects behave more like the ones that are built into Python.</p>\n\n<p class=\"subtitle\">How Python translates your code into other code</p>\n\n<p>You've seen in a previous course that Python doesn't always execute precisely the code you write.  It sometimes translates what you write into something slightly different and executes that translated code instead.  While that sounds like something that shouldn't be your concern, it's actually critical to understand how some of those translations are done if you want to really understand Python; you can write Python code without knowing how those translations are done, but you can write <i>better</i> Python code if you do understand them.  In general, the goal when you learn a programming language is twofold: (1) learn how to write code that solves a problem, and (2) learn how to write code <i>well</i>, so that it not only solves a problem but is clear and understandable.  Previous courses have spent a lot of time on the first goal; this course aims to help you embrace the second.</p>\n\n<p>When classes were introduced previously, you saw at least a couple of instances where Python performs a translation on the code you write.</p>\n\n<ul>\n  <li>When you create an object by calling a constructor, Python actually does two things:\n    <ol>\n      <li>Allocates a block of memory large enough to hold your new object.</li>\n      <li>Calls the <b>__init__</b> method on your object.  Any arguments you passed to the constructor are passed to <b>__init__</b>.</li>\n    </ol>\n    So, for example, when you say <b>X(1, 3)</b>, Python allocates a new object of type X, then calls <b><i>your_new_object</i>.__init__(1, 3)</b>.  Knowing this is what allows you to write code that initializes a new object; rather than building something custom every time you need initialization, you just write an <b>__init__</b> method, and Python will take care of calling it for you.  (It turns out that you can hook into the memory allocation part, too, by writing a special method <b>__new__</b>, but that's a topic for another day.)</li>\n  <li>When you call a method on an object, Python rearranges your code a bit.  Given an object <b>a</b> of a class <b>C</b>, the call <b>a.foo(x, y)</b> is automatically translated to <b>C.foo(a, x, y)</b> instead.  While that seems like esoterica, it's actually vital that you understand it, because when you write the <b>foo()</b> method in the class <b>C</b>, you'd need to know that the \"extra\" first parameter will be passed (and that we generally always call this parameter <b>self</b>, though you can technically call it anything you'd like).</li>\n</ul>\n\n<p>Putting these two rules together, we can know how to write code that initializes a new object of a class we're writing.  If we want to be able to create objects of a class <b>Person</b> by passing two arguments &mdash; a first and a last name &mdash; we can use our knowledge of the translations that Python does to help us know what to write.</p>\n\n<ul>\n  <li><b>Person(\"Alex\", \"Thornton\")</b> is a call to a constructor.  After a new object is created, we know that Python will do this: <b><i>the_new_object</i>.__init__(\"Alex\", \"Thornton\")</b>.</li>\n  <li>Knowing what we know about method calls, though, we know that Python will really do this: <b>Person.__init__(<i>the_new_object</i>, \"Alex\", \"Thornton\")</b>.</li>\n  <li>So we know that we should write a method in our <b>Person</b> class that takes three arguments: <b>self</b>, <b>first_name</b>, and <b>last_name</b>, leading us to write this:\n\n<blockquote><pre>\nclass Person:\n    def __init__(self, first_name, last_name):\n        <i>whatever we need to do to initialize the object</i>\n</pre></blockquote>\n</li>\n</ul>\n\n<p>If we want to give our classes interesting new abilities, like being able to add objects of our classes with the + operator, ask objects of our classes for a length by passing them to the <b>len()</b> function, control how they're displayed in the interpreter when they're the result of an expression, and so on, we need to understand how these Python language features get translated into calls to methods.  Once we know those rules, we'll know exactly what methods to write and exactly what those methods need to do.</p>\n\n<p class=\"subtitle\">Special methods</p>\n\n<p>There's nothing inherently special about object creation, object destruction, asking an object for its length, comparing objects for equality, adding objects together with the + operator, and so on.  Your classes can include custom support for these things, every bit as much as the types built into Python can support them.  Defining what an operator means when used on objects of your classes is easy once you know what really happens when an operator is used.  The + operator, for example, isn't as special as it looks; it's implemented as a call to a method on one of the objects being added.  If you know what that method is called and how the operator is translated into a call to that method, you can write that method in your classes, and suddenly you can use the + operator to add objects of your classes together.</p>\n\n<p>The Python language specifies a set of <i>special methods</i> that are used to implement the underlying details of various language features.  You can write these special methods in your classes, and that will allow you to include custom support for those language features when used with objects of your types.  Special methods are recognizable because they have names that begin and end with two underscores, such as <b>__init__</b>, <b>__len__</b>, <b>__add__</b>, <b>__bool__</b>, or <b>__repr__</b>.  This example explores some of the special methods that are available in Python.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">A Vector class</p>\n\n<p>The central theme of this example is a class that represents the mathematical concept of a <i>vector</i>.  A vector represents two things: a <i>length</i> and a <i>direction</i>; while there are many ways to represent that same idea, one way is to represent it is as a relative change in coordinates in space.  So, for example, a movement of a single unit to the right in two-dimensional Cartesian space might be (1, 0) (i.e., a change of 1 in the <i>x</i> direction and no change in the <i>y</i> direction).  You could similarly represent a three-dimensional vector with three numbers representing changes in the <i>x</i> (left-to-right), <i>y</i> (forward-to-backward), and <i>z</i> (upward-to-downward) directions.</p>\n\n<p>Vectors may seem like a fairly deep, dark concept, but they come up in a surprising number of problem domains.  Many computer games require vectors in implementations of three-dimensional graphics and physics, for example, because much of the underlying math involved in the solution to related problems requires them.</p>\n\n<p>When you write a class, you're defining a new kind of object and specifying how objects of that class behave.  You decide what methods to write and what the methods should do based on how you'd like your new kind of object to act.  So we'll think in those terms as we design our Vector class.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Creating a Vector</p>\n\n<p>In general, we'd like a Vector object to represents a vector in <i>n</i>-dimensional space (e.g., two-dimensional, three-dimensional, etc.).  One thing worth remembering about classes &mdash; but often misunderstood when students first learn about them &mdash; is that they lay out a blueprint for a <i>kind</i> of object, not a single object.  The class specifies how <i>each</i> object behaves.  In our case, each Vector object represents a single vector; if we need 25 vectors, we'd need 25 separate Vector objects to represent them, but each one would behave similarly.</p>\n\n<p>First thing's first.  How do we want to be able to create a Vector object?  Ideally, we would create one by just passing the various components (<i>x</i>, <i>y</i>, etc.) to a constructor.  If we wanted a two-dimensional vector, we'd pass two components; if we wanted a three-dimensional vector, we'd pass three; and so on.</p>\n\n<blockquote><pre>\nv1 = Vector(1, 2, 3)\nv2 = Vector(4, 5)\n</pre></blockquote>\n\n<p>However, this would require us to write an <b>__init__</b> method that takes a variable number of arguments &mdash; sometimes we want to pass it two, sometimes we want to pass it three, and so on &mdash; but we don't know how to do that yet, so we'll need to think of something else.</p>\n\n<p>A reasonable middle ground would be to use a tuple as a parameter instead:</p>\n\n<blockquote><pre>\nv1 = Vector((1, 2, 3))\nv2 = Vector((4, 5))\n</pre></blockquote>\n\n<p>This will allow us to pass a different number of components to each vector.  It will also provide a convenient representation for the components of the vector internally, so this is a pretty good compromise.</p>\n\n<p>To implement this behavior, we'll need to write the appropriate <b>__init__</b> method:</p>\n\n<blockquote><pre>\nclass Vector:\n    def __init__(self, components):\n        if type(components) != tuple or len(components) == 0:\n            raise TypeError('components must be represented as a non-empty tuple')\n\n        self._components = components\n</pre></blockquote>\n\n<p>Notice that we're checking a couple of things in this <b>__init__</b> method:</p>\n\n<ul>\n  <li>We expect to be given a tuple as an argument.</li>\n  <li>We expect that tuple not to be empty, because there's no notion of a vector with no components.</li>\n</ul>\n\n<p>We initialize a Vector object by storing the tuple in the <b>self</b> object's attribute, so it will be available in that object later.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Object lengths</p>\n\n<p>We've seen previously that many different kinds of objects in Python have a notion of a <i>length</i>, and that the built-in function <b>len</b> is how you ask for that length.  Generally, this is a concept associated with objects that represent a <i>collection</i> of other objects, with the length being the number of objects in that collection.  For example:</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; len([1, 2, 3, 4])\n4\n&gt;&gt;&gt; len('Boo')\n3\n&gt;&gt;&gt; len({a: 3, b: 9})\n2\n</pre></blockquote>\n\n<p>Not all objects have a meaningful notion of a \"length\".  Integers, floats, sockets, or <b>tkinter</b> GUI windows are examples.  But a lot of objects do have this notion, including objects of some classes that we write.</p>\n\n<p>In the case of our Vector class, one way to view a Vector is as a collection of the component values.  In that way, the length of a Vector would be the number of components (i.e., the number of dimensions).  So it would be nice if we could do this:</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; len(Vector((1, 2, 3)))\n3\n&gt;&gt;&gt; len(Vector((4, 5)))\n2\n</pre></blockquote>\n\n<p>However, it won't work automatically, because the <b>len</b> function is what it is; it doesn't intrinsically understand how Vectors work.  But if we know a little bit more about what the <b>len</b> function really does, we'll discover that we can give Vectors a length.</p>\n\n<p class=\"subtitle\">The translation of a call to len()</p>\n\n<p>Automatically, when we call the <b>len</b> function and pass it one argument, it is translated into a call to the special method <b>__len__</b> on that argument.  In other words, <b>len(x)</b> is implemented as <b>x.__len__()</b> underneath.  If <b>x</b> is an object of a class with a <b>__len__</b> method, that method will determine <b>x</b>'s length; if not, <b>x</b> has no length.  It's that simple.</p>\n\n<p>So we could add a <b>__len__</b> method to our Vector class, which asks the tuple (stored in the <b>_components</b> attribute when the Vector is constructed) what its length is and returns that.</p>\n\n<blockquote><pre>\nclass Vector:\n    ...\n\n    def __len__(self):\n        return len(self._components)\n</pre></blockquote>\n\n<p>Now Vectors have a length, which is the number of components of the Vector.</p>\n\n<p class=\"subtitle\">The broader lesson at work here</p>\n\n<p>If we want to provide our classes with abilities other than being able to call methods directly on them, such as allowing them to participate in expressions involving operators like +, or allowing them to be used as Boolean expressions like objects of many of the built-in classes can be, we need to understand how the underlying language features are <i>translated</i> into calls to methods on our objects.  The <b>len</b> function isn't special; it just calls the <b>__len__</b> method on whatever object you pass to it.  Operators like + or == aren't special, either; they're also translated to method calls on the objects on either side of them.  To understand how to make our classes compatible with a particular \"special\" Python language feature, we have to understand how that language feature is translated.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Booleanness</p>\n\n<p>Python has a somewhat peculiar notion of the \"Booleanness\" of an object.  Many objects can be treated as Booleans, even if their type isn't <b>bool</b>.  For example, consider this interaction with the Python interpreter.</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; x = [1, 2, 3]\n&gt;&gt;&gt; if x:\n        print('Yes!')\nYes!\n</pre></blockquote>\n\n<p>At first blush, this interaction seems rather strange; why would the list <b>[1, 2, 3]</b> be considered to be <b>True</b> for the purposes of evaluating the condition in the <b>if</b> statement we wrote?  The answer lies in understanding the rules by which objects are translated to a Boolean value when necessary (e.g., when used as a condition in an <b>if</b> statement or <b>while</b> loop).  If we attempt to use an object <b>x</b> in a context where it needs to be considered Boolean, the following rules are used to determine its Boolean value:</p>\n\n<ul>\n  <li>If the object's class has a <b>__bool__</b> method, that method is called; whatever it returns is the object's Boolean value.</li>\n  <li>If the object's class has no <b>__bool__</b> method (or it raises an exception), the <b>__len__</b> method is called instead.  If <b>__len__</b> returns zero, the object is considered to be <b>False</b>; if <b>__len__</b> returns a non-zero number, the object is considered to be <b>True</b>.</li>\n  <li>If the object's class has no <b>__len__</b> method (or it raises an exception), Python finally checks whether the object is the special object <b>None</b>.  <b>None</b> is considered to be <b>False</b>; everything else is considered to be <b>True</b>.</li>\n</ul>\n\n<p>This pattern of trying one translation, then trying another if it fails, and so on, is something we'll see over and over throughout this example.</p>\n\n<p class=\"subtitle\">Booleanness of a Vector</p>\n\n<p>There are at least a couple of ways to think about allowing Vectors to be treated as Boolean values, but we'll go with this definition: if the Vector is a zero-vector (i.e., all of its components are zero), we'll treat it as <b>False</b>; otherwise we'll treat it as <b>True</b>.  To achieve that goal, we'd write this:</p>\n\n<blockquote><pre>\nclass Vector:\n    ...\n\n    def __bool__(self):\n        for component in self._components:\n            if component != 0:\n                return True\n\n        return False\n</pre></blockquote>\n\n<p>(We'll see later this quarter that there are ways to avoid some of the loops we're writing here and in other sections of this example, but they'll require us to learn more about Python first.)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Relational operators</p>\n\n<p>What does it mean to put <b>==</b> in between two objects in Python?  In general, <b>==</b> is expected to return <b>True</b> when two objects are <i>equivalent</i>.  Equivalence of two objects means that the two objects have the same meaning, regardless of whether they occupy the same address in memory.  The phrase \"same meaning\" is interpreted somewhat differently for different classes: strings have the same meaning if they consist of the same sequence of characters, lists have the same meaning if they consist of the same sequence of elements, numbers have the same meaning if they have the same value (even if they're different types), and so on.  Some examples follow.</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; L1 = [1, 2, 3]\n&gt;&gt;&gt; L2 = [5, 6, 7]\n&gt;&gt;&gt; L3 = [1, 2]\n&gt;&gt;&gt; L3.append(3)\n&gt;&gt;&gt; print(L1 == L2)\nFalse\n&gt;&gt;&gt; print(L1 == L3)\nTrue\n&gt;&gt;&gt; i = 3\n&gt;&gt;&gt; j = 4\n&gt;&gt;&gt; print(i == j)\nFalse\n&gt;&gt;&gt; k = 3.0\n&gt;&gt;&gt; print(i == k)\nTrue\n&gt;&gt;&gt; type(i)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(k)\n&lt;class 'float'&gt;\n</pre></blockquote>\n\n<p class=\"subtitle\">The translation of ==</p>\n\n<p>In Python, <b>x == y</b> is translated according to the following rules:</p>\n\n<ul>\n  <li>First, Python attempts to call <b>x.__eq__(y)</b>.  <b>__eq__</b> is a special method that implements equality.</li>\n  <li>Failing that, Python attempts to call <b>y.__eq__(x)</b> instead.</li>\n  <li>Failing that, Python compares the memory addresses of <b>x</b> and <b>y</b> and returns <b>True</b> if they're the same and <b>False</b> if not.</li>\n</ul>\n\n<p class=\"subtitle\">The translation of !=</p>\n\n<p><b>x != y</b> is translated similarly, but using the special method <b>__ne__</b> instead of <b>__eq__</b>.  Also, the <b>!=</b> operator can involve the use of <b>__eq__</b>.</p>\n\n<ul>\n  <li><b>x.__ne__(y)</b> is attempted first.</li>\n  <li><b>not x.__eq__(y)</b> is attempted next.</li>\n  <li><b>not y.__eq__(x)</b> is attempted last.</li>\n</ul>\n\n<p class=\"subtitle\">Other relational comparisons</p>\n\n<p>Python also allows you to override the behavior of the four other relational operators: &lt;, &lt;=, &gt;, and &gt;=.  Their translations work like this:</p>\n\n<ul>\n  <li><b>x &lt; y</b> is first translated as <b>x.__lt__(y)</b>, then as <b>y.__gt__(x)</b>.</li>\n  <li><b>x &lt;= y</b> is first translated as <b>x.__le__(y)</b>, then as <b>y.__ge__(x)</b>.</li>\n  <li><b>x &gt; y</b> is first translated as <b>x.__gt__(y)</b>, then as <b>y.__lt__(x)</b>.</li>\n  <li><b>x &gt;= y</b> is first translated as <b>x.__ge__(y)</b>, then as <b>y.__le__(x)</b>.</li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The canonical representation of an object</p>\n\n<p>Python defines the <i>canonical representation</i> of an object as what gets displayed in the interpreter when the object is displayed as the result of an expression.  For example, the canonical representation of an integer is to simply display the digits (e.g., <b>34567</b>), while the canonical representation of a list is to display the list's elements in order, separated by commas and surrounded by brackets (e.g., <b>[1, 2, 3]</b>).  It's often the case that the canonical representation of an object is also a legal syntax that can be used to create an equivalent object (e.g., if you type <b>L = [1, 2, 3]</b>, you assign L a list containing 1, 2, and 3; if you subsequently display L, you'll see <b>[1, 2, 3]</b>), though you can't always achieve this easily.</p>\n\n<p>With our Vector class so far, however, we get a disappointing result when we display one in the interpreter:</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; Vector((1, 2, 3))\n&lt;__main__.Vector object at 0x02E40DD0&gt;\n</pre></blockquote>\n\n<p>By default, when we write a class, the canonical representation of our objects is a message that displays the object's type and the address in memory where the object resides.  However, we can override that default by writing a <b>__repr__</b> method in our class; it returns a string that will be displayed as the object's canonical representation.  In the case of Vector, we can make our canonical representation the same as the syntax used to create one, by generating a string that looks like a call to Vector's constructor.</p>\n\n<blockquote><pre>\nclass Vector:\n    ...\n\n    def __repr__(self):\n        return 'Vector({})'.format(self._components)\n</pre></blockquote>\n\n<p>Having written that method in our Vector class, we would now see the following behavior in the interpreter.</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; Vector((1, 2, 3))\nVector((1, 2, 3))\n</pre></blockquote>\n\n<p>Not too shabby!</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Arithmetic operators and reverse arithmetic operators</p>\n\n<p>The arithmetic operators, like +, -, *, and so on, are all translated using rules similar to the ones we've seen, with one exception: not all arithmetic operators are commutative (i.e., the result is not always the same when you use the same operators with the operands in the reverse order).  So each arithmetic operator is actually implemented with two special methods, one that implements the operator in left-to-right order and another that implements it in <i>reverse</i> (i.e., in right-to-left order) instead.  A couple of examples:</p>\n\n<ul>\n  <li><b>x + y</b> is translated as <b>x.__add__(y)</b>.  If that gives a result, that's it; if not, Python attempts <b>y.__radd__(x)</b> (reverse add) instead.</li>\n  <li><b>x - y</b> is translated as <b>x.__sub__(y)</b>.  If that gives a result, that's it; if not, Python attempts <b>y.__rsub__(x)</b> (reverse subtraction) instead.</li>\n</ul>\n\n<p>Attempting arithmetic operators both ways is vital when the types of the two operands are different.  For example, in our Vector class, we might like to be able to do these things:</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; Vector((1, 2, 3)) + Vector((4, 5, 6))\nVector((5, 7, 9))\n&gt;&gt;&gt; Vector((1, 2)) * 3\nVector((3, 6))\n&gt;&gt;&gt; 3 * Vector((1, 2))\nVector((3, 6))\n</pre></blockquote>\n\n<p>The first would potentially be handled by an <b>__add__</b> method in our Vector class.  The second would be handled by a <b>__mul__</b> method in our Vector class, whose second argument would be, in this case, an integer.  But the third would initially be handled by a <b>__mul__</b> method in the <b>int</b> class, since the left-hand operands is an integer.  Since the <b>int</b> class doesn't know hot to multiply integers by our Vectors, Python attempts it the other way around by calling <b>__rmul__</b> on our Vector class; in our Vector class, we can write the necessary code to handle this case (because we can't change the <b>int</b> class).</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">How to find out more information</p>\n\n<p>This example is not exhaustive; there are other special methods that we've yet to see.  But if you want to know more about special methods in Python, they're described in the <a href=\"http://docs.python.org/3/reference/\">Python Language Reference</a>, which is the definitive guide to how the Python language works.  You'd want to pay special attention to <a href=\"http://docs.python.org/3/reference/datamodel.html#special-method-names\">Section 3.3</a> of that document, which describes the various special methods available in Python.</p>\n\n<p>You should gradually build your ability to read documentation at this level of depth, even if it seems somewhat intimidating at first, because this will give you the ability to learn new techniques that pique your interest, even if we haven't yet covered them in lecture.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The complete code example</p>\n\n<p>Below is a completed version of the Vector class that we wrote in lecture.</p>\n\n<ul>\n  <li><a href=\"vector.py\"><b>vector.py</b></a></li>\n</ul>\n\n<p>Note that a lot of the clunkier-looking methods that involve <b>for</b> loops could be written better if we knew more about Python; as we continue to learn the nuances of how Python works, we'll gradually be able to write shorter, clearer code than we can write now.  But we're taking great steps in the right direction each time we learn something new.</p>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}