{"url": "https://www.ics.uci.edu/~thornton/ics46/Notes/LinearTimeSorting/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 46 Spring 2018, Notes and Examples: Linear-Time Sorting</title>\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 46 Spring 2018 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 46 Spring 2018<br />\r\n   Notes and Examples: Linear-Time Sorting</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">A lower bound on comparison-based sorting</p>\r\n\r\n<p>All of the sorting algorithms we've seen so far are comparison-based, because they all do their work primarily by comparing pairs of elements and making decisions on the basis of those comparisons.</p>\r\n\r\n<ul>\r\n  <li>Insertion sort compares elements when doing its insertions.</li>\r\n  <li>Selection sort compares elements when looking for maximums.</li>\r\n  <li>Treesort compares elements when inserting them into a binary search tree.</li>\r\n  <li>Heapsort compares elements to build and maintain the heap structure.</li>\r\n  <li>Quicksort compares elements when partitioning them.</li>\r\n  <li>Mergesort compares elements when merging them.</li>\r\n</ul>\r\n\r\n<p>You may have noticed that we keep reaching the same limitation, that the worst-case performance of these algorithms has been &Omega;(<i>n</i> log <i>n</i>).  (In other words, the worst case for each of these algorithms has either been &Theta;(<i>n</i> log <i>n</i>) time or something worse than that.)  We'd love to do better, and it certainly seems theoretically possible to sort elements in &Theta;(<i>n</i>) time in the worst case; all we need is an algorithm that does something like this:</p>\r\n\r\n<blockquote><pre>\r\nMagicSort(Array a):\r\n    for each element in a:\r\n        determine in &Theta;(1) time where the element belongs\r\n        swap the element into the correct position\r\n</pre></blockquote>\r\n\r\n<p>So why do we keep running into the same limitation?  Why are these algorithms all &Omega;(<i>n</i> log <i>n</i>) in the worst case?  If we continue trying to find new comparison-based sorting algorithms, will we ever find one that's as good as our hypothetical MagicSort?  Just because we haven't found one yet doesn't mean one doesn't exist; it just means we haven't found it yet.  But if we could prove that it's impossible for such an algorithm to exist, we could stop looking altogether; we'd know that we'd never find it.</p>\r\n\r\n<p class=\"subtitle\">Modeling a comparison-based sorting algorithm as a decision tree</p>\r\n\r\n<p>To consider comparison-based sorting algorithms generally, we'll need a general way to model them.  A comparison-based sorting algorithm does its work by comparing pairs of elements, then taking action based on the results of those comparisons.  We could represent such an algorithm as a <i>decision tree</i>, in which the non-leaf nodes represent comparisons the algorithm makes, and the leaf nodes represent the final conclusions that the algorithm can reach regarding the correct sorted order of the elements.</p>\r\n\r\n<p>For example, this decision tree represents a comparison-based sorting algorithm capable of sorting three elements.</p>\r\n\r\n<p class=\"center\"><img src=\"DecisionTree.png\" alt=\"Decision tree for sorting three elements\" /></p>\r\n\r\n<p>Notice that there is a leaf node for every possible ordering that the three elements might have: <i>a &le; b &le; c</i>, <i>a &le; c &le; b</i>, <i>b &le; a &le; c</i>, <i>b &le; c &le; a</i>, <i>c &le; a &le; b</i>, <i>c &le; b &le; a</i>.  This allows the algorithm to determine the correct sorted order regardless of what it is; if any of these leaf nodes was missing, the algorithm would be incapable of sorting the elements in at least one case.</p>\r\n\r\n<p class=\"subtitle\">Determining the height of a decision tree</p>\r\n\r\n<p>For a decision tree to represent a comparison-based sorting algorithm capable of sorting <i>n</i> elements, it would have to have a leaf node for every possible ordering of those elements.  If there are <i>n</i> elements, there are <i>n</i>! permutations of those elements (i.e., <i>n</i>! different ways we could arrange them), any one of which might be the correct sorted order.  This means that the decision tree would need to have at least <i>n</i>! leaf nodes in order to be a correct sorting algorithm capable of sorting <i>n</i> elements.</p>\r\n\r\n<p>So what would the height of such a decision tree have to be?  We've seen before that the shortest tree that has <i>n</i> leaves would have height &Theta;(log <i>n</i>).  What's the shortest tree with <i>n</i>! leaves?  The answer is &Theta;(log <i>n</i>!), which we've seen previously is &Theta;(<i>n</i> log <i>n</i>).</p>\r\n\r\n<p>This means that a decision tree would require a height of &Omega;(<i>n</i> log <i>n</i>) in order to have enough leaves to represent every possible answer that a sorting algorithm needs to be able to find.  It might be taller than that, but it can never be shorter.  For this reason, we can be certain that a comparison-based sorting algorithm will simply never be better than this in the worst case; if there was such an algorithm, it would be represented by a decision tree with a height less than that, but such a decision tree could only exist if it was missing at least some of the leaf nodes it needs to have.</p>\r\n\r\n<p>Therefore, comparison-based sorting algorithms take &Omega;(<i>n</i> log <i>n</i>) time in the worst case.  So if we want to do better than this, we're going to have to consider sorting algorithms that do their work in some way other than comparing pairs of elements.  For example, we might need to exploit certain properties of the kinds of elements we're sorting, leading to algorithms that can beat the <i>n</i> log <i>n</i> limitation, but that will only work in more limited circumstances.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Counting sort</p>\r\n\r\n<p>Suppose we want to sort <i>n</i> integers that are between 0 and <i>m</i> &minus; 1 inclusive.  (Or, alternatively, we want to sort <i>n</i> objects by a <i>key</i> that is in that range.)  In that case, there's a straightforward way to do it:</p>\r\n\r\n<ul>\r\n  <li>Look through the elements, counting how many occurrences of each integer we find.  How many 0's were there?  How many 1's?  How many 2's?  And so on.</li>\r\n  <li>Knowing how many of each element we found, rearrange the elements accordingly.  If, for example, we want to know where a 2 goes, it should be placed directly after all of the 0's and 1's.  If we know how many 0's and 1's there are, we'll know exactly where the 2 belongs.</li>\r\n</ul>\r\n\r\n<p>This algorithm is called <i>counting sort</i>, so named because it counts the number of occurrences of each possible key.</p>\r\n\r\n<blockquote><pre>\r\nCountingSort(Array source, Array target, int range):\r\n    counters = an array of integers with indices 0 .. range - 1\r\n    initialize all counters to 0\r\n\r\n    for each element in source:\r\n        counters[element.key]++\r\n\r\n    offsets = an array of integers with indices 0 .. range - 1\r\n    initialize all offsets to 0\r\n\r\n    for i in 1 .. range - 1:\r\n        offsets[i] = offsets[i - 1] + counters[i - 1]\r\n\r\n    for i in 0 .. source.length - 1:\r\n        target[offsets[source[i].key]] = source[i]\r\n        offsets[source[i].key]++\r\n</pre></blockquote>\r\n\r\n<p>The algorithm sorts the elements in the <i>source</i> array, placing the result into the <i>target</i> array.  It proceeds through four high-level steps:</p>\r\n\r\n<ul>\r\n  <li>Iterate through the source elements, counting the number of occurrences of each key, storing the result in an array called <i>counters</i>.</li>\r\n  <li>Determine the <i>offsets</i> for each key, which is to say the index where that key belongs in the sorted order.  Each offset is the sum of the counters that precede it (e.g., offset[3] is counters[0] + counters[1] + counters[2]).</li>\r\n  <li>Iterate through the source elements again.  Each time, look up the offset for that element's key, then copy the element into that position in the target array.\r\n    <ul>\r\n      <li>If we encounter another element with the same key, we would want it to be placed after the one we just copied, so also increment that offset.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<p>Let's suppose that we're sorting this sequence of elements with keys in the range 0..4.  (This could be elements of arbitrary type, but with keys in that range.  For example, the keys could be the number of years someone has studied at UCI as an undergraduate.)  There are 13 elements total that we want to sort.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>First, we would determine the counters, i.e., how many times does each key appear?</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>counters</i></td>\r\n    <td>2</td>\r\n    <td>1</td>\r\n    <td>5</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>Next, we'd determine the offsets.  Each offset is the sum of the counters that precede it.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>counters</i></td>\r\n    <td>2</td>\r\n    <td>1</td>\r\n    <td>5</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>8</td>\r\n    <td>10</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>Finally, we iterate through the source elements, copying them into the appropriate position in the target array.  (Note that we don't need the <i>counters</i> array anymore.)  That process starts this way:</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>8</td>\r\n    <td>10</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>The first element in the source array has the key 4.  The offset for the key 4 is 10, so we'd copy the element into index 10 of the target array, then increment the offset of the key 4.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>8</td>\r\n    <td>11</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>This process would continue for each of the elements in the source array, shown below.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>8</td>\r\n    <td>11</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>8</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n    <td>8</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>5</td>\r\n    <td>8</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>5</td>\r\n    <td>9</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>3</td>\r\n    <td>&nbsp;</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>1</td>\r\n    <td>3</td>\r\n    <td>5</td>\r\n    <td>9</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>0</td>\r\n    <td>&nbsp;</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>3</td>\r\n    <td>&nbsp;</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>1</td>\r\n    <td>3</td>\r\n    <td>6</td>\r\n    <td>9</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>0</td>\r\n    <td>&nbsp;</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>3</td>\r\n    <td>&nbsp;</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>6</td>\r\n    <td>9</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>0</td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>3</td>\r\n    <td>&nbsp;</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>6</td>\r\n    <td>10</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>0</td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>3</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>7</td>\r\n    <td>10</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>0</td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>&nbsp;</td>\r\n    <td>3</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>8</td>\r\n    <td>10</td>\r\n    <td>12</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>0</td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td></td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>offsets</i></td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>8</td>\r\n    <td>10</td>\r\n    <td>13</td>\r\n  </tr>\r\n</table>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n    <td>i<br />&darr;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>source</i></td>\r\n    <td>4</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>0</td>\r\n    <td>2</td>\r\n    <td>0</td>\r\n    <td>3</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>4</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>target</i></td>\r\n    <td>0</td>\r\n    <td>0</td>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>3</td>\r\n    <td>3</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n    <td>4</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>And note that the target array is the sorted version of the source array.  How good is this algorithm?  Let's do some analysis.</p>\r\n\r\n<p class=\"subtitle\">Analysis</p>\r\n\r\n<p>For the purposes of this analysis, we'll say that there are <i>n</i> elements we want to sort, and that there are <i>m</i> possible keys.  The performance of this algorithm will be affected by both of these variables, which can vary independently.</p>\r\n\r\n<p>This algorithm is not in-place, because it requires the ancillary arrays to store the counters and offsets; it also requires a target array into which to place its result.  The total amount of memory required is &Theta;(<i>m</i>) for the counters and offsets &mdash; one integer for each of the possible keys &mdash; plus &Theta;(<i>n</i>) for the target array.  So we'd say that the memory requirement, above and beyond the source array, is &Theta;(<i>n</i> + <i>m</i>).</p>\r\n\r\n<p>To determine the running time of the algorithm, we'll consider the steps separately.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>Step</td>\r\n    <td>Running&nbsp;Time</td>\r\n    <td>Commentary</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Initializing&nbsp;counters</td>\r\n    <td>&Theta;(<i>m</i>)</td>\r\n    <td>We first have to initialize all of the counters to zero.  There are <i>m</i> of them.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Counting&nbsp;occurrences</td>\r\n    <td>&Theta;(<i>n</i>)</td>\r\n    <td>Here, we iterate through the <i>n</i> elements and incrementing the appropriate counter for each one.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Determining&nbsp;offsets</td>\r\n    <td>&Theta;(<i>m</i>)</td>\r\n    <td>The offsets are determined by iterating through the counters and adding each one to a running sum.  There are <i>m</i> counters and <i>m</i> offsets.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Copying&nbsp;elements&nbsp;into&nbsp;target</td>\r\n    <td>&Theta;(<i>n</i>)</td>\r\n    <td>There are <i>n</i> elements to copy, each of which can be copied into the right position in &Theta;(1) time, because the offset tells us definitively what that position is.</td>\r\n  </tr>\r\n  <tr class=\"top\">\r\n    <td>TOTAL</td>\r\n    <td>&Theta;(<i>n</i> + <i>m</i>)</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>The big question, of course, is whether this is a good result.  How good (or bad) is &Theta;(<i>n</i> + <i>m</i>)?  Generally, it depends very much on what <i>m</i> is.  What this analysis tells us is that this algorithm would be a very interesting choice <i>if and only if</i> the number of elements <i>n</i> is large <u>and</u> the number of possible keys <i>m</i> is small.  If, for example, the keys are arbitrary 32-bit integers, we would need over four billion counters and offsets!  But if we had a large number of elements with keys in the range 0..9, this algorithm would potentially be a good choice.  When <i>n</i> &gt;&gt; <i>m</i>, this algorithm is more or less linear with respect to <i>n</i>: just what we've been looking for, albeit only in a very narrowly-defined circumstance.</p>\r\n\r\n<p>Note, also, that this algorithm is stable.  Given multiple elements that have the same key, we'd iterate through them and also copy them into the target array in a left-to-right fashion.  As we'll see, this turns out to be an important fact.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Radix sort</p>\r\n\r\n<p>While counting sort sounds at first like a promising choice, some analysis leads us to the grim conclusion that it's only useful in an extremely narrow circumstance: when we have a large number of elements with integer keys that are in a very small range.  Suppose we wanted to sort students by their UCI student ID numbers.  UCI student IDs are eight-digit numbers, so counting sort would be a severely impractical choice, because it would need 100,000,000 counters and offsets; in that case, the <i>m</i> dwarfs the <i>n</i> and we'd be crazy to use counting sort.</p>\r\n\r\n<p>All is not lost, though; we just have to be a little more creative.  To keep the example simpler, suppose we had this sequence of three-digit positive integers and we wanted to sort them &mdash; though what we're about to see would work on eight-digit student ID numbers, as well.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr>\r\n    <td>315</td>\r\n    <td>412</td>\r\n    <td>597</td>\r\n    <td>264</td>\r\n    <td>531</td>\r\n    <td>587</td>\r\n    <td>972</td>\r\n    <td>935</td>\r\n    <td>239</td>\r\n    <td>842</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>To perform a counting sort on these would be silly; we'd need many more counters and offsets than we have elements to sort.  But there is a trick we could employ: sort by a single digit at a time.  If we're careful about how we do it, we can make it work.  Then the only question will be whether it works well or not.</p>\r\n\r\n<p>An algorithm that can sort elements one digit at a time is called <i>radix sort</i> &mdash; or, more specifically, <i>least-significant-digit radix sort</i>.  (There is also a <i>most-significant-digit radix sort</i>, which works somewhat differently, and is beyond the scope of our work here.)  Here's how radix sort works:</p>\r\n\r\n<ul>\r\n  <li>Choose a <i>radix</i>, which is the weight of each digit that we want to sort by.  If we wanted to sort by one base-10 digit at a time, the radix would be 10.  (In practice, we might also choose a power of 2, such as 16, which would make some of the algorithm's calculations run faster.)</li>\r\n  <li>Given that radix and an array of elements to sort, sort the elements based only on the least-significant (i.e., rightmost) digit.  If the radix is 10, we're talking about the rightmost base-10 digit, so we would treat 412 as coming before 315, since the last digit of 412 is 2 and the last digit of 315 is 5.</li>\r\n  <li>Next, we'll sort the elements again by the next-least-significant digit (i.e., the digit to the left of the rightmost digit).  Again, we'll ignore the other digits and focus only on the one we're presently interested in.</li>\r\n  <li>We'll continue sorting the elements by one digit at a time until we finally sort by the most-significant (i.e., leftmost) digit.</li>\r\n</ul>\r\n\r\n<p>At first blush, this sounds like it couldn't possibly work, because whatever work we do in the first pass &mdash; sorting by the least-significant digit &mdash; will be undone in the second.  And if we weren't careful, that would be true.  But here's the important thing: If we use a stable sorting algorithm each time we sort by one digit, then the right thing happens automatically.  During the second pass, when two elements have the same second-least-significant digit, their relative order will be maintained; that relative order will be correct already for the least-significant digit.  The numbers 315 and 412 in our example sequence will be swapped (412 before 315) in the first pass, and remain unchanged in the second pass.  So, ultimately, when the <i>i</i><sup><small>th</small></sup> pass is completed, the element will be sorted by their <i>i</i> least-significant digits.</p>\r\n\r\n<p>A handy sorting algorithm we could use in each pass would be counting sort, which we saw previously.  If the radix is small, the number of possible keys will be quite small, which is precisely the circumstance where counting sort excels.</p>\r\n\r\n<p>Returning to our example, the array starts out this way:</p>\r\n\r\n<table class=\"normal\">\r\n  <tr>\r\n    <td>315</td>\r\n    <td>412</td>\r\n    <td>597</td>\r\n    <td>264</td>\r\n    <td>531</td>\r\n    <td>587</td>\r\n    <td>972</td>\r\n    <td>935</td>\r\n    <td>239</td>\r\n    <td>842</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>We would first do a counting sort on the rightmost digit of the numbers, ignoring the other digits.  Since counting sort is stable, the result would look like this.  (Run through the counting sort algorithm on paper to verify these results.)</p>\r\n\r\n<table class=\"normal\">\r\n  <tr>\r\n    <td>531</td>\r\n    <td>412</td>\r\n    <td>972</td>\r\n    <td>842</td>\r\n    <td>264</td>\r\n    <td>315</td>\r\n    <td>935</td>\r\n    <td>597</td>\r\n    <td>587</td>\r\n    <td>239</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>Next, we would do another counting sort on the middle digit, again ignoring the other digits.  But because counting sort is stable, the result will be that the numbers are sorted by the combination of the middle and last digits.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr>\r\n    <td>412</td>\r\n    <td>315</td>\r\n    <td>531</td>\r\n    <td>935</td>\r\n    <td>239</td>\r\n    <td>842</td>\r\n    <td>264</td>\r\n    <td>972</td>\r\n    <td>587</td>\r\n    <td>597</td>\r\n  </tr>\r\n</table>\r\n\r\n<p>Finally, we would do one more counting sort on the leftmost digit, which would lead to our final result:</p>\r\n\r\n<table class=\"normal\">\r\n  <tr>\r\n    <td>239</td>\r\n    <td>264</td>\r\n    <td>315</td>\r\n    <td>412</td>\r\n    <td>531</td>\r\n    <td>587</td>\r\n    <td>597</td>\r\n    <td>842</td>\r\n    <td>935</td>\r\n    <td>972</td>\r\n  </tr>\r\n</table>\r\n\r\n<p class=\"subtitle\">Analysis</p>\r\n\r\n<p>There are a few variables that we need to consider in our analysis, each of which can vary independently from the others.</p>\r\n\r\n<ul>\r\n  <li>We'll say that <i>n</i> is the number of elements we're sorting.</li>\r\n  <li>The radix &mdash; the number of possible values each digit can have &mdash; will be denoted by <i>r</i>.  Note that this doesn't necessarily have to be 10; a power of 2 (such as 16) makes a nice choice in practice, since operations like division and modulo will be a lot faster with a divisor that is a power of 2, because it can be implemented using bit shifts and/or bit masking.</li>\r\n  <li>We'll use <i>w</i> to represent the <i>width</i> of the numbers &mdash; the number of digits, at most, that each number can have.  (In our example above, <i>w</i> would be 3.)</li>\r\n</ul>\r\n\r\n<p>We'd need to run <i>w</i> passes of counting sort, one for each digit that each number can have.  We saw before that counting sort runs in &Theta;(<i>n</i> + <i>m</i>) time, where <i>n</i> is the number of elements we're sorting and <i>m</i> is the number of possible keys there are.  So, in this case, each counting sort pass would take &Theta;(<i>n</i> + <i>r</i>) time, since <i>r</i> (the radix) would be the number of possible keys used in the counting sort.</p>\r\n\r\n<p>If we run <i>w</i> iterations of an algorithm that takes &Theta;(<i>n</i> + <i>r</i>) time, the total time required would be &Theta;(<i>w</i>(<i>n</i> + <i>r</i>)).</p>\r\n\r\n<p>At a glance, that doesn't look like linear time &mdash; and, technically, it isn't.  But think about a scenario where you'd be interested in using radix sort.  Suppose you're sorting 30,000 students by their UCI student ID numbers.  If the radix was 10, then the width of the numbers would be 8 &mdash; student ID numbers have eight digits.  So think about the variables at work here:</p>\r\n\r\n<ul>\r\n  <li><i>n</i> = 30,000</li>\r\n  <li><i>r</i> = 10</li>\r\n  <li><i>w</i> = 8</li>\r\n</ul>\r\n\r\n<p>As a practical matter, &Theta;(<i>w</i>(<i>n</i> + <i>r</i>)) feels a lot like &Theta;(<i>n</i>) in this case, because both <i>w</i> and <i>r</i> are much smaller than <i>n</i>.</p>\r\n\r\n<p>In general, where radix sort can excel is when sorting a large number of elements that can cheaply be broken down into a relatively small number of digits; in a case like that, the behavior approaches &Theta;(<i>n</i>).</p>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}