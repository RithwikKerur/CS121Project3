{"url": "https://www.ics.uci.edu/~goodrich/teach/ics160e/hw/proj2/", "content": "<html>\n\n<head>\n<title>ICS 160E / EECS 114  - Programming Project 2</title>\n</head>\n\n<body bgcolor=\"#FFFFFF\">\n\n<center>\n\n<h2>ICS 160E / EECS 114 - Programming Project 2, 50 Points\n<br>\nDue: Friday, May 6, 2005, at 11:59pm,\nusing the\n<a href=\"http://checkmate.ics.uci.edu/index.jsp\">\nCheckmate Submission System</a>.\n</h2>\n\n</center>\n\n<p>\nWrite a Java program that can play tic-tac-toe effectively.\nTo do this, you will need to create a \n<b>game tree</b> <i>T</i>, which is a tree where each node corresponds to\na <b>game configuration</b>, which in this case is a\nrepresentation of the tic-tac-toe board.\nThe root node corresponds to the initial configuration.\nFor each internal node <i>v</i> in <i>T</i>, the children of <i>v</i> correspond to\nthe game states we can reach from <i>v</i>'s game state in a single \nlegal move for the appropriate player, <i>A</i> (the first player) or <i>B</i>\n(the second player).\nNodes at even depths correspond to moves for <i>A</i> and nodes at \nodd depths correspond to moves for <i>B</i>.\nExternal nodes are either final game states \nor are at a depth beyond which we don't wish to explore.\nWe score each external node with a value that indicates how\ngood this state is for player <i>A</i>.\nIn large games, like chess, we have to use a heuristic scoring function,\nbut for small games, like tic-tac-toe, we can construct\nthe entire game tree and score external nodes as +1, 0,\n-1, indicating whether player <i>A</i> has a win, draw, or lose in that\nconfiguration.\nA good algorithm for choosing moves is \\emph{minimax}.\nIn this algorithm, we assign a score to each internal node <i>v</i> in <i>T</i>, such\nthat if <i>v</i> represents <i>A</i>'s turn, we compute <i>v</i>'s score as the\nmaximum of the scores of <i>v</i>'s children (which corresponds to <i>A</i>'s\noptimal play from <i>v</i>).\nIf an internal node <i>v</i> represents <i>B</i>'s turn, then we compute <i>v</i>'s\nscore as the minimum of the scores of <i>v</i>'s children (which\ncorresponds to <i>B</i>'s optimal play from <i>v</i>).\n\n<p>\nNote: you may use the following class in your program:\n<ul>\n<li> <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Scanner.html\">\njava.util.Scanner</a>\n</ul>\nYou may read expressions from System.in and output to System.out or\nuse a GUI.\n</body>\n\n</html>\n", "encoding": "ascii"}