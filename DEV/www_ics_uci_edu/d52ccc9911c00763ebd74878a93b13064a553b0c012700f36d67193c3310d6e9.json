{"url": "https://www.ics.uci.edu/~ejw/authoring/versioning/draft-webdav-versioning-00.txt", "content": "\n\n\n\n\n       INTERNET-DRAFT                         Christopher Kaler,\n       draft-webdav-versioning-00.txt         Microsoft\n                                               Editor\n\n       Expires March 28, 1999\n                                               September 28, 1998\n\n\n                 Versioning and Variant Extensions to WebDAV\n\n  Status of this Memo\n\n       This document is an Internet draft. Internet drafts are working\n       documents of the Internet Engineering Task Force (IETF), its areas\n       and its working groups. Note that other groups may also distribute\n       working information as Internet drafts.\n\n       Internet Drafts are draft documents valid for a maximum of six\n       months and can be updated, replaced or obsoleted by other documents\n       at any time.  It is inappropriate to use Internet drafts as\n       reference material or to cite them as other than as \"work in\n       progress\".\n\n       To learn the current status of any Internet draft please check the\n       \"lid-abstracts.txt\" listing contained in the Internet drafts shadow\n       directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),\n       munnari.oz.au (Pacific Rim), ftp.isi.edu (US East coast) or\n       ftp.isi.edu (US West coast).  Further information about the IETF\n       can be found at URL: http://www.ietf.org/\n\n       Distribution of this document is unlimited.  Please send comments\n       to the mailing list at <www-webdav-dasl@w3.org>, which may be\n       joined by sending a message with subject \"subscribe\" to <www-\n       webdav-dasl-request@w3.org>.\n\n       Discussions of the list are archived at\n       <URL:http://www.w3.org/pub/WWW/Archives/Public/www-webdav-dasl>.\n\n  Abstract\n\n       This document specifies a set of methods, headers, and content-\n       types composing DAV Versioning and Variant extensions, an\n       application of the HTTP/1.1 protocol to version DAV resources.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Kaler, ed.                                          [Page 1]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n                              Table of Contents\n\n\n  VERSIONING AND VARIANT EXTENSIONS TO WEBDAV...............1\n\n  TABLE OF CONTENTS.........................................2\n\n  1.INTRODUCTION...........................................4\n  1.1. DAV Versioning and Variant Authoring................4\n  1.2. Relationship to DAV.................................4\n  1.3. Terms...............................................4\n  1.4. Notational Conventions..............................4\n\n  2.INTRINSIC VERSIONING...................................5\n  2.1. Overview............................................5\n  2.2. Discovery...........................................5\n   2.2.1.The OPTIONS Method................................5\n   2.2.2.Example: Options Discovery........................5\n  2.3. Automatic Versioning................................6\n  2.4. Collection Versioning...............................6\n  2.5. Mutable Properties..................................6\n  2.6. Resource Properties.................................6\n\n  3.BASIC VERSIONING.......................................7\n  3.1. Discovery...........................................8\n  3.2. Basic Versioning Headers............................8\n   3.2.1.New-Version.......................................9\n   3.2.2.Version-Id........................................9\n   3.2.3.Base-Version......................................9\n   3.2.4.Comment...........................................9\n   3.2.5.Checkin-Token....................................10\n  3.3. CHECKINOUT Method..................................11\n   3.3.1.Discovery........................................11\n   3.3.2.Checkout.........................................11\n   3.3.3.Checkin..........................................12\n   3.3.4.Undo Checkout....................................12\n   3.3.5.Enumeration......................................13\n  3.4. Default Version....................................13\n  3.5. Sharing............................................14\n  3.6. Resource History...................................14\n   3.6.1.Example..........................................14\n   3.6.2.Linear History...................................15\n   3.6.3.Full History.....................................15\n\n  4.RESOURCE BRANCHING....................................15\n  4.1. Discovery..........................................16\n  4.2. Branching Resources................................16\n  4.3. Derivation.........................................17\n\n  5.CONFIGURATIONS........................................17\n  5.1. Discovery..........................................18\n  5.2. Configuration Namespace............................18\n  5.3. Creating Configurations............................18\n  5.4. Configuration Properties...........................20\n\n\n\n  Kaler, ed.                                          [Page 2]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n  5.5. Headers............................................21\n   5.5.1.GET Example......................................21\n   5.5.2.COPY Example.....................................21\n  5.6. Deleting Configurations............................22\n  5.7. Default Configurations.............................22\n  5.8. Managing Configurations............................22\n   5.8.1.Adding Resources to a Configuration..............22\n   5.8.2.Removing Resources from a Configuration..........23\n   5.8.3.Synchronizing Configurations.....................23\n   5.8.4.Purging Configurations...........................24\n  5.9. Configuration Graphs...............................25\n   5.9.1.Example..........................................25\n   5.9.2.Configuration Derivation.........................25\n   5.9.3.Configuration Merge Graph........................26\n  5.10.Resolution Queues..................................26\n   5.10.1...........................................Discovery     26\n   5.10.2...............................Obtaining Resolutions     27\n   5.10.3.........................Processing Resolution Items     27\n\n  6.VERSION MAPPING.......................................28\n  6.1. Discovery..........................................28\n  6.2. Mapping Configurations.............................28\n  6.3. Mapping Resource Versions..........................29\n\n  7.MISCELLANEOUS FUNCTIONS...............................30\n  7.1. Destroy............................................30\n   7.1.1.Discovery........................................30\n   7.1.2.Usage............................................30\n   7.1.3.Headers..........................................30\n   7.1.4.Properties.......................................30\n  7.2. Keyword Expansion..................................31\n   7.2.1.Properties.......................................31\n\n  8.VARIANT AUTHORING.....................................31\n  8.1. Discovery..........................................31\n  8.2. Resource Properties................................32\n  8.3. Header Extensions..................................32\n  8.4. Default Variant....................................32\n\n  9.THE DAV VERSIONING GRAMMAR............................33\n\n  10. INTERNATIONALIZATION CONSIDERATIONS..................33\n\n  11. SECURITY CONSIDERATIONS..............................33\n\n  12. SCALABILITY..........................................33\n\n  13. AUTHENTICATION.......................................33\n\n  14. IANA CONSIDERATIONS..................................33\n\n  15. COPYRIGHT............................................33\n\n  16. INTELLECTUAL PROPERTY................................33\n\n\n  Kaler, ed.                                          [Page 3]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n  17. REFERENCES...........................................34\n\n  18. AUTHOR'S ADDRESSES...................................34\n\n  19. CHANGE HISTORY.......................................34\n\n\n  1. \r     INTRODUCTION\n\n\n  1.1. DAV Versioning and Variant Authoring\n\n       This document defines DAV Versioning and Variant Authoring\n       extensions, an application of HTTP/1.1 for handling resource\n       versioning in a DAV environment.  [DAVVERREQ] describes the\n       motivation and requirements for DAV Versioning.\n\n       DAV Versioning will minimize the complexity of clients so as to\n       facilitate widespread deployment of applications capable of\n       utilizing the DAV services.  As well, DAV Versioning supports a\n       rich level of versioning options and support for variant authoring.\n\n       DAV Versioning consists of:\n\n       - Automatic versioning support for HTTP/1.1-based clients,\n\n       - Basic versioning for DAV Versioning-aware clients,\n\n       - File branching for basic parallel development,\n\n       - Configuration support for sophisticated  parallel development,\n          and\n\n       - Variant support for mixed language environments.\n\n\n  1.2. Relationship to DAV\n\n       DAV Versioning relies on the resource and property model defined by\n       [WebDAV].  DAV Versioning does not alter this model.  Instead, DAV\n       Versioning allows clients to version and access DAV-modeled\n       resources and histories.\n\n\n  1.3. Terms\n\n       This draft uses the terms defined in [RFC2068], [WebDAV], and\n       [DAVVERREQ].\n\n\n  1.4. Notational Conventions\n\n       The augmented BNF used by this document to describe protocol\n       elements is exactly the same as the one described in Section 2.1 of\n       [RFC2068]. Because this augmented BNF uses the basic production\n       rules provided in Section 2.2 of [RFC2068], those rules apply to\n       this document as well.\n\n\n\n\n  Kaler, ed.                                          [Page 4]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n       \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\n       this document are to be interpreted as described in [RFC2119].\n\n\n  2. \r     INTRINSIC VERSIONING\n\n\n  2.1. Overview\n\n       The base level of versioning support defined by this specification\n       (intrinsic versioning) includes both automatic versioning and the\n       basic versioning properties defined for all resources.  To support\n       intrinsic versioning, servers MUST allow for versioning to occur\n       automatically whenever a resource is changed in any way and support\n       the properties defined in this section.\n\n\n  2.2. Discovery\n\n\n  2.2.1.    The OPTIONS Method\n\n       The OPTIONS method allows the client to discover if a resource\n       supports versioning.\n\n       The client issues the OPTIONS method against a resource named by\n       the Request-URI. This is a normal invocation of OPTIONS defined in\n       [RFC2068].\n\n       If a resource supports versioning, then the server MUST list\n       DAV:versioning in the OPTIONS response as defined by [RFC2068].\n\n\n  2.2.2.    Example: Options Discovery\n\n       This example shows that the server supports versioning on the\n       /somefolder resource.\n\n       >> Request\n\n       OPTIONS /somefolder/ HTTP/1.1\n       Connection: Close\n       Host: foobar.com\n       Content-Length: 0\n\n\n       >> Response\n\n       HTTP/1.1 200 OK\n       Date: Tue, 20 Jan 1998 20:52:29 GMT\n       Connection: close\n       Accept-Ranges: none\n       Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK\n       Public: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK\n       Allow-Extension: DAV:versioning\n\n\n\n  Kaler, ed.                                          [Page 5]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       Public-Extension: DAV:versioning\n       Content-Length: 0\n\n  2.3. Automatic Versioning\n\n       The DAV:autoversion property indicates if a resource is\n       automatically versioned when modified for any reason.  Resources\n       with automatic versioning allow HTTP/1.1 clients to have changes\n       versioned without explicit versioning commands.\n\n       Automatic versioning includes the following methods:\n\n       - Updates via PUT, MKCOL, COPY, MOVE, or DELETE\n\n       - Properties updates via PROPPATCH\n\n\n  2.4. Collection Versioning\n\n       Collections are versioned just like non-collection resources.\n\n       The DAV:autoversion property applies to methods on collections as\n       well.  However, this doesn\u2019t specify if a collection is versioned\n       when a contained resource changes.  The DAV:autocollectionversion\n       resource is used to indicate if a collection should be versioned\n       when a contained resource is versioned.\n\n\n  2.5. Mutable Properties\n\n       In general, all properties on a resource are immutable with respect\n       to versioning.  That is, when the property is changed, a new\n       version of the resource is created.  However, there are some\n       properties that MUST be immutable.  For example, security settings,\n       if stored as a property, MUST be mutable without creating a new\n       version.  To discover the mutable properties on a resource, the\n       DAV:mutableproperties property returns a comma-separated list of\n       properties that, if altered, will not create a new version.\n\n\n  2.6. Resource Properties\n\n       For resources that support versioning, the server MUST support the\n       following properties using the \"DAV:\" namespace.  Note that 0/1 is\n       used as a FALSE (0) / TRUE (1) indicator.\n\n       DAV:isversioned - 0/1 to indicate if the resource is versionable.\n       Note that servers can implement this as a read-only property.\n\n       DAV:autoversion - 0/1 to indicate if the resource is automatically\n       versioned when modified.  Note that servers can implement this as a\n       read-only property.\n\n       DAV:versionid - This is a read-only property that returns a URI for\n       this specific version of the resource.  Every version of a resource\n       will have a separate DAV:versionid.\n\n\n\n\n\n  Kaler, ed.                                          [Page 6]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       DAV:resourceid - This is a read-only property that returns a URI\n       for every unique resource independent of versions.  That is, all\n       versions of the resource have the same DAV:resourceid.\n\n       DAV:previousversionids - This is a read-only property that returns\n       the URI for the previous version of the resource.  An empty value\n       indicates that there are no previous versions.  Note that there\n       could be multiple previous versions.  If there are multiple\n       versions, they are returned as a comma-separated list.\n\n       DAV:nextversionids - This is a read-only property that returns the\n       URI for the next version of the resource.  An empty value indicates\n       that there is no next version.  Note that there could be multiple\n       next versions.  If there are multiple versions, they are returned\n       as a comma-separated list.\n\n       DAV:versionname - This property allows the specification of textual\n       names that refer to this version of the resource. If there are\n       multiple versions, each is returned in a separate DAV:versionname\n       tag.  The name MUST be unique for the resource.  That is, no two\n       versions of the same resource can have the same DAV:versionname.\n\n       DAV:autocollectionversion - This property\u2019s value (0/1) specifies\n       if a collection is automatically versioned when its contents\n       change.  That is, if /foo/bar.htm is versioned, is /foo/ versioned\n       as well.  Servers MAY implement this as a read-only property.\n\n       DAV:canautocollectionversion - This property\u2019s value (0/1)\n       specifies if the resource supports the ability to automatically\n       version collections when a contained resource changes.  This is a\n       read-only property.\n\n       DAV:mutableproperties - This property returns a comma-separated\n       list of properties that, if changed on this resource, will not\n       cause a new version to be created.\n\n       DAV:checkinid - This read-only property returns the checkin Id\n       associated with this version of the resource.\n\n\n  3. \r     BASIC VERSIONING\n\n       Servers that support DAV:versioning MUST also provide additional\n       versioning semantics for versioning-aware clients.  This section\n       describes these new semantics which include enhancements to\n       existing DAV methods, new headers, and a new versioning-specific\n       method.\n\n       Although the semantics can vary, most versioning systems support\n       the notion of indicating intent to modify a document and then\n       submission of the modified version.  Typically this involves some\n       form of locking (either shared or exclusive).  As well, many\n       systems support the ability to cancel a check-out or undo a recent\n       check-in.  These options are available to the owner or to the\n       Administrator.\n\n       Users can generally enumerate the current check-outs although they\n       may not be able to determine the user in all cases.  Likewise,\n       users can review check-ins to see the change history.  Most systems\n\n\n  Kaler, ed.                                          [Page 7]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       allow users to select different versions from the change history\n       and present a comparison of the versions.  Some systems allow the\n       user to track related files that are logically \"checked in\"\n       together.\n\n       It is important to note that everything is versioned.  For example,\n       when a property on a resource is changed, a new version of the\n       resource is created.\n\n       However, some clients may not wish to have new versions\n       automatically created.  For example, they are working on a version\n       and want to write the changes to the store and update them.  New\n       versions are created on request, not automatically (note that the\n       default behavior is actually up to the store).\n\n       Note that locks are not covered in this specification as they are\n       addressed by [WebDAV].\n\n\n  3.1. Discovery\n\n       Discovers of basic versioning support is as described above.\n       However, support for the CHECKINOUT method is discovered by\n       examining the support methods returned by the OPTIONs methos.\n\n       This example shows that the server supports versioning and the\n       CHECKINOUT method on the /somefolder resource.\n\n       >> Request\n\n       OPTIONS /somefolder/ HTTP/1.1\n       Connection: Close\n       Host: foobar.com\n       Content-Length: 0\n\n\n       >> Response\n\n       HTTP/1.1 200 OK\n       Date: Tue, 20 Jan 1998 20:52:29 GMT\n       Connection: close\n       Accept-Ranges: none\n       Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, CHECKINOUT\n       Public: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, CHECKINOUT\n       Allow-Extension: DAV:versioning\n       Public-Extension: DAV:versioning\n       Content-Length: 0\n\n  3.2. Basic Versioning Headers\n\n       The following sub-sections describe the new version headers that\n       MUST be supported for resources that support DAV:versioning.\n\n\n\n\n\n\n\n  Kaler, ed.                                          [Page 8]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n  3.2.1.    New-Version\n\n       It is possible that clients may wish to overwrite a versioned\n       resource rather than create a new version.  To indicate this,\n       clients specify the New-Version header with a T or F where T\n       indicates creation of a new version and F indicates overwrite.\n\n            New-Version = \"New-Version\" \":\" (\"F\" | \"T\")\n\n       Note that servers are not required to honor overwrite requests and\n       MUST return failure if they do not.  Servers MUST not allow non-tip\n       versions to be overwritten.\n\n\n  3.2.2.    Version-Id\n\n       The Version-Id header is used to identify a specific version of a\n       resource.  This header can be specified on all methods and\n       qualifiers the resource named in the method.  As well, this header\n       is included in all replies to indicate the version of the resource\n       used or created.\n\n       The URI specified MUST be a valid version URI for the resource.\n\n            Version-Id = \"Version-Id\" \":\" URI\n\n       This header can be used with collection resources when accessing\n       properties on the collection, however, servers are not required to\n       honor (or allow) this header when accessing the contents of a\n       collection resource.\n\n\n  3.2.3.    Base-Version\n\n       The Base-Version header is used to indicate the version of a\n       resource on which a change request is based. This can be included\n       with the following methods: PUT, PROPPATCH, MKCOL, COPY, MOVE, and\n       DELETE.\n\n       The Base-Version header is used to track merge history as well as\n       verification.  If the base version specified is not the latest\n       version, servers SHOULD fail the PUT request.  That is, clients can\n       not create a new version based on an older version (clients need to\n       branch the resource - refer to the chapter on resource branching).\n\n       The URI specified MUST be a valid version URI for the resource.\n\n            Base-Version = \"Base-Version\" \":\" URI\n\n  3.2.4.    Comment\n\n       The Comment header is used to indicate a user-specified comment for\n       the operation being requested.  Servers SHOULD track this\n       information.\n\n            Comment = \"Comment\" \":\" Text\n\n\n\n\n\n  Kaler, ed.                                          [Page 9]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n  3.2.5.    Checkin-Token\n\n       Clients may desire the ability to track a set of changes as a unit.\n       This header allows semantic grouping changes as well as the ability\n       operate on the entire collection of changes.\n\n       When a client modifies a resource (e.g. PROPPATCH, PUT, COPY, MOVE,\n       ...), the return header includes a resource for the change.  Clients\n       can use this identifier to refer to the change.  As well, clients\n       can also use the id on subsequent changes (e.g. PROPPATCH, PUT,\n       COPY, MOVE, ...) to allow the server to correlate the changes.\n\n       By default, a change operation will automatically \"close\" a checkin\n       id.  That is, no further changes are allowed using that checkin id.\n       Clients can request that the checkin id be kept alive using a\n       special header.\n\n       If a client specifies a correlation identifier using Checkin-Token\n       that was not returned by the server, the server MAY fail with 412.\n\n            Checkin-Token      = \"Checkin-Token\" \":\" URI\n            Keep-Checkin-Alive = \"Keep-Checkin-Alive\" \":\" (\"T\" | \"F\")\n\n       The correlation resource can then be used with PROPFIND, PROPPATCH,\n       DELETE, MOVE, and COPY.\n\n       The Checkin-Token URI is a resource in the checkin token\n       collection.  This URI can be obtained by accessing the\n       DAV:checkinroot property on a resource.\n\n       >>Request\n\n       PUT /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Keep-Checkin-Alive: T\n       Content-Type: text/html\n       Content-Length: xxxx\n       ...\n\n       >>Response\n\n       HTTP/1.1 200 OK\n       Checkin-Token: http://www.foobar.com/ci/DFDF3293289\n       Content-Length: 0\n\n       >>Request\n\n       PUT /foo/bing.htm HTTP/1.1\n       Host: www.foobar.com\n       Checkin-Token: http://www.foobar.com/ci/DFDF3293289\n       Content-Type: text/html\n       Content-Length: xxxx\n       ...\n\n       >>Response\n\n       HTTP/1.1 200 OK\n       Checkin-Token: http://www.foobar.com/ci/DFDF3293289\n       Content-Length: 0\n\n\n  Kaler, ed.                                         [Page 10]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n\n       Clients can enumerate all checkins using PROPFIND to obtain the\n       contents of the checkin root (DAV:checkinroot) collection.  Using\n       PROPFIND with the Checkin-Token URI, clients can enumerate the\n       resources in the checkin collection.\n\n\n  3.3. CHECKINOUT Method\n\n       For versioning-aware clients, the CHECKINOUT method allows them to\n       perform specific versioning operations.  The CHECKINOUT method is\n       directed at a specific URI and the body contains XML indicating the\n       action to take.\n\n       Note that the headers described above for GET and PUT can be used\n       with the CHECKINOUT method.\n\n\n  3.3.1.    Discovery\n\n       Discovery of this feature is determined by seeing if the resource\n       options include the CHECKINOUT method.\n\n\n  3.3.2.    Checkout\n\n       Using the CHECKINOUT method, clients can request resources to be\n       \"checked out\".  This involves creating a new version of a resource\n       that is not automatically versioned.  Checked out resources must be\n       checked in or aborted. The diagram below illustrates this process:\n\n           Versions of foo.htm:   V1\n\n           Checkout is performed: V1\n                                   |\n                                   +-> ChkOut\n\n           Checkin is performed:  V1 -> V2\n\n       The body XML indicates an optional checkout comment, an optional\n       user token, and an optional local resource value.  The server\n       returns a URI for the resource and a URI for the version\n       identifier.  PUTs should include these references.\n\n       >>Request\n\n       CHECKINOUT /foo/bar HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:checkout>\n          <D:comment>checkout comment</D:comment>\n          <D:usertoken>client-defined token</D:usertoken>\n          <D:localresource>file:c:\\foo\\bar</D:localresource>\n\n\n\n  Kaler, ed.                                         [Page 11]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       </D:checkout>\n\n       >>Response\n\n       HTTP/1.1 200 OK\n       Content-Type: text/xml\n       Content-Length: 0\n       Location: /foo/bar\n       Version-Id: VER:REEN4855\n\n  3.3.3.    Checkin\n\n       When the client has completed changes to a resource and wishes it\n       to become part of the version history, the client must check in the\n       resource.  This is performed using the CHECKINOUT method with\n       special body tags.\n\n       >>Request\n\n       CHECKINOUT /foo/bar HTTP/1.1\n       Host: www.foobar.com\n       Versoin-Id: VER:REEN4855\n       Comment: \"...\"\n       Content-Type: text/xml\n       Content-Length: xxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:checkin/>\n\n       >>Response\n\n       HTTP/1.1 204 CREATED\n       Content-Length: 0\n\n  3.3.4.    Undo Checkout\n\n       If a client chooses to cancel a checkout request, the CHECKINOUT\n       method is used with special body tags.\n\n       >>Request\n\n       DELETE /foo/bar HTTP/1.1\n       Host: www.foobar.com\n       Version-Id: VER:REEN4855\n       Content-Type: text/xml\n       Content-Length: 0\n\n       >>Response\n\n       HTTP/1.1 204 OK\n       Content-Length: 0\n\n\n\n\n\n\n\n\n  Kaler, ed.                                         [Page 12]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n  3.3.5.    Enumeration\n\n       Clients can enumerate the current checkouts to a resource using the\n       CHECKINOUT method.  The depth header indicates that number of\n       levels to include in the response.\n\n       The following tags can be used in the body request to limit\n       discovery:\n\n       - DAV:before - only select items before the specified date\n\n       - DAV:after - only select items after the specified date\n\n       - DAV:usertoken - only select items from the specified user\n\n       - DAV:localresource - only select items with the specified local\n          resource\n\n       The <DAV:enumcheckouts> tag is used to request enumeration of\n       checkouts.\n\n       >>Request\n\n       CHECKINOUT /foo/bar HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/html\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:enumcheckouts/>\n\n       >>Response\n\n       HTTP/1.1 200 OK\n       Content-Length: 0\n\n       TBD - need to fill in response (usertoken, localresource, ...)\n\n  3.4. Default Version\n\n       If a Version-Id header is not specified when referring to a\n       resource, then the tip (latest) version is used, unless a default\n       version has been identified.  To mark a specified version as the\n       default version, clients set the DAV:defaultversion property on the\n       resource to the specific version.  Note that servers MUST treat\n       this property special in that it doesn\u2019t create a new version of\n       the resource and it can be applied to older immutable versions.\n\n       >>Request\n\n       PROPPATCH /foo/bar HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/html\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:propertyset>\n\n\n\n  Kaler, ed.                                         [Page 13]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n          <D:set>\n            <D:defaultversion>VER:HT58GHDW49</D:defaultversion>\n          </D:set>\n       </D:propertyset>\n\n       >>Response\n\n       HTTP/1.1 200 OK\n       Content-Length: 0\n\n       Note that when this property is set to a blank value, the default\n       version is the tip (latest) version.\n\n       Collection resources CANNOT be set to a default version.\n\n       It should be noted that setting a default version may impact\n       automatic versioning.  If a client performs a PUT operation and\n       doesn\u2019t specify a Version-Id header, then servers MUST fail the PUT\n       operation if a default version exists.  This is because the client\n       may not be able to obtain the version that was PUT because of the\n       default version being in place.\n\n\n  3.5. Sharing\n\n       Many versioning systems today provide the ability to have a given\n       resource visible in multiple parts of the namespace.  In these\n       situations, a resource is shared.  That is, changes to the resource\n       are visible to all versions.\n\n       Sharing is handled by use of referential members.\n\n       Note that default versions (described above) are per namespace\n       share.  That is, separate shares can have different default\n       versions.\n\n\n  3.6. Resource History\n\n       Version history graphs of a resource are accessed via PROPFIND.\n       Note that servers MAY support multiple styles of history.  To\n       enumerate the supported history graphs, clients use PROPFIND and\n       the <DAV:enumgraphs> property.  The results indicate the different\n       graphs which can, themselves, be requested via PROPFIND.\n\n\n  3.6.1.    Example\n\n       >>Request\n\n       PROPFIND /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:propfind>\n\n\n\n  Kaler, ed.                                         [Page 14]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n          <D:enumgraphs/>\n       </D:propfind>\n\n       >>Response\n\n       TBD - need to fill in the response\n\n  3.6.2.    Linear History\n\n       Servers MUST support the <DAV:linearhistory> property.  This\n       enumerates the direct parent version history for a resource.\n\n       >>Request\n\n       PROPFIND /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Version-Id: VER:FHJRH3994\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:propfind>\n          <D:linearhistory/>\n       </D:propfind>\n\n       >>Response\n\n       TBD - need to fill in the response\n\n  3.6.3.    Full History\n\n       Servers MUST support the <DAV:fullhistory> property.  This\n       enumerates the full DAG history of a resource.\n\n       >>Request\n\n       PROPFIND /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:propfind>\n          <D:fullhistory/>\n       </D:propfind>\n\n       >>Response\n\n       TBD - need to fill in the response\n\n  4. \r     RESOURCE BRANCHING\n\n       For more sophisticated clients, basic resource branching is\n       required.  This section describes the basic branching support\n       defined by the versioning extensions.\n\n\n\n  Kaler, ed.                                         [Page 15]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       Resource branching means that for a given resource, the history is\n       not linear.  That is, there are different lines of decent.  The\n       diagram below illustrates this.\n\n           Version history     V1 -> V2 -> V3\n           Of foo.htm:          |\n                                +-> V1.1 -> V1.2\n                                      |\n                                      +-> V1.1.1\n\n       Individual resource branching is common in many versioning systems\n       today.  Project branching (configurations) are described in the\n       next section.  The version history for a resource MUST be a\n       directed acyclic graph (DAG).  Note that when a collection is\n       branched, the depth of the branch is infinity.  There is no way to\n       change this.\n\n\n  4.1. Discovery\n\n       Resource branching is optional for servers.  This example shows\n       that the server supports resource branching on the /somefolder\n       resource.\n\n       >> Request\n\n       OPTIONS /somefolder/ HTTP/1.1\n       Connection: Close\n       Host: foobar.com\n       Content-Length: 0\n\n\n       >> Response\n\n       HTTP/1.1 200 OK\n       Date: Tue, 20 Jan 1998 20:52:29 GMT\n       Connection: close\n       Accept-Ranges: none\n       Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, MKBRANCH\n       Public: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, MKBRANCH\n       Allow-Extension: DAV:versioning, DAV:branching\n       Public-Extension: DAV:versioning, DAV:branching\n       Content-Length: 0\n\n  4.2. Branching Resources\n\n       A resource is branched using the MKBRANCH method.  The resource to\n       be branched is specified as the target URI for the method.  The\n       reply includes a URI for the resource and a URI for the version\n       identifier.\n\n       >>Request\n\n       MKBRANCH /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/html\n\n\n  Kaler, ed.                                         [Page 16]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       Content-Length: 0\n\n       >>Response\n\n       HTTP/1.1 201 CREATED\n       Location: /foo/bar.htm\n       Version-Id: VER:DHFH558689\n       Content-Length: 0\n\n  4.3. Derivation\n\n       When clients use resource branching, they will likely need to\n       perform merge operations.  A merge is the process by which changes\n       from different versions are combined to produce a new version.  It\n       is likely that clients will want to track this semantic\n       information.  When the Derived-From header is specified on a PUT,\n       CHECKINOUT, or PROPPATCH method, it indicates the version (or\n       versions) from which the change is derived.\n\n            Derived-Item = URI\n            Derived-List = Derived-Item | (Derived-List \",\" Derived-Item)\n            Derived-From = \"Derived-From\" \":\" Derived-List\n\n       >>Request\n\n       PUT /foo/bar HTTP/1.1\n       Host: www.foobar.com\n       Derived-From: VER:FDHJ43058\n       Content-Type: text/html\n       Content-Length: xxxx\n\n       ...\n\n       >>Response\n\n       HTTP/1.1 200 OK\n       Content-Length: 0\n\n  5. \r     CONFIGURATIONS\n\n       Many clients require more sophisticated management and organization\n       of their versioned data.  For this reason, configuration support is\n       defined as part of this specification.\n\n       This specification defines two types of configurations:  static and\n       dynamic.  A static configuration is a named collection of specific\n       versions of selected resources.  A dynamic configuration is a\n       collection resources and their associated versions where the\n       contents changes as new versions are created.  Dynamic\n       configurations can also track all versions that have been part of\n       the configuration.\n\n       A configuration can be derived from another configuration.  That\n       is, the new configuration is based on the versions in the \"parent\"\n       configuration.  Optionally, derived configurations can\n       automatically inherit new versions in the parent configuration\n\n\n\n  Kaler, ed.                                         [Page 17]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       (assuming there are no conflicts).  However, a configuration can be\n       derived from at most one other configuration.\n\n\n  5.1. Discovery\n\n       Configuration support is optional for servers.  This example shows\n       that the server supports configurations on the /somefolder\n       resource.\n\n       >> Request\n\n       OPTIONS /somefolder/ HTTP/1.1\n       Connection: Close\n       Host: foobar.com\n       Content-Length: 0\n\n\n       >> Response\n\n       HTTP/1.1 200 OK\n       Date: Tue, 20 Jan 1998 20:52:29 GMT\n       Connection: close\n       Accept-Ranges: none\n       Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, CHECKINOUT\n       Public: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, CHECKINOUT\n       Allow-Extension: DAV:versioning, DAV:branching, DAV:configurations\n       Public-Extension: DAV:versioning, DAV:branching, DAV:configurations\n       Content-Length: 0\n\n  5.2. Configuration Namespace\n\n       Servers maintain configurations in a private portion of the\n       namespace.  The root of this namespace is determined by examining\n       the read-only DAV:configurationnamespace property.  All\n       configurations names MUST be unique on a server.  Using the\n       configuration namespace, clients can organize configurations\n       hierarchically, however, this is for discovery only.  That is, the\n       namespace path is NOT required to identify the configuration, only\n       its leaf name.  Note that positioning in the namespace DOES NOT\n       imply configuration derivation.\n\n       Each configuration can have a client-specified configuration name.\n       This is defined by the DAV:configurationname property on the\n       configuration resource. Note that the DAV:configurationname MUST be\n       unique.  That is, no other configuration can have the same\n       DAV:configurationname.\n\n\n  5.3. Creating Configurations\n\n       Clients create new configurations by issuing the MKCOL method\n       against the configuration namespace.  This requests the server to\n       create a new configuration.\n\n\n\n\n  Kaler, ed.                                         [Page 18]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       When a configuration is created, special tags can be used to define\n       the characteristics and relationships (e.g. derivations) for the\n       configuration.  The following table enumerates these tags.\n\n                 Tag                 Description\n\n            <DAV:configurationt This tag defines the type\n            ype>                of configuration:\n                xxx             DAV:Static or DAV:Dynamic.\n            </DAV:configuration\n            type>\n\n            <DAV:derivedfrom>\"x This tag allows the client\n            xx\"                 to specify a URI to\n            </DAV:derivedfrom>  identify another\n                                 configuration from which\n                                 this new configuration is\n                                 to be derived.\n\n            <DAV:inheritancetyp The configuration\n            e>                  automatically inherits\n                DAV:Auto        changes from its derived-\n            </DAV:inheritancety from configuration.\n            pe>                 Conflicts are recorded in\n                                 resolution queues (see\n                                 later section).\n\n            <DAV:inheritancetyp The configuration inherits\n            e>                  changes from its derived-\n                DAV:Manual      from configuration, but\n            </DAV:inheritancety they are not automatically\n            pe>                 inserted into the\n                                 configuration. Instead\n                                 they are recorded in\n                                 resolution queues (see\n                                 later section).\n\n            <DAV:inheritancetyp The configuration is a\n            e>                  snapshot of the current\n                DAV:None        versions in the derived-\n            </DAV:inheritancety from configuration.  There\n            pe>                 is no inheritance of\n                                 changes.  This is the\n                                 default type if no type is\n                                 specified.\n\n            <DAV:basetime>\"xxx\" The configuration is based\n            </DAV:basetime>     on the current versions in\n                                 the derived-from\n                                 configuration at the\n                                 indicated time.  Note that\n                                 use of this tag is\n                                 incompatible with DAV:Auto\n                                 inheritance types and\n                                 servers MUST return an\n                                 error.\n\n\n\n  Kaler, ed.                                         [Page 19]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n\n       The example below illustrates creating a new configuration that is\n       derived from, and auto-inherits another configuration.  For this\n       example, the root of the configuration namespace has been\n       determined to be /cfgs.\n\n       >>Request\n\n       MKCOL /cfgs/ HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:createconfiguration>\n          <D:configurationtype>Dynamic</D:configurationtype>\n\n       <D:derivedfrom>http://www.foobar.com/cfgs/DDEJRJ445</D:derivedfrom>\n          <D:inherit>Auto</D:inherit>\n       </D:createconfiguration>\n\n       >>Response\n\n       HTTP/1.1 201 Created\n       Location: http://www.foobar.com/cfgs/RYURUS99009\n       Content-Length: 0\n\n  5.4. Configuration Properties\n\n       The standard PROPFIND and PROPPATCH methods can be used on the\n       configuration resource to get and set properties on a\n       configuration.  Servers MUST provide configuration properties if\n       configurations are supported.  The following list identifies pre-\n       defined properties that MUST be supported:\n\n       DAV:configurationnamespace - The URI for the base of the\n       configuration namespace. This is a read-only property.\n\n       DAV:configurationtype - The type of the configuration.  Servers can\n       choose to make this a read-only property.\n\n       DAV:derivedfrom - The configuration from which the configuration is\n       derived.  Servers can choose to make this a read-only property.\n\n       DAV:inheritancetype - The type of inheritance for the\n       configuration.  Servers can choose to make this a read-only\n       property.\n\n       DAV:basetime - The base time used to create the configuration.\n       Servers can choose to make this a read-only property.\n\n       DAV:configurationame - A user-defined name for the configuration.\n       This name MUST be unique for all configurations.\n\n       DAV:configurationroots - This property returns a comma-separated\n       list of URL roots that should be checked (using PROPFIND) for\n       contents within this configuration.  Note this property is needed\n\n\n\n  Kaler, ed.                                         [Page 20]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       in case the server implements DAV support at various points in the\n       server namespace.\n\n\n  5.5. Headers\n\n       To support configurations, two new headers are introduced that can\n       be used with a variety of the DAV and HTTP methods.  The following\n       list identifies these headers:\n\n       Configuration-Id - This header is used to identify the\n       configuration that is to be used when referencing a resource.  This\n       header is generally used in combination with Version-Id to identify\n       the versioning collection to use.  This header can be combined to\n       set default versions per-configuration, enumeration of\n       checkouts/checkins against a specific configuration, etc.\n\n            Configuration-Id = \"Configuration-Id\" \":\" URI\n\n       Target-Configuration - This header is used to specify a target\n       configuration when dealing with cross-configuration operations.\n       For example, resources can be copied from one configuration to\n       another using the Configuration-Id and Target-Configuration headers\n       with the COPY method.\n\n            Target-Configuration = \"Target-Configuration\" \":\" URI\n\n       Derived-From - When configurations are support, the Derived-From\n       header is extended.  This header is used to identify the derivation\n       for changes (generally as part of a client-based merge operation).\n       Clients can include configuration names in the event that a change\n       is derived from resources in a different configuration.  In this\n       case, clients include a derivation pair (configuration, version)\n       instead of just a version.  If no configuration is specified, the\n       configuration of the target resource is used.\n\n            Derived-Item = URI | (\"(\" URI \",\" URI \")\")\n            Derived-List = Derived-Item | (Derived-List \",\" Derived-Item)\n            Derived-From = \"Derived-From\" \":\" Derived-List\n\n  5.5.1.    GET Example\n\n       >>Request\n\n       GET /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Configuration-Id: /cfgs/DFEE2034\n       Version-Id: VER:JKGRKJ9094\n       Content-Length: 0\n\n  5.5.2.    COPY Example\n\n       >>Request\n\n       COPY /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Destination: http://www.foobar.com/foo/bar.htm\n\n\n\n  Kaler, ed.                                         [Page 21]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       Depth: infinity\n       Configuration-Id: /cfgs/DFEE2034\n       Target-Configuration: /cfgs/FKJLE3454\n       Content-Type: text/xml\n       Content-Length: xxx\n\n  5.6. Deleting Configurations\n\n       To delete a configuration, use the location returned from the\n       configuration creation.  Note that servers SHOULD NOT delete a\n       configuration if other configurations are derived from it.\n\n       >>Request\n\n       DELETE /cfgs/RYURUS99009 HTTP/1.1\n       Host: www.foobar.com\n       Content-Length: 0\n\n  5.7. Default Configurations\n\n       Clients can establish a default configuration that is to be used if\n       clients do not specify a configuration.  To do this, clients set a\n       property on the configuration namespace root collection identifying\n       the default configuration.\n\n       >>Request\n\n       PROPPATCH /cfgs/ HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:propertyupdate>\n          <D:set>\n            <D:prop>\n\n          <D:defaultconfiguration>/cfgs/RYURUS99009</D:defaultconfiguration\n       >\n            </D:prop>\n          </D:set>\n       </D:propertyupdate>\n\n  5.8. Managing Configurations\n\n       In order to manage a configuration, clients need to be able to\n       populate, synchronize, merge, and purge the contents of a\n       configuration.\n\n\n  5.8.1.    Adding Resources to a Configuration\n\n       Resources are added to a configuration using the COPY method.\n\n       >>Request\n\n\n\n  Kaler, ed.                                         [Page 22]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       COPY /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Depth: infinity\n       Configuration-Id: /cfgs/DFEE2034\n       Target-Configuration: /cfgs/ERRJ3440\n       Content-Type: text/xml\n       Content-Length: xxx\n\n  5.8.2.    Removing Resources from a Configuration\n\n       Resources are removed from a configuration using the DELETE.  The\n       target URI indicates the resource to delete and the Configuration-\n       Id header to identify the configuration.  The Depth header can be\n       used to remove collection contents.\n\n       >>Request\n\n       DELETE /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Depth: infinity\n       Configuration-Id: /cfgs/DFEE2034\n       Content-Type: text/xml\n       Content-Length: 0\n\n  5.8.3.    Synchronizing Configurations\n\n       In some scenarios, clients are working on separate configurations\n       to keep themselves isolated from other team members.  However, they\n       occasionally need to synchronize their configuration with the\n       derived-from configuration so that they don\u2019t get too far out of\n       synchronization.  As well, changes (or entire configurations) can\n       be copied from one configuration to another.  Both operations are\n       performed using the COPY method and special body tags.\n\n       Clients can request that specific resources are copied by including\n       the resource tag.  If no resources are specified, then all\n       resources are copied.\n\n       The example below shows the synchronization of one configuration\n       against another.  All resources are synchronized.\n\n       >>Request\n\n       COPY /cfgs/DHFHR99392 HTTP/1.1\n       Host: www.foobar.com\n       Destination: http://www.foobar.com/cfgs/RRURU329049\n       Content-Type: text/xml\n       Content-Length: xxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:configurationsync/>\n\n       The example below shows the synchronization of one configuration\n       against another.  The specified resources are synchronized to the\n       indicated time.\n\n\n\n  Kaler, ed.                                         [Page 23]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       >>Request\n\n       COPY /cfgs/DHFHR99392 HTTP/1.1\n       Host: www.foobar.com\n       Destination: http://www.foobar.com/cfgs/RRURU329049\n       Content-Type: text/xml\n       Content-Length: xxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:configurationsync>\n          <D:resource>/foo/bar.htm</resource>\n          <D:resource>/bing/bop.htm</resource>\n          <D:basetime>...</D:basetime>\n       </D:configurationsync>\n\n       A synchronization request could result in conflicts.  By default,\n       if conflicts exist, the synchronization fails and the conflicts are\n       returned (as shown below). To override, clients should include the\n       <DAV:override/> tag.  This tag indicates that the synchronization\n       should do as much as possible and return any conflicts.\n\n       >>Response\n\n       TBD - show failure response\n       ...\n       <D:multistatus>\n          <D:response>\n            <D:href> http://www.foobar.com/foo/bar.htm</D:href>\n            <D:conflict>\n               <D:conflictid>VER:DJHFH443</D:conflictid>\n               <D:baseversion>VER:DJHFH443</D:baseversion>\n               <D:newversion>VER:FDFEE55544</D:newversion>\n            </D:conflict>\n          <D:response>\n          ...\n       </D:multistatus>\n       ...\n\n       The sample response above shows that each conflict includes and ID\n       and a reference to the resource in conflict.  Servers MAY choose to\n       restrict configurations until conflicts have been resolved.  To\n       inform the server that a conflict has been resolved, clients should\n       include a Conflict-ID header on PUT, PROPPATCH, etc. methods\n       specifying the ID returned in the synchronization response.\n\n            Conflict-ID = \"Conflict-ID\" \":\" URI\n\n  5.8.4.    Purging Configurations\n\n       Purging a configuration means to reduce the number of versions in a\n       dynamic configuration.  This is performed by extending the DELETE\n       method.  In the example below, all but the latest three versions\n       are purged from a dynamic configuration.\n\n       >>Request\n\n\n\n  Kaler, ed.                                         [Page 24]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       DELETE /cfgs/BHFR59593 HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:purgeset>\n          <D:purge>\n            <D:resource>/foo/bar.htm<D:keep>3</D:keep></D:resource>\n          </D:purge>\n       </D:purgeset>\n\n  5.9. Configuration Graphs\n\n       Version history and configuration dependency graphs are accessed\n       via PROPFIND.  Note that servers MAY support multiple styles of\n       history and dependency.  To enumerate the supported history graphs,\n       clients use PROPFIND and the <DAV:enumgraphs> property.  The result\n       indicate the different graphs which can, themselves, be requested\n       via PROPFIND.\n\n\n  5.9.1.    Example\n\n       >>Request\n\n       PROPFIND /cfgs/FHJRH3994 HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:propfind>\n          <D:enumgraphs/>\n       </D:propfind>\n\n       >>Response\n\n       TBD - need to fill in the response\n\n  5.9.2.    Configuration Derivation\n\n       Servers MUST support the <DAV:configurationderivation> property.\n       This enumerates the full derivation of a resource.\n\n       >>Request\n\n       PROPFIND /cfgs/BHFR59593 HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n\n\n\n  Kaler, ed.                                         [Page 25]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       <D:propfind>\n          <D:configurationderivation/>\n       </D:propfind>\n\n       >>Response\n\n       TBD - need to fill in the response\n\n  5.9.3.    Configuration Merge Graph\n\n       Servers SHOULD support the <DAV:configurationmerge> property.  This\n       enumerates the derivation of a configuration including merges from\n       one configuration to another.\n\n       >>Request\n\n       PROPFIND /cfgs/BHFR59593 HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:propfind>\n          <D:configurationmerge/>\n       </D:propfind>\n\n       >>Response\n\n       TBD - need to fill in the response\n\n  5.10.     Resolution Queues\n\n       When configurations inherit, there is the potential for conflicts.\n       Servers have the option to help clients manage these conflicts.\n       However, if they do not, then servers MUST return an error if the\n       result of the operation would result in a conflict.\n\n       Servers that help resolve conflicts track and maintain lists of\n       issues that need to be resolved as a result of actions.  These\n       lists are referred to as resolution queues.  Clients can request\n       the resolution issues and react accordingly.  Note that the server\n       only manages the list.  That is, the client is responsible for\n       resolving the issue (or deciding not to) and then removing the\n       resolution item.\n\n\n  5.10.1.   Discovery\n\n       Resolution queue support is optional for servers.  This example\n       shows that the server supports resolution queues on the\n       /cfgs/DFEE2034 configuration.\n\n       >> Request\n\n       OPTIONS /cfgs/DFEE2034 HTTP/1.1\n       Connection: Close\n       Host: foobar.com\n\n\n  Kaler, ed.                                         [Page 26]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       Content-Length: 0\n\n\n       >> Response\n\n       HTTP/1.1 200 OK\n       Date: Tue, 20 Jan 1998 20:52:29 GMT\n       Connection: close\n       Accept-Ranges: none\n       Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, CHECKINOUT\n       Public: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, CHECKINOUT\n       Allow-Extension: DAV:versioning, DAV:configurations, DAV:resolution\n       Public-Extension: DAV:versioning, DAV:configurations,\n       DAV:resolution\n       Content-Length: 0\n\n  5.10.2.   Obtaining Resolutions\n\n       Conflicts can arise against any resource, however, they are always\n       associated with a configuration.  Pending resolutions items are\n       obtained by examining the resolution queue for a configuration.\n       The resolution queue is actually a configuration-specific\n       collection in the DAV namespace.  The collection resource\n       identifying the resolution queue for a configuration is obtained\n       via the DAV:resolutionqueue property on the configuration.  To\n       enumerate the pending resolutions, clients use PROPFIND to obtain\n       the resources within the collection.\n\n       Each resource within the collection represents a separate\n       resolution queue item and are named such that a standard ANSI sort\n       on the resource name will ensure correct temporal ordering.\n\n\n  5.10.3.   Processing Resolution Items\n\n       Clients can GET the contents of a resolution item.  This is an XML\n       document that describes the action that caused the resolution item\n       to be created.  For example:\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:resolutionitem>\n          <D:resolutionid>http://foobar.com/reso/ZZZZ3493</D:resolutionid>\n          <D:resource>http:/foo/bar.htm</D:resource>\n          <D:newversion>DAV:FDFEE55544</D:newversion>\n       </D:resolutionitem>\n\n\n       Once a client has resolved an issue (or decided to ignore it), the\n       client is responsible for canceling the resolution item.  This is\n       done using the DELETE method on the resolution item.\n\n       >>Request\n\n       DELETE http://foobar.com/reso/ZZZZ3493 HTTP/1.1\n       Host: www.foobar.com\n\n\n  Kaler, ed.                                         [Page 27]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       Content-Type: text/xml\n       Content-Length: 0\n\n  6. \r     VERSION MAPPING\n\n       This specification defines headers to specify configurations and\n       resource versions.  However, there are times when clients require a\n       single URI for when working against configurations or versions.\n       Version mapping support allows servers to create namespaces that\n       map to configurations and versions.\n\n       Note that mappings are dynamic.  That is, as resources are added,\n       removed, and modified, the changes are reflected in any active\n       maps.\n\n       TBD - Should maps have timeouts like locks?\n\n\n  6.1. Discovery\n\n       Version mapping support is optional for servers.  This example\n       shows that the server supports version mapping on the\n       /cfgs/DFEE2034 configuration.\n\n       >> Request\n\n       OPTIONS /cfgs/DFEE2034 HTTP/1.1\n       Connection: Close\n       Host: foobar.com\n       Content-Length: 0\n\n\n       >> Response\n\n       HTTP/1.1 200 OK\n       Date: Tue, 20 Jan 1998 20:52:29 GMT\n       Connection: close\n       Accept-Ranges: none\n       Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, MAP\n       Public: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, MAP\n       Allow-Extension: DAV:mapping\n       Public-Extension: DAV:mapping\n       Content-Length: 0\n\n  6.2. Mapping Configurations\n\n       The MAP method is used to create server namespaces based on a\n       configuration.  When a configuration is mapped to a new namespace,\n       all elements within the configuration can be directly accessed\n       within the namespace without requiring the configuration to be\n       identified in the header.\n\n       In the example below, a new namespace is created for accessing the\n       contents of the /cfgs/DFEE2034 configuration.\n\n       >> Request\n\n\n\n  Kaler, ed.                                         [Page 28]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       MAP /cfgs/DFEE2034 HTTP/1.1\n       Connection: Close\n       Host: foobar.com\n       Content-Length: 0\n\n\n       >> Response\n\n       HTTP/1.1 201 CREATED\n       Location: http://foobar.com/map/DFEE2034/\n       Context-Length: 0\n\n  6.3. Mapping Resource Versions\n\n       The MAP method is also used to create server namespaces based on a\n       resource\u2019s versions.  When a resource is mapped, its version\n       history within the configuration is made available without\n       requiring the Version-Id header.  Within the mapped namespace, a\n       hierarchy is created for the versions.  A collection is created for\n       each version which contains the document and collections for\n       derived from versions.  The diagrams below illustrate two possible\n       hierarchies.  The left diagram illustrates basic linear versioning.\n       The right diagram illustrates a hierarchy with branched resources.\n\n                  V1                  V1\n                  |                   |\n                  +----+              +----+--------+\n                  |    |              |    |        |\n                  V2   bar.htm        V2   bar.htm  V1.1\n                  |                   |             |\n                  +----+              +----+        +-----+\n                  |    |              |    |        |     |\n                  V3   bar.htm        V3   bar.htm  V1.2  bar.htm\n                  |                   |             |\n                  bar.htm             bar.htm       bar.htm\n\n\n       In the example below, a new namespace is created for accessing the\n       versions of the /foo/bar.htm resource in the /cfgs/DFEE2034\n       configuration.\n\n       >> Request\n\n       MAP /foo/bar.htm HTTP/1.1\n       Connection: Close\n       Host: foobar.com\n       Configuration-Id: /cfgs/DFEE2034\n       Content-Type: text/xml\n       Content-Length: xxx\n\n\n       >> Response\n\n       HTTP/1.1 201 CREATED\n       Location: http://foobar.com/map/DFEE2034/\n       Context-Length: 0\n\n\n\n\n  Kaler, ed.                                         [Page 29]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n  7. \r     MISCELLANEOUS FUNCTIONS\n\n       The following sub-sections detail miscellaneous versioning\n       functions.\n\n\n  7.1. Destroy\n\n       Many version management systems use tombstones to note deleted\n       items.  These systems also support the ability to permanently\n       destroy tombstones for an object.  The DESTROY method provides this\n       functionality and servers SHOULD support it, but servers are not\n       required to implement it.  Servers MUST return an error for DESTROY\n       requests that are not honored.\n\n\n  7.1.1.    Discovery\n\n       Discovery of this feature is determined by seeing if the resource\n       options include the DESTROY method.\n\n\n  7.1.2.    Usage\n\n       The DESTROY method is used against a specific resource to\n       permanently remove it from the server.  This is a namespace level-\n       operation.  That is, all resources matching the specified URI are\n       destroyed.\n\n       >>Request\n\n       DESTROY /foo/bar/x.cpp HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n  7.1.3.    Headers\n\n       Clients may chose to display deleted but not destroyed objects\n       however they choose.  The header keyword Show-Deleted is used to\n       indicate if deleted items should be included in the GET request.\n       By default, they are not.  Inclusion of \"Show-Deleted: Y\" indicates\n       that deleted resources should be included.  Using \"Show-Deleted: O\"\n       indicates that only resources that have been deleted should be\n       returned.  Using \"Show-Deleted: N\" indicates that deleted resources\n       shouldn\u2019t be returned.\n\n            Show-Deleted = \"Show-Deleted\" \":\" (\"Y\" | \"N\" | \"O\")\n\n  7.1.4.    Properties\n\n       DAV:isdeleted - A 0/1 property where 1 indicates that the resource\n       has been deleted.\n\n\n\n\n\n\n  Kaler, ed.                                         [Page 30]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n  7.2. Keyword Expansion\n\n       A common feature of version control systems is to allow keyword\n       expansion.  That is, the resource is automatically annotated with\n       specific information by the server.  Servers SHOULD implement this\n       functionality, but are not required to do so.\n\n       There currently exist a number of version control systems that\n       support keyword expansion in a unique fashion.  Consequently it is\n       unlikely that a unified definition of the expansions and expansion\n       symbols can be defined.  This protocol provides a mechanism for\n       discovering the supported expansions for a resource and the\n       associated expansion symbols.\n\n       This protocol does not specify if keyword expansion occurs on GET\n       or PUT - that is up to each server.  Nor is there a requirement for\n       the keywords that must be supported.  This is a per-resource list.\n\n       TBD - give example\n\n\n  7.2.1.    Properties\n\n       DAV:expansionavailable -indicates if a resource supports expansion\n       (1) or doesn\u2019t (0)\n\n       DAV:expansionsymbols - a read-only property indicating a comma-\n       separated list of the expansion symbols available for a resource\n\n       DAV:expansionsused - a read-only property indicating a comma-\n       separated list of the keyword expansions in use by a specific\n       resource\n\n\n  8. \r     VARIANT AUTHORING\n\n       For sites that maintain multi-language variations of resources,\n       variant authoring is important. Servers SHOULD support language\n       variants, but are not required to do so.\n\n       Language variants are treated as different \"versions\" of a\n       resource.  That is, clients request a resource and indicate which\n       language variant is desired.  Servers take the request and map it\n       to the closest match.\n\n       TBD - need to address accept-type and what else?\n\n\n  8.1. Discovery\n\n       Variant authoring support is optional for servers.  This example\n       shows that the server supports variant authoring on the /somefolder\n       resource.\n\n       >> Request\n\n       OPTIONS /somefolder/ HTTP/1.1\n       Connection: Close\n       Host: foobar.com\n       Content-Length: 0\n\n\n  Kaler, ed.                                         [Page 31]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n\n       >> Response\n\n       HTTP/1.1 200 OK\n       Date: Tue, 20 Jan 1998 20:52:29 GMT\n       Connection: close\n       Accept-Ranges: none\n       Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, CHECKINOUT\n       Public: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,\n       MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, CHECKINOUT\n       Allow-Extension: DAV:variants\n       Public-Extension: DAV:variants\n       Content-Length: 0\n\n  8.2. Resource Properties\n\n       Every resource has the following read-only property:\n\n       DAV:language-variant - This specifies the language variant\n       associated with the resource.\n\n\n  8.3. Header Extensions\n\n       The header qualifier Accept-Language allows clients to specify\n       language variants they desire.  When this qualifier is present on a\n       GET request, the client specifies the desired variants.  Servers\n       take this under advisement, but are not required to return a\n       variant of the requested type.\n\n\n       GET /foo.htm HTTP/1.1\n       Host: www.foobar.com\n       Accept-Language: de, en\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       When resources are sent to the server in a PUT request, the client\n       specifies the language variant of the resource using the header tag\n       Content-Language.\n\n\n       PUT /foo.htm HTTP/1.1\n       Host: www.foobar.com\n       Content-Language: de\n       Content-Type: text/xml\n       Content-Length: xxxx\n       ...\n\n  8.4. Default Variant\n\n       For a given resource, clients can establish the default language\n       variant that is to be used if clients do not request a specific\n       language variant.\n\n\n\n  Kaler, ed.                                         [Page 32]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n       In the example below, the default variant for /foo/bar.htm is set\n       to German.\n\n\n       PROPPATCH /foo/bar.htm HTTP/1.1\n       Host: www.foobar.com\n       Content-Type: text/xml\n       Content-Length: xxxx\n\n       <?xml version=\"1.0\" ?>\n       <?xml:namespace ns=\"DAV:\" prefix=\"D\" ?>\n       <D:propertyset>\n          <D:set>\n            <D:defaultlanguage>de</D:defaultlanguage>\n          </D:set>\n       </D:propertyset>\n\n  9. \r     THE DAV VERSIONING GRAMMAR\n\n       To be supplied - Describe and detail the DTDs\n\n\n  10.  INTERNATIONALIZATION CONSIDERATIONS\n\n       To be supplied.\n\n\n  11.  SECURITY CONSIDERATIONS\n\n       To be supplied.\n\n\n  12.  SCALABILITY\n\n       To be supplied.\n\n\n  13.  AUTHENTICATION\n\n       Authentication mechanisms defined in WebDAV will also apply to DAV\n       Versioning.\n\n\n  14.  IANA CONSIDERATIONS\n\n       This document uses the namespace defined by [WebDAV] for XML\n       elements.  All other IANA considerations mentioned in [WebDAV] also\n       applicable to DAV Versioning.\n\n\n  15.  COPYRIGHT\n\n       To be supplied.\n\n\n  16.  INTELLECTUAL PROPERTY\n\n       To be supplied.\n\n\n  Kaler, ed.                                         [Page 33]\n\f\n\n\n  INTERNET-DRAFT       WebDAV Versioning   September 28, 1998\n\n\n\n  17.  REFERENCES\n\n       [DAVVERREQ] TBD, \"Requirements for DAV Versioning and Variant\n       Authoring\", TBD, internet-draft, work-in-progress, draft-webdav-\n       versioning-requirements-##.txt\n\n       [Kaler] C. Kaler, \"Versioning Extensions for WebDAV\", September\n       1998, internet-draft, work-in-progress, draft-kaler-webdav-\n       versioning-00.\n\n        [RFC2068] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and T.\n       Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2068,\n       U.C. Irvine, DEC, MIT/LCS, January 1997.\n\n       [RFC2119] S. Bradner, \"Key words for use in RFCs to Indicate\n       Requirement Levels.\" RFC 2119, BCP 14. Harvard University. March,\n       1997.\n\n        [WebDAV] Y. Goland, E.J. Whitehead, A. Faizi, S.R. Carter, D.\n       Jenson, \"Extensions for Distributed Authoring on the World Wide\n       Web\", April. 1998, internet-draft, work-in-progress, draft-ietf-\n       webdav-protocol-08.\n\n       [White] E.J. Whitehead, \"A Web Versioning Protocol\", June 1998,\n       internet-draft, work-in-progress, draft-whitehead-webdav-\n       versioning-00.\n\n\n  18.  AUTHOR'S ADDRESSES\n\n       Christopher Kaler, Editor\n       Microsoft\n       One Microsoft Way\n       Redmond WA, 9085-6933\n       Email:ckaler@microsoft.com\n\n       E. James Whitehead, Jr.\n       Dept. of Information and Computer Science\n       University of California, Irvine\n       Irvine, CA 92697-3425\n       Email: ejw@ics.uci.edu\n\n       TBD - list all members of the working group\n\n  19.  CHANGE HISTORY\n\n\n       Sep 28, 1998\n\n       Initial Draft based on [White] and [Kaler].\n\n\n\n\n\n\n\n\n\n  Kaler, ed.                                         [Page 34]\n\f", "encoding": "Windows-1252"}