{"url": "https://www.ics.uci.edu/~irani/f13-6N/Labs/Lab4.shtml", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n xmlns:v=\"urn:schemas-microsoft-com:vml\"\n xmlns=\"http://www.w3.org/TR/REC-html40\">\n<head>\n<!-- saved from url=(0055)http://www.math.ucsd.edu/~math20f/Fall/Lab7S/Lab7S.html -->\n  <title>Eigenvalues, Determinants and Diagonalization</title>\n  <meta http-equiv=\"Content-Type\"\n content=\"text/html; charset=ISO-8859-1\">\n  <meta content=\"Microsoft FrontPage 6.0\" name=\"GENERATOR\">\n</head>\n<body bgcolor=\"D4E9D4\">\n<center>\n<h1>4.&nbsp; Eigenvalues, Determinants and Diagonalization</h1>\n\n<p align=\"center\"><b><font size=\"4\">Due: December 4, 2013</font></b></p>\n</center>\n<p align=\"center\"><big>&sect;4.1 Introduction</big>&nbsp;&nbsp;&nbsp; </p>\n<p>&nbsp;&nbsp;&nbsp; Eigenvalues and determinants reveal quite a bit\nof information about a matrix.&nbsp; In this lab we will learn how to\nuse MATLAB to compute the eigenvalues, eigenvectors, and the\ndeterminant of a matrix.&nbsp; We will also learn about diagonalization\nand how it can be applied to study certain problems in population\ndynamics.</p>\n<p align=\"center\"><big>&sect;4.2 Determinants</big></p>\n<p>&nbsp;&nbsp;&nbsp; As you should be aware by now, there is a nice\nformula for calculating the determinant of a 2x2 matrix.&nbsp; Even the\n3x3 case is not that difficult.&nbsp; But as matrix size increases so\ndoes the complexity of calculating determinants.&nbsp; This is where\nMATLAB, or any other computer algebra program, comes in.</p>\n<p><font color=\"#6600cc\"><b><small><font size=\"+1\"><small>Example 4.1</small></font></small></b></font></p>\n<p>&nbsp; Let's start by entering the following matrices into\nMATLAB.&nbsp; (You'll need to do this before proceeding with the rest\nof the example.)</p>\n<p align=\"center\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\">\n<img style=\"border: 0px solid ; width: 434px; height: 119px;\" alt=\"\"\n src=\"Lab4_Files/image002.gif\"></span></p>\n<p>&nbsp;&nbsp;&nbsp; To compute the determinants of these matrices we\nare going to use the command <tt><font color=\"#990000\">det()</font></tt>.&nbsp;\nThat\nis, to compute the determinant of A we type the following</p>\n<p><tt>&gt;&gt; <font color=\"#990000\">det(A)</font></tt></p>\nMATLAB gives us 76 as the answer.&nbsp; Similarly we get\n<p><tt>&gt;&gt; <font color=\"#990000\">det(B)</font></tt> </p>\n<p><tt>&nbsp;&nbsp;&nbsp; ans =\n</tt></p>\n<p><tt>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 48</tt></p>\n&nbsp;\n<table width=\"100%\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\"\n height=\"146\">\n  <tbody>\n    <tr>\n      <td colspan=\"2\" width=\"200\" height=\"1\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><b><font\n color=\"#009900\">Exercise 4.1</font></b></span></td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" height=\"113\"><font color=\"#009900\"><b>(a)</b></font>&nbsp;\nUse\nMATLAB to compute the determinants of the following matrices:\n      <p>&nbsp;<b>A</b> + <b>B</b>, <b>A</b> - <b>B</b>, <b>AB</b>,\n      <b>A</b><sup>-1</sup>, <b>B</b><sup>T</sup></p>\n      <p>Recall: In MATLAB the transpose of a matrix is denoted with an\napostrophe; i.e. <span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>B</b><sup>T</sup></span>\nis given by the command</p>\n      <p>&gt;&gt;<tt><font color=\"#990000\"> B'</font></tt></p>\n      </td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" height=\"37\"><font color=\"#009900\"><b>(b)</b></font>&nbsp;\nWhich\nof the above matrices are NOT invertible?&nbsp; Explain your\nreasoning.</td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" height=\"37\"><b><font color=\"#009900\">(c)</font></b>&nbsp;\nNow\nwe know the determinants of <b>A</b> and <b>B</b>, but suppose\nthat we lost our original matrices <b>A</b> and <b>B</b>.&nbsp; Which\nof the determinants in part (a) will we still be able to recover, even\nwithout having <b>A</b> or <b>B</b> at hand?&nbsp; Explain your\nreasoning.</td>\n    </tr>\n  </tbody>\n</table>\n<p><font color=\"#ff6600\"><b><small><font size=\"+1\"><small>Remark\n4.1&nbsp; </small></font></small></b></font>The main use of\ndeterminants in this class relates to the idea of invertibility.&nbsp;\nWhen you use MATLAB for that purpose, you have to understand that the\nprogram introduces rounding errors.&nbsp; Therefore, there is a\npossibility that a matrix may appear to have zero determinant and yet\nbe invertible.&nbsp; This only applies to matrices with non-integer\nentries.&nbsp; The above matrices don't fall into this category as all\ntheir entries are integers.</p>\n<table width=\"100%\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tbody>\n    <tr>\n\n      <td valign=\"top\"><b><font color=\"#009900\">Exercise 4.2&nbsp; </font></b>In\nthis\nexercise we are going to work with the following matrix:\n      <p align=\"center\"> <img\n style=\"border: 0px solid ; width: 245px; height: 92px;\" alt=\"\"\n src=\"Lab4_Files/lab4matrix.jpg\"></p>\n      <span style=\"font-size: 12pt; font-family: Times New Roman;\">\n      <p align=\"left\">Use<tt><font color=\"#990000\"> det() </font></tt>to\ncompute\nthe determinant of <b>N</b><sup>100</sup>.&nbsp; Do you think\nthat <span style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>N</b><sup>100</sup></span>\nis invertible?&nbsp; Also use the command to compute the determinant of\n      <b>N</b>.</p>\n      <p align=\"left\">&nbsp;&nbsp;&nbsp;&nbsp; Now, using the\ndeterminant of <b>N</b> as a known quantity, calculate by hand the\ndeterminant of <span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>N</b><sup>100</sup></span>.&nbsp;\nWould\nyou now reconsider your answer to the previous question?&nbsp;\nExplain.</p>\n      <p align=\"left\">Hint: look at Remark 4.1 and consider some of the\nproperties of determinants.</p>\n      </span></td>\n    </tr>\n  </tbody>\n</table>\n<p align=\"center\"><big>&sect;4.3 Eigenvalues and Eigenvectors</big></p>\n<p>&nbsp;&nbsp;&nbsp; Given a matrix <b>A</b>, recall that an\neigenvalue of <b>A</b>\nis a number <i>&#955;</i> such that <b>A</b><i><b>v</b></i> = <span\n style=\"font-size: 12pt; font-family: Times New Roman; font-style: italic;\">\n&#955;</span><b><i>v</i></b> for some vector <i><b>v</b></i>.&nbsp;\nThe vector <i><b>v</b></i> is called an eigenvector corresponding to\nthe eigenvalue\n<span\n style=\"font-size: 12pt; font-family: Times New Roman; font-style: italic;\">&#955;</span>.&nbsp;\nGenerally,\nit is rather unpleasant to compute eigenvalues and\neigenvectors of matrices by hand. Luckily MATLAB has a function <span\n style=\"font-size: 12pt; font-family: Times New Roman;\">\n<tt><font color=\"#990000\">eig()</font></tt></span> that performs this\ntask for us.</p>\n<p><font color=\"#6600cc\"><b><small><font size=\"+1\"><small>Example 4.2</small></font></small></b></font></p>\n<p>&nbsp;&nbsp;&nbsp; Compute the eigenvalues of the matrix <b>B</b>\nfrom example 4.1 and assign the values to a vector <b>b</b>.</p>\n<p>We do this by typing the following:</p>\n<p><tt><font color=\"#000000\">&gt;&gt;</font><font color=\"#990000\"> b =\neig(B)</font></tt></p>\n<p><tt>&nbsp;&nbsp;&nbsp;b =</tt></p>\n<p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2</tt> </p>\n<p>&nbsp;&nbsp;&nbsp; The eigenvalues are 1, 8, 3, 2.&nbsp; There are\nfour of them because our matrix is 4x4.&nbsp; Notice also that it is\nvery easy to compute the determinant of <b>B</b>.&nbsp; All we have to\ndo is multiply all the eigenvalues together.&nbsp; Clearly 48 =\n1*8*3*2.&nbsp; (Further information about this can be found in your\nlinear algebra book, <i>Linear Algebra and Its Applications</i> by D.\nLay, in chapter 5 section 2.)</p>\n<p>If we wanted to compute the eigenvalues of <b>B</b> together with\nthe corresponding eigenvectors we would type in the following command:</p>\n<p align=\"left\"><tt><font color=\"#000000\">&gt;&gt;</font><font\n color=\"#990000\"> [P,D] = eig(B)</font></tt></p>\n<p align=\"left\"><tt>&nbsp;&nbsp;&nbsp; P =<br>\n<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.0000&nbsp;&nbsp;\n-0.1980&nbsp;&nbsp; 0.2357&nbsp;&nbsp;&nbsp; 0.9074<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.6931&nbsp;\n-0.2357 &nbsp; -0.1815<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.6931&nbsp;&nbsp;\n0.9428&nbsp;&nbsp;&nbsp;\n0.3630<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n0.1089<br>\n<br>\n<br>\n&nbsp;&nbsp;&nbsp; D =<br>\n<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 0 0 0<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 8 0 0<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 0 3 0<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 0 0 2</tt></p>\n<p align=\"left\">MATLAB returns the matrix <b>P</b> consisting of the\neigenvectors of <b>B</b> as its columns and a diagonal matrix <b>D</b>&nbsp;\nwith\nthe corresponding eigenvalues along the diagonal.&nbsp; So in the\nexample above, the vector (-0.1980, 0.6931, 0.6931, 0)<sup>T</sup>,\nwhich is in the second column of <b>P</b>, is the eigenvector of <b>B</b>\ncorresponding to the eigenvalue 8 which is the second entry on the\ndiagonal of <b>D</b>.</p>\n<p>&nbsp;&nbsp;&nbsp; Let's do a quick check of MATLAB's output and our\nown understanding. Enter the following command into MATLAB:\n</p>\n<p align=\"left\"><tt><font color=\"#000000\">&gt;&gt;</font><font\n color=\"#990000\"> x = P(:,2);</font></tt></p>\n<p>This will store the second column of <b>P</b>, that is, the second\neigenvector of <b>P</b>. Now enter the following in MATLAB:\n</p>\n<p align=\"left\"><tt><font color=\"#000000\">&gt;&gt;</font><font\n color=\"#990000\"> B*x - 8*x</font></tt></p>\n<p>The output shows that <b>Bx</b> = 8<b>x</b>, which we would expect,\nsince <b>x</b> is the eigenvalue of <b>B</b> corresponding to the\neigenvalue 8.\n</p>\n<p>The next exercise demonstrates a rather amazing property eigenvalues\nand eigenvectors to diagonalization.\n</p>\n<br>\n<p>\n<table width=\"100%\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tbody>\n    <tr>\n      <td colspan=\"2\" width=\"973\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><b><font\n color=\"#009900\">Exercise 4.3</font></b></span></td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"><b><font color=\"#009900\">(a)</font></b>&nbsp;Enter\nthe\nfollowing matrix <b>V</b> into MATLAB:\n      <p><tt>&gt;&gt; <font color=\"#990000\"> V = [9 -4 -2 0;<br>\n-56 32 -28 44;<br>\n-14 -14 6 -14;<br>\n42 -33 21 -45]</font></tt></p>\n      <p>Now use MATLAB to find the eigenvectors and corresponding\neigenvalues of <b>V</b>.&nbsp; Assign them to matrices <b>P</b> and <b>D</b>\nrespectively.</p>\n      </td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"><b><font color=\"#009900\">(b)</font></b>&nbsp;\nDetermine\nif <b>V</b> is invertible by looking at the\neigenvalues.&nbsp; Explain your reasoning.</td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"><font color=\"#009900\"><b>(c)</b></font>\nUse MATLAB to evaluate <b>P</b><sup>-1</sup><b>VP</b>.&nbsp; What do\nyou notice?</td>\n    </tr>\n  </tbody>\n</table>\n</p>\n<p align=\"center\">&nbsp;&nbsp;&nbsp; <big>\n&sect;4.4 </big><span style=\"font-family: Times New Roman;\">\n<font size=\"4\">Diagonalization</font></span></p>\n<span style=\"font-size: 12pt; font-family: Times New Roman;\">\n<p align=\"left\">&nbsp;&nbsp;&nbsp;&nbsp; A matrix <b>A</b>\nis called diagonalizable, if we can find an invertible matrix <b>P</b>\nsuch that <b>P</b><sup>-1</sup><b>AP</b> is diagonal.&nbsp; This idea\nmay seem quite arbitrary to you; after all, why would anyone want to\nmodify the matrix <b>A</b> in such a manner just to make it\ndiagonal?&nbsp; To give you some idea as to why we would want to do\nthis, consider the problem of raising some matrix <b>A</b> to a large\npower, say 100.&nbsp; We could, of course, multiply <b>A</b> by itself\n100 times, but that would be rather time-consuming and\nineffective.&nbsp; Instead, if we could express <b>A</b> as <b>PDP</b><sup>-1</sup>,\nwhere\n<b>D</b> is a diagonal matrix and <b>P</b> is some invertible\nmatrix, then, we could significantly simplify our work by noting that </p>\n<p align=\"left\"><b>A</b><sup>100</sup> = (<b>PDP</b><sup>-1</sup>)<sup>100</sup>\n= (<b>PDP</b><sup>-1</sup>)(<b>PDP</b><sup>-1</sup>)(<b>PDP</b><sup>-1</sup>)...(<b>PDP</b><sup>-1</sup>)\n=\n<b>PD</b>(<b>P</b><sup>-1</sup><b>P</b>)<b>D</b>(<b>P</b><sup>-1</sup><b>P</b>)<b>D</b>(<b>P</b><sup>-1</sup><b>P</b>)...(<b>P</b><sup>-1</sup><b>P</b>)<b>DP</b><sup>-1</sup>\n= <b>PD</b><sup>100</sup><b>P</b><sup>-1</sup>.</p>\n<p align=\"left\">The upshot of this computation is that dealing with\n<b>D</b><sup>100</sup> is much easier than with\n<b>A</b><sup>100</sup> because to raise a diagonal matrix to a power,\nwe simply raise all of its entries to that power.&nbsp; Thus, there is\nno need to perform as many matrix multiplications.</p>\n<p align=\"left\">&nbsp;&nbsp;&nbsp; Not every matrix is diagonalizable,\nhowever.&nbsp; In order to diagonalize an <i>n</i> x <i>n</i>\nmatrix <b>A</b> we must find a basis of <b>R</b><i><sup>n</sup></i>\nconsisting of eigenvectors of <b>A</b>.&nbsp; Then forming a matrix <b>P</b>\nwhose columns are the elements of this basis, we get <span\n style=\"font-size: 12pt; font-family: Times New Roman;\">\n<b>P</b><sup>-1</sup><b>AP</b></span> = <b>D</b>, where <b>D</b> is a\ndiagonal matrix whose entries on the diagonal are the eigenvalues of <b>A</b>\ncorresponding to the eigenvectors in the respective columns of <b>P</b>.&nbsp;\nIf\n<span style=\"font-size: 12pt; font-family: Times New Roman;\"><b>R</b><i><sup>n</sup></i></span>\ndoes not possess such a basis of\neigenvectors, then <b>A</b> is not diagonalizable.</p>\n<p>&nbsp;&nbsp;&nbsp; In some situations, we can mak use of  the following theorem:\n</p>\n<p>&nbsp;&nbsp;&nbsp; <b>Theorem:</b> If an nxn matrix has n distict\neigenvalues the matrix is diagonalizable.</p>\nNote, however, if the matrix does not have n distict eigenvalues this\ntheorem does not give us any\ninformation; other means are needed to determine if is diagonalizable\nor not.\n<p><font color=\"#ff6600\"><b><small><font size=\"+1\"><small>Remark 4.2 </small></font></small></b></font>&nbsp;Part\n(a)\nof the preceding exercise says that if a matrix has distinct\neigenvalues, then it is diagonalizable.&nbsp; Note that the converse to\nthis statement is not necessarily true; i.e., if a matrix is\ndiagonalizable, it is not necessarily true that all its eigenvalues are\ndistinct.&nbsp; A matrix can be diagonalizable even if it has repeated\neigenvalues: think about the identity matrix (already diagonal) whose\neigenvalues are all 1.</p>\n<table width=\"100%\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tbody>\n    <tr>\n      <td colspan=\"2\" width=\"200\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><b><font\n color=\"#009900\">Exercise 4.4</font></b></span></td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\"><b><font color=\"#009900\">(a)</font></b>&nbsp;<span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> Let <b>F</b> =</span>\n      <p>0&nbsp; &nbsp;&nbsp;&nbsp; 1</p>\n      <p>1&nbsp;&nbsp; &nbsp;&nbsp; 1</p>\n      <p><span style=\"font-size: 12pt; font-family: Times New Roman;\">Use\nMATLAB\nto find an invertible matrix <b>P</b> and a diagonal matrix <b>D</b>\nsuch that <b>PDP</b><sup>-1</sup> = <b>F</b></span></p>\n      </td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\"><b><font color=\"#009900\">(b)</font></b>&nbsp;\nUse MATLAB to compare <span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>F</b><sup>10</sup></span>\nand <span style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>PD</b><sup>10</sup><b>P</b><sup>-1</sup></span>.</td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\"><font color=\"#009900\"><b>(c)</b></font>&nbsp;\nLet <b>f</b> = (1,1)<sup>T</sup>. Compute <b>Ff</b>, <b>F</b><sup>2</sup><b>f</b>,\n\n      <span style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>F</b><sup>3</sup><b>f</b></span>,\n\n      <span style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>F</b><sup>4</sup><b>f</b></span>,\n\n      <span style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>F</b><sup>5</sup><b>f</b></span>.&nbsp;\nDescribe\nthe pattern in your answers.</td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\"><font color=\"#009900\"><b>(d)</b></font>&nbsp;\nGiven a sequence of numbers {1, 1, 2, 3, 5, 8, 13, ....} where each\nterm is the sum of the previous two, find the 30th term of this\nsequence.&nbsp; (If you are stuck, read the remark below)</td>\n    </tr>\n  </tbody>\n</table>\n<p><font color=\"#ff6600\"><b><small><font size=\"+1\"><small>Remark 4.3 </small></font></small></b></font>&nbsp;The\nsequence\nin the above exercise is called a\n<a\n href=\"http://www.mcs.surrey.ac.uk/Personal/R.Knott/Fibonacci/fibnat.html\">Fibonacci\nsequence</a>.&nbsp; It has many interesting properties and appears\noften in nature.&nbsp; The above problem points in the direction of how\nto find an explicit formula for the <i>n</i><sup>th</sup> term in this\nsequence (it is not obvious a priori that such a formula must even\nexist).&nbsp; To obtain this formula simply note that if we let </p>\n<p><i>f</i><sub>0</sub> = <i>f</i><sub>1</sub> = 1 and <i>f</i><sub><i>n</i>+2</sub>\n=&nbsp; <i>f</i><sub><i>n</i>+1</sub> +&nbsp; <i>f<sub>n</sub></i> </p>\n<p>be our Fibonacci sequence and let</p>\n<p><b>f<i> = </i></b>( <i>f</i><sub>0</sub>,&nbsp; <i>f</i><sub>1</sub>)<sup>T</sup>\n= (1, 1)<sup>T</sup>, then </p>\n<p><b>Ff</b> = ( <i>f</i><sub>1</sub>,&nbsp; <i>f</i><sub>0 </sub>+ <i>f</i><sub>1</sub>)<sup>T</sup>\n= ( <i>f</i><sub>1</sub>,&nbsp; <i>f</i><sub>2</sub>)<sup>T</sup>, </p>\n<p><b>F</b><sup>2</sup><b>f</b> = <b>F</b>(<b>Ff</b>)<b> = F</b>*( <i>f</i><sub>1</sub>,\n<i>f</i><sub>2</sub>)<sup>T</sup> = (<i>f</i><sub>2</sub>, <i>f</i><sub>1\n</sub>+<i> f</i><sub>2</sub>)<sup>T</sup> = (<i>f</i><sub>2</sub>, <i>f</i><sub>3</sub>)<sup>T</sup>\nand in general, </p>\n<p><b>F</b><i><sup>n</sup></i><b>f</b>= (<i>f<sub>n</sub></i>, <i>f</i><sub><i>n</i>+1</sub>)<sup>T</sup></p>\n<p align=\"left\">Thus, to get the general formula we need to compute\n<b>F</b><i><sup>n</sup></i>, (which is done by computing\n<b>PD</b><i><sup>n</sup></i><b>P</b><sup>-1</sup>), multiply it by the\nvector\n(1, 1)<sup>T</sup> and read off the first row of the resulting\nvector.&nbsp; If you like, you may perform these calculations by hand\nat your leisure and derive an interesting formula for the\n<i>n</i><sup>th</sup> Fibonacci number involving the golden ratio.</p>\n<p align=\"center\">\n<big>&sect;4.5 Returning to: Matrices and Presidential Elections</big></p>\n</span><span style=\"font-family: Times New Roman;\">\n<p>&nbsp;&nbsp;&nbsp; At the end of the last lab, we said that we would\nrevisit our\nelection example once we had a bit more mathematics under our belts. We\nhave included the text from last time in case you want a review. If you\nfeel confident on our work from last time, feel free to skip this\nreview. You will need the results of the exercise from last time, so if\nyou didn't save them, it would be helpful to rework them before moving\non.\n</p>\n<b>REVIEW:</b>\n<p align=\"left\">&nbsp;&nbsp;&nbsp; Certainly, the title of this section\nsounds a bit strange.&nbsp; What do matrices and presidents have in\ncommon?&nbsp; Let us consider a math model which is used\nin many subjects involving dynamics by illustrating it in a simple\n\"sociological\" situation. &nbsp;\nIn California when you register to vote you declare a party\naffiliation.\nSuppose we have four political parties: Democrats, Republicans,\nIndependents, and Libertarians, and we get the (publically available)\ndata telling us\nwhat percentage of voters in each party switch to a different party\nevery 4\nyears.&nbsp; So we may be told something like this... \"81% of Democrats\nremain Democrats, 9% convert to Republicans, 6% switch to Independents\nand 4% become Libertarians.\"&nbsp; Suppose we have this sort of\ninformation for each party, and we organize it into a matrix, which we\nshall call <b>P</b>, as follows:</p>\n<table id=\"AutoNumber1\" width=\"100%\" border=\"1\">\n  <tbody>\n    <tr>\n      <td width=\"20%\">&nbsp;</td>\n      <td width=\"20%\">Democrats</td>\n      <td width=\"20%\">Republicans</td>\n      <td width=\"20%\">Independents</td>\n      <td width=\"20%\">Libertarians</td>\n    </tr>\n    <tr>\n      <td width=\"20%\">Democrats</td>\n      <td width=\"20%\">0.81</td>\n      <td width=\"20%\">0.08</td>\n      <td width=\"20%\">0.16</td>\n      <td width=\"20%\">0.10</td>\n    </tr>\n    <tr>\n      <td width=\"20%\">Republicans</td>\n      <td width=\"20%\">0.09</td>\n      <td width=\"20%\">0.84</td>\n      <td width=\"20%\">0.05</td>\n      <td width=\"20%\">0.08</td>\n    </tr>\n    <tr>\n      <td width=\"20%\">Independent</td>\n      <td width=\"20%\">0.06</td>\n      <td width=\"20%\">0.04</td>\n      <td width=\"20%\">0.74</td>\n      <td width=\"20%\">0.04</td>\n    </tr>\n    <tr>\n      <td width=\"20%\">Libertarians</td>\n      <td width=\"20%\">0.04</td>\n      <td width=\"20%\">0.04</td>\n      <td width=\"20%\">0.05</td>\n      <td width=\"20%\">0.78</td>\n    </tr>\n  </tbody>\n</table>\n</span><span style=\"font-size: 12pt; font-family: Times New Roman;\">\n<p align=\"left\">(For example, the 0.05 in the second row and third\ncolumn indicates that every four years, 5% of those calling themselves\nIndependent will switch to the Republican party.)&nbsp; Note that we\nare assuming that these percentages do not change from one election to\nthe next.&nbsp; This is not a very realistic assumption, but it will do\nfor our simple model.</p>\n<p align=\"left\">&nbsp;&nbsp;&nbsp; The question of course is to try to\ndetermine the outcome of all future elections, and if possible, the\ncomposition of the electorate in the long term.&nbsp; Let <i>D</i><sub>0</sub>,\n<i>R</i><sub>0</sub>,\n<i>I</i><sub>0</sub> and <i>L</i><sub>0</sub> denote the current\npercentage of Democrats, Republicans, Independents and\nLibertarians.&nbsp; In four years these numbers will change according\nto the matrix above, as follows:</p>\n<p align=\"left\"><i>D</i><sub>1</sub> = 0.81<i>D</i><sub>0</sub> + 0.08<i>R</i><sub>0</sub>\n+ 0.16<i>I</i><sub>0</sub> + 0.10<i>L</i><sub>0</sub><br>\n<i>R</i><sub>1</sub> = 0.09<i>D</i><sub>0</sub> + 0.84<i>R</i><sub>0</sub>\n+ 0.05<i>I</i><sub>0</sub> + 0.08<i>L</i><sub>0</sub><br>\n<i>I</i><sub>1</sub> =\n0.06<i>D</i><sub>0</sub> + 0.04<i>R</i><sub>0</sub> + 0.74<i>I</i><sub>0</sub>\n+ 0.04<i>L</i><sub>0</sub><br>\n<i>L</i><sub>1</sub> =\n0.04<i>D</i><sub>0</sub> + 0.04<i>R</i><sub>0</sub> + 0.05<i>I</i><sub>0</sub>\n+ 0.78<i>L</i><sub>0</sub><br>\n</p>\n<p align=\"left\">Let <i><b>x</b><sub>n</sub></i> be the vector (<i>D</i><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><i><sub>n</sub></i></span>,\n<i>R</i><span style=\"font-size: 12pt; font-family: Times New Roman;\"><i><sub>n</sub></i></span>,\n<i>I</i><span style=\"font-size: 12pt; font-family: Times New Roman;\"><i><sub>n</sub></i></span>,\n<i>L</i><span style=\"font-size: 12pt; font-family: Times New Roman;\"><i><sub>n</sub></i></span>)<sup>T</sup>.\nIt\nrepresents\nthe percentage of representatives of each party after <i>n</i>\npresidential elections\nand we shall call it the party distribution.&nbsp; From the calculation\nabove we see that </p>\n<p align=\"left\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\">\n<i><b>x</b></i><sub>1<i> </i></sub>= <b>P</b><i><b>x</b></i></span><sub>0</sub></p>\n<p align=\"left\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\">\n<i><b>x</b></i><sub>2<i> </i></sub>= <b>P</b><sup>2</sup><b><i>x</i></b><sub>0</sub>\nand in general <i><b>x</b></i><sub>n<i> </i></sub>= <b>P</b><i><sup>n</sup><b>x</b></i><sub>0</sub></span></p>\n<p align=\"left\">Assuming everyone voted along party lines, from the\npresidential election of 2004 we know that <span\n style=\"font-size: 12pt; font-family: Times New Roman;\">\n<i><b>x</b></i><sub>0</sub></span> is roughly (48.56, 51.01, 0.0013,\n0.0030)<sup>T</sup></p>\n<span style=\"font-size: 12pt; font-family: Times New Roman;\"> </span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> </span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> </span>\n<table width=\"100%\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tbody>\n    <tr>\n      <td colspan=\"2\" width=\"973\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><b><font\n color=\"#009900\">Review Exercise (you do not need to turn in, but you\nmay need the results) </font></b></span></td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"><b><font color=\"#009900\">(a)</font></b>&nbsp;Enter\nthe\nmatrix <b>P</b> and the vector <span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <i><b>x</b></i><sub>0</sub></span>\ninto MATLAB. To avoid mistakes, just copy and paste this:\n      <p><tt>&gt;&gt; <font color=\"#990000\">P = [0.8100 0.0800 0.1600\n0.1000;<br>\n0.0900 0.8400 0.0500 0.0800;<br>\n0.0600 0.0400 0.7400 0.0400;<br>\n0.0400 0.0400 0.0500 0.7800]</font></tt></p>\n      <p><tt>&gt;&gt; <font color=\"#990000\">x0 = [48.56; 51.01;\n0.0013; 0.0030]</font></tt></p>\n      <p>What will the party distribution vector be\n3, 7, and 10 presidential elections\nfrom now?</p>\n      </td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"><b><font color=\"#009900\">(b)</font></b>&nbsp;\nWhat\nwill be the results 30, 60, 100 elections from now?\n&nbsp; <br>\nHow much different is x<sub> 30 </sub> from\nx<sub> 60 </sub> from\nx<sub> 100 </sub>? <br>\nSummarize simply what is happening with x<sub> k </sub>\nas k gets big. </td>\n    </tr>\n  </tbody>\n</table>\n<b><br>\nNEW MATERIAL:</b>\n<p> &nbsp;&nbsp;&nbsp; From the previous exercise you probably observed\nthat the results seem to stabilize the further into the future we\ngo.&nbsp; Let us try to explain this mathematically. </p>\n<span style=\"font-size: 12pt; font-family: Times New Roman;\"> </span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> </span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> </span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> </span>\n<table style=\"width: 1243px; height: 462px;\" border=\"1\" cellpadding=\"2\"\n cellspacing=\"2\">\n  <tbody>\n    <tr>\n      <td colspan=\"2\" width=\"973\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><b><font\n color=\"#009900\">Exercise 4.5</font></b></span></td>\n    </tr>\n    <tr>\n\n\n      <td valign=\"top\" width=\"931\"><b><font color=\"#009900\">(a)</font></b>&nbsp;<span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> First of all,\nuse MATLAB to find matrices <b>Q</b> and <b>D</b> such that <b>QDQ</b><sup>-1</sup>\n= <b>P</b></span></td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"><b><font color=\"#009900\">(b)</font></b>&nbsp;\nNow,\nrecall that <b>P</b><i><sup>n</sup></i> = <b>QD</b><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><i><sup>n</sup></i></span><b>Q</b><sup>-1</sup>.&nbsp;\nFind\n      <b> <img style=\"border: 0px solid ; width: 104px; height: 30px;\"\n alt=\"\" src=\"Lab4_Files/limDn.gif\"></b> by hand. You have probably\nnever computed a limit of matrix multiplication before, so just recall\nthat our limit is simply what the product <b>D</b><sup>n</sup> tends\nto a <i>n</i> gets very large. What is this limit?<span\n style=\"font-size: 12pt; font-family: Times New Roman;\"></span></td>\n    </tr>\n    <tr>\n\n      <td style=\"vertical-align: top;\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><b><font\n color=\"#009900\">(c)</font></b></span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><b><font\n color=\"#009900\"> </font></b><font style=\"color: rgb(0, 0, 0);\"\n color=\"#009900\">Now, using MATLAB, multiply your answer by Q and </font></span></span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><span\n style=\"color: rgb(0, 0, 0);\">Q</span><sup>-1</sup></span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><font\n color=\"#009900\"><span style=\"color: rgb(0, 0, 0);\"></span></font><font\n color=\"#009900\"><span style=\"color: rgb(0, 0, 0);\"></span></font><font\n color=\"#009900\"><span style=\"color: rgb(0, 0, 0);\"> </span></font></span></span>to\n      </span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\">compute <b> <img\n style=\"border: 0px solid ; width: 113px; height: 26px;\" alt=\"\"\n src=\"Lab4_Files/limPn.gif\"></b><span\n style=\"font-size: 12pt; font-family: Times New Roman;\">.&nbsp; Store\nthe answer in a variable called Pinf.</span></span><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"></span></span></td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"> <span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <b><font\n color=\"#009900\">(d)</font></b>&nbsp; U</span>se MATLAB to compute <span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>P</b></span><sub><span\n style=\"font-size: 12pt;\">&#8734;</span></sub> <span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <i><b>x</b></i><sub>0</sub>\n= Pinf*<i><b>x</b></i><sub>0</sub>, where <i><b>x</b></i><sub>0</sub>\nis the same as in part (a) of the review exercise. How does your answer\ncompare to part (b) of the review exercise from last time?</span></td>\n    </tr>\n    <tr>\n\n\n      <td valign=\"top\" width=\"931\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <b><font\n color=\"#009900\">(e)&nbsp; </font></b></span>Now make up any vector <i><b>y</b></i>\nin <b>R</b><sup>4</sup> whose entries sum to 100.&nbsp; Compute <span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>P</b><sub><span\n style=\"font-size: 12pt;\">&#8734;</span></sub> <b><i>y</i></b></span> and\ncompare it to part (c).&nbsp; How does the initial distribution\ny of the\nelectorate seem to affect the distribution in the long term?&nbsp; By\nlooking at the matrix <span\n style=\"font-size: 12pt; font-family: Times New Roman;\"> <b>P</b><sub><span\n style=\"font-size: 12pt;\">&#8734;</span></sub></span>, give a mathematical\nexplanation. </td>\n    </tr>\n  </tbody>\n</table>\n<big> </big>\n<font size=\"+1\"><br>\n</font>\n<div style=\"text-align: center;\"><font size=\"+1\">&sect;4.6 Returning\nto: Google PageRank</font><br>\n</div>\n<p>&nbsp;&nbsp;&nbsp; In Lab 2 we initially discussed Google's PageRank\nalgorithm for ranking websites where the linking information is stored\nin a linking matrix L. It turns out that Google does not try to solve\nthe problem using the methods we implemented in that lab. Here we will\nrevisit PageRank to highlight the actual method used to solve L<b>r</b>\n=<b>r</b>. If at any point you need a refresher, please reference <a\n href=\"Lab2.shtml\">Lab 2</a>.\n</p>\n<p>&nbsp;&nbsp;&nbsp; Recall after setting your problem up from the\nnetwork data\nthe equations to be solved have the form</p>\n<p align=\"center\">L<b>r</b> =<b>r</b></p>\n<p>where <b>r</b> is an <i>k</i>-dimensional vector and L is\na <i>k</i> x <i>k</i> matrix describing the network links.\nSince the web is huge, an important\nissue is: how do we solve L<b>r</b> =<b>r</b> when <i>k</i> is very\nlarge?\nAn advantage is that most entries of L equal 0, but how\ndo we take advantage of that?\nOur favorite technique so far, Gaussian elimination (or row reduction),\nwill destroy much of this 0 structure after only a few steps,\nso we had better try something else.\nOne approach goes back to</p>\n<p>&nbsp;&nbsp;&nbsp; <b>Theorem (Perron-Frobenius)</b>\nIf a matrix L has only non-negative entries and each of its\ncolumns sum to 1, then its largest eigenvalue is 1.\nMoreover, for any vector <b>r</b><sub>0</sub> with positive entries\nthe vector <b>r</b><sub>n</sub> = L<sup>n</sup>*<b>r</b><sub>0</sub>\napproaches a non-negative vector\n<b>r</b> which is a solution to the eigenvalue problem L<b>r</b> = <b>r</b>.</p>\n<p>&nbsp;&nbsp;&nbsp; This is not exactly the Perron-Frobenius theorem\nyou saw in Lab 2, but it is a variation on it. In fact, most people\nthink of the phenomenon behind Page Rank as one of eigenvectors and\neigenvalues (which we suppressed in Lab 2 because you had not yet heard\nof them).\n</p>\n<p>&nbsp;&nbsp;&nbsp; This gives an alternative approach to solving L<b>r</b>=<b>r</b>.\nSpecifically,\nif we take <i>n</i> to be large enough, L<sup>n</sup><b>r</b><sub>0</sub>\nwill approach the solution to L<b>r</b> = <b>r</b>.\nAs an exercise consider</p>\n<p align=\"center\"> <img\n style=\"border: 0px solid ; width: 230px; height: 309px;\" alt=\"\"\n src=\"Lab4_Files/BigPageRank.gif\"></p>\n<p>The letters along the left and top are simply labels for the\nwebsites, and should not be considered part of the linking matrix.\nEnter this matrix into MATLAB with the command\n</p>\n<p><small><tt>&gt;&gt; <font color=\"#990000\"> L = [0,0,0,0,1,0,0,0;<br>\n0,0,0,0,0,0,0,1;<br>\n0,1/2,0,0,0,0,1,0;<br>\n1/2,0,1/2,0,0,0,0,0;<br>\n0,0,1/2,0,0,1,0,0;<br>\n1/2,0,0,0,0,0,0,0;<br>\n0,1/2,0,0,0,0,0,0;<br>\n0,0,0,1,0,0,0,0;]</font></tt></small></p>\n<br>\n<table width=\"100%\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tbody>\n    <tr>\n      <td colspan=\"2\" width=\"973\"><span\n style=\"font-size: 12pt; font-family: Times New Roman;\"><b><font\n color=\"#009900\">Exercise 4.6</font></b></span></td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"><b><font color=\"#009900\">(a)</font></b>&nbsp;\nLet\n      <font color=\"#990000\">e0 = [1;1;1;1;1;1;1;1]</font>, and let <b>e</b><sub>n+1</sub>\n= L*<b>e</b><sub>n</sub>. (Note this is the same as saying <b>e</b><sub>n</sub>=L<sup>n</sup>*<b>e</b><sub>0</sub>).\nCompute\n      <b>e</b><sub>10</sub>.\nHow large must n be so that <b>e</b><sub>n</sub> changes by less than\n1% when we increase n by 1? Don't try to get an exact value, instead\njust try to get a value for n that is big enough.</td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"><font color=\"#009900\"><b>(b)</b></font>\nDraw by hand on your paper the graph\nof the network of webpages corresponding to L. (By graph here, we mean\na <a href=\"http://en.wikipedia.org/wiki/Graph_%28mathematics%29\">set\nof vertices and edges</a>)<br>\n      </td>\n    </tr>\n    <tr>\n\n      <td valign=\"top\" width=\"931\"><font color=\"#009900\"><b>(bonus)</b></font>\nThis part will not be graded, but you are encouraged to do it if you\nfind the PageRank application interesting. The question now is: what is\nthe computational cost of solving L<b>r</b>=<b>r</b> using iteration?\nMore precisely, how many estimated operations are required to find r<sub>n</sub>\nin this method? Hint: multiplying 0 times a number and adding two\nnumbers costs almost no time, so you just need to count how many times\nnon-zero numbers are multiplied.</td>\n    </tr>\n  </tbody>\n</table>\n<br>\n<p>&nbsp;&nbsp;&nbsp; What usually happens in practice for very large L\nis\nthat the convergence of <b>e</b><sub>n</sub> to <b>e</b> is very\nquick,\nindeed the size of <i>n</i> required for decent accuracy\noften does not go up rapidly with <i>k</i>. This is very important\nsince the true linking matrix used for the internet will have <i>k</i>\non the order of millions.\nThe quick convergence is especially true if we have a\ngood initial guess at the answer.\nIndeed the type of iteration you have just seen illustrates\na basic idea behind solving many large scale problems, not just\nPageRank.\nStandard eigenvalue solvers and\nrow reduction linear equation solvers\nsuch as Matlab are very reliable for modest size matrices,\nbut start having\ntrouble when there are more than a few hundred variables.\n\"Iterative methods\" work well with high probability,\nbut there exist matrices which mess them up.\n</p>\n\n\n\n<p align=\"center\"><big><font face=\"Times New Roman\"><br>\n&sect;4.7 </font></big>\n<font size=\"4\">Conclusion</font></p>\n&nbsp;&nbsp;&nbsp; In this lab you have learned how to use MATLAB to\ncompute determinants, eigenvalues, and eigenvectors of matrices.&nbsp;\nYou have also learned about diagonalization and how it can be applied\nto study fairly complex models using iteration .&nbsp; The moral is\nthat computing with\ndiagonal matrices is a lot simpler than with those that are not\ndiagonal.\n\n<hr width=\"100%\" size=\"2\">\n<p><i>Acknowledgement: This lab was developed by faculty and graduate students at UCSD.\n(<a href=\"http://www.math.ucsd.edu/~math20f/Fall/MatlabIndex.html\">http://www.math.ucsd.edu/~math20f/Fall/MatlabIndex.html</a>).</i></p>\n</body>\n</html>\n", "encoding": "ascii"}