{"url": "https://www.ics.uci.edu/~alspaugh/cls/shr/alloy.html", "content": "<?xml version='1.1'?>\n<!DOCTYPE html\n     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'\n     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>\n<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>\n<head>\n  <title>Alloy</title>\n  <meta name='Author' content='Thomas A. Alspaugh'/>\n  <meta name='Description' content=\"Alloy\"/>\n  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>\n  <meta http-equiv='Content-Style-Type' content='text/css'/>\n  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>\n  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->\n  <style type='text/css'>\n    .egList      {  list-style-type: lower-alpha;  }\n    dl           {  padding-left: 1.0em;  }\n    dt           {  margin-top: .6em;  margin-bottom: .05em;  }\n    dd           {  margin-top: 0;     margin-bottom: .6em;  }\n    dt           {  font-style: italic;  font-weight: bold;  }\n    dl.code      {  padding-left: 0.75em;  }\n    dl.code>dt   {  font-family: monospace;  font-style: normal;  }\n    dl.code>dd   {  margin-left: 1.5em;  }\n    code dfn     {  font-style: normal;  }\n    span.comment {  color: olive;  }\n    dl.code>dt   {  font-family: monospace;  }\n    .black       {  color: black;  }\n    .alloy {\n      font-family: monospace;\n      font-weight: bold;\n      text-align: center;\n      color: black;\n      font-size: 120%;\n    }\n    span.m  {  font-style: normal;  font-size: 95%;  font-family: sans-serif;  }\n\n    @media screen {\n      body     {  background: url(\"img/bg-alloy.png\") repeat-y;  }\n      #TMain   {  margin-left: 10.00em;  }\n    }\n  </style>\n</head>\n<body>\n\n<div id='TBg'>\n\n<div id='THeader'>\nAlloy\n<span class='newUrl'><a href='https://thomasalspaugh.org/pub/fnd/alloy.html'\n  >thomasalspaugh.org/pub/fnd/alloy.html</a></span>\n</div>\n\n<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->\n<p>  <a class='sc' href='../../index.html'>Home</a>\n</p>\n<div class='hr'> </div>\n<p>  <a href='index.html'>Foundations home</a>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='set.html'>Sets</a><br/>\n<a href='relation.html'>Relations</a><br/>\n<a href='correspondence.html'>Correspondences</a><br/>\n<a href='orderedSet.html'>Ordered Sets</a><br/>\n<a href='lattice.html'>Lattices</a><br/>\n<a href='graph.html'>Graphs</a><br/>\n<a href='powerset.html'>Powersets</a><br/>\n<a href='binaryString.html'>Binary Strings</a><br/>\n<a href='logicConcepts.html'>Logic</a><br/>\n<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->\n<a href='greek.html'>Greek</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='glossaryExternal.html'>Glossary</a><br/>\n<a href='goodAbstract.html'>Abstracts</a><br/>\n<a href='argument.html'>Argument</a><br/>\n<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>\n<a href='hohfeld.html'>Legal Relations</a><br/>\n<a href='goodPresentation.html'>Presentations</a><br/>\n</p>\n<div class='hr'> </div>\n<p>\n<a href='quickStart.html'>Elicitation</a><br/>\n<a href='ontology.html'>Glossaries</a><br/>\n<a href='goal.html'>Goals</a><br/>\n<a href='istar.html'>i*</a><br/>\n<a href='SCR.html'>SCR</a><br/>\n<a href='tracing.html'>Tracing</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='alloy.html'>Alloy</a><br/>\n<a href='msc.html'>MSCs</a><br/>\n<a href='regularExpression.html'>Regular Exprs.</a><br/>\n</p><!-- -spell MSCs Exprs -->\n<div class='hr2'> </div>\n<p>\n<a href='java-designPattern.html'>Design Patterns</a><br/>\n<a href='javadoc.html'>Javadoc</a><br/>\n<a href='java-package.html'>Java Packages</a><br/>\n<a href='java-type.html'>Java Types</a><br/>\n</p>\n<div class='hr2'> </div>\n<p>\n<a href='html.html'>(X)HTML</a><br/>\n<a href='xmlSchema.html'>XML Schemas</a><br/>\n<a href='xslt.html'>XSLT</a><br/>\n</p><!-- -spell XSLT -->\n</div>\n\n\n<!-- No right column -->\n<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->\n<!--xhtml -y -->\n\n\n<!--spell  -->\n\n\n<h1>Table of contents</h1>\n\n<div id='ToC'>\n  <h1 title='logic'><a href='#logic'>The Alloy logic</a></h1>\n  <h1 title='quick'><a href='#quick'>Quick reference</a></h1>\n  <h2><a href='#signature0'>Signatures and relations</a></h2>\n  <h3><a href='#mulitplicity-constraint'>Multiplicity constraints in declarations</a></h3>\n  <h2><a href='#disjointness'>Disjointness </a></h2>\n  <h2><a href='#cardinality'>Cardinality constraints </a></h2>\n  <h1 title='language'><a href='#language'>The Alloy language</a></h1>\n  <h2 title='language-constructs'><a href='#language-constructs'>Language constructs</a></h2>\n  <h2 title='which-where'><a href='#which-where'>Which construct to use where?</a></h2>\n  <h1 title='function'><a href='#function'>Functions</a></h1>\n  <h1 title='predicate'><a href='#predicate'>Predicates</a></h1>\n  <h1 title='facts'><a href='#facts'>Facts</a></h1>\n  <h1 title='assertion'><a href='#assertion'>Assertions</a></h1>\n  <h1><a href='#tips'> Learnt by experience </a></h1>\n  <h2><a href='#at'> When to use <code>@</code> </a></h2>\n</div>\n\n\n<h1 id='logic' title='logic'>The Alloy logic</h1>\n\n<p>\nThe Alloy logic is a first-order logic\nin which the domain is the set of all relations,\nand terms include relational expressions\nsuch as joins.&nbsp;\n</p>\n\n<p>\nEverything in Alloy is a relation!&nbsp;\n</p>\n\n<ul>\n  <li> A relation is a set of tuples of the same (positive) arity.&nbsp;\n    Each tuple lists entities that are related to each other.&nbsp;\n    The size of the relation\n    is the number of tuples;\n    the arity of the relation\n    is the arity of the tuples.&nbsp;\n  </li>\n  <li> Sets are represented by unary relations.&nbsp;\n    Each 1-tuple in the unary relation\n    contains an element of the set.&nbsp;\n  </li>\n  <li> Scalars are represented by\n    <a href='set.html#singleton-set'>singleton sets</a>.&nbsp;\n    Since a set is a unary relation,\n    an scalar is thus represented as a singleton (size 1) unary relation.&nbsp;\n  </li>\n</ul>\n\n<p>\nAs a result,\nthe operators apply to relations, sets, and scalars,\nand there are very few cases that produce no result.&nbsp;\n</p>\n\n<p>\nPage numbers refer to\nDaniel Jackson,\n<i>Software Abstractions</i>,\nMIT Press 2006.&nbsp;\n</p>\n\n<p>\n<a href='http://alloy.mit.edu/alloy4/book.html'>How to update the book\nfor Alloy 4</a>\n</p>\n\n\n<h1 id='quick' title='quick'>Quick reference</h1>\n\n<table>\n<tbody>\n  <tr><th colspan='2'>Set constants <span class='pg'>50</span></th></tr>\n  <tr><td class='alloy' id='univ' title='univ'>univ\n      </td>\n      <td> The universal set\n      </td>\n  </tr>\n  <tr><td class='alloy' id='none' title='none'>none\n      </td>\n      <td> The <a href='set.html#empty'>empty set</a>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n<table>\n<tbody>\n  <tr><th colspan='2'>Relation constants <span class='pg'>50</span></th></tr>\n  <tr>\n      <td class='alloy' id='iden' title='iden'>iden\n      </td><!--spell iden -->\n      <td>The <a href='relation.html#identity'>identity relation</a>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n<table>\n<tbody>\n  <tr><th colspan='3'>Set operators <span class='pg'>52</span></th></tr>\n  <tr><th>Symbol</th><th>Name</th><th>Result</th>\n  </tr>\n  <tr><td class='alloy'>+\n      </td>\n      <td><a href='set.html#union'>Union</a>\n      </td>\n      <td rowspan='3'>A set\n      </td>\n  </tr>\n  <tr><td class='alloy'>&amp;\n      </td>\n      <td><a href='set.html#intersection'>Intersection</a>\n      </td>\n  </tr>\n  <tr><td class='alloy'>-\n      </td>\n      <td><a href='set.html#difference'>Difference</a>\n      </td>\n  </tr>\n  <tr><td class='alloy' id='in' title='in'>in\n      </td>\n      <td> <a href='set.html#subset'>Subset</a>\n      </td>\n      <td rowspan='2'>T or F\n      </td>\n  </tr>\n  <tr><td class='alloy'>=\n      </td>\n      <td><a href='set.html#equal'>Equality</a>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n<p>\n<a href='als/set.als' id='set-examples'>Set examples</a>\n</p>\n\n<table>\n<tbody>\n  <tr><th colspan='3'>Relation operators <span class='pg'>55</span></th></tr>\n  <tr><th>Symbol</th> <th>Name</th> <th>Syntax</th>\n  </tr>\n  <tr>\n    <td class='alloy' id='arrow-product' title='arrow-product'>-&gt;\n      </td>\n    <td>(Arrow) <a href='relation.html#product'>product</a>\n      </td>\n    <td class='ce'><span class='m'>R1</span> <span class='alloy'>-&gt;</span>\n      <span class='m'>R2</span>\n      </td>\n  </tr>\n  <tr>\n    <td class='alloy' id='dot-join' title='dot-join'>.\n      </td>\n    <td><a href='relation.html#join'>Join</a>\n      </td>\n    <td class='ce'><span class='m'>R1</span> <span class='alloy'>.</span>\n      <span class='m'>R2</span>\n      </td>\n  </tr>\n  <tr>\n    <td class='alloy' id='box-join' title='box-join'>[]\n      </td>\n    <td>Join (a second notation for it)\n      </td>\n    <td class='ce'><span class='m'>R2</span>\n      <span class='alloy'>[</span><span class='m'>R1</span><span class='alloy'>]</span>\n      </td>\n  </tr>\n  <tr>\n    <td class='alloy' id='transpose' title='transpose'>~\n      </td>\n    <td><a href='relation.html#transpose'>Transpose</a>\n      </td>\n    <td class='ce'><span class='alloy'>~</span> <span class='m'>R</span>\n      </td>\n  </tr>\n  <tr>\n    <td class='alloy' id='transitive-closure' title='transitive-closure'>^\n      </td>\n    <td><a href='relation.html#transitive-closure'>Transitive\n      closure</a>\n      </td>\n    <td class='ce'><span class='alloy'>^</span> <span class='m'>R</span>\n      </td>\n  </tr>\n  <tr>\n    <td class='alloy'\n       id='reflexive-transitive-closure'\n    title='reflexive-transitive-closure'>*\n      </td>\n    <td>Reflexive transitive closure\n      </td>\n    <td class='ce'><span class='alloy'>*</span> <span class='m'>R</span>\n      </td>\n  </tr>\n  <tr>\n    <td class='alloy' id='domain-restriction' title='domain-restriction'>&lt;:\n      </td>\n    <td>Domain restriction\n      </td>\n    <td class='ce'><span class='m'>Set</span> <span class='alloy'>&lt;:</span>\n      <span class='m'>R</span>\n      </td>\n  </tr>\n  <tr>\n    <td class='alloy' id='range-restriction' title='range-restriction'>:&gt;\n      </td>\n    <td>Range restriction\n      </td>\n    <td class='ce'><span class='m'>R</span> <span class='alloy'>:&gt;</span>\n      <span class='m'>Set</span>\n      </td>\n  </tr>\n  <tr>\n    <td class='alloy' id='override' title='override'>++\n      </td>\n    <td>Override\n      </td>\n    <td class='ce'><span class='m'>R1</span> <span class='alloy'>++</span>\n      <span class='m'>R2</span>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n<table>\n<tbody>\n  <tr><th colspan='3'>Logical operators <span class='pg'>69</span></th></tr>\n  <tr><th>Symbol</th><th>Keyword</th><th>Name or result</th>\n  </tr>\n  <tr>\n    <td class='alloy'>!\n    </td>\n    <td class='alloy' id='not' title='not'>not\n    </td>\n    <td><a href='logicConcepts.html#negation'>negation</a>\n    </td>\n  </tr>\n  <tr>\n    <td class='alloy'>&amp;&amp;\n    </td>\n    <td class='alloy' id='and' title='and'>and\n    </td>\n    <td><a href='logicConcepts.html#conjunction'>conjunction</a>\n    </td>\n  </tr>\n  <tr>\n    <td class='alloy'>||\n    </td>\n    <td class='alloy' id='or' title='or'>or\n    </td>\n    <td><a href='logicConcepts.html#disjunction'>disjunction</a>\n    </td>\n  </tr>\n  <tr>\n    <td class='alloy'>=&gt;\n    </td>\n    <td class='alloy' id='implies' title='implies'>implies\n    </td>\n    <td><a href='logicConcepts.html#implication'>implication</a>\n    </td>\n  </tr>\n  <tr>\n    <td class='alloy'>&lt;=&gt;\n    </td>\n    <td class='alloy' id='iff' title='iff'>iff\n    </td>\n    <td><a href='logicConcepts.html#logical-equivalence'>logical\n      equivalence</a>\n    </td>\n  </tr>\n  <tr>\n    <td class='a bgsv'>\n    </td>\n    <td class='alloy' id='else' title='else'>else\n    </td>\n    <td><span class='m'>A</span><span class='alloy'>=&gt;</span><span\n        class='m'>B</span> <span class='alloy'>else</span> <span class='m'>C</span>\n        &equiv;\n        <span class='alloy'>(</span><span class='m'>A</span><span\n        class='alloy'>&amp;&amp;</span><span class='m'>B</span><span\n        class='alloy'>)||(!</span><span class='m'>A</span><span\n        class='alloy'>&amp;&amp;</span><span class='m'>C</span><span class='alloy'>)</span>\n    </td>\n  </tr>\n</tbody>\n</table>\n\n<p>\n<a href='als/else.als'><span class='alloy'>else</span> example</a>\n</p>\n\n<table>\n<tbody>\n  <tr><th colspan='3'>Quantifiers/predicates <span class='pg'>70</span></th></tr>\n  <tr><td>\n      </td>\n      <th>Quantification<br/>\n          <span class='alloy'>Q var:set | formula</span></th>\n      <th>Predicate on relations<br/>\n          <span class='alloy'>Q e</span></th>\n  </tr>\n  <tr><td class='alloy' id='all' title='all'>all\n      </td>\n      <td><a href='logicConcepts.html#universal-quantification'\n        >universal</a>\n      </td>\n      <td class='ce'>&mdash;\n      </td>\n  </tr>\n  <tr><td class='alloy' id='some' title='some'>some\n      </td>\n      <td><a href='logicConcepts.html#existential-quantification'\n        >existential</a>\n      </td>\n      <td>size is 1 or greater\n      </td>\n  </tr>\n  <tr><td class='alloy' id='no' title='no'>no\n      </td>\n      <td>&not;&exist;\n      </td>\n      <td>size is 0\n      </td>\n  </tr>\n  <tr><td class='alloy' id='lone' title='lone'>lone\n      </td>\n      <td>zero or one exists\n      </td>\n      <td>size is 0 or 1\n      </td>\n  </tr>\n  <tr><td class='alloy' id='one' title='one'>one\n      </td>\n      <td>exactly one exists\n      </td>\n      <td>singleton\n      </td>\n  </tr>\n</tbody>\n</table>\n\n<p>\n<a href='als/relation.als' id='relation-examples'>Relation and logic examples</a>\n</p>\n\n<table>\n<tbody>\n  <tr><th colspan='2'><span class='alloy'>let</span> <span class='pg'>73</span></th></tr>\n  <tr><td><span class='alloy'>let</span> <span class='m'>x</span> =\n        <span class='m'>e</span> | <span class='m'>A</span>\n      </td>\n      <td><span class='m'>A</span> with every occurrence of\n        <span class='m'>x</span> replaced by expression <span class='m'>e</span>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n<!-- Comprehensions p74 -->\n\n\n<h2 id='signature0'>Signatures and relations</h2>\n\n<p>\n(Parts of this subsection describe the\n<a href='#language'>Alloy language</a>.)\n</p>\n\n<p>\nEach set of atoms is defined by a\n<dfn>signature</dfn>,\nwith keyword <span class='alloy'>sig</span>.&nbsp;\n</p><!--spell sig -->\n\n<p>\nA signature can contain\nzero or more relation <dfn>declarations</dfn>, separated by commas.\nEach declaration names a (binary) relation\nbetween the set defined by the signature\nand a set or relation.\n</p>\n\n<pre id='example-1' title='example-1'>\n  //  Simple example\n  abstract sig Person {     // Signature\n    father: lone Man,       //   A declaration\n    mother: lone Woman      //   Another declaration\n  }\n  sig Man extends Person {\n    wife: lone Woman\n  }\n  sig Woman extends Person {\n    husband: lone Man\n  }\n</pre>\n\n<table>\n<tbody>\n  <tr><th colspan='4'>Relationships among signatures</th></tr>\n  <tr><td><span class='m'>S</span> <span class='alloy'>in</span>\n          <span class='m'>T</span>\n      <br/><span class='m'>U</span> <span class='alloy'>in</span>\n          <span class='m'>T</span>\n      </td>\n      <td>subset\n      </td>\n      <td rowspan='2'>Every\n          <span class='m'>S</span>\n          is a\n          <span class='m'>T</span>,\n      <br/>and\n      <br/>every\n          <span class='m'>U</span>\n          is a\n          <span class='m'>T</span>\n      </td>\n      <td>An\n          <span class='m'>S</span>\n          can also be a\n          <span class='m'>U</span>\n      </td>\n  </tr>\n  <tr><td><span class='m'>S</span> <span class='alloy'>extends</span>\n          <span class='m'>T</span>\n      <br/><span class='m'>U</span> <span class='alloy'>extends</span>\n          <span class='m'>T</span>\n      </td>\n      <td>extension\n      </td>\n      <td>An\n          <span class='m'>S</span>\n          cannot also be a\n          <span class='m'>U</span>\n      </td>\n  </tr>\n</tbody>\n</table>\n\n<p>\nThe extended signature must be either\na top-level signature\nor a subsignature.&nbsp;\n</p>\n\n\n<h2 id='declaration-constraint' title='declaration-constraint'\n>Constraining a declaration</h2>\n\n<p>\nThere are two ways:&nbsp;\n</p>\n\n<ol>\n  <li> with <a href='#set-multiplicity'>set</a> or\n    <a href='#relation-multiplicity'>relation</a>\n    multiplicity constraints in the signature.&nbsp;\n    These are a quick shorthand.&nbsp;\n    The <a href='#example-1'>example above</a>\n    has several of these (all are <span class='alloy'>lone</span>).\n  </li>\n  <li> with a <span class='alloy'>fact</span> <span class='pg'>117</span>\n    that states a constraint on the set or relation.&nbsp;\n    The constraint is expressed in the Alloy logic.&nbsp;\n    <p>\n    (The <span class='alloy'>fact</span> keyword may be omitted\n    if the fact is only about the relations of a single signature,\n    and it immediately follows that signature &mdash;\n    then it is a\n    <dfn id='signature-fact' title='signature-fact'>signature fact</dfn>,\n    and is implicitly universally quantified over the signature's set,\n    and may use <dfn id='this' title='this'>this</dfn>\n    as if it were the variable of this implied quantification.)&nbsp;\n    </p>\n  </li>\n</ol>\n\n<p>\n<a href='als/declarationConstraint.als'>A\nmore extensive example of signatures, declarations, and constraints</a>\n</p>\n\n\n<h3 id='mulitplicity-constraint'>Multiplicity constraints in declarations</h3>\n\n<table id='set-multiplicity' title='multiplicity'>\n<tbody>\n  <tr><th colspan='2'>Set declarations with multiplicities <span class='pg'>76</span></th></tr>\n  <tr>\n    <th colspan='2'><span class='m'>e</span> is a expression producing a set\n      (arity 1)</th>\n  </tr>\n  <tr>\n    <td><span class='m'>x</span>: <span class='alloy'>set</span> <span class='m'>e</span>\n    </td>\n    <td><span class='m'>x</span> a subset of <span class='m'>e</span>\n    </td>\n  </tr>\n  <tr>\n    <td><span class='m'>x</span>: <span class='alloy'>lone</span>\n    <span class='m'>e</span>\n    </td>\n    <td><span class='m'>x</span> empty or a singleton subset of\n    <span class='m'>e</span>\n    </td>\n  </tr>\n  <tr>\n    <td><span class='m'>x</span>: <span class='alloy'>some</span> <span class='m'>e</span>\n    </td>\n    <td><span class='m'>x</span> a nonempty subset of <span class='m'>e</span>\n    </td>\n  </tr>\n  <tr>\n    <td><span class='m'>x</span>: <span class='alloy'>one</span> <span class='m'>e</span>\n    </td>\n    <td><span class='m'>x</span> a singleton subset of <span class='m'>e</span><br/>\n        (i.e. a scalar)\n    </td>\n  </tr>\n  <tr>\n    <td><span class='m'>x</span>: <span class='m'>e</span>\n    </td>\n    <td><span class='m'>x</span> a singleton subset of <span class='m'>e</span><br/>\n        (equivalent to <span class='alloy'>one</span>)\n    </td>\n  </tr>\n</tbody>\n</table>\n\n<table id='relation-multiplicity' title='relation-multiplicity'>\n<tbody>\n  <tr><th colspan='2'>Relation declarations with\n    <span class='alloy'>-&gt;</span> multiplicities <span class='pg'>77</span></th></tr>\n  <tr>\n    <th colspan='2'>\n      <span class='m'>A</span> and <span class='m'>B</span>\n      are expressions producing a relation\n      <br/>\n      <i>m</i> and <i>n</i> are\n      <span class='alloy'>some</span>,\n      <span class='alloy'>lone</span>,\n      <span class='alloy'>one</span>,\n      or\n      not present (which is equivalent to <span class='alloy'>set</span>)\n    </th>\n  </tr>\n  <tr>\n    <td rowspan='2'><span class='m'>r</span>: <span class='m'>A</span> <i>m</i>\n      <span class='alloy'>-&gt;</span> <i>n</i> <span class='m'>B</span>\n    </td>\n    <td><i>m</i> elements of\n      <span class='m'>A</span>\n      map to each element of\n      <span class='m'>B</span>\n    </td>\n  </tr>\n  <tr>\n    <td>each element of\n      <span class='m'>A</span>\n      maps to <i>n</i> elements of\n      <span class='m'>B</span>\n    </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h3>Facts </h3>\n\n<p>\n<span class='pg'>117</span>\nA <a href='#fact'>fact</a> contains a formula in the Alloy logic\nthat is assumed to always be true.\nSee the <a href='#language'>Alloy language</a> for more details.&nbsp;\n</p>\n\n\n\n<h2 id='disjointness'>Disjointness </h2>\n\n<p>\n<span class='pg'>71</span>\n<span class='alloy'>disj</span><!--spell disj -->\nbefore a list of variables\nrestricts their bindings to be disjoint.&nbsp;\n</p>\n\n<p>\n<a href='als/disj.als' id='disj-examples'>Disjointness example</a>\n</p>\n\n\n<h2 id='cardinality'>Cardinality constraints </h2>\n\n<p>\n<span class='pg'>80</span>\nThe prefix operator <span class='alloy'>#</span> (cardinality)\non a relation\nproduces the relation's size.&nbsp;\nThe result can be operated on with\n<span class='alloy'>+ - = &lt; &gt; =&lt; &gt;=</span>.&nbsp;\nPositive integer literals can appear in cardinality expressions.&nbsp;\n</p>\n\n<p>\n<span class='alloy'>sum</span> <span class='m'>x</span>:\n<span class='m'>e</span> | <span class='m'>ie</span><!--spell ie -->\nsums the value of <span class='m'>ie</span>\nfor each <span class='m'>x</span> in set <span class='m'>e</span>.&nbsp;\n</p>\n\n\n<h1 id='language' title='language'>The Alloy language</h1>\n\n<p>\nThe Alloy language uses the Alloy logic\nplus some other constructs\nto make <dfn id='models' title='models'>models</dfn>.&nbsp;\nIn Alloy,\na model is\n\"a description of a software abstraction\" <span class='pg'>4</span>.&nbsp;\n</p>\n\n<p>\n(Recall that in FOL\na model means\n<a href='logicConcepts.html#model'>something different</a>.)&nbsp;\n</p>\n\n\n<h2 id='language-constructs' title='language-constructs'>Language constructs</h2>\n\n<p>\nThe Alloy language adds these constructs to the\n<a href='#logic'>Alloy logic</a>:&nbsp;\n</p>\n\n<ol>\n\n  <li id='module' title='module'>\n    A <dfn>module</dfn> line\n    gives the relative pathname\n    of the model's file (minus the \".als\" suffix).&nbsp;\n    The pathname is relative to the directory\n    that imported module pathnames are going to be relative to.&nbsp;\n    (Obviously,\n    the <span class='alloy'>module</span> line is mostly redundant\n    with the file's full pathname.)&nbsp;\n  </li>\n\n  <li id='sig' title='sig'>\n    A <dfn>sig</dfn> (<a href='#signature'>signature</a>)\n    declares one or more sets of atoms,\n    and their relations to other sets.&nbsp;\n  </li>\n\n  <li id='fun' title='fun'>\n    A <dfn>fun</dfn> (<a href='#function'>function</a>)\n    defines a way of getting a relation (or set, or atom).&nbsp;\n    It can take parameters\n    that are used in getting its result.&nbsp;\n    It can define a relation (usually using <span class='alloy'>-&gt;</span>)\n    and make use of it to produce its result.&nbsp;\n    It is a <a href='logicConcepts.html#function'>FOL function</a>\n    for the Alloy logic,\n    in which expressions are relations.&nbsp;\n  </li>\n\n  <li id='pred' title='pred'><!--spell pred -->\n    A <dfn>pred</dfn> (<a href='#predicate'>predicate</a>)\n    defines a formula (true or false).&nbsp;\n    It can take parameters\n    that are used in getting its result.&nbsp;\n    It is a <a href='logicConcepts.html#predicate'>FOL predicate</a>\n    for the Alloy logic.&nbsp;\n  </li>\n\n  <li id='fact' title='fact'>\n    A <dfn><a href='#facts'>fact</a></dfn>\n    defines a formula\n    that you assume is valid (always true, for any world).&nbsp;\n    The Alloy analyzer uses <span class='alloy'>fact</span>s as axioms\n    in constructing its examples and counterexamples.&nbsp;\n  </li>\n\n  <li id='run' title='run'>\n    You <dfn>run</dfn>\n    a <span class='alloy'>pred</span>icate\n    in order to see the examples (if any) the Alloy analyzer finds\n    for which the predicate is true.&nbsp;\n    <p>\n    You define the <dfn id='scope' title='scope'>scope</dfn>\n    that the analyzer checks\n    by saying things like \"<code>run for 3</code>\" or\n    \"<code>run for 3 but 4 Dog</code>\".&nbsp;\n    The analyzer will then check only possible examples\n    that contain no more than that many\n    of atoms from each set.&nbsp;\n    </p>\n    <p>\n    <b>If it finds an example</b>,\n    then the predicate is\n    <a href='logicConcepts.html#satisfiable'>satisfiable</a>.&nbsp;\n    </p>\n    <p>\n    <b>If it finds no examples</b>,\n    the predicate may be either\n    <a href='logicConcepts.html#invalid'>invalid</a>\n    (false for all possible examples);\n    or it may be\n    <a href='logicConcepts.html#satisfiable'>satisfiable</a>\n    but not within the scope you used.&nbsp;\n    </p>\n  </li>\n\n  <li id='assert' title='assert'>\n    An <dfn>assert</dfn> (assertion)\n    defines a formula that you claim\n    will always be true.&nbsp;\n    An <span class='alloy'>assert</span>ion differs from\n    a <span class='alloy'>fact</span>\n    in that the Alloy analyzer will check\n    an <span class='alloy'>assert</span>ion to see if it is true\n    for all the examples in a scope,\n    whereas the analyzer assumes each <span class='alloy'>fact</span> is true\n    and uses them to constrain which examples it looks at.&nbsp;\n  </li>\n\n  <li id='check' title='check'>\n    You <dfn>check</dfn>\n    an <span class='alloy'>assert</span>ion\n    in order to see whether the Alloy analyzer finds any counterexamples.&nbsp;\n    <p>\n    You define the scope\n    as for a <a class='alloy' href='#run'>run</a> command.&nbsp;\n    </p>\n    <p>\n    <b>If it finds a counterexample</b>,\n    then the predicate is\n    <a href='logicConcepts.html#unsatisfiable'>unsatisfiable</a>.&nbsp;\n    </p>\n    <p>\n    <b>If it finds no counterexamples</b>,\n    the predicate may be either\n    <a href='logicConcepts.html#valid'>valid</a>\n    (true for all possible examples);\n    or it may be\n    <a href='logicConcepts.html#unsatisfiable'>unsatisfiable</a>\n    but not within the scope you used.&nbsp;\n    </p>\n  </li>\n\n</ol>\n\n<h2 id='which-where' title='which-where'>Which construct to use where?</h2>\n\n<ol>\n  <li> Writing a model (Alloy file) that might need to import\n    other models?&nbsp;\n    Use <a class='alloy' href='#module'>module</a>.&nbsp;\n  </li>\n  <li> Need a set of atoms?&nbsp; Use a <a class='alloy' href='#sig'>sig</a>.&nbsp;\n  </li>\n  <li> Need an expression, whose value is a function (or set, or scalar)?&nbsp;\n    Use a <a class='alloy' href='#fun'>fun</a> (function).&nbsp;\n  </li>\n  <li> Need a formula, whose value is true or false?&nbsp;\n    Use a <a class='alloy' href='#pred'>pred</a> (predicate).&nbsp;\n  </li>\n  <li> Need to state an axiom that you want to be true always?&nbsp;\n    Use a <a class='alloy' href='#fact'>fact</a> (function).&nbsp;\n  </li>\n  <li> Need an example for which a <span class='alloy'>pred</span> is true?&nbsp;\n    <a class='alloy' href='#run'>run</a> the predicate to see if one exists.&nbsp;\n    It's like using an existential quantifier over\n    all the predicate's parameters.&nbsp;\n  </li>\n  <li> Want to claim something is always true?&nbsp;\n    Use an <a class='alloy' href='#assert'>assert</a> (assertion).&nbsp;\n  </li>\n  <li> Want to see if an <span class='alloy'>assert</span> is unsatisfiable?&nbsp;\n    <a class='alloy' href='#check'>check</a> the assertion\n    to see if any counterexample can be found.&nbsp;\n  </li>\n</ol>\n\n\n<h1>Signatures</h1>\n\n<table id='signature' title='signature'>\n<tbody>\n  <tr><th colspan='2'>Signatures <span class='pg'>91</span></th></tr>\n  <tr>\n    <td><span class='alloy'>sig</span> <span class='m'>A</span>\n        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>\n    </td>\n    <td>Declares a set <span class='m'>A</span> of atoms\n    </td>\n  </tr>\n  <tr>\n    <td><span class='alloy'>sig</span> <span class='m'>A</span>\n        <span class='alloy'>extends</span> <span class='m'>B</span>\n        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>\n    </td>\n    <td>Declares a subset <span class='m'>A</span> of set <span class='m'>B</span>,\n        disjoint from <br/>\n        all other <span class='alloy'>extends</span> subsets of\n        <span class='m'>B</span>\n    </td>\n  </tr>\n  <tr>\n    <td><span class='alloy'>sig</span> <span class='m'>A</span>\n        <span class='alloy'>in</span> <span class='m'>B</span>\n        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>\n    </td>\n    <td>Declares a subset <span class='m'>A</span> of\n        <span class='m'>B</span>\n    </td>\n  </tr>\n  <tr>\n    <td><span class='alloy'>sig</span> <span class='m'>A</span>\n        <span class='alloy'>in</span> <span class='m'>B</span>\n        <span class='alloy'>+</span> <span class='m'>C</span>\n        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>\n    </td>\n    <td>Declares a subset <span class='m'>A</span> of the\n        union (<span class='alloy'>+</span>) of sets\n        <span class='m'>B</span> and <span class='m'>C</span>\n    </td>\n  </tr>\n  <tr>\n    <td><span class='alloy'>abstract sig</span> <span class='m'>A</span>\n        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>\n    </td>\n    <td>Declares a set <span class='m'>A</span> that contains no atoms<br/>\n        other than the ones in its subsets (if any)\n    </td>\n  </tr>\n  <tr>\n    <td><span class='alloy'>one&nbsp; sig</span> <span class='m'>A</span>\n        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>\n    </td>\n    <td>Declares a singleton set <span class='m'>A</span>\n    </td>\n  </tr>\n  <tr>\n    <td><span class='alloy'>lone sig</span> <span class='m'>A</span>\n        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>\n    </td>\n    <td>Declares a set <span class='m'>A</span> of 0 or 1 atom\n    </td>\n  </tr>\n  <tr>\n    <td><span class='alloy'>some sig</span> <span class='m'>A</span>\n        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>\n    </td>\n    <td>Declares a nonempty set <span class='m'>A</span>\n    </td>\n  </tr>\n  <tr>\n    <td><span class='alloy'>sig</span> <span class='m'>A</span>,\n        <span class='m'>B</span>\n        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>\n    </td>\n    <td>Declares two sets <span class='m'>A</span> and\n        <span class='m'>B</span> of atoms<br/>\n        Wherever <span class='m'>A</span> appeared above, a list of names can appear\n    </td>\n  </tr>\n</tbody>\n</table>\n\n\n<table id='field' title='field'>\n<tbody>\n  <tr><th colspan='2'>Fields (in a signature for set <span class='m'>A</span>)\n    <span class='pg'>95</span></th></tr>\n  <tr>\n    <td> <span class='m'>f</span><span class='alloy'>: </span>e\n    </td>\n    <td>Declares a relation <span class='m'><span class='m'>f</span></span>\n        that's a subset of\n        <span class='m'>A</span><span class='alloy'>-&gt;</span>e.&nbsp;<br/>\n        <span class='m'>e</span> can be\n        any expression that produces a set &mdash;<br/>\n        union, intersection, ... , any combination.\n    </td>\n  </tr>\n  <tr>\n    <td><span class='m'>f</span><span class='alloy'>: lone</span>\n        <span class='m'>e</span>\n    </td>\n    <td>Each <span class='m'>A</span> is related to\n        no <span class='m'>e</span> or one <span class='m'>e</span>.\n    </td>\n  </tr>\n  <tr>\n    <td><span class='m'>f</span><span class='alloy'>: one</span>\n        <span class='m'>e</span>\n    </td>\n    <td>Each <span class='m'>A</span> is related to exactly one\n        <span class='m'>e</span>.\n    </td>\n  </tr>\n  <tr>\n    <td><span class='m'>f</span><span class='alloy'>: some</span>\n        <span class='m'>e</span>\n    </td>\n    <td>Each <span class='m'>A</span> is related to at least one\n        <span class='m'>e</span>.\n    </td>\n  </tr>\n  <tr>\n    <td><span class='m'>f</span><span class='alloy'>: </span>\n        <span class='m'>g</span><span class='alloy'>-&gt;</span><span class='m'>h</span>\n    </td>\n    <td>Each <span class='m'>A</span> is related to a relation from\n        <span class='m'>g</span> to <span class='m'>h</span>.\n    </td>\n  </tr>\n  <tr>\n    <td> <span class='m'>f</span><span class='alloy'>: one</span>\n        <span class='m'>g</span> <span class='alloy'>lone -&gt; some</span>\n        <span class='m'>h</span>\n    </td>\n    <td>The multiplicities have their\n        <a href='#relation-multiplicity'>usual meanings</a>.<br/>\n        Here, each <span class='m'>A</span> is related to exactly one relation<br/>\n        relating each <span class='m'>g</span> to 1 or more\n        <span class='m'>h</span>'s, and<br/>\n        each <span class='m'>h</span> is related to 0 or 1\n        <span class='m'>g</span>.\n    </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='function' title='function'>Functions</h1>\n\n<table>\n<tbody>\n  <tr><th colspan='2'>Function <span class='pg'>121</span>s</th></tr>\n  <tr>\n    <td><span class='alloy'>fun</span> <span class='m'>Name</span>\n        <span class='alloy'>[</span><span class='m'>parameters</span><span\n        class='alloy'>]</span>\n        <span class='alloy'>:</span> <span class='m'>type</span>\n        <span class='alloy'>{</span><span class='m'>e</span><span class='alloy'>}</span>\n    </td>\n    <td>Defines a function, with the given <span class='m'>name</span>\n        and (possibly empty) <span class='m'>parameters</span>,<br/>\n        and producing a relation (or set, or scalar) of the given\n        <span class='m'>type</span>.&nbsp;<br/>\n        The result is defined by the expression <span class='m'>e</span>,\n        which may reference the <span class='m'>parameters</span>.&nbsp;\n    </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='predicate' title='predicate'>Predicates</h1>\n\n<table>\n<tbody>\n  <tr><th colspan='2'>Predicates <span class='pg'> 121</span></th></tr>\n  <tr>\n    <td><span class='alloy'>pred</span> <span class='m'>Name</span>\n        <span class='alloy'>[</span><span class='m'>parameters</span><span\n        class='alloy'>]</span>\n        <span class='alloy'>{</span><span class='m'>f</span><span class='alloy'>}</span>\n    </td>\n    <td>Defines a predicate, with the given <span class='m'>name</span>\n        and (possibly empty) <span class='m'>parameters</span>.&nbsp;<br/>\n        A predicate always produces true or false,\n        so no type is needed.&nbsp;<br/>\n        The result is defined by the formula <span class='m'>f</span>,\n        which may reference the <span class='m'>parameters</span>.&nbsp;\n    </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='facts' title='facts'>Facts</h1>\n\n<table>\n<tbody>\n  <tr><th colspan='2'>Facts <span class='pg'>117</span></th></tr>\n  <tr>\n    <td><span class='alloy'>fact\n      {</span><span class='m'>e</span><span class='alloy'>}</span>\n    </td>\n    <td>The expression <span class='m'>e</span>\n        is a constraint that <br/>\n        the analyzer will assume is always true.&nbsp;\n    </td>\n  </tr>\n  <tr>\n    <td><span class='alloy'>fact</span> <span class='m'>Name</span>\n        <span class='alloy'>{</span><span class='m'>e</span><span class='alloy'>}</span>\n    </td>\n    <td>You can name a <span class='alloy'>fact</span> if you wish;<br/>\n        the analyzer will ignore the name.\n    </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h1 id='assertion' title='assertion'>Assertions</h1>\n\n<table>\n<tbody>\n  <tr><th colspan='2'>Assertions <span class='pg'>124</span></th></tr>\n  <tr>\n    <td><span class='alloy'>assert</span> <span class='m'>Name</span>\n        <span class='alloy'>{</span><span class='m'>f</span><span class='alloy'>}</span>\n    </td>\n    <td>Defines a assertion, with the given <span class='m'>name</span>.&nbsp;\n        Assertions take no parameters.&nbsp;<br/>\n        An assertion always produces true or false,\n        so no type is needed.&nbsp;<br/>\n        The result is defined by the formula <span class='m'>f</span>.&nbsp;\n    </td>\n  </tr>\n</tbody>\n</table>\n\n\n<h2 id='modules-and-polymorphism' title='modules-and-polymorphism'\n>Modules and polymorphism <span class='pg'>130</span>\n<span class='FW'>&mdash; section under construction</span></h2>\n\n\n<h1 id='tips'> Learnt by experience </h1>\n\n<h2 id='at'> When to use <code>@</code> </h2>\n\n<p>\nThe cryptic message\n</p>\n\n<pre>\nA type error has occurred:\nThis cannot be a legal relational join where\nleft hand side is ...\nright hand side is ...\n</pre>\n\n<p>\nif for a join in a signature fact,\ncan mean that\nthe last relation before the offending '.'\nhas the same name\nas a relation in the signature;&nbsp;\nin this case, the Alloy Analyzer\nwill grab the name as belonging to <code>this</code>\nrather than the result of the preceding join.&nbsp;\nThe solution is to put a <code>@</code> after the dot;\nthe <code>@</code> disables the grab for <code>this</code>.&nbsp;\n</p>\n\n<p>\nI found out about this from an Alloy\n<a href='http://alloy.mit.edu/community/node/700'>community post</a>.&nbsp;\n</p>\n\n\n<!--xhtml -n -->\n</div>\n\n</div><!-- #TBg -->\n\n<div id='TFooter'>\n<div class='W3C'>\n  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'\n    src='../../img/valid-xhtml10-blue.png'\n    alt='Valid XHTML 1.0 Strict'/></a>\n  <br/>\n  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'\n    src='../../img/vcss-blue.png'\n    alt='Valid CSS!'/></a>\n</div>\n<div class='timestamp'>2010Mar16Tu10:56</div>\n<div style='padding-top:1px;'>\n<a class='plain' href='./index.html' style='font-variant:small-caps;'\n>Thomas A. Alspaugh</a>\n<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;\n    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>\n    <!-- -spell alspaugh uci edu --> </span>\n</div>\n</div>\n\n<!-- Google Analytics code -->\n<script type=\"text/javascript\">\nvar gaJsHost = ((\"https:\" == document.location.protocol)\n  ? \"https://ssl.\" : \"http://www.\");\ndocument.write(unescape(\"%3Cscript src='\" + gaJsHost +\n  \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n<script type=\"text/javascript\">\ntry {\nvar pageTracker = _gat._getTracker(\"UA-15281497-1\");\npageTracker._trackPageview();\n} catch(err) {}\n</script>\n\n</body>\n</html>\n\n", "encoding": "ascii"}