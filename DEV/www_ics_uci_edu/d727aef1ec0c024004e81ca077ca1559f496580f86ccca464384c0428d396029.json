{"url": "https://www.ics.uci.edu/~thornton/ics32/Notes/TkinterLayout/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 32 Winter 2019, Notes and Examples: Tkinter Layout</title>\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 32 Winter 2019 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 32 Winter 2019<br />\r\n   Notes and Examples: Tkinter Layout</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Background</p>\r\n\r\n<p>When we build applications with graphical user interfaces that are comprised of many widgets &mdash; many buttons, text entry fields, canvases, menus, etc. &mdash; one of the problems we face is the problem of <i>layout</i>, which is fundamentally the problem of deciding where the various widgets will appear within their window.  Tkinter provides tools called <i>layout managers</i> that solve this problem in a few common ways, along with ways to create one's own layout manager if the built-in tools don't do exactly what you need.</p>\r\n\r\n<p>Of the built-in layout managers included in Tkinter, the most flexible is one called <b>grid</b>, which should address your needs very well in your <a href=\"../../ProjectGuide/Project5\">Project #5</a> implementation.  This code example focuses on the details of how <b>grid</b> works.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The grid layout manager</p>\r\n\r\n<p>The <b>grid</b> layout manager arranges widgets by placing each one into one or more cells on an invisible grid.  The grid cells themselves are arranged by the layout manager into rows and columns, with the widgets then arranged within the cells.  When you create a GUI using the <b>grid</b> layout manager, you specify which widgets will appear in which cells, as well as the rules dictating how the cells' sizes change as the window's size changes, and how the widgets' sizes and positions change as the grid cells' sizes change.</p>\r\n\r\n<p>There are a few things to know about a <b>grid</b>-based layout.</p>\r\n\r\n<ul>\r\n  <li>All of the cells in a particular row have the same height, and all of the cells in a particular column have the same width.</li>\r\n  <li>The heights of different rows and the widths of different columns may be different.</li>\r\n  <li>Initially, the heights of the rows and the widths of the columns are determined by the initial sizes of the widgets they contain.</li>\r\n  <li>As the window's size grows, the additional space is allocated to the heights of the rows and the widths of the columns according to the <i>weights</i> specified on each.  Weights are a relative measure, rather than an absolute one.  For example, the proportion of a window's additional height allocated to the height of a row is the weight of that row <i>divided by</i> the total weight of all rows.  So, for example, if row 0 has weight 1 and row 1 has weight 3, every time the window's height grows by four pixels, one of the pixels is given to row 0 and three are given to row 1.  Columns are handled similarly.</li>\r\n  <li>Widgets are arranged within grid cells based on an option called <b>sticky</b>.  If a widget is placed into a particular grid cell, the <b>sticky</b> value for a widget specifies which sides of the cell it \"sticks\" to.  The <b>sticky</b> value is specified by adding together the directions \"north\", \"south\", \"east\", and \"west\".\r\n    <ul>\r\n      <li>By default, widgets float in the center of their cells.</li>\r\n      <li>If a widget is specified to stick to one side of a cell but not the opposing side (e.g., west but not east), it will be moved to the specified edge of the cell.</li>\r\n      <li>If a widget sticks to two opposite sides of a cell, its size will be stretched accordingly.  So, for example, if a button sticks to the west and east sides of a cell, it will be stretched horizontally to fill the horizontal area of the cell.</li>\r\n      <li>A widget can be made to fill an entire grid cell by sticking to all four sides (i.e., \"north\", \"south\", \"east\", and \"west\").</li>\r\n    </ul>\r\n  </li>\r\n  <li><i>Padding</i> can be specified, which is empty horizontal and/or vertical space that will be preserved along the outer edge of a grid cell.  Horizontal padding is specified using an option called <b>padx</b>, and vertical padding using <b>pady</b>.</li>\r\n  <li>A widget can <i>span</i> more than one row and/or more than one column, by setting the <b>rowspan</b> and/or <b>columnspan</b> options.  For example, if a widget is specified to be in <b>row</b> 5 and <b>column</b> 4 with <b>rowspan</b> 3 and <b>columnspan</b> 2, it will span three rows starting from row 5 (i.e., rows 5, 6, and 7) and two columns starting from column 4 (i.e., columns 4 and 5).</li>\r\n  <li>A <b>grid</b> layout can be applied to the entire contents of a window; it can also be applied to the contents of a Frame widget, a widget whose job is to contain other widgets.  This allows the entire contents of a window to be laid out in one way, but the widgets in a smaller area of the window to be laid out differently.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">A more complex example</p>\r\n\r\n<p>In this example, we highlight an example GUI that demonstrates how to control the layout of widgets using Tkinter's grid layout.  The image below shows what the GUI looked like when we were done, with yellow gridlines drawn over the GUI so you can see where each grid cell ends and the next one begins.</p>\r\n\r\n<p class=\"center\"><img src=\"layout_example.png\" alt=\"Layout Example\" /></p>\r\n\r\n<p>A few things are evident from the example:</p>\r\n\r\n<ul>\r\n  <li>The grid cells are often a lot larger than the widgets that occupy them.  The relationship between the size of a widget and the size of the grid cell it occupies is largely controlled by the <b>sticky</b> option.  For example, <b>Button 1</b> is centered vertically along the left edge of its grid cell because its <b>sticky</b> option has the value <b>tkinter.W</b> (west), while <b>Button 2</b> rides along the lower right corner of its grid cell because its <b>sticky</b> option is <b>tkinter.S + tkinter.E</b> (southeast).</li>\r\n  <li>The dark red <b>Canvas</b> widget spans two columns, so that it will lie below both buttons.  (There would have been other ways to accomplish this, such as using a Frame widget to lay out <b>Button 1</b> and <b>Button 2</b>.)\r\n  <li>The five buttons along the right-hand edge of the window don't seem to follow the same layout rules as the other widgets in the window.  This is because they are placed into a separate Frame widget with its own separate <b>grid</b> layout.  The Frame widget spans two rows of the window's grid.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The code</p>\r\n\r\n<p>Below is a link to the example layout that is shown above.</p>\r\n\r\n<ul>\r\n  <li><a href=\"layout_example.py\">layout_example.py</a></li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}