{"url": "https://www.ics.uci.edu/~goodrich/teach/ics160e/syll.html", "content": "<HEAD>\n<TITLE>ICS 160E / ECE 144 - Syllabus</TITLE>\n</HEAD>\n\n<body bgcolor=\"#FFFFFF\">\n<meta name=\"description\" value=\"SYLLABUS\">\n<meta name=\"keywords\" value=\"syll\">\n<meta name=\"resource-type\" value=\"document\">\n<meta name=\"distribution\" value=\"global\">\n\n<center>\n<h3> <b> Syllabus - ICS 160E  / EECS 114- Engineering Data Structures and \nAlgorithms</b></h3> \n<b>Michael T. Goodrich</b> <BR> \n<a href=\"http://www.ics.uci.edu/~goodrich/teach/ics160e/\">\n\t  http://www.ics.uci.edu/~goodrich/teach/ics160e/</a> <BR>\n(Office hours: M W 10:00am-11:00am, and appointments by request)\n</center>\n\n<ul>\n<li>\n<b>Catalog description.</b>\nDesign of efficient algorithms for practical data structures in\nengineering applications. Models of computation. NP-completeness.\n<li>\n<b>Prerequisites.</b> EECS 40, ability to program in Java.\n<li><b>Coursework.</b> Coursework will consist of weekly homeworks,\ntwo midterms, and a comprehensive final exam. The overall grade\nwill be determined as follows:\n<ul>\n<li> 5% from lecture attendance\n<li> 20% from written homework assignments\n<li> 20% from programming assignments\n<li> 20% from the two midterms (10% each)\n<li> 35% from the final.\n</ul>\nGroup work on the written homeworks is permitted, but each\nstudent must list his or her collaborators in writing for each problem.\nIf a student turns in a solution without listing\nthe others who helped produce this solution,\nthis act will be considered cheating (for it is plagarism).\nProgramming projects must be 100% <b>individual</b> efforts.\nSubmitted code will be subjected to a rigorous similarity checking\nsystem at UC-Berkeley, \nknown as <a href=\"http://www.cs.berkeley.edu/~aiken/moss.html\">MOSS</a>,\nand non-negligible similarities between different student submissions\nwill be considered as cheating for both students (so don't even show\nyour code to other students).\nIn addition to the procedures of the\n<a href=\"http://www.ics.uci.edu/~ucounsel/continuing_students/cheat.html\">ICS \nCheating Policy</a>, students caught cheating on programming projects\nwill have\na letter placed in their permanent record at UCI\nand, at a minimum, receive a score of zero points on the work in question.\nLate homework assignments and projects will not be accepted.<br>\n</li>\n\n<li><b>Exam policy.</b>\nExam performance must be 100% individual effort; no collaboration\nis allowed on exams.  Any collaboration or copying on exams \nwill be considered cheating.\nIn addition to the procedures of the\n<a href=\"http://www.ics.uci.edu/~ucounsel/continuing_students/cheat.html\">ICS \nCheating Policy</a>, students caught cheating on exams will be given a \nfailing grade in the class and have a letter describing the incident\nplaced in their permanent UCI record.\n</li>\n\n<li><b>Text.</b> \n<ul>\n<li>\n<b>Required:</b>\nGoodrich and Tamassia, \n<a href=\"http://www.algorithmdesign.net/\">Algorithm Design</a>,\nJohn Wiley & Sons, ISBN 0-471-38365-1.\n</ul>\n</li>\n\n<li><b>Add/drop policy.</b> \nDrops will be accepted only up to the first midterm. \nOnce your drop card has been\nsigned, further coursework from you will not be graded. After the\nseventh week of classes, withdrawals will be allowed only by\npetition and under documented extenuating circumstances.\n</li>\n</ul>\n\n<h3>Tentative Schedule</h3>\n\n<ul>\n<li><b>Week 1:</b></li>\n\n<ul>\n<li>\nIntroduction. \nAlgorithm Experimentation.\nStacks and queues. Vectors and Lists. \n</li>\n</ul>\n\n<li><b>Week 2:</b></li>\n\n<ul>\n<li>\nTrees.  Priority queues and heaps.  \n</li>\n</ul>\n\n<li>\n<b>Week 3:</b></li>\n\n<ul><li>\nDictionaries.\nBinary Search Trees.\n</li>\n</ul>\n\n<li>\n<b>Week 4:</b></li>\n\n<font color=\"RED\">Midterm I</font><br>\n\n<ul>\n<li>\nHash tables.\nSkip Lists.\n</li>\n</ul>\n\n<li>\n<b>Week 5:</b></li>\n\n<ul>\n<li>\nDivide-and-conquer.  Merge-sort.  \nQuick-sort.  Sorting lower bound. Radix-sort.  \n</li>\n</ul>\n\n<li>\n<b>Week 6:</b></li>\n<ul>\n<li>\nSelection.\nThe greedy method.\nDynamic programming.\n</li>\n</ul>\n\n\n<li>\n<b>Week 7:</b></li>\n\n<font color=\"RED\">Midterm II</font><br>\n<ul>\n<li>\nGraphs.  Graph traversal.\nDepth-first search.\n</li>\n</ul>\n\n<li>\n<b>Week 8:</b></li>\n\n\n\n<ul>\n<li>\nWeighted graphs.  \nShortest paths.  \n</li>\n</ul>\n\n<li>\n<b>Week 9:</b></li>\n\n<ul>\n<li>\nMinimum spanning trees.\n</li>\n</ul>\n\n<li>\n<b>Week 10:</b>\n\n<ul>\n<li>\nNP-Completeness. \nApproximation algorithms. \n</li>\n</ul>\n\n</ul>\n\n<p>\n<p>\nCopyright &copy 2005 \n<a href=\"http://www.ics.uci.edu/~goodrich/\">\nMichael T. Goodrich</a>, as to all lectures. \nStudents are prohibited from selling \n(or being paid for taking) notes during this course to or by any\nperson or commercial firm without the express written permission of the\nprofessor teaching this course.\n\n</BODY>\n", "encoding": "ascii"}