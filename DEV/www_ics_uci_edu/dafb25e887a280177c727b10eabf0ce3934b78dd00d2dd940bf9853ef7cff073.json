{"url": "https://www.ics.uci.edu/~thornton/ics33/CodeExamples/ImplementingContainersPart1/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\n\n<title>ICS 33 Summer 2013, Code Example: Implementing Containers (Part 1)</title>\n\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 33 Summer 2013 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../ProjectGuide\">Project Guide</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 33 Summer 2013<br />\n   Code Example: Implementing Containers (Part 1)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Background</p>\n\n<p>Python provides a number of built-in <i>containers</i> in its standard library.  A container in Python is an object that acts as though it contains other objects.  You've no doubt interacted with some of the containers built into Python's standard library, such as these.</p>\n\n<ul>\n  <li><i>Lists</i>, which represent a sequence of items, where each item in the sequence has an <i>index</i>; the indices increase sequentially starting from zero.  Items can be added and removed during a list's lifetime.</li>\n  <li><i>Tuples</i>, which, like lists, represent a sequence of items, but the sequence cannot be modified once it's been created.</li>\n  <li><i>Sets</i>, which represent a collection of unique items &mdash; the same item is not permitted to appear twice.  Order is irrelevant and the items have no indices.</li>\n  <li><i>Dictionaries</i>, which represent a <i>mapping</i> of keys to values, where each value has a unique key that identifies it.  Keys can be any of a wide variety of types.  By far, the cheapest way to find a value is to look it up by its key.</li>\n</ul>\n\n<p>None of these containers is \"better\" than any of the others.  Each solves a different kind of problem; the goal is to understand the \"shape\" of the problem you're trying to solve, and to pick a container that's appropriate for solving it.  In this course and prerequisite work, we've seen examples where each is the best choice.</p>\n\n<p>But what do you do when none of the built-in options is really the right choice?  There are at least a couple of reasons why you might want to use containers other than the ones built into Python:</p>\n\n<ul>\n  <li>You need abilities or performance characteristics that are not provided by Python's built-in containers.  For example, what if you have a \"dictionary-shaped\" problem (i.e., you need to do the same kinds of lookups based on keys that you do in a dictionary), but your collection of data is too large to reasonably fit in memory?  Rather than spread this problem throughout your program, it would be nice if you could build a container that \"felt\" like using a dictionary, but that automatically shuttled data to and from a file on a hard disk when it was too large to fit in memory.  Once you built and tested this container once, you could reuse it in any similar scenario.  (And, in reality, there's a reasonably good chance you might be able to find something in open source that does much or all of what you need.)</li>\n  <li>You need a container that's less flexible than the ones that are built in.  Lists are very useful, but not very restrictive; you can add items, remove items, sort the items, or perform any number of other transformations on a list during its lifetime.  But if the problem you're solving is narrower than that &mdash; say, for example, that you know you need to remember a sequence of items, but that you'll only ever need to access the most-recently-added item and no other &mdash; to allow anything other than narrow needs of your own problem is to allow your program to have bugs.  Rather than allow those bugs, we can simply make them impossible by building a container that allows only the things we know we need.  (We'll see examples of this in the second half of the course.)</li>\n</ul>\n\n<p>One of the recurring themes in this course is that there's very little \"magic\" in Python.  Built-in types do few things that your types can't also do.  The trick is to know what rules your code needs to follow if you want to behave like the built-in types do.  For example, when we wanted to add objects of our own types together using the + operator, we needed to look no further than the special methods <b>__add__</b> and <b>__radd__</b>.  Once we knew what Python expected us to do, the solution was straightforward.</p>\n\n<p>Containers, like everything else, aren't as special as they seem.  If you want to write a new class whose objects feel similar to the built-in containers like lists, tuples, sets, or dictionaries, you can do it, as long as you know the rules you need to follow: what special methods and other things you need to provide in order to \"hook into\" Python's model of how these things should work.  If you want to be able to index your containers using the <b>[ ]</b> notation, iterate over your containers using a <b>for</b> loop, remove items from your containers using <b>del</b>, and so on, there are only a few rules you need to follow.</p>\n\n<p>This code example is our first foray into building a custom container, an object that feels in some ways like a list, but whose items are predictable (i.e., given a particular index, a formula can be used to calculate what the item is).  So, rather than storing the items in memory, our container will determine on the fly what they must be.  If this sounds obtuse, it's not; it, too, shows up in Python's standard library.  This is exactly what <b>range</b>  objects do!  <b>range</b> isn't a function; it's a class, and its objects are containers!  But they don't actually store their items in memory &mdash; a <b>range(0, 99999999)</b> doesn't require any memory than a <b>range(0, 9)</b> does.  Because the items in the range are predictable, a <b>range</b> object figures out what they are on the fly as you ask for them, knowing that the first item is whatever \"start\" value you specify, the second item is the \"start\" value plus the \"step\" value, and so on.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">An infinite sequence of zeroes</p>\n\n<p>As a first example, imagine that we want an object that acts as though it's an infinitely-large container of zeroes.  You can index it by any non-negative integer index and you'll always get back zero; if you index it by anything else, an <b>IndexError</b> will be raised instead.</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; zeroes = InfiniteZeroes()\n&gt;&gt;&gt; zeroes[0]\n0\n&gt;&gt;&gt; zeroes[1]\n0\n&gt;&gt;&gt; zeroes[10000000]\n0\n&gt;&gt;&gt; zeroes[-500000]\n<i>Traceback (most recent call last)\n   ...\nIndexError: index must be non-negative integer</i>\n&gt;&gt;&gt; zeroes['Boo']\n<i>Traceback (most recent call last)\n   ...\nIndexError: index must be non-negative integer</i>\n</pre></blockquote>\n\n<p>While this particular example isn't of a lot of practical use, it serves to illustrate some important concepts that we'll need later.</p>\n\n<p class=\"subtitle\">The special method __getitem__</p>\n\n<p>The ability to index an object using the <b>[ ]</b> notation is provided in Python by the special method <b>__getitem__</b>:</p>\n\n<blockquote><pre>\n<b>def</b> __getitem__(self, index)\n</pre></blockquote>\n\n<p>where <b>self</b> is the object being indexed (i.e., the object that appears before the brackets) and <b>index</b> is the index (i.e., the objects that appears in the brackets).  So the expression <b>a[b]</b> would be translated, in Python, into a call to <b>a.__getitem__(b)</b> instead.</p>\n\n<p class=\"subtitle\">Using __getitem__ to implement our InfiniteZeroes container</p>\n\n<p>Our InfiniteZeroes container can be implemented very simply, then.  All we need is a <b>__getitem__</b> method that checks that the index it's given is a non-negative integer.  If so, it returns 0; if not, it raises an IndexError.  So our entire InfiniteZeroes class looks like this:</p>\n\n<blockquote><pre>\n<b>class</b> InfiniteZeroes:\n    <b>def</b> __getitem__(self, index):\n        <b>if</b> type(index) != int <b>or</b> index < 0:\n            <b>raise</b> IndexError('index must be non-negative integer')\n        <b>else</b>:\n            <b>return</b> 0\n</pre></blockquote>\n\n<p class=\"subtitle\">An interesting consequence of including a __getitem__ method</p>\n\n<p>The <b>__getitem__</b> method provides more than just indexing ability.  It also forms part of the implementation of a <b>for</b> loop in Python.  It's not the <b>for</b> loop's first choice &mdash; we'll see that in a later example &mdash; but if all it can find is a <b>__getitem__</b> method, that's enough to allow a <b>for</b> loop to attempt to iterate through a container.</p>\n\n<p>Here's what <b>for x in z</b> does if <b>__getitem__</b> is all that's available in <b>z</b>:</p>\n\n<ul>\n  <li>It attempts to call <b>z.__getitem__(0)</b>.  If successful, <b>x</b> is set to the result and the loop iterates once.</li>\n  <li>It then attempts to call <b>z.__getitem__(1)</b>.  Again, if successful, <b>x</b> is set to the result and the loop iterates again.</li>\n  <li>This continues &mdash; with the index increasing by 1 each time &mdash; until <b>__getitem__</b> raises an IndexError, in which case the <b>for</b> loop ends quietly.</li>\n</ul>\n\n<p>That means our InfiniteZeroes container works correctly with a <b>for</b> loop.  For example, the following <b>for</b> loop will run infinitely, printing a never-ending column of zeroes.</p>\n\n<blockquote><pre>\n<b>for</b> x <b>in</b> InfiniteZeroes():\n    print(x)\n</pre></blockquote>\n\n<p>That may sound like a bug, but it's actually the expected behavior.  Given an infinitely-large container, I would expect a <b>for</b> loop that iterates over it to run infinitely; if the collection never ends, neither should the loop.</p>\n\n<p class=\"subtitle\">Slicing</p>\n\n<p>When we think about lists, there's one other bit of functionality that lists support, but that we're not supporting.</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; x = InfiniteZeroes()\n&gt;&gt;&gt; x[3:9]\n<i>Traceback (most recent call last)\n   ...\nIndexError: index must be non-negative integer</i>\n</pre></blockquote>\n\n<p>In a list, when we use the notation <b>[i : j]</b>, we're asking for a <i>slice</i> of that list, a list of all the elements from index <b>i</b> to index <b>j</b> (but not including the item at index <b>j</b>).  We might expect the same thing to work with our InfiniteZeroes container, but it failed.  But, as always, it's instructive to pay attention to <i>how</i> it failed.  Notice that the error message is ours &mdash; <i>index must be non-negative integer</i> &mdash; the one we just wrote in our <b>__getitem__</b> method.  That tells us that our <b>__getitem__</b> method was called.</p>\n\n<p>But what was it passed as an index?  The answer is an object of the built-in type <b>slice</b>.  A slice object has three attributes:</p>\n\n<ul>\n  <li><b>start</b>, which indicates the starting index of the slice (or <b>None</b> if no start was specified, as in the slice <b>[:3]</b>).</li>\n  <li><b>stop</b>, which indicates the ending index of the slice (or <b>None</b> if no stop was specified, as in the slice <b>[8:]</b>).</li>\n  <li><b>step</b>, which indicates the step size (or <b>None</b> if no step was specified).</li>\n</ul>\n\n<p>So, for example, in the slice <b>[3:8:2]</b>, its <b>start</b> attribute would be 3, its <b>stop</b> attribute would be 8, and its <b>step</b> attribute would be 2.</p>\n\n<p>Negative indices, if specified, are passed as-is to <b>__getitem__</b>; it's up to a particular <b>__getitem__</b> method to handle them as appropriate.</p>\n\n<p class=\"subtitle\">Integrating slicing into our InfiniteZeroes collection</p>\n\n<p>If we want to integrate slicing into our InfiniteZeroes collection, we first need to decide how we think it should work when it's used.  Below is an example of what we might expect, with some notes included to explain the behavior.</p>\n\n<blockquote><pre>\n&gt;&gt;&gt; x = InfiniteZeroes()\n&gt;&gt;&gt; x[5:10]\n[0,0,0,0,0]    <i>(Note: indices 5, 6, 7, 8, and 9)</i>\n&gt;&gt;&gt; x[3:11:2]\n[0,0,0,0]      <i>(Note: indices 3, 5, 7, and 9)</i>\n&gt;&gt;&gt; x[8:0:-3]\n[0,0,0]        <i>(Note: indices 8, 5, and 2)</i>\n&gt;&gt;&gt; x[10:8]\n[]             <i>(No indices lie between 10 and 8 if the step is positive)</i>\n&gt;&gt;&gt; x[8:12:-1]\n[]             <i>(No indices lie between 8 and 12 if the step is negative)</i>\n</pre></blockquote>\n\n<p>Putting all of these examples together, we can derive a formula for figuring out the length of the resulting list.  But we can solve the problem more easily.  <b>range</b> objects have a length, which tells you how many numbers are in the range.  So we can take the <b>slice</b> we've been given, construct a <b>range</b> from it, and ask the <b>range</b> for its length.  The only tricky part is working around issues with start, stop, or step being missing, and with negative indices in the slice (which would not make sense in an infinitely-long sequence, because an infinitely-long sequence doesn't have a \"last\" item).</p>\n\n<blockquote><pre>\n<b>class</b> InfiniteZeroes:\n    <b>def</b> __getitem__(self, index):\n        <b>if</b> type(index) == slice:\n            <b>if</b> index.stop == None:\n                <b>raise</b> IndexError('stop must be specified in a slice')\n\n            <b>if</b> (index.start != None and index.start < 0) or (index.stop < 0):\n                <b>raise</b> IndexError('index must be non-negative integer')\n\n            range_start = 0 <b>if</b> index.start == None <b>else</b> index.start\n            range_stop = index.stop\n            range_step = 1 <b>if</b> index.step == None <b>else</b> index.step\n\n            <b>return</b> [0] * len(range(range_start, range_stop, range_step))\n        <b>elif</b> type(index) != int <b>or</b> index < 0:\n            <b>raise</b> IndexError('index must be non-negative integer')\n        <b>else</b>:\n            <b>return</b> 0\n</pre></blockquote>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The complete code example</p>\n\n<p>In lecture, we wrote the example above somewhat more quickly, then concentrated our efforts on a somewhat more complex problem called <b>SquaresList</b>, which acted as a finite-length list of items where each item is the square of its index.  So, for example, a <b>SquaresList(5)</b> is similar to the list [0, 1, 4, 9, 16].  However, since it's possible to calculate an item's value given only its index, we opted to calculate these values on the fly when <b>__getitem__</b> was called, rather than storing them in a list in memory.</p>\n\n<p>Below are links to the completed InfiniteZeroes and a commented and completed version of SquaresList from lecture.</p>\n\n<ul>\n  <li><a href=\"zeroes.py\">zeroes.py</a></li>\n  <li><a href=\"squareslist.py\">squareslist.py</a></li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}