{"url": "https://www.ics.uci.edu/~kay/courses/31/hw/lab5.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Tuesday, November 22, 2005 9:30 AM\" />\n<TITLE>ICS 31 Lab 5</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"33CB8976\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n<link href=\"http://www.ics.uci.edu/~kay/courses/31/mainstyle.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<p><FONT size=\"2\"  >ICS 31 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2017</FONT></p>\n<p><FONT   SIZE=6><B>Lab Assignment 5 </B></FONT>\n</p>\n<P><font  >This assignment is due by 10:00 p.m. on Friday, November 3</font>.</P>\n<P><font  ><strong>Preparation</strong></font> (Do this part individually, before coming to lab)</P>\n<P><font  ><strong>(1) </strong></font>If you're planning to use your own computer for some of your lab work, download the complete <a href=\"http://www.ics.uci.edu/~kay/python/RP0.py\">first version of the restaurants program</a>, save it on your computer, and run it to make sure it works in your environment. You don't want to waste lab time on this.</P>\n<!--<P><strong>(2 for Zyante) </strong>Read  sections 4.1 through 4.3; some of this is material we've already seen. </P -->\n<P><strong>(2) </strong>Read  section 4.1 in the textbook; some of this is material we've already seen.</P>\n<P><strong>(3)</strong> String manipulation isn't conceptually hard, but it requires meticulous attention to detail, so it's particularly important that you try the practice problems. At <a href=\"http://www.pythontutor.com\">www.pythontutor.com</a> you can run simple Python code and see the values change in memory; this is a helpful tool, but use it to <em>check</em> the work you do by hand. It's tempting just to copy in the code, watch it work, and then copy down the answer, but that totally defeats the purpose; learning happens when you <em>do</em> the problems, not when you see the answer.</P>\n<!--<P><strong>(4)</strong> Do Exercises 4.12, 4.15, 4.17, and 4.18. Everyone should be able to do these independently. They don't require creative algorithmic thinking; you just need to look at the section in the text to see how various language features work. The author supplies this correction:</P\n<p>p. 128, problem 4.17: in part (b), it should say: &quot;Assign to variable <code>length</code> ...&quot;</p>>-->\n\n<P>If you run into trouble, check with your TA right away.</P>\n<P><strong>(4)</strong> Read the rest of the assignment so you can come to the lab on Monday prepared to start work.</P>\n<p>&nbsp;</p>\n<p><font  ><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>\n<p><strong>(a) </strong>Choose a partner for this assignment and register your partnership using the <a href=\"http://ics31-partner-app.appspot.com/\">partner app</a>, ideally by Monday. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab.</p>\n<p><strong>(b)</strong> Prepare your <code>lab5.py</code> file as in previous labs, including a line like this: </p>\n<pre>\n#  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 5.\n</pre>\n<p><strong>(c)</strong> Let's define a Dish (that might be served at a restaurant) with three fields: a string for the name of the dish, a number for its price, and  a number for the number of calories in the dish. </p>\n<p>As you write the functions in this problem (and every problem), it's essential that you follow the <a href=\"http://www.ics.uci.edu/~kay/courses/31/design-recipe.html\">design recipe</a>, especially specifying the types of the parameters and return values. You'll need to distinguish between functions that take single items and functions that take lists of items, for example; you'll run into trouble if you're not clear on that to start with. Writing examples (in the form of assert statments) is similarly essential.</p>\n<p><strong>(c.1)</strong> Define a namedtuple for representing dishes like this and create three actual Dish objects (just make up the values for each Dish and assign them to variables named <code>d1</code>, <code>d2</code>, and <code>d3</code>).</p>\n<p><strong>(c.2)</strong> Write a function called <code>Dish_str</code> that takes a Dish and returns a string in this form:</p>\n<p><code>Paht Woon Sen ($9.50): 330 cal</code></p>\n<p>(You don't have to format the dollar amount perfectly at this point.)</p>\n<p><strong>(c.3) </strong>Write a function called <code>Dish_same</code> that takes two dishes as arguments and returns True if the names of the two dishes and their calorie counts are equal (and False otherwise). </p>\n<p>Write some tests using <code>assert</code> statements (perhaps including <code>d1</code>, <code>d2</code>, and <code>d3</code>); they should include calls with two identical dishes, two dishes that are the same except for their price, and two dishes that differ in their names, calorie counts, or both. Of course your tests should be included in your <code>lab5.py</code> file, and of course you should have tests like this for every function you write, except maybe the ones that print instead of returning a value. Coming up with thorough tests is another programming skill. Some people enjoy trying to &quot;break&quot; software; they become software quality assurance (testing) experts.</p>\n<p><strong>(c.4)</strong> Write a function called <code>Dish_change_price</code> that takes a Dish and a number and returns a Dish that's the same as the parameter except that its price is changed as follows:  The number (positive or negative) represents a percentage change in price (so that 100 would double the price and \u201350 would cut it in half). (This  may require you to think a little about the arithmetic you need to compute this result. Figure it out before you write any code; come up with a half-dozen different examples and their results.)</p>\n<p><strong>(c.5)</strong> Write a function called <code>Dish_is_cheap</code> that takes a Dish and a number and returns True if the Dish's price is less than that number (and False otherwise).</p>\n<p><strong>(c.6)</strong> Now create a list called <code>DL</code> of at least five Dish objects. Play around with this list in the shell for a minute or two (take its length, sort it, append another Dish to the end) to make sure it works as you expect. Next create another list called <code>DL2</code> that contains at least four dish objects. Then create one big list by extending <code>DL</code> with <code>DL2</code>. (Note the difference between the <code>append()</code> method and the <code>extend()</code> method; take a minute to be sure.)</p>\n<p>Write a function called <code>Dishlist_display</code> that takes a list of Dishes and returns one large string consisting of the string representation of each dish followed by a newline (<code>'\\n'</code>) character. We've done something similar to this with a collection of restaurants. Write some tests, as usual. Then use a print statement to print the string representation of all the dishes in the big list you created above.</p>\n<p><strong>(c.7)</strong> Write a function called <code>Dishlist_all_cheap</code> that takes a list of Dishes (note how this is different from <code>Dish_is_cheap</code>) and a number and returns True if the price of every dish on the list is less than that number. Of course <code>Dishlist_all_cheap</code> will call <code>Dish_is_cheap</code>;  solutions that duplicate the code instead of using an already-defined function would receive little credit.</p>\n<p><strong>(c.8)</strong> Write a  function called <code>Dishlist_change_price</code> that takes a list of Dishes and a number representing a percentage change and returns a list of Dishes with each price  changed by the specified amount. (Since lists are mutable, ask yourself how you'd write this differently if the specification were to change the list itself  rather than returning a new list with changed prices.)</p>\n<p><strong>(c.9)</strong> Write a function called <code>Dishlist_prices</code> that takes a list of Dishes and returns a list of numbers containing just the prices of the dishes on that list.</p>\n<p><strong>(c.10) </strong> Write a function called <code>Dishlist_average</code> that takes a list of Dishes and returns the average price of those dishes. (Again, call previously defined functions wherever possible; don't reinvent the wheel.)</p>\n<p><strong>(c.11)</strong> Write a function called <code>Dishlist_keep_cheap</code> that takes a list of Dishes and a number and returns a list of those dishes on the original list that have prices less than that number. This is much like keeping the consonants in a string.</p>\n<p><strong>(c.12)</strong> Create a list of at least 25 Dishes. Just make them up, but for this part it's perfectly fine to trade dishes with  classmates other than your partner. Just check that the dishes you receive are correctly formed.</p>\n<p>Write a function called <code>before_and_after</code> that takes no parameters. It prompts the user for interactive input of a number representing a percentage change in prices; then it prints the result of <code>Dishlist_display</code> on your big list of Dishes; then it changes all the prices of the Dishes on the big list; then it prints the result of <code>Dishlist_display</code> again (reflecting the changed list of Dishes).</p>\n<p><strong>(d)</strong> Copy the complete first version of the restaurants program to your lab machine (see the link above). Call it <code>restaurantsd.py</code> (because this is for part (d) of the assignment); you'll turn this file in separately, along with your <code>lab5.py</code> file. Run the code to make sure you've installed it correctly.</p>\n<p>Now, try the  tasks described below with this advice in mind: When you modify large, unfamiliar programs, you want to be especially careful (i) to make and test only small changes, one by one, testing each change as you go, (ii) to make your changes deliberately, with high confidence that they will work as intended, rather than just changing things haphazardly and hoping they'll work, and (iii) make each small set of changes on a new copy of the code, so if you have to \"roll back\" those changes you won't have far back to go because you'll have a copy of your most recent, stable version. It's easy to lose your way when navigating around a large program; these steps will help keep you on track. [Don't think that you're too good a programmer for this advice to apply to you. It's a terrible feeling when you realize you no longer understand how your program works\u2014and we're at the stage where your programs are big enough that nobody else, not the TA or the lab tutor\u2014will always be able to zero in on the problem and fix things. Debugging is hard, and the best way to debug is to design and implement carefully so you introduce as few bugs as possible in the first place.]</p>\n<p><strong>(d.1)</strong> Change the command for adding a new restaurant to <code>n</code> instead of <code>a</code>. </p>\n<p><strong>(d.2) </strong>Add an additional menu choice: </p>\n<p><code>e: Remove (erase) all the restaurants from the collection</code></p>\n<p>If the user types <code>e</code> and then <code>p</code>, for example, nothing would be printed. [This will require modifications or additions in a few places. You can do the main part of the work very easily indeed, with a single function call.] Test out your modified program interactively to satisfy yourself that it works as intended.</p>\n<p><strong>(d.3) </strong>Add one new feature to the program: </p>\n<p><code>c: Change prices for the dishes served</code></p>\n<p>When the user types <code>c</code>, the program should ask the user for an amount representing a percentage change in price, as described above. Then it should apply that price change to the prices for all the restaurants in the collection. So far with this program, each Restaurant has just one dish and price; that's what you're changing here. Later in this lab, not now, we'll add lists of Dish structures. [You should design this in the same way you designed it for a list of Dishes. Write a separate <code>Restaurant_change_price</code> function, for example, and a <code>Collection_change_prices</code> function that you would call from <code>handle_commands</code>.] </p>\n\n\n<p><strong>(e)</strong> Above we defined a Dish and we worked with lists of Dish objects. Let's call a list of Dishes a Menu and let's redefine a Restaurant to have a menu instead of just one best dish and price; we'll also define a couple of examples:</p>\n<pre>Restaurant = namedtuple('Restaurant', 'name cuisine phone menu')\nr1 = Restaurant('Thai Dishes', 'Thai', '334-4433', [Dish('Mee Krob', 12.50, 500),\n                                                    Dish('Larb Gai', 11.00, 450)])\nr2 = Restaurant('Taillevent', 'French', '01-44-95-15-01', \n\t\t\t\t[Dish('Homard Bleu', 45.00, 750),\n\t\t\t\t Dish('Tournedos Rossini', 65.00, 950),\n\t\t\t\t Dish(&quot;Selle d'Agneau&quot;, 60.00, 850)])\t\t\t\t</pre>\n<P>Do this part in your <code>lab5.py</code> file.</P>\n<P><strong>(e.1)</strong> Write a Python expression that defines <code>r3</code> as a Restaurant object for the French restaurant Pascal whose phone number is 940-752-0107; they serve escargots for $12.95 (250 cal.), poached salmon for $18.50 (550 cal.), rack of lamb for $24.00 (850 cal.), and marjolaine cake for $8.50 (950 cal.).</P>\n<p><strong>(e.2)</strong> Write the function <code>Restaurant_first_dish_name</code> that takes a Restaurant as its argument and returns the name of the first dish on the restaurant's menu. Remember to write the examples and expected results (as assert statements) before you write the function; do this for every function, whether we remind you or not. You should include code to check whether the menu has zero dishes and return the empty string if so.</p>\n<p><strong>(e.3)</strong> Write a function called <code>Restaurant_is_cheap</code> that takes two arguments, a Restaurant and a number, and returns True if the average price of the Restaurant's menu is less than or equal to the number.\n[Hint: Some of the functions you wrote above can be used here.] As you work on this, you'll find it essential to keep track of what part of the data you're working with: Is it a Restaurant object, a string, a number, a list, a Dish, ...? </p>\n<p><strong>(e.4) </strong>In fact, counting the whole collection of Restaurants, there are four &quot;layers&quot; to the data in this example:</p>\n<ul>\n  <li>Collection, a list of Restaurant objects. Operations on Collections include <code>Collection_new</code>, <code>Collection_str</code>, <code>Collection_search_by_name</code>, and others from the Restaurants program, plus all the predefined operations on lists (like <code>len</code>, <code>sort</code>, and indexing).</li>\n  <li>Restaurant, a namedtuple with four fields (strings for the name, cuisine, and phone number, and a list for the menu). Operations on Restaurants include ones we defined like <code>Restaurant_str</code>, the automatically defined constructor function <code>Restaurant</code>, and predefined ones like <code>_replace</code>.</li>\n  <li>Menu (which we called Dishlist above), a list of Dish objects. We could rename the operations we defined above (<code>Menu_display</code>, <code>Menu_change_prices</code>, <code>Menu_average</code>, and so on); we also have the predefined list operations.</li>\n  <li>Dish, a namedtuple with three fields. We defined some operations on Dish objects above.</li>\n  \n</ul>\n<!--<p>It helps keep everything straight if you can draw a big diagram of the whole data structure, as we did on the chalkboard in class.</p> -->\n<p>It  helps keep everything straight if you write a separate function for each layer. If we want, for example, to write the function <code>Collection_raise_prices</code> that takes a Collection and returns the Collection with the price of every dish at every restaurant raised by $2.50, it will be easiest if <code>Collection_raise_prices</code> calls, for  each Restaurant, a function <code>Restaurant_raise_prices</code> (that takes a restaurant and returns that restaurant with all its prices raised by $2.50). <code>Restaurant_raise_prices</code> in turn would call <code>Menu_raise_prices</code>, which takes a Menu, applies a function like <code>Dish_raise_price</code> to each Dish on the Menu, and returns the modified menu.</p>\n<p>Create a Collection from the three Restaurants defined above (plus more, if you like).</p>\n<p>Write the function <code>Collection_raise_prices</code> as described above. Simply raise each price by $2.50.</p>\n<p>Then, write the function <code>Collection_change_price</code> that works as described above but takes a second parameter, a percentage by which to change each price (as we did above). Note that you'll have to keep passing the percentage along to each successive function, since it's not until you get to the bottom (the price of an individual Dish) that you'll actually use that number.</p>\n<p><strong>(e.5)</strong> Write the function <code>Collection_select_cheap</code> that takes a Collection and a number and returns a list of all the Restaurants in the collection whose average price is less than or equal to that number. Use the functions described above where appropriate.</p>\n<p> <strong>(f)</strong> Now, let's try to incorporate menus into the full Restaurants program. Start by downloading a clean copy of the <a href=\"http://www.ics.uci.edu/~kay/python/RP0.py\">first version of the restaurants program</a>; if you're confident in the version you modified in part (d), you may start with that version instead. For this part, create a separate file called  <code>restaurantsf.py</code>. You'll turn that file in along with your <code>lab5.py</code> file and the  <code>restaurantsd.py</code> file you created earlier.</p>\n<p>Our advice about taking things slowly and methodically applies here as never before.  If you find yourself running out of time at the end of the week, it may well be because you weren't methodical enough about making changes to this code.</p>\n<p>The original program has a section for Restaurants and a section for Collections. You'll want to add a section for Dishes and a section for Menus. In the Dish section, include the functions <code>Dish_str</code> (which you already wrote) and <code>Dish_get_info</code>, which works along the same lines as <code>Restaurant_get_info</code>.  </p>\n<p>Now, in the Menus section, write a <code>Menu_enter</code> function that repeatedly asks whether the user wants to add a Dish. If the user enters yes, the function prompts the user to create a Dish and adds it on to the growing list of dishes; when the user enters no, the function returns the compiled list of Dishes.  Now, where do we have to <em>call</em>  <code>Menu_enter</code> and take the Menu it returns, including it into the whole data structure in the appropriate place? In the Menus section, you'll also need someting to create a display string for the menu of dishes; you'll also need to find where in the program to <em>call</em> the function that generates the Menu display string.</p>\n<p>Next, incorporate your price-changing code into the program so that ultimately, the main menu gives the same option as above<strong>:</strong></p>\n<p><code>c: Change prices for the dishes served</code></p>\n<p>When the user types <code>c</code>, the program should ask the user for an amount representing a percentage change in price, as before, and it should apply that price change to the prices for all the Dishes in all the Restaurants in the collection.</p>\n<p>Finally, if you have time, also incorporate a top-level command that selects restaurants with prices at or below a specified value, reusing the code you defined above where appropriate.</p>\n<!--\n<p><strong>(g)</strong> Do Exercises 4.13 and 4.14, putting the solutions in your <code>lab5.py</code> file.</p>\n<p>The author supplies these corrections:</p>\n<p>p. 128, problem 4.13: s should be 'abcdefghijklmnopqrstuvwxyz'<br>\np. 128, problem 4.14: (a) &quot;picture&quot; should be &quot;text file&quot;.<br>\n(b) should say &quot;Assign to variable <code>address</code> the substring of <code>log</code> that ends before the first blank space in <code>log</code>, using the string method <code>split()</code> and the indexing operator.&quot;<br>\n(c) should say &quot;Assign to variable <code>date</code> the slice of string <code>log</code> containing the date <code>(12/Feb ... -0600)</code> ...&quot;.\n</p>  \n<p>Next do Exercise 4.19 and Problem 4.23.</p>-->\n<p><strong>(g)</strong> Write a function called <code>letter_count</code> that has two strings as parameters.  The function examines its first parameter, counting certain letters; the second parameter is a string that specifies which letters to count.  Thus, <code>letter_count(some_message, 'aeiou')</code> would return counts of the vowels in the string <code>some_message</code> and <code>letter_count(some_message, ' \\t\\n')</code> would return counts of the white-space characters (space, tab, and newline). The function should return its counts as a list of Count namedtuples, where a Count namedtuple has two fields, letter and number.  [Okay; go back and read that again, two or three times, until it's clear. It's important to be able to read specifications that use technical terminology. The following example may also help.] Calling <code>letter_count('The cabbage has baggage', 'abcd')</code> should return <code>[Count(letter='a',number=5), Count(letter='b',number=3), Count(letter='c',number=1), Count(letter='d',number=0)]</code>.\n </p>\n <p>So how do you go about this?  You need to break it down into parts.  First, follow the design recipe: Write a function header with the types of the parameters and the type of the return value; write a docstring \"purpose statement\"; and write some examples of calls to this function and the expected results (in the form of assert statements).  That may take a few minutes, but it's time well spent at this stage.  Second, define the Count namedtuple.  Third, and this is always a good idea when you're designing a function that does the same thing (count occurrences) with multiple values (the vowels or whatever), design and write a function that does the task with one value (i.e., takes a string and a single character and returns a single Count namedtuple with the character and the number of times it occurs in the string); the body of this function can be one line that calls a string method (see if you can find it in the book or in <code>help(str)</code>).  Fourth, write the body of the main <code>letter_count</code> function, where the task is to call the count-one-character function for each of the characters you're counting, building up the list of Counts and returning it at the end.\n </p>\n <p>For purposes of this assignment, treat upper and lower case characters as distinct; that will make the coding easier. But you should consider how you could modify your function to count upper and lower case versions of the same letter together.</p>\n<p><strong>(h) </strong><strong></strong>Remember that each partner must complete a partner evaluation form and submit it individually. Do this using the <a href=\"http://ics31-partner-app.appspot.com/\">partner app</a>. Make sure you know your partner's name, first and last, so you can evaluate the right person.\n  <!-- Some students have been forgetting to specify their partner's name on the survey; from now on, if you forget your partner's name we won't give you credit for completing the evaluation.-->\nPlease complete your evaluation by the end of the day on Friday, or Saturday morning at the latest. It only takes a couple of minutes and not doing it hurts your participation score.\n<p><strong>What to turn in:</strong> Submit via Checkmate three files: your  <code>lab5.py</code> file containing your solutions to parts (c), (e), and (g), and the two files  <code>restaurantsd.py</code> and <code>restaurantsf.py</code> from parts (d) and (f), respectively. Remember what we've said in previous labs about rereading the assignment and rerunning your Python files.</p>\n<p>Also remember that each student must complete a partner evaluation form; these evaluations contribute to your class participation score. Get in the habit of doing this every week on Friday after you've submitted your assignment; the evaluation closes on Saturday morning. </p>\n<p>&nbsp;</p>\n<p><font face=\"Helvetica\" size=\"1\">Written by David G. Kay in Fall 2012 for ICS 31, based in part on assignments from ICS H21 and Informatics 41. Modified by David G. Kay, Winter 2013, Fall 2013, Winter 2014, Fall 2014, Winter 2015, Fall 2015, Spring 2017.</font></p>\n<br class=\"Apple-interchange-newline\">\n<HR />\n<FONT  ><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\"  >\n<!-- #BeginDate format:fcAm1a -->Saturday, October 7, 2017 5:27 PM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "utf-8"}