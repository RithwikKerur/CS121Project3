{"url": "https://www.ics.uci.edu/~kay/courses/i42/hw/assignments_index_files/grading_criteria_for_lab.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Tuesday, March 7, 2006 7:02 AM\">\n<TITLE>Grading Criteria for Lab Assignments</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERXDATA\" CONTENT=\"4C51CD36\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\">\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<A NAME=\"_top\"></A>\n<A NAME=\"GradingCriteria\"></A>\n<P>\n<FONT FACE=\"Goudy Old Style\" SIZE=5>Grading Criteria for Lab Assignments</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Lab assignments will be graded on the following\nqualities, in rough order of priority:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"Goudy Old Style\"><B>Correctness</B> (Nothing else matters if\nthe results aren&#39;t right.)</FONT><BR>\n<BR>\n</LI>\n<LI>\n<FONT FACE=\"Goudy Old Style\"><B>Completeness</B> (We expect everyone to\nfinish the required features of each assignment, but if it comes to a choice,\nit&#39;s much better, both in class and in real life, to submit something\nthat works perfectly but doesn&#39;t implement every feature than something\nthat could produce a wrong answer.)</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\"><B>Design</B> (Correctness matters, but it&#39;s\nnot the only thing that matters.  Your design choices should not be awkward,\ncumbersome, or inappropriate; your methods should be broken into parts rather\nthan getting too long.  In early assignments, though, we will specify most\nof the design for you.)</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\"><B>Style</B> (Your program should be appropriately\nformatted, your class, method, field, and constant names should be meaningful,\nand in general you should follow the conventions described at </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.python.org/dev/peps/pep-0008/\">http://www.python.org/dev/peps/pep-0008/</A></FONT><FONT FACE=\"Goudy Old Style\">.\n We use the term &quot;style&quot; here in the sense of &quot;good style&quot;\nand &quot;bad style,&quot; not in the sense of Hemingway&#39;s style being\ndifferent from Joyce&#39;s.  Everybody&#39;s code should adhere both to\nthe generally accepted rules of good programming style and to the specific\nstyle guidelines of their organization.)</FONT><BR>\n<BR>\n</LI>\n<LI>\n<FONT FACE=\"Goudy Old Style\"><B>Documentation</B> (Every class and every\nmethod should include a docstring (a string as the first line of the definition) that provides brief but pithy description of their meaning and\nbehavior, along the lines of the purpose statements we wrote in Scheme.\n You&#39;ll note that the Scheme contracts are now part of the actual code\nas annotations in the function header.)</FONT><BR CLEAR=ALL>\n</LI>\n</UL>\n<HR>\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,</FONT><a href=mailto:kay@uci.edu> kay@uci.edu</A>\n</address>\n</BODY>\n</HTML>\n", "encoding": "ascii"}