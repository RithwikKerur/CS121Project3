{"url": "https://www.ics.uci.edu/~kay/courses/i41/hw/lab7.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Sunday, November 6, 2005 4:26 PM\" />\n<TITLE>Lab Assignment 7</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D221A98F\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/i41/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n.style1 {\tfont-family: \"Courier New\", Courier, monospace;\n\tfont-size: 10pt;\n}\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT size=\"2\" FACE=\"Goudy Old Style\">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\" SIZE=6><B>Lab Assignment 7</B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">This assignment (shortened because Friday, November 11 is a university holiday) is  still officially due on Friday. As a practical matter, you should try to finish it by the end of Wednesday's lab, but it would be wise to choose a partner whom you haven't worked with already and whose out-of-class schedule fits with yours on Wednesday or Thursday.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(a)</B> Start with a copy of your <span class=\"style1\">copy-file</span> function from last week's lab (without the line numbers); you may use either partner's code or rewrite it from scratch.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(a.1)</B> Write the function <span class=\"style1\">pick</span>,\n  which takes three arguments.  The first should be a string that the function\n  will search for in the file; the second is a string naming the input file;\n  the third is a string naming the output file.  The output file should contain\n  only those lines in the input file that contain the specified string somewhere\n  in the line.  (We&#39;ve provided some <A HREF=\"http://www.ics.uci.edu/~kay/scheme/strings.scm\">code for string processing</A> to make this task easier.)</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(a.2)</B> Define the function <span class=\"style1\">stats</span>, which\n  takes a string naming a file and a symbol that indicates what statistic\n  to compute (and return) about the file, according to the list below.  Thus <code>(stats &quot;myfile&quot; 'total-lines)</code> would return the number of lines in the file <code>myfile</code>. You\n  should try to use local definitions in your function so that you don&#39;t\n  calculate intermediate results more than once.  You&#39;ll want to use the\n  predefined function <span class=\"style1\">string-length</span>.  You can also use <span class=\"style1\">map</span>, <span class=\"style1\">filter</span>, and <span class=\"style1\">foldr</span> to calculate these values compactly.</FONT></P>\n<span class=\"style1\"><FONT FACE=\"Courier New\" SIZE=2>&#39;total-lines</FONT><FONT FACE=\"Goudy Old Style\">:</FONT></span><FONT FACE=\"Goudy Old Style\"> The total number of lines in the file</FONT>\n<P><span class=\"style1\"><FONT FACE=\"Courier New\" SIZE=2>&#39;average-length</FONT><FONT FACE=\"Goudy Old Style\">: </FONT></span><FONT FACE=\"Goudy Old Style\"> The average length of lines in the file</FONT></P>\n<P><span class=\"style1\"><FONT FACE=\"Courier New\" SIZE=2>&#39;empty-lines</FONT><FONT FACE=\"Goudy Old Style\">:</FONT></span><FONT FACE=\"Goudy Old Style\"> The number of empty (zero-length) lines in the file</FONT></P>\n<P><span class=\"style1\"><FONT FACE=\"Courier New\" SIZE=2>&#39;average-nonempty-length</FONT><FONT FACE=\"Goudy Old Style\">: </FONT></span><FONT FACE=\"Goudy Old Style\">The average length of the non-empty lines in the file</FONT></P>\n<P><span class=\"style1\"><FONT FACE=\"Courier New\" SIZE=2>&#39;longest-line</FONT><FONT FACE=\"Goudy Old Style\">: </FONT></span><FONT FACE=\"Goudy Old Style\">The longest line in the file (you can do this with foldr)</FONT></P>\n<P><span class=\"style1\"><FONT FACE=\"Courier New\" SIZE=2>&#39;longest-line-length</FONT><FONT FACE=\"Goudy Old Style\">: </FONT></span><FONT FACE=\"Goudy Old Style\">The length of the longest line in the file</FONT></P>\n<P><span class=\"style1\"><FONT FACE=\"Courier New\" SIZE=2>&#39;shortest-line</FONT><FONT FACE=\"Goudy Old Style\">: </FONT></span><FONT FACE=\"Goudy Old Style\">The shortest non-empty line in the file</FONT></P>\n<P><span class=\"style1\"><FONT FACE=\"Courier New\" SIZE=2>&#39;shortest-line-length</FONT><FONT FACE=\"Goudy Old Style\">:</FONT></span><FONT FACE=\"Goudy Old Style\"> The length of the shortest line in the file.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(a.3)</B> (optional, only if you have time) Redefine  <span class=\"style1\">stats</span> to\n  take a string naming a file and a list of symbols, each indicating a statistic\nto compute about the file. Your revised version should include a list of results corresponding to the list of statistics (or better yet, a list of pairs with the statistic name and its value).  Thus <code>(stats &quot;myfile&quot; (list 'total-lines 'shortest-line))</code> might return <code>(list (list 'total-lines 3982) (list 'shortest-line &quot;Yes.&quot;))</code>.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\">Submit these definitions via Checkmate.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(b)</B> This week is an excellent time to shore up\n  your understanding of material from previous weeks that you're still not sure about.\n  Before we delve into what follows, take some time to fill in or reinforce your knowledge\n  from past weeks by reworking any problems from previous homeworks or labs that you or\n  your partner struggled with or never finished.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">The goal here, as in any lab assignment, is to do this work in pairs, and to ensure\n  that both partners are clear on how you arrived at a new solution.  It's best to pick\n  a few problems that each of you struggled with, so that both partners benefit from the\n  time spent, but if one partner feels more confident, it's preferable for that partner\n  to help raise the other one's confidence.  Remember, again, that many of you will be each other's\n  classmates for the next four years, so each of you benefits from other students' strengths. If both of you feel confidently up to date, go back and do some of the optional parts from past assignments.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Collect your definitions into one or more .rkt files.  You may find it necessary to\nspread the definitions into multiple .rkt files, since different homeworks required\ndifferent language levels and/or different teachpacks.  Include a comment at the top of\neach file, indicating which language and which teachpacks (if any) are required to execute\nthe code within.  There are no explicit requirements about how many problems to (re)submit,\nbut you can expect that we'll take your diligence into account when assigning final\ngrades if you redo many problems that you had trouble with, and if you help your partner\nto do the same.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Submit your reworked definitions to Checkmate.</FONT></P>\n<P>\n  <FONT FACE=\"Goudy Old Style\"><B>(c)</B>  (You don't have to complete this section, but you should at least do part <strong>(c.1)</strong> below) At </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants4.scm\">http://www.ics.uci.edu/~kay/scheme/restaurants4.scm</A></FONT><FONT FACE=\"Goudy Old Style\">\n  you will find a version of the restaurants program that implements menus\n  and also reading and writing restaurant collections from a file.  This program\n  uses the Intermediate Student with Lambda language level.  You&#39;ll also\nneed to install the teachpack called </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/scheme/simple-file-io.ss\">simple-file-io.ss</A></FONT><FONT FACE=\"Goudy Old Style\">. (Remember to right- or control-click on the link and download the file, saving it in the same folder that contains your code.) </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><strong>(c.1)</strong> Download this program and run it, creating\nrestaurants and saving them when you quit.  Run it again, starting with\nthe saved file.  (You can restart the program in the same interactions window\nin DrScheme with another call to </FONT><FONT FACE=\"Courier New\" SIZE=2>(restaurants\n&#39;x)</FONT><FONT FACE=\"Goudy Old Style\">.)  Take a little time to look\nover the code, most of which should be familiar.  If your DrScheme window\ndoesn&#39;t show the high-level program profile in a column at the right,\nselect Show Program Contour from the View menu.  You&#39;ll see large section\nheadings in that view (which you can create with Insert Large Letters from\nthe Insert menu).</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Note that we&#39;re reading and writing our\ncollection as a Scheme expression (the third approach we mentioned in last\nweek&#39;s assignment).  This makes sense, since it means we don&#39;t have\nto rebuild every restaurant when we read it back in.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c.2)</B>  Modify this program by adding\nthe search-by-cuisine and search-by-menu-word menu commands you wrote in\nlast week&#39;s assignment.  (You may use either partner&#39;s code from\nlast week, or you may reimplement it from scratch.)</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c.3)</B>  Add a command to the menu (of commands) that\nwill let users add new dishes to a restaurant currently in the collection.\nThere are two steps to this: First, change the command-menu code to recognize the new command, prompt the user for the restaurant's name, print a message if the name isn't found, and otherwise and call a function  to add dishes to a restaurant. Second, approach the dish-adding process layer by layer, with a function that takes a restaurant and returns the restaurant with a new menu, a function that takes a menu and adds some dishes, and a function that prompts the user for a (new) dish's name and price and returns a dish structure. Look at the existing code to see what functions are already available.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">Once you&#39;ve done this, refine\n  the dish-adding process as follows:  If a dish being added has the same\n  name as a dish already on that menu, then just replace the old price with\n  the new price.  This should happen when you&#39;re initially adding dishes\n  as well as when you&#39;re adding new dishes later; use the same code. \n  This also means (automatically) that no menu will have two dishes with the\n  same name.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c.4)</B>  Add a menu command to import\nanother restaurant collection from another file, adding all the restaurants\nin that file to the main collection.  Re-use the file-reading code where\npossible.  </FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">After you&#39;ve done the basic task of adding all the imported\n  restaurants to the collection, go back and implement this refinement:  If\n  a restaurant you&#39;re adding has the same name and phone number as a restaurant\n  that&#39;s already in the collection, then just add the new restaurant&#39;s\n  dishes to the existing record for that restaurant.  (Add uniquely, of\n  course, as in the previous part.) Do this same adding of restaurants that are unique by name-plus-phone for restaurants that the user adds manually.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">You&#39;ll note that with interactive interfaces,\neven text-based ones, handling testing isn&#39;t as easy as it is when we&#39;re\njust using the interpreter.  Now that we have files, so we can save restaurant\nset-ups, it&#39;s a little easier again.  But of course this doesn&#39;t\nmean that testing is no longer important.  It&#39;s just another illustration\nthat interactivity adds an extra layer of complexity and that it&#39;s important\nto build and test our model (the underlying restaurant, menu, dish, and\ncollection classes in this case) independently of the view and controller\n(the interface).</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">You&#39;ll also note as you&#39;re doing this\nthat you need to work with file-handling functions that are unfamiliar.\n You have a description of the functions (and more detail is available in\nthe DrScheme Help Desk, although looking there isn&#39;t necessary; you also\nhave some working code to use as an example.  This is all you&#39;ll get\n(aside from a little assistance from your instructional staff, but you wouldn&#39;t\nhave that in the real world); the thing is, it's <em>more</em> than you'd get in a similar situation in the real world, so learning how to make practical use of the information you do have is an important skill. One of the nice things about the Scheme we&#39;ve\ndone so far is that we could understand everything &quot;down to the ground,&quot;\nevaluating everything in terms of the basic rules of substituting values\nfor expressions over and over.  But as we learn how to handle other interfaces\n(as we did with the graphics earlier, as we&#39;re doing here with external\nfiles, and as we could do with many other interfaces), we don&#39;t get to look\nunder the hood.  We have to use the API (the application programming interface&mdash;the\nbehavior, the contract and purpose of the functions, not their definitions),\nfitting the functions we&#39;re given together like pieces of a jigsaw puzzle\nto get the result we need.  Sometimes this involves taking code that we\nknow works for a similar task, duplicating it, and modifying the copy to\nfit the new circumstances (and then perhaps abstracting and refactoring\nthe new code with the original, if they&#39;re in the same program).  Becoming\ncomfortable working with APIs is a crucial skill, since software is rarely\nbuilt today without using some pre-existing library.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Turn in your modified program via Checkmate.</FONT></P>\n\n<!--\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b)</B>  At </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants5.scm\">http://www.ics.uci.edu/~kay/scheme/restaurants5.scm</A></FONT><FONT FACE=\"Goudy Old Style\">\nis a version of the restaurants program that has a web interface.  Download\nit and run it; it requires Advanced Student Scheme and the </FONT><FONT FACE=\"Courier New\" SIZE=2>servlet.ss</FONT><FONT FACE=\"Goudy Old Style\">\nteachpack from DrScheme (as documented in the comment at the top of the\nprogram).  Then take some time to look over the code to get an idea of how\nit&#39;s organized.  The restaurant and collection code should be completely\nfamiliar; the main-menu-handling code should have some familiar aspects;\nthe form-handling code should be completely foreign.  That&#39;s okay for\nnow.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b.1)</B>  Modify this program to read and\nwrite restaurant collections from a file.  To make it easier, read and write\nfrom a file named </FONT><FONT FACE=\"Courier New\" SIZE=2>Restaurants.txt</FONT><FONT FACE=\"Goudy Old Style\">.\n Rather than asking the user whether to start from an empty file or an existing\none, just use </FONT><FONT FACE=\"Courier New\" SIZE=2>(file-exists? &quot;Restaurants.txt&quot;)</FONT><FONT FACE=\"Goudy Old Style\">\nto see whether it&#39;s already there.  Note that for this to work simply,\nthe file containing your Scheme definitions and your </FONT><FONT FACE=\"Courier New\" SIZE=2>Restaurants.txt</FONT><FONT FACE=\"Goudy Old Style\">\nfile must both be in the same folder.  Handling files in Advanced Student\nScheme requires the </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/scheme/advanced-file-io.ss\">advanced-file-io.ss</A></FONT><FONT FACE=\"Goudy Old Style\">\nteachpack (instead of </FONT><FONT FACE=\"Courier New\" SIZE=2>simple-file-io.ss</FONT><FONT FACE=\"Goudy Old Style\">).</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b.2)</B>  Add the ability to search for\na restaurant by cuisine.  This will require following the copy-and-modify\nmethodology described above; look for the code that handles searching by\nname, then copy and adapt it to handle searching by cuisine.  Here is a\nbrief catalog of the main steps:  Define another button name constant for\nsearching by cuisine; copy and modify the search-by-name code in </FONT><FONT FACE=\"Courier New\" SIZE=2>handle-main-menu</FONT><FONT FACE=\"Goudy Old Style\">;\ncopy and modify the search-by-name lines in </FONT><FONT FACE=\"Courier New\" SIZE=2>make-main-menu-form</FONT><FONT FACE=\"Goudy Old Style\">;\ncreate a </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-search-by-cuisine</FONT><FONT FACE=\"Goudy Old Style\">\nfunction, or better yet update the collection code to use high-order functions.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Turn your modified program in via Checkmate.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">The point of these web-based exercises is to\ngive you some real-world context for your programs and to illustrate that\nthe underlying model--the definitions and operations on restaurants and\ncollections--are independent of the user interface.  Our main goal is not\nto train you as web programmers; we&#39;re not going to ask questions on\nthe tests about the APIs for web interaction.  But if you&#39;d like to\nfiddle more with this, go ahead and (i) put high-order functions into this\nversion of the collection class, (ii) implement menus, including allowing\nthe user to add dishes and also to remove them, (iii) allow the user to\nspecify what file to read from and write to, using </FONT><FONT FACE=\"Courier New\" SIZE=2>get-file</FONT><FONT FACE=\"Goudy Old Style\">\nand </FONT><FONT FACE=\"Courier New\" SIZE=2>put-file</FONT><FONT FACE=\"Goudy Old Style\">\nas in the previous program, (iv) implement searching dishes for a word,\nas in last week&#39;s homework.  None of these are required as part of this\nassignment.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c)</B>  At </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/courses/i41/store.html\">http://www.ics.uci.edu/~kay/courses/i41/store.html</A></FONT><FONT FACE=\"Goudy Old Style\">\nyou will find a guide to a set of related programs that implement a very\nsimple web store.  The site lists six files.  Create a new folder on your\nmachine and download these files to that folder.  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Then follow the instructions on the web page.\n You&#39;ll probably want to run the administrator program first, to stock\nyour store with some products.  Then run the customer program for a while,\nexploring how the program works.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Write up a page of observations:  What works,\nwhat features would be good to add, how it matches or differed from your\nexpectations, how the interface feels, and so on.  The writing doesn&#39;t\nhave to be formal--it can be a list of bullet items--but it should be clear\nand clean, not slapdash.  Turn this page in via Checkmate.</FONT></P>\n-->\n\n\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(d)</B>  Remember that each partner must\ncomplete a partner evaluation form via the Survey tool on <code>eee.uci.edu</code>.  Please\ndo this by the end of the day Friday.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments by David\nG. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2010.</FONT></P>\n<HR />\n<FONT FACE=\"Goudy Old Style\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Goudy Old Style\">\n<!-- #BeginDate format:fcAm1a -->Thursday, November 10, 2011 10:21 AM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "encoding": "ascii"}