{"url": "https://www.ics.uci.edu/~dan/bridge/alpha.html", "content": "<HTML><HEAD>\n<TITLE>alpha-beta</TITLE>\n</HEAD><BODY>\n<H2>alpha-beta</H2>\n\n<I>Backtrack programming</I> consists of searching a vector\nspace of possibilities in a systematic fashion.\nFor example, if actions <I>a, b, c</I> are to occur\nin that order and each action has two possibilities\n(say, {<I>a1, a2</I>}, {<I>b1, b2</I>}, {<I>c1, c2</I>})\nthen we might first consider performing the first of\nall possibilities, resulting in considering the sequence\n<I>a1-b1-c1</I>.\nWe now iterate changing the last of the actions to some other\npossibility that has not yet been considered.\nThis results in next considering <I>a1-b1-c2</I>.\nWhen we run out of possibilities of changing the last action,\nwe change the last of the actions that has other possibilities.\nIn this manner, we consider the sequences in the order:\n<I>a1-b1-c1</I>, <I>a1-b1-c2</I>, <I>a1-b2-c1</I>, <I>a1-b2-c2</I>,\n<I>a2-b1-c1</I>, <I>a2-b1-c2</I>, <I>a2-b2-c1</I>, <I>a2-b2-c2</I>.\nThe set of sequences can be thought of as being the leaves\nof the tree of possibilities, where a tree <I>node</I>\ncorresponds to a partial sequence, and the degree of a node\nis the number of possibilities of the next action.\n<P>\n<I>Branch-and-bound</I> is an embellishment of backtrack programming.\nPerforming a sequence of actions results in reaching\na leaf of the tree with which we can associate a <I>value</I>.\nOur desire is to determine whether there exists a sequence of actions\nwhich will lead to a leaf having at least (or at most) a specified value,\n<I>goal</I>, or to determine the maximum (or minimum) achievable value.\nDuring the process of the search, we may be able to assign\nupper and lower value <I>bounds</I> to intermediate\nnodes of the tree\n(such as after performing the partial sequence <I>a1-b2</I>)\nin such a manner that logically and mathematically\nit will always be the case that the value, <I>v</I>, of any\nleaf obtained by completing the partial sequence will\nhave value between the upper and lower bounds.\nIf the upper bound is less than <I>goal</I>\nor, for maximization problems,\nless than the highest value achieved thus far\n(or if the lower bound is more than <I>goal</I>\nor, for minimization problems,\nmore than the lowest value achieved thus far)\nthen we can avoid searching the collection of\nsequences that complete the partial sequence, thus <I>pruning</I>\nthe search (and saving time).\n<P>\n<I>Alpha-beta</I> search is similar to branch-and-bound\nfor a game between two opposing players or teams, in which\none side has a goal of achieving or maximizing a value while the other\nside has a goal of preventing achievement or minimizing value.\n<P>\nThere are a number of strategies that may improve the efficiency of\nalpha-beta search.\nSome of these\n<a href=\"http://www.ics.uci.edu/~dan/bridge/amenities.html\">\namenities</a> are effective for the bridge hand evaluation problem.\n<P>\n<HR>\n<ADDRESS>\nDan Hirschberg<BR>\nComputer Science Department<BR>\nUniversity of California, Irvine, CA 92697-3425<BR>\n</ADDRESS>\n<tt>dan at ics.uci.edu</tt><br>\nLast modified: July 1, 1996\n</BODY></HTML>\n", "encoding": "ascii"}