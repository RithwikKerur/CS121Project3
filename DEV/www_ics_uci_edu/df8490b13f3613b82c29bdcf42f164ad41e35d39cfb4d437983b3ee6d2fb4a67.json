{"url": "https://www.ics.uci.edu/~thornton/ics45c/ProjectGuide/Project1/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 45C Fall 2019, Project #1: Stay (Faraway, So Close!)</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 45C Fall 2019 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../Notes\">Notes and Examples</a> |\r\n<a href=\"../../GradeCalculator\">Grade Calculator</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 45C Fall 2019<br />\r\n   Project #1: <i>Stay (Faraway, So Close!)</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Monday, October 21, 11:59pm</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Background</p>\r\n\r\n<p>Like many things that have been automated in recent decades, most of us no longer use maps printed on paper when we want to get from one place to another.  Instead, maps exist online in a searchable form, and GPS systems can help us to track our physical position as we move around.  Software then can automatically tell us the shortest route between two locations, track our position along that route, and indicate how we should proceed along the way.  Air travel is similarly automated, though, of course, the restriction that one should drive only on existing roads is lifted; aircraft can follow something more akin to a \"straight-line\" route from one place to another, except to the extent that they are required to follow certain regulations, such as staying out of airspace in which they're not permitted (e.g., directly over the White House or crossing an international border without permission) and maintaining a safe distance from one another.</p>\r\n\r\n<p>At the core of any kind of automation like this lies the ability to determine one's current position on the surface of the Earth.  There has long existed a way to describe such a position, using <i>latitude</i> and <i>longitude</i>.  For example, if we wanted to calculate the distance along a direct route from Los Angeles International Airport and Kahului Airport in Hawaii, we would need to know two things: (1) the latitude and longitude of each of these airports, and (2) a formula for calculating a distance given those latitudes and longitudes.</p>\r\n\r\n<p>This project asks you to explore this problem a bit, by implementing a program that calculates distances between locations on the surface of the Earth.  Along the way, you'll gain some experience using the C++ Standard Library, discovering how to use some of its functions by reading their documentation, and writing C++ programs comprised of multiple source and header files.  I fully expect that this is a program that everyone in this course is quite capable of writing, but the goal here is to embrace good techniques, so <i>how</i> you solve the problem will be at least as important as <i>whether</i> you solve it.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Getting started</p>\r\n\r\n<p>You'll need to complete some chores before you can start working on this project.  <i>Be sure you read these instructions and follow them completely before proceeding.</i></p>\r\n\r\n<p class=\"subtitle\">Refreshing your ICS 45C VM environment</p>\r\n\r\n<p>Even if you previously downloaded your ICS 45C VM, you may need to refresh its environment before proceeding with this project, so that you have a copy of the <b>project1</b> project template that you'll need for this project.</p>\r\n\r\n<p>Log into your VM and issue the command <b>ics45c version</b> to see what version of the ICS 45C environment you currently have stored on your VM.  Note, in particular, the timestamp; if you see a version with a timestamp older than the one listed below, you'll want to refresh your environment by running the command <b>ics45c refresh</b> to download the latest one before you proceed with this project.</p>\r\n\r\n<blockquote><pre>\r\n2019-10-06 09:58:48\r\nProject #1 template added\r\n</pre></blockquote>\r\n\r\n<p>If you're unable to get outgoing network access to work on the ICS 45C VM &mdash; something that afflicts a handful of students each quarter &mdash; then the <b>ics45c refresh</b> command won't work, but an alternative approach is to download the latest environment from the link below, then to upload the file on to your ICS 45C VM using SCP.  (See the <a href=\"../Project0\">Project #0</a> write-up for more details on using SCP.)  Once the file is on your VM, you can run the command <b>ics45c refresh_local NAME_OF_ENVIRONMENT_FILE</b>, replacing <b>NAME_OF_ENVIRONMENT_FILE</b> with the name of the file you uploaded; note that you'd need to be in the same directory where the file is when you run the command.</p>\r\n\r\n<ul>\r\n  <li><a href=\"../../vm/ics45c-2019fall-environment.tar.gz\">ics45c-2019fall-environment.tar.gz</a></li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Creating your project directory on your ICS 45C VM</p>\r\n\r\n<p>A project template has been created specifically for this project and should already be available on your ICS 45C VM.  Though it is largely identical to the <b>basic</b> template, there are a few minor things that change from one project to another (such as the name of the file generated by the <b>gather</b> script).  You should definitely use the <b>project1</b> template for this project, as opposed to the <b>basic</b> one.</p>\r\n\r\n<p>Decide on a name for your project directory, then issue the command <b>ics45c start <i>YOUR_CHOSEN_PROJECT_NAME</i> project1</b> to create your new project directory using the <b>project1</b> template.  (For example, if you wanted to call your project directory <b>proj1</b>, you would issue the command <b>ics45c start proj1 project1</b> to create it.)  Now you're ready to proceed!</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The program</p>\r\n\r\n<p>Your program will read the following input from the standard input (i.e., from <b>std::cin</b>):</p>\r\n\r\n<ul>\r\n  <li>The first line of the input describes a <i>starting location</i>, from which you'll determine distances to other locations.</li>\r\n  <li>The second line of the input specifies a positive number of <i>target locations</i> to which you'll determine distances from the starting location.</li>\r\n  <li>Subsequent lines will describe each target location, with one target location specified on each line.  You can safely assume that the number of target locations described in the input will match the number specified on the second line.</li>\r\n  <li>Locations are specified as a latitude, followed by a space, followed by a longitude, followed by a space, followed by the name of the location.  The name of the location is all of the text on the line that follows the space after the longitude.</li>\r\n  <li>Latitudes are specified as a non-negative decimal number of degrees between 0 and 90, followed immediately by a slash, followed immediately by a direction (<b>N</b> for north or <b>S</b> for south).  Note that the latitudes <b>0/N</b> and <b>0/S</b> are equivalent.</li>\r\n  <li>Longitudes are specified as a non-negative decimal number of degrees between 0 and 180, followed immediately by a slash, followed immediately by a direction (<b>W</b> for west or <b>E</b> for east).  Note that the longitudes <b>0/W</b> and <b>0/E</b> are equivalent, as are <b>180/W</b> and <b>180/E</b>.</li>\r\n</ul>\r\n\r\n<p>It's safe to assume that you'll always be given input in the format described above; you are not required to detect erroneous input and report errors, and it's fine if you're program handles incorrect input in any way you'd like, up to and including your program crashing.  We will only be testing your program with valid inputs &mdash; though you should certainly assume that we'll be testing it using inputs other than the example provided below.</p>\r\n\r\n<p>Your program will determine which of the target locations is closest to (i.e., the smallest number of miles away from) the start location, as well as the which target location is farthest from (i.e., the largest number of miles away from) the start location.</p>\r\n\r\n<p>After reading all of the input and determining the closest and farthest location, your program will write the following output to the console (i.e., <b>std::cout</b>):</p>\r\n\r\n<ul>\r\n  <li>The words <b>Start Location</b>, followed by a colon and a space, followed by the start location's latitude, followed by a space, folloewd by the start location's longitude, followed by a space, followed by the name of the start location in parentheses.</li>\r\n  <li>The words <b>Closest Location</b>, followed by a colon and a space, followed by the closest location's latitude, followed by a space, followed by the closest location's longitude, followed by a space, followed by the name of the closest location in parentheses, followed by a space, followed by the distance from the start location to the closest location in miles (surrounded by parentheses).</li>\r\n  <li>The words <b>Farthest Location</b>, followed by a colon and space, followed by a description of the farthest location in the same format as the closest one.</li>\r\n</ul>\r\n\r\n<p>It's not important to limit your output to a particular number of decimal places; feel free to output whatever C++ writes to the output by default, though you should note that latitudes, longitudes, and distances are intended to be numbers with fractional parts (i.e., they are not integers).</p>\r\n\r\n<p class=\"subtitle\">An example of the program's execution</p>\r\n\r\n<p>The following is an example of the program's execution, as it should appear in the shell.  Boldfaced, italicized text indicates input, while normal text indicates ouptut.</p>\r\n\r\n<blockquote><pre>\r\n<b><i>33.9425/N 118.4081/W Los Angeles International Airport</i></b>\r\n<b><i>3</i></b>\r\n<b><i>20.8987/N 156.4305/W Kahului Airport</i></b>\r\n<b><i>47.4647/N 8.5492/E Zurich Airport</i></b>\r\n<b><i>23.4356/S 46.4731/W Sao Paolo-Guarulhos International Airport</i></b>\r\nStart Location: 33.9425/N 118.408/W (Los Angeles International Airport)\r\nClosest Location: 20.8987/N 156.43/W (Kahului Airport) (2483.3 miles)\r\nFarthest Location: 23.4356/S 46.4731/W (Sao Paolo-Guarulhos International Airport) (6164.9 miles)\r\n</pre></blockquote>\r\n\r\n<p>Notice, again, that there are no prompts or other output, other than the output that is required as specified above.  This may seem strange, but it's safe to assume that this program is not ultimately intended to have a human user; we'll be running automated tests against it, so welcome prompts, etc., will get in the way of us determining whether your program is correct, and will cause your program to fail <i>every one of our tests</i>.</p>\r\n\r\n<p>Also, you may get output that differs in the number of digits after decimal places; in general, that's fine, so long as all of your output is within 0.1% of what we expect in every case (which is more than enough of a buffer to account for inaccuracies introduced by the use of floating-point types like <b>float</b> or <b>double</b>).</p>\r\n\r\n<p>(And, for what it's worth, the output above is correct; if you're getting significantly different answers, particularly for the distances between airports, it means that your formulas or your implementation are incorrect.)</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Determining the distances between locations</p>\r\n\r\n<p>The fundamental operation your program needs is to be able to determine the distance between two locations on Earth.  Before you can do that, though, we first need to agree on what is meant by \"distance.\"  The Earth is (more or less) spherical and a particular location (i.e., a latitude and longitude) specifies a point somewhere on its surface.  When we consider the distance between two such locations, there are two ways to think about it:</p>\r\n\r\n<ul>\r\n  <li>A straight line traveling through the interior of the sphere, with the two locations as the endpoints of the line.  We might call this the <i>straight-line distance</i> between the locations.</li>\r\n  <li>The shortest arc that travels along the surface of the sphere that has the two locations as the endpoints of the arc.  The length of such an arc is called the <i>great-circle distance</i> between the two locations.</li>\r\n</ul>\r\n\r\n<p>As is often the case, there's a tension between what's easier to implement and what's actually required.  The straight-line distance would presumably be simpler to calculate, but if our goal is to calculate distances that people might travel, it's a misleading answer &mdash; it assumes that people travel from one location on Earth to another by boring a hole in the Earth!  The great-circle distance makes a lot more sense when we consider the distances between locations on Earth, because people would tend to travel either along the Earth's surface (e.g., in a car) or roughly parallel to it (e.g., in an airplane).</p>\r\n\r\n<p>So, when calculating the distance between two locations, your program's goal is to calculate the great-circle distance between them.</p>\r\n\r\n<p class=\"subtitle\">Understanding your problem domain</p>\r\n\r\n<p>Before you get too much farther, if you don't know about how the latitude and longitude system works &mdash; don't feel bad if you don't, but you do need to understand this in order to solve this problem! &mdash; take a look at the section titled <i>Latitude and longitude</i> at this <a href=\"http://en.wikipedia.org/wiki/Geographic_coordinate_system\">Wikipedia link</a>.  In particular, note the limits on allowable latitudes and longitudes <i>and</i> on the difference between North and South latitude and between West and East longitude.</p>\r\n\r\n<p class=\"subtitle\">A formula for calculating great-circle distance</p>\r\n\r\n<p>Mathematics provides us with multiple formulas for solving a problem like this.  Some of these are a better fit for a computer program than others.  Since we're dealing with circles, arcs, and angles, it's reasonable to expect that trigonometric functions would be involved; as we'll see, C++ contains a collection of built-in trigonometric functions in its Standard Library, so these will be no problem to incorporate in your program.</p>\r\n\r\n<p>Different computational formulas for approximating these distances will give slightly different results, so we'll need to agree on one particular formula.  We'll use a formula called the <i>haversine formula</i>, which gives a reasonably precise result even for relatively small distances.  An algorithm for calculating the haversine formula, not written in any particular programming language, follows:</p>\r\n\r\n<blockquote><pre>\r\nlet lat1 be the latitude of the first location\r\nlet lat2 be the latitude of the second location\r\nlet lon1 be the longitude of the first location\r\nlet lon2 be the longitude of the second location\r\nlet dlat be the difference in latitudes between the locations\r\nlet dlon be the difference in longitudes between the locations\r\nlet a = sin<sup><small>2</small></sup>(dlat/2) + cos(lat1) * cos(lat2) * sin<sup><small>2</small></sup>(dlon/2)\r\nlet c = 2 * atan2(sqrt(a), sqrt(1 - a))\r\nlet d = R * c        <i>R, in this part of the formula, is the radius of the Earth</i>\r\n</pre></blockquote>\r\n\r\n<p>At the conclusion of the algorithm, <i>d</i> is the great-circle distance between the two locations.</p>\r\n\r\n<p>(Just to be clear, in the formula above, <b>sin</b> is the trigonometric function sine, <b>cos</b> is the trigonometric function cosine, <b>atan2(<i>y</i>, <i>x</i>)</b> is the arc tangent of <i>y</i>/<i>x</i>, and <b>sqrt</b> means \"square root.\")</p>\r\n\r\n<p class=\"subtitle\">What is the radius of the Earth?</p>\r\n\r\n<p>Since we're measuring our distances in miles, we'll need to know the Earth's radius measured in miles.  It turns out that the Earth isn't quite spherical, meaning that the radius (as measured by the distance from the center of the Earth to a particular location the Earth's surface) isn't quite the same from one location to another.  To keep things simple, though, we'll have to use an approximation; ours will be <i>3,959.9 miles</i>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Organizing your program</p>\r\n\r\n<p>One of the hallmarks of well-written software is what is sometimes called <i>separation of concerns</i>, the principle that you should handle separate issues in separate parts of a program, rather than munging everything together into fewer, larger, more complex functions.  Given your background in programming from previous coursework, even a program as seemingly simple-sounding as this one is one you should be reflexively approaching by dividing it up, whether you're explicitly asked to or not; I imagine you've already developed the ability to work incrementally and test the individual pieces.  However, just to be clear, there are some design requirements here.</p>\r\n\r\n<p>In general, functions should be relatively short, each having a single job, with the functions' names (and the names of their parameters) clearly and succintly describing their purpose.  Source files, too, should be reasonably self-contained, with what software engineers call <i>high cohesion</i> (i.e., the things defined within a source file are strongly related to the others in the same source file) and <i>low coupling</i> (i.e., different source files depend on as few details as possible of the others).</p>\r\n\r\n<p>While there is not one particular design that we're requiring, we will be grading partly on your ability to cleanly divide the problem into separate functions, and we would expect to see multiple source files, each with a header file that declares the things that are \"public\" (i.e., the things you would reasonably expect other source files to use), while keeping other details hidden.  Your goal should be to make as few things \"public\" as possible, though there will obviously need to be <i>some</i> things defined in one source file and used in another.</p>\r\n\r\n<p>It's possible to write this program as a single <b>main()</b> function, but you should be aware that a solution like that will be viewed unfavorably; you will likely get a much lower score on this project than you might expect if you go that route.  As in real-world software development, your goal is not just to write programs that work, but to write programs <i>well</i>, and that includes style and organization.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Using the C++ Standard Library</p>\r\n\r\n<p>Some of the things you'll need to implement in this project are not part of the C++ language, but are instead part of its standard library.  There are at least three standard headers you'll need in some parts of your program:</p>\r\n\r\n<ul>\r\n  <li>The mathematical operations you'll need &mdash; trigonometric functions, calculating square roots, etc. &mdash; are declared in the standard header <b>&lt;cmath&gt;</b>.</li>\r\n  <li>The I/O operations you'll need, when you want to read console input or write console output, are declared in the standard header <b>&lt;iostream&gt;</b>.</li>\r\n  <li>When you want to represent strings in C++, the simplest way is to use the type <b>std::string</b>, which is declared in the standard header <b>&lt;string&gt;</b>.</li>\r\n</ul>\r\n\r\n<p>You may find the need for others, but I'd expect any solution to require at least those three.</p>\r\n\r\n<p class=\"subtitle\">Where to find documentation on the C++ Standard Library</p>\r\n\r\n<p>Other than the document describing the C++ standard, there is no \"official\" central repository of searchable documentation on the C++ Standard Library, as you would find for languages like Python or Java.  However, one very good set of documentation is maintained at <a href=\"http://cppreference.com/\">cppreference.com</a>.  (There are others, too, though I've found that they generally are less complete or more annoying &mdash; e.g., by serving up advertisements.)</p>\r\n\r\n<p class=\"subtitle\">Being sure to use C++ and not C</p>\r\n\r\n<p>This is a course that decidedly focuses on C++ instead of C, but it's important to note that our compiler, Clang, is capable of compiling both C++ and C, so it includes both the C++ and C standard libraries.  This introduces a bit of an issue, as some of what's in the C++ Standard Library also appears in C's library.  If you're not careful &mdash; especially if you seek advice online &mdash; you may find yourself using the C library instead of the C++ one.</p>\r\n\r\n<p>In the context of this project, there are a couple of things to watch out for.</p>\r\n\r\n<ul>\r\n  <li>The C Standard Library includes a standard header <b>&lt;math.h&gt;</b>, which includes many of the same functions as appear in the C++ standard header <b>&lt;cmath&gt;</b>.  However, the C++ standard header declares the functions a bit differently &mdash; notably, they include <b>std::</b> in their names, so, for example, the function to calculate a sqrt is <b>std::sqrt</b>.  Be sure you're using <b>&lt;cmath&gt;</b> and not <b>&lt;math.h&gt;</b>.  (In general, an easy way to tell the difference between standard C++ headers and standard C headers is that C headers have names that end in <b>.h</b>, while C++ headers have no extension on their names at all.)</li>\r\n  <li>The C language doesn't have a <b>std::string</b> type.  Instead, it represents strings in a much more difficult-to-use way, as pointers to arrays of characters.  In this course, we'll prefer <b>std::string</b>, though there will occasionally be times when we have to use C-style strings; I'll point out the need when it arises, but, for now, you should be using <b>std::string</b>.</li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Avoiding shorthands that reduce program quality</p>\r\n\r\n<p>One question I'm often asked early in a C++ course is whether there's a way to eliminate having to specify <b>std::</b> on every type from the standard library.  A lot of students would rather be able to say something like this:</p>\r\n\r\n<blockquote><pre>\r\nstring s = \"Alex\";\r\n</pre></blockquote>\r\n\r\n<p>as opposed to something like this instead:</p>\r\n\r\n<blockquote><pre>\r\nstd::string s = \"Alex\";\r\n</pre></blockquote>\r\n\r\n<p>It turns out that there's a way to do that, which is to add this line somewhere near the top of your source file (usually right after you've <b>#include</b>d the headers you need):</p>\r\n\r\n<blockquote><pre>\r\nusing namespace std;\r\n</pre></blockquote>\r\n\r\n<p>This line is called a <i>using directive</i>, and what it says is \"Hey, compiler, if you've ever seen (or ever see!) <i>any</i> name that's part of the <b>std</b> namespace, I want to be able to use it in this source file without qualification.\"  On a small scale, what we've done is require less typing, because we can now say <b>string</b> instead of <b>std::string</b>.  But this is not a tradeoff that stands the test of time:</p>\r\n\r\n<ul>\r\n  <li>Suppose that you've <b>#include</b>d three standard library headers: <b>&lt;iostream&gt;</b>, <b>&lt;string&gt;</b>, and <b>&lt;cmath&gt;</b>.  At this point, you've actually brought in the declarations of an enormous number of names, some that you'll know about (such as <b>cout</b> or <b>endl</b>) and many, many others that you won't.</li>\r\n  <li>If you then say <b>using namespace std;</b>, you're telling the compiler that you're comfortable <i>not being allowed to use any of those names yourself</i> without introducing a conflict.  That's a fine tradeoff to make for one or two names, but a terrible tradeoff to make for every name in the standard library.</li>\r\n  <li>If you say <b>using namespace std;</b> in a header file, then you've made this same tradeoff <i>on behalf of every source file that ever includes that header file</i>!</li>\r\n  <li>Note, too, that it might be fine today.  But the next time you introduce a new name in that source file, you run the risk of it conflicting with a name from the standard library that you didn't know about.  And the next time things are added to the standard library &mdash; which is occurring about once every three years as new C++ standards are completed &mdash; those names may conflict with names you already chose for your own variables or functions.</li>\r\n</ul>\r\n\r\n<p>Do not use <b>using namespace std;</b> in this course, and you should really consider not using it in your own programs either.  Namespaces like <b>std</b> exist for a reason; they make long-lived programs less susceptible to changes in one place causing errors in unrelated places.</p>\r\n\r\n<p>It should be noted that there is a middle ground here: Declaring a particular name from the <b>std</b> namespace into the global one.  That's actually fairly safe &mdash; because you aren't affected when new names are added to the C++ Standard Library going forward &mdash; and also pretty straightforward by writing what's called a <i>using declaration</i>.</p>\r\n\r\n<blockquote><pre>\r\nusing std::cout;\r\n</pre></blockquote>\r\n\r\n<p>If you add that line within a scope (globally, within a function, or wherever), then you've added <b>std::cout</b> to the namespace of things accessible within that scope without requiring qualification.  I don't find myself doing that very often, but that's at least a safe way to reduce typing, if that's your goal.  (In a more complex program, though, you're reducing typing, but also readability.)</p>\r\n\r\n<p>Note that if you've learned Python previously, what we're talking about here is really the same thing as the difference between these two statements in Python:</p>\r\n\r\n<blockquote><pre>\r\nfrom math import *\r\nfrom math import sqrt\r\n</pre></blockquote>\r\n\r\n<p>The first of these is something I basically never do in Python (for the same reasons I described with <b>using namespace std</b> in C++ above); the second of these is something I am willing to do, but often don't bother (as I'm perfectly happy to just type <b>math.sqrt</b>, which reads more clearly than the alternative of <b>sqrt</b>).</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>After using the <b>gather</b> script in your project directory to gather up your C++ source and header files into a single <b>project1.tar.gz</b> file (as you did in <a href=\"../Project0\">Project #0</a>), submit that file (and only that file!) to Checkmate.  Refer back to <a href=\"../Project0\">Project #0</a> if you need instructions on how to do that.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.  (It's not a bad idea to look at the contents of your tarball on your host operating system before submitting it.)</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>A section on <b>using namespace std</b> added by Alex Thornton, Fall 2018.</li>\r\n  <li>Cleaned up and tweaked by Alex Thornton, Winter 2014.</li>\r\n  <li>Originally written by Alex Thornton, Fall 2013.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}