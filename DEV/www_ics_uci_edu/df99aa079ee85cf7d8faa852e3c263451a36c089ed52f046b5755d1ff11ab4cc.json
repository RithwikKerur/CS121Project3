{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/lab6.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Wednesday, November 2, 2005 12:58 PM\" />\n<TITLE>Lab Assignment 6</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D23C3977\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/h21/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style1 {\n\tfont-family: \"Courier New\", Courier, monospace;\n\tfont-size: 10pt;\n}\n.style2 {font-size: 10pt}\n.style3 {font-family: \"Courier New\", Courier, monospace}\n.style31 {\tfont-family: \"Courier New\", Courier, monospace;\n\tfont-size: 10pt;\n}\n-->\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY &bull; FALL 2009</font></P>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Lab Assignment 6 </B></FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>This assignment is due at the end of lab on\n  Friday, November 6. </FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Choose a partner for this assignment, someone\nyou haven&#39;t worked with already.  Be sure your language level is set\n to Intermediate Student with Lambda.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(a)</B> Do exercises 19.1.4, 19.1.5, 19.1.6, and 19.2.2.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(b)</B> Suppose we change our restaurant\n    structure so that instead of just one best dish and its price, each restaurant\nhas a menu of dishes.  So a </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">rrant</FONT></span><FONT FACE=\"Garamond\" SIZE=4> is now</FONT></P>\n<P> <span class=\"style31\">&#160;&#160; (make-rrant\n  name cuisine phone menu)</span></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>where </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">name</FONT></span><FONT FACE=\"Garamond\" SIZE=4>, </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">cuisine</FONT></span><FONT FACE=\"Garamond\" SIZE=4>,\n  and </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">phone</FONT></span><FONT FACE=\"Garamond\" SIZE=4> are strings and </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">menu</FONT></span><FONT FACE=\"Garamond\" SIZE=4> is a list of dish structures:</FONT></P>\n<P><FONT FACE=\"Courier New\"><span class=\"style31\">&#160;&#160; </span><span class=\"style2\">(make-dish\n  name price)</span></FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>where </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">name</FONT></span><FONT FACE=\"Garamond\" SIZE=4> is a string and </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">price</FONT></span><FONT FACE=\"Garamond\" SIZE=4> is a number.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>None of these modifications should require any\n  change to the code for collections.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(b.1)</B> Make up a big list of </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">rrant</FONT></span><FONT FACE=\"Garamond\" SIZE=4> structures to use in your testing.  Trade and combine lists with your classmates.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(b.2)</B> Download </FONT><FONT FACE=\"Garamond\"><a href=\"http://www.ics.uci.edu/~kay/scheme/restaurants1d.scm\">version 1d</a></FONT><FONT FACE=\"Garamond\" SIZE=4> of the restaurants program. Spend some time studying it; it's a version that includes the erase and adjust commands, plus binary search trees using lazy deletion.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>Make a copy of the restaurants1d.scm\n  program and call it restaurants1e.scm.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(b.3)</B> Modify the program to handle </FONT><span class=\"style2\"><FONT FACE=\"Courier New\">rrant</FONT></span><FONT FACE=\"Garamond\" SIZE=4> objects that include menus as described above.  You should try at least to make a list of all\n  the changes you will need before looking at <A HREF=\"http://www.ics.uci.edu/~kay/courses/h21/hw/hw5menus.html\">our checklist</A> of modification steps.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(b.4)</B> Modify the program to display\n  the average price (of all the dishes on the menu) whenever a restaurant\n  is printed.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(b.5)</B> Add a command to the main menu\n  that allows the user to search for (and display) all the restaurants that\n  serve a given cuisine along with the average price of (all the menus of\n  the restaurants that serve) that cuisine.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(b.6)</B> Add a command to the main menu\n  that allows the user to search for (and display) all the restaurants that\n  serve a dish containing a given word or phrase.  (This is more realistic\n  than forcing the user to type the exact name of the dish; here, the user\n  can just type &quot;fava beans&quot; and match all the dishes that include\n  that phrase.  We&#39;ve provided some <A HREF=\"http://www.ics.uci.edu/~kay/scheme/strings.scm\">code for string processing</A> to make this task easier.)</FONT><FONT FACE=\"Goudy Old Style\"> </FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>Collect all of these definitions and submit\n  them via Checkmate.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(c)</B>  At the end of the Functions as\nFirst-Class Objects sheet, we refactored the functions </FONT><span class=\"style1\">find-all-matches\n</span><span class=\"style2\"></span><FONT FACE=\"Garamond\" SIZE=4>and </FONT><FONT FACE=\"Courier New\" class=\"style1\">remove-all-matches</FONT><FONT FACE=\"Garamond\" SIZE=4>,\ndefining both in terms of a more general </FONT><FONT FACE=\"Courier New\" class=\"style1\">handle-all-matches</FONT><FONT FACE=\"Garamond\" SIZE=4>.</FONT></P>\n<P>\n  <FONT FACE=\"Garamond\" SIZE=4><B>(c.1)</B>  Do the same thing in the second\n  restaurants program (available at </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants2.scm\" class=\"style1\">http://www.ics.uci.edu/~kay/scheme/restaurants2.scm</A></FONT><FONT FACE=\"Garamond\" SIZE=4>)\n      with </FONT><FONT FACE=\"Courier New\" class=\"style1\">collection-search</FONT><FONT FACE=\"Garamond\" SIZE=4>\n      and </FONT><FONT FACE=\"Courier New\" class=\"style1\">collection-remove</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n          redefining both in terms of a general </FONT><FONT FACE=\"Courier New\" class=\"style1\">collection-check</FONT><FONT FACE=\"Garamond\" SIZE=4>\nfunction.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(c.2)</B>  (extra credit, but the next part's required) Now redefine </FONT><FONT FACE=\"Courier New\" class=\"style1\">collection-check</FONT><FONT FACE=\"Garamond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\" class=\"style1\">collection-change</FONT><FONT FACE=\"Garamond\" SIZE=4>\nin terms of a still-more-general </FONT><FONT FACE=\"Courier New\" class=\"style1\">collection-process</FONT><FONT FACE=\"Garamond\" SIZE=4>\nfunction.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(c.3)</B>  Simplify your definition of </FONT><FONT FACE=\"Courier New\" class=\"style1\">collection-process</FONT><FONT FACE=\"Garamond\" SIZE=4>\n(or </FONT><FONT FACE=\"Courier New\" class=\"style1\">collection-check</FONT><FONT FACE=\"Garamond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\" class=\"style1\">collection-change</FONT><FONT FACE=\"Garamond\" SIZE=4>)\nusing </FONT><FONT FACE=\"Courier New\" class=\"style1\">map</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\" class=\"style1\">filter</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\" class=\"style1\">foldr</FONT><FONT FACE=\"Garamond\" SIZE=4>,\nand similar functions.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Collect all of these definitions and submit\nthem via Checkmate.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d)</B> Be sure you've read the section in\nHomework 6 about files;\nnow it&#39;s time to write a few file-handling functions.  Download and\ninstall the simple-file-io.ss teachpack at </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.ics.uci.edu/~kay/scheme/simple-file-io.ss\"><code>http://www.ics.uci.edu/~kay/scheme/simple-file-io.ss</code></A></FONT><FONT FACE=\"Garamond\" SIZE=4>.\n(Remember to right- or control-click on the link and download the file, saving it in the same folder that contains your code.) We also have some <A HREF=\"http://www.ics.uci.edu/~kay/scheme/text-file-io.scm\">file-handling code</A> that provides four functions for reading and writing text files:<A NAME=\"_14_11380\"></A></FONT></P>\n<P><code>;; file-&gt;list: string -&gt; list<br />\n;; Given a string naming a file, read the file into a list of strings.</code></P>\n<p><code>;; file-dialog-&gt;list: anything -&gt; list<br />\n  ;; Show user a dialog box to choose a file; read the file into a list of strings<br />\n  ;; Call with (file-dialog-&gt;list 'x) because student Schemes don't allow<br />\n  ;; parameterless functions.</code></p>\n<p><code>;; list-&gt;file: string list -&gt; side effects (a new file)<br />\n  ;; Given a string naming a new file, write list of strings that file, <br />\n  ;; one string per line.</code></p>\n<p><code>;; list-&gt;file-dialog: list -&gt; side effects (a new file)<br />\n  ;; Write a list of strings to a new file <br />\n  ;; (chosen by showing the user a file selection dialog)</code></p>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>These functions operate on text files\nwith the extension &quot;.txt&quot; or other files that consist only of\ncharacters you can type on the keyboard.  Word documents don&#39;t work\nunless they&#39;re saved as plain text; Scheme files <em>do</em> work unless they&#39;re\nsaved with comment boxes, images, or other special features.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d.1)</B>  Define the function <CODE>copy-file</CODE>\nthat takes two strings&mdash;the name of an existing file and the name of a new\nfile&mdash;and copies the contents of one to the other.  Use</FONT><FONT FACE=\"Courier New\" SIZE=2>\n</FONT><FONT FACE=\"Courier New\" class=\"style1\">file-&gt;list</FONT><FONT FACE=\"Garamond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\" class=\"style1\">list-&gt;file</FONT><FONT FACE=\"Garamond\" SIZE=4>.\n Test it out with a short file.  Then download the Project Gutenberg version\nof <I>The Adventures of Sherlock Holmes</I> from </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.gutenberg.org/dirs/etext99/advsh12.txt\" class=\"style1\">http://www.gutenberg.org/dirs/etext99/advsh12.txt</A></FONT><FONT FACE=\"Garamond\" SIZE=4>.\n (Project Gutenberg is a wonderful resource for non-copyright-protected\ntexts).  If you have to work on a slow network connection, you may pick\na smaller file; this one is 577K.  Use your copy-file program to make another\ncopy of this file.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d.2)</B>  Write the function <span class=\"style1\">copy-file-dialog</span> that takes one parameter (that it ignores&mdash;parameterless functions aren&#39;t\nallowed in the DrScheme student languages), displays a dialog box for the\nuser to select a file to copy, displays another dialog box for the user\nto select the name of the copied file, and then creates the copy.  Use <span class=\"style1\">file-dialog-&gt;list</span> and <span class=\"style1\">list-&gt;file-dialog</span>.  Test this function with a couple of files.  (Testing\nof these file-handling programs isn&#39;t quite as convenient as just putting\nexamples into your code, but it is essential nonetheless.  This is just\nan illustration of how interactive programs add an extra layer of complexity\nto the computing task.)</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d.3)</B>  Write the function <span class=\"style1\">copy-with-line-numbers</span> that behaves like <span class=\"style1\">copy-file</span>, except that the copied file has line numbers\nin this form<A NAME=\"_14_13770\"></A></FONT></P>\n<P><code>1: The Project Gutenberg EBook of The Adventures of Sherlock Holmes<br />\n  2: by Sir Arthur Conan Doyle<br />\n  3: (#15 in our series by Sir Arthur Conan Doyle)<br />\n  4:<br />\n&nbsp;&nbsp; ...<br />\n13014: *END THE SMALL PRINT! FOR PUBLIC DOMAIN EBOOKS*Ver.02/11/02*END*</code></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>The pre-defined functions <span class=\"style1\">string-append</span> and <span class=\"style1\">number-&gt;string</span> may be helpful.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d.4)</B>  (optional, but there are required\nparts further down)  You&#39;ll notice that in your line-numbered file,\nthe lines don&#39;t line up neatly because the numbers have different lengths.\n It would be nice to be able to display a number in a five-character field,\nso that <span class=\"style1\">17</span> would display as &quot;</FONT><FONT SIZE=4><span class=\"style3\">&nbsp;&nbsp;&nbsp;</span></FONT><FONT FACE=\"Garamond\" SIZE=4><span class=\"style1\">17</span>&quot; (with three spaces before\nthe number).</FONT></P>\n<P><code>;; pad5: string -&gt; string<br />\n  ;; If input string is 5 characters or longer, return it unchanged. Otherwise, <br />\n;; add enough blanks at the left of the string to make it 5 characters long.</code></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>Use this function in your line-numbering program;\n  the pre-defined function <span class=\"style1\">string-length</span>\n  will be useful here.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Next, write a generalized version of the function:</FONT></P>\n<P><code>;; pad: string number symbol string -&gt; string<br />\n  ;; The first argument is the input string. The second is the desired length.<br />\n  ;; The third, 'left or 'right, indicates which end of the string should be padded.<br />\n  ;; The fourth is the string that should be added repeatedly <br />\n  ;; until the string is at least as long as the desired length.<br />\n  ;; Examples: (pad &quot;Hi&quot; 5 'right &quot;!&quot;) -&gt; &quot;Hi!!!&quot;<br />\n;; (pad &quot;Preface&quot; 12 'right &quot;_.&quot;) -&gt; &quot;Preface_._._.&quot;</code></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Finally, use these functions in your line-numbering\nprogram so that the numbers are printed in five-character fields (except\nfor numbers over 99,999, which should be as long as necessary).</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d.5)</B>  Starting with a copy of your\n<span class=\"style1\">copy-file</span> function (without the line numbers), write the function <span class=\"style1\">pick</span>,\nwhich takes three arguments.  The first should be a string that the function\nwill search for in the file; the second is a string naming the input file;\nthe third is a string naming the output file.  The output file should contain\nonly those lines in the input file that contain the specified string somewhere\nin the line.  (The string-processing functions from the previous assignment\nshould be useful here.)</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d.6)</B>  Define the function <span class=\"style1\">stats</span>, which\ntakes a string naming a file and a symbol that indicates what statistic\nto compute (and return) about the file, according to the list below.  You\nshould try to use local definitions in your function so that you don&#39;t\ncalculate intermediate results more than once.  You&#39;ll want to use the\npredefined function <span class=\"style1\">string-length</span>.  You can also use <span class=\"style1\">map</span>, <span class=\"style1\">filter</span>, and <span class=\"style1\">foldr</span> to calculate these values compactly.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>&#160;&#160;</FONT><FONT FACE=\"Courier New\" class=\"style1\">&#39;total-lines</FONT><FONT FACE=\"Garamond\" SIZE=4>:\n The total number of lines in the file</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>&#160;&#160;</FONT><FONT FACE=\"Courier New\" class=\"style1\">&#39;average-length</FONT><FONT FACE=\"Garamond\" SIZE=4>:\n The average length of lines in the file</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>&#160;&#160;</FONT><FONT FACE=\"Courier New\" class=\"style1\">&#39;empty-lines</FONT><FONT FACE=\"Garamond\" SIZE=4>:\n The number of empty (zero-length) lines in the file</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>&#160;&#160;</FONT><FONT FACE=\"Courier New\" class=\"style1\">&#39;average-nonempty-length</FONT><FONT FACE=\"Garamond\" SIZE=4>:\n The average length of the non-empty lines in the file</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>&#160;&#160;</FONT><FONT FACE=\"Courier New\" class=\"style1\">&#39;longest-line</FONT><FONT FACE=\"Garamond\" SIZE=4>:\n The longest line in the file (you can do this with foldr)</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>&#160;&#160;</FONT><FONT FACE=\"Courier New\" class=\"style1\">&#39;longest-line-length</FONT><FONT FACE=\"Garamond\" SIZE=4>:\n The length of the longest line in the file</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>&#160;&#160;</FONT><FONT FACE=\"Courier New\" class=\"style1\">&#39;shortest-line</FONT><FONT FACE=\"Garamond\" SIZE=4>:\n The shortest non-empty line in the file</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>&#160;&#160;</FONT><FONT FACE=\"Courier New\" class=\"style1\">&#39;shortest-line-length</FONT><FONT FACE=\"Garamond\" SIZE=4>:\n The length of the shortest line in the file.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Submit these definitions via Checkmate.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(e)</B>\n    <!-- REMOVED, AS THEY USE DRAW.SS INSTEAD OF IMAGE.SS\n     Do exercises 21.4.1, 21.4.2, 21.4.3, 21.4.4, and 21.4.5. -->\nDo exercises 21.2.1, 21.2.2, and 21.2.3.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>Collect these definitions and submit them\n  as usual via Checkmate.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(f)</B> For extra credit, try to refine the </FONT><FONT FACE=\"Courier New\">evaluate</FONT><FONT FACE=\"Garamond\" SIZE=4> function from section 14.4 to handle all-numeric expressions (as before)\n  and also expressions with one variable.  You&#39;d start with </FONT><FONT FACE=\"Courier New\">(define\n    evaluate (lambda (exp var num) ...)</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n      which returns the value of </FONT><FONT FACE=\"Courier New\">exp</FONT><FONT FACE=\"Garamond\" SIZE=4> (with </FONT><FONT FACE=\"Courier New\">num</FONT><FONT FACE=\"Garamond\" SIZE=4> substituted for each occurrence of </FONT><FONT FACE=\"Courier New\">var</FONT><FONT FACE=\"Garamond\" SIZE=4>).\n        Refine </FONT><FONT FACE=\"Courier New\">evaluate</FONT><FONT FACE=\"Garamond\" SIZE=4> further to take a list of variable-value pairs and substitute all the values\n          for their respective variables.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(g)</B>  Remember that each partner must\ncomplete a partner evaluation form via the Survey tool on eee.uci.edu.  <!--A\nfew students have not been doing this consistently; if you have missed any\nforms, go back and do them now (and let the TA know, so he will pick them\nup and record them).  Missing evaluation forms (on any assignment\nfrom the start of the quarter) or late evaluation forms (starting now) will\nlower your score on an assignment.-->\n</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments and exams\nby David G. Kay from Fall 2001; modified by David G. Kay with material from\nInformatics 41, Fall 2004 and Fall 2005; file I/O code written by Angelo\nPioli, Fall 2005. Modified by David G. Kay, Fall 2009.</FONT></P>\n<HR />\n<FONT FACE=\"Garamond\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Garamond\">\n<!-- #BeginDate format:fcAm1a -->Saturday, October 31, 2009 3:16 PM<!-- #EndDate -->\n</font></span></BODY>\n</HTML>", "encoding": "ascii"}