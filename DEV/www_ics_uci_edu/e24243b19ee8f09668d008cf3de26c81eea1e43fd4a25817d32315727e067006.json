{"url": "https://www.ics.uci.edu/~kibler/H22syllabus.html", "content": "<HTML>\n<head>\n<title> Honors ICS 23  </title>\n\n </head>\n<body>\n\n<h2> Honors Data Structures and Algorithms </h2>\n<hr>\n<h2> Schedule Change: Sandy Irani is teaching this class! </h2>\n<hr>\n<ul>\n\n <li>  Professor: <em> Sandy Iraniu </em>\n <li>  Class Meetings: 3:30-4:50 Tuesday and Thursdays (PSCB 140)\n <li>  Office Hours: 5-6 Tuesdays and Thursdays + by Appt. (414D CS)\n <li>  Teaching Assistant: <em> Steve Moret  smoret@uci.edu </em>\n <li>  Required Text: Data Structures and Problems Solving with Java \n by Mark Allen Weiss\n <li>   Discussion: TBA\n\n</ul>\n<hr>\n<h2> Teaching Philosophy </h2> I am your guide and collaborator in\nlearning. However the primary responsibility in learning rests with\nyou. Evaluate yourself before I do.  Use all the available\nresources. Ask questions.  Writes lots of very simple programs to\nverify and deepen your understanding of the various concepts. Doing\nonly the homeworks assignments is not sufficient. If you can't use\na concept, you don't know it. Explain the concept to friend. \nTeaching often reveals holes in understanding. Everytime you make\nan error, it is an oppportunity to learn. Enjoy the process of learning.\n\n<hr>\n<h2>  Course Goals </h2>\n\nLearn the properties and\nimplementation details of the fundamental data structures (arrays,\nlists, queues, stacks, dictionaries, trees) that often are at\nthe heart of any program. Implementations will be done in Java.\nLearn the elements of analysis of algorithms, including O notation.\nas well as basic elements of object-oriented\ndesign and implementation. \n\n<hr>\n<h2> Grading </h2>\n\nThere will be approximately 4 quizzes and 8 programming\nassignments. The coding assignments are all Java. Your lowest quiz\nscore and your lowest homework score will be dropped. Approximately,\nthe final, quizzes, and homework will count equally.  The final exam\nwill be based on the text, lecture notes, homeworks, and quizzes.\nEach chapter ends with a summary. Be sure that you know every concept\ndiscussed in the summary in the Preiss text.\n\n The fastest way to get questions answers is\nto email either Steve or myself. Answers of general interest will be\nposted on the bulletin board (ics.H22). You may also use the bulletin\nboard to ask classmates for appropriate help. Any form of inappropriate\nhelp will result in an F grade in the class and a letter in your file.\n\n\n<hr> \n<h2> Required Text </h2>\nText </strong>  <em> Data Structures and Algorithms with Object-Oriented\nDesign Patterns in Java </em> by Bruno Preiss.\n<h2> Suggested Text </h2>\n   Any book on Java that you can learn from. Many students like\n<em>Core Java </em> but I like <em> The Java Programming Language 3rd edition\n</em> by Ken Gosling et al.\n\n\n<hr>\n<h2> Java Language Notes </h2>\n\nLecture notes for  the Java Language are available on-line\n<a href=\"http://www.ics.uci.edu/~kibler/javacourse/java.html\"> Java Notes </a>.\nPlease tell me if you find any errors or misrepresentations.\n\n<hr>\n<h2> Intended Schedule. </h2>\n<br> Quick Overview: We will approximately cover the first 8 chapters\nof Preiss plus introductory material on the Java language. Use your Java\ntext to fill in gaps. I will not assign reading in the your Java book;\ninstead use the index to look-up what you need. \n  <li> Why Java?\n     <ul>\n       <li> Goals of a programming language.\n       <li> Goals of program\n       <li> Achieve goals\n       <li> Program design \n       <li> Program implementation\n       <li> Object definition in Java\n       <li> Object decomposition\n       <li> examples: complex numbers, polynomials, \n       <li> Object hierarchies: triangles.\n       <li>Read: Appendix 1 in Preiss + select from Java text.\n     </ul>\n  <li> Using Other Peoples Classes\n      <ul>\n        <li> File io: BufferedReader, PrintWriter\n        <li> Simple Lexical Analysis: String Tokenizer\n        <li> Sorting:  TreeSet: how fast is it?\n        <li> Formatting\n        <li> Linked Lists: polynomials again\n        <li> HashTables: making a lexicon\n        <li> Reading: On-line documentation on classes via Cafe.\n      </ul>\n <li>  GUI interface. Event-driven programming.\n      <ul>\n        <li>  Inheritance\n        <li> Interfaces\n        <li> Inner classes\n        <li> Frames\n        <li> Layout Managers\n        <li> Buttons, TextFields, Labels, TextAreas,\n        <li> ActionListeners\n       <li> Reading: online documentation + Java text as needed.\n      </ul>\n  <li>  Why Analysis?\n      <ul> \n       <li> Program model.\n       <li>  O notation.\n       <li>  Finite Induction.\n       <li> Programming Timing\n       <li>  Henceforth, all your code requires space and time complexity analysis, if it is not O(1). \n      <li>  Read Chapter 3 in Preiss.\n     </ul>\n  <li>  Fundamental Data Structures: Arrays \n    <ul>\n        <li> Dynamic arrays\n        <li> Dynamic Programming\n        <li> Smith-Waterman Algorithm\n        <li>  Read Chapter 4.1-4.2\n    </ul>\n  <li> Week 6.  Fundamental Data Strucutres: Linked Lists\n    <ul>\n       <li> Single linked Lists\n       <li> Double linked lists\n       <li> Extra pointers\n       <li> Read Preiss 4.3\n    </ul>\n   <li> Week 7. Stacks and Queues\n      <ul> \n         <li> Stack as array\n         <li> Stack as list\n         <li> Queue as array\n         <li> Read  Chapter 6.\n      </ul>\n   <li> Week 8. Ordered Lists\n      <ul>\n        <li> List as array\n        <li> Ordered List\n        <li> Sorted list\n        <li> Read Chapter 7.\n      </ul>\n   <li> Week 9. Hash Tables\n      <ul>\n        <li> Hash Functions\n        <li> Chaining\n        <li> Scatter Tables\n        <li> Linear Probing\n        <li> Quadratic Probing\n        <li> Double Hashing\n       <li> Removing items\n        <li> Read Chapter 8\n      </ul>\n   <li> Week 10. Trees\n      <ul>\n       <li> Binary Trees\n       <li> Tree Traversals\n       <li> Evaluating Expression\n       <li> NP-completeness: Million dollar question\n       <li> N-ary trees\n       <li> Read Chapter 9.\n      </ul>\n      \n<hr><hr>\n<h2> Homework Assignments </h2>\nHomeworks are duly weekly and need to typed. No handwritten\nassignments will be accepted.\n\n<ol>\n<li>  <h3>Object design</h3>\n  <ul>\n    <li> Use Visual Cafe's IDE and write any program at all. Hand in the code.\n You may have help in using Visual Cafe, but not in writing the program.\n    <li> Suppose you are design an computer implementation of a personal\ntelephone book. In English, provide a list of the constructors  and\nmethods you would expect to have. Include a sentence describing each\nmethod/constructor. Do not write any code.  For example:  <br>\n TelephoneBook() : constructs an empty telephone directory.\nWe have done this in class for complex numbers as part of the design\nprocess.\n\n    <li> Suppose a math professor hires you to write a class for polynomials.\n   As above provide in English a list of the constructors and the methods.\n   Do not write any code.\n  </ul>\n<li> <h3> Other Peoples classes </h3>\n <ul> \n   <li> Using BufferedReader and StringTokenizer, write a program to\ncount the number of words in a file. Precisely define what a word is.\n  <li> Use Double, TreeSet, and CurrentTimeMillis to time\nsorting 100, 200, ... 12800 random doubles ( Math.random() )\nPrintout a table of times, times/n, times/n*logn, times/(n*n)\n  <li> Using BufferedReader and Hashtable, write a program to\ncount the number of words of length equal to the length of your\nlast name in the file XX.\n  </ul>\n<li>  <h3> Gui Interface </h3>\n\n<li>  <h3> Analysis </h3>    \n <ul>\n   <li>  Do problems XX\n   <li>  Use the linked list class provided in the Collections class\n     to implement a sparse polynomial. Implement the following:\n     <ol>\n      <li> Poly(String s) where s has looks like 2x3+11x14 etc. <br>\n          Use StringTokenizer and add \"x\" to the delimiter set.\n       <li> void add(Poly p) adds p to the current polynomial\n       <li> int degree(Poly p) returns the highest degree of the polynomial\n       <li> Extra credit:  void mult(Poly p) multiplies p with current polynomial\n      <li> Extra credit: double solve(P, int a, int b)  returns a solution\n           to P within the range [a,b]. \n     </ol>\n  </ul>\n<li> <h3> Arrays   </h3>\n  <ul>\n     <li> Write a dynamic arrays as an array, a singly linked list, a doubly\nlinked list  pointer, and an array.\nTime the results of adding the elements 1...1000 to it.\n        \n\n\n   </ul>\n<li> <h3> LinkedLists  </h3>\n   <ul>\n     <li> Expand the program from the previous assignment to include deletion. To time\n     deletion, first create an fixed array of size 1000, with the\n     the integers in random order. Now you can delete elements from\neach representation in the same order.\n   </ul>\n<li> <h3> Stacks and Queues  </h3>\n<li> <h3> Ordered Lists  </h3>\n  In this program you will create a book index of all the \"content\"\nwords. We will somewhat arbitrarily define a content word as one \ncontaining at least 7 characters.\nYour program will accept a file and output\nan ordered list of  word  linenumber, linenumber etc. For example\na typically output line might be:     government at lines: 15, 123, 3004\n\n<li> <h3> Hash tables  </h3>\n<li> <h3> Trees  </h3>\n</ol>\n\n\n</body>\n</HTML>", "encoding": "ascii"}