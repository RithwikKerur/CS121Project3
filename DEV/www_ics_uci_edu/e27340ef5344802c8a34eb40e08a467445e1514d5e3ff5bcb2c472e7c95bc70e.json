{"url": "https://www.ics.uci.edu/~goodrich/teach/cs165/proj/proj3.html", "content": "<html>\n\n<head>\n<title>CS 165 - Project 3</title>\n</head>\n\n<body bgcolor=\"#FFFFFF\">\n\n<center>\n\n<h2>\nCS 165 - Project 3 - Algorithmic Experiments of Real-World Phenomena<br>\n100 points\n</h2>\n<p>\nDue: Friday, June 7, 2019, 11:55pm </h2>\n<p>\n<b>\nPlease submit your project electronically,\nwith the source code as a single zip file and your report\nas a single pdf file.\n</b>\n\n</center>\n\n<p>\nProject 3 involves testing various graph algorithms experimentally to \ndetermine properties of models of real-world networks.\nThe specific graph algorithms you should implement are the following\nthree algorithms (please see the course notes for details on these algorithms):\n<ol>\n<li> <b>Diameter algorithm</b>, that is, as best is reasonably \npossible, determine the length\nof a longest path in the graph.\n<li> <b>Clustering-coefficient algorithm</b>, that is, determine the ratio of three\ntimes the number of triangles over the number of paths of length 2.\n<li> <b>Degree-distribution algorithm</b>, that is,\ndetermine for each possible degree, \nthe number of vertices in the graph with that degree.\n</ol>\n\n<p>\nYou need to test each algorithm on graphs of \nthe following type (depending on your student ID):\n<ul>\n<li> If your student ID is an odd number, you should test the above algorithms\non Erdos-Renyi random graphs, G(n,p), with p = 2(ln n)/n, where \"ln n\" denotes\nthe natural logarithm of n.\n<li> If your student ID is an even number, you should test the above algorithms\non Barabasi-Albert random graphs, generated with the parameter d = 5 as the \nnumber of neighbors each new vertex chooses.\n</ul>\n\n<p>\nYou should determine the diameter and clustering coefficients\nof multiple random graphs of length n, and have n grow, and then \nplot the average diamters and clustering coefficients, respectively, \nas a function of n, on a lin-log scale.\nYou should then make a determination as to whether \nthese values grow, decrease, or remain constant as a function of n.\nAlso, if they grow, determine if they grow proporitonal to the function, log n,\nor according to a function that grows faster or slower than the function, log n.\n\n<p>\nFor each number of vertices, \nn=1,000, n=10,000, and n=100,000, plot the degree distribution of \nan instance of your chosen type of random graph \nhaving that number of vertices.\nYou should plot the degree-distribution results on a \nregular (lin-lin) scale and a\nlog-log scale, and then make a determination whether\nthat degree distribution has a power law.\nIf you decide that the degree distribution has a power law, find the slope\nof a line fitting the data in the log-log scale and report on\nthe exponent of that power law.\n\n<p>\nPlease use the file, <a href=\"project3.h\">project3.h</a> file to define your API.\n(Updated May 30, 2019.)\n\n<p>\nHere is a test file, <a href=\"tests.h\">tests.h</a>, which you should\nuse to test your code. It is similar to the test file that will be used\nby the Grader.\n\n<p>\nWrite a report that shows your plots, includes your conclusions, explains how\nyou implemented your algorithms (including pseudo-code for your versions), \nand any other observations that you would like to make.\n\n<p>\n<b>There will be 10 points of extra credit available to students who\nimplement and test both types of graph models,\nErdos-Renyi and\nBarabasi-Albert, including plots and analysis in their report\nfor both types.\n</b>\n</body>\n\n</html>\n\n</body>\n\n</html>\n", "encoding": "ascii"}