{"url": "https://www.ics.uci.edu/~pattis/ICS-46/lectures/notes/overview.txt", "content": "\t\t\t\tCourse Overview\r\n\r\n\r\nI will briefly examine the overview (html) document and tour through various\r\nother documents on the course web site, mostly reachable from the left\r\n(tan) index on the fact sheet. I recommend that you continue to explore the\r\ncourse web site: look especially closely at the Syllabus document. We will\r\nlook a bit at the details of all the testing instruments and how the final\r\ngrade will be computed.\r\n\r\nI will explain that students who come to question the grading of their quizzes,\r\nprograms, and exams set up a win-win situation. Either I did grade it wrong\r\nand you deserve more points (a win for you), or you will learn what was wrong\r\nwith a solution that you thought was correct (another win for you).\r\n\r\nI will distribute my \"Academic Integrity Contract\" on Monday, which we will\r\ndiscuss on Wednesday. You should carefully read this document and sign and\r\nreturn it on FRIDAY. Every year there are Academic Integrity violations in my\r\nclasses, so I want to clearly describe my policy on this topic; I hope that you\r\nwill take to heart this information. This contract is also available on the\r\nHandouts (General) link in the index on the fact sheet.\r\n\r\nNext we will talk about the three major goals for this class. The focus of\r\nICS 46 is (abstract) data types, data structures that implement them, and\r\nanalyzing the performance of these implementations: their time and space\r\nefficiency. There are many practical and theoretical issues related to these\r\ngoals.\r\n\r\n  1) Demonstrate skill solving problems/programming with C++ template\r\n     classes (from the ICS46 Template Library: ITL): specifically, understand\r\n     the operations that we can perform on the (abstract) data types Stack,\r\n     Queue, PriorityQueue, Set, Map, (and later Equivalence Class and Graph)\r\n     and their iterators; and use combinations of these data types and their\r\n     operations to solve complicated problems.\r\n\r\n     We call these collections data TYPES or ABSTRACT data TYPES because they\r\n     are  characterized completely by their external behavior. E.g., in queues\r\n     we know that if C++ executes q.enque(\"a\"); followed by q.enqueue(\"b\"); and\r\n     q.enqueue(\"c\"); then calling q.dequeue() will returrn \"a\" and leave only\r\n     \"b\" (first) and \"c\" (last) in the queue, no matter how such a queue is\r\n     actually implemented in C++ as a data strcuture (see 2 below): by an array,\r\n     linked list, etc.\r\n\r\n     Likewise, in stacks we know that if C++ executes s.push(\"a\"); followed by\r\n     s.push(\"b\"); and  s.push(\"c\"); then calling s.pop() will returrn \"c\" and\r\n     leave only \"b\" (at the top) and \"a\" (at the bottom) in the stack, no\r\n     matter how such a stack is actually implemented in C++ by a data structure\r\n     (see 2 below): by an array, linked list, etc.\r\n\r\n\r\n  2) Demonstrate skill at using low-level C++ data structures (primarily\r\n     arrays and self-referential/linked data structures) to implement these\r\n     data types correctly (how the information is represented and what\r\n     algorithms process the information) and ensure that they run efficiently. \r\n\r\n     There are many different data STRUCTURES that we can use to implement\r\n     every data TYPE. E.g., there are various implementations of queues that\r\n     use arrays and linked-list data structures, each correctly producing the\r\n     required queue behavior. Each has different advantages and disadvantages\r\n     over the other (see 3 below, for an important category of differences).\r\n\r\n     I will provide slow implementations for all these data types, which use \r\n     simple array data structures to implement their behavior. Using these\r\n     simple implementations, we can write programs (with these data types, using\r\n     their simple implementations) that execute correctly, if slowly. During the\r\n     quarter we will discuss more interesting data structures and use them to\r\n     re-implement these data types more efficiently. By substituting a faster\r\n     implementation for a data type (using just a few edits in our code) our\r\n     programs will produce the same results but run more quickly. Doing so works\r\n     only if the complete data type is implemented by the data structure.\r\n\r\n     For templated classes, we use the definition part of .hpp files to define\r\n     concrete classes in C++ to specify how the operations on a data type are\r\n     implemented using the data structure implementing it. \r\n\r\n\r\n  3) Understand big-O (and big-Omega and big-Theta) notation, and demonstrate\r\n     the ability to use these notations to analyze the efficiency of\r\n     data structures implementing data types, and understand the appropriate\r\n     use and limits of these notations (and compare and contrast them to\r\n     approaches thatr collect empirical data). \r\n\r\n     Since all data structures that implement a data type have the same\r\n     external behavior (a program using one should produce an equivalent result\r\n     to a program using another), the primary \"observable\" differences among\r\n     different implementations is how fast their  operations execute (and to a\r\n     lesser extent, how much memory they occupy). We will use mathematical and\r\n     empirical approaches to study the efficiency of the algorithms that run on\r\n     various data structures (concentrating on the operations of the data types\r\n     they implement).\r\n\r\nIn addition, in the pursuit of goals 1-2, we will gain experience using\r\nintermediate-level C++ programming ideas.\r\n\r\nFinally, time permitting, we will briefly tour the CLion Integrated\r\nDevelopment Environment which will serve as the standard vehicle for\r\nprogramming in this course (although you can develop programs using any\r\nenvironment, the programs must compile/run correctly using Clang C++).\r\nI recommend that you install CLion on your computer and work on Programming\r\nAssignment #0 to familiarize yourself with its operation. You might try to\r\nadapt the code you wrote in ICS-45C to run under CLion.\r\n\r\nQuote for the Day:\r\n\r\n  I am always doing that which I cannot do,\r\n  in order that I may learn how to do it.\r\n\r\n  - P. Picasso\r\n\r\n\r\n", "encoding": "ascii"}