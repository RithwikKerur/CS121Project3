{"url": "https://www.ics.uci.edu/~thornton/inf43/CourseProject/Testing/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course2.css\" type=\"text/css\" />\n\n<title>Informatics 43 Spring 2009, Course Project, Phase 4: Testing</title>\n\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nInformatics 43 Spring 2009 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../CourseProject\">Course Project</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>Informatics 43 Spring 2009<br />\n   Course Project<br />\n   Phase 4: Testing</p>\n\n</div>\n\n<div class=\"section\">\n\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, June 5, 9:00pm</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Background</p>\n\n<p>No matter how careful we are when we write code, mistakes are essentially unavoidable; there are just too many interlocking details that we need to get right.  A good design (e.g., separation of concerns, classes with single responsibilities) can partially mitigate this issue, unit testing can certainly help, but we ultimately still need to test our system in whole, with all components completed and integrated together.</p>\n\n<p>In your project this quarter, you've now completed at least some portion of the implementation and submitted it, so it's time to focus your efforts on testing, ensuring that the system has been built as specified in the <a href=\"../Informatics43-Spring2009-OfficialRequirements.pdf\">Official Requirements Specification</a>, using a combination of white-box and black-box testing techniques.  This is a big job, much larger than you could reasonably be asked to complete in the time we have left this quarter, so you'll only be asked to test certain areas of functionality.</p>\n\n<p>Also, because not everyone has completed the implementation &mdash; and because those of you who aren't finished haven't all completed on the same subset of it &mdash; you'll all test a separate, completed, \"official\" implementation instead of your own.  (Of course, you're welcome to run your chosen test cases against your own implementation, if you'd like, but that won't be part of this phase of the project.)</p>\n\n<p>Testing is at least partly driven by planning; deciding what test cases should be executed in order to gain confidence that a system is working as specified is often at least as much work as executing the tests you chose.  As we discussed in lecture, this kind of planning can take many forms, with the goal being to find some systematic way of knowing that you've \"covered all your bases.\"  This phase of the project will provide you with practice in using some of these techniques.</p>\n\n<p>In particular, you'll be working on two forms of testing:</p>\n\n<ul>\n  <li><i>Black box testing</i>, which is focused on testing the behavior of the system under test, without considering (or perhaps even having access to) the source code.</li>\n  <li><i>White box testing</i>, in which you use the structure of the source code to determine what to test and how to test it (e.g., by building control flow graphs and using coverage metrics to drive your test case selection).</li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The Official Implementation of the Triple P Enrollment System</p>\n\n<p>The Official Implementation is a console-based implementation of the requirements that comprise Implementation Phase 1 of the Official Requirements Specification, along with a handful of the other requirements.</p>\n\n<p>You can download the Official Implementation, in both compiled and source code forms, at the following link:</p>\n\n<ul>\n  <li><a href=\"../Informatics43-Spring2009-OfficialImplementation.zip\">The Official Implementation of the Triple P Enrollment System</a></li>\n</ul>\n\n<p>I should point out a few things about the Official Implementation:</p>\n\n<ul>\n  <li>It is not intended to be thought of as a model of what your implementation should have been.  It is comprised of around 100 classes in 17 packages; that doesn't mean that your implementation should have been organized this way, or that there was anything wrong with having many fewer classes or avoiding the use of packages altogether.  My goal was to demonstrate how far you can take ideas like separation of concerns, high cohesion, low coupling, and code reuse.  For example, the menu system is generalized; different forms of output (lists, tables, \"details\") are generalized; formatters, converters, and validators are their own classes; every command on every menu is its own class; and so on.  This kind of design affords you a good deal of flexibility.  Adding the same command to multiple menus becomes simple &mdash; just create objects of that command's class in two places.  Formatting output the same way (e.g., displaying a student's name in the form <b>LastName, FirstName</b>) in many places becomes simple; just create formatter objects in each place you need them.</li>\n  <li>As always, I had to balance my goal of a clean implementation against the time I had available to work on it, so I'm sure there are still areas where I could make it better; I've yet to ever write a substantially-sized program that I couldn't inspect afterward and find things I wish I'd done differently, even if I can't find bugs in the program.  If you find areas that you think could be improved, let me know; I'd be glad to talk with you about them.</li>\n  <li>You'll find the main( ) method, which you can use to run the program, in the <b>inf43.spring2009.tpes.Main</b> class.  The menus are fairly self-explanatory.  You can get help at any prompt (when selecting commands or entering other input) by typing <b>?</b> and pressing Enter.</li>\n  <li>The code you'll be concerned with in your tests is in the <b>inf43.spring2009.tpes.model</b> package.  All of the code in other packages is related in some way to the user interface.</li>\n  <li>There are no comments in the program, though I've done my best to choose good identifier names, keep methods short and straightforward, and keep each class focused on one task.  If there's anything about the code you're unsure of, please feel free to ask.</li>\n  <li>The system has been only lightly tested up to this point; while I didn't place any defects into it intentionally, I'm nearly certain that there are things wrong with it.  This is part of the point, of course, given that I want you to be testing it.</li>\n  <li>It makes use of some Java features, particularly some of the thornier aspects of generics, that you likely haven't seen before.  The areas of code where these new features arise are not going to be your focus, though I'm happy to explain some of the Java concepts demonstrated if you're interested.  (If I see you in Informatics 101 in the Summer or Fall, you'll get a chance to learn more about these kinds of things.)</li>\n</ul>\n\n<!--\n<p><i>Note: The Official Implementation will be posted on this page in both source code and compiled forms on the evening of Friday, May 29.  (The reason it will not be posted until then is that there are still some people working on Phase 3, under the policy that allows each of you to submit one phase of the project up to two days late.)  In the meantime, you can still begin doing at least some of your planning and documenting your test matrices for the black box testing portion of this phase.</i></p>\n-->\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Test matrices</p>\n\n<p>For this part of Phase 4, you'll be required to develop a set of <i>test matrices</i>, using the technique we discussed in lecture for choosing test cases:</p>\n\n<ul>\n  <li>Find a set of <i>bases</i>, each basis being a criterion for dividing possible test cases into <i>subdomains</i>.  A basis can center on things like the size of a collection, whether a user is logged in, whether a particular command has been executed successfully, and so on.</li>\n  <li>For each basis, list all of the interesting subdomains that you can divide test cases into.</li>\n</ul>\n\n<p>As an example, suppose you're testing a web site like Gmail, where users can write email messages, send them, search them, and so on.  Suppose, in particular, that you're testing the login functionality.  Some of the bases you might choose include:</p>\n\n<ul>\n  <li>Whether the username is valid</li>\n  <li>Whether the password matches against a user</li>\n</ul>\n\n<p>Each basis divides test cases into subdomains, where all of the test cases in each subdomain share some interesting property.  For example, the <b>whether the entered password matches against users' passwords</b> might yield three subdomains:</p>\n\n<ol>\n  <li>The password entered matches the password for the user specified</li>\n  <li>The password entered matches the password for a user other than the one specified</li>\n  <li>The password entered does not match the password for any user in the system</li>\n</ol>\n\n<p>You then choose at least one test case in each subdomain, along with test cases that span multiple subdomains (if any).  In the above example, you might choose these test cases:</p>\n\n<ul>\n  <li>There are two users registered in the system: Alex with password MyPassword1, Boo with password OtherPassword1.  User enters username Alex with password MyPassword1.  We expect login to be successful.   [Subdomain 1]</li>\n  <li>There are two users registered in the system: Alex with password MyPassword1, Boo with password OtherPassword1.  User enters username Alex with password OtherPassword1.  We expect login to be unsuccessful.   [Subdomain 2]</li>\n  <li>There are two users registered in the system: Alex with password MyPassword1, Boo with password OtherPassword1.  User enters username Boo with password NoPassword1.  We expect login to be unsuccessful.  [Subdomain 3]</li>\n  <li>There are two users registered in the system: Alex with password MyPassword1, Boo with password MyPassword1.  User enters username Boo with password MyPassword1.  We expect login to be successful.  [Subdomains 1 and 2]</li>\n</ul>\n\n<p>Note that, for each test case, the expectation is included; it's not a test case if we don't know what behavior we expect.</p>\n\n<p>We can display the bases, subdomains, and test cases in the form of a <i>test matrix</i>, as we saw in lecture.  An example of a test matrix, detailing one basis and associated test cases in the example situation above, is available at the following link:</p>\n\n<ul>\n  <li><a href=\"Informatics43-Spring2009-TestMatrixExample.pdf\">Example Test Matrix</a></li>\n</ul>\n\n<p>Note the presence of an <b>Outcome</b> column in the example test matrix; as you execute tests, fill in the actual testing outcome that you observed (e.g., \"performed as expected\" or \"login was successful even though it shouldn't have been\").</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Part 1: Black box testing (50 points)</p>\n\n<p>For Part 1 of this project phase, you are required to plan and perform black box testing on part of the Official Implementation of TPES.  In particular, you will separately develop and execute tests for two of the requirements from the Official Requirements Specification:</p>\n\n<ul>\n  <li><b>ES-6</b>, which prohibits students from enrolling in more than one course that have overlapping meeting intervals.</li>\n  <li><b>CS-10</b>, which describes how to calculate the \"effective capacity\" of a course.</li>\n</ul>\n\n<p>For each of these requirements, determine at least three bases, making sure that each of them is a reasonable criterion that can be used to divide the domain of possible test cases into interesting subdomains.  For each basis, list a reasonable number of subdomains (usually at least three) and one or two test cases for each subdomain, along with at least one test case that covers every possible combination of subdomains.  (Note that not all subdomain combinations will be possible; sometimes, none of them will be possible.)</p>\n\n<p>Record your test cases in a collection of test matrices, in the same basic form as the example linked in the previous section.  Run the test cases against the Official Implementation of TPES and make a note of the outcome of each: note whether the test was succesful, along with a note about any incorrect behavior that was seen if the test failed.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Part 2: White box testing (50 points)</p>\n\n<p>For Part 2 of this project phase, you are required to plan and perform white box testing on part of the Official Implementation of TPES.  In our case, we're using the term \"white box testing\" to refer to whole-program testing driven by our knowledge of the structure of the source code; this form of testing is distinct from the unit testing you did in the previous phase, which focused on testing individual classes and methods completely out of the context of the rest of the program.  You'll execute your white box tests by running the program; the difference is that you'll use the code to choose your test cases.</p>\n\n<p class=\"subtitle\">Line numbering and node coverage</p>\n\n<p>Recall from lecture that we can build a <i>control flow graph</i> for methods in a Java program.  The first step is to number each line of code, not including the signature or any line containing only a curly brace.  Statements that are split into multiple lines &mdash; which I do so that my code can be read without the need for horizontal scrolling &mdash; should only be counted as a single line.  For example, the following is an example of the numbering of lines in the Classroom.addCourseMeeting( ) method from the Official Implementation:</p>\n\n<pre>\n    <b>public</b> <b>void</b> addCourseMeeting(CourseMeeting courseToAdd)\n    <b>throws</b> CourseMeetingOverlapsException\n    {\n<b>1</b>       <b>if</b> (courseMeetingToAdd.getClassroom() != <b>this</b>)\n        {\n            <b>throw</b> <b>new</b> IllegalArgumentException(\n<b>2</b>               \"courseMeetingToAdd refers to the wrong classroom\");\n        }\n        \n<b>3</b>       <b>for</b> (CourseMeeting courseMeeting : courseMeetings)\n        {\n<b>4</b>           <b>if</b> (courseMeeting.getMeetingInterval().overlaps(courseMeetingToAdd.getMeetingInterval())\n            {\n<b>5</b>               <b>throw</b> <b>new</b> CourseMeetingOverlapsException(courseMeeting, courseMeetingToAdd);\n            }\n        }\n        \n<b>6</b>       courseMeetings.add(courseMeetingToAdd);\n    }\n</pre>\n\n<p>We won't build control flow graphs in this phase of the project &mdash; though you're free to draw them if you'd like &mdash; but we will use this line-numbering scheme to help track whether we've achieved the most code coverage we can, where every line of code that can be reached has been reached by at least one test case.</p>\n\n<p class=\"subtitle\">What you need to do in this part</p>\n\n<p>First, number the lines of code in the following two methods in the Official Implementation.  (You don't have to turn this part in, but you do need to number the lines so that you can refer to them in your test matrices.)</p>\n\n<ul>\n  <li>The <b>overlaps</b> method in the <b>inf43.spring2009.tpes.model.MeetingInterval</b> class</li>\n  <li>The <b>enrollInCourse</b> method in the <b>inf43.spring2009.tpes.model.Student</b> class</li>\n</ul>\n\n<p>Next, determine whether there are any lines of code that are unreachable in the program as it is currently written.  This will require you to look around other parts of the program that use these methods.  (There are tools that can help; see below.)  Make a note of any unreachable lines of code; you won't need to find tests that cover them.</p>\n\n<p>Finally, you're ready to choose test cases and execute them, using the following procedure for each of the two methods that you've been asked to test:</p>\n\n<ul>\n  <li>Choose at least two bases that would allow you to divide the set of possible into a set of interesting subdomains.</li>\n  <li>Develop at least one test case covering each subdomain individually, as well as at least one test case covering each possible combinations of subdomains.  (Note, as in your black box testing, that not all combinations of subdomains are possible.)\n    <ul>\n      <li>Your test cases should be \"whole-program\" test cases, meaning that they're expressed in terms of commands executed in the user interface, as opposed to unit tests, where you're testing methods in isolation.</li>\n    </ul>\n  </li>\n  <li>For each test case, include in your \"expected output\" a list of which lines of code will be reached in the method that you're testing.</li>\n  <li>Verify that there is at least one test case covering every reachable line of code in the method that you're testing.</li>\n</ul>\n\n<p>Put together a test matrix as you did in Part 1 of this phase, using the same basic format shown in the example.</p>\n\n<p class=\"subtitle\">Navigating an unfamiliar code base</p>\n\n<p>It's been said that the worst code in the world is \"someone else's code.\"  When you're working with code that you didn't write, it can be difficult to find your way around; even if you can follow the logic of short blocks of code, you won't necessarily have a feel for its overall structure.</p>\n\n<p>Since you haven't seen the code in the Official Implementation before, it may be a bit difficult, at first, to find out whether a particular line of code can be reached via the user interface.  For example, some error checks in the <b>inf43.spring2009.tpes.model</b> package are duplicated in the user interface code; in these cases, the exception will actually never be thrown by the model, so it won't be possible to use our form of white box testing to verify that they get thrown.</p>\n\n<p>(Sidebar: You might be wondering why such checks are being done in more than one place.  Why should the model check things that the user interface checks?  Why should the user interface check things that the model checks?  The reason is that they're each doing the checking for a different purpose.  The user interface checks for things that will allow it to be construct a contextual error message.  The model checks for things that will cause it to fail.  The model operates, rightly, under the assumption that it could be surrounded by any user interface; given that, even if today's user interface does a particular check, tomorrow's user interface might not.  So we're better off making the model as bullet-proof as we can, so that we'll be more resilient to change.)</p>\n\n<p>Eclipse has built-in tools to lighten the burden of navigating someone else's code base.  One useful one is the \"References\" tool, which asks Eclipse to search an entire project or even an entire workspace, looking for references to a particular class, method, variable, etc.  Suppose, for example, that you'd like to find out where in the program the Course.addCourseMeeting( ) method is called.  Here's how you can find out all the places where the method is called:</p>\n\n<ul>\n  <li>Right-click on the identifier addCourseMeeting in the declaration of the method in Course.java</li>\n  <li>In the pop-up menu, select <b>References</b> and then <b>Project</b>.  This will tell Eclipse to look for all the places in the entire project where the method is called.</li>\n  <li>A <b>Search</b> area will appear somewhere within the Eclipse window.  (For me, it appeared along the bottom edge of the window, but I can't guarantee that it'll show up in the same place for you.)  In that window, you'll see packages, inside of which are classes, inside of which are methods; double-clicking the methods will take you to lines of code on which the Course.addCourseMeeting( ) method is called.  (This particular method is only called from one other place in the program: line 99 of ScheduleCourseCommandHandler.java.)</li>\n</ul>\n\n<p>Using tools like reference searching will make it easier to find your way around this obviously unfamiliar code base that I've given you.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>For each part of this project phase, submit your test matrices in a single document in either Microsoft Word (.doc or .docx), PDF (.pdf), or Rich Text Format (.rtf).  Note that you may find it useful to orient the pages in landscape mode (i.e., wider than they are tall) rather than the more customary portrait mode (i.e., taller than they are wide).</p>\n\n<p>Follow <a href=\"../SubmittingPhases.html\">this link</a> for a discussion of how to submit files via Checkmate, an ICS-built online assignment submission system.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the specification that you want graded.  We won't regrade your work simply because you submitted the wrong version accidentally.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Originally written by Alex Thornton, Spring 2009.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}