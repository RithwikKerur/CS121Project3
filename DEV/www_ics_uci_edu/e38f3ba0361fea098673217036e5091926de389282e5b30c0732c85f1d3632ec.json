{"url": "https://www.ics.uci.edu/~kay/courses/i41/hw/lab6.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Monday, October 31, 2005 5:11 PM\" />\n<TITLE>Lab Assignment 6</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D23E7C2F\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/i41/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style1 {\n\tfont-family: \"Courier New\", Courier, monospace;\n\tfont-size: 10pt;\n}\n.style2 {font-family: \"Goudy Old Style\"}\n.style4 {font-family: \"Courier New\", Courier, monospace}\n-->\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT size=\"2\" FACE=\"Goudy Old Style\">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\" SIZE=6><B>Lab Assignment 6 </B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">This assignment is due at the end of lab on\nFriday, November 4. </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Choose a partner for this assignment, someone\nyou haven&#39;t worked with already.  Starting with this assignment, change\nyour language level to Intermediate Student with Lambda. There's a lot to do this week, so work with deliberate speed.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(a)</B>  Do exercises 28.2.5, 28.2.6, 28.2.8, 28.2.9. Then do exercises 28.3.10 and 28.3.11. It's important to understand what these exercises are asking for and what the terminology means.  Don't just guess; don't just wing it; do be meticulous about following the design recipe, especially contracts and examples (check-expects). Submit your definitions via Checkmate.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b)</B>  At the end of the Functions as\nFirst-Class Objects sheet, we refactored the functions </FONT><FONT FACE=\"Courier New\" SIZE=2>find-all-matches</FONT><FONT FACE=\"Goudy Old Style\">\nand </FONT><FONT FACE=\"Courier New\" SIZE=2>remove-all-matches</FONT><FONT FACE=\"Goudy Old Style\">,\ndefining both in terms of a more general </FONT><FONT FACE=\"Courier New\" SIZE=2>handle-all-matches</FONT><FONT FACE=\"Goudy Old Style\">.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b.1)</B>  Do the same thing in the second\nrestaurants program (available at </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants2.scm\">http://www.ics.uci.edu/~kay/scheme/restaurants2.scm</A></FONT><FONT FACE=\"Goudy Old Style\">)\nwith </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-search</FONT><FONT FACE=\"Goudy Old Style\">\nand </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-remove</FONT><FONT FACE=\"Goudy Old Style\">,\nredefining both in terms of a general </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-check</FONT><FONT FACE=\"Goudy Old Style\">\nfunction.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b.2)</B>  Now redefine </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-check</FONT><FONT FACE=\"Goudy Old Style\">\nand </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-change</FONT><FONT FACE=\"Goudy Old Style\">\nin terms of a still-more-general </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-process</FONT><FONT FACE=\"Goudy Old Style\">\nfunction.  This one is complicated; treat it as optional.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b.3)</B>  Simplify your definition of </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-process</FONT><FONT FACE=\"Goudy Old Style\">\n(or </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-check</FONT><FONT FACE=\"Goudy Old Style\">\nand </FONT><FONT FACE=\"Courier New\" SIZE=2>collection-change</FONT><FONT FACE=\"Goudy Old Style\">)\nusing </FONT><FONT FACE=\"Courier New\" SIZE=2>map</FONT><FONT FACE=\"Goudy Old Style\">,\n</FONT><FONT FACE=\"Courier New\" SIZE=2>filter</FONT><FONT FACE=\"Goudy Old Style\">,\n</FONT><FONT FACE=\"Courier New\" SIZE=2>foldr</FONT><FONT FACE=\"Goudy Old Style\">,\nand similar functions.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Collect all of these definitions and submit\nthem via Checkmate. You should try to get at least this far by the end of Monday's lab.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(c)</B> Be sure you've read the section in\nHomework 6 about files; now it&#39;s time to write a few file-handling functions.  Download and\ninstall the simple-file-io.ss teachpack at </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/scheme/simple-file-io.ss\">http://www.ics.uci.edu/~kay/scheme/simple-file-io.ss</A></FONT><FONT FACE=\"Goudy Old Style\">.\n (Remember to right- or control-click on the link and download the file, saving it in the same folder that contains your code.) We also have some <A HREF=\"http://www.ics.uci.edu/~kay/scheme/text-file-io.scm\">file-handling code</A>\n(which you should copy into your definitions file) that provides an API consisting of these four functions for reading and writing text files:</FONT></P>\n<P><code>;; file-&gt;list: string -&gt; list<br />\n;; Given a string naming a file, read the lines in a file into a list of strings.</code></P>\n<p><code>;; file-dialog-&gt;list: anything -&gt; list<br />\n  ;; Show user a dialog box to choose a file; read the file into a list of strings<br />\n  ;; Call with (file-dialog-&gt;list 'x) because student Schemes don't allow<br />\n  ;; parameterless functions.</code></p>\n<p><code>;; list-&gt;file: string list -&gt; side effects (a new file)<br />\n  ;; Given a string naming a new file, write list of strings that file,<br />\n  ;; one string per line.</code></p>\n<p><code>;; list-&gt;file-dialog: list -&gt; side effects (a new file)<br />\n  ;; Write a list of strings to a new file<br />\n  ;; (chosen by showing the user a file selection dialog)</code></p>\n<P>\n<FONT FACE=\"Goudy Old Style\">These functions operate on text files&mdash;files\nwith the extension &quot;.txt&quot; or other files that consist only of\ncharacters you can type on the keyboard.  Word documents don&#39;t work\nunless they&#39;re saved as plain text; Scheme/Racket files <em>do</em> work unless they&#39;re\nsaved with images, comment boxes, or other non-textual features.</FONT></P>\n<P><font face=\"Goudy Old Style\">Take the time to understand what these functions do. Try a few sample calls to read and write some simple files. It's a vital skill to be able to read an API to see what tools are available. As you work on this part of the assignment, take it step by step and make sure you know what's expected before you try to write the code. The final product will be rather large and complex, but we build it up using small, relatively simple steps.</font></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c.1)</B>  Define the function </FONT><span class=\"style1\">copy-file</span><FONT FACE=\"Goudy Old Style\"> that takes two strings&mdash;the name of an existing file and the name of a new\nfile&mdash;and copies the contents of one to the other.  Use</FONT><span class=\"style1\"> <FONT FACE=\"Courier New\">file-&gt;list</FONT></span><FONT FACE=\"Goudy Old Style\"> and </FONT><FONT SIZE=2 FACE=\"Courier New\" class=\"style1\">list-&gt;file</FONT><FONT FACE=\"Goudy Old Style\">.\n Test it out with a short file.  Then download the Project Gutenberg version\nof <I>The Adventures of Sherlock Holmes</I> from </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.gutenberg.org/cache/epub/1661/pg1661.txt\" class=\"style1\">http://www.gutenberg.org/cache/epub/1661/pg1661.txt</A></FONT><FONT FACE=\"Goudy Old Style\">.\n (Project Gutenberg is a wonderful resource for non-copyright-protected\ntexts).  If you have to work on a slow network connection, you may pick\na smaller file; this one is 577K.  Use your <span class=\"style1\">copy-file</span> program to make another\ncopy of this file.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c.2)</B>  Write the function <span class=\"style1\">copy-file-dialog</span> that takes one parameter (that it ignores&mdash;parameterless functions aren&#39;t\nallowed in the DrRacket student languages), displays a dialog box for the\nuser to select a file to copy, displays another dialog box for the user\nto select the name of the copied file, and then creates the copy.  Use<span class=\"style1\"> file-dialog-&gt;list</span> and <span class=\"style1\">list-&gt;file-dialog</span>.  Test this function with a couple of files.  (Testing\nof these file-handling programs isn&#39;t quite as convenient as just putting\nexamples into your code, but it is essential nonetheless.  This is just\nan illustration of how interactive (and imperative, non-functional) programs add an extra layer of complexity\nto the computing task.)</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c.3)</B>  Write the function <span class=\"style1\">copy-with-line-numbers</span> that behaves like <span class=\"style1\">copy-file</span>, except that the copied file has line numbers\nin this form:</FONT></P>\n<P><code>\n1: Project Gutenberg's The Adventures of Sherlock Holmes, by Arthur Conan Doyle<br />\n2: <br />\n3: This eBook is for the use of anyone anywhere at no cost and with<br />\n4: almost no restrictions whatsoever.  You may copy it, give it away or<br />\n...<br />\n13052: subscribe to our email newsletter to hear about new eBooks.</code></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">The pre-defined functions</FONT> \n<FONT SIZE=2 FACE=\"Courier New\" class=\"style1\">string-append</FONT><span class=\"style2\"> and \n</span><FONT SIZE=2></FONT><FONT SIZE=2 FACE=\"Courier New\" class=\"style1\">number-&gt;string</FONT> <FONT FACE=\"Goudy Old Style\"> may be helpful.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c.4)</B>  (optional)  You&#39;ll notice that in your line-numbered file,\nthe lines don&#39;t line up neatly because the numbers have different lengths.\n It would be nice to be able to display a number in a five-character field,\nso that <span class=\"style1\">17</span> would display as &quot;</FONT><span class=\"style4\">&nbsp;&nbsp;&nbsp;</span><FONT FACE=\"Goudy Old Style\"><span class=\"style1\">17</span>&quot; (with three spaces before\nthe number).</FONT></P>\n<P><code>;; pad5: string -&gt; string<br />\n  ;; If input string is 5 characters or longer, return it unchanged. Otherwise,<br />\n;; add enough blanks at the left of the string to make it 5 characters long.</code></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Use this function in your line-numbering program;\nthe pre-defined function </FONT><FONT SIZE=2 FACE=\"Courier New\" class=\"style1\">string-length</FONT>\n<FONT FACE=\"Goudy Old Style\"> will be useful here.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Next, write a generalized version of the function:</FONT></P>\n<P><code>;; pad: string number symbol string -&gt; string<br />\n  ;; The first argument is the input string. The second is the desired length.<br />\n  ;; The third, 'left or 'right, indicates which end of the string should be padded.<br />\n  ;; The fourth is the string that should be added repeatedly<br />\n  ;; until the string is at least as long as the desired length.<br />\n  ;; Examples: (pad &quot;Hi&quot; 5 'right &quot;!&quot;) -&gt; &quot;Hi!!!&quot;<br />\n;; (pad &quot;Preface&quot; 12 'right &quot;_.&quot;) -&gt; &quot;Preface_._._.&quot;</code></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Finally, use these functions in your line-numbering\nprogram so that the numbers are printed in five-character fields (except\nfor numbers over 99,999, which should be as long as necessary).</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Submit these definitions via Checkmate.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(d)</B> Let&#39;s go back to our (new)\nrestaurants with menus.  </FONT></P>\n<P> <FONT FACE=\"Courier New\" SIZE=2>(define-struct rrant (name cuisine phone\n  menu))</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\">where name, cuisine, and phone are strings\n  and menu is a list of dishes:</FONT></P>\n<P> <FONT FACE=\"Courier New\" SIZE=2>(define-struct dish (name price))</FONT><FONT FACE=\"Goudy Old Style\">. </FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\">To the extent possible, write the following\n  definitions without using explicit recursion (i.e., using </FONT><FONT SIZE=2 FACE=\"Courier New\" class=\"style1\">map</FONT><FONT FACE=\"Goudy Old Style\">, </FONT><FONT SIZE=2 FACE=\"Courier New\" class=\"style1\">filter</FONT><FONT FACE=\"Goudy Old Style\">, </FONT><FONT SIZE=2 FACE=\"Courier New\" class=\"style1\">foldr</FONT><FONT FACE=\"Goudy Old Style\">,\n    and similar functions).  None of these modifications should require any\n    change to the code for collections, either.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(d.1)</B> Make up a big list of </FONT><FONT SIZE=2 FACE=\"Courier New\" class=\"style1\">rrant</FONT><FONT FACE=\"Goudy Old Style\"> structures to use in your testing.  Trade and combine lists with your classmates. </FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(d.2)</B> Make a copy of the restaurants2.scm\n  program (as modified in part <B>(b)</B>, if possible) and call it restaurants3.scm.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(d.3)</B> Modify the program to handle </FONT><FONT SIZE=2 FACE=\"Courier New\" class=\"style1\">rrant</FONT><FONT FACE=\"Goudy Old Style\"> objects that include menus.  You should try at least to make a list of all\n  the changes you will need before looking at <A HREF=\"lab6menus.html\">our checklist</A> of modification steps and before looking back at the code we wrote in class.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(d.4)</B> Modify the program to display\n  the average price (of all the dishes on the menu) whenever a restaurant\n  is printed.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(d.5)</B> Add a command to the main menu\n  that allows the user to search for (and display) all the restaurants that\n  serve a given cuisine along with the average price of (all the menus of\n  the restaurants that serve) that cuisine.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\"><B>(d.6)</B> Add a command to the main menu\n  that allows the user to search for (and display) all the restaurants that\n  serve a dish containing a given word or phrase.  (This is more realistic\n  than forcing the user to type the exact name of the dish; here, at least,\n  the user can just type &quot;fava beans&quot; and match all the dishes that\n  include that phrase.  The string-processing functions from the previous part will make this task easier.)</FONT></P>\n<!--<P> <FONT FACE=\"Goudy Old Style\">In class we defined complex expressions like\n  this as one large expression.  That&#39;s fun, but from a good software\n  engineering point of view it&#39;s usually better to define many small functions,\n  each of which does its own piece of the job.  That makes it easier to find\n  the place to make changes when those changes are (inevitably) necessary.</FONT></P>-->\n<P> <FONT FACE=\"Goudy Old Style\">Collect all of these definitions and submit\n  them via Checkmate.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(e)</B>  Remember that each partner must\ncomplete a partner evaluation form via the Survey tool on eee.uci.edu. <!-- A\nfew students have not been doing this consistently; if you have missed any\nforms, go back and do them now (and let the TAknow, so he will pick them\nup and record them).</FONT><FONT FACE=\"Goudy Old Style\">  Missing evaluation forms (on any assignment from the\nstart of the quarter) or late evaluation forms (starting now) will lower\nyour participation score.--></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments by David\nG. Kay; modified and new material added by David G. Kay for the Informatics\nCore Course, Fall 2004 and Fall 2005; file-handling code written by Angelo\nPioli, Fall 2005. Modified by David G. Kay, Fall 2009, Fall 2010, and Fall 2011.</FONT></P>\n<HR />\n<FONT FACE=\"Goudy Old Style\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Goudy Old Style\">\n<!-- #BeginDate format:fcAm1a -->Friday, November 4, 2011 8:03 AM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>", "encoding": "ascii"}