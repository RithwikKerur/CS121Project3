{"url": "https://www.ics.uci.edu/~projects/drillsim/readme_hse.txt", "content": "DrillSime version 2.0 (hse)\r\n\r\nCopyright (c) 2005\r\nDonald Bren School of Information and Computer Science \r\nUniversity of California, Irvine\r\nIrvine, CA 92697\r\n  \r\n   o Sharad Mehrotra  (Faculty)\r\n   o Nalini Venkatasubramanian (Faculty)\r\n   o Chris Davison (Technology Manager)\r\n   o Vidhya Balasubramanian (Ph.D. Student) \r\n   o Daniel Massaguer (Ph.D. Student) \r\n   o Earth Chandrruangphen (Ph.D. Student) \r\n   o Ali Khodaei (MS student)\r\n   o Thomas Chen (Undergraduate Student)\r\n   \r\n   University of California, Irvine\r\n\r\n   This project is generously supported by the National Science Foundation under  Award Numbers 0331707 and  0331690\r\n\r\n   Please send technical questions about this release to simulator@ics.uci.edu .\r\n---------------------------------------------------------------------\r\n\r\n\r\n---------------------------------------------------------------------\r\n\r\n\r\n- Introduction\r\n\r\n The roles of IT solutions are closely related to crisis response \r\n process. When an unexpected event happens, the response is an \r\n interrelated set of activities that play out in the same space and \r\n time. For each activity, there are a set of decisions, which are made \r\n based on variety of criterion, such as damage assessment, etc. \r\n Therefore, information is the driver for the decisions and the more \r\n accurate and timely the information, the more successful the response.\r\n The role of the IT solutions we are developing is to get the relevant \r\n information accurately and quickly to the decision makers. Currently we\r\n are mainly focus on the following four fields: 1) information \r\n collection; 2) information analysis; 3) information sharing; 4) \r\n information dissemination.\r\n \r\n At the micro level, the simulator simulates agents corresponding to \r\n humans. Agents could either be controlled by computer programs or \r\n alternatively by human participants. To certain extend, a simulator, \r\n which is simulating the response activity at the mixture of micro and \r\n macro level, is similar to immersive environments. As in computer games\r\n where players are immersed in the virtual environment, human \r\n participants are also immersed in the simulation in a similar way. We\r\n refer to such agents as human agents. Human agents could participate \r\n along multiple roles. They may play the role of being victims, or first\r\n responders, response planners, or commanders.  The purpose for human \r\n controlled agents is to allow for dynamic calibration of the simulation\r\n \r\n\r\n- Platform Requirements:\r\n\r\n  Any Java-compatible environment with a Java 2 SDK.  (We tested the code on Java(TM) 2 Runtime Environment, Standard Edition, version \"1.4.1_01\", \"1.5.0_02, and \"1.5.0_03\".)\r\n\r\n- Installation\r\n\r\n 1. Download the DrillSim_hse.zip file from the simulator webpage: http://www.ics.uci.edu/~projects/drillsim.\r\n The zip file contains a jar file and some sample maps.\r\n\r\n 2. Unzip the file and add the jar file to the classpath variable.\r\n \r\n- Used Libraries:\r\n\r\n o JADE : Java Agent Development Environment (download jade.jar, jadeTools.jar, iiop.jar, and Base64.jar from http://jade.tilab.com/ and add them to the classpath as well)\r\n \r\n  \r\n- How to use the simulator:\r\n\r\n1, find a floor map in GIF format (e.g. \"map_original.gif\" in our \"example_map\" folder)\r\n\r\n2, convert the map into the right size so that it can be displayed nicely in the computer screen. \r\n(E.g. \"map.gif\" in the \"example_map\" folder)\r\n\r\n3, covert the map into some text reperesentation\r\n\r\n3.1 convert map into the right size. In our simulator, a 80x60(pixel) image will be represented as a 80x60 matrix. \r\no A very large matrix will certainly researve more information of the original map, but it is computational expensive.\r\no A small matrix will make the simulator run faster, but it may lose information from the original map. \r\no In our test, a 100x100 matrix is considered reasonable. (e.g. \"map_tiny.gif\" in \"example_map\" folder).\r\n\r\n3.2 edit it the map using graphics tool (Photoshop, MS paint)\r\no accessible regions are represented using white color\r\no inaccessible regions are represented using non-white color, e.g. black, gray, etc\r\n\r\n\r\n3.3 use class/test/simeva/Viewer.class to convert background image into a text file\r\nFor an example, if the map is called \"map_tiny.gif\", we can convert it using the following commands:\r\n\r\no on Windows/Unix environment (at home folder of the installation):\r\nJava test.simeva.Viewer map_tiny.gif\r\nThe output will be automatically written to a file called \"map_tiny.gif.txt\"\r\n\r\n3.4 put easy/tough/assembly area in text file\r\no Open the txt representation file, you will find that accessible regions are presented as '0's and inaccessible regions are presented as '1's. \r\no We also have other legends.   \r\n  - Normal Accessible Region (0)\r\n  - Blocked Region (1)  \r\n  - Easy Region (2)  \r\n  - Assembly Area (3). In our current version, only one assembly area is allowed. If multuple areas are defined, when the file is read into the simulator, the later one will overwrite the previous ones.\r\n\r\no User can alter the map representation freely.\r\n\r\n4, Run the simulator by executing : \"java prototype.hse.MyApplet\"\r\n\r\n4.1 before you press start, you have to choose the map to load. For an example, \"map.gif\".\r\no Please note that, due to some not yet known reasons, you need to change the size of the simulator window frame after loading a map. \r\n\r\n4.2 after loading the map, you can change the map at real time\r\no select the type of region you want to add by clicking \"Build Map -> Easy/Tough/Very Tough\"\r\no Clicking \r\n\r\n4.3 set an assembly area if it is not yet defined \r\n\r\n4.4 picking parameters, such as agent number\r\n\r\n4.5 start the simulator by clicking \"simulate->start\". Give it a few seconds to let the agents initialize.\r\n\r\n4.6 suspend/resume/terminate while running the simulator\r\n\r\n4.7 After the simulator is terminated, either manually (click the terminate botton) or automatically (no agent in the building), goto step 4.1 if you want.\r\n\r\n[new features]\r\n4.8 Agents will not move until they either hear the fire alarm or another agent tells them to do so.\r\n\t4.8.1. To activate the fire alarm, click on the fire alarm button\r\n\t4.8.2. To make an agent tell another agent to leave, see 4.11.\r\n4.9 The magenta agent is the floor warden. When it learns is time to evacute the building (e.g., by hearing the fire alarm), it puts its grenn hat and vest on and goes towards \r\n\tthe assembly area. \r\n4.10 Agents react different to the fire alarm depending on their cognitive characteristics. Currently, the relevance an agent gives to the fire alarm regarding deciding whether to evacuate or not\r\nis randomly initialized. The same applies for the relevance given to a floor warden shouting to evacuate the floor. This holds for all agents but the floor warden agent. The floor warden\r\nagent gives maximum relavance to the fire alarm; therefore, it is usually the first agent to start moving and it puts its green hat and vest on immediately after the fire alarm is fired.\r\n4.11 Controlling an agent. To control an agent, left-click on it (you should see the message 'auch' if correctly clicked). Possible actions are:\r\n\t4.11.1 Walk. While holding the 'w' key down, left-click where you want the agent to walk to. 'w' key can be released right after the left-click.\r\n\t4.11.2 Shout. Type 's' once and the agent will start shouting. You can learn which agents are hearing the message by the messages being print at the console. Type 's' again and the agent will stop shouting.\r\n\r\nEnjoy.\r\n\r\n\r\nLast updated: April 29, 2005.", "encoding": "ascii"}