{"url": "https://www.ics.uci.edu/~kibler/javacourse/applet.html", "content": "\n<html>\n<head>\n<title>  Applets </title>\n</head>\n<h1> Applets </h1>\n<body>\n<h3> The hierarchy </h3>\n<pre>\n   Object -> Component -> Container -> Panel -> Applet ->  your program\n                              \\\n                                 -->  Window -> Frame : for applications\n</pre>\nNote: Applets can open windows and frames also.\n<h3> Words Applet </h3>\nHere we display words at random on the screen.\n<br> Suppose the file name is  Words.java.\n\n<pre>\n import java.applet.*;\n import java.awt.*;\n\npublic class Words extends Applet \n {\n   int random(int i)\n {\n   return Math.round(Math.random()*i) ;  // calls to class methods\n }\n\n   public void paint(Graphics g)       // overriding paint\n {\n   String fontName = getParameter(\"font\");  // taking parameters from html file\n   Font f = new Font(fontName, Font.BOLD,18)\n   g.setFont(f);\n   for (int i = 0; i<10; i++)\n      g.drawString(random(200),random(100),\"Don't touch\"); // graphics upside down\n }  \n}\n\n</pre>\n\n<h3> Corresponding html file </h3>\n<pre>\n < HTML >\n    < HEAD >\n    < TITLE > Whatever < /TITLE >\n    < /HEAD >\n    < BODY >\n    < APPLET CODE=\"Words.class\" WIDTH=283 HEIGHT=190 >\n    < PARAM NAME=font VALUE=\"Helvetica\" > \n    < /APPLET >\n    < /BODY >\n< /HTML >\n</pre> \n\n<h3> Applet Syntax </h3>\n  <ul>\n    <li> Just like an application an applet is\n   a collection of classes.\n     <li> Rules for execution and definition\n     of classes are the same, except for the driver class\nand reading of html files.\n     <li> You also need to define an associated html file.\n     <li> The browser first reads the html file.\n     <li> Parameters can be passed from the html file to\n     the applet via getParameter(...).\n      <li> After reading the html file, loading the\napplet and executing any static expressions and blocks, then\n the applet is executed.\n     <li> The driver class for an applet is a class\n      which extends applet and is called first by the\n      browser or appletviewer.\n     <li> Typically applets respond to events. We will discuss\n    event-driven programming later, as they have another model\n   of interpretation.\n     <li> Browsers have  security managers which place various\n     restrictions on Applets for obvious reasons. Typically you\n    are not allowed to read or write files.\n     </ul>\n<h3> Applet Methods </h3>\nApplets are event-driven. The most basic event is visiting\nthe html page on which the applet resides. We will discuss\nother events later.\n<ul>\n  <li>void  init() Trigger Event: first visit to html page.\n <br> This is the first method that is executed.\n   Typically one creates all the needed visual objects and other\nobjects here. This method is only executed once and behaves much like a constructor.\n  <li> void start() Trigger Event: every visit to html page.\n <br> This method is called after init and everytime the\n  user revisits the page. This <b> resumes </b> the computation.\n  <li> void stop() Trigger Event: moving off the page.\n <br> The default suspends the applet from running. So this can be\n     executed multiple times, just like start().  \n <li>void destroy() Trigger Event: Browser closes applet.\n<br> This behaves somewhat like a destructor in C++ in that\n     all resources associated with the applet are now released. Before\n    it is executed, stop() is called for the last time.\n</ul>\n\n<h3> Graphic Methods inherited from Component </h3>\n Graphics objects are measured in pixels.\n  <ul>\n  <li>public void paint(Graphics g):\n <br> This method must be executed to render anything on the\n  display. It does the drawing.\n  <li>public void repaint():\n<br> This schedules update(), i.e.\n  puts update into the task list.\n   Multiple calls to repaint() may yield only one call to update().\n  <li>public void update(Graphics g):\n <br> The default method redraws\nthe background and calls paint() on each of the visual components.  By\noverriding this method you can selectively update the display, which is useful\nfor animation.\n</ul>\n<h3> Another Applet Example </h3>\n<pre>\n/*\n   Simple fractal program that illustrates recursion.\n   Recall that the vector <-y,x> is perpendicular to the vector <x,y>.\n   Check the dot product.\n */\n\nimport java.awt.*;\nimport java.applet.*;\n\npublic class Fractal extends Applet {\n\n\tpublic void init()\n\t{\n           resize(600,400);\n\t}\t\n\t\n\tPoint addPoints(Point one, Point two)\n\t{\n\t    return new Point (one.x+two.x,one.y+two.y);\n\t}\n\t\n\tPoint up(Point one, Point two, double scale)\n\t{\n\t     int x = (int) (scale*(two.x-one.x));\n\t     int y = (int) (scale*(two.y-one.y));\n\t     return addPoints(one, new Point(x,y));\n\t}\n\t\n\tPoint rotate(Point one,Point two)\n\t{\n\t    Point p = up(one,two, 1.0/2);\n\t    int y = (int)((one.x - two.x)/4.0 );\n\t    int x = (int) ((two.y- one.y)/4.0);\n\t    return addPoints( p, new Point(x,y));\n\t}   \n\t    \n\tpublic void drawFractal(Point b,Point e, int d, Graphics g)\n\t{\n\t    if (d == 0) g.drawLine(b.x,b.y,e.x,e.y);\n\t      else\n\t     {\n\t        Point next = up(b,e,1.0/4);\n\t        Point mid = rotate(b,e);\n\t        Point last = up(b,e,3.0/4);\n\t        drawFractal(b,next, d-1,g);\n\t        drawFractal(next,mid,d-1,g);\n\t        drawFractal(mid,last,d-1,g);\n\t        drawFractal(last,e,d-1,g);\n\t   \t }\n\t}\n\t\n\tpublic void paint(Graphics g)\n\t{\n\t  g.setColor(Color.blue);\n\t  Point begin = new Point(100,200);\n\t  Point end = new Point(500,200);\n\t  int depth = 4;     // How deep is too deep?\n\t  drawFractal(begin,end,depth, g );\n\t}\n}\n</pre>\n\n</body>\n", "encoding": "ascii"}