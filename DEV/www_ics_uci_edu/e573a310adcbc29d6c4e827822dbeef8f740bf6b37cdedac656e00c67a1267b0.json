{"url": "https://www.ics.uci.edu/~theory/269/160304.html", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n<html>\n<head>\n<title>Theory Seminar, March 4, 2016</title>\n<link rel=\"stylesheet\" href=\"../stylesheet.css\" type=\"text/css\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n\n<body>\n<p><a href=\"/~theory/\"><img src=\"/~theory/logo/CATOC2.jpg\" \nalt=\"ICS Theory Group\"></a></p>\n\n<h2><a href=\"/~theory/269/\">Winter 2016: Theory Seminar</a><br>\nICS, Room 243, 1:00pm</h2>\n\n<hr>\n\n<h2>March 4, 2016:</h2>\n<h1>\nProbabilistic Mutually Exclusive Task Sequencing, with Applications to\nOnline Advertising\n</h1>\n<h2>\nDmitri Arkhipov\n</h2>\n\n<p>One by one solicitation (OBOS) is one of two dominant strategies for\nfilling ad space in Web content on-demand. In OBOS an ad network\nsequentially solicits applicable in-network advertisers in some\norder. Each ad space should fill in no more than 200ms, but both whether\na solicitation is successful, and the magnitude of the round trip\nnetwork delay of the solicitation are random variables. We study the\nproblem of determining an optimal order of solicitation.</p>\n\n<p>We present a dynamic programming (DP) formulation of the problem\nsolvable in time exponential in the number of applicable\nadvertisers. For larger instances we describe an approximate DP (ADP)\nformulation based on the real time dynamic programming (RTDP)\ntechnique. We compare both the DP and ADP to a greedy randomized\nadaptive search procedure (GRASP) local search.</p>\n\n<p>Our ADP formulation requires as a subroutine a tractable algorithm\nfor calculating an upper bound value for our problem. We present a\nrelaxation of our original problem; the solution of our relaxed problem\nis an upper bound for our original problem. We present a\npseudo-polynomial time solution algorithm for our relaxed problem.</p>\n\n<p>(Joint work with John Turner, Michael Dillencourt, and Amelia Regan.)</p>\n\n</body>\n</html>\n\n", "encoding": "ascii"}