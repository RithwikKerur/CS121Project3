{"url": "https://www.ics.uci.edu/~thornton/ics33/ProjectGuide/index.html", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\" />\n\n<title>ICS 33 Summer 2013, Project Guide</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nICS 33 Summer 2013 |\n<a href=\"../index.html\">News</a> |\n<a href=\"../CourseReference.html\">Course Reference</a> |\n<a href=\"../Schedule.html\">Schedule</a> |\n<a href=\"../ProjectGuide\">Project Guide</a> |\n<a href=\"../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>ICS 33 Summer 2013<br />\n   Project Guide</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The projects</p>\n\n<ul>\n  <li><a href=\"Assignment0\">Assignment #0: <i>Setting Up an ICS 33 Development Environment</i></a></li>\n  <li><a href=\"Project1\">Project #1: <i>Easy Money</i></a></li>\n  <li><a href=\"Project2\">Project #2: <i>Eight Line Poem</i></a></li>\n  <li><a href=\"Project3\">Project #3: <i>Careful With That Axe, Eugene</i></a></li>\n  <li><a href=\"Project4\">Project #4: <i>No Line on the Horizon</i></a></li>\n</ul>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Goals</p>\n\n<p>This quarter, you'll work on four programming projects, building on your knowledge of Python programming from prerequisite coursework (ICS 31 and ICS 32, or equivalent work elsewhere).  Collectively, the projects are intended to give you the opportunity to improve your skills in a few ways, with such overall goals as these.</p>\n\n<ul>\n  <li>Deepening your understanding of Python, including a greater familiarity with the inner workings of the language and how to effectively use language features that allow us to express ourselves more succinctly and clearly</li>\n  <li>Beginning your exploration of the more formal underpinnings of <i>computer science</i>, in addition to just building programming skills</li>\n  <li>Embracing automated <i>unit tests</i> as a way to verify that certain parts of your programs are working as they should and are designed in a way that make them useful elsewhere</li>\n  <li>Continuing to develop your sense of what it means to <i>design</i> software, and learning and using techniques that allow you to write much larger programs than you've written previously</i>\n  <li>Using portions of Python's <i>standard library</i>, including some you may not have seen in prior coursework, to allow you to work in more interesting contexts</li>\n  <li>Further improving confidence in your ability to discover how a library behaves through reading tutorials, searching documentation, and experimentation, even for parts of the library not discussed in lecture or the textbook; this is one of the hallmarks of real-world software development</li>\n</ul>\n\n<p>As you might expect from the goals above, all five projects will be written in Python, and each will explore new territory &mdash; new Python language constructs and techniques, new libraries and real-world problem domains, and/or new areas of computer science.  You will surely discover that the projects increase in size and difficulty as the quarter goes on, but if you put the appropriate amount of effort into each of them, get questions answered along the way when you're stuck, and understand afterward what you did and why it worked, you'll find that your skill level will rise steadily to match the rising difficulty.</p>\n\n<p>Some of the projects will include a <i>starting point</i>, in the form of documented code that I provide to you as a means of getting started, though you should expect that not all projects will include one, and that you'll generally be asked to write more code, code with a greater level of complexity, and to write programs that are made up of a progressively larger number of interacting parts as the quarter progresses.  This is consistent with our goal of improving your abilities to write programs both \"in-the-small\" and \"in-the-large,\" developing key skills that will allow you to write solutions to \"real\" problems that you find interesting and exciting.</p>\n\n<p>As always, we don't presume that you've had more experience designing your own programs than you will have gained in prerequisite coursework, so we'll be providing many examples and plenty of help along the way.</p>\n\n<p>By the end of the quarter, when you've successfully worked through all of these projects, you'll be surprised at how much your skills have improved.  And after the course is over, you should be able to tackle a broader collection of problems than ever before.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Evaluation of your work</p>\n\n<p class=\"subtitle\">Evaluation criteria</p>\n\n<p>Each of your projects will be graded using a 30-point scale.  As you work on your projects, it is naturally your primary goal to write a program that behaves as specified, meeting all requirements specified in the project write-up.  However, writing a correctly-working program is not your sole objective.  As you've no doubt already seen in previous coursework &mdash; and we'll see even more clearly as you begin to attack problems that are larger and more complex &mdash; there is a variety of ways to solve a programming problem, but some are more manageable than others.  Some approaches are simpler, some more complex; some yield code that can be read and understood more easily by yourself (and other people!) than others; some are easier to change without requiring changes that cascade throughout your program than others; and so on.  We'd like you to focus on writing programs that tend to be simpler, more readable, and more changeable, and we'll discuss techniques throughout the quarter to achieve those goal.  Since they're an integral part of our work &mdash; they dramatically raise the bar on the size of program you can write &mdash; these qualities are assessed in the grading process.</p>\n\n<p>Each of your projects will be evaluated on the following basis.</p>\n\n<table class=\"normal\">\n  <tr class=\"top\">\n    <td>Quality</td>\n    <td>Value</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>Correctness&nbsp;and&nbsp;Robustness</td>\n    <td>20&nbsp;points</td>\n    <td>When the program is given valid input, does it generate the correct output according to the specification in the project write-up?  Is the output spacing correct, if this is an issue?  In short, does the program do what it's supposed to do for any input that meets the project specifications?  When the program is given unusual or erroneous input, is it handled gracefully?  Programs should not crash in these situations; they should, for example, print informative messages to the user, ask the user for alternative input, or find another way to continue executing (if possible).</td>\n  </tr>\n  <tr>\n    <td>Quality&nbsp;and&nbsp;Design</td>\n    <td>10&nbsp;points</td>\n    <td>Particularly awkward, cumbersome, or inappropriate ways of approaching problems will not score as highly as cleaner, better-designed ones.  Your program should be divided into logical parts, with large functions or classes divided into smaller ones, each encapsulating a single idea or task.  Different kinds of work &mdash; interacting with a user, calculating results &mdash; should be handled in different functions or classes.  Comments should be used to make a program clear to the reader (though it should be noted that good modularity and well-named identifiers make the commenting burden significantly lighter).  Identifier names should be chosen to reflect their role; the names should be meaningful to the reader.  Type annotations and docstrings must be included on every function.</td>\n  </tr>\n  <tr>\n    <td><b>Total</b></td>\n    <td><b>30&nbsp;points</b></td>\n    <td></td>\n  </tr>\n</table>\n\n<p>Some projects may be graded somewhat differently; if so, alterations to this grading scale will be included in the project write-up.</p>\n\n<p class=\"subtitle\">Late work</p>\n\n<p>Things happen and ten-week quarters can be unforgiving.  It's not unreasonable to expect that you may find it difficult to finish one of the projects on time, even if you're on top of things most of the time.  I get emails often from students, saying things like <i>If I just had one more day to work on this, I'd get it done!</i>  On the other hand, being consistently behind is a recipe for struggle in this course; we'll be moving quickly, and it will be progressively harder to catch up the farther behind you get.</p>\n\n<p>The best balance between these two realities is that everyone is allowed to have a tough time with a project once this quarter &mdash; maybe you underestimated the difficulty of an assignment, maybe you have three midterms and a paper due the same day, maybe you have a sudden outside commitment that can't be avoided.  For this reason, I'm offering the following late work policy:</p>\n\n<p><i>Each student is permitted to submit any one project up to 48 hours late, with no questions asked about why and no prior notification required.</i></p>\n\n<p>For the purposes of clarification, here are some additional details about how this policy works:</p>\n\n<ul>\n  <li>You are not required to notify us in advance &mdash; in fact, in all honesty, <i>we'd prefer that you didn't</i>.  (There are a lot of students in this course, so that would represent a lot of extra work for us.)  We know to look for submissions up to 48 hours beyond the deadline of each project.</li>\n  <li>For paired projects, a late submission will apply to both partners and will only be permitted if neither partner has previously submitted a late project.</li>\n  <li>There is a ten-minute grace period after the due date, allowing you time to get your files submitted to Checkmate.  If you submitted your files at 12:08am for an 11:59pm due date, you're fine.  Best not to play with fire, though, if you're already done before 11:59pm; at 12:11am, you'll have used up your one-time extension.  <i>No exceptions!</i></li>\n  <li>The first project that you submit late will fall under this policy; any subsequent project you submit late will not be accepted.  (In other words, you can't submit two projects late, then wait to see which one you get a better score on; we won't be grading the second one.)</li>\n  <li>If any one file is submitted beyond the ten-minute grace period, the entire project is considered late and falls under this policy.</li>\n</ul>\n\n<p>We'll be tracking this throughout the quarter and, of course, will not grant the extension to anyone more than once.  But this should accommodate the unforeseen issues that might otherwise prevent you from finishing a project on time.</p>\n\n<p>Other than this, late work is not accepted in this course.  However, partially complete work can certainly earn partial credit, so if you haven't completed a project and have already used your one-time extension, it's best to submit what you have before the deadline rather than submitting nothing.</p>\n\n<p>Out-of-the-ordinary circumstances sometimes warrant exceptions to this policy; if you are faced with a problem that is preventing you from getting your work done on time, either on a single assignment or chronically, please contact me and we can talk about how best to approach the problem.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Submitting your projects</p>\n\n<p>When you complete each project, you must submit it to us electronically.  Follow <a href=\"SubmittingProjects.html\">this link</a> for a detailed description of how to submit your projects.  Understand that we will only accept projects submitted using the procedure described there; we <i>do not</i> accept printed copies of your projects, nor do we accept them via email <i>under any circumstances</i>.</p>\n\n<p>You are responsible for submitting the version of your project that you want graded.  We will grade the most recent submission that you made before the deadline.  Accidentally submitting the wrong version will not be considered grounds for a regrade.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Development environment</p>\n\n<p>The machines in the ICS labs already have the required development environment for ICS 33 installed on them; for those of you who want to do at least some of your work on a machine of you own, you'll need to make sure to install and configure the necessary software.  Note that the tools we're using this quarter may be slightly different from the tools you used in previous courses, and you'll need to be sure that you upgrade to the right versions before proceeding.</p>\n\n<p>If you're planning on using your own machine for at least some of your work, please refer to <a href=\"Assignment0\">Assignment #0</a> for instructions on getting precisely the right versions of these components installed and configured properly for this course.  While we will try to help if you get stuck, please be aware that we realistically cannot support each of your home installations, so you will be responsible for getting these tools installed and configured, and will need to use the machines in the ICS labs as a fallback if you're unable to do so.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Academic honesty</p>\n\n<p class=\"subtitle\">The policy</p>\n\n<p>As ICS 33 or CSE 43 students, you are expected to know and follow the academic honesty policies of both the Bren School of ICS and the University as a whole.  Please take a few minutes to read the policies, which can be found at <a href=\"http://www.ics.uci.edu/ugrad/policies/#03\">this link</a>.</p>\n\n<p>All of your project work is expected to be completed <i>solely by you (and your partner, on paired projects)</i>.  Worker in larger groups and/or sharing of code between students that are not partners is not permitted.  Note that \"high-level discussion of course material for better understanding\" is permitted and encouraged, but when it comes time to sit down and write code, that is expected to be done by you and you alone.  All submissions are compared to one another using an automated plagiarism detection system.  This system is extraordinarily good at finding similarities between submissions, even when there are superficial differences.  (Note that we also compare your submissions to those submitted during previous quarters whenever one of these assignments was given during a previous quarter, so it is an exceedingly bad idea to turn in, or even refer to, code written by a friend of yours who took the course already.)</p>\n\n<p>Since all of your work is expected to be completed solely by you (and your partner, on paired assignments), you will be held responsible even if you plagiarize only a small portion of someone else's work.</p>\n\n<p>Academic honesty is a two-way street.  Providing your code to other students for them to turn in as their own is not permitted any more than turning in someone else's code.  Resist the temptation to give code to your friends \"for reference.\"  Based on my experience, I can say that your \"friends\" may very well betray you and turn it in, anyway, and then you'll have a lot to answer for.</p>\n\n<p>Naturally, the Midterm and Final Exam are also expected to be individual efforts.  Dishonest behavior during an exam will not be tolerated.</p>\n\n<p>Violators of academic honesty policies are subject to the penalties described in the Bren School of ICS policy.  They are also subject to an immediate course grade of F, and you will not be allowed to drop the course to avoid the grade.  Also be aware that a single documented case of academic dishonesty may preclude you from switching into computing majors, registering for computing minors, joining the ICS Honors Program, and graduating from a computing major with honors.</p>\n\n<p class=\"subtitle\">The lesson</p>\n\n<p>Okay, so the moral of the story is that it's wise to avoid cheating.  I believe that it's relatively rare that students enter a course with the conscious intent to cheat their way through it; why come to UCI if you're not planning to get something out of the coursework?  So why do people cheat every quarter in every course?  The answers vary, but here's the easiest way I can boil down the numerous conversations I've had with students caught cheating in my courses over the years: <i>I fell behind and couldn't figure out how to catch up</i>.  Things happen and ten-week quarters are unforgiving.  You might get sick, you might have issues crop up in your family, you might have misunderstood one of the earlier topics in the course on which later topics dependend, you might have an off-campus job that's demanding too much of your time, you might be trying to decide whether you're on the path you want to be on... Any of those things (and many others) can make it hard to keep up.  You fall a little behind, you fall a little further behind, and pretty soon the situation seems hopeless.  You're under pressure, temptation gets the better of you, and suddenly it seems better to submit someone else's work than to submit nothing.  It's not.</p>\n\n<p>If you feel like you're beginning to slip off course or things are getting beyond your control, the best thing to do is to talk to us <i>sooner rather than later</i>.  We're here to help; we understand.  But the reality of taking large-sized courses at a large-sized institution is that we're not going to know you're in need unless you tell us.  If things are happening in your life, tell us; you don't have to be specific if you're not comfortable with it.  Before the fact, there's often a way to work things out.  After the fact, it's usually too late.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Originally written by Alex Thornton, Summer 2013, with substantial portions adapted from a similar page by Alex Thornton, and with the pair programming section partly adapted from a similar page by Norman Jacobson (which, in turn, was adapted from a similar page by David G. Kay).</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}