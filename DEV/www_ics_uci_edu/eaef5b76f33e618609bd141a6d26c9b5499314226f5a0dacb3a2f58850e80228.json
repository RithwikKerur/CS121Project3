{"url": "https://www.ics.uci.edu/~eppstein/261/f03-outline/16.persistence", "content": "Persistent data structures:\n\n- update operations (change data) and query operations (don't change data)\n- each update creates and returns a new version of the data structure\n- each query can specify a version, search that version instead of new\n\nPartial persistence: only queries can specify version\n\tset of versions has linear structure\nFull persistence: updates can also specify version to modify\n\tset of versions has branching (tree-like) structure\nConfluent persistence: updates may combine information from mult. vers.\n\tset of versions has DAG structure\n\n\nSimple example: fully persistent stack\n    used e.g. in languages where function calls can be preserved as objects\n\t(\"continuations\") and examined or resumed at a later time\n\n    stack version represented by nil or stack object\n    stack object has fields value,next\n\n    def top(version):\n\treturn version.value\n\n    def pop(version):\t# NOTE RETURNS VERSION NOT STACK TOP\n\treturn stack.next\n\n    def push(version,data):\n\treturn stackobject(data,version)\n\nFully persistent priority queue\n(partially persistent = not very different from unpersistent)\n\tuse binary heap structure (balanced binary tree)\n\tBUT use explicit object for each tree node (not array layout)\n\trepresent version => object at root of the tree\n\n\teach update => change single path on tree =>\n\t\tmake new objects for each changed object\n\t\t=> O(log n) time\n\tALSO HIGH SPACE PENALTY, O(LOG N) PER VERSION\n\nMethods for persistence:\n\t(1) create new objects in oriented-structure (above)\n\n\t\tworks when updates have good WORST CASE time\n\t\tcan often handle full dynamism\n\n\t\tmay have to create some new objects even when\n\t\tthey don't change, in order to be able to get\n\t\troot object with correct version\n\t\t(e.g. pq insert low priority item)\n\n\t(2) \"fat objects\":\n\t\teach object in data structure stores history of\n\t\tits own versions\n\n\t\tevery time a query accesses object info it looks\n\t\tat the version history to find what to do\n\n\t\toptimal space (proportional to # changes)\n\t\tvery general (can treat each memory cell as object)\n\t\ttime penalty O(fatness) per memory access\n\n\t\thard to handle search structure for branching history =>\n\t\t\tworks best for partial persistence\n\t\t(version = small integers, use van Emde Boas, O(log log n)\n\t\ttime penalty)\n\n\t(3) let objects get a little fat (O(1) versions each)\n\t\tbut replace them when they get too fat\n\t\t=> can be more space efficient without time penalty\n\n\nPartially persistent search tree:\n\tbase on red-black tree\n\tnote red-black bits can be stored without persistence\n\t\t(used only for non-persistent updates, not queries)\n\n\talso: O(1) rotations per update\n\n\tpartial fatness method:\n\t\teach tree node stores O(1) versions (e.g. <=4)\n\t\tof its left and right child pointers,\n\t\teach version marked with update time\n\n\t\tquery: traverse down tree using version timestamps\n\t\tto tell which left/right pointer to follow\n\n\t\tupdate: perform normal red-black update in\n\t\tmost recent version of tree\n\n\t\twhen update changes red-black bits, just do it\n\t\t(not persistent)\n\t\n\t\twhen update changes left/right pointers of node,\n\t\tmake new version of node\n\t\t\n\t\twhen would make too many versions in same node,\n\t\treplace node by copy, make new version of parent\n\n\ttime per query: O(log n)\n\t\t[same as RB tree + version checking]\n\n\ttime per update: O(log n)\n\t\t[follow path to root rebalancing]\n\n\tamortized space per update: O(1)\n\nWith more work, can be made fully persistent => better fully persistent PQ\n\nAnother application: planar point location\n\tO(n log n) preprocessing\n\tO(n) space\n\tO(log n) query time\n\nGeneral principles:\n\nFull persistence mixes badly with amortization:\ncan repeat same bad update over and over\n\nFor both methods, space = # changes per update,\nso prefer data structures where updates avoid making much change\n", "encoding": "ascii"}