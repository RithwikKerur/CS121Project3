{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/vl/ikmeans_init.tc", "content": "/** @file ikmeans_init.tc\n ** @brief Integer K-Means - Initialization - Definition\n ** @author Andrea Vedaldi\n **/\n\n/*\nCopyright (C) 2007-12 Andrea Vedaldi and Brian Fulkerson.\nAll rights reserved.\n\nThis file is part of the VLFeat library and is made available under\nthe terms of the BSD license (see the COPYING file).\n*/\n\n#include \"random.h\"\n\n/* pairs are used to generate random permutations of data */\ntypedef struct\n{\n  vl_index w;\n  vl_index j;\n} pair_t;\n\nstatic int cmp_pair (void const *a, void const *b)\n{\n  pair_t *pa = (pair_t *) a;\n  pair_t *pb = (pair_t *) b;\n  int d = (int)(pa->w - pb->w) ;\n  if (d) return d ;\n  /* break ties based on index (compensates for qsort not being stable) */\n  return (int)(pa->j - pb->j);\n}\n\nVL_INLINE vl_ikmacc_t calc_dist2 (vl_ikmacc_t const* A, vl_uint8 const* B, vl_size M)\n{\n  vl_ikmacc_t acc = 0 ;\n  vl_uindex i = 0 ;\n  for (i = 0 ; i < M ; ++i) {\n    vl_ikmacc_t dist = (vl_ikmacc_t)A[i] - (vl_ikmacc_t)B[i] ;\n    acc += (vl_uindex)(dist * dist) ;\n  }\n  return acc ;\n}\n\n/** @internal\n ** @brief Helper function to allocate memory for an IKM quantizer\n ** @param f quantizer.\n ** @param M data dimensionality.\n ** @param K number of clusters.\n **/\n\nstatic void alloc (VlIKMFilt *f, vl_size M, vl_size K)\n{\n  if (f->centers) vl_free(f->centers) ;\n  f->K = K ;\n  f->M = M ;\n  f->centers = vl_malloc(sizeof(vl_ikmacc_t) * M * K) ;\n}\n\n\n/** @brief Helper function to initialize the quantizer\n ** @param f IKM quantizer.\n **/\n\nstatic\nvoid vl_ikm_init_helper (VlIKMFilt *f)\n{\n  switch (f-> method) {\n  case VL_IKM_LLOYD: vl_ikm_init_lloyd (f) ; break ;\n  case VL_IKM_ELKAN: vl_ikm_init_elkan (f) ; break ;\n  }\n}\n\n/** @brief Initialize quantizer with centers\n ** @param f IKM quantizer.\n ** @param centers centers.\n ** @param M data dimensionality.\n ** @param K number of clusters.\n **/\n\nVL_EXPORT void\nvl_ikm_init (VlIKMFilt* f, vl_ikmacc_t const * centers, vl_size M, vl_size K)\n{\n  alloc (f, M, K) ;\n  memcpy (f->centers, centers, sizeof(vl_ikmacc_t) * M * K) ;\n  vl_ikm_init_helper (f) ;\n}\n\n/** @brief Initialize quantizer with random centers\n ** @param f IKM quantizer.\n ** @param M data dimensionality.\n ** @param K number of clusters.\n **/\n\nVL_EXPORT void\nvl_ikm_init_rand\n(VlIKMFilt* f, vl_size M, vl_size K)\n{\n  vl_uindex k, i ;\n  VlRand * rand = vl_get_rand() ;\n\n  alloc (f, M, K) ;\n\n  for (k = 0 ; k < K ; ++ k) {\n    for (i = 0 ; i < M ; ++ i) {\n      f-> centers [k * M + i] = (vl_ikmacc_t) (vl_rand_uint32 (rand)) ;\n    }\n  }\n\n  vl_ikm_init_helper (f) ;\n}\n\n/** @brief Initialize with centers from random data\n ** @param f IKM quantizer.\n ** @param data data.\n ** @param M data dimensionality.\n ** @param N number of data.\n ** @param K number of clusters.\n **/\n\nVL_EXPORT void\nvl_ikm_init_rand_data\n(VlIKMFilt* f, vl_uint8 const* data, vl_size M, vl_size N, vl_size K)\n{\n  vl_uindex i, j, k ;\n  VlRand *rand = vl_get_rand () ;\n  pair_t *pairs = (pair_t *) vl_malloc (sizeof(pair_t) * N);\n\n  alloc (f, M, K) ;\n\n  /* permute the data randomly */\n  for (j = 0 ; j < N ; ++j) {\n    pairs[j].j = j ;\n    pairs[j].w = ((vl_int32) vl_rand_uint32 (rand)) >> 2 ;\n  }\n\n  qsort (pairs, N, sizeof(pair_t), cmp_pair);\n\n  /* initialize centers from random data points */\n  for (j = 0, k = 0 ; k < K ; ++ k) {\n\n    /* search for the next candidate which is not a dup */\n    for ( ; j < N - 1 ; ++j) {\n      vl_uindex prevk = 0 ;\n      for (prevk = 0 ; prevk < k ; ++ prevk) {\n        vl_ikmacc_t dist = calc_dist2(f-> centers + prevk * M,\n                                      data + pairs[j].j * M,\n                                      M) ;\n        if (dist == 0)  break ;\n      }\n      if (prevk == k) break ;\n    }\n\n    for (i = 0 ; i < M ; ++ i) {\n      f-> centers [k * M + i] = data [(vl_uint64)pairs[j].j * M + i] ;\n    }\n\n    if (j < N - 1) ++ j ;\n  }\n\n  vl_free (pairs) ;\n  vl_ikm_init_helper (f) ;\n}\n\n/*\n * Local Variables: *\n * mode: C *\n * End: *\n */\n", "encoding": "ascii"}