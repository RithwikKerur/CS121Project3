{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/doc/api/svm-sgd.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n <head>\n  <!-- IE Standards Mode -->\n  <meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"></meta>\n  <!-- Favicon -->\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"icon\"></link>\n  <link href=\"../images/vl_blue.ico\" type=\"image/x-icon\" rel=\"shortcut icon\"></link>\n  <!-- Page title -->\n  <title>VLFeat - Documentation > C API</title>\n  <!-- Stylesheets -->\n  <link href=\"../vlfeat.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <link href=\"../pygmentize.css\" type=\"text/css\" rel=\"stylesheet\"></link>\n  <style xml:space=\"preserve\">\n    /* fixes a conflict between Pygmentize and MathJax */\n    .MathJax .mo, .MathJax .mi {color: inherit ! important}\n  </style>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"doxygen.css\"></link>\n  <!-- Scripts-->\n  <script type=\"text/javascript\" src=\"jquery.js\"></script>\n<script type=\"text/javascript\" src=\"dynsections.js\"></script>\n  <!-- MathJax -->\n  <script xml:space=\"preserve\" type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true,\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n        by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers: { autoNumber: 'AMS' }\n      }\n    });\n  </script>\n  <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" xml:space=\"preserve\" type=\"text/javascript\"></script>\n  <!-- Google Custom Search -->\n  <script xml:space=\"preserve\">\n    (function() {\n    var cx = '003215582122030917471:oq23albfeam';\n    var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n    gcse.src = (document.location.protocol == 'https' ? 'https:' : 'http:') +\n    '//www.google.com/cse/cse.js?cx=' + cx;\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n    })();\n  </script>\n  <!-- Google Analytics -->\n  <script xml:space=\"preserve\" type=\"text/javascript\">\n    var _gaq = _gaq || [];\n    _gaq.push(['_setAccount', 'UA-4936091-2']);\n    _gaq.push(['_trackPageview']);\n    (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n    })();\n  </script>\n </head>\n <!-- Body Start -->\n <body>\n  <div id=\"header-section\">\n    <div id=\"header\">\n      <!-- Google CSE Search Box -->\n      <div class=\"searchbox\">\n        <gcse:searchbox-only autoCompleteMaxCompletions=\"5\" autoCompleteMatchType=\"any\" resultsUrl=\"http://www.vlfeat.org/search.html\"></gcse:searchbox-only>\n      </div>\n      <h1 id=\"id-16\"><a shape=\"rect\" href=\"../index.html\" class=\"plain\"><span id=\"vlfeat\">VLFeat</span><span id=\"dotorg\">.org</span></a></h1>\n    </div>\n    <div id=\"sidebar\"> <!-- Navigation Start -->\n      <ul>\n<li><a href=\"../index.html\">Home</a>\n<ul>\n<li><a href=\"../about.html\">About</a>\n</li>\n<li><a href=\"../license.html\">License</a>\n</li>\n</ul></li>\n<li><a href=\"../download.html\">Download</a>\n<ul>\n<li><a href=\"../install-matlab.html\">Using from MATLAB</a>\n</li>\n<li><a href=\"../install-octave.html\">Using from Octave</a>\n</li>\n<li><a href=\"../install-shell.html\">Using from the command line</a>\n</li>\n<li><a href=\"../install-c.html\">Using from C</a>\n<ul>\n<li><a href=\"../xcode.html\">Xcode</a>\n</li>\n<li><a href=\"../vsexpress.html\">Visual C++</a>\n</li>\n<li><a href=\"../gcc.html\">g++</a>\n</li>\n</ul></li>\n<li><a href=\"../compiling.html\">Compiling</a>\n<ul>\n<li><a href=\"../compiling-unix.html\">Compiling on UNIX-like platforms</a>\n</li>\n<li><a href=\"../compiling-windows.html\">Compiling on Windows</a>\n</li>\n</ul></li>\n</ul></li>\n<li><a href=\"../overview/tut.html\">Tutorials</a>\n<ul>\n<li><a href=\"../overview/frame.html\">Local feature frames</a>\n</li>\n<li><a href=\"../overview/covdet.html\">Covariant feature detectors</a>\n</li>\n<li><a href=\"../overview/hog.html\">HOG features</a>\n</li>\n<li><a href=\"../overview/sift.html\">SIFT detector and descriptor</a>\n</li>\n<li><a href=\"../overview/dsift.html\">Dense SIFT</a>\n</li>\n<li><a href=\"../overview/liop.html\">LIOP local descriptor</a>\n</li>\n<li><a href=\"../overview/mser.html\">MSER feature detector</a>\n</li>\n<li><a href=\"../overview/imdisttf.html\">Distance transform</a>\n</li>\n<li><a href=\"../overview/encodings.html\">Fisher Vector and VLAD</a>\n</li>\n<li><a href=\"../overview/gmm.html\">Gaussian Mixture Models</a>\n</li>\n<li><a href=\"../overview/kmeans.html\">K-means clustering</a>\n</li>\n<li><a href=\"../overview/aib.html\">Agglomerative Infromation Bottleneck</a>\n</li>\n<li><a href=\"../overview/quickshift.html\">Quick shift superpixels</a>\n</li>\n<li><a href=\"../overview/slic.html\">SLIC superpixels</a>\n</li>\n<li><a href=\"../overview/svm.html#tut.svm\">Support Vector Machines (SVMs)</a>\n</li>\n<li><a href=\"../overview/kdtree.html\">KD-trees and forests</a>\n</li>\n<li><a href=\"../overview/plots-rank.html\">Plotting AP and ROC curves</a>\n</li>\n<li><a href=\"../overview/utils.html\">Miscellaneous utilities</a>\n</li>\n<li><a href=\"../overview/ikm.html\">Integer K-means</a>\n</li>\n<li><a href=\"../overview/hikm.html\">Hierarchical integer k-means</a>\n</li>\n</ul></li>\n<li><a href=\"../applications/apps.html\">Applications</a>\n</li>\n<li class='active'><a href=\"../doc.html\">Documentation</a>\n<ul>\n<li><a href=\"../matlab/matlab.html\">MATLAB API</a>\n</li>\n<li class='active' class='activeLeaf'><a href=\"index.html\">C API</a>\n</li>\n<li><a href=\"../man/man.html\">Man pages</a>\n</li>\n</ul></li>\n</ul>\n    </div> <!-- sidebar -->\n  </div>\n  <div id=\"headbanner-section\">\n    <div id=\"headbanner\">\n      <span class='page'><a href=\"../doc.html\">Documentation</a></span><span class='separator'>></span><span class='page'><a href=\"index.html\">C API</a></span>\n    </div>\n  </div>\n  <div id=\"content-section\">\n    <div id=\"content-wrapper\">\n      <div id=\"content\">\n      <!-- <pagestyle href=\"%pathto:root;api/tabs.css\"/> -->\n      <div class=\"doxygen\">\n<div id=\"top\">\n<div id=\"top\">\n<!-- Generated by Doxygen 1.8.7 -->\n  <div id=\"navrow1\" class=\"tabs\">\n    <ul class=\"tablist\">\n      <li><a href=\"index.html\"><span>Main&#160;Page</span></a></li>\n      <li class=\"current\"><a href=\"pages.html\"><span>Related&#160;Pages</span></a></li>\n      <li><a href=\"annotated.html\"><span>Data&#160;Structures</span></a></li>\n      <li><a href=\"files.html\"><span>Files</span></a></li>\n    </ul>\n  </div>\n<div id=\"nav-path\" class=\"navpath\">\n  <ul>\n<li class=\"navelem\"><a class=\"el\" href=\"index.html\">Vision Lab Features Library (VLFeat)</a></li><li class=\"navelem\"><a class=\"el\" href=\"svm.html\">Support Vector Machines (SVM)</a></li>  </ul>\n</div>\n</div><!-- top -->\n<div class=\"header\">\n  <div class=\"headertitle\">\n<div class=\"title\">Stochastic Gradient Descent </div>  </div>\n</div><!--header-->\n<div class=\"contents\">\n<div class=\"toc\"><h3>Table of Contents</h3>\n<ul><li class=\"level1\"><a href=\"#svm-sgd-convergence\">Convergence and speed</a></li>\n<li class=\"level1\"><a href=\"#svm-sgd-bias\">The bias term</a></li>\n<li class=\"level1\"><a href=\"#svm-sgd-starting-iteration\">Adjusting the learning rate</a><ul><li class=\"level2\"><a href=\"#svm-sgd-warm-start\">Warm start</a></li>\n</ul>\n</li>\n<li class=\"level1\"><a href=\"#svm-sgd-details\">Implementation details</a></li>\n</ul>\n</div>\n<div class=\"textblock\"><p>This page describes the <em>Stochastic Gradient Descent</em> (SGD) linear SVM solver. SGD minimizes directly the primal SVM objective (see <a class=\"el\" href=\"svm.html\">Support Vector Machines (SVM)</a>):</p>\n<p class=\"formulaDsp\">\n\\[ E(\\bw) = \\frac{\\lambda}{2} \\left\\| \\bw \\right\\|^2 + \\frac{1}{n} \\sum_{i=1}^n \\ell_i(\\langle \\bw,\\bx\\rangle) \\]\n</p>\n<p>Firts, rewrite the objective as the average</p>\n<p class=\"formulaDsp\">\n\\[ E(\\bw) = \\frac{1}{n} \\sum_{i=1}^n E_i(\\bw), \\quad E_i(\\bw) = \\frac{\\lambda}{2} \\left\\| \\bw \\right\\|^2 + \\ell_i(\\langle \\bw,\\bx\\rangle). \\]\n</p>\n<p>Then SGD performs gradient steps by considering at each iteration one term \\(E_i(\\bw)\\) selected at random from this average. In its most basic form, the algorithm is:</p>\n<ul>\n<li>Start with \\(\\bw_0 = 0\\).</li>\n<li>For \\(t=1,2,\\dots T\\):<ul>\n<li>Sample one index \\(i\\) in \\(1,\\dots,n\\) uniformly at random.</li>\n<li>Compute a subgradient \\(\\bg_t\\) of \\(E_i(\\bw)\\) at \\(\\bw_t\\).</li>\n<li>Compute the learning rate \\(\\eta_t\\).</li>\n<li>Update \\(\\bw_{t+1} = \\bw_t - \\eta_t \\bg_t\\).</li>\n</ul>\n</li>\n</ul>\n<p>Provided that the learning rate \\(\\eta_t\\) is chosen correctly, this simple algorithm is guaranteed to converge to the minimizer \\(\\bw^*\\) of \\(E\\).</p>\n<h1><a class=\"anchor\" id=\"svm-sgd-convergence\"></a>\nConvergence and speed</h1>\n<p>The goal of the SGD algorithm is to bring the <em>primal suboptimality</em> below a threshold \\(\\epsilon_P\\): </p><p class=\"formulaDsp\">\n\\[ E(\\bw_t) - E(\\bw^*) \\leq \\epsilon_P. \\]\n</p>\n<p>If the learning rate \\(\\eta_t\\) is selected appropriately, SGD can be shown to converge properly. For example, <a class=\"el\" href=\"citelist.html#CITEREF_shalev-shwartz07pegasos\">[26]</a> show that, since \\(E(\\bw)\\) is \\(\\lambda\\)-strongly convex, then using the learning rate </p><p class=\"formulaDsp\">\n\\[ \\boxed{\\eta_t = \\frac{1}{\\lambda t}} \\]\n</p>\n<p> guarantees that the algorithm reaches primal-suboptimality \\(\\epsilon_P\\) in </p><p class=\"formulaDsp\">\n\\[ \\tilde O\\left( \\frac{1}{\\lambda \\epsilon_P} \\right). \\]\n</p>\n<p> iterations. This particular SGD variant is sometimes known as PEGASOS <a class=\"el\" href=\"citelist.html#CITEREF_shalev-shwartz07pegasos\">[26]</a> and is the version implemented in VLFeat.</p>\n<p>The <em>convergence speed</em> is not sufficient to tell the <em>learning speed</em>, i.e. how quickly an algorithm can learn an SVM that performs optimally on the test set. The following two observations can be used to link convergence speed to learning speed:</p>\n<ul>\n<li>The regularizer strength is often heuristically selected to be inversely proportional to the number of training samples: \\(\\lambda = \\lambda_0 /n\\). This reflects the fact that with more training data the prior should count less.</li>\n<li>The primal suboptimality \\(\\epsilon_P\\) should be about the same as the estimation error of the SVM primal. This estimation error is due to the finite training set size and can be shown to be of the order of \\(1/\\lambda n = 1 / \\lambda_0\\).</li>\n</ul>\n<p>Under these two assumptions, PEGASOS can learn a linear SVM in time \\(\\tilde O(n)\\), which is <em>linear in the number of training examples</em>. This fares much better with \\(O(n^2)\\) or worse of non-linear SVM solvers.</p>\n<h1><a class=\"anchor\" id=\"svm-sgd-bias\"></a>\nThe bias term</h1>\n<p>Adding a bias \\(b\\) to the SVM scoring function \\(\\langle \\bw, \\bx \\rangle +b\\) is done, as explained in <a class=\"el\" href=\"svm-fundamentals.html#svm-bias\">Adding a bias</a>, by appending a constant feature \\(B\\) (the <em>bias multiplier</em>) to the data vectors \\(\\bx\\) and a corresponding weight element \\(w_b\\) to the weight vector \\(\\bw\\), so that \\(b = B w_b\\) As noted, the bias multiplier should be relatively large in order to avoid shrinking the bias towards zero, but small to make the optimization stable. In particular, setting \\(B\\) to zero learns an unbiased SVM (<a class=\"el\" href=\"svm_8c.html#a1225f0f7f32f8fe5ee4090e77efc4e2c\" title=\"Set the bias multiplier. \">vl_svm_set_bias_multiplier</a>).</p>\n<p>To counter instability caused by a large bias multiplier, the learning rate of the bias is slowed down by multiplying the overall learning rate \\(\\eta_t\\) by a bias-specific rate coefficient (<a class=\"el\" href=\"svm_8c.html#a330b9011895064b930c772c1b28e1d9e\" title=\"Set the bias learning rate. \">vl_svm_set_bias_learning_rate</a>).</p>\n<p>As a rule of thumb, if the data vectors \\(\\bx\\) are \\(l^2\\) normalized (as they typically should for optimal performance), then a reasonable bias multiplier is in the range 1 to 10 and a reasonable bias learning rate is somewhere in the range of the inverse of that (in this manner the two parts of the extended feature vector \\((\\bx, B)\\) are balanced).</p>\n<h1><a class=\"anchor\" id=\"svm-sgd-starting-iteration\"></a>\nAdjusting the learning rate</h1>\n<p>Initially, the learning rate \\(\\eta_t = 1/\\lambda t\\) is usually too fast: as usually \\(\\lambda \\ll 1\\), \\(\\eta_1 \\gg 1\\). But this is clearly excessive (for example, without a loss term, the best learning rate at the first iteration is simply \\(\\eta_1=1\\), as this nails the optimum in one step). Thus, the learning rate formula is modified to be \\(\\eta_t = 1 / \\lambda (t + t_0)\\), where \\(t_0 \\approx 2/\\lambda\\), which is equivalent to start \\(t_0\\) iterations later. In this manner \\(\\eta_1 \\approx 1/2\\).</p>\n<h2><a class=\"anchor\" id=\"svm-sgd-warm-start\"></a>\nWarm start</h2>\n<p>Starting from a given model \\(\\bw\\) is easy in SGD as the optimization runs in the primal. However, the starting iteration index \\(t\\) should also be advanced for a warm start, as otherwise the initial setting of \\(\\bw\\) is rapidly forgot (<a class=\"el\" href=\"svm_8c.html#a11cfeb959efa6d18ced2e55603e32097\" title=\"Set the SVM model. \">vl_svm_set_model</a>, <a class=\"el\" href=\"svm_8c.html#a60d6f706dcde30fea14fbf80714c93ce\" title=\"Set the SVM bias. \">vl_svm_set_bias</a>, <a class=\"el\" href=\"svm_8c.html#a446295ef005b5f19fa3648a199c0254d\" title=\"Set the current iteratio number. \">vl_svm_set_iteration_number</a>).</p>\n<h1><a class=\"anchor\" id=\"svm-sgd-details\"></a>\nImplementation details</h1>\n<dl class=\"section user\"><dt>Random sampling of points</dt><dd></dd></dl>\n<p>Rather than visiting points completely at random, VLFeat SDCA follows the best practice of visiting all the points at every epoch (pass through the data), changing the order of the visit randomly by picking every time a new random permutation.</p>\n<dl class=\"section user\"><dt>Factored representation</dt><dd></dd></dl>\n<p>At each iteration, the SGD algorithm updates the vector \\(\\bw\\) (including the additional bias component \\(w_b\\)) as \\(\\bw_{t+1} \\leftarrow \\bw_t - \\lambda \\eta_t \\bw_t - \\eta_t \\bg_t\\), where \\(\\eta_t\\) is the learning rate. If the subgradient of the loss function \\(\\bg_t\\) is zero at a given iteration, this amounts to simply shrink \\(\\bw\\) towards the origin by multiplying it by the factor \\(1 - \\lambda \\eta_t\\). Thus such an iteration can be accelerated significantly by representing internally \\(\\bw_t = f_t \\bu_t\\), where \\(f_t\\) is a scaling factor. Then, the update becomes </p><p class=\"formulaDsp\">\n\\[ f_{t+1} \\bu_{t+1} = f_{t} \\bu_{t} - \\lambda \\eta_t f_{t} \\bu_{t} - \\eta_t \\bg_t = (1-\\lambda \\eta_t) f_{t} \\bu_{t} - \\eta_t \\bg_t. \\]\n</p>\n<p> Setting \\(f_{t+1} = (1-\\lambda \\eta_t) f_{t}\\), this gives the update equation for \\(\\bu_t\\) </p><p class=\"formulaDsp\">\n\\[ \\bu_{t+1} = \\bu_{t} - \\frac{\\eta_t}{f_{t+1}} \\bg_t. \\]\n</p>\n<p> but this step can be skipped whenever \\(\\bg_t\\) is equal to zero.</p>\n<p>When the bias component has a different learning rate, this scheme must be adjusted slightly by adding a separated factor for the bias, but it is otherwise identical. </p>\n</div></div><!-- contents -->\n        <!-- Doc Here -->\n      </div>\n      </div>\n      <div class=\"clear\">&nbsp;</div>\n    </div>\n  </div> <!-- content-section -->\n  <div id=\"footer-section\">\n    <div id=\"footer\">\n      &copy; 2007-13 The authors of VLFeat\n    </div> <!-- footer -->\n  </div> <!-- footer section -->\n </body>\n <!-- Body ends -->\n</html>\n", "encoding": "ascii"}