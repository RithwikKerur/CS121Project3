{"url": "https://www.ics.uci.edu/~ejw/versioning/arch/0044.html", "content": "<!-- received=\"Thu Jun 06 05:47:00 1996 PDT\" -->\n<!-- sent=\"Thu, 06 Jun 1996 08:46:33 -0400\" -->\n<!-- name=\"David J. Fiander\" -->\n<!-- email=\"davidf@worf.mks.com\" -->\n<!-- subject=\"Re: Versioning Thoughts (in HTML)\" -->\n<!-- id=\"ade2636b310210049776@[128.195.21.209]\" -->\n<!-- inreplyto=\"Versioning Thoughts (in HTML)\" -->\n<title>Archive of Working Group on Versioning and Configuration Management of World Wide Web Content: Re: Versioning Thoughts (in HTML)</title>\n<h1>Re: Versioning Thoughts (in HTML)</h1>\n<b>David J. Fiander</b> (<a href=\"mailto:davidf@worf.mks.com\"><i>davidf@worf.mks.com</i></a>)<br>\n<i>Thu, 06 Jun 1996 08:46:33 -0400</i>\n<p>\n<ul>\n<li> <b>Messages sorted by:</b> <a href=\"index.html#44\">[ date ]</a><a href=\"thread.html#44\">[ thread ]</a><a href=\"subject.html#44\">[ subject ]</a><a href=\"author.html#44\">[ author ]</a>\n<!-- next=\"start\" -->\n<li> <b>Next message:</b> <a href=\"0045.html\">David G. Durand: \"Re: Versioning Thoughts (in HTML)\"</a>\n<li> <b>Previous message:</b> <a href=\"0043.html\">David J. Fiander: \"Re: More versioning thoughts.\"</a>\n<li> <b>Maybe in reply to:</b> <a href=\"0040.html\">David G. Durand: \"Versioning Thoughts (in HTML)\"</a>\n<!-- nextthread=\"start\" -->\n<li> <b>Next in thread:</b> <a href=\"0045.html\">David G. Durand: \"Re: Versioning Thoughts (in HTML)\"</a>\n<!-- reply=\"end\" -->\n</ul>\n<hr>\n<!-- body=\"start\" -->\n<pre>\n&gt; &lt;p&gt;My personal agenda is that I'm interested in version control as a way to\n&gt; relax concurrency to allow write-anytime collaboration. I'm also\n&gt; interested in automatic merge tools that will let users manage such\n&gt; collaboration, and finding fundamental models of versioning that capture\n&gt; the widest range of possible editing behaviours, as a basis for\n&gt; implementing generalized systems. I am personally convinced that this is\n\nThis sounds good.  I hope that we manage to come up with\nsomething that is implementable and satisfies, or at least forms\na basis for, your requirements.\n\n&gt; &lt;p&gt;Accordingly, I believe that version identifiers should be opaque to\n&gt; editing systems, and managed by servers.  The paper on \"VTML\" that Fabio\n&gt; Vitali and I wrote (referenced in the page for this group) identify a few\n&gt; key notions for version management on the web.\n\nI agree.  At the bottom, there will be something stored in a\ntraditional VCS, and they all seem to use different notations for\nidentifying versions, including arbitrary strings defined by the\nuser (that is, RCS labels).\n\n&gt; &lt;p&gt;Use of versioning operation should not depend on operations such as\n&gt;LOCK and\n&gt; UNLOCK. I at least, am taking great pains to avoid the logical or\n&gt; practical necessity for such operations by making the free creation of\n&gt; variant versions (and their later merging, if desired) as easy as possible.\n&gt; I'd like it if we can find a specification for lock and Unlock such that a\n&gt; server like the one I am implementing will be able to work with editors\n&gt; that expect LOCK and UNLOCK.\n\nI sort of agree and disagree.  I feel that we need to define LOCK\nand UNLOCK methods, but state that it's up to the server to\ndecide whether or not they're required before editting, or\nPUTing.  This allows for a strict locking protocol for those\nsites that feel it's necessary while leaving things open for\nlooser policy.\n\n&gt; &lt;p&gt;It should be a server decision as to what version identifier should be\n&gt; assigned to a document revision when it is submitted.  This follows from\n&gt; the opaqueness of version parameters in URLs.  It should be a server\n&gt; decision (not mandated by the protocol) whether to accept a new revision.\n\nI agree on both points, but reserve the right to change my mind.\nThe protocol will certainly not specify that the server MUST\naccept a new revision.  I can think of at least a dozen reasons,\nall policy-based, why a server might refuse a \"check-in\"\noperation.\n\n&gt; It should also be a server decision whether or not the \"current version\" is\n&gt; changed when a version is submitted.  Setting the current version should\n&gt; also be an available operation, subject to server-specific access and\n&gt; configuration policy.  I don't object to servers deciding to enforce a\n\nI agree again.  Having the default page change whenever somebody\nchecks something in may or may not be a good thing, but it is,\nagain, a policy decision.\n\n&gt; &lt;p&gt;I'd like to discuss notions such as VTML as part of the overall\n&gt; approach to versioning on the web, thus creating a tripartite front for\n&gt; proper support: &lt;tt&gt;Content-type:&lt;/tt&gt;, HTTP protocol, and URL format.\n&gt; These correspond to the fundamental versioning notions of naming, access\n&gt; control, and differencing.\n\nI've looked at the VTML paper, but can't say, right now, any more\nthan that.  I will certainly not accept any attempt to specify\nVTML as the storage format.  The server may accept VTML as a\nformat for updating pages, and it may serve VTML to\nversioning-aware clients, for display purposes, but how the\nserver stores things is private.\n\n- David\n</pre>\n<!-- body=\"end\" -->\n<hr>\n<p>\n<ul>\n<!-- next=\"start\" -->\n<li> <b>Next message:</b> <a href=\"0045.html\">David G. Durand: \"Re: Versioning Thoughts (in HTML)\"</a>\n<li> <b>Previous message:</b> <a href=\"0043.html\">David J. Fiander: \"Re: More versioning thoughts.\"</a>\n<li> <b>Maybe in reply to:</b> <a href=\"0040.html\">David G. Durand: \"Versioning Thoughts (in HTML)\"</a>\n<!-- nextthread=\"start\" -->\n<li> <b>Next in thread:</b> <a href=\"0045.html\">David G. Durand: \"Re: Versioning Thoughts (in HTML)\"</a>\n<!-- reply=\"end\" -->\n</ul>\n", "encoding": "ascii"}