{"url": "https://www.ics.uci.edu/~majumder/VC/211HW3/vlfeat/make/dist.mak", "content": "# file: dist.mak\n# description: Build VLFeat DLL\n# author: Andrea Vedaldi\n\n# Copyright (C) 2007-12 Andrea Vedaldi and Brian Fulkerson.\n# All rights reserved.\n#\n# This file is part of the VLFeat library and is made available under\n# the terms of the BSD license (see the COPYING file).\n\nclean: dist-bin-clean\narchclean: dist-bin-archclean\ndistclean: dist-bin-distclean dist-src-distclean\ninfo: dist-bin-info dist-src-info\n\n# --------------------------------------------------------------------\n#                                                        Configuration\n# --------------------------------------------------------------------\n\nGIT ?= git\nRSYNC ?= rsync\nVER ?= $(shell cat vl/generic.h | sed -n \\\n    's/.*VL_VERSION_STRING.*\\\"\\([0-9.]*\\)\\\".*/\\1/p')\nTMPDIR ?= /tmp\n\nNAME := vlfeat\nDIST := $(NAME)-$(VER)\nBINDIST := $(DIST)-bin\nHOST := vlfeat-admin:vlfeat.org/sandbox\n\n\n# --------------------------------------------------------------------\n#                                                 Build source package\n# --------------------------------------------------------------------\n\n.PHONY: dist-src, dist-src-clean, dist-src-info\nno_dep_targets += dist-src, dist-src-clean, dist-src-info\n\ndist-src:\n\tCOPYFILE_DISABLE=1 \\\n\tCOPY_EXTENDED_ATTRIBUTES_DISABLE=1 \\\n\t$(GIT) archive --prefix=$(NAME)-$(VER)/ v$(VER) | gzip > $(DIST).tar.gz\n\ndist-src-distclean:\n\trm -f $(DIST).tar.gz\n\ndist-src-info:\n\t$(call echo-title,Source distribution)\n\t$(call echo-var,DIST)\n\t@echo\n\n# --------------------------------------------------------------------\n#                                                 Build binary package\n# --------------------------------------------------------------------\n\n# dist-bin-release: Rebuild binaries with optimizations and no debug\n#   symbols.\n#\n# dist-bin-commit: Creates a new vXX.XX.XX-ARCH branch with the\n#   binaries and pushes it to the remote called bin.\n#\n# dist-bin-commit-common: Creates a new vXX.XX.XX-common branch with\n#   the architecture-independent parts of VLFeat.\n#\n# dist-bin-merge: Creates a new vXX.XX.XX-bin branch by merging the\n#   architecture specific binary branches and adding additional\n#   files. It then pushes the result to the remote called bin.\n#\n# dist-bin: Packs the commit remotes/bin/vXX.XX.XX-bin.\n#\n# dist-src: Packs the commit vXX.XX.XX.\n\n.PHONY: dist-bin, dist-bin-release, dist-bin-commit, dist-bin-info\n.PHONY: dist-bin-clean, dist-bin-archclean, dist-bin-distclean\nno_dep_targets += dist-bin dist-bin-release dist-bin-commit dist-bin-info\nno_dep_targets += dist-bin-clean dist-bin-archclean dist-bin-distclean\n\ndist-bin-release: tmp-dir=$(TMPDIR)/tmp-$(NAME)-$(VER)-$(ARCH)\ndist-bin-release:\n\t@echo Cloning VLFeat ;\n\ttest -e \"$(tmp-dir)\" || $(GIT) clone --no-checkout . \"$(tmp-dir)\" ; \\\n\t$(GIT) --git-dir=\"$(tmp-dir)/.git\" config remote.bin.url $$($(GIT) config --get remote.bin.url) ; \\\n\t$(GIT) --git-dir=\"$(tmp-dir)/.git\" config remote.origin.url $$($(GIT) config --get remote.origin.url) ;\n\t@echo Checking out v$(VER) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) fetch origin --tags v$(VER) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) fetch origin v$(VER) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) checkout v$(VER) ;\n\techo Rebuilding binaries for release ;\n\tmake -C \"$(tmp-dir)\" ARCH=$(ARCH) all\n\ndist-bin-commit: tmp-dir=$(TMPDIR)/tmp-$(NAME)-$(VER)-$(ARCH)\ndist-bin-commit: branch=v$(VER)-$(ARCH)\ndist-bin-commit: dist-bin-release\n\t@echo Setting $(branch) to v$(VER) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) branch -f $(branch) v$(VER) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) checkout $(branch) ;\n\t@echo Adding binaries to $(branch) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) add -f $(arch_bins) ;\n\tcd \"$(tmp-dir)\" ; \\\n\tif test -z \"$$($(GIT) diff --cached)\" ; \\\n\tthen \\\n\t  echo No changes to commit ; \\\n\t  exit 1 ; \\\n\telse  \\\n\t  echo Commiting changes ; \\\n\t  $(GIT) commit -m \"$(ARCH) binaries for version $(VER)\" ; \\\n\t  echo Pushing $(branch) to the server ; \\\n\t  $(GIT) push -v --force bin $(branch):refs/heads/$(branch) ; \\\n\tfi\n\ndist-bin-commit-common: tmp-dir=$(TMPDIR)/tmp-$(NAME)-$(VER)-$(ARCH)\ndist-bin-commit-common: branch=v$(VER)-common\ndist-bin-commit-common: dist-bin-release\n\t@echo Building doc\n\tmake -C \"$(tmp-dir)\" ARCH=$(ARCH) doc-deep\n\t@echo Setting up $(branch) to v$(VER) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) branch -f $(branch) v$(VER)\n\tcd \"$(tmp-dir)\" ; $(GIT) checkout $(branch)\n\t@echo Adding products to $(branch)\n\tcd \"$(tmp-dir)\" ; $(GIT) add -f $(m_lnk)\n\tcd \"$(tmp-dir)\" ; $(GIT) add -f $$(find doc \\\n\t-name '*.html' -or -name '*.jpg' -or -name '*.png' -or -name '*.css')\n\tcd \"$(tmp-dir)\" ; \\\n\tif test -z \"$$($(GIT) diff --cached)\" ; \\\n\tthen \\\n\t  echo No changes to commit ; \\\n\t  exit 1 ; \\\n\telse \\\n\t  echo Commiting changes ; \\\n\t  $(GIT) commit -m \"common products for $(VER)\" ; \\\n\t  echo Pushing $(branch) to the server ; \\\n\t  $(GIT) push -v --force bin $(branch):refs/heads/$(branch); \\\n\tfi\n\ndist-bin-merge: tmp-dir=$(TMPDIR)/tmp-$(NAME)-$(VER)-merge\ndist-bin-merge: branch=v$(VER)-bin\ndist-bin-merge:\n\t@echo Cleaning up merge directory\n\trm -rf \"$(tmp-dir)\"\n\t@echo Cloning VLFeat\n\t$(GIT) clone --no-checkout . \"$(tmp-dir)\" ;\n\t$(GIT) --git-dir=$(tmp-dir)/.git config remote.bin.url $$($(GIT) config --get remote.bin.url) ;\n\t$(GIT) --git-dir=$(tmp-dir)/.git config remote.origin.url $$($(GIT) config --get remote.origin.url) ;\n\techo Creating or resetting and checking out branch $(branch) to v$(VER);\n\tcd \"$(tmp-dir)\" ; $(GIT) fetch origin --tags v$(VER);\n\tcd \"$(tmp-dir)\" ; $(GIT) fetch origin v$(VER) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) checkout v$(VER) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) branch -f $(branch) v$(VER) ;\n\tcd \"$(tmp-dir)\" ; $(GIT) checkout $(branch) ;\n\tcd \"$(tmp-dir)\" ; \\\n\tMERGE_BRANCHES=; \\\n\tFETCH_BRANCHES=; \\\n\tfor ALT_ARCH in common maci maci64 glnx86 glnxa64 win32 win64 ; \\\n\tdo \\\n\t  MERGE_BRANCH=v$(VER)-$$ALT_ARCH ; \\\n\t  MERGE_BRANCHES=\"$$MERGE_BRANCHES bin/$$MERGE_BRANCH\" ; \\\n\t  FETCH_BRANCHES=\"$$FETCH_BRANCHES $$MERGE_BRANCH:remotes/bin/$$MERGE_BRANCH\" ; \\\n\tdone ; \\\n\techo Fetching binaries ; \\\n\techo $(GIT) fetch -f bin $$FETCH_BRANCHES ; \\\n\t$(GIT) fetch -f bin $$FETCH_BRANCHES ; \\\n\techo merging $$MERGE_BRANCHES ; \\\n\t$(GIT) merge -m \"Merged binaries $$MERGE_BRANCHES\" $$MERGE_BRANCHES ;\n\techo Pushing to server the merged binaries ; \\\n\tcd \"$(tmp-dir)\" ; $(GIT) push -v --force bin $(branch):refs/heads/$(branch) ;\n\ndist-bin: branch=v$(VER)-bin\ndist-bin:\n\techo Fetching binaries ; \\\n\t$(GIT) fetch -f bin $(branch):remotes/bin/$(branch) ; \\\n\techo Creating archive ; \\\n\tCOPYFILE_DISABLE=1 \\\n\tCOPY_EXTENDED_ATTRIBUTES_DISABLE=1 \\\n\t$(GIT) archive --prefix=$(NAME)-$(VER)/ bin/v$(VER)-bin | gzip > $(BINDIST).tar.gz\n\ndist-bin-clean:\n\ndist-bin-archclean:\n\trm -rf $(TMPDIR)/tmp-$(NAME)-$(VER)-$(ARCH)\n\ndist-bin-distclean:\n\trm -rf $(TMPDIR)/tmp-$(NAME)-$(VER)-*\n\trm -f $(BINDIST).tar.gz\n\ndist-bin-info:\n\t$(call echo-title,Binary distribution)\n\t$(call dump-var,arch_bins)\n\t$(call dump-var,comm_bins)\n\t$(call echo-var,NAME)\n\t$(call echo-var,BINDIST)\n\t@echo\n\n# --------------------------------------------------------------------\n#                                             Post packages on the web\n# --------------------------------------------------------------------\n\n.PHONY: post, post-doc, post-doc-from-dist\n\npost:\n\t$(RSYNC)                                                     \\\n\t    -aP $(DIST).tar.gz $(BINDIST).tar.gz                     \\\n\t    $(HOST)/download\n\nrsync-doc = \\\n\t$(RSYNC)                                                     \\\n\t      --recursive                                            \\\n\t      --perms                                                \\\n\t      --group=lab                                            \\\n\t      --chmod=Dg+s,g+w,o-w                                   \\\n\t      --exclude=build                                        \\\n\t      --exclude=download                                     \\\n\t      --delete                                               \\\n\t      --progress                                             \\\n\npost-doc:\n\t$(rsync-doc) doc/ $(HOST)\n\npost-doc-from-dist: dist-bin\n\ttar xzvf $(BINDIST).tar.gz -C $(TMPDIR)/ $(NAME)-$(VER)/doc/\n\t$(rsync-doc) $(TMPDIR)/$(NAME)-$(VER)/doc/ $(HOST)\n\n# Local variables:\n# mode: Makefile\n# End:\n", "encoding": "ascii"}