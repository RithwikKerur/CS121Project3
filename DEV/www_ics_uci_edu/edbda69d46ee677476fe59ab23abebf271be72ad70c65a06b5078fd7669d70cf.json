{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/lab7.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, November 10, 2005 3:43 AM\" />\n<TITLE>Lab Assignment 7</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D22A250A\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY &bull; FALL 2009</font></P>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Lab Assignment 7 </B></FONT></P>\n<P><BR />\n  <FONT FACE=\"Garamond\" SIZE=4>This assignment is due at the end of lab on Friday, November 13. This lab is a little shorter than usual since Wednesday is a holiday.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Choose a partner for this assignment, someone\nyou haven&#39;t worked with already.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(a)</B> Do exercises 29.3.6 and 29.3.7.\n Then choose two of 29.3.8, 29.3.9, and 29.3.10.  When these exercises ask\nfor the abstract running time, they mean the O-notation of the algorithm.\n When they ask you which representation is preferable, consider also binary\nsearch trees.  When they ask why one representation is better than another,\nyou just need to give a sentence or so comparing the performance of the\nalternatives.  Just put those answers in a comment in your definitions file.</FONT> <FONT FACE=\"Garamond\"> [Some printed versions of\nthe text may number some of these exercises as 29.4.x; if in doubt, refer\nto the on-line version.]</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Do exercises 30.1.1, 30.1.2, 30.2.1, and 30.2.2.\n Then do exercises 31.3.3 and 31.3.4.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Choose one of the three sections in Chapter\n32 and do all the exercises in that section.  (If you choose 32.1, be aware that\nthe </FONT><FONT FACE=\"Courier New, Courier, monospace\">gensym</FONT><FONT FACE=\"Garamond\" SIZE=4> function referred to in exercise 32.1.3\nrequires a different language level: \"Pretty Big,\" which is part of a set of\nlanguage levels called \"PLT.\"  \"Pretty Big\" combines the \"Advanced Student\"\nversion of Scheme with some aspects of the more professional versions of Scheme\nsupported by DrScheme.)</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Collect these definitions and submit them\nas usual via Checkmate.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b)</B> At </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants4.scm\">http://www.ics.uci.edu/~kay/scheme/restaurants4.scm</A></FONT><FONT FACE=\"Garamond\" SIZE=4>\nyou will find a version of the restaurants program that implements menus\nand also reading and writing restaurant collections from a file.  Make sure\nyour language level is set to Intermediate Student with Lambda; you&#39;ll also\nneed to download and install a new teachpack, <A HREF=\"http://www.ics.uci.edu/~kay/scheme/simple-file-io.ss\">simple-file-io.ss</A>.</FONT> <FONT FACE=\"Garamond\" SIZE=4> (Remember to right- or control-click on the link and download the file, saving it in the same folder that contains your code.) </FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Download this program and run it, creating\nrestaurants and saving them when you quit.  Run it again, starting with\nthe saved file.  (You can restart the program in the same interactions window\nin DrScheme with another call to </FONT><FONT FACE=\"Courier New\">(restaurants\n&#39;x)</FONT><FONT FACE=\"Garamond\" SIZE=4>.)  Take a little time to look\nover the code, most of which should be familiar.  If your DrScheme window\ndoesn&#39;t show the high-level program profile in a column at the right,\nselect Show Program Contour from the View menu.  You&#39;ll see large section\nheadings in that view (which you can create with Insert Large Letters from\nthe Special menu).</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.1)</B>  Modify this program by adding\nthe search-by-cuisine and search-by-menu-word menu commands you wrote in\nLab Assignment 5.  (You may use either partner&#39;s code from\nthat assignment, or you may reimplement it from scratch.)</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.2)</B>  Add a menu command to add new\ndishes to a restaurant currently in the collection.  It should prompt for\nthe restaurant&#39;s name, print a message if that name isn&#39;t found,\nand otherwise prompt the user for additional dishes to add to the named\nrestaurant&#39;s menu.  Once you&#39;ve done this, refine the dish-adding\nprocess as follows:  If a dish being added has the same name as a dish already\non that menu, then just replace the old price with the new price.  This\nshould happen when you&#39;re initially adding dishes as well as when you&#39;re\nadding new dishes later; use the same code.  This also means (automatically)\nthat no menu will have two dishes with the same name.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b.3)</B>  Add a menu command to import\nanother restaurant collection from another file, adding all the restaurants\nin that file to the main collection.  Re-use the file-reading code where\npossible.  After you&#39;ve done the basic task of adding all the imported\nrestaurants to the collection, go back and implement this refinement:  If\na restaurant you&#39;re adding has the same name and phone number as a restaurant\nthat&#39;s already in the collection, then just add the new restaurant&#39;s\ndishes to the existing record for that restaurant.  (Add uniquely, of\ncourse, as in the previous part.) Do this same adding of restaurants that are unique by name-plus-phone for restaurants that the user adds manually.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>You&#39;ll note that with interactive interfaces,\neven text-based ones, handling testing isn&#39;t as easy as it is when we&#39;re\njust using the interpreter.  Now that we have files, so we can save restaurant\nset-ups, it&#39;s a little easier again.  But of course this doesn&#39;t\nmean that testing is no longer important.  It&#39;s just another illustration\nthat interactivity adds an extra layer of complexity and that it&#39;s important\nto build and test our model (the underlying restaurant, menu, dish, and\ncollection classes in this case) independently of the view and controller\n(the interface).</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>You&#39;ll also note as you&#39;re doing this\nthat you need to work with file-handling functions that are unfamiliar.\n You have a description of the functions (and more detail is available in\nthe DrScheme Help Desk, although looking there isn&#39;t necessary and if\nyou do look, you have to change the language for the help desk window to\n&quot;Pretty Big&quot; under PLT instead of Intermediate Student); you also\nhave some working code to use as an example.  This is all you&#39;ll get\n(aside from a little assistance from your instructional staff, but you wouldn&#39;t\nhave that in the real world); the thing is, it's <em>more</em> than you'd get in a similar situation in the real world, so learning how to make practical use of the information you do have is an important skill.  One of the nice things about the Scheme we&#39;ve\ndone so far is that we could understand everything &quot;down to the ground,&quot;\nevaluating everything in terms of the basic rules of substituting values\nfor expressions over and over.  But as we learn how to handle other interfaces\n(as we did with the graphics earlier, as we&#39;re doing here with external\nfiles, and as we could do with many other kinds of interfaces), we don&#39;t get to look\nunder the hood.  We have to use the API (the application programming interface&mdash;the\nbehavior, the contract and purpose of the functions, not their definitions),\nfitting the functions we&#39;re given together like pieces of a jigsaw puzzle\nto get the result we need.  Sometimes this involves taking code that we\nknow works for a similar task, duplicating it, and modifying the copy to\nfit the new circumstances (and then perhaps abstracting and refactoring\nthe new code with the original, if they&#39;re in the same program).  Becoming\ncomfortable working with APIs is a crucial skill, since software is rarely\nbuilt today without using some pre-existing library.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Turn in your modified program via Checkmate.</FONT></P>\n\n\n<!--\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(c)</B>  At </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants5.scm\">http://www.ics.uci.edu/~kay/scheme/restaurants5.scm</A></FONT><FONT FACE=\"Garamond\" SIZE=4>\nis a version of the restaurants program that has a web interface.  Download\nit and run it; this program needs the Advanced Student level and the </FONT><FONT FACE=\"Courier New\">servlet.ss</FONT><FONT FACE=\"Garamond\" SIZE=4>\nteachpack from DrScheme (as documented in the comment at the top of the\nprogram).  Then take some time to look over the code to get an idea of how\nit&#39;s organized.  The restaurant and collection code should be completely\nfamiliar; the main-menu-handling code should have some familiar aspects;\nthe form-handling code should be completely foreign.  That&#39;s okay for\nnow.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(c.1)</B>  Modify this program to read\nand write restaurant collections from a file.  To make it easier, read and\nwrite from a file named </FONT><FONT FACE=\"Courier New\">Restaurants.txt</FONT><FONT FACE=\"Garamond\" SIZE=4>.\n Rather than asking the user whether to start from an empty file or an existing\none, just use </FONT><FONT FACE=\"Courier New\">(file-exists? &quot;Restaurants.txt&quot;)</FONT><FONT FACE=\"Garamond\" SIZE=4>\nto see whether it&#39;s already there.  Note that for this to work simply,\nthe file containing your Scheme definitions and your Restaurants.txt file\nmust both be in the same folder.  Note too that in Advanced Student Scheme,\nyou need to use the <A HREF=\"http://www.ics.uci.edu/~kay/scheme/advanced-file-io.ss\">advanced-file-io.ss</A>\nteachpack instead of simple-file-io.ss.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(c.2)</B>  Add the ability to search for\na restaurant by cuisine.  This will require following the copy-and-modify\nmethodology described above; look for the code that handles searching by\nname, then copy and adapt it to handle searching by cuisine.  Here is a\nbrief catalog of the main steps:  Define another button name constant for\nsearching by cuisine; copy and modify the search-by-name code in </FONT><FONT FACE=\"Courier New\">handle-main-menu</FONT><FONT FACE=\"Garamond\" SIZE=4>;\ncopy and modify the search-by-name lines in </FONT><FONT FACE=\"Courier New\">make-main-menu-form</FONT><FONT FACE=\"Garamond\" SIZE=4>;\ncreate a </FONT><FONT FACE=\"Courier New\">collection-search-by-cuisine</FONT><FONT FACE=\"Garamond\" SIZE=4>\nfunction, or better yet update the collection code to use high-order functions.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Turn your modified program in via Checkmate.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>The point of these web-based exercises is\nto give you some real-world context for your programs and to illustrate\nthat the underlying model--the definitions and operations on restaurants\nand collections--are independent of the user interface.  Our main goal is\nnot to train you as web programmers; we&#39;re not going to ask questions\non the tests about the APIs for web interaction.  For some extra credit,\nthough, go ahead and (i) put high-order functions into this version of the\ncollection class, (ii) implement menus, including allowing the user to add\ndishes and also to remove them, (iii) allow the user to specify what file\nto read from and write to, using </FONT><FONT FACE=\"Courier New\">get-file</FONT><FONT FACE=\"Garamond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\">put-file</FONT><FONT FACE=\"Garamond\" SIZE=4>\nas in the previous program, (iv) implement searching dishes for a word,\nas in last week&#39;s homework. </FONT></P>\n-->\n<FONT FACE=\"Garamond\" size=4\"><B>(c)</B>  This week is an excellent time to shore up\nyour understanding of material from previous weeks that you're still not sure about.\nBefore we delve into what follows, take some time to fill in or reinforce your knowledge\nfrom past weeks by reworking any problems from previous homeworks or labs that you or\nyour partner struggled with or never finished.</FONT>\n<P>\n  <FONT FACE=\"Garamond\" size=4\">The goal here, as in any lab assignment, is to do this work in pairs, and to ensure\n    that both partners are clear on how you arrived at a new solution.  It's best to pick\n    a few problems that each of you struggled with, so that both partners benefit from the\n    time spent, but if one partner feels more confident, it's preferable for that partner\n    to help raise the other one's confidence.  Remember, again, that you'll be each other's\nclassmates for the next four years, so each of you benefits from other students' strengths.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" size=4\">Collect your definitions into one or more .scm files.  You may find it necessary to\nspread the definitions into multiple .scm files, since different homeworks required\ndifferent language levels and/or different teachpacks.  Include a comment at the top of\neach file, indicating which language and which teachpacks (if any) are required to execute\nthe code within.  There are no explicit requirements about how many problems to submit,\nbut you can expect that we'll take your diligence into account  if you redo many problems that you had trouble with, and if you help your partner\nto do the same.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" size=4\">Submit your reworked definitions to Checkmate.</FONT></P>\n\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(d)</B>  For extra credit, do exercises\n25.2.1 through 25.2.6.  You&#39;ll see this material again in ICS H23.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>For more extra credit, do exercises 27.1.1,\n  27.1.2, 27.1.4, and/or 27.1.5.  The code in the book uses the <CODE>draw.ss</CODE> teachpack, but you'll want to use <CODE>image.ss</CODE> (which we used earlier this\n  quarter) instead.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>For still more extra credit, enhance the restaurant\n  program in some more interesting ways.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>For extra credit, do exercises\n  29.3.14 and 29.3.15.  Also try 31.3.6, 31.3.7, and 31.3.8.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(e)</B>  Remember that each partner must\ncomplete a partner evaluation form via the Survey Tool on eee.uci.edu.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments by David\nG. Kay from Fall 2001; modified by David G. Kay, Fall 2004, Fall 2005, Fall 2008, Fall 2009.</FONT></P>\n<HR />\n<FONT FACE=\"Garamond\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Garamond\">\n<!-- #BeginDate format:fcAm1a -->Friday, November 13, 2009 8:50 PM<!-- #EndDate -->\n</font></span></BODY>\n</HTML>", "encoding": "ascii"}