{"url": "https://www.ics.uci.edu/~kay/courses/i41/hw/hw8.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Tuesday, November 22, 2005 5:38 AM\" />\n<TITLE>Eighth Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D21ADA26\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001 by David G. Kay.  All rights reserved.\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT size=\"2\" FACE=\"Goudy Old Style\">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\" SIZE=6><B>Eighth Homework </B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">This assignment is due at the start of lab on Monday, November 14.</FONT></P>\n<!--\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(1)  </B>Chapter 25 of the HtDP text makes\na distinction between two types of recursive functions.  All recursive functions\ncall themselves; that&#39;s what recursive means.  The book uses the term\n&quot;structural recursion&quot; for recursion that follows the pattern\nof a data structure definition, like nearly all of the functions we&#39;ve\nbeen writing.  Not all problems can be solved this way, and some that can\nbe solved this way can be solved better&mdash;in a way that runs faster, uses\nless memory, consumes less power&mdash;using other approaches.  The book uses\nthe term &quot;generative recursion&quot; for recursion\nthat follows the pattern of a problem, generating new problems at each step.\n The quicksort algorithm they cover in this chapter is an example of this\nkind of recursion.  The main point here is that not all algorithms follow\nthe pattern of a data definition; coming up with new algorithms using generative\nrecursion doesn&#39;t follow an easy formula.  Happily, though, we&#39;re\nnot often called on to do that.  Chapters 26, 27, and 28 continue this theme.\n You should read through section 27.2 (skipping the rest of Chapter 27 and\nall of Chapter 28, which you&#39;ll return to in ICS 23).  Do exercises 25.2.3,\n25.2.4, and 25.2.5.</FONT></P>\n-->\n<P><FONT FACE=\"Goudy Old Style\"><B>(1) </B>Continue your exercise from this past week's\n  lab of going back and doing problems that you've found to be a struggle.  Be sure that\n  you can do these problems on your own without your notes; this will be good practice\n  for the final exam, and will shore up your skills for what is to follow.  Of course,\n  you should always feel free to ask us, in person or by email, if there are problems\n  that continue to be vexing; don't wait until the end of the quarter to get these\n  kinds of questions answered.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(2) </B>Consider in particular these two activities:</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(2.1) </B>Read some Scheme code\u2014like the InfxTunes program and the various versions of the restaurants program\u2014to become more familiar with how they're organized and how the code works. Concentrate more on the model part (how the programs represent and manipulate the data internally) than on the view or user interface (printing menus, reading user input, reading and writing with files). You should understand what the interface parts are doing, but we're not going to ask you to reproduce them on exams. On the other hand, exams <em>will</em> cover the model part, the data structures and algorithms, topics like lists, lists containing structures (containing other lists or structures), binary search trees, high-order functions like map, filter, and foldr, and the performance characteristics (O-notations) of the associated algorithms.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(2.2) </B>For any topics you'd like a stronger background in, go through some of the Worked Exercises on those topics in the textbook. It requires a certain discipline to use the Worked Exercises effectively. The <em>ineffective</em> way is simply to read through the description, not looking too closely at the code, and telling yourself, &quot;Yeah, that makes sense.&quot; The effective way is to pause at each step, ask yourself what the next step should be, even write it down or sketch it out, before looking at how the book solves it, and then, seeing the solution, look carefully at the code, tracing through its evaluation, to convince yourself that it behaves as described. This kind of internal questioning and testing is the proper, effective way to read any academic material critically.</FONT></P>\n<P>\n  <FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments by David\n    G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005,\nFall 2009, Fall 2010, and Fall 2011.</FONT></P>\n<HR />\n<FONT FACE=\"Goudy Old Style\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Goudy Old Style\">\n<!-- #BeginDate format:fcAm1a -->Thursday, November 10, 2011 10:17 AM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>", "encoding": "utf-8"}