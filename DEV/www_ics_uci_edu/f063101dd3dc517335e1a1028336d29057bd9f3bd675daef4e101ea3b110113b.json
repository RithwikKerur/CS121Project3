{"url": "https://www.ics.uci.edu/~eppstein/163/s15-hw1.html", "content": "<html>\n<head>\n<title>CompSci 163/265, Spring 2015, Homework 1</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<h1>CompSci 163/265, Spring 2015, Homework 1</h1>\n<ol>\n<li><p>In class we discussed three representations of graphs:\n<ul>\n<li>an <a href=\"https://en.wikipedia.org/wiki/Adjacency_matrix\">adjacency matrix</a> (a matrix whose rows and columns are indexed by the vertices, with a $1$ in row $i$ and column $j$ if there is an edge from vertex $i$ to vertex $j$),</li>\n<li>an <a href=\"https://en.wikipedia.org/wiki/Adjacency_list\">adjacency list</a> (in a form described by Goodrich and Tamassia in which there is an object for each vertex and edge, each edge object points to its two vertex endpoints, and each vertex object points to two collections of edge objects for its incoming and outgoing edges), and</li>\n<li>a <a href=\"https://www.python.org/doc/essays/graphs/\">Python representation described by van Rossum</a> in which a graph is a dictionary whose keys are vertices and whose values are lists of the outgoing neighbors of each vertex (see the link for examples).</li></ul></p>\n\n<ol type=\"a\">\n<li><p>Draw the graph whose adjacency matrix is below, using circles for the vertices and arrows for the edges. Label each vertex with the number of its row and column.</p>\n\\( \\left( \\begin{matrix} 0 & 1 & 1 & 0 \\\\ 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 0 \\\\ \\end{matrix} \\right)\n\\)\n</li>\n<li><p>How many objects of each type would be needed to represent the same graph in the Goodrich and Tamassia representation?</p></li>\n<li><p>Write down a Python expression that produces the van Rossum representation for the same graph. In this expression, use the number <i>i</i> to represent the vertex whose adjacencies are given by the <i>i</i>th row and column of the matrix.</p>\n</li></ol></li>\n<li><p>In the low-attention-span web surfer model used to define the <a href=\"https://en.wikipedia.org/wiki/PageRank\">pagerank algorithm</a>, suppose that the probability of getting bored and going to a uniformly random page is $0.1$, and the probability of following a random link from the current page is $0.9$.  Given the graph represented by the same matrix above, starting from a state in which each vertex is equally likely, what would be the probabilities of being on each of the four vertices after a single time step?</p></li>\n<li><ol type=\"a\">\n<li><p>Draw a graph, a designated starting vertex in your graph, and a sequence of the vertices that can be reached from the starting vertex, with the property that the sequence you give could have been generated by a depth first search, but not by a breadth first search.</p></li>\n<li><p>Draw a graph, a designated starting vertex in your graph, and a sequence of the vertices that can be reached from the starting vertex, with the property that the sequence you give could have been generated by a breadth first search, but not by a depth first search.</p></li>\n<li><p>(For 265 students only.) Draw a graph in which it is impossible for depth first search and breadth first search to generate the same sequence as each other, no matter which starting vertex is chosen and no matter which ordering is chosen for the list of edges out of each vertex. Explain why the two search algorithms must always generate different sequences for your graph.</p></li>\n</ol></li>\n<li><p>For the graph below, draw a possible depth-first search forest.\nAdditionally, label each vertex with the lowlink number that would be\ncomputed by Tarjan's strongly connected components algorithm, and list\nthe strongly connected components. Don't forget to include any\nsingle-vertex components, if they exist.</p>\n<p align=center><img src=\"s15-hw1.png\"></p>\n</ol>\n</body>\n</html>\n", "encoding": "ascii"}