{"url": "https://www.ics.uci.edu/~kay/courses/h21/hw/lab5.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Wednesday, October 26, 2005 8:43 AM\" />\n<TITLE>Lab Assignment 5</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D236C8FC\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 1, CS1, assignment, Scheme\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n<link href=\"/~kay/courses/h21/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n<style type=\"text/css\">\n<!--\n.style2 {font-size: 10pt}\n.style3 {\n\tfont-family: \"Courier New\", Courier, monospace;\n\tfont-size: 10pt;\n}\n.style4 {\n\tfont-size: 4px;\n\tfont-family: \"Courier New\", Courier, monospace;\n}\n.style21 {font-family: \"Courier New\", Courier, monospace}\n.style1 {font-size: 10pt}\n.style22 {\tfont-size: 10pt;\n\tfont-family: \"Courier New\", Courier, monospace;\n}\n-->\n</style>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<p><font size=\"2\" face=\"Garamond\">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY &bull; FALL 2009</font></p>\n<P><FONT FACE=\"Garamond\" SIZE=6><B>Lab Assignment 5 </B></FONT></P>\n<P><BR />\n  <FONT FACE=\"Garamond\" SIZE=4>This assignment is due at the end of lab on\n  Friday, October 30. </FONT></P>\n<P>\n  <FONT FACE=\"Garamond\" SIZE=4>Choose a partner for this assignment, someone\n    you haven&#39;t worked with already.  Starting with this assignment, change\nyour language level to Intermediate Student with Lambda.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(a) </B>\n\nIn class, we did an &quot;inorder traversal&quot; of a BST, the equivalent of exercise 14.2.3; we called it <font face=\"Courier New, Courier, monospace\">BST-&gt;list</font>.  (Note that the textbook arranges their trees a little differently, with an empty node as <font face=\"Courier New, Courier, monospace\">false</font> where we used <font face=\"Courier New, Courier, monospace\">empty</font>.  Either way works, so long as you stick to one way consistently.  Also, each node in their trees has two value fields, a number and a name, rather than just the single number we used.)  We also did the insertion of an item into a BST, the equivalent of exercise 14.2.5; we called it <font face=\"Courier New, Courier, monospace\">BST-insert</font>.  And we wrote a function to take a list of items and insert each item into a BST, the equivalent of exercise 14.2.6; we called it <font face=\"Courier New, Courier, monospace\">list-&gt;BST</font>.  You should know how to recognize these functions and how to write them.</font></p>\n<p><font face=\"Garamond\" SIZE=4>In class we did not write a function to search for an item in a binary tree, the equivalent of exercise 14.2.4.  So we'll give you a chance to do it now.  Write the function <font face=\"Courier New, Courier, monospace\">BST-member?</font> as described below.  Write it to process BSTs as we defined them in class (rather than as described in the book).</font></p>\n<pre><font size=\"2\" face=\"Courier New, Courier, monospace\">;; BST-member?: number  BST  -&gt;  boolean\n;; Return true if number appears in BST and false otherwise\n(check-expect (BST-member? 17 empty) false)\n(check-expect (BST-member? 17 (list-&gt;BST (list 17))) true)\n(check-expect (BST-member? 17 (list-&gt;BST (list 34 43 28 16 17 24 134 34))) true)\n(check-expect (BST-member? 17 (list-&gt;BST (list 34 3 23 2 25 26 24))) false)</font></pre>\n<p><FONT FACE=\"Garamond\" SIZE=4>Here are some hints if you'd like them: You have the contract, purpose statement, and examples above. Next, write the function header (define and lambda). Since a tree is either empty or not, have a cond to distinguish. Now, what do you return if the tree's empty? If it's not empty, what two things do you have to look at? What if they're equal, what do you return? If they're not equal, you're going to have to keep looking (recursively) in either the left subtree or the right subtree; how do you decide which?</FONT></P>\n<p><FONT FACE=\"Garamond\" SIZE=4>Submit your definitions\n  via Checkmate. </FONT></P>\n\n<P>\n<FONT FACE=\"Garamond\" SIZE=4><B>(b) </B>\nDo exercises 14.3.2, 14.3.3, and 14.3.4\n  (in which the predefined function </FONT><span class=\"style21\">max</span><FONT FACE=\"Garamond\" SIZE=4>, which returns the largest of its arguments,\n    will be useful).  Note that the representation of web pages used in this\n    section is a bit odd, since each linked page is nested within the page that\n    links to it (and you can&#39;t, therefore, have two pages that link to each\n    other).  It&#39;s still a useful vehicle for these exercises, which explore\n    some fundamental operations on trees, and the authors refine this representation\n    later in the book.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>After that, do exercises 14.4.1 (do the data\n  definition and just two of the parts), 14.4.2 (this goes through a list\n  containing other lists, following the same general pattern as the exercises\n  in the previous section), 14.4.3, and 14.4.4. </FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4>Do exercises\n  15.3.1, 15.3.3, and 15.3.4.</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Do exercise 17.6.1 and one exercise chosen\nfrom 17.6.2 through 17.6.6. (If you choose 17.6.2, write the </FONT><span class=\"style4\"><CODE>reveal-list</CODE></span><FONT FACE=\"Garamond\" SIZE=4> function, but it's not necessary to do the part of the problem where you use the <CODE>hangman.ss</CODE> teachpack to make a complete Hangman game, since that depends\non a problem that was not assigned previously.)</FONT></P>\n<P>\n<FONT FACE=\"Garamond\" SIZE=4>Do exercises 17.7.1, 17.7.2 (just parts 1,\n3, and 5), 17.7.3, and 17.7.4.  Then do exercises 17.8.3 and 17.8.5.</FONT></P>\n<P>\n  <FONT FACE=\"Garamond\" SIZE=4>Collect these definitions and submit them\nas usual via Checkmate.</FONT></P>\n<P><FONT FACE=\"Garamond\" SIZE=4><B>(c) </B>In class we will discuss how to change our restaurant\nstructure so that instead of just one best dish and its price, each restaurant\nhas a menu of dishes.  So a </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant</FONT></span><FONT FACE=\"Garamond\" size=4> is</FONT></P>\n<P class=\"style1\"><FONT FACE=\"Courier New\">(make-new-rrant\n  name cuisine phone menu)</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>where name is a string, cuisine is a string,\n  phone is a string, and menu is a list of dish structures (see below).  We'll\n  define the new structure more or less like this:</FONT></P>\n<P class=\"style1\"><FONT FACE=\"Courier New\">(define-struct\n  new-rrant (name cuisine phone menu))</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>The menu is a list of dishes&mdash;that is,\n  the </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant</FONT></span><FONT FACE=\"Garamond\" size=4> structure contains a list as one of its fields.  Each dish on the list has a name and a price.  So a </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">dish</FONT></span><FONT FACE=\"Garamond\" size=4> is</FONT></P>\n<P class=\"style1\"><FONT FACE=\"Courier New\">(make-dish\n  name price)</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>where name is a string and price is a number,\n  defined with</FONT></P>\n<P class=\"style1\"> <FONT FACE=\"Courier New\">(define-struct dish (name price))</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.1)</B> To the restaurant definition below,\n  add a third dish:  Paht Woon Sen at $7.95.<A NAME=\"_14_2366\"></A> <BR />\n  </FONT><span class=\"style22\">(define R1 (make-new-rrant &quot;Thai\n    Touch&quot; &quot;Thai&quot; &quot;949-640-0123&quot; <BR />\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(list (make-dish &quot;Mee Krob&quot; 8.50) <BR />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(make-dish &quot;Larb Gai&quot; 10.25))))</span></P>\n<P> <FONT FACE=\"Garamond\" size=4>Write a Scheme expression that defines R2 as\n  a </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant</FONT></span><FONT FACE=\"Garamond\" size=4> structure for the French restaurant Pascal whose phone number is 940-752-0107;\n    they serve escargots for $12.95, poached salmon for $18.50, rack of lamb\n    for $24.00 and marjolaine cake for $8.50.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.2) </B>Write the function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant-first-dish-name</FONT></span><FONT FACE=\"Garamond\" size=4> that takes a </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant</FONT></span><FONT FACE=\"Garamond\" size=4> as its argument and returns the name of the first dish on the restaurant&#39;s\n  menu.  Remember to write the test cases and examples before you write the\n  function.  You should include code to check whether the menu has zero dishes\n  and return empty if so.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>You may find yourself needing to extract the\n  menu from the argument twice; use </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">local</FONT></span><FONT FACE=\"Garamond\" size=4> to avoid that.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.3)</B> Write the function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">dish-cheap?</FONT></span><FONT FACE=\"Garamond\" size=4> that takes a dish structure and a number and returns true if (and only if)\n  the price of the dish is less than the specified number.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.4)</B> Write the function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">menu-all-cheap?</FONT></span><FONT FACE=\"Garamond\" size=4> that takes a menu (i.e., a list of dish structures) and a number and returns\n  true if (and only if) all the dishes on the menu have a price less than\n  the specified number. You may write your code to return true if the menu\n  doesn&#39;t have any dishes; don&#39;t produce an error message.  Of course\n  you should use </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">dish-cheap?</FONT></span><FONT FACE=\"Garamond\" size=4> in your definition.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.5) </B> Write the function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant-all-cheap?</FONT></span><FONT FACE=\"Garamond\" size=4> that takes a </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant</FONT></span><FONT FACE=\"Garamond\" size=4> and a number and returns true if all the dishes the restaurant serves cost\n  less than the specified number.  Of course you should use </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">menu-all-cheap?</FONT></span><FONT FACE=\"Garamond\" size=4> in your definition.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.6)</B> Write the function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">menu-prices</FONT></span><FONT FACE=\"Garamond\" size=4> that takes a menu and returns a list of numbers where each number is the\n  price of a dish on the menu.  That is, your function will collect all the\n  prices of the dishes into a list and return that list.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.7)</B> Write the function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">menu-average</FONT></span><FONT FACE=\"Garamond\" size=4> that takes a menu and returns the average price of the dishes on that menu.\n  Think about how you compute an average, what quantities you need, and how\n  to get them.  The predefined function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">length</FONT></span><FONT FACE=\"Garamond\" size=4> will be helpful; it will also be helpful to write a function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">sum</FONT></span><FONT FACE=\"Garamond\" size=4> that returns the sum of a list of numbers.  Note also that you&#39;ll need\n    to check for an empty menu and return zero in that case, so you don&#39;t\n    divide by zero.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.8)</B> Write the function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant-cheap?</FONT></span><FONT FACE=\"Garamond\" size=4> that takes a </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant</FONT></span><FONT FACE=\"Garamond\" size=4> and a number and returns true if the average price of the restaurant&#39;s\n  menu is less than the specified number.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.9) </B> Write the function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant-keep-cheap</FONT></span><FONT FACE=\"Garamond\" size=4> that takes a </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant</FONT></span><FONT FACE=\"Garamond\" size=4> and a number and returns (a newly constructed copy of) that restaurant with\n  all the menu items that aren&#39;t cheap removed.  The right way to go about\n  this is to follow the pattern of the functions above:  Start by writing\n  a function to operate on a menu, and then call that function from your </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant-keep-cheap</FONT></span><FONT FACE=\"Garamond\" size=4> function.  The actual removal task follows the pattern of some of the functions\n    we&#39;ve already seen.</FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4><B>(c.10)</B> Write the function </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">cheap-new-rrants</FONT></span><FONT FACE=\"Garamond\" size=4> that takes a list of </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant</FONT></span><FONT FACE=\"Garamond\" size=4> structures and a number and returns a list containing only the cheap restaurants&mdash;the\n  ones whose average menu price is less than the number.  Use </FONT><span class=\"style1\"><FONT FACE=\"Courier New\">new-rrant-cheap?</FONT></span><FONT FACE=\"Garamond\" size=4> in your definition, of course. </FONT></P>\n<P> <FONT FACE=\"Garamond\" size=4>Collect all of these definitions and submit\n  them via Checkmate.</FONT></P>\n<P>\n  <FONT FACE=\"Garamond\" SIZE=4><B>(d)</B> </FONT><FONT FACE=\"Garamond\" SIZE=4>Now, reimplement the collection class to store\n    the restaurants in a binary search tree ordered by the restaurants&#39;\n  names.  This will involve changing all the definitions in the collection\npart of the code, but none of the definitions elsewhere.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>Your data definition will be as follows:<A NAME=\"_14_2865\"></A></FONT></P>\n<P><code>;; A treenode is either<br />\n  ;; 1. empty<br />\n  ;; 2. (make-treenode rootvalue left right), where rootvalue is a rrant and left <br />\n  ;; and right are treenodes, representing the left subtree and right subtree, <br />\n  ;; and (this is the BST property) where all of the restaurant names in the left<br />\n  ;; </code><code>subtree are earlier alphabetically than the name of the rootvalue restaurant, <br />\n    ;; all names in the right subtree are greater, and both subtrees are BSTs.</code></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>Here are some tips, hints, and simplifications: </FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>&mdash;The code you wrote in part <strong>(a)</strong> and the code we wrote in class should be\n  a useful guide. </FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>&mdash;To compare strings alphabetically, use </FONT><FONT FACE=\"Courier New\">string=?</FONT><FONT FACE=\"Garamond\" SIZE=4>, </FONT><FONT FACE=\"Courier New\">string&gt;?</FONT><FONT FACE=\"Garamond\" SIZE=4>,\n  or </FONT><FONT FACE=\"Courier New\">string&lt;?</FONT><FONT FACE=\"Garamond\" SIZE=4>. </FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>&mdash;The </FONT><FONT FACE=\"Courier New\">collection-&gt;list</FONT><FONT FACE=\"Garamond\" SIZE=4> function should do an inorder traversal of the tree, so it produces a sorted\n  list. </FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>&mdash;Assume that every restaurant in the collection\n  will have a unique name.  Under that assumption, there will be no duplications,\n  so that </FONT><FONT FACE=\"Courier New\">collection-search</FONT><FONT FACE=\"Garamond\" SIZE=4> will always return a one-element collection or an empty collection.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4>&mdash;Deleting items from a BST is very tricky\n  if the item has two children, because you can&#39;t leave holes and you\n  need to maintain the BST property.  We&#39;ll learn the algorithm for this\n  some day, but for now, you can skip it: </FONT><FONT FACE=\"Courier New\">collection-remove</FONT><FONT FACE=\"Garamond\" SIZE=4> can just return the same collection unchanged.</FONT></P>\n<P> <FONT FACE=\"Garamond\" SIZE=4><B>(e)</B> Remember that each partner must\n  complete a partner evaluation form  on eee.uci.edu.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H21assignments and exams\nby David G. Kay from Fall 2001; modified by David G. Kay, Fall 2004&ndash;Fall 2009.</FONT></P>\n<HR />\n<FONT FACE=\"Garamond\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\" face=\"Garamond\">\n<!-- #BeginDate format:fcAm1a -->Friday, October 23, 2009 12:45 PM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n\u00ff", "encoding": "ISO-8859-1"}