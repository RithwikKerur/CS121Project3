{"url": "https://www.ics.uci.edu/~kibler/javacourse/java.html", "content": "<HTML>\n<head>\n<title>  Java  </title>\n<h1> Why Java? </h1>\n<hr><hr>\n <em> Java: a language for team programming </em>\n<h3> Java Texts </h3>\n  <ul>\n   <li> <em>The Java Programming Language </em> by Ken Arnold and James\n   Gosling. \n    <br> Covers fundamentals of language, but not important packages.\n   <li> <em> Computing Concepts using Java Essentials </em> by Cay Horstmann.\n   <br> Covers Java for the beginning programming student. Used in 1A.\n   <li> <em>Core Java 2nd Ed </em> by Cay Horstmann and Gary Cornell\n    <br> language + applets, user-interface, delegation event-model (JDK 1.1),\n     and new graphical widgets (e.g. scrollpane).\n   <li> <em> Java in a Nutshell (2nd Edition)</em> (JDK 1.1)\n   <br> A complete  brief description of the language plus a list of the\n  methods and classes in the JDK 1.1 packages. JDK 1.0 had 8 packages\nand JDK 1.1 has 23. Moreover the old packages have been extended.\nThese new packages cover important extensions such\nas JavaBeans, reflections, serialization, JAR, and a new delegation\nevent-model which replaces the old model.\n   <li> <em> Thinking in Java </em> by Bruce Eckel. \n<br>This text covers\n JDK 1.1 with some information about JDK 1.2.  It is meant\nfor the serious programmer who\nhas already programmed in some language, preferably C++. I like this\ntext a lot. He provides practical advice. The text covers  the\ntopics in Java in a Nutshell in greater depth.\n   <li> <em>Graphic Java 1.1: Mastering the AWT </em> 2nd Ed.\n   <br> thorough discussion of components, lightweight components, custom\n  components. More than you want  to know. Good reference.\n   <li> <em>Symantic Visual Caf&eacute; Sourcebook </em> by Cary Jardin and Pam\n Dixon. A complete guide to Creating Java Applets and applications with\n <em>Visual Caf&eacute; </em>. Note: only similar to Visual Cafe Pro.\n   <li> For an up-to-date discussion of the Java and its use, see  \n http://www.javasoft.com/.\n   <li> Any book that covers JDK1.1 that you can learn from. Everyone\n  learns differently.\n </ul>\n<h3> Java History </h3>\n   <ul>\n    <li> Sun (Gosling) creates Oak, a language for embedded systems.\n    <li> Specification of virtual machine yields platform independence.\n    <li> Internet access promotes multi-platform languages.\n    <li> Oak becomes Java.\n    <li> World goes crazy.\n    <li> Warning: Java is changing.\n   </ul>\n<h3> Object-Oriented Language History </h3>\n  <ul>\n    <li>  1967  Simula - perceived as simulation language\n    <li>  1970's study: limited programmer memory/comprehension\n    <li>  1980's Smalltalk -  slow,  graphical, totally object-oriented\n    <li>  1980's Object  Pascal (basis of Delphi) dynamic types, database\n          and window event access\n    <li>  1986  Eiffel: correctness\n    <li>  1985 (first release) C++ : a better, object-oriented C\n    <li>  1990 CLOS  Common Lisp Object System\n    <li>  1995 Sun released Java : multi-platform, maintenance\n   </ul>\n<h3> Special Purpose Languages </h3>\n Matlab, Mathematica, SPSS, Latex, html, vrml, ...\n<h3> Evolution of Programming Languages </h3>\n  <ul>\n    <li> More than 1000 programming languages: Why?\n    <li> User Problems  --> Software Solutions --> Hardware Implementations\n    <li> Machine Languages --> Assembly Language --> General Purpose Languages\n    <li> Early Concerns\n        <ul>\n           <li> Efficiency\n           <li> Code size\n           <li> Compiler correctness\n           <li> Compiler uniformity\n         </ul>\n    <li> Trends\n    <ul>\n    <li>  addresses --> variable --> local variable --> records\n    <li>  instructions --> macros --> functions and procedures\n    <li>  run-time errors --> compile-time errors --> assertions+exceptions\n    <li>  code gets shorter\n    <li>  languages and compilers more complicated\n    <li>  increased functionality\n    <li> increased information hiding via encapsulation\n    <li>  run-time increases\n   </ul>\n    <li> What have we learned?\n    <li> Multiple Goals: Sometimes  goals conflict, other times they\n         support one another.\n    <li> Language design decisions relate to a preference of one goal over\n     another, e.g. automatic array bounds checking, pointer arithmetic,\n     memory release, etc. \n    <li> Where do people (cognitive abilities and foibles) fit in?\n    <li> What's wrong/right with Java.\n  </ul>\n<h3>General Purpose Programming Language Goals </h3>\n  For a good discussion of programming language design issues see:\n <em> Design and Evolution of C++ </em> by Bjorne Stroustrup.\n<br> For principles of Object-oriented design see\n</ul>\n <h3> Java summary </h3>\n<ul>\n <li> A Java program is a collection of classes definitions plus\n   one special class, called the \"driver\".\n <li> Every class is a descendant of the class Object. \n <li> Java is Object-oriented, simpler than C++, safer than C++ (not always),\n   multi-programmer, multi-platform, graphical, efficient (but slower than\n   C++), comprehensible.\n </ul>\n<h3> What Java doesn't have </h3>\n Are these bad or good features?\n  <ul>\n    <li> Assertions (pre, post, invariant)\n    <li> Multiple Inheritance\n    <li> Genericity:\n      <ul>\n        <li> can't have types as arguments\n        <li> e.g.  can't have Vector of reals where compiler\n       checks type.\n     </ul>\n    <li> Classes can't be created dynamically\n  </ul>\n <h3> Warning: Java is not extension of C </h3>\n <h3> Java Differences with C </h3>\n <ul>\n   <li> Most C expressions are legal in Java, but not all.\n   <li> <b>goto </b> is a reserved word in Java, but it does not have\n        a goto statement. Instead Java has a labelled break statement.\n   <li> Java has the class String, which has over 30 methods and several\n     constructors. The method length() returns the length of the string.X\n   <li> You cannot do pointer arithmetic in Java.\n   <li> You cannot free memory in Java. Instead Java uses garbage\n        collection, which runs  asynchronously in a separate thread.\n   <li> You cannot pass functions as parameters in Java. Instead\n   you define a function-object class and pass these objects around.\n   <li> There are no global functions or variables in Java.\n   <li> You cannot pass function pointers in Java. \n   <li> Arrays are unusually objects in Java. \n     <ul>\n       <li>  int[] myarray = new int[10]; creates an array of integers of size 10.\n        <li> Arrays are created dynamically at run-time.\n       <li> As is C, array indexing starts at 0.\n       <li> myarray.length returns the size of the array. \n       <li> Array bounds are checked at runtime.\n       <li> Unlike most objects, you cannot inherit from arrays.\n      </ul>\n </ul>\n<h2> <a href=\"classes.html\"> Classes </a> </h2>\n<h2> <a href=\"inheritance.html\"> Inheritance </a></h2>\n<h2> <a href=\"interfaces.html\"> Interfaces </a> </h2>\n<h2> <a href=\"applet.html\"> Applets </a> </h2>\n<h2> <a href=\"ui.html\"> User-Interface </a> </h2>\n<h2> <a href=\"event.html\"> Event Handling </a> </h2>\n\n\n\n\n\n\n<h3> Glossary </h3>\n  <ul>\n   <li> An <em> Abstract method </em> is a method prototype, i.e.\n   one without a body.\n   <li> <em> Abstract class </em> has at least one abstract method.\n   <li> An <em> interface </em> specifies only abstract methods and\n       static data members.\n   <li> The <em> signature </em> of a method is the types of the\n    arguments together with the method name.  It does not include the\n    return type.\n   <li> The <em> scope </em> of a variable is the region in the\n    program where the variable can be accessed.\n   <li> The <em> lifetime </em> of a variable is the range of instructions\n   where storage is bound to the variable.\n   <li> <em> Declaring </em> a variable/object allocates no storage and\n      notifies the compiler that the variable is defined elsewhere.\n  <li> <em> Defining </em> a variable/object causes storage to be allocated\n     and defines the meaning or interpretation of the storage.\n  <li> <em> Short-circuit </em> evaluation means that boolean expressions\nare evaluate only as far as they need to be. Once the value is known,\nfurther evaluation stops.\n  <li> <em> Static </em> members are globals to the class. \n  <li> <em> Max Gobble rule</em>  means the lexical analyzer defines a\nlexeme to be the longest string that matches a keyword. For example\n  i+++j means i++ + j and not i + ++j.\n <li> A <em>package </em> is a related collection of classes. If no\n accessibility priviledges are specified, each member of the collection\n is visible to all  within the package.\n\n </ul>\n\n\n<H1> Style Guidelines  </H1>\n<hr><hr>\n\n<ul>\n<li>  Braces should line-up one under another.\n<li>  Spaces should  support parsing.\n<li>  Comments should explain what a method does, not how.\n<li>  For documentation use javadoc.\n<li>  No magic constants.\n</ul>\n\n<hr>\n<H1> Design Guidelines </H1>\n<hr><hr>\n\n<ul>\n<li> If code isn't correct, it is worthless.\n<li> Code should be understandable.\n<li> Code should be as efficient as it needs to be.\n<li> Code should be modifiable.\n<li> Use object decomposition, problem decomposition,\n    and function decomposition.\n<li> Encapsulate.\n<li> Copy and edit suggests making a class.\n</ul>\n\n</BODY>\n</HTML>\n", "encoding": "ascii"}