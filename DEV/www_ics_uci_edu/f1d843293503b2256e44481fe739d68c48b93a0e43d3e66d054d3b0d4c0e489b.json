{"url": "https://www.ics.uci.edu/~dan/class/165/notes/testing.html", "content": "<HTML><HEAD>\n<TITLE> Testing and verification\n</TITLE>\n</HEAD><BODY>\n\n<H2> Testing and verification </H2>\n\n<H3> Testing </H3>\n\nYou may choose your own format for test input.&nbsp;\nBe sure that you document such decisions:&nbsp;\nyour reasons for your choices over others,\nand any significant/relevant side-effects of your choices.&nbsp;\nEfficiency is the primary consideration,\nbut ease and clarity of coding should not be overlooked.&nbsp;\nDocument and justify all of your decisions.\n<P>\nThe main concern is that your algorithms (sorts, multipliers, etc.)\nshould be independent of the source of data, timing routines,\ndebugging, testing routines, I/O, etc.&nbsp;\nI should be able to take your code for the\nfunction(s) that perform some job and use your code\nwithout having your routines waste space copying the input\n(unless the algorithm requires it), waste time performing timing\noperations, or produce annoying debugging or testing printouts.&nbsp;\nAll of these tasks should be performed by your testing functions\nbefore and after calling the lab function, for whatever algorithm\nis being tested.&nbsp;\nObviously this means that the functions should not be passed anything\nbut what they need to do the job they are written for:&nbsp;\nnot structures to record testing information or\nswitches for testing-related control.&nbsp;\nThe set of functions that perform a task may share global data if you\nfind it absolutely necessary,\nbut should not share any global data with the other portions of your\nlab (I/O, testing, etc.).\n<P>\nIt is not sufficient to state that there are no error conditions just\nbecause your testing functions always generate correct tests.&nbsp;\nYour functions should do something reasonable if the data passed\nto them cannot be processed properly.&nbsp;\nYou may even want to have your tester throw some errors at your\nfunctions to demonstrate their reactions.&nbsp;\nPossible errors include (but are not necessarily limited to)\nhaving a negative dimension passed as a parameter,\ngetting an illegal result during arithmetic calculation\n(such as overflow),\nor being unable to allocate scratch memory needed.&nbsp;\nIf you read from a file, you should be able to gracefully handle errors\nrelated to file access.\n<P>\nThe output of your program should not contain lengthy\n\"dumps\" of all variables evaluated by the various\nfunctions in your program.&nbsp;\nInstead, your test procedures should call your functions\nand then use a simple (and possibly slower) method of verifying\nthe accuracy of your results.&nbsp;\nThus, the only output (other than statistics) should be\nshort indications from the test procedure that your\ninner project procedures are working correctly.&nbsp;\nI should have to check only the correctness of your test\nprocedures in order to be convinced of the correctness of your lab.\n\n<H3> Verification </H3>\n\nIn the simplest sense, verification means demonstrating that your\nprogram works.&nbsp;  Verification runs should show that\nsubroutines, subparts, and the final product work.&nbsp;\nThese runs must show that:\n\n<UL>\n<LI> your program meets the lab specifications\n<LI> your program handles end conditions\n<LI> your program sensibly recovers from user errors\n<LI> any special features you claim to have, actually work\n</UL>\n\n<P>\nVerification runs should include:\n<UL>\n<LI> a description of how the run was generated\n     (compilation, execution commands)\n<LI> an echo of all input\n<LI> a description of what the test is supposed to indicate\n</UL>\n<P>\n\n<HR>\n<ADDRESS>\n<A HREF=\"http://www.ics.uci.edu/~dan\">\nDan Hirschberg </A> <BR>\nComputer Science Department<BR>\nUniversity of California, Irvine, CA 92697-3435<BR>\n</ADDRESS>\n<tt>dan (at) ics.uci.edu</tt><br>\nLast modified: Mar 22, 1999\n</BODY></HTML>\n", "encoding": "ascii"}