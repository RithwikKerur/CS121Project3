{"url": "https://www.ics.uci.edu/~kay/courses/i141/hw/asst5.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<TITLE>Information Retrieval Assignments</TITLE>\n<link href=\"http://www.ics.uci.edu/~kay/courses/31/mainstyle.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<p><FONT size=\"2\"  >INFX 141 / CS 121</FONT><FONT size=\"2\"  > &bull; DAVID G. KAY &bull; UC IRVINE &bull; WINTER 2015</FONT></p>\n<p><FONT   SIZE=6>Assignment #5<br /><B>Search Engine</B></FONT>\n</p>\n<p>[Still subject to clarifying changes]</p>\n<p>Like the last assignment, this one comes in two alternative versions, a Developer version (appearing immediately\nbelow) and an Analyst version (appearing later in this document).  Both versions have milestones (intermediate deadlines),\nso mark your calendars and plan accordingly.</p>\n<p>\nYou may do this assignment individually or in groups of 2 or 3. As before, the expectations of each size group\nare the same; shared labor is offset by communication and coordination costs.  All group members receive the\nsame score except in truly extraordinary circumstances.  You may use Java or Python to write the software you need for either part; if you'd like to use other tools not mentioned here, check with us.\nUse Piazza for general questions whose answers can benefit everybody.\n</p>\n<p>&nbsp;</p>\n<p><b><u>DEVELOPER VERSION</u></b></p>\n<p>\nIn this assignment you will develop an entire search engine for a large collection of books: those avaiable\nfree from <a href=\"http://www.gutenberg.org/\">Project Gutenberg</a>.  Here is a summary of the milestones:</p>\n\n\n<TABLE WIDTH=100% BORDER=1 CELLPADDING=1 CELLSPACING=0>\n  \n  <TR>\n    <TD WIDTH=6% VALIGN=TOP>&nbsp;</TD>\n    <TD WIDTH=8% VALIGN=TOP><FONT ><U>Due Date</U></FONT></TD>\n    <TD WIDTH=13% VALIGN=TOP><u>Description</u></TD>\n    <TD WIDTH=16% VALIGN=TOP><u>Deliverables</u></TD>\n    <TD WIDTH=6% VALIGN=TOP><FONT ><U>Points</U></FONT></TD>\n    <TD WIDTH=51% VALIGN=TOP><u>Evaluation Criteria</u></TD>\n  </TR>\n  <!--\n  <TR>\n    <TD VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style1 style11\">0.</span></TD>\n    <TD VALIGN=TOP><span class=\"style1 style11\">27 September</span></TD>\n    <TD VALIGN=TOP>&nbsp;</TD>\n  </TR> -->\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style12\">M1</span></TD>\n    <TD WIDTH=8% VALIGN=TOP>23 February</TD>\n    <TD WIDTH=13% VALIGN=TOP>Get the data</TD>\n    <TD WIDTH=16% VALIGN=TOP>Screen shot (.jpg)</TD>\n    <TD WIDTH=6% VALIGN=TOP>10<span class=\"style1 style11\"></span></TD>\n    <TD WIDTH=51% VALIGN=TOP>Were you able to get the data?</TD>\n  </TR>\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style11\"></span> M2</TD>\n    <TD WIDTH=8% VALIGN=TOP>2 March</TD>\n    <TD WIDTH=13% VALIGN=TOP>Lucene up and running</TD>\n    <TD WIDTH=16% VALIGN=TOP>ZIP file with code</TD>\n    <TD WIDTH=6% VALIGN=TOP>20</TD>\n    <TD WIDTH=51% VALIGN=TOP>Were you able to get the demo up and running with the small changes? Did you provide a correct index?</TD>\n  </TR>\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style12\">M3</span></TD>\n    <TD WIDTH=8% VALIGN=TOP><span class=\"style12\">12 March</span></TD>\n    <TD WIDTH=13% VALIGN=TOP>Search engine</TD>\n    <TD WIDTH=16% VALIGN=TOP>Code and ZIP file with pictures </TD>\n    <TD WIDTH=6% VALIGN=TOP>20</TD>\n    <TD WIDTH=51% VALIGN=TOP>Were you able to index the entire collection? Does your search seem to work? Did you add the Author and Title fields?</TD>\n  </TR>\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style11\"></span> M4</TD>\n    <TD WIDTH=8% VALIGN=TOP><span class=\"style12\">12\u201316 March</span></TD>\n    <TD WIDTH=13% VALIGN=TOP>Demonstrations</TD>\n    <TD WIDTH=16% VALIGN=TOP>&nbsp;</TD>\n    <TD WIDTH=6% VALIGN=TOP>50</TD>\n    <TD WIDTH=51% VALIGN=TOP>Does your search engine work for the TA's queries? Do you understand how it works?</TD>\n  </TR>\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style12\">Extra Credit</span></TD>\n    <TD WIDTH=8% VALIGN=TOP><span class=\"style12\">12 March</span></TD>\n    <TD WIDTH=13% VALIGN=TOP>Extra credit Web UI</TD>\n    <TD WIDTH=16% VALIGN=TOP>Show at demo</TD>\n    <TD WIDTH=6% VALIGN=TOP>15</TD>\n    <TD WIDTH=51% VALIGN=TOP>Does the UI work?</TD>\n  </TR>\n</TABLE>\n\n<p>\n<p>[Developer] <b>M1. Get the data</b>\n<p>Get the entire collection of English ebooks from Project Gutenberg.\nThe collection is available here as an ISO file: <a href=\"http://www.gutenberg.org/wiki/Gutenberg:The_CD_and_DVD_Project\">http://www.gutenberg.org/wiki/Gutenberg:The_CD_and_DVD_Project</a> .  (Just download the contents of the April 2010 DVD; don't include earlier versions.)\n</p>\n<p>Deliverable:  A screen shot (in JPG form) showing the folder structure of the collection with evidence that it's located on your computer (i.e., a directory path should be displayed that includes your computer's name).\n</p>\n<p>[Developer] <b>M2. Get the Lucene demo up and running</b></p>\n<p>Download the <a href=\"http://lucene.apache.org/\">Apache Lucene text search engine library</a> from\n<code>lucene.apache.org</code>.  Be sure to get the latest version, 4.10.3, and to download both (a) the package\ncontaining the source code, so you can see all the example code, and\n(b) the binary package so you don't need to build Lucene from scratch.  Place both packages in the same folder.\nIf you'd like to try this in Python with the <a href=\"http://lucene.apache.org/pylucene/\">PyLucene wrapper</a>,\nfollow the additional instructions at\n<code>http://lucene.apache.org/pylucene/</code> (and note that according to their page, PyLucene is compatible with Java Lucine version 4.10.1).\n</p>\n<p>\nOnce you have everything in place, navigate to the simple demo folder at <code>contrib/demo</code>.\nOwn it\u2014that is, copy and paste the code to your own project. Then:\n<ol 1>\n<li>  \nChange the demo so that the Usage messages for both IndexFiles and SearchFiles ends with a smiley face :-)\n</li>\n<li>\nRun it over these 2 text files using IndexFiles. Then use the search program SearchFiles. The two test files can be found here: <a href=\"http://www.ics.uci.edu/~kay/courses/i141/hw/asst5-test-text-files.zip\">\n<code>http://www.ics.uci.edu/~kay/courses/i141/hw/asst5-test-text-files.zip</code></a>.\n\n</li></ol>\n<p>Deliverable: the modified <code>IndexFiles.java</code> and <code>SearchFiles.java</code>, or the equivalent Python files, and the Lucene index folder (and its contents) for the couple of files in the test run. Zip the index folder. Add any additional files you need to convey information to the TA. </p>\n\n<p>[Developer] <b>M3. Search engine for the Gutenberg collection</b></p>\n<p>Make sure you understand the demo code in M2: Study the Lucene API and documentation.\nHere are some additional notes and requirements:\n</p>\n<ul>\n  <li>Ignore <CODE>ETEXT*</code> in the Gutenberg collection.</li>\n  <li>Study the raw data; you will notice that things aren't completely consistent.\n  Some books are provided in Rich Text Format, others are plan text, zipped.\n  Focus on the plain text books, i.e., the ones with the <code>.txt</code> extension that you find inside ZIP files.</li>\n  <li>Add Title and Author fields to your Lucene \"Documents.\"  Include more fields you think will improve the\n  quality of search results.  (The challenge here is to devise how to scrape that information\n  out of the raw data.)</li>\n  <li>Boost matches in the Title and Author fields, and any other fields you see fit.</li>\n  <li><a href=\"https://github.com/DmitryKey/luke\">Luke</a> is a very useful tool\n  for inspecting Lucene indexes; download it at <code>https://github.com/DmitryKey/luke</code>.\n  <!-- This may have to be recompiled.  www.ics.uci.edu/~lopes/teaching/inf142W13/assignments/lukeall.4.1.0.zpi</code>  -->\n </li>\n  <li>To unzip files in Java, look at <code>java.util.zip</code>.\n</ul>\n<p>Deliverable:  Your source code as a Zip archive, plus one\n  or more screen shots (JPG) of your index as seen by Luke.\n  Make sure the picture(s) show the structure and the total number of documents in the index.</p>\n<p>[Developer] <b>M4. Demo</b></p>\n<p>Keep an eye out for a message arranging the demonstrations and follow the instructions in that message.</p>\n<p>[Developer] <b>Extra credit:  Give your search engine a Web UI</b></p>\n<p>Instead of a command line interface, let people search the index with a web interface.\nUse whatever web framework you're familiar with.  Tomcat is known to be a good container for Lucene apps.</p>\n<p>The extra credit work will be assessed during the live demo; there is no separate deliverable.\nIf you choose to do it, make sure to tell the TA that you did it.\n</p>\n\n<br />\n<br />\n<p><b><u>ANALYST VERSION</u></b></p>\n<p>In this assignment you will develop a search engine for a collection of poems, specifically haiku.\nThe collection you will search is the <a href=\"http://www.hsa-haiku.org/hendersonawards/henderson.htm\">Harold\nG. Henderson Memorial Award Collection</a> available for free from the Haiku Society of America.\nThis will be a physical search engine, not an electronic one, and <i>you</i> are going to be the agent\nof computation.  Here is a summary of the milestones:</p>\n\n<p>&nbsp;</p>\n<TABLE WIDTH=100% BORDER=1 CELLPADDING=1 CELLSPACING=0>\n<!--  <COL WIDTH=8% />\n  <COL WIDTH=15% />\n  <COL WIDTH=77% /> -->\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP>&nbsp;</TD>\n    <TD WIDTH=8% VALIGN=TOP><FONT ><U>Due Date</U></FONT></TD>\n    <TD WIDTH=13% VALIGN=TOP><u>Description</u></TD>\n    <TD WIDTH=16% VALIGN=TOP><u>Deliverables</u></TD>\n    <TD WIDTH=6% VALIGN=TOP><FONT ><U>Points</U></FONT></TD>\n    <TD WIDTH=51% VALIGN=TOP><u>Evaluation Criteria</u></TD>\n  </TR>\n  <!--\n  <TR>\n    <TD VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style1 style11\">0.</span></TD>\n    <TD VALIGN=TOP><span class=\"style1 style11\">27 September</span></TD>\n    <TD VALIGN=TOP>&nbsp;</TD>\n  </TR> -->\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style12\">M1</span></TD>\n    <TD WIDTH=8% VALIGN=TOP>23 February</TD>\n    <TD WIDTH=13% VALIGN=TOP>Get the data</TD>\n    <TD WIDTH=16% VALIGN=TOP>PDF report</TD>\n    <TD WIDTH=6% VALIGN=TOP>10<span class=\"style1 style11\"></span></TD>\n    <TD WIDTH=51% VALIGN=TOP>Were you able to get the data? Are the poems properly identified? Does the layout of the poems look as if it will work well for mechanical search?</TD>\n  </TR>\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style11\"></span> M2</TD>\n    <TD WIDTH=8% VALIGN=TOP>2 March</TD>\n    <TD WIDTH=13% VALIGN=TOP>Build the Index</TD>\n    <TD WIDTH=16% VALIGN=TOP>PDF report</TD>\n    <TD WIDTH=6% VALIGN=TOP>20</TD>\n    <TD WIDTH=51% VALIGN=TOP>Is the index you provded correct: Does it map all words? Does it map the words to all poems in which they occur? Is TF-IDF computed correctly?</TD>\n  </TR>\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style12\">M3</span></TD>\n    <TD WIDTH=8% VALIGN=TOP><span class=\"style12\">12 March</span></TD>\n    <TD WIDTH=13% VALIGN=TOP>Search engine</TD>\n    <TD WIDTH=16% VALIGN=TOP>PDF report</TD>\n    <TD WIDTH=6% VALIGN=TOP>20</TD>\n    <TD WIDTH=51% VALIGN=TOP>Does your search produce the correct poems with the correct ranking? Does your mechanical search device exist, with pictures to prove it?</TD>\n  </TR>\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style11\"></span> M4</TD>\n    <TD WIDTH=8% VALIGN=TOP><span class=\"style12\">12\u201316 March</span></TD>\n    <TD WIDTH=13% VALIGN=TOP>Demonstrations</TD>\n    <TD WIDTH=16% VALIGN=TOP>&nbsp;</TD>\n    <TD WIDTH=6% VALIGN=TOP>50</TD>\n    <TD WIDTH=51% VALIGN=TOP>Are you able to search, given the TA's queries? Are your search results correct? Is your search process fast (shooting for 30 seconds for a three-term query)?</TD>\n  </TR>\n  <TR>\n    <TD WIDTH=6% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=59><span class=\"style12\">Extra Credit</span></TD>\n    <TD WIDTH=8% VALIGN=TOP><span class=\"style12\">12 March</span></TD>\n    <TD WIDTH=13% VALIGN=TOP>Extra credit: better search</TD>\n    <TD WIDTH=16% VALIGN=TOP>Show at demo</TD>\n    <TD WIDTH=6% VALIGN=TOP>20</TD>\n    <TD WIDTH=51% VALIGN=TOP>Is your search able to retrieve documents containing words not in the query but related to it?</TD>\n  </TR>\n</TABLE>\n\n<p>&nbsp;</p>\n<p>[Analyst] <b>Overview</b></p>\n<p>Your \"search engine\" will be a physical one, which you will manipulate to carry out searches \"by hand.\"\nWe envision it something like this:</p>\n<p><img src=\"Rolodex.jpg\" width=\"225\" height=\"225\" alt=\"Rolodex\" longdesc=\"http://www.ics.uci.edu/~kay/courses/i141/hw/rolodex.jpg\u0001\"><img src=\"binder.jpg\" width=\"311\" height=\"162\" alt=\"Binder with tabs\" longdesc=\"http://www.ics.uci.edu/~kay/courses/i141/hw/binder.jpg\"></p>\n<p>&nbsp;</p>\n\n\n\n<p>At the end, you will show the TA the components of your engine and use it to search for specific\nqueries the TA will give, e.g., \"lawless mother cooking.\"\nWhen the TA gives you a query, you will play the computer's role:\nsearch the index, make some calculations, and produce a ranked list\nof poems. This is your search process; you are the computing agent.\n</p>\n<p>\nYour search should be as fast as possible and it should produce a ranked list of poems for each query,\nordered by how well they satisfy the query (using TF-IDF as the scoring heuristic).\n</p>\n<p><b>Materials:</b> You will need:</p>\n<ul>\n<li>All the haiku [poems] on the page cited above.\n</li><li>\nA binder, sheets of white paper, and labels (possibly small Post-Its)\n</li><li>\nA rolodex, or another binder with tabs\n</li><li>\nA calculator or calculator app\n</li>\n</ul>\n<p><b>Construction:</b>\nThe binder holds the collection of poems, one or more per sheet.\nMake sure to place identifiers on labels, sticking out past the page edge.\nYou can decide what kind of identifier you need.  The rolodex (or second binder)\nholds the index to the words.\n</p>\n<p>[Analyst] <b>M1. Get the data</b></p>\n<p>Get the entire collection of haiku poems from the cited page and place them in a document.\nMake sure to give identifiers to all poems. This document will be the source of what you will be printing and filing in the binder. As such, think carefully about how many poems you place per page, and what kinds of identifiers you will use.\n</p><p>Deliverable: A PDF document with the collection of properly identified poems.</p>\n<p>[Analyst] <b>M2.  Build the index</b></p>\n<p>This is going to be the most time-consuming step of this project,\nso you should start it as early as possible, the first week of the project. Here is what you need to do:\nScan through the poems and build an inverted index that maps words to poems. Do this in a document.\nBesides mapping words to poems, the index should also have the TF-IDF of the words in each poem. Consider doing a little bit of programming to help you compute all this data. (Partial credit will be given for incomplete indexes. If you show a complete index at milestone M4, your score for that milestone will improve.)</p>\n<p>Deliverable: A PDF document with the index.</p>\n<p>[Analyst] <b>M3. Physical search engine</b></p>\nPrint and mount the poems document and the index document into the physical devices, i.e., the rolodex and the binder. Place the necessary labels.</p>\n<p>Deliverable: A PDF document that explains the search process for the query \u201clawless mother cooking\u201d. Include plenty of pictures of how your physical device is being used at each step. Explain the scoring process clearly.</p>\n<p>[Analyst] <b>M4. Demo</b></p>\n<p>Bring your physical devices to your appointment with the TA.</p>\n<p>[Analyst] <b>Extra credt: Word associations</b></p>\n<p>Sometimes people don\u2019t know what they are searching for and use the wrong words. For example, users could say \u201cmother\u201d when they really mean \u201cfather\u201d or \u201cparent\u201d; they could say \u201cwoods\u201d for \u201cforest\u201d, and so on.\nThis collection of poems has several words that are associated with each other. Find those words and add their occurrences in the index in a way that makes sense.\nThe goal is for you to index those associated words so that if a user searches, for example, for \u201cfather,\u201d the poems that have occurrences of \u201cmother\u201d will also be retrieved, possibly with a lower rank than poems with occurrences of \u201cfather\u201d. (Do this not just for \u201cmother\u201d and \u201cfather\u201d but for several other words in the collection that are associated with each other.)\nThe goal here is to capture the deeper semantics of concepts beyond the face value of words.\nThe extra credit work will be assessed during the live demo, there is no separate deliverable. If you choose to do it, make sure to tell the TA that you did it.\n</p>\n\n\n  \n \n \n \n<HR />\n<FONT  ><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\"  >\n<!-- #BeginDate format:fcAm1a -->Wednesday, February 25, 2015 7:25 PM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n\n", "encoding": "utf-8"}