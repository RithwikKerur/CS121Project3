{"url": "https://www.ics.uci.edu/~ejw/authoring/sandiego/minutes.txt", "content": "\nWEBDAV working group meeting minutes\nLisa Dusseault, acting WG chair\nDec 13, 2000 3:30-5:00 PM, San Diego\nReported by Larry Masinter\n\nAgenda:\n\n25 min: improved status reporting (Lisa)\n50 minutes: Open issues & review of Access control\n40 minutes: DeltaV report on things of general interest\n\nAdvanced Status Reporting\n-------------------------\n\nPresentation by Lisa Dusseault [Slides available separately]\n\nThe group discussed \n (1) is there a problem with adding bodies to responses?\n     Sense of the group was probably not, since IIS5 and apache \n     already do.\n     Sense of the group was also that clients should advertise\n     their support for advanced status reporting so that server\n     can be sure not to send back unwanted information.\n (2) A discussion of whether the XML response should replace\n    HTML bodies or be added to it\n    To be taken to list.\n (3) response-detail could be added to 207 Multi-status body\n (4) add language tag to <user-text> was agreed to be necessary\n (5) discussion of registry of message codes & tags, and\n     whether there's a registry, what clients that don't\n     understand details could do besides presenting user\n     text.\n (6) consortia could get together and define user tags\n (7) syntax of lang tag is wrong in example\n (8) suggestion to use \"application/xml\" in the examples\n    instead of \"text/xml\"\n    sense of the group _seemed_ to be to continue in the model \n    established by webDAV (text/xml) but further comments welcome\n (9) Some servers translate status codes to HTML. \n    Roy suggested that HTML could be augmented by adding an \n    XML island inside the html.\n    On the other hand, Sean pointed out, it's not trivial to \n    locate an xml island within HTML.\n    Lisa pointed out that if clients can ask for advanced error\n    reporting rather than the default, they likely prefer straight\n    XML and will construct their own presentation therefrom.\n (10) 207 gets used for a wide variety of things\n     latest proposal adds to 207\n (11) Whether status-codes should be marked with error-level, e.g.\n    fatal vs. warning vs. informational\n    Group consensus: no, because such information is already in the\n    error code used in the header of the response (100-level \n    informational, 200-level success at least partial, others are\n    probably fatal)\n\nSummary:  Most of the advanced status reporting proposal seemed\nacceptable, and work will proceed.  Lisa Dusseault to produce an\nInternet-Draft.\n\nACL Open Issues & Review\n------------------------\n\nLed by Eric Sedlar, Oracle\n\nFirst gathered an issue list, then tackled issues one by one as\nfollows:\n\n - Authentication ID and general use thereof\n\nIt was asked whether we could use the \"Authentication ID\" as a \nway to identify owners of locks & other concepts that involve\nidentifying users.\n\nThe response was that there was no reason why one couldn't\nreuse \"Principal URL\", but don't use authentication ID. \nThe Principal URL is a common piece of information, a GUI might \nthrow it up in a common way.  However, it's outside the scope of \nthe ACL draft to deal with using Principal URL for locks.\n\n - Principal collection set as a new property\n\nWhy have this new collection?  Answer: the principal URLs will \nlive in a certain location, so it might be useful way of \ndiscovering principal URLs.   There was discussion about whether \nWebDAV is being used for LDAP.  Answer:  this is just a hint to \nbrowser about which set of principals that might be useful to \nset in an ACL. \n\nIt was clarified that there can be more than one such principal\ncollection set. \n\nIt was clarified that the URLs in this property could be LDAP \nURLs rather than point to a DAV collection of Principal URLs.\n\nThe \"principal resources\" in the principal collection set\nmight allow propfind or might not.  Sometimes a principal is \njust a URI and sometimes it has properties associated with it.  \nAt any rate it's intended to be read-only for the purposes of \nthis draft.\n\nIt was decided that DAV:owner is already defined, so we can't \nmake it use Principal URL.\n\nIt was proposed that ACL draft marshal principal-collection-set \nvia OPTIONS instead.\n\nIt was suggested that principal usage should be consistent: \neither they are just hrefs, or a principal element & subelement.\n\n\n - OPTIONS usage w/ACLs (brought up by Barry Lind)\n\nIn the current draft, read privilege does not control the OPTIONS \nmethod.  Native Web servers don't do OPTIONS.  It was proposed that\nwe strike the requirement that READ doesn't control OPTIONS, and\nthat <dav:read> should be able to cover the OPTIONS request.\n\n\n - Matching current user with a principal\n\nAnne raised an issue on section 5.4.1 of the ACLs draft. Must a \nunique ID be supplied?  Answer: Text may need to be clarified.\n\n - Standard ACL privs\n\nShould <readacl> apply to reading the <current-user-priv-set>\nproperty which is ACL related?  (this property lists the \nprivileges I am currently granted on the resource) Discussion:\nAccess to entire ACL is different than just asking \"what I can \ndo\", thus doesn't need to be restricted in the same way. It's \nlikely a calculated property.  There may not be enough uniformity \nto make this a standard.  Maybe we should specify these as \nseparate operations, gated by separate privileges.\n\nOr should access to another user's privileges on a \nresource be governed by a separate privilege instead?\n\nTentative decision: <dav:readacl> only applies to ACL property \n(not current-user-priv-set).  Further discussion on list.\n\n\n - Privilege extensibility\n\nRead & readacl privileges are separate.  Can a server define \nsomething else entirely and not use either 'read' or 'readacl'?  \nWhat's the point of having a standard list of privileges if some \nof them don't have to be supported?\n\nEric explained, a conforming application will have to support \nall of these privileges, but some may be abstract.  The client \ncan discover which privileges are abstract by querying the server \nfor the privilege tree.   A priv that's abstract is one that \ncan't be sent by client. Abstract is just a way of saying that you\ncan't set it in the ACL. \n\nSean pointed out that the client will always have to parse the \nprivilege tree in order to parse ACLs.  This changes how you're \ngoing to be thinking about ACL protocol design, and it might \naffect client GUI design. \n\n\n - Getting <current-user-priv-set> for users other than current \n   user\n\nThis may be of limited usefulness, because admins can already \nlook at the ACLs.  Maybe this would be useful, but not useful \nenough.  Todays file system implementations don't let you do this.\nIt's hard to implement, even current-user-priv-set is hard to\nimplement.\n    \n\n - ACL semantics (or, should we have a UNIX-style token)\n\nCurrently we have tokens to inform client of restrictions on \nACLs, e.g. that the max numberof ACEs the server supports is 3.  \nor to inform client what order they must be in.  However, \nthere aren't enough tokens, or of enough flexibility, to make \nclient understand the limited UNIX-style permission set of RWX \n(read/write/execute) for self, group and public.  \n\nOne option: we could have tokens that indicate the ACL can only \nname 1 group and 1 user.  There is likely a set of common \nconstraints that you might expect several varieties of ACL\nsystems to have.  \n\nOther option: we could have a token that basically says \"use \nUNIX-style\".  But, if we did this, where do we stop? A token \nfor every unique ACL system?\n\nThis needs further discussion, but general feeling seemed to be \nto stick with the \"constraints\" tokens rather than move to\n\"platforms\" tokens.\n    \n\n - Separate priv. for write-owner and write-ACL\n\nBrief discussion which seemed to answer open question\n\n - Properties vs. Methods\n\nThe discussion at the last webdav meeting seemed to end with \nthe decision that the ACL property would be set with a custom \nmethod, but read with PROPFIND.  This was a compromise to make \neveryone shut up. \n\nArguments included: \n - Pro custom write method: One shouldn't want to set ACLs via \nPROPPATCH since it's less flexible than a custom method.\n - All proxy support/blocking arguments ruled out of scope by \nLisa.\n - Pro PROPPATCH: Existing DAV APIs use PROPPATCH. It's much \neasier for a client to support a new standard property with \nPROPFIND and PROPPATCH than to support a custom method.\n - Pro custom read method: clients that want to do caching of \nproperty values could screw up with live properties\n - Pro PROPFIND: fewer round-trips to get information about \na resource.\n - Pro PROPFIND: very handy to get multiple properties from\nmultiple resources using depth PROPFIND.\n - Pro custom write method: Sometimes it's very hard to set\ntwo properties that have side effects in the same request.  \nE.g. \"turn versioning on\" and \"set the ACL\" -- which applies\nfirst?  Thus PROPPATCH adds difficulties.  This argument was\nthen countered:  one could always just specify that certain \nlive properties could be specified as \"must be proppatched \nalone\", and this would meet the transactability requirements.\n - Pro custom write method: Updating live properties is often\nintended to have side effects, whereas proppatching dead \nproperties doesn't.  But the client can't tell the difference \nbetween having set a live property and a dead one, the server\nresponds the same either way to a PROPPATCH.  Thus, a custom\nwrite method is required so the client can be sure the server\nhas done what it intended.\n\nIt was suggested a server could support both: it could allow \nPROPPATCH and the custom method. \n\nFinal suggestion to stick with current proposal, and wait for \nimplementation experience to decide whether writing \nproperties is good.\n\nThe name \"right\" vs. \"privilege\" & \"permission\" will be \ndiscussed offline.\n\n\"DeltaV report on things of general interest,\"\n---------------------------------------------\n\nThis quick discussion was on features or methods required in\nDeltaV that might be more broadly applicable, thus deserved\nexplanation to the WebDAV group as a whole.\n\nGeoff Clemm, Jim Amsden\n\n(1) \"Comment\" and \"creator display name\" properties have been\n   added in DeltaV but may be generally useful.\n   \n(2) \"Update: yes\" vs. \"Overwrite: yes\" vs. \"Overwrite: update\"\n    Rather than define a new value for the Overwrite header, \n   it was decided to propose a clarification to 2518, \n   indicating that it's not necessary to do a DELETE before\n   an Overwrite: T operation.\n\n(3)  New response bodies included on 403 and 409; very similar\n   to advanced status reporting discussion (and intended to\n   interoperate)\n\n(4) Options request now takes a body: Roy pointed out it's \n    supposed to.\n\n(5)  Report method, which marshals large sets of information \n    from the server.  The intent with the REPORT functionality\n    was to be able to ask for information that the server \n    knows how to generate.  The goal is to have a set \n    of defined layouts of read-only information.  DeltaV decided\n    not to use (abuse?) POST for this feature, because it's just\n    request for information.  But unlike PROPFIND, parameters\n    need to be sent along with the name of the report being\n    requested.  Rather than modify PROPFIND to add this extra\n   information, DeltaV designed it to be a new method.\n\n*** End of Meeting ***   ", "encoding": "ascii"}