{"url": "https://www.ics.uci.edu/~aburtsev/250P/2019winter/hw/hw3.html", "content": "<HTML>\n<HEAD>\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\">\n<TITLE>250P Computer Systems Architecture</TITLE>\n<LINK HREF=\"./css/main.css\" TYPE=\"text/css\" REL=\"stylesheet\">\n<META NAME=\"Description\" CONTENT=\"cs250P Computer Systems Architecture (Anton Burtsev)\">\n<META NAME=\"Keywords\" CONTENT=\"Anton Burtsev, Burtsev, Anton, cs250P\">\n<SCRIPT SRC=\"./scripts/image_switcher.js\" LANGUAGE=\"JavaScript\"></SCRIPT>\n</HEAD>\n\n<BODY BGCOLOR=\"#FFFFFF\" LEFTMARGIN=\"0\" TOPMARGIN=\"0\" MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\">\n\t<TABLE  ID=\"text\" ALIGN=\"CENTER\" WIDTH=\"600\" BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"0\">\n\t<TR>\n\t\t<TD ALIGN=\"LEFT\" BGCOLOR=\"#FFFFFF\"><!-- top margin --> \n\t\t\t<IMG SRC=\"./images/spacer.gif\" WIDTH=\"100%\" HEIGHT=\"15\" ALT=\"\" BORDER=\"0\"/>\n\t\t</TD>\n\t</TR>\n\t<TR>\n\t<TD>\n\t\t<DIV ID=\"tech_nav\">\n\t\t\t<A HREF=\"../index.html\">Home</A>\n\t\t\t<IMG SRC=\"./images/spacer.gif\" WIDTH=\"100%\" HEIGHT=\"30\" ALT=\"\" BORDER=\"0\"/>\n\t\t</DIV>\n\t</TD>\n\t</TR>\t\n\t<TR>\n\t<TD COLSPAN=\"4\" ALIGN=\"LEFT\" BGCOLOR=\"#FFFFFF\">\n\n\n\n\t\t<P>\n\n<h1>HW3: Out-of-order Execution</h1>\n\n<p><b>Note:</b>\n  Make reasonable assumptions where necessary and clearly state them.\n  Feel free to discuss problems with classmates, but the only written material\n  that you may consult while writing your solutions are the textbook, lecture\n  notes, and lecture slides.\n  <p>\n\n<h3>Q1: Out-of-order processing </h3>\n\n  Consider an out-of-order processor similar to the one described in\n  class. The architecture has 32 logical registers (also known as\narchitected registers or program-defined registers and indicated as\nLR*) and 38 physical registers (indicated as PR*). On power up, the following program starts executing. To\n  simplify the problem, some of the initialization code is not shown and\n  you can ignore that code.  The loop in the program is executed for at\nleast three iterations.\n\n<p>\n<font size=\"2\" face=\"Verdana\">\nLine1: L.D LR1 0(LR2) <br>\nDADD LR1, LR1, LR3 <br>\nST.D LR1, 0(LR2) <br>\nDADD LR2, LR2, 8 <br>\nBNE LR2, LR4, Line1 <br>\n</font>\n\n<p>\n The processor has a\n width of 3, i.e., every pipeline stage can move up to 3 instructions through\n in every cycle. Show the renamed code for the first 15 instructions of this\n program. In what cycle will the 15th instruction get committed? \n\n<h4>Assumptions: </h4>\n\n Assume that branch prediction is perfect for a simple program like this.\n With the help of a trace cache, even fetch is perfect.\n Assume that caches are perfect as well. \n Assume that the dependent of a DADD instruction can leave the issue\n queue in the cycle right after the DADD. Assume that the dependent of an\n L.D cannot leave in the next cycle, but the cycle after that.\n Assume a ROB, an issue queue, and an LSQ with 20 entries each.\n When the thread starts executing, its logical register\n LR1 is mapped to physical register PR1, LR2 is mapped to PR2, and so on.\n An instruction goes through 5 pipeline stages before it gets placed in\n the issue queue and an additional 5 pipeline stages (6 for a LD/ST) after\n it leaves the issue queue (in other words, an instruction will take a\n minimum of 11 cycles to go through the pipeline).\n When determining if a L.D can issue, you need not check to see if\n previous store addresses have been resolved (just to make the problem simpler).\n As a further simplification, assume that stores leave the issue queue when\n their register dependences have been fulfilled (recall that a real processor\n will issue a store only when the store is the oldest instruction in the ROB).\n\n\n<h3>Q2: Load-Store Queue</h3> \n\n<p>\nThe table below lists a sequence of loads and stores in the LSQ, and the cycles \nwhen their\none (for loads) or two (for stores) input operands are made available, and their computed effective\naddresses.  Estimate when the address calculation happens for each ld/st\nand when each ld/st accesses the data memory.  Assume that the processor\ndoes <b> <i> no </i> </b> memory dependence prediction to speculatively\nissue loads.\n\n<p>\n\n<table cellpadding=\"2\" cellspacing=\"2\" border=\"1\" width=\"50%\">\n  <tbody>\n    <tr align=\"center\">\n      <th align=\"center\" width=\"25%\"> <font color=\"blue\"> LD/ST </font> </th>\n      <th align=\"center\" width=\"25%\"> <font color=\"blue\"> The register for the address calculation is made available </font> </th>\n      <th align=\"center\" width=\"25%\"> <font color=\"blue\"> The register that must be stored into memory is made available  </font> </th>\n      <th align=\"center\" width=\"25%\"> <font color=\"blue\"> The calculated effective address </font> </th>\n    </tr>\n\n    <tr align=\"left\">\n      <td align=\"center\"> LD </td>\n      <td align=\"center\"> 5 </td>\n      <td align=\"center\"> - </td>\n      <td align=\"center\"> abcd </td>\n    </tr>\n\n    <tr align=\"left\">\n      <td align=\"center\"> ST </td>\n      <td align=\"center\"> 3 </td>\n      <td align=\"center\"> 8 </td>\n      <td align=\"center\"> abde </td>\n    </tr>\n\n    <tr align=\"left\">\n      <td align=\"center\"> LD </td>\n      <td align=\"center\"> 1 </td>\n      <td align=\"center\"> - </td>\n      <td align=\"center\"> abce </td>\n    </tr>\n\n    <tr align=\"left\">\n      <td align=\"center\"> LD </td>\n      <td align=\"center\"> 4 </td>\n      <td align=\"center\"> - </td>\n      <td align=\"center\"> abde </td>\n    </tr>\n\n    <tr align=\"left\">\n      <td align=\"center\"> ST </td>\n      <td align=\"center\"> 7 </td>\n      <td align=\"center\"> 9 </td>\n      <td align=\"center\"> abde </td>\n    </tr>\n\n    <tr align=\"left\">\n      <td align=\"center\"> LD </td>\n      <td align=\"center\"> 2 </td>\n      <td align=\"center\"> - </td>\n      <td align=\"center\"> abde </td>\n    </tr>\n\n    <tr align=\"left\">\n      <td align=\"center\"> LD </td>\n      <td align=\"center\"> 6 </td>\n      <td align=\"center\"> - </td>\n      <td align=\"center\"> abbe </td>\n    </tr>\n\n  </tbody>\n</table>\n\n\n<h3>Subimt</h3>\n\n<p>Submit your solution through Gradescope <a\nhref=\"https://www.gradescope.com/courses/39177\">HW3</a> (as a PDF file (please\nmark which parts of the PDF are used for each question (this can be done\nthrough Gradescope)). \n\n\n\n\t</TD>\t\t\t\n\t</TR>\n\t<TR>\n\t\t<TD ALIGN=\"LEFT\" BGCOLOR=\"#FFFFFF\"><!-- top margin --> \n\t\t\t<IMG SRC=\"./images/spacer.gif\" WIDTH=\"100%\" HEIGHT=\"15\" ALT=\"\" BORDER=\"0\"/>\n\t\t</TD>\n\t</TR>\n\t<TR>\n\t<TD COLSPAN=\"4\">\n\t\t<DIV ID=\"tech\">Updated: February, 2019</DIV>\n\t</TD>\n\t</TR>\n\t</TABLE>\n</BODY>\n</HTML>\n\n", "encoding": "ascii"}