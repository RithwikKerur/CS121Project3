{"url": "https://www.ics.uci.edu/~pattis/ICS-21/assignments/program2/program.html", "content": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 2</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 2</h1>\r\n<h1>Intermediate Program Suite I</h1>\r\n<p>\r\n<h2>Introduction to Computer Science I\r\n<br>\r\nICS-21<br>\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\n  Please print a copy of this assignment, read it carefully, and\r\n    highlight material you think will be useful to you while you\r\n    are working on the program or submitting it.\r\n  <p>\r\n  This programming assignment is designed to ensure that you know how to write\r\n    programs that combine the standard control structures in Java: blocks, ifs,\r\n    <b>for</b> loops, and <b>break</b> statements (to terminate <b>for</b>\r\n    loops).\r\n  You will also continue gaining experience with the more basic Java features:\r\n    declarations and expression statements that use arithmetic, relational,\r\n    logical, textual, and state-change operators -including lots of\r\n    logical/<b>boolean</b> expressions.\r\n  Finally, you will practice writing, testing, and debugging programs using\r\n    <b>iterative enhancement</b>: a divide-and-conquer technique for building\r\n    and testing programs a bit at a time.\r\n  <p>\r\n  You will write three programs in this assignment.\r\n  This time, your programs must check whether some (not all) inputs are valid\r\n    (and reprompt the user for them -or discard them- if they are not).\r\n  <p>\r\n  As always, you can check the behavior of your programs against mine by\r\n    downloading my executable zip file\r\n     <a href=\"executable.zip\">Program #2 Executables</a>\r\n     and unzipping it.\r\n  See <a href=\"../program1/program.html\">Program #1</a>) for details on how\r\n     to run these executables on both PCs and in Eclipses (PCs and Macs).\r\n  Remember, you can run these programs, but not examine their source (Java)\r\n    code.\r\n  Copy the input/output form of the executable programs in the programs that\r\n    you write: use exactly the same prompts and messages.\r\n  For the <b>Darts</b> and <b>MontyHall</b> programs, there are executable\r\n    versions for the kernel and each enhancement.\r\n  <p>\r\n  For your information, I am listing below the number of lines in my solution\r\n    programs.\r\n  These programs are formated in the standard way.\r\n  I am counting only lines with code (even if the only code on the line is\r\n    a brace that closes a block); but I am not counting blank lines norlines \r\n    filled with comments.\r\n  My \"darts\" program is 24 lines; my \"increasing\" program is 30 lines; my\r\n    \"monty hall\" program is 51 lines.\r\n  Your programs might be smaller, and they might be larger; but if your program\r\n    starts going over 2-3 times the size of mine, you might want to rethink it\r\n    (or come get some help).\r\n  <p>\r\n  Please declare all variables to have their <b>natural</b> type: if some\r\n    variable always stores integral values, declare it to be an <b>int</b>.\r\n  If later in the program you need to use it as a <b>double</b>, cast it\r\n    there.\r\n  <p>\r\n  Please follow the instructions below for each program: finish each\r\n    enhancement before continuing to the next one (including printing\r\n    whatever messages it displays in the console, copied exactly).\r\n  Please use the infinite <b>for</b> loop and <b>if</b>/<b>break</b>\r\n    statements to write all loops; when you are finished, you may simplify\r\n    these loops.\r\n  <p>\r\n  As we improve our programming abilities, we should improve our programming\r\n    style too (which will be part of the grading criteria for upcoming\r\n    programming assignments).\r\n  In each of these programs, please pay particularly close attention to the\r\n     following style principles (discussed in the lecture on\r\n     <a href=\"../../lectures/style/lecture.html\">Coding Style</a>).\r\n  <ul>\r\n    <li><b>Names</b>: Choose good names for variables.\r\n    <li><b>Alignment</b>: Indent statements to clarify the meaning of their\r\n        control structures.\r\n    <li><b>Locality</b>: Keep related information together; separate unrelated\r\n        information.\r\n    <li><b>Comments</b>: Document your code appropriately with comments.\r\n  </ul>\r\n  Please examine the\r\n    <a href=\"../../programs.html\">Sample Programs</a>\r\n    that I have provided for examples of good programming style.\r\n  Learn to copy this style, just as artists in the middle ages learned to copy\r\n    their master's style before developing their own.\r\n  In this program you will get feedback on your style (but it won't be graded).\r\n  In the next program you will be graded on your style.\r\n  <p>\r\n  To work on this assignment, create one Java project (call it <b>Program2</b>)\r\n    and create three new Java classes in it (as you did for one class in \r\n    Program #0).\r\n  Each class will contain a program that you will write to solve one problem;\r\n    name the classes <b>Darts</b>, <b>Increasing</b>, and <b>MontyHall</b>.\r\n  Write, run, and debug each class/program as you did in Program #1.\r\n  When you finish each part, submit its <b>.java</b> file.\r\n  <p>\r\n  <b>Only one programmer of the pair should dropoff the programs: the same one\r\n       for each part.\r\n     It doesn't matter which of the pair submits, but that person should\r\n       submit all the parts.\r\n     Of course, each program should contain both student names (in the\r\n        comment: the same one you cut, pasted, ane filled in at the top of\r\n        each program in <a href=\"../program1/program.html\">Program #1</a>).</b>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Darts -->\r\n\r\n<a name=\"Darts\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Calculating &pi; with Darts</b></td>\r\n<td width =\"80%\">\r\n  Write a program that performs the following tasks.\r\n    <ul>\r\n      <li>Prompt the user for the number of darts to throw (accept only\r\n            numbers greater than 0, reprompting the user whenever a\r\n            non-positive value is entered -no matter how many times).\r\n      <li>Simulate throwing that many darts at a 2x2 square whose center is\r\n           the origin by using a random number generator, constrained by the\r\n           square's boundary, to generate <b>x</b> and <b>y</b> coordinates\r\n           for each dart.\r\n      <li>Approximate the value of &pi; (pi) by computing the ratio of those\r\n            darts that land inside a circle inscribed in the square\r\n            <b>divided by</b> the number of darts that landed inside the\r\n            square (the total number of darts thrown, since all darts are\r\n            constrained to land in the square).\r\n    </ul>\r\n  That calculation approximates the ratio of the circle's area to the\r\n    square's:<br>\r\n  <image src=\"pi.gif\">\r\n  <p>\r\n  To simulate throwing darts, write an expression that returns a <b>double</b>\r\n    in the range <b>-1.0</b> to <b>+1.0</b> that calls the <b>Math.random</b>\r\n    method, which returns a result between <b>0.0</b> and <b>1.0</b>, and\r\n    use this expression when generating the <b>x</b> and <b>y</b> coordinates.\r\n  Doing so ensures that both coordinates are within the square.\r\n  Use multiplication and addition/subtraction to linearly \"grow\" and \"shift\"\r\n    the range of the <b>Math.random</b> function to the desired range for\r\n    each coordinate.\r\n  <p>\r\n  Use a <b>boolean</b> expression to determine whether or not the coordinates\r\n    of the dart are inside or outside the circle that is inscribed in the\r\n    square (remember some geometry).\r\n  <p>\r\n  Design, code, test, and debug this program using\r\n    <b>iterative-enhancement</b>, as 6 mini-projects.\r\n  Test each project to ensure that it is correct before proceeding to the next\r\n    enhancement.\r\n  This is the same methodology that we will use for larger programs; so, it is\r\n    a good idea to practice this technique here, where the program is small,\r\n    even if you can write the entire program all at once.\r\n  Later, we will discuss this technique in greater depth.\r\n  Before starting to write your program, run my executable a few times to\r\n    familiarize youself with its input and output.\r\n  <ol>\r\n    <li>Write a kernel program that prompts the user for the number of darts\r\n          to throw, and then loops that many times, printing the literal\r\n          <b>\"Dart Thrown\"</b> for each loop iteration.\r\n        Here, assume the user always enters a positive number.\r\n        Ensure the number of times <b>Dart Thrown</b> is printed is the same as\r\n          the requested number of darts (it is easy to be off by 1).\r\n        Enter a few different small values to test it.\r\n    <p>\r\n    <li>Enhance the program so that after it prints <b>Dart Thrown</b>,\r\n          it simulates throwing a dart and prints the random <b>x</b>- and \r\n          <b>y</b>-coordinates of each dart as it is thrown.\r\n        Ensure that these values change, are all between <b>-1.</b> and\r\n          <b>+1.</b> and seem random.\r\n    <p>\r\n    <li>Enhance the program so that after it prints the\r\n          <b>x</b>- and <b>y</b>-coordinates of each dart, it prints either\r\n          <b>\"Inside Circle\"</b> or <b>\"Outside Circle\"</b> for that\r\n          dart's coordinates.\r\n        Using a calculator, hand check that the inside/outside calculation is\r\n          computing its result correctly for a few darts, printing each\r\n          message correctly.\r\n    <p>\r\n    <li>Enhance the program to keep track of (count up) the number of darts\r\n          that land inside the circle, and display this value during each\r\n          iteration of the loop.\r\n        Ensure that for each dart that lands inside the circle, this count\r\n          increments by one.\r\n        IMPORTANT REQUIREMENT: All counters in Java should be of type\r\n          <b>int</b>; use explicit conversion (casting) if you need to\r\n          treat these values like <b>double</b>s, in some later computation.\r\n    <p>\r\n    <li>Enhance the program to approximate &pi; (pi) by computing the ratio of\r\n          darts that land in the circle to the total number of darts thrown,\r\n          multiplying this value by 4 (the area of the circle) according to\r\n          the formula above.\r\n        Display this result before terminating.\r\n    <p>\r\n    <li>Enhance the program to allow the user to enter only positive values in\r\n          the original prompt for the number of darts to throw; reprompting\r\n          whenever the enters a non-positive value.\r\n        Use a separate loop for this validation; do not use any fancy version\r\n          of <b>Prompt.forInt</b>: just use the simplest one with a single\r\n          <b>String</b> operand.\r\n        Test your code by trying to enter <b>0</b> and/or negative numbers\r\n          (multiple times).\r\n  </ol>\r\n  Finally, remove all intermediate output statements: only the final answer\r\n    should appear in the final output (it should produce exactly the same\r\n    output as my executable).\r\n  <p>\r\n  Hand in ONLY THE FINAL ENHANCEMENT of the program: the one meeting the\r\n    complete specifications, with intermediate output statements removed.\r\n  Test it by throwing 10; 100; 1,000; 10,000; 100,000, 1 million, and\r\n     10 million darts (try a few billion, if you have a fast computer).\r\n  Also, try the same number of darts more than once and observe that the\r\n    computed value changes, because the darts are thrown randomly each time.\r\n  Typically, the more darts thrown, the better the answer approximates the true\r\n    value of &pi; (pi).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n<!-- Increasing -->\r\n\r\n<a name=\"Darts\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Increasing Sequences</b></td>\r\n<td width =\"80%\">\r\n  Write a program that performs the following tasks.\r\n    <ul>\r\n      <li>Uses a sentinel loop to prompt user for a sequence of numbers until\r\n            the user enters any negative number (so only non-negative valukes\r\n            are processed by the program).\r\n          As the values are input the program ...\r\n      <li>Counts how many numbers are entered (excluding the sentinel).\r\n      <li>Counts how often an entered values is larger than the value\r\n            entered before it (e.g., values in the sequence are increasing).\r\n      <li>Computes the longest sequence of entered values that are strictly\r\n            increasing.\r\n    </ul>\r\n  <p>\r\n  We will use two <b>int</b> variables to keep track of the previous value\r\n    entered and the current value entered, to determine if the two values\r\n    in the sequence is increasing.\r\n  Before entring a new \"current\" value, the old \"current\" value must be stored\r\n    in the previous variable (see step 3 below).\r\n  This idiom is useful in many programs.\r\n  <p>\r\n  Design, code, test, and debug this program using\r\n    <b>iterative-enhancement</b>, as 7 mini-projects.\r\n  Test each project to ensure that it is correct before proceeding to the next\r\n    enhancement.\r\n  This is the same methodology that we will use for larger programs; so, it is\r\n    a good idea to practice this technique here, where the program is small,\r\n    even if you can write the entire program all at once.\r\n  Later, we will discuss this technique in greater depth.\r\n  <p>\r\n  Before starting to write your program, run my executable a few times to\r\n    familiarize youself with its input and output.\r\n  Test your program (and mine) by entering the values specified below.\r\n  You can use short input sequences to test the early enhancements to ensure\r\n    that they work correctly; you must use longer input sequences to test the\r\n    latter enhancements.\r\n  Don't just use my test inputs; construct your own test inputs as well.\r\n  <ol>\r\n    <li>Write a kernel program that declares a <b>current</b> variable, and\r\n          prompts the user for its value; if its value is non-negative, the\r\n          program loops until the user enters a negative value, at which point\r\n          the loop terminates.\r\n        At the end, the program should print <b>Loop finished</b>.\r\n    <p>\r\n    <li>Enhance the program so that it counts the number of non-negative values\r\n          the user enters.\r\n        Instead of printing <b>Loop finished</b>, print the number of\r\n           non-negative values that the user entered, in the form\r\n           <b><pre>  Entered a total of 4 non-negative values</pre></b>\r\n        Note, if the user enters a negative value to the first prompt,\r\n           the loop is not executed and there are a total of 0 non-negative \r\n           numbers.\r\n    <p>\r\n    <li>Enhance the program so that it declares a variable <b>previous</b>\r\n          and updates it as appropriate: at the bottom of the loop, the\r\n          program should print both the previous and current  values.\r\n         If we enter <b>2</b> then <b>3</b> then <b>1</b> then <b>4</b> then\r\n           <b>-1</b> the program should print\r\n<b><pre>  Enter first value: 2\r\n  Enter next value: 3\r\n  previous = 2, current = 3\r\n  Enter next value: 1\r\n  previous = 3, current = 1\r\n  Enter next value: 4\r\n  previous = 1, current = 4\r\n  Enter next value: -1\r\n\r\n  Entered a total of 4 non-negative values</pre></b>\r\n(notice those outputs are interspersed with the prompts).\r\n    <p>\r\n    <li>Enhance the program so that it declares a variable <b>increaseCount</b>\r\n          and uses it to count how many current values are bigger than their\r\n          previous values.\r\n        Update the output to show the number of increases as well.\r\n         If we enter <b>2</b> then <b>3</b> then <b>1</b> then <b>4</b> then\r\n           <b>-1</b> the program should print\r\n<b><pre>  Enter first value: 2\r\n  Enter next value: 3\r\n  previous = 2, current = 3, increaseCount = 1\r\n  Enter next value: 1\r\n  previous = 3, current = 1, increaseCount = 1\r\n  Enter next value: 4\r\n  previous = 1, current = 4, increaseCount = 2\r\n  Enter next value: -1\r\n\r\n  Entered a total of 4 non-negative values</pre></b>\r\n    <p>\r\n    <li>Enhance the program so that it declares a variable\r\n          <b>increaseInARow</b> and uses it to count the length\r\n          of each sequence of increasing values.\r\n        Whenever the previous value is less than the current one,\r\n          this variable increases by 1; otherwise this value should be\r\n          reset to 0 (because the increasing sequence has ended).\r\n        Update the output to show the number of increases in a row as well.\r\n        If we enter a slightly longer, different input\r\n          <b>2</b> then <b>4</b> then <b>1</b> then <b>3</b> then\r\n          <b>5</b> then <b>7</b> then <b>4</b> then <b>6</b> then\r\n          <b>-1</b> the program should print\r\n<b><pre>  Enter first value: 2\r\n  Enter next value: 4\r\n  previous = 2, current = 4, increaseCount = 1, increaseInARow = 1\r\n  Enter next value: 1\r\n  previous = 4, current = 1, increaseCount = 1, increaseInARow = 0\r\n  Enter next value: 3\r\n  previous = 1, current = 3, increaseCount = 2, increaseInARow = 1\r\n  Enter next value: 5\r\n  previous = 3, current = 5, increaseCount = 3, increaseInARow = 2\r\n  Enter next value: 7\r\n  previous = 5, current = 7, increaseCount = 4, increaseInARow = 3\r\n  Enter next value: 4\r\n  previous = 7, current = 4, increaseCount = 4, increaseInARow = 0\r\n  Enter next value: 6\r\n  previous = 4, current = 6, increaseCount = 5, increaseInARow = 1\r\n  Enter next value: -1\r\n\r\n  Entered a total of 8 non-negative values</pre></b>\r\n    <p>\r\n    <li>Enhance the program so that it declares a variable\r\n          <b>maxIncreaseInARow</b> and uses it to count the length\r\n          of the longest sequence of increasing values.\r\n        If we again enter the input\r\n           <b>2</b> then <b>4</b> then <b>1</b> then <b>3</b> then\r\n           <b>5</b> then <b>7</b> then <b>4</b> then <b>6</b> then\r\n           <b>-1</b> the program should print\r\n<b><pre>  Enter first value: 2\r\n  Enter next value: 4\r\n  previous = 2, current = 4, increaseCount = 1, increaseInARow = 1, maxIncreaseInARow = 1\r\n  Enter next value: 1\r\n  previous = 4, current = 1, increaseCount = 1, increaseInARow = 0, maxIncreaseInARow = 1\r\n  Enter next value: 3\r\n  previous = 1, current = 3, increaseCount = 2, increaseInARow = 1, maxIncreaseInARow = 1\r\n  Enter next value: 5\r\n  previous = 3, current = 5, increaseCount = 3, increaseInARow = 2, maxIncreaseInARow = 2\r\n  Enter next value: 7\r\n  previous = 5, current = 7, increaseCount = 4, increaseInARow = 3, maxIncreaseInARow = 3\r\n  Enter next value: 4\r\n  previous = 7, current = 4, increaseCount = 4, increaseInARow = 0, maxIncreaseInARow = 3\r\n  Enter next value: 6\r\n  previous = 4, current = 6, increaseCount = 5, increaseInARow = 1, maxIncreaseInARow = 3\r\n  Enter next value: -1\r\n\r\n  Entered a total of 8 non-negative values</pre></b>\r\n    <p>\r\n    <li>Enhance the program so that doesn't print any intermediate output.\r\n        To do this, comment-out all the intermediate print statements,\r\n          so they are still in the program (but do nothing, because they are\r\n          in comments), and can be reactivated later, if the need arises.\r\n        So, besides the prompting, the program prints just the total number of\r\n          non-negative values entered, the total number of times the values \r\n          increased, and the length of the longest sequence of increasing\r\n          values.\r\n  </ol>\r\n  Hand in ONLY THE FINAL ENHANCEMENT of the program: the one meeting the\r\n    complete specifications, with intermediate output statements commented-out.\r\n  <p>\r\n  Test your program (and mine) on short and long sequences of numbers, with\r\n    different patterns of increasing and decreasing values.\r\n  Think of boundary cases, for example where the first two values entered\r\n    aren't increasing (different from all the examples above) and verify that\r\n    your program computes the right answers.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n<!-- Monty Hall -->\r\n\r\n<a name=\"Monty Hall\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Monty Hall<br>Let's Make a Deal</b></td>\r\n<td width =\"80%\">\r\n  In the 1970s, a popular TV game show was \"Let's Make A Deal\", whose host was\r\n    Monty Hall.\r\n  A typical contestant would be shown three doors: behind one door was a\r\n   valuable prize; behind the other two doors were \"goats\" (worthless prizes).\r\n  The contestant would first pick a door.\r\n  Then, Monty would often show them a goat prize behind one of the other doors;\r\n    no matter what door the contestant picked, there was always one other door\r\n    with a goat prize behind it for Monty to show them.\r\n  Next, Monty would often ask the contestant whether or not he/she wanted to\r\n    keep the door they originally chose, or switch to the other door (the one\r\n    not shown by Monty).\r\n  <p>\r\n  Is there an advantage to staying with your door? \r\n  Is there an advantage to switching doors?\r\n  Are both options equally good (in terms of how likely the contestant will win\r\n    the valuable prize)?\r\n  You could watch many shows and keep statistics on what strategy the\r\n    contestant used and whether he/she won or lost with that strategy.\r\n  Or, we can write a program that can simulate very many games, to determine if\r\n     there is a best strategy, and what it is.\r\n  Although such a computer simulation will tell you <b>which</b> strategy is\r\n    best, it won't tell you <b>why</b> that strategy is best.\r\n  <p>\r\n  You may also want to use your reasoning powers to deduce the correct answer\r\n    before running my/your program,  but this problem is notoriously difficult\r\n    to solve correctly.\r\n  Marilyn vos Savant (she writes the column, \"Ask Marilyn\", in Parade Magazine;\r\n    she supposedly has the highest IQ of anyone in the US) discussed this\r\n    problem in her column in the early 1990s and it generated a huge volumne of\r\n    mail, many from PhDs in mathematics who (incorrectly) disagreed with her\r\n    analysis.\r\n  If you do a web search, you'll find lots written about the Monty Hall\r\n    problem.\r\n  But before you do, try to come up with your own solution to this problem.\r\n  In fact, it appears in the following clip from the movie \r\n     <a href=\"http://www.youtube.com/watch?v=6Rl_p3JlSd0&feature=related\" target=\"main\">\r\n     21</a>; the student supplies the answer but does not justify the\r\n     solution.\r\n  You can also see various episodes of Let's Make a Deal on You Tube.\r\n  <p>\r\n  What is interesting here is that different people can each effectively argue\r\n    that their solution is correct (because the problem is subtle, and many\r\n    wrong solutions sound right).\r\n  Once someone has formulated a solution, it is difficult to convince them that\r\n    they are wrong.\r\n  Yet, we can write a simple computer program to determine which, if any,\r\n    strategy is best: even given such evidence, people have a hard time\r\n    \"giving up\" on an incorrect solution.\r\n  <p>\r\n  So, you will write a program that prompts the user for the strategy to use\r\n    (switch to the remaining door or stay with the door you chose originally),\r\n    the number of games to play (accept only numbers greater than 0), and\r\n    whether to output a detailed trace of the program; then it simulates\r\n    playing that many games, keeping track of how often a player with\r\n    the chosen strategy wins.\r\n  The program prints the statistics it collects (the number of times the player\r\n    won and lost) at the end: from these numbers, you can deduce which strategy\r\n    is best (if there really is a significant difference).\r\n  <p>\r\n  To simulate choosing doors, a random door is chosen as the \"good prize\" door,\r\n    and a random door is chosen as the \"contestant's door\", and then Monty\r\n    chooses the door to expose: it can't be either the good prize or chosen\r\n    door.\r\n  Cut/paste the following  code after the <b>public class MontyHall</b>\r\n     but before <b>public static void main(String[] args)\r\n  </b><b><pre>  //This method returns a random int value in the range [1,3]\r\n  static int getRandomDoor()\r\n  {return (int)(3*Math.random() + 1);}</pre></b>\r\n  <p>\r\n  When you need to choose a random door, call this method as\r\n    <b>getRandomDoor()</b> and store the result of each call in a variable \r\n    (e.g., <b>prizeDoor</b>, <b>chosenDoor</b>, <b>exposedDoor</b>) for use in\r\n    subsequent statements in the program.\r\n  <b>Math.Random()</b> returns a value in <b>[0,1)</b> the expression, before\r\n     it is converted to an <b>int</b> has a value in <b>[1,4)]</b>.\r\n  By converting to an <b>int</b>, either <b>1</b>, <b>2</b>, or <b>3</b>\r\n    is the result (it truncates down, and <b>4)</b> means all numbers up to\r\n    but not including <b>4</b> can be generated), each with equal probability.\r\n  <p>\r\n  Design, code, test, and debug this program using\r\n    <b>iterative-enhancement</b>, as 7 mini-projects.\r\n  Test each project to ensure that it is correct before proceeding to the next\r\n    enhancement.\r\n  This is the same methodology that we will use for larger programs; so, it is\r\n    a good idea to practice this technique here, where the program is small.\r\n  Soon, we will discuss this technique in greater depth.\r\n  <p>\r\n  Before starting to write your program, run my executable a few times to\r\n    familiarize youself with its input and output.\r\n  Run the executable using a detailed trace, so you can better understand\r\n    this program as well.\r\n  <ol>\r\n    <li>Write a kernel program that prompts the user for the number of games\r\n          to play, and then loops that many times, printing the literal\r\n          <b>\"Game Played\"</b> for each loop iteration.\r\n        For this phase, always assume the user enters correct input (a positive\r\n           number).\r\n        Ensure the number of times <b>Game Played</b> is printed is the same as\r\n          the requested number of games (enter a few different small values to\r\n          test it).\r\n    <p>\r\n    <li>Enhance the program so that before each game is played, the program\r\n          randomly chooses which\r\n          door has the prize behind it and which door the contestant chooses;\r\n          print these doors for each game (.e.g, <b>Prize behind door 1;\r\n          Contestant chooses door 2</b> -of course, these doors may have the\r\n          same number).\r\n        After printing these choices, the program should prompt the user (in\r\n          this enhancement, the user plays Monty Hall) for which door number to\r\n          expose to the contestant.\r\n        Print this door number too.\r\n    <p>\r\n    <li>Enhance the program to first prompt for whether or not to use the\r\n          <b>switch strategy</b>: whether or not for the simulated player\r\n          to switch doors once Monty exposes his door.\r\n        Store this <b>boolean</b> value in a variable.\r\n        Then, after each game is played, print whether or not the player won\r\n          or lost with that strategy (based on the strategy -the value of this\r\n          variable- and all the chosen and prize doors).\r\n    <p>\r\n    <li>Enhance the program to keep track of the number of times that the\r\n          player won.\r\n        When printing whether the player won or lost, print the total number\r\n          of times that they have won.\r\n    <p>\r\n    <li>Enhance the program to allow the user to enter only positive values in\r\n          the original prompt for the number of games to play; if the user\r\n          enters an incorrect number, reprompt.\r\n        Use a separate loop for this validation; do not try to use some fancy\r\n          version of <b>Prompt.forInt</b>: just use the simplest one with a\r\n          single <b>String</b> parameter).\r\n        Test your code by trying to enter <b>0</b> or negative numbers to\r\n          ensure the user is continually prompted to enter a value until they\r\n          enter a positive one.\r\n    <p>\r\n    <li>Enhance the program to randomly choose which door to expose (so Java\r\n          can run this simulation at a high speed, without bothering the user\r\n          to enter this value).\r\n        Do this by repeatedly (in a loop) choosing any random door, but\r\n          terminating the loop (allowing that choice) only when the choice is\r\n          not the door chosen by the contestant, and not the door containing\r\n          the prize (this is accomplished similarly to the enhancement above).\r\n        Display each attempt (indented) and the final choice for which door to\r\n          expose after terminating.\r\n        Your program should be printing information identically to mine, when\r\n          mine is run with a detailed trace.\r\n    <p>\r\n    <li>Enhance the program to prompt for whether or not to provde a detailed\r\n          trace.\r\n        Store this <b>boolean</b> value in a variable.\r\n        Execute each of the your intermediate/tracing output statements\r\n          only if this tracing variable is set to <b>true</b>.\r\n        If this tracing variable is set to <b>false</b>, only the final\r\n          answers should appear in the final output (after the prompt\r\n         lines): a line printing the number of games played, and the number of\r\n         times a player using the selected strategy won and the number of\r\n         times the player lost.\r\n </ol>\r\n  Hand in ONLY THIS FINAL ENHANCEMENT of the program: the one meeting the\r\n    complete specifications and printing just six lines of output, including\r\n    the three prompts.\r\n  Test it by playing 10; 100; 1,000; 10,000; 100,000, and 1 million games.\r\n  Also, try the same number of games more than once and observe that the\r\n    computed values change, because the doors are chosen randomly each time.\r\n  Typically, the more games played, the more accurate the answer is.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n</body>\r\n</html>\r\n", "encoding": "ascii"}