{"url": "https://www.ics.uci.edu/~aburtsev/143A/2018fall/lectures/lecture11-synchronization/lock-free.txt", "content": "www.intel.com/software/tsx\n\nPerformance paper: \nhttp://pcl.intel-research.net/publications/SC13-TSX.pdf\n\nIntel Transactional Synchronization Extensions\nhttp://software.intel.com/sites/default/files/blog/393551/sf12-arcs004-100.pdf\n\nIntel optimization manual\nhttps://www-ssl.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf\n\nAnalysis of Haswell\u2019s Transactional Memory (good entry paper)\nhttp://www.realworldtech.com/haswell-tm/2/\n\nFrom Intel:\nhttp://pcl.intel-research.net/publications/SC13-TSX.pdf  \nhttp://software.intel.com/sites/default/files/managed/4d/2a/hpca_TSX.pdf \n                                                                                                                                                                                         \n Emulator based (not sure how relevant these results are) \n    http://www.news.cs.nyu.edu/~jinyang/pub/skiplist-apsys13.pdf \n\n More papers from Google Scholar \n http://scholar.google.com/scholar?bav=on.2,or.r_qf.&bvm=bv.61190604,d.b2I,pv.xjs.s.en_US.iiOPisWRDb4.O&biw=1680&bih=940&um=1&ie=UTF-8&lr=&cites=441794717481093627 \n\nData structures (PPoPP'14): \n\n     https://sites.google.com/site/ppopp2014/home/schedule\n\n     A general technique for non-blocking trees\n     http://dl.acm.org/citation.cfm?id=2555267\n\n     Pragmatic Primitives for Non-blocking Data Structures\n     http://www.cs.utoronto.ca/~tabrown/podc13/paper.pdf\n     \nThe Common System Interface: Intel\u2019s Future Interconnect\nhttp://www.realworldtech.com/common-system-interface/5/\n", "encoding": "utf-8"}