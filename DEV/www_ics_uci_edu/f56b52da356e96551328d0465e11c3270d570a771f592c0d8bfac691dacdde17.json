{"url": "https://www.ics.uci.edu/~stasio/winter06/lab5/lab5.html", "content": "<html>\r\n\t<head>\r\n\t\t<title>ICS H22 Winter06, Lab 5</title></head>\r\n\t<body bgcolor=\"#ffc4de\">\r\n\t\t<h2 align=\"center\">Lab #5</h2>\r\n\t\t<h3>\r\n\t\t\tDue: Friday, March 10, 11:59PM</h3>\r\n\t\t<p>\r\n\t\tIn this lab you write a program that simulates a ride at a theme park. In this \r\n\t\tride, people get into a small boat, navigate the boat through a course of \r\n\t\tobstacles and then dock and leave the boat. Management would like to assess how \r\n\t\tlong people spend waiting for the ride and as well as how much utilization they \r\n\t\tare getting out of each boat. Note that each person takes a variable amount to \r\n\t\ttime to navigate the course, so the order they depart is not necessarily the \r\n\t\torder in which they leave. Also, there is only one spot on the dock where a \r\n\t\tperson can get into a boat, so while the person is climbing in, boats must wait \r\n\t\tin line. This means you will have to have two queues: one for people waiting to \r\n\t\tboard a boat and one for boats waiting to be boarded. For simplicity, you can \r\n\t\tassume that unloading from the boat happens quickly and doesn't need to be \r\n\t\taccounted for.\r\n\t\t<p>\r\n\t\t\tThe interface should be whatever you like:&nbsp; The easiest is the console \r\n\t\t\tinput.&nbsp; The inputs to the simulation will include the <strong>average \r\n\t\t\t\tinter-arrival time </strong>of riders, the <strong>average loading time </strong>\r\n\t\t\tfor a rider, the <strong>average ride time </strong>for a rider, the total <strong>length \r\n\t\t\t\tof the simulation </strong>and the <strong>number of boats</strong>\r\n\t\t. The inter-arrival time of riders is the length of time that elapses after one \r\n\t\triders arrives until the next one arrives. This will vary from rider to rider, \r\n\t\tbut you can input the average value so that you can examine the system under \r\n\t\tdifferent levels of demand. Similarly, the loading and ride time of each person \r\n\t\twill vary, but you can specify the average of these values.\r\n\t\t<p>\r\n\t\tTime is measured in an arbitrary unit which we will call `clock ticks'. It's \r\n\t\tnot terribly important what a clock tick actually represents because all the \r\n\t\tvalues are relative. Any interval of time (including the average values input \r\n\t\tby the user) should be specified as integers, so time is rounded to the nearest \r\n\t\tclock tick. I recommend that you keep the average inter-arrival time of riders \r\n\t\tto be at least 100 so as to minimize the effects of rounding. If the \r\n\t\tinter-arrival time is 100, then you should simulate the system for about a \r\n\t\tmillion clock ticks so that the values that you are measuring will converge to \r\n\t\tan average value. (The longer you run the simulation, the more stable these \r\n\t\tvalues will be).\r\n\t\t<p>\r\n\t\t\tThe running time of your algorithm should <strong>not </strong>depend on the \r\n\t\t\tnumber of clock ticks that you run your simulation. This is because you should \r\n\t\t\twrite your code as an <strong>event-driven </strong>simulation. That is, you \r\n\t\t\twill determine the next event (whether it be the arrival of a person to the \r\n\t\t\trider, the departure of a boat with a rider from the dock, the return of a boat \r\n\t\t\tand rider to the dock) and advance the clock automatically to the time of the \r\n\t\t\tnext event. That is, your program should take roughly the same amount of time \r\n\t\t\tif the average inter-arrival time, loading time and riding time is 10 and the \r\n\t\t\tsimulation length is 1000 as it would if all of these values were multiplied by \r\n\t\t\t10.&nbsp; In order to do that you should store all your future events on a <STRONG>Priority \r\n\t\t\t\tQueue, </STRONG>where the events are ordered by the time they are scheduled \r\n\t\t\tto occur.&nbsp; To determine the next event, you just have to take the element \r\n\t\t\twith the smallest time value.&nbsp; The code for the <STRONG>Priority Queue</STRONG>\r\n\t\t\tclass is supplied below.<STRONG> </STRONG>\r\n\t\t<P>The PriorityQueue is written as a generic data structure so that it can store \r\n\t\t\tany set of items which implements the interface <STRONG>Comparable </STRONG>which \r\n\t\t\tI have also provided for you. Note that your class which implements Comparable \r\n\t\t\twill have to implement a method <CODE>compareTo </CODE>because it is declared \r\n\t\t\tas an abstract method in Comparable. The <CODE>deleteMin() </CODE>\r\n\t\tmethod returns the item with the smallest values according to the compareTo \r\n\t\tmethod.\r\n\t\t<P>\r\n\t\t\tYou are also provided with other classes to use, e.g. the <strong>EventGenerator, </strong>\r\n\t\t\twhich generates the arrival of riders. Your program should have an instance of \r\n\t\t\tthis class to generate the input data. Before you run your simulation, you \r\n\t\t\tshould use the following method to inform the event generator of the parameters \r\n\t\t\tinput by the user:<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<code>public void setParameters( int avgInterArrivalTime, int avgLoadingTime, int \r\n\t\t\t\t\t\tavgRideTime ) </code>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\tNote that the EventGenerator is expecting positive integers. If you call the \r\n\t\t\tmethod with a zero or negative integer, then it will throw a <strong>IllegalTimeValueException\r\n\t\t\t</strong>(also provided). Whenever, your simulator needs to generate a new \r\n\t\t\tcustomer, you should use the following method:\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<code>public Rider getNextEvent( int lastArrival ) </code>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\tThis method takes in the time that the last customer arrived and will return a \r\n\t\t\tnew instance of class <strong>Rider </strong>. Class Rider keeps the arrival \r\n\t\t\ttime and loading time and riding time for that particular customer. You may \r\n\t\t\twant to add some additional data members or methods to class <strong>Rider </strong>\r\n\t\t.\r\n\t\t<p>\r\n\t\t\tThe EventGenerator uses a random number generator to produce the inter-arrival \r\n\t\t\ttime, loading time and riding time for the particular customer. On average, the \r\n\t\t\tvalues generated will match the average values input by the user, but there are \r\n\t\t\tsome random fluctuations in the values. In this case, it is implemented as a <strong>\r\n\t\t\t\tPoisson Process </strong>\r\n\t\t. You will probably learn about these some time in your career here in \r\n\t\tICS.&nbsp; For example, this is the standard probabilistic process which we use \r\n\t\tto simulate networking events like packet arrivals.&nbsp; In fact, the code you \r\n\t\tare writing in this lab, for boat-and-riders simulation, is based on the same \r\n\t\tprincipes as real-life simulators of networks, chips, distributed computing \r\n\t\tapplications, biological systems, etc, etc.\r\n\t\t<p>\r\n\t\t\tYou should also use the priority queue data structure to store the boat/rider \r\n\t\t\tpairs are currently out on the course. You want to store these in a priority \r\n\t\t\tqueue since you will need to determine which one returns next. The constructor \r\n\t\t\tfor PriorityQueue takes in a value which is the maximum number of items that \r\n\t\t\twill ever be stored in the priority queue. Each time you run a simulation, you \r\n\t\t\tshould create an instance of class PriorityQueue in which this value is set to \r\n\t\t\tbe the number of boats. The method <code>add </code>throws an instance of class <strong>\r\n\t\t\t\tQueueFullException </strong>\r\n\t\t(also provided) if you attempt to add an item when the priority queue is full. \r\n\t\tYou will need to provide code which will catch that exception when you call the \r\n\t\tadd method.\r\n\t\t<p>\r\n\t\t\tYou will need to write your own class <strong>Queue </strong>\r\n\t\t. This should also be written as a generic data structure. In particular, you \r\n\t\twill have an instance of Queue which stores instances of Boat and an instance \r\n\t\twhich stores instances of Rider. You can choose how you want to implement your \r\n\t\tqueue. However, your choice must be completely transparent to the user.\r\n\t\t<p>\r\n\t\t\tThe statistics which you should print out after processing all the events are:\r\n\t\t</p>\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\tTotal number of rider served.\r\n\t\t\t<li>\r\n\t\t\tAverage and maximum waiting time of a rider.\r\n\t\t\t<li>\r\n\t\t\tAverage and maximum percentage of time that a boat is waiting.\r\n\t\t\t<li>\r\n\t\t\t\tAverage rider queue length - averaged over all clock ticks.\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t<p></p>\r\n\t\t<p>\r\n\t\t\t<strong>What to turn in: </strong>\r\n\t\t</p>\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\tAs usual, you should turn in an electronic copy of your code to the electronic \r\n\t\t\tdropboxes.\r\n\t\t\t<li>\r\n\t\t\t\tYou should also write up a brief report on the experiments you run with your \r\n\t\t\t\tprogram. Your report answer the following questions:\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\tSuppose the average inter-arrival time is 100, the average ride time is 1000 \r\n\t\t\t\t\tand the average loading time is 100 and the number of boats is 12. What is a \r\n\t\t\t\t\tmore effective way to reduce the waiting time - buy more boats or build a \r\n\t\t\t\t\tlonger loading dock so that customers can board two boats at a time? You can \r\n\t\t\t\t\tapproximate the effect of loading two boats at a time by assuming the loading \r\n\t\t\t\t\ttime is cut in half. Answer this question by determining the number of boats \r\n\t\t\t\t\tthat need to be bought to match the effect of lengthening the dock. Is your \r\n\t\t\t\t\tanswer the same if you started with 20 boats?\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\tSuppose that management has determined that the average waiting time customers \r\n\t\t\t\t\tare willing to tolerate is exactly the average rider+loading time. Suppose that \r\n\t\t\t\t\tthe average ride time is 1000, average loading time is 50 and the number of \r\n\t\t\t\t\tboats is 20. What is the maximum traffic level (i.e. average inter-arrival \r\n\t\t\t\t\ttime) that can be tolerated and still satisfy this constraint?\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tSuppose that management has determined that as long as the average rider queue \r\n\t\t\t\t\t\tlength is at most 50 riders, people will continue to use the ride. Suppose that \r\n\t\t\t\t\t\tthe average ride time is 1000, the average loading time is 50 and the number of \r\n\t\t\t\t\t\tboats is 20. What is the maximum traffic level (i.e. average inter-arrival \r\n\t\t\t\t\t\ttime) that can be tolerated and still satisfy this constraint?\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\tHere are the files you will need.\r\n\t\t<UL>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"http://www.ics.uci.edu/~stasio/winter06/lab5/EventGenerator.java\">EventGenerator.java</a>\r\n\t\t\t[modified 3/08 at 8:25pm, modified 3/10 at 2pm]\r\n\t\t\t<LI>\r\n\t\t\t\t<a href=\"http://www.ics.uci.edu/~stasio/winter06/lab5/Event.java\">Event.java </a>\r\n\t\t\t[added 3/08 at 8:25pm, modified 3/12 at 11:32am]\r\n\t\t\t<LI>\r\n\t\t\t\t<a href=\"http://www.ics.uci.edu/%7Eirani/f04-h22/lab6/Rider.java\">Rider.java </a>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"http://www.ics.uci.edu/%7Eirani/f04-h22/lab6/PriorityQueue.java\">PriorityQueue.java\r\n\t\t\t\t</a>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"http://www.ics.uci.edu/%7Eirani/f04-h22/lab6/Comparable.java\">Comparable.java\r\n\t\t\t\t</a>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"http://www.ics.uci.edu/%7Eirani/f04-h22/lab6/QueueFullException.java\">QueueFullException.java\r\n\t\t\t\t</a>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"http://www.ics.uci.edu/%7Eirani/f04-h22/lab6/IllegalTimeValueException.java\">\r\n\t\t\t\t\tIllegalTimeValueException.java </a>\r\n\t\t\t</li>\r\n\t\t</UL>\r\n\t</body>\r\n</html>\r\n", "encoding": "ascii"}