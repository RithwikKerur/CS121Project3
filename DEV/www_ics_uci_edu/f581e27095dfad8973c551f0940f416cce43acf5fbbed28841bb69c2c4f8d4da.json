{"url": "https://www.ics.uci.edu/~jacobson/cs122b/Project/05-Phase2.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n    \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n   <meta name=\"GENERATOR\" content=\"Mozilla/4.79 (Macintosh; U; PPC) [Netscape]\">\n   <title>Providing Customer Functionality</title>\n<link rel=\"stylesheet\" href=\"../course.css\" type=\"text/css\">\n</head>\n\n<body>\n\n<div class=\"title\">\n<center>\n<h2>Providing Customer Functionality</h2>\n<h4>Phase 2</h4>\n</center>\n</div>\n\n<div class=\"section\">\n<hr>\n<h3>Overview</h3>\n</div>\n\n<p>Now that the FabFlixs database is built, we add functions to allow customers\nto browse through the movies available for purchase, search for movies by specific criteria, add movies to be purchased to their shopping cart, and to check out&#151;purchase the movies via credit card.</p>\n\n\n<div class=\"section\">\n<hr>\n<h3>References</h3>\n</div>\n<ul>\n\t<li><a href=\"http://jakarta.apache.org/tomcat\">Tomcat home page</a>\n\t<li> The instructor and the TA, for advise on refining the requirements\n\t<li><a href=\"http://www.postgresql.org/docs/8.3/interactive/sql.html\">The SQL section of the postgreSQL manual</a>\n\t<li><a href=\"http://java.sun.com/products/jsp/html/jspbasics.fm.html\">Java's \"JSP by Example\" tutorial</a>\n\t<li><a href= \"http://java.sun.com/javaee/5/docs/api/\">Java's servlet API documentation</a> (follow the javax.servlet.* links)\n<br>\n\t<li><a href= \"http://courses.coreservlets.com/Course-Materials/csajsp2.html\">Marty Hall's Tutorials on Servlets, JSP and JDBC\n\t<li><a href=\"http://www.ics.uci.edu/~jacobson/cs122b/Project/05-DateServlet.java\">Sample Servlet that retrieves current time from server</a>\n\t<li><a href=\"http://www.ics.uci.edu/~jacobson/cs122b/Project/05-TimeZoneServlet.java\">Sample Servlet that retrieves current time from server for user-provided city</a>\n\t<li><a href=\"http://www.ics.uci.edu/~jacobson/cs122b/Project/05-ShowSessionInfo.java\">Sample Servlet that counts previous accesses to a session and shows the session's basic information</a>\n\t<li><a href=\"http://www.ics.uci.edu/~jacobson/cs122b/Project/05-ShowItems.java\">Sample Servlet that lists items in a shopping cart</a>\n\t<li>Other web sites where movies or DVDs are sold, to see how the competition does things\n</ul>\n\n\n<div class=\"section\">\n<hr>\n<h3>What to Turn In</h3>\n</div>\n\n<ul>\n\t<li><p>A  WAR file, labeled with your team name; its extension is WAR. The root directory of the WAR hierarchy is also your team name. The structure of WAR files, and how to create them, is discussed below.</p>\n\n<p>Use these conventions for the database you submit:</p>\n\n<ul>\n\t<li> Database name: <font class = \"codeFaceSmall\">fabflixs</font>\n\t<li> User of the database: <font class = \"codeFaceSmall\">testuser</font>\n\t<li> Password: <font class = \"codeFaceSmall\">testpass</font>\n</ul>\n\n<p><i>Be sure</i> to include all source code files (e.g., *.java files) in your WAR, in the directory <font class = \"codefacesmall\">sources</font> within the <font class = \"codefacesmall\">WEB-INF</font> subdirectory.</p>\n\n\t<li><p><p>A ReadMe file explaining how to compile, load, and otherwise prepare your system for use, and how to run it.</p>\n</ul>\n\n\n<div class=\"section\">\n<hr>\n<h3>Development Tool Constraints</h3>\n</div>\n\n\n<p>In addition to the technologies used here&#151;HTML, Java, JSP, sessions, servlets (deployed via Tomcat)&#151;you may use client-side scripting or programming languages (e.g.,  Javascript, PHP, embedded Java, style sheets) as you find appropriate; you may use other or different server-side technologies with the instructor's permission. Your program must work with a postgreSQL database having the schema developed in Phase 1.</p>\n\n<div class=\"section\">\n<hr>\n<h3>Functional Requirements</h3>\n</div>\n\n<p>In an actual development effort, the functional and look-and-feel requirements for FabFlixs's customer functions would have been specified in every particular.  We've purposely left these requirements high-level because we want you to use your skills, experience and reasoned judgment to refine the requirements. Do feel free to ask the instructor or TA for advice! With your project manager's permission, you can enhance these specifications for potential additional credit&#150;but be careful: including additional features that do not work will <i>detract</i> from your score. </p>\n\n<p>Overall, the system must (of course) behave as specified, but also have an appealing, easy-to-use, and consist user interface and appropriate error handling with specific and correct error messages and actions.</p>\n\n<ul>\n  <li><p><i>Main Page</i>. The first page the user encounters is the <font class = \"codeFaceSmall\">main</font> page, where the customer can choose either to search\nfor movies, browse the movies, or go to the login page. Any attempt to bypass this page should be thwarted; that is, anyone going directly to another page on the site should be redirected here. Note specifically that a user need not log in to look at what movies FabFlixs has to offer.</p>\n\n\t<li><p><i>Browsing</i>. If browsing is selected, the user chooses to \"browse by title\" or \"browse by genre\". In the first case, the movies will be listed on the <font class = \"codeFaceSmall\">movie list</font> page  (described below) in ascending order by title and, within title, in descending order by year; title ordering is case-insensitive. Desired, but not required for full credit, is a list of the numerals and letters at the top of the screen that, when one of them is clicked, positions the user in the movie list to the first movie that starts with that numeral or letter.\n\t\t\n\t<p>In the second case, a list of the genres appears; the user selects one. The genres are sorted in case-insensitve order, and, if two genres (without regard to case) are the same, they are listed once. (This helps us avoid problems if somehow multiple, identical genres got into the database.) A <i>movie list page</i> appears, consisting of  the movies associated with that genre (or genres, if they are the same except for their case); they are listed in ascending order of title.</p>\n\t\n  <li> <p><i>Searching</i>. If search is selected, the customer is taken to the <font class = \"codeFaceSmall\">search</font> page, where the customer can search for movies by\nany combination of the following attributes. A criterion can be one or more words (words are separated by a space); all words must be \"matched\" for the movie to be selected. If criteria for multiple attributes are given, the results are those that match all selected criteria (a logical \"and\"):</p>\n    <ul>\n      <li>title</li>\n      <li>year</li>\n      <li>director</li>\n      <li>star's name</li>\n    </ul>\n\n<p>Matching is case-insensitive and each search term is partial. For example,\na query asking for \"term\" for the title attribute should return movies where \"term\" is a substring of the title, such as \"Terms of Endearment\"  \"Terminator\", \"The End of the Term\"; \"endear term\" would find \"Terms of Endearment\" and \"Termites of Mendearia\". For name fields that have two parts (director's name, star's name), look in both parts for a match.</p>\n\n<p>When the movies appear on the movie list page (described below) they are in ascending order by title and, if two movies have the same title, within title they are sorted in descending order by year.</p>\n\n    <li><p><i>Movie list page</i>. The  <font class = \"codeFaceSmall\">movie list</font> includes a list of the movies that come about because of a browse by title, browse by genre, or search. </p>\n\n<p>The move list is ordered alphabetically by title, and the first 20 movies in the list (or all of them, if less than 20) that match the selection criteria appear. </p>\n\n<p>Each item in the list contains</p>\n    <ul>\n      <li>title (linked to the movie's <font class = \"codeFaceSmall\">single move</font> screen; see below)</li>\n      <li>year</li>\n      <li>director</li>\n      <li>list of genres</li>\n      <li>list of stars (each linked to the star's <font class = \"codeFaceSmall\">single star</font> page; see below)</li>\n\t<li>\"add to shopping chart\" button, described below\n    </ul>\n\n<p>Here and elsewhere, names should appear in natural order; for example, when listing the director's name, show it in rest-of-name, last-name order.</p>\n\n<p>Label each attribute so the user knows what s/he is \"looking at.\" The exact format is up to you (but a standard one is columnar: each attribute is in its own column, with sublists (genres, stars) appearing together in the same column; each column is labeled at its head). The user can re-sort the list by title, year or director by clicking on the column heading for that attribute; repeated clicks alternate the sorting between ascending and descending order. For instance, to sort by director, one would click on that column's heading; the first click would sort in ascending order, the second click in descending order, the third back into ascending order, and so on. The first 20 items of the newly-sorted list are displayed&#151;not the current 20 items in a new order.  </p>\n    <p>If there are more than 20 movies in the list, have \"previous\" and \"next\" buttons available; scroll backward and forward through the list, respectively, 20 movies at a time. (Don't show the \"previous\" button when at the start of a list; don't show the \"next\" button when at the end.)</p>\n\n<li><i>Information about a single movie</i>. If the user clicks on a movie in the movie list, the corresponding <font class = \"codeFaceSmall\">single movie</font>\npage appears, displaying title, year, director, a list of genres, the poster, a list of stars\n(with each star a link to the <font class = \"codeFaceSmall\">single star</font> page), and a link to its preview trailer. It also has an \"add to shopping cart\" button. If the URL to the poster does not point to a valid graphic, either don't display anything or, if you wish, display a \"not available\" graphic of your own design. </p></li>\n\n<p>If the user clicks on a star of this movie, the corresponding <font class = \"codeFaceSmall\">single star</font> page displays the star's name, date of birth, picture of the star, and the title of the movies in which the star acted (each again linked to the appropriate single movie page). If this star's picture is not available, or its link is broken or points to something that is not a valid gaphic, just don't display anything or, if you wish, display a \"not available\" graphic of your own design. </p></p>\n\n<li><p><i>Login page.</i> Users reach the login page either from the main page or by clicking on the shopping cart without already being logged in. Login asks if the user is an existing customer or a new customer. If the former, the user is asked for her/his email address (which serves as a login id) and password.\n\nIf the user is a new customer, login asks for the customer's first and last names, email address and password, that latter typed twice to verify it. \n\n<p>If users do not enter a correct login, or have errors that prevent them from registering, they are allowed to try again some limited number of times. When that limit is reached, a polite message is given and the user is \"kicked back\" to the main FabFlixs page.</p>\n\n<p>Make sure the user name and password do not appear in the address bar or are otherwise visible in web page addresses (hint: use <font class = \"codeFaceSmall\">HTTP POST</font> instead of <font class = \"codeFaceSmall\">HTTP GET</font>).\n\n<p>Appropriate error checking during registration must be done; for instance, if a person tries to register with an email address is already on file, s/he should be told so politely, and asked for the existing password. If the user has forgotten the password, they should be directed to call the FabFlixs hotline at 1-800-FAB-FLIX or to send email to fabflixs-help@fabflixs.com; representatives will reset their password. (Web-based mechanisms for handling this issue are slated for a future release.)</p>\n\n<p>Once registered successfully, the user is logged in and processing proceeds: the user goes to the shopping cart, if that is how the login page was called up; otherwise, s/he goes back to the page from which s/he came. </p>\n\n  <li><p><i>Shopping cart.</i> When a user clicks the \"add to shopping cart\" button associated with a DVD, and, if necessary, logging in has been accomplished, and if s/he has not previously selected this DVD in this session, the DVD is added to the cart with a default quantity of 1; obviously, the DVD's title, quantity (and any other identifying information you find appropriate) is shown. If this DVD is already in the shopping cart, its quantity is increased by 1. In either case, the user remains in the shopping cart, with the cursor set in the quantity field for this DVD; the user can now change the quantity field directly. If the user changes the quantity to zero, verify that was the intent, delete the DVD from the shopping cart (and return to the cart, displaying its contents).</p>\n\n\t<li><p><i>Check out</i>. All pages, except the login page, have a prominent \"checkout\" button. If the user leaves the FabFlixs site without checking out, no session information is saved. (Tracking number of visits and related information may be added in future.)\nIf the button is pressed, and there is at least one DVD in the shopping cart, the <font class = \"codeFaceSmall\">customer information</font> page appears.\nIt displays the information of each movie in the shopping cart, including the quantity of each to be purchased and the line-item price ($19.95 times the number of DVDs); the total purchase amount is also shown.  The user is allowed to update or, if not yet present, provide a credit card number, the card's expiration date, and the name of the credit card holder. It is an error if the expiration date, whether just now entered or already on file, is earlier than today's date; the user should be told the expiration date is unacceptable and allowed to re-enter it.</p>\n\n<p>The user is also shown the on-file address and allowed to update it; the user can also enter a shipping address; if left blank, the customer address is the shipping address. (The shipping address has the same attributes as the address in the customer table; note this address could be virtually anywhere in the world.)</p>\n\n<p>The user clicks a button to confirm the data is correct; any time prior to that point, the user can abandon the purchase by leaving the page.  The credit card number, card holder name,  expiration date and total are sent to an as-yet-to-be-chosen credit card verification site. For this phase, we assume the data entered to be accurate and the credit purchase to be authorized. Place the order information into the <font class = \"codeFaceSmall\">sales</font> table&#150;the shipping department's systems will retrieve it, process the order and update inventory records. Confirm to the user via the screen that the order has been processed. </p>\n\n<p>System flow is summarized in the following diagram:</p>\n</ul>\n\n\n<center><img src=\"http://www.ics.uci.edu/~jacobson/cs122b/Project/05-interfaces.jpg\" align=\"middle\" width=\"600\"></center>\n\n<p></p>\n\n<div class=\"section\">\n<hr>\n<h3>More about Tomcat and WAR Files</h3>\n</div>\n\n<p>As discussed in Phase 0, Tomcat deploys WAR files. A WAR file is a compressed directory hierarchy, and actually is a Java \"jar\" file that meets additional requirements Tomcat lays down. To make a proper WAR file requires understanding the basics of this hierarchy; we describe these below, using the TomcatTest WAR file used in Phase 0 to illustrate.</p>\n\n<p>You can look at the contents of TomcatTest. and WAR files in general, in a couple of ways:</p>\n<ul>\n<li><p>By deploying the WAR; that action decompresses the WAR file and stores it (by default) to <font class = \"codeFaceSmall\">C:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\webapps\\TomcatTest</font>.</p>\n<li><p>Decompressing the WAR file yourself with the command line\n<br>\n<center>\n<p><font class = \"codeFaceSmall\">jar -xvf TomcatTest.war</font></p>\n</center>\n<p> The <font class = \"codeFaceSmall\">-xvf</font> switch means \"expand, being verbose in telling us what is going on, the file that immediately follows.\" This action places the WAR's contents into the directory from which the command was run; that is, it's the \"root directory,\" discussed below.</p>\n</ul>\n<p>Decompress the TomcatTest WAR; refer to the resulting directory hierarchy as you follow the discussion below to see how WAR files are \"laid out.\"</p>\n\n<p>The directory hierarchy for a WAR must have the following structure:</p>\n<ul>\n\t<li><p>The <i>root directory</i> (folder): the files and directories that make up the suite of programs, pages, etc. that together provide your servlet's functionality, along with descriptive information used to deploy your servlet via Tomcat. It has the same name as the WAR file; in our example, TomcatTest. Typically stored directly in the root directory are static web pages and public JSP files;  html, css and jsp files are common. <i>A file that must be directly accessible to the browser must be in this folder</i>.  Other directories and files can appear as needed; certain ones are almost always included, as discussed below.</p>\n\t\n<p> All files and directories in TomcatTest, and any other file or folder in it except for the WEB-INF folder, are \"visible\" to the Web and can be accessed by issuing a URL that leads to that folder or file. For instance, <font class = \"codeFaceSmall\">http://localhost:8080/TomcatTest/index.html</font> will show TomcatTest's index page; try it!.</p>\n\n\t<li><p><font class = \"codeFaceSmall\"><i>root directory</i>\\WEB-INF</font>: the Java classes, libraries, and source code that implement the dynamic content of your web application; it and its contents are not visible to the Web.</p>\n\t<li> <p><font class = \"codeFaceSmall\"><i>root directory</i>\\WEB-INF\\class</font>: the class files that make up the servlet; the browser will look here for the class filess to load and run. Note TomcatTest.class resides here.</p>\n\t<li>  <p><font class = \"codeFaceSmall\"><i>root directory</i>\\WEB-INF\\lib</font>: libraries, such as jar files, needed when running the servlet's class files. You'll note that, since TomcatTest is a servlet, and it \"talks to\" a PostgreSQL database, we have the Java servlet and the postgreSQL JDBC jars in this file.</p>\n\t<li><p> <font class = \"codeFaceSmall\"><i>root directory</i>\\WEB-INF\\sources</font>: the source code files used in the development of the servlet; in this case, it's TomcatTest.java. TomcatTest.class is also here, a result of compiling TomcatTest.java; all class files needed for servlet operation need to be placed in the <font class = \"codeFaceSmall\">class</font> folder.</p>\n\t<li><p> the file <font class = \"codeFaceSmall\"><i>root directory</i>\\web.xml</font> that contains information Tomcat needs for deployment of the servlet; it must conform to Tomcat's requirements for the WAR to be acceptable to Tomcat. This file tells Tomcat the name the web page that hosts the servelet is to have, the names of the classes in the <font class = \"codeFaceSmall\">class</font> folder that are part of the servlet, and the mapping between the directory in which the servlet code resides and the URL that will be used to access it. Open <font class = \"codeFaceSmall\">web.xml</font> to get an idea of how this is done. </p>\n</ul>\n\n<div class=\"section\">\n<hr>\n<h3>Creating a FabFlixs WAR File</h3>\n</div>\n\n<p>The easiest way to make a FabFlixs WAR file is to use the TomcatTest directory hierarchy as a starting place. Make a copy of the hierarchy and change its root directory name to your team name. Update <font class = \"codeFaceSmall\">web.xml</font> to reflect the name of your servlet, the descriptive name that is to appear on the Tomcat management page, and so on&#151;what tags do what in this file is easy to determine from its comments and a bit of experimenting. Add and remove files as needed to contain your Phase 2 work. Compile your Java files (see the next paragraph), create a WAR (see the paragraph after that), tell Tomcat to deploy it (you use the same procedure as was used in Phase 0, except you give the name of your WAR) and then use a browser to access it (using the URL designations you gave in <font class = \"codeFaceSmall\">webinf.xml)</font>. </p>\n\n<p>When you compile a java servlet program, you must include in the classpath the file <font class = \"codeFaceSmall\">servlet-api.jar</font>. You will find this file in, among other places, the <font class = \"codeFaceSmall\">lib</font> directory of the folder in which you installed Tomcat. The path is typically <font class = \"codeFaceSmall\">C:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\lib\\servlet-api.jar</font>. You will also need to include the postgreSQL JDBC jar you installed in Phase 0; if you have added it to your classpath, you need do nothing further. So, for example, to compile a Java program FabFlixs.java, with the JDBC jar already in the classpath, but the servlet jar not, you would issue the command (on one line)</p>\n\n\n<center><p><font class = \"codeFaceSmall\">javac -classpath \"%CLASSPATH%;C:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\lib\\servlet-api.jar\" FabFlixs.java</font></p></center>\n\nTo package your hierarchy into a WAR, issue the following command <i>from inside the root directory of your hierarchy</i>: Creating the WAR from outside the root directory sometimes produces a WAR that, when deployed by Tomcat, does not provide a correct directory hierarchy.\n<center>\n<p><font class = \"codeFaceSmall\">jar -cvf <i>filename</i>.war .</font></p>\n</center>\nNote the \".\" at the end of the line; that refers to the current directory. <font class = \"codeFaceSmall\">-cvf</font> is \"compress, being verbose when telling us what is going on, into a file with the name that immediately follows.\" That name is<font class = \"codeFaceSmall\"> <i>filename</i>.war</font>, and it is placed in the current directory. This is the WAR you tell Tomcat to deploy. </p>\n\n<p>Since deployed Tomcat directories are accessible, if you need to fix a bug or make a change to your code (and you probably will!) you can do it directly in the deployed directory; make the change, recompile the code, and, since it's already deployed;  just reload it using the Tomcat <font class = \"codeFaceSmall\">reload</font> command, and you're ready to test it. <i>Don't forget to reload</i> because, if you do, Tomcat will use the original file, not the modified one. This approach is much easier than fixing the problem in the original directory hierarchy, recompiling it there, making a new WAR file, unloading the existing servlet and deploying the new WAR file. But do be careful: if you corrupt the structure of the deployed directory, you will need to remove the existing servlet and make and deploy a new WAR.</p>\n\n<div class=\"section\">\n<hr>\n<h3>Demonstration</h3>\n</div>\n<p>To prepare for the demo, have the WAR file you turned stored on your demonstration machine; also have the postgreSQL server up and running. When the demo begins, we will ask you to deploy the WAR file via Tomcat.</p>\n\n<p>Demonstrate the correctness, completeness and performance of your customer functions. Your task is to convince us, in no more than 15 minutes, that your work is well and completely done and the FabFlixs project is ready to move to phase 3.</p>\n\n<font face=\"Helvetica\" size=2>\n<p>Written for ICS185 Winter 2005 as \"Project 2\" by Chen Li.\n<br>Revised by Norman Jacobson for ICS185 Spring 2005 by Norman Jacobson, March 2005.\n<br>Revised by Norman Jacobson to clarify some requirements, update links, and to add to \n<br>&nbsp;&nbsp;and reorganize the information about Tomcat, March 2007. <br>\n&nbsp;&nbsp;Incorporates some of information added to the Winter 2007 version of \"Project 2\" by Chen Li and Shengyue Ji.\n<br>Revised to include more detail and a clearer discussion on sale quantity and shipping \n<br>&nbsp;&nbsp;address, and to reflect they are now stored in the sales table, by Norman Jacobson, September 2007.\n<br>Removed sorting by genres and stars within the movie list (too archane); now one genre <br>&nbsp;&nbsp;is selected before movies are displayed (rather than all movies listed in genre order); \n<br>&nbsp;&nbsp;login logic simplified; specs added for what to do if the movie or star poster is unavailable \n<br>&nbsp;&nbsp;or invalid, by Norman Jacobson, December 2007.\n<br>Correction of minor typos, by Norman Jacobson, September & October 2008.\n<br>Added READ.ME file requirement, by Norman Jacobson, December 2008.\n<br>Minor updates to reflect postgreSQL 8.3.7, by Norman Jacobson, March 2009.\n</p>\n</font>\n\n</body>\n</html>\n\n", "encoding": "ascii"}