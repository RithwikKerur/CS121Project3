{"url": "https://www.ics.uci.edu/~eppstein/163/s16-hw3.html", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n<html>\n<head>\n<title>CompSci 163/265, Spring 2016, Homework 3</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<h1>CompSci 163/265, Spring 2016, Homework 3</h1>\n<ol>\n<li><p>Find a directed acyclic graph $G$ with three vertices and exactly three different topological orderings. List the three topological orderings of your graph.</p></li>\n<li><p>Let's say that a graph is \"accessible\" if it contains a vertex $v$ that can reach all the other vertices. Suppose that we want to design a certifying algorithm for whether a given directed acyclic graph is accessible. If the graph is accessible, the algorithm should output a vertex that can reach all the others; testing whether this is true is easy. If the graph is not accessible, what simple structure can we find that can be easily checked and guarantees that it is not accessible? (Hint: look at the numbers of incoming edges of each vertex.)</p></li>\n<li><p>Let $G$ be a directed acyclic graph with $n$ vertices. How many strongly connected components can $G$ have?</p></li>\n<li><p>(163 students:) Give pseudocode for an algorithm that takes as input a directed graph $G$ and a list $L$ of the vertices of $G$, and verifies that $L$ is a topological ordering of $G$. You may assume that each vertex of $G$ appears exactly once in $L$.</p>\n<p>(265 students:) Give pseudocode for an algorithm that takes as input a directed graph $G$ and a list of vertices $L$, and verifies that $L$ is a topological ordering of $G$. You should not assume that $L$ will always be a listing of the vertices of $G$; that is one of the things your algorithm should check.</p></li>\n</ol>\n</body>\n</html>\n", "encoding": "ascii"}