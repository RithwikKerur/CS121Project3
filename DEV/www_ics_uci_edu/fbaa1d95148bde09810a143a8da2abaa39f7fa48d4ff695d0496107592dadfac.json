{"url": "https://www.ics.uci.edu/~thornton/inf45/LabManual/TheGreatBeyond/", "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC\n \"-//W3C//DTD XHTML 1.1//EN\"\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"../../course2.css\" type=\"text/css\" />\n\n<title>Informatics 45 Spring 2010, Project #3: The Great Beyond</title>\n</head>\n\n<body>\n\n<div class=\"navbar\">\n\n<p>\nInformatics 45 Spring 2010 |\n<a href=\"../../index.html\">News</a> |\n<a href=\"../../CourseReference.html\">Course Reference</a> |\n<a href=\"../../Schedule.html\">Schedule</a> |\n<a href=\"../../LabManual\">Lab Manual</a> |\n<a href=\"../../CodeExamples\">Code Examples</a> |\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\n</p>\n\n<hr />\n\n</div>\n\n<div class=\"header\">\n\n<p>Informatics 45 Spring 2010<br />\n   Project #3: <i>The Great Beyond</i></p>\n   \n</div>\n\n<div class=\"section\">\n\n<p class=\"center\">\n<b>Project Plan due:</b> <i>Saturday, May 15, 11:59pm</i><br />\n<b>Program due:</b> <i>Monday, May 24, 11:59pm</i><br />\n<b>Lessons Learned due:</b> <i>Tuesday, May 25, 11:59pm</i><br />\n</p>\n\n<p class=\"center\"><i>You are required to work on this project \nindividually</i></p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Introduction</p>\n\n<p>The first two projects helped you to take two large steps that extended the boundaries of what you could accomplish by programming.  The first project asked you to build a program with a graphical user interface; the second asked you to build a program that could establish a socket connection and send an image from one program to another.  The overarching lesson for most of you, I hope, is that it didn't take a lot of new Java skills to solve either of these problems.  There were a few things that were new (the GUI was easier if you used <i>anonymous inner classes</i>; sockets required some light <i>multithreading</i>, especially when mixed with GUIs), but what you knew how to do already went a long way; the difficulty was mostly in discovering the details of the APIs that you needed to solve the problem, which can be overcome with a combination of prototyping, experimentation, adapting the code examples from lecture (or others you may have found online), and searching the Internet for information when you're stuck.</p>\n\n<p>The second project, in particular, dramatically pushed the boundaries of what you could accomplish outward because, for many of you, it was your first time writing a program that could communicate with a separate program.  It introduced <i>communication protocols</i> and showed that it doesn't take much code to get two programs talking to each other via a network, while underscoring the importance of both programs agreeing on the specifics of how the conversation should be structured.  Once you have this tool in your toolbox, a whole new world opens up: suddenly, the idea that you should be able to write a program that combines, say, Google search queries, the Internet Movie Database, and your favorite social network to find people who like movies similar to the ones you like doesn't seem far-fetched.</p>\n\n<p>The challenge in getting programs to share information is twofold.  Firstly, there's purely a software engineering problem: a protocol has to be designed that both programs can use to have their conversation.  Secondly, there's a social problem: if the same person (or group of people) isn't writing both programs, it's necessary for them to agree on the protocol ahead of time, then to implement it.  This is a potentially catastrophic problem &mdash; how could you ever get Google to agree to use your protocol just to communicate with you? &mdash; that is largely solved by the presence of <i>standards</i>, such as those defined by <a href=\"http://www.w3.org/\">the World Wide Web Consortium</a>.  Standards help in two ways: by providing a detailed communication protocol whose details have already been hammered out, and also by allowing programs to interoperate with many other programs without having to support a separate protocol for each of them.  In fact, standard protocols often have standard implementations, so that you won't have to code up the details yourself; for example, Java has built-in support for a number of standard protocols, including HTTP (Hypertext Transfer Protocol, the protocol that your browser uses to download web pages) among others.</p>\n\n<p>HTTP is of particular importance, since it is the protocol that is used for virtually all web communications.  This is not limited only to the conversation that your browser has with a web server in order to download a web page, though that conversation certainly uses HTTP.  HTTP is the protocol that underlies a growing variety of program-to-program communications using web protocols, broadly called <i>web services</i>, where web sites or other software systems communicate directly with one another, or where programs other than web browsers fetch data from and affect change on web sites or other software systems.  Fortunately, since HTTP support is built directly into Java, we can write programs that use web-based APIs without having to handle low-level details of the protocol, though there are some details you'll need to be familiar with if you want to use the provided implementation effectively.</p>\n\n<p>This project gives you the opportunity to explore a small slice of the vast sea of possibilities presented by web APIs and web services.  You'll get the chance to choose a problem related to the web that you're interested in solving by writing a Java program &mdash; though I'll provide one for you to solve if you're having trouble choosing &mdash; and then to investigate the details and implement your solution.  The planning phase will be of special importance in this project, since part of how you'll settle on the details of your problem will be based on experimentation and prototyping, so that you can understand what you can reasonably expect yourself to accomplish in the relatively short time provided.  We hope that, when you're done, you'll have a program that you can actually use on a day-to-day basis, rather than one that you'll submit to us and never look at again.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Reminder: Do not partner up!</p>\n\n<p>For this project, your work is expected to completed individually, so <i>do not</i> partner up and <i>do not</i> use pair programming.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The problem</p>\n\n<p>This project provides you with a choice of problems to work on.  You're asked to choose between a problem that I've posed or a problem of your own.  The choice is entirely yours; while we encourage you to explore your own ideas if you have them, there's neither a penalty for deciding to solve the provided problem instead nor extra credit for choosing your own.  Do consider accepting the freedom that's being offered here, but realize that the freedom is its own reward.</p>\n\n<p class=\"subtitle\">What is Twitter?</p>\n\n<p><a href=\"http://twitter.com/\">Twitter</a> is a web site that combines what is called <i>microblogging</i> (sharing short messages on the Internet, rather than longer articles) with what is called <i>moblogging</i> (the ability to post those messages \"on the go,\" by using, for example, a mobile phone).  Twitter has emerged as an exciting Internet phenomenon; its popularity has not only generated hype, but has even elicited academic research such as the study summed up by <a href=\"http://workshops.socialnetworkanalysis.info/websnakdd2007/papers/submission_21.pdf\">this paper</a>.  Twitter is claimed by many to be useful for a variety of purposes.  Check out <a href=\"http://www.centernetworks.com/twitter-what-is-it-good-for\">this blog</a> for a randomly-chosen person's ideas on what Twitter is good for.</p>\n\n<p>Twitter provides you with a relatively small number of features, such as these:</p>\n\n<ul>\n  <li>Post short messages of no more than 140 characters called <i>status updates</i> or, more colloquially, <i>tweets</i></li>\n  <li>Register yourself as a <i>follower</i> of another user's messages, so that you'll be notified whenever they tweet</li>\n  <li>See who your followers are</li>\n  <li>Keep track of which tweets are your favorites</li>\n  <li>Post and receive tweets using the text messaging feature of your mobile phone</li>\n</ul>\n\n<p>Arising from this small feature set is a potentially powerful tool for social networking, online conversation, and even guerrilla journalism.  Like many such tools, it's not the web interface that's important; it's the data and how it interconnects that makes it powerful.  For that reason, Twitter provides an API for fetching and manipulating this data outside of the confines of a web browser.  It's this API that you will explore if you choose to solve the provided problem.</p>\n\n<p class=\"subtitle\">The provided problem: Manipulating your own Twitter account via the Twitter API using Java</p>\n\n<p>As we saw in lecture, Twitter provides an API for interacting with Twitter even if you're not using your web browser.  That API is documented in a fair amount of detail at the following link:</p>\n\n<ul>\n  <li><a href=\"http://apiwiki.twitter.com/Twitter-API-Documentation\">Twitter API Documentation</a></li>\n</ul>\n\n<p>Before you get started, you'll want to create a new Twitter account to interact with: go to <a href=\"http://twitter.com/\">twitter.com</a> and click the button that encourages you to \"Get Started &mdash; Join!\"  (If you already have a Twitter account, you might not want to use it for your experimentation at first, so it's a good idea to create a fresh account that you can play with.)  Especially if you're new to Twitter, be sure to spend a little bit of time experimenting with it, so you can be clear on how it works.  Post updates, sign yourself up as a follower of a few other people, check out who's following you, and so on.  Understanding how Twitter works is important context for understanding how to work through this problem.</p>\n\n<p>If you choose to work on the provided problem, your program should meet the following requirements.</p>\n\n<ul>\n  <li>It should monitor messages posted by friends, looking for messages containing keywords specified by the user.  So, for example, you might watch for messages with the words \"concert\" and \"tonight\" in them, for example.</li>\n  <li>The program should display only messages that have these keywords.  The program should support any number of keywords and should allow users to specify whether messages should require all or any of the keywords.</li>\n  <li>It's fine for the program to require the user to specify a new list of keywords each time the program starts; you can also save this information into a file and reload it each time, if you prefer.</li>\n  <li>The program should also provide the ability for the user to post a public response to any of the messages that it displays.\n    <ul>\n      <li>Note that, by convention, messages that are posted publicly but are intended for a particular user begin with an \"@\" followed by the recipient's name.  So, for example, to post a reply to the <b>i45s2010</b> account we saw in class, you might post this message: \"@i45s2010: I agree\".  The \"@\" convention should be handled by the program automatically.</li>\n    </ul>\n  </li>\n  <li>The program should not check for messages so quickly that it overwhelms the limited number of requests per hour allowed by the Twitter API.  Remember to leave yourself room under that limit to post the replies.\n    <ul>\n      <li>You may make the rate at which your program checks for new messages configurable, or you can hard-code a rate that you think is reasonable.  If it's configurable, it would be wise to hard-code a limit that won't allow the user to blow through Twitter's API limits.</li>\n    </ul>\n  </li>\n  <li>Provides a graphical user interface that makes access to the information and functionality simple and straightforward.  As usual, the design of that user interface is up to you.</li>\n  <li>Stick to XML output from each Twitter web \"method,\" rather than the other alternatives (JSON, RSS, Atom) that Twitter provides.  Java has built-in support for XML, as we saw in lecture; the others will require you to find or write code that supports them.</li>\n</ul>\n\n<p>Be respectful of the rules governing the use of the Twitter API, including the limited number of web \"method\" calls per hour; note that this limit may affect your ability to work on and test your program at the pace you'd like, so be sure to plan for the effect this limit will have on your work.  (One way to handle this, for example, is to be sure that you make requests more slowly or, at least, less frequently while testing your program.)  When the API requires authentication, use only usernames and passwords that belong to you.</p>\n\n<p>You will certainly run up against situations where you receive responses that you were not expecting, hit limitations that you were not aware of, or notice behavior that does not seem to make sense.  While we will do our best to help you with these, we are not seasoned Twitter API experts, so we may not always have an immediate answer to your question.  (This is a very typical issue in real-world software development: no one is an expert on everything, and any one person is expert at only a tiny fraction of what's out there in the world.  The ability to overcome this is paramount if you want to be able to build and maintain real software.)  Note that Internet searches are likely to help, and that there is a <a href=\"http://groups.google.com/group/twitter-development-talk\">discussion group</a> for users of the Twitter API.</p>\n\n<p class=\"subtitle\">Coming up with your own problem instead</p>\n\n<p>Rather than working on the problem provided above, you are free to come up with your own problem instead, involving Twitter or any other web site/service (or combination of web sites/services) you'd like.  In general, anything goes, though there are a few ground rules that you'll be asked to follow if you choose your own problem, just so that everyone can be on a somewhat level playing field.</p>\n\n<ul>\n  <li>You will need to use at least one web site/web service API that is accessible from Java.  Ideally, you'll stick with APIs like the ones we experimented with in lecture, but you're welcome to use others that work differently than those we discussed if you're so inclined.  You're also not strictly limited to protocols that sit atop HTTP; you can do something with, say, instant messaging, though be aware that you may be making your job significantly harder if you're using something with a proprietary protocol rather than a standardized one.</li>\n  <li>You are required to call at least three different web \"methods\" as part of your solution.  The substantially interesting part of your program should involve either the creation, consumption, or combination of information sent to or received from these methods.</li>\n  <li>The goal of your program would ideally be to automate something that is not normally easy to do using the regular browser-based interface provided by your chosen web site.</li>\n  <li>You are required to avoid violating any license agreement or other rules put in place by your chosen web site(s)/service(s).  For example, Twitter requires that you make no more than a certain number of requests (web \"method\" calls) per hour, so you wouldn't want to write a Twitter \"spamming\" tool.  (For ethical reasons, you might well want to avoid this kind of tool anyway.)</li>\n  <li>If your chosen API requires authentication, you are required to use only usernames, passwords, etc., that belong to you.  (You are free to &mdash; and may very well want to &mdash; create new accounts just for this course, assuming that it is allowed by the site's license agreement.)\n    <ul>\n      <li>You will need to give us an account to use for testing, so be sure that this is allowed by the site's license agreement (e.g., do not give us an account you've paid for).  Note that this may limit your choices about what problems you can work on.</li>\n    </ul>\n  </li>\n  <li>You are permitted to use pre-existing code that you find online to make the job of communication easier, so long as that code is licensed, at least, for personal (non-commercial) use, and so long as you make it very clear what code came from other sources than yourself and what those sources were.  This means, for example, that you could use an open source library to simplify connecting to your chosen web API and receiving its result; we expect all other code to be written by you.  Of course, you're not permitted to take code from other students in the course or students who have taken this course previously, nor are you permitted to have other people write code specifically for you.  If you're not sure whether you're allowed to use code that you find, be sure to ask us.</li>\n</ul>\n\n<p>If you're working on your own problem, you'll need to get it approved by <a href=\"mailto:thornton@ics.uci.edu\">me</a> early in the process.  By Thursday, May 13 at 8:00pm, you'll need to send me an email that describes:</p>\n\n<ul>\n  <li>What problem you plan to solve &mdash; be detailed enough that I can assess whether the problem is solvable in the time allowed; don't say, for example, \"I plan to automate web searching using Google and Yahoo!\"</li>\n  <li>What web site(s)/service(s) are involved</li>\n  <li>What APIs and/or open source libraries you plan to use &mdash; please include links to API documentation, since it's a good bet that you'll be choosing something I've never used before</li>\n  <li>Roughly what you expect your user interface will look like when you're done, or at least what functionality you expect to provide</li>\n</ul>\n\n<p class=\"subtitle\">The importance of embracing freedom</p>\n\n<p>It may make some of you uncomfortable that you're being encouraged to find your own problem to solve in this project.  This may not be something you've been asked to do often in school &mdash; though you'll find that it happens increasingly the farther you get, especially if you go to graduate school.  You may feel uncomfortable because you're not sure what you should do, becuase you're not sure whether your idea is more than you can handle in the time provided, or because you don't feel it's clear how you'll be graded relative to your peers.  In short, doing your own thing will feel like a risk, and you may be risk-averse when it comes to courses in which you'll be receiving a grade.</p>\n\n<p>The thing to remember here is that I've left this project open-ended because I've wanted you to be able to find problems that excite you, as opposed to wanting to grade you on the quality of the problem you chose.  No one will be graded down specifically because they chose to work on the provided problem rather than finding their own.  In fact, no one will be graded on their choice of problem at all, so long as we approved your problem during the planning phase.  You will instead be graded on the quality of what you've delivered: whether it solves the problem posed, whether you provided us enough information to figure out how to use it, and so on.</p>\n\n<p>If you have a problem that you're interested in solving, let go of your fears and embrace the freedom to do it.  We'll help you decide whether your problem is solvable in the given time, we'll try to help you whittle it down to something manageable if it's too big, and the problem of grading will work itself out.  (And, though it's easy for me to say, I'll remind you that grades are not the purpose of your education; don't let them keep you from getting what you came for!)</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">The planning phase</p>\n\n<p>Particularly if you decide to work on something other than the provided Twitter problem &mdash; but even if you don't &mdash; you are going to want to spend some time planning your program and experimenting with some prototype code before you implement your final program.  As before, prototyping is going to be very important, since you'll be working with technologies that are almost certain to be new to you.</p>\n\n<p class=\"subtitle\">The project plan</p>\n\n<p>As always, you'll be required to write a <i>project plan</i> that summarizes the planning you did, addressing at least the following questions.  (You're free, again, to include any additional information you'd like; spending a little time putting your thoughts down in writing is a good way to get your thoughts organized.)</p>\n\n<ul>\n  <li>Describe in a fair amount of detail what problem you plan to solve.  (If you plan to work on the provided problem, you can just say \"I plan to work on the provided problem\" and move on.)</li>\n  <li>How will your user interface be designed?  What will the user interface do while the program communicates with the web site/service?  How will you show, in the user interface, that you couldn't establish a connection or couldn't parse the result successfully?  (This can happen.)</li>\n  <li>List the tasks you expect to have to complete before you've finished your implementation.  We're not expecting you to break this down at the level of individual methods or classs; we'd just like to see what the big-picture tasks are.  Which tasks are dependent on which others?</li>\n  <li>What features did you prototype, if any?  How did you prototype them?</li>\n  <li>Guided by your prototyping and past experience, what aspects of the project pose the biggest risk to your success?  Where do you anticipate having the most difficulty?</li>\n  <li>Guided by your prototyping and past experience, what aspects of the project pose the least risk to your success?  What parts do you expect to be able to handle with relative ease?</li>\n</ul>\n\n<p>The project plan is due on Saturday, May 15 at 11:59pm.  See the section titled \"Deliverables\" below for more information about how to submit the various parts of your project.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Writing the program</p>\n\n<p>The program should be written entirely in Java.  The GUI should be built using the Swing library.  In addition to Swing, you are free to use any part of the Java library that you would find helpful.  Additionally, you are permitted to use other components (e.g., open source components) to help you connect to your web site/service or parse its results, though not for any other part of your solution.</p>\n\n<p>In addition to delivering your program, you'll also need to submit a brief document that explains how to use the program.  You won't need to say much here &mdash; a page or so will suffice for most of your programs, I'd guess &mdash; but we are going to need to be told enough information that we can understand and use your program.  In that document, you will need to supply us with a username and password, or other authentication information necessary, for us to use the program with your chosen web site/service, if authentication is necessary.  (Note that we have a Twitter account that we can use for testing, but any other site will require you to give us an account we can use freely.)  Assume that we will do anything we'd like with the account while testing your program, so <i>do not give us an account you care about</i>.  (It's usually going to be best for you to create a new account for your work in this course, then to give it to us as part of your submission.  Please put enough information into the account &mdash; messages, photos, links, or whatever &mdash; for it to be an interesting test of your program.)  Be sure that it is within the license agreement of your chosen web site/service to give out this authentication information (e.g., do not give us an account you've paid for).  Note that this may limit your choices about what problems you can work on.</p>\n\n<p>Lastly, if you used any open source libraries provided as JAR files, you'll need to include those JAR files in your submission.</p>\n\n<p>The program is due on Monday, May 24 at 11:59pm.  See the section titled \"Deliverables\" below for more information about how to submit the various parts of your project.</p>\n\n<p>It may seem unreasonable, at first blush, that you only have six days to write the program, but note that I'm expecting that you will have written some code already during the planning phase, so this deadline is not as tight as it initially seems.  Note, also, that this project may not require as much code as you might imagine, since Java's library includes built-in support for web protocols like HTTP.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Assessing the lessons learned</p>\n\n<p>Once you've completed your implementation and submitted it, take a little time to reflect on your experience by writing a <i>lessons learned</i> document.  Your lessons learned document should reflect on, at least, the following questions.</p>\n\n<ul>\n  <li>To what extent did you follow your project plan while implementing the program?  What features did you implement differently than you specified in your plan?  Why did you decide to implement them differently?</li>\n  <li>What are a couple of your biggest successes on this project &mdash; features that you felt turned out well, challenges that you were able to overcome?  What forces do you think helped you to be so successful in these cases?</li>\n  <li>What are a couple of aspects of this project that could have gone better?  Why do you think they were problematic and what will you do differently next time to ensure that you'll handle them better?</li>\n  <li>What did you think of the web site/service API that you chose?  Did it make it easier to solve your problem, or did you find yourself fighting it?</li>\n  <li>In what ways did your chosen web site/service API behave as you expected to?  In what ways did it surprise you?  If you could have changed one thing about the API, what would it have been?</li>\n</ul>\n\n<p>The lessons learned document is due on Tuesday, May 25 at 11:59pm.  See the section titled \"Deliverables\" below for more information about how to submit the various parts of your project.</p>\n\n</div>\n\n<div class=\"section\">\n\n<hr />\n\n<p class=\"title\">Deliverables</p>\n\n<p>You are required to deliver the three parts of the project to Checkmate, an ICS-built online assignment submission system.  Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit files via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.</p>\n\n<p>There are three parts to this project, each with its own due date:</p>\n\n<ul>\n  <li>The <i>project plan</i>, which is a Microsoft Word (.doc or .docx), Rich Text Format (.rtf), or PDF document.  This is due on Saturday, May 15 at 11:59pm.</li>\n  <li>The <i>program</i>, which is three things: a collection of <b>.java</b> files comprising your program, a document explaining how to use it, and any JAR files containing open source libraries that you used (if any).  Please submit a zip file containing all of your these things, but no other files (e.g., compiled .class files, other parts of your Eclipse workspace).  Be sure to zip the .java files while still in the folder structure imposed by Eclipse and Java when you use packages.  The program is due on Monday, May 24 at 11:59pm.</li>\n  <li>The <i>lessons learned</i> document, which is another Microsoft Word (.doc or .docx), Rich Text Format (.rtf), or PDF document.  This is due on Tuesday, May 25 at 11:59pm.</li>\n</ul>\n\n<p>After you've submitted your work, take a moment to be sure that you submitted all of the files you intended to; if you missed one, we won't be able to compile and run your program, which can result in a substantial penalty, since we won't be able to evaluate your program's correctness.</p>\n\n</div>\n\n<div class=\"history\">\n\n<hr />\n\n<ul class=\"nomarker\">\n  <li>Additional minor tweaks by Alex Thornton, Spring 2010.</li>\n  <li>A few tweaks by Alex Thornton, Spring 2009.</li>\n  <li>Originally written by Alex Thornton, Spring 2008.</li>\n</ul>\n\n</div>\n\n</body>\n</html>\n", "encoding": "ascii"}