{"url": "https://www.ics.uci.edu/~eppstein/pubs/geom-nn.html", "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head>\n<title>David Eppstein - Publications</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body bgcolor=\"#ffffff\" text=\"#000000\">\n<h1>David Eppstein - Publications</h1>\n<hr><p>\n<h2>\nNearest neighbors\n</h2>\n<ul>\n<li><b>Iterated nearest neighbors and finding minimal polytopes</b>.<br>\nD. Eppstein and \n<a href=\"//compgeom.cs.uiuc.edu/~jeffe/\">J. Erickson</a>.<br>\nTech. Rep. 92-71, ICS, UCI, 1992.<br>\n<a href=\"//portal.acm.org/citation.cfm?id=313612\">\n<i>4th ACM-SIAM Symp. Discrete Algorithms,</i> Austin, 1993, pp. 64&ndash;73</a>.<br>\n<a href=\"//compgeom.cs.uiuc.edu/~jeffe/pubs/pdf/small.pdf\"><i>Disc. Comp. Geom.</i> 11: 321&ndash;350, 1994</a>.\n<p>\nShowed that for various optimization criteria, the\noptimal polygon containing <i>k</i> of <i>n</i>\npoints must be near one of the points, hence one can transform\ntime bounds involving several factors of <i>n</i>\nto bounds linear in <i>n</i> but polynomial in <i>k.</i>\nUsed as a subroutine are data structures for finding several\n<a href=\"geom-nn.html\">nearest neighbors</a> in rectilinear metric spaces, and\nalgorithms for finding the\n<a href=\"geom-deep.html\">deepest point in an arrangement</a> of cubes or\nspheres.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Iterated nearest neighbors and finding minimal polytopes\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Iterated-nearest-neighbors-and-finding-minimal-polytopes.html\">Citations</a> &ndash;\n<a href=\"//compgeom.cs.uiuc.edu/~jeffe/pubs/small.html\">Jeff's pub list entry</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/erickson94iterated.html\">CiteSeer</a>)\n<p>\n<li><b>Dynamic Euclidean minimum spanning trees and extrema of binary functions</b>.<br>\nD. Eppstein.<br>\n<a href=\"tr.html\">Tech. Rep. 92-05</a>, ICS, UCI, 1992.<br>\n<a href=\"tr.html\">Tech. Rep. 92-88</a>, ICS, UCI, 1992.<br>\n<a href=\"Epp-DCG-95.pdf\"><i>Disc. Comp. Geom.</i> 13: 111&ndash;122, 1995</a>.\n<p>\nShows that bichromatic nearest neighbors can be maintained under point\ninsertion and deletion essentially as quickly as known solutions to the\npost office problem, and that the\n<a href=\"mst.html\">minimum spanning tree</a> can be\nmaintained in the same time except for an additive O(sqrt <i>n</i>) needed for\nsolving the corresponding graph problem.\nTR 92-88's title was actually \"Fully dynamic maintenance of Euclidean\nminimum spanning trees and maxima of decomposable functions\".\nTR 92-05's title left out the part about maxima; that version gave a slower\nalgorithm superseded by the result in 92-88.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Dynamic Euclidean minimum spanning trees and extrema of binary functions\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Dynamic-Euclidean-minimum-spanning-trees-and-extrema-of-binary-functions.html\">Citations</a> &ndash;\n<a href=\"/~eppstein/projects/pairs/\">Closest pair project page</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein95dynamic.html\">CiteSeer</a>)\n<p>\n<li><b>Dynamic algorithms for half-space reporting, proximity problems, and\ngeometric minimum spanning trees</b>.<br>\n<a href=\"//www.cs.duke.edu/~pankaj/\">P.K. Agarwal</a>,\nD. Eppstein, and\n<a href=\"//www.ms.mff.cuni.cz/acad/kam/matousek/\">J. Matou&#353;ek</a>.<br>\n<a href=\"AgaEppMat-FOCS-92.pdf\"><i>33rd IEEE Symp. Foundations of\nComp. Sci.,</i> Pittsburgh, 1992, pp. 80&ndash;89</a>.\n<p>\nThis conference paper merged my results from\n\"<a href=\"p-dynmst.html\">Dynamic Euclidean minimum\nspanning trees</a>\" with results of my co-authors on nearest neighbors\nand halfspace range searching.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Dynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Dynamic-algorithms-for-half-space-reporting-proximity-problems-and-geometric-minimum-spanning-trees.html\">Citations</a>)\n<p>\n<li><b>Algorithms for proximity problems in higher dimensions</b>.<br>\n<a href=\"//www.middlebury.edu/~dickerso/\">\nM. T. Dickerson</a> and D. Eppstein.<br>\n<a href=\"//doi.org/10.1016/0925-7721(95)00009-7\">\n<i>Comp. Geom. Theory &amp; Applications</i> 5: 277&ndash;291, 1996</a>.\n<p>\nCombines a method from\n\"<a href=\"p-pgood.html\">Provably good mesh generation</a>\" for\nfinding sparse high-dimensional Delaunay triangulations,\na method of Dickerson, Drysdale, and Sack\n[\"<a href=\"//www.middlebury.edu/~dickerso/research/enum.html\">Simple\nalgorithms for enumerating interpoint distances</a>\", IJCGA 1992]\nfor using Delaunay\ntriangulations to search for nearest neighbors,\nand a method of Frederickson for speeding up tree-based searches.\nThe results are fast algorithms for several proximity problems\nsuch as finding the <i>k</i> nearest neighbors to each point\nin a given point set.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Algorithms for proximity problems in higher dimensions\">BibTeX</a> &ndash;\n<a href=\"DicEpp-CGTA-96.pdf\">Full paper</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Algorithms-for-proximity-problems-in-higher-dimensions.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/dickerson96algorithms.html\">CiteSeer</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=236474\">ACM DL</a>)\n<p>\n<li><b>Parallel construction of quadtrees and quality triangulations</b>.<br>\n<a href=\"//www.parc.xerox.com/csl/members/bern/\">M. Bern</a>,\nD. Eppstein, and \n<a href=\"//www-sal.cs.uiuc.edu/~steng/\">S.-H. Teng</a>.<br>\n<a href=\"BerEppTen-WADS-93.pdf\"><i>3rd Worksh. Algorithms and Data\nStructures,</i> Montreal, 1993</a>.<br>\nSpringer, <i>Lecture Notes in\nComp. Sci.</i> 709, 1993, pp. 188&ndash;199.<br>\nTech. Rep. 614, MIT Lab. for Comp. Sci., 1994.<br>\n<a href=\"BerEppTen-IJCGA-99.pdf\"><i>Int. J. Comp. Geom. &amp; Appl.</i>\n9 (6): 517&ndash;532, 1999.</a>\n<p>\nA parallelization of the quadtree constructions in\n\"<a href=\"p-pgood.html\">Provably good mesh generation</a>\",\nin an integer model of computation, based on a technique of\nsorting the input points using values formed by shuffling the binary\nrepresentations of the coordinates.\nA side-effect is an efficient construction for the \"fair split tree\"\nhierarchical clustering method used by Callahan and Kosaraju for various\nnearest neighbor problems.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Parallel construction of quadtrees and quality triangulations\">BibTeX</a> &ndash;\n<a href=\"//www.CiteSeer.com/eppstein93parallel.html\">CiteSeer</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Parallel-construction-of-quadtrees-and-quality-triangulations.html\">Citations</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=672684\">ACM DL</a>)\n<p>\n<li><b>The diameter of nearest neighbor graphs</b>.<br>\nD. Eppstein.<br>\n<a href=\"Epp-TR-92-76.pdf\">Tech. Rep. 92-76</a>, ICS, UCI, 1992.\n<p>\nAny connected nearest neighbor forest\nwith diameter <i>D</i> has O(<i>D</i><sup>6</sup>) vertices.  This was\nlater further\nimproved to O(<i>D</i><sup>5</sup>) and merged with results of Paterson\nand Yao into \"<a href=\"p-nn.html\">On nearest neighbor graphs</a>\".\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#The diameter of nearest neighbor graphs\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/The-diameter-of-nearest-neighbor-graphs.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein92diameter.html\">CiteSeer</a>)\n<p>\n<li><b>On nearest-neighbor graphs</b>.<br>\nD. Eppstein,\n<a href=\"//www.dcs.warwick.ac.uk/~msp/\">M. S. Paterson</a>,\nand F. F. Yao.<br>\n<a href=\"EppPatYao-DCG-97.pdf\"><i>Disc. Comp. Geom.</i> 17: 263&ndash;282, 1997</a>.\n<p>\nPaterson and Yao presented a paper at ICALP showing among other things\nthat any connected nearest neighbor forest\nwith diameter <i>D</i> has O(<i>D</i><sup>9</sup>) vertices.\nThis paper is the journal version; my contribution consists\nof improving that bound to O(<i>D</i><sup>5</sup>), which is tight.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#On nearest neighbor graphs\">BibTeX</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein97nearestneighbor.html\">CiteSeer</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/On-nearest-neighbor-graphs.html\">Citations</a>)\n<p>\n<li><b>Fast hierarchical\nclustering and other applications of dynamic closest pairs</b>.<br>\nD. Eppstein.<br>\n<a href=\"//portal.acm.org/citation.cfm?id=315030\">\n<i>9th ACM-SIAM Symp. Discrete Algorithms,</i>\nSan Francisco, 1998, pp. 619&ndash;628</a>.<br>\n<a href=\"//arXiv.org/abs/cs.DS/9912014\">arXiv:cs.DS/9912014</a>.<br>\n<a href=\"//doi.org/10.1145/351827.351829\"><i>J. Experimental\nAlgorithmics</i> 5 (1): 1&ndash;23, 2000</a>.\n<p>\nThis paper shows how to use my dynamic closest pair data structure\nfrom \"<a href=\"p-dynmst.html\">Dynamic Euclidean minimum\nspanning trees</a>\" for some non-geometric problems including\nhierarchical clustering,\n<a href=\"graph-match.html\">greedy matching</a>,\nand <a href=\"tsp.html\">TSP heuristics</a>.\nExperiments show variants of my data structures to be faster than\npreviously used heuristics.\n<p>(<a href=\"../projects/pairs/\">Source code and experimental data</a> &ndash; \n<a href=\"/~eppstein/bibs/eppstein.html#Fast hierarchical clustering and other applications of dynamic closest pairs\">BibTeX</a> &ndash;\n<a href=\"/~eppstein/projects/pairs/Papers/Epp-SODA-98.pdf\">SODA paper</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Fast-hierarchical-clustering-and-other-applications-of-dynamic-closest-pairs.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein98fast.html\">CiteSeer</a> &ndash;\n<a href=\"//portal.acm.org/citation.cfm?id=351829\">ACM DL</a> &ndash;\n<a href=\"//www.jea.acm.org/2000/EppsteinDynamic/\">JEA home page</a>)\n<p>\n<li><b>Raising roofs, crashing cycles, and playing pool: applications of\na data structure for finding pairwise interactions</b>.<br>\nD. Eppstein and \n<a href=\"//compgeom.cs.uiuc.edu/~jeffe/\">J. Erickson</a>.<br>\n<a href=\"//portal.acm.org/citation.cfm?id=276891\">\n<i>14th ACM Symp. Comp. Geom.,</i> Minneapolis, 1998, pp. 58&ndash;67</a>.<br>\n<i>Disc. Comp. Geom.</i> 22 (4): 569&ndash;592, 1999 (special issue for SCG 1998).\n<p>\nWe use my dynamic closest pair data structure\nfrom \"<a href=\"p-dynmst.html\">Dynamic Euclidean minimum\nspanning trees</a>\" to detect collisions among a collection of moving\nobjects in sublinear time per collision.  As one application, we can\nconstruct the <a href=\"geom-ss.html\">straight skeleton</a> of Aichholzer et al (and the mitered\noffset curves from which it is defined) in subquadratic time.\n<p>(<a href=\"//compgeom.cs.uiuc.edu/~jeffe/pubs/cycles.html\">Jeff's publications page and copy of the journal version</a> &ndash; \n<a href=\"/~eppstein/bibs/eppstein.html#Raising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions\">BibTeX</a> &ndash;\n<a href=\"//fano.ics.uci.edu/cites/Document/Raising-roofs-crashing-cycles-and-playing-pool-applications-of-a-data-structure-for-finding-pairwise-interactions.html\">Citations</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/eppstein98raising.html\">CiteSeer</a>)\n<p>\n<li><b>Lazy algorithms for dynamic closest pair with arbitrary distance\nmeasures</b>.<br>\n<a href=\"//www.ulb.ac.be/di/scsi/jcardin/\">J. Cardinal</a> and\nD. Eppstein.<br>\nTech. Rep. 502,\nUniv. Libre de Bruxelles, Computer Science Dept., 2003.<br>\n<a href=\"//www.siam.org/meetings/alenex04/abstacts/JCardinal.pdf\">Worksh. Algorithm Engineering and\nExperiments (ALENEX), New Orleans, 2004, pp. 112&ndash;119</a>.\n<p>\nWe modify my previous data structures for dynamic closest pairs, to use\na lazy deletion mechanism, and show in experiments that the results are\nan improvement on the unmodified structures.\n<p>\n(<a href=\"//www.ics.uci.edu/~eppstein/bibs/eppstein.html#Lazy algorithms for dynamic closest pair with arbitrary distance measures\">BibTeX</a> &ndash;\n<a href=\"//citeseer.ist.psu.edu/cardinal04lazy.html\">CiteSeer</a>)\n<p>\n<li><b>Algorithms for stable matching and clustering in a grid</b>.<br>\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>, and\nN. Mamano.<br>\n<a href=\"//arxiv.org/abs/1704.02303\">arXiv:1704.02303</a><br>\n<i>Proc. 18th International Workshop on Combinatorial Image Analysis\n(IWCIA 2017)</i>, Plovdiv, Bulgaria, 2017.<br>\n<a href=\"//doi.org/10.1007/978-3-319-59108-7_10\">Springer, <i>Lecture Notes in\nComp. Sci.</i> 10256 (2017), pp. 117&ndash;131</a>.\n<p>\nMotivated by redistricting, we consider geometric variants of the stable\nmatching problem in which points (such as the pixels of a discretization\nof the unit square) are to be matched to a smaller number of centers\nsuch that each center has the same number of matches and no match is\nunstable with respect to Euclidean distances. We show how to solve such\nproblems in polylogarithmic time per matched point, experiment with\npractical heuristics for solving these problems, and test methods for\nmoving the centers to improve the shape of the matched regions.\n<p>\n<li><b>Defining equitable geographic districts in road networks via stable matching</b>.<br>\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>,\nD. Korkmaz, and\nN. Mamano.<br>\n<a href=\"//arxiv.org/abs/1706.09593\">arXiv:1706.09593</a><br>\n<a href=\"//doi.org/10.1145/3139958.3140015\"><i>Proc. 25th ACM SIGSPATIAL Int. Conf. Advances\nin Geographic Information Systems (ACM SIGSPATIAL 2017)</i>,\nRedondo Beach, California, pp. 52:1&ndash;52:4</a>.<br>\n<p>\nWe cluster road networks (modeled as planar graphs, or more generally as\ngraphs obeying a separator theorem) with a given set of cluster centers,\nby matching graph vertices to centers stably according to distance: no\nunmatched vertex and center should have smaller distances than the\nmatched pairs for the same points. We provide a separator-based data\nstructure for dynamic nearest neighbor queries in planar or separated\ngraphs, which allows the optimal stable clustering to be constructed in\ntime <i>O</i>(<i>n</i><sup>3/2</sup>log&nbsp;<i>n</i>).\nWe also experiment with heuristics for fast practical construction of\nthis clustering.\n<p>\n<li><b>Reactive proximity data structures for graphs</b>.<br>\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>, and\nN. Mamano.<br>\n<a href=\"//arxiv.org/abs/1803.04555\">arXiv:1803.04555</a>.<br>\n<i>Proc. 13th Latin American Theoretical Informatics Symposium (LATIN\n2018)</i>, Buenos Aires, Argentina.<br>\n<a href=\"//doi.org/10.1007/978-3-319-77404-6_56\">Springer, <i>Lecture Notes in\nComp. Sci.</i> 10807 (2018), pp. 777&ndash;789</a>.\n<p>\nWe develop data structures for solving nearest neighbor queries for\ndynamic subsets of vertices in a planar graph, or more generally for a\ngraph in any graph class with small separators (polynomial expansion).\n<p>\n<li><b>Stable-matching Voronoi diagrams:\ncombinatorial complexity and algorithms</b>.<br>\n<a href=\"//www.cs.technion.ac.il/~barequet/\">G. Barequet</a>,\nD. Eppstein,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>, and\nN. Mamano.<br>\n<a href=\"//arxiv.org/abs/1804.09411\">arXiv:1804.09411</a><br>\n<i>Proc. 45th International Colloquium on Automata, Languages, and\nProgramming (ICALP 2018)</i>, Prague.<br>\n<a href=\"//doi.org/10.4230/LIPIcs.ICALP.2018.89\">Leibniz International\nProceedings in Informatics (LIPIcs) 107, pp. 89:1&ndash;89:14</a>.<br>\n<p>\nThe stable-matching Voronoi diagram of a collection of point sites in\nthe plane, each with a specified area, is a collection of disjoint\nregions of the plane, one for each site and having the specified area,\nso that no pair of a point and a site are closer to each other than to\nthe farthest other site and point that they may be matched to.\nWe prove nearly-matching upper and lower bounds on the combinatorial\ncomplexity of these diagrams and provide algorithms that can compute them\nin a polynomial number of primitive steps.\n<p>\n<li><b>Stable-matching Voronoi diagrams</b>.<br>\nD. Eppstein.<br>\nInvited talk at 21st Japan Conference on Discrete and Computational Geometry, Graphs, and Games (JCDCG<sup>3</sup>), Manila, Philippines, 2018.<br>\n<p>\nWe survey the results from several of my earlier papers:\n<a href=\"p-stablegrid.html\">Algorithms for stable matching and clustering in a grid</a>,\n<a href=\"p-stableroad.html\">Defining equitable geographic districts in\nroad networks via stable matching</a>,\n<a href=\"p-graphnn.html\">Reactive proximity data structures for graphs</a>, and\n<a href=\"p-smvd.html\">Stable-matching Voronoi diagrams:\ncombinatorial complexity and algorithms</a>.\n<p>\n(<a href=\"Epp-JCDCG3-18-slides.pdf\">Slides</a>)\n<p>\n<li><b>Euclidean TSP, motorcycle graphs, and other new applications of nearest-neighbor chains</b>.<br>\n<a href=\"//www.ics.uci.edu/~nmamano/\">N. Mamano</a>,\n<a href=\"//www2.cs.arizona.edu/~alon/\">A. Efrat</a>,\nD. Eppstein,\nD. Frishberg,\n<a href=\"//www.ics.uci.edu/~goodrich/\">M. T. Goodrich</a>, and\n<a href=\"//www.cs.arizona.edu/~kobourov/\">S. G. Kobourov</a>,\n<a href=\"//pmatias.com/\">P. Matias</a>, and\n<a href=\"//weber.itn.liu.se/~valpo40/\">V. Polishchuk</a>.<br>\n<a href=\"//arxiv.org/abs/1902.06875\">arXiv:1902.06875</a>.<br>\n<i>Computational Geometry: Young Researchers Forum</i>, 2019.<br>\n<i>Proc. 30th International Symposium on Algorithms and Computation\n(ISAAC 2019)</i>, Shanghai, China, 2019.<br>\n<p>\nWe apply the nearest-neighbor chain algorithm to repeatedly find pairs\nof mutual nearest neighbors for different distances, speeding up the\ntimes for the multi-fragment TSP heuristic, motorcycle graphs, straight\nskeletons, and other problems.\n<p>\n</ul>\n\n<hr><p>\n<a href=\"geom.html\">Geometry</a> &ndash;\n<a href=\"/~eppstein/pubs/\">Publications</a> &ndash;\n<a href=\"/~eppstein/\">David Eppstein</a> &ndash;\n<a href=\"/~theory/\">Theory Group</a> &ndash;\n<a href=\"/\">Inf. &amp; Comp. Sci.</a> &ndash;\n<a href=\"//www.uci.edu/\">UC Irvine</a>\n<p>\n<small>Semi-automatically <a href=\"filter.html\">filtered</a>\nfrom a common source file.</small>\n</body></html>\n", "encoding": "ascii"}