{"url": "https://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node224.html", "content": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Exit</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Exit\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html4947 HREF=\"node225.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html4945 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html4939 HREF=\"node223.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html4949 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html4948 HREF=\"node225.html\"> Type Testing</A>\r\n<B>Up:</B> <A NAME=tex2html4946 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html4940 HREF=\"node223.html\"> Argument Passing</A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION001942000000000000000> Exit</A></H2>\r\n<P>\r\nA Prolog procedure, when called, may succeed, fail, or produce an error.\r\nThere are four basic macros provided as exit points\r\nfrom a C external predicate:\r\n<blockquote> <PRE>Succeed;\r\n</PRE></blockquote>\r\n<A NAME=3381>&#160;</A>\r\nThis causes the external procedure to terminate normally with success.\r\n<blockquote> <PRE>Fail;\r\n</PRE></blockquote>\r\n<A NAME=3384>&#160;</A>\r\n<A NAME=3385>&#160;</A>\r\n<A NAME=3386>&#160;</A>\r\n<A NAME=3387>&#160;</A>\r\nThis causes the external procedure to terminate normally with failure.\r\n<blockquote> <PRE>Succeed_If(expr);\r\n</PRE></blockquote>\r\n<A NAME=3390>&#160;</A>\r\nThis causes the external procedure to succeed if <i> expr</i> is true\r\n(in the C definition of truth, i.e. nonzero),\r\notherwise it fails.\r\n<blockquote> <PRE>Error(ErrorId);\r\n</PRE></blockquote>\r\n<A NAME=3394>&#160;</A>\r\nThis causes the external procedure to terminate abnormally,\r\nraising the error type ErrorId.\r\nWhen <tt> Succeed</tt> or <tt> Fail</tt> is called\r\ncontrol returns to the Prolog program which called the external procedure, and\r\nexecution continues normally. A call to <tt> Error()</tt> is made when for some\r\nreason an error has occurred in the execution of the external procedure. The\r\nargument to <tt> Error()</tt> is taken from a list of predefined errors. Upon a\r\ncall to <tt> Error()</tt>, control passes to the appropriate error handler, and\r\nexecution continues as described in the section on error handling.\r\nThe list of predefined errors is in the file 'error.h'.  The most common\r\nerrors will be:\r\n<DL ><DT>INSTANTIATION_FAULT\r\n<DD>        unexpected variable.\r\n<P>\r\n<DT>TYPE_ERROR\r\n<DD>        wrong type.\r\n<P>\r\n<DT>RANGE_ERROR\r\n<DD>        out of range.\r\n<P>\r\n<DT>ARITH_EXCEPTION\r\n<DD>        e.g. division by 0.\r\n<P>\r\n<DT>SYS_ERROR\r\n<DD>        operating system error.\r\nThis assumes that the system variable <tt> errno</tt> contains the system error\r\nnumber.\r\nBefore executing the <tt> Error</tt> macro, the value of <tt> errno</tt>\r\nmust be saved using <tt> Set_Errno</tt>, e.g.:\r\n<blockquote> <PRE>if (open(path, flags) &lt; 0)\r\n{\r\n    Set_Errno\r\n    Error(SYS_ERROR)\r\n}\r\n</PRE></blockquote>\r\nIf, for instance, the file to open does not exist, this\r\nwill result in an error message like\r\n<blockquote> <PRE>system interface error: No such file or directory in my_external(...)\r\n</PRE></blockquote>\r\nwhere the text &quot;No such file or directory&quot; is obtained from the operating\r\nsystem.\r\n<P>\r\n </DL>\r\nHowever, it will rarely be necessary to use the macro <tt> Error()</tt>, as\r\nthe macros described in the following provide exit points from external\r\nprocedures for the most common error cases.\r\n<P>\r\n<b> CAUTION</b>:\r\nIf the external predicate calls another function which uses\r\nsome of the return or error macros, the external predicate\r\nhas to test its return code and if it is negative,\r\nit must return to Prolog with this value:\r\n<blockquote> <PRE>int p_my_external(val, tag)\r\nvalue val;\r\ntype  tag;\r\n{\r\n    ...\r\n    if ((err = aux_func(val)) &lt; 0)\r\n    {\r\n        Error(err)\r\n    }\r\n    ...\r\n}\r\n\r\nint aux_func(val)\r\nvalue val;\r\n{\r\n    if (condition(val))\r\n        { Succeed }\r\n    else\r\n        { Error(TYPE_ERROR) }\r\n}\r\n</PRE></blockquote>\r\n<P>\r\nAfter performing an arithmetic operation on floating point numbers, which\r\nmight produce an exception, use the macro\r\n<blockquote> <PRE>Check_Float_Exception()\r\n</PRE></blockquote>\r\nwhich raises the corresponding event in the Prolog execution, if necessary.\r\n<P>\r\n<BR> <HR><A NAME=tex2html4947 HREF=\"node225.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html4945 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html4939 HREF=\"node223.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html4949 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html4948 HREF=\"node225.html\"> Type Testing</A>\r\n<B>Up:</B> <A NAME=tex2html4946 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html4940 HREF=\"node223.html\"> Argument Passing</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "encoding": "ascii"}